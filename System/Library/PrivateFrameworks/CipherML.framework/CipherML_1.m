uint64_t XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = a1;
  *(_QWORD *)(v4 + 56) = v3;
  *(double *)(v4 + 32) = a2;
  *(double *)(v4 + 40) = a3;
  return swift_task_switch();
}

uint64_t XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  int8x16_t v8;

  v2 = (void *)v0[3].i64[0];
  v1 = v0[3].i64[1];
  v4 = v0[2].i64[0];
  v3 = v0[2].i64[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  swift_retain();
  v6 = v2;
  v7 = swift_task_alloc();
  v0[4].i64[1] = v7;
  *(_QWORD *)v7 = v0;
  *(_QWORD *)(v7 + 8) = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  v8 = v0[3];
  *(_QWORD *)(v7 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:);
  *(_QWORD *)(v7 + 144) = v5;
  *(int8x16_t *)(v7 + 120) = vextq_s8(v8, v8, 8uLL);
  *(_QWORD *)(v7 + 104) = 0xD000000000000039;
  *(_QWORD *)(v7 + 112) = 0x8000000237D623A0;
  *(_QWORD *)(v7 + 88) = v0 + 1;
  *(_QWORD *)(v7 + 96) = v2;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)(void *a1, void *aBlock, uint64_t a3, double a4, double a5)
{
  _QWORD *v5;
  id v10;
  uint64_t v11;

  v5[2] = a1;
  v5[3] = a3;
  v5[4] = _Block_copy(aBlock);
  v10 = a1;
  swift_retain();
  v11 = swift_task_alloc();
  v5[5] = v11;
  *(_QWORD *)v11 = v5;
  *(_QWORD *)(v11 + 8) = @objc closure #1 in XPCHandler.requestData(by:clientConfig:);
  *(_QWORD *)(v11 + 48) = v10;
  *(_QWORD *)(v11 + 56) = a3;
  *(double *)(v11 + 32) = a4;
  *(double *)(v11 + 40) = a5;
  return swift_task_switch();
}

uint64_t XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 64) = a3;
  *(_QWORD *)(v6 + 72) = v5;
  *(double *)(v6 + 48) = a4;
  *(double *)(v6 + 56) = a5;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  int8x16_t v10;

  v2 = (void *)v0[4].i64[0];
  v1 = v0[4].i64[1];
  v4 = v0[3].i64[0];
  v3 = v0[3].i64[1];
  v6 = v0[2].i64[0];
  v5 = v0[2].i64[1];
  v7 = (_QWORD *)swift_task_alloc();
  v0[5].i64[0] = (uint64_t)v7;
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v5;
  v7[5] = v4;
  v7[6] = v3;
  swift_retain();
  v8 = v2;
  v9 = swift_task_alloc();
  v0[5].i64[1] = v9;
  *(_QWORD *)v9 = v0;
  *(_QWORD *)(v9 + 8) = XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:);
  v10 = v0[4];
  *(_QWORD *)(v9 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:);
  *(_QWORD *)(v9 + 144) = v7;
  *(int8x16_t *)(v9 + 120) = vextq_s8(v10, v10, 8uLL);
  *(_QWORD *)(v9 + 104) = 0xD000000000000036;
  *(_QWORD *)(v9 + 112) = 0x8000000237D623E0;
  *(_QWORD *)(v9 + 88) = v0 + 1;
  *(_QWORD *)(v9 + 96) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4, double a5, double a6)
{
  _QWORD *v6;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6[2] = a2;
  v6[3] = a4;
  v6[4] = _Block_copy(aBlock);
  v12 = a1;
  v13 = a2;
  swift_retain();
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v6[5] = v14;
  v6[6] = v16;
  v17 = swift_task_alloc();
  v6[7] = v17;
  *(_QWORD *)v17 = v6;
  *(_QWORD *)(v17 + 8) = @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:);
  *(_QWORD *)(v17 + 64) = v13;
  *(_QWORD *)(v17 + 72) = a4;
  *(double *)(v17 + 48) = a5;
  *(double *)(v17 + 56) = a6;
  *(_QWORD *)(v17 + 32) = v14;
  *(_QWORD *)(v17 + 40) = v16;
  return swift_task_switch();
}

uint64_t XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

{
  uint64_t v2;
  uint64_t *v3;
  void *v6;
  uint64_t v7;

  v6 = *(void **)(*v3 + 24);
  v7 = *v3;
  *(_QWORD *)(v7 + 56) = v2;
  swift_task_dealloc();

  swift_release();
  if (v2)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
}

uint64_t XPCHandler.asyncResponseData(byKeywords:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;

  v2 = (void *)v0[3];
  v1 = v0[4];
  v3 = v0[2];
  v4 = swift_task_alloc();
  v0[5] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  swift_retain();
  v5 = v2;
  v6 = (int8x16_t *)swift_task_alloc();
  v0[6] = v6;
  v6->i64[0] = (uint64_t)v0;
  v6->i64[1] = (uint64_t)XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 3);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD00000000000002BLL;
  v6[6].i64[1] = 0x8000000237D62420;
  v6[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  return RequestsManager.requestDataWithAsyncResponse(keywords:context:)(v0[5], v0[3]);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD **)(v0 + 16);
  *v2 = *(_QWORD *)(v0 + 64);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v6 + 56) = a2;
  *(_QWORD *)(v6 + 64) = a1;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v6;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v4[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = a2;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;

  v1 = v0[2].i64[1];
  v3 = (void *)v0[1].i64[0];
  v2 = v0[1].i64[1];
  v4 = swift_task_alloc();
  v0[3].i64[0] = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = v3;
  swift_retain();
  v6 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v6;
  v6->i64[0] = (uint64_t)v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:);
  v7 = v0[1];
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)partial apply;
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD00000000000002BLL;
  v6[6].i64[1] = 0x8000000237D62420;
  v6[5].i64[1] = (uint64_t)v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);

  swift_release();
  swift_bridgeObjectRelease();
  v3 = (void *)MEMORY[0x23B821F68](v2, v1);
  swift_bridgeObjectRelease();
  v4 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, void *, _QWORD))v4)[2](v4, v3, 0);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  void *v7;

  v6 = *v3;
  v7 = *(void **)(*v3 + 16);
  *(_QWORD *)(*v3 + 64) = v2;
  swift_task_dealloc();

  swift_release();
  if (!v2)
  {
    *(_QWORD *)(v6 + 72) = a2;
    *(_QWORD *)(v6 + 80) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  int8x16_t *v7;
  int8x16_t v8;

  v2 = (void *)v0[2].i64[0];
  v1 = v0[2].i64[1];
  v4 = v0[1].i64[0];
  v3 = v0[1].i64[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v4;
  swift_retain();
  v6 = v2;
  v7 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  v8 = v0[2];
  v7[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000038;
  v7[6].i64[1] = 0x8000000237D62450;
  v7[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

uint64_t XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(*v2 + 32);
  v5 = *v2;
  *(_QWORD *)(v5 + 64) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5086_s8CipherML10XPCHandlerC16similarityScores11forElements12shardIndices12clientConfigSayo48So18CMLSimilarityScoreCGGSay10Foundation4DataVG_o3So8D134CGSo09CMLClientK0CtYaKFAkA14RequestContextVyAA19StaticPECParametersVGYaKXEfU_SiAQcfu_33_5bdac5b40c7411f20a64c1277f8fd44fAQSiTf3nnnpk_nTf1cn_nTm(v0[5]);
  v0[8] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[9] = v2;
  *v2 = v0;
  v2[1] = closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  return RequestsManager.similarityScores(elements:shardIndices:context:)(v0[7], v1, v0[4]);
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 88);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 88) = a1;
  }
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  id v7;

  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v5[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v5[6] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = a3;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  id v6;
  int8x16_t *v7;
  int8x16_t v8;

  v2 = v0[2].i64[1];
  v1 = v0[3].i64[0];
  v4 = (void *)v0[1].i64[0];
  v3 = v0[1].i64[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  v6 = v4;
  swift_retain();
  v7 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  v8 = v0[1];
  v7[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)partial apply;
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000038;
  v7[6].i64[1] = 0x8000000237D62450;
  v7[5].i64[1] = (uint64_t)v4;
  return swift_task_switch();
}

{
  uint64_t v0;
  Class isa;
  void (**v2)(_QWORD, _QWORD, _QWORD);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, Class, _QWORD))v2)[2](v2, isa, 0);

  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (!v1)
  {
    *(_QWORD *)(v4 + 80) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.setPECConfig(_:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  int8x16_t v7;

  v2 = (void *)v0[5];
  v1 = v0[6];
  v3 = v0[4];
  v4 = swift_task_alloc();
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  swift_retain();
  v5 = v2;
  v6 = swift_task_alloc();
  v0[8] = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 5);
  *(_QWORD *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.setPECConfig(_:clientConfig:);
  *(_QWORD *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 104) = 0xD00000000000001DLL;
  *(_QWORD *)(v6 + 112) = 0x8000000237D62490;
  *(_QWORD *)(v6 + 88) = v0 + 2;
  *(_QWORD *)(v6 + 96) = v2;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.setPECConfig(_:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.setPECConfig(_:clientConfig:);
  return RequestsManager.setPECConfig(config:context:)(v0[5], v0[3]);
}

{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 56), *(int8x16_t *)(v0 + 56), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v6 + 56) = a2;
  *(_QWORD *)(v6 + 64) = a1;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v8;
  id v9;
  _QWORD *v10;

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  v8 = a1;
  v9 = a2;
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  v4[6] = v10;
  *v10 = v4;
  v10[1] = @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:);
  v10[5] = v9;
  v10[6] = a4;
  v10[4] = v8;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(void **)(*v3 + 24);
  v9 = *(void **)(*v3 + 16);
  v10 = *v3;
  swift_task_dealloc();

  swift_release();
  if (v4)
  {
    v11 = _convertErrorToNSError(_:)();

    isa = 0;
    v13 = (void *)v11;
  }
  else if (a2 >> 60 == 15)
  {
    v11 = 0;
    isa = 0;
    v13 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    v11 = 0;
    v13 = isa;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 40);
  ((void (**)(_QWORD, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  int8x16_t v8;

  v2 = (void *)v0[3].i64[0];
  v1 = v0[3].i64[1];
  v4 = v0[2].i64[0];
  v3 = v0[2].i64[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v4;
  swift_retain();
  v6 = v2;
  v7 = swift_task_alloc();
  v0[4].i64[1] = v7;
  *(_QWORD *)v7 = v0;
  *(_QWORD *)(v7 + 8) = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  v8 = v0[3];
  *(_QWORD *)(v7 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:);
  *(_QWORD *)(v7 + 144) = v5;
  *(int8x16_t *)(v7 + 120) = vextq_s8(v8, v8, 8uLL);
  *(_QWORD *)(v7 + 104) = 0xD000000000000033;
  *(_QWORD *)(v7 + 112) = 0x8000000237D624B0;
  *(_QWORD *)(v7 + 88) = v0 + 1;
  *(_QWORD *)(v7 + 96) = v2;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5086_s8CipherML10XPCHandlerC16similarityScores11forElements12shardIndices12clientConfigSayo48So18CMLSimilarityScoreCGGSay10Foundation4DataVG_o3So8D134CGSo09CMLClientK0CtYaKFAkA14RequestContextVyAA19StaticPECParametersVGYaKXEfU_SiAQcfu_33_5bdac5b40c7411f20a64c1277f8fd44fAQSiTf3nnnpk_nTf1cn_nTm(v0[5]);
  v0[8] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[9] = v2;
  *v2 = v0;
  v2[1] = closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:);
  return RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)(v0[7], v1, v0[4]);
}

{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 24) = vextq_s8(*(int8x16_t *)(v0 + 88), *(int8x16_t *)(v0 + 88), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 80) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 88) = a2;
    *(_QWORD *)(v6 + 96) = a1;
  }
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;

  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[5] = v8;
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[6] = v9;
  v10 = a3;
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc();
  v5[7] = v11;
  *v11 = v5;
  v11[1] = @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:);
  v11[6] = v10;
  v11[7] = a5;
  v11[4] = v8;
  v11[5] = v9;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(void **)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    v10 = _convertErrorToNSError(_:)();

    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a1, a2);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int8x16_t *v7;
  int8x16_t v8;
  __int128 v10;

  v2 = *(void **)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v10 = *(_OWORD *)(v0 + 16);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v5;
  *(_QWORD *)(v5 + 16) = v1;
  *(_OWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 48) = v3;
  swift_retain();
  v6 = v2;
  v7 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v7;
  v7->i64[0] = v0;
  v7->i64[1] = (uint64_t)XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  v8 = *(int8x16_t *)(v0 + 48);
  v7[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  v7[8].i64[1] = v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000052;
  v7[6].i64[1] = 0x8000000237D624F0;
  v7[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

uint64_t XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(*v2 + 48);
  v5 = *v2;
  *(_QWORD *)(v5 + 80) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  return RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)(v0[5], v0[6], v0[7], v0[8], v0[3]);
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 80) = a1;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(int a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *aBlock, uint64_t a7)
{
  _QWORD *v7;
  id v10;
  id v11;

  v7[5] = a5;
  v7[6] = a7;
  v7[3] = a3;
  v7[4] = a4;
  v7[2] = a2;
  v7[7] = _Block_copy(aBlock);
  v7[8] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a4;
  v11 = a5;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int8x16_t *v7;
  int8x16_t v8;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(void **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v10 = *(_OWORD *)(v0 + 16);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v1;
  *(_OWORD *)(v5 + 32) = v10;
  *(_QWORD *)(v5 + 48) = v4;
  v6 = v3;
  swift_retain();
  v7 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v7;
  v7->i64[0] = v0;
  v7->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:);
  v8 = *(int8x16_t *)(v0 + 40);
  v7[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)partial apply;
  v7[8].i64[1] = v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000052;
  v7[6].i64[1] = 0x8000000237D624F0;
  v7[5].i64[1] = (uint64_t)v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  Class isa;
  void (**v3)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 40);

  swift_release();
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 56);
  ((void (**)(_QWORD, Class, _QWORD))v3)[2](v3, isa, 0);

  _Block_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 88);
  v2 = *(void **)(v0 + 40);

  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v3 = (void *)_convertErrorToNSError(_:)();

  v4 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 56);
  ((void (**)(_QWORD, _QWORD, void *))v4)[2](v4, 0, v3);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 40);
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();

  swift_release();
  if (!v1)
  {
    *(_QWORD *)(v4 + 96) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  int8x16_t *v7;
  int8x16_t v8;

  v2 = (void *)v0[2].i64[0];
  v1 = v0[2].i64[1];
  v4 = v0[1].i64[0];
  v3 = v0[1].i64[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  swift_retain();
  v6 = v2;
  v7 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)XPCHandler.similarityScores(forElements:shardIndices:clientConfig:);
  v8 = v0[2];
  v7[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:);
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD00000000000002ELL;
  v7[6].i64[1] = 0x8000000237D62550;
  v7[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:);
  return RequestsManager.decryptBatch(batchOfSimilarityScores:context:)(v0[5], v0[6], v0[3]);
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v7 = a1;
  v8 = a2;
  swift_retain();
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v4[5] = v9;
  v4[6] = v11;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  id v6;
  int8x16_t *v7;
  int8x16_t v8;

  v2 = v0[2].i64[1];
  v1 = v0[3].i64[0];
  v4 = (void *)v0[1].i64[0];
  v3 = v0[1].i64[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v1;
  v6 = v4;
  swift_retain();
  v7 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:);
  v8 = v0[1];
  v7[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)partial apply;
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD00000000000002ELL;
  v7[6].i64[1] = 0x8000000237D62550;
  v7[5].i64[1] = (uint64_t)v4;
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  Class isa;
  void (**v4)(_QWORD, _QWORD, _QWORD);

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);

  swift_release();
  outlined consume of Data._Representation(v2, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, Class, _QWORD))v4)[2](v4, isa, 0);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 40);

  swift_release();
  outlined consume of Data._Representation(v3, v2);
  swift_task_dealloc();
  v4 = (void *)_convertErrorToNSError(_:)();

  v5 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, _QWORD, void *))v5)[2](v5, 0, v4);

  _Block_release(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (!v1)
  {
    *(_QWORD *)(v4 + 80) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  int8x16_t *v7;
  int8x16_t v8;

  v2 = (void *)v0[2].i64[0];
  v1 = v0[2].i64[1];
  v4 = v0[1].i64[0];
  v3 = v0[1].i64[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v4;
  swift_retain();
  v6 = v2;
  v7 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  v8 = v0[2];
  v7[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000045;
  v7[6].i64[1] = 0x8000000237D62580;
  v7[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

uint64_t XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  void *v6;
  uint64_t v7;

  v6 = *(void **)(*v3 + 32);
  v7 = *v3;
  *(_QWORD *)(v7 + 64) = v2;
  swift_task_dealloc();

  swift_release();
  if (v2)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
}

uint64_t closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5086_s8CipherML10XPCHandlerC16similarityScores11forElements12shardIndices12clientConfigSayo48So18CMLSimilarityScoreCGGSay10Foundation4DataVG_o3So8D134CGSo09CMLClientK0CtYaKFAkA14RequestContextVyAA19StaticPECParametersVGYaKXEfU_SiAQcfu_33_5bdac5b40c7411f20a64c1277f8fd44fAQSiTf3nnnpk_nTf1cn_nTm(v0[5]);
  v0[8] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[9] = v2;
  *v2 = v0;
  v2[1] = closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  return RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)(v0[7], v1, v0[4]);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD **)(v0 + 24);
  *v2 = *(_QWORD *)(v0 + 96);
  v2[1] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 80) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 88) = a2;
    *(_QWORD *)(v6 + 96) = a1;
  }
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  id v7;

  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v5[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v5[6] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = a3;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  id v6;
  int8x16_t *v7;
  int8x16_t v8;

  v2 = v0[2].i64[1];
  v1 = v0[3].i64[0];
  v4 = (void *)v0[1].i64[0];
  v3 = v0[1].i64[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  v6 = v4;
  swift_retain();
  v7 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:);
  v8 = v0[1];
  v7[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)partial apply;
  v7[8].i64[1] = (uint64_t)v5;
  v7[7] = vextq_s8(v8, v8, 8uLL);
  v7[6].i64[0] = 0xD000000000000045;
  v7[6].i64[1] = 0x8000000237D62580;
  v7[5].i64[1] = (uint64_t)v4;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = (void *)MEMORY[0x23B821F68](v2, v1);
  swift_bridgeObjectRelease();
  v4 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, void *, _QWORD))v4)[2](v4, v3, 0);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  void *v7;

  v6 = *v3;
  v7 = *(void **)(*v3 + 16);
  *(_QWORD *)(*v3 + 72) = v2;
  swift_task_dealloc();

  swift_release();
  if (!v2)
  {
    *(_QWORD *)(v6 + 80) = a2;
    *(_QWORD *)(v6 + 88) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t XPCHandler.queryStatus(for:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.queryStatus(for:options:)()
{
  _QWORD *v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)v0[2];
  swift_retain();
  v2 = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = v3;
  *v3 = v0;
  v3[1] = XPCHandler.queryStatus(for:options:);
  v5 = v0[3];
  v4 = v0[4];
  v3[15] = v0[2];
  v3[16] = v5;
  v3[13] = 0x8000000237D625D0;
  v3[14] = v4;
  v3[11] = v1;
  v3[12] = 0xD000000000000019;
  return swift_task_switch();
}

uint64_t XPCHandler.queryStatus(for:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc();

  v6 = swift_release();
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t @objc closure #1 in XPCHandler.queryStatus(for:options:)(void *a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v6;

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  v6 = a1;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.queryStatus(for:options:)()
{
  _QWORD *v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)v0[2];
  v2 = v1;
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  *v3 = v0;
  v3[1] = @objc closure #1 in XPCHandler.queryStatus(for:options:);
  v5 = v0[3];
  v4 = v0[4];
  v3[15] = v0[2];
  v3[16] = v5;
  v3[13] = 0x8000000237D625D0;
  v3[14] = v4;
  v3[11] = v1;
  v3[12] = 0xD000000000000019;
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 64);
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 40);

  swift_release();
  ((void (**)(_QWORD, void *, _QWORD))v2)[2](v2, v1, 0);
  _Block_release(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);
  void *v3;

  v1 = *(void **)(v0 + 56);
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 40);

  swift_release();
  v3 = (void *)_convertErrorToNSError(_:)();

  ((void (**)(_QWORD, _QWORD, void *))v2)[2](v2, 0, v3);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.queryStatus(for:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc();

  swift_release();
  if (!v1)
    *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.listUseCaseGroups()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = XPCHandler.listUseCaseGroups();
  v2 = *(_QWORD *)(v0 + 16);
  v1[4] = 0x8000000237D625F0;
  v1[5] = v2;
  v1[3] = 0xD000000000000013;
  return swift_task_switch();
}

uint64_t XPCHandler.listUseCaseGroups()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  swift_task_dealloc();
  v5 = swift_release();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t @objc closure #1 in XPCHandler.listUseCaseGroups()(const void *a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.listUseCaseGroups()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = @objc closure #1 in XPCHandler.listUseCaseGroups();
  v2 = *(_QWORD *)(v0 + 16);
  v1[4] = 0x8000000237D625F0;
  v1[5] = v2;
  v1[3] = 0xD000000000000013;
  return swift_task_switch();
}

{
  uint64_t v0;
  Class isa;
  void (**v2)(_QWORD, _QWORD, _QWORD);

  swift_release();
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for CMLUseCaseGroup);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 24);
  ((void (**)(_QWORD, Class, _QWORD))v2)[2](v2, isa, 0);

  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void (**v3)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 40);
  swift_release();
  v2 = (void *)_convertErrorToNSError(_:)();

  v3 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 24);
  ((void (**)(_QWORD, _QWORD, void *))v3)[2](v3, 0, v2);

  _Block_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.listUseCaseGroups()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc();
  swift_release();
  if (!v1)
    *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v1 = *(void **)(v0 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = v1;
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)v3 = v0;
  *(_QWORD *)(v3 + 8) = XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(v0 + 32);
  *(_OWORD *)(v3 + 128) = v5;
  *(_QWORD *)(v3 + 112) = 0x8000000237D62610;
  *(_QWORD *)(v3 + 120) = v4;
  *(_OWORD *)(v3 + 96) = xmmword_237D57B30;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  _QWORD *v4;

  v1 = *(void **)(*(_QWORD *)(v0 + 80) + 24);
  v2 = (void *)MEMORY[0x23B821F68](0xD000000000000030, 0x8000000237D62D10);
  v3 = objc_msgSend(v1, sel_valueForEntitlement_, v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }
  outlined init with take of Any?(v0 + 48, v0 + 16);
  if (!*(_QWORD *)(v0 + 40))
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + 16, &demangling cache variable for type metadata for Any?);
LABEL_9:
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    *v4 = 0xD000000000000030;
    v4[1] = 0x8000000237D62D10;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if ((swift_dynamicCast() & 1) == 0 || *(_BYTE *)(v0 + 112) != 1)
    goto LABEL_9;
  RequestsManager.configureUseCaseGroup(name:group:)(*(Swift::String *)(v0 + 88), *(CMLUseCaseGroup_optional **)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  id v7;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v4[5] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[6] = v6;
  v7 = a2;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(id *)(v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)v2 = v0;
  *(_QWORD *)(v2 + 8) = @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 136) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v2 + 144) = v5;
  *(_QWORD *)(v2 + 120) = v4;
  *(_QWORD *)(v2 + 128) = v3;
  *(_QWORD *)(v2 + 112) = 0x8000000237D62610;
  *(_OWORD *)(v2 + 96) = xmmword_237D57B30;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(void **)(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, _QWORD))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = *(void **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(void **)(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();

  v4 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

  _Block_release(*(const void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[14];
  if (v4)
  {
    v6 = v0[13];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[20] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v0[11], v0[15], v0[16], v0[17], v0[18]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTQ1_()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v33 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 96);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 168);
  v32 = *(void **)(v0 + 128);
  v25 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_693;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in XPCHandler.requestData(byIndices:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[14];
  if (v4)
  {
    v6 = v0[13];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[20] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v0[11], v0[15], v0[16], v0[17], v0[18]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTQ1_()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataV_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T5V_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v33 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 96);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 168);
  v32 = *(void **)(v0 + 128);
  v25 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_581;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[14];
  if (v4)
  {
    v6 = v0[13];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[20] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v0[11], v0[15], v0[16], v0[17], v0[18]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTQ1_()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFyt_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_yt_Tg5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlyytIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v33 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 96);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 168);
  v32 = *(void **)(v0 + 128);
  v25 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_656;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return swift_task_switch();
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 152) = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 112);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 104);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v9;
  *(_QWORD *)v9 = v0;
  *(_QWORD *)(v9 + 8) = specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:);
  v10 = *(_QWORD *)(v0 + 144);
  v11 = *(_OWORD *)(v0 + 120);
  *(_QWORD *)(v9 + 96) = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v9 + 104) = v10;
  *(_OWORD *)(v9 + 80) = v11;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  swift_release();
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v33 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 96);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 168);
  v32 = *(void **)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 112);
  v25 = *(_QWORD *)(v0 + 104);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_2;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[17] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[13];
  if (v4)
  {
    v6 = v0[12];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[18] = v9;
  *v9 = v0;
  v9[1] = specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:);
  return RequestsManager.queryStatus(for:options:)(v0[15], v0[16]);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 152);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 152);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 88);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_544;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[2];

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 32);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 24);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v15[0] = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 48);
  v10 = v9 + 4;
  v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v10, v15);
  os_unfair_lock_unlock(v11);
  v12 = *(_QWORD *)(v15[0] + 32);
  swift_bridgeObjectRetain();
  swift_release();
  v13 = specialized _NativeDictionary.mapValues<A>(_:)(v12);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[14];
  if (v4)
  {
    v6 = v0[13];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[20] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v0[11], v0[15], v0[16], v0[17], v0[18]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTQ1_()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v33 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 96);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 168);
  v32 = *(void **)(v0 + 128);
  v25 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_643;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[17] = a8;
  v8[18] = v10;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a3;
  v8[14] = a4;
  v8[11] = a1;
  v8[12] = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[14];
  if (v4)
  {
    v6 = v0[13];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[20] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v0[11], v0[15], v0[16], v0[17], v0[18]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTQ1_()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY2_()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 128);
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlF10Foundation4DataVSg_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r82O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_10Foundation4T7VSg_Tg5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nnncn_nTY3_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 168);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v33 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 96);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 96), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 168);
  v32 = *(void **)(v0 + 128);
  v25 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_594;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v5[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v5[11] = swift_task_alloc();
  v6 = type metadata accessor for UseCaseGroup();
  v5[12] = v6;
  v5[13] = *(_QWORD *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v5;
  uint64_t v6;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v5[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v5[11] = swift_task_alloc();
  v6 = type metadata accessor for UseCaseGroup();
  v5[12] = v6;
  v5[13] = *(_QWORD *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int *v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  int *v49;
  uint64_t v50[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v50);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 48);
  v5 = v50[0];
  *(_QWORD *)(v0 + 120) = v50[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v50[0] = v33;
      *(_DWORD *)v32 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v31, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v33, -1, -1);
      v29 = v32;
      goto LABEL_14;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v15 = *(_QWORD *)v13;
  v14 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  v18 = *(_QWORD *)(v13 + 32);
  v19 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if ((v19 & 0x80000000) == 0)
    goto LABEL_10;
  v45 = v14;
  v46 = v16;
  v47 = v18;
  v48 = v15;
  v20 = v7;
  v22 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 88);
  v44 = v20;
  AllowList.group(useCase:)(v20, v9, v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v22) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v50[0] = v28;
      *(_DWORD *)v27 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v9, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v26, "No group found for use-case '%{public}s'", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v28, -1, -1);
      v29 = v27;
LABEL_14:
      MEMORY[0x23B822DA8](v29, -1, -1);
LABEL_16:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_15;
  }
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 88);
  v37 = *(_QWORD *)(v0 + 96);
  v39 = *(_QWORD *)(v0 + 72);
  v38 = *(_QWORD *)(v0 + 80);
  v40 = *(void **)(v0 + 48);
  v41 = *(int **)(v0 + 56);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v36, v35);
  outlined init with copy of NetworkConfig(v35 + *(int *)(v37 + 36), v38 + *(int *)(v39 + 32));
  *(_BYTE *)(v38 + 24) = v46 & 1;
  *(_QWORD *)(v38 + 32) = v17;
  *(_BYTE *)(v38 + 40) = v47 & 1;
  *(_QWORD *)(v38 + 8) = v48;
  *(_QWORD *)(v38 + 16) = v45;
  *(_QWORD *)v38 = v40;
  v49 = (int *)((char *)v41 + *v41);
  v42 = v40;
  v43 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v43;
  *v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(_QWORD, _QWORD))v49)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  void *v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v49);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 48);
  v5 = v49[0];
  *(_QWORD *)(v0 + 120) = v49[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v30))
    {
      v31 = v7;
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v49[0] = v33;
      *(_DWORD *)v32 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v30, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v33, -1, -1);
      MEMORY[0x23B822DA8](v32, -1, -1);
      goto LABEL_15;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v14 = *(_QWORD *)(v13 + 8);
  v47 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 24);
  v17 = *(_QWORD *)(v13 + 32);
  v18 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if ((v18 & 0x80000000) == 0)
    goto LABEL_10;
  v44 = v14;
  v45 = v15;
  v46 = v16;
  v19 = v7;
  v21 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 88);
  v23 = v19;
  AllowList.group(useCase:)(v19, v9, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v49[0] = v28;
      *(_DWORD *)v27 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v26, "No group found for use-case '%{public}s'", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v28, -1, -1);
      MEMORY[0x23B822DA8](v27, -1, -1);
LABEL_15:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_14;
  }
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 88);
  v37 = *(_QWORD *)(v0 + 96);
  v39 = *(_QWORD *)(v0 + 72);
  v38 = *(_QWORD *)(v0 + 80);
  v41 = *(void **)(v0 + 48);
  v40 = *(int **)(v0 + 56);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v36, v35);
  outlined init with copy of NetworkConfig(v35 + *(int *)(v37 + 36), v38 + *(int *)(v39 + 32));
  *(_BYTE *)(v38 + 24) = v45 & 1;
  *(_QWORD *)(v38 + 32) = v46;
  *(_BYTE *)(v38 + 40) = v17 & 1;
  *(_QWORD *)(v38 + 8) = v47;
  *(_QWORD *)(v38 + 16) = v44;
  *(_QWORD *)v38 = v41;
  v48 = (int *)((char *)v40 + *v40);
  v42 = v41;
  v43 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v43;
  *v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(uint64_t, _QWORD))v48)(v0 + 16, *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  v3 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  void *v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v49);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 48);
  v5 = v49[0];
  *(_QWORD *)(v0 + 120) = v49[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v30))
    {
      v31 = v7;
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v49[0] = v33;
      *(_DWORD *)v32 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v30, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v33, -1, -1);
      MEMORY[0x23B822DA8](v32, -1, -1);
      goto LABEL_15;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v14 = *(_QWORD *)(v13 + 8);
  v47 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 24);
  v17 = *(_QWORD *)(v13 + 32);
  v18 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if ((v18 & 0x80000000) == 0)
    goto LABEL_10;
  v44 = v14;
  v45 = v15;
  v46 = v16;
  v19 = v7;
  v21 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 88);
  v23 = v19;
  AllowList.group(useCase:)(v19, v9, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v49[0] = v28;
      *(_DWORD *)v27 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v26, "No group found for use-case '%{public}s'", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v28, -1, -1);
      MEMORY[0x23B822DA8](v27, -1, -1);
LABEL_15:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_14;
  }
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 88);
  v37 = *(_QWORD *)(v0 + 96);
  v39 = *(_QWORD *)(v0 + 72);
  v38 = *(_QWORD *)(v0 + 80);
  v41 = *(void **)(v0 + 48);
  v40 = *(int **)(v0 + 56);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v36, v35);
  outlined init with copy of NetworkConfig(v35 + *(int *)(v37 + 36), v38 + *(int *)(v39 + 32));
  *(_BYTE *)(v38 + 24) = v45 & 1;
  *(_QWORD *)(v38 + 32) = v46;
  *(_BYTE *)(v38 + 40) = v17 & 1;
  *(_QWORD *)(v38 + 8) = v47;
  *(_QWORD *)(v38 + 16) = v44;
  *(_QWORD *)v38 = v41;
  v48 = (int *)((char *)v40 + *v40);
  v42 = v41;
  v43 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v43;
  *v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(uint64_t, _QWORD))v48)(v0 + 16, *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int *v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  int *v49;
  uint64_t v50[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v50);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 48);
  v5 = v50[0];
  *(_QWORD *)(v0 + 120) = v50[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v50[0] = v33;
      *(_DWORD *)v32 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v31, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v33, -1, -1);
      v29 = v32;
      goto LABEL_14;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v15 = *(_QWORD *)v13;
  v14 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  v18 = *(_QWORD *)(v13 + 32);
  v19 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if ((v19 & 0x80000000) == 0)
    goto LABEL_10;
  v45 = v14;
  v46 = v16;
  v47 = v18;
  v48 = v15;
  v20 = v7;
  v22 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 88);
  v44 = v20;
  AllowList.group(useCase:)(v20, v9, v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v22) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v50[0] = v28;
      *(_DWORD *)v27 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v9, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v26, "No group found for use-case '%{public}s'", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v28, -1, -1);
      v29 = v27;
LABEL_14:
      MEMORY[0x23B822DA8](v29, -1, -1);
LABEL_16:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_15;
  }
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 88);
  v37 = *(_QWORD *)(v0 + 96);
  v39 = *(_QWORD *)(v0 + 72);
  v38 = *(_QWORD *)(v0 + 80);
  v40 = *(void **)(v0 + 48);
  v41 = *(int **)(v0 + 56);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v36, v35);
  outlined init with copy of NetworkConfig(v35 + *(int *)(v37 + 36), v38 + *(int *)(v39 + 32));
  *(_BYTE *)(v38 + 24) = v46 & 1;
  *(_QWORD *)(v38 + 32) = v17;
  *(_BYTE *)(v38 + 40) = v47 & 1;
  *(_QWORD *)(v38 + 8) = v48;
  *(_QWORD *)(v38 + 16) = v45;
  *(_QWORD *)v38 = v40;
  v49 = (int *)((char *)v41 + *v41);
  v42 = v40;
  v43 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v43;
  *v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(_QWORD, _QWORD))v49)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  void *v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v49);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 56);
  v5 = v49[0];
  *(_QWORD *)(v0 + 128) = v49[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v30))
    {
      v31 = v7;
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v49[0] = v33;
      *(_DWORD *)v32 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v30, "Unknown/Invalid PIR use-case '%{public}s'", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v33, -1, -1);
      MEMORY[0x23B822DA8](v32, -1, -1);
      goto LABEL_15;
    }
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v14 = *(_QWORD *)(v13 + 8);
  v47 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 24);
  v17 = *(_QWORD *)(v13 + 32);
  v18 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if ((v18 & 0x80000000) == 0)
    goto LABEL_10;
  v44 = v14;
  v45 = v15;
  v46 = v16;
  v19 = v7;
  v21 = *(_QWORD *)(v0 + 104);
  v20 = *(_QWORD *)(v0 + 112);
  v22 = *(_QWORD *)(v0 + 96);
  v23 = v19;
  AllowList.group(useCase:)(v19, v9, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 96), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v49[0] = v28;
      *(_DWORD *)v27 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v25, v26, "No group found for use-case '%{public}s'", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v28, -1, -1);
      MEMORY[0x23B822DA8](v27, -1, -1);
LABEL_15:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_14;
  }
  v35 = *(_QWORD *)(v0 + 120);
  v36 = *(_QWORD *)(v0 + 96);
  v37 = *(_QWORD *)(v0 + 104);
  v39 = *(_QWORD *)(v0 + 80);
  v38 = *(_QWORD *)(v0 + 88);
  v41 = *(void **)(v0 + 56);
  v40 = *(int **)(v0 + 64);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v36, v35);
  outlined init with copy of NetworkConfig(v35 + *(int *)(v37 + 36), v38 + *(int *)(v39 + 32));
  *(_BYTE *)(v38 + 24) = v45 & 1;
  *(_QWORD *)(v38 + 32) = v46;
  *(_BYTE *)(v38 + 40) = v17 & 1;
  *(_QWORD *)(v38 + 8) = v47;
  *(_QWORD *)(v38 + 16) = v44;
  *(_QWORD *)v38 = v41;
  v48 = (int *)((char *)v40 + *v40);
  v42 = v41;
  v43 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v43;
  *v43 = v0;
  v43[1] = specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(uint64_t, _QWORD))v48)(v0 + 16, *(_QWORD *)(v0 + 88));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[11] = swift_task_alloc();
  v5 = type metadata accessor for UseCaseGroup();
  v4[12] = v5;
  v4[13] = *(_QWORD *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[11] = swift_task_alloc();
  v5 = type metadata accessor for UseCaseGroup();
  v4[12] = v5;
  v4[13] = *(_QWORD *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v4;
  uint64_t v5;

  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v4[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[12] = swift_task_alloc();
  v5 = type metadata accessor for UseCaseGroup();
  v4[13] = v5;
  v4[14] = *(_QWORD *)(v5 - 8);
  v4[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[11] = swift_task_alloc();
  v5 = type metadata accessor for UseCaseGroup();
  v4[12] = v5;
  v4[13] = *(_QWORD *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[11] = swift_task_alloc();
  v5 = type metadata accessor for UseCaseGroup();
  v4[12] = v5;
  v4[13] = *(_QWORD *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v4;
  uint64_t v5;

  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v4[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v4[12] = swift_task_alloc();
  v5 = type metadata accessor for UseCaseGroup();
  v4[13] = v5;
  v4[14] = *(_QWORD *)(v5 - 8);
  v4[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int *v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v49);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 48);
  v5 = v49[0];
  *(_QWORD *)(v0 + 120) = v49[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v23 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v49[0] = v31;
      *(_DWORD *)v30 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v23, v29, "Unknown/Invalid PEC use-case '%{public}s'", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v31, -1, -1);
      v27 = v30;
      goto LABEL_14;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v46 = *(_QWORD *)(v13 + 32);
  v47 = *(_QWORD *)(v13 + 24);
  v17 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if (v17 < 0)
    goto LABEL_10;
  v44 = v16;
  v45 = v14;
  v19 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 104);
  v20 = v7;
  v21 = *(_QWORD *)(v0 + 88);
  v42 = v20;
  AllowList.group(useCase:)(v20, v9, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v21, 1, v19) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v49[0] = v26;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v23, v24, "No group found for use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v26, -1, -1);
      v27 = v25;
LABEL_14:
      MEMORY[0x23B822DA8](v27, -1, -1);
LABEL_16:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_15;
  }
  v43 = v17;
  v33 = *(_QWORD *)(v0 + 112);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 96);
  v37 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 80);
  v38 = *(void **)(v0 + 48);
  v39 = *(int **)(v0 + 56);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v34, v33);
  outlined init with copy of NetworkConfig(v33 + *(int *)(v35 + 36), v36 + *(int *)(v37 + 32));
  *(_QWORD *)(v36 + 16) = v15;
  *(_QWORD *)(v36 + 24) = v44;
  *(_QWORD *)(v36 + 32) = v47;
  *(_QWORD *)(v36 + 40) = v46;
  *(_BYTE *)(v36 + 48) = v43 & 1;
  *(_QWORD *)v36 = v38;
  *(_QWORD *)(v36 + 8) = v45;
  v48 = (int *)((char *)v39 + *v39);
  v40 = v38;
  v41 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v41;
  *v41 = v0;
  v41[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(uint64_t, _QWORD))v48)(v0 + 16, *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  void *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v50);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 48);
  v5 = v50[0];
  *(_QWORD *)(v0 + 120) = v50[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v24 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v50[0] = v32;
      *(_DWORD *)v31 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v24, v30, "Unknown/Invalid PEC use-case '%{public}s'", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v32, -1, -1);
      v28 = v31;
      goto LABEL_14;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  v48 = *(_QWORD *)(v13 + 32);
  v18 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if (v18 < 0)
    goto LABEL_10;
  v45 = v16;
  v46 = v15;
  v47 = v14;
  v19 = v7;
  v21 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 88);
  v43 = v19;
  AllowList.group(useCase:)(v19, v9, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v50[0] = v27;
      *(_DWORD *)v26 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v9, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v24, v25, "No group found for use-case '%{public}s'", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v27, -1, -1);
      v28 = v26;
LABEL_14:
      MEMORY[0x23B822DA8](v28, -1, -1);
LABEL_16:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_15;
  }
  v44 = v18;
  v34 = *(_QWORD *)(v0 + 112);
  v35 = *(_QWORD *)(v0 + 88);
  v36 = *(_QWORD *)(v0 + 96);
  v38 = *(_QWORD *)(v0 + 72);
  v37 = *(_QWORD *)(v0 + 80);
  v40 = *(void **)(v0 + 48);
  v39 = *(int **)(v0 + 56);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v35, v34);
  outlined init with copy of NetworkConfig(v34 + *(int *)(v36 + 36), v37 + *(int *)(v38 + 32));
  *(_QWORD *)(v37 + 16) = v46;
  *(_QWORD *)(v37 + 24) = v45;
  *(_QWORD *)(v37 + 32) = v17;
  *(_QWORD *)(v37 + 40) = v48;
  *(_BYTE *)(v37 + 48) = v44 & 1;
  *(_QWORD *)v37 = v40;
  *(_QWORD *)(v37 + 8) = v47;
  v49 = (int *)((char *)v39 + *v39);
  v41 = v40;
  v42 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v42;
  *v42 = v0;
  v42[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(_QWORD, _QWORD))v49)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  void *v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v50);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 48);
  v5 = v50[0];
  *(_QWORD *)(v0 + 120) = v50[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v24 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v50[0] = v32;
      *(_DWORD *)v31 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v24, v30, "Unknown/Invalid PEC use-case '%{public}s'", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v32, -1, -1);
      v28 = v31;
      goto LABEL_14;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  v48 = *(_QWORD *)(v13 + 32);
  v18 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if (v18 < 0)
    goto LABEL_10;
  v45 = v16;
  v46 = v15;
  v47 = v14;
  v19 = v7;
  v21 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 88);
  v43 = v19;
  AllowList.group(useCase:)(v19, v9, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v50[0] = v27;
      *(_DWORD *)v26 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v9, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v24, v25, "No group found for use-case '%{public}s'", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v27, -1, -1);
      v28 = v26;
LABEL_14:
      MEMORY[0x23B822DA8](v28, -1, -1);
LABEL_16:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_15;
  }
  v44 = v18;
  v34 = *(_QWORD *)(v0 + 112);
  v35 = *(_QWORD *)(v0 + 88);
  v36 = *(_QWORD *)(v0 + 96);
  v38 = *(_QWORD *)(v0 + 72);
  v37 = *(_QWORD *)(v0 + 80);
  v40 = *(void **)(v0 + 48);
  v39 = *(int **)(v0 + 56);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v35, v34);
  outlined init with copy of NetworkConfig(v34 + *(int *)(v36 + 36), v37 + *(int *)(v38 + 32));
  *(_QWORD *)(v37 + 16) = v46;
  *(_QWORD *)(v37 + 24) = v45;
  *(_QWORD *)(v37 + 32) = v17;
  *(_QWORD *)(v37 + 40) = v48;
  *(_BYTE *)(v37 + 48) = v44 & 1;
  *(_QWORD *)v37 = v40;
  *(_QWORD *)(v37 + 8) = v47;
  v49 = (int *)((char *)v39 + *v39);
  v41 = v40;
  v42 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v42;
  *v42 = v0;
  v42[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(_QWORD, _QWORD))v49)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int *v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v49);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 48);
  v5 = v49[0];
  *(_QWORD *)(v0 + 120) = v49[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v23 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v49[0] = v31;
      *(_DWORD *)v30 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v23, v29, "Unknown/Invalid PEC use-case '%{public}s'", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v31, -1, -1);
      v27 = v30;
      goto LABEL_14;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v46 = *(_QWORD *)(v13 + 32);
  v47 = *(_QWORD *)(v13 + 24);
  v17 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if (v17 < 0)
    goto LABEL_10;
  v44 = v16;
  v45 = v14;
  v19 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 104);
  v20 = v7;
  v21 = *(_QWORD *)(v0 + 88);
  v42 = v20;
  AllowList.group(useCase:)(v20, v9, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v21, 1, v19) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v49[0] = v26;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v23, v24, "No group found for use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v26, -1, -1);
      v27 = v25;
LABEL_14:
      MEMORY[0x23B822DA8](v27, -1, -1);
LABEL_16:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_15;
  }
  v43 = v17;
  v33 = *(_QWORD *)(v0 + 112);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 96);
  v37 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 80);
  v38 = *(void **)(v0 + 48);
  v39 = *(int **)(v0 + 56);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v34, v33);
  outlined init with copy of NetworkConfig(v33 + *(int *)(v35 + 36), v36 + *(int *)(v37 + 32));
  *(_QWORD *)(v36 + 16) = v15;
  *(_QWORD *)(v36 + 24) = v44;
  *(_QWORD *)(v36 + 32) = v47;
  *(_QWORD *)(v36 + 40) = v46;
  *(_BYTE *)(v36 + 48) = v43 & 1;
  *(_QWORD *)v36 = v38;
  *(_QWORD *)(v36 + 8) = v45;
  v48 = (int *)((char *)v39 + *v39);
  v40 = v38;
  v41 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v41;
  *v41 = v0;
  v41[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(uint64_t, _QWORD))v48)(v0 + 16, *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  v3 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int *v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16) + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v49);
  os_unfair_lock_unlock(v3);
  v4 = *(void **)(v0 + 56);
  v5 = v49[0];
  *(_QWORD *)(v0 + 128) = v49[0];
  v6 = objc_msgSend(v4, sel_useCase);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_10:
    if (one-time initialization token for framework != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v23 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v49[0] = v31;
      *(_DWORD *)v30 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v23, v29, "Unknown/Invalid PEC use-case '%{public}s'", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v31, -1, -1);
      v27 = v30;
      goto LABEL_14;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v13 = *(_QWORD *)(v10 + 56) + 48 * v11;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v46 = *(_QWORD *)(v13 + 32);
  v47 = *(_QWORD *)(v13 + 24);
  v17 = *(char *)(v13 + 40);
  swift_bridgeObjectRelease();
  if (v17 < 0)
    goto LABEL_10;
  v44 = v16;
  v45 = v14;
  v19 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 112);
  v20 = v7;
  v21 = *(_QWORD *)(v0 + 96);
  v42 = v20;
  AllowList.group(useCase:)(v20, v9, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v21, 1, v19) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 96), &demangling cache variable for type metadata for UseCaseGroup?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v49[0] = v26;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v9, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v23, v24, "No group found for use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v26, -1, -1);
      v27 = v25;
LABEL_14:
      MEMORY[0x23B822DA8](v27, -1, -1);
LABEL_16:

      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_15;
  }
  v43 = v17;
  v33 = *(_QWORD *)(v0 + 120);
  v34 = *(_QWORD *)(v0 + 96);
  v35 = *(_QWORD *)(v0 + 104);
  v37 = *(_QWORD *)(v0 + 80);
  v36 = *(_QWORD *)(v0 + 88);
  v38 = *(void **)(v0 + 56);
  v39 = *(int **)(v0 + 64);
  swift_bridgeObjectRelease();
  outlined init with take of UseCaseGroup(v34, v33);
  outlined init with copy of NetworkConfig(v33 + *(int *)(v35 + 36), v36 + *(int *)(v37 + 32));
  *(_QWORD *)(v36 + 16) = v15;
  *(_QWORD *)(v36 + 24) = v44;
  *(_QWORD *)(v36 + 32) = v47;
  *(_QWORD *)(v36 + 40) = v46;
  *(_BYTE *)(v36 + 48) = v43 & 1;
  *(_QWORD *)v36 = v38;
  *(_QWORD *)(v36 + 8) = v45;
  v48 = (int *)((char *)v39 + *v39);
  v40 = v38;
  v41 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v41;
  *v41 = v0;
  v41[1] = specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:);
  return ((uint64_t (*)(uint64_t, _QWORD))v48)(v0 + 16, *(_QWORD *)(v0 + 88));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v5[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v5[11] = swift_task_alloc();
  v6 = type metadata accessor for UseCaseGroup();
  v5[12] = v6;
  v5[13] = *(_QWORD *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v5;
  uint64_t v6;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v5[9] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v5[11] = swift_task_alloc();
  v6 = type metadata accessor for UseCaseGroup();
  v5[12] = v6;
  v5[13] = *(_QWORD *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t XPCHandler.deinit()
{
  uint64_t v0;

  swift_release();

  return v0;
}

uint64_t XPCHandler.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[13];
  if (v4)
  {
    v6 = v0[12];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[19] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v0[14], v0[15], v0[16], v0[17]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PIRParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 88);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_682;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = *(_QWORD *)(v2 + 32);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[13];
  if (v4)
  {
    v6 = v0[12];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[19] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v0[14], v0[15], v0[16], v0[17]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySo8NSObjectCG_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SaySo8S6CG_TG5AcjA14RequestContextVyAA0W13PIRParametersVGxs0E0_pRi_zRi0_zlyANIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 88);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_669;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v5 = *(_QWORD *)(v2 + 32);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v6 + 40) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;

  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)(a1, a2, v7, v6);
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_BYTE *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 48);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = *(_QWORD *)(v2 + 32);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v10 = *(_OWORD *)(v2 + 32);
  v11 = *(_OWORD *)(v2 + 16);
  v9 = *(_OWORD *)(v2 + 48);
  v6 = *(_QWORD *)(v2 + 64);
  v7 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 48) = v10;
  *(_OWORD *)(v7 + 64) = v9;
  *(_OWORD *)(v7 + 32) = v11;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v10 = *(_OWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  v8 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *(_QWORD *)v8 = v3;
  *(_QWORD *)(v8 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v8 + 48) = v7;
  *(_QWORD *)(v8 + 56) = v6;
  *(_OWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;

  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[13];
  if (v4)
  {
    v6 = v0[12];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[19] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPIRConfig<A>(clientConfig:method:body:)(v0[14], v0[15], v0[16], v0[17]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(v6 + 160) = v2;
  swift_task_dealloc();
  if (v2)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPIRConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PIRParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PIRParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 88);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_620;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = *(_QWORD *)(v2 + 32);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v7 + 56) = v6;
  *(_OWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[13];
  if (v4)
  {
    v6 = v0[12];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[19] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v0[14], v0[15], v0[16], v0[17]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSaySaySo18CMLSimilarityScoreCGG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r79O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SaySaySo18sT7CGG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 88);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_607;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;

  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = *(_QWORD *)(v2 + 32);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v7 + 56) = v6;
  *(_OWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10;

  v10 = *(_OWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 48);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v7 + 64) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v10;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[13];
  if (v4)
  {
    v6 = v0[12];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[19] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v0[14], v0[15], v0[16], v0[17]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 160) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSay10Foundation4DataVG_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09r85O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_Say10Foundation4T6VG_TG5AcjA14RequestContextVyAA0X13PECParametersVGxs0E0_pRi_zRi0_zlyAOIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 88);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_568;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v9 = *(_OWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = *(_QWORD *)(v2 + 32);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v7 + 56) = v6;
  *(_OWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  return swift_task_switch();
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY0_()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[13];
  if (v4)
  {
    v6 = v0[12];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "%{public}s method was called", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[19] = v9;
  *v9 = v0;
  v9[1] = _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A012clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm3312clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_;
  return specialized closure #1 in XPCHandler.withStaticPECConfig<A>(clientConfig:method:body:)(v0[14], v0[15], v0[16], v0[17]);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTQ1_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(v6 + 160) = v2;
  swift_task_dealloc();
  if (v2)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t _s8CipherML10XPCHandlerC18withErrorReporting33_673275016DE8C1AF242CD61FD0E901A0LL12clientConfig6method4bodyxSo09CMLClientO0CSg_SSxyYaKXEtYaKlFSS_Tg503_s8a4ML10c34C19withStaticPECConfig33_673275016ghijklm33LL12clientConfig6method4bodyxSo09R75O0C_SSxAA14RequestContextVyAA0E13PECParametersVGYaKXEtYaKlFxyYaKXEfU_SS_TG5AcjA14RequestContextVyAA0V13PECParametersVGxs0E0_pRi_zRi0_zlySSIsgHnrzo_Tf1nncn_nTf4nndggg_nTY2_()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 160);
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32 = v31;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2114;
    v11 = v6;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v4, v5, "%{public}s threw an error: %{public}@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v31, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);
  }
  else
  {
    v13 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease_n();

  }
  v14 = *(void **)(v0 + 88);
  if (v14)
  {
    v15 = objc_msgSend(*(id *)(v0 + 88), sel_useCase);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    v19 = objc_msgSend(v14, sel_sourceApplicationBundleIdentifier);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v22;

    }
    else
    {
      v21 = 0;
      v14 = 0;
    }
  }
  else
  {
    v21 = 0;
    v18 = 0xE400000000000000;
    v16 = 1701736270;
  }
  v23 = *(void **)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 104);
  v26 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v16;
  v27[3] = v18;
  v27[4] = v21;
  v27[5] = v14;
  v27[6] = v25;
  v27[7] = v24;
  v27[8] = v23;
  *(_QWORD *)(v0 + 48) = _s8CipherML9TelemetryO19reportErrorToServer7useCase10identifier6method5errorySS_SSSgSSs0E0_ptFZSDySSSo8NSObjectCGSgycfU_TA_0;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  *(_QWORD *)(v0 + 40) = &block_descriptor_553;
  v28 = _Block_copy((const void *)(v0 + 16));
  swift_bridgeObjectRetain();
  v29 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(v23);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[15] = a5;
  v6[16] = a6;
  v6[13] = a3;
  v6[14] = a4;
  v6[11] = a1;
  v6[12] = a2;
  return swift_task_switch();
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 152) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t specialized XPCHandler.withErrorReporting<A>(clientConfig:method:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t type metadata accessor for XPCHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCHandler.__allocating_init(requestsManager:connection:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of XPCHandler.requestData(by:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 104) + *(_QWORD *)(*(_QWORD *)v2 + 104));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 112) + *(_QWORD *)(*(_QWORD *)v2 + 112));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 120)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 120));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.requestData(byLatitude:longitude:clientConfig:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, double, double);

  v10 = (uint64_t (*)(uint64_t, double, double))(**(int **)(*(_QWORD *)v3 + 128)
                                                        + *(_QWORD *)(*(_QWORD *)v3 + 128));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.requestData(byLatitude:longitude:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 136) + *(_QWORD *)(*(_QWORD *)v2 + 136));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 144) + *(_QWORD *)(*(_QWORD *)v2 + 144));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.generateEvaluationKey(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 152) + *(_QWORD *)(*(_QWORD *)v2 + 152));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.constructPIRRequest(with:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 160) + *(_QWORD *)(*(_QWORD *)v2 + 160));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 168) + *(_QWORD *)(*(_QWORD *)v2 + 168));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRResponse(_:index:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 176)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 176));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 184)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 184));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v7 + 192)
                                                                                              + *(_QWORD *)(*(_QWORD *)v7 + 192));
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v16;
  *v16 = v8;
  v16[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 200)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 200));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v7 + 208)
                                                                                              + *(_QWORD *)(*(_QWORD *)v7 + 208));
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v16;
  *v16 = v8;
  v16[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 216)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 216));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, double, double);

  v10 = (uint64_t (*)(uint64_t, double, double))(**(int **)(*(_QWORD *)v3 + 224)
                                                        + *(_QWORD *)(*(_QWORD *)v3 + 224));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, double, double);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, double, double))(**(int **)(*(_QWORD *)v5 + 232)
                                                                          + *(_QWORD *)(*(_QWORD *)v5 + 232));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of XPCHandler.asyncResponseData(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 240) + *(_QWORD *)(*(_QWORD *)v2 + 240));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 248)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 248));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.setPECConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 256) + *(_QWORD *)(*(_QWORD *)v2 + 256));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 264)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 264));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v5 + 272)
                                                                            + *(_QWORD *)(*(_QWORD *)v5 + 272));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 280)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 280));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 288)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 288));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of XPCHandler.requestData(by:clientConfig:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of XPCHandler.queryStatus(for:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 296) + *(_QWORD *)(*(_QWORD *)v2 + 296));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of XPCHandler.queryStatus(for:options:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCHandler.queryStatus(for:options:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of XPCHandler.listUseCaseGroups()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 304) + *(_QWORD *)(*(_QWORD *)v0 + 304));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = dispatch thunk of XPCHandler.requestData(byIndices:clientConfig:);
  return v4();
}

uint64_t dispatch thunk of XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 312)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 312));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)
                                                               + async function pointer to @objc closure #1 in XPCHandler.configureUseCaseGroup(withName:useCaseGroup:)))(v2, v3, v5, v4);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v2, v3, v4);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v4, v5, v6);
}

uint64_t sub_237C6ABC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v4);
}

uint64_t sub_237C6AC58()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.listUseCaseGroups()()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.listUseCaseGroups()
                                                        + async function pointer to @objc closure #1 in XPCHandler.listUseCaseGroups()))(v2, v3);
}

uint64_t sub_237C6ACF0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.queryStatus(for:options:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, uint64_t, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.queryStatus(for:options:)
                                                                   + async function pointer to @objc closure #1 in XPCHandler.queryStatus(for:options:)))(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)
                                                                    + async function pointer to @objc closure #1 in XPCHandler.asyncResponseSimilarityScores(forElements:shardIndices:clientConfig:)))(v2, v3, v4, v5, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)
                                                                  + async function pointer to @objc closure #1 in XPCHandler.decryptBatch(ofSimilarityScores:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t sub_237C6AEB4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 56));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (void *)v0[7];
  v8 = v0[8];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, uint64_t, uint64_t, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)
                                                                                         + async function pointer to @objc closure #1 in XPCHandler.encryptDifferentiallyPrivateFakes(_:shardIndex:shardCount:pecConfig:clientConfig:)))(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)
                                                                    + async function pointer to @objc closure #1 in XPCHandler.encryptBatch(ofElements:shardIndices:clientConfig:)))(v2, v3, v4, v5, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:)
                                                                  + async function pointer to @objc closure #1 in XPCHandler.setPECConfig(_:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)
                                                                    + async function pointer to @objc closure #1 in XPCHandler.similarityScores(forElements:shardIndices:clientConfig:)))(v2, v3, v4, v5, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)
                                                               + async function pointer to @objc closure #1 in XPCHandler.asyncResponseData(byKeywords:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t sub_237C6B1B4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)()
{
  double *v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = (void *)*((_QWORD *)v0 + 2);
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)*((_QWORD *)v0 + 5);
  v6 = (void *)*((_QWORD *)v0 + 6);
  v7 = *((_QWORD *)v0 + 7);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, void *, uint64_t, double, double))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)
                                                                                  + async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:latitude:longitude:clientConfig:)))(v2, v5, v6, v7, v3, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)()
{
  double *v0;
  uint64_t v1;
  double v2;
  double v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)*((_QWORD *)v0 + 4);
  v5 = (void *)*((_QWORD *)v0 + 5);
  v6 = *((_QWORD *)v0 + 6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, uint64_t, double, double))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)
                                                                          + async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(withLatitude:longitude:clientConfig:)))(v4, v5, v6, v2, v3);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)
                                                                          + async function pointer to @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)))(v2, v3, v4, v5, v6);
}

uint64_t sub_237C6B3A0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v7 = (void *)v0[6];
  v6 = v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)
                                                                                  + async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)))(v2, v3, v4, v5, v7, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)
                                                                    + async function pointer to @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)))(v2, v3, v4, v5, v6);
}

uint64_t sub_237C6B50C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 56));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(void **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = *(void **)(v0 + 32);
  v5 = *(void **)(v0 + 40);
  v6 = *(void **)(v0 + 48);
  v7 = *(void **)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, char, void *, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)
                                                                                        + async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)))(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)
                                                                          + async function pointer to @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)))(v2, v3, v4, v5, v6);
}

uint64_t sub_237C6B684()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (void *)v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, uint64_t, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)
                                                                           + async function pointer to @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)))(v2, v3, v4, v5, v6);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)
                                                               + async function pointer to @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(uint64_t, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)
                                                                   + async function pointer to @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)
                                                                  + async function pointer to @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)
                                                                  + async function pointer to @objc closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t partial apply for @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)
                                                               + async function pointer to @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t objectdestroy_285Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)()
{
  double *v0;
  uint64_t v1;
  double v2;
  double v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)*((_QWORD *)v0 + 4);
  v5 = (void *)*((_QWORD *)v0 + 5);
  v6 = *((_QWORD *)v0 + 6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(void *, void *, uint64_t, double, double))((char *)&async function pointer to @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)
                                                                          + async function pointer to @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)))(v4, v5, v6, v2, v3);
}

uint64_t objectdestroy_155Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)
                                                                    + async function pointer to @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)))(v2, v3, v4, v5, v6);
}

uint64_t closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = *(_QWORD *)(v2 + 32);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(int, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)
                                                               + async function pointer to @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t objectdestroy_409Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in XPCHandler.requestData(by:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(uint64_t, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in XPCHandler.requestData(by:clientConfig:)
                                                                   + async function pointer to @objc closure #1 in XPCHandler.requestData(by:clientConfig:)))(v2, v3, v5, v4);
}

uint64_t objectdestroy_109Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of UseCaseGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UseCaseGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of NetworkConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NetworkConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroy_533Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t specialized FixedWidthInteger.divCeil(_:)(uint64_t result, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;

  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  v2 = __OFSUB__(result, 1);
  if (result >= 1)
  {
    v2 = __OFSUB__(a2, 1);
    if (a2 >= 1)
      return (a2 - 1) / (unint64_t)result + 1;
  }
  if ((a2 & result) < 0 == v2)
  {
    if (result != -1 || a2 != 0x8000000000000000)
      return a2 / result;
    goto LABEL_13;
  }
  v3 = (a2 + 1) / result;
  result = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t FakeQueriesList.list.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FakeQueriesList.list.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*FakeQueriesList.list.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t FakeQueriesList.maxTrials.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FakeQueriesList.maxTrials.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*FakeQueriesList.maxTrials.modify())()
{
  return Repeated.subscript.readspecialized ;
}

__n128 FakeQueriesList.dpParameters.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 48);
  result = *(__n128 *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t FakeQueriesList.shardCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t FakeQueriesList.filePath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FakeQueriesList() + 32);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for FakeQueriesList()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FakeQueriesList;
  if (!type metadata singleton initialization cache for FakeQueriesList)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FakeQueriesList.perQueryFakeCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FakeQueriesList() + 36));
}

uint64_t FakeQueriesList.perQueryFakeCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FakeQueriesList();
  *(_QWORD *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*FakeQueriesList.perQueryFakeCount.modify())()
{
  type metadata accessor for FakeQueriesList();
  return Repeated.subscript.readspecialized ;
}

uint64_t FakeQueriesList.remainingFakeQueries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

void FakeQueriesList.init(dpParameters:shardCount:useCase:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v56 = a2;
  v55 = a1;
  v62 = type metadata accessor for FakeQueriesList();
  MEMORY[0x24BDAC7A8](v62);
  v51 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL.DirectoryHint();
  v53 = *(_QWORD *)(v9 - 8);
  v54 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v52 = (char *)&v50 - v17;
  if (one-time initialization token for fakeQueriesDirectory != -1)
    swift_once();
  v18 = __swift_project_value_buffer(v12, (uint64_t)static CacheDirectory.fakeQueriesDirectory);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v18, v12);
  v60 = 0x7473696C702ELL;
  v61 = 0xE600000000000000;
  v58 = a3;
  v59 = a4;
  swift_bridgeObjectRetain();
  v58 = String.init<A>(_:)();
  v59 = v19;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  v60 = v58;
  v61 = v59;
  v21 = v53;
  v20 = v54;
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v11, *MEMORY[0x24BDCD7A0], v54);
  lazy protocol witness table accessor for type String and conformance String();
  v22 = v52;
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v20);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v23 = v62;
  v24 = a5 + *(int *)(v62 + 32);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v24, v22, v12);
  v25 = (_OWORD *)v55;
  v26 = *(_QWORD *)(v55 + 32);
  *(_QWORD *)(a5 + 8) = v26;
  v27 = v25[1];
  *(_OWORD *)(a5 + 16) = *v25;
  *(_OWORD *)(a5 + 32) = v27;
  v28 = v56;
  v29 = v57;
  *(_QWORD *)(a5 + 48) = v26;
  *(_QWORD *)(a5 + 56) = v28;
  *(_QWORD *)(a5 + *(int *)(v23 + 36)) = 0;
  *(_QWORD *)a5 = MEMORY[0x24BEE4AF8];
  v56 = v24;
  v30 = Data.init(contentsOf:options:)();
  if (v29)
  {
    v32 = 0;
    if (one-time initialization token for framework != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.framework);
    v37 = v29;
    v38 = v29;
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc();
      v57 = 0;
      v42 = (uint8_t *)v41;
      v43 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v42 = 138543362;
      v44 = v29;
      v45 = _swift_stdlib_bridgeErrorToNSError();
      v60 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v43 = v45;

      _os_log_impl(&dword_237BC8000, v39, v40, "Unable to parse list of fake queries from file due to '%{public}@'", v42, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v43, -1, -1);
      v46 = v42;
      v32 = v57;
      MEMORY[0x23B822DA8](v46, -1, -1);
    }
    else
    {

    }
    FakeQueriesList.generateList()();
    if (v32)
    {
      outlined destroy of FakeQueriesList(a5);
    }
    else
    {
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      dispatch thunk of PropertyListEncoder.outputFormat.setter();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type FakeQueriesList and conformance FakeQueriesList, (uint64_t (*)(uint64_t))type metadata accessor for FakeQueriesList, (uint64_t)&protocol conformance descriptor for FakeQueriesList);
      v47 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      v49 = v48;
      Data.write(to:options:)();
      outlined consume of Data._Representation(v47, v49);
      swift_release();
    }

  }
  else
  {
    v33 = v30;
    v34 = v31;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type FakeQueriesList and conformance FakeQueriesList, (uint64_t (*)(uint64_t))type metadata accessor for FakeQueriesList, (uint64_t)&protocol conformance descriptor for FakeQueriesList);
    v35 = (uint64_t)v51;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined destroy of FakeQueriesList(a5);
    swift_release();
    outlined consume of Data._Representation(v33, v34);
    outlined init with take of FakeQueriesList(v35, a5);
  }
}

void FakeQueriesList.generateList()()
{
  double *v0;
  uint64_t v1;
  double v2;
  double v3;
  BOOL v4;
  double v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  long double v11;
  double v12;
  long double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;

  if (*((uint64_t *)v0 + 1) >= 1
    && (v2 = v0[2], v2 > 0.0)
    && ((v3 = v0[3], v3 > 0.0) ? (v4 = v3 < 1.0) : (v4 = 0), v4 && (v5 = (1.0 - v3) / v3, v5 > 0.0)))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *(_QWORD *)v0;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v7 + 16));
    }
    else
    {
      *(_QWORD *)v0 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v7 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    v8 = *((_QWORD *)v0 + 7);
    if (v8 < 0)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v8)
    {
      v9 = 0;
      while (v9 != v8)
      {
        if (v2 >= 1.0)
        {
          v13 = specialized GammaDistribution.sampleLarge<A>(with:using:)(v2, v2, v5);
        }
        else
        {
          v11 = (double)specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL) * 1.11022302e-16
              + 0.0;
          v12 = specialized GammaDistribution.sampleLarge<A>(with:using:)(v2 + 1.0, v2, v5);
          v13 = v12 * pow(v11, 1.0 / v2);
        }
        if (v13 <= 125.0)
        {
          v14 = (double)specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL) * 1.11022302e-16
              + 0.0;
          v15 = exp(-v13);
          if (v15 < v14)
          {
            v16 = 0;
            v17 = v15;
            while (1)
            {
              v10 = v16 + 1;
              if (__OFADD__(v16, 1))
                break;
              v17 = v13 * v17 / (double)v10;
              v15 = v15 + v17;
              ++v16;
              if (v15 >= v14)
                goto LABEL_29;
            }
            __break(1u);
            break;
          }
          v10 = 0;
        }
        else
        {
          specialized PoissonDistribution.sampleLarge<A>(using:)(v13);
LABEL_29:
          if (v10 < 0)
          {
            __break(1u);
            goto LABEL_31;
          }
        }
        specialized Array.append<A>(contentsOf:)(v10, v9++, 0);
        if (v9 == v8)
          goto LABEL_31;
      }
      __break(1u);
      goto LABEL_53;
    }
LABEL_31:
    v18 = *((_QWORD *)v0 + 4);
    if (v18 < 1)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v19 = *(_QWORD *)(*(_QWORD *)v0 + 16);
    v20 = specialized FixedWidthInteger.divCeil(_:)(*((_QWORD *)v0 + 4), v19);
    v21 = v20 * v18;
    if ((unsigned __int128)(v20 * (__int128)v18) >> 64 != (v20 * v18) >> 63)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v22 = v21 - v19;
    if (__OFSUB__(v21, v19))
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v22 < 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    specialized Array.append<A>(contentsOf:)(v22, 0, 1);
    v23 = *(_QWORD *)v0;
    v24 = *(_QWORD *)(*(_QWORD *)v0 + 16);
    v25 = v24 / v18;
    v26 = type metadata accessor for FakeQueriesList();
    *(_QWORD *)((char *)v0 + *(int *)(v26 + 36)) = v25;
    if (*((_QWORD *)v0 + 5) >= v25)
    {
      if (v24)
      {
        swift_bridgeObjectRetain();
        v27 = (_BYTE *)(v23 + 40);
        v28 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          if ((*v27 & 1) == 0)
          {
            v29 = *((_QWORD *)v27 - 1);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
            v31 = v28[2];
            v30 = v28[3];
            if (v31 >= v30 >> 1)
              v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v28);
            v28[2] = v31 + 1;
            v28[v31 + 4] = v29;
          }
          v27 += 16;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
      }
      else
      {
        v28 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v32 = v28[2];
      v26 = swift_bridgeObjectRelease();
      if (v32)
        goto LABEL_50;
    }
    v33 = *((_QWORD *)v0 + 1);
    v34 = __OFSUB__(v33, 1);
    v35 = v33 - 1;
    if (v34)
    {
LABEL_58:
      __break(1u);
      return;
    }
    *((_QWORD *)v0 + 1) = v35;
    FakeQueriesList.generateList()(v26);
    if (!v1)
LABEL_50:
      specialized MutableCollection<>.shuffle<A>(using:)();
  }
  else
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

void specialized MutableCollection<>.shuffle<A>(using:)()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t __buf;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v2 < 2)
    return;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_19:
    v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  v3 = 0;
  v4 = v1 + 4;
  while (1)
  {
    __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    v11 = (__buf * (unsigned __int128)v2) >> 64;
    if (v2 > __buf * v2)
    {
      v12 = -(uint64_t)v2 % v2;
      if (v12 > __buf * v2)
      {
        do
        {
          __buf = 0;
          arc4random_buf(&__buf, 8uLL);
        }
        while (v12 > __buf * v2);
        v11 = (__buf * (unsigned __int128)v2) >> 64;
      }
    }
    v13 = __OFADD__(v3, v11);
    v14 = v3 + v11;
    if (v13)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v3 != v14)
      break;
LABEL_5:
    ++v3;
    if ((uint64_t)v2-- <= 2)
      goto LABEL_15;
  }
  v15 = v1[2];
  if (v3 >= v15)
    goto LABEL_18;
  if (v14 < v15)
  {
    v5 = &v4[2 * v3];
    v6 = *((_BYTE *)v5 + 8);
    v7 = *v5;
    v8 = &v4[2 * v14];
    v9 = *((_BYTE *)v8 + 8);
    *v5 = *v8;
    *((_BYTE *)v5 + 8) = v9;
    *v8 = v7;
    *((_BYTE *)v8 + 8) = v6;
    goto LABEL_5;
  }
  __break(1u);
LABEL_15:
  *(_QWORD *)v0 = v1;
}

void FakeQueriesList.returnFakeQueries()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = v1;
  v3 = v0;
  v4 = *v0;
  v5 = *(_QWORD *)(*v0 + 16);
  v6 = *(int *)(type metadata accessor for FakeQueriesList() + 36);
  v7 = *(uint64_t *)((char *)v0 + v6);
  if (v5 < (uint64_t)v7)
  {
    FakeQueriesList.generateList()();
    if (v1)
      return;
    v7 = *(uint64_t *)((char *)v3 + v6);
    v4 = *v3;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v4 + 16);
  v9 = v8 - v7;
  if (v8 < v7)
    v9 = 0;
  if (v9 == v8)
    goto LABEL_21;
  if (v9 >= v8)
  {
LABEL_27:
    __break(1u);
    return;
  }
  v20 = v2;
  swift_bridgeObjectRetain();
  if (v7 >= v8)
    v10 = v8;
  else
    v10 = v7;
  v11 = (_BYTE *)(v4 - 16 * v10 + 16 * v8 + 40);
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((*v11 & 1) == 0)
    {
      v13 = *((_QWORD *)v11 - 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      v15 = v12[2];
      v14 = v12[3];
      if (v15 >= v14 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
      v12[2] = v15 + 1;
      v12[v15 + 4] = v13;
    }
    v11 += 16;
    --v10;
  }
  while (v10);
  swift_unknownObjectRelease();
  v2 = v20;
LABEL_21:
  specialized RangeReplaceableCollection<>.removeLast(_:)(v7);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type FakeQueriesList and conformance FakeQueriesList, (uint64_t (*)(uint64_t))type metadata accessor for FakeQueriesList, (uint64_t)&protocol conformance descriptor for FakeQueriesList);
  v16 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = v16;
    v19 = v17;
    Data.write(to:options:)();
    outlined consume of Data._Representation(v18, v19);
  }
  swift_release();
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return (unint64_t)specialized Array.replaceSubrange<A>(_:with:)(result, v2);
    }
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FakeQueriesList.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237C6CF94 + 4 * byte_237D57B90[*v0]))(1953720684, 0xE400000000000000);
}

uint64_t sub_237C6CF94()
{
  return 0x6C6169725478616DLL;
}

uint64_t sub_237C6CFB0()
{
  return 0x656D617261507064;
}

uint64_t sub_237C6CFD0()
{
  return 0x756F436472616873;
}

uint64_t sub_237C6CFEC()
{
  return 0x68746150656C6966;
}

unint64_t sub_237C6D004()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FakeQueriesList.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized FakeQueriesList.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FakeQueriesList.CodingKeys()
{
  lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FakeQueriesList.CodingKeys()
{
  lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FakeQueriesList.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _OWORD v12[2];
  uint64_t v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FakeQueriesList.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_QWORD *)&v12[0] = *(_QWORD *)v3;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int?]);
  lazy protocol witness table accessor for type [Int?] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9 = *(_QWORD *)(v3 + 48);
    v10 = *(_OWORD *)(v3 + 32);
    v12[0] = *(_OWORD *)(v3 + 16);
    v12[1] = v10;
    v13 = v9;
    v14 = 2;
    lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for FakeQueriesList();
    LOBYTE(v12[0]) = 4;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FakeQueriesList.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;

  v24 = a2;
  v25 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FakeQueriesList.CodingKeys>);
  v6 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FakeQueriesList();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys();
  v26 = v8;
  v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
  v29 = v5;
  v14 = v6;
  v15 = (uint64_t)v11;
  v16 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int?]);
  v33 = 0;
  lazy protocol witness table accessor for type [Int?] and conformance <A> [A]();
  v17 = v27;
  v18 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_QWORD *)v15 = v30;
  LOBYTE(v30) = 1;
  *(_QWORD *)(v15 + 8) = KeyedDecodingContainer.decode(_:forKey:)();
  v33 = 2;
  lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v19 = v32;
  v20 = v31;
  *(_OWORD *)(v15 + 16) = v30;
  *(_OWORD *)(v15 + 32) = v20;
  *(_QWORD *)(v15 + 48) = v19;
  LOBYTE(v30) = 3;
  *(_QWORD *)(v15 + 56) = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v30) = 4;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v21 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v15 + *(int *)(v9 + 32), v21, v16);
  LOBYTE(v30) = 5;
  v22 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v17);
  *(_QWORD *)(v15 + *(int *)(v9 + 36)) = v22;
  outlined init with copy of FakeQueriesList(v15, v24);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
  return outlined destroy of FakeQueriesList(v15);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FakeQueriesList@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FakeQueriesList.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FakeQueriesList(_QWORD *a1)
{
  return FakeQueriesList.encode(to:)(a1);
}

void specialized PoissonDistribution.sampleLarge<A>(using:)(long double a1)
{
  uint64_t v2;
  double v3;
  unint64_t v5;
  unint64_t __buf;

  v2 = 1;
  v3 = 1.0;
  while (1)
  {
    do
    {
      __buf = 0;
      arc4random_buf(&__buf, 8uLL);
    }
    while (0x20000000000001 * __buf < 0x1FFFFFFFFFF801);
    v5 = (__buf * (unsigned __int128)0x20000000000001uLL) >> 64;
    if (v5 != 0x20000000000000)
      break;
    if (v3 < 1.0)
      goto LABEL_11;
    if (v3 <= 1.0)
      goto LABEL_15;
LABEL_4:
    if (__OFADD__(v2++, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
  }
  v3 = v3 * ((double)v5 * 1.11022302e-16 + 0.0);
  if (v3 < 1.0)
  {
LABEL_11:
    while (a1 > 0.0)
    {
      if (a1 <= 100.0)
      {
        v3 = v3 * exp(a1);
        a1 = 0.0;
        break;
      }
      v3 = v3 * 3.72007598e-44;
      a1 = a1 + -100.0;
      if (v3 >= 1.0)
        break;
    }
  }
  if (v3 > 1.0)
    goto LABEL_4;
LABEL_15:
  if (!__OFSUB__(v2, 1))
    return;
LABEL_18:
  __break(1u);
}

double specialized GammaDistribution.sampleLarge<A>(with:using:)(double a1, double a2, double a3)
{
  double v3;
  double v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v16;
  unint64_t __buf;

  v16 = a1 + -0.333333333;
  v3 = 1.0 / sqrt((a1 + -0.333333333) * 9.0);
  v4 = -2.0;
  while (1)
  {
    do
    {
      __buf = 0;
      arc4random_buf(&__buf, 8uLL);
    }
    while (0x20000000000001 * __buf < 0x1FFFFFFFFFF801);
    v5 = (__buf * (unsigned __int128)0x20000000000001uLL) >> 64;
    do
    {
      __buf = 0;
      arc4random_buf(&__buf, 8uLL);
    }
    while (0x20000000000001 * __buf < 0x1FFFFFFFFFF801);
    v6 = (double)((__buf * (unsigned __int128)0x20000000000001uLL) >> 64) * 1.11022302e-16 + 0.0;
    v7 = log((double)v5 * 1.11022302e-16 + 0.0) * v4;
    v8 = sqrt(v7) * cos(v6 * 6.28318531) + 0.0;
    v9 = v3 * v8 + 1.0;
    if (v9 > 0.0)
    {
      do
      {
        __buf = 0;
        arc4random_buf(&__buf, 8uLL);
      }
      while (0x20000000000001 * __buf < 0x1FFFFFFFFFF801);
      v10 = v9 * (v9 * v9);
      v11 = (double)((__buf * (unsigned __int128)0x20000000000001uLL) >> 64) * 1.11022302e-16 + 0.0;
      v12 = v8 * v8;
      if (v11 < v8 * v8 * (v8 * v8 * -0.0331) + 1.0)
        break;
      v13 = log(v11);
      v4 = -2.0;
      if (v13 < v12 * 0.5 + v16 * (1.0 - v10 + log(v10)))
        break;
    }
  }
  return v16 * v10 * a3;
}

uint64_t outlined destroy of FakeQueriesList(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FakeQueriesList();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of FakeQueriesList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FakeQueriesList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys;
  if (!lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for FakeQueriesList.CodingKeys, &unk_2509A6190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys;
  if (!lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for FakeQueriesList.CodingKeys, &unk_2509A6190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys;
  if (!lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for FakeQueriesList.CodingKeys, &unk_2509A6190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys;
  if (!lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for FakeQueriesList.CodingKeys, &unk_2509A6190);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FakeQueriesList.CodingKeys and conformance FakeQueriesList.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Int?] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [Int?] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Int?] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int?]);
    v2 = lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, MEMORY[0x24BEE1770], MEMORY[0x24BEE4AA8]);
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int?] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [Int?] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Int?] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int?]);
    v2 = lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, MEMORY[0x24BEE1798], MEMORY[0x24BEE4AC0]);
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int?] and conformance <A> [A]);
  }
  return result;
}

uint64_t outlined init with copy of FakeQueriesList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FakeQueriesList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for FakeQueriesList(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v8;
    v9 = a2[7];
    v10 = *(int *)(a3 + 32);
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    v13 = type metadata accessor for URL();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    *(_QWORD *)(v7 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
  }
  return v7;
}

uint64_t destroy for FakeQueriesList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for FakeQueriesList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  v13 = type metadata accessor for URL();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  return a1;
}

_QWORD *assignWithCopy for FakeQueriesList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t initializeWithTake for FakeQueriesList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t assignWithTake for FakeQueriesList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t getEnumTagSinglePayload for FakeQueriesList()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C6DF40(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FakeQueriesList()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237C6DFC8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for FakeQueriesList()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FakeQueriesList.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_237C6E118 + 4 * byte_237D57B9B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_237C6E14C + 4 * byte_237D57B96[v4]))();
}

uint64_t sub_237C6E14C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C6E154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C6E15CLL);
  return result;
}

uint64_t sub_237C6E168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C6E170);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_237C6E174(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C6E17C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for FakeQueriesList.CodingKeys()
{
  return &unk_2509A6190;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t __buf;

  if (result)
  {
    v1 = result;
    __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    result = (__buf * (unsigned __int128)v1) >> 64;
    if (__buf * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > __buf * v1)
      {
        do
        {
          __buf = 0;
          arc4random_buf(&__buf, 8uLL);
        }
        while (v2 > __buf * v1);
        return (__buf * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[16 * a1 + 32];
    v15 = &v4[16 * a2 + 32];
    v16 = 16 * v14;
    if (16 * a1 != 16 * a2 || result >= &v15[v16])
      result = (char *)memmove(result, v15, v16);
    v17 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v17, v8);
    v18 = v17 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v18;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized FakeQueriesList.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1953720684 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6169725478616DLL && a2 == 0xE900000000000073
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D617261507064 && a2 == 0xEC00000073726574
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756F436472616873 && a2 == 0xEA0000000000746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x68746150656C6966 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000237D62D50)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t dispatch thunk of LRUCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

uint64_t dispatch thunk of LRUCache.removeExpiredValues()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LRUCache.removeAllValues()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LRUCache.removeValues(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of LRUCache.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of LRUCache.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of LRUCache.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

void AuthenticationError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static AuthenticationError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int AuthenticationError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t AuthenticationError.errorDescription.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_237C6E894
                                                                     + 4 * asc_237D57D60[a1]))(0xD00000000000002ELL, 0x8000000237D62F00);
}

uint64_t sub_237C6E894()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AuthenticationError()
{
  unsigned __int8 *v0;

  return AuthenticationError.errorDescription.getter(*v0);
}

uint64_t getEnumTagSinglePayload for AuthenticationError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_237C6EA64 + 4 * byte_237D57D6F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_237C6EA98 + 4 * byte_237D57D6A[v4]))();
}

uint64_t sub_237C6EA98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C6EAA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C6EAA8);
  return result;
}

uint64_t sub_237C6EAB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C6EABCLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_237C6EAC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C6EAC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationError()
{
  return &type metadata for AuthenticationError;
}

uint64_t InMemoryLRUCache.__allocating_init(countLimit:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  InMemoryLRUCache.init(countLimit:)(a1);
  return v2;
}

uint64_t InMemoryLRUCache.LinkedListNode.key.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 104));
}

uint64_t InMemoryLRUCache.LinkedListNode.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 88) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 112));
}

uint64_t InMemoryLRUCache.LinkedListNode.next.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t InMemoryLRUCache.LinkedListNode.next.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*InMemoryLRUCache.LinkedListNode.next.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify;
}

uint64_t InMemoryLRUCache.LinkedListNode.prev.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t InMemoryLRUCache.LinkedListNode.prev.setter()
{
  swift_beginAccess();
  swift_weakAssign();
  return swift_release();
}

void (*InMemoryLRUCache.LinkedListNode.prev.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return InMemoryLRUCache.LinkedListNode.prev.modify;
}

void InMemoryLRUCache.LinkedListNode.prev.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_weakAssign();
  if ((a2 & 1) != 0)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }
  free(v3);
}

uint64_t InMemoryLRUCache.LinkedListNode.__allocating_init(key:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  InMemoryLRUCache.LinkedListNode.init(key:value:)(a1, a2);
  return v4;
}

uint64_t *InMemoryLRUCache.LinkedListNode.init(key:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 120)) = 0;
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 104), a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 112), a2);
  return v2;
}

uint64_t *InMemoryLRUCache.LinkedListNode.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 104));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  swift_weakDestroy();
  v2 = *(_QWORD *)(*v0 + 120);
  v3 = *(uint64_t *)((char *)v0 + v2);
  *(uint64_t *)((char *)v0 + v2) = 0;
  if (v3)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v4 = *(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 120));
      swift_retain();
      swift_release();
      v3 = v4;
    }
    while (v4);
  }
  swift_release();
  return v0;
}

uint64_t InMemoryLRUCache.LinkedListNode.__deallocating_deinit()
{
  InMemoryLRUCache.LinkedListNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t InMemoryLRUCache.hashTable.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t InMemoryLRUCache.hashTable.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*InMemoryLRUCache.hashTable.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t InMemoryLRUCache.head.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t InMemoryLRUCache.head.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*InMemoryLRUCache.head.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t InMemoryLRUCache.tail.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t InMemoryLRUCache.tail.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*InMemoryLRUCache.tail.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t InMemoryLRUCache.countLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t InMemoryLRUCache.count.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD **)v0;
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
  v4 = v1[10];
  v3 = v1[11];
  v5 = v1[12];
  v6 = type metadata accessor for InMemoryLRUCache.LinkedListNode(0, v4, v3, v5);
  v7 = MEMORY[0x23B821EF0](v2, v4, v6, v5);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t **InMemoryLRUCache.init(countLimit:)(uint64_t *a1)
{
  uint64_t **v1;
  uint64_t *v3;

  v3 = *v1;
  v1[4] = 0;
  v1[3] = 0;
  type metadata accessor for InMemoryLRUCache.LinkedListNode(0, v3[10], v3[11], v3[12]);
  v1[2] = (uint64_t *)Dictionary.init(minimumCapacity:)();
  swift_beginAccess();
  v1[3] = 0;
  swift_release();
  v1[5] = a1;
  return v1;
}

uint64_t type metadata accessor for InMemoryLRUCache.LinkedListNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InMemoryLRUCache.LinkedListNode);
}

uint64_t InMemoryLRUCache.pushFront(node:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t);

  v3 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 160);
  v4 = v3();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(v4);
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 168))(0);
  v6 = ((uint64_t (*)(uint64_t))v3)(v5);
  if (v6)
  {
    v7 = *(void (**)(uint64_t))(*(_QWORD *)v6 + 168);
    v8 = swift_retain();
    v7(v8);
    swift_release();
  }
  else
  {
    v9 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 192);
    v10 = swift_retain();
    v9(v10);
  }
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 168);
  v11 = swift_retain();
  return v13(v11);
}

uint64_t InMemoryLRUCache.removeNode(node:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  void (*v7)(uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  v2 = v1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 136))();
  if (v4)
  {
    v6 = *(void (**)(uint64_t))(*(_QWORD *)v4 + 144);
    swift_retain();
    swift_retain();
    v6(v5);
    swift_release();
  }
  if (v5)
  {
    v7 = *(void (**)(uint64_t))(*(_QWORD *)v5 + 168);
    swift_retain();
    swift_retain();
    v7(v4);
    swift_release();
  }
  if (v4)
  {
    if (v5)
    {
LABEL_7:
      swift_release();
      return swift_release();
    }
  }
  else
  {
    v9 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 168);
    v10 = swift_retain();
    v9(v10);
    if (v5)
      goto LABEL_7;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 192))(v4);
}

uint64_t key path setter for InMemoryLRUCache.subscript(_:) : <A, B>InMemoryLRUCache<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v7 = *(_QWORD *)(a4 + a3 - 24);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v17 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v17 - v13, a3, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  return (*(uint64_t (**)(char *, char *))(**(_QWORD **)a2 + 248))(v12, v14);
}

uint64_t InMemoryLRUCache.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = *(_QWORD **)v2;
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 136))();
  v8 = v5[10];
  v7 = v5[11];
  v9 = v5[12];
  v10 = type metadata accessor for InMemoryLRUCache.LinkedListNode(0, v8, v7, v9);
  MEMORY[0x23B821F08](&v15, a1, v6, v8, v10, v9);
  swift_bridgeObjectRelease();
  v11 = v15;
  if (v15)
  {
    InMemoryLRUCache.removeNode(node:)(v15);
    InMemoryLRUCache.pushFront(node:)(v11);
    v12 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, v11 + *(_QWORD *)(*(_QWORD *)v11 + 112), v7);
    swift_release();
    v13 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v7 - 8);
    v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v13, 1, v7);
}

uint64_t InMemoryLRUCache.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t *);
  void (*v45)(uint64_t *, _QWORD);
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t (*v53)(uint64_t *);
  void (*v54)(uint64_t *, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t *, _QWORD);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72[4];
  uint64_t v73;

  v67 = a2;
  v4 = *v2;
  v70 = *(_QWORD *)(*v2 + 80);
  v5 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v66 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 + 88);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v59 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v59 - v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v69 = a1;
  v19(v12, a1, v8);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7);
  v68 = v5;
  if (v20 == 1)
  {
    v21 = v70;
    v22 = v67;
    v23 = *(char **)(v9 + 8);
    v24 = ((uint64_t (*)(char *, uint64_t))v23)(v12, v8);
    v25 = (*(uint64_t (**)(uint64_t))(*v71 + 136))(v24);
    v26 = *(_QWORD *)(v4 + 96);
    v27 = type metadata accessor for InMemoryLRUCache.LinkedListNode(0, v21, v7, v26);
    MEMORY[0x23B821F08](v72, v22, v25, v21, v27, v26);
    swift_bridgeObjectRelease();
    v28 = v72[0];
    if (v72[0])
    {
      v65 = v8;
      v29 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v66, v22, v21);
      v73 = 0;
      v30 = (*(uint64_t (**)(uint64_t *))(*v71 + 152))(v72);
      v64 = v23;
      v31 = (void (*)(uint64_t *, _QWORD))v30;
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v31(v72, 0);
      InMemoryLRUCache.removeNode(node:)(v28);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v22, v21);
      return ((uint64_t (*)(uint64_t, uint64_t))v64)(v69, v65);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v22, v21);
      return ((uint64_t (*)(uint64_t, uint64_t))v23)(v69, v8);
    }
  }
  else
  {
    v63 = v9;
    v65 = v8;
    v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v18, v12, v7);
    v64 = v18;
    v34 = (*(uint64_t (**)(uint64_t))(*v71 + 136))(v33);
    v35 = *(_QWORD *)(v4 + 96);
    v36 = v70;
    v37 = type metadata accessor for InMemoryLRUCache.LinkedListNode(0, v70, v7, v35);
    v38 = v67;
    v62 = v35;
    MEMORY[0x23B821F08](v72, v67, v34, v36, v37, v35);
    swift_bridgeObjectRelease();
    if (v72[0])
    {
      v61 = v72[0];
      InMemoryLRUCache.removeNode(node:)(v72[0]);
      v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v40 = v70;
      v41 = (uint64_t)v66;
      v39(v66, v38, v70);
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v64, v7);
      v42 = v38;
      v43 = swift_allocObject();
      InMemoryLRUCache.LinkedListNode.init(key:value:)(v41, (uint64_t)v16);
      v39((char *)v41, v42, v40);
      v73 = v43;
      v44 = *(uint64_t (**)(uint64_t *))(*v71 + 152);
      swift_retain();
      v45 = (void (*)(uint64_t *, _QWORD))v44(v72);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v45(v72, 0);
      InMemoryLRUCache.pushFront(node:)(v43);
      v46 = v64;
      swift_release();
      swift_release();
      v47 = v68;
    }
    else
    {
      v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v49 = (uint64_t)v66;
      v50 = v70;
      v48(v66, v38, v70);
      v60 = v7;
      v61 = v13;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v64, v7);
      v51 = swift_allocObject();
      InMemoryLRUCache.LinkedListNode.init(key:value:)(v49, (uint64_t)v16);
      v42 = v38;
      v48((char *)v49, v38, v50);
      v73 = v51;
      v52 = v71;
      v53 = *(uint64_t (**)(uint64_t *))(*v71 + 152);
      swift_retain();
      v54 = (void (*)(uint64_t *, _QWORD))v53(v72);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v54(v72, 0);
      v55 = InMemoryLRUCache.pushFront(node:)(v51);
      if (v52[5] < (*(uint64_t (**)(uint64_t))(*v52 + 208))(v55))
      {
        v56 = (*(uint64_t (**)(void))(*v71 + 184))();
        if (v56)
        {
          v57 = v56;
          v48(v66, v56 + *(_QWORD *)(*(_QWORD *)v56 + 104), v70);
          v73 = 0;
          v58 = (void (*)(uint64_t *, _QWORD))v53(v72);
          Dictionary.subscript.setter();
          v58(v72, 0);
          InMemoryLRUCache.removeNode(node:)(v57);
          swift_release();
        }
      }
      swift_release();
      v47 = v68;
      v7 = v60;
      v13 = v61;
      v46 = v64;
    }
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v42, v70);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v69, v65);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v46, v7);
  }
}

void (*InMemoryLRUCache.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;

  v5 = malloc(0x48uLL);
  *a1 = v5;
  *v5 = v2;
  v6 = *v2;
  v7 = type metadata accessor for Optional();
  v5[1] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[2] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v5[3] = malloc(v9);
  v10 = malloc(v9);
  v5[4] = v10;
  v11 = *(_QWORD *)(v6 + 80);
  v5[5] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[6] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v5[7] = malloc(v13);
  v5[8] = malloc(v13);
  (*(void (**)(void))(v12 + 16))();
  InMemoryLRUCache.subscript.getter(a2, (uint64_t)v10);
  return InMemoryLRUCache.subscript.modify;
}

void InMemoryLRUCache.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 56);
  v4 = *(void **)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    v5 = v2[5];
    v6 = v2[6];
    v8 = (void *)v2[3];
    v7 = (void *)v2[4];
    v9 = v2[1];
    v10 = v2[2];
    (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v8, v7, v9);
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v3, v4, v5);
    InMemoryLRUCache.subscript.setter((uint64_t)v8, (uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    v8 = (void *)v2[3];
    v7 = (void *)v2[4];
    InMemoryLRUCache.subscript.setter((uint64_t)v7, (uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v7);
  free(v8);
  free(v2);
}

uint64_t InMemoryLRUCache.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t InMemoryLRUCache.__deallocating_deinit()
{
  InMemoryLRUCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_237C6FDFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_237C6FE2C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_237C6FE5C()
{
  return 24;
}

__n128 sub_237C6FE68(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_237C6FE84()
{
  return 24;
}

__n128 sub_237C6FE90(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_237C6FEA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_237C6FED4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_237C6FF04()
{
  return 24;
}

__n128 sub_237C6FF10(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t keypath_get_1Tm@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t keypath_set_2Tm(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 168);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_237C6FF8C()
{
  return 24;
}

__n128 sub_237C6FF98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_237C6FFAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_237C6FFDC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 192);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_237C7000C()
{
  return 24;
}

__n128 sub_237C70018(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_237C7002C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)a1 + 240))(a2);
}

uint64_t sub_237C7005C()
{
  return 24;
}

__n128 sub_237C70068(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for InMemoryLRUCache()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for InMemoryLRUCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InMemoryLRUCache);
}

uint64_t method lookup function for InMemoryLRUCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InMemoryLRUCache.tail.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of InMemoryLRUCache.tail.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of InMemoryLRUCache.tail.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of InMemoryLRUCache.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of InMemoryLRUCache.__allocating_init(countLimit:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of InMemoryLRUCache.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of InMemoryLRUCache.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of InMemoryLRUCache.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t type metadata completion function for InMemoryLRUCache.LinkedListNode()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for InMemoryLRUCache.LinkedListNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.next.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.next.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.next.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.prev.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.prev.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.prev.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of InMemoryLRUCache.LinkedListNode.__allocating_init(key:value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x23B822C7C](a1, v6, a5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RequestsManager.loadDynamicAllowList()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for dynamicAllowListFile != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v2, (uint64_t)static CacheDirectory.dynamicAllowListFile);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v7 = specialized AllowList.__allocating_init(file:)((uint64_t)v5);
  if (!v1)
  {
    v8 = (uint64_t)v7;
    v9 = *(os_unfair_lock_s **)(v0 + 48);
    v10 = (uint64_t)&v9[4];
    v11 = v9 + 6;
    os_unfair_lock_lock(v9 + 6);
    closure #1 in RequestsManager.loadDynamicAllowList()(v10, v8);
    os_unfair_lock_unlock(v11);
    swift_release();
  }
}

void RequestsManager.listUseCaseGroups()()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(os_unfair_lock_s **)(v0 + 48);
  v3 = v2 + 4;
  v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v3, &v6);
  os_unfair_lock_unlock(v4);
  if (v1)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v6 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    specialized _NativeDictionary.mapValues<A>(_:)(v5);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RequestsManager.configureUseCaseGroup(name:group:)(Swift::String name, CMLUseCaseGroup_optional *group)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;

  object = name._object;
  countAndFlagsBits = name._countAndFlagsBits;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (group)
  {
    UseCaseGroup.init(useCaseGroup:)(group, (uint64_t)v9);
    if (v3)
      return;
    v10 = type metadata accessor for UseCaseGroup();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
  }
  else
  {
    v11 = type metadata accessor for UseCaseGroup();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  }
  v12 = *(os_unfair_lock_s **)(v2 + 48);
  v13 = (uint64_t *)&v12[4];
  v14 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  closure #2 in RequestsManager.configureUseCaseGroup(name:group:)(v13, countAndFlagsBits, (uint64_t)object, (uint64_t)v9);
  os_unfair_lock_unlock(v14);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for UseCaseGroup?);
}

id UseCaseGroup.useCaseGroup.getter()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  Class isa;
  id v8;

  v1 = (int *)type metadata accessor for UseCaseGroup();
  specialized _NativeDictionary.mapValues<A>(_:)(*(_QWORD *)(v0 + v1[8]));
  v2 = *(_QWORD *)(v0 + v1[5]);
  v3 = *(_QWORD *)(v0 + v1[6]);
  v4 = *(unsigned __int8 *)(v0 + v1[7]);
  v5 = NetworkConfig.networkConfig.getter();
  v6 = objc_allocWithZone((Class)CMLUseCaseGroup);
  type metadata accessor for CMLUseCaseConfig();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  v8 = objc_msgSend(v6, sel_initWithKeyExpirationMinutes_keyRotationBeforeExpirationMinutes_keyRotationIgnoreMissingEvaluationKey_useCases_networkConfig_, v2, v3, v4, isa, v5);

  return v8;
}

uint64_t UseCaseGroup.init(useCaseGroup:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  int *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v5 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *MEMORY[0x24BE2A0B0];
  v9 = type metadata accessor for HE.SecurityLevel();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104))(a2, v8, v9);
  v11 = objc_msgSend(a1, sel_keyExpirationMinutes);
  v12 = (int *)type metadata accessor for UseCaseGroup();
  *(_QWORD *)(a2 + v12[5]) = v11;
  *(_QWORD *)(a2 + v12[6]) = objc_msgSend(a1, sel_keyRotationBeforeExpirationMinutes);
  *(_BYTE *)(a2 + v12[7]) = objc_msgSend(a1, sel_keyRotationIgnoreMissingEvaluationKey);
  v13 = objc_msgSend(a1, sel_useCases);
  type metadata accessor for CMLUseCaseConfig();
  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = specialized _NativeDictionary.mapValues<A>(_:)(v14);
  if (v2)
  {
    swift_bridgeObjectRelease();

    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
  else
  {
    v17 = v15;
    swift_bridgeObjectRelease();
    *(_QWORD *)(a2 + v12[8]) = v17;
    NetworkConfig.init(networkConfig:)(objc_msgSend(a1, sel_networkConfig), (uint64_t)v7);

    return outlined init with take of SecretKey((uint64_t)v7, a2 + v12[9], type metadata accessor for NetworkConfig);
  }
}

uint64_t closure #2 in RequestsManager.configureUseCaseGroup(name:group:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v27[0] = a2;
  v7 = type metadata accessor for UseCaseGroup();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v27 - v15;
  v28 = a1;
  v17 = *(_QWORD *)(*a1 + 32);
  v30 = v17;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a4, (uint64_t)v27 - v15, &demangling cache variable for type metadata for UseCaseGroup?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, &demangling cache variable for type metadata for UseCaseGroup?);
    specialized Dictionary._Variant.removeValue(forKey:)(v27[0], a3, (uint64_t)v14);
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for UseCaseGroup?);
    v18 = v30;
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v16, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = v17;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v10, v27[0], a3, isUniquelyReferenced_nonNull_native);
    v18 = v29;
    v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v20 = v28;
  v21 = *(_QWORD *)(*v28 + 16);
  v22 = *(_QWORD *)(*v28 + 24);
  type metadata accessor for AllowList();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = v27[1];
  result = AllowList.init(rlweParams:heSchemes:groups:)(v21, v22, v18);
  if (!v23)
  {
    v25 = result;
    if (one-time initialization token for dynamicAllowListFile != -1)
      swift_once();
    v26 = type metadata accessor for URL();
    __swift_project_value_buffer(v26, (uint64_t)static CacheDirectory.dynamicAllowListFile);
    AllowList.saveAllowList(path:)();
    result = swift_release();
    *v20 = v25;
  }
  return result;
}

uint64_t closure #1 in RequestsManager.loadDynamicAllowList()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = v4;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v12);
  if (v2)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v7 = v12;
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = AllowList.init(rlweParams:heSchemes:groups:)(v8, v9, v7);
    result = swift_release();
    *(_QWORD *)a1 = v10;
  }
  return result;
}

id NetworkConfig.networkConfig.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  int *v19;
  int v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  id v26;
  id v27;
  unint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v29 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v29 - v9;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(v1, (uint64_t)v17, v18);
  v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v20 = (*(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)v19 - 1) + 48))(v17, 2, v19);
  if (v20)
  {
    if (v20 == 1)
      return objc_msgSend(objc_allocWithZone((Class)CMLNetworkManager), sel_initWithType_, 0);
    else
      return objc_msgSend(objc_allocWithZone((Class)CMLNetworkManager), sel_initWithType_, 2);
  }
  else
  {
    v22 = (uint64_t)&v17[v19[12]];
    v23 = (uint64_t *)&v17[v19[16]];
    v24 = *v23;
    v29 = v23[1];
    v30 = v24;
    v25 = v17[v19[20]];
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    outlined init with take of URL?(v22, (uint64_t)v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v8, v14, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, (uint64_t)v5, &demangling cache variable for type metadata for URL?);
    v26 = objc_allocWithZone((Class)CMLNetworkManager);
    v27 = @nonobjc CMLNetworkManager.init(type:endpoint:issuer:authenticationToken:privacyProxyFailOpen:)(1, (uint64_t)v8, (uint64_t)v5, v30, v29, (v25 & 1) == 0);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v27;
}

void NetworkConfig.init(networkConfig:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  id v29;
  void *v30;
  uint64_t v31;
  int *v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unsigned __int8 v41;
  _QWORD v42[2];
  uint64_t v43;

  v43 = a2;
  v4 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v42 - v11;
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v42 - v18;
  v20 = objc_msgSend(a1, sel_type);
  if (v20 == (id)2)
  {

    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v22 = v43;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v43, 2, 2, v23);
    goto LABEL_6;
  }
  if (v20 == (id)1)
  {
    v42[1] = v2;
    v25 = objc_msgSend(a1, sel_endpoint);
    if (v25)
    {
      v26 = v25;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v27 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v27(v12, v17, v13);
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v28(v12, 0, 1, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
      {
        v27(v19, v12, v13);
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v6, v19, v13);
        v29 = objc_msgSend(a1, sel_issuer);
        if (v29)
        {
          v30 = v29;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          v31 = 0;
        }
        else
        {
          v31 = 1;
        }
        v28(v10, v31, 1, v13);
        v32 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
        outlined init with take of URL?((uint64_t)v10, (uint64_t)&v6[v32[12]]);
        v33 = objc_msgSend(a1, sel_authenticationToken);
        if (v33)
        {
          v34 = v33;
          v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v37 = v36;

          v38 = v35;
        }
        else
        {
          v38 = 0;
          v37 = 0xF000000000000000;
        }
        v39 = &v6[v32[16]];
        v40 = v32[20];
        *(_QWORD *)v39 = v38;
        *((_QWORD *)v39 + 1) = v37;
        v41 = objc_msgSend(a1, sel_privacyProxyFailOpen);

        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
        v6[v40] = v41 ^ 1;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v32 - 1) + 56))(v6, 0, 2, v32);
        v22 = v43;
        outlined init with take of SecretKey((uint64_t)v6, v43, type metadata accessor for NetworkManagerType);
        goto LABEL_6;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for URL?);
  }
  else if (!v20)
  {

    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v22 = v43;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v43, 1, 2, v21);
LABEL_6:
    v24 = (_QWORD *)(v22 + *(int *)(type metadata accessor for NetworkConfig(0) + 20));
    *v24 = 0;
    v24[1] = 0;
    return;
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();

}

id UseCase.useCaseConfig.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;
  uint64_t v7;
  char v8;
  char v9;

  outlined init with take of UseCase(v0, (uint64_t)v5);
  if ((v9 & 0x80000000) == 0)
    return objc_msgSend(objc_allocWithZone((Class)CMLUseCaseConfig), sel_initWithType_maxShards_cacheElementCount_, 1, 0, 0);
  v9 &= ~0x80u;
  v2 = v5[0];
  if (v6)
    v3 = 0;
  else
    v3 = v5[1];
  if (v8 == 1)
  {
    if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
      swift_once();
    v4 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
  }
  else
  {
    v4 = v7;
  }
  return objc_msgSend(objc_allocWithZone((Class)CMLUseCaseConfig), sel_initWithType_maxShards_cacheElementCount_cacheEntryMinutesToLive_, 0, v2, v3, v4);
}

void UseCase.init(useCaseConfig:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v5;
  id v6;
  id v7;
  id v8;
  _BOOL8 v9;
  char v10;

  v5 = objc_msgSend(a1, sel_type);
  if (v5 == (id)1)
  {

    v7 = 0;
    v6 = 0;
    v9 = 0;
    v8 = 0;
    v10 = 1;
LABEL_6:
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 40) = v10;
    return;
  }
  if (!v5)
  {
    v6 = objc_msgSend(a1, sel_cacheElementCount);
    v7 = objc_msgSend(a1, sel_maxShards);
    v8 = objc_msgSend(a1, sel_cacheEntryMinutesToLive);
    specialized static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)((uint64_t)v6, v6 == 0, (uint64_t)v8, 0);

    if (v2)
      return;
    v9 = v6 == 0;
    v10 = 0x80;
    goto LABEL_6;
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();

}

id @nonobjc CMLNetworkManager.init(type:endpoint:issuer:authenticationToken:privacyProxyFailOpen:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  NSURL *v15;
  void *v16;
  void *v17;
  NSURL *v18;
  void *v19;
  void *v20;
  Class isa;
  id v22;
  id v24;

  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v16 = 0;
  if (v14(a2, 1, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v15);
    v16 = v17;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
  }
  if (v14(a3, 1, v12) == 1)
  {
    v19 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v18);
    v19 = v20;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  }
  if (a5 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a4, a5);
  }
  v22 = objc_msgSend(v24, sel_initWithType_endpoint_issuer_authenticationToken_privacyProxyFailOpen_, a1, v16, v19, isa, a6 & 1);

  return v22;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (uint64_t)a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup))
              + 48);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
  v7 = *a1;
  v6 = a1[1];
  outlined init with copy of SecretKey(v4, (uint64_t)a2 + *(int *)(v5 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  *a2 = v7;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  _QWORD *v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v10 = type metadata accessor for UseCaseGroup();
  v52 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v51 = (uint64_t)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v50 = (uint64_t)v49 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v60 = (uint64_t)v49 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup)?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (_QWORD *)((char *)v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = -1 << *(_BYTE *)(a1 + 32);
  v20 = ~v19;
  v21 = *(_QWORD *)(a1 + 64);
  v22 = -v19;
  v53 = a1;
  v54 = a1 + 64;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  else
    v23 = -1;
  v55 = v20;
  v56 = 0;
  v57 = v23 & v21;
  v58 = a2;
  v59 = a3;
  v49[2] = a1;
  swift_bridgeObjectRetain();
  v49[1] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v18);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v18, 1, v24) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : String].Iterator._Variant();
    return swift_release();
  }
  v26 = type metadata accessor for UseCaseGroup;
  while (1)
  {
    v32 = *v18;
    v31 = v18[1];
    v33 = v26;
    outlined init with take of SecretKey((uint64_t)v18 + *(int *)(v24 + 48), v60, (uint64_t (*)(_QWORD))v26);
    v34 = *(_QWORD **)a5;
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
    v37 = v34[2];
    v38 = (v35 & 1) == 0;
    v39 = v37 + v38;
    if (__OFADD__(v37, v38))
      break;
    v40 = v35;
    if (v34[3] >= v39)
    {
      if ((a4 & 1) != 0)
      {
        v43 = *(_QWORD **)a5;
        if ((v35 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v43 = *(_QWORD **)a5;
        if ((v40 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, a4 & 1);
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31);
      if ((v40 & 1) != (v42 & 1))
        goto LABEL_22;
      v36 = v41;
      v43 = *(_QWORD **)a5;
      if ((v40 & 1) != 0)
      {
LABEL_7:
        v27 = v43[7];
        v28 = v51;
        v29 = *(_QWORD *)(v52 + 72) * v36;
        v26 = v33;
        outlined init with copy of SecretKey(v27 + v29, v51, (uint64_t (*)(_QWORD))v33);
        v30 = v50;
        outlined init with copy of SecretKey(v28, v50, (uint64_t (*)(_QWORD))v33);
        outlined destroy of UseCaseGroup(v28);
        outlined destroy of UseCaseGroup(v60);
        swift_bridgeObjectRelease();
        outlined assign with take of UseCaseGroup(v30, *(_QWORD *)(*(_QWORD *)a5 + 56) + v29);
        goto LABEL_8;
      }
    }
    v43[(v36 >> 6) + 8] |= 1 << v36;
    v44 = (uint64_t *)(v43[6] + 16 * v36);
    *v44 = v32;
    v44[1] = v31;
    v45 = v43[7] + *(_QWORD *)(v52 + 72) * v36;
    v26 = v33;
    outlined init with take of SecretKey(v60, v45, (uint64_t (*)(_QWORD))v33);
    v46 = v43[2];
    v47 = __OFADD__(v46, 1);
    v48 = v46 + 1;
    if (v47)
      goto LABEL_21;
    v43[2] = v48;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v18);
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
    a4 = 1;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v18, 1, v24) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  BOOL v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  Class isa;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = type metadata accessor for UseCaseGroup();
  v39 = *(_QWORD *)(v2 - 8);
  v40 = (int *)v2;
  MEMORY[0x24BDAC7A8](v2);
  v37 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CMLUseCaseGroup>);
  result = static _DictionaryStorage.copy(original:)();
  v5 = 0;
  v41 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v34 = v7;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v36 = result + 64;
  v38 = result;
  v12 = (uint64_t)v37;
  if (!v11)
    goto LABEL_5;
LABEL_4:
  v42 = (v11 - 1) & v11;
  v43 = v5;
  for (i = __clz(__rbit64(v11)) | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v15 << 6))
  {
    v46 = 16 * i;
    v18 = *(_QWORD *)(v41 + 56);
    v19 = (uint64_t *)(*(_QWORD *)(v41 + 48) + 16 * i);
    v20 = v19[1];
    v47 = *v19;
    v45 = v20;
    outlined init with copy of SecretKey(v18 + *(_QWORD *)(v39 + 72) * i, v12, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v21 = v40;
    v22 = *(_QWORD *)(v12 + v40[8]);
    swift_bridgeObjectRetain();
    specialized _NativeDictionary.mapValues<A>(_:)(v22);
    v23 = *(_QWORD *)(v12 + v21[5]);
    v44 = *(_QWORD *)(v12 + v21[6]);
    v24 = *(unsigned __int8 *)(v12 + v21[7]);
    v25 = NetworkConfig.networkConfig.getter();
    v26 = objc_allocWithZone((Class)CMLUseCaseGroup);
    type metadata accessor for CMLUseCaseConfig();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    v28 = objc_msgSend(v26, sel_initWithKeyExpirationMinutes_keyRotationBeforeExpirationMinutes_keyRotationIgnoreMissingEvaluationKey_useCases_networkConfig_, v23, v44, v24, isa, v25);

    outlined destroy of UseCaseGroup(v12);
    *(_QWORD *)(v36 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = v38;
    v29 = (_QWORD *)(*(_QWORD *)(v38 + 48) + v46);
    v30 = v45;
    *v29 = v47;
    v29[1] = v30;
    *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * i) = v28;
    v31 = *(_QWORD *)(result + 16);
    v14 = __OFADD__(v31, 1);
    v32 = v31 + 1;
    if (v14)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    *(_QWORD *)(result + 16) = v32;
    v11 = v42;
    v5 = v43;
    if (v42)
      goto LABEL_4;
LABEL_5:
    v14 = __OFADD__(v5, 1);
    v15 = v5 + 1;
    if (v14)
      goto LABEL_25;
    if (v15 >= v35)
      return result;
    v16 = *(_QWORD *)(v34 + 8 * v15);
    if (!v16)
      break;
LABEL_15:
    v42 = (v16 - 1) & v16;
    v43 = v15;
  }
  v17 = v15 + 1;
  if (v15 + 1 >= v35)
    return result;
  v16 = *(_QWORD *)(v34 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v15 + 2;
  if (v15 + 2 >= v35)
    return result;
  v16 = *(_QWORD *)(v34 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v15 + 3;
  if (v15 + 3 >= v35)
    return result;
  v16 = *(_QWORD *)(v34 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v15 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v35)
      return result;
    v16 = *(_QWORD *)(v34 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  id v1;
  uint64_t result;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  int64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  char v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UseCase>);
  result = static _DictionaryStorage.copy(original:)();
  v4 = 0;
  v42 = (_QWORD *)result;
  v43 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v38 = v6;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v41 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    v1 = *(id *)(*(_QWORD *)(v43 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    v19 = objc_msgSend(v1, sel_type);
    if (v19 != (id)1)
      break;
    v23 = v4;
    v24 = v18;

    v21 = 0;
    v20 = 0;
    v25 = 0;
    v27 = 0;
    v26 = 1;
LABEL_26:
    result = (uint64_t)v42;
    *(_QWORD *)(v41 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v28 = (_QWORD *)(v42[6] + 16 * i);
    *v28 = v17;
    v28[1] = v24;
    v29 = v42[7] + 48 * i;
    *(_QWORD *)v29 = v21;
    *(_QWORD *)(v29 + 8) = v20;
    *(_QWORD *)(v29 + 16) = v25;
    *(_QWORD *)(v29 + 24) = v27;
    *(_QWORD *)(v29 + 32) = 0;
    *(_BYTE *)(v29 + 40) = v26;
    v30 = v42[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v42[2] = v32;
    v4 = v23;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_37;
    if (v13 >= v39)
      return result;
    v14 = *(_QWORD *)(v38 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v39)
        return result;
      v14 = *(_QWORD *)(v38 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v39)
          return result;
        v14 = *(_QWORD *)(v38 + 8 * v4);
        if (!v14)
        {
          v15 = v13 + 3;
          if (v15 >= v39)
            return result;
          v14 = *(_QWORD *)(v38 + 8 * v15);
          if (v14)
          {
            v4 = v15;
            goto LABEL_18;
          }
          while (1)
          {
            v4 = v15 + 1;
            if (__OFADD__(v15, 1))
              break;
            if (v4 >= v39)
              return result;
            v14 = *(_QWORD *)(v38 + 8 * v4);
            ++v15;
            if (v14)
              goto LABEL_18;
          }
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
  }
  if (v19)
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
    swift_allocError();
    goto LABEL_35;
  }
  v20 = objc_msgSend(v1, sel_cacheElementCount);
  v21 = objc_msgSend(v1, sel_maxShards);
  v22 = objc_msgSend(v1, sel_cacheEntryMinutesToLive);
  if (one-time initialization token for maximumCacheEntryMinutesToLive != -1)
  {
    v33 = v22;
    swift_once();
    v22 = v33;
  }
  v40 = v22;
  if (static StaticPIRParameters.maximumCacheEntryMinutesToLive >= (uint64_t)v22)
  {
    v23 = v4;
    v24 = v18;
    v25 = v20 == 0;

    v26 = 0x80;
    v27 = v40;
    goto LABEL_26;
  }
  if (one-time initialization token for framework == -1)
    goto LABEL_32;
LABEL_39:
  swift_once();
LABEL_32:
  v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.framework);
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc();
    *(_DWORD *)v37 = 134349312;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_237BC8000, v35, v36, "Invalid cacheEntryMinutesToLive '%{public}ld'. Must be <= %ld", (uint8_t *)v37, 0x16u);
    MEMORY[0x23B822DA8](v37, -1, -1);
  }

  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
  swift_allocError();
LABEL_35:
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();

  return (uint64_t)v42;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  BOOL v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v2);
  v37 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for AspireApiConfig(0);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AspireApiConfig>);
  result = static _DictionaryStorage.copy(original:)();
  v6 = result;
  v7 = 0;
  v39 = a1;
  v10 = *(_QWORD *)(a1 + 64);
  v9 = a1 + 64;
  v8 = v10;
  v11 = 1 << *(_BYTE *)(v9 - 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v8;
  v31 = v9;
  v32 = (unint64_t)(v11 + 63) >> 6;
  v33 = result + 64;
  v38 = result;
  v14 = (uint64_t)v35;
  if ((v12 & v8) == 0)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  v40 = v7;
  for (i = v15 | (v7 << 6); ; i = __clz(__rbit64(v19)) + (v18 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * i);
    v22 = *v21;
    v23 = v21[1];
    v24 = (uint64_t *)(*(_QWORD *)(v39 + 56) + 16 * i);
    v25 = *v24;
    v26 = v24[1];
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    outlined copy of Data._Representation(v25, v26);
    outlined copy of Data._Representation(v25, v26);
    swift_bridgeObjectRetain();
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
    v27 = v44;
    Message.init(serializedData:extensions:partial:options:)();
    v44 = v27;
    if (v27)
    {
      swift_bridgeObjectRelease();
      v6 = v38;
      swift_release();
      outlined consume of Data._Representation(v25, v26);
      return v6;
    }
    outlined consume of Data._Representation(v25, v26);
    *(_QWORD *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v6 = v38;
    v28 = (_QWORD *)(*(_QWORD *)(v38 + 48) + 16 * i);
    *v28 = v22;
    v28[1] = v23;
    result = outlined init with take of SecretKey(v14, *(_QWORD *)(v6 + 56) + *(_QWORD *)(v34 + 72) * i, type metadata accessor for AspireApiConfig);
    v29 = *(_QWORD *)(v6 + 16);
    v17 = __OFADD__(v29, 1);
    v30 = v29 + 1;
    if (v17)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    *(_QWORD *)(v6 + 16) = v30;
    v7 = v40;
    if (v13)
      goto LABEL_4;
LABEL_5:
    v17 = __OFADD__(v7, 1);
    v18 = v7 + 1;
    if (v17)
      goto LABEL_27;
    if (v18 >= v32)
      return v6;
    v19 = *(_QWORD *)(v31 + 8 * v18);
    if (!v19)
      break;
LABEL_15:
    v13 = (v19 - 1) & v19;
    v40 = v18;
  }
  v20 = v18 + 1;
  if (v18 + 1 >= v32)
    return v6;
  v19 = *(_QWORD *)(v31 + 8 * v20);
  if (v19)
    goto LABEL_14;
  v20 = v18 + 2;
  if (v18 + 2 >= v32)
    return v6;
  v19 = *(_QWORD *)(v31 + 8 * v20);
  if (v19)
    goto LABEL_14;
  v20 = v18 + 3;
  if (v18 + 3 >= v32)
    return v6;
  v19 = *(_QWORD *)(v31 + 8 * v20);
  if (v19)
  {
LABEL_14:
    v18 = v20;
    goto LABEL_15;
  }
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v32)
      return v6;
    v19 = *(_QWORD *)(v31 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = v1;
  v4 = type metadata accessor for AspireApiConfig(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  result = static _DictionaryStorage.copy(original:)();
  v8 = 0;
  v36 = a1;
  v37 = result;
  v9 = *(_QWORD *)(a1 + 64);
  v31 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v32 = (unint64_t)(v10 + 63) >> 6;
  v33 = result + 64;
  if ((v11 & v9) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v13 | (v8 << 6); ; i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    outlined init with copy of AspireApiConfig(*(_QWORD *)(v36 + 56) + *(_QWORD *)(v34 + 72) * i, (uint64_t)v6);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
    swift_bridgeObjectRetain();
    v21 = Message.serializedData(partial:)();
    if (v2)
    {
      swift_bridgeObjectRelease();
      v29 = v37;
      swift_release();
      outlined destroy of AspireApiConfig((uint64_t)v6);
      return v29;
    }
    v23 = v21;
    v24 = v22;
    v38 = v19;
    outlined destroy of AspireApiConfig((uint64_t)v6);
    *(_QWORD *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = v37;
    v25 = (_QWORD *)(*(_QWORD *)(v37 + 48) + 16 * i);
    *v25 = v38;
    v25[1] = v20;
    v26 = (uint64_t *)(*(_QWORD *)(result + 56) + 16 * i);
    *v26 = v23;
    v26[1] = v24;
    v27 = *(_QWORD *)(result + 16);
    v15 = __OFADD__(v27, 1);
    v28 = v27 + 1;
    if (v15)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    *(_QWORD *)(result + 16) = v28;
    v2 = 0;
    if (v12)
      goto LABEL_4;
LABEL_5:
    v15 = __OFADD__(v8++, 1);
    if (v15)
      goto LABEL_28;
    if (v8 >= v32)
      return result;
    v16 = *(_QWORD *)(v31 + 8 * v8);
    if (!v16)
      break;
LABEL_15:
    v12 = (v16 - 1) & v16;
  }
  v17 = v8 + 1;
  if (v8 + 1 >= v32)
    return result;
  v16 = *(_QWORD *)(v31 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v8 + 2;
  if (v8 + 2 >= v32)
    return result;
  v16 = *(_QWORD *)(v31 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v8 + 3;
  if (v8 + 3 >= v32)
    return result;
  v16 = *(_QWORD *)(v31 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v8 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v32)
      return v37;
    v16 = *(_QWORD *)(v31 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CMLUseCaseConfig>);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)();
  v3 = result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v29 = a1;
  v30 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v31 = (unint64_t)(v6 + 63) >> 6;
  v9 = (char *)(result + 8);
  v28 = (char *)(result + 8);
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(a1 + 56) + 48 * i;
    if (*(char *)(v18 + 40) < 0)
    {
      v20 = *(_QWORD *)v18;
      if ((*(_BYTE *)(v18 + 16) & 1) != 0)
        v21 = 0;
      else
        v21 = *(_QWORD *)(v18 + 8);
      if ((*(_BYTE *)(v18 + 32) & 1) != 0)
      {
        v23 = one-time initialization token for defaultCacheEntryMinutesToLive;
        swift_bridgeObjectRetain();
        if (v23 != -1)
          swift_once();
        v22 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
      }
      else
      {
        v22 = *(_QWORD *)(v18 + 24);
        swift_bridgeObjectRetain();
      }
      result = objc_msgSend(objc_allocWithZone((Class)CMLUseCaseConfig), sel_initWithType_maxShards_cacheElementCount_cacheEntryMinutesToLive_, 0, v20, v21, v22);
      v9 = v28;
      a1 = v29;
    }
    else
    {
      v19 = objc_allocWithZone((Class)CMLUseCaseConfig);
      swift_bridgeObjectRetain();
      result = objc_msgSend(v19, sel_initWithType_maxShards_cacheElementCount_, 1, 0, 0);
    }
    *(_QWORD *)&v9[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    v24 = (_QWORD *)(v3[6] + 16 * i);
    *v24 = v16;
    v24[1] = v17;
    *(_QWORD *)(v3[7] + 8 * i) = result;
    v25 = v3[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    v3[2] = v27;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_35;
    if (v12 >= v31)
      return v3;
    v13 = *(_QWORD *)(v30 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v31)
        return v3;
      v13 = *(_QWORD *)(v30 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v31)
          return v3;
        v13 = *(_QWORD *)(v30 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v31)
    return v3;
  v13 = *(_QWORD *)(v30 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v31)
      return v3;
    v13 = *(_QWORD *)(v30 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for CMLUseCaseConfig()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CMLUseCaseConfig;
  if (!lazy cache variable for type metadata for CMLUseCaseConfig)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CMLUseCaseConfig);
  }
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError;
  if (!lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError)
  {
    v1 = type metadata accessor for CipherMLError();
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for CipherMLError, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError);
  }
  return result;
}

uint64_t outlined destroy of UseCaseGroup(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UseCaseGroup();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of UseCaseGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UseCaseGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for Date?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AspireApiConfig(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for AspireApiConfig?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for AspireApiConfig?);
  }
  else
  {
    outlined init with take of SecretKey(a1, (uint64_t)v13, type metadata accessor for AspireApiConfig);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SecretKey();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for SecretKey?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    outlined consume of Data._Representation(a2, a3);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for SecretKey?);
  }
  else
  {
    outlined init with take of SecretKey(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return outlined consume of Data._Representation(a2, a3);
  }
}

void *ActiveUseCaseTracker.activeInterval.unsafeMutableAddressor()
{
  return &static ActiveUseCaseTracker.activeInterval;
}

double static ActiveUseCaseTracker.activeInterval.getter()
{
  return 3888000.0;
}

uint64_t ActiveUseCaseTracker.persistenceFile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile, a1);
}

uint64_t key path setter for ActiveUseCaseTracker.lastUsed : ActiveUseCaseTracker(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t ActiveUseCaseTracker.lastUsed.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ActiveUseCaseTracker.lastUsed.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ActiveUseCaseTracker.lastUsed.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify;
}

uint64_t ActiveUseCaseTracker.currentDate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
  swift_retain();
  return v1;
}

uint64_t ActiveUseCaseTracker.activeUseCases.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void (*v9)(_BYTE *, uint64_t);
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  _BYTE *v16;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = &v15[-v7];
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate))(v6);
  Date.addingTimeInterval(_:)();
  v9 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
  v9(v5, v1);
  v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  v11 = *v10;
  v16 = v8;
  swift_bridgeObjectRetain();
  v12 = specialized _NativeDictionary.filter(_:)((uint64_t)partial apply for closure #1 in ActiveUseCaseTracker.activeUseCases.getter, (uint64_t)v15, v11);
  swift_bridgeObjectRelease();
  v13 = specialized Set.init<A>(_:)(v12);
  v9(v8, v1);
  return v13;
}

uint64_t closure #1 in ActiveUseCaseTracker.activeUseCases.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Date));
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *a1;
  v9 = a1[1];
  *v7 = v8;
  v7[1] = v9;
  v10 = (char *)v7 + *(int *)(v5 + 48);
  v11 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, a2, v11);
  swift_bridgeObjectRetain();
  v12 = static Date.> infix(_:_:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for (key: String, value: Date));
  return v12 & 1;
}

uint64_t ActiveUseCaseTracker.__allocating_init(persistenceFile:lastUsed:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = swift_allocObject();
  swift_defaultActor_initialize();
  outlined init with take of URL?(a1, v8 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed) = a2;
  v9 = (_QWORD *)(v8 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
  *v9 = a3;
  v9[1] = a4;
  return v8;
}

uint64_t ActiveUseCaseTracker.init(persistenceFile:lastUsed:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  swift_defaultActor_initialize();
  outlined init with take of URL?(a1, v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed) = a2;
  v9 = (_QWORD *)(v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
  *v9 = a3;
  v9[1] = a4;
  return v4;
}

uint64_t ActiveUseCaseTracker.markActive(useCase:active:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v38;
  char *v39;
  char *v40;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v8);
  v40 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v39 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v38 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    v38 = (uint64_t)v18;
    v22 = a1;
    v23 = *(void (**)(uint64_t))(v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
    v24 = swift_bridgeObjectRetain();
    v23(v24);
    v25 = type metadata accessor for Date();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v21, 0, 1, v25);
    swift_beginAccess();
    v26 = (uint64_t)v21;
    v27 = v22;
    v18 = (char *)v38;
  }
  else
  {
    v28 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v21, 1, 1, v28);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v26 = (uint64_t)v21;
    v27 = a1;
  }
  specialized Dictionary.subscript.setter(v26, v27, a2);
  swift_endAccess();
  outlined init with copy of URL?(v4 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for URL?);
    return 0;
  }
  else
  {
    v30 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v30(v18, v12, v13);
    v38 = os_transaction_create();
    v31 = (uint64_t)v40;
    static TaskPriority.background.getter();
    v32 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 0, 1, v32);
    v33 = v39;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v18, v13);
    v34 = lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type ActiveUseCaseTracker and conformance ActiveUseCaseTracker, (uint64_t (*)(uint64_t))type metadata accessor for ActiveUseCaseTracker, (uint64_t)&protocol conformance descriptor for ActiveUseCaseTracker);
    v35 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v36 = (char *)swift_allocObject();
    *((_QWORD *)v36 + 2) = v4;
    *((_QWORD *)v36 + 3) = v34;
    *((_QWORD *)v36 + 4) = v38;
    *((_QWORD *)v36 + 5) = v4;
    v30(&v36[v35], v33, v13);
    swift_retain_n();
    v29 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v31, (uint64_t)&async function pointer to partial apply for closure #1 in ActiveUseCaseTracker.markActive(useCase:active:), (uint64_t)v36);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }
  return v29;
}

uint64_t closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)()
{
  uint64_t v0;

  closure #1 in closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  os_log_t v26;
  uint64_t v27;
  os_log_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  v9 = (uint64_t *)(a1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  v33 = *v9;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Date]);
  lazy protocol witness table accessor for type [String : Date] and conformance <> [A : B]();
  v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (one-time initialization token for daemon != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.daemon);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    v15 = v2;
    v16 = v2;
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v31 = 0;
      v20 = v19;
      v29 = (_QWORD *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v33 = v30;
      *(_DWORD *)v20 = 136446466;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v21 = dispatch thunk of CustomStringConvertible.description.getter();
      v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v33);
      v28 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      *(_WORD *)(v20 + 12) = 2114;
      v23 = v2;
      v24 = _swift_stdlib_bridgeErrorToNSError();
      v32 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v25 = v29;
      *v29 = v24;

      v26 = v28;
      _os_log_impl(&dword_237BC8000, v28, v18, "ActiveUseCaseTracker failed to save lastUsed field to '%{public}s': %{public}@", (uint8_t *)v20, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v25, -1, -1);
      v27 = v30;
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v27, -1, -1);
      MEMORY[0x23B822DA8](v20, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    v12 = v10;
    v13 = v11;
    swift_bridgeObjectRelease();
    Data.write(to:options:)();
    outlined consume of Data._Representation(v12, v13);
    swift_release();
  }
}

Swift::Bool __swiftcall ActiveUseCaseTracker.isActive(useCase:)(Swift::String useCase)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v2 = v1;
  object = useCase._object;
  countAndFlagsBits = useCase._countAndFlagsBits;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v27 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v27 - v16;
  v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  v19 = *v18;
  if (*(_QWORD *)(v19 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v21 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, *(_QWORD *)(v19 + 56) + *(_QWORD *)(v9 + 72) * v20, v8);
      v22 = 0;
    }
    else
    {
      v22 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v22, 1, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
      (*(void (**)(uint64_t))(v2 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate))(v24);
      Date.addingTimeInterval(_:)();
      v25 = *(void (**)(char *, uint64_t))(v9 + 8);
      v25(v12, v8);
      v23 = static Date.> infix(_:_:)();
      v25(v15, v8);
      v25(v17, v8);
      return v23 & 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for Date?);
  v23 = 0;
  return v23 & 1;
}

uint64_t ActiveUseCaseTracker.deinit()
{
  uint64_t v0;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile, &demangling cache variable for type metadata for URL?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ActiveUseCaseTracker.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile, &demangling cache variable for type metadata for URL?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t ActiveUseCaseTracker.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v6)(_QWORD *, char *);
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v6 = (uint64_t (*)(_QWORD *, char *))isStackAllocationSafe;
  v13[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(a3 + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a3, v6);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v8, a3, v6);
    MEMORY[0x23B822DA8](v11, -1, -1);
  }
  return a2;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, char *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t (*v31)(_QWORD *, char *);
  _QWORD v32[2];
  _QWORD *v33;

  v31 = a4;
  v26 = a2;
  v27 = a1;
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v33 = (_QWORD *)a3;
  v12 = *(_QWORD *)(a3 + 64);
  v28 = 0;
  v29 = a3 + 64;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v30 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v11 << 6);
LABEL_17:
    v21 = v33[7];
    v22 = (_QWORD *)(v33[6] + 16 * v17);
    v23 = v22[1];
    v32[0] = *v22;
    v32[1] = v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v21 + *(_QWORD *)(v7 + 72) * v17, v6);
    swift_bridgeObjectRetain();
    v24 = v31(v32, v10);
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      return swift_bridgeObjectRelease();
    }
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    result = swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      *(unint64_t *)((char *)v27 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = __OFADD__(v28++, 1);
      if (v18)
        goto LABEL_30;
    }
  }
  v18 = __OFADD__(v11++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v30)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v27, v26, v28, v33);
  v19 = *(_QWORD *)(v29 + 8 * v11);
  if (v19)
  {
LABEL_16:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_17;
  }
  v20 = v11 + 1;
  if (v11 + 1 >= v30)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v27, v26, v28, v33);
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 2;
  if (v11 + 2 >= v30)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v27, v26, v28, v33);
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 3;
  if (v11 + 3 >= v30)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v27, v26, v28, v33);
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v11 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v30)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v27, v26, v28, v33);
    v19 = *(_QWORD *)(v29 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized ActiveUseCaseTracker.__allocating_init(persistenceFile:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v20 - v6;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20 - v11;
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  outlined init with copy of URL?(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v22 = v13;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    v14 = Data.init(contentsOf:options:)();
    v16 = v15;
    v21 = a1;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Date]);
    lazy protocol witness table accessor for type [String : Date] and conformance <> [A : B]();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v14, v16);
    swift_release();
    v13 = v23;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_bridgeObjectRelease();
    a1 = v21;
  }
  outlined init with copy of URL?(a1, (uint64_t)v5);
  type metadata accessor for ActiveUseCaseTracker();
  v17 = swift_allocObject();
  swift_defaultActor_initialize();
  outlined init with take of URL?((uint64_t)v5, v17 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_persistenceFile);
  *(_QWORD *)(v17 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed) = v13;
  v18 = (_QWORD *)(v17 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_currentDate);
  *v18 = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
  v18[1] = 0;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for URL?);
  return v17;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ActiveUseCaseTracker.activeUseCases.getter(uint64_t *a1, uint64_t a2)
{
  return closure #1 in ActiveUseCaseTracker.activeUseCases.getter(a1, a2) & 1;
}

uint64_t type metadata accessor for ActiveUseCaseTracker()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ActiveUseCaseTracker;
  if (!type metadata singleton initialization cache for ActiveUseCaseTracker)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_237C74318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActiveUseCaseTracker.markActive(useCase:active:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = v1 + ((v4 + 48) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_237C74428@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t ObjC metadata update function for ActiveUseCaseTracker()
{
  return type metadata accessor for ActiveUseCaseTracker();
}

void type metadata completion function for ActiveUseCaseTracker()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ActiveUseCaseTracker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.lastUsed.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.lastUsed.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.lastUsed.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.activeUseCases.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.__allocating_init(persistenceFile:lastUsed:currentDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.markActive(useCase:active:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ActiveUseCaseTracker.isActive(useCase:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t OSAllocatedUnfairLock<A>.current.getter(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 16);
  swift_retain();
  os_unfair_lock_unlock(v2);
  return v3;
}

uint8_t *AllowList.__allocating_init()()
{
  return specialized AllowList.__allocating_init()();
}

uint64_t *AllowList.empty.unsafeMutableAddressor()
{
  if (one-time initialization token for empty != -1)
    swift_once();
  return &static AllowList.empty;
}

uint64_t AllowList.group(useCase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = v3;
  v6 = *(_QWORD *)(v3 + 48);
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v21 = type metadata accessor for UseCaseGroup();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a3, 1, 1, v21);
  }
  v11 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v9);
  v13 = *v11;
  v12 = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v14 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12), (v16 & 1) != 0))
  {
    v17 = v15;
    v18 = *(_QWORD *)(v14 + 56);
    v19 = type metadata accessor for UseCaseGroup();
    v20 = *(_QWORD *)(v19 - 8);
    outlined init with copy of SecretKey(v18 + *(_QWORD *)(v20 + 72) * v17, a3, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a3, 0, 1, v19);
  }
  else
  {
    v23 = type metadata accessor for UseCaseGroup();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a3, 1, 1, v23);
  }
  return swift_bridgeObjectRelease();
}

uint64_t AllowList.isAllowListed(group:encryptionParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, unint64_t, uint64_t);
  char *v64;
  void (*v65)(char *, uint64_t);
  void (*v66)(char *, unint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;

  v69 = type metadata accessor for AspireHeEncryptionParameters(0);
  MEMORY[0x24BDAC7A8](v69);
  v70 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HE.RlweParams();
  v72 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v73 = (uint8_t *)&v59 - v10;
  v11 = type metadata accessor for HE.Scheme();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v17 = *(_QWORD *)(a2 + 56);
  v18 = *(unsigned __int8 *)(a2 + 64);
  if (v18 != 1 || !v17)
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    *(_QWORD *)v23 = v17;
    *(_BYTE *)(v23 + 8) = v18;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return 1;
  }
  v67 = v6;
  v68 = a2;
  v19 = (unsigned int *)MEMORY[0x24BE2A1C8];
  if (v17 != 1)
    v19 = (unsigned int *)MEMORY[0x24BE2A1D0];
  v20 = (char *)&v59 - v15;
  v21 = v16;
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))((char *)&v59 - v15, *v19, v11);
  v22 = (uint64_t)v73;
  AspireHeEncryptionParameters.rlweParams()((uint64_t)v73);
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v11);
    return 1;
  }
  v60 = v21;
  v64 = v20;
  v24 = *(_QWORD *)(v71 + 16);
  if (*(_QWORD *)(v24 + 16))
  {
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    v26 = v68;
    v27 = v22;
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v29 = MEMORY[0x24BEE4AF8];
    v26 = v68;
    v27 = v22;
  }
  v30 = v67;
  v66 = *(void (**)(char *, unint64_t, uint64_t))(v29 + 16);
  if (!v66)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v61 = v11;
  v31 = v72;
  v32 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
  v63 = *(void (**)(char *, unint64_t, uint64_t))(v72 + 16);
  v63(v9, v29 + v32, v67);
  v33 = lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type HE.RlweParams and conformance HE.RlweParams, (uint64_t (*)(uint64_t))MEMORY[0x24BE2A088], MEMORY[0x24BE2A0A0]);
  v59 = v29;
  swift_bridgeObjectRetain();
  v62 = v33;
  v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  v65 = *(void (**)(char *, uint64_t))(v31 + 8);
  v65(v9, v30);
  if ((v34 & 1) == 0)
  {
    if (v66 == (void (*)(char *, unint64_t, uint64_t))1)
    {
LABEL_24:
      swift_bridgeObjectRelease_n();
      v11 = v61;
LABEL_25:
      v27 = (uint64_t)v73;
      goto LABEL_26;
    }
    v41 = *(_QWORD *)(v72 + 72);
    v26 = v59 + v41 + v32;
    v27 = 1;
    v42 = v67;
    while (1)
    {
      v63(v9, v26, v42);
      v11 = v27 + 1;
      if (__OFADD__(v27, 1))
        break;
      v43 = dispatch thunk of static Equatable.== infix(_:_:)();
      v65(v9, v42);
      if ((v43 & 1) != 0)
        goto LABEL_15;
      ++v27;
      v26 += v41;
      if ((void (*)(char *, unint64_t, uint64_t))v11 == v66)
        goto LABEL_24;
    }
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
  v35 = *(_QWORD *)(v71 + 24);
  v11 = v61;
  v27 = (uint64_t)v73;
  v26 = v68;
  v71 = *(_QWORD *)(v35 + 16);
  if (!v71)
    goto LABEL_27;
  v36 = v60;
  v37 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  v66 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
  v66(v14, v35 + v37, v61);
  v38 = lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type HE.Scheme and conformance HE.Scheme, (uint64_t (*)(uint64_t))MEMORY[0x24BE2A1D8], MEMORY[0x24BE2A1F0]);
  swift_bridgeObjectRetain();
  v63 = (void (*)(char *, unint64_t, uint64_t))v38;
  v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  v40 = *(void (**)(char *, uint64_t))(v36 + 8);
  v40(v14, v11);
  if ((v39 & 1) == 0)
  {
    if (v71 == 1)
    {
      swift_bridgeObjectRelease();
LABEL_26:
      v26 = v68;
LABEL_27:
      if (one-time initialization token for framework == -1)
      {
LABEL_28:
        v44 = type metadata accessor for Logger();
        __swift_project_value_buffer(v44, (uint64_t)static Logger.framework);
        v45 = v26;
        v46 = v70;
        outlined init with copy of SecretKey(v45, v70, type metadata accessor for AspireHeEncryptionParameters);
        v47 = Logger.logObject.getter();
        v48 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v47, v48))
        {
          v49 = (uint8_t *)swift_slowAlloc();
          v50 = swift_slowAlloc();
          v75 = v50;
          *(_DWORD *)v49 = 136315138;
          v73 = v49 + 4;
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
          v51 = Message.textFormatString()();
          v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51._countAndFlagsBits, (unint64_t)v51._object, &v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v52 = v67;
          outlined destroy of AspireApiPECConfig(v46, type metadata accessor for AspireHeEncryptionParameters);
          _os_log_impl(&dword_237BC8000, v47, v48, "unsupportedAspireHeEncryptionParams %s", v49, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B822DA8](v50, -1, -1);
          MEMORY[0x23B822DA8](v49, -1, -1);

        }
        else
        {
          outlined destroy of AspireApiPECConfig(v46, type metadata accessor for AspireHeEncryptionParameters);

          v52 = v67;
        }
        type metadata accessor for CipherMLError();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
        swift_allocError();
        outlined init with copy of SecretKey(v68, v53, type metadata accessor for AspireHeEncryptionParameters);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v27, v52);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v11);
        return 1;
      }
LABEL_45:
      swift_once();
      goto LABEL_28;
    }
    v55 = *(_QWORD *)(v60 + 72);
    v62 = v35;
    v26 = v35 + v55 + v37;
    v27 = 1;
    while (1)
    {
      v66(v14, v26, v11);
      v56 = v11;
      v11 = v27 + 1;
      if (__OFADD__(v27, 1))
        goto LABEL_44;
      v57 = dispatch thunk of static Equatable.== infix(_:_:)();
      v40(v14, v56);
      if ((v57 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v11 = v61;
        v27 = (uint64_t)v73;
        goto LABEL_42;
      }
      ++v27;
      v26 += v55;
      v58 = v11 == v71;
      v11 = v61;
      if (v58)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_42:
  v65((char *)v27, v67);
  v40(v64, v11);
  return 1;
}

uint64_t AllowList.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(v3 + 40);
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = result;
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, a2);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v5 + 56) + 48 * v8;
      v15 = *(_OWORD *)(v10 + 16);
      v16 = *(_OWORD *)v10;
      v11 = *(_QWORD *)(v10 + 32);
      v12 = *(_BYTE *)(v10 + 40);
    }
    else
    {
      v11 = 0;
      v15 = 0u;
      v16 = 0u;
      v12 = -2;
    }
    result = swift_bridgeObjectRelease();
    v14 = v15;
    v13 = v16;
  }
  else
  {
    v11 = 0;
    v13 = 0uLL;
    v12 = -2;
    v14 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(_OWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 32) = v11;
  *(_BYTE *)(a3 + 40) = v12;
  return result;
}

uint64_t AllowList.__allocating_init(rlweParams:heSchemes:groups:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  AllowList.init(rlweParams:heSchemes:groups:)(a1, a2, a3);
  return v6;
}

uint64_t AllowList.saveAllowList(path:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t result;

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type AllowListFormat and conformance AllowListFormat();
  v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (!v0)
  {
    Data.write(to:options:)();
    return outlined consume of Data._Representation(v1, v3);
  }
  return result;
}

void (*AllowList.__allocating_init(file:)(uint64_t a1))(char *, uint64_t)
{
  return specialized AllowList.__allocating_init(file:)(a1);
}

uint64_t one-time initialization function for empty()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = MEMORY[0x24BEE4AF8];
  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2 = specialized Dictionary.init(dictionaryLiteral:)(v0);
  type metadata accessor for AllowList();
  v3 = swift_allocObject();
  result = AllowList.init(rlweParams:heSchemes:groups:)(v1, v0, v2);
  static AllowList.empty = v3;
  return result;
}

uint64_t static AllowList.empty.getter()
{
  if (one-time initialization token for empty != -1)
    swift_once();
  return swift_retain();
}

uint64_t AllowList.rlweParams.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.heSchemes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.groups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.useCases.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.useCaseToGroupMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowList.groupToUseCasesMap.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *AllowList.keys.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = swift_bridgeObjectRetain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t AllowList.init(rlweParams:heSchemes:groups:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  char v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t result;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  uint64_t *v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  int64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;

  v5 = v4;
  v116 = *v3;
  v120 = type metadata accessor for UseCaseGroup();
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x24BDAC7A8](v120);
  v127 = (uint64_t)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v124 = (uint64_t *)((char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v123 = (uint64_t *)((char *)&v113 - v13);
  v3[2] = a1;
  v3[3] = a2;
  v118 = v3;
  v3[4] = a3;
  v14 = *(_QWORD *)(a3 + 64);
  v115 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  if (v15 < 64)
    v16 = ~(-1 << v15);
  else
    v16 = -1;
  v17 = v16 & v14;
  v117 = (unint64_t)(v15 + 63) >> 6;
  v114 = v117 - 1;
  v125 = a3;
  swift_bridgeObjectRetain();
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x24BEE4B00];
  v126 = (_QWORD *)MEMORY[0x24BEE4B00];
  v128 = v5;
  v142 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (!v17)
    goto LABEL_8;
LABEL_5:
  v20 = v19;
  v121 = (v17 - 1) & v17;
  v122 = v18;
  v21 = __clz(__rbit64(v17)) | (v18 << 6);
LABEL_6:
  v22 = v124;
  v23 = *(_QWORD *)(v125 + 56);
  v24 = (_QWORD *)(*(_QWORD *)(v125 + 48) + 16 * v21);
  v25 = v24[1];
  *v124 = *v24;
  v22[1] = v25;
  v26 = v23 + *(_QWORD *)(v119 + 72) * v21;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  outlined init with copy of SecretKey(v26, (uint64_t)v22 + *(int *)(v27 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v22, 0, 1, v27);
  v28 = (uint64_t)v22;
  swift_bridgeObjectRetain();
  v19 = v20;
LABEL_26:
  v35 = v123;
  outlined init with take of (key: String, value: UseCaseGroup)?(v28, (uint64_t)v123);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36) == 1)
  {
    swift_release();
    v111 = v118;
    v118[5] = v142;
    v111[6] = v19;
    v111[7] = v126;
    return (uint64_t)v111;
  }
  v37 = v35[1];
  v131 = *v35;
  v132 = v37;
  v38 = (uint64_t)v35 + *(int *)(v36 + 48);
  v39 = v127;
  outlined init with take of SecretKey(v38, v127, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  v40 = *(_QWORD *)(v39 + *(int *)(v120 + 32));
  v41 = *(_QWORD *)(v40 + 64);
  v129 = v40 + 64;
  v42 = 1 << *(_BYTE *)(v40 + 32);
  if (v42 < 64)
    v43 = ~(-1 << v42);
  else
    v43 = -1;
  v44 = v43 & v41;
  v130 = (unint64_t)(v42 + 63) >> 6;
  v133 = v40;
  swift_bridgeObjectRetain();
  v45 = 0;
  v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v141 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v44)
  {
LABEL_31:
    v47 = __clz(__rbit64(v44));
    v48 = (v44 - 1) & v44;
    v49 = v47 | (v45 << 6);
    goto LABEL_46;
  }
  while (1)
  {
    v50 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_83;
    if (v50 >= v130)
      goto LABEL_7;
    v51 = *(_QWORD *)(v129 + 8 * v50);
    ++v45;
    if (v51)
      goto LABEL_45;
    v45 = v50 + 1;
    if (v50 + 1 >= v130)
      goto LABEL_7;
    v51 = *(_QWORD *)(v129 + 8 * v45);
    if (v51)
      goto LABEL_45;
    v45 = v50 + 2;
    if (v50 + 2 >= v130)
      goto LABEL_7;
    v51 = *(_QWORD *)(v129 + 8 * v45);
    if (v51)
      goto LABEL_45;
    v52 = v50 + 3;
    if (v52 >= v130)
    {
LABEL_7:
      swift_release();
      v29 = v126;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v144 = v29;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v46, v131, v132, isUniquelyReferenced_nonNull_native);
      v126 = v144;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of AspireApiPECConfig(v127, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v18 = v122;
      v17 = v121;
      if (v121)
        goto LABEL_5;
LABEL_8:
      v31 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_85;
      v28 = (uint64_t)v124;
      if (v31 < v117)
      {
        v32 = *(_QWORD *)(v115 + 8 * v31);
        if (v32)
          goto LABEL_11;
        v33 = v18 + 2;
        ++v18;
        if (v31 + 1 < v117)
        {
          v32 = *(_QWORD *)(v115 + 8 * v33);
          if (v32)
            goto LABEL_14;
          v18 = v31 + 1;
          if (v31 + 2 < v117)
          {
            v32 = *(_QWORD *)(v115 + 8 * (v31 + 2));
            if (v32)
            {
              v31 += 2;
              goto LABEL_11;
            }
            v33 = v31 + 3;
            v18 = v31 + 2;
            if (v31 + 3 < v117)
            {
              v32 = *(_QWORD *)(v115 + 8 * v33);
              if (!v32)
              {
                while (1)
                {
                  v31 = v33 + 1;
                  if (__OFADD__(v33, 1))
                    goto LABEL_86;
                  if (v31 >= v117)
                  {
                    v18 = v114;
                    goto LABEL_25;
                  }
                  v32 = *(_QWORD *)(v115 + 8 * v31);
                  ++v33;
                  if (v32)
                    goto LABEL_11;
                }
              }
LABEL_14:
              v31 = v33;
LABEL_11:
              v20 = v19;
              v121 = (v32 - 1) & v32;
              v21 = __clz(__rbit64(v32)) + (v31 << 6);
              v122 = v31;
              goto LABEL_6;
            }
          }
        }
      }
LABEL_25:
      v122 = v18;
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v28, 1, 1, v34);
      v121 = 0;
      goto LABEL_26;
    }
    v51 = *(_QWORD *)(v129 + 8 * v52);
    if (!v51)
    {
      while (1)
      {
        v45 = v52 + 1;
        if (__OFADD__(v52, 1))
          goto LABEL_84;
        if (v45 >= v130)
          goto LABEL_7;
        v51 = *(_QWORD *)(v129 + 8 * v45);
        ++v52;
        if (v51)
          goto LABEL_45;
      }
    }
    v45 = v52;
LABEL_45:
    v48 = (v51 - 1) & v51;
    v49 = __clz(__rbit64(v51)) + (v45 << 6);
LABEL_46:
    v53 = (uint64_t *)(*(_QWORD *)(v133 + 48) + 16 * v49);
    v55 = *v53;
    v54 = v53[1];
    v56 = *(_QWORD *)(v133 + 56) + 48 * v49;
    v57 = *(_QWORD *)(v56 + 8);
    v137 = *(_QWORD *)v56;
    v138 = v57;
    v58 = *(_QWORD *)(v56 + 24);
    v59 = *(_QWORD *)(v56 + 32);
    v139 = *(_QWORD *)(v56 + 16);
    v140 = v58;
    v60 = *(_BYTE *)(v56 + 40);
    v61 = v19[2];
    swift_bridgeObjectRetain();
    if (v61)
    {
      swift_bridgeObjectRetain();
      v62 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v54);
      if ((v63 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      v106 = (uint64_t *)(v19[7] + 16 * v62);
      v108 = *v106;
      v107 = v106[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      *v109 = v55;
      v109[1] = v54;
      v109[2] = v108;
      v109[3] = v107;
      v110 = v132;
      v109[4] = v131;
      v109[5] = v110;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_release();
      outlined destroy of AspireApiPECConfig(v127, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      swift_bridgeObjectRelease();
      swift_release();
      v111 = v118;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_deallocPartialClassInstance();
      return (uint64_t)v111;
    }
LABEL_49:
    v135 = v45;
    v136 = v59;
    v134 = v48;
    v64 = v19;
    swift_bridgeObjectRetain();
    v65 = v142;
    v66 = swift_isUniquelyReferenced_nonNull_native();
    v144 = v65;
    v143 = v55;
    v68 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v54);
    v69 = v65[2];
    v70 = (v67 & 1) == 0;
    v71 = v69 + v70;
    if (__OFADD__(v69, v70))
      break;
    v72 = v67;
    if (v65[3] >= v71)
    {
      if ((v66 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v71, v66);
      v73 = specialized __RawDictionaryStorage.find<A>(_:)(v143, v54);
      if ((v72 & 1) != (v74 & 1))
        goto LABEL_87;
      v68 = v73;
    }
    v75 = v139;
    v76 = v140;
    v78 = v137;
    v77 = v138;
    v79 = v144;
    v142 = v144;
    if ((v72 & 1) != 0)
    {
      v80 = v144[7] + 48 * v68;
      *(_QWORD *)v80 = v137;
      *(_QWORD *)(v80 + 8) = v77;
      *(_QWORD *)(v80 + 16) = v75;
      *(_QWORD *)(v80 + 24) = v76;
      *(_QWORD *)(v80 + 32) = v136;
      *(_BYTE *)(v80 + 40) = v60;
    }
    else
    {
      v144[(v68 >> 6) + 8] |= 1 << v68;
      v81 = (_QWORD *)(v79[6] + 16 * v68);
      *v81 = v143;
      v81[1] = v54;
      v82 = v79[7] + 48 * v68;
      *(_QWORD *)v82 = v78;
      *(_QWORD *)(v82 + 8) = v77;
      *(_QWORD *)(v82 + 16) = v75;
      *(_QWORD *)(v82 + 24) = v76;
      *(_QWORD *)(v82 + 32) = v136;
      *(_BYTE *)(v82 + 40) = v60;
      v83 = v79[2];
      v84 = __OFADD__(v83, 1);
      v85 = v83 + 1;
      if (v84)
        goto LABEL_81;
      v79[2] = v85;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v86 = v132;
    swift_bridgeObjectRetain();
    v87 = swift_isUniquelyReferenced_nonNull_native();
    v144 = v64;
    v88 = v143;
    v90 = specialized __RawDictionaryStorage.find<A>(_:)(v143, v54);
    v91 = v64[2];
    v92 = (v89 & 1) == 0;
    v93 = v91 + v92;
    if (__OFADD__(v91, v92))
      goto LABEL_80;
    v94 = v89;
    if (v64[3] >= v93)
    {
      if ((v87 & 1) != 0)
      {
        v19 = v144;
        if ((v89 & 1) == 0)
          goto LABEL_63;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v19 = v144;
        if ((v94 & 1) == 0)
          goto LABEL_63;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v93, v87);
      v95 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v54);
      if ((v94 & 1) != (v96 & 1))
        goto LABEL_87;
      v90 = v95;
      v19 = v144;
      if ((v94 & 1) == 0)
      {
LABEL_63:
        v19[(v90 >> 6) + 8] |= 1 << v90;
        v97 = (uint64_t *)(v19[6] + 16 * v90);
        *v97 = v88;
        v97[1] = v54;
        v98 = (_QWORD *)(v19[7] + 16 * v90);
        *v98 = v131;
        v98[1] = v86;
        v99 = v19[2];
        v84 = __OFADD__(v99, 1);
        v100 = v99 + 1;
        if (v84)
          goto LABEL_82;
        v19[2] = v100;
        swift_bridgeObjectRetain();
        goto LABEL_68;
      }
    }
    v101 = (_QWORD *)(v19[7] + 16 * v90);
    swift_bridgeObjectRelease();
    *v101 = v131;
    v101[1] = v86;
LABEL_68:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = v141;
    v102 = swift_isUniquelyReferenced_nonNull_native();
    v44 = v134;
    if ((v102 & 1) == 0)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
    v104 = v46[2];
    v103 = v46[3];
    if (v104 >= v103 >> 1)
      v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v103 > 1), v104 + 1, 1, v46);
    v46[2] = v104 + 1;
    v105 = &v46[2 * v104];
    v105[4] = v88;
    v105[5] = v54;
    v45 = v135;
    v141 = v46;
    if (v44)
      goto LABEL_31;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AllowList.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AllowList.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in OSAllocatedUnfairLock<A>.current.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for Date();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), type metadata accessor for AspireApiConfig);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return outlined copy of Data._Representation(a2, a3);
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for SecretKey();
        return outlined assign with take of AspireApiConfig(a1, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return outlined copy of Data._Representation(a2, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(_QWORD))
{
  _QWORD *v7;
  _QWORD **v11;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char v28;

  v11 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v11;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = v23[7];
        v25 = a7(0);
        return outlined assign with take of AspireApiConfig(a1, v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v17, a7);
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v21 & 1) == (v28 & 1))
    {
      v17 = v27;
      v23 = *v11;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v17, a2, a3, a1, v23, a7);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for Date();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for SecretKey();
  result = outlined init with take of SecretKey(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = (_QWORD *)(a5[6] + 16 * a1);
  *v10 = a2;
  v10[1] = a3;
  v11 = a5[7];
  v12 = a6(0);
  result = outlined init with take of SecretKey(a4, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a6);
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (uint64_t *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
  v3 = (uint64_t *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : String].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (uint64_t *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    *v11 = *v20;
    v11[1] = v22;
    if (v13 == v10)
    {
      outlined copy of Data._Representation(v21, v22);
      goto LABEL_38;
    }
    v11 += 2;
    result = outlined copy of Data._Representation(v21, v22);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void (*specialized AllowList.__allocating_init(file:)(uint64_t a1))(char *, uint64_t)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Data.init(contentsOf:options:)();
  if (v1)
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.framework);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v29 = a1;
      v21 = (uint8_t *)v20;
      v22 = swift_slowAlloc();
      v30 = v4;
      v23 = v22;
      v32 = v22;
      *(_DWORD *)v21 = 136446210;
      v28 = v1;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v16 = *(void (**)(char *, uint64_t))(v30 + 8);
      v16(v6, v3);
      _os_log_impl(&dword_237BC8000, v18, v19, "Unable to load allow list from '%{public}s'", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v23, -1, -1);
      v26 = v21;
      a1 = v29;
      MEMORY[0x23B822DA8](v26, -1, -1);
    }
    else
    {
      v16 = *(void (**)(char *, uint64_t))(v4 + 8);
      v16(v6, v3);
    }

    swift_willThrow();
    v16((char *)a1, v3);
  }
  else
  {
    v9 = v7;
    v10 = v8;
    v30 = v4;
    v11 = specialized static AllowListParser.parseAllowList(allowListData:)();
    v13 = v12;
    v29 = v14;
    v15 = v11;
    type metadata accessor for AllowList();
    v16 = (void (*)(char *, uint64_t))swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = v15;
    AllowList.init(rlweParams:heSchemes:groups:)(v15, v29, v13);
    outlined consume of Data._Representation(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a1, v3);
  }
  return v16;
}

uint8_t *specialized AllowList.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t ObjCClassFromMetadata;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void (*v17)(uint8_t *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (uint8_t *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v25 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v25 - v10;
  type metadata accessor for CMLXPCServer();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v13 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v14 = (void *)MEMORY[0x23B821F68](0x696C2D776F6C6C61, 0xEA00000000007473);
  v15 = (void *)MEMORY[0x23B821F68](0x7473696C70, 0xE500000000000000);
  v16 = objc_msgSend(v13, sel_URLForResource_withExtension_, v14, v15);

  if (v16)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v17 = *(void (**)(uint8_t *, char *, uint64_t))(v4 + 32);
    v17(v2, v9, v3);
    (*(void (**)(uint8_t *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
    if ((*(unsigned int (**)(uint8_t *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
    {
      v17((uint8_t *)v11, (char *)v2, v3);
      v18 = (uint64_t)v26;
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v26, v11, v3);
      v19 = v27;
      v20 = specialized AllowList.__allocating_init(file:)(v18);
      if (!v19)
        v2 = (uint8_t *)v20;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
      return v2;
    }
  }
  else
  {
    (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  }
  outlined destroy of URL?((uint64_t)v2);
  if (one-time initialization token for framework != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.framework);
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_237BC8000, v22, v23, "Can't get url for default allow list", v2, 2u);
    MEMORY[0x23B822DA8](v2, -1, -1);
  }

  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return v2;
}

uint64_t outlined init with take of (key: String, value: UseCaseGroup)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AllowList()
{
  return objc_opt_self();
}

uint64_t method lookup function for AllowList()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AllowList.__allocating_init(rlweParams:heSchemes:groups:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t outlined assign with take of AspireApiConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *TokenFetcherTask.__allocating_init(allowListLock:getCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t TokenFetcherTask.allowListLock.getter()
{
  return swift_retain();
}

uint64_t TokenFetcherTask.currentDate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t (*default argument 1 of TokenFetcherTask.init(allowListLock:getCurrentDate:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

_QWORD *TokenFetcherTask.init(allowListLock:getCurrentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

void static TokenFetcherTask.submitBackgroundTask()()
{
  specialized static TokenFetcherTask.submitBackgroundTask()();
}

uint64_t TokenFetcherTask.run()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[15] = v0;
  type metadata accessor for TokenFetcher.TokenFetchContext(0);
  v1[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireNetworkManager?);
  v1[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  v1[18] = swift_task_alloc();
  v2 = type metadata accessor for TokenFetcher(0);
  v1[19] = v2;
  v1[20] = *(_QWORD *)(v2 - 8);
  v1[21] = swift_task_alloc();
  v1[22] = type metadata accessor for NetworkManagerConfig(0);
  v1[23] = swift_task_alloc();
  type metadata accessor for NetworkManagerType(0);
  v1[24] = swift_task_alloc();
  v3 = type metadata accessor for UseCaseGroup();
  v1[25] = v3;
  v1[26] = *(_QWORD *)(v3 - 8);
  v1[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 120) + 16);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  v4 = 0;
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, &v78);
  v77 = v0 + 16;
  v76 = v0 + 56;
  v73 = (uint64_t *)(v0 + 96);
  os_unfair_lock_unlock(v3);
  v5 = v78;
  *(_QWORD *)(v0 + 240) = v78;
  v6 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v0 + 248) = v6;
  LOBYTE(v5) = *(_BYTE *)(v6 + 32);
  *(_BYTE *)(v0 + 360) = v5;
  v7 = 1 << v5;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v6 + 64);
  result = swift_bridgeObjectRetain();
  v74 = 0;
  *(_QWORD *)(v0 + 352) = 0;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v4 << 6);
      v14 = *(_QWORD *)(v0 + 248);
LABEL_8:
      v15 = *(_QWORD **)(v0 + 224);
      v16 = *(_QWORD *)(v0 + 208);
      v17 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v13);
      v18 = v17[1];
      *v15 = *v17;
      v15[1] = v18;
      v19 = *(_QWORD *)(v14 + 56) + *(_QWORD *)(v16 + 72) * v13;
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
      outlined init with copy of SecretKey(v19, (uint64_t)v15 + *(int *)(v20 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v15, 0, 1, v20);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    v21 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_51;
    v22 = (unint64_t)((1 << *(_BYTE *)(v0 + 360)) + 63) >> 6;
    if (v21 < v22)
    {
      v14 = *(_QWORD *)(v0 + 248);
      v23 = v14 + 64;
      v24 = *(_QWORD *)(v14 + 64 + 8 * v21);
      if (v24)
        goto LABEL_12;
      if (v4 + 2 >= v22)
        goto LABEL_26;
      v24 = *(_QWORD *)(v23 + 8 * (v4 + 2));
      if (v24)
      {
        v21 = v4 + 2;
LABEL_12:
        v9 = (v24 - 1) & v24;
        v13 = __clz(__rbit64(v24)) + (v21 << 6);
        v4 = v21;
        goto LABEL_8;
      }
      if (v4 + 3 < v22)
      {
        v24 = *(_QWORD *)(v23 + 8 * (v4 + 3));
        if (v24)
        {
          v21 = v4 + 3;
          goto LABEL_12;
        }
        v21 = v4 + 4;
        if (v4 + 4 >= v22)
        {
          v4 += 3;
          goto LABEL_27;
        }
        v24 = *(_QWORD *)(v23 + 8 * v21);
        if (v24)
          goto LABEL_12;
        v21 = v22 - 1;
        v25 = v22 - 5;
        while (v25 != v4)
        {
          v24 = *(_QWORD *)(v14 + 104 + 8 * v4++);
          if (v24)
          {
            v21 = v4 + 4;
            goto LABEL_12;
          }
        }
LABEL_26:
        v4 = v21;
        goto LABEL_27;
      }
      v4 += 2;
    }
LABEL_27:
    v26 = *(_QWORD *)(v0 + 224);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
    v9 = 0;
LABEL_28:
    *(_QWORD *)(v0 + 256) = v4;
    *(_QWORD *)(v0 + 264) = v9;
    v28 = *(_QWORD *)(v0 + 232);
    outlined init with take of (key: String, value: UseCaseGroup)?(*(_QWORD *)(v0 + 224), v28);
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29) == 1)
      break;
    v30 = *(_QWORD **)(v0 + 232);
    v31 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 192);
    v33 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 272) = *v30;
    *(_QWORD *)(v0 + 280) = v30[1];
    outlined init with take of SecretKey((uint64_t)v30 + *(int *)(v29 + 48), v31, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v34 = v31 + *(int *)(v33 + 36);
    outlined init with copy of SecretKey(v34, v32, type metadata accessor for NetworkManagerType);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v32, 2, v35))
    {
      v11 = *(_QWORD *)(v0 + 192);
      outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 216), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      swift_bridgeObjectRelease();
      result = outlined destroy of AspireApiPECConfig(v11, type metadata accessor for NetworkManagerType);
    }
    else
    {
      v36 = *(_QWORD *)(v0 + 192);
      v37 = v36 + *(int *)(v35 + 48);
      v38 = (uint64_t *)(v36 + *(int *)(v35 + 64));
      v39 = *v38;
      *(_QWORD *)(v0 + 288) = *v38;
      v40 = v38[1];
      *(_QWORD *)(v0 + 296) = v40;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, &demangling cache variable for type metadata for URL?);
      v41 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v36, v41);
      if (v40 >> 60 == 15)
      {
        v42 = *(_QWORD *)(v0 + 216);
        swift_bridgeObjectRelease();
        result = outlined destroy of AspireApiPECConfig(v42, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      }
      else
      {
        v44 = *(_QWORD *)(v0 + 176);
        v43 = *(_QWORD *)(v0 + 184);
        outlined init with copy of SecretKey(v34, v43, type metadata accessor for NetworkConfig);
        v45 = (_QWORD *)(v43 + *(int *)(v44 + 20));
        *v45 = 0;
        v45[1] = 0;
        if (one-time initialization token for shared != -1)
          swift_once();
        (*(void (**)(_QWORD))(*(_QWORD *)static NetworkManagerHelper.shared + 96))(*(_QWORD *)(v0 + 184));
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v77, v76, &demangling cache variable for type metadata for NetworkManager?);
        v46 = *(_QWORD *)(v0 + 136);
        if (!*(_QWORD *)(v0 + 80))
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v76, &demangling cache variable for type metadata for NetworkManager?);
          v65 = type metadata accessor for AspireNetworkManager();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v46, 1, 1, v65);
          goto LABEL_42;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager);
        v47 = type metadata accessor for AspireNetworkManager();
        v48 = swift_dynamicCast();
        v49 = *(_QWORD *)(v47 - 8);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, v48 ^ 1u, 1, v47);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v46, 1, v47) == 1)
        {
LABEL_42:
          v66 = *(_QWORD *)(v0 + 152);
          v67 = *(_QWORD *)(v0 + 160);
          v68 = *(_QWORD *)(v0 + 144);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for AspireNetworkManager?);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v68, 1, 1, v66);
LABEL_43:
          v69 = *(_QWORD *)(v0 + 216);
          v70 = *(_QWORD *)(v0 + 184);
          v71 = *(_QWORD *)(v0 + 144);
          swift_bridgeObjectRelease();
          outlined consume of Data?(v39, v40);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v77, &demangling cache variable for type metadata for NetworkManager?);
          outlined destroy of AspireApiPECConfig(v70, type metadata accessor for NetworkManagerConfig);
          outlined destroy of AspireApiPECConfig(v69, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
          result = outlined destroy of AMDPbHEConfig.OneOf_Config?(v71, &demangling cache variable for type metadata for TokenFetcher?);
        }
        else
        {
          v50 = *(_QWORD *)(v0 + 160);
          v75 = *(_QWORD *)(v0 + 152);
          v51 = *(_QWORD *)(v0 + 136);
          v52 = *(_QWORD *)(v0 + 144);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51 + *(int *)(v47 + 32), v52, &demangling cache variable for type metadata for TokenFetcher?);
          outlined destroy of AspireApiPECConfig(v51, (uint64_t (*)(_QWORD))type metadata accessor for AspireNetworkManager);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v52, 1, v75) == 1)
            goto LABEL_43;
          outlined init with take of SecretKey(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 168), type metadata accessor for TokenFetcher);
          if (one-time initialization token for shared != -1)
            swift_once();
          v53 = static TokenCache.shared;
          v54 = (uint64_t *)(*(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 152) + 20));
          v55 = *v54;
          v56 = v54[1];
          v57 = *(_QWORD *)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
          v58 = (_QWORD *)swift_task_alloc();
          v58[2] = v53;
          v58[3] = v55;
          v58[4] = v56;
          os_unfair_lock_lock((os_unfair_lock_t)(v57 + 24));
          closure #1 in TokenCache.count(user:)((uint64_t *)(v57 + 16), v58[3], v58[4], v73);
          os_unfair_lock_unlock((os_unfair_lock_t)(v57 + 24));
          v59 = *v73;
          result = swift_task_dealloc();
          if (v59 < 5)
          {
            *(_QWORD *)(v0 + 304) = 10 - v59;
            if (!__OFSUB__(10, v59))
            {
              v72 = (_QWORD *)swift_task_alloc();
              *(_QWORD *)(v0 + 312) = v72;
              *v72 = v0;
              v72[1] = TokenFetcherTask.run();
              return TokenFetcher.fetchContext()(*(_QWORD *)(v0 + 128));
            }
LABEL_51:
            __break(1u);
            return result;
          }
          v60 = *(_QWORD *)(v0 + 288);
          v61 = *(_QWORD *)(v0 + 296);
          v62 = *(_QWORD *)(v0 + 216);
          v63 = *(_QWORD *)(v0 + 184);
          v64 = *(_QWORD *)(v0 + 168);
          swift_bridgeObjectRelease();
          outlined consume of Data?(v60, v61);
          outlined destroy of AspireApiPECConfig(v64, type metadata accessor for TokenFetcher);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v77, &demangling cache variable for type metadata for NetworkManager?);
          outlined destroy of AspireApiPECConfig(v63, type metadata accessor for NetworkManagerConfig);
          result = outlined destroy of AspireApiPECConfig(v62, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
          v4 = *(_QWORD *)(v0 + 256);
          v9 = *(_QWORD *)(v0 + 264);
          v74 = *(_QWORD *)(v0 + 352);
          *(_QWORD *)(v0 + 352) = v74;
        }
      }
    }
  }
  swift_release();
  if (v74)
    swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[38];
  v2 = v0[21];
  v3 = v0[16];
  v4 = (_QWORD *)swift_task_alloc();
  v0[41] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v0[42] = v5;
  *v5 = v0;
  v5[1] = TokenFetcherTask.run();
  return withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t (*v46)();
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v97 = v0 + 16;
  v1 = *(void **)(v0 + 320);
  if (one-time initialization token for networking != -1)
    swift_once();
  v91 = (uint64_t *)(v0 + 96);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.networking);
  v3 = v1;
  v4 = v1;
  swift_bridgeObjectRetain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 280);
  v96 = v0 + 56;
  if (v7)
  {
    v88 = *(_QWORD *)(v0 + 288);
    v89 = *(id *)(v0 + 352);
    v10 = *(_QWORD *)(v0 + 272);
    v92 = *(_QWORD *)(v0 + 184);
    v94 = *(_QWORD *)(v0 + 216);
    v87 = *(_QWORD *)(v0 + 296);
    v90 = *(_QWORD *)(v0 + 168);
    v11 = swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v98 = v13;
    *(_DWORD *)v11 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2114;
    v14 = v1;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 112) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v15;

    _os_log_impl(&dword_237BC8000, v5, v6, "Failed to fetch more tokens for group '%{public}s': %{public}@", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v12, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v13, -1, -1);
    MEMORY[0x23B822DA8](v11, -1, -1);
    outlined consume of Data?(v88, v87);

    outlined destroy of AspireApiPECConfig(v90, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for NetworkManager?);
    outlined destroy of AspireApiPECConfig(v92, type metadata accessor for NetworkManagerConfig);
    result = outlined destroy of AspireApiPECConfig(v94, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 216);
    v18 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 168);
    outlined consume of Data?(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));

    swift_bridgeObjectRelease_n();
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for NetworkManager?);
    outlined destroy of AspireApiPECConfig(v18, type metadata accessor for NetworkManagerConfig);
    result = outlined destroy of AspireApiPECConfig(v17, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  }
  while (2)
  {
    v21 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 264);
    v93 = v1;
    *(_QWORD *)(v0 + 352) = v1;
    v22 = type metadata accessor for UseCaseGroup;
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          v24 = __clz(__rbit64(v20));
          v20 &= v20 - 1;
          v25 = v24 | (v21 << 6);
          v26 = *(_QWORD *)(v0 + 248);
LABEL_10:
          v27 = *(_QWORD **)(v0 + 224);
          v28 = *(_QWORD *)(v0 + 208);
          v29 = (_QWORD *)(*(_QWORD *)(v26 + 48) + 16 * v25);
          v30 = v29[1];
          *v27 = *v29;
          v27[1] = v30;
          v31 = *(_QWORD *)(v26 + 56) + *(_QWORD *)(v28 + 72) * v25;
          v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          v33 = v31;
          v22 = type metadata accessor for UseCaseGroup;
          outlined init with copy of SecretKey(v33, (uint64_t)v27 + *(int *)(v32 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v27, 0, 1, v32);
          swift_bridgeObjectRetain();
LABEL_32:
          *(_QWORD *)(v0 + 256) = v21;
          *(_QWORD *)(v0 + 264) = v20;
          v42 = *(_QWORD *)(v0 + 232);
          outlined init with take of (key: String, value: UseCaseGroup)?(*(_QWORD *)(v0 + 224), v42);
          v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v42, 1, v43) == 1)
          {
            swift_release();
            if (v93)
              swift_willThrow();
            swift_release();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            return (*(uint64_t (**)(void))(v0 + 8))();
          }
          v44 = *(_QWORD **)(v0 + 232);
          v45 = *(_QWORD *)(v0 + 216);
          v46 = v22;
          v47 = *(_QWORD *)(v0 + 192);
          v48 = *(_QWORD *)(v0 + 200);
          *(_QWORD *)(v0 + 272) = *v44;
          *(_QWORD *)(v0 + 280) = v44[1];
          outlined init with take of SecretKey((uint64_t)v44 + *(int *)(v43 + 48), v45, (uint64_t (*)(_QWORD))v46);
          v49 = v45 + *(int *)(v48 + 36);
          outlined init with copy of SecretKey(v49, v47, type metadata accessor for NetworkManagerType);
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v47, 2, v50))
            break;
          v23 = *(_QWORD *)(v0 + 192);
          outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 216), (uint64_t (*)(_QWORD))v46);
          swift_bridgeObjectRelease();
          result = outlined destroy of AspireApiPECConfig(v23, type metadata accessor for NetworkManagerType);
          v22 = v46;
          if (!v20)
            goto LABEL_13;
        }
        v51 = *(_QWORD *)(v0 + 192);
        v52 = v51 + *(int *)(v50 + 48);
        v53 = (uint64_t *)(v51 + *(int *)(v50 + 64));
        v54 = *v53;
        *(_QWORD *)(v0 + 288) = *v53;
        v55 = v53[1];
        *(_QWORD *)(v0 + 296) = v55;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v52, &demangling cache variable for type metadata for URL?);
        v56 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v51, v56);
        if (v55 >> 60 != 15)
          break;
        v34 = *(_QWORD *)(v0 + 216);
        swift_bridgeObjectRelease();
        v22 = type metadata accessor for UseCaseGroup;
        result = outlined destroy of AspireApiPECConfig(v34, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
LABEL_12:
        if (!v20)
          goto LABEL_13;
      }
      v58 = *(_QWORD *)(v0 + 176);
      v57 = *(_QWORD *)(v0 + 184);
      outlined init with copy of SecretKey(v49, v57, type metadata accessor for NetworkConfig);
      v59 = (_QWORD *)(v57 + *(int *)(v58 + 20));
      *v59 = 0;
      v59[1] = 0;
      if (one-time initialization token for shared != -1)
        swift_once();
      (*(void (**)(_QWORD))(*(_QWORD *)static NetworkManagerHelper.shared + 96))(*(_QWORD *)(v0 + 184));
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v97, v96, &demangling cache variable for type metadata for NetworkManager?);
      v60 = *(_QWORD *)(v0 + 136);
      if (*(_QWORD *)(v0 + 80))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager);
        v61 = type metadata accessor for AspireNetworkManager();
        v62 = swift_dynamicCast();
        v63 = *(_QWORD *)(v61 - 8);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, v62 ^ 1u, 1, v61);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v60, 1, v61) != 1)
        {
          v64 = *(_QWORD *)(v0 + 160);
          v95 = *(_QWORD *)(v0 + 152);
          v65 = *(_QWORD *)(v0 + 136);
          v66 = *(_QWORD *)(v0 + 144);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v65 + *(int *)(v61 + 32), v66, &demangling cache variable for type metadata for TokenFetcher?);
          outlined destroy of AspireApiPECConfig(v65, (uint64_t (*)(_QWORD))type metadata accessor for AspireNetworkManager);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v66, 1, v95) != 1)
          {
            outlined init with take of SecretKey(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 168), type metadata accessor for TokenFetcher);
            if (one-time initialization token for shared != -1)
              swift_once();
            v74 = static TokenCache.shared;
            v75 = (uint64_t *)(*(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 152) + 20));
            v76 = *v75;
            v77 = v75[1];
            v78 = *(_QWORD *)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
            v79 = (_QWORD *)swift_task_alloc();
            v79[2] = v74;
            v79[3] = v76;
            v79[4] = v77;
            os_unfair_lock_lock((os_unfair_lock_t)(v78 + 24));
            closure #1 in TokenCache.count(user:)((uint64_t *)(v78 + 16), v79[3], v79[4], v91);
            os_unfair_lock_unlock((os_unfair_lock_t)(v78 + 24));
            v80 = *v91;
            result = swift_task_dealloc();
            if (v80 >= 5)
            {
              v81 = *(_QWORD *)(v0 + 288);
              v82 = *(_QWORD *)(v0 + 296);
              v83 = *(_QWORD *)(v0 + 216);
              v84 = *(_QWORD *)(v0 + 184);
              v85 = *(_QWORD *)(v0 + 168);
              swift_bridgeObjectRelease();
              outlined consume of Data?(v81, v82);
              outlined destroy of AspireApiPECConfig(v85, type metadata accessor for TokenFetcher);
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for NetworkManager?);
              outlined destroy of AspireApiPECConfig(v84, type metadata accessor for NetworkManagerConfig);
              result = outlined destroy of AspireApiPECConfig(v83, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
              v1 = *(void **)(v0 + 352);
              continue;
            }
            *(_QWORD *)(v0 + 304) = 10 - v80;
            if (!__OFSUB__(10, v80))
            {
              v86 = (_QWORD *)swift_task_alloc();
              *(_QWORD *)(v0 + 312) = v86;
              *v86 = v0;
              v86[1] = TokenFetcherTask.run();
              return TokenFetcher.fetchContext()(*(_QWORD *)(v0 + 128));
            }
            goto LABEL_55;
          }
          goto LABEL_43;
        }
      }
      else
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v96, &demangling cache variable for type metadata for NetworkManager?);
        v67 = type metadata accessor for AspireNetworkManager();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v60, 1, 1, v67);
      }
      v68 = *(_QWORD *)(v0 + 152);
      v69 = *(_QWORD *)(v0 + 160);
      v70 = *(_QWORD *)(v0 + 144);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for AspireNetworkManager?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v70, 1, 1, v68);
LABEL_43:
      v71 = *(_QWORD *)(v0 + 216);
      v72 = *(_QWORD *)(v0 + 184);
      v73 = *(_QWORD *)(v0 + 144);
      swift_bridgeObjectRelease();
      outlined consume of Data?(v54, v55);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for NetworkManager?);
      outlined destroy of AspireApiPECConfig(v72, type metadata accessor for NetworkManagerConfig);
      v22 = type metadata accessor for UseCaseGroup;
      outlined destroy of AspireApiPECConfig(v71, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      result = outlined destroy of AMDPbHEConfig.OneOf_Config?(v73, &demangling cache variable for type metadata for TokenFetcher?);
      goto LABEL_12;
    }
    break;
  }
LABEL_13:
  v35 = v21 + 1;
  if (!__OFADD__(v21, 1))
  {
    v36 = (unint64_t)((1 << *(_BYTE *)(v0 + 360)) + 63) >> 6;
    if (v35 < v36)
    {
      v26 = *(_QWORD *)(v0 + 248);
      v37 = v26 + 64;
      v38 = *(_QWORD *)(v26 + 64 + 8 * v35);
      if (v38)
        goto LABEL_16;
      if (v21 + 2 >= v36)
      {
LABEL_30:
        v21 = v35;
      }
      else
      {
        v38 = *(_QWORD *)(v37 + 8 * (v21 + 2));
        if (v38)
        {
          v35 = v21 + 2;
          goto LABEL_16;
        }
        if (v21 + 3 >= v36)
        {
          v21 += 2;
        }
        else
        {
          v38 = *(_QWORD *)(v37 + 8 * (v21 + 3));
          if (v38)
          {
            v35 = v21 + 3;
            goto LABEL_16;
          }
          v35 = v21 + 4;
          if (v21 + 4 < v36)
          {
            v38 = *(_QWORD *)(v37 + 8 * v35);
            if (!v38)
            {
              v35 = v36 - 1;
              v39 = v36 - 5;
              do
              {
                if (v39 == v21)
                  goto LABEL_30;
                v38 = *(_QWORD *)(v26 + 104 + 8 * v21++);
              }
              while (!v38);
              v35 = v21 + 4;
            }
LABEL_16:
            v20 = (v38 - 1) & v38;
            v25 = __clz(__rbit64(v38)) + (v35 << 6);
            v21 = v35;
            goto LABEL_10;
          }
          v21 += 3;
        }
      }
    }
    v40 = *(_QWORD *)(v0 + 224);
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
    v20 = 0;
    goto LABEL_32;
  }
LABEL_55:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  os_unfair_lock_s *v80;
  _QWORD *v81;
  uint64_t *v82;
  os_unfair_lock_s *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;

  v99 = v0 + 56;
  v100 = v0 + 16;
  v1 = (uint64_t *)(v0 + 96);
  TokenCache.save()();
  v3 = v2;
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 128), type metadata accessor for TokenFetcher.TokenFetchContext);
  if (v2)
  {
    if (one-time initialization token for networking != -1)
      swift_once();
    v94 = (uint64_t *)(v0 + 96);
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.networking);
    v5 = v2;
    v6 = v2;
    swift_bridgeObjectRetain();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(void **)(v0 + 352);
    v11 = *(_QWORD *)(v0 + 280);
    if (v9)
    {
      v92 = *(_QWORD *)(v0 + 288);
      v93 = *(id *)(v0 + 352);
      v12 = *(_QWORD *)(v0 + 272);
      v101 = *(_QWORD *)(v0 + 216);
      v91 = *(_QWORD *)(v0 + 296);
      v95 = *(_QWORD *)(v0 + 168);
      v97 = *(_QWORD *)(v0 + 184);
      v13 = swift_slowAlloc();
      v14 = (_QWORD *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v103 = v15;
      *(_DWORD *)v13 = 136446466;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2114;
      v16 = v3;
      v17 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 112) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v14 = v17;

      _os_log_impl(&dword_237BC8000, v7, v8, "Failed to fetch more tokens for group '%{public}s': %{public}@", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v15, -1, -1);
      MEMORY[0x23B822DA8](v13, -1, -1);
      outlined consume of Data?(v92, v91);

      outlined destroy of AspireApiPECConfig(v95, type metadata accessor for TokenFetcher);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v100, &demangling cache variable for type metadata for NetworkManager?);
      outlined destroy of AspireApiPECConfig(v97, type metadata accessor for NetworkManagerConfig);
      result = outlined destroy of AspireApiPECConfig(v101, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 216);
      v20 = *(_QWORD *)(v0 + 184);
      v21 = *(_QWORD *)(v0 + 168);
      outlined consume of Data?(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));

      swift_bridgeObjectRelease_n();
      outlined destroy of AspireApiPECConfig(v21, type metadata accessor for TokenFetcher);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v100, &demangling cache variable for type metadata for NetworkManager?);
      outlined destroy of AspireApiPECConfig(v20, type metadata accessor for NetworkManagerConfig);
      result = outlined destroy of AspireApiPECConfig(v19, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    }
  }
  else
  {
LABEL_51:
    v94 = v1;
    v85 = *(_QWORD *)(v0 + 288);
    v86 = *(_QWORD *)(v0 + 296);
    v87 = *(_QWORD *)(v0 + 216);
    v88 = *(_QWORD *)(v0 + 184);
    v89 = *(_QWORD *)(v0 + 168);
    swift_bridgeObjectRelease();
    outlined consume of Data?(v85, v86);
    outlined destroy of AspireApiPECConfig(v89, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v100, &demangling cache variable for type metadata for NetworkManager?);
    outlined destroy of AspireApiPECConfig(v88, type metadata accessor for NetworkManagerConfig);
    result = outlined destroy of AspireApiPECConfig(v87, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v3 = *(void **)(v0 + 352);
  }
  v23 = *(_QWORD *)(v0 + 256);
  v25 = *(_QWORD *)(v0 + 264);
  v98 = v3;
  *(_QWORD *)(v0 + 352) = v3;
  v49 = type metadata accessor for NetworkManagerType;
  while (1)
  {
    if (v25)
    {
      v24 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v26 = v24 | (v23 << 6);
      v27 = *(_QWORD *)(v0 + 248);
LABEL_11:
      v28 = *(_QWORD **)(v0 + 224);
      v29 = *(_QWORD *)(v0 + 208);
      v30 = (_QWORD *)(*(_QWORD *)(v27 + 48) + 16 * v26);
      v31 = v30[1];
      *v28 = *v30;
      v28[1] = v31;
      v32 = *(_QWORD *)(v27 + 56) + *(_QWORD *)(v29 + 72) * v26;
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
      outlined init with copy of SecretKey(v32, (uint64_t)v28 + *(int *)(v33 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v28, 0, 1, v33);
      swift_bridgeObjectRetain();
      goto LABEL_31;
    }
    v34 = v23 + 1;
    if (__OFADD__(v23, 1))
      goto LABEL_56;
    v35 = (unint64_t)((1 << *(_BYTE *)(v0 + 360)) + 63) >> 6;
    if (v34 < v35)
    {
      v27 = *(_QWORD *)(v0 + 248);
      v36 = v27 + 64;
      v37 = *(_QWORD *)(v27 + 64 + 8 * v34);
      if (v37)
        goto LABEL_15;
      if (v23 + 2 >= v35)
        goto LABEL_29;
      v37 = *(_QWORD *)(v36 + 8 * (v23 + 2));
      if (v37)
      {
        v34 = v23 + 2;
LABEL_15:
        v25 = (v37 - 1) & v37;
        v26 = __clz(__rbit64(v37)) + (v34 << 6);
        v23 = v34;
        goto LABEL_11;
      }
      if (v23 + 3 < v35)
      {
        v37 = *(_QWORD *)(v36 + 8 * (v23 + 3));
        if (v37)
        {
          v34 = v23 + 3;
          goto LABEL_15;
        }
        v34 = v23 + 4;
        if (v23 + 4 >= v35)
        {
          v23 += 3;
          goto LABEL_30;
        }
        v37 = *(_QWORD *)(v36 + 8 * v34);
        if (v37)
          goto LABEL_15;
        v34 = v35 - 1;
        v38 = v35 - 5;
        while (v38 != v23)
        {
          v37 = *(_QWORD *)(v27 + 104 + 8 * v23++);
          if (v37)
          {
            v34 = v23 + 4;
            goto LABEL_15;
          }
        }
LABEL_29:
        v23 = v34;
        goto LABEL_30;
      }
      v23 += 2;
    }
LABEL_30:
    v39 = *(_QWORD *)(v0 + 224);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
    v25 = 0;
LABEL_31:
    *(_QWORD *)(v0 + 256) = v23;
    *(_QWORD *)(v0 + 264) = v25;
    v41 = *(_QWORD *)(v0 + 232);
    outlined init with take of (key: String, value: UseCaseGroup)?(*(_QWORD *)(v0 + 224), v41);
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v41, 1, v42) == 1)
      break;
    v102 = v23;
    v43 = *(_QWORD **)(v0 + 232);
    v44 = *(_QWORD *)(v0 + 216);
    v45 = v49;
    v47 = *(_QWORD *)(v0 + 192);
    v46 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 272) = *v43;
    *(_QWORD *)(v0 + 280) = v43[1];
    outlined init with take of SecretKey((uint64_t)v43 + *(int *)(v42 + 48), v44, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v48 = *(int *)(v46 + 36);
    v49 = v45;
    v50 = v44 + v48;
    outlined init with copy of SecretKey(v44 + v48, v47, v45);
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v47, 2, v51))
    {
      v22 = *(_QWORD *)(v0 + 192);
      outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 216), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      swift_bridgeObjectRelease();
      result = outlined destroy of AspireApiPECConfig(v22, v45);
      goto LABEL_8;
    }
    v52 = *(_QWORD *)(v0 + 192);
    v53 = v52 + *(int *)(v51 + 48);
    v54 = (uint64_t *)(v52 + *(int *)(v51 + 64));
    v55 = *v54;
    *(_QWORD *)(v0 + 288) = *v54;
    v56 = v54[1];
    *(_QWORD *)(v0 + 296) = v56;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v53, &demangling cache variable for type metadata for URL?);
    v57 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v52, v57);
    if (v56 >> 60 == 15)
    {
      v58 = *(_QWORD *)(v0 + 216);
      swift_bridgeObjectRelease();
      result = outlined destroy of AspireApiPECConfig(v58, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      goto LABEL_8;
    }
    v60 = *(_QWORD *)(v0 + 176);
    v59 = *(_QWORD *)(v0 + 184);
    outlined init with copy of SecretKey(v50, v59, type metadata accessor for NetworkConfig);
    v61 = (_QWORD *)(v59 + *(int *)(v60 + 20));
    *v61 = 0;
    v61[1] = 0;
    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(_QWORD))(*(_QWORD *)static NetworkManagerHelper.shared + 96))(*(_QWORD *)(v0 + 184));
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v100, v99, &demangling cache variable for type metadata for NetworkManager?);
    v62 = *(_QWORD *)(v0 + 136);
    if (*(_QWORD *)(v0 + 80))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager);
      v63 = type metadata accessor for AspireNetworkManager();
      v64 = swift_dynamicCast();
      v65 = *(_QWORD *)(v63 - 8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, v64 ^ 1u, 1, v63);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v62, 1, v63) != 1)
      {
        v66 = *(_QWORD *)(v0 + 160);
        v96 = *(_QWORD *)(v0 + 152);
        v67 = *(_QWORD *)(v0 + 136);
        v68 = *(_QWORD *)(v0 + 144);
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67 + *(int *)(v63 + 32), v68, &demangling cache variable for type metadata for TokenFetcher?);
        outlined destroy of AspireApiPECConfig(v67, (uint64_t (*)(_QWORD))type metadata accessor for AspireNetworkManager);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v68, 1, v96) != 1)
        {
          outlined init with take of SecretKey(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 168), type metadata accessor for TokenFetcher);
          if (one-time initialization token for shared != -1)
            swift_once();
          v76 = static TokenCache.shared;
          v77 = (uint64_t *)(*(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 152) + 20));
          v78 = *v77;
          v79 = v77[1];
          v80 = *(os_unfair_lock_s **)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
          v81 = (_QWORD *)swift_task_alloc();
          v81[2] = v76;
          v81[3] = v78;
          v81[4] = v79;
          v82 = (uint64_t *)&v80[4];
          v83 = v80 + 6;
          os_unfair_lock_lock(v80 + 6);
          v1 = v94;
          closure #1 in TokenCache.count(user:)(v82, v81[3], v81[4], v94);
          os_unfair_lock_unlock(v83);
          v84 = *v94;
          result = swift_task_dealloc();
          if (v84 < 5)
          {
            *(_QWORD *)(v0 + 304) = 10 - v84;
            if (!__OFSUB__(10, v84))
            {
              v90 = (_QWORD *)swift_task_alloc();
              *(_QWORD *)(v0 + 312) = v90;
              *v90 = v0;
              v90[1] = TokenFetcherTask.run();
              return TokenFetcher.fetchContext()(*(_QWORD *)(v0 + 128));
            }
LABEL_56:
            __break(1u);
            return result;
          }
          goto LABEL_51;
        }
        goto LABEL_43;
      }
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v99, &demangling cache variable for type metadata for NetworkManager?);
      v69 = type metadata accessor for AspireNetworkManager();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v62, 1, 1, v69);
    }
    v70 = *(_QWORD *)(v0 + 152);
    v71 = *(_QWORD *)(v0 + 160);
    v72 = *(_QWORD *)(v0 + 144);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for AspireNetworkManager?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v72, 1, 1, v70);
LABEL_43:
    v73 = *(_QWORD *)(v0 + 216);
    v74 = *(_QWORD *)(v0 + 184);
    v75 = *(_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    outlined consume of Data?(v55, v56);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v100, &demangling cache variable for type metadata for NetworkManager?);
    outlined destroy of AspireApiPECConfig(v74, type metadata accessor for NetworkManagerConfig);
    outlined destroy of AspireApiPECConfig(v73, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    result = outlined destroy of AMDPbHEConfig.OneOf_Config?(v75, &demangling cache variable for type metadata for TokenFetcher?);
    v49 = v45;
LABEL_8:
    v23 = v102;
  }
  swift_release();
  if (v98)
    swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v98 = v0 + 16;
  v1 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc();
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for TokenFetcher.TokenFetchContext);
  v2 = *(void **)(v0 + 344);
  if (one-time initialization token for networking != -1)
    swift_once();
  v92 = (uint64_t *)(v0 + 96);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.networking);
  v4 = v2;
  v5 = v2;
  swift_bridgeObjectRetain();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(void **)(v0 + 352);
  v10 = *(_QWORD *)(v0 + 280);
  v97 = v0 + 56;
  if (v8)
  {
    v89 = *(_QWORD *)(v0 + 288);
    v90 = *(id *)(v0 + 352);
    v11 = *(_QWORD *)(v0 + 272);
    v93 = *(_QWORD *)(v0 + 184);
    v95 = *(_QWORD *)(v0 + 216);
    v88 = *(_QWORD *)(v0 + 296);
    v91 = *(_QWORD *)(v0 + 168);
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v99 = v14;
    *(_DWORD *)v12 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2114;
    v15 = v2;
    v16 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 112) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v16;

    _os_log_impl(&dword_237BC8000, v6, v7, "Failed to fetch more tokens for group '%{public}s': %{public}@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v14, -1, -1);
    MEMORY[0x23B822DA8](v12, -1, -1);
    outlined consume of Data?(v89, v88);

    outlined destroy of AspireApiPECConfig(v91, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v98, &demangling cache variable for type metadata for NetworkManager?);
    outlined destroy of AspireApiPECConfig(v93, type metadata accessor for NetworkManagerConfig);
    result = outlined destroy of AspireApiPECConfig(v95, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 168);
    outlined consume of Data?(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));

    swift_bridgeObjectRelease_n();
    outlined destroy of AspireApiPECConfig(v20, type metadata accessor for TokenFetcher);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v98, &demangling cache variable for type metadata for NetworkManager?);
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for NetworkManagerConfig);
    result = outlined destroy of AspireApiPECConfig(v18, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  }
  while (2)
  {
    v22 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 264);
    v94 = v2;
    *(_QWORD *)(v0 + 352) = v2;
    v23 = type metadata accessor for UseCaseGroup;
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          v25 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
          v26 = v25 | (v22 << 6);
          v27 = *(_QWORD *)(v0 + 248);
LABEL_10:
          v28 = *(_QWORD **)(v0 + 224);
          v29 = *(_QWORD *)(v0 + 208);
          v30 = (_QWORD *)(*(_QWORD *)(v27 + 48) + 16 * v26);
          v31 = v30[1];
          *v28 = *v30;
          v28[1] = v31;
          v32 = *(_QWORD *)(v27 + 56) + *(_QWORD *)(v29 + 72) * v26;
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          v34 = v32;
          v23 = type metadata accessor for UseCaseGroup;
          outlined init with copy of SecretKey(v34, (uint64_t)v28 + *(int *)(v33 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v28, 0, 1, v33);
          swift_bridgeObjectRetain();
LABEL_32:
          *(_QWORD *)(v0 + 256) = v22;
          *(_QWORD *)(v0 + 264) = v21;
          v43 = *(_QWORD *)(v0 + 232);
          outlined init with take of (key: String, value: UseCaseGroup)?(*(_QWORD *)(v0 + 224), v43);
          v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v43, 1, v44) == 1)
          {
            swift_release();
            if (v94)
              swift_willThrow();
            swift_release();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            return (*(uint64_t (**)(void))(v0 + 8))();
          }
          v45 = *(_QWORD **)(v0 + 232);
          v46 = *(_QWORD *)(v0 + 216);
          v47 = v23;
          v48 = *(_QWORD *)(v0 + 192);
          v49 = *(_QWORD *)(v0 + 200);
          *(_QWORD *)(v0 + 272) = *v45;
          *(_QWORD *)(v0 + 280) = v45[1];
          outlined init with take of SecretKey((uint64_t)v45 + *(int *)(v44 + 48), v46, (uint64_t (*)(_QWORD))v47);
          v50 = v46 + *(int *)(v49 + 36);
          outlined init with copy of SecretKey(v50, v48, type metadata accessor for NetworkManagerType);
          v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v48, 2, v51))
            break;
          v24 = *(_QWORD *)(v0 + 192);
          outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 216), (uint64_t (*)(_QWORD))v47);
          swift_bridgeObjectRelease();
          result = outlined destroy of AspireApiPECConfig(v24, type metadata accessor for NetworkManagerType);
          v23 = v47;
          if (!v21)
            goto LABEL_13;
        }
        v52 = *(_QWORD *)(v0 + 192);
        v53 = v52 + *(int *)(v51 + 48);
        v54 = (uint64_t *)(v52 + *(int *)(v51 + 64));
        v55 = *v54;
        *(_QWORD *)(v0 + 288) = *v54;
        v56 = v54[1];
        *(_QWORD *)(v0 + 296) = v56;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v53, &demangling cache variable for type metadata for URL?);
        v57 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v52, v57);
        if (v56 >> 60 != 15)
          break;
        v35 = *(_QWORD *)(v0 + 216);
        swift_bridgeObjectRelease();
        v23 = type metadata accessor for UseCaseGroup;
        result = outlined destroy of AspireApiPECConfig(v35, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
LABEL_12:
        if (!v21)
          goto LABEL_13;
      }
      v59 = *(_QWORD *)(v0 + 176);
      v58 = *(_QWORD *)(v0 + 184);
      outlined init with copy of SecretKey(v50, v58, type metadata accessor for NetworkConfig);
      v60 = (_QWORD *)(v58 + *(int *)(v59 + 20));
      *v60 = 0;
      v60[1] = 0;
      if (one-time initialization token for shared != -1)
        swift_once();
      (*(void (**)(_QWORD))(*(_QWORD *)static NetworkManagerHelper.shared + 96))(*(_QWORD *)(v0 + 184));
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v98, v97, &demangling cache variable for type metadata for NetworkManager?);
      v61 = *(_QWORD *)(v0 + 136);
      if (*(_QWORD *)(v0 + 80))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManager);
        v62 = type metadata accessor for AspireNetworkManager();
        v63 = swift_dynamicCast();
        v64 = *(_QWORD *)(v62 - 8);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, v63 ^ 1u, 1, v62);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v61, 1, v62) != 1)
        {
          v65 = *(_QWORD *)(v0 + 160);
          v96 = *(_QWORD *)(v0 + 152);
          v66 = *(_QWORD *)(v0 + 136);
          v67 = *(_QWORD *)(v0 + 144);
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v66 + *(int *)(v62 + 32), v67, &demangling cache variable for type metadata for TokenFetcher?);
          outlined destroy of AspireApiPECConfig(v66, (uint64_t (*)(_QWORD))type metadata accessor for AspireNetworkManager);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v67, 1, v96) != 1)
          {
            outlined init with take of SecretKey(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 168), type metadata accessor for TokenFetcher);
            if (one-time initialization token for shared != -1)
              swift_once();
            v75 = static TokenCache.shared;
            v76 = (uint64_t *)(*(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 152) + 20));
            v77 = *v76;
            v78 = v76[1];
            v79 = *(_QWORD *)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
            v80 = (_QWORD *)swift_task_alloc();
            v80[2] = v75;
            v80[3] = v77;
            v80[4] = v78;
            os_unfair_lock_lock((os_unfair_lock_t)(v79 + 24));
            closure #1 in TokenCache.count(user:)((uint64_t *)(v79 + 16), v80[3], v80[4], v92);
            os_unfair_lock_unlock((os_unfair_lock_t)(v79 + 24));
            v81 = *v92;
            result = swift_task_dealloc();
            if (v81 >= 5)
            {
              v82 = *(_QWORD *)(v0 + 288);
              v83 = *(_QWORD *)(v0 + 296);
              v84 = *(_QWORD *)(v0 + 216);
              v85 = *(_QWORD *)(v0 + 184);
              v86 = *(_QWORD *)(v0 + 168);
              swift_bridgeObjectRelease();
              outlined consume of Data?(v82, v83);
              outlined destroy of AspireApiPECConfig(v86, type metadata accessor for TokenFetcher);
              outlined destroy of AMDPbHEConfig.OneOf_Config?(v98, &demangling cache variable for type metadata for NetworkManager?);
              outlined destroy of AspireApiPECConfig(v85, type metadata accessor for NetworkManagerConfig);
              result = outlined destroy of AspireApiPECConfig(v84, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
              v2 = *(void **)(v0 + 352);
              continue;
            }
            *(_QWORD *)(v0 + 304) = 10 - v81;
            if (!__OFSUB__(10, v81))
            {
              v87 = (_QWORD *)swift_task_alloc();
              *(_QWORD *)(v0 + 312) = v87;
              *v87 = v0;
              v87[1] = TokenFetcherTask.run();
              return TokenFetcher.fetchContext()(*(_QWORD *)(v0 + 128));
            }
            goto LABEL_55;
          }
          goto LABEL_43;
        }
      }
      else
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v97, &demangling cache variable for type metadata for NetworkManager?);
        v68 = type metadata accessor for AspireNetworkManager();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v61, 1, 1, v68);
      }
      v69 = *(_QWORD *)(v0 + 152);
      v70 = *(_QWORD *)(v0 + 160);
      v71 = *(_QWORD *)(v0 + 144);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for AspireNetworkManager?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v71, 1, 1, v69);
LABEL_43:
      v72 = *(_QWORD *)(v0 + 216);
      v73 = *(_QWORD *)(v0 + 184);
      v74 = *(_QWORD *)(v0 + 144);
      swift_bridgeObjectRelease();
      outlined consume of Data?(v55, v56);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v98, &demangling cache variable for type metadata for NetworkManager?);
      outlined destroy of AspireApiPECConfig(v73, type metadata accessor for NetworkManagerConfig);
      v23 = type metadata accessor for UseCaseGroup;
      outlined destroy of AspireApiPECConfig(v72, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      result = outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, &demangling cache variable for type metadata for TokenFetcher?);
      goto LABEL_12;
    }
    break;
  }
LABEL_13:
  v36 = v22 + 1;
  if (!__OFADD__(v22, 1))
  {
    v37 = (unint64_t)((1 << *(_BYTE *)(v0 + 360)) + 63) >> 6;
    if (v36 < v37)
    {
      v27 = *(_QWORD *)(v0 + 248);
      v38 = v27 + 64;
      v39 = *(_QWORD *)(v27 + 64 + 8 * v36);
      if (v39)
        goto LABEL_16;
      if (v22 + 2 >= v37)
      {
LABEL_30:
        v22 = v36;
      }
      else
      {
        v39 = *(_QWORD *)(v38 + 8 * (v22 + 2));
        if (v39)
        {
          v36 = v22 + 2;
          goto LABEL_16;
        }
        if (v22 + 3 >= v37)
        {
          v22 += 2;
        }
        else
        {
          v39 = *(_QWORD *)(v38 + 8 * (v22 + 3));
          if (v39)
          {
            v36 = v22 + 3;
            goto LABEL_16;
          }
          v36 = v22 + 4;
          if (v22 + 4 < v37)
          {
            v39 = *(_QWORD *)(v38 + 8 * v36);
            if (!v39)
            {
              v36 = v37 - 1;
              v40 = v37 - 5;
              do
              {
                if (v40 == v22)
                  goto LABEL_30;
                v39 = *(_QWORD *)(v27 + 104 + 8 * v22++);
              }
              while (!v39);
              v36 = v22 + 4;
            }
LABEL_16:
            v21 = (v39 - 1) & v39;
            v26 = __clz(__rbit64(v39)) + (v36 << 6);
            v22 = v36;
            goto LABEL_10;
          }
          v22 += 3;
        }
      }
    }
    v41 = *(_QWORD *)(v0 + 224);
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
    v21 = 0;
    goto LABEL_32;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t TokenFetcherTask.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t TokenFetcherTask.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ScheduledActivityHandler.run@Sendable () in conformance TokenFetcherTask()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return TokenFetcherTask.run()();
}

void specialized static TokenFetcherTask.submitBackgroundTask()()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  double v6;
  double v7;
  double v8;
  id v9;
  id v10;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedScheduler);
  v1 = (void *)MEMORY[0x23B821F68](0xD000000000000023, 0x8000000237D61500);
  v2 = objc_msgSend(v0, sel_taskRequestForIdentifier_, v1);

  if (!v2)
  {
    v3 = objc_allocWithZone(MEMORY[0x24BE0B710]);
    v4 = (void *)MEMORY[0x23B821F68](0xD000000000000023, 0x8000000237D61500);
    v5 = objc_msgSend(v3, sel_initWithIdentifier_, v4);

    objc_msgSend(v5, sel_setRequiresNetworkConnectivity_, 1);
    objc_msgSend(v5, sel_setRequiresUserInactivity_, 1);
    objc_msgSend(v5, sel_setScheduleAfter_, 5.0);
    objc_msgSend(v5, sel_setRandomInitialDelay_, 60.0);
    objc_msgSend(v5, sel_scheduleAfter);
    v7 = v6;
    objc_msgSend(v5, sel_randomInitialDelay);
    objc_msgSend(v5, sel_setTrySchedulingBefore_, v7 + v8);
    v11[0] = 0;
    if (objc_msgSend(v0, sel_submitTaskRequest_error_, v5, v11))
    {
      v9 = v11[0];

      return;
    }
    v10 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

}

uint64_t partial apply for closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(a1, a2, v6, v7, v8);
}

uint64_t type metadata accessor for TokenFetcherTask()
{
  return objc_opt_self();
}

uint64_t method lookup function for TokenFetcherTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TokenFetcherTask.__allocating_init(allowListLock:getCurrentDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

int *TokenFetcher.init(issuer:userToken:urlSession:privacyProxyFailClosed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int *result;
  _QWORD *v14;

  v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  result = (int *)type metadata accessor for TokenFetcher(0);
  v14 = (_QWORD *)(a6 + result[5]);
  *v14 = a2;
  v14[1] = a3;
  *(_QWORD *)(a6 + result[6]) = a4;
  *(_BYTE *)(a6 + result[7]) = a5;
  return result;
}

uint64_t type metadata accessor for TokenFetcher(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for TokenFetcher);
}

uint64_t TokenFetcher.addTokenAuthorization(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 112) = a1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 120) = v3;
  *v3 = v2;
  v3[1] = TokenFetcher.addTokenAuthorization(to:);
  v3[2] = v1;
  return swift_task_switch();
}

uint64_t TokenFetcher.addTokenAuthorization(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v6 + 128) = a2;
  *(_QWORD *)(v6 + 136) = a1;
  return swift_task_switch();
}

uint64_t TokenFetcher.addTokenAuthorization(to:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v0 + 16) = Data.base64EncodedString(options:)(0);
  *(_QWORD *)(v0 + 32) = 43;
  *(_QWORD *)(v0 + 40) = 0xE100000000000000;
  *(_QWORD *)(v0 + 48) = 45;
  *(_QWORD *)(v0 + 56) = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v5 = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v0 + 80) = 47;
  *(_QWORD *)(v0 + 88) = 0xE100000000000000;
  *(_QWORD *)(v0 + 96) = 95;
  *(_QWORD *)(v0 + 104) = 0xE100000000000000;
  v6 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v8 = v7;
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10.value._countAndFlagsBits = 0xD000000000000013;
  v10.value._object = (void *)0x8000000237D61420;
  v11._countAndFlagsBits = 0x7A69726F68747541;
  v11._object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v10, v11);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TokenFetcher.backgroundTokenFetch()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = static TokenCache.shared;
  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for TokenFetcher(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  v7 = (_QWORD *)swift_task_alloc();
  v7[2] = v2;
  v7[3] = v4;
  v7[4] = v5;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  closure #1 in TokenCache.count(user:)((uint64_t *)(v6 + 16), v7[3], v7[4], &v13);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  v8 = v13;
  result = swift_task_dealloc();
  if (v8 >= 5)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v10 = __OFSUB__(10, v8);
  v11 = 10 - v8;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 24) = v12;
    *v12 = v0;
    v12[1] = specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
    return TokenFetcher.fetchTokensInBackground(count:)(v11);
  }
  return result;
}

void *TokenFetcher.extraTokensToFetch.unsafeMutableAddressor()
{
  return &static TokenFetcher.extraTokensToFetch;
}

uint64_t static TokenFetcher.extraTokensToFetch.getter()
{
  return 3;
}

void *TokenFetcher.tokenCountLowWaterMark.unsafeMutableAddressor()
{
  return &static TokenFetcher.tokenCountLowWaterMark;
}

uint64_t static TokenFetcher.tokenCountLowWaterMark.getter()
{
  return 5;
}

void *TokenFetcher.tokenCountLimit.unsafeMutableAddressor()
{
  return &static TokenFetcher.tokenCountLimit;
}

uint64_t static TokenFetcher.tokenCountLimit.getter()
{
  return 10;
}

uint64_t TokenFetcher.issuer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TokenFetcher.userToken.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for TokenFetcher(0) + 20);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

id TokenFetcher.urlSession.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for TokenFetcher(0) + 24));
}

uint64_t TokenFetcher.privacyProxyFailClosed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for TokenFetcher(0) + 28));
}

uint64_t TokenFetcher.tokenIssuerDirectoryURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD v5[2];

  v0 = type metadata accessor for URL.DirectoryHint();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[0] = 0xD00000000000002ALL;
  v5[1] = 0x8000000237D630D0;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCD7A0], v0);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return swift_bridgeObjectRelease();
}

uint64_t TokenFetcher.getToken()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = static TokenCache.shared;
  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for TokenFetcher(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  v6 = TokenCache.removeToken(user:)(*v3, v5);
  if (v7 >> 60 == 15)
  {
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 24) = v8;
    *v8 = v0;
    v8[1] = TokenFetcher.getToken();
    return TokenFetcher.fetchToken()();
  }
  else
  {
    v10 = v6;
    v11 = v7;
    v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v2;
    v13[3] = v4;
    v13[4] = v5;
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
    closure #1 in TokenCache.count(user:)((uint64_t *)(v12 + 16), v13[3], v13[4], &v15);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
    v14 = v15;
    swift_task_dealloc();
    if (v14 < 5)
      TokenFetcher.submitBackgroundTask()();
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v10, v11);
  }
}

uint64_t TokenFetcher.getToken()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

Swift::Void __swiftcall TokenFetcher.submitBackgroundTask()()
{
  specialized static TokenFetcherTask.submitBackgroundTask()();
}

uint64_t TokenFetcher.fetchToken()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1[89] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v1[95] = swift_task_alloc();
  v2 = *(_QWORD *)(type metadata accessor for TokenFetcher(0) - 8);
  v1[101] = v2;
  v1[102] = *(_QWORD *)(v2 + 64);
  v1[103] = swift_task_alloc();
  v1[104] = swift_task_alloc();
  v3 = *(_QWORD *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8);
  v1[105] = v3;
  v1[106] = *(_QWORD *)(v3 + 64);
  v1[107] = swift_task_alloc();
  v1[108] = swift_task_alloc();
  v4 = swift_task_alloc();
  v1[109] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v1[110] = v5;
  *v5 = v1;
  v5[1] = TokenFetcher.fetchToken();
  return TokenFetcher.fetchContext()(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 888) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0[109];
  v2 = v0[108];
  v19 = v1;
  v3 = v0[105];
  v4 = v0[104];
  v21 = v0[103];
  v22 = v0[107];
  v5 = v0[102];
  v6 = v0[101];
  v7 = v0[95];
  v20 = v0[89];
  outlined init with copy of SecretKey(v20, v4, type metadata accessor for TokenFetcher);
  outlined init with copy of SecretKey(v1, v2, type metadata accessor for TokenFetcher.TokenFetchContext);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = *(unsigned __int8 *)(v3 + 80);
  v18 = v5 + v10;
  v11 = (v5 + v10 + v9) & ~v10;
  v12 = swift_allocObject();
  outlined init with take of SecretKey(v4, v12 + v9, type metadata accessor for TokenFetcher);
  outlined init with take of SecretKey(v2, v12 + v11, type metadata accessor for TokenFetcher.TokenFetchContext);
  v13 = swift_allocObject();
  v0[112] = v13;
  *(_QWORD *)(v13 + 16) = &async function pointer to partial apply for implicit closure #1 in TokenFetcher.fetchToken();
  *(_QWORD *)(v13 + 24) = v12;
  swift_retain();
  swift_asyncLet_begin();
  TokenFetcher.submitBackgroundTask()();
  static TaskPriority.background.getter();
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 0, 1, v14);
  outlined init with copy of SecretKey(v20, v21, type metadata accessor for TokenFetcher);
  outlined init with copy of SecretKey(v19, v22, type metadata accessor for TokenFetcher.TokenFetchContext);
  v15 = (v8 + 32) & ~v8;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  outlined init with take of SecretKey(v21, v16 + v15, type metadata accessor for TokenFetcher);
  outlined init with take of SecretKey(v22, v16 + ((v18 + v15) & ~v10), type metadata accessor for TokenFetcher.TokenFetchContext);
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v7, (uint64_t)&async function pointer to partial apply for closure #1 in TokenFetcher.fetchToken(), v16);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for TaskPriority?);
  return swift_asyncLet_get_throwing();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1[113] = v0;
  if (!v0)
  {
    v2 = v1[87];
    v1[114] = v2;
    v3 = v1[88];
    v1[115] = v3;
    outlined copy of Data._Representation(v2, v3);
  }
  return swift_asyncLet_finish();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 872), type metadata accessor for TokenFetcher.TokenFetchContext);
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 920));
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 872), type metadata accessor for TokenFetcher.TokenFetchContext);
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TokenFetcher.fetchTokensInBackground(count:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for TokenFetcher.TokenFetchContext(0);
  v3 = swift_task_alloc();
  v2[4] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v2[5] = v4;
  *v4 = v2;
  v4[1] = TokenFetcher.fetchTokensInBackground(count:);
  return TokenFetcher.fetchContext()(v3);
}

uint64_t TokenFetcher.fetchTokensInBackground(count:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  v3 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  *v4 = v0;
  v4[1] = TokenFetcher.fetchTokensInBackground(count:);
  return withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 32);
  TokenCache.save()();
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for TokenFetcher.TokenFetchContext);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc();
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for TokenFetcher.TokenFetchContext);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TokenFetcher.fetchContext()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for URL.DirectoryHint();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = swift_task_alloc();
  type metadata accessor for TokenIssuerDirectory();
  v5 = swift_task_alloc();
  v2[14] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v2[15] = v6;
  *v6 = v2;
  v6[1] = TokenFetcher.fetchContext();
  return TokenFetcher.fetchTokenDirectory()(v5);
}

uint64_t TokenFetcher.fetchContext()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 136) = v4;
  *v4 = v2;
  v4[1] = TokenFetcher.fetchContext();
  return TokenFetcher.fetchTokenKey()();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t (*v11)(void);
  void (*v13)(uint64_t, uint64_t, uint64_t);
  Swift::String_optional v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Context;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;

  if ((specialized TokenIssuerDirectory.isValid(tokenKey:currentTime:)(v0[18], v0[19], v0[14]) & 1) == 0)
  {
    v7 = v0[18];
    v6 = v0[19];
    v8 = v0[14];
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *v10 = 8;
    goto LABEL_5;
  }
  v25 = v0[12];
  v1 = v0[10];
  v26 = v0[11];
  v3 = v0[8];
  v2 = v0[9];
  v5 = v0[6];
  v4 = v0[7];
  URL.absoluteString.getter();
  v0[2] = 0xD00000000000002ALL;
  v0[3] = 0x8000000237D630D0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, *MEMORY[0x24BDCD7A0], v5);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v2, 0, 1, v26);
  URL.init(string:relativeTo:)();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v1, 1, v26) == 1)
  {
    v7 = v0[18];
    v6 = v0[19];
    v8 = v0[14];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[10], &demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *v9 = 1;
LABEL_5:
    swift_willThrow();
    outlined consume of Data._Representation(v7, v6);
    goto LABEL_6;
  }
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[12] + 32);
  v13(v0[13], v0[10], v0[11]);
  v14 = URL.host(percentEncoded:)(1);
  v16 = v0[18];
  v15 = v0[19];
  v17 = v0[13];
  v8 = v0[14];
  if (v14.value._object)
  {
    v18 = v0[11];
    v19 = v0[4];
    outlined destroy of AspireApiPECConfig(v8, (uint64_t (*)(_QWORD))type metadata accessor for TokenIssuerDirectory);
    v13(v19, v17, v18);
    Context = type metadata accessor for TokenFetcher.TokenFetchContext(0);
    *(Swift::String_optional *)(v19 + *(int *)(Context + 20)) = v14;
    v21 = (uint64_t *)(v19 + *(int *)(Context + 24));
    *v21 = v16;
    v21[1] = v15;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  v22 = v0[11];
  v23 = v0[12];
  lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
  swift_allocError();
  *v24 = 2;
  swift_willThrow();
  outlined consume of Data._Representation(v16, v15);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v17, v22);
LABEL_6:
  outlined destroy of AspireApiPECConfig(v8, (uint64_t (*)(_QWORD))type metadata accessor for TokenIssuerDirectory);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for TokenIssuerDirectory);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TokenFetcher.fetchContext()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[18] = a1;
  v4[19] = a2;
  v4[20] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v6 = *(_QWORD *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8);
  v5[13] = v6;
  v5[14] = *(_QWORD *)(v6 + 64);
  v5[15] = swift_task_alloc();
  v7 = *(_QWORD *)(type metadata accessor for TokenFetcher(0) - 8);
  v5[16] = v7;
  v5[17] = *(_QWORD *)(v7 + 64);
  v5[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  return swift_task_switch();
}

void closure #1 in TokenFetcher.fetchTokenTasks(context:count:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v1)
    {
      v27 = *(_QWORD *)(v0 + 128);
      v26 = *(_QWORD *)(v0 + 104);
      v2 = type metadata accessor for TaskPriority();
      v3 = 0;
      v25 = *(_QWORD *)(v2 - 8);
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
      do
      {
        v6 = *(_QWORD *)(v0 + 160);
        v28 = *(_QWORD *)(v0 + 152);
        v29 = v3;
        v7 = *(_QWORD *)(v0 + 136);
        v8 = *(_QWORD *)(v0 + 144);
        v9 = *(_QWORD *)(v0 + 120);
        v10 = *(_QWORD *)(v0 + 88);
        v11 = *(_QWORD *)(v0 + 96);
        v24(v6, 1, 1, v2);
        outlined init with copy of SecretKey(v10, v8, type metadata accessor for TokenFetcher);
        outlined init with copy of SecretKey(v11, v9, type metadata accessor for TokenFetcher.TokenFetchContext);
        v12 = v2;
        v13 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        v14 = (v7 + *(unsigned __int8 *)(v26 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
        v15 = swift_allocObject();
        *(_QWORD *)(v15 + 16) = 0;
        v16 = v15 + v13;
        v2 = v12;
        *(_QWORD *)(v15 + 24) = 0;
        outlined init with take of SecretKey(v8, v16, type metadata accessor for TokenFetcher);
        outlined init with take of SecretKey(v9, v15 + v14, type metadata accessor for TokenFetcher.TokenFetchContext);
        outlined init with copy of TaskPriority?(v6, v28);
        v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v28, 1, v12);
        v18 = *(_QWORD *)(v0 + 152);
        if (v17 == 1)
        {
          outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 152), &demangling cache variable for type metadata for TaskPriority?);
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v18, v2);
        }
        if (*(_QWORD *)(v15 + 16))
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          v19 = dispatch thunk of Actor.unownedExecutor.getter();
          v21 = v20;
          swift_unknownObjectRelease();
        }
        else
        {
          v19 = 0;
          v21 = 0;
        }
        v22 = **(_QWORD **)(v0 + 72);
        v23 = v21 | v19;
        if (v21 | v19)
        {
          v23 = v0 + 16;
          *(_QWORD *)(v0 + 16) = 0;
          *(_QWORD *)(v0 + 24) = 0;
          *(_QWORD *)(v0 + 32) = v19;
          *(_QWORD *)(v0 + 40) = v21;
        }
        ++v3;
        v4 = *(_QWORD *)(v0 + 160);
        v5 = *(_QWORD *)(v0 + 80);
        *(_QWORD *)(v0 + 48) = 1;
        *(_QWORD *)(v0 + 56) = v23;
        *(_QWORD *)(v0 + 64) = v22;
        swift_task_create();
        swift_release();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for TaskPriority?);
      }
      while (v29 + 1 != v5);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  *(_QWORD *)(v4 + 16) = a3;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v6;
  *v6 = v4;
  v6[1] = closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:);
  return TokenFetcher.fetchTokenInner(context:)(a4);
}

uint64_t closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = v2;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch();
}

void closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (one-time initialization token for shared != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = static TokenCache.shared;
  v6 = (uint64_t *)(v4 + *(int *)(type metadata accessor for TokenFetcher(0) + 20));
  v7 = *v6;
  v8 = v6[1];
  v9 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  v10 = swift_task_alloc();
  *(_QWORD *)(v10 + 16) = v5;
  *(_QWORD *)(v10 + 24) = v7;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = v3;
  *(_QWORD *)(v10 + 48) = v2;
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  closure #1 in TokenCache.addToken(user:token:)((uint64_t *)(v9 + 16), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), *(_QWORD *)(v10 + 48));
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 32);
    v11 = *(_QWORD *)(v0 + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
    outlined consume of Data._Representation(v12, v11);
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t TokenFetcher.fetchTokenInner(context:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for URLRequest();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for TokenFetcher.TokenFetchContext(0);
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t TokenFetcher.fetchTokenInner(context:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSURL *v25;
  void *v26;
  void *v27;
  id v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String_optional v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  _QWORD *v35;
  Swift::String_optional v37;

  if (one-time initialization token for networking != -1)
    swift_once();
  v1 = v0[3];
  v2 = v0[9];
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.networking);
  outlined init with copy of SecretKey(v1, v2, type metadata accessor for TokenFetcher.TokenFetchContext);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[9];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v37.value._countAndFlagsBits = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = URL.absoluteString.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v37.value._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiPECConfig(v7, type metadata accessor for TokenFetcher.TokenFetchContext);
    _os_log_impl(&dword_237BC8000, v4, v5, "Fetching token from '%{public}s'", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v9, -1, -1);
    MEMORY[0x23B822DA8](v8, -1, -1);
  }
  else
  {
    outlined destroy of AspireApiPECConfig(v0[9], type metadata accessor for TokenFetcher.TokenFetchContext);
  }

  v12 = v0[8];
  v13 = v0[3];
  specialized static PrivateAccessToken.newBlindRSATokenChallenge(for:)(*(_QWORD *)(v13 + *(int *)(v12 + 20)), *(_QWORD *)(v13 + *(int *)(v12 + 20) + 8));
  v0[10] = v14;
  v0[11] = v15;
  v16 = specialized static PrivateAccessToken.TokenRequest.request(challenge:publicKey:)(v14, v15, *(_QWORD *)(v13 + *(int *)(v12 + 24)), *(_QWORD *)(v13 + *(int *)(v12 + 24) + 8));
  v0[12] = v17;
  v0[13] = v18;
  v0[14] = v19;
  v20 = v16;
  v21 = v17;
  v22 = v18;
  v23 = v0[4];
  v24 = objc_allocWithZone(MEMORY[0x24BDD16B0]);
  URL._bridgeToObjectiveC()(v25);
  v27 = v26;
  v28 = objc_msgSend(v24, sel_initWithURL_, v26);

  objc_msgSend(v28, sel__setPrivacyProxyFailClosed_, *(unsigned __int8 *)(v23 + *(int *)(type metadata accessor for TokenFetcher(0) + 28)));
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

  URLRequest.httpMethod.setter();
  PrivateAccessToken.TokenRequest.requestData.getter(v20 & 0xFFFFFF, v21, v22);
  URLRequest.httpBody.setter();
  v29.value._countAndFlagsBits = 0xD000000000000022;
  v29.value._object = (void *)0x8000000237D631B0;
  v30._countAndFlagsBits = 0x747065636341;
  v30._object = (void *)0xE600000000000000;
  URLRequest.setValue(_:forHTTPHeaderField:)(v29, v30);
  v31.value._object = (void *)0x8000000237D631E0;
  v31.value._countAndFlagsBits = 0xD000000000000021;
  v32._countAndFlagsBits = 0x2D746E65746E6F43;
  v32._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(v31, v32);
  v37.value._countAndFlagsBits = 0x20726572616542;
  v37.value._object = (void *)0xE700000000000000;
  v33 = Data.base64EncodedString(options:)(0);
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 0x7A69726F68747541;
  v34._object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v37, v34);
  swift_bridgeObjectRelease();
  v35 = (_QWORD *)swift_task_alloc();
  v0[15] = v35;
  *v35 = v0;
  v35[1] = TokenFetcher.fetchTokenInner(context:);
  return NSURLSession.data(for:delegate:)();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
    goto LABEL_11;
  v2 = (void *)v1;
  v3 = *(id *)(v0 + 144);
  if (objc_msgSend(v2, sel_statusCode) != (id)200)
    goto LABEL_10;
  v4 = (void *)MEMORY[0x23B821F68](0x2D746E65746E6F43, 0xEC00000065707954);
  v5 = objc_msgSend(v2, sel_valueForHTTPHeaderField_, v4);

  if (!v5)
    goto LABEL_10;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  if (v6 == 0xD000000000000022 && v8 == 0x8000000237D631B0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
LABEL_10:

LABEL_11:
    v20 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 104);
    v23 = *(_QWORD *)(v0 + 88);
    v24 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 80);
    v30 = *(_QWORD *)(v0 + 56);
    v32 = *(void **)(v0 + 144);
    v28 = *(_QWORD *)(v0 + 48);
    v29 = *(_QWORD *)(v0 + 40);
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *v26 = 3;
    swift_willThrow();
    outlined consume of Data._Representation(v21, v20);
    swift_release();
    outlined consume of Data._Representation(v24, v22);
    outlined consume of Data._Representation(v25, v23);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
    goto LABEL_12;
  }
LABEL_8:
  v10 = *(_QWORD *)(v0 + 152);
  v11 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 112) + 96))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  v14 = *(_QWORD *)(v0 + 136);
  v13 = *(void **)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 80);
  if (v10)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));

    outlined consume of Data._Representation(v15, v14);
    swift_release();
    outlined consume of Data._Representation(v18, v16);
    outlined consume of Data._Representation(v19, v17);
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v31 = v11;
  v33 = v12;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));

  outlined consume of Data._Representation(v15, v14);
  swift_release();
  outlined consume of Data._Representation(v18, v16);
  outlined consume of Data._Representation(v19, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v31, v33);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  swift_release();
  outlined consume of Data._Representation(v2, v1);
  outlined consume of Data._Representation(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TokenFetcher.fetchTokenInner(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[16] = a1;
  v5[17] = a2;
  v5[18] = a3;
  v5[19] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t TokenFetcher.fetchTokenDirectory()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for URLRequest();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t TokenFetcher.fetchTokenDirectory()()
{
  uint64_t v0;
  _QWORD *v1;

  TokenFetcher.tokenDirectoryRequest()(*(_QWORD *)(v0 + 64));
  type metadata accessor for TokenFetcher(0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = TokenFetcher.fetchTokenDirectory();
  return NSURLSession.data(for:delegate:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  void *v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  _BYTE *v34;
  _BYTE *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t (*v39)(void);
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  v2 = (void *)v0[12];
  if (!v1)
  {
    v17 = v0[10];
    v16 = v0[11];
    v19 = v0[7];
    v18 = v0[8];
    v20 = v0[6];
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *v21 = 4;
    swift_willThrow();
    outlined consume of Data._Representation(v17, v16);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
LABEL_17:
    swift_task_dealloc();
    v39 = (uint64_t (*)(void))v0[1];
    return v39();
  }
  v3 = (void *)v1;
  v4 = v2;
  if (objc_msgSend(v3, sel_statusCode) != (id)200)
  {
    if (one-time initialization token for networking != -1)
      swift_once();
    v22 = (void *)v0[12];
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.networking);
    v24 = v22;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    v27 = os_log_type_enabled(v25, v26);
    v29 = v0[11];
    v28 = (void *)v0[12];
    v50 = v0[10];
    v31 = v0[7];
    v30 = v0[8];
    v32 = v0[6];
    if (v27)
    {
      v49 = v0[7];
      v48 = v0[11];
      v33 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v33 = 134349056;
      v0[2] = objc_msgSend(v3, sel_statusCode);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_237BC8000, v25, v26, "Failed to fetch Token Issuer Directory. HTTP Status: %{public}ld", v33, 0xCu);
      MEMORY[0x23B822DA8](v33, -1, -1);

      lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
      swift_allocError();
      *v34 = 4;
      swift_willThrow();
      outlined consume of Data._Representation(v50, v48);

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v30, v32);
    }
    else
    {

      lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
      swift_allocError();
      *v35 = 4;
      swift_willThrow();
      outlined consume of Data._Representation(v50, v29);

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    goto LABEL_17;
  }
  v5 = (void *)v0[13];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for TokenIssuerDirectory();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type TokenIssuerDirectory and conformance TokenIssuerDirectory, (uint64_t (*)(uint64_t))type metadata accessor for TokenIssuerDirectory, (uint64_t)&protocol conformance descriptor for TokenIssuerDirectory);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v5)
  {
    v6 = v5;
    swift_release();
    if (one-time initialization token for networking != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.networking);
    v8 = v5;
    v9 = v5;
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v12 = 138543362;
      v14 = v6;
      v15 = _swift_stdlib_bridgeErrorToNSError();
      v0[3] = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v13 = v15;

      _os_log_impl(&dword_237BC8000, v10, v11, "Failed to parse Token Issuer Directory: %{public}@", v12, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v13, -1, -1);
      MEMORY[0x23B822DA8](v12, -1, -1);
    }
    else
    {

    }
    v40 = v0[11];
    v41 = (void *)v0[12];
    v42 = v0[10];
    v44 = v0[7];
    v43 = v0[8];
    v45 = v0[6];
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *v46 = 6;
    swift_willThrow();
    outlined consume of Data._Representation(v42, v40);

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    goto LABEL_17;
  }
  v36 = v0[11];
  v37 = (void *)v0[12];
  v38 = v0[10];
  (*(void (**)(_QWORD, _QWORD))(v0[7] + 8))(v0[8], v0[6]);
  swift_release();

  outlined consume of Data._Representation(v38, v36);
  swift_task_dealloc();
  v39 = (uint64_t (*)(void))v0[1];
  return v39();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TokenFetcher.fetchTokenDirectory()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[10] = a1;
  v5[11] = a2;
  v5[12] = a3;
  v5[13] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t TokenFetcher.fetchTokenKey()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[4] = v0;
  v2 = type metadata accessor for URL.DirectoryHint();
  v1[5] = v2;
  v1[6] = *(_QWORD *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v3 = type metadata accessor for URL();
  v1[8] = v3;
  v1[9] = *(_QWORD *)(v3 - 8);
  v1[10] = swift_task_alloc();
  v4 = type metadata accessor for URLRequest();
  v1[11] = v4;
  v1[12] = *(_QWORD *)(v4 - 8);
  v1[13] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  Swift::String v13;
  Swift::String_optional v14;
  Swift::String v15;
  _QWORD *v16;

  v2 = v0[9];
  v1 = v0[10];
  v4 = v0[7];
  v3 = v0[8];
  v5 = v0[5];
  v6 = v0[6];
  v7 = v0[4];
  v0[2] = 0xD000000000000018;
  v0[3] = 0x8000000237D63100;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v4, *MEMORY[0x24BDCD7A0], v5);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v8 = objc_allocWithZone(MEMORY[0x24BDD16B0]);
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v12 = objc_msgSend(v8, sel_initWithURL_, v10);

  objc_msgSend(v12, sel__setPrivacyProxyFailClosed_, *(unsigned __int8 *)(v7 + *(int *)(type metadata accessor for TokenFetcher(0) + 28)));
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v13 = Data.base64EncodedString(options:)(0);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14.value._countAndFlagsBits = 0x20726572616542;
  v14.value._object = (void *)0xE700000000000000;
  v15._countAndFlagsBits = 0x7A69726F68747541;
  v15._object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v14, v15);
  swift_bridgeObjectRelease();
  v16 = (_QWORD *)swift_task_alloc();
  v0[14] = v16;
  *v16 = v0;
  v16[1] = TokenFetcher.fetchTokenKey();
  return NSURLSession.data(for:delegate:)();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  _BYTE *v7;

  objc_opt_self();
  v1 = (void *)swift_dynamicCastObjCClass();
  if (v1 && objc_msgSend(v1, sel_statusCode) == (id)200)
  {
    v2 = *(void **)(v0 + 136);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(void **)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 120);
    lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
    swift_allocError();
    *v7 = 5;
    swift_willThrow();
    outlined consume of Data._Representation(v6, v4);

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TokenFetcher.fetchTokenKey()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[15] = a1;
  v5[16] = a2;
  v5[17] = a3;
  v5[18] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t implicit closure #1 in TokenFetcher.fetchToken()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = implicit closure #1 in TokenFetcher.fetchToken();
  return TokenFetcher.fetchTokenInner(context:)(a2);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> (@owned Data, @error @owned Error)(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = thunk for @escaping @callee_guaranteed @async () -> (@owned Data, @error @owned Error);
  return v5();
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> (@owned Data, @error @owned Error)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (!v2)
  {
    v8 = *(_QWORD **)(v6 + 16);
    *v8 = a1;
    v8[1] = a2;
  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t closure #1 in TokenFetcher.fetchToken()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in TokenFetcher.fetchToken()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = os_transaction_create();
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v1 + 16) = 3;
  *(_OWORD *)(v1 + 24) = v4;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = closure #1 in TokenFetcher.fetchToken();
  return withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;

  if (one-time initialization token for shared != -1)
    swift_once();
  TokenCache.save()();
  swift_unknownObjectRelease();
  if (v1)
  {
    if (one-time initialization token for networking != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.networking);
    v3 = v1;
    v4 = v1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138543362;
      v9 = v1;
      v10 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v8 = v10;

      _os_log_impl(&dword_237BC8000, v5, v6, "Failed to fetch extra tokens: %{public}@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v8, -1, -1);
      MEMORY[0x23B822DA8](v7, -1, -1);

    }
    else
    {

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;

  swift_task_dealloc();
  v1 = *(void **)(v0 + 64);
  swift_unknownObjectRelease();
  if (one-time initialization token for networking != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.networking);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138543362;
    v9 = v1;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v10;

    _os_log_impl(&dword_237BC8000, v5, v6, "Failed to fetch extra tokens: %{public}@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = dispatch thunk of Actor.unownedExecutor.getter();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t TokenFetcher.tokenDirectoryURL()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  _QWORD v14[2];

  v1 = type metadata accessor for URL.DirectoryHint();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + *(int *)(type metadata accessor for TokenFetcher(0) + 28)) == 1)
  {
    if (!(unint64_t)URL.host(percentEncoded:)(1).value._object)
    {
LABEL_5:
      lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError();
      swift_allocError();
      *v12 = 0;
      return swift_willThrow();
    }
    URL.init(string:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
      goto LABEL_5;
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
    type metadata accessor for URLQueryItem();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_237D540E0;
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    URL.appending(queryItems:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v14[0] = 0xD00000000000002ALL;
    v14[1] = 0x8000000237D630D0;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BDCD7A0], v1);
    lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(path:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return swift_bridgeObjectRelease();
  }
}

uint64_t TokenFetcher.tokenDirectoryRequest()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t);
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  Swift::String_optional v24;
  Swift::String v25;
  _QWORD v26[2];
  uint8_t *v27;
  uint64_t v28;
  os_log_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;

  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v26 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v26 - v11;
  result = TokenFetcher.tokenDirectoryURL()();
  if (!v1)
  {
    if (one-time initialization token for networking != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.networking);
    v31 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v31(v10, v12, v3);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v29 = v15;
      v17 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v33 = v28;
      v30 = a1;
      *(_DWORD *)v17 = 136446210;
      v26[1] = v17 + 4;
      v27 = v17;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v20 = *(void (**)(char *, uint64_t))(v4 + 8);
      v20(v10, v3);
      v15 = v29;
      v21 = v16;
      v22 = v27;
      _os_log_impl(&dword_237BC8000, v29, v21, "Fetching token issuer directory from %{public}s", v27, 0xCu);
      v23 = v28;
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v23, -1, -1);
      MEMORY[0x23B822DA8](v22, -1, -1);
    }
    else
    {
      v20 = *(void (**)(char *, uint64_t))(v4 + 8);
      v20(v10, v3);
    }

    v31(v7, v12, v3);
    URLRequest.init(url:cachePolicy:timeoutInterval:)();
    v24.value._object = (void *)0x8000000237D63120;
    v24.value._countAndFlagsBits = 0xD00000000000002ALL;
    v25._countAndFlagsBits = 0x747065636341;
    v25._object = (void *)0xE600000000000000;
    URLRequest.setValue(_:forHTTPHeaderField:)(v24, v25);
    return ((uint64_t (*)(char *, uint64_t))v20)(v12, v3);
  }
  return result;
}

uint64_t type metadata accessor for TokenFetcher.TokenFetchContext(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for TokenFetcher.TokenFetchContext);
}

uint64_t sub_237C7EBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Context;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for TokenFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  Context = type metadata accessor for TokenFetcher.TokenFetchContext(0);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(Context - 8) + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = v0 + v3;
  v9 = type metadata accessor for URL();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  outlined consume of Data._Representation(*(_QWORD *)(v8 + *(int *)(v1 + 20)), *(_QWORD *)(v8 + *(int *)(v1 + 20) + 8));

  v10(v0 + v7, v9);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + v7 + *(int *)(Context + 24)), *(_QWORD *)(v0 + v7 + *(int *)(Context + 24) + 8));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in TokenFetcher.fetchToken()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(type metadata accessor for TokenFetcher(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8) + 80);
  v6 = v0 + ((v3 + v4 + v5) & ~v5);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = dispatch thunk of XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = implicit closure #1 in TokenFetcher.fetchToken();
  return TokenFetcher.fetchTokenInner(context:)(v6);
}

uint64_t sub_237C7EDA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async () -> (@owned Data, @error @owned Error)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@owned Data, @error @owned Error)
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@owned Data, @error @owned Error)))(a1, v4);
}

uint64_t partial apply for closure #1 in TokenFetcher.fetchToken()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for TokenFetcher(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8) + 80);
  v6 = v3 + v4 + v5;
  v7 = v0 + v3;
  v8 = v0 + (v6 & ~v5);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v9[3] = v7;
  v9[4] = v8;
  return swift_task_switch();
}

_QWORD *initializeBufferWithCopyOfBuffer for TokenFetcher(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    outlined copy of Data._Representation(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = a3[6];
    v14 = a3[7];
    v15 = *(void **)((char *)a2 + v13);
    *(_QWORD *)((char *)a1 + v13) = v15;
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v16 = v15;
  }
  return a1;
}

void destroy for TokenFetcher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));

}

uint64_t initializeWithCopy for TokenFetcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = a3[6];
  v13 = a3[7];
  v14 = *(void **)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v15 = v14;
  return a1;
}

uint64_t assignWithCopy for TokenFetcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = a3[6];
  v15 = *(void **)(a2 + v14);
  v16 = *(void **)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  v17 = v15;

  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for TokenFetcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for TokenFetcher(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of Data._Representation(v8, v9);
  v10 = a3[6];
  v11 = *(void **)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);

  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenFetcher()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C7F228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenFetcher()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C7F2B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for TokenFetcher()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenFetcher.TokenFetchContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (char *)a2 + v9;
    v15 = *(uint64_t *)((char *)a2 + v9);
    v16 = *((_QWORD *)v14 + 1);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v15, v16);
    *v13 = v15;
    v13[1] = v16;
  }
  return a1;
}

uint64_t destroy for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t initializeWithCopy for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (uint64_t *)(a1 + v8);
  v13 = *(_QWORD *)(a2 + v8);
  v14 = *(_QWORD *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v13, v14);
  *v12 = v13;
  v12[1] = v14;
  return a1;
}

uint64_t assignWithCopy for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  outlined copy of Data._Representation(*v12, v14);
  v15 = *v11;
  v16 = v11[1];
  *v11 = v13;
  v11[1] = v14;
  outlined consume of Data._Representation(v15, v16);
  return a1;
}

uint64_t initializeWithTake for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for TokenFetcher.TokenFetchContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  outlined consume of Data._Representation(v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenFetcher.TokenFetchContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C7F6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenFetcher.TokenFetchContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C7F760(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for TokenFetcher.TokenFetchContext()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in TokenFetcher.fetchTokenTasks(context:count:)partial apply(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return closure #1 in TokenFetcher.fetchTokenTasks(context:count:)(a1, a2, v6, v7, v8);
}

uint64_t objectdestroy_15Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t Context;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for TokenFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  Context = type metadata accessor for TokenFetcher.TokenFetchContext(0);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(Context - 8) + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  swift_unknownObjectRelease();
  v8 = v0 + v3;
  v9 = type metadata accessor for URL();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  outlined consume of Data._Representation(*(_QWORD *)(v8 + *(int *)(v1 + 20)), *(_QWORD *)(v8 + *(int *)(v1 + 20) + 8));

  v10(v0 + v7, v9);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + v7 + *(int *)(Context + 24)), *(_QWORD *)(v0 + v7 + *(int *)(Context + 24) + 8));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for TokenFetcher(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TokenFetcher.TokenFetchContext(0) - 8) + 80);
  v6 = v3 + v4 + v5;
  v7 = v0 + v3;
  v8 = v0 + (v6 & ~v5);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  v9[2] = v7;
  v10 = (_QWORD *)swift_task_alloc();
  v9[3] = v10;
  *v10 = v9;
  v10[1] = closure #1 in closure #1 in TokenFetcher.fetchTokenTasks(context:count:);
  return TokenFetcher.fetchTokenInner(context:)(v8);
}

uint64_t *TokenCache.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static TokenCache.shared;
}

uint64_t TokenCache.clearTokens(user:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_unfair_lock_s *v8;
  uint64_t *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  v9 = (uint64_t *)&v8[4];
  v10 = v8 + 6;
  os_unfair_lock_lock(v8 + 6);
  closure #1 in TokenCache.clearTokens(user:)(v9, a1, a2);
  os_unfair_lock_unlock(v10);
  static TaskPriority.background.getter();
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 0, 1, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v2;
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in TokenCache.saveAsync(), (uint64_t)v12);
  return swift_release();
}

uint64_t TokenCache.removeToken(user:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE v18[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenCache.CachedToken?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v18[-v9];
  v11 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  v12 = (uint64_t *)&v11[4];
  v13 = v11 + 6;
  os_unfair_lock_lock(v11 + 6);
  closure #1 in TokenCache.removeToken(user:)(v12, v2, a1, a2, (uint64_t)v10);
  os_unfair_lock_unlock(v13);
  outlined init with take of TokenCache.CachedToken?((uint64_t)v10, (uint64_t)v8);
  v14 = type metadata accessor for TokenCache.CachedToken(0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v8, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for TokenCache.CachedToken?);
    return 0;
  }
  else
  {
    v16 = &v8[*(int *)(v14 + 20)];
    v15 = *(_QWORD *)v16;
    outlined copy of Data._Representation(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
    outlined destroy of TokenCache.CachedToken((uint64_t)v8);
  }
  return v15;
}

uint64_t TokenCache.count(user:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  v6 = *(_QWORD *)(TokenCache.validTokens(tokensForUser:user:)(*(_QWORD *)(v5 + 16), a1, a2) + 16);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
  return v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenCache.save()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[2];

  v2 = v0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
    v11 = (os_unfair_lock_s *)(v10 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 24));
    v12 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v11);
    if (v1)
    {
      __break(1u);
    }
    else
    {
      v16[1] = v12;
      lazy protocol witness table accessor for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat();
      v13 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      v15 = v14;
      swift_bridgeObjectRelease();
      Data.write(to:options:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      outlined consume of Data._Representation(v13, v15);
      swift_release();
    }
  }
}

void TokenCache.addToken(user:token:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  os_unfair_lock_s *v9;
  uint64_t *v10;
  os_unfair_lock_s *v11;

  v9 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  v10 = (uint64_t *)&v9[4];
  v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  closure #1 in TokenCache.addToken(user:token:)(v10, v4, a1, a2, a3, a4);
  os_unfair_lock_unlock(v11);
}

uint64_t TokenCache.CachedToken.tokenIssuance.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TokenCache.CachedToken.token.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for TokenCache.CachedToken(0) + 20);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

void static TokenCache.CachedToken.== infix(_:_:)(uint64_t a1)
{
  uint64_t v2;

  if ((static Date.== infix(_:_:)() & 1) != 0)
  {
    v2 = *(int *)(type metadata accessor for TokenCache.CachedToken(0) + 20);
    specialized static Data.== infix(_:_:)(*(_QWORD *)(a1 + v2), *(_QWORD *)(a1 + v2 + 8));
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenCache.CachedToken.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E656B6F74;
  else
    return 0x7373496E656B6F74;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenCache.CachedToken.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TokenCache.CachedToken.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenCache.CachedToken.CodingKeys()
{
  lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenCache.CachedToken.CodingKeys()
{
  lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TokenCache.CachedToken.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenCache.CachedToken.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for TokenCache.CachedToken(0) + 20));
    v10[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TokenCache.CachedToken.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;

  v20 = a2;
  v24 = type metadata accessor for Date();
  v21 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v22 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenCache.CachedToken.CodingKeys>);
  v5 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TokenCache.CachedToken(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v18 = a1;
  v19 = v5;
  v11 = (uint64_t)v10;
  v12 = v21;
  LOBYTE(v25) = 0;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v14 = v22;
  v13 = v23;
  v15 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v14, v15);
  v26 = 1;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v13);
  *(_OWORD *)(v11 + *(int *)(v8 + 20)) = v25;
  outlined init with copy of TokenCache.CachedToken(v11, v20);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  return outlined destroy of TokenCache.CachedToken(v11);
}

uint64_t TokenCache.CachedToken.init(tokenIssuance:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;

  v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = type metadata accessor for TokenCache.CachedToken(0);
  v10 = (_QWORD *)(a4 + *(int *)(result + 20));
  *v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TokenCache.CachedToken@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TokenCache.CachedToken.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenCache.CachedToken(_QWORD *a1)
{
  return TokenCache.CachedToken.encode(to:)(a1);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static Date.== infix(_:_:)() & 1) != 0)
    specialized static Data.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenCache.TokenCacheFormat.CodingKeys()
{
  return 0x6F46736E656B6F74;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenCache.TokenCacheFormat.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F46736E656B6F74 && a2 == 0xED00007265735572)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenCache.TokenCacheFormat.CodingKeys()
{
  lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenCache.TokenCacheFormat.CodingKeys()
{
  lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TokenCache.TokenCacheFormat.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenCache.TokenCacheFormat.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data : [TokenCache.CachedToken]]);
  lazy protocol witness table accessor for type [Data : [TokenCache.CachedToken]] and conformance <> [A : B]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *TokenCache.TokenCacheFormat.init(from:)(_QWORD *a1)
{
  return specialized TokenCache.TokenCacheFormat.init(from:)(a1);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance TokenCache.TokenCacheFormat@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = specialized TokenCache.TokenCacheFormat.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TokenCache.TokenCacheFormat(_QWORD *a1)
{
  uint64_t *v1;

  return TokenCache.TokenCacheFormat.encode(to:)(a1, *v1);
}

void *TokenCache.tokenExpiry.unsafeMutableAddressor()
{
  return &static TokenCache.tokenExpiry;
}

double static TokenCache.tokenExpiry.getter()
{
  return 86400.0;
}

uint64_t (*default argument 1 of TokenCache.init(file:currentDate:)())()
{
  return closure #1 in default argument 1 of TokenCache.init(file:currentDate:);
}

uint64_t static TokenCache.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t TokenCache.persistanceFile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile, a1);
}

uint64_t TokenCache.tokensForUserLock.getter()
{
  return swift_retain();
}

uint64_t TokenCache.currentDate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  swift_retain();
  return v1;
}

uint64_t (*default argument 2 of TokenCache.init(tokensForUsers:file:currentDate:)())()
{
  return closure #1 in default argument 1 of TokenCache.init(file:currentDate:);
}

uint64_t TokenCache.__allocating_init(tokensForUsers:file:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = swift_allocObject();
  outlined init with copy of URL?(a2, v8 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile);
  v9 = (_QWORD *)(v8 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  *v9 = a3;
  v9[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[Data : [TokenCache.CachedToken]], os_unfair_lock_s>);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = a1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for URL?);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock) = v10;
  return v8;
}

uint64_t TokenCache.init(tokensForUsers:file:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;

  outlined init with copy of URL?(a2, v4 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile);
  v9 = (_QWORD *)(v4 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  *v9 = a3;
  v9[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[Data : [TokenCache.CachedToken]], os_unfair_lock_s>);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = a1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, &demangling cache variable for type metadata for URL?);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock) = v10;
  return v4;
}

uint64_t TokenCache.saveAsync()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.background.getter();
  v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v0;
  swift_retain();
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&closure #1 in TokenCache.saveAsync()partial apply, (uint64_t)v5);
}

uint64_t closure #1 in TokenCache.saveAsync()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in TokenCache.saveAsync()()
{
  uint64_t v0;

  os_transaction_create();
  TokenCache.save()();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t closure #1 in TokenCache.removeToken(user:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = TokenCache.validTokens(tokensForUser:user:)(*a1, a3, a4);
  v13 = specialized Collection.randomElement()(0, *(_QWORD *)(v24 + 16));
  if ((v14 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v21 = type metadata accessor for TokenCache.CachedToken(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a5, 1, 1, v21);
  }
  else
  {
    specialized Array.remove(at:)(v13, a5);
    v15 = v24;
    outlined copy of Data._Representation(a3, a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, a3, a4, isUniquelyReferenced_nonNull_native);
    *a1 = v23;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a3, a4);
    static TaskPriority.background.getter();
    v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v12, 0, 1, v17);
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = a2;
    swift_retain();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&closure #1 in TokenCache.saveAsync()partial apply, (uint64_t)v18);
    swift_release();
    v19 = type metadata accessor for TokenCache.CachedToken(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a5, 0, 1, v19);
  }
}

uint64_t TokenCache.validTokens(tokensForUser:user:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];

  v4 = v3;
  v8 = *v4;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!*(_QWORD *)(a1 + 16))
    return MEMORY[0x24BEE4AF8];
  outlined copy of Data._Representation(a2, a3);
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v14 & 1) == 0)
  {
    outlined consume of Data._Representation(a2, a3);
    return MEMORY[0x24BEE4AF8];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  v16 = outlined consume of Data._Representation(a2, a3);
  v17 = (*(uint64_t (**)(uint64_t))((char *)v4 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate))(v16);
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)&v20[-16] = v12;
  *(_QWORD *)&v20[-8] = v8;
  v18 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))closure #1 in TokenCache.validTokens(tokensForUser:user:)partial apply, (uint64_t)&v20[-32], v15);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  return v18;
}

int64_t specialized Collection.randomElement()(int64_t a1, int64_t a2)
{
  int64_t result;
  unint64_t v5;
  BOOL v6;

  if (a1 == a2)
    return 0;
  result = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (result < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = specialized RandomNumberGenerator.next<A>(upperBound:)(result);
  v6 = __OFADD__(a1, v5);
  result = a1 + v5;
  if (v6)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (result < a1 || result > a2)
    goto LABEL_14;
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = *(_QWORD *)(type metadata accessor for TokenCache.CachedToken(0) - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  result = outlined init with take of TokenCache.CachedToken(v10, a2);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    result = swift_arrayInitWithTakeBackToFront();
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t closure #1 in TokenCache.clearTokens(user:)(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  char v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
    return outlined consume of Data._Representation(a2, a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *a1;
  v12 = *a1;
  *a1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    v10 = v12;
  }
  outlined consume of Data._Representation(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v6), *(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v6 + 8));
  specialized _NativeDictionary._delete(at:)(v6, v10);
  *a1 = v10;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in TokenCache.saveAsync()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t outlined init with take of TokenCache.CachedToken?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenCache.CachedToken?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TokenCache.CachedToken(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for TokenCache.CachedToken);
}

uint64_t outlined destroy of TokenCache.CachedToken(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TokenCache.CachedToken(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in TokenCache.addToken(user:token:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  uint64_t v25;

  v12 = type metadata accessor for TokenCache.CachedToken(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v24 = a4;
  v17 = TokenCache.validTokens(tokensForUser:user:)(v16, a3, a4);
  (*(void (**)(void))(a2 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate))();
  v18 = (uint64_t *)&v15[*(int *)(v12 + 20)];
  *v18 = a5;
  v18[1] = a6;
  outlined copy of Data._Representation(a5, a6);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
  v20 = *(_QWORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  if (v20 >= v19 >> 1)
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v17);
  *(_QWORD *)(v17 + 16) = v20 + 1;
  outlined init with take of TokenCache.CachedToken((uint64_t)v15, v17+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v20);
  v21 = v24;
  outlined copy of Data._Representation(a3, v24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, a3, v21, isUniquelyReferenced_nonNull_native);
  *a1 = v25;
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(a3, v21);
}

uint64_t closure #1 in TokenCache.validTokens(tokensForUser:user:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  v0 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.addingTimeInterval(_:)();
  v4 = static Date.> infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t closure #1 in TokenCache.count(user:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(TokenCache.validTokens(tokensForUser:user:)(*a1, a2, a3) + 16);
  result = swift_bridgeObjectRelease();
  *a4 = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.TokenCacheFormat, &type metadata for TokenCache.TokenCacheFormat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.TokenCacheFormat, &type metadata for TokenCache.TokenCacheFormat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenCache.pruneCache()()
{
  uint64_t **v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t *v3;
  os_unfair_lock_s *v4;

  v2 = *(os_unfair_lock_s **)((char *)v0 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  v3 = (uint64_t *)&v2[4];
  v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  closure #1 in TokenCache.pruneCache()(v3, v0);
  os_unfair_lock_unlock(v4);
  if (v1)
    __break(1u);
  else
    TokenCache.save()();
}

uint64_t closure #1 in TokenCache.pruneCache()(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *i;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t result;
  uint64_t *v47;
  uint64_t (**v48)(uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v52 = *a2;
  v5 = type metadata accessor for Date();
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_bridgeObjectRetain();
  v8 = specialized _copyCollectionToContiguousArray<A>(_:)(v7);
  swift_bridgeObjectRelease();
  v9 = v8[2];
  if (!v9)
    return swift_release();
  v53 = v2;
  v47 = v8;
  v48 = (uint64_t (**)(uint64_t))((char *)a2 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  for (i = (unint64_t *)(v8 + 5); ; i += 2)
  {
    v13 = *(i - 1);
    v12 = *i;
    v14 = *a1;
    v15 = *(_QWORD *)(*a1 + 16);
    outlined copy of Data._Representation(v13, *i);
    if (v15)
    {
      outlined copy of Data._Representation(v13, v12);
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
      if ((v17 & 1) != 0)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v16);
        swift_bridgeObjectRetain();
        v19 = outlined consume of Data._Representation(v13, v12);
        v20 = (uint64_t *)v49;
        v21 = (*v48)(v19);
        MEMORY[0x24BDAC7A8](v21);
        v22 = v52;
        v23 = v53;
        *(&v47 - 2) = v20;
        *(&v47 - 1) = v22;
        v24 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in TokenCache.validTokens(tokensForUser:user:), (uint64_t)(&v47 - 4), v18);
        v53 = v23;
        (*(void (**)(uint64_t *, uint64_t))(v50 + 8))(v20, v51);
        if (!*(_QWORD *)(v24 + 16))
          goto LABEL_9;
        goto LABEL_15;
      }
      outlined consume of Data._Representation(v13, v12);
    }
    v24 = MEMORY[0x24BEE4AF8];
    if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
LABEL_9:
      swift_bridgeObjectRelease();
      outlined copy of Data._Representation(v13, v12);
      swift_bridgeObjectRetain();
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
      v27 = v26;
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v29 = *a1;
        v55 = (_QWORD *)*a1;
        *a1 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v29 = (uint64_t)v55;
        }
        outlined consume of Data._Representation(*(_QWORD *)(*(_QWORD *)(v29 + 48) + 16 * v25), *(_QWORD *)(*(_QWORD *)(v29 + 48) + 16 * v25 + 8));
        specialized _NativeDictionary._delete(at:)(v25, v29);
        *a1 = v29;
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v13, v12);
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined consume of Data._Representation(v13, v12);
      }
      outlined consume of Data._Representation(v13, v12);
      goto LABEL_5;
    }
LABEL_15:
    v54 = v9;
    outlined copy of Data._Representation(v13, v12);
    v30 = swift_isUniquelyReferenced_nonNull_native();
    v55 = (_QWORD *)*a1;
    v31 = v55;
    v32 = a1;
    *a1 = 0x8000000000000000;
    v34 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
    v35 = v31[2];
    v36 = (v33 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      break;
    v38 = v33;
    if (v31[3] >= v37)
    {
      if ((v30 & 1) != 0)
      {
        v41 = v55;
        if ((v33 & 1) == 0)
          goto LABEL_22;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v41 = v55;
        if ((v38 & 1) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, v30);
      v39 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
      if ((v38 & 1) != (v40 & 1))
        goto LABEL_31;
      v34 = v39;
      v41 = v55;
      if ((v38 & 1) == 0)
      {
LABEL_22:
        v41[(v34 >> 6) + 8] |= 1 << v34;
        v42 = (uint64_t *)(v41[6] + 16 * v34);
        *v42 = v13;
        v42[1] = v12;
        *(_QWORD *)(v41[7] + 8 * v34) = v24;
        v43 = v41[2];
        v44 = __OFADD__(v43, 1);
        v45 = v43 + 1;
        if (v44)
          goto LABEL_30;
        v41[2] = v45;
        outlined copy of Data._Representation(v13, v12);
        goto LABEL_4;
      }
    }
    v11 = v41[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + 8 * v34) = v24;
LABEL_4:
    a1 = v32;
    *v32 = (uint64_t)v41;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v13, v12);
    outlined consume of Data._Representation(v13, v12);
    v9 = v54;
LABEL_5:
    if (!--v9)
      return swift_release();
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t TokenCache.deinit()
{
  uint64_t v0;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();
  return v0;
}

uint64_t TokenCache.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.CachedToken.CodingKeys, &unk_2509A5C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.CachedToken.CodingKeys, &unk_2509A5C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.CachedToken.CodingKeys, &unk_2509A5C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.CachedToken.CodingKeys, &unk_2509A5C08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.CachedToken.CodingKeys and conformance TokenCache.CachedToken.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of TokenCache.CachedToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TokenCache.CachedToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.TokenCacheFormat.CodingKeys, &unk_2509A5C98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.TokenCacheFormat.CodingKeys, &unk_2509A5C98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.TokenCacheFormat.CodingKeys, &unk_2509A5C98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for TokenCache.TokenCacheFormat.CodingKeys, &unk_2509A5C98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys);
  }
  return result;
}

uint64_t specialized TokenCache.__allocating_init(file:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = Data.init(contentsOf:options:)();
  v12 = v11;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type TokenCache.TokenCacheFormat and conformance TokenCache.TokenCacheFormat();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  v14 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v5);
  type metadata accessor for TokenCache(0);
  v15 = v6;
  v16 = swift_allocObject();
  outlined init with copy of URL?((uint64_t)v9, v16 + OBJC_IVAR____TtC8CipherML10TokenCache_persistanceFile);
  v17 = (_QWORD *)(v16 + OBJC_IVAR____TtC8CipherML10TokenCache_currentDate);
  *v17 = v20;
  v17[1] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[Data : [TokenCache.CachedToken]], os_unfair_lock_s>);
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 16) = v14;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
  outlined consume of Data._Representation(v10, v12);
  *(_QWORD *)(v16 + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock) = v18;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v5);
  return v16;
}

uint64_t specialized TokenCache.CachedToken.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7373496E656B6F74 && a2 == 0xED000065636E6175;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *specialized TokenCache.TokenCacheFormat.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenCache.TokenCacheFormat.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TokenCache.TokenCacheFormat.CodingKeys and conformance TokenCache.TokenCacheFormat.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data : [TokenCache.CachedToken]]);
    lazy protocol witness table accessor for type [Data : [TokenCache.CachedToken]] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

uint64_t ObjC metadata update function for TokenCache()
{
  return type metadata accessor for TokenCache(0);
}

uint64_t type metadata accessor for TokenCache(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for TokenCache);
}

void type metadata completion function for TokenCache()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for TokenCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TokenCache.__allocating_init(tokensForUsers:file:currentDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenCache.CachedToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    outlined copy of Data._Representation(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t destroy for TokenCache.CachedToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t assignWithCopy for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  return a1;
}

uint64_t initializeWithTake for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TokenCache.CachedToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenCache.CachedToken()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C829F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TokenCache.CachedToken()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C82A90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for Date();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t type metadata completion function for TokenCache.CachedToken()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenCache.TokenCacheFormat()
{
  return &type metadata for TokenCache.TokenCacheFormat;
}

uint64_t storeEnumTagSinglePayload for TokenCache.TokenCacheFormat.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237C82BD8 + 4 * byte_237D58160[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237C82BF8 + 4 * byte_237D58165[v4]))();
}

_BYTE *sub_237C82BD8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237C82BF8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237C82C00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237C82C08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237C82C10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237C82C18(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for TokenCache.TokenCacheFormat.CodingKeys()
{
  return &unk_2509A5C98;
}

uint64_t storeEnumTagSinglePayload for TokenCache.CachedToken.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237C82C80 + 4 * byte_237D5816F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237C82CB4 + 4 * byte_237D5816A[v4]))();
}

uint64_t sub_237C82CB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C82CBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C82CC4);
  return result;
}

uint64_t sub_237C82CD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C82CD8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237C82CDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C82CE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TokenCache.CachedToken.CodingKeys()
{
  return &unk_2509A5C08;
}

uint64_t partial apply for closure #1 in TokenCache.validTokens(tokensForUser:user:)()
{
  return closure #1 in TokenCache.validTokens(tokensForUser:user:)() & 1;
}

uint64_t lazy protocol witness table accessor for type [TokenCache.CachedToken] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TokenCache.CachedToken]);
    v10 = lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a2, type metadata accessor for TokenCache.CachedToken, a3);
    result = MEMORY[0x23B822CDC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of TokenCache.CachedToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TokenCache.CachedToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroyTm_1()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in TokenCache.saveAsync()partial apply()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t closure #1 in TokenCache.validTokens(tokensForUser:user:)partial apply()
{
  return partial apply for closure #1 in TokenCache.validTokens(tokensForUser:user:)() & 1;
}

uint64_t UserIdentifier.created.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t UserIdentifier.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for UserIdentifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UserIdentifier;
  if (!type metadata singleton initialization cache for UserIdentifier)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t UserIdentifier.secretKeys.getter()
{
  type metadata accessor for UserIdentifier();
  return swift_bridgeObjectRetain();
}

uint64_t UserIdentifier.secretKeys.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for UserIdentifier() + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*UserIdentifier.secretKeys.modify())()
{
  type metadata accessor for UserIdentifier();
  return Repeated.subscript.readspecialized ;
}

unint64_t UserIdentifier.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t result;

  Date.init()();
  v2 = type metadata accessor for UserIdentifier();
  UUID.init()();
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a1 + *(int *)(v2 + 24)) = result;
  return result;
}

uint64_t UserIdentifier.init(date:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  v6 = type metadata accessor for UserIdentifier();
  UUID.init()();
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  *(_QWORD *)(a2 + *(int *)(v6 + 24)) = v7;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance UserIdentifier.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1684632949;
  if (*v0 != 1)
    v1 = 0x654B746572636573;
  if (*v0)
    return v1;
  else
    return 0x64657461657263;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance UserIdentifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized UserIdentifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UserIdentifier.CodingKeys()
{
  lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UserIdentifier.CodingKeys()
{
  lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t UserIdentifier.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UserIdentifier.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = type metadata accessor for UserIdentifier();
    v13 = 1;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data : SecretKey]);
    lazy protocol witness table accessor for type [Data : SecretKey] and conformance <> [A : B]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UserIdentifier.CodingKeys, &unk_2509A77A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UserIdentifier.CodingKeys, &unk_2509A77A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UserIdentifier.CodingKeys, &unk_2509A77A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UserIdentifier.CodingKeys, &unk_2509A77A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys);
  }
  return result;
}

uint64_t UserIdentifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  v22 = a2;
  v3 = type metadata accessor for UUID();
  v24 = *(_QWORD *)(v3 - 8);
  v25 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v23 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v27 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UserIdentifier.CodingKeys>);
  v7 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UserIdentifier();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UserIdentifier.CodingKeys and conformance UserIdentifier.CodingKeys();
  v29 = v9;
  v13 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v20 = v5;
  v21 = v7;
  v14 = (uint64_t)v12;
  v30 = a1;
  v16 = v23;
  v15 = v24;
  v17 = v25;
  v34 = 0;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v18 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v14, v27, v18);
  v33 = 1;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14 + *(int *)(v10 + 20), v16, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data : SecretKey]);
  v32 = 2;
  lazy protocol witness table accessor for type [Data : SecretKey] and conformance <> [A : B]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v29, v28);
  *(_QWORD *)(v14 + *(int *)(v10 + 24)) = v31;
  outlined init with copy of UserIdentifier(v14, v22);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
  return outlined destroy of UserIdentifier(v14);
}

uint64_t outlined init with copy of UserIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UserIdentifier(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UserIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance UserIdentifier@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return UserIdentifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UserIdentifier(_QWORD *a1)
{
  return UserIdentifier.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for UserIdentifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UserIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for UserIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserIdentifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C83EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for UserIdentifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C83F78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for UUID();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for UserIdentifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UserIdentifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_237C840F8 + 4 * byte_237D584E1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_237C8412C + 4 * byte_237D584DC[v4]))();
}

uint64_t sub_237C8412C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C84134(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C8413CLL);
  return result;
}

uint64_t sub_237C84148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C84150);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_237C84154(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C8415C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for UserIdentifier.CodingKeys()
{
  return &unk_2509A77A0;
}

uint64_t specialized UserIdentifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64657461657263 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684632949 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654B746572636573 && a2 == 0xEA00000000007379)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t RequestsManager.similarityScores(elements:shardIndices:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v3[10] = swift_task_alloc();
  type metadata accessor for AspireApiRequest(0);
  v3[11] = swift_task_alloc();
  v3[12] = type metadata accessor for RequestsManager.PECContext();
  v5 = swift_task_alloc();
  v3[13] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v3[14] = v6;
  *v6 = v3;
  v6[1] = RequestsManager.similarityScores(elements:shardIndices:context:);
  return RequestsManager.loadContext(requestContext:)(v5, a3);
}

uint64_t RequestsManager.similarityScores(elements:shardIndices:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(int *)(*(_QWORD *)(v0 + 96) + 24);
  v5 = type metadata accessor for SimilarityClient();
  v7 = specialized RequestsManager.convertToFloats(_:embeddingDimension:)(v3, *(unsigned int *)(v2 + *(int *)(v5 + 20) + v4 + 8), v6);
  if (v1)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 104), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v7;
    v10 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 64);
    v12 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
    RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v8, v11, v10, v9);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 80), &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    swift_bridgeObjectRelease();
    specialized RequestContext.networkManager()(v0 + 16);
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v13;
    *v13 = v0;
    v13[1] = RequestsManager.similarityScores(elements:shardIndices:context:);
    return RequestsManager.PECContext.requestData(request:networkManager:)(*(_QWORD *)(v0 + 88), v0 + 16);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 88), type metadata accessor for AspireApiRequest);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144));
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 88), type metadata accessor for AspireApiRequest);
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.similarityScores(elements:shardIndices:context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 144) = a1;
  __swift_destroy_boxed_opaque_existential_0(v4 + 16);
  return swift_task_switch();
}

uint64_t type metadata accessor for RequestsManager.PECContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RequestsManager.PECContext;
  if (!type metadata singleton initialization cache for RequestsManager.PECContext)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t RequestsManager.setPECConfig(config:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v3[8] = swift_task_alloc();
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v5 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v3[14] = v5;
  v3[15] = *(_QWORD *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = type metadata accessor for AspireApiKeyStatus(0);
  v3[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v3[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v3[21] = swift_task_alloc();
  v3[22] = type metadata accessor for AspireApiPECConfig(0);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v6 = type metadata accessor for AspireApiConfig(0);
  v3[27] = v6;
  v3[28] = *(_QWORD *)(v6 - 8);
  v3[29] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[33] = a1;
  v4[34] = a2;
  v4[35] = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

void RequestsManager.setPECConfig(config:context:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id *v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  os_log_t log;
  uint64_t v96;
  uint64_t v97;
  uint64_t type;
  _QWORD *v99;
  uint64_t (*v100)(uint64_t, uint64_t, uint64_t);
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v1 = v0 + 5;
  v2 = (void *)v0[5];
  v3 = objc_msgSend(*(id *)v0[6], sel_useCase);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v0[30] = v6;
  v7 = objc_msgSend(v2, sel_serializedPECConfig);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  v104 = 0;
  v102 = 0u;
  v103 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
  Message.init(serializedData:extensions:partial:options:)();
  v8 = v0[21];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0[29], v8, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v9 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  v11 = v0[21];
  if (v10 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v11, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_6:
    if (one-time initialization token for framework != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.framework);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_237BC8000, v23, v24, "CMLPECConfig is missing pecConfig.", v25, 2u);
      MEMORY[0x23B822DA8](v25, -1, -1);
    }
    v26 = v0[29];

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    v27 = v26;
LABEL_11:
    outlined destroy of AspireApiPECConfig(v27, type metadata accessor for AspireApiConfig);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    ((void (*)(void))v0[1])();
    return;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiPECConfig(v11, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_6;
  }
  v12 = v0;
  v15 = v0 + 28;
  v13 = v0[28];
  v14 = v15[1];
  v16 = v12[27];
  v17 = v12[20];
  v99 = v12;
  v18 = v12[7];
  outlined init with take of SecretKey(v11, v12[24], type metadata accessor for AspireApiPECConfig);
  v19 = *(_QWORD *)(v18 + 16);
  outlined init with copy of SecretKey(v14, v17, type metadata accessor for AspireApiConfig);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v16);
  v20 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v21 = (uint64_t *)swift_task_alloc();
  v21[2] = v4;
  v21[3] = v6;
  v21[4] = v17;
  swift_bridgeObjectRetain();
  os_unfair_lock_lock((os_unfair_lock_t)(v20 + 24));
  closure #1 in ConfigCache.subscript.setter((_QWORD *)(v20 + 16), v21[2], v21[3], v21[4], &v102);
  os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 24));
  log = (os_log_t)v4;
  v28 = v99[20];
  v29 = (void *)v99[5];
  v30 = v102;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  ConfigCache.tryToSaveCache(configs:)(v30);
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, &demangling cache variable for type metadata for AspireApiConfig?);
  v31 = objc_msgSend(v29, sel_serializedKeyStatus);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  v104 = 0;
  v102 = 0u;
  v103 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
  Message.init(serializedData:extensions:partial:options:)();
  v32 = v99[24];
  v33 = v99[15];
  v34 = v99[14];
  v35 = v99[13];
  v36 = *(_QWORD *)(v32 + 32);
  v37 = *(_QWORD *)(v32 + 40);
  v38 = v99[19] + *(int *)(v99[18] + 24);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v35, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  v0 = v99;
  v40 = v39(v35, 1, v34);
  v41 = v99[17];
  v100 = v39;
  type = v38;
  if (v40 == 1)
  {
    v42 = v99[14];
    v96 = v99[13];
    v43 = v99[10];
    v44 = v99[9];
    *(_QWORD *)v41 = MEMORY[0x24BEE4AF8];
    *(_BYTE *)(v41 + 8) = 0;
    outlined copy of Data._Representation(v36, v37);
    UnknownStorage.init()();
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
    v0 = v99;
    v45(v41 + *(int *)(v42 + 28), 1, 1, v44);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v96, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of SecretKey(v99[13], v41, type metadata accessor for AspireHeEvaluationKeyConfig);
    outlined copy of Data._Representation(v36, v37);
  }
  v46 = specialized Message.hash()();
  v48 = v47;
  outlined destroy of AspireApiPECConfig(v0[17], type metadata accessor for AspireHeEvaluationKeyConfig);
  specialized static Data.== infix(_:_:)(v36, v37);
  v50 = v49;
  outlined consume of Data._Representation((uint64_t)v46, v48);
  outlined consume of Data._Representation(v36, v37);
  if ((v50 & 1) == 0)
  {
    v60 = v0[14];
    v61 = v0[12];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(type, v61, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    v62 = v100(v61, 1, v60);
    v63 = v0[16];
    if (v62 == 1)
    {
      v64 = v99[14];
      v65 = v99[12];
      v66 = v99[10];
      v67 = v99[9];
      *(_QWORD *)v63 = MEMORY[0x24BEE4AF8];
      *(_BYTE *)(v63 + 8) = 0;
      UnknownStorage.init()();
      v68 = *(int *)(v64 + 28);
      v0 = v99;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v63 + v68, 1, 1, v67);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v65, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    }
    else
    {
      outlined init with take of SecretKey(v0[12], v0[16], type metadata accessor for AspireHeEvaluationKeyConfig);
    }
    v75 = specialized Message.hash()();
    v77 = v76;
    outlined destroy of AspireApiPECConfig(v0[16], type metadata accessor for AspireHeEvaluationKeyConfig);
    Data.hexString.getter((uint64_t)v75, v77);
    v79 = v78;
    v101 = v80;
    outlined consume of Data._Representation((uint64_t)v75, v77);
    if (one-time initialization token for framework != -1)
      swift_once();
    v82 = v0[23];
    v81 = v0[24];
    v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)static Logger.framework);
    outlined init with copy of SecretKey(v81, v82, type metadata accessor for AspireApiPECConfig);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v84 = Logger.logObject.getter();
    v85 = static os_log_type_t.error.getter();
    v86 = os_log_type_enabled(v84, v85);
    v87 = v0[23];
    if (v86)
    {
      v88 = swift_slowAlloc();
      v97 = swift_slowAlloc();
      *(_QWORD *)&v102 = v97;
      *(_DWORD *)v88 = 136446722;
      Data.hexString.getter(*(_QWORD *)(v87 + 32), *(_QWORD *)(v87 + 40));
      *(v1 - 3) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AspireApiPECConfig(v87, type metadata accessor for AspireApiPECConfig);
      *(_WORD *)(v88 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(v1 - 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)log, v6, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v88 + 22) = 2082;
      v0 = v99;
      swift_bridgeObjectRetain();
      *(v1 - 1) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v101, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v84, v85, "Invalid PEC config hash '%{public}s' for useCase '%{public}s', expected: '%{public}s'", (uint8_t *)v88, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v97, -1, -1);
      MEMORY[0x23B822DA8](v88, -1, -1);
    }
    else
    {
      outlined destroy of AspireApiPECConfig(v0[23], type metadata accessor for AspireApiPECConfig);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    v91 = v0[29];
    v92 = v0[24];
    v93 = v0[19];
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig(v93, type metadata accessor for AspireApiKeyStatus);
    outlined destroy of AspireApiPECConfig(v92, type metadata accessor for AspireApiPECConfig);
    v27 = v91;
    goto LABEL_11;
  }
  v51 = v0[24];
  v52 = v0[22];
  v53 = v0;
  v54 = v0[10];
  v56 = v53[8];
  v55 = v53[9];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51 + *(int *)(v52 + 40), v56, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v56, 1, v55);
  v58 = v53[11];
  if (v57 == 1)
  {
    v59 = v53[8];
    *(_QWORD *)v58 = 0;
    *(_QWORD *)(v58 + 8) = 0;
    *(_QWORD *)(v58 + 16) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v58 + 24) = 0;
    *(_BYTE *)(v58 + 32) = 1;
    *(_QWORD *)(v58 + 40) = 0;
    *(_BYTE *)(v58 + 48) = 1;
    *(_QWORD *)(v58 + 56) = 0;
    *(_BYTE *)(v58 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v59, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey(v53[8], v58, type metadata accessor for AspireHeEncryptionParameters);
  }
  RequestsManager.validateConfig(useCase:keyStatus:encryptionParams:)((uint64_t)log, v6, v53[19], v53[11]);
  v69 = (id *)v53[6];
  outlined destroy of AspireApiPECConfig(v53[11], type metadata accessor for AspireHeEncryptionParameters);
  v70 = objc_msgSend(*v69, sel_sourceApplicationBundleIdentifier);
  if (v70)
  {
    v71 = v70;
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v74 = v73;

  }
  else
  {
    v72 = 0;
    v74 = 0;
  }
  v53[31] = v74;
  v94 = (_QWORD *)swift_task_alloc();
  v53[32] = v94;
  *v94 = v53;
  v94[1] = RequestsManager.setPECConfig(config:context:);
  RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:)((uint64_t)log, v6, v53[19], v72, v74);
}

uint64_t RequestsManager.setPECConfig(config:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 48);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 152), type metadata accessor for AspireApiKeyStatus);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiPECConfig);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiConfig);
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 264);
    v6 = *(_QWORD *)(v0 + 272);
  }
  else
  {
    outlined consume of Data?(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    v5 = 0;
    v6 = 0xF000000000000000;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 192);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 152), type metadata accessor for AspireApiKeyStatus);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiPECConfig);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = type metadata accessor for RequestsManager.PECContext();
  v4[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v4[8] = swift_task_alloc();
  v4[9] = type metadata accessor for AspireApiRequest(0);
  v4[10] = swift_task_alloc();
  type metadata accessor for RequestsManager.PECContext();
  v4[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[2];

  v1 = *(_QWORD *)(v0 + 48);
  v2 = objc_msgSend(*(id *)v1, sel_useCase);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v6;
    *v6 = v0;
    v6[1] = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
    return RequestsManager.loadContext(requestContext:)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48));
  }
  else
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v13[0] = v12;
      *(_DWORD *)v11 = 136315394;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x8000000237D63290, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v5, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v9, v10, "%s should not be called for differentially private use case '%{public}s'. Call 'encryptDifferentiallyPrivateFakes' instead.", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v12, -1, -1);
      MEMORY[0x23B822DA8](v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(int *)(*(_QWORD *)(v0 + 64) + 24);
  v5 = type metadata accessor for SimilarityClient();
  v7 = specialized RequestsManager.convertToFloats(_:embeddingDimension:)(v3, *(unsigned int *)(v2 + *(int *)(v5 + 20) + v4 + 8), v6);
  *(_QWORD *)(v0 + 96) = v7;
  if (v1)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 72), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = v7;
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v10;
    *v10 = v0;
    v10[1] = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
    return RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)(v9, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
}

{
  uint64_t v0;

  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 72), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 120));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 72), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[2];

  v1 = *(_QWORD *)(v0 + 48);
  v2 = objc_msgSend(*(id *)v1, sel_useCase);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v6;
    *v6 = v0;
    v6[1] = RequestsManager.encryptBatch(batchOfElements:shardIndices:context:);
    return RequestsManager.loadContext(requestContext:)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 48));
  }
  else
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v13[0] = v12;
      *(_DWORD *)v11 = 136315394;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x8000000237D63290, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v5, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v9, v10, "%s should not be called for differentially private use case '%{public}s'. Call 'encryptDifferentiallyPrivateFakes' instead.", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v12, -1, -1);
      MEMORY[0x23B822DA8](v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
  RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v5, v4, v3, v2);
  if (v1)
  {
    v7 = *(_QWORD *)(v0 + 88);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 64), &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AspireApiPECConfig(v7, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 64), &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, type metadata accessor for AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
    v8 = Message.serializedData(partial:)();
    v9 = *(_QWORD *)(v0 + 88);
    v11 = v8;
    v13 = v12;
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 80), type metadata accessor for AspireApiRequest);
    outlined destroy of AspireApiPECConfig(v9, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
  }
}

uint64_t RequestsManager.encryptBatch(batchOfElements:shardIndices:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 112) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    *(_QWORD *)(v6 + 120) = a2;
    *(_QWORD *)(v6 + 128) = a1;
  }
  return swift_task_switch();
}

uint64_t RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  type metadata accessor for FakeQueriesList();
  v5[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v5[17] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v5[18] = swift_task_alloc();
  v5[19] = type metadata accessor for AspireApiKeyStatus(0);
  v5[20] = swift_task_alloc();
  v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v5[21] = v7;
  v5[22] = *(_QWORD *)(v7 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = type metadata accessor for RequestsManager.PECContext();
  v8 = swift_task_alloc();
  v5[25] = v8;
  v9 = (_QWORD *)swift_task_alloc();
  v5[26] = v9;
  *v9 = v5;
  v9[1] = RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:);
  return RequestsManager.loadContext(requestContext:)(v8, a5);
}

uint64_t RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x2_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = objc_msgSend(*(id *)v1, sel_useCase);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_QWORD *)&v57[0] = swift_slowAlloc();
      v10 = v3;
      v11 = *(_QWORD *)&v57[0];
      *(_DWORD *)v9 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v5, (uint64_t *)v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v7, v8, "Missing differential privacy parameters for the use case '%{public}s.'", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v11, -1, -1);
      MEMORY[0x23B822DA8](v9, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v23 = *(_QWORD *)(v0 + 200);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
LABEL_17:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig(v23, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    goto LABEL_18;
  }
  v12 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v13 + 40);
  v15 = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v13 + 8);
  *(_OWORD *)(v0 + 32) = v15;
  *(_QWORD *)(v0 + 48) = v14;
  v16 = *(_QWORD *)(v12 + 16);
  if (v16 != 1)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for framework != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v27 = 134349056;
      *(_QWORD *)(v0 + 64) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237BC8000, v25, v26, "encryptDifferentiallyPrivateFakes requires batchOfElements.count == 1,\nfound '%{public}ld.'\nIn the future, we may support a batch of > 1 embedding vector.", v27, 0xCu);
      MEMORY[0x23B822DA8](v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    v23 = *(_QWORD *)(v0 + 200);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    goto LABEL_17;
  }
  v17 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 200);
  v19 = *(int *)(*(_QWORD *)(v0 + 192) + 24);
  v20 = v18 + *(int *)(type metadata accessor for SimilarityClient() + 20) + v19;
  v22 = specialized RequestsManager.convertToFloats(_:embeddingDimension:)(v12, *(unsigned int *)(v20 + 8), v21);
  if (v17)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 200), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    swift_bridgeObjectRelease();
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v55 = v3;
  v56 = v22;
  v29 = objc_msgSend(*(id *)(v0 + 112), sel_serializedKeyStatus);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  v58 = 0;
  memset(v57, 0, sizeof(v57));
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
  Message.init(serializedData:extensions:partial:options:)();
  v30 = *(_QWORD *)(v0 + 168);
  v31 = *(_QWORD *)(v0 + 176);
  v32 = *(_QWORD *)(v0 + 136);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 160) + *(int *)(*(_QWORD *)(v0 + 152) + 24), v32, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30);
  v34 = *(_QWORD *)(v0 + 184);
  if (v33 == 1)
  {
    v35 = *(_QWORD *)(v0 + 168);
    v36 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)v34 = MEMORY[0x24BEE4AF8];
    *(_BYTE *)(v34 + 8) = 0;
    UnknownStorage.init()();
    v37 = v34 + *(int *)(v35 + 28);
    v38 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of SecretKey(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184), type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  v39 = *(_QWORD *)(v0 + 128);
  v40 = *(_QWORD *)(v0 + 104);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 160), type metadata accessor for AspireApiKeyStatus);
  swift_bridgeObjectRetain();
  FakeQueriesList.init(dpParameters:shardCount:useCase:)(v0 + 16, v40, v55, v5, v39);
  FakeQueriesList.returnFakeQueries()();
  v42 = v41;
  v43 = *(_QWORD *)(v0 + 200);
  v44 = *(_QWORD *)(v0 + 184);
  v45 = *(_QWORD *)(v0 + 96);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 128), (uint64_t (*)(_QWORD))type metadata accessor for FakeQueriesList);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 72) = v42;
  v46 = *(_QWORD *)(v42 + 16) + 1;
  v47.i32[0] = 0;
  v48 = specialized Array.init(repeating:count:)(*(unsigned int *)(v20 + 8), v47);
  v49 = specialized RandomNumberGenerator.next<A>(upperBound:)(v46);
  v50 = (_QWORD *)swift_task_alloc();
  v50[2] = v49;
  v50[3] = v43;
  v50[4] = v56;
  v50[5] = v45;
  v50[6] = v44;
  v50[7] = v48;
  v50[8] = v0 + 72;
  v51 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10Foundation4DataVsAE_pTg5(partial apply for closure #1 in RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:), (uint64_t)v50, 0, v46);
  v52 = *(_QWORD *)(v0 + 200);
  v53 = *(_QWORD *)(v0 + 184);
  v54 = v51;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AspireApiPECConfig(v53, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AspireApiPECConfig(v52, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v54);
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.decryptBatch(batchOfSimilarityScores:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v3[2] = a1;
  v3[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v3[4] = swift_task_alloc();
  type metadata accessor for AspireApiPECResponse(0);
  v3[5] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v3[6] = swift_task_alloc();
  v3[7] = type metadata accessor for AspireApiResponse(0);
  v3[8] = swift_task_alloc();
  v3[9] = type metadata accessor for RequestsManager.PECContext();
  v5 = swift_task_alloc();
  v3[10] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v3[11] = v6;
  *v6 = v3;
  v6[1] = RequestsManager.decryptBatch(batchOfSimilarityScores:context:);
  return RequestsManager.loadContext(requestContext:)(v5, a3);
}

uint64_t RequestsManager.decryptBatch(batchOfSimilarityScores:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 96);
  outlined copy of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
  Message.init(serializedData:extensions:partial:options:)();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 80);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v0 + 32);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 64), v3, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v4 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
  v6 = *(_QWORD *)(v0 + 32);
  if (v5 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 32), &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_9:
    v12 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 64);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireApiResponse);
    v2 = v12;
LABEL_10:
    outlined destroy of AspireApiPECConfig(v2, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig(v6, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_9;
  }
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(uint64_t **)(v0 + 40);
  outlined init with take of SecretKey(v6, (uint64_t)v9, type metadata accessor for AspireApiPECResponse);
  v10 = SimilarityClient.decryptSimilarityScores(_:)(v9);
  outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireApiPECResponse);
  outlined destroy of AspireApiPECConfig(v8, type metadata accessor for AspireApiResponse);
  outlined destroy of AspireApiPECConfig(v7, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[7] = swift_task_alloc();
  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>)
                 - 8);
  v3[8] = v5;
  v3[9] = *(_QWORD *)(v5 + 64);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  v3[12] = v6;
  v3[13] = *(_QWORD *)(v6 - 8);
  v3[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v3[15] = swift_task_alloc();
  v7 = *(_QWORD *)(type metadata accessor for AspireApiRequest(0) - 8);
  v3[16] = v7;
  v3[17] = *(_QWORD *)(v7 + 64);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v8 = type metadata accessor for RequestsManager.PECContext();
  v3[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[21] = v9;
  v3[22] = *(_QWORD *)(v9 + 64);
  v3[23] = swift_task_alloc();
  v10 = swift_task_alloc();
  v3[24] = v10;
  v11 = (_QWORD *)swift_task_alloc();
  v3[25] = v11;
  *v11 = v3;
  v11[1] = RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:);
  return RequestsManager.loadContext(requestContext:)(v10, a3);
}

uint64_t RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  id *v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t type;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55[2];

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(int *)(*(_QWORD *)(v0 + 160) + 24);
  v5 = type metadata accessor for SimilarityClient();
  v7 = specialized RequestsManager.convertToFloats(_:embeddingDimension:)(v1, *(unsigned int *)(v3 + *(int *)(v5 + 20) + v4 + 8), v6);
  if (v2)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 192), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v7;
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 40);
    v12 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
    RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v8, v11, v10, v9);
    v14 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 96);
    v16 = *(_QWORD *)(v0 + 104);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    swift_bridgeObjectRelease();
    UUID.init()();
    v17 = UUID.uuidString.getter();
    v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    if (one-time initialization token for framework != -1)
      swift_once();
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 48);
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.framework);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v21, v20, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
    swift_bridgeObjectRetain_n();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.default.getter();
    v25 = os_log_type_enabled(v23, v24);
    v26 = *(id **)(v0 + 88);
    v53 = v17;
    v54 = v19;
    if (v25)
    {
      v27 = swift_slowAlloc();
      v52 = swift_slowAlloc();
      v55[0] = v52;
      *(_DWORD *)v27 = 136446466;
      type = v24;
      v28 = v19;
      v29 = objc_msgSend(*v26, sel_useCase);
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
      *(_WORD *)(v27 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v28, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v23, type, "Async response is requested for '%{public}s', uuid: %{public}s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v52, -1, -1);
      MEMORY[0x23B822DA8](v27, -1, -1);
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
      swift_bridgeObjectRelease_n();
    }

    v33 = *(_QWORD *)(v0 + 184);
    v34 = *(_QWORD *)(v0 + 192);
    v35 = *(_QWORD *)(v0 + 168);
    v36 = *(_QWORD *)(v0 + 144);
    v37 = *(_QWORD *)(v0 + 152);
    v48 = *(_QWORD *)(v0 + 176);
    v49 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 80);
    v39 = *(_QWORD *)(v0 + 64);
    v47 = *(_QWORD *)(v0 + 128);
    v40 = *(_QWORD *)(v0 + 48);
    v41 = *(_QWORD *)(v0 + 56);
    v50 = v37;
    v42 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
    outlined init with copy of SecretKey(v34, v33, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    outlined init with copy of SecretKey(v37, v36, type metadata accessor for AspireApiRequest);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, v38, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
    v43 = (*(unsigned __int8 *)(v35 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    v44 = (v48 + *(unsigned __int8 *)(v47 + 80) + v43) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    v45 = (v49 + *(unsigned __int8 *)(v39 + 80) + v44) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    v46 = (_QWORD *)swift_allocObject();
    v46[2] = 0;
    v46[3] = 0;
    v46[4] = v53;
    v46[5] = v54;
    outlined init with take of SecretKey(v33, (uint64_t)v46 + v43, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    outlined init with take of SecretKey(v36, (uint64_t)v46 + v44, type metadata accessor for AspireApiRequest);
    outlined init with take of RequestContext<StaticPIRParameters>(v38, (uint64_t)v46 + v45, &demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v41, (uint64_t)&async function pointer to partial apply for closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:), (uint64_t)v46);
    swift_release();
    outlined destroy of AspireApiPECConfig(v50, type metadata accessor for AspireApiRequest);
    outlined destroy of AspireApiPECConfig(v34, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v53, v54);
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.PECContext.useCase.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestsManager.PECContext.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RequestsManager.PECContext();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
}

uint64_t RequestsManager.PECContext.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RequestsManager.PECContext();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))type metadata accessor for SimilarityClient);
}

uint64_t RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v50 = a2;
  v48 = a4;
  v49 = a3;
  v6 = type metadata accessor for RequestsManager.PECContext();
  MEMORY[0x24BDAC7A8](v6);
  v52 = (uint64_t *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for AspireApiEvaluationKey(0);
  v44 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v43 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v47 = (uint64_t)&v43 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v46 = (uint64_t)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AspireApiPECRequest(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(int *)(v6 + 24);
  v53 = v4;
  v22 = v4 + v21;
  v23 = *(unsigned int *)(v22 + *(int *)(type metadata accessor for SimilarityClient() + 20) + 8);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = v24;
  if ((_DWORD)v23)
    v25 = v24 % v23;
  if (v25)
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.framework);
    v27 = v52;
    outlined init with copy of SecretKey(v53, (uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    swift_bridgeObjectRetain();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc();
      v53 = swift_slowAlloc();
      v54 = v24;
      v55 = v53;
      *(_DWORD *)v30 = 134349570;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2050;
      v54 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 22) = 2082;
      v31 = *v27;
      v32 = v27[1];
      swift_bridgeObjectRetain();
      v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AspireApiPECConfig((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
      _os_log_impl(&dword_237BC8000, v28, v29, "Invalid PEC elements.count '%{public}ld' for embedding dimension '%{public}ld', useCase '%{public}s'.", (uint8_t *)v30, 0x20u);
      v33 = v53;
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v33, -1, -1);
      MEMORY[0x23B822DA8](v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of AspireApiPECConfig((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PECContext);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    v34 = v51;
    result = SimilarityClient.encryptValues(_:shardIndices:)(a1, v50, (uint64_t)v20);
    if (!v34)
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v49, (uint64_t)v14, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      }
      else
      {
        v36 = (uint64_t)v14;
        v37 = v46;
        outlined init with take of SecretKey(v36, v46, type metadata accessor for AspireHeEvaluationKeyConfig);
        v38 = v47;
        generateEvaluationKey(secretKey:config:)(v22, v37, v47);
        v39 = v43;
        outlined init with copy of SecretKey(v38, v43, type metadata accessor for AspireApiEvaluationKey);
        v40 = (uint64_t)&v20[*(int *)(v18 + 36)];
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
        outlined init with take of SecretKey(v39, v40, type metadata accessor for AspireApiEvaluationKey);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v40, 0, 1, v45);
        outlined destroy of AspireApiPECConfig(v38, type metadata accessor for AspireApiEvaluationKey);
        outlined destroy of AspireApiPECConfig(v37, type metadata accessor for AspireHeEvaluationKeyConfig);
      }
      v41 = type metadata accessor for AspireApiRequest(0);
      MEMORY[0x24BDAC7A8](v41);
      *(&v43 - 2) = v53;
      *(&v43 - 1) = (uint64_t)v20;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, v42, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
      static Message.with(_:)();
      return outlined destroy of AspireApiPECConfig((uint64_t)v20, type metadata accessor for AspireApiPECRequest);
    }
  }
  return result;
}

uint64_t closure #1 in RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  v5 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v6;
  a1[1] = v5;
  v7 = (uint64_t)a1 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  outlined init with copy of SecretKey(a3, v7, type metadata accessor for AspireApiPECRequest);
  v8 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
}

uint64_t RequestsManager.PECContext.requestData(request:networkManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v3[5] = swift_task_alloc();
  type metadata accessor for AspireApiPECResponse(0);
  v3[6] = swift_task_alloc();
  type metadata accessor for AspireApiResponses(0);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.PECContext.requestData(request:networkManager:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[3];
  v2 = v0[4];
  v3 = v0[2];
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiRequest>);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AspireApiRequest(0) - 8) + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject();
  v0[8] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_237D540E0;
  outlined init with copy of SecretKey(v3, v8 + v7, type metadata accessor for AspireApiRequest);
  v9 = type metadata accessor for RequestsManager.PECContext();
  v0[9] = v9;
  v10 = v2 + *(int *)(v9 + 20);
  v11 = v10 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  v14 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 32) + *(_QWORD *)(v5 + 32));
  v12 = (_QWORD *)swift_task_alloc();
  v0[10] = v12;
  *v12 = v0;
  v12[1] = RequestsManager.PECContext.requestData(request:networkManager:);
  return v14(v0[7], v8, v11, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = **(_QWORD **)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  if (!*(_QWORD *)(v1 + 16))
  {
    v11 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v2, 1, 1, v11);
    goto LABEL_7;
  }
  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AspireApiResponse(0) - 8) + 80);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + ((v3 + 32) & ~v3), v2, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v4 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 40), &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_8:
    v12 = *(_QWORD *)(v0 + 56);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig(v12, type metadata accessor for AspireApiResponses);
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(v0 + 40);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig(v5, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(v0 + 88);
  v8 = *(uint64_t **)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  outlined init with take of SecretKey(v5, (uint64_t)v8, type metadata accessor for AspireApiPECResponse);
  v9 = SimilarityClient.decryptSimilarityScores(_:)(v8);
  outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AspireApiPECResponse);
  outlined destroy of AspireApiPECConfig(v7, type metadata accessor for AspireApiResponses);
  if (!v6)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
  }
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.PECContext.init(useCase:userId:client:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;

  *a5 = a1;
  a5[1] = a2;
  v8 = type metadata accessor for RequestsManager.PECContext();
  outlined init with take of SecretKey(a3, (uint64_t)a5 + *(int *)(v8 + 20), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  return outlined init with take of SecretKey(a4, (uint64_t)a5 + *(int *)(v8 + 24), (uint64_t (*)(_QWORD))type metadata accessor for SimilarityClient);
}

uint64_t RequestsManager.convertToFloats(_:embeddingDimension:)(uint64_t a1, uint64_t a2, int32x2_t a3)
{
  return specialized RequestsManager.convertToFloats(_:embeddingDimension:)(a1, a2, a3);
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

void closure #1 in RequestsManager.convertToFloats(_:embeddingDimension:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)(a3 + 16))
  {
    if ((unint64_t)(a4 - 0x2000000000000000) >> 62 == 3)
    {
      swift_bridgeObjectRetain();
      __asm { BR              X9 }
    }
    __break(1u);
  }
}

uint64_t RequestsManager.loadContext(requestContext:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v4 = type metadata accessor for HE.SerializedSecretKey();
  v3[24] = v4;
  v3[25] = *(_QWORD *)(v4 - 8);
  v3[26] = swift_task_alloc();
  v5 = type metadata accessor for PEC.SimilarityClient();
  v3[27] = v5;
  v3[28] = *(_QWORD *)(v5 - 8);
  v3[29] = swift_task_alloc();
  v6 = type metadata accessor for PEC.SimilarityClientConfig();
  v3[30] = v6;
  v3[31] = *(_QWORD *)(v6 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = type metadata accessor for SimilarityClient();
  v3[35] = swift_task_alloc();
  v7 = type metadata accessor for SecretKey();
  v3[36] = v7;
  v3[37] = *(_QWORD *)(v7 - 8);
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v8 = type metadata accessor for UserIdentifier();
  v3[40] = v8;
  v3[41] = *(_QWORD *)(v8 - 8);
  v3[42] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v3[51] = swift_task_alloc();
  type metadata accessor for AspireApiPECConfig(0);
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  v9 = type metadata accessor for AspireApiConfig(0);
  v3[54] = v9;
  v3[55] = *(_QWORD *)(v9 - 8);
  v3[56] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v3[57] = swift_task_alloc();
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.loadContext(requestContext:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = objc_msgSend(**(id **)(v0 + 176), sel_useCase);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  *(_QWORD *)(v0 + 488) = v3;
  *(_QWORD *)(v0 + 496) = v5;
  *(_QWORD *)(v0 + 504) = *(_QWORD *)(v1 + 40);
  return swift_task_switch();
}

{
  uint64_t v0;

  ActiveUseCaseTracker.markActive(useCase:active:)(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), 1);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t inited;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  unint64_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t ObjectType;
  int *v89;
  _QWORD *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  unint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  _BOOL4 v100;
  unint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  uint64_t v113[2];

  v2 = *(_QWORD *)(v0 + 488);
  v1 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 184) + 16);
  *(_QWORD *)(v0 + 512) = v4;
  v5 = OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock;
  *(_QWORD *)(v0 + 520) = OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock;
  v6 = *(_QWORD *)(v4 + v5);
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v2;
  *(_QWORD *)(v7 + 24) = v1;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  closure #1 in ConfigCache.subscript.getter((uint64_t *)(v6 + 16), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  v9 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 480);
  v10 = *(_QWORD *)(v0 + 432);
  v11 = *(_QWORD *)(v0 + 440);
  swift_task_dealloc();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v8, v9, &demangling cache variable for type metadata for AspireApiConfig?);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  *(_QWORD *)(v0 + 528) = v12;
  LODWORD(v8) = v12(v9, 1, v10);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v9, &demangling cache variable for type metadata for AspireApiConfig?);
  if ((_DWORD)v8 != 1)
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
    v21 = *(_QWORD *)(v0 + 456);
    v22 = *(_QWORD *)(v0 + 432);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 480), v21, &demangling cache variable for type metadata for AspireApiConfig?);
    v23 = v20(v21, 1, v22);
    v24 = *(_QWORD *)(v0 + 456);
    if (v23 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v24, &demangling cache variable for type metadata for AspireApiConfig?);
      if (one-time initialization token for framework != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.framework);
      swift_bridgeObjectRetain();
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.error.getter();
      v28 = os_log_type_enabled(v26, v27);
      v29 = *(_QWORD *)(v0 + 496);
      if (v28)
      {
        v30 = *(_QWORD *)(v0 + 488);
        v31 = (uint8_t *)swift_slowAlloc();
        v32 = swift_slowAlloc();
        v113[0] = v32;
        *(_DWORD *)v31 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_237BC8000, v26, v27, "No dynamic configuration for use-case '%{public}s'", v31, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B822DA8](v32, -1, -1);
        MEMORY[0x23B822DA8](v31, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      v53 = *(_QWORD *)(v0 + 480);
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_30;
    }
    v44 = *(_QWORD *)(v0 + 448);
    v45 = *(_QWORD *)(v0 + 432);
    v46 = *(_QWORD *)(v0 + 408);
    outlined init with take of SecretKey(v24, v44, type metadata accessor for AspireApiConfig);
    v47 = (uint64_t *)(v44 + *(int *)(v45 + 20));
    v48 = *v47;
    *(_QWORD *)(v0 + 568) = *v47;
    v49 = v47[1];
    *(_QWORD *)(v0 + 576) = v49;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, v46, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    v50 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v46, 1, v50);
    v52 = *(_QWORD *)(v0 + 408);
    if (v51 == 1)
    {
      outlined copy of Data._Representation(v48, v49);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v52, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_23:
      if (one-time initialization token for framework != -1)
        swift_once();
      v66 = type metadata accessor for Logger();
      __swift_project_value_buffer(v66, (uint64_t)static Logger.framework);
      swift_bridgeObjectRetain();
      v67 = Logger.logObject.getter();
      v68 = static os_log_type_t.error.getter();
      v69 = os_log_type_enabled(v67, v68);
      v70 = *(_QWORD *)(v0 + 496);
      if (v69)
      {
        v71 = *(_QWORD *)(v0 + 488);
        v72 = (uint8_t *)swift_slowAlloc();
        v110 = v48;
        v73 = swift_slowAlloc();
        v113[0] = v73;
        *(_DWORD *)v72 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v70, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_237BC8000, v67, v68, "Did not find PEC config for PEC use-case '%{public}s.'", v72, 0xCu);
        swift_arrayDestroy();
        v74 = v73;
        v48 = v110;
        MEMORY[0x23B822DA8](v74, -1, -1);
        MEMORY[0x23B822DA8](v72, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      v53 = *(_QWORD *)(v0 + 480);
      v75 = *(_QWORD *)(v0 + 448);
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      outlined consume of Data._Representation(v48, v49);
      v76 = v75;
      goto LABEL_29;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined copy of Data._Representation(v48, v49);
      outlined destroy of AspireApiPECConfig(v52, type metadata accessor for AspireApiConfig.OneOf_Config);
      goto LABEL_23;
    }
    v54 = *(_QWORD *)(v0 + 184);
    outlined init with take of SecretKey(v52, *(_QWORD *)(v0 + 424), type metadata accessor for AspireApiPECConfig);
    v55 = *(_QWORD *)(v54 + 48);
    v56 = (_QWORD *)(v55 + 16);
    v57 = (os_unfair_lock_s *)(v55 + 24);
    outlined copy of Data._Representation(v48, v49);
    os_unfair_lock_lock(v57);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v56, v113);
    os_unfair_lock_unlock(v57);
    v77 = specialized AspireApiPECConfig.validate(static:useCase:allowList:)(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496));
    swift_release();
    if ((v77 & 1) != 0)
    {
      os_unfair_lock_lock(v57);
      closure #1 in OSAllocatedUnfairLock<A>.current.getter(v56, v113);
      os_unfair_lock_unlock(v57);
      v111 = v48;
      v78 = *(_QWORD *)(v113[0] + 48);
      swift_bridgeObjectRetain();
      swift_release();
      if (*(_QWORD *)(v78 + 16))
      {
        v80 = *(_QWORD *)(v0 + 488);
        v79 = *(_QWORD *)(v0 + 496);
        swift_bridgeObjectRetain();
        v81 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v79);
        if ((v82 & 1) != 0)
        {
          v83 = *(_QWORD *)(v0 + 184);
          v84 = (uint64_t *)(*(_QWORD *)(v78 + 56) + 16 * v81);
          v85 = *v84;
          *(_QWORD *)(v0 + 584) = *v84;
          v86 = v84[1];
          *(_QWORD *)(v0 + 592) = v86;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v0 + 600) = *(_QWORD *)(v83 + 24);
          v87 = *(_QWORD *)(v83 + 32);
          *(_QWORD *)(v0 + 608) = v87;
          ObjectType = swift_getObjectType();
          *(_QWORD *)(v0 + 616) = ObjectType;
          v89 = *(int **)(v87 + 8);
          *(_QWORD *)(v0 + 624) = v89;
          v112 = (int *)((char *)v89 + *v89);
          v90 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 632) = v90;
          *v90 = v0;
          v90[1] = RequestsManager.loadContext(requestContext:);
          return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v112)(*(_QWORD *)(v0 + 400), v85, v86, ObjectType, v87);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (one-time initialization token for framework != -1)
        swift_once();
      v98 = type metadata accessor for Logger();
      __swift_project_value_buffer(v98, (uint64_t)static Logger.framework);
      swift_bridgeObjectRetain();
      v92 = Logger.logObject.getter();
      v99 = static os_log_type_t.error.getter();
      v100 = os_log_type_enabled(v92, v99);
      v101 = *(_QWORD *)(v0 + 496);
      if (v100)
      {
        v108 = *(_QWORD *)(v0 + 488);
        v102 = (uint8_t *)swift_slowAlloc();
        v103 = swift_slowAlloc();
        v113[0] = v103;
        *(_DWORD *)v102 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v101, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_237BC8000, v92, v99, "No group associated with use-case '%{public}s'", v102, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B822DA8](v103, -1, -1);
        MEMORY[0x23B822DA8](v102, -1, -1);
        goto LABEL_46;
      }
    }
    else
    {
      if (one-time initialization token for framework != -1)
        swift_once();
      v91 = type metadata accessor for Logger();
      __swift_project_value_buffer(v91, (uint64_t)static Logger.framework);
      swift_bridgeObjectRetain();
      v92 = Logger.logObject.getter();
      v93 = static os_log_type_t.error.getter();
      v94 = os_log_type_enabled(v92, v93);
      v95 = *(_QWORD *)(v0 + 496);
      v111 = v48;
      if (v94)
      {
        v106 = *(_QWORD *)(v0 + 488);
        v96 = (uint8_t *)swift_slowAlloc();
        v97 = swift_slowAlloc();
        v113[0] = v97;
        *(_DWORD *)v96 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v95, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_237BC8000, v92, v93, "Dynamic configuration is invalid for use-case '%{public}s'", v96, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B822DA8](v97, -1, -1);
        MEMORY[0x23B822DA8](v96, -1, -1);
LABEL_46:

        v53 = *(_QWORD *)(v0 + 480);
        v104 = *(_QWORD *)(v0 + 448);
        v105 = *(_QWORD *)(v0 + 424);
        type metadata accessor for CipherMLError();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        outlined consume of Data._Representation(v111, v49);
        outlined destroy of AspireApiPECConfig(v105, type metadata accessor for AspireApiPECConfig);
        v76 = v104;
LABEL_29:
        outlined destroy of AspireApiPECConfig(v76, type metadata accessor for AspireApiConfig);
LABEL_30:
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v53, &demangling cache variable for type metadata for AspireApiConfig?);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_46;
  }
  if (one-time initialization token for framework != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 496);
  if (v16)
  {
    v107 = *(_QWORD *)(v0 + 488);
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v113[0] = v19;
    *(_DWORD *)v18 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v17, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v14, v15, "No dynamic configuration for use-case '%{public}s'. Running rotation task", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v19, -1, -1);
    MEMORY[0x23B822DA8](v18, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v33 = *(_QWORD *)(v0 + 184);
  v109 = *(_OWORD *)(v33 + 24);
  v34 = *(_QWORD *)(v33 + 48);
  v35 = (_QWORD *)(v34 + 16);
  v36 = (os_unfair_lock_s *)(v34 + 24);
  swift_retain();
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v36);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v35, v113);
  os_unfair_lock_unlock(v36);
  v37 = v113[0];
  v38 = **(void ***)(v0 + 176);
  swift_retain();
  v39 = objc_msgSend(v38, sel_sourceApplicationBundleIdentifier);
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0;
  }
  v58 = *(_QWORD *)(v0 + 496);
  v59 = *(_QWORD *)(v0 + 504);
  v60 = *(_QWORD *)(v0 + 488);
  type metadata accessor for KeyRotation();
  v61 = swift_allocObject();
  *(_QWORD *)(v0 + 536) = v61;
  swift_defaultActor_initialize();
  *(_QWORD *)(v61 + 216) = 0;
  *(_OWORD *)(v61 + 200) = 0u;
  *(_OWORD *)(v61 + 184) = 0u;
  *(_QWORD *)(v61 + 112) = v4;
  *(_OWORD *)(v61 + 120) = v109;
  *(_QWORD *)(v61 + 136) = v37;
  *(_QWORD *)(v61 + 144) = v59;
  *(_QWORD *)(v61 + 168) = v41;
  *(_QWORD *)(v61 + 176) = v43;
  *(_QWORD *)(v61 + 152) = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
  *(_QWORD *)(v61 + 160) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540E0;
  *(_QWORD *)(inited + 32) = v60;
  *(_QWORD *)(inited + 40) = v58;
  swift_bridgeObjectRetain();
  v63 = specialized Set.init<A>(_:)(inited);
  *(_QWORD *)(v0 + 544) = v63;
  swift_setDeallocating();
  swift_arrayDestroy();
  v64 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 552) = v64;
  *v64 = v0;
  v64[1] = RequestsManager.loadContext(requestContext:);
  return KeyRotation.run(activeUseCases:)(v63);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 560) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v1 = v0[50];
  v2 = v0[40];
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[41] + 48);
  v0[80] = v3;
  if (v3(v1, 1, v2) || (v5 = *(_QWORD *)(v1 + *(int *)(v2 + 24)), !*(_QWORD *)(v5 + 16)))
  {
    v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[37] + 56);
    v4(v0[46], 1, 1, v0[36]);
  }
  else
  {
    v6 = v0[53];
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 40);
    outlined copy of Data._Representation(v7, v8);
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    v10 = v0[46];
    v11 = v0[36];
    v12 = v0[37];
    if ((v13 & 1) != 0)
    {
      outlined init with copy of SecretKey(*(_QWORD *)(v5 + 56) + *(_QWORD *)(v12 + 72) * v9, v0[46], (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      v4(v10, 0, 1, v11);
    }
    else
    {
      v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      v4(v0[46], 1, 1, v11);
    }
    outlined consume of Data._Representation(v7, v8);
  }
  v0[81] = v4;
  v14 = *(_QWORD *)(v0[23] + 56);
  v0[82] = v14;
  v0[83] = *(_QWORD *)(v14 + 16);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  v0[84] = RotationTask.keyRotation.getter();
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v0[85] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = RequestsManager.loadContext(requestContext:);
  return KeyRotation.areKeysExpired(groupName:)(v0[73], v0[74]);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 640);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 320);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 400), v2, &demangling cache variable for type metadata for UserIdentifier?);
  LODWORD(v3) = v1(v2, 1, v3);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for UserIdentifier?);
  if ((_DWORD)v3 == 1)
    goto LABEL_6;
  v4 = *(unsigned __int8 *)(v0 + 776);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 296);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 368), v5, &demangling cache variable for type metadata for SecretKey?);
  LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for SecretKey?);
  if ((_DWORD)v6 != 1 && v4 == 0)
  {
    *(_QWORD *)(v0 + 744) = *(_QWORD *)(*(_QWORD *)(v0 + 656) + 16);
    swift_retain();
  }
  else
  {
LABEL_6:
    *(_QWORD *)(v0 + 696) = *(_QWORD *)(*(_QWORD *)(v0 + 656) + 16);
    swift_retain();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 704) = RotationTask.keyRotation.getter();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[61];
  v1 = v0[62];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540E0;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  swift_bridgeObjectRetain();
  v4 = specialized Set.init<A>(_:)(inited);
  v0[89] = v4;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = (_QWORD *)swift_task_alloc();
  v0[90] = v5;
  *v5 = v0;
  v5[1] = RequestsManager.loadContext(requestContext:);
  return KeyRotation.run(activeUseCases:)(v4);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  int *v4;
  _QWORD *v5;
  int *v6;

  v2 = (_QWORD *)*v1;
  v2[91] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  else
  {
    v4 = (int *)v2[78];
    swift_bridgeObjectRelease();
    swift_release();
    v6 = (int *)((char *)v4 + *v4);
    v5 = (_QWORD *)swift_task_alloc();
    v2[92] = v5;
    *v5 = v2;
    v5[1] = RequestsManager.loadContext(requestContext:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v6)(v2[48], v2[73], v2[74], v2[77], v2[76]);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[80];
  v2 = v0[50];
  v3 = v0[40];
  outlined assign with take of UserIdentifier?(v0[48], v2);
  if (v1(v2, 1, v3))
  {
    v4 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[81];
    v5 = v0[44];
    v6 = v0[36];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[46], &demangling cache variable for type metadata for SecretKey?);
    v4(v5, 1, 1, v6);
  }
  else
  {
    v7 = *(_QWORD *)(v0[50] + *(int *)(v0[40] + 24));
    if (*(_QWORD *)(v7 + 16))
    {
      v8 = v0[53];
      v9 = *(_QWORD *)(v8 + 32);
      v10 = *(_QWORD *)(v8 + 40);
      outlined copy of Data._Representation(v9, v10);
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
      v12 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[81];
      v13 = v0[44];
      if ((v14 & 1) != 0)
      {
        v15 = v0[36];
        outlined init with copy of SecretKey(*(_QWORD *)(v7 + 56) + *(_QWORD *)(v0[37] + 72) * v11, v0[44], (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
        v16 = v13;
        v17 = 0;
        v18 = v15;
      }
      else
      {
        v18 = v0[36];
        v16 = v0[44];
        v17 = 1;
      }
      v12(v16, v17, 1, v18);
      outlined consume of Data._Representation(v9, v10);
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v0[81])(v0[44], 1, 1, v0[36]);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[46], &demangling cache variable for type metadata for SecretKey?);
  }
  outlined init with take of RequestContext<StaticPIRParameters>(v0[44], v0[46], &demangling cache variable for type metadata for SecretKey?);
  v0[93] = *(_QWORD *)(v0[82] + 16);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  v0[94] = RotationTask.keyRotation.getter();
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v0[95] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = RequestsManager.loadContext(requestContext:);
  return KeyRotation.areKeysExpired(groupName:)(v0[73], v0[74]);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[3];

  if ((*(_BYTE *)(v0 + 777) & 1) != 0)
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.error.getter();
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(_QWORD *)(v0 + 496);
    if (v4)
    {
      v6 = *(_QWORD *)(v0 + 488);
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v72[0] = v8;
      *(_DWORD *)v7 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v2, v3, "Key expired for use-case '%{public}s'", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v8, -1, -1);
      MEMORY[0x23B822DA8](v7, -1, -1);
LABEL_16:

      v27 = *(_QWORD *)(v0 + 576);
      v28 = *(_QWORD *)(v0 + 568);
      v29 = *(_QWORD *)(v0 + 480);
      v30 = *(_QWORD *)(v0 + 448);
      v31 = *(_QWORD *)(v0 + 424);
      v32 = *(_QWORD *)(v0 + 400);
      v33 = *(_QWORD *)(v0 + 368);
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      outlined consume of Data._Representation(v28, v27);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 640);
  v10 = *(_QWORD *)(v0 + 376);
  v11 = *(_QWORD *)(v0 + 320);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 400), v10, &demangling cache variable for type metadata for UserIdentifier?);
  v12 = v9(v10, 1, v11);
  v13 = *(_QWORD *)(v0 + 376);
  if (v12 == 1)
  {
    v14 = &demangling cache variable for type metadata for UserIdentifier?;
    goto LABEL_11;
  }
  v15 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 296);
  outlined init with take of SecretKey(v13, *(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v15, v16, &demangling cache variable for type metadata for SecretKey?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v16, 1, v18) == 1)
  {
    v19 = *(_QWORD *)(v0 + 344);
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    v14 = &demangling cache variable for type metadata for SecretKey?;
    v13 = v19;
LABEL_11:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, v14);
    if (one-time initialization token for framework != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v2 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    v22 = os_log_type_enabled(v2, v21);
    v23 = *(_QWORD *)(v0 + 496);
    if (v22)
    {
      v24 = *(_QWORD *)(v0 + 488);
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v72[0] = v26;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v2, v21, "No key for use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v26, -1, -1);
      MEMORY[0x23B822DA8](v25, -1, -1);
      goto LABEL_16;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  v36 = *(_QWORD *)(v0 + 768);
  v37 = *(_QWORD *)(v0 + 416);
  v38 = *(_QWORD *)(v0 + 424);
  v40 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 312);
  v41 = *(_QWORD *)(v0 + 264);
  outlined init with take of SecretKey(*(_QWORD *)(v0 + 344), v39, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  outlined init with copy of SecretKey(v39, v40, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  outlined init with copy of SecretKey(v38, v37, type metadata accessor for AspireApiPECConfig);
  AspireApiPECConfig.cryptokit()(v41);
  if (!v36)
  {
    v44 = *(_QWORD *)(v0 + 304);
    v45 = *(_QWORD *)(v0 + 288);
    v46 = *(_QWORD *)(v0 + 200);
    v47 = *(_QWORD *)(v0 + 208);
    v48 = *(_QWORD *)(v0 + 192);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 16))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v47, v44 + *(int *)(v45 + 20), v48);
    PEC.SimilarityClient.init(config:secretKey:)();
    v49 = *(_QWORD *)(v0 + 576);
    v50 = *(_QWORD *)(v0 + 568);
    v70 = *(_QWORD *)(v0 + 488);
    v71 = *(_QWORD *)(v0 + 496);
    v53 = *(_QWORD *)(v0 + 416);
    v65 = *(_QWORD *)(v0 + 424);
    v66 = *(_QWORD *)(v0 + 448);
    v68 = *(_QWORD *)(v0 + 480);
    v69 = *(_QWORD *)(v0 + 400);
    v64 = *(_QWORD *)(v0 + 368);
    v67 = *(_QWORD *)(v0 + 336);
    v54 = *(_QWORD *)(v0 + 304);
    v63 = *(_QWORD *)(v0 + 312);
    v55 = *(int **)(v0 + 272);
    v56 = *(_QWORD *)(v0 + 280);
    v58 = *(_QWORD *)(v0 + 224);
    v57 = *(_QWORD *)(v0 + 232);
    v62 = *(_QWORD *)(v0 + 216);
    v59 = *(_QWORD **)(v0 + 168);
    (*(void (**)(void))(*(_QWORD *)(v0 + 248) + 8))();
    outlined init with take of SecretKey(v54, v56, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    outlined init with take of SecretKey(v53, v56 + v55[5], type metadata accessor for AspireApiPECConfig);
    v60 = (_QWORD *)(v56 + v55[6]);
    *v60 = v50;
    v60[1] = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v56 + v55[7], v57, v62);
    outlined destroy of AspireApiPECConfig(v63, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v64, &demangling cache variable for type metadata for SecretKey?);
    outlined destroy of AspireApiPECConfig(v65, type metadata accessor for AspireApiPECConfig);
    outlined destroy of AspireApiPECConfig(v66, type metadata accessor for AspireApiConfig);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v68, &demangling cache variable for type metadata for AspireApiConfig?);
    v61 = type metadata accessor for RequestsManager.PECContext();
    outlined init with take of SecretKey(v67, (uint64_t)v59 + *(int *)(v61 + 20), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    outlined init with take of SecretKey(v56, (uint64_t)v59 + *(int *)(v61 + 24), (uint64_t (*)(_QWORD))type metadata accessor for SimilarityClient);
    *v59 = v70;
    v59[1] = v71;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v69, &demangling cache variable for type metadata for UserIdentifier?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
  v42 = *(_QWORD *)(v0 + 416);
  v43 = *(_QWORD *)(v0 + 304);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));
  outlined destroy of AspireApiPECConfig(v42, type metadata accessor for AspireApiPECConfig);
  outlined destroy of AspireApiPECConfig(v43, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  v29 = *(_QWORD *)(v0 + 480);
  v30 = *(_QWORD *)(v0 + 448);
  v31 = *(_QWORD *)(v0 + 424);
  v32 = *(_QWORD *)(v0 + 400);
  v33 = *(_QWORD *)(v0 + 368);
  v51 = *(_QWORD *)(v0 + 336);
  v52 = *(_QWORD *)(v0 + 312);
  swift_bridgeObjectRelease();
  outlined destroy of AspireApiPECConfig(v52, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  outlined destroy of AspireApiPECConfig(v51, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
LABEL_17:
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspireApiPECConfig(v31, type metadata accessor for AspireApiPECConfig);
  outlined destroy of AspireApiPECConfig(v30, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 480);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 368);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPECConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 368);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPECConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 368);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPECConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void RequestsManager.loadContext(requestContext:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  unint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ObjectType;
  int *v60;
  _QWORD *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  unint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  _BOOL4 v71;
  unint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82[2];

  v1 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + 512) + *(_QWORD *)(v0 + 520));
  v6 = swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v2;
  v7 = (os_unfair_lock_s *)(v5 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  closure #1 in ConfigCache.subscript.getter((uint64_t *)(v5 + 16), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v4);
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
    return;
  }
  v8 = *(_QWORD *)(v0 + 480);
  v9 = *(_QWORD *)(v0 + 464);
  os_unfair_lock_unlock(v7);
  swift_release();
  swift_task_dealloc();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined init with take of RequestContext<StaticPIRParameters>(v9, v8, &demangling cache variable for type metadata for AspireApiConfig?);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
  v11 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 432);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 480), v11, &demangling cache variable for type metadata for AspireApiConfig?);
  v13 = v10(v11, 1, v12);
  v14 = *(_QWORD *)(v0 + 456);
  if (v13 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v14, &demangling cache variable for type metadata for AspireApiConfig?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 496);
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 488);
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v82[0] = v22;
      *(_DWORD *)v21 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v16, v17, "No dynamic configuration for use-case '%{public}s'", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v22, -1, -1);
      MEMORY[0x23B822DA8](v21, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v32 = *(_QWORD *)(v0 + 480);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_22;
  }
  v23 = *(_QWORD *)(v0 + 448);
  v24 = *(_QWORD *)(v0 + 432);
  v25 = *(_QWORD *)(v0 + 408);
  outlined init with take of SecretKey(v14, v23, type metadata accessor for AspireApiConfig);
  v26 = (uint64_t *)(v23 + *(int *)(v24 + 20));
  v27 = *v26;
  *(_QWORD *)(v0 + 568) = *v26;
  v28 = v26[1];
  *(_QWORD *)(v0 + 576) = v28;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v23, v25, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v29 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v25, 1, v29);
  v31 = *(_QWORD *)(v0 + 408);
  if (v30 == 1)
  {
    outlined copy of Data._Representation(v27, v28);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_15:
    if (one-time initialization token for framework != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    v40 = os_log_type_enabled(v38, v39);
    v41 = *(_QWORD *)(v0 + 496);
    if (v40)
    {
      v42 = *(_QWORD *)(v0 + 488);
      v43 = (uint8_t *)swift_slowAlloc();
      v79 = v27;
      v82[0] = swift_slowAlloc();
      v44 = v82[0];
      *(_DWORD *)v43 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v41, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v38, v39, "Did not find PEC config for PEC use-case '%{public}s.'", v43, 0xCu);
      swift_arrayDestroy();
      v45 = v44;
      v27 = v79;
      MEMORY[0x23B822DA8](v45, -1, -1);
      MEMORY[0x23B822DA8](v43, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v32 = *(_QWORD *)(v0 + 480);
    v46 = *(_QWORD *)(v0 + 448);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined consume of Data._Representation(v27, v28);
    v47 = v46;
    goto LABEL_21;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined copy of Data._Representation(v27, v28);
    outlined destroy of AspireApiPECConfig(v31, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_15;
  }
  v33 = *(_QWORD *)(v0 + 184);
  outlined init with take of SecretKey(v31, *(_QWORD *)(v0 + 424), type metadata accessor for AspireApiPECConfig);
  v34 = *(_QWORD *)(v33 + 48);
  v35 = (_QWORD *)(v34 + 16);
  v36 = (os_unfair_lock_s *)(v34 + 24);
  outlined copy of Data._Representation(v27, v28);
  os_unfair_lock_lock(v36);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v35, v82);
  os_unfair_lock_unlock(v36);
  v48 = specialized AspireApiPECConfig.validate(static:useCase:allowList:)(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496));
  swift_release();
  if ((v48 & 1) == 0)
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v63 = Logger.logObject.getter();
    v64 = static os_log_type_t.error.getter();
    v65 = os_log_type_enabled(v63, v64);
    v66 = *(_QWORD *)(v0 + 496);
    v80 = v27;
    if (v65)
    {
      v77 = *(_QWORD *)(v0 + 488);
      v67 = (uint8_t *)swift_slowAlloc();
      v68 = swift_slowAlloc();
      v82[0] = v68;
      *(_DWORD *)v67 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v66, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v63, v64, "Dynamic configuration is invalid for use-case '%{public}s'", v67, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v68, -1, -1);
      MEMORY[0x23B822DA8](v67, -1, -1);
LABEL_38:

      v32 = *(_QWORD *)(v0 + 480);
      v75 = *(_QWORD *)(v0 + 448);
      v76 = *(_QWORD *)(v0 + 424);
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      outlined consume of Data._Representation(v80, v28);
      outlined destroy of AspireApiPECConfig(v76, type metadata accessor for AspireApiPECConfig);
      v47 = v75;
LABEL_21:
      outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AspireApiConfig);
LABEL_22:
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for AspireApiConfig?);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      (*(void (**)(void))(v0 + 8))();
      return;
    }
LABEL_37:
    swift_bridgeObjectRelease_n();
    goto LABEL_38;
  }
  os_unfair_lock_lock(v36);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v35, v82);
  os_unfair_lock_unlock(v36);
  v80 = v27;
  v49 = *(_QWORD *)(v82[0] + 48);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(_QWORD *)(v49 + 16))
  {
LABEL_33:
    swift_bridgeObjectRelease();
    if (one-time initialization token for framework != -1)
      swift_once();
    v69 = type metadata accessor for Logger();
    __swift_project_value_buffer(v69, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v63 = Logger.logObject.getter();
    v70 = static os_log_type_t.error.getter();
    v71 = os_log_type_enabled(v63, v70);
    v72 = *(_QWORD *)(v0 + 496);
    if (v71)
    {
      v78 = *(_QWORD *)(v0 + 488);
      v73 = (uint8_t *)swift_slowAlloc();
      v74 = swift_slowAlloc();
      v82[0] = v74;
      *(_DWORD *)v73 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v72, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v63, v70, "No group associated with use-case '%{public}s'", v73, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v74, -1, -1);
      MEMORY[0x23B822DA8](v73, -1, -1);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  v51 = *(_QWORD *)(v0 + 488);
  v50 = *(_QWORD *)(v0 + 496);
  swift_bridgeObjectRetain();
  v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v50);
  if ((v53 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v54 = *(_QWORD *)(v0 + 184);
  v55 = (uint64_t *)(*(_QWORD *)(v49 + 56) + 16 * v52);
  v56 = *v55;
  *(_QWORD *)(v0 + 584) = *v55;
  v57 = v55[1];
  *(_QWORD *)(v0 + 592) = v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 600) = *(_QWORD *)(v54 + 24);
  v58 = *(_QWORD *)(v54 + 32);
  *(_QWORD *)(v0 + 608) = v58;
  ObjectType = swift_getObjectType();
  *(_QWORD *)(v0 + 616) = ObjectType;
  v60 = *(int **)(v58 + 8);
  *(_QWORD *)(v0 + 624) = v60;
  v81 = (int *)((char *)v60 + *v60);
  v61 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 632) = v61;
  *v61 = v0;
  v61[1] = RequestsManager.loadContext(requestContext:);
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v81)(*(_QWORD *)(v0 + 400), v56, v57, ObjectType, v58);
}

uint64_t RequestsManager.loadContext(requestContext:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_BYTE *)(v3 + 776) = a1;
  *(_QWORD *)(v3 + 688) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 768) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    *(_BYTE *)(v4 + 777) = a1 & 1;
  }
  return swift_task_switch();
}

uint64_t closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[21] = a7;
  v8[22] = a8;
  v8[19] = a5;
  v8[20] = a6;
  v8[18] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t)(v0 + 2);
  if (one-time initialization token for framework != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v2, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[19];
  if (v5)
  {
    v7 = v0[18];
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13[0] = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v3, v4, "Async response request '%{public}s' has started", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v9, -1, -1);
    v10 = v8;
    v1 = (uint64_t)(v0 + 2);
    MEMORY[0x23B822DA8](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  specialized RequestContext.networkManager()(v1);
  v11 = (_QWORD *)swift_task_alloc();
  v0[24] = v11;
  *v11 = v0;
  v11[1] = closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:);
  return RequestsManager.PECContext.requestData(request:networkManager:)(v0[21], v1);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Class isa;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  swift_bridgeObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v4 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 152);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v26[0] = v6;
    *(_DWORD *)v5 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v1, v2, "Async response request '%{public}s' has finished", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v6, -1, -1);
    MEMORY[0x23B822DA8](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v9 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = (void *)MEMORY[0x23B821F68](v8, v7);
  *(_QWORD *)(v0 + 96) = 0;
  v12 = objc_msgSend(v9, sel_sendReplyForBatchPEC_requestError_uuid_error_, isa, 0, v11, v0 + 96);

  v13 = *(void **)(v0 + 96);
  if (v13)
  {
    v14 = v13;

    swift_willThrow();
    v15 = 0;
  }
  else
  {
    v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v19 = *(_QWORD *)(v0 + 152);
  if (v18)
  {
    v20 = *(_QWORD *)(v0 + 144);
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v26[0] = v22;
    *(_DWORD *)v21 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2082;
    *(_QWORD *)(v0 + 112) = v15;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    v23 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v16, v17, "Notified AMD for '%{public}s', response: %{public}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v22, -1, -1);
    MEMORY[0x23B822DA8](v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = (void *)objc_opt_self();
  v5 = (void *)_convertErrorToNSError(_:)();
  v6 = (void *)MEMORY[0x23B821F68](v3, v2);
  *(_QWORD *)(v0 + 56) = 0;
  v7 = objc_msgSend(v4, sel_sendReplyForBatchPEC_requestError_uuid_error_, 0, v5, v6, v0 + 56);

  if (*(_QWORD *)(v0 + 56))
  {
    v8 = *(id *)(v0 + 56);

    swift_willThrow();
    v9 = 0;
  }
  else
  {
    v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  swift_bridgeObjectRetain();
  v10 = v1;
  swift_bridgeObjectRetain();
  v11 = v1;
  swift_bridgeObjectRetain();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 152);
  if (v14)
  {
    v16 = *(_QWORD *)(v0 + 144);
    v17 = swift_slowAlloc();
    v23 = (_QWORD *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v25[0] = v24;
    *(_DWORD *)v17 = 136446722;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    *(_QWORD *)(v0 + 72) = v9;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    v18 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 22) = 2114;
    v20 = v1;
    v21 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 88) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v23 = v21;

    _os_log_impl(&dword_237BC8000, v12, v13, "Async response request '%{public}s' has failed, notified AMD: %s, error: %{public}@", (uint8_t *)v17, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v23, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v24, -1, -1);
    MEMORY[0x23B822DA8](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *v2 + 16;
  *(_QWORD *)(v3 + 200) = a1;
  *(_QWORD *)(v3 + 208) = v1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v4);
  return swift_task_switch();
}

uint64_t closure #1 in RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a5;
  v46 = a8;
  v44 = a7;
  v47 = a4;
  v49 = a3;
  v43[0] = a9;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v43 - v17;
  v19 = type metadata accessor for AspireApiRequests(0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (_QWORD *)((char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *a1;
  *v22 = MEMORY[0x24BEE4AF8];
  v43[1] = v20;
  UnknownStorage.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiRequest>);
  v24 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AspireApiRequest(0) - 8) + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = swift_allocObject();
  v48 = xmmword_237D540E0;
  *(_OWORD *)(v26 + 16) = xmmword_237D540E0;
  v27 = v26 + v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  if (v23 == a2)
  {
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v48;
    *(_QWORD *)(inited + 32) = v45;
    outlined init with copy of SecretKey(a6, (uint64_t)v18, type metadata accessor for AspireHeEvaluationKeyConfig);
    v29 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v18, 0, 1, v29);
    v30 = v50;
    RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v47, inited, (uint64_t)v18, v27);
    v31 = v30;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v18, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    swift_setDeallocating();
    if (!v30)
      goto LABEL_11;
    goto LABEL_9;
  }
  v47 = v27;
  v31 = v50;
  v32 = swift_initStackObject();
  *(_OWORD *)(v32 + 16) = v48;
  v33 = v46;
  v34 = (_QWORD *)*v46;
  if (!*(_QWORD *)(*v46 + 16))
  {
    __break(1u);
LABEL_13:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
    v34 = (_QWORD *)result;
    v36 = *(_QWORD *)(result + 16);
    if (v36)
      goto LABEL_7;
    goto LABEL_14;
  }
  v18 = (char *)v32;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_13;
  v36 = v34[2];
  if (v36)
  {
LABEL_7:
    v37 = v36 - 1;
    v38 = v34[v37 + 4];
    v34[2] = v37;
    *v33 = v34;
    *((_QWORD *)v18 + 4) = v38;
    outlined init with copy of SecretKey(a6, (uint64_t)v16, type metadata accessor for AspireHeEvaluationKeyConfig);
    v39 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v16, 0, 1, v39);
    RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(v44, (uint64_t)v18, (uint64_t)v16, v47);
    if (!v31)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      swift_setDeallocating();
LABEL_11:
      swift_bridgeObjectRelease();
      *v22 = v26;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
      v40 = Message.serializedData(partial:)();
      v41 = v43[0];
      *(_QWORD *)v43[0] = v40;
      *(_QWORD *)(v41 + 8) = v42;
      return outlined destroy of AspireApiPECConfig((uint64_t)v22, type metadata accessor for AspireApiRequests);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v16, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    swift_setDeallocating();
LABEL_9:
    *(_QWORD *)(v26 + 16) = 0;
    swift_release();
    result = outlined destroy of AspireApiPECConfig((uint64_t)v22, type metadata accessor for AspireApiRequests);
    *a10 = v31;
    return result;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized RequestsManager.convertToFloats(_:embeddingDimension:)(uint64_t a1, uint64_t a2, int32x2_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v8 = *(_QWORD *)(a1 + 16);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    v3 = v5;
    v4 = a2;
    a3.i32[0] = 0;
    v6 = specialized Array.init(repeating:count:)(a2 * v8, a3);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v6 = result;
LABEL_3:
  v10 = *(_QWORD *)(v6 + 16);
  if (v10 >> 61)
  {
    __break(1u);
  }
  else
  {
    closure #1 in RequestsManager.convertToFloats(_:embeddingDimension:)(v6 + 32, v6 + 32 + 4 * v10, a1, v4);
    if (v3)
      swift_bridgeObjectRelease();
    return v6;
  }
  return result;
}

uint64_t partial apply for closure #1 in RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in RequestsManager.encryptDifferentiallyPrivateFakes(batchOfElements:shardIndex:shardCount:pecConfig:context:)(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD **)(v3 + 64), a3, a2);
}

uint64_t sub_237C8DD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v1 = type metadata accessor for RequestsManager.PECContext();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v77 = type metadata accessor for AspireApiRequest(0);
  v5 = *(_QWORD *)(v77 - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>);
  v78 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v9 = v7 + v78;
  v76 = v8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v74 = v0;
  v10 = v0 + v3;
  swift_bridgeObjectRelease();
  v11 = v10 + *(int *)(v1 + 20);
  v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v11 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  v14 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  v15 = v10 + *(int *)(v1 + 24);
  v16 = v15 + *(int *)(type metadata accessor for SecretKey() + 20);
  v17 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = (int *)type metadata accessor for SimilarityClient();
  v19 = v15 + v18[5];
  outlined consume of Data._Representation(*(_QWORD *)(v19 + 32), *(_QWORD *)(v19 + 40));
  swift_bridgeObjectRelease();
  v20 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v21 = v19 + v20[9];
  v22 = type metadata accessor for UnknownStorage();
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
  v23(v21, v22);
  v24 = v19 + v20[10];
  v25 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
  {
    swift_bridgeObjectRelease();
    v23(v24 + *(int *)(v25 + 40), v22);
  }
  v26 = v6 + v9;
  v27 = v19 + v20[11];
  v28 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v29 = v77;
  v30 = v74;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28))
  {
    v31 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v27, 1, v31)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v23(v27, v22);
    }
    v23(v27 + *(int *)(v28 + 20), v22);
    v30 = v74;
    v29 = v77;
  }
  v75 = v26 & ~v78;
  outlined consume of Data._Representation(*(_QWORD *)(v15 + v18[6]), *(_QWORD *)(v15 + v18[6] + 8));
  v32 = v15 + v18[7];
  v33 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  v34 = v30 + v6;
  swift_bridgeObjectRelease();
  v35 = v34 + *(int *)(v29 + 20);
  v36 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v37 = v23;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
  {
    v47 = v30;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(v35 + 16), *(_QWORD *)(v35 + 24));
      v48 = (int *)type metadata accessor for AspireApiPECRequest(0);
      v37(v35 + v48[7], v22);
      v49 = v35 + v48[8];
      v50 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48);
      if (!v51(v49, 1, v50))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v49 + 8), *(_QWORD *)(v49 + 16));
        v37(v49 + *(int *)(v50 + 24), v22);
      }
      v52 = v35 + v48[9];
      v53 = type metadata accessor for AspireApiEvaluationKey(0);
      v30 = v47;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v52, 1, v53))
        goto LABEL_9;
      v37(v52, v22);
      v54 = v52 + *(int *)(v53 + 20);
      if (!v51(v54, 1, v50))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v54 + 8), *(_QWORD *)(v54 + 16));
        v37(v54 + *(int *)(v50 + 24), v22);
      }
      v55 = *(int *)(v53 + 24);
    }
    else
    {
      outlined consume of Data._Representation(*(_QWORD *)(v35 + 8), *(_QWORD *)(v35 + 16));
      v56 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      v37(v35 + v56[6], v22);
      v57 = v35 + v56[7];
      v58 = type metadata accessor for AspirePirEncryptedIndices(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v57, 1, v58))
      {
        swift_bridgeObjectRelease();
        v37(v57 + *(int *)(v58 + 24), v22);
      }
      v59 = v35 + v56[8];
      v60 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48);
      if (!v61(v59, 1, v60))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v59 + 8), *(_QWORD *)(v59 + 16));
        v37(v59 + *(int *)(v60 + 24), v22);
      }
      swift_bridgeObjectRelease();
      v52 = v35 + v56[10];
      v62 = type metadata accessor for AspireApiEvaluationKey(0);
      v30 = v47;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 48))(v52, 1, v62))
        goto LABEL_9;
      v37(v52, v22);
      v63 = v52 + *(int *)(v62 + 20);
      if (!v61(v63, 1, v60))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v63 + 8), *(_QWORD *)(v63 + 16));
        v37(v63 + *(int *)(v60 + 24), v22);
      }
      v55 = *(int *)(v62 + 24);
    }
    v64 = v52 + v55;
    v65 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v30 = v47;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v64, 1, v65))
    {
      v37(v64, v22);
      v66 = v64 + *(int *)(v65 + 20);
      v67 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 48))(v66, 1, v67))
      {
        swift_bridgeObjectRelease();
        v37(v66 + *(int *)(v67 + 20), v22);
      }
      v68 = v64 + *(int *)(v65 + 24);
      v69 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v30 = v47;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v68, 1, v69))
      {
        v37(v68, v22);
        v70 = v68 + *(int *)(v69 + 20);
        v71 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v70, 1, v71))
        {
          v37(v70, v22);
          v72 = v70 + *(int *)(v71 + 20);
          v73 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v72, 1, v73))
          {
            swift_bridgeObjectRelease();
            v37(v72 + *(int *)(v73 + 20), v22);
          }
        }
      }
    }
  }
LABEL_9:
  v37(v34 + *(int *)(v29 + 24), v22);

  v38 = v30 + v75 + *(int *)(v76 + 32);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 2, v39))
  {
    v40 = type metadata accessor for URL();
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v42(v38, v40);
    v43 = v38 + *(int *)(v39 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v43, 1, v40))
      v42(v43, v40);
    v44 = (uint64_t *)(v38 + *(int *)(v39 + 64));
    v45 = v44[1];
    if (v45 >> 60 != 15)
      outlined consume of Data._Representation(*v44, v45);
  }
  type metadata accessor for NetworkConfig(0);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RequestsManager.similarityScoresWithAsyncResponse(elements:shardIndices:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(type metadata accessor for RequestsManager.PECContext() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for AspireApiRequest(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>)
                                      - 8)
                          + 80);
  v9 = v6 + v7 + v8;
  v10 = *(_QWORD *)(v0 + 32);
  v11 = *(_QWORD *)(v0 + 40);
  v12 = v0 + v3;
  v13 = v0 + v6;
  v14 = v0 + (v9 & ~v8);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v15;
  *v15 = v1;
  v15[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v15[21] = v13;
  v15[22] = v14;
  v15[19] = v11;
  v15[20] = v12;
  v15[18] = v10;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestsManager.PECContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v66;
  char *v67;
  int *v68;
  char *v69;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v43 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v43 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = type metadata accessor for UserIdentifier();
    v14 = *(int *)(v13 + 20);
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    *(_QWORD *)&v9[*(int *)(v13 + 24)] = *(_QWORD *)&v10[*(int *)(v13 + 24)];
    v18 = *(int *)(a3 + 24);
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    *(uint64_t *)((char *)v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    v21 = *(int *)(type metadata accessor for SecretKey() + 20);
    v22 = &v19[v21];
    v23 = &v20[v21];
    v24 = type metadata accessor for HE.SerializedSecretKey();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    swift_bridgeObjectRetain();
    v25(v22, v23, v24);
    v67 = v19;
    v68 = (int *)type metadata accessor for SimilarityClient();
    v26 = v68[5];
    v27 = &v19[v26];
    v69 = v20;
    v28 = &v20[v26];
    *(_QWORD *)v27 = *(_QWORD *)&v20[v26];
    *((_DWORD *)v27 + 2) = *(_DWORD *)&v20[v26 + 8];
    v27[24] = v20[v26 + 24];
    *((_QWORD *)v27 + 2) = *(_QWORD *)&v20[v26 + 16];
    v29 = *(_QWORD *)&v20[v26 + 32];
    v30 = *(_QWORD *)&v20[v26 + 40];
    outlined copy of Data._Representation(v29, v30);
    *((_QWORD *)v27 + 4) = v29;
    *((_QWORD *)v27 + 5) = v30;
    *((_QWORD *)v27 + 6) = *((_QWORD *)v28 + 6);
    v31 = (int *)type metadata accessor for AspireApiPECConfig(0);
    v32 = v31[9];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v35 = type metadata accessor for UnknownStorage();
    v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
    swift_bridgeObjectRetain();
    v36(v33, v34, v35);
    v37 = v31[10];
    v38 = &v27[v37];
    v39 = &v28[v37];
    v40 = type metadata accessor for AspireHeEncryptionParameters(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v38 = *(_OWORD *)v39;
      v44 = *((_QWORD *)v39 + 3);
      *((_QWORD *)v38 + 2) = *((_QWORD *)v39 + 2);
      *((_QWORD *)v38 + 3) = v44;
      v38[32] = v39[32];
      *((_QWORD *)v38 + 5) = *((_QWORD *)v39 + 5);
      v38[48] = v39[48];
      *((_QWORD *)v38 + 7) = *((_QWORD *)v39 + 7);
      v38[64] = v39[64];
      v45 = *(int *)(v40 + 40);
      v66 = &v38[v45];
      v46 = &v39[v45];
      swift_bridgeObjectRetain();
      v36(v66, v46, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v47 = v31[11];
    v48 = &v27[v47];
    v49 = &v28[v47];
    v50 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v53 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v49, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v36(v48, v49, v35);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v48, 0, 1, v53);
      }
      v36(&v48[*(int *)(v50 + 20)], &v49[*(int *)(v50 + 20)], v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    v56 = v68[6];
    v57 = (uint64_t *)&v67[v56];
    v58 = (uint64_t *)&v69[v56];
    v59 = *v58;
    v60 = v58[1];
    outlined copy of Data._Representation(*v58, v60);
    *v57 = v59;
    v57[1] = v60;
    v61 = v68[7];
    v62 = &v67[v61];
    v63 = &v69[v61];
    v64 = type metadata accessor for PEC.SimilarityClient();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
  }
  return v4;
}

uint64_t destroy for RequestsManager.PECContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = v4 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(a2 + 24);
  v9 = v8 + *(int *)(type metadata accessor for SecretKey() + 20);
  v10 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (int *)type metadata accessor for SimilarityClient();
  v12 = v8 + v11[5];
  outlined consume of Data._Representation(*(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40));
  swift_bridgeObjectRelease();
  v13 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v14 = v12 + v13[9];
  v15 = type metadata accessor for UnknownStorage();
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
  v16(v14, v15);
  v17 = v12 + v13[10];
  v18 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
  {
    swift_bridgeObjectRelease();
    v16(v17 + *(int *)(v18 + 40), v15);
  }
  v19 = v12 + v13[11];
  v20 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
  {
    v21 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v19, 1, v21)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v16(v19, v15);
    }
    v16(v19 + *(int *)(v20 + 20), v15);
  }
  outlined consume of Data._Representation(*(_QWORD *)(v8 + v11[6]), *(_QWORD *)(v8 + v11[6] + 8));
  v22 = v8 + v11[7];
  v23 = type metadata accessor for PEC.SimilarityClient();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
}

_QWORD *initializeWithCopy for RequestsManager.PECContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v66;
  int *v67;
  char *v68;
  _QWORD *v69;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = type metadata accessor for UserIdentifier();
  v13 = *(int *)(v12 + 20);
  v14 = &v8[v13];
  v15 = &v9[v13];
  v16 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  *(_QWORD *)&v8[*(int *)(v12 + 24)] = *(_QWORD *)&v9[*(int *)(v12 + 24)];
  v17 = *(int *)(a3 + 24);
  v69 = a1;
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  v20 = *(int *)(type metadata accessor for SecretKey() + 20);
  v21 = &v18[v20];
  v22 = &v19[v20];
  v23 = type metadata accessor for HE.SerializedSecretKey();
  v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  swift_bridgeObjectRetain();
  v24(v21, v22, v23);
  v67 = (int *)type metadata accessor for SimilarityClient();
  v68 = v18;
  v25 = v67[5];
  v26 = &v18[v25];
  v27 = &v19[v25];
  *(_QWORD *)v26 = *(_QWORD *)&v19[v25];
  *((_DWORD *)v26 + 2) = *(_DWORD *)&v19[v25 + 8];
  v26[24] = v19[v25 + 24];
  *((_QWORD *)v26 + 2) = *(_QWORD *)&v19[v25 + 16];
  v28 = *(_QWORD *)&v19[v25 + 32];
  v29 = *(_QWORD *)&v19[v25 + 40];
  outlined copy of Data._Representation(v28, v29);
  *((_QWORD *)v26 + 4) = v28;
  *((_QWORD *)v26 + 5) = v29;
  *((_QWORD *)v26 + 6) = *((_QWORD *)v27 + 6);
  v30 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v31 = v30[9];
  v32 = &v26[v31];
  v33 = &v27[v31];
  v34 = type metadata accessor for UnknownStorage();
  v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
  swift_bridgeObjectRetain();
  v35(v32, v33, v34);
  v36 = v30[10];
  v37 = &v26[v36];
  v38 = &v27[v36];
  v39 = type metadata accessor for AspireHeEncryptionParameters(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v37 = *(_OWORD *)v38;
    v42 = *((_QWORD *)v38 + 3);
    *((_QWORD *)v37 + 2) = *((_QWORD *)v38 + 2);
    *((_QWORD *)v37 + 3) = v42;
    v37[32] = v38[32];
    *((_QWORD *)v37 + 5) = *((_QWORD *)v38 + 5);
    v37[48] = v38[48];
    *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
    v37[64] = v38[64];
    v43 = *(int *)(v39 + 40);
    v66 = v19;
    v44 = &v37[v43];
    v45 = &v38[v43];
    swift_bridgeObjectRetain();
    v46 = v44;
    v19 = v66;
    v35(v46, v45, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v47 = v30[11];
  v48 = &v26[v47];
  v49 = &v27[v47];
  v50 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v53 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v54 = *(_QWORD *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v49, 1, v53))
    {
      v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v35(v48, v49, v34);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v48, 0, 1, v53);
    }
    v35(&v48[*(int *)(v50 + 20)], &v49[*(int *)(v50 + 20)], v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  v56 = v67[6];
  v57 = (uint64_t *)&v68[v56];
  v58 = (uint64_t *)&v19[v56];
  v59 = *v58;
  v60 = v58[1];
  outlined copy of Data._Representation(*v58, v60);
  *v57 = v59;
  v57[1] = v60;
  v61 = v67[7];
  v62 = &v68[v61];
  v63 = &v19[v61];
  v64 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
  return v69;
}

_QWORD *assignWithCopy for RequestsManager.PECContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(uint64_t, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  int v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  int v70;
  int v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v87)(char *, char *);
  uint64_t v88;
  uint64_t v89;
  int *v90;
  char *v91;
  _QWORD *v92;
  _QWORD *v93;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = type metadata accessor for UserIdentifier();
  v11 = *(int *)(v10 + 20);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_QWORD *)&v7[*(int *)(v10 + 24)] = *(_QWORD *)&v8[*(int *)(v10 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = *(int *)(a3 + 24);
  v93 = a1;
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (char *)a2 + v15;
  *v16 = *(_QWORD *)((char *)a2 + v15);
  v18 = *(int *)(type metadata accessor for SecretKey() + 20);
  v19 = (char *)v16 + v18;
  v20 = &v17[v18];
  v21 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  v90 = (int *)type metadata accessor for SimilarityClient();
  v91 = v17;
  v22 = v90[5];
  v92 = v16;
  v23 = (char *)v16 + v22;
  v24 = &v17[v22];
  *(_QWORD *)v23 = *(_QWORD *)&v17[v22];
  *((_DWORD *)v23 + 2) = *(_DWORD *)&v17[v22 + 8];
  v25 = *(_QWORD *)&v17[v22 + 16];
  v23[24] = v24[24];
  *((_QWORD *)v23 + 2) = v25;
  v26 = *((_QWORD *)v24 + 4);
  v27 = *((_QWORD *)v24 + 5);
  outlined copy of Data._Representation(v26, v27);
  v28 = *((_QWORD *)v23 + 4);
  v29 = *((_QWORD *)v23 + 5);
  *((_QWORD *)v23 + 4) = v26;
  *((_QWORD *)v23 + 5) = v27;
  outlined consume of Data._Representation(v28, v29);
  *((_QWORD *)v23 + 6) = *((_QWORD *)v24 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v31 = v30[9];
  v32 = &v23[v31];
  v33 = &v24[v31];
  v34 = type metadata accessor for UnknownStorage();
  v88 = *(_QWORD *)(v34 - 8);
  v89 = v34;
  v87 = *(void (**)(char *, char *))(v88 + 24);
  v87(v32, v33);
  v35 = v30[10];
  v36 = (uint64_t)&v23[v35];
  v37 = &v24[v35];
  v38 = type metadata accessor for AspireHeEncryptionParameters(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40((uint64_t)v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *(_QWORD *)(v36 + 8) = *((_QWORD *)v37 + 1);
      *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
      v43 = *((_QWORD *)v37 + 3);
      *(_BYTE *)(v36 + 32) = v37[32];
      *(_QWORD *)(v36 + 24) = v43;
      v44 = *((_QWORD *)v37 + 5);
      *(_BYTE *)(v36 + 48) = v37[48];
      *(_QWORD *)(v36 + 40) = v44;
      v45 = *((_QWORD *)v37 + 7);
      *(_BYTE *)(v36 + 64) = v37[64];
      *(_QWORD *)(v36 + 56) = v45;
      v46 = *(int *)(v38 + 40);
      v47 = v36 + v46;
      v48 = &v37[v46];
      v49 = *(void (**)(uint64_t, char *, uint64_t))(v88 + 16);
      swift_bridgeObjectRetain();
      v49(v47, v48, v89);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v42)
  {
    outlined destroy of AspireApiPECConfig(v36, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v36, v37, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_QWORD *)(v36 + 8) = *((_QWORD *)v37 + 1);
  *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v64 = *((_QWORD *)v37 + 3);
  *(_BYTE *)(v36 + 32) = v37[32];
  *(_QWORD *)(v36 + 24) = v64;
  v65 = *((_QWORD *)v37 + 5);
  *(_BYTE *)(v36 + 48) = v37[48];
  *(_QWORD *)(v36 + 40) = v65;
  v66 = *((_QWORD *)v37 + 7);
  *(_BYTE *)(v36 + 64) = v37[64];
  *(_QWORD *)(v36 + 56) = v66;
  ((void (*)(uint64_t, char *, uint64_t))v87)(v36 + *(int *)(v38 + 40), &v37[*(int *)(v38 + 40)], v89);
LABEL_7:
  v51 = v30[11];
  v52 = &v23[v51];
  v53 = &v24[v51];
  v54 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (!v57)
  {
    v59 = v93;
    if (v58)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v52, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v67 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v68 = *(_QWORD *)(v67 - 8);
    v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
    v70 = v69(v52, 1, v67);
    v71 = v69(v53, 1, v67);
    if (v70)
    {
      if (!v71)
      {
        swift_getEnumCaseMultiPayload();
        v72 = v89;
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v52, v53, v89);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v52, 0, 1, v67);
LABEL_23:
        ((void (*)(char *, char *, uint64_t))v87)(&v52[*(int *)(v54 + 20)], &v53[*(int *)(v54 + 20)], v72);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v71)
      {
        v72 = v89;
        if (v93 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v52, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v52, v53, v89);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v52, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    v72 = v89;
    goto LABEL_23;
  }
  v59 = v93;
  if (v58)
  {
LABEL_13:
    v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_24;
  }
  v60 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v61 = *(_QWORD *)(v60 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v53, 1, v60))
  {
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(&v52[*(int *)(v54 + 20)], &v53[*(int *)(v54 + 20)], v89);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v73 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
    v73(v52, v53, v89);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v52, 0, 1, v60);
    v73(&v52[*(int *)(v54 + 20)], &v53[*(int *)(v54 + 20)], v89);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
LABEL_24:
  v75 = v90[6];
  v76 = (_QWORD *)((char *)v92 + v75);
  v77 = (uint64_t *)&v91[v75];
  v78 = *v77;
  v79 = v77[1];
  outlined copy of Data._Representation(*v77, v79);
  v80 = *v76;
  v81 = v76[1];
  *v76 = v78;
  v76[1] = v79;
  outlined consume of Data._Representation(v80, v81);
  v82 = v90[7];
  v83 = (char *)v92 + v82;
  v84 = &v91[v82];
  v85 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 24))(v83, v84, v85);
  return v59;
}

_OWORD *initializeWithTake for RequestsManager.PECContext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v52;
  int *v53;
  _OWORD *v54;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for UserIdentifier();
  v11 = *(int *)(v10 + 20);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)&v7[*(int *)(v10 + 24)] = *(_QWORD *)&v8[*(int *)(v10 + 24)];
  v15 = *(int *)(a3 + 24);
  v54 = a1;
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (char *)a2 + v15;
  *v16 = *(_QWORD *)((char *)a2 + v15);
  v18 = *(int *)(type metadata accessor for SecretKey() + 20);
  v19 = (char *)v16 + v18;
  v20 = &v17[v18];
  v21 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  v52 = v16;
  v53 = (int *)type metadata accessor for SimilarityClient();
  v22 = v53[5];
  v23 = (char *)v16 + v22;
  v24 = &v17[v22];
  *(_QWORD *)v23 = *(_QWORD *)&v17[v22];
  *((_DWORD *)v23 + 2) = *(_DWORD *)&v17[v22 + 8];
  v23[24] = v17[v22 + 24];
  *((_QWORD *)v23 + 2) = *(_QWORD *)&v17[v22 + 16];
  *((_OWORD *)v23 + 2) = *(_OWORD *)&v17[v22 + 32];
  *((_QWORD *)v23 + 6) = *(_QWORD *)&v17[v22 + 48];
  v25 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v26 = v25[9];
  v27 = &v23[v26];
  v28 = &v24[v26];
  v29 = type metadata accessor for UnknownStorage();
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
  v30(v27, v28, v29);
  v31 = v25[10];
  v32 = &v23[v31];
  v33 = &v24[v31];
  v34 = type metadata accessor for AspireHeEncryptionParameters(0);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
    v37 = *((_QWORD *)v33 + 3);
    *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
    *((_QWORD *)v32 + 3) = v37;
    v32[32] = v33[32];
    *((_QWORD *)v32 + 5) = *((_QWORD *)v33 + 5);
    v32[48] = v33[48];
    *((_QWORD *)v32 + 7) = *((_QWORD *)v33 + 7);
    v32[64] = v33[64];
    v30(&v32[*(int *)(v34 + 40)], &v33[*(int *)(v34 + 40)], v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v38 = v25[11];
  v39 = &v23[v38];
  v40 = &v24[v38];
  v41 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v44 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v40, 1, v44))
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v30(v39, v40, v29);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v39, 0, 1, v44);
    }
    v30(&v39[*(int *)(v41 + 20)], &v40[*(int *)(v41 + 20)], v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  *(_OWORD *)((char *)v52 + v53[6]) = *(_OWORD *)&v17[v53[6]];
  v47 = v53[7];
  v48 = (char *)v52 + v47;
  v49 = &v17[v47];
  v50 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
  return v54;
}

_QWORD *assignWithTake for RequestsManager.PECContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v71)(char *, char *);
  uint64_t v72;
  uint64_t v73;
  int *v74;
  _QWORD *v75;
  char *v76;
  _QWORD *v77;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = type metadata accessor for UserIdentifier();
  v12 = *(int *)(v11 + 20);
  v13 = &v8[v12];
  v14 = &v9[v12];
  v15 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_QWORD *)&v8[*(int *)(v11 + 24)] = *(_QWORD *)&v9[*(int *)(v11 + 24)];
  swift_bridgeObjectRelease();
  v16 = *(int *)(a3 + 24);
  v77 = a1;
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (char *)a2 + v16;
  *v17 = *(_QWORD *)((char *)a2 + v16);
  v19 = *(int *)(type metadata accessor for SecretKey() + 20);
  v20 = (char *)v17 + v19;
  v21 = &v18[v19];
  v22 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v74 = (int *)type metadata accessor for SimilarityClient();
  v75 = v17;
  v23 = v74[5];
  v24 = (char *)v17 + v23;
  v76 = v18;
  v25 = &v18[v23];
  *(_QWORD *)v24 = *(_QWORD *)&v18[v23];
  *((_DWORD *)v24 + 2) = *(_DWORD *)&v18[v23 + 8];
  v24[24] = v18[v23 + 24];
  *((_QWORD *)v24 + 2) = *(_QWORD *)&v18[v23 + 16];
  v26 = *(_QWORD *)((char *)v17 + v23 + 32);
  v27 = *(_QWORD *)((char *)v17 + v23 + 40);
  *((_OWORD *)v24 + 2) = *(_OWORD *)&v18[v23 + 32];
  outlined consume of Data._Representation(v26, v27);
  *((_QWORD *)v24 + 6) = *((_QWORD *)v25 + 6);
  swift_bridgeObjectRelease();
  v28 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v29 = v28[9];
  v30 = &v24[v29];
  v31 = &v25[v29];
  v32 = type metadata accessor for UnknownStorage();
  v72 = *(_QWORD *)(v32 - 8);
  v73 = v32;
  v71 = *(void (**)(char *, char *))(v72 + 40);
  v71(v30, v31);
  v33 = v28[10];
  v34 = (uint64_t)&v24[v33];
  v35 = &v25[v33];
  v36 = type metadata accessor for AspireHeEncryptionParameters(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38((uint64_t)v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      *(_OWORD *)v34 = *(_OWORD *)v35;
      v41 = *((_QWORD *)v35 + 3);
      *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
      *(_QWORD *)(v34 + 24) = v41;
      *(_BYTE *)(v34 + 32) = v35[32];
      *(_BYTE *)(v34 + 48) = v35[48];
      *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
      *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
      *(_BYTE *)(v34 + 64) = v35[64];
      (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v34 + *(int *)(v36 + 40), &v35[*(int *)(v36 + 40)], v73);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v40)
  {
    outlined destroy of AspireApiPECConfig(v34, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v34, v35, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_QWORD *)(v34 + 16) = *((_QWORD *)v35 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v34 + 24) = *((_QWORD *)v35 + 3);
  *(_BYTE *)(v34 + 32) = v35[32];
  *(_QWORD *)(v34 + 40) = *((_QWORD *)v35 + 5);
  *(_BYTE *)(v34 + 48) = v35[48];
  *(_QWORD *)(v34 + 56) = *((_QWORD *)v35 + 7);
  *(_BYTE *)(v34 + 64) = v35[64];
  ((void (*)(uint64_t, char *, uint64_t))v71)(v34 + *(int *)(v36 + 40), &v35[*(int *)(v36 + 40)], v73);
LABEL_7:
  v43 = v28[11];
  v44 = &v24[v43];
  v45 = &v25[v43];
  v46 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (v50)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v44, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v55 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v56 = *(_QWORD *)(v55 - 8);
    v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
    v58 = v57(v44, 1, v55);
    v59 = v57(v45, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        swift_getEnumCaseMultiPayload();
        v60 = v73;
        (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v44, v45, v73);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v44, 0, 1, v55);
LABEL_23:
        ((void (*)(char *, char *, uint64_t))v71)(&v44[*(int *)(v46 + 20)], &v45[*(int *)(v46 + 20)], v60);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v59)
      {
        v60 = v73;
        if (v77 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v44, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v44, v45, v73);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v44, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    v60 = v73;
    goto LABEL_23;
  }
  if (v50)
  {
LABEL_13:
    v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_24;
  }
  v51 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v45, 1, v51))
  {
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v44[*(int *)(v46 + 20)], &v45[*(int *)(v46 + 20)], v73);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v61 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    v61(v44, v45, v73);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v44, 0, 1, v51);
    v61(&v44[*(int *)(v46 + 20)], &v45[*(int *)(v46 + 20)], v73);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
LABEL_24:
  v63 = v74[6];
  v64 = *(_QWORD *)((char *)v75 + v63);
  v65 = *(_QWORD *)((char *)v75 + v63 + 8);
  *(_OWORD *)((char *)v75 + v63) = *(_OWORD *)&v76[v63];
  outlined consume of Data._Representation(v64, v65);
  v66 = v74[7];
  v67 = (char *)v75 + v66;
  v68 = &v76[v66];
  v69 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 40))(v67, v68, v69);
  return v77;
}

uint64_t getEnumTagSinglePayload for RequestsManager.PECContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C90100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UserIdentifier();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for SimilarityClient();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for RequestsManager.PECContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C901AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UserIdentifier();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for SimilarityClient();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata completion function for RequestsManager.PECContext()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for UserIdentifier();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SimilarityClient();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    result = MEMORY[0x23B822CDC](MEMORY[0x24BDCFB88], MEMORY[0x24BEE0F88]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

uint64_t static DaemonContainerPathLookup.path(for:)(uint64_t a1, uint64_t a2)
{
  return specialized static DaemonContainerPathLookup.path(for:)(a1, a2);
}

void specialized static DaemonContainerPathLookup.performSandboxExtension(for:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  if (container_copy_sandbox_token())
  {
    if (sandbox_extension_consume() == -1)
    {
      if (one-time initialization token for daemon != -1)
        swift_once();
      v0 = type metadata accessor for Logger();
      __swift_project_value_buffer(v0, (uint64_t)static Logger.daemon);
      v1 = Logger.logObject.getter();
      v2 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v1, v2))
      {
        v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v3 = 0;
        _os_log_impl(&dword_237BC8000, v1, v2, "token/process not valid for extension", v3, 2u);
        MEMORY[0x23B822DA8](v3, -1, -1);
      }

    }
    JUMPOUT(0x23B822DA8);
  }
  if (one-time initialization token for daemon != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.daemon);
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_237BC8000, oslog, v5, "token not sent by container", v6, 2u);
    MEMORY[0x23B822DA8](v6, -1, -1);
  }

}

uint64_t specialized static DaemonContainerPathLookup.path(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *path;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  if (!container_query_create())
  {
    lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError();
    swift_allocError();
    *(_OWORD *)v12 = xmmword_237D586C0;
    *(_BYTE *)(v12 + 16) = 2;
    return swift_willThrow();
  }
  if (a2)
  {
    v3 = String.utf8CString.getter();
    xpc_string_create((const char *)(v3 + 32));
    swift_release();
    container_query_set_group_identifiers();
    swift_unknownObjectRelease();
  }
  v4 = objc_msgSend((id)objc_opt_self(), sel_currentPersona);
  if (!v4)
    goto LABEL_13;
  v5 = v4;
  if (!objc_msgSend(v4, sel_isDataSeparatedPersona)
    || (v6 = objc_msgSend(v5, sel_userPersonaUniqueString)) == 0)
  {

    goto LABEL_13;
  }
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    String.init(cString:)();
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  container_query_set_persona_unique_string();
  swift_release();
  container_query_set_class();
  container_query_operation_set_flags();
  if (container_query_get_single_result())
  {
    path = (const char *)container_get_path();
    if (!path)
    {
      if (container_query_get_last_error() && (v21 = container_error_copy_unlocalized_description()) != 0)
      {
        v22 = v21;
        v23 = String.init(cString:)();
        v25 = v24;
        MEMORY[0x23B822DA8](v22, -1, -1);
      }
      else
      {
        v23 = 0;
        v25 = 0xE000000000000000;
      }
      lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError();
      swift_allocError();
      *(_QWORD *)v28 = v23;
      *(_QWORD *)(v28 + 8) = v25;
      *(_BYTE *)(v28 + 16) = 0;
      goto LABEL_30;
    }
    if ((uint64_t)strlen(path) >= 1)
    {
      specialized static DaemonContainerPathLookup.performSandboxExtension(for:)();
      v15 = String.init(cString:)();
      container_query_free();
      return v15;
    }
    lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError();
    swift_allocError();
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v27 = 2;
  }
  else
  {
    if (container_query_get_last_error() && (v16 = container_error_copy_unlocalized_description()) != 0)
    {
      v17 = v16;
      v18 = String.init(cString:)();
      v20 = v19;
      MEMORY[0x23B822DA8](v17, -1, -1);
    }
    else
    {
      v18 = 0;
      v20 = 0xE000000000000000;
    }
    lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError();
    swift_allocError();
    *(_QWORD *)v26 = v18;
    *(_QWORD *)(v26 + 8) = v20;
    v27 = 1;
  }
  *(_BYTE *)(v26 + 16) = v27;
LABEL_30:
  swift_willThrow();
  return container_query_free();
}

uint64_t outlined copy of DaemonContainerPathError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for DaemonContainerPathError(uint64_t a1)
{
  return outlined consume of DaemonContainerPathError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of DaemonContainerPathError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DaemonContainerPathError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of DaemonContainerPathError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DaemonContainerPathError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of DaemonContainerPathError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of DaemonContainerPathError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DaemonContainerPathError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of DaemonContainerPathError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DaemonContainerPathError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonContainerPathError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for DaemonContainerPathError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for DaemonContainerPathError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DaemonContainerPathError()
{
  return &type metadata for DaemonContainerPathError;
}

ValueMetadata *type metadata accessor for DaemonContainerPathLookup()
{
  return &type metadata for DaemonContainerPathLookup;
}

unint64_t lazy protocol witness table accessor for type DaemonContainerPathError and conformance DaemonContainerPathError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DaemonContainerPathError and conformance DaemonContainerPathError;
  if (!lazy protocol witness table cache variable for type DaemonContainerPathError and conformance DaemonContainerPathError)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for DaemonContainerPathError, &type metadata for DaemonContainerPathError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DaemonContainerPathError and conformance DaemonContainerPathError);
  }
  return result;
}

uint64_t AspireApiPECConfig.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v35 = a1;
  v3 = type metadata accessor for PEC.SimilarityMetric();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v5);
  v40 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PEC.PlaintextPacking();
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v41 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for HE.EncryptionParams();
  v36 = *(_QWORD *)(v19 - 8);
  v37 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for AspireApiPECConfig(0);
  v23 = *(int *)(v22 + 40);
  v42 = v2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + v23, (uint64_t)v14, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = MEMORY[0x24BEE4AF8];
    *((_QWORD *)v18 + 3) = 0;
    v18[32] = 1;
    *((_QWORD *)v18 + 5) = 0;
    v18[48] = 1;
    *((_QWORD *)v18 + 7) = 0;
    v18[64] = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v14, (uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  }
  v24 = v43;
  AspireHeEncryptionParameters.cryptokit()((uint64_t)v21);
  result = outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  if (!v24)
  {
    if ((*(_QWORD *)v42 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v26 = v40;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42 + *(int *)(v22 + 44), v40, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v26, 1, v39) == 1)
      {
        v27 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v9, 1, 1, v27);
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v26, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      }
      else
      {
        outlined init with take of SecretKey(v26, (uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
      }
      v28 = v41;
      AspireSimilarityPlaintextPacking.cryptokit()(v41);
      outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
      if ((*(_BYTE *)(v42 + 24) & 1) != 0)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v34, *MEMORY[0x24BE2A258], v33);
        swift_bridgeObjectRetain();
        return PEC.SimilarityClientConfig.init(encryptionParams:scalingFactor:plaintextPacking:embeddingDimension:galoisElements:similarityMetric:extraPlaintextModuli:)();
      }
      else
      {
        type metadata accessor for CipherMLError();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v31);
        return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v21, v37);
      }
    }
  }
  return result;
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.proto()()
{
  return PEC.SerializedCiphertextCoeffMatrix.proto()(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, &lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t AspireSimilaritySerializedCiphertextMatrix.cryptokit(encryptionParams:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  _QWORD v79[2];
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v91 = a1;
  v94 = a2;
  v2 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v2);
  v100 = (_QWORD *)((char *)v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v4);
  v106 = (_QWORD *)((char *)v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v6);
  v105 = (uint64_t)v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v102 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v104 = (char *)v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HE.SerializedCiphertext();
  v107 = *(_QWORD *)(v10 - 8);
  v108 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (_QWORD *)((char *)v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v13);
  v90 = (char *)v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v92 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v93 = (uint64_t)v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PEC.PlaintextPacking();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for HE.EncryptionParams();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PEC.PlaintextMatrixDims();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)v79 - v28;
  v30 = v103;
  result = PEC.PlaintextMatrixDims.init(rowCount:colCount:)();
  if (!v30)
  {
    v32 = v23;
    v81 = v27;
    v87 = v20;
    v83 = v18;
    v88 = v19;
    v82 = v22;
    v85 = v24;
    v86 = v29;
    v33 = v99;
    v34 = *(_QWORD *)(v99 + 8);
    v35 = *(_QWORD *)(v34 + 16);
    v84 = 0;
    if (v35)
    {
      v80 = v32;
      v110 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35, 0);
      v36 = 0;
      v37 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
      v79[1] = v34;
      v103 = v34 + v37;
      v102 = *(_QWORD *)(v102 + 72);
      v97 = *MEMORY[0x24BE2A190];
      v96 = *MEMORY[0x24BE2A188];
      v38 = v100;
      v39 = (uint64_t)v104;
      v40 = v106;
      v95 = v12;
      v101 = v35;
      while (1)
      {
        outlined init with copy of SecretKey(v103 + v102 * v36, v39, type metadata accessor for AspireHeSerializedCiphertext);
        v41 = v105;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, v105, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
        v42 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v41, 1, v42) == 1)
          break;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          outlined init with take of SecretKey(v41, (uint64_t)v38, type metadata accessor for AspireHeSerializedFullCiphertext);
          v44 = *v38;
          v43 = v38[1];
          v45 = v38[2];
          v46 = *(_QWORD *)(v45 + 16);
          if (v46)
          {
            v98 = v44;
            v47 = v43;
            outlined copy of Data._Representation(v44, v43);
            v109 = MEMORY[0x24BEE4AF8];
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46, 0);
            v48 = 0;
            v49 = v109;
            v50 = *(_QWORD *)(v109 + 16);
            do
            {
              v51 = *(unsigned int *)(v45 + 4 * v48 + 32);
              v109 = v49;
              v52 = *(_QWORD *)(v49 + 24);
              if (v50 >= v52 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v50 + 1, 1);
                v49 = v109;
              }
              ++v48;
              *(_QWORD *)(v49 + 16) = v50 + 1;
              *(_QWORD *)(v49 + 8 * v50++ + 32) = v51;
            }
            while (v46 != v48);
            swift_bridgeObjectRelease();
            v38 = v100;
            v39 = (uint64_t)v104;
            v59 = v107;
            v58 = v108;
            v44 = v98;
          }
          else
          {
            v47 = v43;
            outlined copy of Data._Representation(v44, v43);
            v49 = MEMORY[0x24BEE4AF8];
            v38 = v100;
            v59 = v107;
            v58 = v108;
          }
          v56 = v38[3];
          outlined destroy of AspireApiPECConfig((uint64_t)v38, type metadata accessor for AspireHeSerializedFullCiphertext);
          v60 = v95;
          *v95 = v44;
          v60[1] = v47;
          v12 = v60;
          v57 = v96;
        }
        else
        {
          outlined init with take of SecretKey(v41, (uint64_t)v40, type metadata accessor for AspireHeSerializedSeededCiphertext);
          v53 = *v40;
          v54 = v40[1];
          v55 = (uint64_t)v40;
          v49 = v40[2];
          v56 = *(_QWORD *)(v55 + 24);
          outlined copy of Data._Representation(v53, v54);
          outlined copy of Data._Representation(v49, v56);
          outlined destroy of AspireApiPECConfig(v55, type metadata accessor for AspireHeSerializedSeededCiphertext);
          *v12 = v53;
          v12[1] = v54;
          v39 = (uint64_t)v104;
          v57 = v97;
          v59 = v107;
          v58 = v108;
        }
        v12[2] = v49;
        v12[3] = v56;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v59 + 104))(v12, v57, v58);
        outlined destroy of AspireApiPECConfig(v39, type metadata accessor for AspireHeSerializedCiphertext);
        v61 = v110;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v61 + 16) + 1, 1);
          v61 = v110;
        }
        v40 = v106;
        v63 = *(_QWORD *)(v61 + 16);
        v62 = *(_QWORD *)(v61 + 24);
        if (v63 >= v62 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
          v40 = v106;
          v61 = v110;
        }
        ++v36;
        *(_QWORD *)(v61 + 16) = v63 + 1;
        (*(void (**)(unint64_t, uint64_t *, uint64_t))(v107 + 32))(v61+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v63, v12, v108);
        v110 = v61;
        if (v36 == v101)
        {
          swift_bridgeObjectRelease();
          v64 = v80;
          v65 = v86;
          v66 = v85;
          v33 = v99;
          v68 = (uint64_t)v90;
          v67 = v91;
          v69 = v82;
          v70 = v88;
          v71 = v89;
          v72 = v87;
          v73 = v81;
          goto LABEL_23;
        }
      }
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      outlined destroy of AspireApiPECConfig(v39, type metadata accessor for AspireHeSerializedCiphertext);
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v86, v80);
    }
    else
    {
      v65 = v86;
      v66 = v85;
      v68 = (uint64_t)v90;
      v67 = v91;
      v69 = v82;
      v70 = v88;
      v71 = v89;
      v72 = v87;
      v73 = v81;
      v64 = v32;
LABEL_23:
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v69, v67, v70);
      (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v73, v65, v64);
      v74 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33 + *(int *)(v74 + 32), v68, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v68, 1, v71) == 1)
      {
        v75 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v76 = v93;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v93, 1, 1, v75);
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v68, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      }
      else
      {
        v76 = v93;
        outlined init with take of SecretKey(v68, v93, type metadata accessor for AspireSimilarityPlaintextPacking);
      }
      v77 = v84;
      AspireSimilarityPlaintextPacking.cryptokit()((uint64_t)v83);
      if (v77)
      {
        swift_bridgeObjectRelease();
        outlined destroy of AspireApiPECConfig(v76, type metadata accessor for AspireSimilarityPlaintextPacking);
        v78 = *(void (**)(char *, uint64_t))(v66 + 8);
        v78(v73, v64);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v69, v88);
        return ((uint64_t (*)(char *, uint64_t))v78)(v65, v64);
      }
      else
      {
        outlined destroy of AspireApiPECConfig(v76, type metadata accessor for AspireSimilarityPlaintextPacking);
        PEC.SerializedCiphertextCoeffMatrix.init(encryptionParams:dimensions:packing:ciphertexts:)();
        return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v65, v64);
      }
    }
  }
  return result;
}

uint64_t Message.equalsIgnoringUnknown(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15[5];

  v6 = type metadata accessor for UnknownStorage();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, a2);
  dispatch thunk of Message.unknownFields.getter();
  dispatch thunk of Message.unknownFields.setter();
  v15[3] = a2;
  v15[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  v11((char *)boxed_opaque_existential_1, (uint64_t)v10, a2);
  LOBYTE(a1) = dispatch thunk of Message.isEqualTo(message:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  return a1 & 1;
}

uint64_t AspireHeHeScheme.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = *((unsigned __int8 *)v1 + 8);
  if (v3 != 1 || v2 == 0)
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    *(_QWORD *)v5 = v2;
    *(_BYTE *)(v5 + 8) = v3;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    if (v2 == 1)
      v8 = (unsigned int *)MEMORY[0x24BE2A1C8];
    else
      v8 = (unsigned int *)MEMORY[0x24BE2A1D0];
    v9 = *v8;
    v10 = type metadata accessor for HE.Scheme();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(a1, v9, v10);
  }
}

uint64_t AspireHeEvaluationKeyConfig.cryptokit()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[2];

  v2 = v0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HE.EncryptionParams();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v13 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = MEMORY[0x24BEE4AF8];
    *((_QWORD *)v9 + 3) = 0;
    v9[32] = 1;
    *((_QWORD *)v9 + 5) = 0;
    v9[48] = 1;
    *((_QWORD *)v9 + 7) = 0;
    v9[64] = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  AspireHeEncryptionParameters.cryptokit()((uint64_t)v12);
  result = outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  if (!v1)
  {
    swift_bridgeObjectRetain();
    return HE.EvaluationKeyConfig.init(encryptionParams:galoisElements:hasRelinKey:)();
  }
  return result;
}

uint64_t HE.SerializedEvaluationKey.proto()()
{
  return PEC.SerializedCiphertextCoeffMatrix.proto()(type metadata accessor for AspireHeSerializedEvaluationKey, &lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
}

uint64_t PEC.SerializedCiphertextCoeffMatrix.proto()(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  a1(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a2, a1, a3);
  return static Message.with(_:)();
}

uint64_t AspireHeEncryptionParameters.rlweParams()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = static HE.RlweParams.allCases.getter();
  v10 = v1;
  result = specialized _ArrayProtocol.filter(_:)(partial apply for closure #1 in AspireHeEncryptionParameters.rlweParams(), (uint64_t)&v9, v4);
  if (!v2)
  {
    v6 = result;
    if (*(_QWORD *)(result + 16))
    {
      v7 = type metadata accessor for HE.RlweParams();
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v6+ ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80)), v7);
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      outlined init with copy of SecretKey(v1, v8, type metadata accessor for AspireHeEncryptionParameters);
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v27 = type metadata accessor for HE.RlweParams();
  v7 = *(_QWORD *)(v27 - 8);
  v8 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v26 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v20 - v11;
  v13 = MEMORY[0x24BEE4AF8];
  v28 = MEMORY[0x24BEE4AF8];
  v25 = *(_QWORD *)(a3 + 16);
  if (v25)
  {
    v14 = 0;
    v22 = a2;
    v23 = a3;
    v21 = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v13 = *(_QWORD *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, a3 + v15 + v13 * v14, v27);
      v16 = a1(v12);
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v27);
        swift_bridgeObjectRelease();
        swift_release();
        return v13;
      }
      if ((v16 & 1) != 0)
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v24(v26, v12, v27);
        v17 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v17 = v28;
        }
        v19 = *(_QWORD *)(v17 + 16);
        v18 = *(_QWORD *)(v17 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v17 = v28;
        }
        *(_QWORD *)(v17 + 16) = v19 + 1;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(v17 + v15 + v19 * v13, v26, v27);
        v28 = v17;
        a3 = v23;
        a1 = v21;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v27);
      }
      if (v25 == ++v14)
      {
        v13 = v28;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  v4 = a3;
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
  {
    v5 = (uint64_t (*)(_QWORD *))result;
    v6 = 0;
    v7 = (uint64_t *)(a3 + 40);
    v8 = MEMORY[0x24BEE4AF8];
    v15 = (uint64_t (*)(_QWORD *))result;
    while (v6 < *(_QWORD *)(v4 + 16))
    {
      v10 = *(v7 - 1);
      v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      swift_bridgeObjectRetain();
      v11 = v5(v18);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if ((v11 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v19 = v8;
        if ((result & 1) == 0)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v19;
        }
        v13 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        if (v13 >= v12 >> 1)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          v8 = v19;
        }
        *(_QWORD *)(v8 + 16) = v13 + 1;
        v14 = v8 + 16 * v13;
        *(_QWORD *)(v14 + 32) = v10;
        *(_QWORD *)(v14 + 40) = v9;
        v4 = a3;
        v5 = v15;
      }
      else
      {
        result = swift_bridgeObjectRelease();
      }
      ++v6;
      v7 += 2;
      if (v17 == v6)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
LABEL_16:
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = type metadata accessor for TokenCache.CachedToken(0);
  v24 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v20 - v11;
  v13 = MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = MEMORY[0x24BEE4AF8];
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD *)(v24 + 72);
      outlined init with copy of SecretKey(a3 + v16 + v13 * v14, (uint64_t)v12, type metadata accessor for TokenCache.CachedToken);
      v17 = a1(v12);
      if (v3)
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for TokenCache.CachedToken);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if ((v17 & 1) != 0)
      {
        outlined init with take of SecretKey((uint64_t)v12, v23, type metadata accessor for TokenCache.CachedToken);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v25;
        v19 = *(_QWORD *)(v25 + 16);
        v18 = *(_QWORD *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        *(_QWORD *)(v15 + 16) = v19 + 1;
        result = outlined init with take of SecretKey(v23, v15 + v16 + v19 * v13, type metadata accessor for TokenCache.CachedToken);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for TokenCache.CachedToken);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t HE.Scheme.proto()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for HE.Scheme();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v8(v7, v2, v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if ((_DWORD)result == *MEMORY[0x24BE2A1C8])
  {
    v10 = 1;
LABEL_5:
    *(_QWORD *)a1 = v10;
    *(_BYTE *)(a1 + 8) = 1;
    return result;
  }
  if ((_DWORD)result == *MEMORY[0x24BE2A1D0])
  {
    v10 = 2;
    goto LABEL_5;
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  v8(v11, v2, v4);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t HE.SecurityLevel.proto()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for HE.SecurityLevel();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v8(v7, v2, v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  v10 = 0;
  if ((_DWORD)result == *MEMORY[0x24BE2A0C0])
    goto LABEL_4;
  if ((_DWORD)result == *MEMORY[0x24BE2A0B0])
  {
    v10 = 1;
LABEL_4:
    *(_QWORD *)a1 = v10;
    *(_BYTE *)(a1 + 8) = 1;
    return result;
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  v8(v11, v2, v4);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t HE.RlweParams.protoSecurityLevel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = type metadata accessor for HE.RlweParams();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if ((_DWORD)result == *MEMORY[0x24BE2A070] || (_DWORD)result == *MEMORY[0x24BE2A078])
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else if ((_DWORD)result == *MEMORY[0x24BE2A020]
         || (_DWORD)result == *MEMORY[0x24BE2A040]
         || (_DWORD)result == *MEMORY[0x24BE2A030]
         || (_DWORD)result == *MEMORY[0x24BE2A018]
         || (_DWORD)result == *MEMORY[0x24BE2A010]
         || (_DWORD)result == *MEMORY[0x24BE2A008]
         || (_DWORD)result == *MEMORY[0x24BE2A000]
         || (_DWORD)result == *MEMORY[0x24BE2A060]
         || (_DWORD)result == *MEMORY[0x24BE2A068]
         || (_DWORD)result == *MEMORY[0x24BE2A058]
         || (_DWORD)result == *MEMORY[0x24BE2A038]
         || (_DWORD)result == *MEMORY[0x24BE2A048]
         || (v13 = v4, (_DWORD)result == *MEMORY[0x24BE2A050])
         || (_DWORD)result == *MEMORY[0x24BE2A028])
  {
    *(_QWORD *)a1 = 1;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    if (one-time initialization token for daemon != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.daemon);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_237BC8000, v9, v10, "Unknown encryption parameters", v11, 2u);
      MEMORY[0x23B822DA8](v11, -1, -1);
    }

    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v6, v3);
  }
  return result;
}

uint64_t HE.EncryptionParams.protoSecurityLevel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for HE.RlweParams();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  HE.EncryptionParams.rlweParams.getter();
  HE.RlweParams.protoSecurityLevel()(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t HE.EncryptionParams.proto()()
{
  return PEC.SerializedCiphertextCoeffMatrix.proto()(type metadata accessor for AspireHeEncryptionParameters, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
}

uint64_t closure #1 in HE.EncryptionParams.proto()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = type metadata accessor for HE.Scheme();
  v28 = *(_QWORD *)(v31 - 8);
  v2 = MEMORY[0x24BDAC7A8](v31);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - v5;
  v7 = type metadata accessor for HE.RlweParams();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v27 - v12;
  HE.EncryptionParams.rlweParams.getter();
  v14 = HE.RlweParams.polynomialDegree.getter();
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v13, v7);
  if (v14 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = v14;
    HE.EncryptionParams.rlweParams.getter();
    v16 = HE.RlweParams.plaintextModulus.getter();
    v15(v11, v7);
    *(_QWORD *)(a1 + 8) = v16;
    HE.EncryptionParams.rlweParams.getter();
    v17 = HE.RlweParams.coefficientModuli.getter();
    v15(v11, v7);
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 1;
    HE.EncryptionParams.rlweParams.getter();
    HE.RlweParams.protoSecurityLevel()((uint64_t)&v29);
    v15(v11, v7);
    v18 = v30;
    *(_QWORD *)(a1 + 40) = v29;
    *(_BYTE *)(a1 + 48) = v18;
    HE.EncryptionParams.scheme.getter();
    v19 = v28;
    v20 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    v21 = v31;
    v20(v4, v6, v31);
    v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v4, v21);
    if (v22 == *MEMORY[0x24BE2A1C8])
    {
      v23 = 1;
LABEL_6:
      result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v6, v21);
      *(_QWORD *)(a1 + 56) = v23;
      *(_BYTE *)(a1 + 64) = 1;
      return result;
    }
    if (v22 == *MEMORY[0x24BE2A1D0])
    {
      v23 = 2;
      goto LABEL_6;
    }
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    v20(v25, v6, v21);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    v26 = *(void (**)(char *, uint64_t))(v19 + 8);
    v26(v4, v21);
    return ((uint64_t (*)(char *, uint64_t))v26)(v6, v21);
  }
  return result;
}

uint64_t AspireHeEncryptionParameters.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v22[1] = a1;
  v24 = type metadata accessor for HE.RlweParams();
  v23 = *(_QWORD *)(v24 - 8);
  v2 = MEMORY[0x24BDAC7A8](v24);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v22 - v5;
  v7 = type metadata accessor for HE.Scheme();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v22 - v12;
  v14 = *(_QWORD *)(v1 + 56);
  v15 = *(unsigned __int8 *)(v1 + 64);
  if (v15 == 1 && v14)
  {
    v16 = (unsigned int *)MEMORY[0x24BE2A1C8];
    if (v14 != 1)
      v16 = (unsigned int *)MEMORY[0x24BE2A1D0];
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))((char *)v22 - v12, *v16, v7);
    v17 = v22[2];
    AspireHeEncryptionParameters.rlweParams()((uint64_t)v6);
    v18 = v24;
    v19 = v23;
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v4, v6, v24);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
      HE.EncryptionParams.init(rlweParams:scheme:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
  else
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    *(_QWORD *)v21 = v14;
    *(_BYTE *)(v21 + 8) = v15;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

uint64_t closure #1 in AspireHeEncryptionParameters.rlweParams()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  BOOL v26;
  BOOL v27;
  char *v28;
  _QWORD *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;

  v4 = type metadata accessor for HE.SecurityLevel();
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v56 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v57 = (char *)&v54 - v7;
  v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v59 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v61 = (uint64_t)&v54 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v54 - v13;
  v15 = type metadata accessor for HE.RlweParams();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v63 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v58 = (char *)&v54 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v54 - v21;
  v23 = HE.RlweParams.polynomialDegree.getter();
  v24 = *a2;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v62 = v15;
  v60 = v25;
  v25(v22, a1, v15);
  outlined init with copy of SecretKey((uint64_t)a2, (uint64_t)v14, type metadata accessor for AspireHeEncryptionParameters);
  v26 = 0;
  if (v23 < 0)
  {
    v28 = v58;
  }
  else
  {
    v27 = v23 == v24;
    v28 = v58;
    if (v27)
    {
      v29 = (_QWORD *)HE.RlweParams.coefficientModuli.getter();
      v26 = specialized static Array<A>.== infix(_:_:)(v29, *((_QWORD **)v14 + 2));
      swift_bridgeObjectRelease();
    }
  }
  v30 = *(void (**)(char *, uint64_t))(v16 + 8);
  v31 = v62;
  v30(v22, v62);
  v32 = (uint64_t)v14;
  v33 = v31;
  outlined destroy of AspireApiPECConfig(v32, type metadata accessor for AspireHeEncryptionParameters);
  v34 = v60;
  v60(v28, a1, v31);
  v35 = v61;
  outlined init with copy of SecretKey((uint64_t)a2, v61, type metadata accessor for AspireHeEncryptionParameters);
  if (v26)
  {
    v36 = (char *)v30;
    v37 = v34;
    v38 = HE.RlweParams.plaintextModulus.getter();
    v58 = v36;
    ((void (*)(char *, uint64_t))v36)(v28, v33);
    v39 = v35;
    v40 = *(_QWORD *)(v35 + 8);
    outlined destroy of AspireApiPECConfig(v39, type metadata accessor for AspireHeEncryptionParameters);
    v41 = v63;
    v37(v63, a1, v33);
    v42 = v59;
    outlined init with copy of SecretKey((uint64_t)a2, v59, type metadata accessor for AspireHeEncryptionParameters);
    if (v38 == v40)
    {
      v43 = v57;
      HE.RlweParams.securityLevel.getter();
      v45 = v54;
      v44 = v55;
      v46 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
      v47 = v56;
      v46(v56, v43, v55);
      v48 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v47, v44);
      if (v48 == *MEMORY[0x24BE2A0C0])
      {
        v35 = 0;
        v30 = (void (*)(char *, uint64_t))v58;
      }
      else
      {
        v30 = (void (*)(char *, uint64_t))v58;
        if (v48 != *MEMORY[0x24BE2A0B0])
        {
          type metadata accessor for CipherMLError();
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
          swift_allocError();
          v46(v53, v57, v44);
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          v35 = *(_QWORD *)(v45 + 8);
          ((void (*)(char *, uint64_t))v35)(v56, v44);
          ((void (*)(char *, uint64_t))v35)(v57, v44);
          outlined destroy of AspireApiPECConfig(v42, type metadata accessor for AspireHeEncryptionParameters);
          v30(v63, v33);
          return v35 & 1;
        }
        v35 = 1;
      }
      v49 = *(unsigned __int8 *)(v42 + 48);
      v50 = *(_QWORD *)(v42 + 40);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v57, v44);
      v51 = v50 != 0;
      if (!v49)
        v51 = v50;
      LOBYTE(v35) = v35 == v51;
      v41 = v63;
    }
    else
    {
      LOBYTE(v35) = 0;
      v30 = (void (*)(char *, uint64_t))v58;
    }
  }
  else
  {
    outlined destroy of AspireApiPECConfig(v35, type metadata accessor for AspireHeEncryptionParameters);
    v30(v28, v33);
    v41 = v63;
    v34(v63, a1, v33);
    v42 = v59;
    outlined init with copy of SecretKey((uint64_t)a2, v59, type metadata accessor for AspireHeEncryptionParameters);
    LOBYTE(v35) = 0;
  }
  outlined destroy of AspireApiPECConfig(v42, type metadata accessor for AspireHeEncryptionParameters);
  v30(v41, v33);
  return v35 & 1;
}

uint64_t HE.SerializedCiphertext.proto()()
{
  return PEC.SerializedCiphertextCoeffMatrix.proto()(type metadata accessor for AspireHeSerializedCiphertext, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
}

uint64_t closure #1 in HE.SerializedCiphertext.proto()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v26;
  uint64_t v27;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HE.SerializedCiphertext();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == *MEMORY[0x24BE2A190])
  {
    v27 = a1;
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    v12 = *v10;
    v13 = v10[1];
    v15 = v10[2];
    v14 = v10[3];
    v16 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
    MEMORY[0x24BDAC7A8](v16);
    *(&v26 - 4) = v12;
    *(&v26 - 3) = v13;
    *(&v26 - 2) = v15;
    *(&v26 - 1) = v14;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedSeededCiphertext and conformance AspireHeSerializedSeededCiphertext, v17, (uint64_t)&protocol conformance descriptor for AspireHeSerializedSeededCiphertext);
    static Message.with(_:)();
    outlined consume of Data._Representation(v12, v13);
    outlined consume of Data._Representation(v15, v14);
    v18 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
LABEL_5:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 0, 1, v18);
    return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, v27, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  }
  if (v11 == *MEMORY[0x24BE2A188])
  {
    v27 = a1;
    (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
    v19 = *v10;
    v20 = v10[1];
    v22 = v10[2];
    v21 = v10[3];
    v23 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
    MEMORY[0x24BDAC7A8](v23);
    *(&v26 - 4) = v19;
    *(&v26 - 3) = v20;
    *(&v26 - 2) = v22;
    *(&v26 - 1) = v21;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedFullCiphertext and conformance AspireHeSerializedFullCiphertext, v24, (uint64_t)&protocol conformance descriptor for AspireHeSerializedFullCiphertext);
    static Message.with(_:)();
    outlined consume of Data._Representation(v19, v20);
    swift_bridgeObjectRelease();
    v18 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
    goto LABEL_5;
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t closure #1 in closure #1 in HE.SerializedCiphertext.proto()(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  v10 = *a1;
  v11 = a1[1];
  outlined copy of Data._Representation(a2, a3);
  outlined consume of Data._Representation(v10, v11);
  *a1 = a2;
  a1[1] = a3;
  v12 = a1[2];
  v13 = a1[3];
  outlined copy of Data._Representation(a4, a5);
  result = outlined consume of Data._Representation(v12, v13);
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t closure #2 in closure #1 in HE.SerializedCiphertext.proto()(uint64_t *a1, uint64_t a2, unint64_t a3, int64_t *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t result;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v10 = *a1;
  v11 = a1[1];
  outlined copy of Data._Representation(a2, a3);
  outlined consume of Data._Representation(v10, v11);
  *a1 = a2;
  a1[1] = a3;
  v12 = a4[2];
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
  {
LABEL_7:
    result = swift_bridgeObjectRelease();
    a1[2] = v13;
    a1[3] = a5;
    return result;
  }
  v24 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
  v14 = a4[4];
  if ((v14 & 0x8000000000000000) == 0 && !HIDWORD(v14))
  {
    v13 = v24;
    v16 = *(_QWORD *)(v24 + 16);
    v15 = *(_QWORD *)(v24 + 24);
    v17 = v16 + 1;
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v17, 1);
      v13 = v24;
    }
    *(_QWORD *)(v13 + 16) = v17;
    *(_DWORD *)(v13 + 4 * v16 + 32) = v14;
    v18 = v12 - 1;
    if (!v18)
      goto LABEL_7;
    v20 = v16 + 9;
    v21 = (unint64_t *)(a4 + 5);
    while (1)
    {
      v22 = *v21;
      if ((*v21 & 0x8000000000000000) != 0 || HIDWORD(v22))
        break;
      v23 = *(_QWORD *)(v13 + 24);
      if (v20 - 8 >= v23 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v20 - 7, 1);
      *(_QWORD *)(v13 + 16) = v20 - 7;
      *(_DWORD *)(v13 + 4 * v20++) = v22;
      ++v21;
      if (!--v18)
        goto LABEL_7;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AspireHeSerializedCiphertext.cryptokit()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v1;
  v5 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3, (uint64_t)v13, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  v14 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SecretKey((uint64_t)v13, (uint64_t)v7, type metadata accessor for AspireHeSerializedFullCiphertext);
      v16 = *v7;
      v17 = v7[1];
      v18 = v7[2];
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        v35 = *v7;
        v36 = v2;
        v34 = v17;
        outlined copy of Data._Representation(v16, v17);
        v37 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
        v20 = 0;
        v21 = v37;
        v22 = *(_QWORD *)(v37 + 16);
        do
        {
          v23 = *(unsigned int *)(v18 + 4 * v20 + 32);
          v37 = v21;
          v24 = *(_QWORD *)(v21 + 24);
          if (v22 >= v24 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v22 + 1, 1);
            v21 = v37;
          }
          ++v20;
          *(_QWORD *)(v21 + 16) = v22 + 1;
          *(_QWORD *)(v21 + 8 * v22++ + 32) = v23;
        }
        while (v19 != v20);
        swift_bridgeObjectRelease();
        v16 = v35;
        v17 = v34;
      }
      else
      {
        outlined copy of Data._Representation(*v7, v7[1]);
        v21 = MEMORY[0x24BEE4AF8];
      }
      v30 = v7[3];
      outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireHeSerializedFullCiphertext);
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v21;
      a1[3] = v30;
      v29 = (unsigned int *)MEMORY[0x24BE2A188];
    }
    else
    {
      outlined init with take of SecretKey((uint64_t)v13, (uint64_t)v10, type metadata accessor for AspireHeSerializedSeededCiphertext);
      v25 = *v10;
      v26 = v10[1];
      v27 = v10[2];
      v28 = v10[3];
      outlined copy of Data._Representation(*v10, v26);
      outlined copy of Data._Representation(v27, v28);
      outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireHeSerializedSeededCiphertext);
      *a1 = v25;
      a1[1] = v26;
      a1[2] = v27;
      a1[3] = v28;
      v29 = (unsigned int *)MEMORY[0x24BE2A190];
    }
    v31 = *v29;
    v32 = type metadata accessor for HE.SerializedCiphertext();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(a1, v31, v32);
  }
}

uint64_t Array<A>.proto()()
{
  type metadata accessor for AspireHeSerializedCiphertextVec(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
  return static Message.with(_:)();
}

uint64_t closure #1 in Array<A>.proto()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = type metadata accessor for HE.SerializedCiphertext();
  v5 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v28 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v24 = a1;
    v31 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = v5;
    v14 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v15 = *(_QWORD *)(v13 + 72);
    v27 = v13;
    v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v25 = v15;
    v26 = v16;
    while (1)
    {
      v17 = v30;
      v18 = v26(v7, v14, v30);
      MEMORY[0x24BDAC7A8](v18);
      *(&v23 - 2) = (uint64_t)v7;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, v19, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
      static Message.with(_:)();
      if (v2)
        break;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v17);
      v12 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v31;
      }
      v21 = *(_QWORD *)(v12 + 16);
      v20 = *(_QWORD *)(v12 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v12 = v31;
      }
      *(_QWORD *)(v12 + 16) = v21 + 1;
      outlined init with take of SecretKey((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v21, type metadata accessor for AspireHeSerializedCiphertext);
      v14 += v25;
      if (!--v11)
      {
        a1 = v24;
        goto LABEL_11;
      }
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v17);
    return swift_release();
  }
  else
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *a1 = v12;
  }
  return result;
}

uint64_t AspireHeSerializedCiphertextVec.cryptokit()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for HE.SerializedCiphertext();
  v6 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v8 = (_QWORD *)((char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *v0;
  v10 = *(_QWORD *)(*v0 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v20 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v12 = *(unsigned __int8 *)(v3 + 80);
    v17[1] = v9;
    v13 = v9 + ((v12 + 32) & ~v12);
    v18 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      outlined init with copy of SecretKey(v13, (uint64_t)v5, type metadata accessor for AspireHeSerializedCiphertext);
      AspireHeSerializedCiphertext.cryptokit()(v8);
      outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireHeSerializedCiphertext);
      v11 = v20;
      if (v1)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v11 = v20;
      }
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v11 = v20;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v6 + 32))(v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v15, v8, v19);
      v20 = v11;
      v13 += v18;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v11;
}

uint64_t HE.SerializedGaloisKey.proto()()
{
  return PEC.SerializedCiphertextCoeffMatrix.proto()(type metadata accessor for AspireHeSerializedGaloisKey, &lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
}

uint64_t closure #1 in HE.SerializedGaloisKey.proto()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;

  v2 = v1;
  v46 = a1;
  v3 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v39 - v7;
  v9 = HE.SerializedGaloisKey.galoisKey.getter();
  v10 = 0;
  v11 = *(_QWORD *)(v9 + 64);
  v39 = v9 + 64;
  v43 = v9;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v40 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v45 = (v14 - 1) & v14;
      v16 = __clz(__rbit64(v14)) | (v10 << 6);
    }
    else
    {
      v17 = __OFADD__(v10++, 1);
      if (v17)
        goto LABEL_38;
      if (v10 >= v40)
        return swift_release();
      v18 = *(_QWORD *)(v39 + 8 * v10);
      if (!v18)
      {
        v19 = v10 + 1;
        if (v10 + 1 >= v40)
          return swift_release();
        v18 = *(_QWORD *)(v39 + 8 * v19);
        if (!v18)
        {
          v19 = v10 + 2;
          if (v10 + 2 >= v40)
            return swift_release();
          v18 = *(_QWORD *)(v39 + 8 * v19);
          if (!v18)
          {
            v19 = v10 + 3;
            if (v10 + 3 >= v40)
              return swift_release();
            v18 = *(_QWORD *)(v39 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                v10 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_39;
                if (v10 >= v40)
                  return swift_release();
                v18 = *(_QWORD *)(v39 + 8 * v10);
                ++v19;
                if (v18)
                  goto LABEL_18;
              }
            }
          }
        }
        v10 = v19;
      }
LABEL_18:
      v45 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v10 << 6);
    }
    v20 = *(unsigned int *)(*(_QWORD *)(v43 + 48) + 4 * v16);
    v21 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v16);
    MEMORY[0x24BDAC7A8](v9);
    *(&v39 - 2) = v21;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedKeySwitchKey and conformance AspireHeSerializedKeySwitchKey, type metadata accessor for AspireHeSerializedKeySwitchKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedKeySwitchKey);
    swift_bridgeObjectRetain();
    static Message.with(_:)();
    swift_bridgeObjectRelease();
    if (v2)
      return swift_release();
    v44 = v10;
    v22 = (uint64_t)v6;
    outlined init with take of SecretKey((uint64_t)v8, (uint64_t)v6, type metadata accessor for AspireHeSerializedKeySwitchKey);
    v23 = v46;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47 = (_QWORD *)*v23;
    v25 = v47;
    *v23 = 0x8000000000000000;
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
    v28 = v25[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v25[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v34 = v47;
        if ((v26 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v34 = v47;
        if ((v31 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_40;
      v27 = v32;
      v34 = v47;
      if ((v31 & 1) != 0)
      {
LABEL_4:
        v15 = v34[7] + *(_QWORD *)(v41 + 72) * v27;
        v6 = (char *)v22;
        outlined assign with take of AspireHeSerializedKeySwitchKey(v22, v15);
        goto LABEL_5;
      }
    }
    v34[(v27 >> 6) + 8] |= 1 << v27;
    *(_QWORD *)(v34[6] + 8 * v27) = v20;
    v35 = v34[7] + *(_QWORD *)(v41 + 72) * v27;
    v6 = (char *)v22;
    outlined init with take of SecretKey(v22, v35, type metadata accessor for AspireHeSerializedKeySwitchKey);
    v36 = v34[2];
    v17 = __OFADD__(v36, 1);
    v37 = v36 + 1;
    if (v17)
      goto LABEL_37;
    v34[2] = v37;
LABEL_5:
    *v46 = v34;
    v9 = swift_bridgeObjectRelease();
    v2 = 0;
    v10 = v44;
    v14 = v45;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in HE.SerializedGaloisKey.proto()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t result;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;

  v5 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a2;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, v9, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
  result = static Message.with(_:)();
  if (!v2)
  {
    v11 = a1 + *(int *)(type metadata accessor for AspireHeSerializedKeySwitchKey(0) + 20);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v11, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined init with take of SecretKey((uint64_t)v8, v11, type metadata accessor for AspireHeSerializedCiphertextVec);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
  }
  return result;
}

uint64_t HE.SerializedRelinKey.proto()()
{
  return PEC.SerializedCiphertextCoeffMatrix.proto()(type metadata accessor for AspireHeSerializedRelinKey, &lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
}

uint64_t closure #1 in HE.SerializedRelinKey.proto()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
  MEMORY[0x24BDAC7A8](v1);
  v18 = (uint64_t)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = HE.SerializedRelinKey.relinKey.getter();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, type metadata accessor for AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
  v11 = v20;
  static Message.with(_:)();
  result = swift_bridgeObjectRelease();
  if (!v11)
  {
    v13 = type metadata accessor for AspireHeSerializedRelinKey(0);
    v14 = v18;
    v15 = v17 + *(int *)(v13 + 20);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v15, v18, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v14, 1, v3) == 1)
    {
      UnknownStorage.init()();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(&v6[*(int *)(v3 + 20)], 1, 1, v7);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v14, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    }
    else
    {
      outlined init with take of SecretKey(v14, (uint64_t)v6, type metadata accessor for AspireHeSerializedKeySwitchKey);
    }
    v16 = (uint64_t)&v6[*(int *)(v3 + 20)];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, &demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    outlined init with take of SecretKey((uint64_t)v10, v16, type metadata accessor for AspireHeSerializedCiphertextVec);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v15, &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
    outlined init with take of SecretKey((uint64_t)v6, v15, type metadata accessor for AspireHeSerializedKeySwitchKey);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
  }
  return result;
}

uint64_t closure #1 in HE.SerializedEvaluationKey.proto()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v34 = a1;
  v36 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v33 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HE.SerializedRelinKey?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HE.SerializedRelinKey();
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v38 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HE.SerializedGaloisKey?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for HE.SerializedGaloisKey();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a2;
  HE.SerializedEvaluationKey.galoisKey.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for HE.SerializedGaloisKey?);
  }
  else
  {
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
    MEMORY[0x24BDAC7A8](v20);
    *(&v33 - 2) = (uint64_t)v19;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedGaloisKey and conformance AspireHeSerializedGaloisKey, type metadata accessor for AspireHeSerializedGaloisKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedGaloisKey);
    v21 = v41;
    static Message.with(_:)();
    if (v21)
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v41 = 0;
    v23 = v34 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 20);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v23, &demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
    outlined init with take of SecretKey((uint64_t)v12, v23, type metadata accessor for AspireHeSerializedGaloisKey);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  HE.SerializedEvaluationKey.relinKey.getter();
  v25 = v39;
  v24 = v40;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v6, 1, v40);
  v27 = v38;
  if (v26 == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for HE.SerializedRelinKey?);
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))(v38, v6, v24);
  MEMORY[0x24BDAC7A8](v28);
  *(&v33 - 2) = (uint64_t)v27;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedRelinKey and conformance AspireHeSerializedRelinKey, type metadata accessor for AspireHeSerializedRelinKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedRelinKey);
  v30 = (uint64_t)v35;
  v29 = v36;
  v31 = v41;
  static Message.with(_:)();
  if (!v31)
  {
    v32 = v34 + *(int *)(type metadata accessor for AspireHeSerializedEvaluationKey(0) + 24);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
    outlined init with take of SecretKey(v30, v32, type metadata accessor for AspireHeSerializedRelinKey);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v32, 0, 1, v29);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
}

uint64_t PIR.PirParams.proto()()
{
  return PEC.SerializedCiphertextCoeffMatrix.proto()(type metadata accessor for AspirePirPirParameters, &lazy protocol witness table cache variable for type AspirePirPirParameters and conformance AspirePirPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirPirParameters);
}

uint64_t closure #1 in PIR.PirParams.proto()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;

  v60 = a1;
  v59 = type metadata accessor for PIR.PirAlgorithm();
  v3 = *(_QWORD *)(v59 - 8);
  v4 = MEMORY[0x24BDAC7A8](v59);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v56 - v7;
  v9 = type metadata accessor for HE.EncryptionParams();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AspireHeEncryptionParameters(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a2;
  PIR.PirParams.encryptionParams.getter();
  v62 = v12;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  v16 = v64;
  static Message.with(_:)();
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v56 = v6;
  v57 = v8;
  v58 = v3;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v18 = v60;
  AspirePirPirParameters.encryptionParameters.setter((uint64_t)v15);
  v19 = PIR.PirParams.entriesCount.getter();
  if (v19 < 0)
    goto LABEL_32;
  v20 = v19;
  v21 = v18;
  v22 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v23 = swift_retain();
    *(_QWORD *)(v18 + v22) = AspirePirPirParameters._StorageClass.init(copying:)(v23);
    swift_release();
  }
  v24 = (uint64_t *)(*(_QWORD *)(v18 + v22)
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  *v24 = v20;
  v25 = PIR.PirParams.entrySize.getter();
  if (v25 < 0)
    goto LABEL_32;
  v26 = v25;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v27 = swift_retain();
    *(_QWORD *)(v18 + v22) = AspirePirPirParameters._StorageClass.init(copying:)(v27);
    swift_release();
  }
  v64 = 0;
  v28 = v22;
  v29 = (uint64_t *)(*(_QWORD *)(v18 + v22)
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  *v29 = v26;
  v30 = PIR.PirParams.dimensions.getter();
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v63 = MEMORY[0x24BEE4AF8];
    v32 = v30;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
    v33 = *(_QWORD *)(v32 + 32);
    if ((v33 & 0x8000000000000000) == 0)
    {
      v34 = v32;
      v35 = v63;
      v37 = *(_QWORD *)(v63 + 16);
      v36 = *(_QWORD *)(v63 + 24);
      v38 = v37 + 1;
      if (v37 >= v36 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v38, 1);
        v34 = v32;
        v35 = v63;
      }
      *(_QWORD *)(v35 + 16) = v38;
      *(_QWORD *)(v35 + 8 * v37 + 32) = v33;
      v39 = v31 - 1;
      if (!v39)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        v21 = v60;
        goto LABEL_16;
      }
      v50 = v37 + 5;
      v51 = (uint64_t *)(v34 + 40);
      while (1)
      {
        v52 = *v51;
        if (*v51 < 0)
          break;
        v63 = v35;
        v53 = *(_QWORD *)(v35 + 24);
        if (v50 - 4 >= v53 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v50 - 3, 1);
          v35 = v63;
        }
        *(_QWORD *)(v35 + 16) = v50 - 3;
        *(_QWORD *)(v35 + 8 * v50++) = v52;
        ++v51;
        if (!--v39)
          goto LABEL_14;
      }
    }
LABEL_32:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  v35 = MEMORY[0x24BEE4AF8];
LABEL_16:
  v40 = v28;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v42 = v56;
  v43 = v57;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v44 = swift_retain();
    *(_QWORD *)(v21 + v40) = AspirePirPirParameters._StorageClass.init(copying:)(v44);
    swift_release();
  }
  v45 = (_QWORD *)(*(_QWORD *)(v21 + v40)
                 + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  *v45 = v35;
  swift_bridgeObjectRelease();
  PIR.PirParams.algorithm.getter();
  v47 = v58;
  v46 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v42, v43, v59);
  v48 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v42, v46);
  v49 = 0;
  if (v48 == *MEMORY[0x24BE2A2E0])
    goto LABEL_29;
  if (v48 != *MEMORY[0x24BE2A2D8])
  {
    if (v48 == *MEMORY[0x24BE2A2D0])
    {
      v49 = 2;
      goto LABEL_29;
    }
LABEL_33:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v49 = 1;
LABEL_29:
  (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v46);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v54 = swift_retain();
    *(_QWORD *)(v21 + v40) = AspirePirPirParameters._StorageClass.init(copying:)(v54);
    swift_release();
  }
  v55 = *(_QWORD *)(v21 + v40)
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
  result = swift_beginAccess();
  *(_QWORD *)v55 = v49;
  *(_BYTE *)(v55 + 8) = 1;
  return result;
}

uint64_t PIR.PirAlgorithm.proto()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = type metadata accessor for PIR.PirAlgorithm();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  v8 = 0;
  if ((_DWORD)result == *MEMORY[0x24BE2A2E0])
    goto LABEL_6;
  if ((_DWORD)result == *MEMORY[0x24BE2A2D8])
  {
    v8 = 1;
LABEL_6:
    *(_QWORD *)a1 = v8;
    *(_BYTE *)(a1 + 8) = 1;
    return result;
  }
  if ((_DWORD)result == *MEMORY[0x24BE2A2D0])
  {
    v8 = 2;
    goto LABEL_6;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AspirePirPirAlgorithm.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (*(_BYTE *)(v1 + 8) == 1)
  {
    if (*(_QWORD *)v1)
    {
      if (*(_QWORD *)v1 == 1)
        v3 = (unsigned int *)MEMORY[0x24BE2A2D8];
      else
        v3 = (unsigned int *)MEMORY[0x24BE2A2D0];
    }
    else
    {
      v3 = (unsigned int *)MEMORY[0x24BE2A2E0];
    }
    v4 = *v3;
    v5 = type metadata accessor for PIR.PirAlgorithm();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a1, v4, v5);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t AspireSimilarityPlaintextPacking.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int EnumCaseMultiPayload;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v19 - v12;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v13, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    outlined init with take of SecretKey((uint64_t)v13, (uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
        v16 = (unsigned int *)MEMORY[0x24BE2A218];
      else
        v16 = (unsigned int *)MEMORY[0x24BE2A208];
    }
    else
    {
      v16 = (unsigned int *)MEMORY[0x24BE2A210];
    }
    v17 = *v16;
    v18 = type metadata accessor for PEC.PlaintextPacking();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(a1, v17, v18);
    return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
  }
}

uint64_t PEC.PlaintextPacking.proto()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t result;
  uint64_t v7;

  v1 = type metadata accessor for PEC.PlaintextPacking();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x24BE2A208] || v5 == *MEMORY[0x24BE2A210] || v5 == *MEMORY[0x24BE2A218])
  {
    type metadata accessor for AspireSimilarityPlaintextPacking(0);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
    return static Message.with(_:)();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in PEC.PlaintextPacking.proto()(uint64_t a1)
{
  return closure #1 in PEC.PlaintextPacking.proto()(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v5 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, a1, &demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
}

uint64_t closure #2 in PEC.PlaintextPacking.proto()(uint64_t a1)
{
  return closure #1 in PEC.PlaintextPacking.proto()(a1);
}

uint64_t closure #3 in PEC.PlaintextPacking.proto()(uint64_t a1)
{
  return closure #1 in PEC.PlaintextPacking.proto()(a1);
}

uint64_t AspireSimilaritySimilarityMetric.cryptokit()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v1 + 8) == 1)
  {
    v3 = *MEMORY[0x24BE2A258];
    v4 = type metadata accessor for PEC.SimilarityMetric();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(a1, v3, v4);
  }
  else
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

uint64_t closure #1 in PEC.SerializedCiphertextCoeffMatrix.proto()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v5 = type metadata accessor for HE.SerializedCiphertext();
  v52 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v50 = *(_QWORD *)(v8 - 8);
  v51 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for PEC.PlaintextPacking();
  v42 = *(_QWORD *)(v44 - 8);
  v11 = MEMORY[0x24BDAC7A8](v44);
  v40 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v45 = (char *)&v37 - v13;
  v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v41 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a2;
  v17 = PEC.SerializedCiphertextCoeffMatrix.rowCount.getter();
  if ((v17 & 0x8000000000000000) != 0
    || HIDWORD(v17)
    || (*(_DWORD *)a1 = v17,
        v18 = PEC.SerializedCiphertextCoeffMatrix.colCount.getter(),
        (v18 & 0x8000000000000000) != 0)
    || (v43 = v15, HIDWORD(v18)))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_21:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(_DWORD *)(a1 + 4) = v18;
  v19 = PEC.SerializedCiphertextCoeffMatrix.ciphertexts.getter();
  v20 = *(_QWORD *)(v19 + 16);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
LABEL_16:
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 8) = v26;
    v30 = v45;
    PEC.SerializedCiphertextCoeffMatrix.packing.getter();
    v31 = v42;
    v32 = v40;
    v33 = v44;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v40, v30, v44);
    v34 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v32, v33);
    if (v34 == *MEMORY[0x24BE2A208] || v34 == *MEMORY[0x24BE2A210] || v34 == *MEMORY[0x24BE2A218])
    {
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
      v35 = (uint64_t)v41;
      static Message.with(_:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v45, v33);
      v36 = a1 + *(int *)(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0) + 32);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      outlined init with take of SecretKey(v35, v36, type metadata accessor for AspireSimilarityPlaintextPacking);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v36, 0, 1, v14);
    }
    goto LABEL_21;
  }
  v37 = v14;
  v38 = a1;
  v53 = MEMORY[0x24BEE4AF8];
  v21 = v19;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  v22 = *(unsigned __int8 *)(v52 + 80);
  v39 = v21;
  v23 = v21 + ((v22 + 32) & ~v22);
  v47 = *(_QWORD *)(v52 + 72);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v48 = v5;
  while (1)
  {
    v24 = v49(v7, v23, v5);
    MEMORY[0x24BDAC7A8](v24);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, v25, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
    static Message.with(_:)();
    if (v2)
      break;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v5);
    v26 = v53;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1);
      v26 = v53;
    }
    v28 = *(_QWORD *)(v26 + 16);
    v27 = *(_QWORD *)(v26 + 24);
    if (v28 >= v27 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      v26 = v53;
    }
    *(_QWORD *)(v26 + 16) = v28 + 1;
    outlined init with take of SecretKey((uint64_t)v10, v26+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v28, type metadata accessor for AspireHeSerializedCiphertext);
    v5 = v48;
    v23 += v47;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      v14 = v37;
      a1 = v38;
      goto LABEL_16;
    }
  }
  (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HE.RlweParams>, (uint64_t (*)(_QWORD))MEMORY[0x24BE2A088]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireSimilaritySerializedCiphertextMatrix>, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[CMLSimilarityScore]>, &demangling cache variable for type metadata for [CMLSimilarityScore]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PEC.SerializedCiphertextCoeffMatrix>, (uint64_t (*)(_QWORD))MEMORY[0x24BE2A2C0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HE.SerializedCiphertext>, (uint64_t (*)(_QWORD))MEMORY[0x24BE2A198]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiRequest>, type metadata accessor for AspireApiRequest);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireHeSerializedCiphertext>, type metadata accessor for AspireHeSerializedCiphertext);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AMDPbHEQuery>, type metadata accessor for AMDPbHEQuery);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[HE.SerializedCiphertext]>, &demangling cache variable for type metadata for [HE.SerializedCiphertext]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiPECShardResponse>, type metadata accessor for AspireApiPECShardResponse);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TokenCache.CachedToken>, type metadata accessor for TokenCache.CachedToken);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiResponse>, type metadata accessor for AspireApiResponse);
  *v3 = result;
  return result;
}

uint64_t partial apply for closure #1 in AspireHeEncryptionParameters.rlweParams()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AspireHeEncryptionParameters.rlweParams()(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #1 in HE.EncryptionParams.proto()(uint64_t a1)
{
  return closure #1 in HE.EncryptionParams.proto()(a1);
}

uint64_t partial apply for closure #1 in HE.SerializedCiphertext.proto()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in HE.SerializedCiphertext.proto()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in Array<A>.proto()(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in Array<A>.proto()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in HE.SerializedGaloisKey.proto()(_QWORD *a1)
{
  return closure #1 in HE.SerializedGaloisKey.proto()(a1);
}

uint64_t partial apply for closure #1 in HE.SerializedRelinKey.proto()(uint64_t a1)
{
  return closure #1 in HE.SerializedRelinKey.proto()(a1);
}

uint64_t partial apply for closure #1 in PIR.PirParams.proto()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PIR.PirParams.proto()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in HE.SerializedGaloisKey.proto()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in HE.SerializedGaloisKey.proto()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined assign with take of AspireHeSerializedKeySwitchKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in closure #1 in HE.SerializedCiphertext.proto()(uint64_t *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in HE.SerializedCiphertext.proto()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(int64_t **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in HE.SerializedCiphertext.proto()(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in HE.SerializedCiphertext.proto()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t closure #1 in HE.EncryptionParams.proto()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in HE.EncryptionParams.proto()(a1);
}

uint64_t closure #1 in Array<A>.proto()partial apply(_QWORD *a1)
{
  return partial apply for closure #1 in Array<A>.proto()(a1);
}

uint64_t closure #1 in HE.SerializedCiphertext.proto()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in HE.SerializedCiphertext.proto()(a1);
}

uint64_t closure #1 in HE.SerializedRelinKey.proto()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in HE.SerializedRelinKey.proto()(a1);
}

uint64_t closure #1 in HE.SerializedGaloisKey.proto()partial apply(_QWORD *a1)
{
  return partial apply for closure #1 in HE.SerializedGaloisKey.proto()(a1);
}

uint64_t IndexPIRClient.secretKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SecretKey(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
}

uint64_t IndexPIRClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for IndexPIRClient();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 20), a1, type metadata accessor for AspireApiPIRConfig);
}

uint64_t type metadata accessor for IndexPIRClient()
{
  uint64_t result;

  result = type metadata singleton initialization cache for IndexPIRClient;
  if (!type metadata singleton initialization cache for IndexPIRClient)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t IndexPIRClient.configID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for IndexPIRClient() + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t IndexPIRClient.shardIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for IndexPIRClient() + 28));
}

uint64_t IndexPIRClient.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for IndexPIRClient() + 32);
  v4 = type metadata accessor for PIR.IndexPirClient();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t IndexPIRClient.init(secretKey:config:configID:shardIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD v58[2];
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v75 = a3;
  v76 = a4;
  v74 = a1;
  v63 = a5;
  v67 = type metadata accessor for HE.SerializedSecretKey();
  v65 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  v66 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PIR.IndexPirClient();
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v68 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PIR.PirAlgorithm();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v73 = (char *)v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for HE.EncryptionParams();
  MEMORY[0x24BDAC7A8](v20);
  v77 = (uint64_t)v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PIR.PirParams();
  v71 = *(_QWORD *)(v22 - 8);
  v72 = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v64 = (char *)v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v70 = (char *)v58 - v25;
  v26 = type metadata accessor for AspireApiPIRShardConfig(0);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v31 = (_QWORD *)((char *)v58 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((v29 & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v32 = *(_QWORD *)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 16) <= v29)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v69 = v27;
  v33 = v32 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  v34 = *(_QWORD *)(v28 + 72);
  v60 = v29;
  outlined init with copy of SecretKey(v33 + v34 * v29, (uint64_t)v31, type metadata accessor for AspireApiPIRShardConfig);
  v35 = type metadata accessor for AspireApiPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2 + *(int *)(v35 + 36), (uint64_t)v15, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = MEMORY[0x24BEE4AF8];
    *((_QWORD *)v19 + 3) = 0;
    v19[32] = 1;
    *((_QWORD *)v19 + 5) = 0;
    v19[48] = 1;
    *((_QWORD *)v19 + 7) = 0;
    v19[64] = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v15, (uint64_t)v19, type metadata accessor for AspireHeEncryptionParameters);
  }
  AspireHeEncryptionParameters.cryptokit()(v77);
  if (v5)
  {
    outlined consume of Data._Representation(v75, v76);
    outlined destroy of AspireApiPECConfig(v74, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for AspireHeEncryptionParameters);
    outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireApiPIRShardConfig);
    return outlined destroy of AspireApiPECConfig(a2, type metadata accessor for AspireApiPIRConfig);
  }
  outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for AspireHeEncryptionParameters);
  if (*(_BYTE *)(a2 + 16) != 1)
    goto LABEL_29;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v73, **((unsigned int **)&unk_2509AA3D0 + *(_QWORD *)(a2 + 8)), v10);
  v36 = *v31;
  if (*v31 < 0)
    goto LABEL_25;
  if (v31[1] < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v37 = v31[2];
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    v58[0] = v31[1];
    v58[1] = v36;
    v59 = a2;
    v78 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
    v39 = 0;
    v40 = v78;
    while (1)
    {
      v41 = *(_QWORD *)(v37 + 8 * v39 + 32);
      if (v41 < 0)
        break;
      v78 = v40;
      v43 = *(_QWORD *)(v40 + 16);
      v42 = *(_QWORD *)(v40 + 24);
      if (v43 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        v40 = v78;
      }
      ++v39;
      *(_QWORD *)(v40 + 16) = v43 + 1;
      *(_QWORD *)(v40 + 8 * v43 + 32) = v41;
      if (v38 == v39)
      {
        swift_bridgeObjectRelease();
        a2 = v59;
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_18:
  v45 = v71;
  v44 = v72;
  v46 = v70;
  if ((*(_QWORD *)(a2 + 24) & 0x8000000000000000) == 0)
  {
    v47 = (char *)v31 + *(int *)(v69 + 40);
    if ((v47[8] & 1) != 0 || (*(_QWORD *)v47 & 0x8000000000000000) == 0)
    {
      PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)();
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v64, v46, v44);
      v48 = type metadata accessor for SecretKey();
      v49 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v66, v74 + *(int *)(v48 + 20), v67);
      v50 = v68;
      PIR.IndexPirClient.init(pirParams:secretKey:)();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v72);
      outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireApiPIRShardConfig);
      v52 = v49;
      v53 = v63;
      outlined init with take of SecretKey(v52, v63, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      v54 = v50;
      v55 = (int *)type metadata accessor for IndexPIRClient();
      outlined init with take of SecretKey(a2, v53 + v55[5], type metadata accessor for AspireApiPIRConfig);
      v56 = (_QWORD *)(v53 + v55[6]);
      v57 = v76;
      *v56 = v75;
      v56[1] = v57;
      *(_QWORD *)(v53 + v55[7]) = v60;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v61 + 32))(v53 + v55[8], v54, v62);
    }
    goto LABEL_28;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t IndexPIRClient.constructPIRRequest(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexPIRClient();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_237D540E0;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(result + 32) = a1;
    v8 = PIR.IndexPirClient.query(indices:)();
    result = swift_bridgeObjectRelease();
    if (!v2)
    {
      MEMORY[0x24BDAC7A8](result);
      *(&v11 - 2) = v8;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
      static Message.with(_:)();
      swift_bridgeObjectRelease();
      v9 = type metadata accessor for AspireApiPIRRequest(0);
      MEMORY[0x24BDAC7A8](v9);
      *(&v11 - 2) = v1;
      *(&v11 - 1) = (uint64_t)v6;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, v10, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
      static Message.with(_:)();
      return outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspirePirEncryptedIndices);
    }
  }
  return result;
}

uint64_t closure #1 in IndexPIRClient.constructPIRRequest(with:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = type metadata accessor for HE.SerializedCiphertext();
  v5 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v28 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v24 = a1;
    v31 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = v5;
    v14 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v15 = *(_QWORD *)(v13 + 72);
    v27 = v13;
    v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v25 = v15;
    v26 = v16;
    while (1)
    {
      v17 = v30;
      v18 = v26(v7, v14, v30);
      MEMORY[0x24BDAC7A8](v18);
      *(&v23 - 2) = (uint64_t)v7;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, v19, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
      static Message.with(_:)();
      if (v2)
        break;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v17);
      v12 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v31;
      }
      v21 = *(_QWORD *)(v12 + 16);
      v20 = *(_QWORD *)(v12 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v12 = v31;
      }
      *(_QWORD *)(v12 + 16) = v21 + 1;
      outlined init with take of SecretKey((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v21, type metadata accessor for AspireHeSerializedCiphertext);
      v14 += v25;
      if (!--v11)
      {
        a1 = v24;
        goto LABEL_11;
      }
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v17);
    return swift_release();
  }
  else
  {
LABEL_11:
    result = swift_bridgeObjectRelease();
    *a1 = v12;
    a1[1] = 1;
  }
  return result;
}

uint64_t closure #2 in IndexPIRClient.constructPIRRequest(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AspirePirEncryptedIndices(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for IndexPIRClient();
  v15 = *(_QWORD *)(a2 + *(int *)(v14 + 28));
  if ((v15 & 0x8000000000000000) != 0 || (v28 = v14, v29 = v7, v30 = a2, HIDWORD(v15)))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_DWORD *)a1 = v15;
    outlined init with copy of SecretKey(a3, (uint64_t)v13, type metadata accessor for AspirePirEncryptedIndices);
    v16 = type metadata accessor for AspireApiPIRRequest(0);
    v17 = a1 + *(int *)(v16 + 28);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v17, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined init with take of SecretKey((uint64_t)v13, v17, type metadata accessor for AspirePirEncryptedIndices);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
    MEMORY[0x24BDAC7A8](v18);
    v19 = v30;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
    static Message.with(_:)();
    v20 = a1 + *(int *)(v16 + 32);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined init with take of SecretKey((uint64_t)v9, v20, type metadata accessor for AspireApiEvaluationKeyMetadata);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v20, 0, 1, v6);
    v21 = (uint64_t *)(v19 + *(int *)(v28 + 24));
    v22 = *v21;
    v23 = v21[1];
    v24 = *(_QWORD *)(a1 + 8);
    v25 = *(_QWORD *)(a1 + 16);
    outlined copy of Data._Representation(*v21, v23);
    result = outlined consume of Data._Representation(v24, v25);
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = v23;
  }
  return result;
}

uint64_t closure #1 in closure #2 in IndexPIRClient.constructPIRRequest(with:)(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  *a1 = *a2;
  v3 = (char *)a2 + *(int *)(type metadata accessor for IndexPIRClient() + 20);
  v4 = *((_QWORD *)v3 + 4);
  v5 = *((_QWORD *)v3 + 5);
  v6 = a1[1];
  v7 = a1[2];
  outlined copy of Data._Representation(v4, v5);
  result = outlined consume of Data._Representation(v6, v7);
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t IndexPIRClient.decryptPIRResponse(_:index:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  int64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v4 = v3;
  v7 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v10);
  v73 = (uint64_t *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v65 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v82 = (uint64_t)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for HE.SerializedCiphertext();
  v80 = *(_QWORD *)(v17 - 8);
  v81 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t *)((char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v69 = (uint64_t)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = MEMORY[0x24BEE4AF8];
  if (v24)
  {
    v59 = v2;
    v60 = a2;
    v61 = v4;
    v85 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    v64 = v24;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    v26 = 0;
    v27 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v62 = v23;
    v68 = v23 + v27;
    v67 = *(_QWORD *)(v21 + 72);
    v28 = *MEMORY[0x24BE2A190];
    v71 = *MEMORY[0x24BE2A188];
    v72 = v28;
    v77 = v14;
    v70 = v9;
    while (1)
    {
      v29 = v69;
      outlined init with copy of SecretKey(v68 + v67 * v26, v69, type metadata accessor for AspireHeSerializedCiphertextVec);
      v30 = *(_QWORD *)v29;
      v31 = *(_QWORD *)(*(_QWORD *)v29 + 16);
      if (v31)
        break;
LABEL_22:
      outlined destroy of AspireApiPECConfig(v69, type metadata accessor for AspireHeSerializedCiphertextVec);
      v53 = v85;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v53 + 16) + 1, 1);
        v53 = v85;
      }
      v54 = v64;
      v56 = *(_QWORD *)(v53 + 16);
      v55 = *(_QWORD *)(v53 + 24);
      if (v56 >= v55 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
        v54 = v64;
        v53 = v85;
      }
      ++v26;
      *(_QWORD *)(v53 + 16) = v56 + 1;
      *(_QWORD *)(v53 + 8 * v56 + 32) = v25;
      v25 = MEMORY[0x24BEE4AF8];
      if (v26 == v54)
      {
        swift_bridgeObjectRelease();
        a2 = v60;
        goto LABEL_30;
      }
    }
    v63 = v26;
    v84 = v25;
    v32 = v30;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
    v33 = 0;
    v34 = *(unsigned __int8 *)(v65 + 80);
    v66 = v32;
    v79 = v32 + ((v34 + 32) & ~v34);
    v78 = *(_QWORD *)(v65 + 72);
    v76 = v31;
    while (1)
    {
      v35 = v82;
      outlined init with copy of SecretKey(v79 + v78 * v33, v82, type metadata accessor for AspireHeSerializedCiphertext);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, (uint64_t)v14, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      v36 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v14, 1, v36) == 1)
        break;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of SecretKey((uint64_t)v14, (uint64_t)v9, type metadata accessor for AspireHeSerializedFullCiphertext);
        v37 = *v9;
        v38 = v9[1];
        v39 = v9[2];
        v40 = *(_QWORD *)(v39 + 16);
        if (v40)
        {
          v74 = v9[1];
          v75 = v37;
          outlined copy of Data._Representation(v37, v38);
          v83 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
          v41 = 0;
          v42 = v83;
          v43 = *(_QWORD *)(v83 + 16);
          do
          {
            v44 = *(unsigned int *)(v39 + 4 * v41 + 32);
            v83 = v42;
            v45 = *(_QWORD *)(v42 + 24);
            if (v43 >= v45 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v43 + 1, 1);
              v42 = v83;
            }
            ++v41;
            *(_QWORD *)(v42 + 16) = v43 + 1;
            *(_QWORD *)(v42 + 8 * v43++ + 32) = v44;
          }
          while (v40 != v41);
          swift_bridgeObjectRelease();
          v9 = v70;
          v37 = v75;
          v31 = v76;
          v38 = v74;
        }
        else
        {
          outlined copy of Data._Representation(*v9, v9[1]);
          v42 = MEMORY[0x24BEE4AF8];
        }
        v49 = v9[3];
        outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireHeSerializedFullCiphertext);
        *v19 = v37;
        v19[1] = v38;
        v50 = v71;
      }
      else
      {
        v46 = v73;
        outlined init with take of SecretKey((uint64_t)v14, (uint64_t)v73, type metadata accessor for AspireHeSerializedSeededCiphertext);
        v47 = *v46;
        v48 = v46[1];
        v42 = v46[2];
        v49 = v46[3];
        outlined copy of Data._Representation(*v46, v48);
        outlined copy of Data._Representation(v42, v49);
        v31 = v76;
        outlined destroy of AspireApiPECConfig((uint64_t)v46, type metadata accessor for AspireHeSerializedSeededCiphertext);
        *v19 = v47;
        v19[1] = v48;
        v50 = v72;
      }
      v19[2] = v42;
      v19[3] = v49;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v80 + 104))(v19, v50, v81);
      outlined destroy of AspireApiPECConfig(v82, type metadata accessor for AspireHeSerializedCiphertext);
      v25 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v25 + 16) + 1, 1);
        v25 = v84;
      }
      v14 = v77;
      v52 = *(_QWORD *)(v25 + 16);
      v51 = *(_QWORD *)(v25 + 24);
      if (v52 >= v51 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
        v25 = v84;
      }
      ++v33;
      *(_QWORD *)(v25 + 16) = v52 + 1;
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v80 + 32))(v25+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(_QWORD *)(v80 + 72) * v52, v19, v81);
      v84 = v25;
      if (v33 == v31)
      {
        swift_bridgeObjectRelease();
        v26 = v63;
        goto LABEL_22;
      }
    }
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig(v82, type metadata accessor for AspireHeSerializedCiphertext);
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of AspireApiPECConfig(v69, type metadata accessor for AspireHeSerializedCiphertextVec);
    v57 = v85;
    swift_bridgeObjectRelease();
    swift_release();
    return v57;
  }
  v53 = MEMORY[0x24BEE4AF8];
LABEL_30:
  result = type metadata accessor for IndexPIRClient();
  if (*(_QWORD *)(v53 + 16))
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    if ((a2 & 0x8000000000000000) == 0)
    {
      v57 = PIR.IndexPirClient.decrypt(reply:index:)();
      swift_bridgeObjectRelease();
      return v57;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in IndexPIRClient.constructPIRRequest(with:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in IndexPIRClient.constructPIRRequest(with:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #2 in IndexPIRClient.constructPIRRequest(with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in IndexPIRClient.constructPIRRequest(with:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t *initializeBufferWithCopyOfBuffer for IndexPIRClient(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  int *v53;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(type metadata accessor for SecretKey() + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v53 = a3;
    v11 = a3[5];
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = *(uint64_t *)((char *)a2 + v11);
    v15 = *(uint64_t *)((char *)a2 + v11 + 8);
    *(_QWORD *)v12 = v14;
    *((_QWORD *)v12 + 1) = v15;
    v12[16] = v13[16];
    v16 = *((_QWORD *)v13 + 4);
    *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
    v17 = *((_QWORD *)v13 + 5);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v16, v17);
    *((_QWORD *)v12 + 4) = v16;
    *((_QWORD *)v12 + 5) = v17;
    v18 = (int *)type metadata accessor for AspireApiPIRConfig(0);
    v19 = v18[8];
    v20 = &v12[v19];
    v21 = &v13[v19];
    v22 = type metadata accessor for UnknownStorage();
    v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v52(v20, v21, v22);
    v23 = v18[9];
    v24 = &v12[v23];
    v25 = &v13[v23];
    v26 = type metadata accessor for AspireHeEncryptionParameters(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v29 = v52;
    }
    else
    {
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v31 = *((_QWORD *)v25 + 3);
      *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
      *((_QWORD *)v24 + 3) = v31;
      v24[32] = v25[32];
      *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
      v24[48] = v25[48];
      *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
      v24[64] = v25[64];
      v32 = *(int *)(v26 + 40);
      v51 = &v24[v32];
      v33 = &v25[v32];
      swift_bridgeObjectRetain();
      v34 = v33;
      v29 = v52;
      v52(v51, v34, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v35 = v18[10];
    v36 = &v12[v35];
    v37 = &v13[v35];
    v38 = type metadata accessor for AspirePirKeywordPirParameters(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      v29(&v36[*(int *)(v38 + 24)], &v37[*(int *)(v38 + 24)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v41 = v53[6];
    v42 = (uint64_t *)((char *)v4 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = *v43;
    v45 = v43[1];
    outlined copy of Data._Representation(*v43, v45);
    *v42 = v44;
    v42[1] = v45;
    v46 = v53[8];
    *(uint64_t *)((char *)v4 + v53[7]) = *(uint64_t *)((char *)a2 + v53[7]);
    v47 = (char *)v4 + v46;
    v48 = (char *)a2 + v46;
    v49 = type metadata accessor for PIR.IndexPirClient();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
  }
  return v4;
}

uint64_t destroy for IndexPIRClient(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1 + *(int *)(type metadata accessor for SecretKey() + 20);
  v5 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[5];
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
  v7 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v8 = v6 + v7[8];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = v6 + v7[9];
  v12 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    v10(v11 + *(int *)(v12 + 40), v9);
  }
  v13 = v6 + v7[10];
  v14 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
    v10(v13 + *(int *)(v14 + 24), v9);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v15 = a1 + a2[8];
  v16 = type metadata accessor for PIR.IndexPirClient();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

_QWORD *initializeWithCopy for IndexPIRClient(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v48;
  _QWORD *v49;
  int *v50;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v49 = a2;
  v50 = a3;
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)((char *)a2 + v10);
  v14 = *(_QWORD *)((char *)a2 + v10 + 8);
  *(_QWORD *)v11 = v13;
  *((_QWORD *)v11 + 1) = v14;
  v11[16] = v12[16];
  v15 = *((_QWORD *)v12 + 4);
  *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
  v16 = *((_QWORD *)v12 + 5);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v15, v16);
  *((_QWORD *)v11 + 4) = v15;
  *((_QWORD *)v11 + 5) = v16;
  v17 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v18 = v17[8];
  v19 = &v11[v18];
  v20 = &v12[v18];
  v21 = type metadata accessor for UnknownStorage();
  v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  v22(v19, v20, v21);
  v23 = v17[9];
  v24 = &v11[v23];
  v25 = &v12[v23];
  v26 = type metadata accessor for AspireHeEncryptionParameters(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
    v29 = *((_QWORD *)v25 + 3);
    *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
    *((_QWORD *)v24 + 3) = v29;
    v24[32] = v25[32];
    *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
    v24[48] = v25[48];
    *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
    v24[64] = v25[64];
    v30 = *(int *)(v26 + 40);
    v48 = &v24[v30];
    v31 = &v25[v30];
    swift_bridgeObjectRetain();
    v22(v48, v31, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v32 = v17[10];
  v33 = &v11[v32];
  v34 = &v12[v32];
  v35 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v22(&v33[*(int *)(v35 + 24)], &v34[*(int *)(v35 + 24)], v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v38 = v50[6];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)v49 + v38);
  v41 = *v40;
  v42 = v40[1];
  outlined copy of Data._Representation(*v40, v42);
  *v39 = v41;
  v39[1] = v42;
  v43 = v50[8];
  *(_QWORD *)((char *)a1 + v50[7]) = *(_QWORD *)((char *)v49 + v50[7]);
  v44 = (char *)a1 + v43;
  v45 = (char *)v49 + v43;
  v46 = type metadata accessor for PIR.IndexPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  return a1;
}

_QWORD *assignWithCopy for IndexPIRClient(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *);
  uint64_t v64;
  uint64_t v65;
  int *v66;
  _QWORD *v67;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v66 = a3;
  v67 = a2;
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v12 + 1);
  v11[16] = v12[16];
  *((_QWORD *)v11 + 1) = v13;
  *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
  v14 = *((_QWORD *)v12 + 4);
  v15 = *((_QWORD *)v12 + 5);
  outlined copy of Data._Representation(v14, v15);
  v16 = *((_QWORD *)v11 + 4);
  v17 = *((_QWORD *)v11 + 5);
  *((_QWORD *)v11 + 4) = v14;
  *((_QWORD *)v11 + 5) = v15;
  outlined consume of Data._Representation(v16, v17);
  v18 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v19 = v18[8];
  v20 = &v11[v19];
  v21 = &v12[v19];
  v22 = type metadata accessor for UnknownStorage();
  v64 = *(_QWORD *)(v22 - 8);
  v65 = v22;
  v63 = *(void (**)(char *, char *))(v64 + 24);
  v63(v20, v21);
  v23 = v18[9];
  v24 = (uint64_t)&v11[v23];
  v25 = &v12[v23];
  v26 = type metadata accessor for AspireHeEncryptionParameters(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28((uint64_t)v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_QWORD *)(v24 + 8) = *((_QWORD *)v25 + 1);
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
      v31 = *((_QWORD *)v25 + 3);
      *(_BYTE *)(v24 + 32) = v25[32];
      *(_QWORD *)(v24 + 24) = v31;
      v32 = *((_QWORD *)v25 + 5);
      *(_BYTE *)(v24 + 48) = v25[48];
      *(_QWORD *)(v24 + 40) = v32;
      v33 = *((_QWORD *)v25 + 7);
      *(_BYTE *)(v24 + 64) = v25[64];
      *(_QWORD *)(v24 + 56) = v33;
      v34 = *(int *)(v26 + 40);
      v35 = v24 + v34;
      v36 = &v25[v34];
      v37 = *(void (**)(uint64_t, char *, uint64_t))(v64 + 16);
      swift_bridgeObjectRetain();
      v37(v35, v36, v65);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v24, v25, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = *((_QWORD *)v25 + 1);
  *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60 = *((_QWORD *)v25 + 3);
  *(_BYTE *)(v24 + 32) = v25[32];
  *(_QWORD *)(v24 + 24) = v60;
  v61 = *((_QWORD *)v25 + 5);
  *(_BYTE *)(v24 + 48) = v25[48];
  *(_QWORD *)(v24 + 40) = v61;
  v62 = *((_QWORD *)v25 + 7);
  *(_BYTE *)(v24 + 64) = v25[64];
  *(_QWORD *)(v24 + 56) = v62;
  ((void (*)(uint64_t, char *, uint64_t))v63)(v24 + *(int *)(v26 + 40), &v25[*(int *)(v26 + 40)], v65);
LABEL_7:
  v39 = v18[10];
  v40 = &v11[v39];
  v41 = &v12[v39];
  v42 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      ((void (*)(char *, char *, uint64_t))v63)(&v40[*(int *)(v42 + 24)], &v41[*(int *)(v42 + 24)], v65);
      goto LABEL_13;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspirePirKeywordPirParameters);
    goto LABEL_12;
  }
  if (v46)
  {
LABEL_12:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(&v40[*(int *)(v42 + 24)], &v41[*(int *)(v42 + 24)], v65);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_13:
  v48 = v66[6];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (_QWORD *)((char *)v67 + v48);
  v51 = *v50;
  v52 = v50[1];
  outlined copy of Data._Representation(*v50, v52);
  v53 = *v49;
  v54 = v49[1];
  *v49 = v51;
  v49[1] = v52;
  outlined consume of Data._Representation(v53, v54);
  *(_QWORD *)((char *)a1 + v66[7]) = *(_QWORD *)((char *)v67 + v66[7]);
  v55 = v66[8];
  v56 = (char *)a1 + v55;
  v57 = (char *)v67 + v55;
  v58 = type metadata accessor for PIR.IndexPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 24))(v56, v57, v58);
  return a1;
}

_QWORD *initializeWithTake for IndexPIRClient(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v39;
  int *v40;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v39 = a2;
  v40 = a3;
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)((char *)a2 + v10 + 8);
  *(_QWORD *)v11 = *(_QWORD *)((char *)a2 + v10);
  *((_QWORD *)v11 + 1) = v13;
  v11[16] = *((_BYTE *)a2 + v10 + 16);
  *((_QWORD *)v11 + 3) = *(_QWORD *)((char *)a2 + v10 + 24);
  *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)a2 + v10 + 32);
  v14 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v15 = v14[8];
  v16 = &v11[v15];
  v17 = &v12[v15];
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v19(v16, v17, v18);
  v20 = v14[9];
  v21 = &v11[v20];
  v22 = &v12[v20];
  v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v26 = *((_QWORD *)v22 + 3);
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
    *((_QWORD *)v21 + 3) = v26;
    v21[32] = v22[32];
    *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
    v21[48] = v22[48];
    *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
    v21[64] = v22[64];
    v19(&v21[*(int *)(v23 + 40)], &v22[*(int *)(v23 + 40)], v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v27 = v14[10];
  v28 = &v11[v27];
  v29 = &v12[v27];
  v30 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    v19(&v28[*(int *)(v30 + 24)], &v29[*(int *)(v30 + 24)], v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  v33 = v40[7];
  *(_OWORD *)((char *)a1 + v40[6]) = *(_OWORD *)((char *)v39 + v40[6]);
  *(_QWORD *)((char *)a1 + v33) = *(_QWORD *)((char *)v39 + v33);
  v34 = v40[8];
  v35 = (char *)a1 + v34;
  v36 = (char *)v39 + v34;
  v37 = type metadata accessor for PIR.IndexPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  return a1;
}

_QWORD *assignWithTake for IndexPIRClient(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v48)(char *, char *);
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v51 = a3;
  v52 = a2;
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  v11[16] = v12[16];
  v13 = *((_QWORD *)v12 + 5);
  v14 = *((_QWORD *)v11 + 4);
  v15 = *((_QWORD *)v11 + 5);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
  *((_QWORD *)v11 + 5) = v13;
  outlined consume of Data._Representation(v14, v15);
  v16 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v17 = v16[8];
  v18 = &v11[v17];
  v19 = &v12[v17];
  v20 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v20 - 8);
  v50 = v20;
  v48 = *(void (**)(char *, char *))(v49 + 40);
  v48(v18, v19);
  v21 = v16[9];
  v22 = (uint64_t)&v11[v21];
  v23 = &v12[v21];
  v24 = type metadata accessor for AspireHeEncryptionParameters(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26((uint64_t)v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
      v29 = *((_QWORD *)v23 + 3);
      *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
      *(_QWORD *)(v22 + 24) = v29;
      *(_BYTE *)(v22 + 32) = v23[32];
      *(_BYTE *)(v22 + 48) = v23[48];
      *(_QWORD *)(v22 + 40) = *((_QWORD *)v23 + 5);
      *(_QWORD *)(v22 + 56) = *((_QWORD *)v23 + 7);
      *(_BYTE *)(v22 + 64) = v23[64];
      (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v22 + *(int *)(v24 + 40), &v23[*(int *)(v24 + 40)], v50);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v28)
  {
    outlined destroy of AspireApiPECConfig(v22, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v22, v23, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 3);
  *(_BYTE *)(v22 + 32) = v23[32];
  *(_QWORD *)(v22 + 40) = *((_QWORD *)v23 + 5);
  *(_BYTE *)(v22 + 48) = v23[48];
  *(_QWORD *)(v22 + 56) = *((_QWORD *)v23 + 7);
  *(_BYTE *)(v22 + 64) = v23[64];
  ((void (*)(uint64_t, char *, uint64_t))v48)(v22 + *(int *)(v24 + 40), &v23[*(int *)(v24 + 40)], v50);
LABEL_7:
  v31 = v16[10];
  v32 = &v11[v31];
  v33 = &v12[v31];
  v34 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      ((void (*)(char *, char *, uint64_t))v48)(&v32[*(int *)(v34 + 24)], &v33[*(int *)(v34 + 24)], v50);
      goto LABEL_13;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspirePirKeywordPirParameters);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v32[*(int *)(v34 + 24)], &v33[*(int *)(v34 + 24)], v50);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_13:
  v40 = v51[6];
  v41 = *(_QWORD *)((char *)a1 + v40);
  v42 = *(_QWORD *)((char *)a1 + v40 + 8);
  *(_OWORD *)((char *)a1 + v40) = *(_OWORD *)((char *)v52 + v40);
  outlined consume of Data._Representation(v41, v42);
  v43 = v51[8];
  *(_QWORD *)((char *)a1 + v51[7]) = *(_QWORD *)((char *)v52 + v51[7]);
  v44 = (char *)a1 + v43;
  v45 = (char *)v52 + v43;
  v46 = type metadata accessor for PIR.IndexPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexPIRClient()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C99868(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for SecretKey();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for AspireApiPIRConfig(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 12)
  {
    v11 = type metadata accessor for PIR.IndexPirClient();
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[6] + 8) >> 60;
  if (((4 * (_DWORD)v13) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v13) & 0xC | (v13 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IndexPIRClient()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C99950(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = type metadata accessor for SecretKey();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for AspireApiPIRConfig(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 12)
      {
        v16 = (_QWORD *)(a1 + a4[6]);
        *v16 = 0;
        v16[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
        return result;
      }
      v10 = type metadata accessor for PIR.IndexPirClient();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for IndexPIRClient()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for SecretKey();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AspireApiPIRConfig(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PIR.IndexPirClient();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in IndexPIRClient.constructPIRRequest(with:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in IndexPIRClient.constructPIRRequest(with:)(a1, *(_QWORD **)(v1 + 16));
}

uint64_t CMLClientConfig.networkDelegation.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_sourceApplicationBundleIdentifier);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t static NetworkDelegationConfig.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
    return a4 == 0;
  if (!a4)
    return 0;
  if (a1 == a3 && a2 == a4)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void NetworkDelegationConfig.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkDelegationConfig.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000021;
  else
    return 0x6167656C65446F6ELL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkDelegationConfig.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NetworkDelegationConfig.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkDelegationConfig.CodingKeys()
{
  lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkDelegationConfig.CodingKeys()
{
  lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkDelegationConfig.NoDelegationCodingKeys()
{
  lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkDelegationConfig.NoDelegationCodingKeys()
{
  lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys()
{
  lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys()
{
  lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NetworkDelegationConfig.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v17 = a3;
  v15[1] = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys>);
  v16 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkDelegationConfig.NoDelegationCodingKeys>);
  v7 = *(_QWORD *)(v15[0] - 8);
  MEMORY[0x24BDAC7A8](v15[0]);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkDelegationConfig.CodingKeys>);
  v18 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys();
  v13 = v17;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v13)
  {
    v20 = 1;
    lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v4);
  }
  else
  {
    v19 = 0;
    lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, _QWORD))(v7 + 8))(v9, v15[0]);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v12, v10);
}

unint64_t lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.CodingKeys, &unk_2509A6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.CodingKeys, &unk_2509A6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.CodingKeys, &unk_2509A6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.CodingKeys, &unk_2509A6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys, &unk_2509A6EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys, &unk_2509A6EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys, &unk_2509A6EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys, &unk_2509A6EB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.NoDelegationCodingKeys, &unk_2509A6E00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.NoDelegationCodingKeys, &unk_2509A6E00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig.NoDelegationCodingKeys, &unk_2509A6E00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys);
  }
  return result;
}

Swift::Int NetworkDelegationConfig.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

_QWORD *NetworkDelegationConfig.init(from:)(_QWORD *a1)
{
  return specialized NetworkDelegationConfig.init(from:)(a1);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance NetworkDelegationConfig@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = specialized NetworkDelegationConfig.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkDelegationConfig(_QWORD *a1)
{
  uint64_t *v1;

  return NetworkDelegationConfig.encode(to:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NetworkDelegationConfig(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkDelegationConfig()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NetworkDelegationConfig()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkDelegationConfig()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t specialized NetworkDelegationConfig.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6167656C65446F6ELL && a2 == 0xEC0000006E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x8000000237D61CA0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *specialized NetworkDelegationConfig.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  char v29;
  char v30;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys>);
  v26 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkDelegationConfig.NoDelegationCodingKeys>);
  v3 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkDelegationConfig.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkDelegationConfig.CodingKeys and conformance NetworkDelegationConfig.CodingKeys();
  v11 = (uint64_t)v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    goto LABEL_9;
  v12 = v5;
  v13 = v27;
  v23 = v7;
  v28 = a1;
  v14 = KeyedDecodingContainer.allKeys.getter();
  v15 = v14;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = type metadata accessor for DecodingError();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v21 = &type metadata for NetworkDelegationConfig;
    v10 = v9;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v6);
    a1 = v28;
LABEL_9:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return v10;
  }
  if ((*(_BYTE *)(v14 + 32) & 1) != 0)
  {
    v30 = 1;
    lazy protocol witness table accessor for type NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys and conformance NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v25 = v15;
    v16 = v24;
    v17 = KeyedDecodingContainer.decode(_:forKey:)();
    v18 = v23;
    v10 = (_QWORD *)v17;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v6);
  }
  else
  {
    v29 = 0;
    lazy protocol witness table accessor for type NetworkDelegationConfig.NoDelegationCodingKeys and conformance NetworkDelegationConfig.NoDelegationCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v6);
    v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
  return v10;
}

_QWORD *initializeBufferWithCopyOfBuffer for NetworkDelegationConfig(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for NetworkDelegationConfig()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for NetworkDelegationConfig(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for NetworkDelegationConfig(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkDelegationConfig(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NetworkDelegationConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for NetworkDelegationConfig(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for NetworkDelegationConfig(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkDelegationConfig()
{
  return &type metadata for NetworkDelegationConfig;
}

uint64_t storeEnumTagSinglePayload for NetworkDelegationConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237C9A9C4 + 4 * byte_237D587A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237C9A9F8 + 4 * byte_237D587A0[v4]))();
}

uint64_t sub_237C9A9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C9AA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C9AA08);
  return result;
}

uint64_t sub_237C9AA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C9AA1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237C9AA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C9AA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NetworkDelegationConfig.CodingKeys()
{
  return &unk_2509A6E20;
}

void *type metadata accessor for NetworkDelegationConfig.NoDelegationCodingKeys()
{
  return &unk_2509A6E00;
}

uint64_t storeEnumTagSinglePayload for NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237C9AA94 + 4 * byte_237D587AA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237C9AAB4 + 4 * byte_237D587AF[v4]))();
}

_BYTE *sub_237C9AA94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237C9AAB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237C9AABC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237C9AAC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237C9AACC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237C9AAD4(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for NetworkDelegationConfig.SourceApplicationBundleIdentifierCodingKeys()
{
  return &unk_2509A6EB0;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NegativeBinomialDistribution.init(successCount:successProbability:)(CipherML::NegativeBinomialDistribution *__return_ptr retstr, Swift::Double successCount, Swift::Double successProbability)
{
  BOOL v3;
  double v4;

  if (successCount > 0.0
    && (successProbability > 0.0 ? (v3 = successProbability < 1.0) : (v3 = 0),
        v3 && (v4 = (1.0 - successProbability) / successProbability, v4 > 0.0)))
  {
    retstr->successCount = successCount;
    retstr->successProbability = successProbability;
    retstr->gamma.shape = successCount;
    retstr->gamma.scale = v4;
    retstr->gamma.cap.value = 0.0;
    retstr->gamma.cap.is_nil = 1;
  }
  else
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

uint64_t NegativeBinomialDistribution.sample<A>(using:)(uint64_t a1)
{
  uint64_t v1;
  double v3;

  GammaDistribution.sample<A>(using:)(*(double *)(v1 + 16), *(double *)(v1 + 24), a1, *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
  return PoissonDistribution.sample<A>(using:)(v3, a1, 0, 1);
}

Swift::Int __swiftcall DiscreteDistribution.sample()()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 + 8))(v0, MEMORY[0x24BEE3A00], MEMORY[0x24BEE3A08]);
}

Swift::Double __swiftcall ContinuousDistribution.sample()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Double result;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(v1 + 8))(v0, MEMORY[0x24BEE3A00], MEMORY[0x24BEE3A08]);
  return result;
}

CipherML::PoissonDistribution __swiftcall PoissonDistribution.init(mean:cap:)(Swift::Double mean, Swift::Int_optional cap)
{
  CipherML::PoissonDistribution result;

  cap.is_nil &= 1u;
  result.cap = cap;
  result.mean = mean;
  return result;
}

uint64_t PoissonDistribution.sample<A>(using:)(double a1, uint64_t a2, uint64_t a3, char a4)
{
  int v5;
  uint64_t result;
  uint64_t v7;

  v5 = a4 & 1;
  if (a1 <= 125.0)
    result = PoissonDistribution.sampleSmall<A>(using:)(a1);
  else
    result = PoissonDistribution.sampleLarge<A>(using:)(a1);
  if (result >= a3)
    v7 = a3;
  else
    v7 = result;
  if (!v5)
    return v7;
  return result;
}

uint64_t PoissonDistribution.sampleSmall<A>(using:)(double a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t result;
  double v6;

  lazy protocol witness table accessor for type Double and conformance Double();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  static BinaryFloatingPoint<>.random<A>(in:using:)();
  v2 = exp(-a1);
  if (v2 >= v6)
    return 0;
  v3 = 0;
  v4 = v2;
  while (1)
  {
    result = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    v4 = v4 * a1 / (double)result;
    v2 = v2 + v4;
    ++v3;
    if (v2 >= v6)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t PoissonDistribution.sampleLarge<A>(using:)(long double a1)
{
  uint64_t v2;
  double v3;
  uint64_t result;
  double v6;

  lazy protocol witness table accessor for type Double and conformance Double();
  v2 = 1;
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  v3 = 1.0;
  while (1)
  {
    static BinaryFloatingPoint<>.random<A>(in:using:)();
    v3 = v3 * v6;
    if (v3 < 1.0)
    {
      while (a1 > 0.0)
      {
        if (a1 <= 100.0)
        {
          v3 = v3 * exp(a1);
          a1 = 0.0;
          if (v3 <= 1.0)
            goto LABEL_12;
          goto LABEL_9;
        }
        v3 = v3 * 3.72007598e-44;
        a1 = a1 + -100.0;
        if (v3 >= 1.0)
          break;
      }
    }
    if (v3 <= 1.0)
      break;
LABEL_9:
    if (__OFADD__(v2++, 1))
    {
      __break(1u);
      break;
    }
  }
LABEL_12:
  result = v2 - 1;
  if (__OFSUB__(v2, 1))
    __break(1u);
  return result;
}

uint64_t protocol witness for DiscreteDistribution.sample<A>(using:) in conformance PoissonDistribution(uint64_t a1)
{
  uint64_t v1;

  return PoissonDistribution.sample<A>(using:)(*(double *)v1, a1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

double NegativeBinomialDistribution.successCount.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double NegativeBinomialDistribution.successProbability.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t NegativeBinomialDistribution.gamma.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

double NegativeBinomialDistribution.mean.getter()
{
  double *v0;

  return *v0 * (1.0 - v0[1]) / v0[1];
}

double NegativeBinomialDistribution.variance.getter()
{
  double *v0;

  return *v0 * (1.0 - v0[1]) / v0[1] / v0[1];
}

CipherML::GammaDistribution __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GammaDistribution.init(shape:scale:cap:)(Swift::Double shape, Swift::Double scale, Swift::Double_optional cap)
{
  CipherML::GammaDistribution result;

  if (shape <= 0.0 || scale <= 0.0)
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    cap.is_nil = swift_willThrow();
  }
  result.cap.value = cap.value;
  result.cap.is_nil = cap.is_nil;
  result.scale = scale;
  result.shape = shape;
  return result;
}

void GammaDistribution.sample<A>(using:)(double a1, double a2, uint64_t a3, uint64_t a4, char a5)
{
  double v9;

  v9 = GammaDistribution.sampleUncapped<A>(using:)(a1, a2);
  if ((a5 & 1) == 0 && v9 > *(double *)&a4)
  {
    while (GammaDistribution.sampleUncapped<A>(using:)(a1, a2) > *(double *)&a4)
      ;
  }
}

double NormalDistribution.standardDeviation.getter(double a1, double a2)
{
  return a2;
}

double NormalDistribution.variance.getter(double a1, double a2)
{
  return a2 * a2;
}

long double NormalDistribution.sample<A>(using:)(double a1, double a2)
{
  double v4;
  long double v6;

  lazy protocol witness table accessor for type Double and conformance Double();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  static BinaryFloatingPoint<>.random<A>(in:using:)();
  static BinaryFloatingPoint<>.random<A>(in:using:)();
  v4 = sqrt(log(v6) * -2.0);
  return v4 * cos(v6 * 6.28318531) * a2 + a1;
}

long double protocol witness for ContinuousDistribution.sample<A>(using:) in conformance NormalDistribution()
{
  double *v0;

  return NormalDistribution.sample<A>(using:)(*v0, v0[1]);
}

double GammaDistribution.scale.getter(double a1, double a2)
{
  return a2;
}

double GammaDistribution.sampleUncapped<A>(using:)(double a1, double a2)
{
  double v4;
  long double v6;

  if (a1 >= 1.0)
    return GammaDistribution.sampleLarge<A>(with:using:)(a1, a1, a2);
  lazy protocol witness table accessor for type Double and conformance Double();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  static BinaryFloatingPoint<>.random<A>(in:using:)();
  v4 = GammaDistribution.sampleLarge<A>(with:using:)(a1 + 1.0, a1, a2);
  return v4 * pow(v6, 1.0 / a1);
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

double GammaDistribution.sampleLarge<A>(with:using:)(double a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  long double v12;

  v3 = a1 + -0.333333333;
  v4 = 1.0 / sqrt((a1 + -0.333333333) * 9.0);
  do
  {
    do
    {
      v5 = NormalDistribution.sample<A>(using:)(0.0, 1.0);
      v6 = v4 * v5 + 1.0;
    }
    while (v6 <= 0.0);
    v7 = v6 * (v6 * v6);
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>.random<A>(in:using:)();
    v8 = v5 * v5;
    if (v12 < v5 * v5 * (v5 * v5 * -0.0331) + 1.0)
      break;
    v9 = log(v12);
  }
  while (v9 >= v8 * 0.5 + v3 * (1.0 - v7 + log(v7)));
  return v3 * v7 * a3;
}

void protocol witness for ContinuousDistribution.sample<A>(using:) in conformance GammaDistribution(uint64_t a1)
{
  uint64_t v1;

  GammaDistribution.sample<A>(using:)(*(double *)v1, *(double *)(v1 + 8), a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t dispatch thunk of DiscreteDistribution.sample<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ContinuousDistribution.sample<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t getEnumTagSinglePayload for PoissonDistribution(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PoissonDistribution(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PoissonDistribution()
{
  return &type metadata for PoissonDistribution;
}

ValueMetadata *type metadata accessor for NegativeBinomialDistribution()
{
  return &type metadata for NegativeBinomialDistribution;
}

uint64_t getEnumTagSinglePayload for NormalDistribution(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NormalDistribution(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NormalDistribution()
{
  return &type metadata for NormalDistribution;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GammaDistribution(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GammaDistribution(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GammaDistribution()
{
  return &type metadata for GammaDistribution;
}

uint64_t KeywordPIRClient.init(secretKey:config:configID:shardIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v20;

  v12 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SecretKey();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v17, v18);
  outlined init with copy of SecretKey(a2, (uint64_t)v14, type metadata accessor for AspireApiPIRConfig);
  KeywordPIRClient.init(secretKey:config:configID:shardLabel:)((uint64_t)v17, (uint64_t)v14, a3, a4, a5, 0, 1, a6);
  outlined destroy of AspireApiPECConfig(a2, type metadata accessor for AspireApiPIRConfig);
  return outlined destroy of AspireApiPECConfig(a1, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
}

uint64_t KeywordPIRClient.init(secretKey:config:configID:shardId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v21;
  uint64_t v22;

  v22 = a6;
  v13 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SecretKey();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v18, v19);
  outlined init with copy of SecretKey(a2, (uint64_t)v15, type metadata accessor for AspireApiPIRConfig);
  KeywordPIRClient.init(secretKey:config:configID:shardLabel:)((uint64_t)v18, (uint64_t)v15, a3, a4, a5, v22, 0, a7);
  outlined destroy of AspireApiPECConfig(a2, type metadata accessor for AspireApiPIRConfig);
  return outlined destroy of AspireApiPECConfig(a1, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
}

uint64_t KeywordPIRClient.constructPIRRequest(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(char *, unint64_t, uint64_t);
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  _QWORD v35[2];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v42 = a1;
  v38 = a2;
  v3 = type metadata accessor for HE.SerializedCiphertext();
  v4 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  v44 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AspirePirEncryptedIndices(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeywordPIRClient();
  v14 = v45;
  result = PIR.KeywordPirClient.query(keyword:)();
  if (!v14)
  {
    v41 = v8;
    v42 = v7;
    v35[1] = v11;
    v36 = v13;
    v37 = v2;
    v16 = *(_QWORD *)(result + 16);
    if (v16)
    {
      v45 = 0;
      v46 = MEMORY[0x24BEE4AF8];
      v17 = result;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
      v18 = v44;
      v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v35[0] = v17;
      v20 = v17 + v19;
      v21 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v44 + 16);
      v39 = *(_QWORD *)(v44 + 72);
      v40 = v21;
      while (1)
      {
        v22 = v16;
        v23 = v43;
        v24 = v40(v6, v20, v43);
        MEMORY[0x24BDAC7A8](v24);
        v35[-2] = v6;
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedCiphertext and conformance AspireHeSerializedCiphertext, type metadata accessor for AspireHeSerializedCiphertext, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertext);
        v25 = v45;
        static Message.with(_:)();
        v45 = v25;
        if (v25)
          break;
        (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v23);
        v26 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1);
          v26 = v46;
        }
        v27 = v41;
        v29 = *(_QWORD *)(v26 + 16);
        v28 = *(_QWORD *)(v26 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v27 = v41;
          v26 = v46;
        }
        *(_QWORD *)(v26 + 16) = v29 + 1;
        outlined init with take of SecretKey((uint64_t)v10, v26+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v29, type metadata accessor for AspireHeSerializedCiphertext);
        v20 += v39;
        --v16;
        v18 = v44;
        if (v22 == 1)
        {
          v30 = swift_bridgeObjectRelease();
          v32 = (uint64_t)v36;
          v31 = v37;
          goto LABEL_13;
        }
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v23);
      swift_bridgeObjectRelease();
      return swift_release();
    }
    else
    {
      v30 = swift_bridgeObjectRelease();
      v26 = MEMORY[0x24BEE4AF8];
      v32 = (uint64_t)v36;
      v31 = v37;
LABEL_13:
      MEMORY[0x24BDAC7A8](v30);
      v35[-2] = v26;
      v35[-1] = v31;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
      static Message.with(_:)();
      swift_bridgeObjectRelease();
      v33 = type metadata accessor for AspireApiPIRRequest(0);
      MEMORY[0x24BDAC7A8](v33);
      v35[-2] = v31;
      v35[-1] = v32;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, v34, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
      static Message.with(_:)();
      return outlined destroy of AspireApiPECConfig(v32, type metadata accessor for AspirePirEncryptedIndices);
    }
  }
  return result;
}

uint64_t KeywordPIRClient.decryptPIRResponse(_:keyword:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  uint64_t *v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v5 = v4;
  v9 = type metadata accessor for AspireHeSerializedFullCiphertext(0);
  MEMORY[0x24BDAC7A8](v9);
  v73 = (_QWORD *)((char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for AspireHeSerializedSeededCiphertext(0);
  MEMORY[0x24BDAC7A8](v11);
  v77 = (_QWORD *)((char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AspireHeSerializedCiphertext(0);
  v67 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v72 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for HE.SerializedCiphertext();
  v84 = *(_QWORD *)(v18 - 8);
  v85 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (_QWORD *)((char *)v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v71 = (_QWORD *)((char *)v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = *a1;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = MEMORY[0x24BEE4AF8];
  if (v25)
  {
    v81 = v15;
    v62[0] = v3;
    v62[1] = a2;
    v62[2] = a3;
    v63 = v5;
    v88 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    v66 = v25;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
    v27 = 0;
    v28 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v64 = v24;
    v70 = v24 + v28;
    v69 = *(_QWORD *)(v22 + 72);
    v29 = *MEMORY[0x24BE2A190];
    v75 = *MEMORY[0x24BE2A188];
    v76 = v29;
    v31 = (uint64_t)v72;
    v30 = v73;
    v74 = v20;
    while (1)
    {
      v32 = v71;
      outlined init with copy of SecretKey(v70 + v69 * v27, (uint64_t)v71, type metadata accessor for AspireHeSerializedCiphertextVec);
      v33 = *v32;
      v34 = *(_QWORD *)(v33 + 16);
      if (v34)
        break;
LABEL_22:
      outlined destroy of AspireApiPECConfig((uint64_t)v71, type metadata accessor for AspireHeSerializedCiphertextVec);
      v55 = v88;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v55 + 16) + 1, 1);
        v55 = v88;
      }
      v56 = v66;
      v58 = *(_QWORD *)(v55 + 16);
      v57 = *(_QWORD *)(v55 + 24);
      if (v58 >= v57 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
        v56 = v66;
        v55 = v88;
      }
      ++v27;
      *(_QWORD *)(v55 + 16) = v58 + 1;
      *(_QWORD *)(v55 + 8 * v58 + 32) = v26;
      v26 = MEMORY[0x24BEE4AF8];
      if (v27 == v56)
      {
        swift_bridgeObjectRelease();
        v5 = v63;
        v3 = v62[0];
        goto LABEL_29;
      }
    }
    v65 = v27;
    v87 = v26;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
    v35 = 0;
    v36 = *(unsigned __int8 *)(v67 + 80);
    v68 = v33;
    v83 = v33 + ((v36 + 32) & ~v36);
    v82 = *(_QWORD *)(v67 + 72);
    v80 = v34;
    while (1)
    {
      outlined init with copy of SecretKey(v83 + v82 * v35, v31, type metadata accessor for AspireHeSerializedCiphertext);
      v37 = (uint64_t)v81;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v31, (uint64_t)v81, &demangling cache variable for type metadata for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType?);
      v38 = type metadata accessor for AspireHeSerializedCiphertext.OneOf_SerializedCiphertextType(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38) == 1)
        break;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of SecretKey(v37, (uint64_t)v30, type metadata accessor for AspireHeSerializedFullCiphertext);
        v39 = *v30;
        v40 = v30[1];
        v41 = v30[2];
        v42 = *(_QWORD *)(v41 + 16);
        if (v42)
        {
          v78 = v30[1];
          v79 = v39;
          outlined copy of Data._Representation(v39, v40);
          v86 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42, 0);
          v43 = 0;
          v44 = v86;
          v45 = *(_QWORD *)(v86 + 16);
          do
          {
            v46 = *(unsigned int *)(v41 + 4 * v43 + 32);
            v86 = v44;
            v47 = *(_QWORD *)(v44 + 24);
            if (v45 >= v47 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v45 + 1, 1);
              v44 = v86;
            }
            ++v43;
            *(_QWORD *)(v44 + 16) = v45 + 1;
            *(_QWORD *)(v44 + 8 * v45++ + 32) = v46;
          }
          while (v42 != v43);
          swift_bridgeObjectRelease();
          v31 = (uint64_t)v72;
          v30 = v73;
          v40 = v78;
          v39 = v79;
        }
        else
        {
          outlined copy of Data._Representation(*v30, v30[1]);
          v44 = MEMORY[0x24BEE4AF8];
        }
        v51 = v30[3];
        outlined destroy of AspireApiPECConfig((uint64_t)v30, type metadata accessor for AspireHeSerializedFullCiphertext);
        *v20 = v39;
        v20[1] = v40;
        v52 = v75;
      }
      else
      {
        v48 = v77;
        outlined init with take of SecretKey(v37, (uint64_t)v77, type metadata accessor for AspireHeSerializedSeededCiphertext);
        v49 = *v48;
        v50 = v48[1];
        v44 = v48[2];
        v51 = v48[3];
        outlined copy of Data._Representation(*v48, v50);
        outlined copy of Data._Representation(v44, v51);
        v20 = v74;
        outlined destroy of AspireApiPECConfig((uint64_t)v48, type metadata accessor for AspireHeSerializedSeededCiphertext);
        *v20 = v49;
        v20[1] = v50;
        v52 = v76;
      }
      v20[2] = v44;
      v20[3] = v51;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v84 + 104))(v20, v52, v85);
      outlined destroy of AspireApiPECConfig(v31, type metadata accessor for AspireHeSerializedCiphertext);
      v26 = v87;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1);
        v26 = v87;
      }
      v54 = *(_QWORD *)(v26 + 16);
      v53 = *(_QWORD *)(v26 + 24);
      if (v54 >= v53 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        v26 = v87;
      }
      ++v35;
      *(_QWORD *)(v26 + 16) = v54 + 1;
      (*(void (**)(unint64_t, uint64_t *, uint64_t))(v84 + 32))(v26+ ((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80))+ *(_QWORD *)(v84 + 72) * v54, v20, v85);
      v87 = v26;
      if (v35 == v80)
      {
        swift_bridgeObjectRelease();
        v27 = v65;
        goto LABEL_22;
      }
    }
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig(v31, type metadata accessor for AspireHeSerializedCiphertext);
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of AspireApiPECConfig((uint64_t)v71, type metadata accessor for AspireHeSerializedCiphertextVec);
    v59 = v88;
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
LABEL_29:
    v59 = v3 + *(int *)(type metadata accessor for KeywordPIRClient() + 28);
    v60 = PIR.KeywordPirClient.decrypt(replies:keyword:)();
    if (!v5)
      v59 = v60;
    swift_bridgeObjectRelease();
  }
  return v59;
}

uint64_t KeywordPIRClient.secretKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SecretKey(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
}

uint64_t KeywordPIRClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for KeywordPIRClient();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 20), a1, type metadata accessor for AspireApiPIRConfig);
}

uint64_t KeywordPIRClient.configID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for KeywordPIRClient() + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t KeywordPIRClient.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for KeywordPIRClient() + 28);
  v4 = type metadata accessor for PIR.KeywordPirClient();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t KeywordPIRClient.shardLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for KeywordPIRClient() + 32);
  v2 = *(_QWORD *)v1;
  outlined copy of ShardLabel(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

uint64_t KeywordPIRClient.init(secretKey:config:configID:shardLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t result;
  _QWORD v101[2];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v9 = v8;
  v131 = a3;
  v132 = a4;
  v107 = a8;
  v110 = type metadata accessor for HE.SerializedSecretKey();
  v108 = *(_QWORD *)(v110 - 8);
  MEMORY[0x24BDAC7A8](v110);
  v109 = (char *)v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v16);
  v113 = (uint64_t)v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x24BDAC7A8](v112);
  v120 = (char *)v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for PIR.KeywordPirClient();
  v105 = *(_QWORD *)(v106 - 8);
  MEMORY[0x24BDAC7A8](v106);
  v114 = (char *)v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PIR.PirAlgorithm();
  v121 = *(_QWORD *)(v20 - 8);
  v122 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v126 = (char *)v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v22);
  v134 = (char *)v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for AspireHeEncryptionParameters(0);
  v129 = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8](v133);
  v130 = (_QWORD *)((char *)v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = type metadata accessor for HE.EncryptionParams();
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for PIR.PirParams();
  v117 = *(_QWORD *)(v118 - 8);
  v28 = MEMORY[0x24BDAC7A8](v118);
  v116 = (char *)v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v119 = (char *)v101 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v125 = (uint64_t)v101 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v127 = (unint64_t)v101 - v34;
  v137 = type metadata accessor for AspireApiPIRShardConfig(0);
  v35 = MEMORY[0x24BDAC7A8](v137);
  v37 = (unint64_t)v101 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v35);
  v40 = (char *)v101 - v39;
  v41 = MEMORY[0x24BDAC7A8](v38);
  MEMORY[0x24BDAC7A8](v41);
  v138 = a5;
  v139 = a6;
  v128 = a7;
  v135 = (_QWORD *)((char *)v101 - v42);
  if ((a7 & 1) != 0)
  {
    if ((a5 & 0x8000000000000000) != 0)
      goto LABEL_55;
    if (*(_QWORD *)(*(_QWORD *)a2 + 16) > a5)
    {
      outlined init with copy of SecretKey(*(_QWORD *)a2+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * a5, (uint64_t)v101 - v42, type metadata accessor for AspireApiPIRShardConfig);
      v45 = v133;
      v46 = (uint64_t)v134;
      goto LABEL_27;
    }
    goto LABEL_56;
  }
  v103 = v44;
  v47 = *(_QWORD *)a2;
  v48 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v123 = a2;
  v124 = a1;
  v104 = v43;
  if (!v48)
  {
    v58 = v8;
    v59 = a1;
    outlined copy of ShardLabel(v138, a6, 0);
    swift_bridgeObjectRetain();
    v60 = 1;
LABEL_19:
    v37 = v127;
    goto LABEL_22;
  }
  v102 = v8;
  v115 = v27;
  v49 = v47 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
  v50 = v47;
  v51 = v43;
  swift_bridgeObjectRetain();
  outlined copy of ShardLabel(v138, a6, 0);
  v136 = *(_QWORD *)(v51 + 72);
  v101[1] = v50;
  swift_bridgeObjectRetain();
  v52 = v137;
  while (1)
  {
    outlined init with copy of SecretKey(v49, (uint64_t)v40, type metadata accessor for AspireApiPIRShardConfig);
    v53 = *(_QWORD *)&v40[*(int *)(v52 + 32) + 8];
    outlined init with copy of SecretKey((uint64_t)v40, v37, type metadata accessor for AspireApiPIRShardConfig);
    if (!v53)
    {
      outlined destroy of AspireApiPECConfig(v37, type metadata accessor for AspireApiPIRShardConfig);
      goto LABEL_8;
    }
    v54 = (uint64_t *)(v37 + *(int *)(v52 + 32));
    if (v54[1])
    {
      v55 = *v54;
      v56 = v54[1];
    }
    else
    {
      v55 = 0;
      v56 = 0xE000000000000000;
    }
    if (v55 == v138 && v56 == a6)
      break;
    v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiPECConfig(v37, type metadata accessor for AspireApiPIRShardConfig);
    v52 = v137;
    if ((v57 & 1) != 0)
      goto LABEL_21;
LABEL_8:
    outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspireApiPIRShardConfig);
    v49 += v136;
    --v48;
    a6 = v139;
    if (!v48)
    {
      swift_bridgeObjectRelease();
      v60 = 1;
      v59 = v124;
      v27 = v115;
      v58 = v102;
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined destroy of AspireApiPECConfig(v37, type metadata accessor for AspireApiPIRShardConfig);
LABEL_21:
  swift_bridgeObjectRelease();
  v37 = v127;
  outlined init with take of SecretKey((uint64_t)v40, v127, type metadata accessor for AspireApiPIRShardConfig);
  v60 = 0;
  v59 = v124;
  a6 = v139;
  v27 = v115;
  v58 = v102;
LABEL_22:
  v61 = v104;
  v62 = v137;
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v104 + 56))(v37, v60, 1, v137);
  swift_bridgeObjectRelease();
  v63 = v125;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v37, v125, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v63, 1, v62);
  v45 = v133;
  v46 = (uint64_t)v134;
  if (v64 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    if (one-time initialization token for daemon == -1)
      goto LABEL_24;
    goto LABEL_60;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
  outlined consume of ShardLabel(v138, a6, 0);
  v73 = v63;
  v74 = v103;
  outlined init with take of SecretKey(v73, v103, type metadata accessor for AspireApiPIRShardConfig);
  outlined init with take of SecretKey(v74, (uint64_t)v135, type metadata accessor for AspireApiPIRShardConfig);
  a1 = v59;
  v9 = v58;
  a2 = v123;
LABEL_27:
  v75 = type metadata accessor for AspireApiPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2 + *(int *)(v75 + 36), v46, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v37 = 1;
  v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v46, 1, v45);
  v77 = v130;
  if (v76 == 1)
  {
    *v130 = 0;
    v77[1] = 0;
    v77[2] = MEMORY[0x24BEE4AF8];
    v77[3] = 0;
    *((_BYTE *)v77 + 32) = 1;
    v77[5] = 0;
    *((_BYTE *)v77 + 48) = 1;
    v77[7] = 0;
    *((_BYTE *)v77 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey(v46, (uint64_t)v130, type metadata accessor for AspireHeEncryptionParameters);
  }
  AspireHeEncryptionParameters.cryptokit()((uint64_t)v27);
  if (v9)
  {
    outlined consume of Data._Representation(v131, v132);
    outlined consume of ShardLabel(v138, a6, v128 & 1);
    outlined destroy of AspireApiPECConfig(a1, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    outlined destroy of AspireApiPECConfig((uint64_t)v77, type metadata accessor for AspireHeEncryptionParameters);
    outlined destroy of AspireApiPECConfig((uint64_t)v135, type metadata accessor for AspireApiPIRShardConfig);
    return outlined destroy of AspireApiPECConfig(a2, type metadata accessor for AspireApiPIRConfig);
  }
  v115 = v27;
  outlined destroy of AspireApiPECConfig((uint64_t)v77, type metadata accessor for AspireHeEncryptionParameters);
  if (*(_BYTE *)(a2 + 16) != 1)
    goto LABEL_63;
  (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v126, **((unsigned int **)&unk_2509AA498 + *(_QWORD *)(a2 + 8)), v122);
  v78 = v135;
  v79 = *v135;
  if ((*v135 & 0x8000000000000000) != 0)
    goto LABEL_57;
  if ((v135[1] & 0x8000000000000000) != 0)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    swift_once();
LABEL_24:
    v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.daemon);
    v66 = v138;
    outlined copy of ShardLabel(v138, a6, 0);
    v67 = Logger.logObject.getter();
    v68 = static os_log_type_t.error.getter();
    v69 = os_log_type_enabled(v67, v68);
    a2 = v123;
    if (v69)
    {
      v70 = (uint8_t *)swift_slowAlloc();
      v71 = swift_slowAlloc();
      v141 = v71;
      *(_DWORD *)v70 = 136446210;
      outlined copy of ShardLabel(v66, v139, 0);
      v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v139, &v141);
      a6 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of ShardLabel(v66, a6, 0);
      outlined consume of ShardLabel(v66, a6, 0);
      outlined consume of ShardLabel(v66, a6, 0);
      _os_log_impl(&dword_237BC8000, v67, v68, "KeywordPirClient configuration is missing shardId %{public}s", v70, 0xCu);
      swift_arrayDestroy();
      v72 = v71;
      v37 = v127;
      MEMORY[0x23B822DA8](v72, -1, -1);
      MEMORY[0x23B822DA8](v70, -1, -1);
    }
    else
    {
      outlined consume of ShardLabel(v66, a6, 0);
      outlined consume of ShardLabel(v66, a6, 0);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined consume of Data._Representation(v131, v132);
    outlined consume of ShardLabel(v66, a6, 0);
    outlined destroy of AspireApiPECConfig(v124, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v37, &demangling cache variable for type metadata for AspireApiPIRShardConfig?);
    return outlined destroy of AspireApiPECConfig(a2, type metadata accessor for AspireApiPIRConfig);
  }
  a6 = v135[2];
  v80 = *(_QWORD *)(a6 + 16);
  if (v80)
  {
    v134 = (char *)v135[1];
    v136 = v79;
    v123 = a2;
    v124 = a1;
    v141 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80, 0);
    v81 = 0;
    v82 = v141;
    while (1)
    {
      v83 = *(_QWORD *)(a6 + 8 * v81 + 32);
      if (v83 < 0)
        break;
      v141 = v82;
      v37 = *(_QWORD *)(v82 + 16);
      v84 = *(_QWORD *)(v82 + 24);
      if (v37 >= v84 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v37 + 1, 1);
        v82 = v141;
      }
      ++v81;
      *(_QWORD *)(v82 + 16) = v37 + 1;
      *(_QWORD *)(v82 + 8 * v37 + 32) = v83;
      if (v80 == v81)
      {
        swift_bridgeObjectRelease();
        a2 = v123;
        a1 = v124;
        v78 = v135;
        goto LABEL_42;
      }
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
LABEL_42:
  v37 = v139;
  v85 = (uint64_t)v120;
  a6 = (uint64_t)v119;
  if ((*(_QWORD *)(a2 + 24) & 0x8000000000000000) != 0)
    goto LABEL_59;
  v86 = (char *)v78 + *(int *)(v137 + 40);
  if ((v86[8] & 1) == 0 && (*(_QWORD *)v86 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v87 = (uint64_t)v78;
    PIR.PirParams.init(encryptionParams:algorithm:entriesCount:entrySize:dimensions:batchSize:internalBatchSize:compressResponse:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v116, a6, v118);
    v88 = a2 + *(int *)(v75 + 40);
    v89 = v113;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v88, v113, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v89, 1, v112) == 1)
    {
      *(_QWORD *)v85 = 0;
      *(_BYTE *)(v85 + 8) = 0;
      UnknownStorage.init()();
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v89, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    }
    else
    {
      outlined init with take of SecretKey(v89, v85, type metadata accessor for AspirePirKeywordPirParameters);
    }
    v90 = v114;
    v91 = *(_QWORD *)v85;
    outlined destroy of AspireApiPECConfig(v85, type metadata accessor for AspirePirKeywordPirParameters);
    if ((v91 & 0x8000000000000000) == 0)
    {
      v92 = type metadata accessor for SecretKey();
      (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v109, a1 + *(int *)(v92 + 20), v110);
      PIR.KeywordPirClient.init(pirParams:hashFunctionCount:secretKey:)();
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(a6, v118);
      outlined destroy of AspireApiPECConfig(v87, type metadata accessor for AspireApiPIRShardConfig);
      v93 = a1;
      v94 = v90;
      v95 = v107;
      outlined init with take of SecretKey(v93, v107, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      v96 = (int *)type metadata accessor for KeywordPIRClient();
      v97 = v95 + v96[8];
      *(_QWORD *)v97 = v138;
      *(_QWORD *)(v97 + 8) = v37;
      *(_BYTE *)(v97 + 16) = v128 & 1;
      outlined init with take of SecretKey(a2, v95 + v96[5], type metadata accessor for AspireApiPIRConfig);
      v98 = (_QWORD *)(v95 + v96[6]);
      v99 = v132;
      *v98 = v131;
      v98[1] = v99;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v105 + 32))(v95 + v96[7], v94, v106);
    }
  }
  __break(1u);
LABEL_63:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for KeywordPIRClient()
{
  uint64_t result;

  result = type metadata singleton initialization cache for KeywordPIRClient;
  if (!type metadata singleton initialization cache for KeywordPIRClient)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t closure #2 in KeywordPIRClient.constructPIRRequest(with:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = a2;
  v13 = a3 + *(int *)(type metadata accessor for KeywordPIRClient() + 20);
  v14 = type metadata accessor for AspireApiPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v13 + *(int *)(v14 + 40), (uint64_t)v8, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    *(_QWORD *)v12 = 0;
    v12[8] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v8, (uint64_t)v12, type metadata accessor for AspirePirKeywordPirParameters);
  }
  v15 = *(_QWORD *)v12;
  result = outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspirePirKeywordPirParameters);
  a1[1] = v15;
  return result;
}

uint64_t closure #3 in KeywordPIRClient.constructPIRRequest(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = a3;
  v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AspirePirEncryptedIndices(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for KeywordPIRClient();
  v14 = (unint64_t *)(a2 + *(int *)(v13 + 32));
  v15 = *v14;
  v16 = *((_BYTE *)v14 + 16);
  v33 = a2;
  v32 = v6;
  v31 = v13;
  if ((v16 & 1) == 0)
  {
    v17 = v14[1];
    v18 = (unint64_t *)(a1 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v18 = v15;
    v18[1] = v17;
    goto LABEL_6;
  }
  if ((v15 & 0x8000000000000000) == 0 && !HIDWORD(v15))
  {
    *(_DWORD *)a1 = v15;
LABEL_6:
    outlined init with copy of SecretKey(v30, (uint64_t)v12, type metadata accessor for AspirePirEncryptedIndices);
    v19 = type metadata accessor for AspireApiPIRRequest(0);
    v20 = a1 + *(int *)(v19 + 28);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined init with take of SecretKey((uint64_t)v12, v20, type metadata accessor for AspirePirEncryptedIndices);
    v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
    MEMORY[0x24BDAC7A8](v21);
    v22 = v33;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
    static Message.with(_:)();
    v23 = a1 + *(int *)(v19 + 32);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v23, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined init with take of SecretKey((uint64_t)v8, v23, type metadata accessor for AspireApiEvaluationKeyMetadata);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v23, 0, 1, v5);
    v24 = (uint64_t *)(v22 + *(int *)(v31 + 24));
    v25 = *v24;
    v26 = v24[1];
    v27 = *(_QWORD *)(a1 + 8);
    v28 = *(_QWORD *)(a1 + 16);
    outlined copy of Data._Representation(*v24, v26);
    result = outlined consume of Data._Representation(v27, v28);
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = v26;
    return result;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #3 in KeywordPIRClient.constructPIRRequest(with:)(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  *a1 = *a2;
  v3 = (char *)a2 + *(int *)(type metadata accessor for KeywordPIRClient() + 20);
  v4 = *((_QWORD *)v3 + 4);
  v5 = *((_QWORD *)v3 + 5);
  v6 = a1[1];
  v7 = a1[2];
  outlined copy of Data._Representation(v4, v5);
  result = outlined consume of Data._Representation(v6, v7);
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t partial apply for closure #2 in KeywordPIRClient.constructPIRRequest(with:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #2 in KeywordPIRClient.constructPIRRequest(with:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #3 in KeywordPIRClient.constructPIRRequest(with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in KeywordPIRClient.constructPIRRequest(with:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined copy of ShardLabel(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of ShardLabel(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t destroy for ShardLabel(uint64_t a1)
{
  return outlined consume of ShardLabel(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ShardLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ShardLabel(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ShardLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ShardLabel(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ShardLabel(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ShardLabel(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ShardLabel(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShardLabel(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShardLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ShardLabel(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for ShardLabel(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ShardLabel()
{
  return &type metadata for ShardLabel;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeywordPIRClient(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  int *v58;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(type metadata accessor for SecretKey() + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v58 = a3;
    v11 = a3[5];
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = *(uint64_t *)((char *)a2 + v11);
    v15 = *(uint64_t *)((char *)a2 + v11 + 8);
    *(_QWORD *)v12 = v14;
    *((_QWORD *)v12 + 1) = v15;
    v12[16] = v13[16];
    v16 = *((_QWORD *)v13 + 4);
    *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
    v17 = *((_QWORD *)v13 + 5);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v16, v17);
    *((_QWORD *)v12 + 4) = v16;
    *((_QWORD *)v12 + 5) = v17;
    v18 = (int *)type metadata accessor for AspireApiPIRConfig(0);
    v19 = v18[8];
    v20 = &v12[v19];
    v21 = &v13[v19];
    v22 = type metadata accessor for UnknownStorage();
    v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v57(v20, v21, v22);
    v23 = v18[9];
    v24 = &v12[v23];
    v25 = &v13[v23];
    v26 = type metadata accessor for AspireHeEncryptionParameters(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v29 = v57;
    }
    else
    {
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v31 = *((_QWORD *)v25 + 3);
      *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
      *((_QWORD *)v24 + 3) = v31;
      v24[32] = v25[32];
      *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
      v24[48] = v25[48];
      *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
      v24[64] = v25[64];
      v32 = *(int *)(v26 + 40);
      v56 = &v24[v32];
      v33 = &v25[v32];
      swift_bridgeObjectRetain();
      v34 = v33;
      v29 = v57;
      v57(v56, v34, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v35 = v18[10];
    v36 = &v12[v35];
    v37 = &v13[v35];
    v38 = type metadata accessor for AspirePirKeywordPirParameters(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      v29(&v36[*(int *)(v38 + 24)], &v37[*(int *)(v38 + 24)], v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v41 = v58[6];
    v42 = (uint64_t *)((char *)v4 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = *v43;
    v45 = v43[1];
    outlined copy of Data._Representation(*v43, v45);
    *v42 = v44;
    v42[1] = v45;
    v46 = v58[7];
    v47 = (char *)v4 + v46;
    v48 = (char *)a2 + v46;
    v49 = type metadata accessor for PIR.KeywordPirClient();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
    v50 = v58[8];
    v51 = (char *)v4 + v50;
    v52 = (char *)a2 + v50;
    v53 = *(_QWORD *)v52;
    v54 = *((_QWORD *)v52 + 1);
    LOBYTE(v47) = v52[16];
    outlined copy of ShardLabel(*(_QWORD *)v52, v54, (char)v47);
    *(_QWORD *)v51 = v53;
    *((_QWORD *)v51 + 1) = v54;
    v51[16] = (char)v47;
  }
  return v4;
}

uint64_t destroy for KeywordPIRClient(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1 + *(int *)(type metadata accessor for SecretKey() + 20);
  v5 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[5];
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
  v7 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v8 = v6 + v7[8];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = v6 + v7[9];
  v12 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    v10(v11 + *(int *)(v12 + 40), v9);
  }
  v13 = v6 + v7[10];
  v14 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
    v10(v13 + *(int *)(v14 + 24), v9);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v15 = a1 + a2[7];
  v16 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  return outlined consume of ShardLabel(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8), *(_BYTE *)(a1 + a2[8] + 16));
}

_QWORD *initializeWithCopy for KeywordPIRClient(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v53;
  _QWORD *v54;
  int *v55;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v54 = a2;
  v55 = a3;
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)((char *)a2 + v10);
  v14 = *(_QWORD *)((char *)a2 + v10 + 8);
  *(_QWORD *)v11 = v13;
  *((_QWORD *)v11 + 1) = v14;
  v11[16] = v12[16];
  v15 = *((_QWORD *)v12 + 4);
  *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
  v16 = *((_QWORD *)v12 + 5);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v15, v16);
  *((_QWORD *)v11 + 4) = v15;
  *((_QWORD *)v11 + 5) = v16;
  v17 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v18 = v17[8];
  v19 = &v11[v18];
  v20 = &v12[v18];
  v21 = type metadata accessor for UnknownStorage();
  v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  v22(v19, v20, v21);
  v23 = v17[9];
  v24 = &v11[v23];
  v25 = &v12[v23];
  v26 = type metadata accessor for AspireHeEncryptionParameters(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
    v29 = *((_QWORD *)v25 + 3);
    *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
    *((_QWORD *)v24 + 3) = v29;
    v24[32] = v25[32];
    *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
    v24[48] = v25[48];
    *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
    v24[64] = v25[64];
    v30 = *(int *)(v26 + 40);
    v53 = &v24[v30];
    v31 = &v25[v30];
    swift_bridgeObjectRetain();
    v22(v53, v31, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v32 = v17[10];
  v33 = &v11[v32];
  v34 = &v12[v32];
  v35 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v22(&v33[*(int *)(v35 + 24)], &v34[*(int *)(v35 + 24)], v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v38 = v55[6];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)v54 + v38);
  v41 = *v40;
  v42 = v40[1];
  outlined copy of Data._Representation(*v40, v42);
  *v39 = v41;
  v39[1] = v42;
  v43 = v55[7];
  v44 = (char *)a1 + v43;
  v45 = (char *)v54 + v43;
  v46 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  v47 = v55[8];
  v48 = (char *)a1 + v47;
  v49 = (char *)v54 + v47;
  v50 = *(_QWORD *)v49;
  v51 = *((_QWORD *)v49 + 1);
  LOBYTE(v44) = v49[16];
  outlined copy of ShardLabel(*(_QWORD *)v49, v51, (char)v44);
  *(_QWORD *)v48 = v50;
  *((_QWORD *)v48 + 1) = v51;
  v48[16] = (char)v44;
  return a1;
}

_QWORD *assignWithCopy for KeywordPIRClient(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *);
  uint64_t v72;
  uint64_t v73;
  int *v74;
  _QWORD *v75;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v74 = a3;
  v75 = a2;
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)v12 + 1);
  v11[16] = v12[16];
  *((_QWORD *)v11 + 1) = v13;
  *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
  v14 = *((_QWORD *)v12 + 4);
  v15 = *((_QWORD *)v12 + 5);
  outlined copy of Data._Representation(v14, v15);
  v16 = *((_QWORD *)v11 + 4);
  v17 = *((_QWORD *)v11 + 5);
  *((_QWORD *)v11 + 4) = v14;
  *((_QWORD *)v11 + 5) = v15;
  outlined consume of Data._Representation(v16, v17);
  v18 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v19 = v18[8];
  v20 = &v11[v19];
  v21 = &v12[v19];
  v22 = type metadata accessor for UnknownStorage();
  v72 = *(_QWORD *)(v22 - 8);
  v73 = v22;
  v71 = *(void (**)(char *, char *))(v72 + 24);
  v71(v20, v21);
  v23 = v18[9];
  v24 = (uint64_t)&v11[v23];
  v25 = &v12[v23];
  v26 = type metadata accessor for AspireHeEncryptionParameters(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28((uint64_t)v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_QWORD *)(v24 + 8) = *((_QWORD *)v25 + 1);
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
      v31 = *((_QWORD *)v25 + 3);
      *(_BYTE *)(v24 + 32) = v25[32];
      *(_QWORD *)(v24 + 24) = v31;
      v32 = *((_QWORD *)v25 + 5);
      *(_BYTE *)(v24 + 48) = v25[48];
      *(_QWORD *)(v24 + 40) = v32;
      v33 = *((_QWORD *)v25 + 7);
      *(_BYTE *)(v24 + 64) = v25[64];
      *(_QWORD *)(v24 + 56) = v33;
      v34 = *(int *)(v26 + 40);
      v35 = v24 + v34;
      v36 = &v25[v34];
      v37 = *(void (**)(uint64_t, char *, uint64_t))(v72 + 16);
      swift_bridgeObjectRetain();
      v37(v35, v36, v73);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v24, v25, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = *((_QWORD *)v25 + 1);
  *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = *((_QWORD *)v25 + 3);
  *(_BYTE *)(v24 + 32) = v25[32];
  *(_QWORD *)(v24 + 24) = v68;
  v69 = *((_QWORD *)v25 + 5);
  *(_BYTE *)(v24 + 48) = v25[48];
  *(_QWORD *)(v24 + 40) = v69;
  v70 = *((_QWORD *)v25 + 7);
  *(_BYTE *)(v24 + 64) = v25[64];
  *(_QWORD *)(v24 + 56) = v70;
  ((void (*)(uint64_t, char *, uint64_t))v71)(v24 + *(int *)(v26 + 40), &v25[*(int *)(v26 + 40)], v73);
LABEL_7:
  v39 = v18[10];
  v40 = &v11[v39];
  v41 = &v12[v39];
  v42 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      ((void (*)(char *, char *, uint64_t))v71)(&v40[*(int *)(v42 + 24)], &v41[*(int *)(v42 + 24)], v73);
      goto LABEL_13;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspirePirKeywordPirParameters);
    goto LABEL_12;
  }
  if (v46)
  {
LABEL_12:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(&v40[*(int *)(v42 + 24)], &v41[*(int *)(v42 + 24)], v73);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_13:
  v48 = v74[6];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (_QWORD *)((char *)v75 + v48);
  v51 = *v50;
  v52 = v50[1];
  outlined copy of Data._Representation(*v50, v52);
  v53 = *v49;
  v54 = v49[1];
  *v49 = v51;
  v49[1] = v52;
  outlined consume of Data._Representation(v53, v54);
  v55 = v74[7];
  v56 = (char *)a1 + v55;
  v57 = (char *)v75 + v55;
  v58 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 24))(v56, v57, v58);
  v59 = v74[8];
  v60 = (char *)a1 + v59;
  v61 = (char *)v75 + v59;
  v62 = *(_QWORD *)v61;
  v63 = *((_QWORD *)v61 + 1);
  LOBYTE(v56) = v61[16];
  outlined copy of ShardLabel(*(_QWORD *)v61, v63, (char)v56);
  v64 = *(_QWORD *)v60;
  v65 = *((_QWORD *)v60 + 1);
  v66 = v60[16];
  *(_QWORD *)v60 = v62;
  *((_QWORD *)v60 + 1) = v63;
  v60[16] = (char)v56;
  outlined consume of ShardLabel(v64, v65, v66);
  return a1;
}

_QWORD *initializeWithTake for KeywordPIRClient(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v41;
  int *v42;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v41 = a2;
  v42 = a3;
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)((char *)a2 + v10 + 8);
  *(_QWORD *)v11 = *(_QWORD *)((char *)a2 + v10);
  *((_QWORD *)v11 + 1) = v13;
  v11[16] = *((_BYTE *)a2 + v10 + 16);
  *((_QWORD *)v11 + 3) = *(_QWORD *)((char *)a2 + v10 + 24);
  *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)a2 + v10 + 32);
  v14 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v15 = v14[8];
  v16 = &v11[v15];
  v17 = &v12[v15];
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v19(v16, v17, v18);
  v20 = v14[9];
  v21 = &v11[v20];
  v22 = &v12[v20];
  v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v26 = *((_QWORD *)v22 + 3);
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
    *((_QWORD *)v21 + 3) = v26;
    v21[32] = v22[32];
    *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
    v21[48] = v22[48];
    *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
    v21[64] = v22[64];
    v19(&v21[*(int *)(v23 + 40)], &v22[*(int *)(v23 + 40)], v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v27 = v14[10];
  v28 = &v11[v27];
  v29 = &v12[v27];
  v30 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    v19(&v28[*(int *)(v30 + 24)], &v29[*(int *)(v30 + 24)], v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  v33 = v42[7];
  *(_OWORD *)((char *)a1 + v42[6]) = *(_OWORD *)((char *)v41 + v42[6]);
  v34 = (char *)a1 + v33;
  v35 = (char *)v41 + v33;
  v36 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  v37 = v42[8];
  v38 = (char *)a1 + v37;
  v39 = (char *)v41 + v37;
  *(_OWORD *)v38 = *(_OWORD *)v39;
  v38[16] = v39[16];
  return a1;
}

_QWORD *assignWithTake for KeywordPIRClient(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v55)(char *, char *);
  uint64_t v56;
  uint64_t v57;
  int *v58;
  _QWORD *v59;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v58 = a3;
  v59 = a2;
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRelease();
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  v11[16] = v12[16];
  v13 = *((_QWORD *)v12 + 5);
  v14 = *((_QWORD *)v11 + 4);
  v15 = *((_QWORD *)v11 + 5);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
  *((_QWORD *)v11 + 5) = v13;
  outlined consume of Data._Representation(v14, v15);
  v16 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v17 = v16[8];
  v18 = &v11[v17];
  v19 = &v12[v17];
  v20 = type metadata accessor for UnknownStorage();
  v56 = *(_QWORD *)(v20 - 8);
  v57 = v20;
  v55 = *(void (**)(char *, char *))(v56 + 40);
  v55(v18, v19);
  v21 = v16[9];
  v22 = (uint64_t)&v11[v21];
  v23 = &v12[v21];
  v24 = type metadata accessor for AspireHeEncryptionParameters(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26((uint64_t)v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
      v29 = *((_QWORD *)v23 + 3);
      *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
      *(_QWORD *)(v22 + 24) = v29;
      *(_BYTE *)(v22 + 32) = v23[32];
      *(_BYTE *)(v22 + 48) = v23[48];
      *(_QWORD *)(v22 + 40) = *((_QWORD *)v23 + 5);
      *(_QWORD *)(v22 + 56) = *((_QWORD *)v23 + 7);
      *(_BYTE *)(v22 + 64) = v23[64];
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v22 + *(int *)(v24 + 40), &v23[*(int *)(v24 + 40)], v57);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v28)
  {
    outlined destroy of AspireApiPECConfig(v22, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v22, v23, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 3);
  *(_BYTE *)(v22 + 32) = v23[32];
  *(_QWORD *)(v22 + 40) = *((_QWORD *)v23 + 5);
  *(_BYTE *)(v22 + 48) = v23[48];
  *(_QWORD *)(v22 + 56) = *((_QWORD *)v23 + 7);
  *(_BYTE *)(v22 + 64) = v23[64];
  ((void (*)(uint64_t, char *, uint64_t))v55)(v22 + *(int *)(v24 + 40), &v23[*(int *)(v24 + 40)], v57);
LABEL_7:
  v31 = v16[10];
  v32 = &v11[v31];
  v33 = &v12[v31];
  v34 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      ((void (*)(char *, char *, uint64_t))v55)(&v32[*(int *)(v34 + 24)], &v33[*(int *)(v34 + 24)], v57);
      goto LABEL_13;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspirePirKeywordPirParameters);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(&v32[*(int *)(v34 + 24)], &v33[*(int *)(v34 + 24)], v57);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_13:
  v40 = v58[6];
  v41 = *(_QWORD *)((char *)a1 + v40);
  v42 = *(_QWORD *)((char *)a1 + v40 + 8);
  *(_OWORD *)((char *)a1 + v40) = *(_OWORD *)((char *)v59 + v40);
  outlined consume of Data._Representation(v41, v42);
  v43 = v58[7];
  v44 = (char *)a1 + v43;
  v45 = (char *)v59 + v43;
  v46 = type metadata accessor for PIR.KeywordPirClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v47 = v58[8];
  v48 = (char *)a1 + v47;
  v49 = (char *)v59 + v47;
  v50 = v49[16];
  v51 = *(_QWORD *)v48;
  v52 = *((_QWORD *)v48 + 1);
  v53 = v48[16];
  *(_OWORD *)v48 = *(_OWORD *)v49;
  v48[16] = v50;
  outlined consume of ShardLabel(v51, v52, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeywordPIRClient()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C9EF84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;

  v6 = type metadata accessor for SecretKey();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for AspireApiPIRConfig(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for PIR.KeywordPirClient();
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(unsigned __int8 *)(a1 + a3[8] + 16);
  if (v16 > 1)
    return (v16 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for KeywordPIRClient()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C9F05C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for SecretKey();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for AspireApiPIRConfig(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for PIR.KeywordPirClient();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_BYTE *)(a1 + a4[8] + 16) = -(char)a2;
  return result;
}

uint64_t type metadata completion function for KeywordPIRClient()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for SecretKey();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AspireApiPIRConfig(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PIR.KeywordPirClient();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #3 in KeywordPIRClient.constructPIRRequest(with:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #3 in KeywordPIRClient.constructPIRRequest(with:)(a1, *(_QWORD **)(v1 + 16));
}

uint64_t KVSKeyStorage.__allocating_init()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  v1 = objc_allocWithZone(MEMORY[0x24BDD1888]);
  v2 = (void *)MEMORY[0x23B821F68](0xD000000000000013, 0x8000000237D61440);
  v3 = objc_msgSend(v1, sel_initWithStoreIdentifier_type_, v2, 1);

  *(_QWORD *)(v0 + 112) = v3;
  return v0;
}

id KVSKeyStorage.ukvs.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 112);
}

uint64_t KVSKeyStorage.init()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;

  swift_defaultActor_initialize();
  v1 = objc_allocWithZone(MEMORY[0x24BDD1888]);
  v2 = (void *)MEMORY[0x23B821F68](0xD000000000000013, 0x8000000237D61440);
  v3 = objc_msgSend(v1, sel_initWithStoreIdentifier_type_, v2, 1);

  *(_QWORD *)(v0 + 112) = v3;
  return v0;
}

uint64_t KVSKeyStorage.get(group:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(void **)(v1 + 112);
  v4 = (void *)MEMORY[0x23B821F68]();
  v5 = objc_msgSend(v3, sel_dataForKey_, v4);

  if (v5)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    v9 = type metadata accessor for UserIdentifier();
    lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type UserIdentifier and conformance UserIdentifier, 255, (uint64_t (*)(uint64_t))type metadata accessor for UserIdentifier, (uint64_t)&protocol conformance descriptor for UserIdentifier);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 0, 1, v9);
    swift_release();
    return outlined consume of Data._Representation(v6, v8);
  }
  else
  {
    v11 = type metadata accessor for UserIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

void KVSKeyStorage.set(group:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  Class isa;
  void *v22;
  _QWORD v23[2];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UserIdentifier();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UserIdentifier?(a3, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of UserIdentifier?((uint64_t)v10);
    v15 = *(void **)(v4 + 112);
    v16 = (void *)MEMORY[0x23B821F68](a1, a2);
    objc_msgSend(v15, sel_removeObjectForKey_, v16);

  }
  else
  {
    outlined init with take of UserIdentifier((uint64_t)v10, (uint64_t)v14);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type UserIdentifier and conformance UserIdentifier, 255, (uint64_t (*)(uint64_t))type metadata accessor for UserIdentifier, (uint64_t)&protocol conformance descriptor for UserIdentifier);
    v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    v19 = v18;
    v20 = *(void **)(v4 + 112);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v22 = (void *)MEMORY[0x23B821F68](a1, a2);
    objc_msgSend(v20, sel_setData_forKey_, isa, v22);
    outlined consume of Data._Representation(v17, v19);
    swift_release();

    outlined destroy of UserIdentifier((uint64_t)v14);
  }
}

uint64_t KVSKeyStorage.synchronize()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t KVSKeyStorage.synchronize()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(&lazy protocol witness table cache variable for type KVSKeyStorage and conformance KVSKeyStorage, a2, (uint64_t (*)(uint64_t))type metadata accessor for KVSKeyStorage, (uint64_t)&protocol conformance descriptor for KVSKeyStorage);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = KVSKeyStorage.synchronize();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

void closure #1 in KVSKeyStorage.synchronize()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = *(void **)(a2 + 112);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in KVSKeyStorage.synchronize();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_3;
  v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_synchronizeWithCompletionHandler_, v10);
  _Block_release(v10);
}

uint64_t closure #1 in closure #1 in KVSKeyStorage.synchronize()(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  id v11;

  if (one-time initialization token for daemon != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.daemon);
  v3 = a1;
  v4 = a1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138543362;
    if (a1)
    {
      v9 = a1;
      v10 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v10 = 0;
    }
    *v8 = v10;

    _os_log_impl(&dword_237BC8000, v5, v6, "KVSKeyStorage failed to synchronize: %{public}@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);

    if (!a1)
      goto LABEL_10;
LABEL_7:
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }

  if (a1)
    goto LABEL_7;
LABEL_10:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(returning:)();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t KVSKeyStorage.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t KVSKeyStorage.__deallocating_deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t KVSKeyStorage.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for KeyStorage.get(group:) in conformance KVSKeyStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t protocol witness for KeyStorage.get(group:) in conformance KVSKeyStorage()
{
  uint64_t v0;

  KVSKeyStorage.get(group:)(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for KeyStorage.set(group:userId:) in conformance KVSKeyStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t protocol witness for KeyStorage.set(group:userId:) in conformance KVSKeyStorage()
{
  uint64_t v0;

  KVSKeyStorage.set(group:userId:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for KeyStorage.synchronize() in conformance KVSKeyStorage()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t outlined init with copy of UserIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UserIdentifier?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of UserIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type UserIdentifier and conformance UserIdentifier(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x23B822CDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for KVSKeyStorage()
{
  return objc_opt_self();
}

void partial apply for closure #1 in KVSKeyStorage.synchronize()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in KVSKeyStorage.synchronize()(a1, v1);
}

uint64_t method lookup function for KVSKeyStorage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KVSKeyStorage.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of KVSKeyStorage.get(group:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of KVSKeyStorage.set(group:userId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of KVSKeyStorage.synchronize()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 120) + *(_QWORD *)(*(_QWORD *)v0 + 120));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v4();
}

uint64_t sub_237CA014C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in KVSKeyStorage.synchronize()(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in KVSKeyStorage.synchronize()(a1);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t AMSNetworking.__allocating_init(networkDelegationConfig:secondaryIdentifier:baseURL:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  AMSNetworking.init(networkDelegationConfig:secondaryIdentifier:baseURL:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t AMSNetworking.baseURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8CipherML13AMSNetworking_baseURL;
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id AMSNetworking.bag.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_bag);
}

id AMSNetworking.encoder.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
}

id AMSNetworking.urlSession.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession);
}

uint64_t AMSNetworking.networkDelegationConfig.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_networkDelegationConfig);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AMSNetworking.init(networkDelegationConfig:secondaryIdentifier:baseURL:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  _QWORD *v21;

  v10 = v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_baseURL;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, a5, v11);
  objc_msgSend((id)objc_opt_self(), sel_setPreferEphemeralURLSessions_, 1);
  v13 = (void *)MEMORY[0x23B821F68](0x6761676E45534D41, 0xED0000746E656D65);
  v14 = (void *)MEMORY[0x23B821F68](49, 0xE100000000000000);
  v15 = objc_msgSend((id)objc_opt_self(), sel_bagForProfile_profileVersion_, v13, v14);

  *(_QWORD *)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_bag) = v15;
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE083F8]), sel_initWithBag_, v15);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder) = v16;
  objc_msgSend(v16, sel_setRequestEncoding_, 1);
  v17 = objc_msgSend((id)objc_opt_self(), sel_ephemeralSessionConfiguration);
  v18 = objc_msgSend((id)objc_opt_self(), sel_currentProcess);
  objc_msgSend(v17, sel_ams_configureWithProcessInfo_bag_, v18, v15);

  if (a2)
  {
    swift_bridgeObjectRetain();
    v19 = (void *)MEMORY[0x23B821F68](a1, a2);
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_set_sourceApplicationBundleIdentifier_, v19);

  }
  specialized static NetworkManagerHelper.configureSecondaryIdentifier(configuration:secondaryIdentifier:)(v17, a3, a4);
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE08410]), sel_initWithConfiguration_, v17);

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a5, v11);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession) = v20;
  v21 = (_QWORD *)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_networkDelegationConfig);
  *v21 = a1;
  v21[1] = a2;
  return v5;
}

uint64_t AMSNetworking.constructURL(path:userId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[4];

  v14[1] = a3;
  v5 = type metadata accessor for URL.DirectoryHint();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[2] = a1;
  v14[3] = a2;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDCD7A0], v5);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
  type metadata accessor for URLQueryItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_237D540E0;
  UUID.uuidString.getter();
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  URL.appending(queryItems:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t default argument 0 of Date.ISO8601Format(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for TimeZone();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  MEMORY[0x24BDAC7A8](v16);
  (*(void (**)(char *, _QWORD))(v18 + 104))((char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDCE368]);
  v19 = v12;
  v20 = v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BDCE348], v19);
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v22 = v29;
  v21(v11, *MEMORY[0x24BDCE388], v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCE3D0], v28);
  TimeZone.init(secondsFromGMT:)();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v3, 1, v22);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v25, v3, v22);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
  }
  return result;
}

uint64_t AMSNetworking.fetchConfigs(useCases:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[31] = a3;
  v4[32] = v3;
  v4[29] = a1;
  v4[30] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v4[33] = swift_task_alloc();
  v4[34] = type metadata accessor for AMDPbHEConfigsReply(0);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  v4[40] = type metadata accessor for AMDPbHEResponse(0);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v4[44] = v5;
  v4[45] = *(_QWORD *)(v5 - 8);
  v4[46] = swift_task_alloc();
  v6 = type metadata accessor for URL();
  v4[47] = v6;
  v4[48] = *(_QWORD *)(v6 - 8);
  v4[49] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AMSNetworking.fetchConfigs(useCases:userId:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  Class isa;
  Class v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  id v34;
  uint64_t v35;

  v1 = v0[32];
  v2 = v0[30];
  AMSNetworking.constructURL(path:userId:)(0xD000000000000015, 0x8000000237D633B0, v0[49]);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
  v5 = v4;
  specialized AMSNetworking.requestHeaders()();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 152))(v2);
  v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v3, sel_requestWithMethod_URL_headers_parameters_, 2, v5, isa, v7);
  v0[50] = v8;

  v0[10] = MEMORY[0x24BDAC760];
  v0[14] = closure #1 in AMSNetworking.fetchConfigs(useCases:userId:);
  v0[15] = 0;
  v0[11] = 1107296256;
  v0[12] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v0[13] = &block_descriptor_4;
  v9 = _Block_copy(v0 + 10);
  v34 = v8;
  objc_msgSend(v8, sel_addErrorBlock_, v9);
  _Block_release(v9);
  if (one-time initialization token for networking != -1)
    swift_once();
  v10 = v0[45];
  v11 = v0[46];
  v12 = v0[44];
  v13 = v0[31];
  v14 = type metadata accessor for Logger();
  v0[51] = __swift_project_value_buffer(v14, (uint64_t)static Logger.networking);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v13, v12);
  swift_bridgeObjectRetain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  v17 = os_log_type_enabled(v15, v16);
  v19 = v0[45];
  v18 = v0[46];
  v20 = v0[44];
  if (v17)
  {
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v35 = v22;
    *(_DWORD *)v21 = 136446467;
    v23 = swift_bridgeObjectRetain();
    v24 = MEMORY[0x23B822070](v23, MEMORY[0x24BEE0D00]);
    v33 = v19;
    v26 = v25;
    swift_bridgeObjectRelease();
    v0[27] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2081;
    v27 = UUID.uuidString.getter();
    v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v18, v20);
    _os_log_impl(&dword_237BC8000, v15, v16, "Request to fetchConfigs has started for useCases '%{public}s' and userId: '%{private}s'", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v22, -1, -1);
    MEMORY[0x23B822DA8](v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  v29 = objc_msgSend(*(id *)(v0[32] + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession), sel_dataTaskPromiseWithRequestPromise_, v34);
  v0[52] = v29;
  v0[7] = v0 + 21;
  v0[2] = v0;
  v0[3] = AMSNetworking.fetchConfigs(useCases:userId:);
  v30 = swift_continuation_init();
  v0[16] = MEMORY[0x24BDAC760];
  v31 = v0 + 16;
  v31[1] = 0x40000000;
  v31[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult;
  v31[3] = &block_descriptor_1;
  v31[4] = v30;
  objc_msgSend(v29, sel_resultWithCompletion_, v31);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 424) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  NSObject *v0;
  Class isa;
  void *v2;
  Class v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  Class v15;
  Class v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  objc_class *v31;
  objc_class *v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Class v45;
  Class v46;
  Class v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  Class v53;
  uint64_t v54;
  uint64_t v55;
  os_log_t log;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  isa = v0[21].isa;
  v2 = specialized AMSURLResult.validateSuccessResponse()();
  v3 = v0[52].isa;
  log = v0 + 23;
  v4 = v2;

  v5 = v4;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    *(_DWORD *)swift_slowAlloc() = 134349056;
    v8 = objc_msgSend(v5, sel_data);
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    __asm { BR              X10 }
  }

  v11 = objc_msgSend(v5, sel_data);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v5;

  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
  Message.init(serializedData:extensions:partial:options:)();
  AMDPbHEResponse.validateSuccessReponse()((uint64_t)v0[42].isa);
  v13 = (uint64_t)v0[43].isa;
  outlined destroy of AspireApiPECConfig((uint64_t)v0[41].isa, type metadata accessor for AMDPbHEResponse);
  AMDPbHEResponse.validateAPICode(expected:)(1, 1, v13);
  v15 = v0[43].isa;
  v16 = v0[40].isa;
  v17 = (uint64_t)v0[33].isa;
  outlined destroy of AspireApiPECConfig((uint64_t)v0[42].isa, type metadata accessor for AMDPbHEResponse);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15 + *((int *)v16 + 7), v17, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v18 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18);
  v20 = (uint64_t)v0[33].isa;
  if (v19 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined init with take of SecretKey(v20, (uint64_t)v0[37].isa, type metadata accessor for AMDPbHEConfigsReply);
      goto LABEL_9;
    }
    outlined destroy of AspireApiPECConfig(v20, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  v21 = (unint64_t *)v0[37].isa;
  v22 = MEMORY[0x24BEE4AF8];
  *v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v21[1] = v22;
  UnknownStorage.init()();
LABEL_9:
  v23 = (uint64_t)v0[37].isa;
  v24 = (uint64_t)v0[35].isa;
  outlined init with copy of SecretKey(v23, (uint64_t)v0[36].isa, type metadata accessor for AMDPbHEConfigsReply);
  outlined init with copy of SecretKey(v23, v24, type metadata accessor for AMDPbHEConfigsReply);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.default.getter();
  v27 = os_log_type_enabled(v25, v26);
  v28 = (uint64_t)v0[35].isa;
  v29 = (uint64_t)v0[36].isa;
  if (v27)
  {
    v30 = swift_slowAlloc();
    *(_DWORD *)v30 = 134349312;
    v31 = *(objc_class **)(*(_QWORD *)v29 + 16);
    outlined destroy of AspireApiPECConfig(v29, type metadata accessor for AMDPbHEConfigsReply);
    v0[24].isa = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2050;
    v32 = *(objc_class **)(*(_QWORD *)(v28 + 8) + 16);
    outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AMDPbHEConfigsReply);
    v0[25].isa = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_237BC8000, v25, v26, "Request to fetchConfigs has finished with AMD: %{public}ld configs and %{public}ld keyInfos", (uint8_t *)v30, 0x16u);
    MEMORY[0x23B822DA8](v30, -1, -1);
  }
  else
  {
    outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AMDPbHEConfigsReply);
    outlined destroy of AspireApiPECConfig(v29, type metadata accessor for AMDPbHEConfigsReply);
  }
  v33 = v0[37].isa;
  v34 = (uint64_t)v0[30].isa;

  v35 = swift_task_alloc();
  *(_QWORD *)(v35 + 16) = v33;
  swift_bridgeObjectRetain();
  v36 = specialized _ArrayProtocol.filter(_:)((uint64_t)partial apply for closure #2 in AMSNetworking.fetchConfigs(useCases:userId:), v35, v34);
  swift_task_dealloc();
  if (*(_QWORD *)(v36 + 16))
  {
    v37 = v0;
    swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v55 = swift_slowAlloc();
      *(_QWORD *)&v57 = v55;
      *(_DWORD *)v40 = 136446210;
      v41 = swift_bridgeObjectRetain();
      v42 = MEMORY[0x23B822070](v41, MEMORY[0x24BEE0D00]);
      v44 = v43;
      swift_bridgeObjectRelease();
      log->isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v38, v39, "No configuration found for useCases: %{public}s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v55, -1, -1);
      MEMORY[0x23B822DA8](v40, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

  }
  else
  {
    v37 = v0;
    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
  Message.serializedData(partial:)();
  type metadata accessor for AspireApiConfigResponse(0);
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
  Message.init(serializedData:extensions:partial:options:)();
  v45 = v37[49].isa;
  v46 = v37[50].isa;
  v47 = v37[48].isa;
  v48 = (uint64_t)v37[43].isa;
  v53 = v37[47].isa;
  v54 = (uint64_t)v37[37].isa;
  v49 = (uint64_t *)v37[29].isa;
  v50 = v37[30].isa;
  swift_bridgeObjectRetain();
  v51 = swift_bridgeObjectRetain();
  v52 = specialized _NativeDictionary.filter(_:)(v51, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AMDPbHEResponse);
  (*((void (**)(Class, Class))v47 + 1))(v45, v53);
  outlined destroy of AspireApiPECConfig(v54, type metadata accessor for AMDPbHEConfigsReply);
  swift_bridgeObjectRelease();
  *v49 = v52;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v37[1].isa)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  NSObject *v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint8_t *v16;

  v1 = *(void **)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(void **)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 384);
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  v6 = *(void **)(v0 + 424);
  v7 = v6;
  v8 = v6;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = v9;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v12 = 138543362;
    v14 = v6;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 176) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v15;

    _os_log_impl(&dword_237BC8000, v11, v10, "Request to fetchConfigs has failed: %{public}@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v13, -1, -1);
    v16 = v12;
    v9 = v11;
    MEMORY[0x23B822DA8](v16, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in AMSNetworking.fetchConfigs(useCases:userId:)(void *a1)
{
  closure #1 in AMSNetworking.fetchConfigs(useCases:userId:)(a1, "Request to fetchConfigs has not been encoded: %{public}@");
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

void *AMSURLResult.validateSuccessResponse()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v1 = specialized AMSURLResult.validateSuccessResponse()();
  v2 = v1;
  if (!v0)
    v3 = v1;
  return v2;
}

uint64_t closure #2 in AMSNetworking.fetchConfigs(useCases:userId:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  if (*(_QWORD *)(*(_QWORD *)a2 + 16))
  {
    v3 = *a1;
    v2 = a1[1];
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
    LOBYTE(v3) = v4;
    swift_bridgeObjectRelease();
    v5 = v3 ^ 1;
  }
  else
  {
    v5 = 1;
  }
  return v5 & 1;
}

unint64_t AMSNetworking.fetchConfigParameters(useCases:)(uint64_t a1)
{
  uint64_t inited;
  uint64_t v2;

  if (!*(_QWORD *)(a1 + 16))
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540E0;
  *(_QWORD *)(inited + 32) = 0x736769666E6F63;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  *(_QWORD *)(inited + 48) = BidirectionalCollection<>.joined(separator:)();
  *(_QWORD *)(inited + 56) = v2;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t AMSNetworking.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[42] = a2;
  v3[43] = v2;
  v3[41] = a1;
  type metadata accessor for BinaryDecodingOptions();
  v3[44] = swift_task_alloc();
  v3[45] = type metadata accessor for AMDPbHEResponse(0);
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  v4 = type metadata accessor for UUID();
  v3[49] = v4;
  v3[50] = *(_QWORD *)(v4 - 8);
  v3[51] = swift_task_alloc();
  v3[52] = type metadata accessor for AspireApiEvaluationKeys(0);
  v3[53] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v3[54] = v5;
  v3[55] = *(_QWORD *)(v5 - 8);
  v3[56] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AMSNetworking.uploadKeys(evaluationKeys:userId:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  Class isa;
  Class v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v31;

  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
  v1 = Message.serializedData(partial:)();
  v0[57] = 0;
  v0[58] = v1;
  v0[59] = v2;
  v3 = v1;
  v4 = v2;
  v5 = v0[43];
  AMSNetworking.constructURL(path:userId:)(0xD000000000000017, 0x8000000237D63400, v0[56]);
  v6 = *(void **)(v5 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
  v8 = v7;
  specialized AMSNetworking.requestHeaders()();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = Data._bridgeToObjectiveC()().super.isa;
  v11 = objc_msgSend(v6, sel_requestWithMethod_URL_headers_parameters_, 4, v8, isa, v10);
  v0[60] = v11;

  v0[18] = MEMORY[0x24BDAC760];
  v0[22] = closure #1 in AMSNetworking.uploadKeys(evaluationKeys:userId:);
  v0[23] = 0;
  v0[19] = 1107296256;
  v0[20] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v0[21] = &block_descriptor_5;
  v12 = _Block_copy(v0 + 18);
  v31 = v11;
  objc_msgSend(v11, sel_addErrorBlock_, v12);
  _Block_release(v12);
  if (one-time initialization token for networking != -1)
    swift_once();
  v13 = v0[53];
  v14 = v0[50];
  v15 = v0[51];
  v16 = v0[49];
  v18 = v0[41];
  v17 = v0[42];
  v19 = type metadata accessor for Logger();
  v0[61] = __swift_project_value_buffer(v19, (uint64_t)static Logger.networking);
  outlined init with copy of SecretKey(v18, v13, type metadata accessor for AspireApiEvaluationKeys);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v17, v16);
  outlined copy of Data._Representation(v3, v4);
  v20 = Logger.logObject.getter();
  LOBYTE(v13) = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v20, (os_log_type_t)v13);
  v22 = v0[53];
  if (v21)
  {
    v23 = swift_slowAlloc();
    swift_slowAlloc();
    *(_DWORD *)v23 = 134349571;
    v24 = *(_QWORD *)(*(_QWORD *)v22 + 16);
    outlined destroy of AspireApiPECConfig(v22, type metadata accessor for AspireApiEvaluationKeys);
    v0[38] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2050;
    __asm { BR              X10 }
  }
  v26 = v0[50];
  v25 = v0[51];
  v27 = v0[49];
  outlined destroy of AspireApiPECConfig(v0[53], type metadata accessor for AspireApiEvaluationKeys);
  outlined consume of Data._Representation(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);

  v0[15] = v0 + 36;
  v0[10] = v0;
  v0[11] = AMSNetworking.uploadKeys(evaluationKeys:userId:);
  v28 = swift_continuation_init();
  v0[29] = MEMORY[0x24BDAC760];
  v29 = v0 + 29;
  v29[1] = 0x40000000;
  v29[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult;
  v29[3] = &block_descriptor_6_0;
  v29[4] = v28;
  objc_msgSend(v31, sel_resultWithCompletion_, v29);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 496) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  NSObject *v12;
  uint8_t *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint8_t *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = *(void **)(v0 + 456);
  v2 = *(void **)(v0 + 288);
  *(_QWORD *)(v0 + 504) = v2;
  static Task<>.checkCancellation()();
  *(_QWORD *)(v0 + 512) = v1;
  if (v1)
  {
    v3 = v1;
    v4 = *(_QWORD *)(v0 + 472);
    v5 = *(void **)(v0 + 480);
    v6 = *(_QWORD *)(v0 + 464);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 432));
    outlined consume of Data._Representation(v6, v4);

    if (one-time initialization token for networking != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.networking);
    v8 = v3;
    v9 = v3;
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = v10;
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v13 = 138543362;
      v15 = v3;
      v16 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 280) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v14 = v16;

      _os_log_impl(&dword_237BC8000, v12, v11, "Request to uploadKeys has failed: %{public}@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v14, -1, -1);
      v17 = v13;
      v10 = v12;
      MEMORY[0x23B822DA8](v17, -1, -1);
    }
    else
    {

    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_237BC8000, v18, v19, "Starting actual upload", v20, 2u);
      MEMORY[0x23B822DA8](v20, -1, -1);
    }
    v21 = *(_QWORD *)(v0 + 344);

    v22 = objc_msgSend(*(id *)(v21 + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession), sel_dataTaskPromiseWithRequest_, v2);
    *(_QWORD *)(v0 + 520) = v22;
    *(_QWORD *)(v0 + 56) = v0 + 272;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = AMSNetworking.uploadKeys(evaluationKeys:userId:);
    v23 = swift_continuation_init();
    *(_QWORD *)(v0 + 192) = MEMORY[0x24BDAC760];
    v24 = (_QWORD *)(v0 + 192);
    v24[1] = 0x40000000;
    v24[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult;
    v24[3] = &block_descriptor_7;
    v24[4] = v23;
    objc_msgSend(v22, sel_resultWithCompletion_, v24);
    return swift_continuation_await();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 528) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  NSObject *v30;
  uint8_t *v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void);

  v1 = *(void **)(v0 + 512);
  v2 = *(void **)(v0 + 272);
  v3 = specialized AMSURLResult.validateSuccessResponse()();
  v4 = *(void **)(v0 + 520);
  if (v1)
  {
    v5 = v1;
    v6 = *(void **)(v0 + 504);
    v7 = *(_QWORD *)(v0 + 472);
    v8 = *(void **)(v0 + 480);
    v9 = *(_QWORD *)(v0 + 464);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 432));
    outlined consume of Data._Representation(v9, v7);

    if (one-time initialization token for networking != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.networking);
    v26 = v5;
    v27 = v5;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = v28;
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v31 = 138543362;
      v33 = v5;
      v34 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 280) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v32 = v34;

      _os_log_impl(&dword_237BC8000, v30, v29, "Request to uploadKeys has failed: %{public}@", v31, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v32, -1, -1);
      v35 = v31;
      v28 = v30;
      MEMORY[0x23B822DA8](v35, -1, -1);
    }
    else
    {

    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v39 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v10 = v3;

    v11 = v10;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      *(_DWORD *)swift_slowAlloc() = 134349056;
      v14 = objc_msgSend(v11, sel_data);
      static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;

      __asm { BR              X10 }
    }

    v17 = objc_msgSend(v11, sel_data);
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
    Message.init(serializedData:extensions:partial:options:)();
    AMDPbHEResponse.validateSuccessReponse()(*(_QWORD *)(v0 + 376));
    v18 = *(_QWORD *)(v0 + 440);
    v19 = *(_QWORD *)(v0 + 384);
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 368), type metadata accessor for AMDPbHEResponse);
    AMDPbHEResponse.validateAPICode(expected:)(0, 1, v19);
    v20 = *(void **)(v0 + 504);
    v21 = *(_QWORD *)(v0 + 472);
    v22 = *(_QWORD *)(v0 + 464);
    v23 = *(_QWORD *)(v0 + 448);
    v24 = *(_QWORD *)(v0 + 432);
    v37 = *(_QWORD *)(v0 + 376);
    v38 = *(_QWORD *)(v0 + 384);

    outlined consume of Data._Representation(v22, v21);
    outlined destroy of AspireApiPECConfig(v37, type metadata accessor for AMDPbHEResponse);
    outlined destroy of AspireApiPECConfig(v38, type metadata accessor for AMDPbHEResponse);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v23, v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v39 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v39();
}

{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint8_t *v18;

  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(void **)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 432);
  swift_willThrow();

  outlined consume of Data._Representation(v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(void **)(v0 + 496);
  if (one-time initialization token for networking != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.networking);
  v9 = v7;
  v10 = v7;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = v11;
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v14 = 138543362;
    v16 = v7;
    v17 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 280) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v15 = v17;

    _os_log_impl(&dword_237BC8000, v13, v12, "Request to uploadKeys has failed: %{public}@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v15, -1, -1);
    v18 = v14;
    v11 = v13;
    MEMORY[0x23B822DA8](v18, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  NSObject *v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint8_t *v20;

  v1 = *(void **)(v0 + 520);
  v2 = *(void **)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 472);
  v4 = *(void **)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 432);
  swift_willThrow();

  outlined consume of Data._Representation(v5, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);

  v9 = *(void **)(v0 + 528);
  if (one-time initialization token for networking != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.networking);
  v11 = v9;
  v12 = v9;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = v13;
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v16 = 138543362;
    v18 = v9;
    v19 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 280) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = v19;

    _os_log_impl(&dword_237BC8000, v15, v14, "Request to uploadKeys has failed: %{public}@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v17, -1, -1);
    v20 = v16;
    v13 = v15;
    MEMORY[0x23B822DA8](v20, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in AMSNetworking.uploadKeys(evaluationKeys:userId:)(void *a1)
{
  closure #1 in AMSNetworking.fetchConfigs(useCases:userId:)(a1, "Request to uploadKeys has not been encoded: %{public}@");
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AMSNetworking.queries(requests:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[28] = a3;
  v4[29] = v3;
  v4[26] = a1;
  v4[27] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v4[30] = swift_task_alloc();
  v4[31] = type metadata accessor for AMDPbHEReplies(0);
  v4[32] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v4[33] = swift_task_alloc();
  v4[34] = type metadata accessor for AMDPbHEResponse(0);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v4[38] = v5;
  v4[39] = *(_QWORD *)(v5 - 8);
  v4[40] = swift_task_alloc();
  v6 = type metadata accessor for URL();
  v4[41] = v6;
  v4[42] = *(_QWORD *)(v6 - 8);
  v4[43] = swift_task_alloc();
  v4[44] = *(_QWORD *)(type metadata accessor for AspireApiRequest(0) - 8);
  v4[45] = swift_task_alloc();
  v4[46] = *(_QWORD *)(type metadata accessor for AMDPbHEQuery(0) - 8);
  v4[47] = swift_task_alloc();
  v4[48] = type metadata accessor for AMDPbHEQueries(0);
  v4[49] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AMSNetworking.queries(requests:userId:)()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  Class isa;
  Class v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t *v58;
  void *aBlock;
  id v60;
  _QWORD *v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 216);
  specialized AMSNetworking.requestHeaders()();
  v2 = *(_QWORD *)(v1 + 16);
  v61 = (_QWORD *)v0;
  if (v2)
  {
    v58 = (uint64_t *)(v0 + 192);
    aBlock = (void *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 368);
    v4 = *(_QWORD *)(v0 + 352);
    v5 = (uint64_t *)(*(_QWORD *)(v0 + 216)
                   + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    v6 = *v5;
    v7 = v5[1];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, v7, 0x65736163657375, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v62 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v9 = *(_QWORD *)(v4 + 72);
    do
    {
      v10 = v61[47];
      outlined init with copy of SecretKey((uint64_t)v5, v61[45], type metadata accessor for AspireApiRequest);
      AspireApiRequest.amd()(v10);
      v11 = v61;
      outlined destroy of AspireApiPECConfig(v61[45], type metadata accessor for AspireApiRequest);
      v12 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v62 + 16) + 1, 1);
        v11 = v61;
        v12 = v62;
      }
      v14 = *(_QWORD *)(v12 + 16);
      v13 = *(_QWORD *)(v12 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v11 = v61;
        v12 = v62;
      }
      v15 = v11[47];
      *(_QWORD *)(v12 + 16) = v14 + 1;
      outlined init with take of SecretKey(v15, v12+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v14, type metadata accessor for AMDPbHEQuery);
      v5 = (uint64_t *)((char *)v5 + v9);
      --v2;
    }
    while (v2);
    *(_QWORD *)(swift_task_alloc() + 16) = v12;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, type metadata accessor for AMDPbHEQueries, (uint64_t)&protocol conformance descriptor for AMDPbHEQueries);
    static Message.with(_:)();
    swift_release();
    swift_task_dealloc();
    v21 = Message.serializedData(partial:)();
    v61[50] = 0;
    v61[51] = v21;
    v61[52] = v22;
    v33 = v21;
    v34 = v22;
    v35 = v61[29];
    AMSNetworking.constructURL(path:userId:)(0xD000000000000010, 0x8000000237D63450, v61[43]);
    v36 = *(void **)(v35 + OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
    URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC8CipherML13AMSNetworking_encoder);
    v38 = v37;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v40 = Data._bridgeToObjectiveC()().super.isa;
    v41 = objc_msgSend(v36, sel_requestWithMethod_URL_headers_parameters_, 4, v38, isa, v40);
    v61[53] = v41;

    v61[14] = closure #3 in AMSNetworking.queries(requests:userId:);
    v61[15] = 0;
    v61[10] = MEMORY[0x24BDAC760];
    v61[11] = 1107296256;
    v61[12] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v61[13] = &block_descriptor_11;
    v42 = _Block_copy(aBlock);
    v60 = v41;
    objc_msgSend(v41, sel_addErrorBlock_, v42);
    _Block_release(v42);
    if (one-time initialization token for networking != -1)
      swift_once();
    v44 = v61[39];
    v43 = v61[40];
    v45 = v61[38];
    v46 = v61[28];
    v47 = type metadata accessor for Logger();
    v61[54] = __swift_project_value_buffer(v47, (uint64_t)static Logger.networking);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v43, v46, v45);
    outlined copy of Data._Representation(v33, v34);
    outlined copy of Data._Representation(v33, v34);
    v48 = Logger.logObject.getter();
    LOBYTE(v44) = static os_log_type_t.default.getter();
    v49 = os_log_type_enabled(v48, (os_log_type_t)v44);
    v51 = v61[39];
    v50 = v61[40];
    v52 = v61[38];
    if (v49)
    {
      v53 = swift_slowAlloc();
      v62 = swift_slowAlloc();
      *(_DWORD *)v53 = 136380931;
      v54 = UUID.uuidString.getter();
      *v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
      *(_WORD *)(v53 + 12) = 2050;
      __asm { BR              X9 }
    }
    outlined consume of Data._Representation(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    outlined consume of Data._Representation(v33, v34);

    v56 = objc_msgSend(*(id *)(v61[29] + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession), sel_dataTaskPromiseWithRequestPromise_, v60);
    v61[55] = v56;
    v61[7] = v61 + 21;
    v61[2] = v61;
    v61[3] = AMSNetworking.queries(requests:userId:);
    v57 = swift_continuation_init();
    v61[16] = MEMORY[0x24BDAC760];
    v61[17] = 0x40000000;
    v61[18] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AMSURLResult?, @unowned NSError?) -> () with result type AMSURLResult;
    v61[19] = &block_descriptor_12_0;
    v61[20] = v57;
    objc_msgSend(v56, sel_resultWithCompletion_, v61 + 16);
    return swift_continuation_await();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for networking != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.networking);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_237BC8000, v17, v18, "Request to queries-batch has empty request", v19, 2u);
      MEMORY[0x23B822DA8](v19, -1, -1);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    v20 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    if (one-time initialization token for networking != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.networking);
    v24 = v20;
    v25 = v20;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v28 = 138543362;
      v30 = v20;
      v31 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 176) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v29 = v31;

      _os_log_impl(&dword_237BC8000, v26, v27, "Request to queries-batch has failed: %{public}@", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v29, -1, -1);
      MEMORY[0x23B822DA8](v28, -1, -1);
    }
    else
    {

    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 448) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  NSObject *v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t (*v32)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;

  v1 = *(void **)(v0 + 168);
  v2 = *(void **)(v0 + 400);
  v3 = specialized AMSURLResult.validateSuccessResponse()();
  v4 = *(void **)(v0 + 440);
  if (v2)
  {
    v62 = v2;
    v6 = *(_QWORD *)(v0 + 416);
    v5 = *(void **)(v0 + 424);
    v7 = *(_QWORD *)(v0 + 408);
    v8 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 336);
    v10 = *(_QWORD *)(v0 + 344);
    v11 = *(_QWORD *)(v0 + 328);

    outlined consume of Data._Representation(v7, v6);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    outlined destroy of AspireApiPECConfig(v8, type metadata accessor for AMDPbHEQueries);

    goto LABEL_6;
  }
  v12 = v3;

  v13 = v12;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    *(_DWORD *)swift_slowAlloc() = 134349056;
    v16 = objc_msgSend(v13, sel_data);
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    __asm { BR              X10 }
  }

  v19 = objc_msgSend(v13, sel_data);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
  Message.init(serializedData:extensions:partial:options:)();
  AMDPbHEResponse.validateSuccessReponse()(*(_QWORD *)(v0 + 288));
  v20 = *(_QWORD *)(v0 + 296);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 280), type metadata accessor for AMDPbHEResponse);
  AMDPbHEResponse.validateAPICode(expected:)(3, 1, v20);
  v34 = *(_QWORD *)(v0 + 296);
  v35 = *(_QWORD *)(v0 + 272);
  v36 = *(_QWORD *)(v0 + 240);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 288), type metadata accessor for AMDPbHEResponse);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34 + *(int *)(v35 + 28), v36, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v37 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37);
  v39 = *(_QWORD *)(v0 + 240);
  if (v38 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 240), &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_18:
    **(_QWORD **)(v0 + 256) = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    goto LABEL_19;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig(v39, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_18;
  }
  outlined init with take of SecretKey(v39, *(_QWORD *)(v0 + 256), type metadata accessor for AMDPbHEReplies);
LABEL_19:
  v40 = *(_QWORD *)(v0 + 256);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
  v41 = Message.isInitialized.getter();
  outlined destroy of AspireApiPECConfig(v40, type metadata accessor for AMDPbHEReplies);
  if ((v41 & 1) != 0)
  {
    v42 = *(_QWORD *)(v0 + 296);
    type metadata accessor for AspireApiResponses(0);
    *(_QWORD *)(swift_task_alloc() + 16) = v42;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
    static Message.with(_:)();
    v43 = *(_QWORD *)(v0 + 416);
    v44 = *(_QWORD *)(v0 + 408);
    v60 = *(_QWORD *)(v0 + 392);
    v55 = *(_QWORD *)(v0 + 344);
    v57 = *(_QWORD *)(v0 + 328);
    v56 = *(_QWORD *)(v0 + 336);
    v58 = *(_QWORD *)(v0 + 296);

    outlined consume of Data._Representation(v44, v43);
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    outlined destroy of AspireApiPECConfig(v60, type metadata accessor for AMDPbHEQueries);
    outlined destroy of AspireApiPECConfig(v58, type metadata accessor for AMDPbHEResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_237BC8000, v45, v46, "Reponse heReplies is not initialized", v47, 2u);
    MEMORY[0x23B822DA8](v47, -1, -1);
  }
  v48 = *(void **)(v0 + 424);
  v49 = *(_QWORD *)(v0 + 408);
  v50 = *(_QWORD *)(v0 + 416);
  v51 = *(_QWORD *)(v0 + 336);
  v52 = *(_QWORD *)(v0 + 344);
  v53 = *(_QWORD *)(v0 + 328);
  v59 = *(_QWORD *)(v0 + 392);
  v61 = *(_QWORD *)(v0 + 296);

  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  v54 = swift_allocError();
  swift_storeEnumTagMultiPayload();
  v62 = (id)v54;
  swift_willThrow();

  outlined consume of Data._Representation(v49, v50);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v53);
  outlined destroy of AspireApiPECConfig(v59, type metadata accessor for AMDPbHEQueries);
  outlined destroy of AspireApiPECConfig(v61, type metadata accessor for AMDPbHEResponse);
LABEL_6:
  if (one-time initialization token for networking != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.networking);
  v22 = v62;
  v23 = v62;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = v24;
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v27 = 138543362;
    v29 = v62;
    v30 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 176) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v28 = v30;

    _os_log_impl(&dword_237BC8000, v26, v25, "Request to queries-batch has failed: %{public}@", v27, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v28, -1, -1);
    v31 = v27;
    v24 = v26;
    MEMORY[0x23B822DA8](v31, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  NSObject *v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint8_t *v20;

  v1 = *(void **)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(void **)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 328);
  swift_willThrow();

  outlined consume of Data._Representation(v4, v2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  outlined destroy of AspireApiPECConfig(v5, type metadata accessor for AMDPbHEQueries);

  v9 = *(void **)(v0 + 448);
  if (one-time initialization token for networking != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.networking);
  v11 = v9;
  v12 = v9;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = v13;
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v16 = 138543362;
    v18 = v9;
    v19 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 176) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = v19;

    _os_log_impl(&dword_237BC8000, v15, v14, "Request to queries-batch has failed: %{public}@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v17, -1, -1);
    v20 = v16;
    v13 = v15;
    MEMORY[0x23B822DA8](v20, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #3 in AMSNetworking.queries(requests:userId:)(void *a1)
{
  closure #1 in AMSNetworking.fetchConfigs(useCases:userId:)(a1, "Request to queries-batch has not been encoded: %{public}@");
}

void closure #1 in AMSNetworking.fetchConfigs(useCases:userId:)(void *a1, const char *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  NSObject *oslog;
  uint64_t v12;

  if (one-time initialization token for networking != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.networking);
  v5 = a1;
  v6 = a1;
  oslog = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138543362;
    v10 = a1;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v12;

    _os_log_impl(&dword_237BC8000, oslog, v7, a2, v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v9, -1, -1);
    MEMORY[0x23B822DA8](v8, -1, -1);
  }
  else
  {

  }
}

uint64_t closure #4 in AMSNetworking.queries(requests:userId:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t result;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v50 = a1;
  v3 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x24BDAC7A8](v3);
  v53 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x24BDAC7A8](v5);
  v52 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AMDPbHEReply(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AspireApiResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  v55 = v14;
  v56 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v57 = (uint64_t)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AMDPbHEReplies(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t *)((char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2 + *(int *)(v23 + 28), (uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v24 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v19, 1, v24);
  v26 = MEMORY[0x24BEE4AF8];
  if (v25 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v22, type metadata accessor for AMDPbHEReplies);
      goto LABEL_7;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  *v22 = v26;
  UnknownStorage.init()();
LABEL_7:
  v27 = *v22;
  swift_bridgeObjectRetain();
  outlined destroy of AspireApiPECConfig((uint64_t)v22, type metadata accessor for AMDPbHEReplies);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v59 = v26;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
    v29 = *(unsigned __int8 *)(v11 + 80);
    v49 = v27;
    v30 = v27 + ((v29 + 32) & ~v29);
    v54 = *(_QWORD *)(v11 + 72);
    v51 = v9;
    while (1)
    {
      outlined init with copy of SecretKey(v30, (uint64_t)v13, type metadata accessor for AMDPbHEReply);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v9, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      v31 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v9, 1, v31) == 1)
        break;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v32 = v52;
        v33 = outlined init with take of SecretKey((uint64_t)v9, v52, type metadata accessor for AMDPbPECReply);
        MEMORY[0x24BDAC7A8](v33);
        *(&v49 - 2) = v32;
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
        v34 = v58;
        static Message.with(_:)();
        v58 = v34;
        v35 = v32;
        v36 = type metadata accessor for AMDPbPECReply;
        v9 = v51;
      }
      else
      {
        v37 = v53;
        v38 = outlined init with take of SecretKey((uint64_t)v9, v53, type metadata accessor for AMDPbPIRReply);
        MEMORY[0x24BDAC7A8](v38);
        *(&v49 - 2) = v37;
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
        v39 = v58;
        static Message.with(_:)();
        v58 = v39;
        v35 = v37;
        v36 = type metadata accessor for AMDPbPIRReply;
      }
      outlined destroy of AspireApiPECConfig(v35, v36);
      outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AMDPbHEReply);
      v40 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v40 + 16) + 1, 1);
        v40 = v59;
      }
      v42 = *(_QWORD *)(v40 + 16);
      v41 = *(_QWORD *)(v40 + 24);
      if (v42 >= v41 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
        v40 = v59;
      }
      *(_QWORD *)(v40 + 16) = v42 + 1;
      outlined init with take of SecretKey(v57, v40+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v42, type metadata accessor for AspireApiResponse);
      v30 += v54;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    if (one-time initialization token for networking != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.networking);
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v46 = 0;
      _os_log_impl(&dword_237BC8000, v44, v45, "Response is neither pecReply nor pirReply", v46, 2u);
      MEMORY[0x23B822DA8](v46, -1, -1);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AMDPbHEReply);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = MEMORY[0x24BEE4AF8];
LABEL_25:
    v48 = v50;
    result = swift_bridgeObjectRelease();
    *v48 = v40;
  }
  return result;
}

Swift::Void __swiftcall AMSNetworking.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  void *v7;
  _QWORD v8[6];

  v1 = v0;
  if (one-time initialization token for networking != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.networking);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_237BC8000, v3, v4, "Cancelling all tasks", v5, 2u);
    MEMORY[0x23B822DA8](v5, -1, -1);
  }

  v6 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8CipherML13AMSNetworking_urlSession), sel_session);
  v8[4] = closure #1 in AspireNetworkManager.cancel();
  v8[5] = 0;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [NSURLSessionTask]) -> ();
  v8[3] = &block_descriptor_16;
  v7 = _Block_copy(v8);
  objc_msgSend(v6, sel_getAllTasksWithCompletionHandler_, v7);
  _Block_release(v7);

}

uint64_t AMSNetworking.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_baseURL;
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AMSNetworking.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_baseURL;
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for NetworkManager.networkDelegationConfig.getter in conformance AMSNetworking()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC8CipherML13AMSNetworking_networkDelegationConfig);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AMSNetworking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(**(_QWORD **)v3 + 144)
                                                          + *(_QWORD *)(**(_QWORD **)v3 + 144));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AMSNetworking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(**(_QWORD **)v2 + 160)
                                                + *(_QWORD *)(**(_QWORD **)v2 + 160));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v8(a1, a2);
}

uint64_t protocol witness for NetworkManager.queries(requests:userId:) in conformance AMSNetworking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(**(_QWORD **)v3 + 168)
                                                          + *(_QWORD *)(**(_QWORD **)v3 + 168));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NetworkManager.cancel() in conformance AMSNetworking()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

unint64_t specialized AMSNetworking.requestHeaders()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[96];

  v0 = type metadata accessor for Date.ISO8601FormatStyle();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540A0;
  strcpy((char *)(inited + 32), "Content-Type");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(_QWORD *)(inited + 48) = 0xD000000000000016;
  *(_QWORD *)(inited + 56) = 0x8000000237D634D0;
  *(_QWORD *)(inited + 64) = 0xD000000000000015;
  *(_QWORD *)(inited + 72) = 0x8000000237D634F0;
  Date.init()();
  default argument 0 of Date.ISO8601Format(_:)((uint64_t)v3);
  v9 = Date.ISO8601Format(_:)();
  v11 = v10;
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)(inited + 80) = v9;
  *(_QWORD *)(inited + 88) = v11;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void *specialized AMSURLResult.validateSuccessResponse()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  if (objc_msgSend(v0, sel_responseStatusCode) != (id)200)
  {
    if (one-time initialization token for networking != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.networking);
    v2 = v0;
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v10 = v6;
      *(_DWORD *)v5 = 136446210;
      objc_msgSend(v2, sel_responseStatusCode);
      v7 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v6, -1, -1);
      MEMORY[0x23B822DA8](v5, -1, -1);

    }
    else
    {

    }
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return v0;
}

uint64_t partial apply for closure #2 in AMSNetworking.fetchConfigs(useCases:userId:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #2 in AMSNetworking.fetchConfigs(useCases:userId:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v33;
  uint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int64_t v45;

  v34 = a2;
  v35 = a1;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
  MEMORY[0x24BDAC7A8](v42);
  v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for AspireApiConfig(0);
  v41 = *(_QWORD *)(v8 - 8);
  result = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v43 = (_QWORD *)a3;
  v44 = a4;
  v13 = *(_QWORD *)(a3 + 64);
  v37 = 0;
  v38 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v39 = (unint64_t)(v14 + 63) >> 6;
  v36 = a4 + 7;
  v40 = v11;
  while (1)
  {
    while (1)
    {
      if (v16)
      {
        v17 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v45 = v12;
        v18 = v17 | (v12 << 6);
      }
      else
      {
        v19 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_42;
        if (v19 >= v39)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v35, v34, v37, v43);
        v20 = *(_QWORD *)(v38 + 8 * v19);
        v21 = v12 + 1;
        if (!v20)
        {
          v21 = v12 + 2;
          if (v12 + 2 >= v39)
            return specialized _NativeDictionary.extractDictionary(using:count:)(v35, v34, v37, v43);
          v20 = *(_QWORD *)(v38 + 8 * v21);
          if (!v20)
          {
            v21 = v12 + 3;
            if (v12 + 3 >= v39)
              return specialized _NativeDictionary.extractDictionary(using:count:)(v35, v34, v37, v43);
            v20 = *(_QWORD *)(v38 + 8 * v21);
            if (!v20)
            {
              v22 = v12 + 4;
              if (v12 + 4 >= v39)
                return specialized _NativeDictionary.extractDictionary(using:count:)(v35, v34, v37, v43);
              v20 = *(_QWORD *)(v38 + 8 * v22);
              if (!v20)
              {
                while (1)
                {
                  v21 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_43;
                  if (v21 >= v39)
                    return specialized _NativeDictionary.extractDictionary(using:count:)(v35, v34, v37, v43);
                  v20 = *(_QWORD *)(v38 + 8 * v21);
                  ++v22;
                  if (v20)
                    goto LABEL_20;
                }
              }
              v21 = v12 + 4;
            }
          }
        }
LABEL_20:
        v16 = (v20 - 1) & v20;
        v45 = v21;
        v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      v23 = (uint64_t *)(v43[6] + 16 * v18);
      v25 = *v23;
      v24 = v23[1];
      outlined init with copy of SecretKey(v43[7] + *(_QWORD *)(v41 + 72) * v18, (uint64_t)v11, type metadata accessor for AspireApiConfig);
      *v7 = v25;
      v7[1] = v24;
      v26 = (uint64_t)v7;
      outlined init with copy of SecretKey((uint64_t)v11, (uint64_t)v7 + *(int *)(v42 + 48), type metadata accessor for AspireApiConfig);
      v27 = v44[2];
      if (v27)
        break;
LABEL_4:
      swift_bridgeObjectRetain_n();
      v7 = (_QWORD *)v26;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v26, &demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
      v11 = v40;
      outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspireApiConfig);
      result = swift_bridgeObjectRelease();
      v12 = v45;
    }
    if (v44[4] != v25 || v44[5] != v24)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
        break;
    }
LABEL_37:
    swift_bridgeObjectRetain_n();
    v7 = (_QWORD *)v26;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v26, &demangling cache variable for type metadata for (key: String, value: AspireApiConfig));
    v11 = v40;
    outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspireApiConfig);
    result = swift_bridgeObjectRelease();
    *(unint64_t *)((char *)v35 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v33 = __OFADD__(v37++, 1);
    v12 = v45;
    if (v33)
    {
      __break(1u);
      return specialized _NativeDictionary.extractDictionary(using:count:)(v35, v34, v37, v43);
    }
  }
  if (v27 == 1)
    goto LABEL_4;
  v29 = v36;
  v30 = 1;
  while (1)
  {
    v31 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (*(v29 - 1) == v25 && *v29 == v24)
      goto LABEL_37;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      goto LABEL_37;
    v29 += 2;
    ++v30;
    if (v31 == v27)
      goto LABEL_4;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x23B822DA8](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #4 in AMSNetworking.queries(requests:userId:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #4 in AMSNetworking.queries(requests:userId:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t ObjC metadata update function for AMSNetworking()
{
  return type metadata accessor for AMSNetworking();
}

uint64_t type metadata accessor for AMSNetworking()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AMSNetworking;
  if (!type metadata singleton initialization cache for AMSNetworking)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AMSNetworking()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AMSNetworking()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AMSNetworking.__allocating_init(networkDelegationConfig:secondaryIdentifier:baseURL:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of AMSNetworking.fetchConfigs(useCases:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 144)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 144));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of AMSNetworking.fetchConfigParameters(useCases:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AMSNetworking.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 160) + *(_QWORD *)(*(_QWORD *)v2 + 160));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v8(a1, a2);
}

uint64_t dispatch thunk of AMSNetworking.queries(requests:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 168)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 168));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of AMSNetworking.cancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

void *Logger.subsystem.unsafeMutableAddressor()
{
  return &static Logger.subsystem;
}

unint64_t protocol witness for static ScheduledActivityHandler.identifier.getter in conformance RotationTask()
{
  return 0xD00000000000001FLL;
}

unint64_t static RotationTask.identifier.getter()
{
  return 0xD00000000000001FLL;
}

void *CMLXPCServer.dynamicUseCaseEntitlement.unsafeMutableAddressor()
{
  return &static CMLXPCServer.dynamicUseCaseEntitlement;
}

const char *AllowList.allowListFileName.unsafeMutableAddressor()
{
  return "allow-list";
}

void *TokenFetcherTask.identifier.unsafeMutableAddressor()
{
  return &static TokenFetcherTask.identifier;
}

unint64_t protocol witness for static ScheduledActivityHandler.identifier.getter in conformance TokenFetcherTask()
{
  return 0xD000000000000023;
}

unint64_t static TokenFetcherTask.identifier.getter()
{
  return 0xD000000000000023;
}

void *KVSKeyStorage.storeName.unsafeMutableAddressor()
{
  return &static KVSKeyStorage.storeName;
}

void *ActiveUseCaseTracker.fileName.unsafeMutableAddressor()
{
  return &static ActiveUseCaseTracker.fileName;
}

unint64_t static ActiveUseCaseTracker.fileName.getter()
{
  return 0xD000000000000015;
}

uint64_t static AllowList.allowListFileName.getter()
{
  return 0x696C2D776F6C6C61;
}

void *CMLXPCServer.serviceName.unsafeMutableAddressor()
{
  return &static CMLXPCServer.serviceName;
}

unint64_t static CMLXPCServer.serviceName.getter()
{
  return 0xD000000000000013;
}

void *CMLXPCServer.requiredXPCEntitlement.unsafeMutableAddressor()
{
  return &static CMLXPCServer.requiredXPCEntitlement;
}

unint64_t static CMLXPCServer.requiredXPCEntitlement.getter()
{
  return 0xD000000000000021;
}

unint64_t static CMLXPCServer.dynamicUseCaseEntitlement.getter()
{
  return 0xD000000000000030;
}

void *CacheCleaner.identifier.unsafeMutableAddressor()
{
  return &static CacheCleaner.identifier;
}

unint64_t static CacheCleaner.identifier.getter()
{
  return 0xD00000000000001FLL;
}

void *CacheDirectory.cacheDirectoryName.unsafeMutableAddressor()
{
  return &static CacheDirectory.cacheDirectoryName;
}

unint64_t static CacheDirectory.cacheDirectoryName.getter()
{
  return 0xD000000000000013;
}

void *ConfigCache.cacheFileName.unsafeMutableAddressor()
{
  return &static ConfigCache.cacheFileName;
}

unint64_t static ConfigCache.cacheFileName.getter()
{
  return 0xD000000000000012;
}

unint64_t static KVSKeyStorage.storeName.getter()
{
  return 0xD000000000000013;
}

unint64_t static Logger.subsystem.getter()
{
  return 0xD000000000000012;
}

void *RotationTask.identifier.unsafeMutableAddressor()
{
  return &static RotationTask.identifier;
}

unint64_t protocol witness for static ScheduledActivityHandler.identifier.getter in conformance CacheCleaner()
{
  return 0xD00000000000001FLL;
}

uint64_t CacheDirectory.configCacheFile.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for configCacheFile, (uint64_t)static CacheDirectory.configCacheFile);
}

uint64_t CacheDirectory.activeUseCaseTrackerFile.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for activeUseCaseTrackerFile, (uint64_t)static CacheDirectory.activeUseCaseTrackerFile);
}

uint64_t CacheDirectory.configCacheFile.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for URL();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t CacheDirectory.url.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for url, (uint64_t)static CacheDirectory.url);
}

uint64_t CacheDirectory.fakeQueriesDirectory.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for fakeQueriesDirectory, (uint64_t)static CacheDirectory.fakeQueriesDirectory);
}

uint64_t CacheDirectory.dynamicAllowListFile.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for dynamicAllowListFile, (uint64_t)static CacheDirectory.dynamicAllowListFile);
}

uint64_t CacheDirectory.tokenCacheFile.unsafeMutableAddressor()
{
  return CacheDirectory.configCacheFile.unsafeMutableAddressor(&one-time initialization token for tokenCacheFile, (uint64_t)static CacheDirectory.tokenCacheFile);
}

uint64_t getTempDirectory()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  NSURL *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  void *v24;
  _QWORD *v25;
  os_log_t v26;
  _QWORD *v27;
  os_log_t v28;
  uint64_t v29;
  id v30[2];

  v30[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v7 = objc_msgSend(v6, sel_temporaryDirectory);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL._bridgeToObjectiveC()(v8);
  v10 = v9;
  v30[0] = 0;
  v11 = objc_msgSend(v6, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v9, 1, v30);

  v12 = v30[0];
  if (v11)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v15 = v30[0];
    v16 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for daemon != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.daemon);
    v18 = v16;
    v19 = v16;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v29 = v2;
      v22 = (uint8_t *)swift_slowAlloc();
      v27 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v22 = 138543362;
      v28 = v20;
      v23 = v16;
      v24 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v30[0] = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v25 = v27;
      *v27 = v24;
      v2 = v29;

      v26 = v28;
      _os_log_impl(&dword_237BC8000, v28, v21, "Failed to create unique temp directory, falling back to base temp directory: %{public}@", v22, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v25, -1, -1);
      MEMORY[0x23B822DA8](v22, -1, -1);

    }
    else
    {

    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
  }
}

void createDirectory(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSURL *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  id v47[2];

  v47[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v42 - v9;
  v11 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  v47[0] = 0;
  v15 = objc_msgSend(v11, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v13, 1, 0, v47);

  if (v15)
  {
    v16 = one-time initialization token for daemon;
    v17 = v47[0];
    if (v16 != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.daemon);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v19(v10, a1, v4);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = (void *)swift_slowAlloc();
      v44 = v19;
      v24 = v23;
      v47[0] = v23;
      v45 = a2;
      *(_DWORD *)v22 = 136446210;
      v43 = v22 + 4;
      lazy protocol witness table accessor for type URL and conformance URL();
      v25 = dispatch thunk of CustomStringConvertible.description.getter();
      v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v47);
      a2 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      _os_log_impl(&dword_237BC8000, v20, v21, "Successful access of directory at %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      v27 = v24;
      v19 = v44;
      MEMORY[0x23B822DA8](v27, -1, -1);
      MEMORY[0x23B822DA8](v22, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }

    v19((char *)a2, a1, v4);
  }
  else
  {
    v45 = a2;
    v28 = v47[0];
    v29 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for daemon != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.daemon);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    v31 = v29;
    v32 = v29;
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v43 = (_QWORD *)swift_slowAlloc();
      v44 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
      v47[0] = v44;
      *(_DWORD *)v35 = 136446466;
      lazy protocol witness table accessor for type URL and conformance URL();
      v36 = dispatch thunk of CustomStringConvertible.description.getter();
      v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      *(_WORD *)(v35 + 12) = 2114;
      v38 = v29;
      v39 = _swift_stdlib_bridgeErrorToNSError();
      v46 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v40 = v43;
      *v43 = v39;

      _os_log_impl(&dword_237BC8000, v33, v34, "Failed to create directory at %{public}s, falling back to temp directory: %{public}@", (uint8_t *)v35, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v40, -1, -1);
      v41 = v44;
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v41, -1, -1);
      MEMORY[0x23B822DA8](v35, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

    }
    getTempDirectory()(v45);

  }
}

uint64_t one-time initialization function for url()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for URL();
  __swift_allocate_value_buffer(v0, static CacheDirectory.url);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static CacheDirectory.url);
  return closure #1 in variable initialization expression of static CacheDirectory.url(v1);
}

uint64_t closure #1 in variable initialization expression of static CacheDirectory.url@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized static DaemonContainerPathLookup.path(for:)(0, 0);
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  createDirectory(_:)((uint64_t)v5, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t static CacheDirectory.url.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for url, (uint64_t)static CacheDirectory.url, a1);
}

uint64_t one-time initialization function for configCacheFile(uint64_t a1)
{
  return one-time initialization function for configCacheFile(a1, static CacheDirectory.configCacheFile, 0xD000000000000012, 0x8000000237D63560);
}

uint64_t static CacheDirectory.configCacheFile.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for configCacheFile, (uint64_t)static CacheDirectory.configCacheFile, a1);
}

uint64_t static CacheDirectory.url.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for URL();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t one-time initialization function for activeUseCaseTrackerFile(uint64_t a1)
{
  return one-time initialization function for configCacheFile(a1, static CacheDirectory.activeUseCaseTrackerFile, 0xD000000000000015, 0x8000000237D63510);
}

uint64_t static CacheDirectory.activeUseCaseTrackerFile.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for activeUseCaseTrackerFile, (uint64_t)static CacheDirectory.activeUseCaseTrackerFile, a1);
}

uint64_t one-time initialization function for dynamicAllowListFile(uint64_t a1)
{
  return one-time initialization function for configCacheFile(a1, static CacheDirectory.dynamicAllowListFile, 0xD000000000000016, 0x8000000237D635C0);
}

uint64_t static CacheDirectory.dynamicAllowListFile.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for dynamicAllowListFile, (uint64_t)static CacheDirectory.dynamicAllowListFile, a1);
}

uint64_t one-time initialization function for tokenCacheFile(uint64_t a1)
{
  return one-time initialization function for configCacheFile(a1, static CacheDirectory.tokenCacheFile, 0xD000000000000011, 0x8000000237D63580);
}

uint64_t one-time initialization function for configCacheFile(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v7 = type metadata accessor for URL.DirectoryHint();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  if (one-time initialization token for url != -1)
    swift_once();
  __swift_project_value_buffer(v11, (uint64_t)static CacheDirectory.url);
  v13[0] = a3;
  v13[1] = a4;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDCD7A0], v7);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_bridgeObjectRelease();
}

uint64_t static CacheDirectory.tokenCacheFile.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for tokenCacheFile, (uint64_t)static CacheDirectory.tokenCacheFile, a1);
}

uint64_t one-time initialization function for fakeQueriesDirectory()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v0 = type metadata accessor for URL.DirectoryHint();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v6, static CacheDirectory.fakeQueriesDirectory);
  v9 = __swift_project_value_buffer(v4, (uint64_t)static CacheDirectory.fakeQueriesDirectory);
  if (one-time initialization token for url != -1)
    swift_once();
  __swift_project_value_buffer(v4, (uint64_t)static CacheDirectory.url);
  v11[0] = 0xD000000000000014;
  v11[1] = 0x8000000237D635A0;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCD7A0], v0);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  createDirectory(_:)((uint64_t)v8, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t static CacheDirectory.fakeQueriesDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  return static CacheDirectory.url.getter(&one-time initialization token for fakeQueriesDirectory, (uint64_t)static CacheDirectory.fakeQueriesDirectory, a1);
}

ValueMetadata *type metadata accessor for CacheDirectory()
{
  return &type metadata for CacheDirectory;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x23B822CDC](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

_QWORD *closure #1 in static Sharding.sha256Shard(keyword:shardCount:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (result)
    *a2 = *result;
  else
    __break(1u);
  return result;
}

void specialized static Sharding.sha256Shard(keyword:shardCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for SHA256();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for SHA256Digest();
  MEMORY[0x24BDAC7A8](v4);
  lazy protocol witness table accessor for type SHA256 and conformance SHA256();
  dispatch thunk of HashFunction.init()();
  __asm { BR              X10 }
}

unint64_t sub_237CA7C6C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v7 - 112) = v6;
  *(_WORD *)(v7 - 104) = v5;
  *(_BYTE *)(v7 - 102) = BYTE2(v5);
  *(_BYTE *)(v7 - 101) = BYTE3(v5);
  *(_BYTE *)(v7 - 100) = BYTE4(v5);
  *(_BYTE *)(v7 - 99) = BYTE5(v5);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  outlined consume of Data._Representation(v6, v5);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 120) + 8))(v4, v2);
  SHA256Digest.withUnsafeBytes<A>(_:)();
  if ((v0 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x237CA7EC0);
  }
  if (!v0)
  {
    __break(1u);
    JUMPOUT(0x237CA7E68);
  }
  v8 = *(_QWORD *)(v7 - 112);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 128) + 8))(v3, v1);
  return v8 % v0;
}

ValueMetadata *type metadata accessor for Sharding()
{
  return &type metadata for Sharding;
}

unint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SHA256 and conformance SHA256;
  if (!lazy protocol witness table cache variable for type SHA256 and conformance SHA256)
  {
    v1 = type metadata accessor for SHA256();
    result = MEMORY[0x23B822CDC](MEMORY[0x24BDC6AE8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256);
  }
  return result;
}

uint64_t AMDPbHEResponse.apiCode.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 36));
  if (v1[9])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t type metadata accessor for AMDPbHEResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEResponse);
}

uint64_t AMDPbHEResponse.configs.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v7 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AMDPbHEConfigsReply);
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  v9 = MEMORY[0x24BEE4AF8];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a1[1] = v9;
  type metadata accessor for AMDPbHEConfigsReply(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AMDPbHEResponse.OneOf_Response(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEResponse.OneOf_Response);
}

uint64_t AMDPbHEResponse.heReplies.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v7 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AMDPbHEReplies);
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for AMDPbHEReplies(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbHE_APICode.init()()
{
  return 0;
}

uint64_t AMDPbHE_APICode.init(rawValue:)(uint64_t a1)
{
  return AMDPbHE_APICode.init(rawValue:)(a1, (uint64_t (*)(void))specialized AMDPbHE_APICode.init(rawValue:));
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AMDPbHE_APICode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AMDPbHE_APICode((uint64_t (*)(void))specialized AMDPbHE_APICode.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHE_APICode@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHE_APICode(a1, (uint64_t (*)(_QWORD))specialized AMDPbHE_APICode.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHE_APICode()
{
  lazy protocol witness table accessor for type AMDPbHE_APICode and conformance AMDPbHE_APICode();
  return Enum.hash(into:)();
}

void one-time initialization function for allCases()
{
  static AMDPbHE_APICode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AMDPbHEResponse.PbStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspirePirPirAlgorithm.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspirePirKeyCompressionStrategy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspireHeSecurityLevel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspireHeErrorStdDev.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspireHeHeScheme.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AspireSimilaritySimilarityMetric.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t *AMDPbHE_APICode.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static AMDPbHE_APICode.allCases;
}

uint64_t static AMDPbHE_APICode.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AMDPbHE_APICode.allCases, a1);
}

uint64_t AMDPbHEResponse.apiCode.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t result;
  uint64_t v6;

  v4 = a2 & 1;
  result = type metadata accessor for AMDPbHEResponse(0);
  v6 = v2 + *(int *)(result + 36);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t (*AMDPbHEResponse.apiCode.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  int v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for AMDPbHEResponse(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = *((_BYTE *)v4 + 8);
  v7 = *((unsigned __int8 *)v4 + 9);
  if (v7)
    v5 = 0;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (v7 | v6) & 1;
  return AMDPbHEResponse.apiCode.modify;
}

uint64_t AMDPbHEResponse.apiCode.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16) + *(int *)(result + 12);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

BOOL AMDPbHEResponse.hasApiCode.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 36) + 9) & 1) == 0;
}

Swift::Void __swiftcall AMDPbHEResponse.clearApiCode()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 36);
  *(_QWORD *)v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t AMDPbHEResponse.status.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AMDPbHEResponse.status.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AMDPbHEResponse.status.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.statuses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbHEResponse.statuses.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AMDPbHEResponse.statuses.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.errorMessage.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbHEResponse.errorMessage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AMDPbHEResponse.errorMessage.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.response.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AMDPbHEResponse(0);
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v3 + 28), a1, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
}

uint64_t AMDPbHEResponse.response.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  return outlined assign with take of AMDPbHEResponse.OneOf_Response?(a1, v3);
}

uint64_t (*AMDPbHEResponse.response.modify())()
{
  type metadata accessor for AMDPbHEResponse(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.heReply.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v7 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_5:
    v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
    type metadata accessor for AMDPbHEReply(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AMDPbHEReply);
}

uint64_t key path getter for AMDPbHEResponse.heReply : AMDPbHEResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v8 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_5:
    v9 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
    type metadata accessor for AMDPbHEReply(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AMDPbHEReply);
}

uint64_t AMDPbHEResponse.heReply.setter(uint64_t a1)
{
  return AMDPbHEResponse.heReply.setter(a1, type metadata accessor for AMDPbHEReply);
}

void (*AMDPbHEResponse.heReply.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AMDPbHEReply(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  v8 = *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v3[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AMDPbHEReply);
      return AMDPbHEResponse.heReply.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  v11 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  UnknownStorage.init()();
  return AMDPbHEResponse.heReply.modify;
}

void AMDPbHEResponse.heReply.modify(uint64_t a1, char a2)
{
  AMDPbHEResponse.heReply.modify(a1, a2, type metadata accessor for AMDPbHEReply);
}

uint64_t key path getter for AMDPbHEResponse.heReplies : AMDPbHEResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v8 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AMDPbHEReplies);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  }
  *a2 = MEMORY[0x24BEE4AF8];
  type metadata accessor for AMDPbHEReplies(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbHEResponse.heReplies.setter(uint64_t a1)
{
  return AMDPbHEResponse.heReply.setter(a1, type metadata accessor for AMDPbHEReplies);
}

void (*AMDPbHEResponse.heReplies.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AMDPbHEReplies(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  v8 = *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v3[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    return AMDPbHEResponse.heReplies.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AMDPbHEReplies);
  return AMDPbHEResponse.heReplies.modify;
}

void AMDPbHEResponse.heReplies.modify(uint64_t a1, char a2)
{
  AMDPbHEResponse.heReply.modify(a1, a2, type metadata accessor for AMDPbHEReplies);
}

uint64_t key path setter for AMDPbHEResponse.heReply : AMDPbHEResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  outlined init with copy of SecretKey(a1, (uint64_t)&v14 - v9, a5);
  v11 = a2 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v11, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  outlined init with take of SecretKey((uint64_t)v10, v11, a5);
  v12 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
}

uint64_t AMDPbHEResponse.configs.setter(uint64_t a1)
{
  return AMDPbHEResponse.heReply.setter(a1, type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t AMDPbHEResponse.heReply.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  outlined init with take of SecretKey(a1, v5, a2);
  v6 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
}

void (*AMDPbHEResponse.configs.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AMDPbHEConfigsReply(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  v8 = *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v3[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_6:
    v11 = MEMORY[0x24BEE4AF8];
    *v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v7[1] = v11;
    UnknownStorage.init()();
    return AMDPbHEResponse.configs.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AMDPbHEConfigsReply);
  return AMDPbHEResponse.configs.modify;
}

void AMDPbHEResponse.configs.modify(uint64_t a1, char a2)
{
  AMDPbHEResponse.heReply.modify(a1, a2, type metadata accessor for AMDPbHEConfigsReply);
}

void AMDPbHEResponse.heReply.modify(uint64_t a1, char a2, uint64_t (*a3)(_QWORD))
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7 = *(int *)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 16);
  v9 = *(void **)(*(_QWORD *)a1 + 24);
  v10 = *(void **)(*(_QWORD *)a1 + 8);
  v11 = **(_QWORD **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey(*(_QWORD *)(*(_QWORD *)a1 + 24), (uint64_t)v8, a3);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v11, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined init with take of SecretKey((uint64_t)v8, v11, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    outlined destroy of AspireApiPECConfig((uint64_t)v9, a3);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(_QWORD **)a1 + v7, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined init with take of SecretKey((uint64_t)v9, v11, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
  }
  free(v9);
  free(v8);
  free(v10);
  free(v4);
}

uint64_t AMDPbHEResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 32);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AMDPbHEResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 32);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AMDPbHEResponse.unknownFields.modify())()
{
  type metadata accessor for AMDPbHEResponse(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEResponse.PbStatus.init()()
{
  return 0;
}

uint64_t AMDPbHEResponse.PbStatus.init(rawValue:)(uint64_t a1)
{
  return AMDPbHE_APICode.init(rawValue:)(a1, (uint64_t (*)(void))specialized AMDPbHEResponse.PbStatus.init(rawValue:));
}

uint64_t AMDPbHE_APICode.init(rawValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void protocol witness for Enum.init() in conformance AMDPbHEResponse.PbStatus(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AMDPbHEResponse.PbStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AMDPbHE_APICode((uint64_t (*)(void))specialized AMDPbHEResponse.PbStatus.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AMDPbHE_APICode@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AMDPbHEResponse.PbStatus()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHEResponse.PbStatus@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHE_APICode(a1, (uint64_t (*)(_QWORD))specialized AMDPbHEResponse.PbStatus.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AMDPbHE_APICode@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  char v6;

  result = a2(*a1);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 9) = v6 & 1;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AMDPbHE_APICode()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEResponse.PbStatus()
{
  lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
  return Enum.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AMDPbHE_APICode()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AMDPbHEResponse.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = v2;
  v3 = type metadata accessor for AMDPbHEResponse(0);
  v4 = a1 + *(int *)(v3 + 28);
  v5 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  result = UnknownStorage.init()();
  v7 = a1 + *(int *)(v3 + 36);
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  return result;
}

uint64_t *AMDPbHEResponse.PbStatus.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static AMDPbHEResponse.PbStatus.allCases;
}

uint64_t static AMDPbHEResponse.PbStatus.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AMDPbHE_APICode.allCases.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHEResponse.PbStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AMDPbHEResponse.PbStatus.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbHE_APICode._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHE_APICode._protobuf_nameMap);
}

uint64_t static AMDPbHE_APICode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHE_APICode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHE_APICode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHE_APICode._protobuf_nameMap, a1);
}

void *AMDPbHEResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEResponse.protoMessageName;
}

unint64_t static AMDPbHEResponse.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t AMDPbHEResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse._protobuf_nameMap);
}

uint64_t static AMDPbHEResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse._protobuf_nameMap, a1);
}

uint64_t AMDPbHEResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in AMDPbHEResponse.decodeMessage<A>(decoder:)();
          break;
        case 2:
          lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
          closure #3 in AMDPbHEResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 4:
          closure #4 in AMDPbHEResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 5:
          closure #5 in AMDPbHEResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 6:
          lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbHEResponse.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AMDPbHEResponse(0);
  lazy protocol witness table accessor for type AMDPbHE_APICode and conformance AMDPbHE_APICode();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #3 in AMDPbHEResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for AMDPbHEReply(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    v26 = v13;
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReply?);
      outlined init with take of SecretKey((uint64_t)v17, (uint64_t)v9, type metadata accessor for AMDPbHEReply);
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v24, type metadata accessor for AMDPbHEReply);
      v25(v24, 0, 1, v4);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, type metadata accessor for AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReply?);
  v29 = v36;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v36, &demangling cache variable for type metadata for AMDPbHEReply?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReply?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AMDPbHEReply?);
  }
  else
  {
    v30 = v35;
    outlined init with take of SecretKey(v29, v35, type metadata accessor for AMDPbHEReply);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReply?);
    v31 = v33;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined init with take of SecretKey(v30, v31, type metadata accessor for AMDPbHEReply);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #4 in AMDPbHEResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for AMDPbHEReplies(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReplies?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    v26 = v13;
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReplies?);
      outlined init with take of SecretKey((uint64_t)v17, (uint64_t)v9, type metadata accessor for AMDPbHEReplies);
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v24, type metadata accessor for AMDPbHEReplies);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReplies?);
  v29 = v36;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v36, &demangling cache variable for type metadata for AMDPbHEReplies?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReplies?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AMDPbHEReplies?);
  }
  else
  {
    v30 = v35;
    outlined init with take of SecretKey(v29, v35, type metadata accessor for AMDPbHEReplies);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEReplies?);
    v31 = v33;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined init with take of SecretKey(v30, v31, type metadata accessor for AMDPbHEReplies);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #5 in AMDPbHEResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for AMDPbHEConfigsReply(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfigsReply?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + *(int *)(type metadata accessor for AMDPbHEResponse(0) + 28);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    v26 = v13;
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
      outlined init with take of SecretKey((uint64_t)v17, (uint64_t)v9, type metadata accessor for AMDPbHEConfigsReply);
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v24, type metadata accessor for AMDPbHEConfigsReply);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
  v29 = v36;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v36, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
  }
  else
  {
    v30 = v35;
    outlined init with take of SecretKey(v29, v35, type metadata accessor for AMDPbHEConfigsReply);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbHEConfigsReply?);
    v31 = v33;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined init with take of SecretKey(v30, v31, type metadata accessor for AMDPbHEConfigsReply);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t AMDPbHEResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = closure #1 in AMDPbHEResponse.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    if (*(_QWORD *)v0)
    {
      v6 = *(_BYTE *)(v0 + 8);
      v10 = *(_QWORD *)v0;
      v11 = v6;
      lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    v7 = type metadata accessor for AMDPbHEResponse(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v7 + 28), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    v8 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) != 1)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
          closure #3 in AMDPbHEResponse.traverse<A>(visitor:)(v0);
        else
          closure #4 in AMDPbHEResponse.traverse<A>(visitor:)(v0);
      }
      else
      {
        closure #2 in AMDPbHEResponse.traverse<A>(visitor:)(v0);
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    }
    if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16))
    {
      lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus();
      dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16))
      dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbHEResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for AMDPbHEResponse(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type AMDPbHE_APICode and conformance AMDPbHE_APICode();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #2 in AMDPbHEResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbHEReply(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 28), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbHEReply);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, type metadata accessor for AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbHEReply);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  __break(1u);
  return result;
}

uint64_t closure #3 in AMDPbHEResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbHEReplies(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 28), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbHEReplies);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbHEReplies);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  __break(1u);
  return result;
}

uint64_t closure #4 in AMDPbHEResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbHEConfigsReply(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AMDPbHEResponse(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 28), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbHEConfigsReply);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbHEConfigsReply);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  __break(1u);
  return result;
}

Swift::Int AMDPbHEResponse.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for AMDPbHEResponse(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 24) = v4;
  v5 = a2 + *(int *)(a1 + 28);
  v6 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  result = UnknownStorage.init()();
  v8 = a2 + *(int *)(a1 + 36);
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEResponse()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEResponse()
{
  return AMDPbHEResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
  return Message.hash(into:)();
}

uint64_t AMDPbHEResponse.PbStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse.PbStatus._protobuf_nameMap);
}

uint64_t static AMDPbHEResponse.PbStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse.PbStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEResponse.PbStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEResponse.PbStatus._protobuf_nameMap, a1);
}

uint64_t specialized static AMDPbHEResponse.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  uint64_t *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  BOOL v35;
  uint64_t v36;
  char v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v48 - v7;
  v8 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEResponse.OneOf_Response?, AMDPbHEResponse.OneOf_Response?));
  MEMORY[0x24BDAC7A8](v12);
  v53 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v48 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v48 - v21;
  v23 = (int *)type metadata accessor for AMDPbHEResponse(0);
  v24 = v23[9];
  v25 = (uint64_t *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 9);
  v27 = (uint64_t *)((char *)a2 + v24);
  v28 = *((_BYTE *)a2 + v24 + 9);
  if ((v26 & 1) != 0)
  {
    if ((v28 & 1) == 0)
      goto LABEL_21;
  }
  else
  {
    if ((v28 & 1) != 0)
      goto LABEL_21;
    v29 = *v25;
    v30 = *v27;
    if ((v27[1] & 1) != 0)
      __asm { BR              X11 }
    if (v29 != v30)
      goto LABEL_21;
  }
  v31 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v31
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), a2[2]) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 24), (_QWORD *)a2[3]) & 1) == 0)
  {
    goto LABEL_21;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + v23[7], (uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v23[7], (uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v32 = *(int *)(v12 + 48);
  v33 = v53;
  v48 = v53 + v32;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, v53, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v48, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v34(v33, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    v35 = v34(v48, 1, v8) == 1;
    v36 = v33;
    if (!v35)
      goto LABEL_20;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
LABEL_24:
    v40 = a1 + v23[8];
    v42 = v51;
    v41 = v52;
    v43 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
    v44 = v49;
    v43(v49, v40, v52);
    v45 = (uint64_t)a2 + v23[8];
    v46 = v50;
    v43(v50, v45, v41);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    v47 = *(void (**)(char *, uint64_t))(v42 + 8);
    v47(v46, v41);
    v47(v44, v41);
    return v37 & 1;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v17, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  if (v34(v48, 1, v8) != 1)
  {
    outlined init with take of SecretKey(v48, (uint64_t)v11, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    v39 = specialized static AMDPbHEResponse.OneOf_Response.== infix(_:_:)((uint64_t)v17, (uint64_t)v11);
    outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    if ((v39 & 1) == 0)
      goto LABEL_21;
    goto LABEL_24;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  v36 = v33;
LABEL_20:
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for (AMDPbHEResponse.OneOf_Response?, AMDPbHEResponse.OneOf_Response?));
LABEL_21:
  v37 = 0;
  return v37 & 1;
}

uint64_t specialized static AMDPbHEResponse.OneOf_Response.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t *v29;
  char v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;

  v34 = type metadata accessor for AMDPbHEConfigsReply(0);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = type metadata accessor for AMDPbHEReplies(0);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for AMDPbHEReply(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (uint64_t *)((char *)&v34 - v14);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v34 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEResponse.OneOf_Response, AMDPbHEResponse.OneOf_Response));
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of SecretKey(a1, (uint64_t)v21, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  outlined init with copy of SecretKey(a2, v22, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of SecretKey((uint64_t)v21, (uint64_t)v17, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of SecretKey(v22, (uint64_t)v8, type metadata accessor for AMDPbHEReply);
      v30 = static AMDPbHEReply.== infix(_:_:)(v17, v8);
      outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AMDPbHEReply);
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEReply);
      outlined destroy of AspireApiPECConfig((uint64_t)v21, type metadata accessor for AMDPbHEResponse.OneOf_Response);
      return v30 & 1;
    }
    v27 = type metadata accessor for AMDPbHEReply;
    v28 = (uint64_t)v17;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 1)
  {
    outlined init with copy of SecretKey((uint64_t)v21, (uint64_t)v12, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v29 = v36;
      outlined init with take of SecretKey(v22, (uint64_t)v36, type metadata accessor for AMDPbHEConfigsReply);
      if ((specialized static Dictionary<>.== infix(_:_:)(*v12, *v29) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(v12[1], v29[1]) & 1) != 0)
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
        {
          v25 = type metadata accessor for AMDPbHEConfigsReply;
          outlined destroy of AspireApiPECConfig((uint64_t)v29, type metadata accessor for AMDPbHEConfigsReply);
          v26 = (uint64_t)v12;
          goto LABEL_14;
        }
      }
      v31 = type metadata accessor for AMDPbHEConfigsReply;
      outlined destroy of AspireApiPECConfig((uint64_t)v29, type metadata accessor for AMDPbHEConfigsReply);
      v32 = (uint64_t)v12;
      goto LABEL_20;
    }
    v27 = type metadata accessor for AMDPbHEConfigsReply;
    v28 = (uint64_t)v12;
LABEL_17:
    outlined destroy of AspireApiPECConfig(v28, v27);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for (AMDPbHEResponse.OneOf_Response, AMDPbHEResponse.OneOf_Response));
LABEL_21:
    v30 = 0;
    return v30 & 1;
  }
  outlined init with copy of SecretKey((uint64_t)v21, (uint64_t)v15, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v27 = type metadata accessor for AMDPbHEReplies;
    v28 = (uint64_t)v15;
    goto LABEL_17;
  }
  v24 = v37;
  outlined init with take of SecretKey(v22, (uint64_t)v37, type metadata accessor for AMDPbHEReplies);
  if ((specialized static Array<A>.== infix(_:_:)(*v15, *v24) & 1) == 0
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    v31 = type metadata accessor for AMDPbHEReplies;
    outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for AMDPbHEReplies);
    v32 = (uint64_t)v15;
LABEL_20:
    outlined destroy of AspireApiPECConfig(v32, v31);
    outlined destroy of AspireApiPECConfig((uint64_t)v21, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_21;
  }
  v25 = type metadata accessor for AMDPbHEReplies;
  outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for AMDPbHEReplies);
  v26 = (uint64_t)v15;
LABEL_14:
  outlined destroy of AspireApiPECConfig(v26, v25);
  outlined destroy of AspireApiPECConfig((uint64_t)v21, type metadata accessor for AMDPbHEResponse.OneOf_Response);
  v30 = 1;
  return v30 & 1;
}

uint64_t outlined assign with take of AMDPbHEResponse.OneOf_Response?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus;
  if (!lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AMDPbHEResponse.PbStatus, &type metadata for AMDPbHEResponse.PbStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus;
  if (!lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AMDPbHEResponse.PbStatus, &type metadata for AMDPbHEResponse.PbStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus;
  if (!lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AMDPbHEResponse.PbStatus, &type metadata for AMDPbHEResponse.PbStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus;
  if (!lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AMDPbHEResponse.PbStatus, &type metadata for AMDPbHEResponse.PbStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHEResponse.PbStatus and conformance AMDPbHEResponse.PbStatus);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AMDPbHE_APICode and conformance AMDPbHE_APICode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode;
  if (!lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AMDPbHE_APICode, &type metadata for AMDPbHE_APICode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode;
  if (!lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AMDPbHE_APICode, &type metadata for AMDPbHE_APICode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode;
  if (!lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AMDPbHE_APICode, &type metadata for AMDPbHE_APICode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode;
  if (!lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AMDPbHE_APICode, &type metadata for AMDPbHE_APICode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AMDPbHE_APICode and conformance AMDPbHE_APICode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AMDPbHE_APICode()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AMDPbHE_APICode] and conformance [A], &demangling cache variable for type metadata for [AMDPbHE_APICode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AMDPbHEResponse.PbStatus()
{
  return lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](&lazy protocol witness table cache variable for type [AMDPbHEResponse.PbStatus] and conformance [A], &demangling cache variable for type metadata for [AMDPbHEResponse.PbStatus]);
}

uint64_t lazy protocol witness table accessor for type [AMDPbHE_APICode] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
}

uint64_t base witness table accessor for Message in AMDPbHEResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
}

uint64_t base witness table accessor for Hashable in AMDPbHEResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
}

uint64_t base witness table accessor for Equatable in AMDPbHEResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEResponse and conformance AMDPbHEResponse, type metadata accessor for AMDPbHEResponse, (uint64_t)&protocol conformance descriptor for AMDPbHEResponse);
}

uint64_t sub_237CAC164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;

  result = type metadata accessor for AMDPbHEResponse(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 36));
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 8);
  v8 = *((unsigned __int8 *)v5 + 9);
  if (v8)
    v6 = 0;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t sub_237CAC1B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for AMDPbHEResponse(0);
  v6 = a2 + *(int *)(result + 36);
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 9) = 0;
  return result;
}

uint64_t sub_237CAC204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEResponse.heReply : AMDPbHEResponse(a1, a2, a3, a4, type metadata accessor for AMDPbHEReply);
}

uint64_t sub_237CAC228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEResponse.heReply : AMDPbHEResponse(a1, a2, a3, a4, type metadata accessor for AMDPbHEReplies);
}

uint64_t sub_237CAC248@<X0>(unint64_t *a1@<X8>)
{
  return AMDPbHEResponse.configs.getter(a1);
}

uint64_t sub_237CAC268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEResponse.heReply : AMDPbHEResponse(a1, a2, a3, a4, type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AMDPbHE_APICode()
{
  return &type metadata for AMDPbHE_APICode;
}

_QWORD *initializeBufferWithCopyOfBuffer for AMDPbHEResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = a3[7];
    v9 = (_QWORD *)(a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v20 = v10[1];
        *v9 = *v10;
        v9[1] = v20;
        v21 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
        v44 = (char *)v10 + v21;
        v47 = (char *)v9 + v21;
        v22 = type metadata accessor for UnknownStorage();
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v23(v47, v44, v22);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        *v9 = *v10;
        v17 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
        v46 = (char *)v10 + v17;
        v48 = (char *)v9 + v17;
        v18 = type metadata accessor for UnknownStorage();
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v48, v46, v18);
      }
      else
      {
        v24 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
        v25 = *(_QWORD *)(v24 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v24))
        {
          v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          v27 = swift_getEnumCaseMultiPayload();
          *v9 = *v10;
          if (v27 == 1)
            v28 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
          else
            v28 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
          v43 = (char *)v10 + v28;
          v45 = (char *)v9 + v28;
          v29 = type metadata accessor for UnknownStorage();
          v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
          swift_bridgeObjectRetain();
          v42(v45, v43, v29);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v9, 0, 1, v24);
        }
        v30 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
        v31 = (char *)v9 + v30;
        v32 = (char *)v10 + v30;
        v33 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v34 = a3[8];
    v35 = (char *)v4 + v34;
    v36 = (uint64_t)a2 + v34;
    v37 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    v38 = a3[9];
    v39 = (char *)v4 + v38;
    v40 = (uint64_t)a2 + v38;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_WORD *)v39 + 4) = *(_WORD *)(v40 + 8);
  }
  return v4;
}

uint64_t destroy for AMDPbHEResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
LABEL_14:
        v14 = v4 + v10;
        v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
        break;
      case 1:
        swift_bridgeObjectRelease();
        v11 = type metadata accessor for AMDPbHEReplies(0);
LABEL_13:
        v10 = *(int *)(v11 + 20);
        goto LABEL_14;
      case 0:
        v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v4, 1, v7))
        {
          v8 = swift_getEnumCaseMultiPayload();
          swift_bridgeObjectRelease();
          if (v8 == 1)
            v9 = type metadata accessor for AMDPbPECReply(0);
          else
            v9 = type metadata accessor for AMDPbPIRReply(0);
          v12 = v4 + *(int *)(v9 + 20);
          v13 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
        }
        v11 = type metadata accessor for AMDPbHEReply(0);
        goto LABEL_13;
    }
  }
  v16 = a1 + *(int *)(a2 + 32);
  v17 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

uint64_t initializeWithCopy for AMDPbHEResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v18 = v9[1];
      *v8 = *v9;
      v8[1] = v18;
      v19 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      v42 = (char *)v9 + v19;
      v45 = (char *)v8 + v19;
      v20 = type metadata accessor for UnknownStorage();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21(v45, v42, v20);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v8 = *v9;
      v15 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      v44 = (char *)v9 + v15;
      v46 = (char *)v8 + v15;
      v16 = type metadata accessor for UnknownStorage();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v46, v44, v16);
    }
    else
    {
      v22 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v9, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v25 = swift_getEnumCaseMultiPayload();
        *v8 = *v9;
        if (v25 == 1)
          v26 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        else
          v26 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        v41 = (char *)v9 + v26;
        v43 = (char *)v8 + v26;
        v27 = type metadata accessor for UnknownStorage();
        v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
        swift_bridgeObjectRetain();
        v40(v43, v41, v27);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v8, 0, 1, v22);
      }
      v28 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      v29 = (char *)v8 + v28;
      v30 = (char *)v9 + v28;
      v31 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v32 = a3[8];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  v36 = a3[9];
  v37 = a1 + v36;
  v38 = a2 + v36;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_WORD *)(v37 + 8) = *(_WORD *)(v38 + 8);
  return a1;
}

uint64_t assignWithCopy for AMDPbHEResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t);
  int v13;
  int v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)((char *)a2 + v7);
  v10 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *v8 = *v9;
        v8[1] = v9[1];
        v30 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
        v66 = (char *)v9 + v30;
        v70 = (char *)v8 + v30;
        v31 = type metadata accessor for UnknownStorage();
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21 = v66;
        v20 = v70;
        v22 = v31;
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          v32 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
          v33 = *(_QWORD *)(v32 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48))(v9, 1, v32))
          {
            v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
            memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
          }
          else
          {
            v42 = swift_getEnumCaseMultiPayload();
            *v8 = *v9;
            if (v42 == 1)
              v43 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
            else
              v43 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
            v67 = (char *)v9 + v43;
            v71 = (char *)v8 + v43;
            v64 = type metadata accessor for UnknownStorage();
            v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
            swift_bridgeObjectRetain();
            v65(v71, v67, v64);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v8, 0, 1, v32);
          }
          v44 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
          v45 = (char *)v8 + v44;
          v46 = (char *)v9 + v44;
          v47 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
          goto LABEL_25;
        }
        *v8 = *v9;
        v16 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
        v17 = (char *)v8 + v16;
        v69 = (char *)v9 + v16;
        v18 = type metadata accessor for UnknownStorage();
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v20 = v17;
        v21 = v69;
        v22 = v18;
      }
      v19(v20, v21, v22);
LABEL_25:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_26;
    }
    goto LABEL_8;
  }
  if (v14)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AMDPbHEResponse.OneOf_Response);
LABEL_8:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_26;
  }
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    v24 = swift_getEnumCaseMultiPayload();
    if (v24 == 2)
    {
      *v8 = *v9;
      v8[1] = v9[1];
      v35 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      v36 = (char *)v8 + v35;
      v73 = (char *)v9 + v35;
      v37 = type metadata accessor for UnknownStorage();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v36, v73, v37);
      swift_storeEnumTagMultiPayload();
    }
    else if (v24 == 1)
    {
      *v8 = *v9;
      v25 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      v26 = (char *)v8 + v25;
      v27 = (char *)v9 + v25;
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v39 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v40 + 48))(v9, 1, v39))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        v57 = swift_getEnumCaseMultiPayload();
        *v8 = *v9;
        if (v57 == 1)
          v58 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        else
          v58 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        v72 = (char *)v9 + v58;
        v74 = (char *)v8 + v58;
        v59 = type metadata accessor for UnknownStorage();
        v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
        swift_bridgeObjectRetain();
        v68(v74, v72, v59);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v8, 0, 1, v39);
      }
      v60 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      v61 = (char *)v8 + v60;
      v62 = (char *)v9 + v60;
      v63 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_26:
  v48 = a3[8];
  v49 = a1 + v48;
  v50 = (uint64_t)a2 + v48;
  v51 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 24))(v49, v50, v51);
  v52 = a3[9];
  v53 = a1 + v52;
  v54 = (uint64_t)a2 + v52;
  v55 = *(_WORD *)(v54 + 8);
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *(_WORD *)(v53 + 8) = v55;
  return a1;
}

uint64_t initializeWithTake for AMDPbHEResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  char *v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *v7 = *v8;
      v14 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_QWORD *)v7 = *(_QWORD *)v8;
        v13 = type metadata accessor for AMDPbHEReplies(0);
      }
      else
      {
        v15 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
        v16 = *(_QWORD *)(v15 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v15))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          v18 = swift_getEnumCaseMultiPayload();
          *(_QWORD *)v7 = *(_QWORD *)v8;
          if (v18 == 1)
            v19 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
          else
            v19 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
          v32 = (char *)v8 + v19;
          v33 = (char *)v7 + v19;
          v20 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v33, v32, v20);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v7, 0, 1, v15);
        }
        v13 = type metadata accessor for AMDPbHEReply(0);
      }
      v14 = *(int *)(v13 + 20);
    }
    v21 = (char *)v7 + v14;
    v22 = (char *)v8 + v14;
    v23 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  v28 = a3[9];
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_WORD *)(v29 + 8) = *(_WORD *)(v30 + 8);
  return a1;
}

uint64_t assignWithTake for AMDPbHEResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_OWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = type metadata accessor for AMDPbHEResponse.OneOf_Response(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *v7 = *v8;
        v22 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          *(_QWORD *)v7 = *(_QWORD *)v8;
          v15 = type metadata accessor for AMDPbHEReplies(0);
        }
        else
        {
          v23 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
          v24 = *(_QWORD *)(v23 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v8, 1, v23))
          {
            v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
            memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
          }
          else
          {
            v33 = swift_getEnumCaseMultiPayload();
            *(_QWORD *)v7 = *(_QWORD *)v8;
            if (v33 == 1)
              v34 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
            else
              v34 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
            v56 = (char *)v8 + v34;
            v57 = (char *)v7 + v34;
            v35 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v57, v56, v35);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v7, 0, 1, v23);
          }
          v15 = type metadata accessor for AMDPbHEReply(0);
        }
        v22 = *(int *)(v15 + 20);
      }
      v36 = (char *)v7 + v22;
      v37 = (char *)v8 + v22;
      v38 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_26;
    }
LABEL_8:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_26;
  }
  if (v13)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    v17 = swift_getEnumCaseMultiPayload();
    if (v17 == 2)
    {
      *v7 = *v8;
      v26 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      v27 = (char *)v7 + v26;
      v28 = (char *)v8 + v26;
      v29 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
      swift_storeEnumTagMultiPayload();
    }
    else if (v17 == 1)
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      v18 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      v19 = (char *)v7 + v18;
      v20 = (char *)v8 + v18;
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v30 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v8, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v47 = swift_getEnumCaseMultiPayload();
        *(_QWORD *)v7 = *(_QWORD *)v8;
        if (v47 == 1)
          v48 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        else
          v48 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        v49 = (char *)v7 + v48;
        v50 = (char *)v8 + v48;
        v51 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v49, v50, v51);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v7, 0, 1, v30);
      }
      v52 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      v53 = (char *)v7 + v52;
      v54 = (char *)v8 + v52;
      v55 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_26:
  v39 = a3[8];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = a3[9];
  v44 = a1 + v43;
  v45 = a2 + v43;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_WORD *)(v44 + 8) = *(_WORD *)(v45 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CAD93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for UnknownStorage();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CAD9EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for UnknownStorage();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AMDPbHEResponse()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AMDPbHEResponse.OneOf_Response?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for AMDPbHEResponse.OneOf_Response?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AMDPbHEResponse.OneOf_Response?)
  {
    type metadata accessor for AMDPbHEResponse.OneOf_Response(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AMDPbHEResponse.OneOf_Response?);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEResponse.OneOf_Response(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      v14 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for UnknownStorage();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v7 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for UnknownStorage();
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      v11(v8, v9, v10);
    }
    else
    {
      v19 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(a2, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v22 = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (v22 == 1)
          v23 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        else
          v23 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        v26 = type metadata accessor for UnknownStorage();
        v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
        swift_bridgeObjectRetain();
        v27(v24, v25, v26);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
      }
      v28 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      v31 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AMDPbHEResponse.OneOf_Response(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
LABEL_14:
      v10 = a1 + v6;
      v11 = type metadata accessor for UnknownStorage();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    case 1:
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for AMDPbHEReplies(0);
LABEL_13:
      v6 = *(int *)(v7 + 20);
      goto LABEL_14;
    case 0:
      v3 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(a1, 1, v3))
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        swift_bridgeObjectRelease();
        if (EnumCaseMultiPayload == 1)
          v5 = type metadata accessor for AMDPbPECReply(0);
        else
          v5 = type metadata accessor for AMDPbPIRReply(0);
        v8 = a1 + *(int *)(v5 + 20);
        v9 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      }
      v7 = type metadata accessor for AMDPbHEReply(0);
      goto LABEL_13;
  }
  return result;
}

_QWORD *initializeWithCopy for AMDPbHEResponse.OneOf_Response(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  else
  {
    v16 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(a2, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (v19 == 1)
        v20 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      else
        v20 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for UnknownStorage();
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      v24(v21, v22, v23);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
    }
    v25 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AMDPbHEResponse.OneOf_Response(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v10 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = type metadata accessor for UnknownStorage();
      v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      v9(v6, v7, v8);
    }
    else
    {
      v15 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        v18 = swift_getEnumCaseMultiPayload();
        *a1 = *a2;
        if (v18 == 1)
          v19 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        else
          v19 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = type metadata accessor for UnknownStorage();
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        swift_bridgeObjectRetain();
        v23(v20, v21, v22);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
      }
      v24 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AMDPbHEResponse.OneOf_Response(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v9 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    v13 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v16 = swift_getEnumCaseMultiPayload();
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v16 == 1)
        v17 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      else
        v17 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
    }
    v21 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AMDPbHEResponse.OneOf_Response(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AMDPbHEResponse.OneOf_Response);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v9 = *(int *)(type metadata accessor for AMDPbHEConfigsReply(0) + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v5 = *(int *)(type metadata accessor for AMDPbHEReplies(0) + 20);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      v13 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        v16 = swift_getEnumCaseMultiPayload();
        *(_QWORD *)a1 = *(_QWORD *)a2;
        if (v16 == 1)
          v17 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
        else
          v17 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
      }
      v21 = *(int *)(type metadata accessor for AMDPbHEReply(0) + 20);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AMDPbHEResponse.OneOf_Response()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for AMDPbHEReply(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AMDPbHEReplies(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for AMDPbHEConfigsReply(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AMDPbHEResponse.PbStatus(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AMDPbHEResponse.PbStatus(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for AMDPbHEResponse.PbStatus(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for AMDPbHEResponse.PbStatus(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AMDPbHEResponse.PbStatus()
{
  return &type metadata for AMDPbHEResponse.PbStatus;
}

uint64_t AspireApiPECRequest.evaluationKeyMetadata.setter(uint64_t a1)
{
  return AspireApiPECRequest.evaluationKeyMetadata.setter(a1, type metadata accessor for AspireApiPECRequest);
}

uint64_t type metadata accessor for AspireApiPECRequest(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPECRequest);
}

uint64_t type metadata accessor for AspireApiEvaluationKeyMetadata(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiEvaluationKeyMetadata);
}

uint64_t AspireApiKeyStatus.keyConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeEvaluationKeyConfig);
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 28);
  v9 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t type metadata accessor for AspireApiKeyStatus(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiKeyStatus);
}

uint64_t AspireApiPIRConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeEncryptionParameters);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t type metadata accessor for AspireApiPIRConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRConfig);
}

uint64_t AspireApiPECConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeEncryptionParameters);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t type metadata accessor for AspireApiPECConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPECConfig);
}

uint64_t AspireApiRequest.pirRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v7 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
LABEL_5:
    *(_DWORD *)a1 = 0;
    *(_OWORD *)(a1 + 8) = xmmword_237D54090;
    v8 = (int *)type metadata accessor for AspireApiPIRRequest(0);
    UnknownStorage.init()();
    v9 = a1 + v8[7];
    v10 = type metadata accessor for AspirePirEncryptedIndices(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    v11 = a1 + v8[8];
    v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = (_QWORD *)(a1 + v8[9]);
    *v13 = 0;
    v13[1] = 0;
    v14 = a1 + v8[10];
    v15 = type metadata accessor for AspireApiEvaluationKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireApiPIRRequest);
}

uint64_t AspireApiPIRRequest.evaluationKey.setter(uint64_t a1)
{
  return AMDPbPIRConfig.keywordPirParams.setter(a1, type metadata accessor for AspireApiPIRRequest, &demangling cache variable for type metadata for AspireApiEvaluationKey?, type metadata accessor for AspireApiEvaluationKey);
}

uint64_t AspireApiRequest.pirRequest.setter(uint64_t a1)
{
  return AspireApiRequest.pirRequest.setter(a1, type metadata accessor for AspireApiPIRRequest);
}

uint64_t AspireApiPECConfig.evaluationKeyConfigHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t AspireApiPECRequest.evaluationKeyMetadata.getter@<X0>(_QWORD *a1@<X8>)
{
  return AspireApiPECRequest.evaluationKeyMetadata.getter(type metadata accessor for AspireApiPECRequest, a1);
}

uint64_t AspireApiPIRRequest.evaluationKeyMetadata.getter@<X0>(_QWORD *a1@<X8>)
{
  return AspireApiPECRequest.evaluationKeyMetadata.getter(type metadata accessor for AspireApiPIRRequest, a1);
}

uint64_t AspireApiPECRequest.evaluationKeyMetadata.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v8 + 32), (uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v9 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return outlined init with take of SecretKey((uint64_t)v7, (uint64_t)a2, type metadata accessor for AspireApiEvaluationKeyMetadata);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
}

uint64_t AspireApiPIRRequest.query.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v7 = type metadata accessor for AspirePirEncryptedIndices(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspirePirEncryptedIndices);
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
}

uint64_t AspireApiEvaluationKey.metadata.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspireApiEvaluationKeyMetadata);
  v4 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t AspireApiEvaluationKey.evaluationKey.setter(uint64_t a1)
{
  return AspireApiEvaluationKey.evaluationKey.setter(a1, type metadata accessor for AspireApiEvaluationKey, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?, type metadata accessor for AspireHeSerializedEvaluationKey);
}

uint64_t AspireApiPECRequest.evaluationKey.setter(uint64_t a1)
{
  return AspireApiPECRequest.evaluationKey.setter(a1, type metadata accessor for AspireApiPECRequest, &demangling cache variable for type metadata for AspireApiEvaluationKey?, type metadata accessor for AspireApiEvaluationKey);
}

uint64_t AspireApiRequests.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AspireApiRequests, a1);
}

uint64_t AspireApiPECConfig.plaintextPacking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 44), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireSimilarityPlaintextPacking);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

BOOL AspireApiPIRShardConfig.hasVectorizedPirInternalBatchingSize.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 40) + 8) & 1) == 0;
}

uint64_t AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 40));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

BOOL AspireApiPIRShardConfig.hasCompressVectorizedPirResponse.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 36)) != 2;
}

uint64_t AspireApiPIRShardConfig.compressVectorizedPirResponse.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 36)) & 1;
}

uint64_t AspireApiPIRRequest.query.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspirePirEncryptedIndices);
  v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t AspireApiPIRRequest.evaluationKeyMetadata.setter(uint64_t a1)
{
  return AspireApiPECRequest.evaluationKeyMetadata.setter(a1, type metadata accessor for AspireApiPIRRequest);
}

uint64_t AspireApiPECRequest.evaluationKeyMetadata.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of SecretKey(a1, v4, type metadata accessor for AspireApiEvaluationKeyMetadata);
  v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
}

BOOL AspireApiPIRShardConfig.hasShardID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32) + 8) != 0;
}

uint64_t AspireApiPIRShardConfig.shardID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AspireApiPIRConfig.keywordPirParams.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspirePirKeywordPirParameters);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t AspireApiPIRRequest.shardID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AspireApiEmpty.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiEvaluationKeyMetadata.timestamp.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiEvaluationKeyMetadata.identifier.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKeyMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspireApiEvaluationKeyMetadata, a1);
}

uint64_t AspireApiEvaluationKeyMetadata.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t (*AspireApiEvaluationKeyMetadata.unknownFields.modify())()
{
  type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKeyMetadata.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  return UnknownStorage.init()();
}

uint64_t AspireApiKeyStatus.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AspireApiKeyStatus.timestamp.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AspireApiKeyStatus.timestamp.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiKeyStatus.keyConfig : AspireApiKeyStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireApiKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireHeEvaluationKeyConfig);
  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a2 + 8) = 0;
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 28);
  v10 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t AspireApiKeyStatus.keyConfig.setter(uint64_t a1)
{
  return AspireApiEvaluationKey.evaluationKey.setter(a1, type metadata accessor for AspireApiKeyStatus, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t AspireApiEvaluationKey.evaluationKey.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, a3);
  outlined init with take of SecretKey(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AspireApiKeyStatus.keyConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiKeyStatus(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = MEMORY[0x24BEE4AF8];
    v9[8] = 0;
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 28)];
    v12 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  return AMDPbHEKeyStatus.keyConfig.modify;
}

BOOL AspireApiKeyStatus.hasKeyConfig.getter()
{
  return AspireApiKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireApiKeyStatus, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Void __swiftcall AspireApiKeyStatus.clearKeyConfig()()
{
  AspireApiKeyStatus.clearKeyConfig()(type metadata accessor for AspireApiKeyStatus, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t AspireApiKeyStatus.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireApiKeyStatus, a1);
}

uint64_t AspireApiKeyStatus.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireApiKeyStatus);
}

uint64_t (*AspireApiKeyStatus.unknownFields.modify())()
{
  type metadata accessor for AspireApiKeyStatus(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiKeyStatus.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = 0;
  v2 = type metadata accessor for AspireApiKeyStatus(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t (*AspireApiEvaluationKeys.keys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKeys.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireApiEvaluationKeys, a1);
}

uint64_t AspireApiEvaluationKeys.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireApiEvaluationKeys);
}

uint64_t (*AspireApiEvaluationKeys.unknownFields.modify())()
{
  type metadata accessor for AspireApiEvaluationKeys(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKeys.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AspireApiEvaluationKeys, a1);
}

uint64_t AspireApiEvaluationKey.metadata.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v7 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspireApiEvaluationKeyMetadata);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
}

uint64_t key path getter for AspireApiEvaluationKey.metadata : AspireApiEvaluationKey@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v8 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireApiEvaluationKeyMetadata);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
}

uint64_t key path setter for AspireApiEvaluationKey.metadata : AspireApiEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspireApiEvaluationKeyMetadata);
  v8 = a2 + *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspireApiEvaluationKeyMetadata);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireApiEvaluationKey.metadata.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  return AspireApiEvaluationKey.metadata.modify;
}

void AspireApiEvaluationKey.metadata.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?, type metadata accessor for AspireApiEvaluationKeyMetadata);
}

BOOL AspireApiEvaluationKey.hasMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 20), (uint64_t)v3, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  return v6;
}

Swift::Void __swiftcall AspireApiEvaluationKey.clearMetadata()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v2 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t AspireApiEvaluationKey.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeSerializedEvaluationKey);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + *(int *)(v7 + 24);
  v11 = type metadata accessor for AspireHeSerializedRelinKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
}

uint64_t key path getter for AspireApiEvaluationKey.evaluationKey : AspireApiEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireHeSerializedEvaluationKey);
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 20);
  v10 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a2 + *(int *)(v8 + 24);
  v12 = type metadata accessor for AspireHeSerializedRelinKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
}

uint64_t key path setter for AspireApiKeyStatus.keyConfig : AspireApiKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of SecretKey(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, a7);
  outlined init with take of SecretKey((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

void (*AspireApiEvaluationKey.evaluationKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiEvaluationKey(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    v14 = type metadata accessor for AspireHeSerializedRelinKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeSerializedEvaluationKey);
  }
  return AMDPbEvaluationKey.evaluationKey.modify;
}

BOOL AspireApiEvaluationKey.hasEvaluationKey.getter()
{
  return AspireApiKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?, type metadata accessor for AspireApiEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey);
}

BOOL AspireApiKeyStatus.hasKeyConfig.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AspireApiEvaluationKey.clearEvaluationKey()()
{
  AspireApiKeyStatus.clearKeyConfig()(type metadata accessor for AspireApiEvaluationKey, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?, type metadata accessor for AspireHeSerializedEvaluationKey);
}

uint64_t AspireApiKeyStatus.clearKeyConfig()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t (*AspireApiEvaluationKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiEvaluationKey.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = type metadata accessor for AspireApiEvaluationKey(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 24);
  v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t (*AspireApiConfigRequest.usecases.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfigRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireApiConfigRequest, a1);
}

uint64_t AspireApiConfigRequest.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireApiConfigRequest);
}

uint64_t (*AspireApiConfigRequest.unknownFields.modify())()
{
  type metadata accessor for AspireApiConfigRequest(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfigRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AspireApiConfigRequest, a1);
}

uint64_t AspireApiConfig.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
}

uint64_t AspireApiConfig.config.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
}

uint64_t (*AspireApiConfig.config.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfig.pirConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v7 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_5:
    *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0xC000000000000000;
    v8 = type metadata accessor for AspireApiPIRConfig(0);
    UnknownStorage.init()();
    v9 = a1 + *(int *)(v8 + 36);
    v10 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    v11 = a1 + *(int *)(v8 + 40);
    v12 = type metadata accessor for AspirePirKeywordPirParameters(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v6, a1, type metadata accessor for AspireApiPIRConfig);
}

uint64_t AspireApiConfig.pirConfig.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?, type metadata accessor for AspireApiPIRConfig, type metadata accessor for AspireApiConfig.OneOf_Config);
}

uint64_t AspireApiPIRConfig.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xC000000000000000;
  v2 = type metadata accessor for AspireApiPIRConfig(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 36);
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 40);
  v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

void (*AspireApiConfig.pirConfig.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AspireApiPIRConfig(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v10 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v9, type metadata accessor for AspireApiPIRConfig);
      return AspireApiConfig.pirConfig.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiConfig.OneOf_Config);
  }
  *v9 = MEMORY[0x24BEE4AF8];
  v9[1] = 0;
  *((_BYTE *)v9 + 16) = 1;
  v9[3] = 0;
  v9[4] = 0;
  v9[5] = 0xC000000000000000;
  UnknownStorage.init()();
  v12 = (char *)v9 + *(int *)(v7 + 36);
  v13 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (char *)v9 + *(int *)(v7 + 40);
  v15 = type metadata accessor for AspirePirKeywordPirParameters(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return AspireApiConfig.pirConfig.modify;
}

void AspireApiConfig.pirConfig.modify(uint64_t **a1, char a2)
{
  AMDPbHEConfig.pirConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?, type metadata accessor for AspireApiPIRConfig);
}

uint64_t AspireApiConfig.pecConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v7 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, a1, type metadata accessor for AspireApiPECConfig);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiConfig.OneOf_Config);
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_237D54090;
  *(_QWORD *)(a1 + 48) = MEMORY[0x24BEE4AF8];
  v9 = type metadata accessor for AspireApiPECConfig(0);
  UnknownStorage.init()();
  v10 = a1 + *(int *)(v9 + 40);
  v11 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1 + *(int *)(v9 + 44);
  v13 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
}

uint64_t AspireApiConfig.pecConfig.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?, type metadata accessor for AspireApiPECConfig, type metadata accessor for AspireApiConfig.OneOf_Config);
}

uint64_t AspireApiPECConfig.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_237D54090;
  *(_QWORD *)(a1 + 48) = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for AspireApiPECConfig(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 40);
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 44);
  v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

void (*AspireApiConfig.pecConfig.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AspireApiPECConfig(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v10 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_6:
    *(_QWORD *)v9 = 0;
    v9[2] = 0;
    *((_QWORD *)v9 + 2) = 0;
    *((_BYTE *)v9 + 24) = 1;
    *((_OWORD *)v9 + 2) = xmmword_237D54090;
    *((_QWORD *)v9 + 6) = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v12 = (char *)v9 + *(int *)(v7 + 40);
    v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = (char *)v9 + *(int *)(v7 + 44);
    v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    return AspireApiConfig.pecConfig.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v9, type metadata accessor for AspireApiPECConfig);
  return AspireApiConfig.pecConfig.modify;
}

void AspireApiConfig.pecConfig.modify(uint64_t **a1, char a2)
{
  AMDPbHEConfig.pirConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?, type metadata accessor for AspireApiPECConfig);
}

uint64_t AspireApiConfig.configID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireApiConfig(0) + 20);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t AspireApiConfig.configID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for AspireApiConfig(0) + 20);
  result = outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*AspireApiConfig.configID.modify())()
{
  type metadata accessor for AspireApiConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspireApiConfig, a1);
}

uint64_t AspireApiConfig.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspireApiConfig);
}

uint64_t (*AspireApiConfig.unknownFields.modify())()
{
  type metadata accessor for AspireApiConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfig.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  *(_OWORD *)(a1 + *(int *)(type metadata accessor for AspireApiConfig(0) + 20)) = xmmword_237D54090;
  return UnknownStorage.init()();
}

uint64_t (*AspireApiConfigResponse.configs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiConfigResponse.keyInfo.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfigResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspireApiConfigResponse, a1);
}

uint64_t AspireApiConfigResponse.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspireApiConfigResponse);
}

uint64_t (*AspireApiConfigResponse.unknownFields.modify())()
{
  type metadata accessor for AspireApiConfigResponse(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiConfigResponse.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a1[1] = v2;
  type metadata accessor for AspireApiConfigResponse(0);
  return UnknownStorage.init()();
}

uint64_t AspireApiRequests.requests.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireApiRequests.requests.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AspireApiRequests.requests.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiRequests.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireApiRequests, a1);
}

uint64_t AspireApiRequests.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireApiRequests);
}

uint64_t (*AspireApiRequests.unknownFields.modify())()
{
  type metadata accessor for AspireApiRequests(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiResponses.responses.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiResponses.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireApiResponses, a1);
}

uint64_t AspireApiResponses.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireApiResponses);
}

uint64_t (*AspireApiResponses.unknownFields.modify())()
{
  type metadata accessor for AspireApiResponses(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiResponses.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AspireApiResponses, a1);
}

uint64_t AspireApiRequest.usecase.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AspireApiRequest.usecase.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AspireApiRequest.usecase.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiRequest.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AspireApiRequest(0);
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
}

uint64_t AspireApiRequest.request.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AspireApiRequest(0);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
}

uint64_t (*AspireApiRequest.request.modify())()
{
  type metadata accessor for AspireApiRequest(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRRequest.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_237D54090;
  v2 = (int *)type metadata accessor for AspireApiPIRRequest(0);
  UnknownStorage.init()();
  v3 = a1 + v2[7];
  v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[8];
  v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (_QWORD *)(a1 + v2[9]);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1 + v2[10];
  v9 = type metadata accessor for AspireApiEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t type metadata accessor for AspireApiRequest(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiRequest);
}

uint64_t type metadata accessor for AspireApiRequest.OneOf_Request(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiRequest.OneOf_Request);
}

uint64_t type metadata accessor for AspireApiPIRRequest(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRRequest);
}

uint64_t type metadata accessor for AspireApiEvaluationKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiEvaluationKey);
}

uint64_t type metadata accessor for AspireApiRequests(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiRequests);
}

uint64_t type metadata accessor for AspireApiPIRShardConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRShardConfig);
}

uint64_t type metadata accessor for AspireApiEvaluationKeys(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiEvaluationKeys);
}

uint64_t type metadata accessor for AspireApiConfigRequest(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiConfigRequest);
}

uint64_t type metadata accessor for AspireApiConfig.OneOf_Config(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiConfig.OneOf_Config);
}

uint64_t type metadata accessor for AspireApiConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiConfig);
}

void (*AspireApiRequest.pirRequest.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for AspireApiPIRRequest(0);
  v7 = *(_QWORD *)(*((_QWORD *)v6 - 1) + 64);
  v3[2] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[3] = v8;
  v9 = *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v9, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v3[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v8, type metadata accessor for AspireApiPIRRequest);
      return AspireApiRequest.pirRequest.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
  }
  *(_DWORD *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_237D54090;
  UnknownStorage.init()();
  v12 = &v8[v6[7]];
  v13 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = &v8[v6[8]];
  v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = &v8[v6[9]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = &v8[v6[10]];
  v18 = type metadata accessor for AspireApiEvaluationKey(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  return AspireApiRequest.pirRequest.modify;
}

void AspireApiRequest.pirRequest.modify(uint64_t a1, char a2)
{
  AspireApiRequest.pirRequest.modify(a1, a2, type metadata accessor for AspireApiPIRRequest);
}

uint64_t AspireApiRequest.pecRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v7 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireApiPECRequest);
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
  }
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = xmmword_237D54090;
  v10 = type metadata accessor for AspireApiPECRequest(0);
  UnknownStorage.init()();
  v11 = a1 + *(int *)(v10 + 32);
  v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1 + *(int *)(v10 + 36);
  v14 = type metadata accessor for AspireApiEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
}

uint64_t key path setter for AspireApiRequest.pirRequest : AspireApiRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  outlined init with copy of SecretKey(a1, (uint64_t)&v14 - v9, a5);
  v11 = a2 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v11, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  outlined init with take of SecretKey((uint64_t)v10, v11, a5);
  v12 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
}

uint64_t AspireApiRequest.pecRequest.setter(uint64_t a1)
{
  return AspireApiRequest.pirRequest.setter(a1, type metadata accessor for AspireApiPECRequest);
}

uint64_t AspireApiRequest.pirRequest.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  outlined init with take of SecretKey(a1, v5, a2);
  v6 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
}

uint64_t AspireApiPECRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_237D54090;
  v3 = type metadata accessor for AspireApiPECRequest(0);
  UnknownStorage.init()();
  v4 = a1 + *(int *)(v3 + 32);
  v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + *(int *)(v3 + 36);
  v7 = type metadata accessor for AspireApiEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

void (*AspireApiRequest.pecRequest.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireApiPECRequest(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[2] = malloc(v7);
  v8 = malloc(v7);
  v3[3] = v8;
  v9 = *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v9, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v3[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
LABEL_6:
    v12 = MEMORY[0x24BEE4AF8];
    *v8 = MEMORY[0x24BEE4AF8];
    v8[1] = v12;
    *((_OWORD *)v8 + 1) = xmmword_237D54090;
    UnknownStorage.init()();
    v13 = (char *)v8 + *(int *)(v6 + 32);
    v14 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v15 = (char *)v8 + *(int *)(v6 + 36);
    v16 = type metadata accessor for AspireApiEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    return AspireApiRequest.pecRequest.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v8, type metadata accessor for AspireApiPECRequest);
  return AspireApiRequest.pecRequest.modify;
}

void AspireApiRequest.pecRequest.modify(uint64_t a1, char a2)
{
  AspireApiRequest.pirRequest.modify(a1, a2, type metadata accessor for AspireApiPECRequest);
}

void AspireApiRequest.pirRequest.modify(uint64_t a1, char a2, uint64_t (*a3)(_QWORD))
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7 = *(int *)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 16);
  v9 = *(void **)(*(_QWORD *)a1 + 24);
  v10 = *(void **)(*(_QWORD *)a1 + 8);
  v11 = **(_QWORD **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey(*(_QWORD *)(*(_QWORD *)a1 + 24), (uint64_t)v8, a3);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v11, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of SecretKey((uint64_t)v8, v11, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    outlined destroy of AspireApiPECConfig((uint64_t)v9, a3);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(_QWORD **)a1 + v7, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of SecretKey((uint64_t)v9, v11, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
  }
  free(v9);
  free(v8);
  free(v10);
  free(v4);
}

uint64_t AspireApiRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspireApiRequest, a1);
}

uint64_t AspireApiRequest.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspireApiRequest);
}

uint64_t (*AspireApiRequest.unknownFields.modify())()
{
  type metadata accessor for AspireApiRequest(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v1 = (char *)a1 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  v2 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return UnknownStorage.init()();
}

uint64_t AspireApiResponse.response.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

uint64_t AspireApiResponse.response.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

uint64_t (*AspireApiResponse.response.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiResponse.pirResponse.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_5:
    *a1 = MEMORY[0x24BEE4AF8];
    type metadata accessor for AspireApiPIRResponse(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspireApiPIRResponse);
}

uint64_t key path getter for AspireApiResponse.pirResponse : AspireApiResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_5:
    *a2 = MEMORY[0x24BEE4AF8];
    type metadata accessor for AspireApiPIRResponse(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireApiPIRResponse);
}

uint64_t AspireApiResponse.pirResponse.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?, type metadata accessor for AspireApiPIRResponse, type metadata accessor for AspireApiResponse.OneOf_Response);
}

uint64_t AspireApiPIRResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AspireApiPIRResponse, a1);
}

void (*AspireApiResponse.pirResponse.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AspireApiPIRResponse(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
      return AspireApiResponse.pirResponse.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireApiResponse.OneOf_Response);
  }
  *v7 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  return AspireApiResponse.pirResponse.modify;
}

void AspireApiResponse.pirResponse.modify(uint64_t **a1, char a2)
{
  AMDPbHEConfig.pirConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?, type metadata accessor for AspireApiPIRResponse);
}

uint64_t AspireApiResponse.pecResponse.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a1, type metadata accessor for AspireApiPECResponse);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for AspireApiPECResponse(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AspireApiResponse.pecResponse : AspireApiResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspireApiPECResponse);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiResponse.OneOf_Response);
  }
  *a2 = MEMORY[0x24BEE4AF8];
  type metadata accessor for AspireApiPECResponse(0);
  return UnknownStorage.init()();
}

uint64_t AspireApiResponse.pecResponse.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?, type metadata accessor for AspireApiPECResponse, type metadata accessor for AspireApiResponse.OneOf_Response);
}

uint64_t AspireApiPECResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AspireApiPECResponse, a1);
}

void (*AspireApiResponse.pecResponse.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AspireApiPECResponse(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    return AspireApiResponse.pecResponse.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AspireApiPECResponse);
  return AspireApiResponse.pecResponse.modify;
}

void AspireApiResponse.pecResponse.modify(uint64_t **a1, char a2)
{
  AMDPbHEConfig.pirConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?, type metadata accessor for AspireApiPECResponse);
}

uint64_t AspireApiResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireApiResponse, a1);
}

uint64_t AspireApiResponse.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireApiResponse);
}

uint64_t (*AspireApiResponse.unknownFields.modify())()
{
  type metadata accessor for AspireApiResponse(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t static AspireApiPIRResponse.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiPIRResponse) & 1;
}

uint64_t static AspireApiPECResponse.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiPECResponse) & 1;
}

uint64_t AspireApiResponse.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  type metadata accessor for AspireApiResponse(0);
  return UnknownStorage.init()();
}

uint64_t (*AspireApiPIRShardConfig.numEntries.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRShardConfig.entrySize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AspireApiPIRShardConfig.entrySize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.entrySize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRShardConfig.dimensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireApiPIRShardConfig.dimensions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.dimensions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiPIRShardConfig.shardID : AspireApiPIRShardConfig@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireApiPIRShardConfig.shardID : AspireApiPIRShardConfig(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t AspireApiPIRShardConfig.shardID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.shardID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

Swift::Void __swiftcall AspireApiPIRShardConfig.clearShardID()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 32));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t AspireApiPIRShardConfig.compressVectorizedPirResponse.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AspireApiPIRShardConfig(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.compressVectorizedPirResponse.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return AspireApiPIRShardConfig.compressVectorizedPirResponse.modify;
}

uint64_t AspireApiPIRShardConfig.compressVectorizedPirResponse.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

Swift::Void __swiftcall AspireApiPIRShardConfig.clearCompressVectorizedPirResponse()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 36)) = 2;
}

uint64_t AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for AspireApiPIRShardConfig(0);
  v4 = v1 + *(int *)(result + 40);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.modify;
}

uint64_t AspireApiPIRShardConfig.vectorizedPirInternalBatchingSize.modify(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8) + *(int *)(result + 16);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

Swift::Void __swiftcall AspireApiPIRShardConfig.clearVectorizedPirInternalBatchingSize()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for AspireApiPIRShardConfig(0) + 40);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t AspireApiPIRShardConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPIRShardConfig.unknownFields.getter(type metadata accessor for AspireApiPIRShardConfig, a1);
}

uint64_t AspireApiPIRShardConfig.unknownFields.setter(uint64_t a1)
{
  return AspireApiPIRShardConfig.unknownFields.setter(a1, type metadata accessor for AspireApiPIRShardConfig);
}

uint64_t (*AspireApiPIRShardConfig.unknownFields.modify())()
{
  type metadata accessor for AspireApiPIRShardConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRShardConfig.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  _QWORD *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  result = UnknownStorage.init()();
  v4 = (_QWORD *)((char *)a1 + v2[8]);
  *v4 = 0;
  v4[1] = 0;
  *((_BYTE *)a1 + v2[9]) = 2;
  v5 = (char *)a1 + v2[10];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  return result;
}

uint64_t AspireApiPIRConfig.encryptionParameters.setter(uint64_t a1)
{
  return AspireApiPECRequest.evaluationKey.setter(a1, type metadata accessor for AspireApiPIRConfig, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t AspireApiPECRequest.evaluationKey.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, a3);
  outlined init with take of SecretKey(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AspireApiPIRConfig.encryptionParameters.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x24BEE4AF8];
    v9[3] = 0;
    *((_BYTE *)v9 + 32) = 1;
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v9[7] = 0;
    *((_BYTE *)v9 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AMDPbPIRConfig.encryptionParameters.modify;
}

BOOL AspireApiPIRConfig.hasEncryptionParameters.getter()
{
  return AspireApiPIRConfig.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireApiPIRConfig, type metadata accessor for AspireHeEncryptionParameters);
}

Swift::Void __swiftcall AspireApiPIRConfig.clearEncryptionParameters()()
{
  AspireApiPIRConfig.clearEncryptionParameters()(type metadata accessor for AspireApiPIRConfig, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t (*AspireApiPIRConfig.shardConfigs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiPIRConfig.keywordPirParams : AspireApiPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireApiPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspirePirKeywordPirParameters);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t AspireApiPIRConfig.keywordPirParams.setter(uint64_t a1)
{
  return AMDPbPIRConfig.keywordPirParams.setter(a1, type metadata accessor for AspireApiPIRConfig, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters);
}

void (*AspireApiPIRConfig.keywordPirParams.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = 0;
    v9[8] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirKeywordPirParameters);
  }
  return AMDPbPIRConfig.keywordPirParams.modify;
}

BOOL AspireApiPIRConfig.hasKeywordPirParams.getter()
{
  return AMDPbPIRConfig.hasKeywordPirParams.getter(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspireApiPIRConfig, type metadata accessor for AspirePirKeywordPirParameters);
}

Swift::Void __swiftcall AspireApiPIRConfig.clearKeywordPirParams()()
{
  AMDPbPIRConfig.clearKeywordPirParams()(type metadata accessor for AspireApiPIRConfig, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters);
}

void AspireApiPIRConfig.algorithm.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AspireApiPIRConfig.algorithm.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t (*AspireApiPIRConfig.algorithm.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRConfig.batchSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AspireApiPIRConfig.batchSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*AspireApiPIRConfig.batchSize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPIRConfig.evaluationKeyConfigHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 32);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AspireApiPIRConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireApiPIRConfig(0) + 32);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AspireApiPIRConfig.unknownFields.modify())()
{
  type metadata accessor for AspireApiPIRConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRRequest.shardIndex.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t AspireApiPIRRequest.shardIndex.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AspireApiPIRRequest.shardIndex.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiPIRRequest.query : AspireApiPIRRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v8 = type metadata accessor for AspirePirEncryptedIndices(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirEncryptedIndices);
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
}

uint64_t key path setter for AspireApiPIRRequest.query : AspireApiPIRRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspirePirEncryptedIndices);
  v8 = a2 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspirePirEncryptedIndices);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AspireApiPIRRequest.query.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspirePirEncryptedIndices(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirEncryptedIndices);
  }
  return AMDPbPIRQuery.query.modify;
}

BOOL AspireApiPIRRequest.hasQuery.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v5 = type metadata accessor for AspirePirEncryptedIndices(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  return v6;
}

Swift::Void __swiftcall AspireApiPIRRequest.clearQuery()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v2 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

void (*AspireApiPIRRequest.evaluationKeyMetadata.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  return AspireApiEvaluationKey.metadata.modify;
}

BOOL AspireApiPIRRequest.hasEvaluationKeyMetadata.getter()
{
  return AspireApiPIRRequest.hasEvaluationKeyMetadata.getter(type metadata accessor for AspireApiPIRRequest);
}

Swift::Void __swiftcall AspireApiPIRRequest.clearEvaluationKeyMetadata()()
{
  AspireApiPIRRequest.clearEvaluationKeyMetadata()(type metadata accessor for AspireApiPIRRequest);
}

uint64_t AspireApiPIRRequest.configID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t AspireApiEvaluationKeyMetadata.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AspireApiPIRRequest.configID.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRRequest.shardID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspireApiPIRRequest.shardID : AspireApiPIRRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspireApiPIRRequest.shardID : AspireApiPIRRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*AspireApiPIRRequest.shardID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

uint64_t AspireApiPIRShardConfig.shardID.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)(a1[2] + *((int *)a1 + 6));
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL AspireApiPIRRequest.hasShardID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36) + 8) != 0;
}

Swift::Void __swiftcall AspireApiPIRRequest.clearShardID()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 36));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t AspireApiPIRRequest.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  v7 = type metadata accessor for AspireApiEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireApiEvaluationKey);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + *(int *)(v7 + 24);
  v11 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

uint64_t key path getter for AspireApiPIRRequest.evaluationKey : AspireApiPIRRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  v8 = type metadata accessor for AspireApiEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireApiEvaluationKey);
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 20);
  v10 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a2 + *(int *)(v8 + 24);
  v12 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

void (*AspireApiPIRRequest.evaluationKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireApiEvaluationKey(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireApiEvaluationKey);
  }
  return AspireApiPIRRequest.evaluationKey.modify;
}

void AspireApiPIRRequest.evaluationKey.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireApiEvaluationKey?, type metadata accessor for AspireApiEvaluationKey);
}

BOOL AspireApiPIRRequest.hasEvaluationKey.getter()
{
  return AMDPbPIRConfig.hasKeywordPirParams.getter(&demangling cache variable for type metadata for AspireApiEvaluationKey?, type metadata accessor for AspireApiPIRRequest, type metadata accessor for AspireApiEvaluationKey);
}

Swift::Void __swiftcall AspireApiPIRRequest.clearEvaluationKey()()
{
  AMDPbPIRConfig.clearKeywordPirParams()(type metadata accessor for AspireApiPIRRequest, &demangling cache variable for type metadata for AspireApiEvaluationKey?, type metadata accessor for AspireApiEvaluationKey);
}

uint64_t AspireApiPIRRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspireApiPIRRequest, a1);
}

uint64_t AspireApiPIRRequest.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspireApiPIRRequest);
}

uint64_t (*AspireApiPIRRequest.unknownFields.modify())()
{
  type metadata accessor for AspireApiPIRRequest(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPIRResponse.replies.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireApiPIRResponse, a1);
}

uint64_t AspireApiPIRResponse.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireApiPIRResponse);
}

uint64_t (*AspireApiPIRResponse.unknownFields.modify())()
{
  type metadata accessor for AspireApiPIRResponse(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECConfig.encryptionParameters.setter(uint64_t a1)
{
  return AMDPbPIRConfig.keywordPirParams.setter(a1, type metadata accessor for AspireApiPECConfig, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters);
}

void (*AspireApiPECConfig.encryptionParameters.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiPECConfig(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x24BEE4AF8];
    v9[3] = 0;
    *((_BYTE *)v9 + 32) = 1;
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v9[7] = 0;
    *((_BYTE *)v9 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AMDPbPIRConfig.encryptionParameters.modify;
}

BOOL AspireApiPECConfig.hasEncryptionParameters.getter()
{
  return AMDPbPIRConfig.hasKeywordPirParams.getter(&demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireApiPECConfig, type metadata accessor for AspireHeEncryptionParameters);
}

Swift::Void __swiftcall AspireApiPECConfig.clearEncryptionParameters()()
{
  AMDPbPIRConfig.clearKeywordPirParams()(type metadata accessor for AspireApiPECConfig, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t (*AspireApiPECConfig.scalingFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiPECConfig.plaintextPacking : AspireApiPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 44), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireSimilarityPlaintextPacking);
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path setter for AspireApiPECConfig.plaintextPacking : AspireApiPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspireSimilarityPlaintextPacking);
  v8 = a2 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 44);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspireSimilarityPlaintextPacking);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AspireApiPECConfig.plaintextPacking.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 44);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspireSimilarityPlaintextPacking);
  v4 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*AspireApiPECConfig.plaintextPacking.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiPECConfig(0) + 44);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  return AMDPbPECConfig.plaintextPacking.modify;
}

BOOL AspireApiPECConfig.hasPlaintextPacking.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 44), (uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v5 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  return v6;
}

Swift::Void __swiftcall AspireApiPECConfig.clearPlaintextPacking()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 44);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v2 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t AspireApiPECConfig.embeddingDimension.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t AspireApiPECConfig.embeddingDimension.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspireApiPECConfig.embeddingDimension.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AspireApiPECConfig.similarityMetric.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AspireApiPECConfig.similarityMetric.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 24) = v2;
  return result;
}

uint64_t (*AspireApiPECConfig.similarityMetric.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPIRConfig.evaluationKeyConfigHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AspireApiPECConfig.evaluationKeyConfigHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECConfig.extraPlaintextModuli.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireApiPECConfig.extraPlaintextModuli.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*AspireApiPECConfig.extraPlaintextModuli.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 36);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AspireApiPECConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspireApiPECConfig(0) + 36);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AspireApiPECConfig.unknownFields.modify())()
{
  type metadata accessor for AspireApiPECConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPECRequest.shardIndices.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECRequest.query.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspireApiPECRequest.query.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AspireApiPECRequest.query.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t key path getter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v9 + 32), (uint64_t)v8, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v10 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
    return outlined init with take of SecretKey((uint64_t)v8, (uint64_t)a3, type metadata accessor for AspireApiEvaluationKeyMetadata);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
}

uint64_t key path setter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v11, type metadata accessor for AspireApiEvaluationKeyMetadata);
  v12 = a2 + *(int *)(a5(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of SecretKey((uint64_t)v11, v12, type metadata accessor for AspireApiEvaluationKeyMetadata);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

void (*AspireApiPECRequest.evaluationKeyMetadata.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiPECRequest(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireApiEvaluationKeyMetadata);
  }
  return AspireApiEvaluationKey.metadata.modify;
}

BOOL AspireApiPECRequest.hasEvaluationKeyMetadata.getter()
{
  return AspireApiPIRRequest.hasEvaluationKeyMetadata.getter(type metadata accessor for AspireApiPECRequest);
}

BOOL AspireApiPIRRequest.hasEvaluationKeyMetadata.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v7 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  return v8;
}

Swift::Void __swiftcall AspireApiPECRequest.clearEvaluationKeyMetadata()()
{
  AspireApiPIRRequest.clearEvaluationKeyMetadata()(type metadata accessor for AspireApiPECRequest);
}

uint64_t AspireApiPIRRequest.clearEvaluationKeyMetadata()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v3 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

uint64_t AspireApiPECRequest.configID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t AspireApiPECRequest.configID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AspireApiPECRequest.configID.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECRequest.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AspireApiPECRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  v7 = type metadata accessor for AspireApiEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireApiEvaluationKey);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + *(int *)(v7 + 24);
  v11 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

uint64_t key path getter for AspireApiPECRequest.evaluationKey : AspireApiPECRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AspireApiPECRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  v8 = type metadata accessor for AspireApiEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireApiEvaluationKey);
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 20);
  v10 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a2 + *(int *)(v8 + 24);
  v12 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

uint64_t key path setter for AspireApiPIRConfig.encryptionParameters : AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of SecretKey(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, a7);
  outlined init with take of SecretKey((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

void (*AspireApiPECRequest.evaluationKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireApiEvaluationKey(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AspireApiPECRequest(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireApiEvaluationKey);
  }
  return AspireApiPIRRequest.evaluationKey.modify;
}

BOOL AspireApiPECRequest.hasEvaluationKey.getter()
{
  return AspireApiPIRConfig.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspireApiEvaluationKey?, type metadata accessor for AspireApiPECRequest, type metadata accessor for AspireApiEvaluationKey);
}

BOOL AspireApiPIRConfig.hasEncryptionParameters.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v10 + 36), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AspireApiPECRequest.clearEvaluationKey()()
{
  AspireApiPIRConfig.clearEncryptionParameters()(type metadata accessor for AspireApiPECRequest, &demangling cache variable for type metadata for AspireApiEvaluationKey?, type metadata accessor for AspireApiEvaluationKey);
}

uint64_t AspireApiPIRConfig.clearEncryptionParameters()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t AspireApiPECRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPIRShardConfig.unknownFields.getter(type metadata accessor for AspireApiPECRequest, a1);
}

uint64_t AspireApiPIRShardConfig.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AspireApiPECRequest.unknownFields.setter(uint64_t a1)
{
  return AspireApiPIRShardConfig.unknownFields.setter(a1, type metadata accessor for AspireApiPECRequest);
}

uint64_t AspireApiPIRShardConfig.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AspireApiPECRequest.unknownFields.modify())()
{
  type metadata accessor for AspireApiPECRequest(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPECShardResponse.reply.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPECShardResponse.entryIds.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspireApiPECShardResponse.entryMetadatas.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECShardResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPIRShardConfig.unknownFields.getter(type metadata accessor for AspireApiPECShardResponse, a1);
}

uint64_t AspireApiPECShardResponse.unknownFields.setter(uint64_t a1)
{
  return AspireApiPIRShardConfig.unknownFields.setter(a1, type metadata accessor for AspireApiPECShardResponse);
}

uint64_t (*AspireApiPECShardResponse.unknownFields.modify())()
{
  type metadata accessor for AspireApiPECShardResponse(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECShardResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  a1[2] = v2;
  type metadata accessor for AspireApiPECShardResponse(0);
  return UnknownStorage.init()();
}

uint64_t (*AspireApiPECResponse.shardResponses.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspireApiPECResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspireApiPECResponse, a1);
}

uint64_t AspireApiPECResponse.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspireApiPECResponse);
}

uint64_t (*AspireApiPECResponse.unknownFields.modify())()
{
  type metadata accessor for AspireApiPECResponse(0);
  return Repeated.subscript.readspecialized ;
}

unint64_t static AspireApiEmpty.protoMessageName.getter()
{
  return 0xD000000000000010;
}

uint64_t static AspireApiEmpty._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEmpty._protobuf_nameMap, a1);
}

uint64_t AspireApiEmpty.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  do
    result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t AspireApiEmpty.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t static AspireApiEmpty.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for UnknownStorage();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v15 - v10, a1, v4);
  v12(v9, a2, v4);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v5, MEMORY[0x24BE5BF20]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  return a2 & 1;
}

Swift::Int AspireApiEmpty.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiEmpty, &lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, (uint64_t)&protocol conformance descriptor for AspireApiEmpty);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiEmpty()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiEmpty()
{
  return AspireApiEmpty.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiEmpty()
{
  return AspireApiEmpty.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiEmpty()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, type metadata accessor for AspireApiEmpty, (uint64_t)&protocol conformance descriptor for AspireApiEmpty);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiEmpty@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEmpty._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiEmpty()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, type metadata accessor for AspireApiEmpty, (uint64_t)&protocol conformance descriptor for AspireApiEmpty);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiEmpty()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, type metadata accessor for AspireApiEmpty, (uint64_t)&protocol conformance descriptor for AspireApiEmpty);
  return Message.hash(into:)();
}

unint64_t static AspireApiEvaluationKeyMetadata.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t static AspireApiEvaluationKeyMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKeyMetadata._protobuf_nameMap, a1);
}

uint64_t AspireApiEvaluationKeyMetadata.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireApiEvaluationKeyMetadata.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    __asm { BR              X10 }
  return result;
}

Swift::Int AspireApiEvaluationKeyMetadata.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiEvaluationKeyMetadata, &lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiEvaluationKeyMetadata()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiEvaluationKeyMetadata()
{
  return AspireApiEvaluationKeyMetadata.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiEvaluationKeyMetadata()
{
  return AspireApiEvaluationKeyMetadata.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiEvaluationKeyMetadata()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiEvaluationKeyMetadata@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKeyMetadata._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiEvaluationKeyMetadata()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiEvaluationKeyMetadata()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
  return Message.hash(into:)();
}

unint64_t static AspireApiKeyStatus.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t static AspireApiKeyStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiKeyStatus._protobuf_nameMap, a1);
}

uint64_t AspireApiKeyStatus.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in AspireApiKeyStatus.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireApiKeyStatus, type metadata accessor for AspireHeEvaluationKeyConfig, &lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireApiKeyStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in AspireApiKeyStatus.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for AspireApiKeyStatus(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiKeyStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Int AspireApiKeyStatus.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiKeyStatus, &lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
}

uint64_t protocol witness for Message.init() in conformance AspireApiKeyStatus@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiKeyStatus()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiKeyStatus.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiKeyStatus.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiKeyStatus()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiKeyStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiKeyStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiKeyStatus()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiKeyStatus()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
  return Message.hash(into:)();
}

unint64_t static AspireApiEvaluationKeys.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static AspireApiEvaluationKeys._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKeys._protobuf_nameMap, a1);
}

uint64_t AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspireApiEvaluationKey, &lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
}

uint64_t AspireApiEvaluationKeys.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AspireApiEvaluationKey, &lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey, (void (*)(_QWORD))type metadata accessor for AspireApiEvaluationKeys);
}

uint64_t static AspireApiEvaluationKeys.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiEvaluationKeys) & 1;
}

Swift::Int AspireApiEvaluationKeys.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiEvaluationKeys, &lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiEvaluationKeys()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKeys.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKeys.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiEvaluationKeys()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiEvaluationKeys@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKeys._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiEvaluationKeys()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiEvaluationKeys()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiEvaluationKeys(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiEvaluationKeys) & 1;
}

unint64_t static AspireApiEvaluationKey.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static AspireApiEvaluationKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKey._protobuf_nameMap, a1);
}

uint64_t AspireApiEvaluationKey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in AspireApiKeyStatus.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireApiEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, &lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
      }
      else if (result == 1)
      {
        closure #1 in AspireApiEvaluationKey.decodeMessage<A>(decoder:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiEvaluationKey.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspireApiEvaluationKey(0);
  type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in AspireApiKeyStatus.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AspireApiEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in AspireApiEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireApiEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireApiEvaluationKeyMetadata);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t closure #2 in AspireApiEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedEvaluationKey);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeSerializedEvaluationKey);
}

Swift::Int AspireApiEvaluationKey.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiEvaluationKey, &lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
}

uint64_t protocol witness for Message.init() in conformance AspireApiEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 24);
  v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiEvaluationKey()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKey.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiEvaluationKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiEvaluationKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiEvaluationKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiEvaluationKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiEvaluationKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiEvaluationKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
  return Message.hash(into:)();
}

unint64_t static AspireApiConfigRequest.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t static AspireApiConfigRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfigRequest._protobuf_nameMap, a1);
}

uint64_t AspireApiConfigRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
  }
  return result;
}

uint64_t AspireApiConfigRequest.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for AspireApiConfigRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static AspireApiConfigRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiConfigRequest) & 1;
}

Swift::Int AspireApiConfigRequest.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiConfigRequest, &lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, (uint64_t)&protocol conformance descriptor for AspireApiConfigRequest);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiConfigRequest()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiConfigRequest()
{
  return AspireApiConfigRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiConfigRequest()
{
  return AspireApiConfigRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiConfigRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, type metadata accessor for AspireApiConfigRequest, (uint64_t)&protocol conformance descriptor for AspireApiConfigRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiConfigRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfigRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiConfigRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, type metadata accessor for AspireApiConfigRequest, (uint64_t)&protocol conformance descriptor for AspireApiConfigRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiConfigRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, type metadata accessor for AspireApiConfigRequest, (uint64_t)&protocol conformance descriptor for AspireApiConfigRequest);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiConfigRequest(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiConfigRequest) & 1;
}

unint64_t static AspireApiConfig.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t static AspireApiConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfig._protobuf_nameMap, a1);
}

uint64_t AspireApiConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t result;
  char v11;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    v9 = v4;
    if (v4 || (v11 & 1) != 0)
      return result;
    switch(result)
    {
      case 3:
        type metadata accessor for AspireApiConfig(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_3:
        v9 = 0;
        break;
      case 2:
        closure #2 in AspireApiConfig.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        goto LABEL_3;
      case 1:
        closure #1 in AspireApiConfig.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        goto LABEL_3;
    }
    v4 = v9;
  }
}

uint64_t closure #1 in AspireApiConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspireApiPIRConfig(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRConfig?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiConfig.OneOf_Config);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireApiConfig.OneOf_Config);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiConfig.OneOf_Config);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRConfig?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspireApiPIRConfig);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspireApiPIRConfig);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRConfig?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspireApiPIRConfig?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireApiPIRConfig?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspireApiPIRConfig);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRConfig?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspireApiPIRConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AspireApiConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspireApiPECConfig(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPECConfig?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiConfig.OneOf_Config);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireApiConfig.OneOf_Config);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECConfig?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspireApiPECConfig);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspireApiPECConfig);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiConfig.OneOf_Config);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECConfig?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspireApiPECConfig?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireApiPECConfig?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspireApiPECConfig);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECConfig?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspireApiPECConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AspireApiConfig.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  char *v7;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v5 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in AspireApiConfig.traverse<A>(visitor:)(v0);
  else
    closure #1 in AspireApiConfig.traverse<A>(visitor:)(v0);
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiConfig.OneOf_Config);
  if (!v1)
  {
LABEL_6:
    v7 = (char *)&loc_237CB7C8C
       + 4 * byte_237D59334[*(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireApiConfig(0) + 20) + 8) >> 62];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t closure #1 in AspireApiConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v8 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPIRConfig);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPIRConfig);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiConfig.OneOf_Config);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspireApiConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireApiPECConfig(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v8 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPECConfig);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPECConfig);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiConfig.OneOf_Config);
  __break(1u);
  return result;
}

Swift::Int AspireApiConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiConfig, &lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireApiConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_237D54090;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiConfig()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiConfig()
{
  return AspireApiConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
  return Message.hash(into:)();
}

unint64_t static AspireApiConfigResponse.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static AspireApiConfigResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfigResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiConfigResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for AspireApiKeyStatus(0);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        closure #1 in AspireApiConfigResponse.decodeMessage<A>(decoder:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiConfigResponse.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for AspireApiConfig(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t AspireApiConfigResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = v0;
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for ProtobufString(),
        type metadata accessor for AspireApiConfig(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig), lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig), v2 = v0, result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16)
      || (type metadata accessor for AspireApiKeyStatus(0),
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AspireApiConfigResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AspireApiConfigResponse.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiConfigResponse, &lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
}

uint64_t protocol witness for Message.init() in conformance AspireApiConfigResponse@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a1[1] = v2;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiConfigResponse()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiConfigResponse()
{
  return AspireApiConfigResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiConfigResponse()
{
  return AspireApiConfigResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiConfigResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiConfigResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiConfigResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiConfigResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiConfigResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
  return Message.hash(into:)();
}

unint64_t static AspireApiRequests.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t static AspireApiRequests._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiRequests._protobuf_nameMap, a1);
}

uint64_t AspireApiRequests.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspireApiRequest, &lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
}

uint64_t AspireApiRequests.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AspireApiRequest, &lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest, (void (*)(_QWORD))type metadata accessor for AspireApiRequests);
}

uint64_t static AspireApiRequests.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiRequests) & 1;
}

Swift::Int AspireApiRequests.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiRequests, &lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiRequests()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiRequests(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiRequests.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiRequests(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiRequests.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiRequests()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiRequests@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiRequests._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiRequests()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiRequests()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiRequests(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiRequests) & 1;
}

unint64_t static AspireApiResponses.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t static AspireApiResponses._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiResponses._protobuf_nameMap, a1);
}

uint64_t AspireApiResponses.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspireApiResponse, &lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
}

uint64_t AspireApiResponses.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AspireApiResponse, &lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse, (void (*)(_QWORD))type metadata accessor for AspireApiResponses);
}

uint64_t static AspireApiResponses.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiResponses) & 1;
}

Swift::Int AspireApiResponses.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiResponses, &lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiResponses()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiResponses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiResponses.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiResponses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiResponses.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiResponses()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiResponses@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiResponses._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiResponses()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiResponses()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiResponses(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiResponses) & 1;
}

unint64_t static AspireApiRequest.protoMessageName.getter()
{
  return 0xD000000000000012;
}

uint64_t static AspireApiRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiRequest._protobuf_nameMap, a1);
}

uint64_t AspireApiRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        closure #3 in AspireApiRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in AspireApiRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
    }
  }
  return result;
}

uint64_t closure #2 in AspireApiRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for AspireApiPIRRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRRequest?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    v26 = v13;
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiRequest.OneOf_Request);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireApiRequest.OneOf_Request);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiRequest.OneOf_Request);
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRRequest?);
      outlined init with take of SecretKey((uint64_t)v17, (uint64_t)v9, type metadata accessor for AspireApiPIRRequest);
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v24, type metadata accessor for AspireApiPIRRequest);
      v25(v24, 0, 1, v4);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRRequest?);
  v29 = v36;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v36, &demangling cache variable for type metadata for AspireApiPIRRequest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRRequest?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AspireApiPIRRequest?);
  }
  else
  {
    v30 = v35;
    outlined init with take of SecretKey(v29, v35, type metadata accessor for AspireApiPIRRequest);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRRequest?);
    v31 = v33;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of SecretKey(v30, v31, type metadata accessor for AspireApiPIRRequest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #3 in AspireApiRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for AspireApiPECRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPECRequest?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    v26 = v13;
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiRequest.OneOf_Request);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireApiRequest.OneOf_Request);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECRequest?);
      outlined init with take of SecretKey((uint64_t)v17, (uint64_t)v9, type metadata accessor for AspireApiPECRequest);
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v24, type metadata accessor for AspireApiPECRequest);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiRequest.OneOf_Request);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECRequest?);
  v29 = v36;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v36, &demangling cache variable for type metadata for AspireApiPECRequest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECRequest?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AspireApiPECRequest?);
  }
  else
  {
    v30 = v35;
    outlined init with take of SecretKey(v29, v35, type metadata accessor for AspireApiPECRequest);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECRequest?);
    v31 = v33;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of SecretKey(v30, v31, type metadata accessor for AspireApiPECRequest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t AspireApiRequest.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[1];
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v8 = type metadata accessor for AspireApiRequest(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
      return UnknownStorage.traverse<A>(visitor:)();
    if (swift_getEnumCaseMultiPayload() == 1)
      closure #2 in AspireApiRequest.traverse<A>(visitor:)((uint64_t)v0);
    else
      closure #1 in AspireApiRequest.traverse<A>(visitor:)((uint64_t)v0);
    result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiRequest.OneOf_Request);
    if (!v1)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireApiRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPIRRequest);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPIRRequest);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiRequest.OneOf_Request);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspireApiRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireApiPECRequest(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireApiRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPECRequest);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPECRequest);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiRequest.OneOf_Request);
  __break(1u);
  return result;
}

Swift::Int AspireApiRequest.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiRequest, &lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
}

uint64_t protocol witness for Message.init() in conformance AspireApiRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  v2 = (char *)a2 + *(int *)(a1 + 20);
  v3 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiRequest()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiRequest()
{
  return AspireApiRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, type metadata accessor for AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, type metadata accessor for AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, type metadata accessor for AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
  return Message.hash(into:)();
}

unint64_t static AspireApiResponse.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t static AspireApiResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in AspireApiResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
    }
    else if (result == 1)
    {
      closure #1 in AspireApiResponse.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspireApiPIRResponse(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPIRResponse?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiResponse.OneOf_Response);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRResponse?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspireApiPIRResponse);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspireApiPIRResponse);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRResponse?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspireApiPIRResponse?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRResponse?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireApiPIRResponse?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspireApiPIRResponse);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPIRResponse?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspireApiPIRResponse);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AspireApiResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AspireApiPECResponse(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiPECResponse?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AspireApiResponse.OneOf_Response);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECResponse?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AspireApiPECResponse);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AspireApiPECResponse);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECResponse?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AspireApiPECResponse?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECResponse?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireApiPECResponse?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AspireApiPECResponse);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireApiPECResponse?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AspireApiPECResponse);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AspireApiResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v5 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in AspireApiResponse.traverse<A>(visitor:)(v0);
  else
    closure #1 in AspireApiResponse.traverse<A>(visitor:)(v0);
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiResponse.OneOf_Response);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AspireApiResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AspireApiResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiResponse.OneOf_Response);
  __break(1u);
  return result;
}

uint64_t closure #2 in AspireApiResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AspireApiPECResponse(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AspireApiPECResponse);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPECResponse);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiResponse.OneOf_Response);
  __break(1u);
  return result;
}

Swift::Int AspireApiResponse.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiResponse, &lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
}

uint64_t protocol witness for Message.init() in conformance AspireApiResponse@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiResponse()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiResponse()
{
  return AspireApiResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
  return Message.hash(into:)();
}

unint64_t static AspireApiPIRShardConfig.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t static AspireApiPIRShardConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRShardConfig._protobuf_nameMap, a1);
}

uint64_t AspireApiPIRShardConfig.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for AspireApiPIRShardConfig(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for AspireApiPIRShardConfig(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for AspireApiPIRShardConfig(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireApiPIRShardConfig.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16)
        || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
      {
        result = closure #1 in AspireApiPIRShardConfig.traverse<A>(visitor:)((uint64_t)v0);
        if (!v1)
        {
          closure #2 in AspireApiPIRShardConfig.traverse<A>(visitor:)((uint64_t)v0);
          closure #3 in AspireApiPIRShardConfig.traverse<A>(visitor:)((uint64_t)v0);
          type metadata accessor for AspireApiPIRShardConfig(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiPIRShardConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for AspireApiPIRShardConfig(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 32) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in AspireApiPIRShardConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for AspireApiPIRShardConfig(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 36)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in AspireApiPIRShardConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for AspireApiPIRShardConfig(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  return result;
}

Swift::Int AspireApiPIRShardConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiPIRShardConfig, &lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPIRShardConfig@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  char *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = a1[9];
  v6 = (_QWORD *)((char *)a2 + a1[8]);
  *v6 = 0;
  v6[1] = 0;
  *((_BYTE *)a2 + v5) = 2;
  v7 = (char *)a2 + a1[10];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRShardConfig()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRShardConfig()
{
  return AspireApiPIRShardConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRShardConfig()
{
  return AspireApiPIRShardConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRShardConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRShardConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRShardConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRShardConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRShardConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
  return Message.hash(into:)();
}

unint64_t static AspireApiPIRConfig.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t static AspireApiPIRConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRConfig._protobuf_nameMap, a1);
}

uint64_t AspireApiPIRConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireApiPIRConfig, type metadata accessor for AspireHeEncryptionParameters, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
          goto LABEL_5;
        case 2:
          type metadata accessor for AspireApiPIRShardConfig(0);
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #3 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireApiPIRConfig, type metadata accessor for AspirePirKeywordPirParameters, &lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 5:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 6:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AspireApiPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*v3 + 16))
    {
      type metadata accessor for AspireApiPIRShardConfig(0);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    closure #2 in AspireApiPIRConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (v3[1])
    {
      lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (v3[3])
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    __asm { BR              X10 }
  }
  return result;
}

void sub_237CBBDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0xFF000000000000) == 0 || (dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    type metadata accessor for AspireApiPIRConfig(0);
    UnknownStorage.traverse<A>(visitor:)();
  }
  JUMPOUT(0x237CBBCBCLL);
}

uint64_t closure #1 in AspireApiPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t closure #2 in AspireApiPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
}

Swift::Int AspireApiPIRConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiPIRConfig, &lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRConfig()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
  return Message.hash(into:)();
}

unint64_t static AspireApiPIRRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t static AspireApiPIRRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRRequest._protobuf_nameMap, a1);
}

uint64_t AspireApiPIRRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 2:
          v12 = v11;
          closure #2 in AspireApiPIRRequest.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #3 in AspireApiPIRRequest.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireApiPIRRequest);
          goto LABEL_5;
        case 4:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for AspireApiPIRRequest(0);
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 6:
          v12 = v11;
          closure #3 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireApiPIRRequest, type metadata accessor for AspireApiEvaluationKey, &lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AspireApiPIRRequest.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspireApiPIRRequest(0);
  type metadata accessor for AspirePirEncryptedIndices(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in AspireApiPIRRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in AspireApiPIRRequest.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for AspireApiPIRRequest);
      __asm { BR              X10 }
    }
  }
  return result;
}

uint64_t closure #1 in AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspirePirEncryptedIndices(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirEncryptedIndices);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t closure #3 in AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for AspireApiPIRRequest(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 36) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireApiEvaluationKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiPIRRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireApiEvaluationKey);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireApiEvaluationKey);
}

Swift::Int AspireApiPIRRequest.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiPIRRequest, &lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPIRRequest@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_237D54090;
  UnknownStorage.init()();
  v4 = a2 + a1[7];
  v5 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[8];
  v7 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1[10];
  v9 = (_QWORD *)(a2 + a1[9]);
  *v9 = 0;
  v9[1] = 0;
  v10 = a2 + v8;
  v11 = type metadata accessor for AspireApiEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRRequest()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
  return Message.hash(into:)();
}

unint64_t static AspireApiPIRResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t static AspireApiPIRResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiPIRResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspireHeSerializedCiphertextVec, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
}

uint64_t AspireApiPIRResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AspireHeSerializedCiphertextVec, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec, (void (*)(_QWORD))type metadata accessor for AspireApiPIRResponse);
}

Swift::Int AspireApiPIRResponse.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiPIRResponse, &lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPIRResponse()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPIRResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPIRResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPIRResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPIRResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPIRResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPIRResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPIRResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPIRResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiPIRResponse(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiPIRResponse) & 1;
}

unint64_t static AspireApiPECConfig.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t static AspireApiPECConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECConfig._protobuf_nameMap, a1);
}

uint64_t AspireApiPECConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #3 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireApiPECConfig, type metadata accessor for AspireHeEncryptionParameters, (unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 3:
          closure #3 in AspireApiPECConfig.decodeMessage<A>(decoder:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in AspireApiPECConfig.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AspireApiPECConfig(0);
  type metadata accessor for AspireSimilarityPlaintextPacking(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AspireApiPECConfig.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)v3)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    closure #2 in AspireApiPECConfig.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (*(_DWORD *)(v3 + 8))
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if ((*(_BYTE *)(v3 + 24) & 1) == 0)
    {
      if (*(_QWORD *)(v3 + 16))
      {
        lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
      }
    }
    __asm { BR              X10 }
  }
  return result;
}

void sub_237CBD6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF000000000000) == 0 || (dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v3))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16)
      || (dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v3))
    {
      type metadata accessor for AspireApiPECConfig(0);
      UnknownStorage.traverse<A>(visitor:)();
    }
  }
  JUMPOUT(0x237CBD5C0);
}

uint64_t closure #1 in AspireApiPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t closure #2 in AspireApiPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 44), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
}

Swift::Int AspireApiPECConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiPECConfig, &lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_OWORD *)(a2 + 32) = xmmword_237D54090;
  *(_QWORD *)(a2 + 48) = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 44);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPECConfig()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AspireApiPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AspireApiPECConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AspireApiPECConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPECConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPECConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPECConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPECConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPECConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPECConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
  return Message.hash(into:)();
}

unint64_t static AspireApiPECRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t static AspireApiPECRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECRequest._protobuf_nameMap, a1);
}

uint64_t AspireApiPECRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #3 in AspireApiPIRRequest.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireApiPECRequest);
          goto LABEL_5;
        case 4:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 5:
          v12 = v11;
          closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AspireApiPECRequest, type metadata accessor for AspireApiEvaluationKey, &lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in AspireApiPIRRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #1 in AspireApiPIRConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AspireApiPECRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v5 = v3;
  if (!*(_QWORD *)(*v5 + 16)
    || (result = dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(v5[1] + 16)
      || (type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0),
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
    {
      result = closure #2 in AspireApiPIRRequest.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3, type metadata accessor for AspireApiPECRequest);
      if (!v4)
        __asm { BR              X10 }
    }
  }
  return result;
}

uint64_t closure #2 in AspireApiPIRRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[3] = a4;
  v16[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a5(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v14 + 32), (uint64_t)v9, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v13, type metadata accessor for AspireApiEvaluationKeyMetadata);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireApiEvaluationKeyMetadata);
}

uint64_t closure #2 in AspireApiPECRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireApiEvaluationKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AspireApiPECRequest(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireApiEvaluationKey);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireApiEvaluationKey);
}

Swift::Int AspireApiPECRequest.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiPECRequest, &lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPECRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 8) = v4;
  *(_OWORD *)(a2 + 16) = xmmword_237D54090;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 32);
  v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a2 + *(int *)(a1 + 36);
  v8 = type metadata accessor for AspireApiEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPECRequest()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPECRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPECRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPECRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPECRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPECRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPECRequest()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
  return Message.hash(into:)();
}

unint64_t static AspireApiPECShardResponse.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static AspireApiPECShardResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECShardResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiPECShardResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t AspireApiPECShardResponse.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16)
        || (result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for AspireApiPECShardResponse(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int AspireApiPECShardResponse.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiPECShardResponse, &lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
}

uint64_t protocol witness for Message.init() in conformance AspireApiPECShardResponse@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
  a1[2] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPECShardResponse()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPECShardResponse()
{
  return AspireApiPECShardResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPECShardResponse()
{
  return AspireApiPECShardResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPECShardResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, type metadata accessor for AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPECShardResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECShardResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPECShardResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, type metadata accessor for AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPECShardResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, type metadata accessor for AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
  return Message.hash(into:)();
}

unint64_t static AspireApiPECResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t static AspireApiPECResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECResponse._protobuf_nameMap, a1);
}

uint64_t AspireApiPECResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspireApiPECShardResponse, &lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
}

uint64_t AspireApiPECResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AspireApiPECShardResponse, &lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse, (void (*)(_QWORD))type metadata accessor for AspireApiPECResponse);
}

Swift::Int AspireApiPECResponse.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AspireApiPECResponse, &lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AspireApiPECResponse()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AspireApiPECResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AspireApiPECResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AspireApiPECResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AspireApiPECResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AspireApiPECResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AspireApiPECResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AspireApiPECResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspireApiPECResponse()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AspireApiPECResponse(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AspireApiPECResponse) & 1;
}

uint64_t specialized static AspireApiEvaluationKeyMetadata.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  if (*a1 == *(_QWORD *)a2 && (specialized static Data.== infix(_:_:)(a1[1], a1[2]), (v11 & 1) != 0))
  {
    v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v13 = (char *)a1 + *(int *)(v12 + 24);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, &a2[*(int *)(v12 + 24)], v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AspireApiPECShardResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 8), *(_QWORD **)(a2 + 8))
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0)
  {
    v11 = type metadata accessor for AspireApiPECShardResponse(0);
    v12 = a1 + *(int *)(v11 + 28);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AspireApiPIRShardConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  int v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v31 - v9;
  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || !specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16)))
  {
    goto LABEL_20;
  }
  v11 = (int *)type metadata accessor for AspireApiPIRShardConfig(0);
  v12 = v11[8];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_20;
    goto LABEL_13;
  }
  if (!v16)
    goto LABEL_20;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_13:
    v19 = v11[9];
    v20 = *(unsigned __int8 *)(a1 + v19);
    v21 = *(unsigned __int8 *)(a2 + v19);
    if (v20 != 2)
    {
      if (v21 == 2 || ((((v21 & 1) == 0) ^ v20) & 1) == 0)
        goto LABEL_20;
LABEL_18:
      v22 = v11[10];
      v23 = (_QWORD *)(a1 + v22);
      v24 = *(_BYTE *)(a1 + v22 + 8);
      v25 = (_QWORD *)(a2 + v22);
      v26 = *(unsigned __int8 *)(a2 + v22 + 8);
      if ((v24 & 1) != 0)
      {
        if (!v26)
          goto LABEL_20;
      }
      else
      {
        if (*v23 != *v25)
          LOBYTE(v26) = 1;
        if ((v26 & 1) != 0)
          goto LABEL_20;
      }
      v28 = a1 + v11[7];
      v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v29(v10, v28, v4);
      v29(v8, a2 + v11[7], v4);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      v30 = *(void (**)(char *, uint64_t))(v5 + 8);
      v30(v8, v4);
      v30(v10, v4);
      return v18 & 1;
    }
    if (v21 == 2)
      goto LABEL_18;
LABEL_20:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static AspireApiConfigResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)
  {
    v11 = type metadata accessor for AspireApiConfigResponse(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AspireApiEvaluationKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a1;
  v68 = a2;
  v60 = type metadata accessor for UnknownStorage();
  v58 = *(_QWORD *)(v60 - 8);
  v2 = MEMORY[0x24BDAC7A8](v60);
  v57 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v56 = (char *)&v55 - v4;
  v65 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v62 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v55 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedEvaluationKey?, AspireHeSerializedEvaluationKey?));
  MEMORY[0x24BDAC7A8](v61);
  v66 = (uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v59 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v63 = (uint64_t)&v55 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v64 = (uint64_t)&v55 - v12;
  v13 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (uint64_t *)((char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?));
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (uint64_t *)((char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v55 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v55 - v27;
  v29 = type metadata accessor for AspireApiEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67 + *(int *)(v29 + 20), (uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v68 + *(int *)(v29 + 20), (uint64_t)v26, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v30 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, (uint64_t)v19, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v31((uint64_t)v19, 1, v13) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    if (v31(v30, 1, v13) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (v31(v30, 1, v13) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_9:
    v40 = &demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?);
    v41 = (uint64_t)v19;
LABEL_18:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, v40);
    goto LABEL_19;
  }
  outlined init with take of SecretKey(v30, (uint64_t)v16, type metadata accessor for AspireApiEvaluationKeyMetadata);
  if (*v23 != *v16 || (specialized static Data.== infix(_:_:)(v23[1], v23[2]), (v42 & 1) == 0))
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireApiEvaluationKeyMetadata);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireApiEvaluationKeyMetadata);
    v41 = (uint64_t)v19;
    v40 = &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?;
    goto LABEL_18;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireApiEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireApiEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((v43 & 1) == 0)
    goto LABEL_19;
LABEL_4:
  v32 = v67;
  v33 = v64;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67 + *(int *)(v29 + 24), v64, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v34 = v68;
  v35 = v63;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v68 + *(int *)(v29 + 24), v63, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v36 = v66;
  v37 = v66 + *(int *)(v61 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, v66, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, v37, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  v39 = v65;
  if (v38(v36, 1, v65) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    if (v38(v37, 1, v39) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
LABEL_22:
      v49 = v58;
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
      v51 = v56;
      v52 = v60;
      v50(v56, v32, v60);
      v53 = v57;
      v50(v57, v34, v52);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      v54 = *(void (**)(char *, uint64_t))(v49 + 8);
      v54(v53, v52);
      v54(v51, v52);
      return v45 & 1;
    }
    goto LABEL_17;
  }
  v44 = v59;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, v59, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if (v38(v37, 1, v39) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AspireApiPECConfig(v44, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_17:
    v40 = &demangling cache variable for type metadata for (AspireHeSerializedEvaluationKey?, AspireHeSerializedEvaluationKey?);
    v41 = v36;
    goto LABEL_18;
  }
  v47 = v55;
  outlined init with take of SecretKey(v37, v55, type metadata accessor for AspireHeSerializedEvaluationKey);
  v48 = specialized static AspireHeSerializedEvaluationKey.== infix(_:_:)(v44, v47);
  outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AspireHeSerializedEvaluationKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined destroy of AspireApiPECConfig(v44, type metadata accessor for AspireHeSerializedEvaluationKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((v48 & 1) != 0)
    goto LABEL_22;
LABEL_19:
  v45 = 0;
  return v45 & 1;
}

uint64_t specialized static AspireApiPECConfig.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  char v60;
  void (*v61)(char *, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;

  v76 = a2;
  v3 = type metadata accessor for UnknownStorage();
  v65 = *(_QWORD *)(v3 - 8);
  v66 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v64 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v63 = (char *)&v63 - v6;
  v72 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v70 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v67 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v69);
  v73 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v74 = (uint64_t)&v63 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v71 = (uint64_t)&v63 - v14;
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v63 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v63 - v29;
  v31 = type metadata accessor for AspireApiPECConfig(0);
  v32 = *(int *)(v31 + 40);
  v75 = a1;
  v33 = (uint64_t)a1 + v32;
  v34 = (int *)v31;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v76 + v34[10], (uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v35 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v35, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v36((uint64_t)v21, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v36(v35, 1, v15) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    v37 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    v38 = (uint64_t)v21;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, v37);
    goto LABEL_28;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v36(v35, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AspireApiPECConfig((uint64_t)v25, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  outlined init with take of SecretKey(v35, (uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  v39 = static AspireHeEncryptionParameters.== infix(_:_:)(v25, v18);
  outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AspireApiPECConfig((uint64_t)v25, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v39 & 1) == 0)
    goto LABEL_28;
LABEL_9:
  v41 = v75;
  v40 = v76;
  if (*v75 != *v76)
    goto LABEL_28;
  v42 = v71;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v75 + v34[11], v71, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v43 = v74;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v40 + v34[11], v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v44 = v73;
  v45 = v73 + *(int *)(v69 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v73, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v45, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  v47 = v72;
  if (v46(v44, 1, v72) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    if (v46(v45, 1, v47) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v48 = v68;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, v68, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if (v46(v45, 1, v47) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_15:
    v37 = &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?);
    v38 = v44;
    goto LABEL_7;
  }
  v49 = v67;
  outlined init with take of SecretKey(v45, v67, type metadata accessor for AspireSimilarityPlaintextPacking);
  v50 = static AspireSimilarityPlaintextPacking.== infix(_:_:)(v48, v49);
  outlined destroy of AspireApiPECConfig(v49, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((v50 & 1) == 0)
    goto LABEL_28;
LABEL_17:
  if (*((_DWORD *)v41 + 2) != *((_DWORD *)v40 + 2))
    goto LABEL_28;
  if ((v41[3] & 1) == 0)
  {
    v51 = v41[2];
    if ((v40[3] & 1) != 0)
    {
      if (!v51)
        goto LABEL_25;
      goto LABEL_28;
    }
LABEL_24:
    if (v51 == v40[2])
      goto LABEL_25;
LABEL_28:
    v60 = 0;
    return v60 & 1;
  }
  if ((v40[3] & 1) == 0)
  {
    v51 = 0;
    goto LABEL_24;
  }
LABEL_25:
  specialized static Data.== infix(_:_:)(v41[4], v41[5]);
  if ((v52 & 1) == 0 || !specialized static Array<A>.== infix(_:_:)((_QWORD *)v41[6], (_QWORD *)v40[6]))
    goto LABEL_28;
  v53 = (char *)v41 + v34[9];
  v55 = v65;
  v54 = v66;
  v56 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v57 = v63;
  v56(v63, v53, v66);
  v58 = (char *)v40 + v34[9];
  v59 = v64;
  v56(v64, v58, v54);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  v61 = *(void (**)(char *, uint64_t))(v55 + 8);
  v61(v59, v54);
  v61(v57, v54);
  return v60 & 1;
}

uint64_t specialized static AspireApiKeyStatus.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  char v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v41 - v8;
  v10 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x24BDAC7A8](v46);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v41 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v41 - v21;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_8;
  v23 = a1;
  v24 = a2;
  v25 = v20;
  v41 = v12;
  v42 = v9;
  v43 = v7;
  v26 = type metadata accessor for AspireApiKeyStatus(0);
  v27 = v23;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v23[*(int *)(v26 + 24)], (uint64_t)v22, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v28 = v24;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v24[*(int *)(v26 + 24)], (uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v29 = (uint64_t)&v14[*(int *)(v46 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v29, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  if (v30((uint64_t)v14, 1, v48) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if (v30(v29, 1, v48) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
LABEL_11:
      v36 = v44;
      v35 = v45;
      v37 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
      v38 = v42;
      v37(v42, &v27[*(int *)(v26 + 20)], v45);
      v39 = v43;
      v37(v43, &v28[*(int *)(v26 + 20)], v35);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v40 = *(void (**)(char *, uint64_t))(v36 + 8);
      v40(v39, v35);
      v40(v38, v35);
      return v31 & 1;
    }
    goto LABEL_7;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, v25, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if (v30(v29, 1, v48) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AspireApiPECConfig(v25, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
    goto LABEL_8;
  }
  v33 = (uint64_t)v41;
  outlined init with take of SecretKey(v29, (uint64_t)v41, type metadata accessor for AspireHeEvaluationKeyConfig);
  v34 = static AspireHeEvaluationKeyConfig.== infix(_:_:)(v25, v33);
  outlined destroy of AspireApiPECConfig(v33, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AspireApiPECConfig(v25, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((v34 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v31 = 0;
  return v31 & 1;
}

uint64_t specialized static AspireApiResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response?, AspireApiResponse.OneOf_Response?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v39 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v22, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of SecretKey(v22, v36, type metadata accessor for AspireApiResponse.OneOf_Response);
      v25 = specialized static AspireApiResponse.OneOf_Response.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AspireApiResponse.OneOf_Response);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
      outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireApiResponse.OneOf_Response);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireApiResponse.OneOf_Response);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response?, AspireApiResponse.OneOf_Response?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_8:
  v26 = type metadata accessor for AspireApiResponse(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AspireApiResponse.OneOf_Response.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a2;
  v2 = type metadata accessor for AspireApiPECResponse(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v13 = (uint64_t *)((char *)&v26 - v12);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response, AspireApiResponse.OneOf_Response));
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  outlined init with copy of SecretKey(v26, (uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
  outlined init with copy of SecretKey(v27, v18, type metadata accessor for AspireApiResponse.OneOf_Response);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of SecretKey((uint64_t)v17, (uint64_t)v11, type metadata accessor for AspireApiResponse.OneOf_Response);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SecretKey(v18, (uint64_t)v4, type metadata accessor for AspireApiPECResponse);
      if ((specialized static Array<A>.== infix(_:_:)(*v11, *v4) & 1) != 0)
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
        {
          v19 = type metadata accessor for AspireApiPECResponse;
          outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiPECResponse);
          v20 = (uint64_t)v11;
LABEL_13:
          outlined destroy of AspireApiPECConfig(v20, v19);
          outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
          return 1;
        }
      }
      v24 = type metadata accessor for AspireApiPECResponse;
      outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AspireApiPECResponse);
      v25 = (uint64_t)v11;
LABEL_16:
      outlined destroy of AspireApiPECConfig(v25, v24);
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
      return 0;
    }
    v21 = type metadata accessor for AspireApiPECResponse;
    v22 = (uint64_t)v11;
  }
  else
  {
    outlined init with copy of SecretKey((uint64_t)v17, (uint64_t)v13, type metadata accessor for AspireApiResponse.OneOf_Response);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey(v18, (uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
      if ((specialized static Array<A>.== infix(_:_:)(*v13, *v7) & 1) != 0)
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
        {
          v19 = type metadata accessor for AspireApiPIRResponse;
          outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
          v20 = (uint64_t)v13;
          goto LABEL_13;
        }
      }
      v24 = type metadata accessor for AspireApiPIRResponse;
      outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiPIRResponse);
      v25 = (uint64_t)v13;
      goto LABEL_16;
    }
    v21 = type metadata accessor for AspireApiPIRResponse;
    v22 = (uint64_t)v13;
  }
  outlined destroy of AspireApiPECConfig(v22, v21);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for (AspireApiResponse.OneOf_Response, AspireApiResponse.OneOf_Response));
  return 0;
}

uint64_t specialized static AspireApiPECRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  char v49;
  char v50;
  char v51;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;

  v4 = type metadata accessor for UnknownStorage();
  v74 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v73 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v72 = (char *)&v65 - v7;
  v80 = type metadata accessor for AspireApiEvaluationKey(0);
  v77 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v71 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKey?, AspireApiEvaluationKey?));
  MEMORY[0x24BDAC7A8](v76);
  v81 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v75 = (uint64_t)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v78 = (uint64_t)&v65 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v79 = (uint64_t)&v65 - v15;
  v16 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v82 = (uint64_t *)((char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?));
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v65 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v65 - v29;
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2)
    || (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) == 0)
  {
    goto LABEL_20;
  }
  v69 = v25;
  v70 = v4;
  v31 = type metadata accessor for AspireApiPECRequest(0);
  v32 = *(int *)(v31 + 32);
  v67 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + v32, (uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v66 = v31;
  v33 = *(int *)(v31 + 32);
  v68 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v33, (uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v34 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v34, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v35((uint64_t)v21, 1, v16) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    if (v35(v34, 1, v16) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      goto LABEL_6;
    }
LABEL_12:
    v46 = &demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?);
LABEL_13:
    v47 = (uint64_t)v21;
LABEL_19:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, v46);
    goto LABEL_20;
  }
  v45 = v69;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v69, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (v35(v34, 1, v16) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AspireApiPECConfig((uint64_t)v45, type metadata accessor for AspireApiEvaluationKeyMetadata);
    goto LABEL_12;
  }
  v48 = v82;
  outlined init with take of SecretKey(v34, (uint64_t)v82, type metadata accessor for AspireApiEvaluationKeyMetadata);
  if (*v45 != *v48 || (specialized static Data.== infix(_:_:)(v45[1], v45[2]), (v49 & 1) == 0))
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v48, type metadata accessor for AspireApiEvaluationKeyMetadata);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AspireApiPECConfig((uint64_t)v45, type metadata accessor for AspireApiEvaluationKeyMetadata);
    v47 = (uint64_t)v21;
    v46 = &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?;
    goto LABEL_19;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireApiPECConfig((uint64_t)v48, type metadata accessor for AspireApiEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined destroy of AspireApiPECConfig((uint64_t)v45, type metadata accessor for AspireApiEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if ((v50 & 1) == 0)
    goto LABEL_20;
LABEL_6:
  v36 = v67;
  v37 = v68;
  specialized static Data.== infix(_:_:)(v67[2], v67[3]);
  if ((v38 & 1) != 0)
  {
    v39 = v66;
    v40 = v79;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v36 + *(int *)(v66 + 36), v79, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    v41 = v78;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37 + *(int *)(v39 + 36), v78, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    v21 = v81;
    v42 = (uint64_t)&v81[*(int *)(v76 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, (uint64_t)v81, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v42, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
    v44 = v80;
    if (v43((uint64_t)v21, 1, v80) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      if (v43(v42, 1, v44) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
LABEL_26:
        v56 = v66;
        v57 = (uint64_t)v36 + *(int *)(v66 + 28);
        v58 = v74;
        v59 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
        v60 = v72;
        v61 = v70;
        v59(v72, v57, v70);
        v62 = (uint64_t)v37 + *(int *)(v56 + 28);
        v63 = v73;
        v59(v73, v62, v61);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v51 = dispatch thunk of static Equatable.== infix(_:_:)();
        v64 = *(void (**)(char *, uint64_t))(v58 + 8);
        v64(v63, v61);
        v64(v60, v61);
        return v51 & 1;
      }
      goto LABEL_24;
    }
    v53 = v75;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, v75, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    if (v43(v42, 1, v44) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AspireApiPECConfig(v53, type metadata accessor for AspireApiEvaluationKey);
LABEL_24:
      v46 = &demangling cache variable for type metadata for (AspireApiEvaluationKey?, AspireApiEvaluationKey?);
      goto LABEL_13;
    }
    v54 = v71;
    outlined init with take of SecretKey(v42, v71, type metadata accessor for AspireApiEvaluationKey);
    v55 = specialized static AspireApiEvaluationKey.== infix(_:_:)(v53, v54);
    outlined destroy of AspireApiPECConfig(v54, type metadata accessor for AspireApiEvaluationKey);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined destroy of AspireApiPECConfig(v53, type metadata accessor for AspireApiEvaluationKey);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    if ((v55 & 1) != 0)
      goto LABEL_26;
  }
LABEL_20:
  v51 = 0;
  return v51 & 1;
}

uint64_t specialized static AspireApiRequest.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;

  v4 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v42 = (char *)&v40 - v7;
  v8 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v41 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request?, AspireApiRequest.OneOf_Request?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v40 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v40 - v21;
  v23 = *a1;
  v24 = a1[1];
  v25 = *(_QWORD *)a2;
  v26 = *((_QWORD *)a2 + 1);
  v45 = a2;
  if (v23 == v25 && v24 == v26 || (v27 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v40 = v4;
    v28 = type metadata accessor for AspireApiRequest(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + *(int *)(v28 + 20), (uint64_t)v22, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v45[*(int *)(v28 + 20)], (uint64_t)v20, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v29, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v30((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      if (v30(v29, 1, v8) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
LABEL_11:
        v33 = v44;
        v34 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
        v35 = v42;
        v36 = v40;
        v34(v42, (char *)a1 + *(int *)(v28 + 24), v40);
        v37 = v43;
        v34(v43, &v45[*(int *)(v28 + 24)], v36);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(char *, uint64_t))(v33 + 8);
        v38(v37, v36);
        v38(v35, v36);
        return v27 & 1;
      }
    }
    else
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      if (v30(v29, 1, v8) != 1)
      {
        v31 = v41;
        outlined init with take of SecretKey(v29, v41, type metadata accessor for AspireApiRequest.OneOf_Request);
        v32 = specialized static AspireApiRequest.OneOf_Request.== infix(_:_:)((uint64_t)v17, v31);
        outlined destroy of AspireApiPECConfig(v31, type metadata accessor for AspireApiRequest.OneOf_Request);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
        outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiRequest.OneOf_Request);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
        if ((v32 & 1) != 0)
          goto LABEL_11;
LABEL_12:
        v27 = 0;
        return v27 & 1;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiRequest.OneOf_Request);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request?, AspireApiRequest.OneOf_Request?));
    goto LABEL_12;
  }
  return v27 & 1;
}

uint64_t specialized static AspireApiPIRRequest.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  int *v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  char v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  char v69;
  uint64_t *v70;
  _QWORD *v71;
  _QWORD *v72;
  char v73;
  char v74;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  _QWORD *v89;
  int *v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;

  v105 = type metadata accessor for UnknownStorage();
  v96 = *(_QWORD *)(v105 - 8);
  v4 = MEMORY[0x24BDAC7A8](v105);
  v95 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v94 = (char *)&v89 - v6;
  v7 = type metadata accessor for AspireApiEvaluationKey(0);
  v98 = *(_QWORD *)(v7 - 8);
  v99 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v93 = (uint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKey?, AspireApiEvaluationKey?));
  MEMORY[0x24BDAC7A8](v97);
  v103 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v102 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v100 = (char *)&v89 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v101 = (char *)&v89 - v15;
  v16 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v108 = *(_QWORD *)(v16 - 8);
  v109 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v104 = (_QWORD **)((char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?));
  MEMORY[0x24BDAC7A8](v107);
  v110 = (uint64_t)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v112 = (uint64_t)&v89 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v111 = (uint64_t)&v89 - v25;
  v26 = type metadata accessor for AspirePirEncryptedIndices(0);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v106 = (uint64_t *)((char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirEncryptedIndices?, AspirePirEncryptedIndices?));
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v113 = (uint64_t *)((char *)&v89 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = MEMORY[0x24BDAC7A8](v33);
  v37 = (char *)&v89 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v89 - v38;
  if (*a1 != *a2)
    goto LABEL_33;
  v89 = v22;
  v40 = type metadata accessor for AspireApiPIRRequest(0);
  v41 = *(int *)(v40 + 28);
  v91 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + v41, (uint64_t)v39, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v90 = (int *)v40;
  v42 = *(int *)(v40 + 28);
  v92 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v42, (uint64_t)v37, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v43 = (uint64_t)&v31[*(int *)(v29 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v39, (uint64_t)v31, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37, v43, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v44((uint64_t)v31, 1, v26) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v39, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    if (v44(v43, 1, v26) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      goto LABEL_5;
    }
LABEL_17:
    v66 = &demangling cache variable for type metadata for (AspirePirEncryptedIndices?, AspirePirEncryptedIndices?);
    v67 = (uint64_t)v31;
LABEL_32:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v67, v66);
    goto LABEL_33;
  }
  v65 = v113;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, (uint64_t)v113, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if (v44(v43, 1, v26) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v39, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AspireApiPECConfig((uint64_t)v65, type metadata accessor for AspirePirEncryptedIndices);
    goto LABEL_17;
  }
  v68 = v106;
  outlined init with take of SecretKey(v43, (uint64_t)v106, type metadata accessor for AspirePirEncryptedIndices);
  if ((specialized static Array<A>.== infix(_:_:)(*v65, *v68) & 1) == 0 || v65[1] != v68[1])
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v68, type metadata accessor for AspirePirEncryptedIndices);
    v70 = &demangling cache variable for type metadata for AspirePirEncryptedIndices?;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v39, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AspireApiPECConfig((uint64_t)v65, type metadata accessor for AspirePirEncryptedIndices);
    v67 = (uint64_t)v31;
    goto LABEL_31;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireApiPECConfig((uint64_t)v68, type metadata accessor for AspirePirEncryptedIndices);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v39, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined destroy of AspireApiPECConfig((uint64_t)v65, type metadata accessor for AspirePirEncryptedIndices);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((v69 & 1) == 0)
    goto LABEL_33;
LABEL_5:
  v45 = v90;
  v46 = v91;
  v47 = v111;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v91 + v90[8], v111, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v48 = v92;
  v49 = v112;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v92 + v45[8], v112, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v50 = v110;
  v51 = v110 + *(int *)(v107 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v47, v110, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v49, v51, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v52 = v109;
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
  if (v53(v50, 1, v109) != 1)
  {
    v71 = v89;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v50, (uint64_t)v89, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    if (v53(v51, 1, v52) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v112, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      outlined destroy of AspireApiPECConfig((uint64_t)v71, type metadata accessor for AspireApiEvaluationKeyMetadata);
      goto LABEL_25;
    }
    v72 = v104;
    outlined init with take of SecretKey(v51, (uint64_t)v104, type metadata accessor for AspireApiEvaluationKeyMetadata);
    if (*v71 == *v72)
    {
      specialized static Data.== infix(_:_:)(v71[1], v71[2]);
      if ((v73 & 1) != 0)
      {
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v74 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AspireApiPECConfig((uint64_t)v72, type metadata accessor for AspireApiEvaluationKeyMetadata);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v112, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v111, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        outlined destroy of AspireApiPECConfig((uint64_t)v71, type metadata accessor for AspireApiEvaluationKeyMetadata);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v50, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        if ((v74 & 1) == 0)
          goto LABEL_33;
        goto LABEL_8;
      }
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v72, type metadata accessor for AspireApiEvaluationKeyMetadata);
    v70 = &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v112, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v111, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined destroy of AspireApiPECConfig((uint64_t)v71, type metadata accessor for AspireApiEvaluationKeyMetadata);
    v67 = v50;
LABEL_31:
    v66 = v70;
    goto LABEL_32;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v49, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  if (v53(v51, 1, v52) != 1)
  {
LABEL_25:
    v66 = &demangling cache variable for type metadata for (AspireApiEvaluationKeyMetadata?, AspireApiEvaluationKeyMetadata?);
    v67 = v50;
    goto LABEL_32;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v50, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
LABEL_8:
  specialized static Data.== infix(_:_:)(*((_QWORD *)v46 + 1), *((_QWORD *)v46 + 2));
  if ((v54 & 1) == 0)
    goto LABEL_33;
  v55 = v45[9];
  v56 = (_QWORD *)((char *)v46 + v55);
  v57 = *(_QWORD *)((char *)v46 + v55 + 8);
  v58 = (_QWORD *)((char *)v48 + v55);
  v59 = v58[1];
  if (!v57)
  {
    v61 = (uint64_t)v102;
    v60 = (uint64_t)v103;
    v63 = (uint64_t)v100;
    v62 = (uint64_t)v101;
    if (v59)
      goto LABEL_33;
    goto LABEL_36;
  }
  v61 = (uint64_t)v102;
  v60 = (uint64_t)v103;
  v63 = (uint64_t)v100;
  v62 = (uint64_t)v101;
  if (!v59)
  {
LABEL_33:
    v64 = 0;
    return v64 & 1;
  }
  if (*v56 == *v58 && v57 == v59 || (v64 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_36:
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v46 + v45[10], v62, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v48 + v45[10], v63, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    v76 = v60 + *(int *)(v97 + 48);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v62, v60, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v63, v76, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    v77 = v99;
    v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
    if (v78(v60, 1, v99) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v62, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      if (v78(v76, 1, v77) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v60, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
LABEL_43:
        v81 = (uint64_t)v46 + v45[6];
        v82 = v96;
        v83 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 16);
        v84 = v94;
        v85 = v105;
        v83(v94, v81, v105);
        v86 = (uint64_t)v48 + v45[6];
        v87 = v95;
        v83(v95, v86, v85);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v64 = dispatch thunk of static Equatable.== infix(_:_:)();
        v88 = *(void (**)(char *, uint64_t))(v82 + 8);
        v88(v87, v85);
        v88(v84, v85);
        return v64 & 1;
      }
    }
    else
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v60, v61, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      if (v78(v76, 1, v77) != 1)
      {
        v79 = v93;
        outlined init with take of SecretKey(v76, v93, type metadata accessor for AspireApiEvaluationKey);
        v80 = specialized static AspireApiEvaluationKey.== infix(_:_:)(v61, v79);
        outlined destroy of AspireApiPECConfig(v79, type metadata accessor for AspireApiEvaluationKey);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v62, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
        outlined destroy of AspireApiPECConfig(v61, type metadata accessor for AspireApiEvaluationKey);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v60, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
        if ((v80 & 1) != 0)
          goto LABEL_43;
        goto LABEL_33;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v62, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
      outlined destroy of AspireApiPECConfig(v61, type metadata accessor for AspireApiEvaluationKey);
    }
    v66 = &demangling cache variable for type metadata for (AspireApiEvaluationKey?, AspireApiEvaluationKey?);
    v67 = v60;
    goto LABEL_32;
  }
  return v64 & 1;
}

uint64_t specialized static AspireApiRequest.OneOf_Request.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for AspireApiPECRequest(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (_DWORD *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (_DWORD *)((char *)&v27 - v14);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request, AspireApiRequest.OneOf_Request));
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of SecretKey(a1, (uint64_t)v19, type metadata accessor for AspireApiRequest.OneOf_Request);
  outlined init with copy of SecretKey(a2, v20, type metadata accessor for AspireApiRequest.OneOf_Request);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of SecretKey((uint64_t)v19, (uint64_t)v13, type metadata accessor for AspireApiRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SecretKey(v20, (uint64_t)v6, type metadata accessor for AspireApiPECRequest);
      v21 = specialized static AspireApiPECRequest.== infix(_:_:)(v13, v6);
      outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiPECRequest);
      v22 = (uint64_t)v13;
      v23 = type metadata accessor for AspireApiPECRequest;
LABEL_9:
      outlined destroy of AspireApiPECConfig(v22, v23);
      outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for AspireApiRequest.OneOf_Request);
      return v21 & 1;
    }
    v24 = type metadata accessor for AspireApiPECRequest;
    v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of SecretKey((uint64_t)v19, (uint64_t)v15, type metadata accessor for AspireApiRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey(v20, (uint64_t)v9, type metadata accessor for AspireApiPIRRequest);
      v21 = specialized static AspireApiPIRRequest.== infix(_:_:)(v15, v9);
      outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireApiPIRRequest);
      v22 = (uint64_t)v15;
      v23 = type metadata accessor for AspireApiPIRRequest;
      goto LABEL_9;
    }
    v24 = type metadata accessor for AspireApiPIRRequest;
    v25 = (uint64_t)v15;
  }
  outlined destroy of AspireApiPECConfig(v25, v24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for (AspireApiRequest.OneOf_Request, AspireApiRequest.OneOf_Request));
  v21 = 0;
  return v21 & 1;
}

uint64_t specialized static AspireApiConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v40 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v40 - 8);
  v4 = MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v41 = (char *)&v39 - v6;
  v7 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v44 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v39 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v39 - v20;
  v45 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v39 - v20, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v46 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v22, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    if (v23(v22, 1, v7) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  if (v23(v22, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireApiConfig.OneOf_Config);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config?, AspireApiConfig.OneOf_Config?));
LABEL_10:
    v36 = 0;
    return v36 & 1;
  }
  v24 = v44;
  outlined init with take of SecretKey(v22, v44, type metadata accessor for AspireApiConfig.OneOf_Config);
  v25 = specialized static AspireApiConfig.OneOf_Config.== infix(_:_:)((uint64_t)v16, v24);
  outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  if ((v25 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v26 = type metadata accessor for AspireApiConfig(0);
  v28 = v45;
  v27 = v46;
  specialized static Data.== infix(_:_:)(*(_QWORD *)(v45 + *(int *)(v26 + 20)), *(_QWORD *)(v45 + *(int *)(v26 + 20) + 8));
  if ((v29 & 1) == 0)
    goto LABEL_10;
  v30 = v28 + *(int *)(v26 + 24);
  v31 = v43;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v34 = v40;
  v33 = v41;
  v32(v41, v30, v40);
  v35 = v42;
  v32(v42, v27 + *(int *)(v26 + 24), v34);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37 = *(void (**)(char *, uint64_t))(v31 + 8);
  v37(v35, v34);
  v37(v33, v34);
  return v36 & 1;
}

uint64_t specialized static AspireApiPIRConfig.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v61 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v60 = (char *)&v59 - v5;
  v70 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v64 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v72 = (uint64_t)&v59 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v59 - v13;
  v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v59 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v59 - v28;
  v30 = type metadata accessor for AspireApiPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v73 + *(int *)(v30 + 36), (uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v68 = v30;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v74 + *(int *)(v30 + 36), (uint64_t)v27, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, v33);
    goto LABEL_34;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  outlined init with take of SecretKey(v31, (uint64_t)v17, type metadata accessor for AspireHeEncryptionParameters);
  v35 = static AspireHeEncryptionParameters.== infix(_:_:)(v24, v17);
  outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v35 & 1) == 0)
    goto LABEL_34;
LABEL_9:
  v37 = v73;
  v36 = v74;
  if ((specialized static Array<A>.== infix(_:_:)(*v73, *v74) & 1) == 0)
    goto LABEL_34;
  v39 = v68;
  v38 = v69;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37 + *(int *)(v68 + 40), v69, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v40 = v72;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v36 + *(int *)(v39 + 40), v72, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v41 = v71;
  v42 = v71 + *(int *)(v66 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v71, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, v42, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v44 = v70;
  if (v43(v41, 1, v70) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    if (v43(v42, 1, v44) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  v47 = v65;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v65, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if (v43(v42, 1, v44) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AspirePirKeywordPirParameters);
LABEL_20:
    v33 = &demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?);
    v34 = v41;
    goto LABEL_7;
  }
  v48 = v64;
  outlined init with take of SecretKey(v42, v64, type metadata accessor for AspirePirKeywordPirParameters);
  if (*(_QWORD *)v47 != *(_QWORD *)v48 || *(unsigned __int8 *)(v47 + 8) != *(unsigned __int8 *)(v48 + 8))
  {
    outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspirePirKeywordPirParameters);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AspirePirKeywordPirParameters);
    v34 = v41;
    v33 = &demangling cache variable for type metadata for AspirePirKeywordPirParameters?;
    goto LABEL_7;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((v49 & 1) == 0)
    goto LABEL_34;
LABEL_13:
  v45 = v37[1];
  v46 = v36[1];
  if (*((_BYTE *)v36 + 16) != 1)
  {
    if (v45 != v46)
      goto LABEL_34;
    goto LABEL_31;
  }
  if (!v46)
  {
    if (!v45)
      goto LABEL_31;
    goto LABEL_34;
  }
  if (v46 != 1)
  {
    if (v45 == 2)
      goto LABEL_31;
LABEL_34:
    v56 = 0;
    return v56 & 1;
  }
  if (v45 != 1)
    goto LABEL_34;
LABEL_31:
  if (v37[3] != v36[3])
    goto LABEL_34;
  specialized static Data.== infix(_:_:)(v37[4], v37[5]);
  if ((v50 & 1) == 0)
    goto LABEL_34;
  v52 = v62;
  v51 = v63;
  v53 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  v54 = v60;
  v53(v60, (char *)v37 + *(int *)(v39 + 32), v63);
  v55 = v61;
  v53(v61, (char *)v36 + *(int *)(v39 + 32), v51);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  v57 = *(void (**)(char *, uint64_t))(v52 + 8);
  v57(v55, v51);
  v57(v54, v51);
  return v56 & 1;
}

uint64_t specialized static AspireApiConfig.OneOf_Config.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for AspireApiPECConfig(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for AspireApiPIRConfig(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v27 - v14);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config, AspireApiConfig.OneOf_Config));
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of SecretKey(a1, (uint64_t)v19, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined init with copy of SecretKey(a2, v20, type metadata accessor for AspireApiConfig.OneOf_Config);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of SecretKey((uint64_t)v19, (uint64_t)v13, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SecretKey(v20, (uint64_t)v6, type metadata accessor for AspireApiPECConfig);
      v21 = specialized static AspireApiPECConfig.== infix(_:_:)(v13, v6);
      outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspireApiPECConfig);
      v22 = (uint64_t)v13;
      v23 = type metadata accessor for AspireApiPECConfig;
LABEL_9:
      outlined destroy of AspireApiPECConfig(v22, v23);
      outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for AspireApiConfig.OneOf_Config);
      return v21 & 1;
    }
    v24 = type metadata accessor for AspireApiPECConfig;
    v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of SecretKey((uint64_t)v19, (uint64_t)v15, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey(v20, (uint64_t)v9, type metadata accessor for AspireApiPIRConfig);
      v21 = specialized static AspireApiPIRConfig.== infix(_:_:)(v15, v9);
      outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireApiPIRConfig);
      v22 = (uint64_t)v15;
      v23 = type metadata accessor for AspireApiPIRConfig;
      goto LABEL_9;
    }
    v24 = type metadata accessor for AspireApiPIRConfig;
    v25 = (uint64_t)v15;
  }
  outlined destroy of AspireApiPECConfig(v25, v24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for (AspireApiConfig.OneOf_Config, AspireApiConfig.OneOf_Config));
  v21 = 0;
  return v21 & 1;
}

uint64_t type metadata accessor for AspireApiConfigResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiConfigResponse);
}

uint64_t type metadata accessor for AspireApiResponses(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiResponses);
}

uint64_t type metadata accessor for AspireApiResponse.OneOf_Response(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiResponse.OneOf_Response);
}

uint64_t type metadata accessor for AspireApiPIRResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPIRResponse);
}

uint64_t type metadata accessor for AspireApiPECResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPECResponse);
}

uint64_t type metadata accessor for AspireApiResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiResponse);
}

uint64_t type metadata accessor for AspireApiPECShardResponse(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiPECShardResponse);
}

uint64_t type metadata accessor for AspireApiEmpty(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspireApiEmpty);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiEmpty()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, type metadata accessor for AspireApiEmpty, (uint64_t)&protocol conformance descriptor for AspireApiEmpty);
}

uint64_t base witness table accessor for Message in AspireApiEmpty()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, type metadata accessor for AspireApiEmpty, (uint64_t)&protocol conformance descriptor for AspireApiEmpty);
}

uint64_t base witness table accessor for Hashable in AspireApiEmpty()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, type metadata accessor for AspireApiEmpty, (uint64_t)&protocol conformance descriptor for AspireApiEmpty);
}

uint64_t base witness table accessor for Equatable in AspireApiEmpty()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEmpty and conformance AspireApiEmpty, type metadata accessor for AspireApiEmpty, (uint64_t)&protocol conformance descriptor for AspireApiEmpty);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Message in AspireApiEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Hashable in AspireApiEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Equatable in AspireApiEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiKeyStatus()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
}

uint64_t base witness table accessor for Message in AspireApiKeyStatus()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
}

uint64_t base witness table accessor for Hashable in AspireApiKeyStatus()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
}

uint64_t base witness table accessor for Equatable in AspireApiKeyStatus()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiEvaluationKeys()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
}

uint64_t base witness table accessor for Message in AspireApiEvaluationKeys()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
}

uint64_t base witness table accessor for Hashable in AspireApiEvaluationKeys()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
}

uint64_t base witness table accessor for Equatable in AspireApiEvaluationKeys()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
}

uint64_t base witness table accessor for Message in AspireApiEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
}

uint64_t base witness table accessor for Hashable in AspireApiEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
}

uint64_t base witness table accessor for Equatable in AspireApiEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiConfigRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, type metadata accessor for AspireApiConfigRequest, (uint64_t)&protocol conformance descriptor for AspireApiConfigRequest);
}

uint64_t base witness table accessor for Message in AspireApiConfigRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, type metadata accessor for AspireApiConfigRequest, (uint64_t)&protocol conformance descriptor for AspireApiConfigRequest);
}

uint64_t base witness table accessor for Hashable in AspireApiConfigRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, type metadata accessor for AspireApiConfigRequest, (uint64_t)&protocol conformance descriptor for AspireApiConfigRequest);
}

uint64_t base witness table accessor for Equatable in AspireApiConfigRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, type metadata accessor for AspireApiConfigRequest, (uint64_t)&protocol conformance descriptor for AspireApiConfigRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
}

uint64_t base witness table accessor for Message in AspireApiConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
}

uint64_t base witness table accessor for Hashable in AspireApiConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
}

uint64_t base witness table accessor for Equatable in AspireApiConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiConfigResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
}

uint64_t base witness table accessor for Message in AspireApiConfigResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiConfigResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiConfigResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiRequests()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
}

uint64_t base witness table accessor for Message in AspireApiRequests()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
}

uint64_t base witness table accessor for Hashable in AspireApiRequests()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
}

uint64_t base witness table accessor for Equatable in AspireApiRequests()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiResponses()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
}

uint64_t base witness table accessor for Message in AspireApiResponses()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
}

uint64_t base witness table accessor for Hashable in AspireApiResponses()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
}

uint64_t base witness table accessor for Equatable in AspireApiResponses()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, type metadata accessor for AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
}

uint64_t base witness table accessor for Message in AspireApiRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, type metadata accessor for AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
}

uint64_t base witness table accessor for Hashable in AspireApiRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, type metadata accessor for AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
}

uint64_t base witness table accessor for Equatable in AspireApiRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, type metadata accessor for AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
}

uint64_t base witness table accessor for Message in AspireApiResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRShardConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
}

uint64_t base witness table accessor for Message in AspireApiPIRShardConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRShardConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRShardConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRShardConfig and conformance AspireApiPIRShardConfig, type metadata accessor for AspireApiPIRShardConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRShardConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
}

uint64_t base witness table accessor for Message in AspireApiPIRConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRConfig and conformance AspireApiPIRConfig, type metadata accessor for AspireApiPIRConfig, (uint64_t)&protocol conformance descriptor for AspireApiPIRConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
}

uint64_t base witness table accessor for Message in AspireApiPIRRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRRequest and conformance AspireApiPIRRequest, type metadata accessor for AspireApiPIRRequest, (uint64_t)&protocol conformance descriptor for AspireApiPIRRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPIRResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
}

uint64_t base witness table accessor for Message in AspireApiPIRResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiPIRResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiPIRResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPECConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
}

uint64_t base witness table accessor for Message in AspireApiPECConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
}

uint64_t base witness table accessor for Hashable in AspireApiPECConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
}

uint64_t base witness table accessor for Equatable in AspireApiPECConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECConfig and conformance AspireApiPECConfig, type metadata accessor for AspireApiPECConfig, (uint64_t)&protocol conformance descriptor for AspireApiPECConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPECRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
}

uint64_t base witness table accessor for Message in AspireApiPECRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
}

uint64_t base witness table accessor for Hashable in AspireApiPECRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
}

uint64_t base witness table accessor for Equatable in AspireApiPECRequest()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, type metadata accessor for AspireApiPECRequest, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPECShardResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, type metadata accessor for AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
}

uint64_t base witness table accessor for Message in AspireApiPECShardResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, type metadata accessor for AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiPECShardResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, type metadata accessor for AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiPECShardResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, type metadata accessor for AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AspireApiPECResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
}

uint64_t base witness table accessor for Message in AspireApiPECResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
}

uint64_t base witness table accessor for Hashable in AspireApiPECResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
}

uint64_t base witness table accessor for Equatable in AspireApiPECResponse()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
}

uint64_t sub_237CC4544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiKeyStatus.keyConfig : AspireApiKeyStatus(a1, a2, a3, a4, type metadata accessor for AspireHeEvaluationKeyConfig, type metadata accessor for AspireApiKeyStatus, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t sub_237CC457C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiKeyStatus.keyConfig : AspireApiKeyStatus(a1, a2, a3, a4, type metadata accessor for AspireHeSerializedEvaluationKey, type metadata accessor for AspireApiEvaluationKey, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
}

uint64_t sub_237CC45A8@<X0>(uint64_t a1@<X8>)
{
  return AspireApiConfig.pirConfig.getter(a1);
}

uint64_t sub_237CC45C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AspireApiPIRConfig, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?, type metadata accessor for AspireApiConfig.OneOf_Config);
}

uint64_t sub_237CC45F8@<X0>(uint64_t a1@<X8>)
{
  return AspireApiConfig.pecConfig.getter(a1);
}

uint64_t sub_237CC4618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AspireApiPECConfig, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?, type metadata accessor for AspireApiConfig.OneOf_Config);
}

uint64_t sub_237CC4648@<X0>(uint64_t a1@<X8>)
{
  return AspireApiRequest.pirRequest.getter(a1);
}

uint64_t sub_237CC4668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiRequest.pirRequest : AspireApiRequest(a1, a2, a3, a4, type metadata accessor for AspireApiPIRRequest);
}

uint64_t sub_237CC4688@<X0>(uint64_t a1@<X8>)
{
  return AspireApiRequest.pecRequest.getter(a1);
}

uint64_t sub_237CC46A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiRequest.pirRequest : AspireApiRequest(a1, a2, a3, a4, type metadata accessor for AspireApiPECRequest);
}

uint64_t sub_237CC46CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AspireApiPIRResponse, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?, type metadata accessor for AspireApiResponse.OneOf_Response);
}

uint64_t sub_237CC4700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AspireApiPECResponse, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?, type metadata accessor for AspireApiResponse.OneOf_Response);
}

uint64_t sub_237CC4738@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for AspireApiPIRShardConfig(0);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 36)) & 1;
  return result;
}

uint64_t sub_237CC4770(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for AspireApiPIRShardConfig(0);
  *(_BYTE *)(a2 + *(int *)(result + 36)) = v3;
  return result;
}

uint64_t sub_237CC47A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  result = type metadata accessor for AspireApiPIRShardConfig(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 40));
  if (*((_BYTE *)v5 + 8))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t sub_237CC47E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for AspireApiPIRShardConfig(0);
  v5 = a2 + *(int *)(result + 40);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_237CC481C@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPIRConfig.encryptionParameters.getter(a1);
}

uint64_t sub_237CC483C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRConfig.encryptionParameters : AspireApiPIRConfig(a1, a2, a3, a4, type metadata accessor for AspireHeEncryptionParameters, type metadata accessor for AspireApiPIRConfig, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t sub_237CC486C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRConfig.keywordPirParams : AMDPbPIRConfig(a1, a2, a3, a4, type metadata accessor for AspirePirKeywordPirParameters, type metadata accessor for AspireApiPIRConfig, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t sub_237CC48A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(a1, type metadata accessor for AspireApiPIRRequest, a2);
}

uint64_t sub_237CC48BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(a1, a2, a3, a4, type metadata accessor for AspireApiPIRRequest);
}

uint64_t sub_237CC48E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRConfig.keywordPirParams : AMDPbPIRConfig(a1, a2, a3, a4, type metadata accessor for AspireApiEvaluationKey, type metadata accessor for AspireApiPIRRequest, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

uint64_t sub_237CC4910@<X0>(uint64_t a1@<X8>)
{
  return AspireApiPECConfig.encryptionParameters.getter(a1);
}

uint64_t sub_237CC4930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRConfig.keywordPirParams : AMDPbPIRConfig(a1, a2, a3, a4, type metadata accessor for AspireHeEncryptionParameters, type metadata accessor for AspireApiPECConfig, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t sub_237CC4964@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(a1, type metadata accessor for AspireApiPECRequest, a2);
}

uint64_t sub_237CC4980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRRequest.evaluationKeyMetadata : AspireApiPIRRequest(a1, a2, a3, a4, type metadata accessor for AspireApiPECRequest);
}

uint64_t sub_237CC49A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AspireApiPIRConfig.encryptionParameters : AspireApiPIRConfig(a1, a2, a3, a4, type metadata accessor for AspireApiEvaluationKey, type metadata accessor for AspireApiPECRequest, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
}

uint64_t getEnumTagSinglePayload for AspireApiEmpty()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CC49D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AspireApiEmpty()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CC4A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t getEnumTagSinglePayload for AspireApiEvaluationKeyMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CC4A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiEvaluationKeyMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CC4B00(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspireApiEvaluationKeyMetadata()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiKeyStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v32;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[8] = v14[8];
      v19 = *(int *)(v15 + 24);
      v20 = &v13[v19];
      v21 = &v14[v19];
      swift_bridgeObjectRetain();
      v11(v20, v21, v10);
      v22 = *(int *)(v15 + 28);
      v23 = &v13[v22];
      v24 = &v14[v22];
      v25 = type metadata accessor for AspireHeEncryptionParameters(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        *v23 = *v24;
        v28 = *((_QWORD *)v24 + 3);
        *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
        *((_QWORD *)v23 + 3) = v28;
        *((_BYTE *)v23 + 32) = *((_BYTE *)v24 + 32);
        *((_QWORD *)v23 + 5) = *((_QWORD *)v24 + 5);
        *((_BYTE *)v23 + 48) = *((_BYTE *)v24 + 48);
        *((_QWORD *)v23 + 7) = *((_QWORD *)v24 + 7);
        *((_BYTE *)v23 + 64) = *((_BYTE *)v24 + 64);
        v29 = *(int *)(v25 + 40);
        v32 = (char *)v23 + v29;
        v30 = (char *)v24 + v29;
        swift_bridgeObjectRetain();
        v11(v32, v30, v10);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AspireApiKeyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 24), v5);
    v9 = v6 + *(int *)(v7 + 28);
    v10 = type metadata accessor for AspireHeEncryptionParameters(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 40), v5);
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AspireApiKeyStatus(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v30;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v17 = *(int *)(v14 + 24);
    v18 = &v12[v17];
    v19 = &v13[v17];
    swift_bridgeObjectRetain();
    v10(v18, v19, v9);
    v20 = *(int *)(v14 + 28);
    v21 = &v12[v20];
    v22 = &v13[v20];
    v23 = type metadata accessor for AspireHeEncryptionParameters(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *v21 = *v22;
      v26 = *((_QWORD *)v22 + 3);
      *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
      *((_QWORD *)v21 + 3) = v26;
      *((_BYTE *)v21 + 32) = *((_BYTE *)v22 + 32);
      *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
      *((_BYTE *)v21 + 48) = *((_BYTE *)v22 + 48);
      *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
      *((_BYTE *)v21 + 64) = *((_BYTE *)v22 + 64);
      v27 = *(int *)(v23 + 40);
      v30 = (char *)v21 + v27;
      v28 = (char *)v22 + v27;
      swift_bridgeObjectRetain();
      v10(v30, v28, v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for AspireApiKeyStatus(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(uint64_t, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 8) = v14[8];
      v11((char *)(v13 + *(int *)(v15 + 24)), &v14[*(int *)(v15 + 24)], v9);
      v32 = *(int *)(v15 + 28);
      v33 = v13 + v32;
      v34 = &v14[v32];
      v35 = type metadata accessor for AspireHeEncryptionParameters(0);
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      v38 = v37(v33, 1, v35);
      v39 = v37((uint64_t)v34, 1, v35);
      if (v38)
      {
        if (!v39)
        {
          *(_QWORD *)v33 = *(_QWORD *)v34;
          *(_QWORD *)(v33 + 8) = *((_QWORD *)v34 + 1);
          *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
          v40 = *((_QWORD *)v34 + 3);
          *(_BYTE *)(v33 + 32) = v34[32];
          *(_QWORD *)(v33 + 24) = v40;
          v41 = *((_QWORD *)v34 + 5);
          *(_BYTE *)(v33 + 48) = v34[48];
          *(_QWORD *)(v33 + 40) = v41;
          v42 = *((_QWORD *)v34 + 7);
          *(_BYTE *)(v33 + 64) = v34[64];
          *(_QWORD *)(v33 + 56) = v42;
          v43 = *(int *)(v35 + 40);
          v44 = v33 + v43;
          v45 = &v34[v43];
          v46 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          v46(v44, v45, v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          *(_QWORD *)v33 = *(_QWORD *)v34;
          *(_QWORD *)(v33 + 8) = *((_QWORD *)v34 + 1);
          *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v53 = *((_QWORD *)v34 + 3);
          *(_BYTE *)(v33 + 32) = v34[32];
          *(_QWORD *)(v33 + 24) = v53;
          v54 = *((_QWORD *)v34 + 5);
          *(_BYTE *)(v33 + 48) = v34[48];
          *(_QWORD *)(v33 + 40) = v54;
          v55 = *((_QWORD *)v34 + 7);
          *(_BYTE *)(v33 + 64) = v34[64];
          *(_QWORD *)(v33 + 56) = v55;
          v11((char *)(v33 + *(int *)(v35 + 40)), &v34[*(int *)(v35 + 40)], v9);
          return a1;
        }
        outlined destroy of AspireApiPECConfig(v33, type metadata accessor for AspireHeEncryptionParameters);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                  - 8)
                      + 64);
      v30 = (void *)v33;
      v31 = v34;
      goto LABEL_8;
    }
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?)
                                - 8)
                    + 64);
    v30 = (void *)v13;
    v31 = v14;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  v19 = *(int *)(v15 + 24);
  v20 = v13 + v19;
  v21 = &v14[v19];
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  v23 = *(int *)(v15 + 28);
  v24 = (_QWORD *)(v13 + v23);
  v25 = &v14[v23];
  v26 = type metadata accessor for AspireHeEncryptionParameters(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *v24 = *(_QWORD *)v25;
    v24[1] = *((_QWORD *)v25 + 1);
    v24[2] = *((_QWORD *)v25 + 2);
    v47 = *((_QWORD *)v25 + 3);
    *((_BYTE *)v24 + 32) = v25[32];
    v24[3] = v47;
    v48 = *((_QWORD *)v25 + 5);
    *((_BYTE *)v24 + 48) = v25[48];
    v24[5] = v48;
    v49 = *((_QWORD *)v25 + 7);
    *((_BYTE *)v24 + 64) = v25[64];
    v24[7] = v49;
    v50 = *(int *)(v26 + 40);
    v56 = (char *)v24 + v50;
    v51 = &v25[v50];
    swift_bridgeObjectRetain();
    v22((uint64_t)v56, v51, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_QWORD *initializeWithTake for AspireApiKeyStatus(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v10(&v12[*(int *)(v14 + 24)], &v13[*(int *)(v14 + 24)], v9);
    v17 = *(int *)(v14 + 28);
    v18 = &v12[v17];
    v19 = &v13[v17];
    v20 = type metadata accessor for AspireHeEncryptionParameters(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      v23 = *((_QWORD *)v19 + 3);
      *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
      *((_QWORD *)v18 + 3) = v23;
      *((_BYTE *)v18 + 32) = *((_BYTE *)v19 + 32);
      *((_QWORD *)v18 + 5) = *((_QWORD *)v19 + 5);
      *((_BYTE *)v18 + 48) = *((_BYTE *)v19 + 48);
      *((_QWORD *)v18 + 7) = *((_QWORD *)v19 + 7);
      *((_BYTE *)v18 + 64) = *((_BYTE *)v19 + 64);
      v10((char *)v18 + *(int *)(v20 + 40), (char *)v19 + *(int *)(v20 + 40), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for AspireApiKeyStatus(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 8) = v14[8];
      v11((char *)(v13 + *(int *)(v15 + 24)), &v14[*(int *)(v15 + 24)], v9);
      v29 = *(int *)(v15 + 28);
      v30 = v13 + v29;
      v31 = &v14[v29];
      v32 = type metadata accessor for AspireHeEncryptionParameters(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          v37 = *((_QWORD *)v31 + 3);
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
          *(_QWORD *)(v30 + 24) = v37;
          *(_BYTE *)(v30 + 32) = v31[32];
          *(_BYTE *)(v30 + 48) = v31[48];
          *(_QWORD *)(v30 + 40) = *((_QWORD *)v31 + 5);
          *(_QWORD *)(v30 + 56) = *((_QWORD *)v31 + 7);
          *(_BYTE *)(v30 + 64) = v31[64];
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v30 + *(int *)(v32 + 40), &v31[*(int *)(v32 + 40)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          return a1;
        }
      }
      else
      {
        if (!v36)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v30 + 24) = *((_QWORD *)v31 + 3);
          *(_BYTE *)(v30 + 32) = v31[32];
          *(_QWORD *)(v30 + 40) = *((_QWORD *)v31 + 5);
          *(_BYTE *)(v30 + 48) = v31[48];
          *(_QWORD *)(v30 + 56) = *((_QWORD *)v31 + 7);
          *(_BYTE *)(v30 + 64) = v31[64];
          v11((char *)(v30 + *(int *)(v32 + 40)), &v31[*(int *)(v32 + 40)], v9);
          return a1;
        }
        outlined destroy of AspireApiPECConfig(v30, type metadata accessor for AspireHeEncryptionParameters);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                  - 8)
                      + 64);
      v27 = (void *)v30;
      v28 = v31;
      goto LABEL_8;
    }
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?)
                                - 8)
                    + 64);
    v27 = (void *)v13;
    v28 = v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v19(v13 + *(int *)(v15 + 24), &v14[*(int *)(v15 + 24)], v9);
  v20 = *(int *)(v15 + 28);
  v21 = (_OWORD *)(v13 + v20);
  v22 = &v14[v20];
  v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *v21 = *(_OWORD *)v22;
    v38 = *((_QWORD *)v22 + 3);
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
    *((_QWORD *)v21 + 3) = v38;
    *((_BYTE *)v21 + 32) = v22[32];
    *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
    *((_BYTE *)v21 + 48) = v22[48];
    *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
    *((_BYTE *)v21 + 64) = v22[64];
    v19((uint64_t)v21 + *(int *)(v23 + 40), &v22[*(int *)(v23 + 40)], v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiKeyStatus()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CC59D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AspireApiKeyStatus()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CC5A58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for AspireApiKeyStatus()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEvaluationKeyConfig?, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for AspireApiEvaluationKeys()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireApiEvaluationKeys()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiEvaluationKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v56;
  uint64_t v57;
  char *__dst;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(uint64_t *, uint64_t *, uint64_t);
  void (*v63)(char *, char *, uint64_t);
  uint64_t *v64;
  uint64_t v65;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v11[1];
      *v10 = *v11;
      v64 = a1;
      v17 = v7;
      v18 = v8;
      v19 = v11[2];
      outlined copy of Data._Representation(v16, v19);
      v10[1] = v16;
      v10[2] = v19;
      v8 = v18;
      v7 = v17;
      a1 = v64;
      v8((_QWORD *)((char *)v10 + *(int *)(v12 + 24)), (_QWORD *)((char *)v11 + *(int *)(v12 + 24)), v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v20 = *(int *)(a3 + 24);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v65 = v24;
      v8((uint64_t *)v21, (uint64_t *)v22, v7);
      v26 = *(int *)(v23 + 20);
      v27 = &v21[v26];
      v28 = &v22[v26];
      v29 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v27 = *(_QWORD *)v28;
        v32 = *(int *)(v29 + 20);
        v62 = v8;
        v33 = &v27[v32];
        v34 = &v28[v32];
        swift_bridgeObjectRetain();
        v35 = v33;
        v8 = v62;
        v62((uint64_t *)v35, (uint64_t *)v34, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      v36 = *(int *)(v23 + 24);
      v37 = &v21[v36];
      v38 = &v22[v36];
      v39 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        v61 = v40;
        v8((uint64_t *)v37, (uint64_t *)v38, v7);
        v42 = *(int *)(v39 + 20);
        v43 = &v37[v42];
        v63 = (void (*)(char *, char *, uint64_t))v8;
        v44 = &v38[v42];
        v45 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
          v48 = v61;
        }
        else
        {
          v59 = v46;
          v63(v43, v44, v7);
          v49 = *(int *)(v45 + 20);
          v60 = v43;
          __dst = &v43[v49];
          v50 = &v44[v49];
          v51 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v57 = *(_QWORD *)(v51 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v50, 1, v51))
          {
            v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(__dst, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__dst = *(_QWORD *)v50;
            v53 = *(int *)(v51 + 20);
            v56 = &__dst[v53];
            v54 = &v50[v53];
            swift_bridgeObjectRetain();
            v63(v56, v54, v7);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(__dst, 0, 1, v51);
          }
          v48 = v61;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v45);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v37, 0, 1, v39);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v21, 0, 1, v23);
    }
  }
  return a1;
}

uint64_t destroy for AspireApiEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v18(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
    v18(v5 + *(int *)(v6 + 24), v4);
  }
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v18(v7, v4);
    v10 = v7 + *(int *)(v8 + 20);
    v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      v18(v10 + *(int *)(v11 + 20), v4);
    }
    v12 = v7 + *(int *)(v8 + 24);
    v13 = type metadata accessor for AspireHeSerializedRelinKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
    if (!(_DWORD)result)
    {
      v18(v12, v4);
      v14 = v12 + *(int *)(v13 + 20);
      v15 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15);
      if (!(_DWORD)result)
      {
        v18(v14, v4);
        v16 = v14 + *(int *)(v15 + 20);
        v17 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17);
        if (!(_DWORD)result)
        {
          swift_bridgeObjectRelease();
          return ((uint64_t (*)(uint64_t, uint64_t))v18)(v16 + *(int *)(v17 + 20), v4);
        }
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v54;
  uint64_t v55;
  char *__dst;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v10[1];
    *v9 = *v10;
    v62 = v6;
    v15 = a1;
    v16 = v7;
    v17 = v10[2];
    outlined copy of Data._Representation(v14, v17);
    v9[1] = v14;
    v9[2] = v17;
    v7 = v16;
    a1 = v15;
    v6 = v62;
    v7((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v62);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v18 = *(int *)(a3 + 24);
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v63 = v22;
    v7((uint64_t)v19, (uint64_t)v20, v6);
    v24 = *(int *)(v21 + 20);
    v25 = &v19[v24];
    v26 = &v20[v24];
    v27 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v30 = *(int *)(v27 + 20);
      v60 = v7;
      v31 = &v25[v30];
      v32 = &v26[v30];
      swift_bridgeObjectRetain();
      v33 = v31;
      v7 = v60;
      v60((uint64_t)v33, (uint64_t)v32, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    v34 = *(int *)(v21 + 24);
    v35 = &v19[v34];
    v36 = &v20[v34];
    v37 = type metadata accessor for AspireHeSerializedRelinKey(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v59 = v38;
      v7((uint64_t)v35, (uint64_t)v36, v6);
      v40 = *(int *)(v37 + 20);
      v41 = &v35[v40];
      v61 = (void (*)(char *, char *, uint64_t))v7;
      v42 = &v36[v40];
      v43 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        v46 = v59;
      }
      else
      {
        v57 = v44;
        v61(v41, v42, v6);
        v47 = *(int *)(v43 + 20);
        v58 = v41;
        __dst = &v41[v47];
        v48 = &v42[v47];
        v49 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        v55 = *(_QWORD *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v48, 1, v49))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(__dst, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dst = *(_QWORD *)v48;
          v51 = *(int *)(v49 + 20);
          v54 = &__dst[v51];
          v52 = &v48[v51];
          swift_bridgeObjectRetain();
          v61(v54, v52, v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v49);
        }
        v46 = v59;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v43);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v35, 0, 1, v37);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithCopy for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  int v28;
  int v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  size_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  size_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  int v82;
  int v83;
  void (*v84)(uint64_t, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  int v93;
  int v94;
  void (*v95)(uint64_t, char *, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t);
  int v116;
  int v117;
  uint64_t v118;
  char *v119;
  char *v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  void (*__src)(char *, char *, uint64_t);
  void (*__srcb)(char *, char *, uint64_t);
  char *__srca;
  uint64_t v136;
  uint64_t v137;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v136 = v6;
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2);
  v9 = *(int *)(a3 + 20);
  v137 = a1;
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v17 = *((_QWORD *)v11 + 1);
      v18 = *((_QWORD *)v11 + 2);
      outlined copy of Data._Representation(v17, v18);
      *((_QWORD *)v10 + 1) = v17;
      *((_QWORD *)v10 + 2) = v18;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v10[*(int *)(v12 + 24)], &v11[*(int *)(v12 + 24)], v136);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
      v20 = v137;
      v21 = (void (*)(uint64_t, char *, uint64_t))v8;
      goto LABEL_8;
    }
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  if (v16)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireApiEvaluationKeyMetadata);
    goto LABEL_6;
  }
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v41 = *((_QWORD *)v11 + 1);
  v42 = *((_QWORD *)v11 + 2);
  outlined copy of Data._Representation(v41, v42);
  v43 = *((_QWORD *)v10 + 1);
  v44 = *((_QWORD *)v10 + 2);
  *((_QWORD *)v10 + 1) = v41;
  *((_QWORD *)v10 + 2) = v42;
  outlined consume of Data._Representation(v43, v44);
  v21 = (void (*)(uint64_t, char *, uint64_t))v8;
  ((void (*)(char *, char *, uint64_t))v8)(&v10[*(int *)(v12 + 24)], &v11[*(int *)(v12 + 24)], v136);
  v20 = v137;
LABEL_8:
  v22 = *(int *)(a3 + 24);
  v23 = v20 + v22;
  v24 = (char *)(a2 + v22);
  v25 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27((uint64_t)v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      v30 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
      v30(v23, v24, v136);
      v31 = *(int *)(v25 + 20);
      v32 = (_QWORD *)(v23 + v31);
      v33 = &v24[v31];
      v34 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v35 = *(_QWORD *)(v34 - 8);
      __src = (void (*)(char *, char *, uint64_t))v30;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        *v32 = *(_QWORD *)v33;
        v54 = *(int *)(v34 + 20);
        v130 = (char *)v32 + v54;
        v55 = &v33[v54];
        swift_bridgeObjectRetain();
        v30((uint64_t)v130, v55, v136);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v56 = *(int *)(v25 + 24);
      v57 = (char *)(v23 + v56);
      v58 = &v24[v56];
      v59 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v60 = *(_QWORD *)(v59 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
      {
        v131 = v60;
        __src(v57, v58, v136);
        v64 = *(int *)(v59 + 20);
        v65 = &v57[v64];
        v66 = &v58[v64];
        v67 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v68 = *(_QWORD *)(v67 - 8);
        v20 = v137;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
          v70 = v131;
        }
        else
        {
          __src(v65, v66, v136);
          v74 = *(int *)(v67 + 20);
          v127 = v65;
          v75 = &v65[v74];
          v76 = &v66[v74];
          v77 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v126 = *(_QWORD *)(v77 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v76, 1, v77))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v75 = *(_QWORD *)v76;
            v101 = *(int *)(v77 + 20);
            v125 = &v75[v101];
            v102 = &v76[v101];
            swift_bridgeObjectRetain();
            __src(v125, v102, v136);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v75, 0, 1, v77);
          }
          v20 = v137;
          v70 = v131;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v127, 0, 1, v67);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v57, 0, 1, v59);
        goto LABEL_49;
      }
      v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                  - 8)
                      + 64);
      v62 = v57;
      v63 = v58;
      goto LABEL_24;
    }
    goto LABEL_14;
  }
  if (!v29)
  {
    v21(v23, v24, v136);
    v45 = *(int *)(v25 + 20);
    v46 = (_QWORD *)(v23 + v45);
    v47 = &v24[v45];
    v48 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    v49 = *(_QWORD *)(v48 - 8);
    v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
    v129 = v46;
    LODWORD(v46) = v50((char *)v46, 1, v48);
    v51 = v50(v47, 1, v48);
    if ((_DWORD)v46)
    {
      if (v51)
      {
        v52 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                    - 8)
                        + 64);
        v53 = v129;
LABEL_30:
        memcpy(v53, v47, v52);
        goto LABEL_35;
      }
      *v129 = *(_QWORD *)v47;
      v71 = *(int *)(v48 + 20);
      v72 = (char *)v129 + v71;
      v73 = &v47[v71];
      __srcb = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      __srcb(v72, v73, v136);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v129, 0, 1, v48);
    }
    else
    {
      if (v51)
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v129, type metadata accessor for AspireHeSerializedGaloisKey);
        v52 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                    - 8)
                        + 64);
        v53 = v129;
        goto LABEL_30;
      }
      *v129 = *(_QWORD *)v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v8)((char *)v129 + *(int *)(v48 + 20), &v47[*(int *)(v48 + 20)], v136);
    }
LABEL_35:
    v79 = *(int *)(v25 + 24);
    v23 += v79;
    v80 = &v24[v79];
    v25 = type metadata accessor for AspireHeSerializedRelinKey(0);
    v26 = *(_QWORD *)(v25 - 8);
    v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    v82 = v81(v23, 1, v25);
    v83 = v81((uint64_t)v80, 1, v25);
    v20 = v137;
    if (v82)
    {
      if (!v83)
      {
        v84 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
        v84(v23, v80, v136);
        v85 = *(int *)(v25 + 20);
        v86 = (char *)(v23 + v85);
        v87 = &v80[v85];
        v88 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v89 = *(_QWORD *)(v88 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
        {
          v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
        }
        else
        {
          v84((uint64_t)v86, v87, v136);
          v104 = *(int *)(v88 + 20);
          __srca = &v86[v104];
          v105 = &v87[v104];
          v106 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v132 = *(_QWORD *)(v106 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v105, 1, v106))
          {
            v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(__srca, v105, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__srca = *(_QWORD *)v105;
            v108 = *(int *)(v106 + 20);
            v128 = &__srca[v108];
            v109 = &v105[v108];
            swift_bridgeObjectRetain();
            v84((uint64_t)v128, v109, v136);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(__srca, 0, 1, v106);
          }
          v20 = v137;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
        }
        goto LABEL_49;
      }
    }
    else
    {
      if (!v83)
      {
        ((void (*)(uint64_t, char *, uint64_t))v8)(v23, v80, v136);
        v91 = *(int *)(v25 + 20);
        v23 += v91;
        v24 = &v80[v91];
        v25 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v26 = *(_QWORD *)(v25 - 8);
        v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
        v93 = v92(v23, 1, v25);
        v94 = v92((uint64_t)v24, 1, v25);
        if (v93)
        {
          if (!v94)
          {
            v95 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
            v95(v23, v24, v136);
            v96 = *(int *)(v25 + 20);
            v97 = (char *)(v23 + v96);
            v98 = &v24[v96];
            v99 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v100 = *(_QWORD *)(v99 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
            {
              *(_QWORD *)v97 = *(_QWORD *)v98;
              v122 = *(int *)(v99 + 20);
              v123 = &v97[v122];
              v124 = &v98[v122];
              swift_bridgeObjectRetain();
              v95((uint64_t)v123, v124, v136);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
              goto LABEL_25;
            }
            v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                        - 8)
                            + 64);
            v62 = v97;
            v63 = v98;
LABEL_24:
            memcpy(v62, v63, v61);
LABEL_25:
            v20 = v137;
LABEL_49:
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
            return v20;
          }
        }
        else
        {
          if (!v94)
          {
            ((void (*)(uint64_t, char *, uint64_t))v8)(v23, v24, v136);
            v110 = *(int *)(v25 + 20);
            v111 = (char *)(v23 + v110);
            v112 = &v24[v110];
            v113 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v114 = *(_QWORD *)(v113 - 8);
            v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
            v116 = v115(v111, 1, v113);
            v117 = v115(v112, 1, v113);
            if (v116)
            {
              if (!v117)
              {
                *(_QWORD *)v111 = *(_QWORD *)v112;
                v118 = *(int *)(v113 + 20);
                v119 = &v111[v118];
                v120 = &v112[v118];
                v121 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
                swift_bridgeObjectRetain();
                v121(v119, v120, v136);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
                return v20;
              }
            }
            else
            {
              if (!v117)
              {
                *(_QWORD *)v111 = *(_QWORD *)v112;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                ((void (*)(char *, char *, uint64_t))v8)(&v111[*(int *)(v113 + 20)], &v112[*(int *)(v113 + 20)], v136);
                return v20;
              }
              outlined destroy of AspireApiPECConfig((uint64_t)v111, type metadata accessor for AspireHeSerializedCiphertextVec);
            }
            v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                        - 8)
                            + 64);
            v39 = v111;
            v40 = v112;
            goto LABEL_16;
          }
          outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedKeySwitchKey);
        }
        v37 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
        goto LABEL_15;
      }
      outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedRelinKey);
    }
    v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    v39 = (void *)v23;
    v40 = v80;
    goto LABEL_16;
  }
  outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_14:
  v37 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_15:
  v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v37) - 8) + 64);
  v39 = (void *)v23;
  v40 = v24;
LABEL_16:
  memcpy(v39, v40, v38);
  return v20;
}

uint64_t initializeWithTake for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *__dst;
  uint64_t v49;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
    v7((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = *(int *)(a3 + 24);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v49 = v18;
    v7((uint64_t)v15, (uint64_t)v16, v6);
    v20 = *(int *)(v17 + 20);
    v21 = &v15[v20];
    v22 = &v16[v20];
    v23 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v7((uint64_t)&v21[*(int *)(v23 + 20)], (uint64_t)&v22[*(int *)(v23 + 20)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v26 = *(int *)(v17 + 24);
    v27 = &v15[v26];
    v28 = &v16[v26];
    v29 = type metadata accessor for AspireHeSerializedRelinKey(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v27, (uint64_t)v28, v6);
      v32 = *(int *)(v29 + 20);
      v47 = v27;
      __dst = &v27[v32];
      v33 = &v28[v32];
      v34 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        v37 = v47;
      }
      else
      {
        v45 = v35;
        v46 = v30;
        v7((uint64_t)__dst, (uint64_t)v33, v6);
        v38 = *(int *)(v34 + 20);
        v44 = &__dst[v38];
        v39 = &v33[v38];
        v40 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        v41 = *(_QWORD *)(v40 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v44, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v44 = *(_QWORD *)v39;
          v7((uint64_t)&v44[*(int *)(v40 + 20)], (uint64_t)&v39[*(int *)(v40 + 20)], v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v40);
        }
        v30 = v46;
        v37 = v47;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v34);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v37, 0, 1, v29);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for AspireApiEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  int v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  size_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  size_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int (**v53)(const void *, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (**v62)(const void *, uint64_t, uint64_t);
  void *v63;
  void (*v64)(uint64_t, char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  int v69;
  int v70;
  size_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, char *, uint64_t);
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  int v90;
  int v91;
  void (*v92)(uint64_t, char *, uint64_t);
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t, uint64_t);
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  void *__src;
  void (**__srca)(char *, _QWORD, uint64_t, uint64_t);
  void (*__dst)(uint64_t, uint64_t, uint64_t);
  unsigned int (**__dsta)(const void *, uint64_t, uint64_t);
  char *__dstb;
  uint64_t v121;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  __dst = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  __dst(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v121 = a1;
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *v9 = *v10;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v9 + *(int *)(v11 + 24), (char *)v10 + *(int *)(v11 + 24), v6);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v37 = v10[2];
  v38 = v9[1];
  v39 = v9[2];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v9[2] = v37;
  outlined consume of Data._Representation(v38, v39);
  __dst((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v6);
LABEL_7:
  v17 = v121;
  v18 = *(int *)(a3 + 24);
  v19 = v121 + v18;
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23((uint64_t)v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      v26 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
      v26(v19, v20, v6);
      v27 = *(int *)(v21 + 20);
      v28 = (_QWORD *)(v19 + v27);
      v29 = &v20[v27];
      v30 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *v28 = *(_QWORD *)v29;
        v26((uint64_t)v28 + *(int *)(v30 + 20), &v29[*(int *)(v30 + 20)], v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      v49 = *(int *)(v21 + 24);
      v50 = (char *)(v19 + v49);
      v51 = &v20[v49];
      v52 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v53 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v52 - 8);
      if (v53[6](v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56);
      }
      else
      {
        __dsta = v53;
        v26((uint64_t)v50, v51, v6);
        v56 = *(int *)(v52 + 20);
        __src = v50;
        v57 = &v50[v56];
        v58 = &v51[v56];
        v59 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v60 = *(_QWORD *)(v59 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
          v63 = __src;
          v62 = __dsta;
        }
        else
        {
          v113 = v60;
          v26((uint64_t)v57, v58, v6);
          v74 = *(int *)(v59 + 20);
          v115 = v57;
          v75 = &v57[v74];
          v76 = &v58[v74];
          v77 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v112 = *(_QWORD *)(v77 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v76, 1, v77))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v75 = *(_QWORD *)v76;
            v26((uint64_t)&v75[*(int *)(v77 + 20)], &v76[*(int *)(v77 + 20)], v6);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v75, 0, 1, v77);
          }
          v63 = __src;
          v62 = __dsta;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v115, 0, 1, v59);
        }
        ((void (*)(void *, _QWORD, uint64_t, uint64_t))v62[7])(v63, 0, 1, v52);
        v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56);
      }
LABEL_56:
      v55(v19, 0, 1, v21);
      return v121;
    }
    goto LABEL_13;
  }
  if (v25)
  {
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_13:
    v33 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_14:
    v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v33) - 8) + 64);
    v35 = (void *)v19;
    v36 = v20;
LABEL_15:
    memcpy(v35, v36, v34);
    return v17;
  }
  __dst(v19, (uint64_t)v20, v6);
  v40 = *(int *)(v21 + 20);
  v41 = (char *)(v19 + v40);
  v42 = &v20[v40];
  v43 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v114 = v41;
  LODWORD(v41) = v45(v41, 1, v43);
  v46 = v45(v42, 1, v43);
  if ((_DWORD)v41)
  {
    if (!v46)
    {
      *(_QWORD *)v114 = *(_QWORD *)v42;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v114[*(int *)(v43 + 20)], &v42[*(int *)(v43 + 20)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v114, 0, 1, v43);
      goto LABEL_29;
    }
    v47 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                - 8)
                    + 64);
    v48 = v114;
LABEL_27:
    memcpy(v48, v42, v47);
LABEL_29:
    v64 = (void (*)(uint64_t, char *, uint64_t))__dst;
    goto LABEL_30;
  }
  if (v46)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v114, type metadata accessor for AspireHeSerializedGaloisKey);
    v47 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                - 8)
                    + 64);
    v48 = v114;
    goto LABEL_27;
  }
  *(_QWORD *)v114 = *(_QWORD *)v42;
  swift_bridgeObjectRelease();
  v64 = (void (*)(uint64_t, char *, uint64_t))__dst;
  __dst((uint64_t)&v114[*(int *)(v43 + 20)], (uint64_t)&v42[*(int *)(v43 + 20)], v6);
LABEL_30:
  v65 = *(int *)(v21 + 24);
  v19 += v65;
  v66 = &v20[v65];
  v21 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v67 = *(_QWORD *)(v21 - 8);
  v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v19, 1, v21);
  v70 = v68((uint64_t)v66, 1, v21);
  if (v69)
  {
    if (!v70)
    {
      v79 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
      v79(v19, v66, v6);
      v80 = *(int *)(v21 + 20);
      v81 = (char *)(v19 + v80);
      v82 = &v66[v80];
      v83 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v79((uint64_t)v81, v82, v6);
        v99 = *(int *)(v83 + 20);
        __dstb = &v81[v99];
        v100 = &v82[v99];
        v101 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        __srca = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v101 - 8);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__srca[6])(v100, 1, v101))
        {
          v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(__dstb, v100, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dstb = *(_QWORD *)v100;
          v79((uint64_t)&__dstb[*(int *)(v101 + 20)], &v100[*(int *)(v101 + 20)], v6);
          __srca[7](__dstb, 0, 1, v101);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
      }
      v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56);
      goto LABEL_56;
    }
    v71 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    v72 = (void *)v19;
    v73 = v66;
    goto LABEL_33;
  }
  v17 = v121;
  if (v70)
  {
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for AspireHeSerializedRelinKey);
    v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    v35 = (void *)v19;
    v36 = v66;
    goto LABEL_15;
  }
  v64(v19, v66, v6);
  v86 = *(int *)(v21 + 20);
  v19 += v86;
  v20 = &v66[v86];
  v87 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v88 = *(_QWORD *)(v87 - 8);
  v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  v90 = v89(v19, 1, v87);
  v91 = v89((uint64_t)v20, 1, v87);
  if (!v90)
  {
    if (!v91)
    {
      v64(v19, v20, v6);
      v104 = *(int *)(v87 + 20);
      v105 = (char *)(v19 + v104);
      v106 = &v20[v104];
      v107 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v108 = *(_QWORD *)(v107 - 8);
      v109 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48);
      v110 = v109(v105, 1, v107);
      v111 = v109(v106, 1, v107);
      if (!v110)
      {
        v17 = v121;
        if (!v111)
        {
          *(_QWORD *)v105 = *(_QWORD *)v106;
          swift_bridgeObjectRelease();
          v64((uint64_t)&v105[*(int *)(v107 + 20)], &v106[*(int *)(v107 + 20)], v6);
          return v17;
        }
        outlined destroy of AspireApiPECConfig((uint64_t)v105, type metadata accessor for AspireHeSerializedCiphertextVec);
        v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                    - 8)
                        + 64);
        v35 = v105;
        v36 = v106;
        goto LABEL_15;
      }
      if (!v111)
      {
        *(_QWORD *)v105 = *(_QWORD *)v106;
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v105[*(int *)(v107 + 20)], &v106[*(int *)(v107 + 20)], v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
        return v121;
      }
      v71 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      v72 = v105;
      v73 = v106;
LABEL_33:
      memcpy(v72, v73, v71);
      return v121;
    }
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_52:
    v33 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
    goto LABEL_14;
  }
  if (v91)
    goto LABEL_52;
  v92 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v92(v19, v20, v6);
  v93 = *(int *)(v87 + 20);
  v94 = (_QWORD *)(v19 + v93);
  v95 = &v20[v93];
  v96 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v97 = *(_QWORD *)(v96 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
  {
    v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    *v94 = *(_QWORD *)v95;
    v92((uint64_t)v94 + *(int *)(v96 + 20), &v95[*(int *)(v96 + 20)], v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
  }
  v17 = v121;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v88 + 56))(v19, 0, 1, v87);
  return v17;
}

uint64_t getEnumTagSinglePayload for AspireApiEvaluationKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CC7D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AspireApiEvaluationKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CC7E48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspireApiEvaluationKey()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireApiEvaluationKeyMetadata?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeSerializedEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for AspireApiConfigRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireApiConfigRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v76 = v8;
        *a1 = *a2;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        v11 = a2[4];
        v12 = a2[5];
        outlined copy of Data._Representation(v11, v12);
        a1[4] = v11;
        a1[5] = v12;
        a1[6] = a2[6];
        v13 = (int *)type metadata accessor for AspireApiPECConfig(0);
        v14 = v13[9];
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
        swift_bridgeObjectRetain();
        v74 = v18;
        v18(v15, v16, v17);
        v19 = v13[10];
        v20 = (_OWORD *)((char *)a1 + v19);
        v21 = (_OWORD *)((char *)a2 + v19);
        v22 = type metadata accessor for AspireHeEncryptionParameters(0);
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          *v20 = *v21;
          v39 = *((_QWORD *)v21 + 3);
          *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
          *((_QWORD *)v20 + 3) = v39;
          *((_BYTE *)v20 + 32) = *((_BYTE *)v21 + 32);
          *((_QWORD *)v20 + 5) = *((_QWORD *)v21 + 5);
          *((_BYTE *)v20 + 48) = *((_BYTE *)v21 + 48);
          *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
          *((_BYTE *)v20 + 64) = *((_BYTE *)v21 + 64);
          v40 = *(int *)(v22 + 40);
          v72 = (char *)v20 + v40;
          v41 = (char *)v21 + v40;
          swift_bridgeObjectRetain();
          v74(v72, v41, v17);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        v42 = v13[11];
        v43 = (char *)a1 + v42;
        v44 = (char *)a2 + v42;
        v45 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          v58 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v73 = *(_QWORD *)(v58 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v44, 1, v58))
          {
            v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v74(v43, v44, v17);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v43, 0, 1, v58);
          }
          v74(&v43[*(int *)(v45 + 20)], &v44[*(int *)(v45 + 20)], v17);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        }
        v8 = v76;
      }
      else
      {
        v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        v26 = a2[4];
        a1[3] = a2[3];
        v27 = a2[5];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v26, v27);
        a1[4] = v26;
        a1[5] = v27;
        v28 = type metadata accessor for AspireApiPIRConfig(0);
        v29 = *(int *)(v28 + 32);
        v30 = (char *)a1 + v29;
        v31 = (char *)a2 + v29;
        v32 = type metadata accessor for UnknownStorage();
        v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
        v33(v30, v31, v32);
        v77 = v28;
        v34 = *(int *)(v28 + 36);
        v35 = (_OWORD *)((char *)a1 + v34);
        v36 = (_OWORD *)((char *)a2 + v34);
        v37 = type metadata accessor for AspireHeEncryptionParameters(0);
        v71 = *(_QWORD *)(v37 - 8);
        v75 = v33;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v71 + 48))(v36, 1, v37))
        {
          v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          *v35 = *v36;
          v48 = *((_QWORD *)v36 + 3);
          *((_QWORD *)v35 + 2) = *((_QWORD *)v36 + 2);
          *((_QWORD *)v35 + 3) = v48;
          *((_BYTE *)v35 + 32) = *((_BYTE *)v36 + 32);
          *((_QWORD *)v35 + 5) = *((_QWORD *)v36 + 5);
          *((_BYTE *)v35 + 48) = *((_BYTE *)v36 + 48);
          *((_QWORD *)v35 + 7) = *((_QWORD *)v36 + 7);
          *((_BYTE *)v35 + 64) = *((_BYTE *)v36 + 64);
          v49 = *(int *)(v37 + 40);
          v70 = (char *)v35 + v49;
          v50 = (char *)v36 + v49;
          swift_bridgeObjectRetain();
          v33(v70, v50, v32);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v35, 0, 1, v37);
        }
        v51 = v32;
        v52 = *(int *)(v77 + 40);
        v53 = (char *)a1 + v52;
        v54 = (char *)a2 + v52;
        v55 = type metadata accessor for AspirePirKeywordPirParameters(0);
        v56 = *(_QWORD *)(v55 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
          memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v53 = *(_QWORD *)v54;
          v53[8] = v54[8];
          v75(&v53[*(int *)(v55 + 24)], &v54[*(int *)(v55 + 24)], v51);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v60 = *(int *)(a3 + 20);
    v61 = (uint64_t *)((char *)a1 + v60);
    v62 = (uint64_t *)((char *)a2 + v60);
    v63 = *v62;
    v64 = v62[1];
    outlined copy of Data._Representation(*v62, v64);
    *v61 = v63;
    v61[1] = v64;
    v65 = *(int *)(a3 + 24);
    v66 = (char *)a1 + v65;
    v67 = (char *)a2 + v65;
    v68 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  }
  return a1;
}

uint64_t destroy for AspireApiConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
    goto LABEL_2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    swift_bridgeObjectRelease();
    v8 = (int *)type metadata accessor for AspireApiPECConfig(0);
    v9 = a1 + v8[9];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v9, v10);
    v12 = a1 + v8[10];
    v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
    {
      swift_bridgeObjectRelease();
      v11(v12 + *(int *)(v13 + 40), v10);
    }
    v14 = a1 + v8[11];
    v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      v16 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v14, 1, v16)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v11(v14, v10);
      }
      v17 = *(int *)(v15 + 20);
      goto LABEL_15;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v18 = (int *)type metadata accessor for AspireApiPIRConfig(0);
    v19 = a1 + v18[8];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v19, v10);
    v20 = a1 + v18[9];
    v21 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
    {
      swift_bridgeObjectRelease();
      v11(v20 + *(int *)(v21 + 40), v10);
    }
    v14 = a1 + v18[10];
    v22 = type metadata accessor for AspirePirKeywordPirParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v14, 1, v22))
    {
      v17 = *(int *)(v22 + 24);
LABEL_15:
      v11(v14 + v17, v10);
    }
  }
LABEL_2:
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

_QWORD *initializeWithCopy for AspireApiConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;

  v6 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v74 = a3;
      v76 = v7;
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      v9 = a2[4];
      v10 = a2[5];
      outlined copy of Data._Representation(v9, v10);
      a1[4] = v9;
      a1[5] = v10;
      a1[6] = a2[6];
      v11 = (int *)type metadata accessor for AspireApiPECConfig(0);
      v12 = v11[9];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      v17 = v11[10];
      v18 = (_OWORD *)((char *)a1 + v17);
      v19 = (_OWORD *)((char *)a2 + v17);
      v20 = type metadata accessor for AspireHeEncryptionParameters(0);
      v21 = *(_QWORD *)(v20 - 8);
      v70 = v16;
      v72 = v15;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        *v18 = *v19;
        v37 = *((_QWORD *)v19 + 3);
        *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
        *((_QWORD *)v18 + 3) = v37;
        *((_BYTE *)v18 + 32) = *((_BYTE *)v19 + 32);
        *((_QWORD *)v18 + 5) = *((_QWORD *)v19 + 5);
        *((_BYTE *)v18 + 48) = *((_BYTE *)v19 + 48);
        *((_QWORD *)v18 + 7) = *((_QWORD *)v19 + 7);
        *((_BYTE *)v18 + 64) = *((_BYTE *)v19 + 64);
        v38 = *(int *)(v20 + 40);
        v68 = (char *)v18 + v38;
        v39 = (char *)v19 + v38;
        swift_bridgeObjectRetain();
        v16(v68, v39, v15);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v40 = v11[11];
      v41 = (char *)a1 + v40;
      v42 = (char *)a2 + v40;
      v43 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v44 = *(_QWORD *)(v43 - 8);
      a3 = v74;
      v7 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v56 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v69 = *(_QWORD *)(v56 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v42, 1, v56))
        {
          v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v70(v41, v42, v72);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v41, 0, 1, v56);
          a3 = v74;
          v7 = v76;
        }
        v70(&v41[*(int *)(v43 + 20)], &v42[*(int *)(v43 + 20)], v72);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
    }
    else
    {
      v23 = a2[1];
      *a1 = *a2;
      a1[1] = v23;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      v24 = a2[4];
      a1[3] = a2[3];
      v25 = a2[5];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v24, v25);
      a1[4] = v24;
      a1[5] = v25;
      v26 = type metadata accessor for AspireApiPIRConfig(0);
      v27 = *(int *)(v26 + 32);
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = type metadata accessor for UnknownStorage();
      v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
      v31(v28, v29, v30);
      v77 = v26;
      v32 = *(int *)(v26 + 36);
      v33 = (_OWORD *)((char *)a1 + v32);
      v34 = (_OWORD *)((char *)a2 + v32);
      v35 = type metadata accessor for AspireHeEncryptionParameters(0);
      v73 = *(_QWORD *)(v35 - 8);
      v75 = v31;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v73 + 48))(v34, 1, v35))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        *v33 = *v34;
        v46 = *((_QWORD *)v34 + 3);
        *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
        *((_QWORD *)v33 + 3) = v46;
        *((_BYTE *)v33 + 32) = *((_BYTE *)v34 + 32);
        *((_QWORD *)v33 + 5) = *((_QWORD *)v34 + 5);
        *((_BYTE *)v33 + 48) = *((_BYTE *)v34 + 48);
        *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
        *((_BYTE *)v33 + 64) = *((_BYTE *)v34 + 64);
        v47 = *(int *)(v35 + 40);
        v71 = (char *)v33 + v47;
        v48 = (char *)v34 + v47;
        swift_bridgeObjectRetain();
        v31(v71, v48, v30);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v33, 0, 1, v35);
      }
      v49 = v30;
      v50 = *(int *)(v77 + 40);
      v51 = (char *)a1 + v50;
      v52 = (char *)a2 + v50;
      v53 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v51 = *(_QWORD *)v52;
        v51[8] = v52[8];
        v75(&v51[*(int *)(v53 + 24)], &v52[*(int *)(v53 + 24)], v49);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v58 = *(int *)(a3 + 20);
  v59 = (_QWORD *)((char *)a1 + v58);
  v60 = (_QWORD *)((char *)a2 + v58);
  v61 = *v60;
  v62 = v60[1];
  outlined copy of Data._Representation(*v60, v62);
  *v59 = v61;
  v59[1] = v62;
  v63 = *(int *)(a3 + 24);
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  return a1;
}

uint64_t assignWithCopy for AspireApiConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  void (*v140)(char *, char *, uint64_t);
  void (*v141)(char *, char *, uint64_t);
  void (*v142)(uint64_t, uint64_t, uint64_t);
  void (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;

  v6 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v144 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        v11 = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v11;
        v12 = *(_QWORD *)(a2 + 32);
        v13 = *(_QWORD *)(a2 + 40);
        outlined copy of Data._Representation(v12, v13);
        *(_QWORD *)(a1 + 32) = v12;
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v14 = (int *)type metadata accessor for AspireApiPECConfig(0);
        v15 = v14[9];
        v16 = (char *)(a1 + v15);
        v17 = (char *)(a2 + v15);
        v18 = type metadata accessor for UnknownStorage();
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v140 = v19;
        v19(v16, v17, v18);
        v20 = v14[10];
        v21 = (_QWORD *)(a1 + v20);
        v22 = (_QWORD *)(a2 + v20);
        v23 = type metadata accessor for AspireHeEncryptionParameters(0);
        v24 = *(_QWORD *)(v23 - 8);
        v136 = v18;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          *v21 = *v22;
          v21[1] = v22[1];
          v21[2] = v22[2];
          v56 = v22[3];
          *((_BYTE *)v21 + 32) = *((_BYTE *)v22 + 32);
          v21[3] = v56;
          v57 = v22[5];
          *((_BYTE *)v21 + 48) = *((_BYTE *)v22 + 48);
          v21[5] = v57;
          v58 = v22[7];
          *((_BYTE *)v21 + 64) = *((_BYTE *)v22 + 64);
          v21[7] = v58;
          v59 = *(int *)(v23 + 40);
          v135 = (char *)v21 + v59;
          v60 = (char *)v22 + v59;
          swift_bridgeObjectRetain();
          v140(v135, v60, v18);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        v61 = v14[11];
        v62 = (char *)(a1 + v61);
        v63 = (char *)(a2 + v61);
        v64 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v65 = *(_QWORD *)(v64 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          v94 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v95 = *(_QWORD *)(v94 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v63, 1, v94))
          {
            v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v140(v62, v63, v136);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v62, 0, 1, v94);
          }
          v140(&v62[*(int *)(v64 + 20)], &v63[*(int *)(v64 + 20)], v136);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
        }
      }
      else
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v42 = *(_QWORD *)(a2 + 8);
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v42;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v43 = *(_QWORD *)(a2 + 32);
        v44 = *(_QWORD *)(a2 + 40);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v43, v44);
        *(_QWORD *)(a1 + 32) = v43;
        *(_QWORD *)(a1 + 40) = v44;
        v45 = (int *)type metadata accessor for AspireApiPIRConfig(0);
        v46 = v45[8];
        v47 = a1 + v46;
        v48 = a2 + v46;
        v49 = type metadata accessor for UnknownStorage();
        v142 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
        v142(v47, v48, v49);
        v50 = v45[9];
        v51 = (_QWORD *)(a1 + v50);
        v52 = (_QWORD *)(a2 + v50);
        v53 = type metadata accessor for AspireHeEncryptionParameters(0);
        v54 = *(_QWORD *)(v53 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
        {
          v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
          *v51 = *v52;
          v51[1] = v52[1];
          v51[2] = v52[2];
          v82 = v52[3];
          *((_BYTE *)v51 + 32) = *((_BYTE *)v52 + 32);
          v51[3] = v82;
          v83 = v52[5];
          *((_BYTE *)v51 + 48) = *((_BYTE *)v52 + 48);
          v51[5] = v83;
          v84 = v52[7];
          *((_BYTE *)v51 + 64) = *((_BYTE *)v52 + 64);
          v51[7] = v84;
          v85 = *(int *)(v53 + 40);
          v137 = (char *)v51 + v85;
          v86 = (char *)v52 + v85;
          swift_bridgeObjectRetain();
          v142((uint64_t)v137, (uint64_t)v86, v49);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
        }
        v87 = v49;
        v88 = v45[10];
        v89 = (_BYTE *)(a1 + v88);
        v90 = (_BYTE *)(a2 + v88);
        v91 = type metadata accessor for AspirePirKeywordPirParameters(0);
        v92 = *(_QWORD *)(v91 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
        {
          v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
          memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v89 = *(_QWORD *)v90;
          v89[8] = v90[8];
          v142((uint64_t)&v89[*(int *)(v91 + 24)], (uint64_t)&v90[*(int *)(v91 + 24)], v87);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
        }
      }
      a3 = v144;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_41;
    }
LABEL_8:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_41;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    v145 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      v27 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v27;
      v28 = *(_QWORD *)(a2 + 32);
      v29 = *(_QWORD *)(a2 + 40);
      outlined copy of Data._Representation(v28, v29);
      *(_QWORD *)(a1 + 32) = v28;
      *(_QWORD *)(a1 + 40) = v29;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v30 = (int *)type metadata accessor for AspireApiPECConfig(0);
      v31 = v30[9];
      v32 = a1 + v31;
      v33 = a2 + v31;
      v34 = type metadata accessor for UnknownStorage();
      v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      swift_bridgeObjectRetain();
      v35(v32, v33, v34);
      v36 = v30[10];
      v37 = (_QWORD *)(a1 + v36);
      v38 = (_QWORD *)(a2 + v36);
      v39 = type metadata accessor for AspireHeEncryptionParameters(0);
      v40 = *(_QWORD *)(v39 - 8);
      v141 = (void (*)(char *, char *, uint64_t))v35;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        *v37 = *v38;
        v37[1] = v38[1];
        v37[2] = v38[2];
        v97 = v38[3];
        *((_BYTE *)v37 + 32) = *((_BYTE *)v38 + 32);
        v37[3] = v97;
        v98 = v38[5];
        *((_BYTE *)v37 + 48) = *((_BYTE *)v38 + 48);
        v37[5] = v98;
        v99 = v38[7];
        *((_BYTE *)v37 + 64) = *((_BYTE *)v38 + 64);
        v37[7] = v99;
        v100 = *(int *)(v39 + 40);
        v138 = (char *)v37 + v100;
        v101 = (char *)v38 + v100;
        swift_bridgeObjectRetain();
        v35((uint64_t)v138, (uint64_t)v101, v34);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      v102 = v30[11];
      v103 = (char *)(a1 + v102);
      v104 = (char *)(a2 + v102);
      v105 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v106 = *(_QWORD *)(v105 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
      {
        v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        v119 = v34;
        v120 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v121 = *(_QWORD *)(v120 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v104, 1, v120))
        {
          v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v141(v103, v104, v119);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v103, 0, 1, v120);
        }
        v141(&v103[*(int *)(v105 + 20)], &v104[*(int *)(v105 + 20)], v119);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
      }
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v67 = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v67;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v68 = *(_QWORD *)(a2 + 32);
      v69 = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v68, v69);
      *(_QWORD *)(a1 + 32) = v68;
      *(_QWORD *)(a1 + 40) = v69;
      v70 = (int *)type metadata accessor for AspireApiPIRConfig(0);
      v71 = v70[8];
      v72 = a1 + v71;
      v73 = a2 + v71;
      v74 = type metadata accessor for UnknownStorage();
      v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 16);
      v75(v72, v73, v74);
      v76 = v70[9];
      v77 = (_QWORD *)(a1 + v76);
      v78 = (_QWORD *)(a2 + v76);
      v79 = type metadata accessor for AspireHeEncryptionParameters(0);
      v80 = *(_QWORD *)(v79 - 8);
      v143 = v75;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
      {
        v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        *v77 = *v78;
        v77[1] = v78[1];
        v77[2] = v78[2];
        v108 = v78[3];
        *((_BYTE *)v77 + 32) = *((_BYTE *)v78 + 32);
        v77[3] = v108;
        v109 = v78[5];
        *((_BYTE *)v77 + 48) = *((_BYTE *)v78 + 48);
        v77[5] = v109;
        v110 = v78[7];
        *((_BYTE *)v77 + 64) = *((_BYTE *)v78 + 64);
        v77[7] = v110;
        v111 = *(int *)(v79 + 40);
        v139 = (char *)v77 + v111;
        v112 = (char *)v78 + v111;
        swift_bridgeObjectRetain();
        v75((uint64_t)v139, (uint64_t)v112, v74);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      }
      v113 = v70[10];
      v114 = (_BYTE *)(a1 + v113);
      v115 = (_BYTE *)(a2 + v113);
      v116 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v117 = *(_QWORD *)(v116 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
      {
        v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v114 = *(_QWORD *)v115;
        v114[8] = v115[8];
        v143((uint64_t)&v114[*(int *)(v116 + 24)], (uint64_t)&v115[*(int *)(v116 + 24)], v74);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
      }
    }
    swift_storeEnumTagMultiPayload();
    a3 = v145;
  }
LABEL_41:
  v123 = *(int *)(a3 + 20);
  v124 = (uint64_t *)(a1 + v123);
  v125 = (uint64_t *)(a2 + v123);
  v126 = *v125;
  v127 = v125[1];
  outlined copy of Data._Representation(*v125, v127);
  v128 = *v124;
  v129 = v124[1];
  *v124 = v126;
  v124[1] = v127;
  outlined consume of Data._Representation(v128, v129);
  v130 = *(int *)(a3 + 24);
  v131 = a1 + v130;
  v132 = a2 + v130;
  v133 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 24))(v131, v132, v133);
  return a1;
}

_QWORD *initializeWithTake for AspireApiConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v59 = a3;
      v61 = v7;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      a1[6] = a2[6];
      v10 = (int *)type metadata accessor for AspireApiPECConfig(0);
      v11 = v10[9];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for UnknownStorage();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
      v15(v12, v13, v14);
      v16 = v10[10];
      v17 = (_OWORD *)((char *)a1 + v16);
      v18 = (_OWORD *)((char *)a2 + v16);
      v19 = type metadata accessor for AspireHeEncryptionParameters(0);
      v20 = *(_QWORD *)(v19 - 8);
      v55 = v15;
      v57 = v14;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        *v17 = *v18;
        v33 = *((_QWORD *)v18 + 3);
        *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
        *((_QWORD *)v17 + 3) = v33;
        *((_BYTE *)v17 + 32) = *((_BYTE *)v18 + 32);
        *((_QWORD *)v17 + 5) = *((_QWORD *)v18 + 5);
        *((_BYTE *)v17 + 48) = *((_BYTE *)v18 + 48);
        *((_QWORD *)v17 + 7) = *((_QWORD *)v18 + 7);
        *((_BYTE *)v17 + 64) = *((_BYTE *)v18 + 64);
        v15((char *)v17 + *(int *)(v19 + 40), (char *)v18 + *(int *)(v19 + 40), v14);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v34 = v10[11];
      v35 = (char *)a1 + v34;
      v36 = (char *)a2 + v34;
      v37 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v38 = *(_QWORD *)(v37 - 8);
      a3 = v59;
      v7 = v61;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v47 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v54 = *(_QWORD *)(v47 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v36, 1, v47))
        {
          v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v55(v35, v36, v57);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v35, 0, 1, v47);
          a3 = v59;
          v7 = v61;
        }
        v55(&v35[*(int *)(v37 + 20)], &v36[*(int *)(v37 + 20)], v57);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
    }
    else
    {
      a1[1] = a2[1];
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      a1[3] = a2[3];
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v22 = type metadata accessor for AspireApiPIRConfig(0);
      v23 = *(int *)(v22 + 32);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for UnknownStorage();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      v27(v24, v25, v26);
      v62 = v22;
      v28 = *(int *)(v22 + 36);
      v29 = (_OWORD *)((char *)a1 + v28);
      v30 = (_OWORD *)((char *)a2 + v28);
      v31 = type metadata accessor for AspireHeEncryptionParameters(0);
      v56 = *(_QWORD *)(v31 - 8);
      v58 = v27;
      v60 = v26;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v56 + 48))(v30, 1, v31))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *v29 = *v30;
        v40 = *((_QWORD *)v30 + 3);
        *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
        *((_QWORD *)v29 + 3) = v40;
        *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
        *((_QWORD *)v29 + 5) = *((_QWORD *)v30 + 5);
        *((_BYTE *)v29 + 48) = *((_BYTE *)v30 + 48);
        *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
        *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
        v27((char *)v29 + *(int *)(v31 + 40), (char *)v30 + *(int *)(v31 + 40), v26);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v29, 0, 1, v31);
      }
      v41 = *(int *)(v62 + 40);
      v42 = (char *)a1 + v41;
      v43 = (char *)a2 + v41;
      v44 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v42 = *(_QWORD *)v43;
        v42[8] = v43[8];
        v58(&v42[*(int *)(v44 + 24)], &v43[*(int *)(v44 + 24)], v60);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v49 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
  return a1;
}

uint64_t assignWithTake for AspireApiConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  _OWORD *v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t);
  void (*v110)(char *, char *, uint64_t);
  uint64_t v111;
  uint64_t v112;

  v6 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v111 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v12 = type metadata accessor for AspireApiPECConfig(0);
        v13 = *(int *)(v12 + 36);
        v14 = a1 + v13;
        v15 = a2 + v13;
        v16 = type metadata accessor for UnknownStorage();
        v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
        v17(v14, v15, v16);
        v107 = v12;
        v18 = *(int *)(v12 + 40);
        v19 = (_OWORD *)(a1 + v18);
        v20 = (_OWORD *)(a2 + v18);
        v21 = type metadata accessor for AspireHeEncryptionParameters(0);
        v22 = *(_QWORD *)(v21 - 8);
        v104 = (void (*)(char *, char *, uint64_t))v17;
        v106 = v16;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          *v19 = *v20;
          v50 = *((_QWORD *)v20 + 3);
          *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
          *((_QWORD *)v19 + 3) = v50;
          *((_BYTE *)v19 + 32) = *((_BYTE *)v20 + 32);
          *((_QWORD *)v19 + 5) = *((_QWORD *)v20 + 5);
          *((_BYTE *)v19 + 48) = *((_BYTE *)v20 + 48);
          *((_QWORD *)v19 + 7) = *((_QWORD *)v20 + 7);
          *((_BYTE *)v19 + 64) = *((_BYTE *)v20 + 64);
          v17((uint64_t)v19 + *(int *)(v21 + 40), (uint64_t)v20 + *(int *)(v21 + 40), v16);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        v51 = *(int *)(v107 + 44);
        v52 = (char *)(a1 + v51);
        v53 = (char *)(a2 + v51);
        v54 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v55 = *(_QWORD *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          v76 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v77 = *(_QWORD *)(v76 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v53, 1, v76))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v104(v52, v53, v106);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v52, 0, 1, v76);
          }
          v104(&v52[*(int *)(v54 + 20)], &v53[*(int *)(v54 + 20)], v106);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        v38 = type metadata accessor for AspireApiPIRConfig(0);
        v39 = *(int *)(v38 + 32);
        v40 = a1 + v39;
        v41 = a2 + v39;
        v42 = type metadata accessor for UnknownStorage();
        v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
        v43(v40, v41, v42);
        v108 = v38;
        v44 = *(int *)(v38 + 36);
        v45 = (_OWORD *)(a1 + v44);
        v46 = (_OWORD *)(a2 + v44);
        v47 = type metadata accessor for AspireHeEncryptionParameters(0);
        v48 = *(_QWORD *)(v47 - 8);
        v105 = v42;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          *v45 = *v46;
          v69 = *((_QWORD *)v46 + 3);
          *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
          *((_QWORD *)v45 + 3) = v69;
          *((_BYTE *)v45 + 32) = *((_BYTE *)v46 + 32);
          *((_QWORD *)v45 + 5) = *((_QWORD *)v46 + 5);
          *((_BYTE *)v45 + 48) = *((_BYTE *)v46 + 48);
          *((_QWORD *)v45 + 7) = *((_QWORD *)v46 + 7);
          *((_BYTE *)v45 + 64) = *((_BYTE *)v46 + 64);
          v43((uint64_t)v45 + *(int *)(v47 + 40), (uint64_t)v46 + *(int *)(v47 + 40), v42);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
        }
        v70 = *(int *)(v108 + 40);
        v71 = (_BYTE *)(a1 + v70);
        v72 = (_BYTE *)(a2 + v70);
        v73 = type metadata accessor for AspirePirKeywordPirParameters(0);
        v74 = *(_QWORD *)(v73 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
        {
          v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v71 = *(_QWORD *)v72;
          v71[8] = v72[8];
          v43((uint64_t)&v71[*(int *)(v73 + 24)], (uint64_t)&v72[*(int *)(v73 + 24)], v105);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        }
      }
      a3 = v111;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_41;
    }
LABEL_8:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_41;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    v25 = swift_getEnumCaseMultiPayload();
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v112 = a3;
    if (v25 == 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v26 = (int *)type metadata accessor for AspireApiPECConfig(0);
      v27 = v26[9];
      v28 = a1 + v27;
      v29 = a2 + v27;
      v30 = type metadata accessor for UnknownStorage();
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
      v31(v28, v29, v30);
      v32 = v26[10];
      v33 = (_OWORD *)(a1 + v32);
      v34 = (_OWORD *)(a2 + v32);
      v35 = type metadata accessor for AspireHeEncryptionParameters(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        *v33 = *v34;
        v79 = *((_QWORD *)v34 + 3);
        *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
        *((_QWORD *)v33 + 3) = v79;
        *((_BYTE *)v33 + 32) = *((_BYTE *)v34 + 32);
        *((_QWORD *)v33 + 5) = *((_QWORD *)v34 + 5);
        *((_BYTE *)v33 + 48) = *((_BYTE *)v34 + 48);
        *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
        *((_BYTE *)v33 + 64) = *((_BYTE *)v34 + 64);
        v31((uint64_t)v33 + *(int *)(v35 + 40), (uint64_t)v34 + *(int *)(v35 + 40), v30);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v80 = v26[11];
      v81 = (char *)(a1 + v80);
      v82 = (char *)(a2 + v80);
      v83 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v110 = (void (*)(char *, char *, uint64_t))v31;
        v93 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v94 = *(_QWORD *)(v93 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v82, 1, v93))
        {
          v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v110(v81, v82, v30);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v81, 0, 1, v93);
        }
        v110(&v81[*(int *)(v83 + 20)], &v82[*(int *)(v83 + 20)], v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      v57 = (int *)type metadata accessor for AspireApiPIRConfig(0);
      v58 = v57[8];
      v59 = a1 + v58;
      v60 = a2 + v58;
      v61 = type metadata accessor for UnknownStorage();
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 32);
      v62(v59, v60, v61);
      v63 = v57[9];
      v64 = (_OWORD *)(a1 + v63);
      v65 = (_OWORD *)(a2 + v63);
      v66 = type metadata accessor for AspireHeEncryptionParameters(0);
      v67 = *(_QWORD *)(v66 - 8);
      v109 = v62;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
      {
        v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        *v64 = *v65;
        v86 = *((_QWORD *)v65 + 3);
        *((_QWORD *)v64 + 2) = *((_QWORD *)v65 + 2);
        *((_QWORD *)v64 + 3) = v86;
        *((_BYTE *)v64 + 32) = *((_BYTE *)v65 + 32);
        *((_QWORD *)v64 + 5) = *((_QWORD *)v65 + 5);
        *((_BYTE *)v64 + 48) = *((_BYTE *)v65 + 48);
        *((_QWORD *)v64 + 7) = *((_QWORD *)v65 + 7);
        *((_BYTE *)v64 + 64) = *((_BYTE *)v65 + 64);
        v62((uint64_t)v64 + *(int *)(v66 + 40), (uint64_t)v65 + *(int *)(v66 + 40), v61);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      }
      v87 = v57[10];
      v88 = (_BYTE *)(a1 + v87);
      v89 = (_BYTE *)(a2 + v87);
      v90 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v91 = *(_QWORD *)(v90 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
      {
        v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v88 = *(_QWORD *)v89;
        v88[8] = v89[8];
        v109((uint64_t)&v88[*(int *)(v90 + 24)], (uint64_t)&v89[*(int *)(v90 + 24)], v61);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
      }
    }
    swift_storeEnumTagMultiPayload();
    a3 = v112;
  }
LABEL_41:
  v96 = *(int *)(a3 + 20);
  v97 = *(_QWORD *)(a1 + v96);
  v98 = *(_QWORD *)(a1 + v96 + 8);
  *(_OWORD *)(a1 + v96) = *(_OWORD *)(a2 + v96);
  outlined consume of Data._Representation(v97, v98);
  v99 = *(int *)(a3 + 24);
  v100 = a1 + v99;
  v101 = a2 + v99;
  v102 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 40))(v100, v101, v102);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CCA7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 12)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * (_DWORD)v9) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CCA878(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 12)
    {
      v13 = (_QWORD *)(a1 + *(int *)(a4 + 20));
      *v13 = 0;
      v13[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
      return result;
    }
    v10 = type metadata accessor for UnknownStorage();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspireApiConfig()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireApiConfig.OneOf_Config?, (void (*)(uint64_t))type metadata accessor for AspireApiConfig.OneOf_Config);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  void (*v64)(uint64_t, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      v6 = a2[4];
      v7 = a2[5];
      outlined copy of Data._Representation(v6, v7);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = a2[6];
      v8 = (int *)type metadata accessor for AspireApiPECConfig(0);
      v9 = v8[9];
      v10 = a1 + v9;
      v11 = (uint64_t)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
      v14 = v8[10];
      v15 = (_OWORD *)(a1 + v14);
      v16 = (_OWORD *)((char *)a2 + v14);
      v17 = type metadata accessor for AspireHeEncryptionParameters(0);
      v18 = *(_QWORD *)(v17 - 8);
      v63 = (void (*)(char *, char *, uint64_t))v13;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        *v15 = *v16;
        v36 = *((_QWORD *)v16 + 3);
        *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
        *((_QWORD *)v15 + 3) = v36;
        *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
        *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
        *((_BYTE *)v15 + 48) = *((_BYTE *)v16 + 48);
        *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
        *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
        v37 = *(int *)(v17 + 40);
        v62 = v12;
        v38 = (char *)v15 + v37;
        v39 = (char *)v16 + v37;
        swift_bridgeObjectRetain();
        v40 = v38;
        v12 = v62;
        v13((uint64_t)v40, (uint64_t)v39, v62);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v41 = v8[11];
      v42 = (char *)(a1 + v41);
      v43 = (char *)a2 + v41;
      v44 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v58 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v59 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v43, 1, v58))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v63(v42, v43, v12);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v42, 0, 1, v58);
        }
        v63(&v42[*(int *)(v44 + 20)], &v43[*(int *)(v44 + 20)], v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
    }
    else
    {
      v21 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v21;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      v22 = a2[4];
      *(_QWORD *)(a1 + 24) = a2[3];
      v23 = a2[5];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v22, v23);
      *(_QWORD *)(a1 + 32) = v22;
      *(_QWORD *)(a1 + 40) = v23;
      v24 = (int *)type metadata accessor for AspireApiPIRConfig(0);
      v25 = v24[8];
      v26 = a1 + v25;
      v27 = (uint64_t)a2 + v25;
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      v29(v26, v27, v28);
      v30 = v24[9];
      v31 = (_OWORD *)(a1 + v30);
      v32 = (_OWORD *)((char *)a2 + v30);
      v33 = type metadata accessor for AspireHeEncryptionParameters(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        *v31 = *v32;
        v47 = *((_QWORD *)v32 + 3);
        *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
        *((_QWORD *)v31 + 3) = v47;
        *((_BYTE *)v31 + 32) = *((_BYTE *)v32 + 32);
        *((_QWORD *)v31 + 5) = *((_QWORD *)v32 + 5);
        *((_BYTE *)v31 + 48) = *((_BYTE *)v32 + 48);
        *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
        *((_BYTE *)v31 + 64) = *((_BYTE *)v32 + 64);
        v48 = *(int *)(v33 + 40);
        v64 = v29;
        v49 = (char *)v31 + v48;
        v50 = (char *)v32 + v48;
        swift_bridgeObjectRetain();
        v51 = v49;
        v29 = v64;
        v64((uint64_t)v51, (uint64_t)v50, v28);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v52 = v24[10];
      v53 = (_BYTE *)(a1 + v52);
      v54 = (char *)a2 + v52;
      v55 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v56 = *(_QWORD *)(v55 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
      {
        v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v53 = *(_QWORD *)v54;
        v53[8] = v54[8];
        v29((uint64_t)&v53[*(int *)(v55 + 24)], (uint64_t)&v54[*(int *)(v55 + 24)], v28);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspireApiConfig.OneOf_Config(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    swift_bridgeObjectRelease();
    v2 = (int *)type metadata accessor for AspireApiPECConfig(0);
    v3 = a1 + v2[9];
    v4 = type metadata accessor for UnknownStorage();
    v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v17(v3, v4);
    v5 = a1 + v2[10];
    v6 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_bridgeObjectRelease();
      v17(v5 + *(int *)(v6 + 40), v4);
    }
    v7 = a1 + v2[11];
    v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
    if (!(_DWORD)result)
    {
      v10 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v7, 1, v10)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v17(v7, v4);
      }
      v11 = *(int *)(v8 + 20);
      return ((uint64_t (*)(uint64_t, uint64_t))v17)(v7 + v11, v4);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v12 = (int *)type metadata accessor for AspireApiPIRConfig(0);
    v13 = a1 + v12[8];
    v4 = type metadata accessor for UnknownStorage();
    v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v17(v13, v4);
    v14 = a1 + v12[9];
    v15 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_bridgeObjectRelease();
      v17(v14 + *(int *)(v15 + 40), v4);
    }
    v7 = a1 + v12[10];
    v16 = type metadata accessor for AspirePirKeywordPirParameters(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v7, 1, v16);
    if (!(_DWORD)result)
    {
      v11 = *(int *)(v16 + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v17)(v7 + v11, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 40);
    outlined copy of Data._Representation(v4, v5);
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v6 = (int *)type metadata accessor for AspireApiPECConfig(0);
    v7 = v6[9];
    v8 = a1 + v7;
    v9 = a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = v6[10];
    v13 = (_OWORD *)(a1 + v12);
    v14 = (_OWORD *)(a2 + v12);
    v15 = type metadata accessor for AspireHeEncryptionParameters(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      v33 = *((_QWORD *)v14 + 3);
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      *((_QWORD *)v13 + 3) = v33;
      *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
      *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
      *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
      *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
      *((_BYTE *)v13 + 64) = *((_BYTE *)v14 + 64);
      v34 = *(int *)(v15 + 40);
      v35 = (char *)v13 + v34;
      v36 = (char *)v14 + v34;
      swift_bridgeObjectRetain();
      v11((uint64_t)v35, (uint64_t)v36, v10);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v37 = v6[11];
    v38 = (char *)(a1 + v37);
    v39 = (char *)(a2 + v37);
    v40 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v53 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v39, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v11((uint64_t)v38, (uint64_t)v39, v10);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v38, 0, 1, v53);
      }
      v11((uint64_t)&v38[*(int *)(v40 + 20)], (uint64_t)&v39[*(int *)(v40 + 20)], v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v18;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v19 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v20 = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v19, v20);
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v20;
    v21 = (int *)type metadata accessor for AspireApiPIRConfig(0);
    v22 = v21[8];
    v23 = a1 + v22;
    v24 = a2 + v22;
    v25 = type metadata accessor for UnknownStorage();
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    v27 = v21[9];
    v28 = (_OWORD *)(a1 + v27);
    v29 = (_OWORD *)(a2 + v27);
    v30 = type metadata accessor for AspireHeEncryptionParameters(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      *v28 = *v29;
      v43 = *((_QWORD *)v29 + 3);
      *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
      *((_QWORD *)v28 + 3) = v43;
      *((_BYTE *)v28 + 32) = *((_BYTE *)v29 + 32);
      *((_QWORD *)v28 + 5) = *((_QWORD *)v29 + 5);
      *((_BYTE *)v28 + 48) = *((_BYTE *)v29 + 48);
      *((_QWORD *)v28 + 7) = *((_QWORD *)v29 + 7);
      *((_BYTE *)v28 + 64) = *((_BYTE *)v29 + 64);
      v44 = *(int *)(v30 + 40);
      v45 = (char *)v28 + v44;
      v46 = (char *)v29 + v44;
      swift_bridgeObjectRetain();
      v26((uint64_t)v45, (uint64_t)v46, v25);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v47 = v21[10];
    v48 = (_BYTE *)(a1 + v47);
    v49 = (_BYTE *)(a2 + v47);
    v50 = type metadata accessor for AspirePirKeywordPirParameters(0);
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      v26((uint64_t)&v48[*(int *)(v50 + 24)], (uint64_t)&v49[*(int *)(v50 + 24)], v25);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      v4 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v4;
      v5 = *(_QWORD *)(a2 + 32);
      v6 = *(_QWORD *)(a2 + 40);
      outlined copy of Data._Representation(v5, v6);
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v7 = (int *)type metadata accessor for AspireApiPECConfig(0);
      v8 = v7[9];
      v9 = a1 + v8;
      v10 = a2 + v8;
      v11 = type metadata accessor for UnknownStorage();
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
      v13 = v7[10];
      v14 = (_QWORD *)(a1 + v13);
      v15 = (_QWORD *)(a2 + v13);
      v16 = type metadata accessor for AspireHeEncryptionParameters(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        *v14 = *v15;
        v14[1] = v15[1];
        v14[2] = v15[2];
        v34 = v15[3];
        *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
        v14[3] = v34;
        v35 = v15[5];
        *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
        v14[5] = v35;
        v36 = v15[7];
        *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
        v14[7] = v36;
        v37 = *(int *)(v16 + 40);
        v38 = (char *)v14 + v37;
        v39 = (char *)v15 + v37;
        swift_bridgeObjectRetain();
        v12((uint64_t)v38, (uint64_t)v39, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      v40 = v7[11];
      v41 = (char *)(a1 + v40);
      v42 = (char *)(a2 + v40);
      v43 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v58 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v59 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v42, 1, v58))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v12((uint64_t)v41, (uint64_t)v42, v11);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v41, 0, 1, v58);
        }
        v12((uint64_t)&v41[*(int *)(v43 + 20)], (uint64_t)&v42[*(int *)(v43 + 20)], v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v19 = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v20 = *(_QWORD *)(a2 + 32);
      v21 = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v20, v21);
      *(_QWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 40) = v21;
      v22 = (int *)type metadata accessor for AspireApiPIRConfig(0);
      v23 = v22[8];
      v24 = a1 + v23;
      v25 = a2 + v23;
      v26 = type metadata accessor for UnknownStorage();
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      v27(v24, v25, v26);
      v28 = v22[9];
      v29 = (_QWORD *)(a1 + v28);
      v30 = (_QWORD *)(a2 + v28);
      v31 = type metadata accessor for AspireHeEncryptionParameters(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        *v29 = *v30;
        v29[1] = v30[1];
        v29[2] = v30[2];
        v46 = v30[3];
        *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
        v29[3] = v46;
        v47 = v30[5];
        *((_BYTE *)v29 + 48) = *((_BYTE *)v30 + 48);
        v29[5] = v47;
        v48 = v30[7];
        *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
        v29[7] = v48;
        v49 = *(int *)(v31 + 40);
        v50 = (char *)v29 + v49;
        v51 = (char *)v30 + v49;
        swift_bridgeObjectRetain();
        v27((uint64_t)v50, (uint64_t)v51, v26);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v52 = v22[10];
      v53 = (_BYTE *)(a1 + v52);
      v54 = (_BYTE *)(a2 + v52);
      v55 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v56 = *(_QWORD *)(v55 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
      {
        v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v53 = *(_QWORD *)v54;
        v53[8] = v54[8];
        v27((uint64_t)&v53[*(int *)(v55 + 24)], (uint64_t)&v54[*(int *)(v55 + 24)], v26);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v5 = (int *)type metadata accessor for AspireApiPECConfig(0);
    v6 = v5[9];
    v7 = a1 + v6;
    v8 = a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v10(v7, v8, v9);
    v11 = v5[10];
    v12 = (_OWORD *)(a1 + v11);
    v13 = (_OWORD *)(a2 + v11);
    v14 = type metadata accessor for AspireHeEncryptionParameters(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      *v12 = *v13;
      v29 = *((_QWORD *)v13 + 3);
      *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
      *((_QWORD *)v12 + 3) = v29;
      *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
      *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
      *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
      *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
      *((_BYTE *)v12 + 64) = *((_BYTE *)v13 + 64);
      v10((uint64_t)v12 + *(int *)(v14 + 40), (uint64_t)v13 + *(int *)(v14 + 40), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v30 = v5[11];
    v31 = (char *)(a1 + v30);
    v32 = (char *)(a2 + v30);
    v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v43 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v32, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v10((uint64_t)v31, (uint64_t)v32, v9);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v31, 0, 1, v43);
      }
      v10((uint64_t)&v31[*(int *)(v33 + 20)], (uint64_t)&v32[*(int *)(v33 + 20)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v17 = (int *)type metadata accessor for AspireApiPIRConfig(0);
    v18 = v17[8];
    v19 = a1 + v18;
    v20 = a2 + v18;
    v21 = type metadata accessor for UnknownStorage();
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v19, v20, v21);
    v23 = v17[9];
    v24 = (_OWORD *)(a1 + v23);
    v25 = (_OWORD *)(a2 + v23);
    v26 = type metadata accessor for AspireHeEncryptionParameters(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *v24 = *v25;
      v36 = *((_QWORD *)v25 + 3);
      *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
      *((_QWORD *)v24 + 3) = v36;
      *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
      *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
      *((_BYTE *)v24 + 48) = *((_BYTE *)v25 + 48);
      *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
      *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
      v22((uint64_t)v24 + *(int *)(v26 + 40), (uint64_t)v25 + *(int *)(v26 + 40), v21);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v37 = v17[10];
    v38 = (_BYTE *)(a1 + v37);
    v39 = (_BYTE *)(a2 + v37);
    v40 = type metadata accessor for AspirePirKeywordPirParameters(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v22((uint64_t)&v38[*(int *)(v40 + 24)], (uint64_t)&v39[*(int *)(v40 + 24)], v21);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AspireApiConfig.OneOf_Config);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v5 = (int *)type metadata accessor for AspireApiPECConfig(0);
      v6 = v5[9];
      v7 = a1 + v6;
      v8 = a2 + v6;
      v9 = type metadata accessor for UnknownStorage();
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      v10(v7, v8, v9);
      v11 = v5[10];
      v12 = (_OWORD *)(a1 + v11);
      v13 = (_OWORD *)(a2 + v11);
      v14 = type metadata accessor for AspireHeEncryptionParameters(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        *v12 = *v13;
        v29 = *((_QWORD *)v13 + 3);
        *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
        *((_QWORD *)v12 + 3) = v29;
        *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
        *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
        *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
        *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
        *((_BYTE *)v12 + 64) = *((_BYTE *)v13 + 64);
        v10((uint64_t)v12 + *(int *)(v14 + 40), (uint64_t)v13 + *(int *)(v14 + 40), v9);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v30 = v5[11];
      v31 = (char *)(a1 + v30);
      v32 = (char *)(a2 + v30);
      v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v43 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v44 = *(_QWORD *)(v43 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v32, 1, v43))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v10((uint64_t)v31, (uint64_t)v32, v9);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v31, 0, 1, v43);
        }
        v10((uint64_t)&v31[*(int *)(v33 + 20)], (uint64_t)&v32[*(int *)(v33 + 20)], v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      v17 = (int *)type metadata accessor for AspireApiPIRConfig(0);
      v18 = v17[8];
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v22(v19, v20, v21);
      v23 = v17[9];
      v24 = (_OWORD *)(a1 + v23);
      v25 = (_OWORD *)(a2 + v23);
      v26 = type metadata accessor for AspireHeEncryptionParameters(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        *v24 = *v25;
        v36 = *((_QWORD *)v25 + 3);
        *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
        *((_QWORD *)v24 + 3) = v36;
        *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
        *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
        *((_BYTE *)v24 + 48) = *((_BYTE *)v25 + 48);
        *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
        *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
        v22((uint64_t)v24 + *(int *)(v26 + 40), (uint64_t)v25 + *(int *)(v26 + 40), v21);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v37 = v17[10];
      v38 = (_BYTE *)(a1 + v37);
      v39 = (_BYTE *)(a2 + v37);
      v40 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v38 = *(_QWORD *)v39;
        v38[8] = v39[8];
        v22((uint64_t)&v38[*(int *)(v40 + 24)], (uint64_t)&v39[*(int *)(v40 + 24)], v21);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspireApiConfig.OneOf_Config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AMDPbHEConfig.OneOf_Config(a1, a2, a3, type metadata accessor for AspireApiPIRConfig, type metadata accessor for AspireApiPECConfig);
}

uint64_t getEnumTagSinglePayload for AspireApiConfigResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CCC3F0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiConfigResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237CCC478(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireApiRequests()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireApiRequests()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for AspireApiResponses()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireApiResponses()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for AspireApiRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void (*v80)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  void *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  void *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  unsigned int (*v205)(char *, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  unsigned int (*v208)(char *, uint64_t, uint64_t);
  void (*v209)(char *, char *, void *);
  char *v210;
  int *__dst;
  void *__dsta;
  char *__dstb;
  char *__dstc;
  void (*v215)(char *, char *, uint64_t);
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;

  v3 = a2;
  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v220 = v9;
      v218 = v11;
      v217 = v12;
      v219 = v3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v16 = v10[1];
        *v9 = *v10;
        v9[1] = v16;
        v17 = v10[2];
        v18 = v10[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v17, v18);
        v220[2] = v17;
        v220[3] = v18;
        v19 = (int *)type metadata accessor for AspireApiPECRequest(0);
        v20 = v19[7];
        v21 = (char *)v220 + v20;
        v22 = (char *)v10 + v20;
        v23 = type metadata accessor for UnknownStorage();
        v24 = v22;
        v25 = v220;
        v215 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
        v215(v21, v24, v23);
        v26 = v19[8];
        v27 = (_QWORD *)((char *)v220 + v26);
        v28 = (_QWORD *)((char *)v10 + v26);
        v29 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        v30 = *(_QWORD *)(v29 - 8);
        v208 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
        __dst = (int *)v29;
        v204 = v30;
        if (v208((char *)v28, 1, v29))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
          v32 = v215;
        }
        else
        {
          v47 = v28[1];
          *v27 = *v28;
          v48 = v28[2];
          outlined copy of Data._Representation(v47, v48);
          v27[1] = v47;
          v27[2] = v48;
          v25 = v220;
          v49 = __dst[6];
          v50 = (char *)v28 + v49;
          v32 = v215;
          v215((char *)v27 + v49, v50, v23);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, __dst);
        }
        v51 = v19[9];
        v52 = (char *)v25 + v51;
        v53 = (char *)v10 + v51;
        v54 = type metadata accessor for AspireApiEvaluationKey(0);
        v55 = *(_QWORD *)(v54 - 8);
        v3 = v219;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
          v57 = v218;
          v58 = v217;
          v59 = v220;
        }
        else
        {
          v196 = v55;
          v32(v52, v53, v23);
          v199 = v54;
          v71 = *(int *)(v54 + 20);
          v72 = &v52[v71];
          v73 = v32;
          v74 = &v53[v71];
          v201 = v52;
          v194 = v23;
          if (v208(&v53[v71], 1, (uint64_t)__dst))
          {
            v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v72, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
            v76 = v199;
            v59 = v220;
          }
          else
          {
            v97 = *((_QWORD *)v74 + 1);
            *(_QWORD *)v72 = *(_QWORD *)v74;
            v98 = *((_QWORD *)v74 + 2);
            outlined copy of Data._Representation(v97, v98);
            *((_QWORD *)v72 + 1) = v97;
            *((_QWORD *)v72 + 2) = v98;
            v52 = v201;
            v59 = v220;
            v73(&v72[__dst[6]], &v74[__dst[6]], v23);
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v204 + 56))(v72, 0, 1, __dst);
            v76 = v199;
          }
          v99 = v76;
          v100 = *(int *)(v76 + 24);
          v101 = &v52[v100];
          v102 = &v53[v100];
          v103 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          v104 = *(_QWORD *)(v103 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
          {
            v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
            v57 = v218;
            v58 = v217;
            v106 = v99;
            v107 = v196;
          }
          else
          {
            v192 = v104;
            v215(v101, v102, v194);
            v206 = v103;
            v210 = v101;
            v118 = *(int *)(v103 + 20);
            __dstb = &v101[v118];
            v119 = &v102[v118];
            v120 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v121 = *(_QWORD *)(v120 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
            {
              v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(__dstb, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
            }
            else
            {
              *(_QWORD *)__dstb = *(_QWORD *)v119;
              v129 = *(int *)(v120 + 20);
              v189 = &__dstb[v129];
              v130 = &v119[v129];
              swift_bridgeObjectRetain();
              v131 = v130;
              v59 = v220;
              v215(v189, v131, v194);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(__dstb, 0, 1, v120);
            }
            v133 = v206;
            v132 = v210;
            v134 = *(int *)(v206 + 24);
            v135 = &v210[v134];
            v136 = &v102[v134];
            v137 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v138 = *(_QWORD *)(v137 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v136, 1, v137))
            {
              v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
              v107 = v196;
              v106 = v199;
            }
            else
            {
              v186 = v138;
              v215(v135, v136, v194);
              v190 = (void *)v137;
              v150 = *(int *)(v137 + 20);
              __dstc = v135;
              v151 = &v135[v150];
              v152 = &v136[v150];
              v153 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v154 = *(_QWORD *)(v153 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
              {
                v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
                v59 = v220;
                v107 = v196;
                v106 = v199;
                v133 = v206;
                v132 = v210;
              }
              else
              {
                v215(v151, v152, v194);
                v162 = *(int *)(v153 + 20);
                v184 = &v151[v162];
                v163 = &v152[v162];
                v164 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v182 = *(_QWORD *)(v164 - 8);
                v106 = v199;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v163, 1, v164))
                {
                  v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v184, v163, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v184 = *(_QWORD *)v163;
                  v171 = *(int *)(v164 + 20);
                  v180 = &v184[v171];
                  v172 = &v163[v171];
                  swift_bridgeObjectRetain();
                  v215(v180, v172, v194);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v184, 0, 1, v164);
                }
                v133 = v206;
                v132 = v210;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
                v59 = v220;
                v107 = v196;
              }
              (*(void (**)(char *, _QWORD, uint64_t, void *))(v186 + 56))(__dstc, 0, 1, v190);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v192 + 56))(v132, 0, 1, v133);
            v57 = v218;
            v58 = v217;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v201, 0, 1, v106);
        }
      }
      else
      {
        v216 = v6;
        *(_DWORD *)v9 = *(_DWORD *)v10;
        v33 = v10[1];
        v34 = v10[2];
        outlined copy of Data._Representation(v33, v34);
        v9[1] = v33;
        v9[2] = v34;
        v35 = (int *)type metadata accessor for AspireApiPIRRequest(0);
        v36 = v35[6];
        v37 = (char *)v9 + v36;
        v38 = (char *)v10 + v36;
        v39 = type metadata accessor for UnknownStorage();
        v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
        v40(v37, v38, v39);
        v41 = v35[7];
        v42 = (_QWORD *)((char *)v9 + v41);
        v43 = (_QWORD *)((char *)v10 + v41);
        v44 = type metadata accessor for AspirePirEncryptedIndices(0);
        v45 = *(_QWORD *)(v44 - 8);
        v209 = (void (*)(char *, char *, void *))v40;
        __dsta = (void *)v39;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          v60 = v43[1];
          *v42 = *v43;
          v42[1] = v60;
          v61 = *(int *)(v44 + 24);
          v62 = (char *)v42 + v61;
          v63 = (char *)v43 + v61;
          swift_bridgeObjectRetain();
          v64 = v62;
          v9 = v220;
          v40(v64, v63, v39);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
        }
        v65 = v35[8];
        v66 = (_QWORD *)((char *)v9 + v65);
        v67 = (_QWORD *)((char *)v10 + v65);
        v68 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        v69 = *(_QWORD *)(v68 - 8);
        v205 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
        v6 = v216;
        v3 = v219;
        v198 = v69;
        if (v205((char *)v67, 1, v68))
        {
          v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          v77 = v67[1];
          *v66 = *v67;
          v202 = v68;
          v78 = v69;
          v79 = v67[2];
          outlined copy of Data._Representation(v77, v79);
          v66[1] = v77;
          v66[2] = v79;
          v9 = v220;
          v209((char *)v66 + *(int *)(v202 + 24), (char *)v67 + *(int *)(v202 + 24), __dsta);
          v80 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v78 + 56);
          v68 = v202;
          v80(v66, 0, 1, v202);
        }
        v81 = v35[9];
        v82 = (_QWORD *)((char *)v9 + v81);
        v83 = (_QWORD *)((char *)v10 + v81);
        v84 = v83[1];
        *v82 = *v83;
        v82[1] = v84;
        v85 = v35[10];
        v86 = (char *)v9 + v85;
        v87 = (char *)v10 + v85;
        v88 = type metadata accessor for AspireApiEvaluationKey(0);
        v89 = *(_QWORD *)(v88 - 8);
        v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48);
        swift_bridgeObjectRetain();
        if (v90(v87, 1, v88))
        {
          v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
          v59 = v220;
          v57 = v218;
          v58 = v217;
        }
        else
        {
          v195 = v89;
          v92 = __dsta;
          v209(v86, v87, __dsta);
          v93 = *(int *)(v88 + 20);
          v203 = v86;
          v94 = &v86[v93];
          v95 = &v87[v93];
          if (v205(&v87[v93], 1, v68))
          {
            v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
          }
          else
          {
            v108 = *((_QWORD *)v95 + 1);
            *(_QWORD *)v94 = *(_QWORD *)v95;
            v109 = *((_QWORD *)v95 + 2);
            outlined copy of Data._Representation(v108, v109);
            *((_QWORD *)v94 + 1) = v108;
            *((_QWORD *)v94 + 2) = v109;
            v92 = __dsta;
            v6 = v216;
            v209(&v94[*(int *)(v68 + 24)], &v95[*(int *)(v68 + 24)], __dsta);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v198 + 56))(v94, 0, 1, v68);
          }
          v59 = v220;
          v110 = *(int *)(v88 + 24);
          v111 = &v203[v110];
          v112 = &v87[v110];
          v113 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          v114 = *(_QWORD *)(v113 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
          {
            v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
            v57 = v218;
            v58 = v217;
            v116 = v195;
            v117 = v203;
          }
          else
          {
            v193 = v114;
            v209(v111, v112, v92);
            v123 = *(int *)(v113 + 20);
            v200 = v111;
            v188 = &v111[v123];
            v124 = &v112[v123];
            v125 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v126 = v92;
            v127 = *(_QWORD *)(v125 - 8);
            v207 = v113;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v124, 1, v125))
            {
              v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v188, v124, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v188 = *(_QWORD *)v124;
              v140 = *(int *)(v125 + 20);
              v185 = &v188[v140];
              v141 = &v124[v140];
              swift_bridgeObjectRetain();
              v142 = v141;
              v59 = v220;
              v209(v185, v142, v126);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v188, 0, 1, v125);
            }
            v6 = v216;
            v117 = v203;
            v143 = *(int *)(v207 + 24);
            v144 = &v200[v143];
            v145 = &v112[v143];
            v146 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v147 = *(_QWORD *)(v146 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
            {
              v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
              v149 = v200;
            }
            else
            {
              v209(v144, v145, __dsta);
              v197 = v146;
              v156 = *(int *)(v146 + 20);
              v157 = &v144[v156];
              v158 = &v145[v156];
              v159 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v160 = *(_QWORD *)(v159 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
              {
                v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
                v59 = v220;
                v6 = v216;
                v149 = v200;
              }
              else
              {
                v191 = v144;
                v209(v157, v158, __dsta);
                v166 = *(int *)(v159 + 20);
                v187 = v157;
                v167 = &v157[v166];
                v168 = &v158[v166];
                v169 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v183 = *(_QWORD *)(v169 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48))(v168, 1, v169))
                {
                  v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v167 = *(_QWORD *)v168;
                  v173 = *(int *)(v169 + 20);
                  v181 = &v167[v173];
                  v174 = &v168[v173];
                  swift_bridgeObjectRetain();
                  v209(v181, v174, __dsta);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v167, 0, 1, v169);
                }
                v117 = v203;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v160 + 56))(v187, 0, 1, v159);
                v59 = v220;
                v6 = v216;
                v149 = v200;
                v144 = v191;
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v197);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v149, 0, 1, v207);
            v57 = v218;
            v58 = v217;
            v116 = v195;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v117, 0, 1, v88);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
    }
    v175 = *(int *)(v6 + 24);
    v176 = (char *)v4 + v175;
    v177 = (char *)v3 + v175;
    v178 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v178 - 8) + 16))(v176, v177, v178);
  }
  return v4;
}

uint64_t destroy for AspireApiRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
    goto LABEL_2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
    v9 = (int *)type metadata accessor for AspireApiPECRequest(0);
    v10 = v4 + v9[7];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v10, v11);
    v13 = v4 + v9[8];
    v14 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
    if (!v15(v13, 1, v14))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16));
      v12(v13 + *(int *)(v14 + 24), v11);
    }
    v16 = v4 + v9[9];
    v17 = type metadata accessor for AspireApiEvaluationKey(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
    {
      v12(v16, v11);
      v18 = v16 + *(int *)(v17 + 20);
      if (!v15(v18, 1, v14))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 16));
        v12(v18 + *(int *)(v14 + 24), v11);
      }
      v19 = *(int *)(v17 + 24);
LABEL_18:
      v29 = v16 + v19;
      v30 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30))
      {
        v12(v29, v11);
        v31 = v29 + *(int *)(v30 + 20);
        v32 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v31, 1, v32))
        {
          swift_bridgeObjectRelease();
          v12(v31 + *(int *)(v32 + 20), v11);
        }
        v33 = v29 + *(int *)(v30 + 24);
        v34 = type metadata accessor for AspireHeSerializedRelinKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34))
        {
          v12(v33, v11);
          v35 = v33 + *(int *)(v34 + 20);
          v36 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
          {
            v12(v35, v11);
            v37 = v35 + *(int *)(v36 + 20);
            v38 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38))
            {
              swift_bridgeObjectRelease();
              v12(v37 + *(int *)(v38 + 20), v11);
            }
          }
        }
      }
    }
  }
  else
  {
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16));
    v20 = (int *)type metadata accessor for AspireApiPIRRequest(0);
    v21 = v4 + v20[6];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v21, v11);
    v22 = v4 + v20[7];
    v23 = type metadata accessor for AspirePirEncryptedIndices(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
    {
      swift_bridgeObjectRelease();
      v12(v22 + *(int *)(v23 + 24), v11);
    }
    v24 = v4 + v20[8];
    v25 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48);
    if (!v26(v24, 1, v25))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v24 + 8), *(_QWORD *)(v24 + 16));
      v12(v24 + *(int *)(v25 + 24), v11);
    }
    swift_bridgeObjectRelease();
    v16 = v4 + v20[10];
    v27 = type metadata accessor for AspireApiEvaluationKey(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v16, 1, v27))
    {
      v12(v16, v11);
      v28 = v16 + *(int *)(v27 + 20);
      if (!v26(v28, 1, v25))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v28 + 8), *(_QWORD *)(v28 + 16));
        v12(v28 + *(int *)(v25 + 24), v11);
      }
      v19 = *(int *)(v27 + 24);
      goto LABEL_18;
    }
  }
LABEL_2:
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for AspireApiRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v169;
  char *v170;
  char *__dst;
  void (**__dsta)(char *, _QWORD, uint64_t, uint64_t);
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  unsigned int (*v192)(char *, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int (*v197)(char *, uint64_t, uint64_t);
  char *v198;
  char *v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  void (*v204)(char *, char *, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v206 = v10;
    v207 = v3;
    v205 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v200 = v5;
      v14 = v9[1];
      *v8 = *v9;
      v8[1] = v14;
      v15 = v9[2];
      v16 = v9[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v15, v16);
      v8[2] = v15;
      v8[3] = v16;
      v17 = (int *)type metadata accessor for AspireApiPECRequest(0);
      v18 = v17[7];
      v19 = (char *)v8 + v18;
      v20 = (char *)v9 + v18;
      v21 = v8;
      v22 = type metadata accessor for UnknownStorage();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v19, v20, v22);
      v24 = v17[8];
      v203 = v21;
      v25 = (_QWORD *)((char *)v21 + v24);
      v26 = (_QWORD *)((char *)v9 + v24);
      v27 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v192 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48);
      v196 = *(_QWORD *)(v27 - 8);
      if (v192((char *)v26, 1, v27))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v42 = v26[1];
        *v25 = *v26;
        v43 = v26[2];
        outlined copy of Data._Representation(v42, v43);
        v25[1] = v42;
        v25[2] = v43;
        v23((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v22);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v25, 0, 1, v27);
      }
      v44 = v17[9];
      v45 = (char *)v203 + v44;
      v46 = (char *)v9 + v44;
      v47 = type metadata accessor for AspireApiEvaluationKey(0);
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        v50 = v206;
        v3 = v207;
        v51 = v205;
        v8 = v203;
        v5 = v200;
      }
      else
      {
        v188 = v48;
        v23(v45, v46, v22);
        v62 = *(int *)(v47 + 20);
        v63 = &v45[v62];
        v64 = &v46[v62];
        v190 = v45;
        if (v192(&v46[v62], 1, v27))
        {
          v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        }
        else
        {
          v86 = *((_QWORD *)v64 + 1);
          *(_QWORD *)v63 = *(_QWORD *)v64;
          v87 = *((_QWORD *)v64 + 2);
          outlined copy of Data._Representation(v86, v87);
          *((_QWORD *)v63 + 1) = v86;
          *((_QWORD *)v63 + 2) = v87;
          v45 = v190;
          v23(&v63[*(int *)(v27 + 24)], &v64[*(int *)(v27 + 24)], v22);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v63, 0, 1, v27);
        }
        v88 = v188;
        v89 = *(int *)(v47 + 24);
        v90 = &v45[v89];
        v91 = &v46[v89];
        v92 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v93 = *(_QWORD *)(v92 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
        {
          v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
          v50 = v206;
          v3 = v207;
          v51 = v205;
          v8 = v203;
          v5 = v200;
        }
        else
        {
          v194 = v93;
          v23(v90, v91, v22);
          v105 = *(int *)(v92 + 20);
          v198 = v90;
          v106 = &v90[v105];
          v107 = &v91[v105];
          v108 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v109 = *(_QWORD *)(v108 - 8);
          v183 = v23;
          v186 = v22;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
          {
            v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v106 = *(_QWORD *)v107;
            v118 = *(int *)(v108 + 20);
            v177 = &v106[v118];
            v180 = v106;
            v119 = &v107[v118];
            swift_bridgeObjectRetain();
            v23(v177, v119, v22);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v180, 0, 1, v108);
          }
          v8 = v203;
          v120 = v198;
          v5 = v200;
          v121 = *(int *)(v92 + 24);
          v122 = &v198[v121];
          v123 = &v91[v121];
          v124 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v125 = *(_QWORD *)(v124 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
          {
            v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
            v88 = v188;
          }
          else
          {
            v175 = v125;
            v183(v122, v123, v186);
            v178 = v124;
            v181 = v122;
            v137 = *(int *)(v124 + 20);
            v138 = &v122[v137];
            v139 = &v123[v137];
            v140 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v141 = *(_QWORD *)(v140 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
            {
              v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
              v88 = v188;
              v8 = v203;
              v5 = v200;
              v143 = v175;
            }
            else
            {
              v183(v138, v139, v186);
              v152 = *(int *)(v140 + 20);
              __dst = &v138[v152];
              v173 = v138;
              v153 = &v139[v152];
              v154 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v155 = *(_QWORD *)(v154 - 8);
              v143 = v175;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
              {
                v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(__dst, v153, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
              }
              else
              {
                *(_QWORD *)__dst = *(_QWORD *)v153;
                v161 = *(int *)(v154 + 20);
                v169 = &__dst[v161];
                v162 = &v153[v161];
                swift_bridgeObjectRetain();
                v183(v169, v162, v186);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(__dst, 0, 1, v154);
              }
              v8 = v203;
              v5 = v200;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v173, 0, 1, v140);
              v88 = v188;
              v120 = v198;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v181, 0, 1, v178);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v194 + 56))(v120, 0, 1, v92);
          v50 = v206;
          v3 = v207;
          v51 = v205;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v190, 0, 1, v47);
      }
    }
    else
    {
      v202 = v4;
      *(_DWORD *)v8 = *(_DWORD *)v9;
      v29 = v9[1];
      v30 = v9[2];
      outlined copy of Data._Representation(v29, v30);
      v8[1] = v29;
      v8[2] = v30;
      v31 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      v32 = v31[6];
      v33 = (char *)v8 + v32;
      v34 = (char *)v9 + v32;
      v35 = type metadata accessor for UnknownStorage();
      v204 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
      v204(v33, v34, v35);
      v36 = v31[7];
      v37 = (_QWORD *)((char *)v8 + v36);
      v38 = (_QWORD *)((char *)v9 + v36);
      v39 = type metadata accessor for AspirePirEncryptedIndices(0);
      v40 = *(_QWORD *)(v39 - 8);
      v201 = v35;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        v52 = v38[1];
        *v37 = *v38;
        v37[1] = v52;
        v53 = *(int *)(v39 + 24);
        v54 = (char *)v37 + v53;
        v55 = (char *)v38 + v53;
        swift_bridgeObjectRetain();
        v204(v54, v55, v35);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      v56 = v31[8];
      v57 = (_QWORD *)((char *)v8 + v56);
      v58 = (_QWORD *)((char *)v9 + v56);
      v59 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v60 = *(_QWORD *)(v59 - 8);
      v197 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
      v4 = v202;
      v193 = v60;
      if (v197((char *)v58, 1, v59))
      {
        v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        v66 = v60;
        v67 = v58[1];
        *v57 = *v58;
        v68 = v58[2];
        outlined copy of Data._Representation(v67, v68);
        v57[1] = v67;
        v57[2] = v68;
        v204((char *)v57 + *(int *)(v59 + 24), (char *)v58 + *(int *)(v59 + 24), v201);
        v69 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v66 + 56);
        v4 = v202;
        v69(v57, 0, 1, v59);
      }
      v70 = v31[9];
      v71 = (_QWORD *)((char *)v8 + v70);
      v72 = (_QWORD *)((char *)v9 + v70);
      v73 = v72[1];
      *v71 = *v72;
      v71[1] = v73;
      v74 = v31[10];
      v75 = (char *)v8 + v74;
      v76 = (char *)v9 + v74;
      v77 = type metadata accessor for AspireApiEvaluationKey(0);
      v78 = *(_QWORD *)(v77 - 8);
      v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
      swift_bridgeObjectRetain();
      if (v79(v76, 1, v77))
      {
        v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        v50 = v206;
        v3 = v207;
        v51 = v205;
      }
      else
      {
        v189 = v78;
        v81 = v204;
        v204(v75, v76, v201);
        v82 = *(int *)(v77 + 20);
        v191 = v75;
        v83 = &v75[v82];
        v84 = &v76[v82];
        if (v197(&v76[v82], 1, v59))
        {
          v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
        else
        {
          v95 = *((_QWORD *)v84 + 1);
          *(_QWORD *)v83 = *(_QWORD *)v84;
          v96 = *((_QWORD *)v84 + 2);
          outlined copy of Data._Representation(v95, v96);
          *((_QWORD *)v83 + 1) = v95;
          *((_QWORD *)v83 + 2) = v96;
          v4 = v202;
          v81 = v204;
          v204(&v83[*(int *)(v59 + 24)], &v84[*(int *)(v59 + 24)], v201);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v83, 0, 1, v59);
        }
        v97 = v191;
        v98 = *(int *)(v77 + 24);
        v99 = &v191[v98];
        v100 = &v76[v98];
        v101 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v102 = *(_QWORD *)(v101 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
        {
          v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
          v50 = v206;
          v3 = v207;
          v51 = v205;
          v104 = v189;
        }
        else
        {
          v187 = v102;
          v111 = v201;
          v81(v99, v100, v201);
          v195 = v101;
          v199 = v99;
          v112 = *(int *)(v101 + 20);
          v113 = &v99[v112];
          v114 = &v100[v112];
          v115 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v116 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v113 = *(_QWORD *)v114;
            v127 = *(int *)(v115 + 20);
            v184 = &v113[v127];
            v128 = &v114[v127];
            swift_bridgeObjectRetain();
            v129 = v128;
            v111 = v201;
            v4 = v202;
            v204(v184, v129, v201);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
          }
          v130 = v189;
          v131 = *(int *)(v195 + 24);
          v132 = &v199[v131];
          v133 = &v100[v131];
          v134 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v135 = *(_QWORD *)(v134 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
          {
            v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
            v97 = v191;
          }
          else
          {
            v179 = v135;
            v204(v132, v133, v111);
            v182 = v134;
            v185 = v132;
            v144 = *(int *)(v134 + 20);
            v145 = &v132[v144];
            v146 = &v133[v144];
            v147 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v148 = v111;
            v149 = *(_QWORD *)(v147 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v146, 1, v147))
            {
              v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
              v130 = v189;
              v97 = v191;
              v151 = v185;
            }
            else
            {
              v204(v145, v146, v148);
              v157 = *(int *)(v147 + 20);
              v176 = &v145[v157];
              v158 = &v146[v157];
              v159 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              __dsta = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v159 - 8);
              if (((unsigned int (*)(char *, uint64_t, uint64_t))__dsta[6])(v158, 1, v159))
              {
                v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v176, v158, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v176 = *(_QWORD *)v158;
                v163 = *(int *)(v159 + 20);
                v170 = &v176[v163];
                v174 = &v158[v163];
                swift_bridgeObjectRetain();
                v204(v170, v174, v201);
                __dsta[7](v176, 0, 1, v159);
              }
              v130 = v189;
              v97 = v191;
              v151 = v185;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v145, 0, 1, v147);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v151, 0, 1, v182);
          }
          v104 = v130;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v187 + 56))(v199, 0, 1, v195);
          v50 = v206;
          v3 = v207;
          v51 = v205;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v97, 0, 1, v77);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v8, 0, 1, v50);
  }
  v164 = *(int *)(v3 + 24);
  v165 = (char *)v5 + v164;
  v166 = (char *)v4 + v164;
  v167 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 16))(v165, v166, v167);
  return v5;
}

_QWORD *assignWithCopy for AspireApiRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int (*v132)(_QWORD, _QWORD, _QWORD);
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  void (*v163)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int (*v172)(char *, uint64_t, uint64_t);
  uint64_t v173;
  uint64_t v174;
  char *v175;
  void (*v176)(char *, char *, uint64_t);
  char *v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(char *, char *, uint64_t);
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  void (*v224)(char *, char *, uint64_t);
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  void (*v255)(char *, char *, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  uint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *__dst;
  char *__dsta;
  char *__dstd;
  void *__dstb;
  char *__dstc;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  char *v352;
  char *v353;
  uint64_t v354;
  unsigned int (*v355)(_QWORD, _QWORD, _QWORD);
  char *v356;
  _QWORD *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int (*v366)(char *, uint64_t, uint64_t);
  char *v367;
  unsigned int (*v368)(char *, uint64_t, uint64_t);
  uint64_t v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  char *v374;
  unsigned int (*v375)(char *, uint64_t, uint64_t);
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  void (*v383)(char *, char *, uint64_t);
  int *v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  void (*v388)(char *, char *, uint64_t);
  void (*v389)(char *, char *, uint64_t);
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  _QWORD *v395;
  _QWORD *v396;
  _QWORD *v397;
  _QWORD *v398;
  uint64_t v399;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)v5 + v6);
  v8 = (_QWORD *)((char *)v4 + v6);
  v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v387 = v10;
      v398 = v7;
      v399 = v9;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v390 = a3;
        *v7 = *v8;
        v7[1] = v8[1];
        v14 = v8[2];
        v15 = v8[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v14, v15);
        v7[2] = v14;
        v7[3] = v15;
        v16 = (int *)type metadata accessor for AspireApiPECRequest(0);
        v17 = v16[7];
        v18 = (char *)v7 + v17;
        v19 = (char *)v8 + v17;
        v20 = type metadata accessor for UnknownStorage();
        v21 = v7;
        v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
        v22(v18, v19, v20);
        v23 = v16[8];
        v24 = (_QWORD *)((char *)v21 + v23);
        v25 = (_QWORD *)((char *)v8 + v23);
        v26 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        v27 = *(_QWORD *)(v26 - 8);
        v375 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
        v381 = v20;
        v365 = v27;
        if (v375((char *)v25, 1, v26))
        {
          v28 = v22;
          v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          *v24 = *v25;
          v357 = v5;
          v59 = v27;
          v396 = v4;
          v60 = v25[1];
          v61 = v25[2];
          outlined copy of Data._Representation(v60, v61);
          v24[1] = v60;
          v24[2] = v61;
          v4 = v396;
          v62 = v20;
          v28 = v22;
          v22((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v62);
          v63 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56);
          v5 = v357;
          v63(v24, 0, 1, v26);
        }
        v64 = v16[9];
        v65 = (char *)v398 + v64;
        v66 = (char *)v8 + v64;
        v67 = type metadata accessor for AspireApiEvaluationKey(0);
        v68 = *(_QWORD *)(v67 - 8);
        a3 = v390;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
          v70 = v399;
          v71 = v387;
        }
        else
        {
          v348 = v68;
          v28(v65, v66, v381);
          v352 = v65;
          v359 = v67;
          v95 = *(int *)(v67 + 20);
          v96 = &v65[v95];
          v97 = &v66[v95];
          v397 = v4;
          if (v375(&v66[v95], 1, v26))
          {
            v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v96 = *(_QWORD *)v97;
            v135 = *((_QWORD *)v97 + 1);
            v136 = *((_QWORD *)v97 + 2);
            outlined copy of Data._Representation(v135, v136);
            *((_QWORD *)v96 + 1) = v135;
            *((_QWORD *)v96 + 2) = v136;
            a3 = v390;
            v28(&v96[*(int *)(v26 + 24)], &v97[*(int *)(v26 + 24)], v381);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v365 + 56))(v96, 0, 1, v26);
          }
          v137 = *(int *)(v359 + 24);
          v138 = &v65[v137];
          v139 = &v66[v137];
          v140 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          v141 = *(_QWORD *)(v140 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
          {
            v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
            v71 = v387;
          }
          else
          {
            v28(v138, v139, v381);
            v174 = *(int *)(v140 + 20);
            v379 = v138;
            v175 = &v138[v174];
            v176 = v28;
            v177 = &v139[v174];
            v178 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v179 = *(_QWORD *)(v178 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v179 + 48))(v177, 1, v178))
            {
              v180 = v176;
              v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v175, v177, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v175 = *(_QWORD *)v177;
              v203 = *(int *)(v178 + 20);
              v371 = v141;
              v204 = &v175[v203];
              v205 = &v177[v203];
              swift_bridgeObjectRetain();
              v206 = v204;
              v141 = v371;
              v180 = v176;
              v176(v206, v205, v381);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v175, 0, 1, v178);
            }
            v207 = *(int *)(v140 + 24);
            v208 = &v379[v207];
            v209 = &v139[v207];
            v210 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v211 = *(_QWORD *)(v210 - 8);
            v65 = v352;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48))(v209, 1, v210))
            {
              v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
              v71 = v387;
              v213 = v379;
            }
            else
            {
              v180(v208, v209, v381);
              v344 = v210;
              v240 = *(int *)(v210 + 20);
              v373 = v208;
              v241 = &v208[v240];
              v242 = &v209[v240];
              v243 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v244 = *(_QWORD *)(v243 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v244 + 48))(v242, 1, v243))
              {
                v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v241, v242, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
              }
              else
              {
                v180(v241, v242, v381);
                v268 = *(int *)(v243 + 20);
                __dsta = &v241[v268];
                v269 = &v242[v268];
                v270 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v335 = *(_QWORD *)(v270 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v335 + 48))(v269, 1, v270))
                {
                  v271 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(__dsta, v269, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)__dsta = *(_QWORD *)v269;
                  v301 = *(int *)(v270 + 20);
                  v331 = &__dsta[v301];
                  v302 = &v269[v301];
                  swift_bridgeObjectRetain();
                  v180(v331, v302, v381);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(__dsta, 0, 1, v270);
                }
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v244 + 56))(v241, 0, 1, v243);
              }
              v71 = v387;
              v65 = v352;
              v213 = v379;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v211 + 56))(v373, 0, 1, v344);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v213, 0, 1, v140);
            a3 = v390;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v348 + 56))(v65, 0, 1, v359);
          v4 = v397;
          v70 = v399;
        }
        v89 = v398;
      }
      else
      {
        v395 = v4;
        *(_DWORD *)v7 = *(_DWORD *)v8;
        v44 = v8[1];
        v45 = v8[2];
        outlined copy of Data._Representation(v44, v45);
        v7[1] = v44;
        v7[2] = v45;
        v46 = (int *)type metadata accessor for AspireApiPIRRequest(0);
        v47 = v46[6];
        v48 = (char *)v7 + v47;
        v49 = (char *)v8 + v47;
        v50 = v7;
        v51 = type metadata accessor for UnknownStorage();
        v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
        v52(v48, v49, v51);
        v53 = v46[7];
        v54 = (_QWORD *)((char *)v50 + v53);
        v55 = (_QWORD *)((char *)v8 + v53);
        v56 = type metadata accessor for AspirePirEncryptedIndices(0);
        v57 = *(_QWORD *)(v56 - 8);
        v377 = v51;
        v383 = v52;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
        {
          v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        else
        {
          *v54 = *v55;
          v54[1] = v55[1];
          v86 = *(int *)(v56 + 24);
          v367 = (char *)v54 + v86;
          v87 = (char *)v55 + v86;
          swift_bridgeObjectRetain();
          v52(v367, v87, v51);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
        }
        v88 = v46[8];
        v89 = v398;
        v90 = (_QWORD *)((char *)v398 + v88);
        v91 = (_QWORD *)((char *)v8 + v88);
        v92 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        v93 = *(_QWORD *)(v92 - 8);
        v368 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
        v358 = v93;
        if (v368((char *)v91, 1, v92))
        {
          v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        }
        else
        {
          *v90 = *v91;
          v392 = a3;
          v99 = v91[1];
          v100 = v91[2];
          outlined copy of Data._Representation(v99, v100);
          v90[1] = v99;
          v90[2] = v100;
          a3 = v392;
          v383((char *)v90 + *(int *)(v92 + 24), (char *)v91 + *(int *)(v92 + 24), v377);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
        }
        v101 = v46[9];
        v102 = (_QWORD *)((char *)v398 + v101);
        v103 = (_QWORD *)((char *)v8 + v101);
        *v102 = *v103;
        v102[1] = v103[1];
        v104 = v46[10];
        v105 = (char *)v398 + v104;
        v106 = (char *)v8 + v104;
        v107 = type metadata accessor for AspireApiEvaluationKey(0);
        v108 = *(_QWORD *)(v107 - 8);
        v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
        swift_bridgeObjectRetain();
        if (v109(v106, 1, v107))
        {
          v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
          v4 = v395;
          v70 = v399;
          v71 = v387;
        }
        else
        {
          v349 = v108;
          v111 = v383;
          v383(v105, v106, v377);
          v112 = *(int *)(v107 + 20);
          v353 = v105;
          v113 = &v105[v112];
          v114 = &v106[v112];
          if (v368(&v106[v112], 1, v92))
          {
            v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v113 = *(_QWORD *)v114;
            v143 = a3;
            v144 = *((_QWORD *)v114 + 1);
            v145 = *((_QWORD *)v114 + 2);
            outlined copy of Data._Representation(v144, v145);
            *((_QWORD *)v113 + 1) = v144;
            *((_QWORD *)v113 + 2) = v145;
            a3 = v143;
            v111 = v383;
            v89 = v398;
            v383(&v113[*(int *)(v92 + 24)], &v114[*(int *)(v92 + 24)], v377);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v358 + 56))(v113, 0, 1, v92);
          }
          v146 = *(int *)(v107 + 24);
          v147 = v353;
          v148 = &v353[v146];
          v149 = &v106[v146];
          v150 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          v151 = *(_QWORD *)(v150 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
          {
            v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
            v71 = v387;
            v153 = v349;
          }
          else
          {
            v343 = v107;
            v363 = v151;
            v111(v148, v149, v377);
            v182 = *(int *)(v150 + 20);
            v370 = v148;
            v183 = &v148[v182];
            v184 = &v149[v182];
            v185 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v186 = *(_QWORD *)(v185 - 8);
            v393 = a3;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v186 + 48))(v184, 1, v185))
            {
              v187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v183 = *(_QWORD *)v184;
              v214 = *(int *)(v185 + 20);
              v215 = &v183[v214];
              v216 = &v184[v214];
              swift_bridgeObjectRetain();
              v111(v215, v216, v377);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v183, 0, 1, v185);
            }
            v217 = *(int *)(v150 + 24);
            v218 = &v370[v217];
            v219 = &v149[v217];
            v220 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v221 = *(_QWORD *)(v220 - 8);
            v89 = v398;
            v147 = v353;
            v107 = v343;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v221 + 48))(v219, 1, v220))
            {
              v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v218, v219, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
              v71 = v387;
              v153 = v349;
              v223 = v370;
            }
            else
            {
              v383(v218, v219, v377);
              v334 = v220;
              __dst = v218;
              v246 = *(int *)(v220 + 20);
              v247 = &v218[v246];
              v248 = &v219[v246];
              v249 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v250 = *(_QWORD *)(v249 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v250 + 48))(v248, 1, v249))
              {
                v251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
                v71 = v387;
                v89 = v398;
              }
              else
              {
                v383(v247, v248, v377);
                v272 = *(int *)(v249 + 20);
                v330 = v247;
                v326 = &v247[v272];
                v273 = &v248[v272];
                v274 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v275 = *(_QWORD *)(v274 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v275 + 48))(v273, 1, v274))
                {
                  v276 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v326, v273, *(_QWORD *)(*(_QWORD *)(v276 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v326 = *(_QWORD *)v273;
                  v303 = *(int *)(v274 + 20);
                  v324 = &v326[v303];
                  v304 = &v273[v303];
                  swift_bridgeObjectRetain();
                  v383(v324, v304, v377);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v275 + 56))(v326, 0, 1, v274);
                }
                v89 = v398;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v250 + 56))(v330, 0, 1, v249);
                v71 = v387;
              }
              v153 = v349;
              v223 = v370;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(__dst, 0, 1, v334);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v363 + 56))(v223, 0, 1, v150);
            a3 = v393;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v153 + 56))(v147, 0, 1, v107);
          v4 = v395;
          v70 = v399;
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v89, 0, 1, v70);
      goto LABEL_99;
    }
LABEL_8:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_99;
  }
  if (v13)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_8;
  }
  if (v5 != v4)
  {
    v394 = v4;
    outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AspireApiRequest.OneOf_Request);
    v391 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v7 = *v8;
      v7[1] = v8[1];
      v31 = v8[2];
      v32 = v8[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v31, v32);
      v7[2] = v31;
      v7[3] = v32;
      v33 = (int *)type metadata accessor for AspireApiPECRequest(0);
      v34 = v33[7];
      v35 = (char *)v7 + v34;
      v36 = (char *)v8 + v34;
      v37 = type metadata accessor for UnknownStorage();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      v38(v35, v36, v37);
      v39 = v33[8];
      v40 = (_QWORD *)((char *)v7 + v39);
      v41 = (_QWORD *)((char *)v8 + v39);
      v42 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v366 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48);
      v382 = *(_QWORD *)(v42 - 8);
      v388 = v38;
      v376 = v42;
      if (v366((char *)v41, 1, v42))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        *v40 = *v41;
        v360 = v37;
        v116 = v41[1];
        v117 = v41[2];
        outlined copy of Data._Representation(v116, v117);
        v40[1] = v116;
        v40[2] = v117;
        v37 = v360;
        v38((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v360);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v382 + 56))(v40, 0, 1, v42);
      }
      v118 = v33[9];
      v119 = (char *)v7 + v118;
      v120 = (char *)v8 + v118;
      v121 = type metadata accessor for AspireApiEvaluationKey(0);
      v122 = *(_QWORD *)(v121 - 8);
      v4 = v394;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
      {
        v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
        a3 = v391;
      }
      else
      {
        v350 = v122;
        v388(v119, v120, v37);
        v154 = *(int *)(v121 + 20);
        v155 = &v119[v154];
        v156 = &v120[v154];
        v354 = v121;
        v362 = v37;
        if (v366(&v120[v154], 1, v376))
        {
          v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v155 = *(_QWORD *)v156;
          v192 = v37;
          v193 = *((_QWORD *)v156 + 1);
          v194 = *((_QWORD *)v156 + 2);
          outlined copy of Data._Representation(v193, v194);
          *((_QWORD *)v155 + 1) = v193;
          *((_QWORD *)v155 + 2) = v194;
          v4 = v394;
          v195 = v192;
          v121 = v354;
          v388(&v155[*(int *)(v376 + 24)], &v156[*(int *)(v376 + 24)], v195);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v382 + 56))(v155, 0, 1, v376);
        }
        v196 = *(int *)(v121 + 24);
        v197 = &v119[v196];
        v198 = &v120[v196];
        v199 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v200 = *(_QWORD *)(v199 - 8);
        a3 = v391;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48))(v198, 1, v199))
        {
          v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
          v202 = v350;
        }
        else
        {
          v372 = v200;
          v386 = v119;
          v388(v197, v198, v362);
          v234 = *(int *)(v199 + 20);
          v380 = v197;
          v235 = &v197[v234];
          v236 = &v198[v234];
          v237 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v238 = *(_QWORD *)(v237 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v238 + 48))(v236, 1, v237))
          {
            v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v235, v236, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v235 = *(_QWORD *)v236;
            v259 = *(int *)(v237 + 20);
            v346 = &v235[v259];
            v260 = &v236[v259];
            swift_bridgeObjectRetain();
            v388(v346, v260, v362);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(v235, 0, 1, v237);
          }
          v261 = *(int *)(v199 + 24);
          v262 = v380;
          v263 = &v380[v261];
          v264 = &v198[v261];
          v265 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v266 = *(_QWORD *)(v265 - 8);
          v119 = v386;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v266 + 48))(v264, 1, v265))
          {
            v267 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v263, v264, *(_QWORD *)(*(_QWORD *)(v267 - 8) + 64));
            v202 = v350;
          }
          else
          {
            v336 = v266;
            v388(v263, v264, v362);
            __dstb = (void *)v265;
            v347 = v263;
            v288 = *(int *)(v265 + 20);
            v289 = &v263[v288];
            v290 = &v264[v288];
            v291 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v292 = *(_QWORD *)(v291 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v292 + 48))(v290, 1, v291))
            {
              v293 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v289, v290, *(_QWORD *)(*(_QWORD *)(v293 - 8) + 64));
              v262 = v380;
              v119 = v386;
              v202 = v350;
              v294 = v336;
            }
            else
            {
              v328 = v292;
              v388(v289, v290, v362);
              v310 = *(int *)(v291 + 20);
              v332 = &v289[v310];
              v311 = &v290[v310];
              v312 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v313 = *(_QWORD *)(v312 - 8);
              v294 = v336;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v313 + 48))(v311, 1, v312))
              {
                v314 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v332, v311, *(_QWORD *)(*(_QWORD *)(v314 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v332 = *(_QWORD *)v311;
                v320 = *(int *)(v312 + 20);
                v327 = &v332[v320];
                v321 = &v311[v320];
                swift_bridgeObjectRetain();
                v388(v327, v321, v362);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v313 + 56))(v332, 0, 1, v312);
              }
              a3 = v391;
              v262 = v380;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v328 + 56))(v289, 0, 1, v291);
              v119 = v386;
              v202 = v350;
            }
            (*(void (**)(char *, _QWORD, uint64_t, void *))(v294 + 56))(v347, 0, 1, __dstb);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v372 + 56))(v262, 0, 1, v199);
          v4 = v394;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v202 + 56))(v119, 0, 1, v354);
      }
    }
    else
    {
      *(_DWORD *)v7 = *(_DWORD *)v8;
      v72 = v8[1];
      v73 = v8[2];
      outlined copy of Data._Representation(v72, v73);
      v7[1] = v72;
      v7[2] = v73;
      v74 = type metadata accessor for AspireApiPIRRequest(0);
      v75 = *(int *)(v74 + 24);
      v76 = (char *)v7 + v75;
      v77 = (char *)v8 + v75;
      v78 = type metadata accessor for UnknownStorage();
      v79 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
      v79(v76, v77, v78);
      v384 = (int *)v74;
      v80 = *(int *)(v74 + 28);
      v81 = (_QWORD *)((char *)v7 + v80);
      v82 = (_QWORD *)((char *)v8 + v80);
      v83 = type metadata accessor for AspirePirEncryptedIndices(0);
      v84 = *(_QWORD *)(v83 - 8);
      v378 = v78;
      v389 = v79;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        *v81 = *v82;
        v81[1] = v82[1];
        v124 = *(int *)(v83 + 24);
        v125 = (char *)v81 + v124;
        v126 = (char *)v82 + v124;
        swift_bridgeObjectRetain();
        v79(v125, v126, v78);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
      }
      v127 = v384[8];
      v128 = (_QWORD *)((char *)v7 + v127);
      v129 = (_QWORD *)((char *)v8 + v127);
      v130 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v131 = *(_QWORD *)(v130 - 8);
      v132 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v131 + 48);
      v361 = v131;
      v369 = v130;
      if (v132(v129, 1, v130))
      {
        v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
        v134 = v389;
      }
      else
      {
        *v128 = *v129;
        v355 = v132;
        v158 = v131;
        v159 = v129[1];
        v160 = v129[2];
        outlined copy of Data._Representation(v159, v160);
        v128[1] = v159;
        v128[2] = v160;
        v161 = *(int *)(v130 + 24);
        v162 = (char *)v129 + v161;
        v134 = v389;
        v389((char *)v128 + v161, v162, v378);
        v163 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v158 + 56);
        v132 = v355;
        v163(v128, 0, 1, v130);
      }
      v164 = v384[9];
      v165 = (_QWORD *)((char *)v7 + v164);
      v166 = (_QWORD *)((char *)v8 + v164);
      *v165 = *v166;
      v165[1] = v166[1];
      v167 = v384[10];
      v168 = (char *)v7 + v167;
      v169 = (char *)v8 + v167;
      v170 = type metadata accessor for AspireApiEvaluationKey(0);
      v171 = *(_QWORD *)(v170 - 8);
      v172 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48);
      swift_bridgeObjectRetain();
      if (v172(v169, 1, v170))
      {
        v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
        v4 = v394;
        a3 = v391;
      }
      else
      {
        v351 = v171;
        v134(v168, v169, v378);
        v385 = v170;
        v188 = *(int *)(v170 + 20);
        v189 = &v168[v188];
        v190 = &v169[v188];
        v356 = v168;
        if (v132(&v169[v188], 1, v369))
        {
          v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v189 = *(_QWORD *)v190;
          v224 = v134;
          v225 = *((_QWORD *)v190 + 1);
          v226 = *((_QWORD *)v190 + 2);
          outlined copy of Data._Representation(v225, v226);
          *((_QWORD *)v189 + 1) = v225;
          *((_QWORD *)v189 + 2) = v226;
          v134 = v224;
          v168 = v356;
          v224(&v189[*(int *)(v369 + 24)], &v190[*(int *)(v369 + 24)], v378);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v361 + 56))(v189, 0, 1, v369);
        }
        v227 = *(int *)(v170 + 24);
        v228 = &v168[v227];
        v229 = &v169[v227];
        v230 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v231 = *(_QWORD *)(v230 - 8);
        v4 = v394;
        a3 = v391;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v231 + 48))(v229, 1, v230))
        {
          v232 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
          v233 = v356;
        }
        else
        {
          v345 = v231;
          v134(v228, v229, v378);
          v364 = v230;
          v374 = v228;
          v252 = *(int *)(v230 + 20);
          v253 = &v228[v252];
          v254 = &v229[v252];
          v255 = v134;
          v256 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v257 = *(_QWORD *)(v256 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v257 + 48))(v254, 1, v256))
          {
            v258 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v253, v254, *(_QWORD *)(*(_QWORD *)(v258 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v253 = *(_QWORD *)v254;
            v277 = *(int *)(v256 + 20);
            __dstd = &v253[v277];
            v278 = &v254[v277];
            swift_bridgeObjectRetain();
            v255(__dstd, v278, v378);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v257 + 56))(v253, 0, 1, v256);
          }
          v279 = v364;
          v280 = *(int *)(v364 + 24);
          v281 = &v374[v280];
          v282 = &v229[v280];
          v283 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v284 = *(_QWORD *)(v283 - 8);
          v170 = v385;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v284 + 48))(v282, 1, v283))
          {
            v285 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v285 - 8) + 64));
            v233 = v356;
            v286 = v374;
            v287 = v345;
          }
          else
          {
            v389(v281, v282, v378);
            v337 = v283;
            __dstc = v281;
            v295 = *(int *)(v283 + 20);
            v296 = &v281[v295];
            v297 = &v282[v295];
            v298 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v299 = *(_QWORD *)(v298 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v299 + 48))(v297, 1, v298))
            {
              v300 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v296, v297, *(_QWORD *)(*(_QWORD *)(v300 - 8) + 64));
              v233 = v356;
              v279 = v364;
            }
            else
            {
              v389(v296, v297, v378);
              v315 = *(int *)(v298 + 20);
              v329 = v296;
              v333 = &v296[v315];
              v316 = &v297[v315];
              v317 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v318 = *(_QWORD *)(v317 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v318 + 48))(v316, 1, v317))
              {
                v319 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v333, v316, *(_QWORD *)(*(_QWORD *)(v319 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v333 = *(_QWORD *)v316;
                v322 = *(int *)(v317 + 20);
                v325 = &v333[v322];
                v323 = &v316[v322];
                swift_bridgeObjectRetain();
                v389(v325, v323, v378);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v318 + 56))(v333, 0, 1, v317);
              }
              a3 = v391;
              v279 = v364;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v329, 0, 1, v298);
              v233 = v356;
            }
            v286 = v374;
            v287 = v345;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v284 + 56))(__dstc, 0, 1, v337);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v287 + 56))(v286, 0, 1, v279);
          v4 = v394;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v351 + 56))(v233, 0, 1, v170);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_99:
  v305 = *(int *)(a3 + 24);
  v306 = (char *)v5 + v305;
  v307 = (char *)v4 + v305;
  v308 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v308 - 8) + 24))(v306, v307, v308);
  return v5;
}

_OWORD *initializeWithTake for AspireApiRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, char *, uint64_t);
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  unsigned int (*__dst)(char *, uint64_t, uint64_t);
  void *__dsta;
  char *__dstb;
  void *__dstc;
  uint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  void (*v169)(char *, char *, void *);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _OWORD *v173;

  v3 = a3;
  v4 = a2;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v172 = v3;
    v173 = v4;
    v171 = v10;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = v8[1];
      *v7 = *v8;
      v7[1] = v12;
      v13 = (int *)type metadata accessor for AspireApiPECRequest(0);
      v14 = v13[7];
      v15 = (char *)v7 + v14;
      v16 = (char *)v8 + v14;
      v17 = type metadata accessor for UnknownStorage();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
      v18(v15, v16, v17);
      v19 = v13[8];
      v168 = v7;
      v20 = (_QWORD *)((char *)v7 + v19);
      v21 = (_QWORD *)((char *)v8 + v19);
      v22 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v23 = *(_QWORD *)(v22 - 8);
      __dst = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
      v166 = v17;
      if (__dst((char *)v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *v20 = *v21;
        *(_OWORD *)(v20 + 1) = *(_OWORD *)(v21 + 1);
        v18((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v17);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v37 = v13[9];
      v38 = (char *)v168 + v37;
      v39 = (char *)v8 + v37;
      v40 = type metadata accessor for AspireApiEvaluationKey(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        v3 = v172;
        v4 = v173;
        v7 = v168;
        v43 = v171;
      }
      else
      {
        v157 = v41;
        v18(v38, v39, v17);
        v51 = *(int *)(v40 + 20);
        v160 = v38;
        v52 = &v38[v51];
        v53 = &v39[v51];
        if (__dst(&v39[v51], 1, v22))
        {
          v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v52 = *(_QWORD *)v53;
          *(_OWORD *)(v52 + 8) = *(_OWORD *)(v53 + 8);
          v18(&v52[*(int *)(v22 + 24)], &v53[*(int *)(v22 + 24)], v17);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v52, 0, 1, v22);
        }
        v65 = v160;
        v7 = v168;
        v66 = *(int *)(v40 + 24);
        v67 = &v160[v66];
        v68 = &v39[v66];
        v69 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v70 = *(_QWORD *)(v69 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          v153 = v70;
          v79 = v67;
          v80 = v67;
          v81 = v18;
          v18(v79, v68, v166);
          v170 = v69;
          v82 = *(int *)(v69 + 20);
          v156 = v80;
          __dstb = &v80[v82];
          v83 = &v68[v82];
          v84 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v85 = *(_QWORD *)(v84 - 8);
          v150 = v81;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
          {
            v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(__dstb, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__dstb = *(_QWORD *)v83;
            v81(&__dstb[*(int *)(v84 + 20)], &v83[*(int *)(v84 + 20)], v166);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(__dstb, 0, 1, v84);
          }
          v65 = v160;
          v92 = *(int *)(v69 + 24);
          v93 = v156;
          v94 = &v156[v92];
          v95 = &v68[v92];
          v96 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v97 = *(_QWORD *)(v96 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
          {
            v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
          }
          else
          {
            v146 = v97;
            v150(v94, v95, v166);
            v148 = v96;
            v106 = *(int *)(v96 + 20);
            __dstc = v94;
            v107 = &v94[v106];
            v108 = &v95[v106];
            v109 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v110 = *(_QWORD *)(v109 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
            {
              v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
              v112 = __dstc;
              v114 = v146;
              v113 = v148;
            }
            else
            {
              v142 = v110;
              v150(v107, v108, v166);
              v123 = v109;
              v124 = *(int *)(v109 + 20);
              v144 = v107;
              v125 = &v107[v124];
              v126 = &v108[v124];
              v127 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v128 = *(_QWORD *)(v127 - 8);
              v114 = v146;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
              {
                v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v125 = *(_QWORD *)v126;
                v150(&v125[*(int *)(v127 + 20)], &v126[*(int *)(v127 + 20)], v166);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
              }
              v65 = v160;
              v112 = __dstc;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v144, 0, 1, v123);
              v93 = v156;
              v113 = v148;
            }
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v112, 0, 1, v113);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v153 + 56))(v93, 0, 1, v170);
        }
        v3 = v172;
        v4 = v173;
        v43 = v171;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v65, 0, 1, v40);
      }
    }
    else
    {
      v167 = v9;
      *(_DWORD *)v7 = *(_DWORD *)v8;
      *(_OWORD *)((char *)v7 + 8) = *(_OWORD *)((char *)v8 + 8);
      v25 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      v26 = v25[6];
      v27 = (char *)v7 + v26;
      v28 = (char *)v8 + v26;
      v29 = type metadata accessor for UnknownStorage();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
      v30(v27, v28, v29);
      v31 = v25[7];
      v32 = (_OWORD *)((char *)v7 + v31);
      v33 = (_OWORD *)((char *)v8 + v31);
      v34 = type metadata accessor for AspirePirEncryptedIndices(0);
      v35 = *(_QWORD *)(v34 - 8);
      __dsta = (void *)v29;
      v169 = (void (*)(char *, char *, void *))v30;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        *v32 = *v33;
        v30((char *)v32 + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v29);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v44 = v25[8];
      v45 = (_QWORD *)((char *)v7 + v44);
      v46 = (_QWORD *)((char *)v8 + v44);
      v47 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v48 = *(_QWORD *)(v47 - 8);
      v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      v159 = v48;
      if (v49((char *)v46, 1, v47))
      {
        v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        *v45 = *v46;
        *(_OWORD *)(v45 + 1) = *(_OWORD *)(v46 + 1);
        v30((char *)v45 + *(int *)(v47 + 24), (char *)v46 + *(int *)(v47 + 24), (uint64_t)__dsta);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      *(_OWORD *)((char *)v7 + v25[9]) = *(_OWORD *)((char *)v8 + v25[9]);
      v55 = v25[10];
      v56 = (char *)v7 + v55;
      v57 = (char *)v8 + v55;
      v58 = type metadata accessor for AspireApiEvaluationKey(0);
      v59 = *(_QWORD *)(v58 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        v3 = v172;
        v4 = v173;
        v43 = v171;
        v9 = v167;
      }
      else
      {
        v155 = v59;
        v30(v56, v57, (uint64_t)__dsta);
        v61 = *(int *)(v58 + 20);
        v158 = v56;
        v62 = &v56[v61];
        v63 = &v57[v61];
        if (v49(&v57[v61], 1, v47))
        {
          v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v62 = *(_QWORD *)v63;
          *(_OWORD *)(v62 + 8) = *(_OWORD *)(v63 + 8);
          v30(&v62[*(int *)(v47 + 24)], &v63[*(int *)(v47 + 24)], (uint64_t)__dsta);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v62, 0, 1, v47);
        }
        v72 = v158;
        v73 = *(int *)(v58 + 24);
        v74 = &v158[v73];
        v75 = &v57[v73];
        v76 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v77 = *(_QWORD *)(v76 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
          v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          v3 = v172;
          v4 = v173;
          v43 = v171;
          v9 = v167;
        }
        else
        {
          v154 = v77;
          v30(v74, v75, (uint64_t)__dsta);
          v87 = *(int *)(v76 + 20);
          v161 = v74;
          v151 = &v74[v87];
          v88 = &v75[v87];
          v89 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v90 = *(_QWORD *)(v89 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
          {
            v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v151, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v151 = *(_QWORD *)v88;
            v30(&v151[*(int *)(v89 + 20)], &v88[*(int *)(v89 + 20)], (uint64_t)__dsta);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v151, 0, 1, v89);
          }
          v9 = v167;
          v99 = v161;
          v100 = *(int *)(v76 + 24);
          v101 = &v161[v100];
          v102 = &v75[v100];
          v103 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v104 = *(_QWORD *)(v103 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
          {
            v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
          }
          else
          {
            v147 = v104;
            v169(v101, v102, __dsta);
            v149 = v103;
            v152 = v101;
            v115 = *(int *)(v103 + 20);
            v116 = &v101[v115];
            v117 = &v102[v115];
            v118 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v119 = *(_QWORD *)(v118 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
            {
              v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
              v9 = v167;
              v122 = v104;
              v121 = v149;
            }
            else
            {
              v141 = v119;
              v169(v116, v117, __dsta);
              v143 = v118;
              v145 = v116;
              v130 = *(int *)(v118 + 20);
              v131 = &v116[v130];
              v132 = &v117[v130];
              v133 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v134 = *(_QWORD *)(v133 - 8);
              v122 = v147;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
              {
                v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v131 = *(_QWORD *)v132;
                v169(&v131[*(int *)(v133 + 20)], &v132[*(int *)(v133 + 20)], __dsta);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v131, 0, 1, v133);
              }
              v9 = v167;
              v121 = v149;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v145, 0, 1, v143);
              v99 = v161;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v152, 0, 1, v121);
          }
          v72 = v158;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v99, 0, 1, v76);
          v3 = v172;
          v4 = v173;
          v43 = v171;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v72, 0, 1, v58);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v7, 0, 1, v9);
  }
  v136 = *(int *)(v3 + 24);
  v137 = (char *)a1 + v136;
  v138 = (char *)v4 + v136;
  v139 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 32))(v137, v138, v139);
  return a1;
}

_QWORD *assignWithTake for AspireApiRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_OWORD *, uint64_t, uint64_t);
  int v13;
  int v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unsigned int (**v104)(const void *, uint64_t, uint64_t);
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  void (*v133)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unsigned int (**v138)(const void *, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  void (*v155)(char *, char *, uint64_t);
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int (**v165)(const void *, uint64_t, uint64_t);
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  void (*v211)(char *, char *, uint64_t);
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  unsigned int (**v246)(const void *, uint64_t, uint64_t);
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  unsigned int (**v253)(const void *, uint64_t, uint64_t);
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  unsigned int (**v277)(const void *, uint64_t, uint64_t);
  unsigned int (**v278)(const void *, uint64_t, uint64_t);
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void (*v290)(char *, char *, uint64_t);
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  char *v300;
  void (*v301)(char *, char *, uint64_t);
  uint64_t v302;
  unsigned int (*__dst)(char *, uint64_t, uint64_t);
  int *__dsta;
  unsigned int (**__dstb)(const void *, uint64_t, uint64_t);
  char *__dstc;
  unsigned int (**__dstd)(const void *, uint64_t, uint64_t);
  char *__dste;
  void (*v309)(char *, char *, uint64_t);
  unsigned int (*v310)(char *, uint64_t, uint64_t);
  void (**v311)(char *, _QWORD, uint64_t, uint64_t);
  void (**v312)(char *, _QWORD, uint64_t, uint64_t);
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int (*v320)(char *, uint64_t, uint64_t);
  uint64_t v321;
  uint64_t v322;
  char *v323;
  _OWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  int *v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;

  v4 = a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)((char *)a1 + v7);
  v9 = (_OWORD *)((char *)v4 + v7);
  v10 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v330 = v11;
      v334 = v10;
      v335 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v15 = v9[1];
        *v8 = *v9;
        v8[1] = v15;
        v16 = (int *)type metadata accessor for AspireApiPECRequest(0);
        v17 = v16[7];
        v18 = (char *)v8 + v17;
        v19 = (char *)v9 + v17;
        v20 = type metadata accessor for UnknownStorage();
        v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
        v21(v18, v19, v20);
        v22 = v16[8];
        v324 = v8;
        v23 = (_QWORD *)((char *)v8 + v22);
        v24 = (_QWORD *)((char *)v9 + v22);
        v25 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        v26 = *(_QWORD *)(v25 - 8);
        __dst = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
        v309 = v21;
        v317 = v20;
        if (__dst((char *)v24, 1, v25))
        {
          v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          *v23 = *v24;
          *(_OWORD *)(v23 + 1) = *(_OWORD *)(v24 + 1);
          v21((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v20);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        }
        v55 = v16[9];
        v56 = (char *)v324 + v55;
        v57 = (char *)v9 + v55;
        v58 = type metadata accessor for AspireApiEvaluationKey(0);
        v59 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
          v61 = v334;
          a3 = v335;
          v62 = v330;
          v8 = v324;
        }
        else
        {
          v295 = v59;
          v21(v56, v57, v20);
          v83 = *(int *)(v58 + 20);
          v299 = v56;
          v84 = &v56[v83];
          v85 = &v57[v83];
          if (__dst(&v57[v83], 1, v25))
          {
            v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v84 = *(_QWORD *)v85;
            *(_OWORD *)(v84 + 8) = *(_OWORD *)(v85 + 8);
            v21(&v84[*(int *)(v25 + 24)], &v85[*(int *)(v25 + 24)], v20);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v84, 0, 1, v25);
          }
          v8 = v324;
          v114 = *(int *)(v58 + 24);
          v115 = &v299[v114];
          v116 = &v57[v114];
          v117 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          v118 = *(_QWORD *)(v117 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
          {
            v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
            v61 = v334;
            a3 = v335;
            v62 = v330;
          }
          else
          {
            v289 = v118;
            v309(v115, v116, v20);
            v328 = v117;
            v140 = *(int *)(v117 + 20);
            v293 = v115;
            __dstc = &v115[v140];
            v141 = &v116[v140];
            v142 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v143 = *(_QWORD *)(v142 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
            {
              v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(__dstc, v141, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
            }
            else
            {
              *(_QWORD *)__dstc = *(_QWORD *)v141;
              v309(&__dstc[*(int *)(v142 + 20)], &v141[*(int *)(v142 + 20)], v20);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(__dstc, 0, 1, v142);
            }
            v166 = *(int *)(v328 + 24);
            v167 = v293;
            v168 = &v293[v166];
            v169 = &v116[v166];
            v170 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v171 = *(_QWORD *)(v170 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170))
            {
              v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
              v61 = v334;
              a3 = v335;
              v62 = v330;
            }
            else
            {
              v309(v168, v169, v317);
              v285 = v170;
              v196 = *(int *)(v170 + 20);
              __dste = v168;
              v197 = &v168[v196];
              v198 = &v169[v196];
              v199 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v200 = *(_QWORD *)(v199 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48))(v198, 1, v199))
              {
                v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
                v61 = v334;
                a3 = v335;
                v62 = v330;
              }
              else
              {
                v309(v197, v198, v317);
                v223 = *(int *)(v199 + 20);
                v275 = &v197[v223];
                v280 = v199;
                v224 = &v198[v223];
                v225 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v226 = *(_QWORD *)(v225 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v226 + 48))(v224, 1, v225))
                {
                  v227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v275, v224, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v275 = *(_QWORD *)v224;
                  v309(&v275[*(int *)(v225 + 20)], &v224[*(int *)(v225 + 20)], v317);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v226 + 56))(v275, 0, 1, v225);
                }
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v200 + 56))(v197, 0, 1, v280);
                v61 = v334;
                a3 = v335;
                v62 = v330;
                v167 = v293;
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v171 + 56))(__dste, 0, 1, v285);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v289 + 56))(v167, 0, 1, v328);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v295 + 56))(v299, 0, 1, v58);
        }
      }
      else
      {
        v326 = v4;
        *(_DWORD *)v8 = *(_DWORD *)v9;
        *(_OWORD *)((char *)v8 + 8) = *(_OWORD *)((char *)v9 + 8);
        v43 = (int *)type metadata accessor for AspireApiPIRRequest(0);
        v44 = v43[6];
        v45 = (char *)v8 + v44;
        v46 = (char *)v9 + v44;
        v47 = type metadata accessor for UnknownStorage();
        v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
        v48(v45, v46, v47);
        v49 = v43[7];
        v50 = (_OWORD *)((char *)v8 + v49);
        v51 = (_OWORD *)((char *)v9 + v49);
        v52 = type metadata accessor for AspirePirEncryptedIndices(0);
        v53 = *(_QWORD *)(v52 - 8);
        v319 = v47;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
        {
          v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          *v50 = *v51;
          v48((char *)v50 + *(int *)(v52 + 24), (char *)v51 + *(int *)(v52 + 24), v47);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
        }
        v75 = v48;
        v76 = v43[8];
        v77 = (_QWORD *)((char *)v8 + v76);
        v78 = (_QWORD *)((char *)v9 + v76);
        v79 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
        v80 = *(_QWORD *)(v79 - 8);
        v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
        v311 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v80;
        if (v81((char *)v78, 1, v79))
        {
          v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
        }
        else
        {
          *v77 = *v78;
          *(_OWORD *)(v77 + 1) = *(_OWORD *)(v78 + 1);
          v75((char *)v77 + *(int *)(v79 + 24), (char *)v78 + *(int *)(v79 + 24), v319);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
        }
        *(_OWORD *)((char *)v8 + v43[9]) = *(_OWORD *)((char *)v9 + v43[9]);
        v87 = v43[10];
        v88 = (char *)v8 + v87;
        v89 = (char *)v9 + v87;
        v90 = type metadata accessor for AspireApiEvaluationKey(0);
        v91 = *(_QWORD *)(v90 - 8);
        v4 = v326;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
        {
          v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
          memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
          v61 = v334;
          a3 = v335;
          v62 = v330;
        }
        else
        {
          v296 = v91;
          v75(v88, v89, v319);
          v300 = v88;
          __dsta = (int *)v90;
          v93 = *(int *)(v90 + 20);
          v94 = &v88[v93];
          v95 = v75;
          v96 = &v89[v93];
          if (v81(&v89[v93], 1, v79))
          {
            v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
            memcpy(v94, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v94 = *(_QWORD *)v96;
            *(_OWORD *)(v94 + 8) = *(_OWORD *)(v96 + 8);
            v95(&v94[*(int *)(v79 + 24)], &v96[*(int *)(v79 + 24)], v319);
            v311[7](v94, 0, 1, v79);
          }
          v120 = v300;
          v121 = __dsta[6];
          v122 = &v300[v121];
          v123 = &v89[v121];
          v124 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
          v125 = *(_QWORD *)(v124 - 8);
          v126 = v296;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
          {
            v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
            memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
            v61 = v334;
            a3 = v335;
            v62 = v330;
            v128 = __dsta;
          }
          else
          {
            v294 = v125;
            v95(v122, v123, v319);
            v145 = *(int *)(v124 + 20);
            v313 = v122;
            v146 = &v122[v145];
            v147 = &v123[v145];
            v148 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v149 = *(_QWORD *)(v148 - 8);
            v290 = v95;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148))
            {
              v150 = v146;
              v151 = v319;
              v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v150, v147, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v146 = *(_QWORD *)v147;
              v173 = *(int *)(v148 + 20);
              v174 = &v146[v173];
              v175 = &v147[v173];
              v176 = v146;
              v151 = v319;
              v95(v174, v175, v319);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v176, 0, 1, v148);
            }
            v177 = *(int *)(v124 + 24);
            v178 = &v313[v177];
            v179 = &v123[v177];
            v180 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v181 = *(_QWORD *)(v180 - 8);
            v120 = v300;
            v128 = __dsta;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 48))(v179, 1, v180))
            {
              v182 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v178, v179, *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64));
              v61 = v334;
              a3 = v335;
              v62 = v330;
              v4 = v326;
            }
            else
            {
              v279 = v181;
              v290(v178, v179, v151);
              v283 = v180;
              v286 = v178;
              v202 = *(int *)(v180 + 20);
              v203 = &v178[v202];
              v204 = &v179[v202];
              v205 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v206 = *(_QWORD *)(v205 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v204, 1, v205))
              {
                v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
                v61 = v334;
                a3 = v335;
                v62 = v330;
                v4 = v326;
                v208 = v279;
              }
              else
              {
                v273 = v206;
                v290(v203, v204, v151);
                v274 = v205;
                v276 = v203;
                v228 = *(int *)(v205 + 20);
                v229 = &v203[v228];
                v230 = &v204[v228];
                v231 = v151;
                v232 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v233 = *(_QWORD *)(v232 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v233 + 48))(v230, 1, v232))
                {
                  v234 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v229 = *(_QWORD *)v230;
                  v290(&v229[*(int *)(v232 + 20)], &v230[*(int *)(v232 + 20)], v231);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v233 + 56))(v229, 0, 1, v232);
                }
                v4 = v326;
                v120 = v300;
                v208 = v279;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v273 + 56))(v276, 0, 1, v274);
                v61 = v334;
                a3 = v335;
                v62 = v330;
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v286, 0, 1, v283);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v313, 0, 1, v124);
            v126 = v296;
          }
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v126 + 56))(v120, 0, 1, v128);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v8, 0, 1, v61);
      goto LABEL_98;
    }
LABEL_8:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_98;
  }
  if (v14)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AspireApiRequest.OneOf_Request);
    goto LABEL_8;
  }
  if (a1 != v4)
  {
    v336 = a3;
    outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AspireApiRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v29 = v9[1];
      *v8 = *v9;
      v8[1] = v29;
      v30 = type metadata accessor for AspireApiPECRequest(0);
      v31 = *(int *)(v30 + 28);
      v32 = (char *)v8 + v31;
      v33 = (char *)v9 + v31;
      v34 = type metadata accessor for UnknownStorage();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
      v35(v32, v33, v34);
      v331 = v30;
      v36 = *(int *)(v30 + 32);
      v37 = (_QWORD *)((char *)v8 + v36);
      v38 = (_QWORD *)((char *)v9 + v36);
      v39 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v40 = *(_QWORD *)(v39 - 8);
      v310 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      v318 = v39;
      v325 = v34;
      if (v310((char *)v38, 1, v39))
      {
        v41 = v35;
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        *v37 = *v38;
        *(_OWORD *)(v37 + 1) = *(_OWORD *)(v38 + 1);
        v98 = v34;
        v41 = v35;
        v35((char *)v37 + *(int *)(v39 + 24), (char *)v38 + *(int *)(v39 + 24), v98);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      v99 = v40;
      v100 = *(int *)(v331 + 36);
      v101 = (char *)v8 + v100;
      v102 = (char *)v9 + v100;
      v103 = type metadata accessor for AspireApiEvaluationKey(0);
      v104 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v103 - 8);
      if (v104[6](v102, 1, v103))
      {
        v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
        a3 = v336;
      }
      else
      {
        __dstb = v104;
        v41(v101, v102, v325);
        v129 = *(int *)(v103 + 20);
        v333 = v101;
        v130 = &v101[v129];
        v131 = &v102[v129];
        v301 = v41;
        if (v310(&v102[v129], 1, v318))
        {
          v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v130 = *(_QWORD *)v131;
          *(_OWORD *)(v130 + 8) = *(_OWORD *)(v131 + 8);
          v41(&v130[*(int *)(v318 + 24)], &v131[*(int *)(v318 + 24)], v325);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v130, 0, 1, v318);
        }
        v158 = *(int *)(v103 + 24);
        v159 = v333;
        v160 = &v333[v158];
        v161 = &v102[v158];
        v162 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v163 = *(_QWORD *)(v162 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
        {
          v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
          a3 = v336;
          v165 = __dstb;
        }
        else
        {
          v41(v160, v161, v325);
          v191 = *(int *)(v162 + 20);
          v314 = &v160[v191];
          v322 = v162;
          v192 = &v161[v191];
          v193 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v194 = *(_QWORD *)(v193 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48))(v192, 1, v193))
          {
            v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v314, v192, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v314 = *(_QWORD *)v192;
            v301(&v314[*(int *)(v193 + 20)], &v192[*(int *)(v193 + 20)], v325);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v194 + 56))(v314, 0, 1, v193);
          }
          v216 = *(int *)(v322 + 24);
          v217 = &v160[v216];
          v218 = &v161[v216];
          v219 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v220 = *(_QWORD *)(v219 - 8);
          v298 = v160;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v220 + 48))(v218, 1, v219))
          {
            v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
            a3 = v336;
            v165 = __dstb;
            v222 = v163;
          }
          else
          {
            v287 = v220;
            v301(v217, v218, v325);
            v291 = v219;
            v242 = *(int *)(v219 + 20);
            v316 = v217;
            v243 = &v217[v242];
            v244 = &v218[v242];
            v245 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v246 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v245 - 8);
            if (v246[6](v244, 1, v245))
            {
              v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v247 - 8) + 64));
              a3 = v336;
              v165 = __dstb;
              v222 = v163;
              v248 = v287;
            }
            else
            {
              v277 = v246;
              v301(v243, v244, v325);
              v281 = v245;
              v261 = *(int *)(v245 + 20);
              v262 = &v243[v261];
              v263 = &v244[v261];
              v264 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v265 = *(_QWORD *)(v264 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v265 + 48))(v263, 1, v264))
              {
                v266 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v262, v263, *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v262 = *(_QWORD *)v263;
                v301(&v262[*(int *)(v264 + 20)], &v263[*(int *)(v264 + 20)], v325);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v265 + 56))(v262, 0, 1, v264);
              }
              v222 = v163;
              v248 = v287;
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v277[7])(v243, 0, 1, v281);
              a3 = v336;
              v165 = __dstb;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v248 + 56))(v316, 0, 1, v291);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v222 + 56))(v298, 0, 1, v322);
          v159 = v333;
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v165[7])(v159, 0, 1, v103);
      }
    }
    else
    {
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *(_OWORD *)((char *)v8 + 8) = *(_OWORD *)((char *)v9 + 8);
      v63 = type metadata accessor for AspireApiPIRRequest(0);
      v64 = *(int *)(v63 + 24);
      v65 = (char *)v8 + v64;
      v66 = (char *)v9 + v64;
      v67 = type metadata accessor for UnknownStorage();
      v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32);
      v68(v65, v66, v67);
      v327 = (int *)v63;
      v69 = *(int *)(v63 + 28);
      v70 = (_OWORD *)((char *)v8 + v69);
      v71 = (_OWORD *)((char *)v9 + v69);
      v72 = type metadata accessor for AspirePirEncryptedIndices(0);
      v73 = *(_QWORD *)(v72 - 8);
      v332 = v67;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
      {
        v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        *v70 = *v71;
        v68((char *)v70 + *(int *)(v72 + 24), (char *)v71 + *(int *)(v72 + 24), v67);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
      }
      v106 = v68;
      v107 = v327[8];
      v108 = (_QWORD *)((char *)v8 + v107);
      v109 = (_QWORD *)((char *)v9 + v107);
      v110 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v111 = *(_QWORD **)(v110 - 8);
      v320 = (unsigned int (*)(char *, uint64_t, uint64_t))v111[6];
      v312 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v111;
      if (v320((char *)v109, 1, v110))
      {
        v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
        v113 = v332;
      }
      else
      {
        *v108 = *v109;
        *(_OWORD *)(v108 + 1) = *(_OWORD *)(v109 + 1);
        v68((char *)v108 + *(int *)(v110 + 24), (char *)v109 + *(int *)(v110 + 24), v332);
        v133 = (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v111[7];
        v113 = v332;
        v133(v108, 0, 1, v110);
      }
      *(_OWORD *)((char *)v8 + v327[9]) = *(_OWORD *)((char *)v9 + v327[9]);
      v134 = v327[10];
      v135 = (char *)v8 + v134;
      v136 = (char *)v9 + v134;
      v137 = type metadata accessor for AspireApiEvaluationKey(0);
      v138 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v137 - 8);
      if (v138[6](v136, 1, v137))
      {
        v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
        a3 = v336;
      }
      else
      {
        __dstd = v138;
        v106(v135, v136, v113);
        v153 = *(int *)(v137 + 20);
        v329 = v135;
        v154 = &v135[v153];
        v155 = v106;
        v156 = &v136[v153];
        if (v320(&v136[v153], 1, v110))
        {
          v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v154, v156, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v154 = *(_QWORD *)v156;
          *(_OWORD *)(v154 + 8) = *(_OWORD *)(v156 + 8);
          v155(&v154[*(int *)(v110 + 24)], &v156[*(int *)(v110 + 24)], v113);
          v312[7](v154, 0, 1, v110);
        }
        v321 = v137;
        v183 = *(int *)(v137 + 24);
        v184 = v329;
        v185 = &v329[v183];
        v186 = &v136[v183];
        v187 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v188 = *(_QWORD *)(v187 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48))(v186, 1, v187))
        {
          v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
          a3 = v336;
          v190 = v321;
        }
        else
        {
          v297 = v188;
          v155(v185, v186, v113);
          v302 = v187;
          v209 = *(int *)(v187 + 20);
          v315 = v185;
          v210 = &v185[v209];
          v211 = v155;
          v212 = &v186[v209];
          v213 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v214 = *(_QWORD *)(v213 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v214 + 48))(v212, 1, v213))
          {
            v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v210, v212, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v210 = *(_QWORD *)v212;
            v211(&v210[*(int *)(v213 + 20)], &v212[*(int *)(v213 + 20)], v113);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v214 + 56))(v210, 0, 1, v213);
          }
          v190 = v321;
          v235 = *(int *)(v302 + 24);
          v236 = &v315[v235];
          v237 = &v186[v235];
          v238 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v239 = *(_QWORD *)(v238 - 8);
          v184 = v329;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48))(v237, 1, v238))
          {
            v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v240 - 8) + 64));
            a3 = v336;
            v241 = v297;
          }
          else
          {
            v288 = v239;
            v211(v236, v237, v332);
            v292 = v238;
            v249 = *(int *)(v238 + 20);
            v323 = v236;
            v250 = &v236[v249];
            v251 = &v237[v249];
            v252 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v253 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v252 - 8);
            if (v253[6](v251, 1, v252))
            {
              v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v250, v251, *(_QWORD *)(*(_QWORD *)(v254 - 8) + 64));
              a3 = v336;
              v184 = v329;
              v241 = v297;
              v255 = v288;
            }
            else
            {
              v278 = v253;
              v211(v250, v251, v332);
              v282 = v252;
              v284 = v250;
              v267 = *(int *)(v252 + 20);
              v268 = &v250[v267];
              v269 = &v251[v267];
              v270 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v271 = *(_QWORD *)(v270 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v271 + 48))(v269, 1, v270))
              {
                v272 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v268, v269, *(_QWORD *)(*(_QWORD *)(v272 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v268 = *(_QWORD *)v269;
                v211(&v268[*(int *)(v270 + 20)], &v269[*(int *)(v270 + 20)], v332);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v271 + 56))(v268, 0, 1, v270);
              }
              v184 = v329;
              v255 = v288;
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v278[7])(v284, 0, 1, v282);
              a3 = v336;
              v241 = v297;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v255 + 56))(v323, 0, 1, v292);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v241 + 56))(v315, 0, 1, v302);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstd[7])(v184, 0, 1, v190);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_98:
  v256 = *(int *)(a3 + 24);
  v257 = (char *)a1 + v256;
  v258 = (char *)v4 + v256;
  v259 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v259 - 8) + 40))(v257, v258, v259);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CD2134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for UnknownStorage();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CD21E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for UnknownStorage();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AspireApiRequest()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireApiRequest.OneOf_Request?, (void (*)(uint64_t))type metadata accessor for AspireApiRequest.OneOf_Request);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiRequest.OneOf_Request(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unsigned int (**v125)(const void *, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int (**v139)(const void *, uint64_t, uint64_t);
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  void *__dst;
  char *__dsta;
  unsigned int (**__dstb)(const void *, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  unsigned int (*v176)(char *, uint64_t, uint64_t);
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  void (*v181)(char *, char *, uint64_t);
  void (*v182)(char *, char *, uint64_t);
  unsigned int (*v183)(char *, uint64_t, uint64_t);
  void (*v184)(char *, char *, uint64_t);
  char *v185;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = a2[2];
      v8 = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v7, v8);
      a1[2] = v7;
      a1[3] = v8;
      v9 = (int *)type metadata accessor for AspireApiPECRequest(0);
      v10 = v9[7];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      v14(v11, v12, v13);
      v15 = v9[8];
      v16 = (uint64_t *)((char *)a1 + v15);
      v17 = (uint64_t *)((char *)a2 + v15);
      v18 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v19 = *(_QWORD *)(v18 - 8);
      v183 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      v175 = v19;
      if (v183((char *)v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v181 = v14;
        v36 = v13;
        v37 = v17[1];
        *v16 = *v17;
        v38 = v17[2];
        outlined copy of Data._Representation(v37, v38);
        v16[1] = v37;
        v16[2] = v38;
        v13 = v36;
        v14 = v181;
        v181((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v39 = v9[9];
      v40 = (char *)a1 + v39;
      v41 = (char *)a2 + v39;
      v42 = type metadata accessor for AspireApiEvaluationKey(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        v14(v40, v41, v13);
        v173 = v42;
        v56 = *(int *)(v42 + 20);
        v57 = &v40[v56];
        v58 = v13;
        v59 = &v41[v56];
        v171 = v58;
        v182 = v14;
        if (v183(&v41[v56], 1, v18))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v57, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          v78 = *((_QWORD *)v59 + 1);
          *(_QWORD *)v57 = *(_QWORD *)v59;
          v168 = v43;
          v79 = *((_QWORD *)v59 + 2);
          outlined copy of Data._Representation(v78, v79);
          *((_QWORD *)v57 + 1) = v78;
          *((_QWORD *)v57 + 2) = v79;
          v43 = v168;
          v14(&v57[*(int *)(v18 + 24)], &v59[*(int *)(v18 + 24)], v58);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v57, 0, 1, v18);
        }
        v80 = v173;
        v81 = *(int *)(v173 + 24);
        v82 = &v40[v81];
        v83 = &v41[v81];
        v84 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v85 = *(void **)(v84 - 8);
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v85 + 6))(v83, 1, v84))
        {
          v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          __dst = v85;
          v185 = v40;
          v182(v82, v83, v171);
          v97 = *(int *)(v84 + 20);
          v178 = v82;
          v98 = &v82[v97];
          v99 = &v83[v97];
          v100 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v101 = *(_QWORD *)(v100 - 8);
          v169 = v43;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
          {
            v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v98 = *(_QWORD *)v99;
            v108 = *(int *)(v100 + 20);
            v109 = &v98[v108];
            v110 = &v99[v108];
            swift_bridgeObjectRetain();
            v182(v109, v110, v171);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
          }
          v40 = v185;
          v111 = v178;
          v112 = *(int *)(v84 + 24);
          v113 = &v178[v112];
          v114 = &v83[v112];
          v115 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v116 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
            v43 = v169;
            v80 = v173;
          }
          else
          {
            v182(v113, v114, v171);
            v127 = *(int *)(v115 + 20);
            v128 = &v113[v127];
            v129 = &v114[v127];
            v130 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v131 = *(_QWORD *)(v130 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
            {
              v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
              v40 = v185;
              v80 = v173;
              v85 = __dst;
            }
            else
            {
              v159 = v131;
              v182(v128, v129, v171);
              v163 = v128;
              v140 = *(int *)(v130 + 20);
              v141 = &v128[v140];
              v142 = &v129[v140];
              v143 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v157 = *(_QWORD *)(v143 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(v142, 1, v143))
              {
                v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v141 = *(_QWORD *)v142;
                v151 = *(int *)(v143 + 20);
                v152 = &v141[v151];
                v153 = &v142[v151];
                swift_bridgeObjectRetain();
                v182(v152, v153, v171);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v141, 0, 1, v143);
              }
              v85 = __dst;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v163, 0, 1, v130);
              v40 = v185;
              v80 = v173;
              v111 = v178;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
            v43 = v169;
          }
          (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v85 + 7))(v111, 0, 1, v84);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v80);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v22 = a2[1];
      v23 = a2[2];
      outlined copy of Data._Representation(v22, v23);
      a1[1] = v22;
      a1[2] = v23;
      v24 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      v25 = v24[6];
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      v29(v26, v27, v28);
      v30 = v24[7];
      v31 = (uint64_t *)((char *)a1 + v30);
      v32 = (uint64_t *)((char *)a2 + v30);
      v33 = type metadata accessor for AspirePirEncryptedIndices(0);
      v34 = *(_QWORD *)(v33 - 8);
      v180 = v28;
      v184 = v29;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v45 = v32[1];
        *v31 = *v32;
        v31[1] = v45;
        v46 = *(int *)(v33 + 24);
        v47 = (char *)v31 + v46;
        v48 = (char *)v32 + v46;
        swift_bridgeObjectRetain();
        v29(v47, v48, v28);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v49 = v24[8];
      v50 = (uint64_t *)((char *)a1 + v49);
      v51 = (uint64_t *)((char *)a2 + v49);
      v52 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v53 = *(_QWORD *)(v52 - 8);
      v176 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
      if (v176((char *)v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        v55 = v29;
      }
      else
      {
        v61 = v51[1];
        *v50 = *v51;
        v62 = v51[2];
        outlined copy of Data._Representation(v61, v62);
        v50[1] = v61;
        v50[2] = v62;
        v55 = v29;
        v29((char *)v50 + *(int *)(v52 + 24), (char *)v51 + *(int *)(v52 + 24), v180);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      }
      v63 = v24[9];
      v64 = (uint64_t *)((char *)a1 + v63);
      v65 = (uint64_t *)((char *)a2 + v63);
      v66 = v65[1];
      *v64 = *v65;
      v64[1] = v66;
      v67 = v24[10];
      v68 = (char *)a1 + v67;
      v69 = (char *)a2 + v67;
      v70 = type metadata accessor for AspireApiEvaluationKey(0);
      v71 = *(_QWORD *)(v70 - 8);
      v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
      swift_bridgeObjectRetain();
      if (v72(v69, 1, v70))
      {
        v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        v172 = v71;
        v55(v68, v69, v180);
        v74 = *(int *)(v70 + 20);
        v75 = &v68[v74];
        v76 = &v69[v74];
        if (v176(&v69[v74], 1, v52))
        {
          v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          v177 = v68;
          v87 = v55;
          v88 = *((_QWORD *)v76 + 1);
          *(_QWORD *)v75 = *(_QWORD *)v76;
          v89 = *((_QWORD *)v76 + 2);
          outlined copy of Data._Representation(v88, v89);
          *((_QWORD *)v75 + 1) = v88;
          *((_QWORD *)v75 + 2) = v89;
          v55 = v87;
          v68 = v177;
          v55(&v75[*(int *)(v52 + 24)], &v76[*(int *)(v52 + 24)], v180);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v75, 0, 1, v52);
        }
        v90 = v172;
        v91 = *(int *)(v70 + 24);
        v92 = &v68[v91];
        v93 = &v69[v91];
        v94 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v95 = *(_QWORD *)(v94 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        }
        else
        {
          v170 = v95;
          v179 = v68;
          v55(v92, v93, v180);
          v103 = *(int *)(v94 + 20);
          v174 = v92;
          __dsta = &v92[v103];
          v104 = &v93[v103];
          v105 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v106 = *(_QWORD *)(v105 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
          {
            v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(__dsta, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__dsta = *(_QWORD *)v104;
            v118 = *(int *)(v105 + 20);
            v162 = &__dsta[v118];
            v119 = &v104[v118];
            swift_bridgeObjectRetain();
            v55(v162, v119, v180);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(__dsta, 0, 1, v105);
          }
          v120 = v174;
          v90 = v172;
          v121 = *(int *)(v94 + 24);
          v122 = &v174[v121];
          v123 = &v93[v121];
          v124 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v125 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v124 - 8);
          if (v125[6](v123, 1, v124))
          {
            v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
          }
          else
          {
            __dstb = v125;
            v184(v122, v123, v180);
            v133 = *(int *)(v124 + 20);
            v134 = &v122[v133];
            v135 = &v123[v133];
            v136 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v137 = *(_QWORD *)(v136 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136))
            {
              v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
              v120 = v174;
              v68 = v179;
              v139 = __dstb;
            }
            else
            {
              v160 = v137;
              v184(v134, v135, v180);
              v161 = v136;
              v164 = v134;
              v145 = *(int *)(v136 + 20);
              v146 = &v134[v145];
              v147 = &v135[v145];
              v148 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v149 = *(_QWORD *)(v148 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148))
              {
                v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v146 = *(_QWORD *)v147;
                v154 = *(int *)(v148 + 20);
                v158 = &v146[v154];
                v155 = &v147[v154];
                swift_bridgeObjectRetain();
                v184(v158, v155, v180);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v146, 0, 1, v148);
              }
              v120 = v174;
              v68 = v179;
              v90 = v172;
              v139 = __dstb;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v160 + 56))(v164, 0, 1, v161);
            }
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v139[7])(v122, 0, 1, v124);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v120, 0, 1, v94);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v68, 0, 1, v70);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspireApiRequest.OneOf_Request(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    v2 = (int *)type metadata accessor for AspireApiPECRequest(0);
    v3 = a1 + v2[7];
    v4 = type metadata accessor for UnknownStorage();
    v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v32(v3, v4);
    v5 = a1 + v2[8];
    v6 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
    if (!v7(v5, 1, v6))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
      v32(v5 + *(int *)(v6 + 24), v4);
    }
    v8 = a1 + v2[9];
    v9 = type metadata accessor for AspireApiEvaluationKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
    {
      v32(v8, v4);
      v11 = v8 + *(int *)(v9 + 20);
      if (!v7(v11, 1, v6))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16));
        v32(v11 + *(int *)(v6 + 24), v4);
      }
      v12 = *(int *)(v9 + 24);
LABEL_16:
      v22 = v8 + v12;
      v23 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23);
      if (!(_DWORD)result)
      {
        v32(v22, v4);
        v24 = v22 + *(int *)(v23 + 20);
        v25 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
        {
          swift_bridgeObjectRelease();
          v32(v24 + *(int *)(v25 + 20), v4);
        }
        v26 = v22 + *(int *)(v23 + 24);
        v27 = type metadata accessor for AspireHeSerializedRelinKey(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27);
        if (!(_DWORD)result)
        {
          v32(v26, v4);
          v28 = v26 + *(int *)(v27 + 20);
          v29 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29);
          if (!(_DWORD)result)
          {
            v32(v28, v4);
            v30 = v28 + *(int *)(v29 + 20);
            v31 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31);
            if (!(_DWORD)result)
            {
              swift_bridgeObjectRelease();
              return ((uint64_t (*)(uint64_t, uint64_t))v32)(v30 + *(int *)(v31 + 20), v4);
            }
          }
        }
      }
    }
  }
  else
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v13 = (int *)type metadata accessor for AspireApiPIRRequest(0);
    v14 = a1 + v13[6];
    v4 = type metadata accessor for UnknownStorage();
    v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v32(v14, v4);
    v15 = a1 + v13[7];
    v16 = type metadata accessor for AspirePirEncryptedIndices(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
    {
      swift_bridgeObjectRelease();
      v32(v15 + *(int *)(v16 + 24), v4);
    }
    v17 = a1 + v13[8];
    v18 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
    if (!v19(v17, 1, v18))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 16));
      v32(v17 + *(int *)(v18 + 24), v4);
    }
    swift_bridgeObjectRelease();
    v8 = a1 + v13[10];
    v20 = type metadata accessor for AspireApiEvaluationKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v8, 1, v20);
    if (!(_DWORD)result)
    {
      v32(v8, v4);
      v21 = v8 + *(int *)(v20 + 20);
      if (!v19(v21, 1, v18))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v21 + 8), *(_QWORD *)(v21 + 16));
        v32(v21 + *(int *)(v18 + 24), v4);
      }
      v12 = *(int *)(v20 + 24);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AspireApiRequest.OneOf_Request(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void (*v62)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  void (*v160)(char *, char *, uint64_t);
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  unsigned int (*v171)(char *, uint64_t, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*__dst)(char *, char *, uint64_t);
  void *__dstb;
  char *__dsta;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
    v4 = a2[2];
    v5 = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v4, v5);
    a1[2] = v4;
    a1[3] = v5;
    v6 = (int *)type metadata accessor for AspireApiPECRequest(0);
    v7 = v6[7];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = v6[8];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v16 + 48);
    if (v17(v14, 1, v15))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v33 = v14[1];
      *v13 = *v14;
      __dstb = v17;
      v34 = v16;
      v35 = v11;
      v36 = v10;
      v37 = v14[2];
      outlined copy of Data._Representation(v33, v37);
      v13[1] = v33;
      v13[2] = v37;
      v10 = v36;
      v11 = v35;
      v16 = v34;
      v17 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstb;
      v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v38 = v6[9];
    __dsta = (char *)a1 + v38;
    v39 = (char *)a2 + v38;
    v40 = type metadata accessor for AspireApiEvaluationKey(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
      memcpy(__dsta, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v11(__dsta, v39, v10);
      v55 = *(int *)(v40 + 20);
      v56 = &__dsta[v55];
      v57 = v10;
      v58 = &v39[v55];
      v172 = v57;
      if (v17(&v39[v55], 1, v15))
      {
        v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v56, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        v168 = v41;
        v78 = *((_QWORD *)v58 + 1);
        *(_QWORD *)v56 = *(_QWORD *)v58;
        v79 = *((_QWORD *)v58 + 2);
        outlined copy of Data._Representation(v78, v79);
        *((_QWORD *)v56 + 1) = v78;
        *((_QWORD *)v56 + 2) = v79;
        v41 = v168;
        v11(&v56[*(int *)(v15 + 24)], &v58[*(int *)(v15 + 24)], v57);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v56, 0, 1, v15);
      }
      v80 = *(int *)(v40 + 24);
      v81 = &__dsta[v80];
      v82 = &v39[v80];
      v83 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v166 = v84;
        v11(v81, v82, v172);
        v96 = *(int *)(v83 + 20);
        v163 = v81;
        v97 = &v81[v96];
        v98 = &v82[v96];
        v99 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v100 = *(_QWORD *)(v99 - 8);
        v169 = v41;
        v160 = v11;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
        {
          v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v97 = *(_QWORD *)v98;
          v108 = *(int *)(v99 + 20);
          v109 = &v97[v108];
          v110 = &v98[v108];
          swift_bridgeObjectRetain();
          v11(v109, v110, v172);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
        }
        v111 = *(int *)(v83 + 24);
        v112 = &v163[v111];
        v113 = &v82[v111];
        v114 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v115 = *(_QWORD *)(v114 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
        {
          v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          v11(v112, v113, v172);
          v125 = *(int *)(v114 + 20);
          v126 = &v112[v125];
          v127 = &v113[v125];
          v128 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v129 = *(_QWORD *)(v128 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
          {
            v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
          }
          else
          {
            v160(v126, v127, v172);
            v156 = v128;
            v158 = v126;
            v137 = *(int *)(v128 + 20);
            v138 = &v126[v137];
            v139 = &v127[v137];
            v140 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v154 = *(_QWORD *)(v140 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v139, 1, v140))
            {
              v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v138 = *(_QWORD *)v139;
              v147 = *(int *)(v140 + 20);
              v152 = &v138[v147];
              v148 = &v139[v147];
              swift_bridgeObjectRetain();
              v160(v152, v148, v172);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v138, 0, 1, v140);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v158, 0, 1, v156);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
        }
        v41 = v169;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v163, 0, 1, v83);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(__dsta, 0, 1, v40);
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v19 = a2[1];
    v20 = a2[2];
    outlined copy of Data._Representation(v19, v20);
    a1[1] = v19;
    a1[2] = v20;
    v21 = (int *)type metadata accessor for AspireApiPIRRequest(0);
    v22 = v21[6];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = type metadata accessor for UnknownStorage();
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    v27 = v21[7];
    v28 = (_QWORD *)((char *)a1 + v27);
    v29 = (_QWORD *)((char *)a2 + v27);
    v30 = type metadata accessor for AspirePirEncryptedIndices(0);
    v31 = *(_QWORD *)(v30 - 8);
    __dst = v26;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v43 = v29[1];
      *v28 = *v29;
      v28[1] = v43;
      v44 = *(int *)(v30 + 24);
      v45 = (char *)v28 + v44;
      v46 = (char *)v29 + v44;
      swift_bridgeObjectRetain();
      v26(v45, v46, v25);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v47 = v25;
    v48 = v21[8];
    v49 = (_QWORD *)((char *)a1 + v48);
    v50 = (_QWORD *)((char *)a2 + v48);
    v51 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v52 = *(_QWORD *)(v51 - 8);
    v171 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
    v167 = v52;
    if (v171((char *)v50, 1, v51))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      v54 = v26;
    }
    else
    {
      v60 = v50[1];
      *v49 = *v50;
      v61 = v50[2];
      outlined copy of Data._Representation(v60, v61);
      v49[1] = v60;
      v49[2] = v61;
      v26((char *)v49 + *(int *)(v51 + 24), (char *)v50 + *(int *)(v51 + 24), v47);
      v62 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56);
      v54 = v26;
      v62(v49, 0, 1, v51);
    }
    v63 = v21[9];
    v64 = (_QWORD *)((char *)a1 + v63);
    v65 = (_QWORD *)((char *)a2 + v63);
    v66 = v65[1];
    *v64 = *v65;
    v64[1] = v66;
    v67 = v21[10];
    v68 = (char *)a1 + v67;
    v69 = (char *)a2 + v67;
    v70 = type metadata accessor for AspireApiEvaluationKey(0);
    v71 = *(_QWORD *)(v70 - 8);
    v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
    swift_bridgeObjectRetain();
    if (v72(v69, 1, v70))
    {
      v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      v54(v68, v69, v47);
      v74 = *(int *)(v70 + 20);
      v75 = &v68[v74];
      v76 = &v69[v74];
      v165 = v47;
      if (v171(&v69[v74], 1, v51))
      {
        v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        v86 = *((_QWORD *)v76 + 1);
        *(_QWORD *)v75 = *(_QWORD *)v76;
        v173 = v71;
        v87 = v68;
        v88 = v54;
        v89 = *((_QWORD *)v76 + 2);
        outlined copy of Data._Representation(v86, v89);
        *((_QWORD *)v75 + 1) = v86;
        *((_QWORD *)v75 + 2) = v89;
        v54 = v88;
        v68 = v87;
        v71 = v173;
        v54(&v75[*(int *)(v51 + 24)], &v76[*(int *)(v51 + 24)], v47);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v75, 0, 1, v51);
      }
      v90 = *(int *)(v70 + 24);
      v91 = &v68[v90];
      v92 = &v69[v90];
      v93 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v94 = *(_QWORD *)(v93 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
      {
        v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        v164 = v94;
        v170 = v68;
        v174 = v71;
        v54(v91, v92, v165);
        v102 = *(int *)(v93 + 20);
        v103 = &v91[v102];
        v104 = &v92[v102];
        v105 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v106 = *(_QWORD *)(v105 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
        {
          v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v103 = *(_QWORD *)v104;
          v117 = *(int *)(v105 + 20);
          v161 = &v103[v117];
          v118 = &v104[v117];
          swift_bridgeObjectRetain();
          v54(v161, v118, v165);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
        }
        v119 = *(int *)(v93 + 24);
        v120 = &v91[v119];
        v121 = &v92[v119];
        v122 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v123 = *(_QWORD *)(v122 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
        {
          v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
        }
        else
        {
          __dst(v120, v121, v165);
          v131 = *(int *)(v122 + 20);
          v132 = &v120[v131];
          v133 = &v121[v131];
          v134 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v135 = *(_QWORD *)(v134 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
          {
            v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
            v71 = v174;
          }
          else
          {
            v162 = v135;
            __dst(v132, v133, v165);
            v157 = v134;
            v159 = v132;
            v142 = *(int *)(v134 + 20);
            v143 = &v132[v142];
            v144 = &v133[v142];
            v145 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v155 = *(_QWORD *)(v145 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v144, 1, v145))
            {
              v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v143 = *(_QWORD *)v144;
              v149 = *(int *)(v145 + 20);
              v153 = &v143[v149];
              v150 = &v144[v149];
              swift_bridgeObjectRetain();
              __dst(v153, v150, v165);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v143, 0, 1, v145);
            }
            v71 = v174;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v159, 0, 1, v157);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
        }
        v68 = v170;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v91, 0, 1, v93);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AspireApiRequest.OneOf_Request(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unsigned int (**v107)(const void *, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int (**v125)(const void *, uint64_t, uint64_t);
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  void (*v156)(char *, char *, uint64_t);
  char *v157;
  char *v158;
  char *v159;
  unsigned int (**v160)(const void *, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int (*v165)(char *, uint64_t, uint64_t);
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int (*v172)(char *, uint64_t, uint64_t);
  void (*v173)(char *, char *, void *);
  char *v174;
  void *__dst;
  char *__dsta;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireApiRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v4 = a2[2];
      v5 = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v4, v5);
      a1[2] = v4;
      a1[3] = v5;
      v6 = (int *)type metadata accessor for AspireApiPECRequest(0);
      v7 = v6[7];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for UnknownStorage();
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v11(v8, v9, v10);
      v12 = v6[8];
      v13 = (_QWORD *)((char *)a1 + v12);
      v14 = (_QWORD *)((char *)a2 + v12);
      v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v16 = *(_QWORD *)(v15 - 8);
      v172 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      if (v172((char *)v14, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        *v13 = *v14;
        v168 = v16;
        v32 = v11;
        v33 = v10;
        v34 = v14[1];
        v35 = v14[2];
        outlined copy of Data._Representation(v34, v35);
        v13[1] = v34;
        v13[2] = v35;
        v10 = v33;
        v11 = v32;
        v16 = v168;
        v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v168 + 56))(v13, 0, 1, v15);
      }
      v36 = v6[9];
      __dsta = (char *)a1 + v36;
      v37 = (char *)a2 + v36;
      v38 = type metadata accessor for AspireApiEvaluationKey(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(__dsta, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v11(__dsta, v37, v10);
        v51 = *(int *)(v38 + 20);
        v52 = &__dsta[v51];
        v53 = v10;
        v54 = &v37[v51];
        v166 = v53;
        if (v172(&v37[v51], 1, v15))
        {
          v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v52, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v52 = *(_QWORD *)v54;
          v162 = v39;
          v170 = v16;
          v71 = *((_QWORD *)v54 + 1);
          v72 = *((_QWORD *)v54 + 2);
          outlined copy of Data._Representation(v71, v72);
          *((_QWORD *)v52 + 1) = v71;
          *((_QWORD *)v52 + 2) = v72;
          v39 = v162;
          v11(&v52[*(int *)(v15 + 24)], &v54[*(int *)(v15 + 24)], v53);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v52, 0, 1, v15);
        }
        v73 = *(int *)(v38 + 24);
        v74 = &__dsta[v73];
        v75 = &v37[v73];
        v76 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v77 = *(_QWORD *)(v76 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
          v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
        }
        else
        {
          v171 = v77;
          v11(v74, v75, v166);
          v88 = *(int *)(v76 + 20);
          v174 = v74;
          v158 = &v74[v88];
          v89 = &v75[v88];
          v90 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v91 = *(_QWORD *)(v90 - 8);
          v163 = v39;
          v156 = v11;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
          {
            v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v158, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v158 = *(_QWORD *)v89;
            v100 = *(int *)(v90 + 20);
            v153 = &v158[v100];
            v101 = &v89[v100];
            swift_bridgeObjectRetain();
            v11(v153, v101, v166);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v158, 0, 1, v90);
          }
          v102 = v174;
          v103 = *(int *)(v76 + 24);
          v104 = &v174[v103];
          v105 = &v75[v103];
          v106 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v107 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v106 - 8);
          if (v107[6](v105, 1, v106))
          {
            v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
          }
          else
          {
            v160 = v107;
            v11(v104, v105, v166);
            v119 = *(int *)(v106 + 20);
            v120 = &v104[v119];
            v121 = &v105[v119];
            v122 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v123 = *(_QWORD *)(v122 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
            {
              v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
              v125 = v160;
            }
            else
            {
              v149 = v123;
              v156(v120, v121, v166);
              v151 = v122;
              v154 = v120;
              v131 = *(int *)(v122 + 20);
              v132 = &v120[v131];
              v133 = &v121[v131];
              v134 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v135 = *(_QWORD *)(v134 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
              {
                v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v132 = *(_QWORD *)v133;
                v143 = *(int *)(v134 + 20);
                v148 = &v132[v143];
                v144 = &v133[v143];
                swift_bridgeObjectRetain();
                v156(v148, v144, v166);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v132, 0, 1, v134);
              }
              v125 = v160;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v154, 0, 1, v151);
              v102 = v174;
            }
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v125[7])(v104, 0, 1, v106);
          }
          v39 = v163;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v171 + 56))(v102, 0, 1, v76);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dsta, 0, 1, v38);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v18 = a2[1];
      v19 = a2[2];
      outlined copy of Data._Representation(v18, v19);
      a1[1] = v18;
      a1[2] = v19;
      v20 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      v21 = v20[6];
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for UnknownStorage();
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      v25(v22, v23, v24);
      v26 = v20[7];
      v27 = (_QWORD *)((char *)a1 + v26);
      v28 = (_QWORD *)((char *)a2 + v26);
      v29 = type metadata accessor for AspirePirEncryptedIndices(0);
      v30 = *(_QWORD *)(v29 - 8);
      v173 = (void (*)(char *, char *, void *))v25;
      __dst = (void *)v24;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        *v27 = *v28;
        v27[1] = v28[1];
        v41 = *(int *)(v29 + 24);
        v42 = (char *)v27 + v41;
        v43 = (char *)v28 + v41;
        swift_bridgeObjectRetain();
        v25(v42, v43, v24);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      v44 = v20[8];
      v45 = (_QWORD *)((char *)a1 + v44);
      v46 = (_QWORD *)((char *)a2 + v44);
      v47 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v48 = *(_QWORD *)(v47 - 8);
      v165 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      v161 = v48;
      if (v165((char *)v46, 1, v47))
      {
        v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        v50 = v24;
      }
      else
      {
        *v45 = *v46;
        v56 = v46[1];
        v57 = v46[2];
        outlined copy of Data._Representation(v56, v57);
        v45[1] = v56;
        v45[2] = v57;
        v50 = (uint64_t)__dst;
        v173((char *)v45 + *(int *)(v47 + 24), (char *)v46 + *(int *)(v47 + 24), __dst);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      v58 = v20[9];
      v59 = (_QWORD *)((char *)a1 + v58);
      v60 = (_QWORD *)((char *)a2 + v58);
      *v59 = *v60;
      v59[1] = v60[1];
      v61 = v20[10];
      v62 = (char *)a1 + v61;
      v63 = (char *)a2 + v61;
      v64 = type metadata accessor for AspireApiEvaluationKey(0);
      v169 = *(_QWORD *)(v64 - 8);
      v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48);
      swift_bridgeObjectRetain();
      if (v65(v63, 1, v64))
      {
        v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        v173(v62, v63, (void *)v50);
        v67 = *(int *)(v64 + 20);
        v68 = &v62[v67];
        v69 = &v63[v67];
        if (v165(&v63[v67], 1, v47))
        {
          v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v68 = *(_QWORD *)v69;
          v79 = v62;
          v81 = *((_QWORD *)v69 + 1);
          v80 = *((_QWORD *)v69 + 2);
          outlined copy of Data._Representation(v81, v80);
          *((_QWORD *)v68 + 1) = v81;
          *((_QWORD *)v68 + 2) = v80;
          v62 = v79;
          v173(&v68[*(int *)(v47 + 24)], &v69[*(int *)(v47 + 24)], __dst);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v68, 0, 1, v47);
        }
        v82 = *(int *)(v64 + 24);
        v83 = &v62[v82];
        v84 = &v63[v82];
        v85 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v86 = *(_QWORD *)(v85 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
        {
          v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        }
        else
        {
          v164 = v86;
          v173(v83, v84, __dst);
          v93 = *(int *)(v85 + 20);
          v167 = v83;
          v94 = &v83[v93];
          v95 = &v84[v93];
          v96 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v97 = *(_QWORD *)(v96 - 8);
          v159 = v62;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
          {
            v98 = __dst;
            v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v94 = *(_QWORD *)v95;
            v109 = *(int *)(v96 + 20);
            v110 = &v94[v109];
            v111 = &v95[v109];
            swift_bridgeObjectRetain();
            v112 = v110;
            v98 = __dst;
            v173(v112, v111, __dst);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
          }
          v113 = *(int *)(v85 + 24);
          v114 = &v83[v113];
          v115 = &v84[v113];
          v116 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v117 = *(_QWORD *)(v116 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
          {
            v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
            v62 = v159;
          }
          else
          {
            v173(v114, v115, v98);
            v126 = *(int *)(v116 + 20);
            v157 = &v114[v126];
            v127 = &v115[v126];
            v128 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v129 = *(_QWORD *)(v128 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
            {
              v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v157, v127, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
              v62 = v159;
              v83 = v167;
            }
            else
            {
              v152 = v129;
              v173(v157, v127, __dst);
              v155 = v128;
              v137 = *(int *)(v128 + 20);
              v138 = &v157[v137];
              v139 = &v127[v137];
              v140 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v141 = *(_QWORD *)(v140 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
              {
                v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v138 = *(_QWORD *)v139;
                v145 = *(int *)(v140 + 20);
                v150 = &v138[v145];
                v146 = &v139[v145];
                swift_bridgeObjectRetain();
                v173(v150, v146, __dst);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
              }
              v62 = v159;
              v83 = v167;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v157, 0, 1, v155);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v83, 0, 1, v85);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v62, 0, 1, v64);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AspireApiRequest.OneOf_Request(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  char *v138;
  _OWORD *v139;
  void (*v140)(char *, char *, uint64_t);
  uint64_t v141;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    v5 = (int *)type metadata accessor for AspireApiPECRequest(0);
    v6 = v5[7];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = a1;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
    v11(v7, v8, v10);
    v12 = v5[8];
    v139 = v9;
    v13 = (_QWORD *)((char *)v9 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v135 = v11;
    v137 = v10;
    if (v17((char *)v14, 1, v15))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
      v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v31 = v5[9];
    a1 = v139;
    v32 = (char *)v139 + v31;
    v33 = (char *)a2 + v31;
    v34 = type metadata accessor for AspireApiEvaluationKey(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v133 = v35;
      v11(v32, v33, v137);
      v44 = *(int *)(v34 + 20);
      v45 = &v32[v44];
      v46 = &v33[v44];
      if (v17(&v33[v44], 1, v15))
      {
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v45 = *(_QWORD *)v46;
        *(_OWORD *)(v45 + 8) = *(_OWORD *)(v46 + 8);
        v11(&v45[*(int *)(v15 + 24)], &v46[*(int *)(v15 + 24)], v137);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
      }
      v58 = v133;
      a1 = v139;
      v59 = *(int *)(v34 + 24);
      v60 = &v32[v59];
      v61 = &v33[v59];
      v62 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v63 = *(_QWORD *)(v62 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
      {
        v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        v129 = v63;
        v135(v60, v61, v137);
        v72 = *(int *)(v62 + 20);
        v131 = v60;
        v73 = &v60[v72];
        v74 = &v61[v72];
        v75 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v76 = *(_QWORD *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
          v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v73 = *(_QWORD *)v74;
          v135(&v73[*(int *)(v75 + 20)], &v74[*(int *)(v75 + 20)], v137);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
        }
        a1 = v139;
        v84 = *(int *)(v62 + 24);
        v85 = &v60[v84];
        v86 = &v61[v84];
        v87 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v88 = *(_QWORD *)(v87 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
        {
          v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        }
        else
        {
          v141 = v88;
          v135(v85, v86, v137);
          v96 = *(int *)(v87 + 20);
          v97 = &v85[v96];
          v98 = &v86[v96];
          v99 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v100 = *(_QWORD *)(v99 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
          {
            v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
            v60 = v131;
            v102 = v141;
          }
          else
          {
            v135(v97, v98, v137);
            v125 = v99;
            v127 = v97;
            v111 = *(int *)(v99 + 20);
            v112 = &v97[v111];
            v113 = &v98[v111];
            v114 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v123 = *(_QWORD *)(v114 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v113, 1, v114))
            {
              v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v112 = *(_QWORD *)v113;
              v135(&v112[*(int *)(v114 + 20)], &v113[*(int *)(v114 + 20)], v137);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v112, 0, 1, v114);
            }
            v60 = v131;
            v102 = v141;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v127, 0, 1, v125);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v85, 0, 1, v87);
        }
        v58 = v133;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v60, 0, 1, v62);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v32, 0, 1, v34);
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
    v19 = (int *)type metadata accessor for AspireApiPIRRequest(0);
    v20 = v19[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for UnknownStorage();
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
    v24(v21, v22, v23);
    v25 = v19[7];
    v26 = (_OWORD *)((char *)a1 + v25);
    v27 = (_OWORD *)((char *)a2 + v25);
    v28 = type metadata accessor for AspirePirEncryptedIndices(0);
    v29 = *(_QWORD *)(v28 - 8);
    v140 = v24;
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      *v26 = *v27;
      v24((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v23);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v37 = v19[8];
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    if (v42((char *)v39, 1, v40))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      *v38 = *v39;
      *(_OWORD *)(v38 + 1) = *(_OWORD *)(v39 + 1);
      v140((char *)v38 + *(int *)(v40 + 24), (char *)v39 + *(int *)(v40 + 24), v23);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    *(_OWORD *)((char *)a1 + v19[9]) = *(_OWORD *)((char *)a2 + v19[9]);
    v48 = v19[10];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    v51 = type metadata accessor for AspireApiEvaluationKey(0);
    v52 = *(_QWORD *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v136 = v52;
      v140(v49, v50, v23);
      v54 = *(int *)(v51 + 20);
      v138 = v49;
      v55 = &v49[v54];
      v56 = &v50[v54];
      if (v42(&v50[v54], 1, v40))
      {
        v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v55 = *(_QWORD *)v56;
        *(_OWORD *)(v55 + 8) = *(_OWORD *)(v56 + 8);
        v140(&v55[*(int *)(v40 + 24)], &v56[*(int *)(v40 + 24)], v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v55, 0, 1, v40);
      }
      v65 = v136;
      v66 = *(int *)(v51 + 24);
      v67 = &v49[v66];
      v68 = &v50[v66];
      v69 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v70 = *(_QWORD *)(v69 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
      {
        v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        v132 = v70;
        v140(v67, v68, v23);
        v78 = *(int *)(v69 + 20);
        v134 = v67;
        v79 = &v67[v78];
        v80 = &v68[v78];
        v81 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v82 = *(_QWORD *)(v81 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
        {
          v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v79 = *(_QWORD *)v80;
          v140(&v79[*(int *)(v81 + 20)], &v80[*(int *)(v81 + 20)], v23);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
        }
        v49 = v138;
        v90 = *(int *)(v69 + 24);
        v91 = &v134[v90];
        v92 = &v68[v90];
        v93 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v94 = *(_QWORD *)(v93 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
        {
          v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        }
        else
        {
          v130 = v94;
          v140(v91, v92, v23);
          v103 = *(int *)(v93 + 20);
          v128 = v91;
          v104 = &v91[v103];
          v105 = &v92[v103];
          v106 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v107 = *(_QWORD *)(v106 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
          {
            v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
            v110 = v128;
            v109 = v130;
          }
          else
          {
            v140(v104, v105, v23);
            v124 = v106;
            v126 = v104;
            v116 = *(int *)(v106 + 20);
            v117 = &v104[v116];
            v118 = &v105[v116];
            v119 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v122 = *(_QWORD *)(v119 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v118, 1, v119))
            {
              v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v117 = *(_QWORD *)v118;
              v140(&v117[*(int *)(v119 + 20)], &v118[*(int *)(v119 + 20)], v23);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v117, 0, 1, v119);
            }
            v110 = v128;
            v109 = v130;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v126, 0, 1, v124);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v110, 0, 1, v93);
        }
        v65 = v136;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v134, 0, 1, v69);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v49, 0, 1, v51);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AspireApiRequest.OneOf_Request(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  char *v139;
  uint64_t v140;
  void (*v141)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireApiRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      v5 = (int *)type metadata accessor for AspireApiPECRequest(0);
      v6 = v5[7];
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for UnknownStorage();
      v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      v10(v7, v8, v9);
      v11 = v5[8];
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      v14 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v15 = *(_QWORD *)(v14 - 8);
      v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      v138 = v10;
      v140 = v9;
      if (v16((char *)v13, 1, v14))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        *v12 = *v13;
        *(_OWORD *)(v12 + 1) = *(_OWORD *)(v13 + 1);
        v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v30 = v5[9];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for AspireApiEvaluationKey(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v43 = v15;
        v136 = v34;
        v138(v31, v32, v9);
        v44 = *(int *)(v33 + 20);
        v134 = v31;
        v45 = &v31[v44];
        v46 = &v32[v44];
        if (v16(&v32[v44], 1, v14))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v45 = *(_QWORD *)v46;
          *(_OWORD *)(v45 + 8) = *(_OWORD *)(v46 + 8);
          v138(&v45[*(int *)(v14 + 24)], &v46[*(int *)(v14 + 24)], v9);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v45, 0, 1, v14);
        }
        v59 = v31;
        v58 = v136;
        v60 = *(int *)(v33 + 24);
        v61 = &v31[v60];
        v62 = &v32[v60];
        v63 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v64 = *(_QWORD *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        }
        else
        {
          v130 = v64;
          v138(v61, v62, v9);
          v73 = *(int *)(v63 + 20);
          v132 = v61;
          v74 = &v61[v73];
          v75 = &v62[v73];
          v76 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v77 = *(_QWORD *)(v76 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v74 = *(_QWORD *)v75;
            v138(&v74[*(int *)(v76 + 20)], &v75[*(int *)(v76 + 20)], v140);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
          }
          v85 = *(int *)(v63 + 24);
          v86 = &v61[v85];
          v87 = &v62[v85];
          v88 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v89 = *(_QWORD *)(v88 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
          {
            v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
            v59 = v134;
            v58 = v136;
          }
          else
          {
            v138(v86, v87, v140);
            v97 = *(int *)(v88 + 20);
            v98 = &v86[v97];
            v99 = &v87[v97];
            v100 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v101 = *(_QWORD *)(v100 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
            {
              v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
              v61 = v132;
              v59 = v134;
            }
            else
            {
              v124 = v101;
              v138(v98, v99, v140);
              v126 = v100;
              v129 = v98;
              v111 = *(int *)(v100 + 20);
              v112 = &v98[v111];
              v113 = &v99[v111];
              v114 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v123 = *(_QWORD *)(v114 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v113, 1, v114))
              {
                v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v112 = *(_QWORD *)v113;
                v138(&v112[*(int *)(v114 + 20)], &v113[*(int *)(v114 + 20)], v140);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v112, 0, 1, v114);
              }
              v61 = v132;
              v59 = v134;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v129, 0, 1, v126);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
            v58 = v136;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v61, 0, 1, v63);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v33);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
      v18 = (int *)type metadata accessor for AspireApiPIRRequest(0);
      v19 = v18[6];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for UnknownStorage();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
      v23(v20, v21, v22);
      v24 = v18[7];
      v25 = (_OWORD *)((char *)a1 + v24);
      v26 = (_OWORD *)((char *)a2 + v24);
      v27 = type metadata accessor for AspirePirEncryptedIndices(0);
      v28 = *(_QWORD *)(v27 - 8);
      v141 = v23;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        *v25 = *v26;
        v23((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v22);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v36 = v18[8];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)((char *)a2 + v36);
      v39 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
      v40 = *(_QWORD *)(v39 - 8);
      v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      if (v41((char *)v38, 1, v39))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        *v37 = *v38;
        *(_OWORD *)(v37 + 1) = *(_OWORD *)(v38 + 1);
        v141((char *)v37 + *(int *)(v39 + 24), (char *)v38 + *(int *)(v39 + 24), v22);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      *(_OWORD *)((char *)a1 + v18[9]) = *(_OWORD *)((char *)a2 + v18[9]);
      v48 = v18[10];
      v49 = (char *)a1 + v48;
      v50 = (char *)a2 + v48;
      v51 = type metadata accessor for AspireApiEvaluationKey(0);
      v52 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
      {
        v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        v137 = v52;
        v141(v49, v50, v22);
        v54 = *(int *)(v51 + 20);
        v139 = v49;
        v55 = &v49[v54];
        v56 = &v50[v54];
        if (v41(&v50[v54], 1, v39))
        {
          v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
          memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v55 = *(_QWORD *)v56;
          *(_OWORD *)(v55 + 8) = *(_OWORD *)(v56 + 8);
          v141(&v55[*(int *)(v39 + 24)], &v56[*(int *)(v39 + 24)], v22);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v55, 0, 1, v39);
        }
        v66 = v137;
        v67 = *(int *)(v51 + 24);
        v68 = &v49[v67];
        v69 = &v50[v67];
        v70 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v71 = *(_QWORD *)(v70 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
        {
          v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        else
        {
          v133 = v71;
          v141(v68, v69, v22);
          v79 = *(int *)(v70 + 20);
          v135 = v68;
          v80 = &v68[v79];
          v81 = &v69[v79];
          v82 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v83 = *(_QWORD *)(v82 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
          {
            v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v80 = *(_QWORD *)v81;
            v141(&v80[*(int *)(v82 + 20)], &v81[*(int *)(v82 + 20)], v22);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
          }
          v49 = v139;
          v91 = *(int *)(v70 + 24);
          v92 = &v135[v91];
          v93 = &v69[v91];
          v94 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v95 = *(_QWORD *)(v94 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
          {
            v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
          }
          else
          {
            v131 = v95;
            v141(v92, v93, v22);
            v103 = *(int *)(v94 + 20);
            v128 = v92;
            v104 = &v92[v103];
            v105 = &v93[v103];
            v106 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v107 = *(_QWORD *)(v106 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
            {
              v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
              v110 = v128;
              v109 = v131;
            }
            else
            {
              v141(v104, v105, v22);
              v125 = v106;
              v127 = v104;
              v116 = *(int *)(v106 + 20);
              v117 = &v104[v116];
              v118 = &v105[v116];
              v119 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v122 = *(_QWORD *)(v119 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v118, 1, v119))
              {
                v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v117 = *(_QWORD *)v118;
                v141(&v117[*(int *)(v119 + 20)], &v118[*(int *)(v119 + 20)], v22);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v117, 0, 1, v119);
              }
              v110 = v128;
              v109 = v131;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v127, 0, 1, v125);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v110, 0, 1, v94);
          }
          v66 = v137;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v135, 0, 1, v70);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v49, 0, 1, v51);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspireApiRequest.OneOf_Request(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AMDPbHEConfig.OneOf_Config(a1, a2, a3, type metadata accessor for AspireApiPIRRequest, type metadata accessor for AspireApiPECRequest);
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
        v12 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
      else
        v12 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v17 = *(int *)(a3 + 20);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for AspireApiResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1)
      v6 = type metadata accessor for AspireApiPECResponse(0);
    else
      v6 = type metadata accessor for AspireApiPIRResponse(0);
    v7 = a1 + *(int *)(v6 + 20);
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  v9 = a1 + *(int *)(a2 + 20);
  v10 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

_QWORD *initializeWithCopy for AspireApiResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v10 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
    else
      v10 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v15 = *(int *)(a3 + 20);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

_QWORD *assignWithCopy for AspireApiResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v6 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
        v12 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
      else
        v12 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    v18 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (v18 == 1)
      v19 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
    else
      v19 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for UnknownStorage();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    swift_bridgeObjectRetain();
    v23(v20, v21, v22);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v24 = *(int *)(a3 + 20);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  return a1;
}

_QWORD *initializeWithTake for AspireApiResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v10 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
    else
      v10 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

_QWORD *assignWithTake for AspireApiResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
        v12 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
      else
        v12 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    v17 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (v17 == 1)
      v18 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
    else
      v18 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v22 = *(int *)(a3 + 20);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CD6BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AspireApiResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CD6C60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AspireApiResponse()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireApiResponse.OneOf_Response?, (void (*)(uint64_t))type metadata accessor for AspireApiResponse.OneOf_Response);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiResponse.OneOf_Response(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v7 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
    else
      v7 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AspireApiResponse.OneOf_Response(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
    v3 = type metadata accessor for AspireApiPECResponse(0);
  else
    v3 = type metadata accessor for AspireApiPIRResponse(0);
  v4 = a1 + *(int *)(v3 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AspireApiResponse.OneOf_Response(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
    v5 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
  else
    v5 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AspireApiResponse.OneOf_Response(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v5 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
    else
      v5 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithTake for AspireApiResponse.OneOf_Response(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
    v5 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
  else
    v5 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for AspireApiResponse.OneOf_Response(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AspireApiResponse.OneOf_Response);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v5 = *(int *)(type metadata accessor for AspireApiPECResponse(0) + 20);
    else
      v5 = *(int *)(type metadata accessor for AspireApiPIRResponse(0) + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AspireApiResponse.OneOf_Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AMDPbHEConfig.OneOf_Config(a1, a2, a3, type metadata accessor for AspireApiPIRResponse, type metadata accessor for AspireApiPECResponse);
}

_QWORD *initializeBufferWithCopyOfBuffer for AspireApiPIRShardConfig(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = a3[7];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = a3[8];
    v13 = a3[9];
    v14 = (_QWORD *)((char *)v4 + v12);
    v15 = (_QWORD *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v17 = a3[10];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[8];
  v12 = a3[9];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v16 = a3[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AspireApiPIRShardConfig(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[8];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v13 = a3[10];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_QWORD *)v14 = v16;
  return a1;
}

uint64_t initializeWithTake for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[10];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return a1;
}

uint64_t assignWithTake for AspireApiPIRShardConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[8];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPIRShardConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CD7728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRShardConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CD77B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspireApiPIRShardConfig()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireApiPIRConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CD78D4(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237CD79AC(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AspireApiPIRConfig()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspirePirKeywordPirParameters?, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPIRRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unsigned int (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a3[6];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for AspirePirEncryptedIndices(0);
    v18 = *(_QWORD *)(v17 - 8);
    v104 = v13;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = v16[1];
      *v15 = *v16;
      v15[1] = v21;
      v22 = *(int *)(v17 + 24);
      v23 = (char *)v15 + v22;
      v24 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      v13(v23, v24, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v25 = a3[8];
    v26 = (uint64_t *)((char *)v4 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v29 = *(_QWORD *)(v28 - 8);
    v101 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48);
    v99 = v29;
    if (v101(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      v31 = v104;
    }
    else
    {
      v32 = v27[1];
      *v26 = *v27;
      v33 = v12;
      v34 = v27[2];
      outlined copy of Data._Representation(v32, v34);
      v26[1] = v32;
      v26[2] = v34;
      v12 = v33;
      v35 = v33;
      v31 = v104;
      v104((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v35);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v36 = a3[9];
    v37 = a3[10];
    v38 = (uint64_t *)((char *)v4 + v36);
    v39 = (uint64_t *)((char *)a2 + v36);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = (char *)v4 + v37;
    v42 = (char *)a2 + v37;
    v43 = type metadata accessor for AspireApiEvaluationKey(0);
    v44 = *(_QWORD *)(v43 - 8);
    v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    swift_bridgeObjectRetain();
    if (v45(v42, 1, v43))
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v31(v41, v42, v12);
      v47 = *(int *)(v43 + 20);
      v48 = &v41[v47];
      v49 = &v42[v47];
      if (v101(&v42[v47], 1, v28))
      {
        v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        v96 = v12;
        v51 = *((_QWORD *)v49 + 1);
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v102 = v44;
        v52 = v41;
        v53 = *((_QWORD *)v49 + 2);
        outlined copy of Data._Representation(v51, v53);
        *((_QWORD *)v48 + 1) = v51;
        *((_QWORD *)v48 + 2) = v53;
        v12 = v96;
        v41 = v52;
        v44 = v102;
        v31(&v48[*(int *)(v28 + 24)], &v49[*(int *)(v28 + 24)], v96);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v48, 0, 1, v28);
      }
      v54 = *(int *)(v43 + 24);
      v55 = &v41[v54];
      v56 = &v42[v54];
      v57 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v58 = *(_QWORD *)(v57 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
      {
        v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        v94 = v58;
        v95 = v41;
        v103 = v44;
        v31(v55, v56, v12);
        v60 = *(int *)(v57 + 20);
        v100 = v55;
        v61 = &v55[v60];
        v62 = v12;
        v63 = &v56[v60];
        v64 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v65 = *(_QWORD *)(v64 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v61, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v61 = *(_QWORD *)v63;
          v67 = *(int *)(v64 + 20);
          v97 = &v61[v67];
          v68 = &v63[v67];
          swift_bridgeObjectRetain();
          v31(v97, v68, v62);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v61, 0, 1, v64);
        }
        v44 = v103;
        v69 = *(int *)(v57 + 24);
        v70 = &v100[v69];
        v71 = &v56[v69];
        v72 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v73 = *(_QWORD *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
        {
          v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          v93 = v73;
          v104(v70, v71, v62);
          v75 = *(int *)(v72 + 20);
          v76 = &v70[v75];
          v98 = v62;
          v77 = &v71[v75];
          v78 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v79 = *(_QWORD *)(v78 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
          {
            v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
            v44 = v103;
          }
          else
          {
            v89 = v79;
            v104(v76, v77, v98);
            v81 = *(int *)(v78 + 20);
            v92 = &v76[v81];
            v82 = &v77[v81];
            v83 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v88 = *(_QWORD *)(v83 - 8);
            v90 = v82;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v82, 1, v83))
            {
              v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v92, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v92 = *(_QWORD *)v82;
              v85 = *(int *)(v83 + 20);
              v86 = &v92[v85];
              v91 = (char *)v90 + v85;
              swift_bridgeObjectRetain();
              v104(v86, v91, v98);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v92, 0, 1, v83);
            }
            v44 = v103;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v76, 0, 1, v78);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v70, 0, 1, v72);
        }
        v41 = v95;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v100, 0, 1, v57);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
  }
  return v4;
}

uint64_t destroy for AspireApiPIRRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v25(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for AspirePirEncryptedIndices(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v25(v6 + *(int *)(v7 + 24), v5);
  }
  v8 = a1 + a2[8];
  v9 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  if (!v10(v8, 1, v9))
  {
    outlined consume of Data._Representation(*(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16));
    v25(v8 + *(int *)(v9 + 24), v5);
  }
  swift_bridgeObjectRelease();
  v11 = a1 + a2[10];
  v12 = type metadata accessor for AspireApiEvaluationKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    v25(v11, v5);
    v14 = v11 + *(int *)(v12 + 20);
    if (!v10(v14, 1, v9))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16));
      v25(v14 + *(int *)(v9 + 24), v5);
    }
    v15 = v11 + *(int *)(v12 + 24);
    v16 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16);
    if (!(_DWORD)result)
    {
      v25(v15, v5);
      v17 = v15 + *(int *)(v16 + 20);
      v18 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
      {
        swift_bridgeObjectRelease();
        v25(v17 + *(int *)(v18 + 20), v5);
      }
      v19 = v15 + *(int *)(v16 + 24);
      v20 = type metadata accessor for AspireHeSerializedRelinKey(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20);
      if (!(_DWORD)result)
      {
        v25(v19, v5);
        v21 = v19 + *(int *)(v20 + 20);
        v22 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22);
        if (!(_DWORD)result)
        {
          v25(v21, v5);
          v23 = v21 + *(int *)(v22 + 20);
          v24 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24);
          if (!(_DWORD)result)
          {
            swift_bridgeObjectRelease();
            return ((uint64_t (*)(uint64_t, uint64_t))v25)(v23 + *(int *)(v24 + 20), v5);
          }
        }
      }
    }
  }
  return result;
}

_DWORD *initializeWithCopy for AspireApiPIRRequest(_DWORD *a1, uint64_t a2, int *a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(_QWORD, _QWORD, _QWORD);
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  unsigned int (*v107)(_QWORD, _QWORD, _QWORD);
  _DWORD *v108;
  void (*v109)(char *, char *, uint64_t);

  v5 = a1;
  *a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  *((_QWORD *)v5 + 1) = v6;
  *((_QWORD *)v5 + 2) = v7;
  v8 = a3[6];
  v9 = (char *)v5 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (_QWORD *)((char *)v5 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = type metadata accessor for AspirePirEncryptedIndices(0);
  v17 = *(_QWORD *)(v16 - 8);
  v109 = (void (*)(char *, char *, uint64_t))v12;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = v15[1];
    *v14 = *v15;
    v14[1] = v19;
    v20 = *(int *)(v16 + 24);
    v21 = v5;
    v22 = (char *)v14 + v20;
    v23 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    v24 = v22;
    v5 = v21;
    v12(v24, (uint64_t)v23, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v25 = a3[8];
  v26 = (_QWORD *)((char *)v5 + v25);
  v27 = (_QWORD *)(a2 + v25);
  v28 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v29 + 48);
  v105 = v29;
  if (v30(v27, 1, v28))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    v32 = (void (*)(char *, char *, uint64_t))v12;
  }
  else
  {
    v33 = v5;
    v34 = v27[1];
    *v26 = *v27;
    v107 = v30;
    v35 = v11;
    v36 = v27[2];
    outlined copy of Data._Representation(v34, v36);
    v26[1] = v34;
    v26[2] = v36;
    v5 = v33;
    v11 = v35;
    v109((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v35);
    v37 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56);
    v32 = v109;
    v30 = v107;
    v37(v26, 0, 1, v28);
  }
  v38 = a3[9];
  v39 = a3[10];
  v40 = (_QWORD *)((char *)v5 + v38);
  v41 = (_QWORD *)(a2 + v38);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v108 = v5;
  v43 = (char *)v5 + v39;
  v44 = (char *)(a2 + v39);
  v45 = type metadata accessor for AspireApiEvaluationKey(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  swift_bridgeObjectRetain();
  if (v47(v44, 1, v45))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    return v108;
  }
  else
  {
    v32(v43, v44, v11);
    v50 = *(int *)(v45 + 20);
    v51 = &v43[v50];
    v52 = &v44[v50];
    if (v30(&v44[v50], 1, v28))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v103 = v46;
      v54 = v11;
      v55 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v56 = v43;
      v57 = *((_QWORD *)v52 + 2);
      outlined copy of Data._Representation(v55, v57);
      *((_QWORD *)v51 + 1) = v55;
      *((_QWORD *)v51 + 2) = v57;
      v11 = v54;
      v46 = v103;
      v43 = v56;
      v32(&v51[*(int *)(v28 + 24)], &v52[*(int *)(v28 + 24)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v51, 0, 1, v28);
    }
    v58 = *(int *)(v45 + 24);
    v59 = &v43[v58];
    v60 = &v44[v58];
    v61 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v62 = *(_QWORD *)(v61 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      v49 = v108;
    }
    else
    {
      v102 = v62;
      v104 = v43;
      v64 = v46;
      v32(v59, v60, v11);
      v65 = *(int *)(v61 + 20);
      v106 = v59;
      v66 = &v59[v65];
      v67 = v11;
      v68 = &v60[v65];
      v69 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v70 = v32;
      v71 = *(_QWORD *)(v69 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v68, 1, v69))
      {
        v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v66, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v66 = *(_QWORD *)v68;
        v73 = *(int *)(v69 + 20);
        v100 = &v66[v73];
        v74 = &v68[v73];
        swift_bridgeObjectRetain();
        v70(v100, v74, v67);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v66, 0, 1, v69);
      }
      v46 = v64;
      v75 = *(int *)(v61 + 24);
      v76 = &v106[v75];
      v77 = &v60[v75];
      v78 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v79 = *(_QWORD *)(v78 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
      {
        v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        v101 = v79;
        v109(v76, v77, v67);
        v81 = *(int *)(v78 + 20);
        v82 = &v76[v81];
        v99 = v67;
        v83 = &v77[v81];
        v84 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v85 = *(_QWORD *)(v84 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
        {
          v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          v46 = v64;
        }
        else
        {
          v95 = v85;
          v109(v82, v83, v99);
          v87 = *(int *)(v84 + 20);
          v98 = &v82[v87];
          v88 = &v83[v87];
          v89 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v94 = *(_QWORD *)(v89 - 8);
          v96 = v88;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v88, 1, v89))
          {
            v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v98, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v98 = *(_QWORD *)v88;
            v91 = *(int *)(v89 + 20);
            v92 = &v98[v91];
            v97 = (char *)v96 + v91;
            swift_bridgeObjectRetain();
            v109(v92, v97, v99);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v98, 0, 1, v89);
          }
          v46 = v64;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v82, 0, 1, v84);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v76, 0, 1, v78);
      }
      v49 = v108;
      v43 = v104;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v106, 0, 1, v61);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  return v49;
}

_DWORD *assignWithCopy for AspireApiPIRRequest(_DWORD *a1, uint64_t a2, int *a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  size_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(char *, uint64_t, uint64_t);
  int v92;
  int v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(char *, uint64_t, uint64_t);
  int v132;
  int v133;
  uint64_t v134;
  char *v135;
  char *v136;
  void (*v137)(char *, char *, uint64_t);
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(char *, char *, uint64_t);
  uint64_t v165;
  uint64_t (*v166)(char *, uint64_t, uint64_t);
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(char *, char *, uint64_t);
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t (*v185)(char *, uint64_t, uint64_t);
  int v186;
  int v187;
  void (*v188)(char *, char *, uint64_t);
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t (*v209)(char *, uint64_t, uint64_t);
  int v210;
  int v211;
  uint64_t v212;
  char *v213;
  char *v214;
  void (*v215)(char *, char *, uint64_t);
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  char *__dst;
  uint64_t v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(char *, uint64_t, uint64_t);
  _DWORD *v237;
  _DWORD *v238;
  char *v239;
  _QWORD *v240;
  char *v241;
  void (*v242)(char *, char *, uint64_t);
  char *v243;
  uint64_t v244;

  v5 = a1;
  *a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  v8 = *((_QWORD *)v5 + 1);
  v9 = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 1) = v6;
  *((_QWORD *)v5 + 2) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a3[6];
  v11 = (char *)v5 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v240 = *(_QWORD **)(v13 - 8);
  v236 = (void (*)(char *, uint64_t, uint64_t))v240[3];
  v236(v11, v12, v13);
  v14 = a3[7];
  v15 = (_QWORD *)((char *)v5 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = type metadata accessor for AspirePirEncryptedIndices(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  v244 = v13;
  if (v20)
  {
    if (!v21)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      v22 = *(int *)(v17 + 24);
      v23 = (char *)v15 + v22;
      v24 = (char *)v16 + v22;
      v25 = (void (*)(char *, char *, uint64_t))v240[2];
      swift_bridgeObjectRetain();
      v25(v23, v24, v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v15, type metadata accessor for AspirePirEncryptedIndices);
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  *v15 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[1] = v16[1];
  v236((char *)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v13);
LABEL_7:
  v27 = a3[8];
  v28 = (char *)v5 + v27;
  v29 = (char *)(a2 + v27);
  v30 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v35 = *((_QWORD *)v29 + 1);
      v36 = *((_QWORD *)v29 + 2);
      outlined copy of Data._Representation(v35, v36);
      *((_QWORD *)v28 + 1) = v35;
      *((_QWORD *)v28 + 2) = v36;
      ((void (*)(char *, char *, uint64_t))v240[2])(&v28[*(int *)(v30 + 24)], &v29[*(int *)(v30 + 24)], v244);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v28, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v59 = *((_QWORD *)v29 + 1);
  v60 = *((_QWORD *)v29 + 2);
  outlined copy of Data._Representation(v59, v60);
  v61 = *((_QWORD *)v28 + 1);
  v62 = *((_QWORD *)v28 + 2);
  *((_QWORD *)v28 + 1) = v59;
  *((_QWORD *)v28 + 2) = v60;
  outlined consume of Data._Representation(v61, v62);
  v236(&v28[*(int *)(v30 + 24)], (uint64_t)&v29[*(int *)(v30 + 24)], v244);
LABEL_13:
  v38 = a3[9];
  v39 = (_QWORD *)((char *)v5 + v38);
  v40 = (_QWORD *)(a2 + v38);
  *v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a3[10];
  v42 = (char *)v5 + v41;
  v43 = (char *)(a2 + v41);
  v44 = type metadata accessor for AspireApiEvaluationKey(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (!v47)
  {
    if (v48)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AspireApiEvaluationKey);
      goto LABEL_19;
    }
    v236(v42, (uint64_t)v43, v244);
    v63 = *(int *)(v44 + 20);
    v64 = &v42[v63];
    v65 = &v43[v63];
    v66 = v32(&v42[v63], 1, v30);
    v67 = v32(v65, 1, v30);
    if (v66)
    {
      if (!v67)
      {
        *(_QWORD *)v64 = *(_QWORD *)v65;
        v68 = *((_QWORD *)v65 + 1);
        v69 = *((_QWORD *)v65 + 2);
        outlined copy of Data._Representation(v68, v69);
        *((_QWORD *)v64 + 1) = v68;
        *((_QWORD *)v64 + 2) = v69;
        v70 = v244;
        ((void (*)(char *, char *, uint64_t))v240[2])(&v64[*(int *)(v30 + 24)], &v65[*(int *)(v30 + 24)], v244);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v64, 0, 1, v30);
LABEL_35:
        v86 = (void (*)(char *, char *, uint64_t))v236;
        goto LABEL_36;
      }
    }
    else
    {
      if (!v67)
      {
        *(_QWORD *)v64 = *(_QWORD *)v65;
        v121 = *((_QWORD *)v65 + 1);
        v120 = *((_QWORD *)v65 + 2);
        outlined copy of Data._Representation(v121, v120);
        v122 = *((_QWORD *)v64 + 1);
        v123 = *((_QWORD *)v64 + 2);
        *((_QWORD *)v64 + 1) = v121;
        *((_QWORD *)v64 + 2) = v120;
        outlined consume of Data._Representation(v122, v123);
        v124 = *(int *)(v30 + 24);
        v125 = &v65[v124];
        v70 = v244;
        v86 = (void (*)(char *, char *, uint64_t))v236;
        v236(&v64[v124], (uint64_t)v125, v244);
LABEL_36:
        v87 = *(int *)(v44 + 24);
        v42 += v87;
        v88 = &v43[v87];
        v89 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v90 = *(_QWORD *)(v89 - 8);
        v91 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48);
        v92 = v91(v42, 1, v89);
        v93 = v91(v88, 1, v89);
        if (v92)
        {
          if (!v93)
          {
            v234 = v90;
            v238 = v5;
            v94 = (void (*)(char *, char *, uint64_t))v240[2];
            v94(v42, v88, v70);
            v95 = *(int *)(v89 + 20);
            v96 = &v42[v95];
            v97 = &v88[v95];
            v98 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v99 = v70;
            v100 = *(_QWORD *)(v98 - 8);
            v242 = v94;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v97, 1, v98))
            {
              v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v96 = *(_QWORD *)v97;
              v138 = *(int *)(v98 + 20);
              v139 = &v96[v138];
              v140 = &v97[v138];
              swift_bridgeObjectRetain();
              v141 = v139;
              v70 = v99;
              v94(v141, v140, v99);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v96, 0, 1, v98);
            }
            v142 = *(int *)(v89 + 24);
            v143 = &v42[v142];
            v144 = &v88[v142];
            v145 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v146 = *(_QWORD *)(v145 - 8);
            v147 = v234;
            v5 = v238;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
            {
              v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
            }
            else
            {
              v242(v143, v144, v70);
              v157 = *(int *)(v145 + 20);
              v158 = &v143[v157];
              v159 = &v144[v157];
              v160 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v161 = *(_QWORD *)(v160 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v159, 1, v160))
              {
                v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
                v147 = v234;
              }
              else
              {
                v228 = v161;
                v242(v158, v159, v244);
                v172 = *(int *)(v160 + 20);
                v230 = v158;
                v173 = &v158[v172];
                v174 = &v159[v172];
                v175 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v227 = *(_QWORD *)(v175 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v227 + 48))(v174, 1, v175))
                {
                  v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v173 = *(_QWORD *)v174;
                  v195 = *(int *)(v175 + 20);
                  v224 = &v173[v195];
                  v196 = &v174[v195];
                  swift_bridgeObjectRetain();
                  v242(v224, v196, v244);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v227 + 56))(v173, 0, 1, v175);
                }
                v147 = v234;
                v5 = v238;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(v230, 0, 1, v160);
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
            }
            goto LABEL_85;
          }
          goto LABEL_42;
        }
        if (v93)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_42:
          v102 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_43:
          v56 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v102) - 8) + 64);
          v57 = v42;
          v58 = v88;
          goto LABEL_21;
        }
        v86(v42, v88, v70);
        v126 = *(int *)(v89 + 20);
        v127 = &v42[v126];
        v128 = &v88[v126];
        v129 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v130 = *(_QWORD *)(v129 - 8);
        v131 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v130 + 48);
        v132 = v131(v127, 1, v129);
        v133 = v131(v128, 1, v129);
        if (v132)
        {
          if (!v133)
          {
            *(_QWORD *)v127 = *(_QWORD *)v128;
            v134 = *(int *)(v129 + 20);
            v135 = &v127[v134];
            v136 = &v128[v134];
            v137 = (void (*)(char *, char *, uint64_t))v240[2];
            swift_bridgeObjectRetain();
            v137(v135, v136, v244);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
LABEL_63:
            v164 = (void (*)(char *, char *, uint64_t))v236;
            goto LABEL_64;
          }
        }
        else
        {
          if (!v133)
          {
            *(_QWORD *)v127 = *(_QWORD *)v128;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v164 = (void (*)(char *, char *, uint64_t))v236;
            v236(&v127[*(int *)(v129 + 20)], (uint64_t)&v128[*(int *)(v129 + 20)], v244);
LABEL_64:
            v165 = *(int *)(v89 + 24);
            v42 += v165;
            v43 = &v88[v165];
            v89 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v147 = *(_QWORD *)(v89 - 8);
            v166 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v147 + 48);
            v167 = v166(v42, 1, v89);
            v168 = v166(v43, 1, v89);
            if (v167)
            {
              if (v168)
              {
                v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
                memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
                return v5;
              }
              v177 = (void (*)(char *, char *, uint64_t))v240[2];
              v177(v42, v43, v244);
              v178 = *(int *)(v89 + 20);
              v179 = &v42[v178];
              v180 = &v43[v178];
              v181 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v182 = *(_QWORD *)(v181 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v180, 1, v181))
              {
                v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
              }
              else
              {
                v177(v179, v180, v244);
                v198 = *(int *)(v181 + 20);
                v239 = v179;
                v243 = &v179[v198];
                v199 = &v180[v198];
                v200 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v235 = *(_QWORD *)(v200 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v235 + 48))(v199, 1, v200))
                {
                  v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v243, v199, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v243 = *(_QWORD *)v199;
                  v202 = *(int *)(v200 + 20);
                  v231 = &v243[v202];
                  v203 = &v199[v202];
                  swift_bridgeObjectRetain();
                  v177(v231, v203, v244);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v235 + 56))(v243, 0, 1, v200);
                }
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v239, 0, 1, v181);
              }
LABEL_85:
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v42, 0, 1, v89);
              return v5;
            }
            if (v168)
            {
              outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AspireHeSerializedRelinKey);
              v55 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
              goto LABEL_20;
            }
            v164(v42, v43, v244);
            v184 = *(int *)(v89 + 20);
            v42 += v184;
            v88 = &v43[v184];
            v89 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v147 = *(_QWORD *)(v89 - 8);
            v185 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v147 + 48);
            v186 = v185(v42, 1, v89);
            v187 = v185(v88, 1, v89);
            if (v186)
            {
              if (!v187)
              {
                v188 = (void (*)(char *, char *, uint64_t))v240[2];
                v188(v42, v88, v244);
                v189 = *(int *)(v89 + 20);
                v190 = &v42[v189];
                v191 = &v88[v189];
                v192 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v193 = *(_QWORD *)(v192 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192))
                {
                  v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v190 = *(_QWORD *)v191;
                  v216 = *(int *)(v192 + 20);
                  v217 = &v190[v216];
                  v218 = &v191[v216];
                  swift_bridgeObjectRetain();
                  v188(v217, v218, v244);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
                }
                goto LABEL_85;
              }
            }
            else
            {
              if (!v187)
              {
                v164(v42, v88, v244);
                v204 = *(int *)(v89 + 20);
                v205 = &v42[v204];
                v206 = &v88[v204];
                v207 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v208 = *(_QWORD *)(v207 - 8);
                v209 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v208 + 48);
                v210 = v209(v205, 1, v207);
                v211 = v209(v206, 1, v207);
                if (v210)
                {
                  if (!v211)
                  {
                    *(_QWORD *)v205 = *(_QWORD *)v206;
                    v212 = *(int *)(v207 + 20);
                    v213 = &v205[v212];
                    v214 = &v206[v212];
                    v215 = (void (*)(char *, char *, uint64_t))v240[2];
                    swift_bridgeObjectRetain();
                    v215(v213, v214, v244);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v205, 0, 1, v207);
                    return v5;
                  }
                }
                else
                {
                  if (!v211)
                  {
                    *(_QWORD *)v205 = *(_QWORD *)v206;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    v164(&v205[*(int *)(v207 + 20)], &v206[*(int *)(v207 + 20)], v244);
                    return v5;
                  }
                  outlined destroy of AspireApiPECConfig((uint64_t)v205, type metadata accessor for AspireHeSerializedCiphertextVec);
                }
                v56 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                            - 8)
                                + 64);
                v57 = v205;
                v58 = v206;
                goto LABEL_21;
              }
              outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AspireHeSerializedKeySwitchKey);
            }
            v102 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
            goto LABEL_43;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v127, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        goto LABEL_63;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v64, type metadata accessor for AspireApiEvaluationKeyMetadata);
    }
    v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    v70 = v244;
    goto LABEL_35;
  }
  if (v48)
  {
LABEL_19:
    v55 = &demangling cache variable for type metadata for AspireApiEvaluationKey?;
LABEL_20:
    v56 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v55) - 8) + 64);
    v57 = v42;
    v58 = v43;
LABEL_21:
    memcpy(v57, v58, v56);
    return v5;
  }
  v237 = v5;
  v49 = v42;
  v50 = (void (*)(char *, char *, uint64_t))v240[2];
  v50(v49, v43, v244);
  v51 = *(int *)(v44 + 20);
  v241 = v49;
  v52 = &v49[v51];
  v53 = &v43[v51];
  if (v32(&v43[v51], 1, v30))
  {
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v52 = *(_QWORD *)v53;
    v232 = v45;
    v71 = *((_QWORD *)v53 + 1);
    v72 = *((_QWORD *)v53 + 2);
    outlined copy of Data._Representation(v71, v72);
    *((_QWORD *)v52 + 1) = v71;
    *((_QWORD *)v52 + 2) = v72;
    v45 = v232;
    v50(&v52[*(int *)(v30 + 24)], &v53[*(int *)(v30 + 24)], v244);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v52, 0, 1, v30);
  }
  v73 = *(int *)(v44 + 24);
  v74 = &v241[v73];
  v75 = &v43[v73];
  v76 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v77 = *(_QWORD *)(v76 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
  {
    v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v241, 0, 1, v44);
  }
  else
  {
    v229 = v77;
    v233 = v45;
    v50(v74, v75, v244);
    v79 = *(int *)(v76 + 20);
    v80 = &v74[v79];
    v81 = &v75[v79];
    v82 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    v83 = *(_QWORD *)(v82 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
    {
      v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v80 = *(_QWORD *)v81;
      v103 = *(int *)(v82 + 20);
      v225 = &v80[v103];
      v104 = &v81[v103];
      swift_bridgeObjectRetain();
      v50(v225, v104, v244);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
    }
    v105 = *(int *)(v76 + 24);
    v106 = &v74[v105];
    v107 = &v75[v105];
    v108 = type metadata accessor for AspireHeSerializedRelinKey(0);
    v109 = *(_QWORD *)(v108 - 8);
    v110 = v233;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
    {
      v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      v226 = v109;
      v50(v106, v107, v244);
      v112 = *(int *)(v108 + 20);
      v223 = v106;
      v113 = &v106[v112];
      v114 = &v107[v112];
      v115 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v116 = *(_QWORD *)(v115 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
      {
        v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
        v110 = v233;
        v119 = v223;
        v118 = v226;
      }
      else
      {
        v221 = v116;
        v50(v113, v114, v244);
        v149 = *(int *)(v115 + 20);
        v222 = v113;
        __dst = &v113[v149];
        v150 = &v114[v149];
        v151 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        v152 = *(_QWORD *)(v151 - 8);
        v153 = v150;
        v154 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151);
        v155 = v115;
        if (v154)
        {
          v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(__dst, v153, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dst = *v153;
          v170 = *(int *)(v151 + 20);
          v219 = &__dst[v170];
          v171 = (char *)v153 + v170;
          swift_bridgeObjectRetain();
          v50(v219, v171, v244);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(__dst, 0, 1, v151);
        }
        v110 = v233;
        v5 = v237;
        v119 = v223;
        v118 = v226;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v222, 0, 1, v155);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v119, 0, 1, v108);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v229 + 56))(v74, 0, 1, v76);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v241, 0, 1, v44);
  }
  return v5;
}

uint64_t initializeWithTake for AspireApiPIRRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AspirePirEncryptedIndices(0);
  v15 = *(_QWORD *)(v14 - 8);
  v77 = v9;
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = (void (*)(char *, char *, uint64_t))v10;
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v18 = v9;
    v16 = (void (*)(char *, char *, uint64_t))v10;
    v10((uint64_t)v12 + *(int *)(v14 + 24), (uint64_t)v13 + *(int *)(v14 + 24), v18);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v24((char *)v21, 1, v22))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *v20 = *v21;
    *(_OWORD *)(v20 + 1) = *(_OWORD *)(v21 + 1);
    v16((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v77);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v26 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v27 = (char *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = type metadata accessor for AspireApiEvaluationKey(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v75 = v30;
    v16(v27, v28, v77);
    v32 = *(int *)(v29 + 20);
    v76 = v27;
    v33 = &v27[v32];
    v34 = &v28[v32];
    if (v24(&v28[v32], 1, v22))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_OWORD *)(v33 + 8) = *(_OWORD *)(v34 + 8);
      v16(&v33[*(int *)(v22 + 24)], &v34[*(int *)(v22 + 24)], v77);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v33, 0, 1, v22);
    }
    v36 = v76;
    v37 = *(int *)(v29 + 24);
    v38 = &v76[v37];
    v39 = &v28[v37];
    v40 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      v43 = v75;
    }
    else
    {
      v73 = v41;
      v16(v38, v39, v77);
      v44 = *(int *)(v40 + 20);
      v74 = v38;
      v45 = &v38[v44];
      v46 = &v39[v44];
      v47 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v48 = *(_QWORD *)(v47 - 8);
      v72 = v16;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v16(&v45[*(int *)(v47 + 20)], &v46[*(int *)(v47 + 20)], v77);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      v50 = v74;
      v51 = *(int *)(v40 + 24);
      v52 = &v74[v51];
      v53 = &v39[v51];
      v54 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v55 = *(_QWORD *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        v16(v52, v53, v77);
        v57 = *(int *)(v54 + 20);
        v58 = &v52[v57];
        v59 = &v53[v57];
        v60 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
          v50 = v74;
        }
        else
        {
          v72(v58, v59, v77);
          v70 = v60;
          v71 = v58;
          v63 = *(int *)(v60 + 20);
          v64 = &v58[v63];
          v65 = &v59[v63];
          v66 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v69 = *(_QWORD *)(v66 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v65, 1, v66))
          {
            v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v64 = *(_QWORD *)v65;
            v72(&v64[*(int *)(v66 + 20)], &v65[*(int *)(v66 + 20)], v77);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v64, 0, 1, v66);
          }
          v50 = v74;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v71, 0, 1, v70);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      }
      v43 = v75;
      v36 = v76;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v50, 0, 1, v40);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v36, 0, 1, v29);
  }
  return a1;
}

uint64_t assignWithTake for AspireApiPIRRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  int v42;
  void (*v43)(uint64_t, char *, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  size_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unsigned int (**v64)(const void *, uint64_t, uint64_t);
  uint64_t v65;
  void (*v66)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, char *, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  int v79;
  int v80;
  void (*v81)(uint64_t, char *, uint64_t);
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (**v96)(const void *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t);
  int v116;
  int v117;
  uint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t, uint64_t);
  int v146;
  int v147;
  void (*v148)(uint64_t, char *, uint64_t);
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t (*v159)(uint64_t, uint64_t, uint64_t);
  int v160;
  int v161;
  void (*v162)(uint64_t, char *, uint64_t);
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (*v178)(char *, uint64_t, uint64_t);
  int v179;
  int v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *__dst;
  char *__dsta;
  void (**__dstb)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (**v188)(const void *, uint64_t, uint64_t);
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t, uint64_t);
  char *v195;
  uint64_t v196;
  _QWORD *v197;
  void (*v198)(char *, char *, uint64_t);
  void (*v199)(char *, char *, uint64_t);
  char *v200;
  uint64_t v201;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v6, v7);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v197 = *(_QWORD **)(v11 - 8);
  v194 = (void (*)(uint64_t, uint64_t, uint64_t))v197[5];
  v194(v9, v10, v11);
  v12 = a3[7];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for AspirePirEncryptedIndices(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  v201 = v11;
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      ((void (*)(char *, char *, uint64_t))v197[4])(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspirePirEncryptedIndices);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  v194((uint64_t)&v13[*(int *)(v15 + 24)], (uint64_t)&v14[*(int *)(v15 + 24)], v11);
LABEL_7:
  v21 = a3[8];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26((char *)v22, 1, v24);
  v28 = v26((char *)v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      *v22 = *v23;
      *(_OWORD *)(v22 + 1) = *(_OWORD *)(v23 + 1);
      ((void (*)(char *, char *, uint64_t))v197[4])((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v201);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v22, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  v52 = v23[2];
  v53 = v22[1];
  v54 = v22[2];
  *(_OWORD *)v22 = *(_OWORD *)v23;
  v22[2] = v52;
  outlined consume of Data._Representation(v53, v54);
  v194((uint64_t)v22 + *(int *)(v24 + 24), (uint64_t)v23 + *(int *)(v24 + 24), v201);
LABEL_13:
  v30 = a3[9];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = a3[10];
  v36 = a1 + v35;
  v37 = (char *)(a2 + v35);
  v38 = type metadata accessor for AspireApiEvaluationKey(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40((uint64_t)v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      v192 = v39;
      v43 = (void (*)(uint64_t, char *, uint64_t))v197[4];
      v43(v36, v37, v201);
      v44 = *(int *)(v38 + 20);
      v45 = (_QWORD *)(v36 + v44);
      v46 = &v37[v44];
      v198 = (void (*)(char *, char *, uint64_t))v43;
      if (v26(&v37[v44], 1, v24))
      {
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        *v45 = *(_QWORD *)v46;
        *(_OWORD *)(v45 + 1) = *(_OWORD *)(v46 + 8);
        v43((uint64_t)v45 + *(int *)(v24 + 24), &v46[*(int *)(v24 + 24)], v201);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v45, 0, 1, v24);
      }
      v60 = *(int *)(v38 + 24);
      v61 = (char *)(v36 + v60);
      v62 = &v37[v60];
      v63 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v64 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v63 - 8);
      if (v64[6](v62, 1, v63))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        v66 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v192 + 56);
      }
      else
      {
        v188 = v64;
        v43((uint64_t)v61, v62, v201);
        v67 = *(int *)(v63 + 20);
        v190 = v61;
        __dst = &v61[v67];
        v68 = &v62[v67];
        v69 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v70 = *(_QWORD *)(v69 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          v71 = (void (*)(char *, char *, uint64_t))v43;
          v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dst = *(_QWORD *)v68;
          v71 = (void (*)(char *, char *, uint64_t))v43;
          v43((uint64_t)&__dst[*(int *)(v69 + 20)], &v68[*(int *)(v69 + 20)], v201);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(__dst, 0, 1, v69);
        }
        v89 = *(int *)(v63 + 24);
        v90 = v190;
        v91 = &v190[v89];
        v92 = &v62[v89];
        v93 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v94 = *(_QWORD *)(v93 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
        {
          v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          v96 = v188;
          v97 = v192;
        }
        else
        {
          v71(v91, v92, v201);
          v98 = *(int *)(v93 + 20);
          __dsta = v91;
          v99 = &v91[v98];
          v100 = &v92[v98];
          v101 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v102 = *(_QWORD *)(v101 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
          {
            v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
            v90 = v190;
            v97 = v192;
            v104 = __dsta;
          }
          else
          {
            v182 = v102;
            v184 = v94;
            v198(v99, v100, v201);
            v129 = *(int *)(v101 + 20);
            v183 = v99;
            v181 = &v99[v129];
            v130 = &v100[v129];
            v131 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v132 = *(_QWORD *)(v131 - 8);
            v133 = v130;
            v134 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131);
            v135 = v101;
            if (v134)
            {
              v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v181, v133, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v181 = *(_QWORD *)v133;
              v198(&v181[*(int *)(v131 + 20)], &v133[*(int *)(v131 + 20)], v201);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v181, 0, 1, v131);
            }
            v90 = v190;
            v97 = v192;
            v94 = v184;
            v104 = __dsta;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v183, 0, 1, v135);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v104, 0, 1, v93);
          v96 = v188;
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v96[7])(v90, 0, 1, v63);
        v66 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v97 + 56);
      }
      goto LABEL_89;
    }
    goto LABEL_19;
  }
  if (!v42)
  {
    v194(v36, (uint64_t)v37, v201);
    v55 = *(int *)(v38 + 20);
    v56 = (_QWORD *)(v36 + v55);
    v57 = &v37[v55];
    v58 = v26((char *)(v36 + v55), 1, v24);
    v59 = v26(v57, 1, v24);
    if (v58)
    {
      if (!v59)
      {
        *v56 = *(_QWORD *)v57;
        *(_OWORD *)(v56 + 1) = *(_OWORD *)(v57 + 8);
        ((void (*)(char *, char *, uint64_t))v197[4])((char *)v56 + *(int *)(v24 + 24), &v57[*(int *)(v24 + 24)], v201);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v56, 0, 1, v24);
LABEL_35:
        v74 = (void (*)(uint64_t, char *, uint64_t))v194;
        goto LABEL_36;
      }
    }
    else
    {
      if (!v59)
      {
        v105 = *((_QWORD *)v57 + 2);
        v106 = v56[1];
        v107 = v56[2];
        *(_OWORD *)v56 = *(_OWORD *)v57;
        v56[2] = v105;
        outlined consume of Data._Representation(v106, v107);
        v108 = *(int *)(v24 + 24);
        v109 = &v57[v108];
        v74 = (void (*)(uint64_t, char *, uint64_t))v194;
        v194((uint64_t)v56 + v108, (uint64_t)v109, v201);
LABEL_36:
        v75 = *(int *)(v38 + 24);
        v36 += v75;
        v76 = &v37[v75];
        v38 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v77 = *(_QWORD *)(v38 - 8);
        v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
        v79 = v78(v36, 1, v38);
        v80 = v78((uint64_t)v76, 1, v38);
        if (v79)
        {
          if (!v80)
          {
            v193 = v77;
            v81 = (void (*)(uint64_t, char *, uint64_t))v197[4];
            v81(v36, v76, v201);
            v82 = *(int *)(v38 + 20);
            v83 = (_QWORD *)(v36 + v82);
            v84 = &v76[v82];
            v85 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v86 = *(_QWORD *)(v85 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
            {
              v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
            }
            else
            {
              *v83 = *(_QWORD *)v84;
              v81((uint64_t)v83 + *(int *)(v85 + 20), &v84[*(int *)(v85 + 20)], v201);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
            }
            v119 = (void (*)(char *, char *, uint64_t))v81;
            v120 = *(int *)(v38 + 24);
            v121 = (char *)(v36 + v120);
            v122 = &v76[v120];
            v123 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v124 = *(_QWORD *)(v123 - 8);
            v125 = v193;
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
            {
              v119(v121, v122, v201);
              v137 = *(int *)(v123 + 20);
              v138 = &v121[v137];
              v139 = &v122[v137];
              v199 = v119;
              v140 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v141 = *(_QWORD *)(v140 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
              {
                v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
                v125 = v193;
              }
              else
              {
                v191 = v141;
                v199(v138, v139, v201);
                v154 = *(int *)(v140 + 20);
                v195 = v138;
                v189 = &v138[v154];
                v155 = &v139[v154];
                v156 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                __dstb = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v156 - 8);
                if (((unsigned int (*)(char *, uint64_t, uint64_t))__dstb[6])(v155, 1, v156))
                {
                  v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v189, v155, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v189 = *(_QWORD *)v155;
                  v199(&v189[*(int *)(v156 + 20)], &v155[*(int *)(v156 + 20)], v201);
                  __dstb[7](v189, 0, 1, v156);
                }
                v125 = v193;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v191 + 56))(v195, 0, 1, v140);
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
              goto LABEL_88;
            }
            v126 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                         - 8)
                             + 64);
            v127 = v121;
LABEL_56:
            v128 = v122;
            goto LABEL_57;
          }
          goto LABEL_42;
        }
        if (v80)
        {
          outlined destroy of AspireApiPECConfig(v36, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_42:
          v88 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
          goto LABEL_43;
        }
        v74(v36, v76, v201);
        v110 = *(int *)(v38 + 20);
        v111 = (char *)(v36 + v110);
        v112 = &v76[v110];
        v113 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v114 = *(_QWORD *)(v113 - 8);
        v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
        v116 = v115(v111, 1, v113);
        v117 = v115(v112, 1, v113);
        if (v116)
        {
          if (!v117)
          {
            *(_QWORD *)v111 = *(_QWORD *)v112;
            v118 = v201;
            ((void (*)(char *, char *, uint64_t))v197[4])(&v111[*(int *)(v113 + 20)], &v112[*(int *)(v113 + 20)], v201);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
            goto LABEL_65;
          }
        }
        else
        {
          if (!v117)
          {
            *(_QWORD *)v111 = *(_QWORD *)v112;
            swift_bridgeObjectRelease();
            v118 = v201;
            v194((uint64_t)&v111[*(int *)(v113 + 20)], (uint64_t)&v112[*(int *)(v113 + 20)], v201);
LABEL_65:
            v144 = *(int *)(v38 + 24);
            v36 += v144;
            v37 = &v76[v144];
            v38 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v125 = *(_QWORD *)(v38 - 8);
            v145 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
            v146 = v145(v36, 1, v38);
            v147 = v145((uint64_t)v37, 1, v38);
            if (v146)
            {
              if (!v147)
              {
                v148 = (void (*)(uint64_t, char *, uint64_t))v197[4];
                v148(v36, v37, v118);
                v149 = *(int *)(v38 + 20);
                v150 = (char *)(v36 + v149);
                v122 = &v37[v149];
                v151 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v152 = v118;
                v153 = *(_QWORD *)(v151 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v122, 1, v151))
                {
                  v148((uint64_t)v150, v122, v152);
                  v168 = *(int *)(v151 + 20);
                  v200 = &v150[v168];
                  v169 = &v122[v168];
                  v170 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  v196 = *(_QWORD *)(v170 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v169, 1, v170))
                  {
                    v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v200, v169, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
                  }
                  else
                  {
                    *(_QWORD *)v200 = *(_QWORD *)v169;
                    v148((uint64_t)&v200[*(int *)(v170 + 20)], &v169[*(int *)(v170 + 20)], v201);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v200, 0, 1, v170);
                  }
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v153 + 56))(v150, 0, 1, v151);
                  goto LABEL_88;
                }
                v126 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                             - 8)
                                 + 64);
                v127 = v150;
                goto LABEL_56;
              }
            }
            else
            {
              if (!v147)
              {
                v194(v36, (uint64_t)v37, v118);
                v158 = *(int *)(v38 + 20);
                v36 += v158;
                v76 = &v37[v158];
                v38 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v125 = *(_QWORD *)(v38 - 8);
                v159 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
                v160 = v159(v36, 1, v38);
                v161 = v159((uint64_t)v76, 1, v38);
                if (v160)
                {
                  if (!v161)
                  {
                    v162 = (void (*)(uint64_t, char *, uint64_t))v197[4];
                    v162(v36, v76, v118);
                    v163 = *(int *)(v38 + 20);
                    v164 = (char *)(v36 + v163);
                    v165 = &v76[v163];
                    v166 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v167 = *(_QWORD *)(v166 - 8);
                    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v165, 1, v166))
                    {
                      *(_QWORD *)v164 = *(_QWORD *)v165;
                      v162((uint64_t)&v164[*(int *)(v166 + 20)], &v165[*(int *)(v166 + 20)], v118);
                      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v164, 0, 1, v166);
                      goto LABEL_88;
                    }
                    v126 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                 - 8)
                                     + 64);
                    v127 = v164;
                    v128 = v165;
LABEL_57:
                    memcpy(v127, v128, v126);
LABEL_88:
                    v66 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v125 + 56);
LABEL_89:
                    v66(v36, 0, 1, v38);
                    return a1;
                  }
                }
                else
                {
                  if (!v161)
                  {
                    v194(v36, (uint64_t)v76, v118);
                    v173 = *(int *)(v38 + 20);
                    v174 = (char *)(v36 + v173);
                    v175 = &v76[v173];
                    v176 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v177 = *(_QWORD *)(v176 - 8);
                    v178 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v177 + 48);
                    v179 = v178(v174, 1, v176);
                    v180 = v178(v175, 1, v176);
                    if (v179)
                    {
                      if (!v180)
                      {
                        *(_QWORD *)v174 = *(_QWORD *)v175;
                        ((void (*)(char *, char *, uint64_t))v197[4])(&v174[*(int *)(v176 + 20)], &v175[*(int *)(v176 + 20)], v118);
                        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v177 + 56))(v174, 0, 1, v176);
                        return a1;
                      }
                    }
                    else
                    {
                      if (!v180)
                      {
                        *(_QWORD *)v174 = *(_QWORD *)v175;
                        swift_bridgeObjectRelease();
                        v194((uint64_t)&v174[*(int *)(v176 + 20)], (uint64_t)&v175[*(int *)(v176 + 20)], v118);
                        return a1;
                      }
                      outlined destroy of AspireApiPECConfig((uint64_t)v174, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    v50 = v174;
                    v51 = v175;
                    goto LABEL_21;
                  }
                  outlined destroy of AspireApiPECConfig(v36, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                v88 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
LABEL_43:
                v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v88) - 8) + 64);
                v50 = (void *)v36;
                v51 = v76;
                goto LABEL_21;
              }
              outlined destroy of AspireApiPECConfig(v36, type metadata accessor for AspireHeSerializedRelinKey);
            }
            v48 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
            goto LABEL_20;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v111, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
        v118 = v201;
        goto LABEL_65;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v56, type metadata accessor for AspireApiEvaluationKeyMetadata);
    }
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_35;
  }
  outlined destroy of AspireApiPECConfig(v36, type metadata accessor for AspireApiEvaluationKey);
LABEL_19:
  v48 = &demangling cache variable for type metadata for AspireApiEvaluationKey?;
LABEL_20:
  v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v48) - 8) + 64);
  v50 = (void *)v36;
  v51 = v37;
LABEL_21:
  memcpy(v50, v51, v49);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPIRRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CDB154(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[9] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CDB268(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[7];
    }
    else
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      v9 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = result;
        v11 = a4[8];
      }
      else
      {
        if (a3 == 2147483646)
        {
          *(_QWORD *)(a1 + a4[9] + 8) = a2;
          return result;
        }
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for AspireApiPIRRequest()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspirePirEncryptedIndices?, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireApiEvaluationKeyMetadata?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
      if (v2 <= 0x3F)
      {
        type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireApiEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for AspireApiPIRResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireApiPIRResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for AspireApiPECConfig(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = a2[4];
    v8 = a2[5];
    outlined copy of Data._Representation(v7, v8);
    v4[4] = v7;
    v4[5] = v8;
    v4[6] = a2[6];
    v9 = a3[9];
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = a3[10];
    v15 = (_OWORD *)((char *)v4 + v14);
    v16 = (_OWORD *)((char *)a2 + v14);
    v17 = type metadata accessor for AspireHeEncryptionParameters(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      v21 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
      *((_QWORD *)v15 + 3) = v21;
      *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
      *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
      *((_BYTE *)v15 + 48) = *((_BYTE *)v16 + 48);
      *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
      *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
      v22 = *(int *)(v17 + 40);
      v23 = (char *)v15 + v22;
      v24 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      v13(v23, (uint64_t)v24, v12);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v25 = a3[11];
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v27, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v13(v26, (uint64_t)v27, v12);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v26, 0, 1, v31);
      }
      v13(&v26[*(int *)(v28 + 20)], (uint64_t)&v27[*(int *)(v28 + 20)], v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  return v4;
}

uint64_t destroy for AspireApiPECConfig(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease();
  v4 = a1 + a2[9];
  v5 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v12(v4, v5);
  v6 = a1 + a2[10];
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 40), v5);
  }
  v8 = a1 + a2[11];
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v8, 1, v11)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v12(v8, v5);
    }
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

uint64_t initializeWithCopy for AspireApiPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = a3[9];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = a3[10];
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v19 = *((_QWORD *)v15 + 3);
    *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
    *((_QWORD *)v14 + 3) = v19;
    *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
    *((_QWORD *)v14 + 5) = *((_QWORD *)v15 + 5);
    *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
    *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
    *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
    v20 = *(int *)(v16 + 40);
    v21 = (char *)v14 + v20;
    v22 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    v12((uint64_t)v21, (uint64_t)v22, v11);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v23 = a3[11];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v29 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v25, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v12((uint64_t)v24, (uint64_t)v25, v11);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v24, 0, 1, v29);
    }
    v12((uint64_t)&v24[*(int *)(v26 + 20)], (uint64_t)&v25[*(int *)(v26 + 20)], v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for AspireApiPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v7, v8);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  outlined consume of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[9];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v14 - 8);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 24);
  v54(v12, v13, v14);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AspireHeEncryptionParameters(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
      v23 = *(_QWORD *)(v17 + 24);
      *(_BYTE *)(v16 + 32) = *(_BYTE *)(v17 + 32);
      *(_QWORD *)(v16 + 24) = v23;
      v24 = *(_QWORD *)(v17 + 40);
      *(_BYTE *)(v16 + 48) = *(_BYTE *)(v17 + 48);
      *(_QWORD *)(v16 + 40) = v24;
      v25 = *(_QWORD *)(v17 + 56);
      *(_BYTE *)(v16 + 64) = *(_BYTE *)(v17 + 64);
      *(_QWORD *)(v16 + 56) = v25;
      v26 = *(int *)(v18 + 40);
      v27 = v16 + v26;
      v28 = v17 + v26;
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    outlined destroy of AspireApiPECConfig(v16, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v16, (const void *)v17, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(v17 + 24);
  *(_BYTE *)(v16 + 32) = *(_BYTE *)(v17 + 32);
  *(_QWORD *)(v16 + 24) = v43;
  v44 = *(_QWORD *)(v17 + 40);
  *(_BYTE *)(v16 + 48) = *(_BYTE *)(v17 + 48);
  *(_QWORD *)(v16 + 40) = v44;
  v45 = *(_QWORD *)(v17 + 56);
  *(_BYTE *)(v16 + 64) = *(_BYTE *)(v17 + 64);
  *(_QWORD *)(v16 + 56) = v45;
  v54(v16 + *(int *)(v18 + 40), v17 + *(int *)(v18 + 40), v14);
LABEL_7:
  v31 = a3[11];
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  v34 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v46 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
    v49 = v48(v32, 1, v46);
    v50 = v48(v33, 1, v46);
    if (v49)
    {
      if (!v50)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v32, v33, v14);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v32, 0, 1, v46);
LABEL_23:
        v54((uint64_t)&v32[*(int *)(v34 + 20)], (uint64_t)&v33[*(int *)(v34 + 20)], v14);
        return a1;
      }
    }
    else
    {
      if (!v50)
      {
        if (a1 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v32, v33, v14);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_23;
  }
  if (v38)
  {
LABEL_13:
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  v39 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v33, 1, v39))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v14);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v51 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
    v51(v32, v33, v14);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v32, 0, 1, v39);
    v51(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v14);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

uint64_t initializeWithTake for AspireApiPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 32) = v6;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[10];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v18 = *((_QWORD *)v14 + 3);
    *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
    *((_QWORD *)v13 + 3) = v18;
    *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
    *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
    *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
    *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
    *((_BYTE *)v13 + 64) = *((_BYTE *)v14 + 64);
    v11((uint64_t)v13 + *(int *)(v15 + 40), (uint64_t)v14 + *(int *)(v15 + 40), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[11];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v11((uint64_t)v20, (uint64_t)v21, v10);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
    }
    v11((uint64_t)&v20[*(int *)(v22 + 20)], (uint64_t)&v21[*(int *)(v22 + 20)], v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithTake for AspireApiPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v8 = a3[9];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v11 - 8);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 40);
  v42(v9, v10, v11);
  v12 = a3[10];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      v20 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = v20;
      *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
  v42(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v11);
LABEL_7:
  v22 = a3[11];
  v23 = (char *)(a1 + v22);
  v24 = (char *)(a2 + v22);
  v25 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (v29)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v34 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v35 = *(_QWORD *)(v34 - 8);
    v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
    v37 = v36(v23, 1, v34);
    v38 = v36(v24, 1, v34);
    if (v37)
    {
      if (!v38)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v23, v24, v11);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v23, 0, 1, v34);
LABEL_23:
        v42((uint64_t)&v23[*(int *)(v25 + 20)], (uint64_t)&v24[*(int *)(v25 + 20)], v11);
        return a1;
      }
    }
    else
    {
      if (!v38)
      {
        if (a1 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v23, v24, v11);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_23;
  }
  if (v29)
  {
LABEL_13:
    v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  v30 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v24, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v11);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v39 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v39(v23, v24, v11);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v23, 0, 1, v30);
    v39(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v11);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPECConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CDC83C(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[9];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[10];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[11];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPECConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CDC914(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 48) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[9];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[10];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[11];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AspireApiPECConfig()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireSimilarityPlaintextPacking?, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPECRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char *__dst;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = a2[2];
    a1[1] = a2[1];
    v9 = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v15 = a3[8];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    v19 = *(_QWORD *)(v18 - 8);
    v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    if (v86((char *)v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v83 = v19;
      v21 = v14;
      v22 = v13;
      v23 = v17[1];
      *v16 = *v17;
      v24 = v17[2];
      outlined copy of Data._Representation(v23, v24);
      v16[1] = v23;
      v16[2] = v24;
      v13 = v22;
      v14 = v21;
      v19 = v83;
      v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v16, 0, 1, v18);
    }
    v25 = a3[9];
    __dst = (char *)a1 + v25;
    v26 = (char *)a2 + v25;
    v27 = type metadata accessor for AspireApiEvaluationKey(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
      memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v14(__dst, v26, v13);
      v30 = *(int *)(v27 + 20);
      v31 = &__dst[v30];
      v32 = v13;
      v33 = &v26[v30];
      if (v86(&v26[v30], 1, v18))
      {
        v34 = v32;
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v31, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v84 = v19;
        v87 = v28;
        v36 = *((_QWORD *)v33 + 1);
        *(_QWORD *)v31 = *(_QWORD *)v33;
        v37 = *((_QWORD *)v33 + 2);
        outlined copy of Data._Representation(v36, v37);
        *((_QWORD *)v31 + 1) = v36;
        *((_QWORD *)v31 + 2) = v37;
        v28 = v87;
        v34 = v32;
        v14(&v31[*(int *)(v18 + 24)], &v33[*(int *)(v18 + 24)], v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v31, 0, 1, v18);
      }
      v38 = *(int *)(v27 + 24);
      v39 = &__dst[v38];
      v40 = &v26[v38];
      v41 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v82 = v42;
        v88 = v28;
        v44 = v34;
        v14(v39, v40, v34);
        v45 = *(int *)(v41 + 20);
        v85 = v39;
        v46 = &v39[v45];
        v47 = &v40[v45];
        v48 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v49 = *(_QWORD *)(v48 - 8);
        v81 = v14;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v46 = *(_QWORD *)v47;
          v51 = *(int *)(v48 + 20);
          v79 = &v46[v51];
          v52 = &v47[v51];
          swift_bridgeObjectRetain();
          v14(v79, v52, v44);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        }
        v53 = v85;
        v28 = v88;
        v54 = *(int *)(v41 + 24);
        v55 = &v85[v54];
        v56 = &v40[v54];
        v57 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v58 = *(_QWORD *)(v57 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
        {
          v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        }
        else
        {
          v80 = v58;
          v81(v55, v56, v44);
          v60 = *(int *)(v57 + 20);
          v61 = &v55[v60];
          v62 = &v56[v60];
          v63 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v64 = *(_QWORD *)(v63 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
          {
            v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
            v28 = v88;
            v66 = v80;
          }
          else
          {
            v78 = v64;
            v81(v61, v62, v44);
            v67 = *(int *)(v63 + 20);
            v76 = v61;
            v77 = &v61[v67];
            v68 = &v62[v67];
            v69 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v75 = *(_QWORD *)(v69 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v68, 1, v69))
            {
              v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v77, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v77 = *(_QWORD *)v68;
              v71 = *(int *)(v69 + 20);
              v74 = &v77[v71];
              v72 = &v68[v71];
              swift_bridgeObjectRetain();
              v81(v74, v72, v44);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v77, 0, 1, v69);
            }
            v28 = v88;
            v66 = v80;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v76, 0, 1, v63);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v55, 0, 1, v57);
          v53 = v85;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v53, 0, 1, v41);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
    }
  }
  return a1;
}

uint64_t destroy for AspireApiPECRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + a2[7];
  v5 = type metadata accessor for UnknownStorage();
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v23(v4, v5);
  v6 = a1 + a2[8];
  v7 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
  {
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
    v23(v6 + *(int *)(v7 + 24), v5);
  }
  v9 = a1 + a2[9];
  v10 = type metadata accessor for AspireApiEvaluationKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
  {
    v23(v9, v5);
    v12 = v9 + *(int *)(v10 + 20);
    if (!v8(v12, 1, v7))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16));
      v23(v12 + *(int *)(v7 + 24), v5);
    }
    v13 = v9 + *(int *)(v10 + 24);
    v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
    if (!(_DWORD)result)
    {
      v23(v13, v5);
      v15 = v13 + *(int *)(v14 + 20);
      v16 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
      {
        swift_bridgeObjectRelease();
        v23(v15 + *(int *)(v16 + 20), v5);
      }
      v17 = v13 + *(int *)(v14 + 24);
      v18 = type metadata accessor for AspireHeSerializedRelinKey(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18);
      if (!(_DWORD)result)
      {
        v23(v17, v5);
        v19 = v17 + *(int *)(v18 + 20);
        v20 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20);
        if (!(_DWORD)result)
        {
          v23(v19, v5);
          v21 = v19 + *(int *)(v20 + 20);
          v22 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22);
          if (!(_DWORD)result)
          {
            swift_bridgeObjectRelease();
            return ((uint64_t (*)(uint64_t, uint64_t))v23)(v21 + *(int *)(v22 + 20), v5);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AspireApiPECRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char *__dst;

  v5 = a1;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  v5[2] = v7;
  v5[3] = v8;
  v9 = a3[7];
  v10 = (char *)v5 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v14 = a3[8];
  v15 = (_QWORD *)((char *)v5 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v18 = *(_QWORD *)(v17 - 8);
  v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v86((char *)v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v83 = v18;
    v20 = v13;
    v21 = v5;
    v22 = v12;
    v23 = v16[1];
    *v15 = *v16;
    v24 = v16[2];
    outlined copy of Data._Representation(v23, v24);
    v15[1] = v23;
    v15[2] = v24;
    v12 = v22;
    v5 = v21;
    v13 = v20;
    v18 = v83;
    v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v15, 0, 1, v17);
  }
  v25 = a3[9];
  __dst = (char *)v5 + v25;
  v26 = (char *)a2 + v25;
  v27 = type metadata accessor for AspireApiEvaluationKey(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v13(__dst, v26, v12);
    v30 = *(int *)(v27 + 20);
    v31 = &__dst[v30];
    v32 = v12;
    v33 = &v26[v30];
    if (v86(&v26[v30], 1, v17))
    {
      v34 = v32;
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v31, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v84 = v18;
      v87 = v28;
      v36 = *((_QWORD *)v33 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v33;
      v37 = *((_QWORD *)v33 + 2);
      outlined copy of Data._Representation(v36, v37);
      *((_QWORD *)v31 + 1) = v36;
      *((_QWORD *)v31 + 2) = v37;
      v28 = v87;
      v34 = v32;
      v13(&v31[*(int *)(v17 + 24)], &v33[*(int *)(v17 + 24)], v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v31, 0, 1, v17);
    }
    v38 = *(int *)(v27 + 24);
    v39 = &__dst[v38];
    v40 = &v26[v38];
    v41 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      v82 = v42;
      v88 = v28;
      v44 = v34;
      v13(v39, v40, v34);
      v45 = *(int *)(v41 + 20);
      v85 = v39;
      v46 = &v39[v45];
      v47 = &v40[v45];
      v48 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v49 = *(_QWORD *)(v48 - 8);
      v81 = v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v46 = *(_QWORD *)v47;
        v51 = *(int *)(v48 + 20);
        v79 = &v46[v51];
        v52 = &v47[v51];
        swift_bridgeObjectRetain();
        v13(v79, v52, v44);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      v53 = v85;
      v28 = v88;
      v54 = *(int *)(v41 + 24);
      v55 = &v85[v54];
      v56 = &v40[v54];
      v57 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v58 = *(_QWORD *)(v57 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
      {
        v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        v80 = v58;
        v81(v55, v56, v44);
        v60 = *(int *)(v57 + 20);
        v61 = &v55[v60];
        v62 = &v56[v60];
        v63 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v64 = *(_QWORD *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          v28 = v88;
          v66 = v80;
        }
        else
        {
          v77 = v64;
          v81(v61, v62, v44);
          v67 = *(int *)(v63 + 20);
          v78 = v61;
          v76 = &v61[v67];
          v68 = &v62[v67];
          v69 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v75 = *(_QWORD *)(v69 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v68, 1, v69))
          {
            v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v76, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v76 = *(_QWORD *)v68;
            v71 = *(int *)(v69 + 20);
            v74 = &v76[v71];
            v72 = &v68[v71];
            swift_bridgeObjectRetain();
            v81(v74, v72, v44);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v76, 0, 1, v69);
          }
          v28 = v88;
          v66 = v80;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v78, 0, 1, v63);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v55, 0, 1, v57);
        v53 = v85;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v53, 0, 1, v41);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
  }
  return v5;
}

_QWORD *assignWithCopy for AspireApiPECRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  int v33;
  void (*v34)(uint64_t, char *, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  size_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, char *, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  int v80;
  int v81;
  void (*v82)(uint64_t, char *, uint64_t);
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(char *, uint64_t, uint64_t);
  int v119;
  int v120;
  uint64_t v121;
  char *v122;
  char *v123;
  void (*v124)(char *, char *, uint64_t);
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  size_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, char *, uint64_t);
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t, uint64_t);
  int v157;
  int v158;
  void (*v159)(uint64_t, char *, uint64_t);
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  void (*v166)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(uint64_t, uint64_t, uint64_t);
  int v177;
  int v178;
  void (*v179)(uint64_t, char *, uint64_t);
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t (*v199)(char *, uint64_t, uint64_t);
  int v200;
  int v201;
  uint64_t v202;
  char *v203;
  char *v204;
  void (*v205)(char *, char *, uint64_t);
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *__dst;
  void *__dsta;
  _QWORD *v214;
  _QWORD *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(char *, char *, uint64_t);
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void (*v232)(char *, char *, uint64_t);
  char *v233;
  void (*v234)(char *, char *, uint64_t);
  char *v235;
  char *v236;

  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[2];
  v7 = a2[3];
  outlined copy of Data._Representation(v6, v7);
  v8 = v5[2];
  v9 = v5[3];
  v5[2] = v6;
  v5[3] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a3[7];
  v11 = (char *)v5 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(_QWORD *)(v13 - 8);
  v232 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v232(v11, v12, v13);
  v15 = a3[8];
  v16 = (char *)v5 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v228 = *(_QWORD *)(v18 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v228 + 48);
  v20 = v19(v16, 1, v18);
  v21 = v19(v17, 1, v18);
  if (v20)
  {
    if (!v21)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v221 = v14;
      v22 = v5;
      v23 = v13;
      v24 = *((_QWORD *)v17 + 1);
      v25 = *((_QWORD *)v17 + 2);
      outlined copy of Data._Representation(v24, v25);
      *((_QWORD *)v16 + 1) = v24;
      *((_QWORD *)v16 + 2) = v25;
      v13 = v23;
      v5 = v22;
      v14 = v221;
      (*(void (**)(char *, char *, uint64_t))(v221 + 16))(&v16[*(int *)(v18 + 24)], &v17[*(int *)(v18 + 24)], v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v214 = v5;
  v43 = v13;
  v44 = *((_QWORD *)v17 + 1);
  v45 = *((_QWORD *)v17 + 2);
  outlined copy of Data._Representation(v44, v45);
  v46 = *((_QWORD *)v16 + 1);
  v47 = *((_QWORD *)v16 + 2);
  *((_QWORD *)v16 + 1) = v44;
  *((_QWORD *)v16 + 2) = v45;
  v13 = v43;
  v5 = v214;
  outlined consume of Data._Representation(v46, v47);
  v232(&v16[*(int *)(v18 + 24)], &v17[*(int *)(v18 + 24)], v13);
LABEL_7:
  v27 = a3[9];
  v28 = (uint64_t)v5 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for AspireApiEvaluationKey(0);
  v225 = *(_QWORD *)(v30 - 8);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v225 + 48);
  v32 = v31(v28, 1, v30);
  v33 = v31((uint64_t)v29, 1, v30);
  if (v32)
  {
    if (!v33)
    {
      v34 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 16);
      v34(v28, v29, v13);
      v35 = *(int *)(v30 + 20);
      v36 = (_QWORD *)(v28 + v35);
      v37 = &v29[v35];
      if (v19(&v29[v35], 1, v18))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        *v36 = *(_QWORD *)v37;
        v215 = v5;
        v56 = v13;
        v57 = *((_QWORD *)v37 + 1);
        v58 = *((_QWORD *)v37 + 2);
        outlined copy of Data._Representation(v57, v58);
        v36[1] = v57;
        v36[2] = v58;
        v13 = v56;
        v5 = v215;
        v34((uint64_t)v36 + *(int *)(v18 + 24), &v37[*(int *)(v18 + 24)], v13);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v228 + 56))(v36, 0, 1, v18);
      }
      v59 = (void (*)(char *, char *, uint64_t))v34;
      v60 = *(int *)(v30 + 24);
      v61 = (char *)(v28 + v60);
      v62 = &v29[v60];
      v63 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        v229 = v64;
        v59(v61, v62, v13);
        v66 = *(int *)(v63 + 20);
        v233 = v61;
        v67 = &v61[v66];
        v220 = v13;
        v68 = &v62[v66];
        v69 = v59;
        v70 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v71 = *(_QWORD *)(v70 - 8);
        v223 = v69;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v68, 1, v70))
        {
          v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
          v73 = v220;
        }
        else
        {
          *(_QWORD *)v67 = *(_QWORD *)v68;
          v90 = *(int *)(v70 + 20);
          v216 = &v67[v90];
          v91 = &v68[v90];
          swift_bridgeObjectRetain();
          v92 = v91;
          v73 = v220;
          v69(v216, v92, v220);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v67, 0, 1, v70);
        }
        v93 = *(int *)(v63 + 24);
        v94 = &v233[v93];
        v95 = &v62[v93];
        v96 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v97 = *(_QWORD *)(v96 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
        {
          v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
          v99 = v233;
        }
        else
        {
          v217 = v97;
          v69(v94, v95, v73);
          v100 = *(int *)(v96 + 20);
          v101 = &v94[v100];
          v102 = &v95[v100];
          v103 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v104 = *(_QWORD *)(v103 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
          {
            v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
            v99 = v233;
            v106 = v217;
          }
          else
          {
            v210 = v104;
            v223(v101, v102, v220);
            v140 = *(int *)(v103 + 20);
            v211 = v101;
            __dst = &v101[v140];
            v141 = &v102[v140];
            v142 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v209 = *(_QWORD *)(v142 - 8);
            v143 = v141;
            v144 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 48))(v141, 1, v142);
            v99 = v233;
            if (v144)
            {
              v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dst, v143, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
            }
            else
            {
              *(_QWORD *)__dst = *v143;
              v164 = *(int *)(v142 + 20);
              v208 = &__dst[v164];
              v165 = (char *)v143 + v164;
              swift_bridgeObjectRetain();
              v223(v208, v165, v220);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(__dst, 0, 1, v142);
            }
            v106 = v217;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v210 + 56))(v211, 0, 1, v103);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v94, 0, 1, v96);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v229 + 56))(v99, 0, 1, v63);
      }
      v166 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v225 + 56);
      goto LABEL_71;
    }
    goto LABEL_13;
  }
  if (!v33)
  {
    v219 = v13;
    v232((char *)v28, v29, v13);
    v48 = *(int *)(v30 + 20);
    v49 = (char *)(v28 + v48);
    v50 = &v29[v48];
    v51 = v19((char *)(v28 + v48), 1, v18);
    v52 = v19(v50, 1, v18);
    v222 = v14;
    if (v51)
    {
      if (!v52)
      {
        *(_QWORD *)v49 = *(_QWORD *)v50;
        v53 = *((_QWORD *)v50 + 1);
        v54 = *((_QWORD *)v50 + 2);
        outlined copy of Data._Representation(v53, v54);
        *((_QWORD *)v49 + 1) = v53;
        *((_QWORD *)v49 + 2) = v54;
        v55 = v219;
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(&v49[*(int *)(v18 + 24)], &v50[*(int *)(v18 + 24)], v219);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(v49, 0, 1, v18);
LABEL_28:
        v75 = (void (*)(uint64_t, char *, uint64_t))v232;
        goto LABEL_29;
      }
    }
    else
    {
      if (!v52)
      {
        *(_QWORD *)v49 = *(_QWORD *)v50;
        v108 = *((_QWORD *)v50 + 1);
        v107 = *((_QWORD *)v50 + 2);
        outlined copy of Data._Representation(v108, v107);
        v109 = *((_QWORD *)v49 + 1);
        v110 = *((_QWORD *)v49 + 2);
        *((_QWORD *)v49 + 1) = v108;
        *((_QWORD *)v49 + 2) = v107;
        outlined consume of Data._Representation(v109, v110);
        v111 = *(int *)(v18 + 24);
        v112 = &v50[v111];
        v55 = v219;
        v75 = (void (*)(uint64_t, char *, uint64_t))v232;
        v232(&v49[v111], v112, v219);
LABEL_29:
        v76 = *(int *)(v30 + 24);
        v28 += v76;
        v77 = &v29[v76];
        v30 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v78 = *(_QWORD *)(v30 - 8);
        v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
        v80 = v79(v28, 1, v30);
        v81 = v79((uint64_t)v77, 1, v30);
        if (v80)
        {
          if (!v81)
          {
            v230 = v78;
            v82 = *(void (**)(uint64_t, char *, uint64_t))(v222 + 16);
            v82(v28, v77, v55);
            v83 = *(int *)(v30 + 20);
            v84 = (_QWORD *)(v28 + v83);
            v85 = &v77[v83];
            v86 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v87 = *(_QWORD *)(v86 - 8);
            v234 = (void (*)(char *, char *, uint64_t))v82;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
            {
              v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
            }
            else
            {
              *v84 = *(_QWORD *)v85;
              v127 = *(int *)(v86 + 20);
              v128 = (char *)v84 + v127;
              v129 = &v85[v127];
              swift_bridgeObjectRetain();
              v130 = v128;
              v55 = v219;
              v82((uint64_t)v130, v129, v219);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
            }
            v131 = *(int *)(v30 + 24);
            v132 = (char *)(v28 + v131);
            v133 = &v77[v131];
            v134 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v135 = *(_QWORD *)(v134 - 8);
            v136 = v230;
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
            {
              v226 = v135;
              v234(v132, v133, v55);
              v146 = *(int *)(v134 + 20);
              v147 = &v132[v146];
              v148 = &v133[v146];
              v149 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v150 = *(_QWORD *)(v149 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v148, 1, v149))
              {
                v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
                v152 = v226;
                v136 = v230;
              }
              else
              {
                v218 = v150;
                v234(v147, v148, v55);
                v168 = *(int *)(v149 + 20);
                v224 = v147;
                v169 = &v147[v168];
                v170 = &v148[v168];
                v171 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v172 = *(_QWORD *)(v171 - 8);
                __dsta = (void *)v149;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v172 + 48))(v170, 1, v171))
                {
                  v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v169 = *(_QWORD *)v170;
                  v189 = *(int *)(v171 + 20);
                  v190 = &v169[v189];
                  v191 = &v170[v189];
                  swift_bridgeObjectRetain();
                  v234(v190, v191, v219);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v172 + 56))(v169, 0, 1, v171);
                }
                v152 = v226;
                v136 = v230;
                (*(void (**)(char *, _QWORD, uint64_t, void *))(v218 + 56))(v224, 0, 1, __dsta);
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v132, 0, 1, v134);
              goto LABEL_85;
            }
            v137 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                         - 8)
                             + 64);
            v138 = v132;
LABEL_49:
            v139 = v133;
            goto LABEL_50;
          }
          goto LABEL_35;
        }
        if (v81)
        {
          outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_35:
          v89 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
          goto LABEL_36;
        }
        v75(v28, v77, v55);
        v113 = *(int *)(v30 + 20);
        v114 = (char *)(v28 + v113);
        v115 = &v77[v113];
        v116 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v117 = *(_QWORD *)(v116 - 8);
        v118 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v117 + 48);
        v119 = v118(v114, 1, v116);
        v120 = v118(v115, 1, v116);
        if (v119)
        {
          if (!v120)
          {
            *(_QWORD *)v114 = *(_QWORD *)v115;
            v121 = *(int *)(v116 + 20);
            v122 = &v114[v121];
            v123 = &v115[v121];
            v124 = *(void (**)(char *, char *, uint64_t))(v222 + 16);
            swift_bridgeObjectRetain();
            v125 = v122;
            v126 = v219;
            v124(v125, v123, v219);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
LABEL_58:
            v154 = (void (*)(uint64_t, char *, uint64_t))v232;
            goto LABEL_59;
          }
        }
        else
        {
          if (!v120)
          {
            *(_QWORD *)v114 = *(_QWORD *)v115;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v174 = *(int *)(v116 + 20);
            v126 = v219;
            v154 = (void (*)(uint64_t, char *, uint64_t))v232;
            v232(&v114[v174], &v115[v174], v219);
LABEL_59:
            v155 = *(int *)(v30 + 24);
            v28 += v155;
            v29 = &v77[v155];
            v30 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v136 = *(_QWORD *)(v30 - 8);
            v156 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
            v157 = v156(v28, 1, v30);
            v158 = v156((uint64_t)v29, 1, v30);
            if (v157)
            {
              if (!v158)
              {
                v159 = *(void (**)(uint64_t, char *, uint64_t))(v222 + 16);
                v159(v28, v29, v126);
                v160 = *(int *)(v30 + 20);
                v161 = (char *)(v28 + v160);
                v133 = &v29[v160];
                v162 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v163 = *(_QWORD *)(v162 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v133, 1, v162))
                {
                  v159((uint64_t)v161, v133, v126);
                  v185 = *(int *)(v162 + 20);
                  v235 = &v161[v185];
                  v186 = &v133[v185];
                  v187 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  v231 = *(_QWORD *)(v187 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v231 + 48))(v186, 1, v187))
                  {
                    v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v235, v186, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
                  }
                  else
                  {
                    *(_QWORD *)v235 = *(_QWORD *)v186;
                    v192 = *(int *)(v187 + 20);
                    v227 = &v235[v192];
                    v193 = &v186[v192];
                    swift_bridgeObjectRetain();
                    v159((uint64_t)v227, v193, v219);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v231 + 56))(v235, 0, 1, v187);
                  }
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v161, 0, 1, v162);
                  goto LABEL_85;
                }
                v137 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                             - 8)
                                 + 64);
                v138 = v161;
                goto LABEL_49;
              }
            }
            else
            {
              if (!v158)
              {
                v154(v28, v29, v126);
                v175 = *(int *)(v30 + 20);
                v28 += v175;
                v77 = &v29[v175];
                v30 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v136 = *(_QWORD *)(v30 - 8);
                v176 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
                v177 = v176(v28, 1, v30);
                v178 = v176((uint64_t)v77, 1, v30);
                if (v177)
                {
                  if (!v178)
                  {
                    v179 = *(void (**)(uint64_t, char *, uint64_t))(v222 + 16);
                    v179(v28, v77, v126);
                    v180 = *(int *)(v30 + 20);
                    v181 = (char *)(v28 + v180);
                    v182 = &v77[v180];
                    v183 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v184 = *(_QWORD *)(v183 - 8);
                    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v182, 1, v183))
                    {
                      *(_QWORD *)v181 = *(_QWORD *)v182;
                      v206 = *(int *)(v183 + 20);
                      v236 = &v181[v206];
                      v207 = &v182[v206];
                      swift_bridgeObjectRetain();
                      v179((uint64_t)v236, v207, v126);
                      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v181, 0, 1, v183);
                      goto LABEL_85;
                    }
                    v137 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                 - 8)
                                     + 64);
                    v138 = v181;
                    v139 = v182;
LABEL_50:
                    memcpy(v138, v139, v137);
LABEL_85:
                    v166 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v136 + 56);
LABEL_71:
                    v166(v28, 0, 1, v30);
                    return v5;
                  }
                }
                else
                {
                  if (!v178)
                  {
                    v154(v28, v77, v126);
                    v194 = *(int *)(v30 + 20);
                    v195 = (_QWORD *)(v28 + v194);
                    v196 = &v77[v194];
                    v197 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v198 = *(_QWORD *)(v197 - 8);
                    v199 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v198 + 48);
                    v200 = v199((char *)v195, 1, v197);
                    v201 = v199(v196, 1, v197);
                    if (v200)
                    {
                      if (!v201)
                      {
                        *v195 = *(_QWORD *)v196;
                        v202 = *(int *)(v197 + 20);
                        v203 = (char *)v195 + v202;
                        v204 = &v196[v202];
                        v205 = *(void (**)(char *, char *, uint64_t))(v222 + 16);
                        swift_bridgeObjectRetain();
                        v205(v203, v204, v126);
                        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v198 + 56))((char *)v195, 0, 1, v197);
                        return v5;
                      }
                    }
                    else
                    {
                      if (!v201)
                      {
                        *v195 = *(_QWORD *)v196;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        v154((uint64_t)v195 + *(int *)(v197 + 20), &v196[*(int *)(v197 + 20)], v126);
                        return v5;
                      }
                      outlined destroy of AspireApiPECConfig((uint64_t)v195, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    v40 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    v41 = v195;
                    v42 = v196;
                    goto LABEL_15;
                  }
                  outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                v89 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
LABEL_36:
                v40 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v89) - 8) + 64);
                v41 = (void *)v28;
                v42 = v77;
                goto LABEL_15;
              }
              outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireHeSerializedRelinKey);
            }
            v39 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
            goto LABEL_14;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v114, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
        v126 = v219;
        goto LABEL_58;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v49, type metadata accessor for AspireApiEvaluationKeyMetadata);
    }
    v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    v55 = v219;
    goto LABEL_28;
  }
  outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireApiEvaluationKey);
LABEL_13:
  v39 = &demangling cache variable for type metadata for AspireApiEvaluationKey?;
LABEL_14:
  v40 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v39) - 8) + 64);
  v41 = (void *)v28;
  v42 = v29;
LABEL_15:
  memcpy(v41, v42, v40);
  return v5;
}

_OWORD *initializeWithTake for AspireApiPECRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[8];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v17((char *)v14, 1, v15))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for AspireApiEvaluationKey(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v73 = v23;
    v11(v20, v21, v10);
    v25 = *(int *)(v22 + 20);
    v74 = v20;
    v26 = &v20[v25];
    v27 = v11;
    v28 = &v21[v25];
    if (v17(&v21[v25], 1, v15))
    {
      v29 = v27;
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      memcpy(v26, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v26 = *(_QWORD *)v28;
      *(_OWORD *)(v26 + 8) = *(_OWORD *)(v28 + 8);
      v29 = v27;
      v27(&v26[*(int *)(v15 + 24)], &v28[*(int *)(v15 + 24)], v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v26, 0, 1, v15);
    }
    v31 = v74;
    v32 = *(int *)(v22 + 24);
    v33 = &v74[v32];
    v34 = &v21[v32];
    v35 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      v38 = v73;
    }
    else
    {
      v71 = v36;
      v29(v33, v34, v10);
      v39 = *(int *)(v35 + 20);
      v72 = v33;
      v40 = &v33[v39];
      v41 = &v34[v39];
      v42 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v43 = *(_QWORD *)(v42 - 8);
      v70 = v29;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v40 = *(_QWORD *)v41;
        v29(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      v31 = v74;
      v45 = *(int *)(v35 + 24);
      v46 = &v72[v45];
      v47 = &v34[v45];
      v48 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v49 = *(_QWORD *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        v69 = v49;
        v29(v46, v47, v10);
        v51 = *(int *)(v48 + 20);
        v68 = v46;
        v52 = &v46[v51];
        v53 = &v47[v51];
        v54 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v55 = *(_QWORD *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
          v58 = v68;
          v57 = v69;
        }
        else
        {
          v70(v52, v53, v10);
          v66 = v54;
          v67 = v52;
          v59 = *(int *)(v54 + 20);
          v60 = &v52[v59];
          v61 = &v53[v59];
          v62 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v65 = *(_QWORD *)(v62 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v61, 1, v62))
          {
            v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v60 = *(_QWORD *)v61;
            v70(&v60[*(int *)(v62 + 20)], &v61[*(int *)(v62 + 20)], v10);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v60, 0, 1, v62);
          }
          v58 = v68;
          v57 = v69;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v67, 0, 1, v66);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v48);
      }
      v38 = v73;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v72, 0, 1, v35);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v31, 0, 1, v22);
  }
  return a1;
}

_QWORD *assignWithTake for AspireApiPECRequest(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  int v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  size_t v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int (**v53)(const void *, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;
  void (*v70)(uint64_t, char *, uint64_t);
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (**v85)(const void *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(char *, uint64_t, uint64_t);
  int v105;
  int v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, char *, uint64_t);
  uint64_t v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  int v134;
  int v135;
  void (*v136)(uint64_t, char *, uint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  size_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  int v152;
  int v153;
  void (*v154)(uint64_t, char *, uint64_t);
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(char *, uint64_t, uint64_t);
  int v172;
  int v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *__dst;
  char *__dsta;
  void (**__dstb)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (**v181)(const void *, uint64_t, uint64_t);
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  void (*v187)(char *, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  void (*v191)(char *, char *, uint64_t);
  void (*v192)(char *, char *, uint64_t);
  char *v193;
  uint64_t v194;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v6, v7);
  v8 = a3[7];
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v190 = *(_QWORD **)(v11 - 8);
  v187 = (void (*)(char *, uint64_t, uint64_t))v190[5];
  v187(v9, v10, v11);
  v12 = a3[8];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17((char *)v13, 1, v15);
  v19 = v17((char *)v14, 1, v15);
  v194 = v11;
  if (v18)
  {
    if (!v19)
    {
      *v13 = *v14;
      *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
      ((void (*)(char *, char *, uint64_t))v190[4])((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireApiEvaluationKeyMetadata);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v38 = v14[2];
  v39 = v13[1];
  v40 = v13[2];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[2] = v38;
  outlined consume of Data._Representation(v39, v40);
  v187((char *)v13 + *(int *)(v15 + 24), (uint64_t)v14 + *(int *)(v15 + 24), v11);
LABEL_7:
  v21 = a3[9];
  v22 = (uint64_t)a1 + v21;
  v23 = (char *)(a2 + v21);
  v24 = type metadata accessor for AspireApiEvaluationKey(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26((uint64_t)v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      v185 = v25;
      v29 = (void (*)(uint64_t, char *, uint64_t))v190[4];
      v29(v22, v23, v194);
      v30 = *(int *)(v24 + 20);
      v31 = (_QWORD *)(v22 + v30);
      v32 = &v23[v30];
      v191 = (void (*)(char *, char *, uint64_t))v29;
      if (v17(&v23[v30], 1, v15))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        *v31 = *(_QWORD *)v32;
        *(_OWORD *)(v31 + 1) = *(_OWORD *)(v32 + 8);
        v29((uint64_t)v31 + *(int *)(v15 + 24), &v32[*(int *)(v15 + 24)], v194);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v31, 0, 1, v15);
      }
      v49 = *(int *)(v24 + 24);
      v50 = (char *)(v22 + v49);
      v51 = &v23[v49];
      v52 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v53 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v52 - 8);
      if (v53[6](v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v185 + 56);
      }
      else
      {
        v181 = v53;
        v29((uint64_t)v50, v51, v194);
        v56 = *(int *)(v52 + 20);
        v183 = v50;
        __dst = &v50[v56];
        v57 = &v51[v56];
        v58 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v59 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          v60 = (void (*)(char *, char *, uint64_t))v29;
          v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(__dst, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dst = *(_QWORD *)v57;
          v60 = (void (*)(char *, char *, uint64_t))v29;
          v29((uint64_t)&__dst[*(int *)(v58 + 20)], &v57[*(int *)(v58 + 20)], v194);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(__dst, 0, 1, v58);
        }
        v78 = *(int *)(v52 + 24);
        v79 = v183;
        v80 = &v183[v78];
        v81 = &v51[v78];
        v82 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v83 = *(_QWORD *)(v82 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
        {
          v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
          v85 = v181;
          v86 = v185;
        }
        else
        {
          v60(v80, v81, v194);
          v87 = *(int *)(v82 + 20);
          __dsta = v80;
          v88 = &v80[v87];
          v89 = &v81[v87];
          v90 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v91 = *(_QWORD *)(v90 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
          {
            v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
            v79 = v183;
            v86 = v185;
            v93 = __dsta;
          }
          else
          {
            v175 = v91;
            v177 = v83;
            v191(v88, v89, v194);
            v116 = *(int *)(v90 + 20);
            v176 = v88;
            v174 = &v88[v116];
            v117 = &v89[v116];
            v118 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v119 = *(_QWORD *)(v118 - 8);
            v120 = v117;
            v121 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118);
            v122 = v90;
            if (v121)
            {
              v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v174, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v174 = *(_QWORD *)v120;
              v191(&v174[*(int *)(v118 + 20)], &v120[*(int *)(v118 + 20)], v194);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v174, 0, 1, v118);
            }
            v79 = v183;
            v86 = v185;
            v83 = v177;
            v93 = __dsta;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v176, 0, 1, v122);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v93, 0, 1, v82);
          v85 = v181;
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v85[7])(v79, 0, 1, v52);
        v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v86 + 56);
      }
      goto LABEL_81;
    }
    goto LABEL_13;
  }
  if (!v28)
  {
    v187((char *)v22, (uint64_t)v23, v194);
    v41 = *(int *)(v24 + 20);
    v42 = (_QWORD *)(v22 + v41);
    v43 = &v23[v41];
    v44 = v17((char *)(v22 + v41), 1, v15);
    v45 = v17(v43, 1, v15);
    if (v44)
    {
      if (!v45)
      {
        *v42 = *(_QWORD *)v43;
        *(_OWORD *)(v42 + 1) = *(_OWORD *)(v43 + 8);
        v46 = *(int *)(v15 + 24);
        v47 = &v43[v46];
        v48 = v194;
        ((void (*)(char *, char *, uint64_t))v190[4])((char *)v42 + v46, v47, v194);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v42, 0, 1, v15);
        goto LABEL_28;
      }
    }
    else
    {
      if (!v45)
      {
        v94 = *((_QWORD *)v43 + 2);
        v95 = v42[1];
        v96 = v42[2];
        *(_OWORD *)v42 = *(_OWORD *)v43;
        v42[2] = v94;
        outlined consume of Data._Representation(v95, v96);
        v97 = *(int *)(v15 + 24);
        v98 = &v43[v97];
        v48 = v194;
        v187((char *)v42 + v97, (uint64_t)v98, v194);
LABEL_28:
        v63 = *(int *)(v24 + 24);
        v22 += v63;
        v64 = &v23[v63];
        v24 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v65 = *(_QWORD *)(v24 - 8);
        v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
        v67 = v66(v22, 1, v24);
        v68 = v66((uint64_t)v64, 1, v24);
        if (v67)
        {
          if (!v68)
          {
            v188 = v65;
            v69 = v48;
            v70 = (void (*)(uint64_t, char *, uint64_t))v190[4];
            v70(v22, v64, v48);
            v71 = *(int *)(v24 + 20);
            v72 = (_QWORD *)(v22 + v71);
            v73 = &v64[v71];
            v74 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v75 = *(_QWORD *)(v74 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
            {
              v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
            }
            else
            {
              *v72 = *(_QWORD *)v73;
              v70((uint64_t)v72 + *(int *)(v74 + 20), &v73[*(int *)(v74 + 20)], v69);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
            }
            v108 = (void (*)(char *, char *, uint64_t))v70;
            v109 = *(int *)(v24 + 24);
            v110 = (char *)(v22 + v109);
            v111 = &v64[v109];
            v112 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v113 = *(_QWORD *)(v112 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
            {
              v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
              v115 = v188;
            }
            else
            {
              v108(v110, v111, v194);
              v124 = *(int *)(v112 + 20);
              v192 = v108;
              v125 = &v110[v124];
              v126 = &v111[v124];
              v127 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v128 = *(_QWORD *)(v127 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
              {
                v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
                v115 = v188;
              }
              else
              {
                v184 = v128;
                v192(v125, v126, v194);
                v145 = *(int *)(v127 + 20);
                v186 = v125;
                v182 = &v125[v145];
                v146 = &v126[v145];
                v147 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                __dstb = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v147 - 8);
                if (((unsigned int (*)(char *, uint64_t, uint64_t))__dstb[6])(v146, 1, v147))
                {
                  v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v182, v146, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v182 = *(_QWORD *)v146;
                  v192(&v182[*(int *)(v147 + 20)], &v146[*(int *)(v147 + 20)], v194);
                  __dstb[7](v182, 0, 1, v147);
                }
                v115 = v188;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v186, 0, 1, v127);
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
            }
            goto LABEL_80;
          }
          goto LABEL_34;
        }
        if (v68)
        {
          outlined destroy of AspireApiPECConfig(v22, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_34:
          v77 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_35:
          v35 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v77) - 8) + 64);
          v36 = (void *)v22;
          v37 = v64;
          goto LABEL_15;
        }
        v187((char *)v22, (uint64_t)v64, v48);
        v99 = *(int *)(v24 + 20);
        v100 = (char *)(v22 + v99);
        v101 = &v64[v99];
        v102 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v103 = *(_QWORD *)(v102 - 8);
        v104 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v103 + 48);
        v105 = v104(v100, 1, v102);
        v106 = v104(v101, 1, v102);
        if (v105)
        {
          if (!v106)
          {
            *(_QWORD *)v100 = *(_QWORD *)v101;
            v107 = v194;
            ((void (*)(char *, char *, uint64_t))v190[4])(&v100[*(int *)(v102 + 20)], &v101[*(int *)(v102 + 20)], v194);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
LABEL_55:
            v131 = (void (*)(uint64_t, char *, uint64_t))v187;
            goto LABEL_56;
          }
        }
        else
        {
          if (!v106)
          {
            *(_QWORD *)v100 = *(_QWORD *)v101;
            swift_bridgeObjectRelease();
            v149 = *(int *)(v102 + 20);
            v107 = v194;
            v131 = (void (*)(uint64_t, char *, uint64_t))v187;
            v187(&v100[v149], (uint64_t)&v101[v149], v194);
LABEL_56:
            v132 = *(int *)(v24 + 24);
            v22 += v132;
            v23 = &v64[v132];
            v24 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v115 = *(_QWORD *)(v24 - 8);
            v133 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
            v134 = v133(v22, 1, v24);
            v135 = v133((uint64_t)v23, 1, v24);
            if (v134)
            {
              if (!v135)
              {
                v136 = (void (*)(uint64_t, char *, uint64_t))v190[4];
                v136(v22, v23, v107);
                v137 = *(int *)(v24 + 20);
                v138 = (char *)(v22 + v137);
                v139 = &v23[v137];
                v140 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v141 = *(_QWORD *)(v140 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
                {
                  v136((uint64_t)v138, v139, v107);
                  v161 = *(int *)(v140 + 20);
                  v193 = &v138[v161];
                  v162 = &v139[v161];
                  v163 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  v189 = *(_QWORD *)(v163 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v162, 1, v163))
                  {
                    v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v193, v162, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
                  }
                  else
                  {
                    *(_QWORD *)v193 = *(_QWORD *)v162;
                    v136((uint64_t)&v193[*(int *)(v163 + 20)], &v162[*(int *)(v163 + 20)], v194);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v189 + 56))(v193, 0, 1, v163);
                  }
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
                  goto LABEL_80;
                }
                v142 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                             - 8)
                                 + 64);
                v143 = v138;
                v144 = v139;
                goto LABEL_60;
              }
            }
            else
            {
              if (!v135)
              {
                v131(v22, v23, v107);
                v150 = *(int *)(v24 + 20);
                v22 += v150;
                v64 = &v23[v150];
                v24 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v115 = *(_QWORD *)(v24 - 8);
                v151 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
                v152 = v151(v22, 1, v24);
                v153 = v151((uint64_t)v64, 1, v24);
                if (v152)
                {
                  if (!v153)
                  {
                    v154 = (void (*)(uint64_t, char *, uint64_t))v190[4];
                    v154(v22, v64, v107);
                    v155 = *(int *)(v24 + 20);
                    v156 = (char *)(v22 + v155);
                    v157 = &v64[v155];
                    v158 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v159 = v107;
                    v160 = *(_QWORD *)(v158 - 8);
                    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v157, 1, v158))
                    {
                      *(_QWORD *)v156 = *(_QWORD *)v157;
                      v154((uint64_t)&v156[*(int *)(v158 + 20)], &v157[*(int *)(v158 + 20)], v159);
                      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v160 + 56))(v156, 0, 1, v158);
                      goto LABEL_80;
                    }
                    v142 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                 - 8)
                                     + 64);
                    v143 = v156;
                    v144 = v157;
LABEL_60:
                    memcpy(v143, v144, v142);
LABEL_80:
                    v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v115 + 56);
LABEL_81:
                    v55(v22, 0, 1, v24);
                    return a1;
                  }
                }
                else
                {
                  if (!v153)
                  {
                    v131(v22, v64, v107);
                    v166 = *(int *)(v24 + 20);
                    v167 = (char *)(v22 + v166);
                    v168 = &v64[v166];
                    v169 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v170 = *(_QWORD *)(v169 - 8);
                    v171 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v170 + 48);
                    v172 = v171(v167, 1, v169);
                    v173 = v171(v168, 1, v169);
                    if (v172)
                    {
                      if (!v173)
                      {
                        *(_QWORD *)v167 = *(_QWORD *)v168;
                        ((void (*)(char *, char *, uint64_t))v190[4])(&v167[*(int *)(v169 + 20)], &v168[*(int *)(v169 + 20)], v107);
                        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v167, 0, 1, v169);
                        return a1;
                      }
                    }
                    else
                    {
                      if (!v173)
                      {
                        *(_QWORD *)v167 = *(_QWORD *)v168;
                        swift_bridgeObjectRelease();
                        v131((uint64_t)&v167[*(int *)(v169 + 20)], &v168[*(int *)(v169 + 20)], v107);
                        return a1;
                      }
                      outlined destroy of AspireApiPECConfig((uint64_t)v167, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    v35 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    v36 = v167;
                    v37 = v168;
                    goto LABEL_15;
                  }
                  outlined destroy of AspireApiPECConfig(v22, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                v77 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_35;
              }
              outlined destroy of AspireApiPECConfig(v22, type metadata accessor for AspireHeSerializedRelinKey);
            }
            v34 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
            goto LABEL_14;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v100, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
        v107 = v194;
        goto LABEL_55;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AspireApiEvaluationKeyMetadata);
    }
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    v48 = v194;
    goto LABEL_28;
  }
  outlined destroy of AspireApiPECConfig(v22, type metadata accessor for AspireApiEvaluationKey);
LABEL_13:
  v34 = &demangling cache variable for type metadata for AspireApiEvaluationKey?;
LABEL_14:
  v35 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v34) - 8) + 64);
  v36 = (void *)v22;
  v37 = v23;
LABEL_15:
  memcpy(v36, v37, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPECRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CDFC5C(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[9];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPECRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237CDFD34(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKey?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[9];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AspireApiPECRequest()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireApiEvaluationKeyMetadata?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKeyMetadata);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireApiEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AspireApiEvaluationKey);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AspireApiPECShardResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for AspireApiPECShardResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AspireApiPECShardResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AspireApiPECShardResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for AspireApiPECShardResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AspireApiPECShardResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237CE01B4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AspireApiPECShardResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237CE023C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AspireApiPECShardResponse()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AspireApiPECResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AspireApiPECResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t AspirePirKeywordPirParameters.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  type metadata accessor for AspirePirKeywordPirParameters(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AspirePirKeywordPirParameters(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirKeywordPirParameters);
}

uint64_t AspirePirEncryptedIndices.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = 0;
  type metadata accessor for AspirePirEncryptedIndices(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AspirePirEncryptedIndices(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirEncryptedIndices);
}

uint64_t AspirePirPirParameters.encryptionParameters.setter(uint64_t a1)
{
  return AspirePirPirParameters.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters);
}

uint64_t type metadata accessor for AspirePirPirParameters(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirParameters);
}

uint64_t type metadata accessor for AspirePirPirParameters._StorageClass(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AspirePirPirParameters._StorageClass);
}

uint64_t AspirePirPirParameters.numEntries.setter(uint64_t a1)
{
  return AspirePirPirParameters.numEntries.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
}

uint64_t AspirePirPirParameters.entrySize.setter(uint64_t a1)
{
  return AspirePirPirParameters.numEntries.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
}

uint64_t AspirePirPirParameters.numEntries.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = AspirePirPirParameters._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = (_QWORD *)(*(_QWORD *)(v2 + v5) + *a2);
  result = swift_beginAccess();
  *v7 = a1;
  return result;
}

uint64_t AspirePirPirParameters.dimensions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = AspirePirPirParameters._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v3)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  *v5 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirParameters.algorithm.setter(uint64_t *a1)
{
  return AspirePirPirParameters.algorithm.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
}

void AspirePirPirAlgorithm.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t AspirePirPirAlgorithm.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t AspirePirPirAlgorithm.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance AspirePirPirAlgorithm@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AspirePirPirAlgorithm@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 3uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirPirAlgorithm()
{
  lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
  return Enum.hash(into:)();
}

uint64_t static AspirePirPirAlgorithm.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspirePirPirAlgorithm@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspirePirPirAlgorithm.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AspirePirKeyCompressionStrategy()
{
  lazy protocol witness table accessor for type AspirePirKeyCompressionStrategy and conformance AspirePirKeyCompressionStrategy();
  return Enum.hash(into:)();
}

uint64_t static AspirePirKeyCompressionStrategy.allCases.getter()
{
  return static AMDPbHE_APICode.allCases.getter(&one-time initialization token for allCases);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AspirePirKeyCompressionStrategy@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AMDPbHE_APICode(&one-time initialization token for allCases, &static AspirePirKeyCompressionStrategy.allCases, a1);
}

uint64_t AspirePirPirParameters.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeEncryptionParameters);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

void (*AspirePirPirParameters.encryptionParameters.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x24BEE4AF8];
    v9[3] = 0;
    *((_BYTE *)v9 + 32) = 1;
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v9[7] = 0;
    *((_BYTE *)v9 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AspirePirPirParameters.encryptionParameters.modify;
}

void AspirePirPirParameters.encryptionParameters.modify(uint64_t a1, char a2)
{
  AspirePirPirParameters.encryptionParameters.modify(a1, a2, (void (*)(void *))AspirePirPirParameters.encryptionParameters.setter, type metadata accessor for AspireHeEncryptionParameters);
}

BOOL AspirePirPirParameters.hasEncryptionParameters.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspirePirPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters, type metadata accessor for AspireHeEncryptionParameters);
}

Swift::Void __swiftcall AspirePirPirParameters.clearEncryptionParameters()()
{
  AspirePirPirParameters.clearEncryptionParameters()(&demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__encryptionParameters);
}

uint64_t AspirePirPirParameters.numEntries.getter()
{
  return AspirePirPirParameters.numEntries.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
}

void (*AspirePirPirParameters.numEntries.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
  swift_beginAccess();
  v3[9] = *v5;
  return AspirePirPirParameters.numEntries.modify;
}

void AspirePirPirParameters.numEntries.modify(uint64_t *a1, char a2)
{
  AspirePirPirParameters.numEntries.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__numEntries);
}

uint64_t AspirePirPirParameters.entrySize.getter()
{
  return AspirePirPirParameters.numEntries.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
}

uint64_t AspirePirPirParameters.numEntries.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20)) + *a1;
  swift_beginAccess();
  return *(_QWORD *)v2;
}

uint64_t key path setter for AspirePirPirParameters.numEntries : AspirePirPirParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v7 = *a1;
  v8 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(a2 + v8) = AspirePirPirParameters._StorageClass.init(copying:)(v9);
    swift_release();
  }
  v10 = (_QWORD *)(*(_QWORD *)(a2 + v8) + *a5);
  result = swift_beginAccess();
  *v10 = v7;
  return result;
}

void (*AspirePirPirParameters.entrySize.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
  swift_beginAccess();
  v3[9] = *v5;
  return AspirePirPirParameters.entrySize.modify;
}

void AspirePirPirParameters.entrySize.modify(uint64_t *a1, char a2)
{
  AspirePirPirParameters.numEntries.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__entrySize);
}

void AspirePirPirParameters.numEntries.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 80);
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    *(_QWORD *)(v9 + v8) = AspirePirPirParameters._StorageClass.init(copying:)(v10);
    swift_release();
  }
LABEL_4:
  v11 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3);
  swift_beginAccess();
  *v11 = v6;
  free((void *)v5);
}

uint64_t AspirePirPirParameters.dimensions.getter()
{
  type metadata accessor for AspirePirPirParameters(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for AspirePirPirParameters.dimensions : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirParameters.dimensions : AspirePirPirParameters(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = (_QWORD *)(*(_QWORD *)(a2 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  *v6 = v3;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirParameters.dimensions.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return AspirePirPirParameters.dimensions.modify;
}

void AspirePirPirParameters.dimensions.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for AspirePirPirParameters._StorageClass(0);
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88))
                  + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
    swift_beginAccess();
    *v7 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for AspirePirPirParameters._StorageClass(0);
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = AspirePirPirParameters._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88))
                   + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__dimensions);
    swift_beginAccess();
    *v11 = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t AspirePirPirParameters.keywordPirParams.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspirePirKeywordPirParameters);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t key path getter for AspirePirPirParameters.keywordPirParams : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspirePirKeywordPirParameters);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t key path setter for AspirePirPirParameters.encryptionParameters : AspirePirPirParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = a5(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - v10;
  outlined init with copy of SecretKey(a1, (uint64_t)&v13 - v10, a5);
  return a6(v11);
}

uint64_t AspirePirPirParameters.keywordPirParams.setter(uint64_t a1)
{
  return AspirePirPirParameters.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams);
}

void (*AspirePirPirParameters.keywordPirParams.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = 0;
    v9[8] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirKeywordPirParameters);
  }
  return AspirePirPirParameters.keywordPirParams.modify;
}

void AspirePirPirParameters.keywordPirParams.modify(uint64_t a1, char a2)
{
  AspirePirPirParameters.encryptionParameters.modify(a1, a2, (void (*)(void *))AspirePirPirParameters.keywordPirParams.setter, type metadata accessor for AspirePirKeywordPirParameters);
}

void AspirePirPirParameters.encryptionParameters.modify(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(_QWORD))
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = *(void **)a1;
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v7 = *(void **)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    outlined destroy of AspireApiPECConfig((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL AspirePirPirParameters.hasKeywordPirParams.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams, type metadata accessor for AspirePirKeywordPirParameters);
}

BOOL AspirePirPirParameters.hasEncryptionParameters.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v16;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v4 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v11, a1);
  v13 = a4(0);
  v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, a1);
  return v14;
}

Swift::Void __swiftcall AspirePirPirParameters.clearKeywordPirParams()()
{
  AspirePirPirParameters.clearEncryptionParameters()(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keywordPirParams);
}

uint64_t AspirePirPirParameters.clearEncryptionParameters()(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v11 = swift_retain();
    *(_QWORD *)(v3 + v10) = AspirePirPirParameters._StorageClass.init(copying:)(v11);
    swift_release();
  }
  v12 = *(_QWORD *)(v3 + v10);
  v13 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
  v14 = v12 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, v14, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t AspirePirPirParameters.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.algorithm.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm, a1);
}

void (*AspirePirPirParameters.algorithm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm;
  swift_beginAccess();
  v6 = *(_BYTE *)(v5 + 8);
  v3[9] = *(_QWORD *)v5;
  *((_BYTE *)v3 + 80) = v6;
  return AspirePirPirParameters.algorithm.modify;
}

void AspirePirPirParameters.algorithm.modify(uint64_t *a1, char a2)
{
  AspirePirPirParameters.algorithm.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__algorithm);
}

uint64_t AspirePirPirParameters.batchSize.getter()
{
  return AspirePirPirParameters.numEntries.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
}

uint64_t AspirePirPirParameters.batchSize.setter(uint64_t a1)
{
  return AspirePirPirParameters.numEntries.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
}

void (*AspirePirPirParameters.batchSize.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
  swift_beginAccess();
  v3[9] = *v5;
  return AspirePirPirParameters.batchSize.modify;
}

void AspirePirPirParameters.batchSize.modify(uint64_t *a1, char a2)
{
  AspirePirPirParameters.numEntries.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchSize);
}

uint64_t AspirePirPirParameters.evaluationKeyConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeEvaluationKeyConfig);
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 28);
  v9 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t key path getter for AspirePirPirParameters.evaluationKeyConfig : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireHeEvaluationKeyConfig);
  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a2 + 8) = 0;
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 28);
  v10 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t AspirePirPirParameters.evaluationKeyConfig.setter(uint64_t a1)
{
  return AspirePirPirParameters.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig);
}

void (*AspirePirPirParameters.evaluationKeyConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = MEMORY[0x24BEE4AF8];
    v9[8] = 0;
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 28)];
    v12 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  return AspirePirPirParameters.evaluationKeyConfig.modify;
}

void AspirePirPirParameters.evaluationKeyConfig.modify(uint64_t a1, char a2)
{
  AspirePirPirParameters.encryptionParameters.modify(a1, a2, (void (*)(void *))AspirePirPirParameters.evaluationKeyConfig.setter, type metadata accessor for AspireHeEvaluationKeyConfig);
}

BOOL AspirePirPirParameters.hasEvaluationKeyConfig.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspirePirPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Void __swiftcall AspirePirPirParameters.clearEvaluationKeyConfig()()
{
  AspirePirPirParameters.clearEncryptionParameters()(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__evaluationKeyConfig);
}

uint64_t AspirePirPirParameters.keyCompressionStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.algorithm.getter(&OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy, a1);
}

uint64_t AspirePirPirParameters.algorithm.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20)) + *a1;
  result = swift_beginAccess();
  v6 = *(_BYTE *)(v4 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v4;
  *(_BYTE *)(a2 + 8) = v6;
  return result;
}

uint64_t key path getter for AspirePirPirParameters.algorithm : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20)) + *a2;
  result = swift_beginAccess();
  v6 = *(_BYTE *)(v4 + 8);
  *(_QWORD *)a3 = *(_QWORD *)v4;
  *(_BYTE *)(a3 + 8) = v6;
  return result;
}

uint64_t key path setter for AspirePirPirParameters.algorithm : AspirePirPirParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  v9 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    *(_QWORD *)(a2 + v9) = AspirePirPirParameters._StorageClass.init(copying:)(v10);
    swift_release();
  }
  v11 = *(_QWORD *)(a2 + v9) + *a5;
  result = swift_beginAccess();
  *(_QWORD *)v11 = v7;
  *(_BYTE *)(v11 + 8) = v8;
  return result;
}

uint64_t AspirePirPirParameters.keyCompressionStrategy.setter(uint64_t *a1)
{
  return AspirePirPirParameters.algorithm.setter(a1, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
}

uint64_t AspirePirPirParameters.algorithm.setter(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v6 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v7 = swift_retain();
    *(_QWORD *)(v2 + v6) = AspirePirPirParameters._StorageClass.init(copying:)(v7);
    swift_release();
  }
  v8 = *(_QWORD *)(v2 + v6) + *a2;
  result = swift_beginAccess();
  *(_QWORD *)v8 = v4;
  *(_BYTE *)(v8 + 8) = v5;
  return result;
}

void (*AspirePirPirParameters.keyCompressionStrategy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy;
  swift_beginAccess();
  v6 = *(_BYTE *)(v5 + 8);
  v3[9] = *(_QWORD *)v5;
  *((_BYTE *)v3 + 80) = v6;
  return AspirePirPirParameters.keyCompressionStrategy.modify;
}

void AspirePirPirParameters.keyCompressionStrategy.modify(uint64_t *a1, char a2)
{
  AspirePirPirParameters.algorithm.modify(a1, a2, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__keyCompressionStrategy);
}

void AspirePirPirParameters.algorithm.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  v7 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v9 = *(int *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 88);
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v11 = swift_retain();
    *(_QWORD *)(v10 + v9) = AspirePirPirParameters._StorageClass.init(copying:)(v11);
    swift_release();
  }
LABEL_4:
  v12 = *(_QWORD *)(*(_QWORD *)(v5 + 88) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_QWORD *)v12 = v6;
  *(_BYTE *)(v12 + 8) = v7;
  free((void *)v5);
}

uint64_t AspirePirPirParameters.compressVectorizedPirResponse.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  return *v1 & 1;
}

uint64_t key path setter for AspirePirPirParameters.compressVectorizedPirResponse : AspirePirPirParameters(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = (_BYTE *)(*(_QWORD *)(a2 + v4)
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  result = swift_beginAccess();
  *v6 = v3;
  return result;
}

uint64_t AspirePirPirParameters.compressVectorizedPirResponse.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(v1 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = a1 & 1;
  v7 = (_BYTE *)(*(_QWORD *)(v2 + v4)
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  result = swift_beginAccess();
  *v7 = v6;
  return result;
}

void (*AspirePirPirParameters.compressVectorizedPirResponse.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return AspirePirPirParameters.compressVectorizedPirResponse.modify;
}

void AspirePirPirParameters.compressVectorizedPirResponse.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = AspirePirPirParameters._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80))
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  *v9 = v4;
  free((void *)v3);
}

BOOL AspirePirPirParameters.hasCompressVectorizedPirResponse.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
                         + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  return *v1 != 2;
}

Swift::Void __swiftcall AspirePirPirParameters.clearCompressVectorizedPirResponse()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirParameters._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = (_BYTE *)(*(_QWORD *)(v0 + v1)
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__compressVectorizedPirResponse);
  swift_beginAccess();
  *v3 = 2;
}

uint64_t AspirePirPirParameters.vectorizedPirInternalBatchingSize.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
               + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize);
  swift_beginAccess();
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t key path getter for AspirePirPirParameters.vectorizedPirInternalBatchingSize : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  result = swift_beginAccess();
  v5 = *(_QWORD *)v3;
  if (*(_BYTE *)(v3 + 8))
    v5 = 0;
  *a2 = v5;
  return result;
}

uint64_t key path setter for AspirePirPirParameters.vectorizedPirInternalBatchingSize : AspirePirPirParameters(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = AspirePirPirParameters._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  result = swift_beginAccess();
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = 0;
  return result;
}

uint64_t AspirePirPirParameters.vectorizedPirInternalBatchingSize.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = AspirePirPirParameters._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  result = swift_beginAccess();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

void (*AspirePirPirParameters.vectorizedPirInternalBatchingSize.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  v6 = *(_QWORD *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0;
  v3[9] = v6;
  return AspirePirPirParameters.vectorizedPirInternalBatchingSize.modify;
}

void AspirePirPirParameters.vectorizedPirInternalBatchingSize.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = AspirePirPirParameters._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  *(_QWORD *)v9 = v4;
  *(_BYTE *)(v9 + 8) = 0;
  free((void *)v3);
}

BOOL AspirePirPirParameters.hasVectorizedPirInternalBatchingSize.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 8) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirParameters.clearVectorizedPirInternalBatchingSize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirParameters._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1)
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__vectorizedPirInternalBatchingSize;
  swift_beginAccess();
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
}

uint64_t AspirePirPirParameters.batchPirParams.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  v7 = type metadata accessor for AspirePirBatchPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspirePirBatchPirParameters);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
}

uint64_t key path getter for AspirePirPirParameters.batchPirParams : AspirePirPirParameters@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
     + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  v8 = type metadata accessor for AspirePirBatchPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirBatchPirParameters);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
}

uint64_t AspirePirPirParameters.batchPirParams.setter(uint64_t a1)
{
  return AspirePirPirParameters.encryptionParameters.setter(a1, &demangling cache variable for type metadata for AspirePirBatchPirParameters?, type metadata accessor for AspirePirBatchPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams);
}

uint64_t AspirePirPirParameters.encryptionParameters.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - v13;
  v15 = *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirParameters._StorageClass(0);
    swift_allocObject();
    v16 = swift_retain();
    *(_QWORD *)(v4 + v15) = AspirePirPirParameters._StorageClass.init(copying:)(v16);
    swift_release();
  }
  v17 = *(_QWORD *)(v4 + v15);
  outlined init with take of SecretKey(a1, (uint64_t)v14, a3);
  v18 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 0, 1, v18);
  outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v14, (uint64_t)v12, a2);
  v19 = v17 + *a4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, v19, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t AspirePirBatchPirParameters.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x24BEE4AF8];
  type metadata accessor for AspirePirBatchPirParameters(0);
  return UnknownStorage.init()();
}

void (*AspirePirPirParameters.batchPirParams.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for AspirePirBatchPirParameters(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirParameters(0) + 20))
      + OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirBatchPirParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirBatchPirParameters);
  }
  return AspirePirPirParameters.batchPirParams.modify;
}

void AspirePirPirParameters.batchPirParams.modify(uint64_t a1, char a2)
{
  AspirePirPirParameters.encryptionParameters.modify(a1, a2, (void (*)(void *))AspirePirPirParameters.batchPirParams.setter, type metadata accessor for AspirePirBatchPirParameters);
}

BOOL AspirePirPirParameters.hasBatchPirParams.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspirePirBatchPirParameters?, type metadata accessor for AspirePirPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams, type metadata accessor for AspirePirBatchPirParameters);
}

Swift::Void __swiftcall AspirePirPirParameters.clearBatchPirParams()()
{
  AspirePirPirParameters.clearEncryptionParameters()(&demangling cache variable for type metadata for AspirePirBatchPirParameters?, type metadata accessor for AspirePirBatchPirParameters, &OBJC_IVAR____TtCV8CipherML22AspirePirPirParametersP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__batchPirParams);
}

uint64_t (*AspirePirPirParameters.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirParameters.init()@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.init()(type metadata accessor for AspirePirPirParameters, &one-time initialization token for defaultInstance, &static AspirePirPirParameters._StorageClass.defaultInstance, a1);
}

double AspirePirCuckooTableConfig.expansionFactor.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void AspirePirCuckooTableConfig.expansionFactor.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*AspirePirCuckooTableConfig.expansionFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirCuckooTableConfig.numHashFunctions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.maxNumEvictions.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t AspirePirCuckooTableConfig.maxNumEvictions.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*AspirePirCuckooTableConfig.maxNumEvictions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

double AspirePirCuckooTableConfig.targetLoadFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void AspirePirCuckooTableConfig.targetLoadFactor.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*AspirePirCuckooTableConfig.targetLoadFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.slotsPerBucket.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t AspirePirCuckooTableConfig.slotsPerBucket.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*AspirePirCuckooTableConfig.slotsPerBucket.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.allowExpansion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t AspirePirCuckooTableConfig.allowExpansion.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*AspirePirCuckooTableConfig.allowExpansion.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.multipleTables.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t AspirePirCuckooTableConfig.multipleTables.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = result;
  return result;
}

uint64_t (*AspirePirCuckooTableConfig.multipleTables.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AspirePirCuckooTableConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspirePirCuckooTableConfig(0) + 44);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AspirePirCuckooTableConfig.unknownFields.modify())()
{
  type metadata accessor for AspirePirCuckooTableConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirCuckooTableConfig.init()@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for AspirePirCuckooTableConfig(0);
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 26) = 0u;
  return UnknownStorage.init()();
}

uint64_t AspirePirBatchPirParameters.numHashFunctions.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AspirePirBatchPirParameters.numHashFunctions.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AspirePirBatchPirParameters.numHashFunctions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchPirParameters.numHashFunctionsPerBucket.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AspirePirBatchPirParameters.numHashFunctionsPerBucket.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspirePirBatchPirParameters.numHashFunctionsPerBucket.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchPirParameters.batchPirTableSize.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspirePirBatchPirParameters.batchPirTableSize.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AspirePirBatchPirParameters.batchPirTableSize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirBatchPirParameters.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspirePirBatchPirParameters(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AspirePirBatchPirParameters.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AspirePirBatchPirParameters(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AspirePirBatchPirParameters.unknownFields.modify())()
{
  type metadata accessor for AspirePirBatchPirParameters(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirKeywordPirParameters.numHashFunctions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirKeywordPirParameters.multipleTables.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AspirePirKeywordPirParameters.multipleTables.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*AspirePirKeywordPirParameters.multipleTables.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirKeywordPirParameters.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspirePirKeywordPirParameters, a1);
}

uint64_t AspirePirKeywordPirParameters.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspirePirKeywordPirParameters);
}

uint64_t (*AspirePirKeywordPirParameters.unknownFields.modify())()
{
  type metadata accessor for AspirePirKeywordPirParameters(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirEncryptedIndices.ciphertexts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AspirePirEncryptedIndices.ciphertexts.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AspirePirEncryptedIndices.ciphertexts.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AspirePirEncryptedIndices.numPirCalls.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirEncryptedIndices.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspirePirEncryptedIndices, a1);
}

uint64_t AspirePirEncryptedIndices.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t (*AspirePirEncryptedIndices.unknownFields.modify())()
{
  type metadata accessor for AspirePirEncryptedIndices(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDbRow.keyword.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t AspirePirSerializedKeywordDbRow.keyword.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*AspirePirSerializedKeywordDbRow.keyword.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDbRow.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t AspirePirSerializedKeywordDbRow.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AspirePirSerializedKeywordDbRow.value.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDbRow.shardID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AspirePirSerializedKeywordDbRow(0) + 28));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirSerializedKeywordDbRow.shardID : AspirePirSerializedKeywordDbRow@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AspirePirSerializedKeywordDbRow(0) + 28));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirSerializedKeywordDbRow.shardID : AspirePirSerializedKeywordDbRow(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for AspirePirSerializedKeywordDbRow(0) + 28));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t AspirePirSerializedKeywordDbRow.shardID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AspirePirSerializedKeywordDbRow(0) + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AspirePirSerializedKeywordDbRow.shardID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for AspirePirSerializedKeywordDbRow(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return AspireApiPIRShardConfig.shardID.modify;
}

BOOL AspirePirSerializedKeywordDbRow.hasShardID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirSerializedKeywordDbRow(0) + 28) + 8) != 0;
}

Swift::Void __swiftcall AspirePirSerializedKeywordDbRow.clearShardID()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirSerializedKeywordDbRow(0) + 28));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t AspirePirSerializedKeywordDbRow.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AspirePirSerializedKeywordDbRow, a1);
}

uint64_t AspirePirSerializedKeywordDbRow.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AspirePirSerializedKeywordDbRow);
}

uint64_t (*AspirePirSerializedKeywordDbRow.unknownFields.modify())()
{
  type metadata accessor for AspirePirSerializedKeywordDbRow(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDbRow.init()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;

  *a1 = xmmword_237D54090;
  a1[1] = xmmword_237D54090;
  v2 = type metadata accessor for AspirePirSerializedKeywordDbRow(0);
  result = UnknownStorage.init()();
  v4 = (_QWORD *)((char *)a1 + *(int *)(v2 + 28));
  *v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t (*AspirePirSerializedKeywordDb.rows.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDb.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AspirePirSerializedKeywordDb, a1);
}

uint64_t AspirePirSerializedKeywordDb.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AspirePirSerializedKeywordDb);
}

uint64_t (*AspirePirSerializedKeywordDb.unknownFields.modify())()
{
  type metadata accessor for AspirePirSerializedKeywordDb(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirSerializedKeywordDb.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for AspirePirSerializedKeywordDb(0);
  return UnknownStorage.init()();
}

uint64_t AspirePirPirPreprocessDbArgs.inputDatabase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 24))
    v2 = *(_QWORD *)(v1 + 16);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.inputDatabase : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 24))
  {
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.inputDatabase : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.inputDatabase.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.inputDatabase.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 24))
  {
    v6 = *(_QWORD *)(v5 + 16);
    v7 = *(_QWORD *)(v5 + 24);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.inputDatabase.modify;
}

void AspirePirPirPreprocessDbArgs.inputDatabase.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 16) = v3;
    *(_QWORD *)(v8 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 16) = v3;
    *(_QWORD *)(v12 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasInputDatabase.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 24) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearInputDatabase()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.valuesProtoPath.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 40))
    v2 = *(_QWORD *)(v1 + 32);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.valuesProtoPath : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 40))
  {
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.valuesProtoPath : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.valuesProtoPath.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.valuesProtoPath.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 40))
  {
    v6 = *(_QWORD *)(v5 + 32);
    v7 = *(_QWORD *)(v5 + 40);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.valuesProtoPath.modify;
}

void AspirePirPirPreprocessDbArgs.valuesProtoPath.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 32) = v3;
    *(_QWORD *)(v8 + 40) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 32) = v3;
    *(_QWORD *)(v12 + 40) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasValuesProtoPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 40) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearValuesProtoPath()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.algorithm.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  if ((*(_BYTE *)(v3 + 57) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 48);
    v6 = *(_BYTE *)(v3 + 56) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.algorithm : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 48);
  v6 = *(_BYTE *)(v3 + 56);
  v7 = *(_BYTE *)(v3 + 57);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.algorithm : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 48) = v3;
  *(_BYTE *)(v7 + 56) = v4;
  *(_BYTE *)(v7 + 57) = 0;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.algorithm.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(v1 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 48) = v2;
  *(_BYTE *)(v6 + 56) = v3;
  *(_BYTE *)(v6 + 57) = 0;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.algorithm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if ((*(_BYTE *)(v5 + 57) & 1) != 0)
  {
    v6 = 0;
    v7 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 48);
    v7 = *(_BYTE *)(v5 + 56) & 1;
  }
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = v7;
  return AspirePirPirPreprocessDbArgs.algorithm.modify;
}

void AspirePirPirPreprocessDbArgs.algorithm.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 48) = v4;
  *(_BYTE *)(v10 + 56) = v5;
  *(_BYTE *)(v10 + 57) = 0;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasAlgorithm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 57) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearAlgorithm()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = 0;
  *(_WORD *)(v3 + 56) = 256;
}

uint64_t AspirePirPirPreprocessDbArgs.sharding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 80);
  *(_BYTE *)(a1 + 16) = v6;
  return outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v4, v5, v6);
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.sharding : AspirePirPirPreprocessDbArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v3, v4, v5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v7 = swift_retain();
    *(_QWORD *)(a2 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
    swift_release();
  }
  v8 = *(_QWORD *)(a2 + v6);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v8 + 64) = v3;
  *(_QWORD *)(v8 + 72) = v4;
  v11 = *(_BYTE *)(v8 + 80);
  *(_BYTE *)(v8 + 80) = v5;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v9, v10, v11);
}

uint64_t AspirePirPirPreprocessDbArgs.sharding.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v1 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v1 + v5);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(v7 + 72);
  *(_QWORD *)(v7 + 64) = v2;
  *(_QWORD *)(v7 + 72) = v3;
  v10 = *(_BYTE *)(v7 + 80);
  *(_BYTE *)(v7 + 80) = v4;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v8, v9, v10);
}

uint64_t (*AspirePirPirPreprocessDbArgs.sharding.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 + 24) = v1;
  v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *(_DWORD *)(a1 + 20) = v3;
  v4 = *(_QWORD *)(v1 + v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(v4 + 72);
  v7 = *(_BYTE *)(v4 + 80);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v5, v6, v7);
  return AspirePirPirPreprocessDbArgs.sharding.modify;
}

uint64_t AspirePirPirPreprocessDbArgs.sharding.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(int *)(a1 + 20);
  v6 = *(_QWORD *)(a1 + 24);
  if ((a2 & 1) != 0)
  {
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(*(_QWORD *)a1, v2, v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(v6 + v5);
    v9 = *(_QWORD *)(v8 + 64);
    v10 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(v8 + 64) = v3;
    *(_QWORD *)(v8 + 72) = v2;
    v11 = *(_BYTE *)(v8 + 80);
    *(_BYTE *)(v8 + 80) = v4;
    outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v9, v10, v11);
    v12 = v3;
    v13 = v2;
    v14 = v4;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v15 = swift_retain();
      *(_QWORD *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v15);
      swift_release();
    }
    v16 = *(_QWORD *)(v6 + v5);
    v12 = *(_QWORD *)(v16 + 64);
    v13 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v16 + 64) = v3;
    *(_QWORD *)(v16 + 72) = v2;
    v14 = *(_BYTE *)(v16 + 80);
    *(_BYTE *)(v16 + 80) = v4;
  }
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v12, v13, v14);
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  if (*(_BYTE *)(v1 + 80))
    return 0;
  v2 = *(_QWORD *)(v1 + 64);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, *(_QWORD *)(v1 + 72), 0);
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.numShards : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = type metadata accessor for AspirePirPirPreprocessDbArgs(0);
  v5 = *(_QWORD *)(a1 + *(int *)(result + 20));
  if (*(_BYTE *)(v5 + 80))
  {
    LODWORD(v6) = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 64);
    result = outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, *(_QWORD *)(v5 + 72), 0);
  }
  *a2 = v6;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.setter(unsigned int a1)
{
  return AspirePirPirPreprocessDbArgs.numShards.setter(a1, 0);
}

uint64_t (*AspirePirPirPreprocessDbArgs.numShards.modify(uint64_t a1))(uint64_t *a1, uint64_t a2)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_DWORD *)(a1 + 8);
  *(_QWORD *)a1 = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *(_DWORD *)(a1 + 12) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  if (*(_BYTE *)(v5 + 80))
  {
    LODWORD(v6) = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 64);
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, *(_QWORD *)(v5 + 72), 0);
  }
  *v3 = v6;
  return AspirePirPirPreprocessDbArgs.numShards.modify;
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.modify(uint64_t *a1, uint64_t a2)
{
  return AspirePirPirPreprocessDbArgs.numShards.modify(a1, a2, 0);
}

uint64_t AspirePirPirPreprocessDbArgs.numEntriesPerShard.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  if (*(_BYTE *)(v1 + 80) != 1)
    return 0;
  v2 = *(_QWORD *)(v1 + 64);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, *(_QWORD *)(v1 + 72), 1);
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.numEntriesPerShard : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = type metadata accessor for AspirePirPirPreprocessDbArgs(0);
  v5 = *(_QWORD *)(a1 + *(int *)(result + 20));
  if (*(_BYTE *)(v5 + 80) == 1)
  {
    v6 = *(_QWORD *)(v5 + 64);
    result = outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, *(_QWORD *)(v5 + 72), 1);
  }
  else
  {
    LODWORD(v6) = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.numEntriesPerShard.setter(unsigned int a1)
{
  return AspirePirPirPreprocessDbArgs.numShards.setter(a1, 1);
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.setter(unsigned int a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(v7 + 72);
  *(_QWORD *)(v7 + 64) = a1;
  *(_QWORD *)(v7 + 72) = 0;
  v10 = *(_BYTE *)(v7 + 80);
  *(_BYTE *)(v7 + 80) = a2;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v8, v9, v10);
}

uint64_t (*AspirePirPirPreprocessDbArgs.numEntriesPerShard.modify(uint64_t a1))(uint64_t *a1, uint64_t a2)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_DWORD *)(a1 + 8);
  *(_QWORD *)a1 = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *(_DWORD *)(a1 + 12) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  if (*(_BYTE *)(v5 + 80) == 1)
  {
    v6 = *(_QWORD *)(v5 + 64);
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, *(_QWORD *)(v5 + 72), 1);
  }
  else
  {
    LODWORD(v6) = 0;
  }
  *v3 = v6;
  return AspirePirPirPreprocessDbArgs.numEntriesPerShard.modify;
}

uint64_t AspirePirPirPreprocessDbArgs.numEntriesPerShard.modify(uint64_t *a1, uint64_t a2)
{
  return AspirePirPirPreprocessDbArgs.numShards.modify(a1, a2, 1);
}

uint64_t AspirePirPirPreprocessDbArgs.numShards.modify(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  v6 = *((int *)a1 + 3);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v7 = swift_retain();
    *(_QWORD *)(v4 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
    swift_release();
  }
  v8 = *(_QWORD *)(v4 + v6);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v8 + 64) = v5;
  *(_QWORD *)(v8 + 72) = 0;
  v11 = *(_BYTE *)(v8 + 80);
  *(_BYTE *)(v8 + 80) = a3;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v9, v10, v11);
}

uint64_t AspirePirPirPreprocessDbArgs.shardID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  if (*(_BYTE *)(v1 + 80) != 2)
    return 0;
  v2 = *(_QWORD *)(v1 + 64);
  outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v2, *(_QWORD *)(v1 + 72), 2);
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.shardID : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = type metadata accessor for AspirePirPirPreprocessDbArgs(0);
  v5 = *(_QWORD *)(a1 + *(int *)(result + 20));
  if (*(_BYTE *)(v5 + 80) == 2)
  {
    v7 = *(_QWORD *)(v5 + 64);
    v6 = *(_QWORD *)(v5 + 72);
    result = outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v7, v6, 2);
  }
  else
  {
    v7 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v7;
  a2[1] = v6;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.shardID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(v7 + 72);
  *(_QWORD *)(v7 + 64) = a1;
  *(_QWORD *)(v7 + 72) = a2;
  v10 = *(_BYTE *)(v7 + 80);
  *(_BYTE *)(v7 + 80) = 2;
  return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v8, v9, v10);
}

uint64_t (*AspirePirPirPreprocessDbArgs.shardID.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(v1 + v3);
  if (*(_BYTE *)(v4 + 80) == 2)
  {
    v6 = *(_QWORD *)(v4 + 64);
    v5 = *(_QWORD *)(v4 + 72);
    outlined copy of AspirePirPirPreprocessDbArgs.OneOf_Sharding(v6, v5, 2);
  }
  else
  {
    v6 = 0;
    v5 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  return AspirePirPirPreprocessDbArgs.shardID.modify;
}

uint64_t AspirePirPirPreprocessDbArgs.shardID.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *a1;
  v2 = a1[1];
  v4 = *((int *)a1 + 6);
  v5 = a1[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(v5 + v4);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v7 + 72);
    *(_QWORD *)(v7 + 64) = v3;
    *(_QWORD *)(v7 + 72) = v2;
    v10 = *(_BYTE *)(v7 + 80);
    *(_BYTE *)(v7 + 80) = 2;
    outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v8, v9, v10);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v12 = swift_retain();
      *(_QWORD *)(v5 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v12);
      swift_release();
    }
    v13 = *(_QWORD *)(v5 + v4);
    v14 = *(_QWORD *)(v13 + 64);
    v15 = *(_QWORD *)(v13 + 72);
    *(_QWORD *)(v13 + 64) = v3;
    *(_QWORD *)(v13 + 72) = v2;
    v16 = *(_BYTE *)(v13 + 80);
    *(_BYTE *)(v13 + 80) = 2;
    return outlined consume of AspirePirPirPreprocessDbArgs.OneOf_Sharding?(v14, v15, v16);
  }
}

uint64_t AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 96))
    v2 = *(_QWORD *)(v1 + 88);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 96))
  {
    v4 = *(_QWORD *)(v3 + 88);
    v5 = *(_QWORD *)(v3 + 96);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 88) = v4;
  *(_QWORD *)(v7 + 96) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 88) = a1;
  *(_QWORD *)(v7 + 96) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 96))
  {
    v6 = *(_QWORD *)(v5 + 88);
    v7 = *(_QWORD *)(v5 + 96);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.modify;
}

void AspirePirPirPreprocessDbArgs.predefinedEncryptionParameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 88) = v3;
    *(_QWORD *)(v8 + 96) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 88) = v3;
    *(_QWORD *)(v12 + 96) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasPredefinedEncryptionParameters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 96) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearPredefinedEncryptionParameters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.heScheme.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  if ((*(_BYTE *)(v3 + 113) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 104);
    v6 = *(_BYTE *)(v3 + 112) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.heScheme : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 104);
  v6 = *(_BYTE *)(v3 + 112);
  v7 = *(_BYTE *)(v3 + 113);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.heScheme : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 104) = v3;
  *(_BYTE *)(v7 + 112) = v4;
  *(_BYTE *)(v7 + 113) = 0;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.heScheme.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(v1 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 104) = v2;
  *(_BYTE *)(v6 + 112) = v3;
  *(_BYTE *)(v6 + 113) = 0;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.heScheme.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if ((*(_BYTE *)(v5 + 113) & 1) != 0)
  {
    v6 = 0;
    v7 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 104);
    v7 = *(_BYTE *)(v5 + 112) & 1;
  }
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = v7;
  return AspirePirPirPreprocessDbArgs.heScheme.modify;
}

void AspirePirPirPreprocessDbArgs.heScheme.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 104) = v4;
  *(_BYTE *)(v10 + 112) = v5;
  *(_BYTE *)(v10 + 113) = 0;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasHeScheme.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 113) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearHeScheme()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 104) = 0;
  *(_WORD *)(v3 + 112) = 256;
}

uint64_t AspirePirPirPreprocessDbArgs.outputDatabase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 128))
    v2 = *(_QWORD *)(v1 + 120);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.outputDatabase : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 128))
  {
    v4 = *(_QWORD *)(v3 + 120);
    v5 = *(_QWORD *)(v3 + 128);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.outputDatabase : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 120) = v4;
  *(_QWORD *)(v7 + 128) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputDatabase.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 120) = a1;
  *(_QWORD *)(v7 + 128) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.outputDatabase.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 128))
  {
    v6 = *(_QWORD *)(v5 + 120);
    v7 = *(_QWORD *)(v5 + 128);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.outputDatabase.modify;
}

void AspirePirPirPreprocessDbArgs.outputDatabase.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 120) = v3;
    *(_QWORD *)(v8 + 128) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 120) = v3;
    *(_QWORD *)(v12 + 128) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasOutputDatabase.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 128) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearOutputDatabase()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputPirParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 144))
    v2 = *(_QWORD *)(v1 + 136);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.outputPirParameters : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 144))
  {
    v4 = *(_QWORD *)(v3 + 136);
    v5 = *(_QWORD *)(v3 + 144);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.outputPirParameters : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 136) = v4;
  *(_QWORD *)(v7 + 144) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputPirParameters.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 136) = a1;
  *(_QWORD *)(v7 + 144) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.outputPirParameters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 144))
  {
    v6 = *(_QWORD *)(v5 + 136);
    v7 = *(_QWORD *)(v5 + 144);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.outputPirParameters.modify;
}

void AspirePirPirPreprocessDbArgs.outputPirParameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 136) = v3;
    *(_QWORD *)(v8 + 144) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 136) = v3;
    *(_QWORD *)(v12 + 144) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasOutputPirParameters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 144) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearOutputPirParameters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputKeyConfig.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 160))
    v2 = *(_QWORD *)(v1 + 152);
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.outputKeyConfig : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 160))
  {
    v4 = *(_QWORD *)(v3 + 152);
    v5 = *(_QWORD *)(v3 + 160);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *a2 = v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.outputKeyConfig : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 152) = v4;
  *(_QWORD *)(v7 + 160) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.outputKeyConfig.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(v2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v5);
  swift_beginAccess();
  *(_QWORD *)(v7 + 152) = a1;
  *(_QWORD *)(v7 + 160) = a2;
  return swift_bridgeObjectRelease();
}

void (*AspirePirPirPreprocessDbArgs.outputKeyConfig.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 160))
  {
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(_QWORD *)(v5 + 160);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return AspirePirPirPreprocessDbArgs.outputKeyConfig.modify;
}

void AspirePirPirPreprocessDbArgs.outputKeyConfig.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v7 = swift_retain();
      *(_QWORD *)(v6 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v7);
      swift_release();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v8 + 152) = v3;
    *(_QWORD *)(v8 + 160) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 88);
      type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
      swift_allocObject();
      v11 = swift_retain();
      *(_QWORD *)(v10 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v11);
      swift_release();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(_QWORD *)(v12 + 152) = v3;
    *(_QWORD *)(v12 + 160) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL AspirePirPirPreprocessDbArgs.hasOutputKeyConfig.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_QWORD *)(v1 + 160) != 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearOutputKeyConfig()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  swift_bridgeObjectRelease();
}

uint64_t AspirePirPirPreprocessDbArgs.keyCompressionStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  if ((*(_BYTE *)(v3 + 177) & 1) != 0)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 168);
    v6 = *(_BYTE *)(v3 + 176) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.keyCompressionStrategy : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 168);
  v6 = *(_BYTE *)(v3 + 176);
  v7 = *(_BYTE *)(v3 + 177);
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = (v7 | v6) & 1;
  return result;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.keyCompressionStrategy : AspirePirPirPreprocessDbArgs(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v6 = swift_retain();
    *(_QWORD *)(a2 + v5) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v6);
    swift_release();
  }
  v7 = *(_QWORD *)(a2 + v5);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 168) = v3;
  *(_BYTE *)(v7 + 176) = v4;
  *(_BYTE *)(v7 + 177) = 0;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.keyCompressionStrategy.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(v1 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 168) = v2;
  *(_BYTE *)(v6 + 176) = v3;
  *(_BYTE *)(v6 + 177) = 0;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.keyCompressionStrategy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  if ((*(_BYTE *)(v5 + 177) & 1) != 0)
  {
    v6 = 0;
    v7 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 168);
    v7 = *(_BYTE *)(v5 + 176) & 1;
  }
  v3[9] = v6;
  *((_BYTE *)v3 + 80) = v7;
  return AspirePirPirPreprocessDbArgs.keyCompressionStrategy.modify;
}

void AspirePirPirPreprocessDbArgs.keyCompressionStrategy.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  v5 = *(_BYTE *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v7 = *(int *)(v3 + 84);
    v8 = *(_QWORD *)(v3 + 88);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(v8 + v7) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v9);
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_QWORD *)(v10 + 168) = v4;
  *(_BYTE *)(v10 + 176) = v5;
  *(_BYTE *)(v10 + 177) = 0;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasKeyCompressionStrategy.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 177) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearKeyCompressionStrategy()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 168) = 0;
  *(_WORD *)(v3 + 176) = 256;
}

uint64_t AspirePirPirPreprocessDbArgs.splitLargeEntry.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 178) & 1;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.splitLargeEntry : AspirePirPirPreprocessDbArgs(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 178) = v3;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.splitLargeEntry.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v5 + 178) = a1 & 1;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.splitLargeEntry.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 178) & 1;
  return AspirePirPirPreprocessDbArgs.splitLargeEntry.modify;
}

void AspirePirPirPreprocessDbArgs.splitLargeEntry.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v9 + 178) = v4;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasSplitLargeEntry.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 178) != 2;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearSplitLargeEntry()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v3 + 178) = 2;
}

uint64_t AspirePirPirPreprocessDbArgs.skipLargeEntrySize.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 184))
    return 0;
  else
    return *(unsigned int *)(v1 + 180);
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.skipLargeEntrySize : AspirePirPirPreprocessDbArgs(int *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_DWORD *)(v6 + 180) = v3;
  *(_BYTE *)(v6 + 184) = 0;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.skipLargeEntrySize.setter(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_DWORD *)(v5 + 180) = a1;
  *(_BYTE *)(v5 + 184) = 0;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.skipLargeEntrySize.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 180);
  if (*(_BYTE *)(v5 + 184))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return AspirePirPirPreprocessDbArgs.skipLargeEntrySize.modify;
}

void AspirePirPirPreprocessDbArgs.skipLargeEntrySize.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v9 + 180) = v4;
  *(_BYTE *)(v9 + 184) = 0;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasSkipLargeEntrySize.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 184) & 1) == 0;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearSkipLargeEntrySize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_DWORD *)(v3 + 180) = 0;
  *(_BYTE *)(v3 + 184) = 1;
}

uint64_t AspirePirPirPreprocessDbArgs.unevenDimensions.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 185) & 1;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.unevenDimensions : AspirePirPirPreprocessDbArgs(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 185) = v3;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.unevenDimensions.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v5 + 185) = a1 & 1;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.unevenDimensions.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 185) & 1;
  return AspirePirPirPreprocessDbArgs.unevenDimensions.modify;
}

void AspirePirPirPreprocessDbArgs.unevenDimensions.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v9 + 185) = v4;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasUnevenDimensions.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 185) != 2;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearUnevenDimensions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v3 + 185) = 2;
}

uint64_t AspirePirPirPreprocessDbArgs.noValidate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 186) & 1;
}

uint64_t key path setter for AspirePirPirPreprocessDbArgs.noValidate : AspirePirPirPreprocessDbArgs(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 186) = v3;
  return result;
}

uint64_t AspirePirPirPreprocessDbArgs.noValidate.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v5 + 186) = a1 & 1;
  return result;
}

void (*AspirePirPirPreprocessDbArgs.noValidate.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 186) & 1;
  return AspirePirPirPreprocessDbArgs.noValidate.modify;
}

void AspirePirPirPreprocessDbArgs.noValidate.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v9 + 186) = v4;
  free((void *)v3);
}

BOOL AspirePirPirPreprocessDbArgs.hasNoValidate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 186) != 2;
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearNoValidate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v3 + 186) = 2;
}

uint64_t AspirePirPirPreprocessDbArgs.command.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  v7 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspirePirPirPreprocessDbCommand);
  v8 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
}

uint64_t key path getter for AspirePirPirPreprocessDbArgs.command : AspirePirPirPreprocessDbArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20))
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v7, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  v8 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspirePirPirPreprocessDbCommand);
  v9 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
}

uint64_t AspirePirPirPreprocessDbArgs.command.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    *(_QWORD *)(v1 + v9) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v10);
    swift_release();
  }
  v11 = *(_QWORD *)(v1 + v9);
  outlined init with take of SecretKey(a1, (uint64_t)v8, type metadata accessor for AspirePirPirPreprocessDbCommand);
  v12 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  v13 = v11
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, v13, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  swift_endAccess();
  return swift_release();
}

uint64_t AspirePirPirPreprocessDbCommand.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  return UnknownStorage.init()();
}

void (*AspirePirPirPreprocessDbArgs.command.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20))
      + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirPirPreprocessDbCommand);
  }
  return AspirePirPirPreprocessDbArgs.command.modify;
}

void AspirePirPirPreprocessDbArgs.command.modify(uint64_t a1, char a2)
{
  AspirePirPirParameters.encryptionParameters.modify(a1, a2, (void (*)(void *))AspirePirPirPreprocessDbArgs.command.setter, type metadata accessor for AspirePirPirPreprocessDbCommand);
}

BOOL AspirePirPirPreprocessDbArgs.hasCommand.getter()
{
  return AspirePirPirParameters.hasEncryptionParameters.getter(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?, type metadata accessor for AspirePirPirPreprocessDbArgs, &OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command, type metadata accessor for AspirePirPirPreprocessDbCommand);
}

Swift::Void __swiftcall AspirePirPirPreprocessDbArgs.clearCommand()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for AspirePirPirPreprocessDbArgs(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for AspirePirPirPreprocessDbArgs._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(v0 + v4) = AspirePirPirPreprocessDbArgs._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(v0 + v4);
  v7 = type metadata accessor for AspirePirPirPreprocessDbCommand(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  v8 = v6
     + OBJC_IVAR____TtCV8CipherML28AspirePirPirPreprocessDbArgsP33_B705AA2B9AD83800013CA213F8CF820D13_StorageClass__command;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, v8, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand?);
  swift_endAccess();
  swift_release();
}

uint64_t (*AspirePirPirPreprocessDbArgs.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbArgs.init()@<X0>(uint64_t a1@<X8>)
{
  return AspirePirPirParameters.init()(type metadata accessor for AspirePirPirPreprocessDbArgs, &one-time initialization token for defaultInstance, &static AspirePirPirPreprocessDbArgs._StorageClass.defaultInstance, a1);
}

uint64_t AspirePirPirParameters.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  UnknownStorage.init()();
  v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t AspirePirPirPreprocessDbCommand.command.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
}

uint64_t AspirePirPirPreprocessDbCommand.command.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
}

uint64_t (*AspirePirPirPreprocessDbCommand.command.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AspirePirPirPreprocessDbCommand.keyword.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v7 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
LABEL_5:
    UnknownStorage.init()();
    v8 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
    v9 = (_QWORD *)(a1 + v8[5]);
    *v9 = 0;
    v9[1] = 0;
    v10 = (_QWORD *)(a1 + v8[6]);
    *v10 = 0;
    v10[1] = 0;
    v11 = a1 + v8[7];
    v12 = type metadata accessor for AspirePirCuckooTableConfig(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v6, a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t AspirePirPirPreprocessDbCommand.keyword.setter(uint64_t a1)
{
  return AspirePirPirPreprocessDbCommand.keyword.setter(a1, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
}

uint64_t AspirePirPirPreprocessDbCommand.Keyword.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  v3 = (_QWORD *)(a1 + v2[5]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + v2[6]);
  *v4 = 0;
  v4[1] = 0;
  v5 = a1 + v2[7];
  v6 = type metadata accessor for AspirePirCuckooTableConfig(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

void (*AspirePirPirPreprocessDbCommand.keyword.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = (int *)type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword(0);
  v8 = *(_QWORD *)(*((_QWORD *)v7 - 1) + 64);
  v4[2] = malloc(v8);
  v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  v10 = type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirPirPreprocessDbCommand.OneOf_Command?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v9, type metadata accessor for AspirePirPirPreprocessDbCommand.Keyword);
      return AspirePirPirPreprocessDbCommand.keyword.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AspirePirPirPreprocessDbCommand.OneOf_Command);
  }
  UnknownStorage.init()();
  v12 = &v9[v7[5]];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v9[v7[6]];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &v9[v7[7]];
  v15 = type metadata accessor for AspirePirCuckooTableConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return AspirePirPirPreprocessDbCommand.keyword.modify;
}

