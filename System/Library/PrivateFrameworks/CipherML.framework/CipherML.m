void sub_237BCA714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_237BCAC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_237BCBD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_237BCC570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_237BCC950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BCD104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BCD5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BCDA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BCDF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BCECDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_237BCF040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAMDClientClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAMDClientClass_softClass;
  v7 = getAMDClientClass_softClass;
  if (!getAMDClientClass_softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getAMDClientClass_block_invoke;
    v3[3] = &unk_2509A8130;
    v3[4] = &v4;
    __getAMDClientClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_237BCF894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAMDClientClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!AppleMediaDiscoveryLibraryCore_frameworkLibrary)
  {
    AppleMediaDiscoveryLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!AppleMediaDiscoveryLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("AMDClient");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)__getAMDClientClass_block_invoke_cold_1();
    free(v3);
  }
  getAMDClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_237BD1830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_237BD1C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD2060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_237BD24C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_237BD2910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD2CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD3088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD346C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD3860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD3C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD42FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_237BD4760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_237BD50B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD5990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD5DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD61DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD65C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD6AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD6EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_237BD7310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD76F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_237BD7AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t SimilarityClient.secretKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SecretKey(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
}

uint64_t SimilarityClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SimilarityClient();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 20), a1, type metadata accessor for AspireApiPECConfig);
}

uint64_t type metadata accessor for SimilarityClient()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SimilarityClient;
  if (!type metadata singleton initialization cache for SimilarityClient)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SimilarityClient.configId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for SimilarityClient() + 24);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t SimilarityClient.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SimilarityClient() + 28);
  v4 = type metadata accessor for PEC.SimilarityClient();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SimilarityClient.init(secretKey:config:configId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v33 = a3;
  v34 = a4;
  v35 = a1;
  v29 = a5;
  v7 = type metadata accessor for HE.SerializedSecretKey();
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PEC.SimilarityClient();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v32 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PEC.SimilarityClientConfig();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v27 - v18;
  AspireApiPECConfig.cryptokit()((uint64_t)&v27 - v18);
  if (v5)
  {
    outlined consume of Data._Representation(v33, v34);
    outlined destroy of AspireApiPECConfig(a2, type metadata accessor for AspireApiPECConfig);
    return outlined destroy of AspireApiPECConfig(v35, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  }
  else
  {
    v27 = v11;
    v28 = v10;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    v21 = type metadata accessor for SecretKey();
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v9, v35 + *(int *)(v21 + 20), v31);
    v22 = v32;
    PEC.SimilarityClient.init(config:secretKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    v23 = v29;
    outlined init with take of SecretKey(v35, v29, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    v24 = (int *)type metadata accessor for SimilarityClient();
    outlined init with take of SecretKey(a2, v23 + v24[5], type metadata accessor for AspireApiPECConfig);
    v25 = (_QWORD *)(v23 + v24[6]);
    v26 = v34;
    *v25 = v33;
    v25[1] = v26;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v23 + v24[7], v22, v28);
  }
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t SimilarityClient.encryptValues(_:shardIndices:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = v3;
  v18 = a2;
  v19 = a3;
  v7 = type metadata accessor for PEC.SimilarityClientConfig();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for SimilarityClient();
  PEC.SimilarityClient.similarityConfig.getter();
  v12 = PEC.SimilarityClientConfig.embeddingDimension.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v12 == -1)
    goto LABEL_6;
  if (v12)
    v11 %= v12;
  if (!v11)
  {
LABEL_6:
    result = PEC.SimilarityClient.queryCrt(values:)();
    if (!v4)
    {
      v14 = result;
      v15 = type metadata accessor for AspireApiPECRequest(0);
      MEMORY[0x24BDAC7A8](v15);
      *(&v17 - 4) = v18;
      *(&v17 - 3) = v14;
      *(&v17 - 2) = v5;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECRequest and conformance AspireApiPECRequest, v16, (uint64_t)&protocol conformance descriptor for AspireApiPECRequest);
      static Message.with(_:)();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(_QWORD *a1, int64_t *a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  int64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v48 = a4;
  v8 = type metadata accessor for PEC.SerializedCiphertextCoeffMatrix();
  v55 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v51 = *(_QWORD *)(v11 - 8);
  v52 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v54 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = a2[2];
  v17 = MEMORY[0x24BEE4AF8];
  v53 = v8;
  v46 = v18;
  v47 = v14;
  v45 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v16)
  {
    v50 = a3;
    v19 = a1;
    v56 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    v20 = a2[4];
    if ((v20 & 0x8000000000000000) != 0 || HIDWORD(v20))
    {
LABEL_28:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v17 = v56;
    v22 = *(_QWORD *)(v56 + 16);
    v21 = *(_QWORD *)(v56 + 24);
    v23 = (unint64_t *)(v22 + 1);
    if (v22 >= v21 >> 1)
      goto LABEL_27;
    while (1)
    {
      *(_QWORD *)(v17 + 16) = v23;
      v21 = v17 + 4 * v22;
      *(_DWORD *)(v21 + 32) = v20;
      v20 = v16 - 1;
      if (v16 == 1)
        break;
      v16 = v22 + 9;
      v23 = (unint64_t *)(a2 + 5);
      while (v20)
      {
        v22 = *v23;
        if ((*v23 & 0x8000000000000000) != 0 || HIDWORD(v22))
          goto LABEL_28;
        v56 = v17;
        v21 = *(_QWORD *)(v17 + 24);
        a2 = (int64_t *)(v16 - 7);
        if (v16 - 8 >= v21 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v16 - 7, 1);
          v17 = v56;
        }
        *(_QWORD *)(v17 + 16) = a2;
        *(_DWORD *)(v17 + 4 * v16++) = v22;
        ++v23;
        if (!--v20)
          goto LABEL_6;
      }
      __break(1u);
LABEL_27:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, (int64_t)v23, 1);
      v17 = v56;
    }
LABEL_6:
    a1 = v19;
    v8 = v53;
    a3 = v50;
  }
  swift_bridgeObjectRelease();
  *a1 = v17;
  v24 = *((_QWORD *)a3 + 2);
  v25 = MEMORY[0x24BEE4AF8];
  if (v24)
  {
    v44 = a1;
    v56 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    v26 = &a3[(*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80)];
    v27 = *(char **)(v55 + 16);
    v49 = *(_QWORD *)(v55 + 72);
    v50 = v27;
    while (1)
    {
      v28 = ((uint64_t (*)(char *, char *, uint64_t))v50)(v10, v26, v8);
      MEMORY[0x24BDAC7A8](v28);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, v29, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
      static Message.with(_:)();
      if (v4)
        break;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v8);
      v25 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v25 + 16) + 1, 1);
        v25 = v56;
      }
      v30 = (uint64_t)v54;
      v32 = *(_QWORD *)(v25 + 16);
      v31 = *(_QWORD *)(v25 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        v30 = (uint64_t)v54;
        v25 = v56;
      }
      *(_QWORD *)(v25 + 16) = v32 + 1;
      outlined init with take of SecretKey(v30, v25+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v32, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      v26 += v49;
      --v24;
      v8 = v53;
      if (!v24)
      {
        a1 = v44;
        goto LABEL_25;
      }
    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v8);
    return swift_release();
  }
  else
  {
LABEL_25:
    v34 = swift_bridgeObjectRelease();
    a1[1] = v25;
    MEMORY[0x24BDAC7A8](v34);
    v35 = v48;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
    v36 = (uint64_t)v45;
    v37 = v47;
    static Message.with(_:)();
    v38 = (uint64_t)a1 + *(int *)(type metadata accessor for AspireApiPECRequest(0) + 32);
    outlined destroy of AspireApiEvaluationKeyMetadata?(v38);
    outlined init with take of SecretKey(v36, v38, type metadata accessor for AspireApiEvaluationKeyMetadata);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v38, 0, 1, v37);
    v39 = (uint64_t *)(v35 + *(int *)(type metadata accessor for SimilarityClient() + 24));
    v40 = *v39;
    v41 = v39[1];
    v42 = a1[2];
    v43 = a1[3];
    outlined copy of Data._Representation(*v39, v41);
    result = outlined consume of Data._Representation(v42, v43);
    a1[2] = v40;
    a1[3] = v41;
  }
  return result;
}

uint64_t partial apply for closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(a1, *(int64_t **)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B822CDC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CipherML42AspireSimilaritySerializedCiphertextMatrixVG_16CryptoKitPrivate3PECO0hi5CoeffJ0VsAE_pTg5(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v18 = type metadata accessor for PEC.SerializedCiphertextCoeffMatrix();
  v6 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = v22;
    v11 = *(_QWORD *)(type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0) - 8);
    v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v17 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      v19(v12, &v21);
      if (v4)
        break;
      v4 = 0;
      v22 = v10;
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v10 = v22;
      }
      *(_QWORD *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v18);
      v12 += v17;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_8CipherML16AspireApiRequestVsAE_pTg5(void (*a1)(_QWORD *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t *);
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = type metadata accessor for AspireApiRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v23 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v11 = v23;
    v12 = (unint64_t *)(a3 + 40);
    while (1)
    {
      v14 = *(v12 - 1);
      v13 = *v12;
      v22[0] = v14;
      v22[1] = v13;
      outlined copy of Data._Representation(v14, v13);
      v19(v22, &v21);
      if (v4)
        break;
      v4 = 0;
      outlined consume of Data._Representation(v14, v13);
      v23 = v11;
      v16 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v11 = v23;
      }
      v12 += 2;
      *(_QWORD *)(v11 + 16) = v16 + 1;
      outlined init with take of SecretKey((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, type metadata accessor for AspireApiRequest);
      if (!--v10)
        return v11;
    }
    outlined consume of Data._Representation(v14, v13);
    swift_release();
  }
  return v11;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10Foundation4DataVsAE_pTg5(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  _QWORD *(*v16)(__int128 *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v16 = (_QWORD *(*)(__int128 *__return_ptr, uint64_t *, uint64_t *))result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (_QWORD *)v7;
  v20 = MEMORY[0x24BEE4AF8];
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v20;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v11 = a3;
    while (a4 != v11)
    {
      v18 = v11;
      result = v16(&v19, &v18, &v17);
      if (v6)
      {
        swift_release();
        return (_QWORD *)v7;
      }
      v6 = 0;
      v12 = v19;
      v20 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        v15 = v19;
        result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v12 = v15;
        v7 = v20;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_OWORD *)(v7 + 16 * v14 + 32) = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v10 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (_QWORD *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t closure #3 in closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  *a1 = *a2;
  v3 = (char *)a2 + *(int *)(type metadata accessor for SimilarityClient() + 20);
  v4 = *((_QWORD *)v3 + 4);
  v5 = *((_QWORD *)v3 + 5);
  v6 = a1[1];
  v7 = a1[2];
  outlined copy of Data._Representation(v4, v5);
  result = outlined consume of Data._Representation(v6, v7);
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t SimilarityClient.decryptSimilarityScores(shard:)(uint64_t *a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  NSObject **v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  os_log_type_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v4 = *a1;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CipherML42AspireSimilaritySerializedCiphertextMatrixVG_16CryptoKitPrivate3PECO0hi5CoeffJ0VsAE_pTg5((void (*)(uint64_t, uint64_t *))partial apply for closure #1 in SimilarityClient.decryptSimilarityScores(shard:), (uint64_t)&v26, v4);
  swift_bridgeObjectRelease();
  if (v2)
    return (uint64_t)v1;
  v6 = a1[1];
  v5 = a1[2];
  v1 = ((char *)v1 + *(int *)(type metadata accessor for SimilarityClient() + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = PEC.SimilarityClient.decryptCrt(reply:)();
  result = swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v6 + 16);
  v10 = *(_QWORD *)(v5 + 16);
  if (v9)
  {
    if (v10 && v9 != v10)
    {
      swift_bridgeObjectRelease();
      v28 = 0;
      v29 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = 0x7364497972746E65;
      v29 = 0xEF20746E756F632ELL;
      v27 = v9;
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._object = (void *)0x8000000237D60C60;
      v12._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v27 = v10;
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v1 = v28;
      v14 = v29;
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      *v15 = v1;
      v15[1] = v14;
LABEL_25:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return (uint64_t)v1;
    }
    v16 = *(_QWORD *)(v7 + 16);
    if (v16 % (uint64_t)v9)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for daemon != -1)
        swift_once();
      v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.daemon);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v1 = Logger.logObject.getter();
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v1, v24))
      {
        v19 = swift_slowAlloc();
        *(_DWORD *)v19 = 134349312;
        swift_bridgeObjectRelease();
        v28 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2050;
        swift_bridgeObjectRelease();
        v28 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v20 = "Wrong entryIds.count %{public}ld.\nMust be 0 or divide scores.count %{public}ld";
        v21 = v1;
        v22 = v24;
        goto LABEL_17;
      }
      goto LABEL_23;
    }
    if (!v10 || !(v16 % v10))
    {
      v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SaySo18CMLSimilarityScoreCGs5NeverOTg5056_s8CipherML16SimilarityClientV07decryptC6Scores5shardSayo4So18dE47CGGAA25AspireApiPECShardResponseV_tKFAHSiXEfU0_Say10Foundation4DataVGSays6UInt64VGSaySfGSiTf1cn_nTf4ngggn_n(0, v16 / v9, v5, v6, v7, v16 / v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v1;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    if (one-time initialization token for daemon != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v1 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v18))
    {
      v19 = swift_slowAlloc();
      *(_DWORD *)v19 = 134349312;
      swift_bridgeObjectRelease();
      v28 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2050;
      swift_bridgeObjectRelease();
      v28 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v20 = "Wrong metadatas.count %{public}ld.\nMust be 0 or divide scores.count %{public}ld";
      v21 = v1;
      v22 = v18;
LABEL_17:
      _os_log_impl(&dword_237BC8000, v21, v22, v20, (uint8_t *)v19, 0x16u);
      MEMORY[0x23B822DA8](v19, -1, -1);

LABEL_24:
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      goto LABEL_25;
    }
LABEL_23:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  if (!v10)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    *v25 = 0xD000000000000030;
    v25[1] = 0x8000000237D60C80;
    goto LABEL_25;
  }
  v16 = *(_QWORD *)(v7 + 16);
  if (v16 % v10)
    goto LABEL_8;
  __break(1u);
  return result;
}

uint64_t closure #1 in SimilarityClient.decryptSimilarityScores(shard:)@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v14 = a1;
  v3 = type metadata accessor for HE.EncryptionParams();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PEC.SimilarityClientConfig();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SimilarityClient();
  PEC.SimilarityClient.similarityConfig.getter();
  PEC.SimilarityClientConfig.encryptionParams.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v11 = v15;
  AspireSimilaritySerializedCiphertextMatrix.cryptokit(encryptionParams:)((uint64_t)v6, a2);
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v11)
    *v14 = v11;
  return result;
}

uint64_t partial apply for closure #1 in SimilarityClient.decryptSimilarityScores(shard:)@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return closure #1 in SimilarityClient.decryptSimilarityScores(shard:)(a1, a2);
}

uint64_t closure #2 in SimilarityClient.decryptSimilarityScores(shard:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  double v24;
  id v25;
  _QWORD v26[2];
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v10 = a6;
  v11 = *a1;
  if (*(_QWORD *)(a2 + 16))
  {
    MEMORY[0x24BDAC7A8](a1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVys010EnumeratedE0VySays6UInt64VGGSay10Foundation4DataVGG_So18CMLSimilarityScoreCs5NeverOTg506_sSis6g14V10Foundation4i5VSo18jk37CIgyygo_Si6offset_AB7elementt_AEtAGs5L11OIegnrzr_TRSiAkpTIgyygo_Tf1cn_nTf4ng_n(a3, a2, (void (*)(unint64_t, uint64_t, uint64_t, unint64_t))partial apply for closure #2 in closure #2 in SimilarityClient.decryptSimilarityScores(shard:));
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
LABEL_11:
    *v10 = v13;
    return result;
  }
  v26[1] = v26;
  v27 = a6;
  v28 = v6;
  v31 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray.reserveCapacity(_:)();
  v15 = *(_QWORD *)(a3 + 16);
  v29 = a3;
  result = swift_bridgeObjectRetain();
  v30 = v15;
  if (!v15)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    v13 = v31;
    result = swift_bridgeObjectRelease();
    v10 = v27;
    goto LABEL_11;
  }
  v16 = 0;
  v17 = v29 + 32;
  while (1)
  {
    v18 = v16 * a5;
    if ((unsigned __int128)(v16 * (__int128)a5) >> 64 != (v16 * a5) >> 63)
      break;
    v19 = __OFADD__(v18, v11);
    v20 = v18 + v11;
    if (v19)
      goto LABEL_13;
    if ((v20 & 0x8000000000000000) != 0)
      goto LABEL_14;
    if (v20 >= *(_QWORD *)(a4 + 16))
      goto LABEL_15;
    v21 = *(_QWORD *)(v17 + 8 * v16++);
    v22 = *(_DWORD *)(a4 + 32 + 4 * v20);
    v23 = (void *)objc_opt_self();
    LODWORD(v24) = v22;
    v25 = objc_msgSend(v23, sel_scoreWithIdentifier_score_, v21, v24);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    result = specialized ContiguousArray._endMutation()();
    if (v30 == v16)
      goto LABEL_10;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #2 in SimilarityClient.decryptSimilarityScores(shard:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  int v13;
  Class isa;
  void *v15;
  double v16;
  id v17;

  v7 = result * a6;
  if ((unsigned __int128)(result * (__int128)a6) >> 64 != (result * a6) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = __OFADD__(v7, a7);
  v9 = v7 + a7;
  if (v8)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 < *(_QWORD *)(a5 + 16))
  {
    v13 = *(_DWORD *)(a5 + 4 * v9 + 32);
    outlined copy of Data._Representation(a3, a4);
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a3, a4);
    v15 = (void *)objc_opt_self();
    LODWORD(v16) = v13;
    v17 = objc_msgSend(v15, sel_scoreWithIdentifier_score_metadata_, a2, isa, v16);

    return (uint64_t)v17;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t SimilarityClient.decryptSimilarityScores(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;

  v2 = v1;
  v4 = type metadata accessor for AspireApiPECShardResponse(0);
  v34 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v41 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: AspireApiPECShardResponse));
  v38 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v33 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: AspireApiPECShardResponse)?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (unint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v13 = (uint64_t *)((char *)&v32 - v12);
  v14 = *(_QWORD *)(*a1 + 16);
  v37 = *a1;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v35 = v11;
  v36 = v13;
  if (v14)
    goto LABEL_5;
LABEL_4:
  while (2)
  {
    v18 = 1;
    for (i = v14; ; i = v40)
    {
      v22 = v38;
      (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v11, v18, 1, v6);
      outlined init with take of (offset: Int, element: AspireApiPECShardResponse)?((uint64_t)v11, (uint64_t)v13);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v13, 1, v6) == 1)
        goto LABEL_22;
      v40 = i;
      v23 = *v13;
      v24 = v41;
      outlined init with take of SecretKey((uint64_t)v13 + *(int *)(v6 + 48), (uint64_t)v41, type metadata accessor for AspireApiPECShardResponse);
      v25 = SimilarityClient.decryptSimilarityScores(shard:)(v24);
      if (v2)
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v41, type metadata accessor for AspireApiPECShardResponse);
        swift_bridgeObjectRelease();
LABEL_22:
        swift_bridgeObjectRelease();
        return (uint64_t)v17;
      }
      v26 = (_QWORD *)v25;
      if (v23)
        break;
      outlined destroy of AspireApiPECConfig((uint64_t)v41, type metadata accessor for AspireApiPECShardResponse);
      result = swift_bridgeObjectRelease();
      v17 = v26;
      v16 = v40;
      if (v40 == v14)
        goto LABEL_4;
LABEL_5:
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_26;
      if (v16 >= *(_QWORD *)(v37 + 16))
        goto LABEL_27;
      v40 = v16 + 1;
      v20 = (uint64_t)&v33[*(int *)(v6 + 48)];
      outlined init with copy of SecretKey(v37+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v16, v20, type metadata accessor for AspireApiPECShardResponse);
      v21 = (uint64_t)v11 + *(int *)(v6 + 48);
      *v11 = v16;
      outlined init with take of SecretKey(v20, v21, type metadata accessor for AspireApiPECShardResponse);
      v18 = 0;
    }
    v27 = v6;
    v28 = v17[2];
    if (v28 != *(_QWORD *)(v25 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      outlined destroy of AspireApiPECConfig((uint64_t)v41, type metadata accessor for AspireApiPECShardResponse);
      return (uint64_t)v17;
    }
    v39 = 0;
    if (!v28)
    {
LABEL_3:
      outlined destroy of AspireApiPECConfig((uint64_t)v41, type metadata accessor for AspireApiPECShardResponse);
      result = swift_bridgeObjectRelease();
      v2 = v39;
      v16 = v40;
      v6 = v27;
      v11 = v35;
      v13 = v36;
      if (v40 == v14)
        continue;
      goto LABEL_5;
    }
    break;
  }
  v29 = 0;
  v30 = v25 + 32;
  while (1)
  {
    v31 = *(_QWORD *)(v30 + 8 * v29);
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      v17 = (_QWORD *)result;
    }
    if (v29 >= v17[2])
      break;
    specialized Array.append<A>(contentsOf:)(v31);
    if (++v29 == v28)
      goto LABEL_3;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x23B8222A4](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v8;
  char v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t (*v20)();
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int64_t v32;
  _BYTE *v33;
  uint64_t (*v34)();
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v6 = v5 + result;
  if (__OFADD__(v5, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = result;
  v9 = a3 & 1;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v11 = v4[3] >> 1, v11 < v6))
  {
    if (v5 <= v6)
      v12 = v6;
    else
      v12 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v12, 1, v4);
    v11 = v4[3] >> 1;
  }
  v13 = v4[2];
  v14 = v11 - v13;
  result = specialized Sequence._copyContents(initializing:)((uint64_t)&v42, (uint64_t)&v4[2 * v13 + 4], v11 - v13, v8, a2, v9);
  if (result < v8)
    goto LABEL_15;
  if (result >= 1)
  {
    v15 = v4[2];
    v16 = __OFADD__(v15, result);
    v17 = v15 + result;
    if (v16)
    {
      __break(1u);
LABEL_34:
      v29 = v36 + v6 + 1;
      goto LABEL_35;
    }
    v4[2] = v17;
  }
  if (result != v14)
  {
LABEL_13:
    *(_QWORD *)v3 = v4;
    return result;
  }
LABEL_16:
  v18 = v45;
  if (v45 == v42)
    goto LABEL_13;
  v19 = v4[2];
  v39 = v43;
  v40 = v42;
  v38 = v44;
  v20 = specialized Repeated.subscript.read((uint64_t (*)())v41, v45, v42, v43, v44);
  v22 = *v21;
  v23 = *((_BYTE *)v21 + 8);
  result = ((uint64_t (*)(_BYTE *, _QWORD))v20)(v41, 0);
  v24 = v40;
  if (v18 < 0 || v18 >= v40)
    goto LABEL_37;
  v25 = v18 + 1;
  v26 = -v40;
LABEL_21:
  while (1)
  {
    v27 = v4[3];
    v28 = v27 >> 1;
    v29 = v19 + 1;
    if ((uint64_t)(v27 >> 1) < v19 + 1)
      break;
    if (v19 < v28)
      goto LABEL_23;
LABEL_20:
    v4[2] = v19;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v19 + 1, 1, v4);
  v24 = v40;
  v4 = (_QWORD *)result;
  v28 = *(_QWORD *)(result + 24) >> 1;
  if (v19 >= v28)
    goto LABEL_20;
LABEL_23:
  v30 = &v4[2 * v19];
  v30[4] = v22;
  *((_BYTE *)v30 + 40) = v23 & 1;
  if (v25 == v24)
  {
LABEL_35:
    v4[2] = v29;
    goto LABEL_13;
  }
  v6 = 0;
  v31 = v26 + v25;
  v36 = v19;
  v37 = v28;
  v32 = ~v19 + v28;
  v33 = v30 + 7;
  while (1)
  {
    v34 = specialized Repeated.subscript.read((uint64_t (*)())v41, v25 + v6, v40, v39, v38);
    v22 = *v35;
    v23 = *((_BYTE *)v35 + 8);
    result = ((uint64_t (*)(_BYTE *, _QWORD))v34)(v41, 0);
    v24 = v40;
    if (v25 < 0 || v25 + v6 >= v40)
      break;
    if (v32 == v6)
    {
      v25 += v6 + 1;
      v19 = v37;
      v26 = -v40;
      v4[2] = v37;
      goto LABEL_21;
    }
    *((_QWORD *)v33 - 1) = v22;
    *v33 = v23;
    v33 += 16;
    ++v6;
    if (!(v31 + v6))
      goto LABEL_34;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t default argument 0 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  return 0;
}

uint64_t default argument 1 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  return 0;
}

uint64_t default argument 2 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  return 0;
}

uint64_t default argument 3 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  return 0;
}

uint64_t default argument 1 of RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 2 of RequestsManager.requestData(keywords:context:shardIds:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 1 of ActiveUseCaseTracker.markActive(useCase:active:)()
{
  return 1;
}

uint64_t default argument 2 of AMSNetworking.init(networkDelegationConfig:secondaryIdentifier:baseURL:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  __break(1u);
  return result;
}

uint64_t default argument 1 of StaticPIRParameters.init(maxShards:cacheElementCount:cacheEntryMinutesToLive:)()
{
  return 0;
}

uint64_t default argument 2 of StaticPIRParameters.init(maxShards:cacheElementCount:cacheEntryMinutesToLive:)()
{
  return 0;
}

double default argument 0 of StaticPECParameters.init(differentialPrivacyParameters:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t default argument 2 of UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)()
{
  return 43200;
}

uint64_t default argument 3 of UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)()
{
  return 0;
}

uint64_t default argument 4 of UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)()
{
  return 0;
}

uint64_t default argument 5 of UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x24BE2A0B0];
  v3 = type metadata accessor for HE.SecurityLevel();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t default argument 1 of RequestsManager.queryStatus(for:options:)()
{
  return 0;
}

uint64_t default argument 2 of SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)()
{
  if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
    swift_once();
  return static StaticPIRParameters.defaultCacheEntryMinutesToLive;
}

uint64_t default argument 1 of static SqliteCache.createTable(useCase:schemaVersion:)()
{
  return 1;
}

uint64_t default argument 1 of XPCHandler.queryStatus(for:options:)()
{
  return 0;
}

uint64_t default argument 0 of ActiveUseCaseTracker.init(persistenceFile:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 0 of ActiveUseCaseTracker.init(persistenceFile:)((uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0], a1);
}

uint64_t (*default argument 1 of TokenIssuerDirectory.isValid(tokenKey:currentTime:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

uint64_t default argument 2 of RequestsManager.PECContext.preparePECRequest(elements:shardIndices:keyConfig:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 0 of ActiveUseCaseTracker.init(persistenceFile:)(type metadata accessor for AspireHeEvaluationKeyConfig, a1);
}

uint64_t default argument 0 of ActiveUseCaseTracker.init(persistenceFile:)@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t default argument 1 of PoissonDistribution.init(mean:cap:)()
{
  return 0;
}

uint64_t default argument 2 of GammaDistribution.init(shape:scale:cap:)()
{
  return 0;
}

double default argument 0 of NormalDistribution.init(mean:standardDeviation:)()
{
  return 0.0;
}

double default argument 1 of NormalDistribution.init(mean:standardDeviation:)()
{
  return 1.0;
}

void protocol witness for SetAlgebra.init() in conformance CMLUseCaseControlOptions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance CMLUseCaseControlOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CMLUseCaseControlOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance CMLUseCaseControlOptions@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance CMLUseCaseControlOptions@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CMLUseCaseControlOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance CMLUseCaseControlOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance CMLUseCaseControlOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance CMLUseCaseControlOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance CMLUseCaseControlOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance CMLUseCaseControlOptions()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance CMLUseCaseControlOptions()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance CMLUseCaseControlOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance container_query_flags_t@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance container_query_flags_t(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance container_query_flags_t(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance container_query_flags_t(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CMLUseCaseControlOptions(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CMLUseCaseControlOptions@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance CMLUseCaseControlOptions@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CMLUseCaseControlOptions(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance container_query_flags_t@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x23B822298](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [CMLSimilarityScore] and conformance [A]();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CMLSimilarityScore();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;

  if (!a2)
  {
    v6 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v6 = 0;
    goto LABEL_14;
  }
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!a4)
  {
    a3 = 0;
LABEL_13:
    v6 = a4;
    goto LABEL_14;
  }
  if (a4 >= 1)
  {
    *(_QWORD *)a2 = a5;
    *(_BYTE *)(a2 + 8) = a6 & 1;
    if (a3 == 1)
    {
      v6 = 1;
LABEL_14:
      *(_QWORD *)result = a4;
      *(_QWORD *)(result + 8) = a5;
      *(_BYTE *)(result + 16) = a6 & 1;
      *(_QWORD *)(result + 24) = v6;
      return a3;
    }
    if (a4 == 1)
    {
      a3 = 1;
      goto LABEL_13;
    }
    v7 = 1 - a4;
    v8 = (_BYTE *)(a2 + 24);
    v9 = 2;
    while (1)
    {
      v10 = v9;
      if (v7 + v9 == 2)
        break;
      *((_QWORD *)v8 - 1) = a5;
      *v8 = a6 & 1;
      if (a3 == v9)
      {
        v6 = v9;
        goto LABEL_14;
      }
      ++v9;
      v8 += 16;
      if (v7 + v10 + 1 == 2)
      {
        v6 = a4;
        a3 = v10;
        goto LABEL_14;
      }
    }
    __break(1u);
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t (*specialized Repeated.subscript.read(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4, char a5))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result = a4;
    *((_BYTE *)result + 8) = a5 & 1;
    return Repeated.subscript.readspecialized ;
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVys010EnumeratedE0VySays6UInt64VGGSay10Foundation4DataVGG_So18CMLSimilarityScoreCs5NeverOTg506_sSis6g14V10Foundation4i5VSo18jk37CIgyygo_Si6offset_AB7elementt_AEtAGs5L11OIegnrzr_TRSiAkpTIgyygo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v14 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray.reserveCapacity(_:)();
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  if (v5)
  {
    v7 = 0;
    v8 = (unint64_t *)(a2 + 40);
    do
    {
      v9 = *(_QWORD *)(a2 + 16);
      if (v7 == v9)
        break;
      if (v7 >= v9)
      {
        __break(1u);
        return result;
      }
      v10 = *(_QWORD *)(a1 + 32 + 8 * v7);
      v11 = *(v8 - 1);
      v12 = *v8;
      outlined copy of Data._Representation(v11, *v8);
      a3(v7, v10, v11, v12);
      outlined consume of Data._Representation(v11, v12);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      v8 += 2;
      ++v7;
    }
    while (v5 != v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SaySo18CMLSimilarityScoreCGs5NeverOTg5056_s8CipherML16SimilarityClientV07decryptC6Scores5shardSayo4So18dE47CGGAA25AspireApiPECShardResponseV_tKFAHSiXEfU0_Say10Foundation4DataVGSays6UInt64VGSaySfGSiTf1cn_nTf4ngggn_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = v6;
  v9 = MEMORY[0x24BEE4AF8];
  if (!v7)
    return v9;
  v11 = result;
  v23 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = v23;
    if (a2 <= v11)
      v12 = v11;
    else
      v12 = a2;
    v13 = v11;
    while (a2 != v13)
    {
      v21 = v13;
      result = closure #2 in SimilarityClient.decryptSimilarityScores(shard:)(&v21, a3, a4, a5, a6, &v22);
      if (v8)
      {
        swift_release();
        return v9;
      }
      v8 = 0;
      v14 = v22;
      v23 = v9;
      v16 = *(_QWORD *)(v9 + 16);
      v15 = *(_QWORD *)(v9 + 24);
      if (v16 >= v15 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v9 = v23;
      }
      *(_QWORD *)(v9 + 16) = v16 + 1;
      *(_QWORD *)(v9 + 8 * v16 + 32) = v14;
      if (a2 < v11)
        goto LABEL_19;
      if (v12 == v13)
        goto LABEL_20;
      if (a2 == ++v13)
        return v9;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B822CC4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined init with copy of SecretKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of (offset: Int, element: AspireApiPECShardResponse)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: AspireApiPECShardResponse)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for SimilarityClient(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v50;
  _QWORD *v51;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v6 = *(int *)(type metadata accessor for SecretKey() + 20);
    v7 = (char *)v4 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    v10 = a3[5];
    v11 = (char *)v4 + v10;
    v51 = a2;
    v12 = (char *)a2 + v10;
    *(_QWORD *)v11 = *(_QWORD *)((char *)a2 + v10);
    *((_DWORD *)v11 + 2) = *(_DWORD *)((char *)a2 + v10 + 8);
    *((_QWORD *)v11 + 2) = *(_QWORD *)((char *)a2 + v10 + 16);
    v11[24] = *((_BYTE *)a2 + v10 + 24);
    v13 = *(_QWORD *)((char *)a2 + v10 + 32);
    v14 = *(_QWORD *)((char *)a2 + v10 + 40);
    outlined copy of Data._Representation(v13, v14);
    *((_QWORD *)v11 + 4) = v13;
    *((_QWORD *)v11 + 5) = v14;
    *((_QWORD *)v11 + 6) = *((_QWORD *)v12 + 6);
    v15 = (int *)type metadata accessor for AspireApiPECConfig(0);
    v16 = v15[9];
    v17 = &v11[v16];
    v18 = &v12[v16];
    v19 = type metadata accessor for UnknownStorage();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    v21 = v15[10];
    v22 = &v11[v21];
    v23 = &v12[v21];
    v24 = type metadata accessor for AspireHeEncryptionParameters(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
      v28 = *((_QWORD *)v23 + 3);
      *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
      *((_QWORD *)v22 + 3) = v28;
      v22[32] = v23[32];
      *((_QWORD *)v22 + 5) = *((_QWORD *)v23 + 5);
      v22[48] = v23[48];
      *((_QWORD *)v22 + 7) = *((_QWORD *)v23 + 7);
      v22[64] = v23[64];
      v29 = *(int *)(v24 + 40);
      v50 = &v22[v29];
      v30 = &v23[v29];
      swift_bridgeObjectRetain();
      v20(v50, v30, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v31 = v15[11];
    v32 = &v11[v31];
    v33 = &v12[v31];
    v34 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v37 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v38 = *(_QWORD *)(v37 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v33, 1, v37))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v20(v32, v33, v19);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v32, 0, 1, v37);
      }
      v20(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v40 = a3[6];
    v41 = (_QWORD *)((char *)v4 + v40);
    v42 = (_QWORD *)((char *)v51 + v40);
    v43 = *v42;
    v44 = v42[1];
    outlined copy of Data._Representation(*v42, v44);
    *v41 = v43;
    v41[1] = v44;
    v45 = a3[7];
    v46 = (char *)v4 + v45;
    v47 = (char *)v51 + v45;
    v48 = type metadata accessor for PEC.SimilarityClient();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
  }
  return v4;
}

uint64_t destroy for SimilarityClient(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1 + *(int *)(type metadata accessor for SecretKey() + 20);
  v5 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[5];
  outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v8 = v6 + v7[9];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = v6 + v7[10];
  v12 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    v10(v11 + *(int *)(v12 + 40), v9);
  }
  v13 = v6 + v7[11];
  v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v10(v13, v9);
    }
    v10(v13 + *(int *)(v14 + 20), v9);
  }
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v16 = a1 + a2[7];
  v17 = type metadata accessor for PEC.SimilarityClient();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

_QWORD *initializeWithCopy for SimilarityClient(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;

  v5 = a1;
  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)v5 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v52 = a3;
  v53 = a2;
  v10 = *(int *)(a3 + 20);
  v11 = (char *)v5 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  *((_QWORD *)v11 + 2) = *((_QWORD *)v12 + 2);
  v11[24] = v12[24];
  v13 = *((_QWORD *)v12 + 4);
  v14 = *((_QWORD *)v12 + 5);
  outlined copy of Data._Representation(v13, v14);
  *((_QWORD *)v11 + 4) = v13;
  *((_QWORD *)v11 + 5) = v14;
  *((_QWORD *)v11 + 6) = *((_QWORD *)v12 + 6);
  v15 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v16 = v15[9];
  v17 = &v11[v16];
  v18 = &v12[v16];
  v19 = type metadata accessor for UnknownStorage();
  v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  swift_bridgeObjectRetain();
  v20(v17, v18, v19);
  v21 = v15[10];
  v22 = &v11[v21];
  v23 = &v12[v21];
  v24 = type metadata accessor for AspireHeEncryptionParameters(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v27 = *((_QWORD *)v23 + 3);
    *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
    *((_QWORD *)v22 + 3) = v27;
    v22[32] = v23[32];
    *((_QWORD *)v22 + 5) = *((_QWORD *)v23 + 5);
    v22[48] = v23[48];
    *((_QWORD *)v22 + 7) = *((_QWORD *)v23 + 7);
    v22[64] = v23[64];
    v28 = *(int *)(v24 + 40);
    v51 = v5;
    v29 = &v22[v28];
    v30 = &v23[v28];
    swift_bridgeObjectRetain();
    v31 = v29;
    v5 = v51;
    v20(v31, v30, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v32 = v15[11];
  v33 = &v11[v32];
  v34 = &v12[v32];
  v35 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v38 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v34, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v20(v33, v34, v19);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v33, 0, 1, v38);
    }
    v20(&v33[*(int *)(v35 + 20)], &v34[*(int *)(v35 + 20)], v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v41 = *(int *)(v52 + 24);
  v42 = (_QWORD *)((char *)v5 + v41);
  v43 = (_QWORD *)((char *)v53 + v41);
  v44 = *v43;
  v45 = v43[1];
  outlined copy of Data._Representation(*v43, v45);
  *v42 = v44;
  v42[1] = v45;
  v46 = *(int *)(v52 + 28);
  v47 = (char *)v5 + v46;
  v48 = (char *)v53 + v46;
  v49 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
  return v5;
}

_QWORD *assignWithCopy for SimilarityClient(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v75;
  void (*v76)(char *, char *);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v79 = a3;
  v80 = a2;
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)((char *)a2 + v10);
  *((_DWORD *)v11 + 2) = *(_DWORD *)((char *)a2 + v10 + 8);
  v13 = *(_QWORD *)((char *)a2 + v10 + 16);
  v11[24] = v12[24];
  *((_QWORD *)v11 + 2) = v13;
  v14 = *((_QWORD *)v12 + 4);
  v15 = *((_QWORD *)v12 + 5);
  outlined copy of Data._Representation(v14, v15);
  v16 = *((_QWORD *)v11 + 4);
  v17 = *((_QWORD *)v11 + 5);
  *((_QWORD *)v11 + 4) = v14;
  *((_QWORD *)v11 + 5) = v15;
  outlined consume of Data._Representation(v16, v17);
  *((_QWORD *)v11 + 6) = *((_QWORD *)v12 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v19 = v18[9];
  v20 = &v11[v19];
  v21 = &v12[v19];
  v22 = type metadata accessor for UnknownStorage();
  v77 = *(_QWORD *)(v22 - 8);
  v78 = v22;
  v76 = *(void (**)(char *, char *))(v77 + 24);
  v76(v20, v21);
  v23 = v18[10];
  v24 = (uint64_t)&v11[v23];
  v25 = &v12[v23];
  v26 = type metadata accessor for AspireHeEncryptionParameters(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28((uint64_t)v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_QWORD *)(v24 + 8) = *((_QWORD *)v25 + 1);
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
      v31 = *((_QWORD *)v25 + 3);
      *(_BYTE *)(v24 + 32) = v25[32];
      *(_QWORD *)(v24 + 24) = v31;
      v32 = *((_QWORD *)v25 + 5);
      *(_BYTE *)(v24 + 48) = v25[48];
      *(_QWORD *)(v24 + 40) = v32;
      v33 = *((_QWORD *)v25 + 7);
      *(_BYTE *)(v24 + 64) = v25[64];
      *(_QWORD *)(v24 + 56) = v33;
      v34 = *(int *)(v26 + 40);
      v35 = v24 + v34;
      v36 = &v25[v34];
      v37 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 16);
      swift_bridgeObjectRetain();
      v37(v35, v36, v78);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v24, v25, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = *((_QWORD *)v25 + 1);
  *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = *((_QWORD *)v25 + 3);
  *(_BYTE *)(v24 + 32) = v25[32];
  *(_QWORD *)(v24 + 24) = v54;
  v55 = *((_QWORD *)v25 + 5);
  *(_BYTE *)(v24 + 48) = v25[48];
  *(_QWORD *)(v24 + 40) = v55;
  v56 = *((_QWORD *)v25 + 7);
  *(_BYTE *)(v24 + 64) = v25[64];
  *(_QWORD *)(v24 + 56) = v56;
  ((void (*)(uint64_t, char *, uint64_t))v76)(v24 + *(int *)(v26 + 40), &v25[*(int *)(v26 + 40)], v78);
LABEL_7:
  v39 = v18[11];
  v40 = &v11[v39];
  v41 = &v12[v39];
  v42 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (v46)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v57 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
    v60 = v59(v40, 1, v57);
    v61 = v59(v41, 1, v57);
    if (v60)
    {
      if (!v61)
      {
        swift_getEnumCaseMultiPayload();
        v62 = v78;
        (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v40, v41, v78);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v40, 0, 1, v57);
LABEL_25:
        ((void (*)(char *, char *, uint64_t))v76)(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v62);
        goto LABEL_14;
      }
    }
    else
    {
      if (!v61)
      {
        v62 = v78;
        if (a1 != v80)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v40, v41, v78);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_25;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v40, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    v62 = v78;
    goto LABEL_25;
  }
  if (v46)
  {
LABEL_13:
    v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
LABEL_14:
    v53 = v79;
    goto LABEL_21;
  }
  v47 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v41, 1, v47))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    v50 = v78;
    v51 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v50 = v78;
    v51 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v51(v40, v41, v78);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v40, 0, 1, v47);
  }
  v53 = v79;
  v51(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v50);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_21:
  v63 = *(int *)(v53 + 24);
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = (_QWORD *)((char *)v80 + v63);
  v66 = *v65;
  v67 = v65[1];
  outlined copy of Data._Representation(*v65, v67);
  v68 = *v64;
  v69 = v64[1];
  *v64 = v66;
  v64[1] = v67;
  outlined consume of Data._Representation(v68, v69);
  v70 = *(int *)(v53 + 28);
  v71 = (char *)a1 + v70;
  v72 = (char *)v80 + v70;
  v73 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 24))(v71, v72, v73);
  return a1;
}

uint64_t outlined destroy of AspireApiPECConfig(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_QWORD *initializeWithTake for SimilarityClient(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v40 = a2;
  v41 = a3;
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)((char *)a2 + v10);
  *((_DWORD *)v11 + 2) = *(_DWORD *)((char *)a2 + v10 + 8);
  *((_QWORD *)v11 + 2) = *(_QWORD *)((char *)a2 + v10 + 16);
  v11[24] = *((_BYTE *)a2 + v10 + 24);
  *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)a2 + v10 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)((char *)a2 + v10 + 48);
  v13 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v14 = v13[9];
  v15 = &v11[v14];
  v16 = &v12[v14];
  v17 = type metadata accessor for UnknownStorage();
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
  v18(v15, v16, v17);
  v19 = v13[10];
  v20 = &v11[v19];
  v21 = &v12[v19];
  v22 = type metadata accessor for AspireHeEncryptionParameters(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
    v25 = *((_QWORD *)v21 + 3);
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    *((_QWORD *)v20 + 3) = v25;
    v20[32] = v21[32];
    *((_QWORD *)v20 + 5) = *((_QWORD *)v21 + 5);
    v20[48] = v21[48];
    *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
    v20[64] = v21[64];
    v18(&v20[*(int *)(v22 + 40)], &v21[*(int *)(v22 + 40)], v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v26 = v13[11];
  v27 = &v11[v26];
  v28 = &v12[v26];
  v29 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v18(v27, v28, v17);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v27, 0, 1, v32);
    }
    v18(&v27[*(int *)(v29 + 20)], &v28[*(int *)(v29 + 20)], v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v35 = *(int *)(v41 + 28);
  *(_OWORD *)((char *)a1 + *(int *)(v41 + 24)) = *(_OWORD *)((char *)v40 + *(int *)(v41 + 24));
  v36 = (char *)a1 + v35;
  v37 = (char *)v40 + v35;
  v38 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
  return a1;
}

_QWORD *assignWithTake for SimilarityClient(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v59;
  void (*v60)(char *, char *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for SecretKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v63 = a3;
  v64 = a2;
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)((char *)a2 + v10);
  *((_DWORD *)v11 + 2) = *(_DWORD *)((char *)a2 + v10 + 8);
  *((_QWORD *)v11 + 2) = *(_QWORD *)((char *)a2 + v10 + 16);
  v11[24] = *((_BYTE *)a2 + v10 + 24);
  v13 = *(_QWORD *)((char *)a1 + v10 + 32);
  v14 = *(_QWORD *)((char *)a1 + v10 + 40);
  *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)a2 + v10 + 32);
  outlined consume of Data._Representation(v13, v14);
  *((_QWORD *)v11 + 6) = *((_QWORD *)v12 + 6);
  swift_bridgeObjectRelease();
  v15 = (int *)type metadata accessor for AspireApiPECConfig(0);
  v16 = v15[9];
  v17 = &v11[v16];
  v18 = &v12[v16];
  v19 = type metadata accessor for UnknownStorage();
  v61 = *(_QWORD *)(v19 - 8);
  v62 = v19;
  v60 = *(void (**)(char *, char *))(v61 + 40);
  v60(v17, v18);
  v20 = v15[10];
  v21 = (uint64_t)&v11[v20];
  v22 = &v12[v20];
  v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25((uint64_t)v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
      v28 = *((_QWORD *)v22 + 3);
      *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
      *(_QWORD *)(v21 + 24) = v28;
      *(_BYTE *)(v21 + 32) = v22[32];
      *(_BYTE *)(v21 + 48) = v22[48];
      *(_QWORD *)(v21 + 40) = *((_QWORD *)v22 + 5);
      *(_QWORD *)(v21 + 56) = *((_QWORD *)v22 + 7);
      *(_BYTE *)(v21 + 64) = v22[64];
      (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v21 + *(int *)(v23 + 40), &v22[*(int *)(v23 + 40)], v62);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    outlined destroy of AspireApiPECConfig(v21, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v21, v22, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v21 + 24) = *((_QWORD *)v22 + 3);
  *(_BYTE *)(v21 + 32) = v22[32];
  *(_QWORD *)(v21 + 40) = *((_QWORD *)v22 + 5);
  *(_BYTE *)(v21 + 48) = v22[48];
  *(_QWORD *)(v21 + 56) = *((_QWORD *)v22 + 7);
  *(_BYTE *)(v21 + 64) = v22[64];
  ((void (*)(uint64_t, char *, uint64_t))v60)(v21 + *(int *)(v23 + 40), &v22[*(int *)(v23 + 40)], v62);
LABEL_7:
  v30 = v15[11];
  v31 = &v11[v30];
  v32 = &v12[v30];
  v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v45 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v46 = *(_QWORD *)(v45 - 8);
    v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
    v48 = v47(v31, 1, v45);
    v49 = v47(v32, 1, v45);
    if (v48)
    {
      if (!v49)
      {
        swift_getEnumCaseMultiPayload();
        v50 = v62;
        (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v31, v32, v62);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v31, 0, 1, v45);
LABEL_25:
        ((void (*)(char *, char *, uint64_t))v60)(&v31[*(int *)(v33 + 20)], &v32[*(int *)(v33 + 20)], v50);
        goto LABEL_14;
      }
    }
    else
    {
      if (!v49)
      {
        v50 = v62;
        if (a1 != v64)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v31, v32, v62);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_25;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    v50 = v62;
    goto LABEL_25;
  }
  if (v37)
  {
LABEL_13:
    v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
LABEL_14:
    v44 = v63;
    goto LABEL_21;
  }
  v38 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v32, 1, v38))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    v41 = v62;
    v42 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v41 = v62;
    v42 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
    v42(v31, v32, v62);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v31, 0, 1, v38);
  }
  v44 = v63;
  v42(&v31[*(int *)(v33 + 20)], &v32[*(int *)(v33 + 20)], v41);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_21:
  v51 = *(int *)(v44 + 24);
  v52 = *(_QWORD *)((char *)a1 + v51);
  v53 = *(_QWORD *)((char *)a1 + v51 + 8);
  *(_OWORD *)((char *)a1 + v51) = *(_OWORD *)((char *)v64 + v51);
  outlined consume of Data._Representation(v52, v53);
  v54 = *(int *)(v44 + 28);
  v55 = (char *)a1 + v54;
  v56 = (char *)v64 + v54;
  v57 = type metadata accessor for PEC.SimilarityClient();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 40))(v55, v56, v57);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimilarityClient()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BDC36C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for SecretKey();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for AspireApiPECConfig(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 12)
  {
    v11 = type metadata accessor for PEC.SimilarityClient();
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[6] + 8) >> 60;
  if (((4 * (_DWORD)v13) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v13) & 0xC | (v13 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SimilarityClient()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BDC454(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = type metadata accessor for SecretKey();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for AspireApiPECConfig(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 12)
      {
        v16 = (_QWORD *)(a1 + a4[6]);
        *v16 = 0;
        v16[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
        return result;
      }
      v10 = type metadata accessor for PEC.SimilarityClient();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for SimilarityClient()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for SecretKey();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AspireApiPECConfig(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PEC.SimilarityClient();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void type metadata accessor for CMLUseCaseControlOptions(uint64_t a1)
{
  type metadata accessor for CMLUseCaseControlOptions(a1, (unint64_t *)&lazy cache variable for type metadata for CMLUseCaseControlOptions);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for CMLUseCaseControlOptions(a1, &lazy cache variable for type metadata for os_unfair_lock_s);
}

void type metadata accessor for CMLUseCaseControlOptions(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for Equatable in CMLUseCaseControlOptions()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type CMLUseCaseControlOptions and conformance CMLUseCaseControlOptions, (uint64_t (*)(uint64_t))type metadata accessor for CMLUseCaseControlOptions, (uint64_t)&protocol conformance descriptor for CMLUseCaseControlOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in CMLUseCaseControlOptions()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type CMLUseCaseControlOptions and conformance CMLUseCaseControlOptions, (uint64_t (*)(uint64_t))type metadata accessor for CMLUseCaseControlOptions, (uint64_t)&protocol conformance descriptor for CMLUseCaseControlOptions);
}

uint64_t base witness table accessor for RawRepresentable in CMLUseCaseControlOptions()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type CMLUseCaseControlOptions and conformance CMLUseCaseControlOptions, (uint64_t (*)(uint64_t))type metadata accessor for CMLUseCaseControlOptions, (uint64_t)&protocol conformance descriptor for CMLUseCaseControlOptions);
}

uint64_t base witness table accessor for SetAlgebra in CMLUseCaseControlOptions()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type CMLUseCaseControlOptions and conformance CMLUseCaseControlOptions, (uint64_t (*)(uint64_t))type metadata accessor for CMLUseCaseControlOptions, (uint64_t)&protocol conformance descriptor for CMLUseCaseControlOptions);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t type metadata accessor for CMLSimilarityScore()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CMLSimilarityScore;
  if (!lazy cache variable for type metadata for CMLSimilarityScore)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CMLSimilarityScore);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CMLSimilarityScore] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CMLSimilarityScore] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CMLSimilarityScore] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CMLSimilarityScore]);
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CMLSimilarityScore] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B822CD0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #2 in SimilarityClient.decryptSimilarityScores(shard:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;

  return closure #2 in closure #2 in SimilarityClient.decryptSimilarityScores(shard:)(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t partial apply for closure #1 in PEC.SerializedCiphertextCoeffMatrix.proto()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PEC.SerializedCiphertextCoeffMatrix.proto()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #3 in closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #3 in closure #1 in SimilarityClient.encryptValues(_:shardIndices:)(a1, *(_QWORD **)(v1 + 16));
}

uint64_t outlined destroy of AspireApiEvaluationKeyMetadata?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SecretKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void AMSNetworking.requestHeaders()()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t (*AMDPbFetchHEConfigs.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, AMDPbHEConfig), &demangling cache variable for type metadata for _DictionaryStorage<String, AMDPbHEConfig>, type metadata accessor for AMDPbHEConfig);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, [TokenCache.CachedToken]>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    outlined copy of Data._Representation(v5, v6);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, AspireApiConfig), &demangling cache variable for type metadata for _DictionaryStorage<String, AspireApiConfig>, type metadata accessor for AspireApiConfig);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Date));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (char *)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, Date));
    v14 = *v5;
    v15 = v5[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for Date();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, v9, v21);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HE.SecurityLevel, [HE.RlweParams]));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<HE.SecurityLevel, [HE.RlweParams]>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (HE.SecurityLevel, [HE.RlweParams]));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for HE.SecurityLevel();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, UseCaseGroup), &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, SecretKey));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, SecretKey>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (Data, SecretKey));
    v14 = *v5;
    v15 = v5[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for SecretKey();
    result = outlined init with take of SecretKey(v9, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, Data?>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    outlined copy of Data._Representation(v5, v6);
    outlined copy of Data?(v7, v8);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (uint64_t *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, AspireHeSerializedKeySwitchKey));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AspireHeSerializedKeySwitchKey>);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v9, (uint64_t)v5, &demangling cache variable for type metadata for (UInt64, AspireHeSerializedKeySwitchKey));
      v11 = *v5;
      result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v7[6] + 8 * result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      result = outlined init with take of SecretKey(v8, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, type metadata accessor for AspireHeSerializedKeySwitchKey);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t *v31;

  v31 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (_QWORD *)((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)();
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  v14 = (uint64_t)v10 + *(int *)(v7 + 48);
  v29[1] = a1;
  v30 = v14;
  v15 = v11 + 64;
  v16 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v17 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v16, (uint64_t)v10, v31);
    v18 = *v10;
    v19 = v10[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v10, v19);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = (uint64_t *)(v12[6] + 16 * result);
    *v23 = v18;
    v23[1] = v19;
    v24 = v12[7];
    v25 = a4(0);
    result = outlined init with take of SecretKey(v30, v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v22, a4);
    v26 = v12[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_11;
    v12[2] = v28;
    v16 += v17;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*AMDPbHEConfigsReply.configs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbHEConfigsReply.keyInfo.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEConfigsReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbHEConfigsReply, a1);
}

uint64_t type metadata accessor for AMDPbHEConfigsReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEConfigsReply);
}

uint64_t AMDPbHEConfigsReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbHEConfigsReply);
}

uint64_t (*AMDPbHEConfigsReply.unknownFields.modify())()
{
  type metadata accessor for AMDPbHEConfigsReply(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEConfigsReply.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for (String, AMDPbHEConfig), &demangling cache variable for type metadata for _DictionaryStorage<String, AMDPbHEConfig>, type metadata accessor for AMDPbHEConfig);
  a1[1] = v2;
  type metadata accessor for AMDPbHEConfigsReply(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbHEConfig.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
}

uint64_t AMDPbHEConfig.config.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
}

uint64_t (*AMDPbHEConfig.config.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEConfig.pirConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v7 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
LABEL_5:
    *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0xC000000000000000;
    v8 = type metadata accessor for AMDPbPIRConfig(0);
    UnknownStorage.init()();
    v9 = a1 + *(int *)(v8 + 36);
    v10 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    v11 = a1 + *(int *)(v8 + 40);
    v12 = type metadata accessor for AspirePirKeywordPirParameters(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v6, a1, type metadata accessor for AMDPbPIRConfig);
}

uint64_t AMDPbHEConfig.pirConfig.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?, type metadata accessor for AMDPbPIRConfig, type metadata accessor for AMDPbHEConfig.OneOf_Config);
}

uint64_t AMDPbPIRConfig.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xC000000000000000;
  v2 = type metadata accessor for AMDPbPIRConfig(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 36);
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 40);
  v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t type metadata accessor for AMDPbHEConfig.OneOf_Config(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEConfig.OneOf_Config);
}

uint64_t type metadata accessor for AMDPbPIRConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPIRConfig);
}

void (*AMDPbHEConfig.pirConfig.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AMDPbPIRConfig(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v10 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v9, type metadata accessor for AMDPbPIRConfig);
      return AMDPbHEConfig.pirConfig.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  }
  *v9 = MEMORY[0x24BEE4AF8];
  v9[1] = 0;
  *((_BYTE *)v9 + 16) = 1;
  v9[3] = 0;
  v9[4] = 0;
  v9[5] = 0xC000000000000000;
  UnknownStorage.init()();
  v12 = (char *)v9 + *(int *)(v7 + 36);
  v13 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (char *)v9 + *(int *)(v7 + 40);
  v15 = type metadata accessor for AspirePirKeywordPirParameters(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return AMDPbHEConfig.pirConfig.modify;
}

void AMDPbHEConfig.pirConfig.modify(uint64_t **a1, char a2)
{
  AMDPbHEConfig.pirConfig.modify(a1, a2, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?, type metadata accessor for AMDPbPIRConfig);
}

uint64_t AMDPbHEConfig.pecConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v7 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, a1, type metadata accessor for AMDPbPECConfig);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_237D54090;
  v9 = type metadata accessor for AMDPbPECConfig(0);
  UnknownStorage.init()();
  v10 = a1 + *(int *)(v9 + 36);
  v11 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1 + *(int *)(v9 + 40);
  v13 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
}

uint64_t AMDPbHEConfig.pecConfig.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?, type metadata accessor for AMDPbPECConfig, type metadata accessor for AMDPbHEConfig.OneOf_Config);
}

uint64_t AMDPbPECConfig.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_237D54090;
  v2 = type metadata accessor for AMDPbPECConfig(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 36);
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 40);
  v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t type metadata accessor for AMDPbPECConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPECConfig);
}

void (*AMDPbHEConfig.pecConfig.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AMDPbPECConfig(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v10 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
LABEL_6:
    *(_QWORD *)v9 = 0;
    v9[2] = 0;
    *((_QWORD *)v9 + 2) = 0;
    *((_BYTE *)v9 + 24) = 1;
    *((_OWORD *)v9 + 2) = xmmword_237D54090;
    UnknownStorage.init()();
    v12 = (char *)v9 + *(int *)(v7 + 36);
    v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = (char *)v9 + *(int *)(v7 + 40);
    v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    return AMDPbHEConfig.pecConfig.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v9, type metadata accessor for AMDPbPECConfig);
  return AMDPbHEConfig.pecConfig.modify;
}

void AMDPbHEConfig.pecConfig.modify(uint64_t **a1, char a2)
{
  AMDPbHEConfig.pirConfig.modify(a1, a2, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?, type metadata accessor for AMDPbPECConfig);
}

uint64_t AMDPbHEConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbHEConfig, a1);
}

uint64_t type metadata accessor for AMDPbHEConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEConfig);
}

uint64_t AMDPbHEConfig.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbHEConfig);
}

uint64_t (*AMDPbHEConfig.unknownFields.modify())()
{
  type metadata accessor for AMDPbHEConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEConfig.init()@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.init()(type metadata accessor for AMDPbHEConfig.OneOf_Config, (void (*)(_QWORD))type metadata accessor for AMDPbHEConfig, a1);
}

uint64_t AMDPbHEKeyStatus.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AMDPbHEKeyStatus.timestamp.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AMDPbHEKeyStatus.timestamp.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEKeyStatus.keyConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbHEKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeEvaluationKeyConfig);
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 28);
  v9 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t key path getter for AMDPbHEKeyStatus.keyConfig : AMDPbHEKeyStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AMDPbHEKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireHeEvaluationKeyConfig);
  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a2 + 8) = 0;
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 28);
  v10 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t AMDPbHEKeyStatus.keyConfig.setter(uint64_t a1)
{
  return AMDPbHEKeyStatus.keyConfig.setter(a1, type metadata accessor for AMDPbHEKeyStatus, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig);
}

void (*AMDPbHEKeyStatus.keyConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbHEKeyStatus(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = MEMORY[0x24BEE4AF8];
    v9[8] = 0;
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 28)];
    v12 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  return AMDPbHEKeyStatus.keyConfig.modify;
}

void AMDPbHEKeyStatus.keyConfig.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig);
}

BOOL AMDPbHEKeyStatus.hasKeyConfig.getter()
{
  return AMDPbHEKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AMDPbHEKeyStatus, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Void __swiftcall AMDPbHEKeyStatus.clearKeyConfig()()
{
  AMDPbHEKeyStatus.clearKeyConfig()(type metadata accessor for AMDPbHEKeyStatus, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?, type metadata accessor for AspireHeEvaluationKeyConfig);
}

uint64_t AMDPbHEKeyStatus.group.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AMDPbHEKeyStatus.group.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AMDPbHEKeyStatus.group.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEKeyStatus.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbHEKeyStatus, a1);
}

uint64_t AMDPbHEConfigsReply.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AMDPbHEKeyStatus.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbHEKeyStatus);
}

uint64_t AMDPbHEConfigsReply.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AMDPbHEKeyStatus.unknownFields.modify())()
{
  type metadata accessor for AMDPbHEKeyStatus(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEKeyStatus.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xE000000000000000;
  v2 = type metadata accessor for AMDPbHEKeyStatus(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t AMDPbPIRConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.encryptionParameters.getter(type metadata accessor for AMDPbPIRConfig, a1);
}

uint64_t AMDPbPIRConfig.encryptionParameters.setter(uint64_t a1)
{
  return AMDPbPIRConfig.encryptionParameters.setter(a1, type metadata accessor for AMDPbPIRConfig);
}

void (*AMDPbPIRConfig.encryptionParameters.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbPIRConfig(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x24BEE4AF8];
    v9[3] = 0;
    *((_BYTE *)v9 + 32) = 1;
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v9[7] = 0;
    *((_BYTE *)v9 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AMDPbPIRConfig.encryptionParameters.modify;
}

void AMDPbPIRConfig.encryptionParameters.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireHeEncryptionParameters?, type metadata accessor for AspireHeEncryptionParameters);
}

BOOL AMDPbPIRConfig.hasEncryptionParameters.getter()
{
  return AMDPbPIRConfig.hasEncryptionParameters.getter(type metadata accessor for AMDPbPIRConfig);
}

Swift::Void __swiftcall AMDPbPIRConfig.clearEncryptionParameters()()
{
  AMDPbPIRConfig.clearEncryptionParameters()(type metadata accessor for AMDPbPIRConfig);
}

uint64_t (*AMDPbPIRConfig.shardConfigs.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRConfig.keywordPirParams.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspirePirKeywordPirParameters);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t key path getter for AMDPbPIRConfig.keywordPirParams : AMDPbPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AMDPbPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspirePirKeywordPirParameters);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t AMDPbPIRConfig.keywordPirParams.setter(uint64_t a1)
{
  return AMDPbPIRConfig.keywordPirParams.setter(a1, type metadata accessor for AMDPbPIRConfig, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters);
}

void (*AMDPbPIRConfig.keywordPirParams.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbPIRConfig(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = 0;
    v9[8] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirKeywordPirParameters);
  }
  return AMDPbPIRConfig.keywordPirParams.modify;
}

void AMDPbPIRConfig.keywordPirParams.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters);
}

BOOL AMDPbPIRConfig.hasKeywordPirParams.getter()
{
  return AMDPbPIRConfig.hasKeywordPirParams.getter(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AMDPbPIRConfig, type metadata accessor for AspirePirKeywordPirParameters);
}

Swift::Void __swiftcall AMDPbPIRConfig.clearKeywordPirParams()()
{
  AMDPbPIRConfig.clearKeywordPirParams()(type metadata accessor for AMDPbPIRConfig, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?, type metadata accessor for AspirePirKeywordPirParameters);
}

void AMDPbPIRConfig.algorithm.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AMDPbPIRConfig.algorithm.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t (*AMDPbPIRConfig.algorithm.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRConfig.batchSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AMDPbPIRConfig.batchSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*AMDPbPIRConfig.batchSize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbPIRConfig.evaluationKeyConfigHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.unknownFields.getter(type metadata accessor for AMDPbPIRConfig, a1);
}

uint64_t AMDPbPIRConfig.unknownFields.setter(uint64_t a1)
{
  return AMDPbPIRConfig.unknownFields.setter(a1, type metadata accessor for AMDPbPIRConfig);
}

uint64_t (*AMDPbPIRConfig.unknownFields.modify())()
{
  type metadata accessor for AMDPbPIRConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.numEntries.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AMDPbPIRShardConfig.numEntries.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AMDPbPIRShardConfig.numEntries.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.entrySize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AMDPbPIRShardConfig.entrySize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AMDPbPIRShardConfig.entrySize.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.dimensions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbPIRShardConfig.dimensions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AMDPbPIRShardConfig.dimensions.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AMDPbPIRShardConfig(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AMDPbPIRShardConfig.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AMDPbPIRShardConfig(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AMDPbPIRShardConfig.unknownFields.modify())()
{
  type metadata accessor for AMDPbPIRShardConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRShardConfig.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x24BEE4AF8];
  type metadata accessor for AMDPbPIRShardConfig(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbPECConfig.encryptionParameters.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.encryptionParameters.getter(type metadata accessor for AMDPbPECConfig, a1);
}

uint64_t AMDPbPIRConfig.encryptionParameters.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v8 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v9 = type metadata accessor for AspireHeEncryptionParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return outlined init with take of SecretKey((uint64_t)v7, a2, type metadata accessor for AspireHeEncryptionParameters);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 1;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
}

uint64_t key path setter for AMDPbPIRConfig.encryptionParameters : AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for AspireHeEncryptionParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v11, type metadata accessor for AspireHeEncryptionParameters);
  v12 = a2 + *(int *)(a5(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey((uint64_t)v11, v12, type metadata accessor for AspireHeEncryptionParameters);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

uint64_t AMDPbPECConfig.encryptionParameters.setter(uint64_t a1)
{
  return AMDPbPIRConfig.encryptionParameters.setter(a1, type metadata accessor for AMDPbPECConfig);
}

uint64_t AMDPbPIRConfig.encryptionParameters.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey(a1, v4, type metadata accessor for AspireHeEncryptionParameters);
  v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
}

void (*AMDPbPECConfig.encryptionParameters.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbPECConfig(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = MEMORY[0x24BEE4AF8];
    v9[3] = 0;
    *((_BYTE *)v9 + 32) = 1;
    v9[5] = 0;
    *((_BYTE *)v9 + 48) = 1;
    v9[7] = 0;
    *((_BYTE *)v9 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeEncryptionParameters);
  }
  return AMDPbPIRConfig.encryptionParameters.modify;
}

BOOL AMDPbPECConfig.hasEncryptionParameters.getter()
{
  return AMDPbPIRConfig.hasEncryptionParameters.getter(type metadata accessor for AMDPbPECConfig);
}

BOOL AMDPbPIRConfig.hasEncryptionParameters.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  return v8;
}

Swift::Void __swiftcall AMDPbPECConfig.clearEncryptionParameters()()
{
  AMDPbPIRConfig.clearEncryptionParameters()(type metadata accessor for AMDPbPECConfig);
}

uint64_t AMDPbPIRConfig.clearEncryptionParameters()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1(0) + 36);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v3 = type metadata accessor for AspireHeEncryptionParameters(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

uint64_t AMDPbPECConfig.scalingFactor.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AMDPbPECConfig.scalingFactor.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AMDPbPECConfig.scalingFactor.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECConfig.plaintextPacking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 40), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireSimilarityPlaintextPacking);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path getter for AMDPbPECConfig.plaintextPacking : AMDPbPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AMDPbPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 40), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireSimilarityPlaintextPacking);
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t key path setter for AMDPbPIRConfig.keywordPirParams : AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of SecretKey(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, a7);
  outlined init with take of SecretKey((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t AMDPbPECConfig.plaintextPacking.setter(uint64_t a1)
{
  return AMDPbPIRConfig.keywordPirParams.setter(a1, type metadata accessor for AMDPbPECConfig, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t AMDPbPIRConfig.keywordPirParams.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, a3);
  outlined init with take of SecretKey(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AMDPbPECConfig.plaintextPacking.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbPECConfig(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilarityPlaintextPacking);
  }
  return AMDPbPECConfig.plaintextPacking.modify;
}

void AMDPbPECConfig.plaintextPacking.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilarityPlaintextPacking);
}

BOOL AMDPbPECConfig.hasPlaintextPacking.getter()
{
  return AMDPbPIRConfig.hasKeywordPirParams.getter((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AMDPbPECConfig, type metadata accessor for AspireSimilarityPlaintextPacking);
}

BOOL AMDPbPIRConfig.hasKeywordPirParams.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v10 + 40), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AMDPbPECConfig.clearPlaintextPacking()()
{
  AMDPbPIRConfig.clearKeywordPirParams()(type metadata accessor for AMDPbPECConfig, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?, type metadata accessor for AspireSimilarityPlaintextPacking);
}

uint64_t AMDPbPIRConfig.clearKeywordPirParams()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 40);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t AMDPbPECConfig.embeddingDimension.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t AMDPbPECConfig.embeddingDimension.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AMDPbPECConfig.embeddingDimension.modify())()
{
  return Repeated.subscript.readspecialized ;
}

void AMDPbPECConfig.similarityMetric.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AMDPbPECConfig.similarityMetric.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 24) = v2;
  return result;
}

uint64_t (*AMDPbPECConfig.similarityMetric.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECConfig.evaluationKeyConfigHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t AMDPbPECConfig.evaluationKeyConfigHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AMDPbPECConfig.evaluationKeyConfigHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.unknownFields.getter(type metadata accessor for AMDPbPECConfig, a1);
}

uint64_t AMDPbPIRConfig.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AMDPbPECConfig.unknownFields.setter(uint64_t a1)
{
  return AMDPbPIRConfig.unknownFields.setter(a1, type metadata accessor for AMDPbPECConfig);
}

uint64_t AMDPbPIRConfig.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AMDPbPECConfig.unknownFields.modify())()
{
  type metadata accessor for AMDPbPECConfig(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbHEQueries.queries.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQueries.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbHEQueries, a1);
}

uint64_t AMDPbHEConfig.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AMDPbHEQueries.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbHEQueries);
}

uint64_t AMDPbHEConfig.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AMDPbHEQueries.unknownFields.modify())()
{
  type metadata accessor for AMDPbHEQueries(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQueries.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AMDPbHEQueries, a1);
}

uint64_t (*AMDPbHEReplies.replies.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEReplies.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbHEReplies, a1);
}

uint64_t AMDPbHEReplies.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbHEReplies);
}

uint64_t (*AMDPbHEReplies.unknownFields.modify())()
{
  type metadata accessor for AMDPbHEReplies(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEReplies.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AMDPbHEReplies, a1);
}

uint64_t AMDPbHEQueries.init()@<X0>(void (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = MEMORY[0x24BEE4AF8];
  a1(0);
  return UnknownStorage.init()();
}

uint64_t AMDPbHEQuery.useCase.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AMDPbHEQuery.useCase.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AMDPbHEQuery.useCase.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQuery.query.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AMDPbHEQuery(0);
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
}

uint64_t AMDPbHEQuery.query.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AMDPbHEQuery(0);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
}

uint64_t (*AMDPbHEQuery.query.modify())()
{
  type metadata accessor for AMDPbHEQuery(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQuery.pirQuery.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbHEQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v7 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
LABEL_5:
    *(_DWORD *)a1 = 0;
    *(_OWORD *)(a1 + 8) = xmmword_237D54090;
    v8 = type metadata accessor for AMDPbPIRQuery(0);
    UnknownStorage.init()();
    v9 = a1 + *(int *)(v8 + 28);
    v10 = type metadata accessor for AspirePirEncryptedIndices(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    v11 = a1 + *(int *)(v8 + 32);
    v12 = type metadata accessor for AMDPbEvaluationKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AMDPbPIRQuery);
}

uint64_t AMDPbHEQuery.pirQuery.setter(uint64_t a1)
{
  return AMDPbHEQuery.pirQuery.setter(a1, type metadata accessor for AMDPbPIRQuery);
}

uint64_t AMDPbPIRQuery.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_237D54090;
  v2 = type metadata accessor for AMDPbPIRQuery(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 32);
  v6 = type metadata accessor for AMDPbEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

void (*AMDPbHEQuery.pirQuery.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AMDPbPIRQuery(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[2] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[3] = v8;
  v9 = *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v9, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v3[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v8, type metadata accessor for AMDPbPIRQuery);
      return AMDPbHEQuery.pirQuery.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  }
  *(_DWORD *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_237D54090;
  UnknownStorage.init()();
  v12 = &v8[*(int *)(v6 + 28)];
  v13 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = &v8[*(int *)(v6 + 32)];
  v15 = type metadata accessor for AMDPbEvaluationKey(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return AMDPbHEQuery.pirQuery.modify;
}

void AMDPbHEQuery.pirQuery.modify(uint64_t a1, char a2)
{
  AMDPbHEQuery.pirQuery.modify(a1, a2, type metadata accessor for AMDPbPIRQuery);
}

uint64_t AMDPbHEQuery.pecQuery.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbHEQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v7 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AMDPbPECQuery);
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  }
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a1 + 8) = xmmword_237D54090;
  v9 = type metadata accessor for AMDPbPECQuery(0);
  UnknownStorage.init()();
  v10 = a1 + *(int *)(v9 + 28);
  v11 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1 + *(int *)(v9 + 32);
  v13 = type metadata accessor for AMDPbEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
}

uint64_t key path setter for AMDPbHEQuery.pirQuery : AMDPbHEQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  outlined init with copy of SecretKey(a1, (uint64_t)&v14 - v9, a5);
  v11 = a2 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v11, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  outlined init with take of SecretKey((uint64_t)v10, v11, a5);
  v12 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
}

uint64_t AMDPbHEQuery.pecQuery.setter(uint64_t a1)
{
  return AMDPbHEQuery.pirQuery.setter(a1, type metadata accessor for AMDPbPECQuery);
}

uint64_t AMDPbHEQuery.pirQuery.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  outlined init with take of SecretKey(a1, v5, a2);
  v6 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 0, 1, v6);
}

uint64_t AMDPbPECQuery.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a1 + 8) = xmmword_237D54090;
  v2 = type metadata accessor for AMDPbPECQuery(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 32);
  v6 = type metadata accessor for AMDPbEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

void (*AMDPbHEQuery.pecQuery.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AMDPbPECQuery(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[2] = malloc(v7);
  v8 = (char *)malloc(v7);
  v3[3] = v8;
  v9 = *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v9, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v3[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
LABEL_6:
    *(_QWORD *)v8 = MEMORY[0x24BEE4AF8];
    *(_OWORD *)(v8 + 8) = xmmword_237D54090;
    UnknownStorage.init()();
    v12 = &v8[*(int *)(v6 + 28)];
    v13 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = &v8[*(int *)(v6 + 32)];
    v15 = type metadata accessor for AMDPbEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    return AMDPbHEQuery.pecQuery.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v8, type metadata accessor for AMDPbPECQuery);
  return AMDPbHEQuery.pecQuery.modify;
}

void AMDPbHEQuery.pecQuery.modify(uint64_t a1, char a2)
{
  AMDPbHEQuery.pirQuery.modify(a1, a2, type metadata accessor for AMDPbPECQuery);
}

void AMDPbHEQuery.pirQuery.modify(uint64_t a1, char a2, uint64_t (*a3)(_QWORD))
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v4 = *(void **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7 = *(int *)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 16);
  v9 = *(void **)(*(_QWORD *)a1 + 24);
  v10 = *(void **)(*(_QWORD *)a1 + 8);
  v11 = **(_QWORD **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey(*(_QWORD *)(*(_QWORD *)a1 + 24), (uint64_t)v8, a3);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v11, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with take of SecretKey((uint64_t)v8, v11, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    outlined destroy of AspireApiPECConfig((uint64_t)v9, a3);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(_QWORD **)a1 + v7, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with take of SecretKey((uint64_t)v9, v11, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
  }
  free(v9);
  free(v8);
  free(v10);
  free(v4);
}

uint64_t AMDPbHEQuery.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbHEQuery, a1);
}

uint64_t AMDPbHEQuery.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbHEQuery);
}

uint64_t (*AMDPbHEQuery.unknownFields.modify())()
{
  type metadata accessor for AMDPbHEQuery(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEQuery.init()@<X0>(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v1 = (char *)a1 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  v2 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return UnknownStorage.init()();
}

uint64_t AMDPbHEReply.reply.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, a1, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
}

uint64_t AMDPbHEReply.reply.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AMDPbHEConfig.OneOf_Config?(a1, v1, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
}

uint64_t (*AMDPbHEReply.reply.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbHEReply.pirReply.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
LABEL_5:
    *a1 = MEMORY[0x24BEE4AF8];
    type metadata accessor for AMDPbPIRReply(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a1, type metadata accessor for AMDPbPIRReply);
}

uint64_t key path getter for AMDPbHEReply.pirReply : AMDPbHEReply@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
LABEL_5:
    *a2 = MEMORY[0x24BEE4AF8];
    type metadata accessor for AMDPbPIRReply(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_5;
  }
  return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AMDPbPIRReply);
}

uint64_t AMDPbHEReply.pirReply.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?, type metadata accessor for AMDPbPIRReply, type metadata accessor for AMDPbHEReply.OneOf_Reply);
}

uint64_t AMDPbPIRReply.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AMDPbPIRReply, a1);
}

void (*AMDPbHEReply.pirReply.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AMDPbPIRReply(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AMDPbPIRReply);
      return AMDPbHEReply.pirReply.modify;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  }
  *v7 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  return AMDPbHEReply.pirReply.modify;
}

void AMDPbHEReply.pirReply.modify(uint64_t **a1, char a2)
{
  AMDPbHEConfig.pirConfig.modify(a1, a2, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?, type metadata accessor for AMDPbPIRReply);
}

uint64_t AMDPbHEReply.pecReply.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a1, type metadata accessor for AMDPbPECReply);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  }
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for AMDPbPECReply(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AMDPbHEReply.pecReply : AMDPbHEReply@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AMDPbPECReply);
    outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  }
  *a2 = MEMORY[0x24BEE4AF8];
  type metadata accessor for AMDPbPECReply(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t *a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v12 = a5(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v17 - v13;
  outlined init with copy of SecretKey(a1, (uint64_t)&v17 - v13, a5);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a2, a6);
  outlined init with take of SecretKey((uint64_t)v14, a2, a5);
  v15 = a7(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 0, 1, v15);
}

uint64_t AMDPbHEReply.pecReply.setter(uint64_t a1)
{
  return AMDPbHEConfig.pirConfig.setter(a1, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?, type metadata accessor for AMDPbPECReply, type metadata accessor for AMDPbHEReply.OneOf_Reply);
}

uint64_t AMDPbHEConfig.pirConfig.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, a2);
  outlined init with take of SecretKey(a1, v4, a3);
  v8 = a4(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 0, 1, v8);
}

uint64_t AMDPbPECReply.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AMDPbPECReply, a1);
}

void (*AMDPbHEReply.pecReply.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AMDPbPECReply(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
LABEL_6:
    *v7 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    return AMDPbHEReply.pecReply.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v5, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_6;
  }
  outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v7, type metadata accessor for AMDPbPECReply);
  return AMDPbHEReply.pecReply.modify;
}

void AMDPbHEReply.pecReply.modify(uint64_t **a1, char a2)
{
  AMDPbHEConfig.pirConfig.modify(a1, a2, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?, type metadata accessor for AMDPbPECReply);
}

void AMDPbHEConfig.pirConfig.modify(uint64_t **a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v6 = *a1;
  v7 = (*a1)[4];
  v8 = (*a1)[5];
  v9 = (void *)(*a1)[2];
  v10 = (void *)(*a1)[3];
  v12 = **a1;
  v11 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey((*a1)[3], (uint64_t)v9, a4);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, a3);
    outlined init with take of SecretKey((uint64_t)v9, v12, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
    outlined destroy of AspireApiPECConfig((uint64_t)v10, a4);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**a1, a3);
    outlined init with take of SecretKey((uint64_t)v10, v12, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
  }
  free(v10);
  free(v9);
  free(v11);
  free(v6);
}

uint64_t AMDPbHEReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbHEReply, a1);
}

uint64_t AMDPbHEReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbHEReply);
}

uint64_t (*AMDPbHEReply.unknownFields.modify())()
{
  type metadata accessor for AMDPbHEReply(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t static AMDPbPIRReply.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbPIRReply) & 1;
}

uint64_t static AMDPbPECReply.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbPECReply) & 1;
}

uint64_t AMDPbHEReply.init()@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.init()(type metadata accessor for AMDPbHEReply.OneOf_Reply, (void (*)(_QWORD))type metadata accessor for AMDPbHEReply, a1);
}

uint64_t AMDPbHEConfig.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a3, 1, 1, v5);
  a2(0);
  return UnknownStorage.init()();
}

uint64_t (*AMDPbEvaluationKeys.keys.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbEvaluationKeys.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbEvaluationKeys, a1);
}

uint64_t AMDPbEvaluationKeys.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbEvaluationKeys);
}

uint64_t (*AMDPbEvaluationKeys.unknownFields.modify())()
{
  type metadata accessor for AMDPbEvaluationKeys(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbEvaluationKeys.init()@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbHEQueries.init()((void (*)(_QWORD))type metadata accessor for AMDPbEvaluationKeys, a1);
}

uint64_t AMDPbEvaluationKey.metadata.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  v7 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AMDPbEvaluationKeyMetadata);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
}

uint64_t key path getter for AMDPbEvaluationKey.metadata : AMDPbEvaluationKey@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  v8 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AMDPbEvaluationKeyMetadata);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
}

uint64_t key path setter for AMDPbEvaluationKey.metadata : AMDPbEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AMDPbEvaluationKeyMetadata);
  v8 = a2 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AMDPbEvaluationKeyMetadata);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbEvaluationKey.metadata.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AMDPbEvaluationKeyMetadata);
  v4 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t AMDPbEvaluationKeyMetadata.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  return UnknownStorage.init()();
}

void (*AMDPbEvaluationKey.metadata.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AMDPbEvaluationKeyMetadata);
  }
  return AMDPbEvaluationKey.metadata.modify;
}

void AMDPbEvaluationKey.metadata.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?, type metadata accessor for AMDPbEvaluationKeyMetadata);
}

BOOL AMDPbEvaluationKey.hasMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 20), (uint64_t)v3, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  v5 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  return v6;
}

Swift::Void __swiftcall AMDPbEvaluationKey.clearMetadata()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  v2 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t AMDPbEvaluationKey.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, a1, type metadata accessor for AspireHeSerializedEvaluationKey);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + *(int *)(v7 + 24);
  v11 = type metadata accessor for AspireHeSerializedRelinKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
}

uint64_t key path getter for AMDPbEvaluationKey.evaluationKey : AMDPbEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, a2, type metadata accessor for AspireHeSerializedEvaluationKey);
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 20);
  v10 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a2 + *(int *)(v8 + 24);
  v12 = type metadata accessor for AspireHeSerializedRelinKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
}

uint64_t key path setter for AMDPbEvaluationKey.evaluationKey : AMDPbEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v7, type metadata accessor for AspireHeSerializedEvaluationKey);
  v8 = a2 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AspireHeSerializedEvaluationKey);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbEvaluationKey.evaluationKey.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v3, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with take of SecretKey(a1, v3, type metadata accessor for AspireHeSerializedEvaluationKey);
  v4 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*AMDPbEvaluationKey.evaluationKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    v14 = type metadata accessor for AspireHeSerializedRelinKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireHeSerializedEvaluationKey);
  }
  return AMDPbEvaluationKey.evaluationKey.modify;
}

void AMDPbEvaluationKey.evaluationKey.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?, type metadata accessor for AspireHeSerializedEvaluationKey);
}

BOOL AMDPbEvaluationKey.hasEvaluationKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v5 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  return v6;
}

Swift::Void __swiftcall AMDPbEvaluationKey.clearEvaluationKey()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v2 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t AMDPbFetchHEConfigs.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AMDPbFetchHEConfigs.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*AMDPbEvaluationKey.unknownFields.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbEvaluationKey.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = type metadata accessor for AMDPbEvaluationKey(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 24);
  v6 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t AMDPbEvaluationKeyMetadata.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AMDPbEvaluationKeyMetadata.timestamp.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AMDPbEvaluationKeyMetadata.timestamp.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbEvaluationKeyMetadata.identifier.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbEvaluationKeyMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbEvaluationKeyMetadata, a1);
}

uint64_t AMDPbEvaluationKeyMetadata.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbEvaluationKeyMetadata);
}

uint64_t (*AMDPbEvaluationKeyMetadata.unknownFields.modify())()
{
  type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRQuery.shardIndex.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t AMDPbPIRQuery.shardIndex.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AMDPbPIRQuery.shardIndex.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRQuery.query.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AMDPbPIRQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v7 = type metadata accessor for AspirePirEncryptedIndices(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of SecretKey((uint64_t)v5, (uint64_t)a1, type metadata accessor for AspirePirEncryptedIndices);
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
}

uint64_t key path getter for AMDPbPIRQuery.query : AMDPbPIRQuery@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AMDPbPIRQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v8 = type metadata accessor for AspirePirEncryptedIndices(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of SecretKey((uint64_t)v6, (uint64_t)a2, type metadata accessor for AspirePirEncryptedIndices);
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
}

uint64_t AMDPbPIRQuery.query.setter(uint64_t a1)
{
  return AMDPbHEKeyStatus.keyConfig.setter(a1, type metadata accessor for AMDPbPIRQuery, &demangling cache variable for type metadata for AspirePirEncryptedIndices?, type metadata accessor for AspirePirEncryptedIndices);
}

void (*AMDPbPIRQuery.query.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspirePirEncryptedIndices(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbPIRQuery(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspirePirEncryptedIndices);
  }
  return AMDPbPIRQuery.query.modify;
}

void AMDPbPIRQuery.query.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspirePirEncryptedIndices?, type metadata accessor for AspirePirEncryptedIndices);
}

BOOL AMDPbPIRQuery.hasQuery.getter()
{
  return AMDPbHEKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspirePirEncryptedIndices?, type metadata accessor for AMDPbPIRQuery, type metadata accessor for AspirePirEncryptedIndices);
}

BOOL AMDPbHEKeyStatus.hasKeyConfig.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AMDPbPIRQuery.clearQuery()()
{
  AMDPbHEKeyStatus.clearKeyConfig()(type metadata accessor for AMDPbPIRQuery, &demangling cache variable for type metadata for AspirePirEncryptedIndices?, type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t AMDPbHEKeyStatus.clearKeyConfig()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t AMDPbPIRQuery.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRQuery.evaluationKey.getter(type metadata accessor for AMDPbPIRQuery, a1);
}

uint64_t AMDPbPIRQuery.evaluationKey.setter(uint64_t a1)
{
  return AMDPbPIRQuery.evaluationKey.setter(a1, type metadata accessor for AMDPbPIRQuery);
}

void (*AMDPbPIRQuery.evaluationKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AMDPbEvaluationKey(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbPIRQuery(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AMDPbEvaluationKey);
  }
  return AMDPbPIRQuery.evaluationKey.modify;
}

void AMDPbPIRQuery.evaluationKey.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AMDPbEvaluationKey?, type metadata accessor for AMDPbEvaluationKey);
}

BOOL AMDPbPIRQuery.hasEvaluationKey.getter()
{
  return AMDPbPIRQuery.hasEvaluationKey.getter(type metadata accessor for AMDPbPIRQuery);
}

Swift::Void __swiftcall AMDPbPIRQuery.clearEvaluationKey()()
{
  AMDPbPIRQuery.clearEvaluationKey()(type metadata accessor for AMDPbPIRQuery);
}

uint64_t (*AMDPbPIRQuery.configurationHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRQuery.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbPIRQuery, a1);
}

uint64_t AMDPbPIRQuery.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbPIRQuery);
}

uint64_t (*AMDPbPIRQuery.unknownFields.modify())()
{
  type metadata accessor for AMDPbPIRQuery(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t (*AMDPbPIRReply.replies.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPIRReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbPIRReply, a1);
}

uint64_t AMDPbPIRReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbPIRReply);
}

uint64_t (*AMDPbPIRReply.unknownFields.modify())()
{
  type metadata accessor for AMDPbPIRReply(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECQuery.shardIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbPECQuery.shardIndices.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AMDPbPECQuery.shardIndices.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECQuery.query.getter@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbPECQuery.query.getter(type metadata accessor for AMDPbPECQuery, a1);
}

uint64_t AMDPbPECQuery.query.setter(uint64_t a1)
{
  return AMDPbHEKeyStatus.keyConfig.setter(a1, type metadata accessor for AMDPbPECQuery, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

void (*AMDPbPECQuery.query.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbPECQuery(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 32);
    v12 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  }
  return AMDPbPECQuery.query.modify;
}

void AMDPbPECQuery.query.modify(uint64_t a1, char a2)
{
  AMDPbHEKeyStatus.keyConfig.modify(a1, a2, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

BOOL AMDPbPECQuery.hasQuery.getter()
{
  return AMDPbHEKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AMDPbPECQuery, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

Swift::Void __swiftcall AMDPbPECQuery.clearQuery()()
{
  AMDPbHEKeyStatus.clearKeyConfig()(type metadata accessor for AMDPbPECQuery, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t AMDPbPECQuery.evaluationKey.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRQuery.evaluationKey.getter(type metadata accessor for AMDPbPECQuery, a1);
}

uint64_t AMDPbPIRQuery.evaluationKey.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v8 + 32), (uint64_t)v7, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v9 = type metadata accessor for AMDPbEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return outlined init with take of SecretKey((uint64_t)v7, a2, type metadata accessor for AMDPbEvaluationKey);
  UnknownStorage.init()();
  v10 = a2 + *(int *)(v9 + 20);
  v11 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a2 + *(int *)(v9 + 24);
  v13 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
}

uint64_t key path getter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v9 + 32), (uint64_t)v8, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v10 = type metadata accessor for AMDPbEvaluationKey(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
    return outlined init with take of SecretKey((uint64_t)v8, a3, type metadata accessor for AMDPbEvaluationKey);
  UnknownStorage.init()();
  v11 = a3 + *(int *)(v10 + 20);
  v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a3 + *(int *)(v10 + 24);
  v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
}

uint64_t key path setter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for AMDPbEvaluationKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v11, type metadata accessor for AMDPbEvaluationKey);
  v12 = a2 + *(int *)(a5(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v12, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with take of SecretKey((uint64_t)v11, v12, type metadata accessor for AMDPbEvaluationKey);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
}

uint64_t AMDPbPECQuery.evaluationKey.setter(uint64_t a1)
{
  return AMDPbPIRQuery.evaluationKey.setter(a1, type metadata accessor for AMDPbPECQuery);
}

uint64_t AMDPbPIRQuery.evaluationKey.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with take of SecretKey(a1, v4, type metadata accessor for AMDPbEvaluationKey);
  v5 = type metadata accessor for AMDPbEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
}

void (*AMDPbPECQuery.evaluationKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AMDPbEvaluationKey(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbPECQuery(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AMDPbEvaluationKey);
  }
  return AMDPbPIRQuery.evaluationKey.modify;
}

BOOL AMDPbPECQuery.hasEvaluationKey.getter()
{
  return AMDPbPIRQuery.hasEvaluationKey.getter(type metadata accessor for AMDPbPECQuery);
}

BOOL AMDPbPIRQuery.hasEvaluationKey.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v7 = type metadata accessor for AMDPbEvaluationKey(0);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  return v8;
}

Swift::Void __swiftcall AMDPbPECQuery.clearEvaluationKey()()
{
  AMDPbPIRQuery.clearEvaluationKey()(type metadata accessor for AMDPbPECQuery);
}

uint64_t AMDPbPIRQuery.clearEvaluationKey()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1(0) + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v3 = type metadata accessor for AMDPbEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

uint64_t AMDPbPECQuery.configurationHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t AMDPbPECQuery.configurationHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AMDPbPECQuery.configurationHash.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECQuery.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbPECQuery, a1);
}

uint64_t AMDPbPECQuery.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbPECQuery);
}

uint64_t (*AMDPbPECQuery.unknownFields.modify())()
{
  type metadata accessor for AMDPbPECQuery(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECShardReply.reply.getter@<X0>(_QWORD *a1@<X8>)
{
  return AMDPbPECQuery.query.getter(type metadata accessor for AMDPbPECShardReply, a1);
}

uint64_t AMDPbPECQuery.query.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v2 + *(int *)(v8 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v9 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return outlined init with take of SecretKey((uint64_t)v7, (uint64_t)a2, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  *a2 = 0;
  a2[1] = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v10 = (char *)a2 + *(int *)(v9 + 32);
  v11 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
}

uint64_t key path getter for AMDPbPECQuery.query : AMDPbPECQuery@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v9 + 28), (uint64_t)v8, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v10 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
    return outlined init with take of SecretKey((uint64_t)v8, (uint64_t)a3, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  *a3 = 0;
  a3[1] = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v11 = (char *)a3 + *(int *)(v10 + 32);
  v12 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
}

uint64_t key path setter for AMDPbHEKeyStatus.keyConfig : AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of SecretKey(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v16, a7);
  outlined init with take of SecretKey((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t AMDPbPECShardReply.reply.setter(uint64_t a1)
{
  return AMDPbHEKeyStatus.keyConfig.setter(a1, type metadata accessor for AMDPbPECShardReply, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t AMDPbHEKeyStatus.keyConfig.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, a3);
  outlined init with take of SecretKey(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AMDPbPECShardReply.reply.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AMDPbPECShardReply(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 32);
    v12 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v9, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  }
  return AMDPbPECQuery.query.modify;
}

void AMDPbHEKeyStatus.keyConfig.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v6 = *(void **)a1;
  v7 = *(int *)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v12 = *(void **)(*(_QWORD *)a1 + 8);
  v13 = **(_QWORD **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of SecretKey(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v8, a4);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, a3);
    outlined init with take of SecretKey((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    outlined destroy of AspireApiPECConfig((uint64_t)v9, a4);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(**(_QWORD **)a1 + v7, a3);
    outlined init with take of SecretKey((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL AMDPbPECShardReply.hasReply.getter()
{
  return AMDPbHEKeyStatus.hasKeyConfig.getter(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AMDPbPECShardReply, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

Swift::Void __swiftcall AMDPbPECShardReply.clearReply()()
{
  AMDPbHEKeyStatus.clearKeyConfig()(type metadata accessor for AMDPbPECShardReply, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t (*AMDPbPECShardReply.entryIds.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECShardReply.entryMetadatas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AMDPbPECShardReply.entryMetadatas.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AMDPbPECShardReply.entryMetadatas.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECShardReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfigsReply.unknownFields.getter(type metadata accessor for AMDPbPECShardReply, a1);
}

uint64_t AMDPbPECShardReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfigsReply.unknownFields.setter(a1, type metadata accessor for AMDPbPECShardReply);
}

uint64_t (*AMDPbPECShardReply.unknownFields.modify())()
{
  type metadata accessor for AMDPbPECShardReply(0);
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECShardReply.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  v3 = type metadata accessor for AMDPbPECShardReply(0);
  UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v3 + 28);
  v5 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t (*AMDPbPECReply.shardReplies.modify())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t AMDPbPECReply.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.unknownFields.getter(type metadata accessor for AMDPbPECReply, a1);
}

uint64_t AMDPbPECReply.unknownFields.setter(uint64_t a1)
{
  return AMDPbHEConfig.unknownFields.setter(a1, type metadata accessor for AMDPbPECReply);
}

uint64_t (*AMDPbPECReply.unknownFields.modify())()
{
  type metadata accessor for AMDPbPECReply(0);
  return Repeated.subscript.readspecialized ;
}

void *AMDPbFetchHEConfigs.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbFetchHEConfigs.protoMessageName;
}

unint64_t static AMDPbFetchHEConfigs.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbFetchHEConfigs._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbFetchHEConfigs._protobuf_nameMap);
  return _NameMap.init()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEConfigsReply._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEConfigsReply._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "configs";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "key_info";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEKeyStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEKeyStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "timestamp";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "key_config";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "group";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbPIRConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbPIRConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "encryption_parameters";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "shard_configs";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "keyword_pir_params";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "algorithm";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "batch_size";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "evaluation_key_config_hash";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbPIRShardConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbPIRShardConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "num_entries";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "entry_size";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "dimensions";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbPECConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbPECConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "encryption_parameters";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "scaling_factor";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "plaintext_packing";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "embedding_dimension";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "similarity_metric";
  *((_QWORD *)v17 + 1) = 17;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "evaluation_key_config_hash";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEQuery._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEQuery._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "use_case";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pir_query";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "pec_query";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbEvaluationKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbEvaluationKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "metadata";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "evaluation_key";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbEvaluationKeyMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbEvaluationKeyMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "timestamp";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "identifier";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbPECShardReply._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbPECShardReply._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "reply";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "entry_ids";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "entry_metadatas";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHE_APICode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHE_APICode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "KEY_UPLOAD";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "USECASES_FETCH";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "HE_QUERY";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "HE_QUERIES";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_237D58E50;
  v5 = v21 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v21 + v4) = 1;
  *(_QWORD *)v5 = "api_code";
  *(_QWORD *)(v5 + 8) = 8;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C328];
  v7 = type metadata accessor for _NameMap.NameDescription();
  v8 = *(void (**)(void))(*(_QWORD *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  v9 = v21 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v21 + v4 + v3) = 2;
  *(_QWORD *)v9 = "status";
  *(_QWORD *)(v9 + 8) = 6;
  *(_BYTE *)(v9 + 16) = 2;
  v8();
  v10 = (_QWORD *)(v21 + v4 + 2 * v3);
  v11 = (char *)v10 + *(int *)(v1 + 48);
  *v10 = 6;
  *(_QWORD *)v11 = "statuses";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  v12 = (_QWORD *)(v21 + v4 + 3 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 7;
  *(_QWORD *)v13 = "error_message";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  v14 = (_QWORD *)(v21 + v4 + 4 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "he_reply";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  v16 = (_QWORD *)(v21 + v4 + 5 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "he_replies";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  v18 = (_QWORD *)(v21 + v4 + 6 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "configs";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AMDPbHEResponse.PbStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AMDPbHEResponse.PbStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SUCCESS";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "INVALID_REQ";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SERVER_ERROR";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "INVALID_KEY";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "VERSION_NOT_FOUND";
  *((_QWORD *)v17 + 1) = 17;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PARTIAL_SUCCESS";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiEmpty._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiEmpty._protobuf_nameMap);
  return _NameMap.init()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiEvaluationKeyMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiEvaluationKeyMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "timestamp";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "identifier";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiKeyStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiKeyStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "timestamp";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "key_config";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiEvaluationKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiEvaluationKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "metadata";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "evaluation_key";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "pir_config";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pec_config";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "config_id";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiConfigResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiConfigResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "configs";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "key_info";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "usecase";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pir_request";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "pec_request";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "pir_response";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pec_response";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPIRShardConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPIRShardConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "num_entries";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "entry_size";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "dimensions";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "shard_id";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "compress_vectorized_pir_response";
  *((_QWORD *)v17 + 1) = 32;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "vectorized_pir_internal_batching_size";
  *((_QWORD *)v19 + 1) = 37;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPIRConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPIRConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "encryption_parameters";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "shard_configs";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "keyword_pir_params";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "algorithm";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "batch_size";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "evaluation_key_config_hash";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPIRRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPIRRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "shard_index";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "query";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "evaluation_key_metadata";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "config_id";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "shard_id";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "evaluation_key";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPECConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPECConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D58E50;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "encryption_parameters";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "scaling_factor";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "plaintext_packing";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "embedding_dimension";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "similarity_metric";
  *((_QWORD *)v17 + 1) = 17;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "evaluation_key_config_hash";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "extra_plaintext_moduli";
  *((_QWORD *)v21 + 1) = 22;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPECRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPECRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D59320;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "shard_indices";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "query";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "evaluation_key_metadata";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "config_id";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "evaluation_key";
  *(_QWORD *)(v16 + 8) = 14;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireApiPECShardResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireApiPECShardResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "reply";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "entry_ids";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "entry_metadatas";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirAlgorithm._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirAlgorithm._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "ACLS_PIR";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "MUL_PIR";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "VECTORIZED_PIR";
  *(_QWORD *)(v12 + 8) = 14;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirKeyCompressionStrategy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirKeyCompressionStrategy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "NO_COMPRESSION";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "MAXIMUM_COMPRESSION";
  *((_QWORD *)v11 + 1) = 19;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "HYBRID_COMPRESSION";
  *(_QWORD *)(v12 + 8) = 18;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v31;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_237D5B460;
  v5 = v31 + v4;
  v6 = v31 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v31 + v4) = 1;
  *(_QWORD *)v6 = "encryption_parameters";
  *(_QWORD *)(v6 + 8) = 21;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v31 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "num_entries";
  *(_QWORD *)(v10 + 8) = 11;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v31 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "entry_size";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v31 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "dimensions";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v31 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "keyword_pir_params";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v31 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "algorithm";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v31 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "batch_size";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v31 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "evaluation_key_config";
  *((_QWORD *)v22 + 1) = 21;
  v22[16] = 2;
  v9();
  v23 = v31 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "key_compression_strategy";
  *(_QWORD *)(v23 + 8) = 24;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v31 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "compress_vectorized_pir_response";
  *((_QWORD *)v25 + 1) = 32;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v31 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "vectorized_pir_internal_batching_size";
  *((_QWORD *)v27 + 1) = 37;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v31 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "batch_pir_params";
  *((_QWORD *)v29 + 1) = 16;
  v29[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirCuckooTableConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirCuckooTableConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D58E50;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "expansion_factor";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "num_hash_functions";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "max_num_evictions";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "target_load_factor";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "slots_per_bucket";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "allow_expansion";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "multiple_tables";
  *((_QWORD *)v21 + 1) = 15;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirBatchPirParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirBatchPirParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "num_hash_functions";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "num_hash_functions_per_bucket";
  *((_QWORD *)v11 + 1) = 29;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "batch_pir_table_size";
  *(_QWORD *)(v12 + 8) = 20;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirKeywordPirParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirKeywordPirParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "num_hash_functions";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "multiple_tables";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirEncryptedIndices._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirEncryptedIndices._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ciphertexts";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "num_pir_calls";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirSerializedKeywordDb._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirSerializedKeywordDb._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_237D540E0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "rows";
  *(_QWORD *)(v5 + 8) = 4;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirPreprocessDbArgs._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirPreprocessDbArgs._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_237D5B470;
  v5 = v40 + v4;
  v6 = v40 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v40 + v4) = 1;
  *(_QWORD *)v6 = "input_database";
  *(_QWORD *)(v6 + 8) = 14;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "values_proto_path";
  *(_QWORD *)(v10 + 8) = 17;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "algorithm";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "num_shards";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "num_entries_per_shard";
  *((_QWORD *)v16 + 1) = 21;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "shard_id";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "predefined_encryption_parameters";
  *((_QWORD *)v20 + 1) = 32;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "he_scheme";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "output_database";
  *(_QWORD *)(v23 + 8) = 15;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = 0x237D64000;
  *((_QWORD *)v25 + 1) = 21;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "output_key_config";
  *((_QWORD *)v27 + 1) = 17;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "key_compression_strategy";
  *((_QWORD *)v29 + 1) = 24;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "split_large_entry";
  *((_QWORD *)v31 + 1) = 17;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "skip_large_entry_size";
  *((_QWORD *)v33 + 1) = 21;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "uneven_dimensions";
  *((_QWORD *)v35 + 1) = 17;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "no_validate";
  *((_QWORD *)v37 + 1) = 11;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "command";
  *(_QWORD *)(v38 + 8) = 7;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirPreprocessDbCommand._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirPreprocessDbCommand._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "keyword";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "index";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspirePirPirPreprocessDbCommand.Index._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "num_entries";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "entry_size";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSecurityLevel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSecurityLevel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Unchecked";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "Quantum128";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeErrorStdDev._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeErrorStdDev._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_237D540E0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 0;
  *(_QWORD *)v5 = "StdDev32";
  *(_QWORD *)(v5 + 8) = 8;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeHeScheme._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeHeScheme._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "UNSPECIFIED";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "BFV";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "BGV";
  *(_QWORD *)(v12 + 8) = 3;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedDcrtPlaintext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedDcrtPlaintext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_237D540E0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "poly";
  *(_QWORD *)(v5 + 8) = 4;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedCiphertextVec._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedCiphertextVec._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_237D540E0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "ciphertexts";
  *(_QWORD *)(v5 + 8) = 11;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedCiphertext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedCiphertext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "seeded";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "full";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedSeededCiphertext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedSeededCiphertext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "poly0";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "seed";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedFullCiphertext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedFullCiphertext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "polys";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "skip_lsbs";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "correction_factor";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedKeySwitchKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedKeySwitchKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_237D540E0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "key_switch_key";
  *(_QWORD *)(v5 + 8) = 14;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C328];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedGaloisKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedGaloisKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_237D540E0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "key_switch_keys";
  *(_QWORD *)(v5 + 8) = 15;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C328];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedRelinKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedRelinKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_237D540E0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "relin_key";
  *(_QWORD *)(v5 + 8) = 9;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C328];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedSecretKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedSecretKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_237D540E0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "polys";
  *(_QWORD *)(v5 + 8) = 5;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeSerializedEvaluationKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeSerializedEvaluationKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "galois_key";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "relin_key";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeEvaluationKeyConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeEvaluationKeyConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "encryption_parameters";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "galois_elements";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "has_relin_key";
  *(_QWORD *)(v12 + 8) = 13;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireHeEncryptionParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireHeEncryptionParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "polynomial_degree";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "plaintext_modulus";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "coefficient_moduli";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "error_std_dev";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "security_level";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "he_scheme";
  *((_QWORD *)v19 + 1) = 9;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilarityPlaintextPacking._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilarityPlaintextPacking._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "dense_row";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "diagonal";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "dense_column";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySerializedCiphertextMatrix._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySerializedCiphertextMatrix._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "nrows";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ncols";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ciphertexts";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "packing";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySerializedDcrtPlaintextMatrix._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySerializedDcrtPlaintextMatrix._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "num_rows";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "num_cols";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "plaintexts";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "packing";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySimilarityClientConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySimilarityClientConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D58E50;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "encryption_parameters";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "scaling_factor";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "plaintext_packing";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "embedding_dimension";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "galois_elts";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "similarity_metric";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "extra_plaintext_moduli";
  *((_QWORD *)v21 + 1) = 22;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySimilarityServerConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySimilarityServerConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "client_config";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "db_packing";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "parallel";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "baby_step";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySerializedProcessedSimilarityDb._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySerializedProcessedSimilarityDb._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "plaintext_matrices";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "entry_ids";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "entry_metadatas";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "server_config";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilaritySimilarityDbRow._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilaritySimilarityDbRow._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237D540B0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "entry_id";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "entry_metadata";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "embedding";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AspireSimilarityPecPreprocessDbArgs._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AspireSimilarityPecPreprocessDbArgs._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_237D5FF00;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 1;
  *(_QWORD *)v6 = "input_database";
  *(_QWORD *)(v6 + 8) = 14;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v33 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "output_database";
  *(_QWORD *)(v10 + 8) = 15;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v33 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "output_server_config";
  *((_QWORD *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v33 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "input_server_config";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v33 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "entry_id";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v33 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "entry_metadata_id";
  *((_QWORD *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v33 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "embedding_id";
  *((_QWORD *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v33 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "shard_id";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v33 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "predefined_encryption_parameters";
  *(_QWORD *)(v23 + 8) = 32;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v33 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "he_scheme";
  *((_QWORD *)v25 + 1) = 9;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v33 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "extra_plaintext_moduli";
  *((_QWORD *)v27 + 1) = 22;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v33 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "baby_step";
  *((_QWORD *)v29 + 1) = 9;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v33 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "parallel";
  *((_QWORD *)v31 + 1) = 8;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbFetchHEConfigs._protobuf_nameMap);
}

uint64_t static AMDPbFetchHEConfigs._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbFetchHEConfigs._protobuf_nameMap, a1);
}

uint64_t AMDPbFetchHEConfigs.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  do
    result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t AMDPbFetchHEConfigs.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t static AMDPbFetchHEConfigs.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for UnknownStorage();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v15 - v10, a1, v4);
  v12(v9, a2, v4);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v5, MEMORY[0x24BE5BF20]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  return a2 & 1;
}

Swift::Int AMDPbFetchHEConfigs.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbFetchHEConfigs, &lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, (uint64_t)&protocol conformance descriptor for AMDPbFetchHEConfigs);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbFetchHEConfigs()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbFetchHEConfigs())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbFetchHEConfigs()
{
  return AMDPbFetchHEConfigs.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbFetchHEConfigs()
{
  return AMDPbFetchHEConfigs.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbFetchHEConfigs()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, type metadata accessor for AMDPbFetchHEConfigs, (uint64_t)&protocol conformance descriptor for AMDPbFetchHEConfigs);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbFetchHEConfigs._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbFetchHEConfigs()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, type metadata accessor for AMDPbFetchHEConfigs, (uint64_t)&protocol conformance descriptor for AMDPbFetchHEConfigs);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbFetchHEConfigs()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, type metadata accessor for AMDPbFetchHEConfigs, (uint64_t)&protocol conformance descriptor for AMDPbFetchHEConfigs);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for UnknownStorage();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v15 - v10, a1, v4);
  v12(v9, a2, v4);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, v5, MEMORY[0x24BE5BF20]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  return a2 & 1;
}

void *AMDPbHEConfigsReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEConfigsReply.protoMessageName;
}

unint64_t static AMDPbHEConfigsReply.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t AMDPbHEConfigsReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfigsReply._protobuf_nameMap);
}

uint64_t AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static AMDPbHEConfigsReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfigsReply._protobuf_nameMap, a1);
}

uint64_t static AMDPbFetchHEConfigs._protobuf_nameMap.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t AMDPbHEConfigsReply.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for AMDPbHEKeyStatus(0);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, type metadata accessor for AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        closure #1 in AMDPbHEConfigsReply.decodeMessage<A>(decoder:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbHEConfigsReply.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufString();
  type metadata accessor for AMDPbHEConfig(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t AMDPbHEConfigsReply.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = v0;
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for ProtobufString(),
        type metadata accessor for AMDPbHEConfig(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig), lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig), v2 = v0, result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16)
      || (type metadata accessor for AMDPbHEKeyStatus(0),
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, type metadata accessor for AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AMDPbHEConfigsReply(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AMDPbHEConfigsReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbHEConfigsReply, &lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEConfigsReply@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for (String, AMDPbHEConfig), &demangling cache variable for type metadata for _DictionaryStorage<String, AMDPbHEConfig>, type metadata accessor for AMDPbHEConfig);
  a1[1] = v2;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEConfigsReply()
{
  return 0xD00000000000001ALL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbHEConfigsReply())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEConfigsReply()
{
  return AMDPbHEConfigsReply.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEConfigsReply()
{
  return AMDPbHEConfigsReply.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEConfigsReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEConfigsReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfigsReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEConfigsReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEConfigsReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
  return Message.hash(into:)();
}

void *AMDPbHEConfig.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEConfig.protoMessageName;
}

unint64_t static AMDPbHEConfig.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbHEConfig._protobuf_nameMap, (uint64_t)"pir_config", 10, (uint64_t)"pec_config");
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbHEQueries._protobuf_nameMap, (uint64_t)"queries", 7, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbHEReplies._protobuf_nameMap, (uint64_t)"replies", 7, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbHEReply._protobuf_nameMap, (uint64_t)"pir_reply", 9, (uint64_t)"pec_reply");
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbEvaluationKeys._protobuf_nameMap, (uint64_t)"keys", 4, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbPIRQuery._protobuf_nameMap, (uint64_t)"shard_index", 11);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbPIRReply._protobuf_nameMap, (uint64_t)"replies", 7, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbPECQuery._protobuf_nameMap, (uint64_t)"shard_indices", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AMDPbPECReply._protobuf_nameMap, (uint64_t)"shard_replies", 13, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiEvaluationKeys._protobuf_nameMap, (uint64_t)"keys", 4, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiConfigRequest._protobuf_nameMap, (uint64_t)"usecases", 8, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiRequests._protobuf_nameMap, (uint64_t)"requests", 8, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiResponses._protobuf_nameMap, (uint64_t)"responses", 9, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiPIRResponse._protobuf_nameMap, (uint64_t)"replies", 7, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireApiPECResponse._protobuf_nameMap, (uint64_t)"shard_responses", 15, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspirePirSerializedKeywordDbRow._protobuf_nameMap, (uint64_t)"shard_id", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspirePirPirPreprocessDbCommand.Keyword._protobuf_nameMap, (uint64_t)"cuckoo_config", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilaritySimilarityMetric._protobuf_nameMap, 0, (uint64_t)"CosineSimilarity", 16);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilarityPlaintextPackingDenseRow._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilarityPlaintextPackingDiagonal._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilarityPlaintextPackingDenseColumn._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AspireSimilaritySimilarityDb._protobuf_nameMap, 1, (uint64_t)"rows", 4);
}

uint64_t AMDPbHEConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfig._protobuf_nameMap);
}

uint64_t static AMDPbHEConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfig._protobuf_nameMap, a1);
}

uint64_t AMDPbHEConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEConfig.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AMDPbHEConfig.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AMDPbHEConfig.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AMDPbHEConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AMDPbPIRConfig(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPIRConfig?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRConfig?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AMDPbPIRConfig);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AMDPbPIRConfig);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRConfig?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AMDPbPIRConfig?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AMDPbPIRConfig?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AMDPbPIRConfig);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRConfig?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AMDPbPIRConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AMDPbHEConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AMDPbPECConfig(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPECConfig?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECConfig?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AMDPbPECConfig);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AMDPbPECConfig);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECConfig?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AMDPbPECConfig?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECConfig?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AMDPbPECConfig?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AMDPbPECConfig);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECConfig?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AMDPbPECConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AMDPbHEConfig.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v5 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in AMDPbHEConfig.traverse<A>(visitor:)(v0);
  else
    closure #1 in AMDPbHEConfig.traverse<A>(visitor:)(v0);
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AMDPbHEConfig(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbHEConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbPIRConfig(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v8 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPIRConfig);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPIRConfig);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  __break(1u);
  return result;
}

uint64_t closure #2 in AMDPbHEConfig.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbPECConfig(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v8 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPECConfig);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPECConfig);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  __break(1u);
  return result;
}

Swift::Int AMDPbHEConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbHEConfig, &lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AMDPbHEConfig(type metadata accessor for AMDPbHEConfig.OneOf_Config, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEConfig()
{
  return 0xD000000000000014;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbHEConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEConfig()
{
  return AMDPbHEConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
  return Message.hash(into:)();
}

void *AMDPbHEKeyStatus.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEKeyStatus.protoMessageName;
}

unint64_t static AMDPbHEKeyStatus.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t AMDPbHEKeyStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEKeyStatus._protobuf_nameMap);
}

uint64_t static AMDPbHEKeyStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEKeyStatus._protobuf_nameMap, a1);
}

uint64_t AMDPbHEKeyStatus.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          closure #2 in AMDPbHEKeyStatus.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbHEKeyStatus, type metadata accessor for AspireHeEvaluationKeyConfig, &lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AMDPbHEKeyStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;

  if (!*v3 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in AMDPbHEKeyStatus.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      v9 = v3[2];
      v10 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v10 = v3[1] & 0xFFFFFFFFFFFFLL;
      if (v10)
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      type metadata accessor for AMDPbHEKeyStatus(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbHEKeyStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AMDPbHEKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeEvaluationKeyConfig);
}

Swift::Int AMDPbHEKeyStatus.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbHEKeyStatus, &lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEKeyStatus@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEKeyStatus()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEKeyStatus.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEKeyStatus.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEKeyStatus()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, type metadata accessor for AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEKeyStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEKeyStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEKeyStatus()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, type metadata accessor for AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEKeyStatus()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, type metadata accessor for AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus);
  return Message.hash(into:)();
}

void *AMDPbPIRConfig.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPIRConfig.protoMessageName;
}

unint64_t static AMDPbPIRConfig.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t AMDPbPIRConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRConfig._protobuf_nameMap);
}

uint64_t static AMDPbPIRConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRConfig._protobuf_nameMap, a1);
}

uint64_t AMDPbPIRConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          closure #1 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbPIRConfig);
          goto LABEL_5;
        case 2:
          type metadata accessor for AMDPbPIRShardConfig(0);
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, type metadata accessor for AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #3 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbPIRConfig, type metadata accessor for AspirePirKeywordPirParameters, &lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 5:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 6:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AMDPbPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AMDPbPIRConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for AMDPbPIRConfig);
  if (!v4)
  {
    if (*(_QWORD *)(*v3 + 16))
    {
      type metadata accessor for AMDPbPIRShardConfig(0);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, type metadata accessor for AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    closure #2 in AMDPbPIRConfig.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (v3[1])
    {
      lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (v3[3])
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    __asm { BR              X10 }
  }
  return result;
}

void sub_237BE6014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0xFF000000000000) == 0 || (dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    type metadata accessor for AMDPbPIRConfig(0);
    UnknownStorage.traverse<A>(visitor:)();
  }
  JUMPOUT(0x237BE5EE4);
}

uint64_t closure #2 in AMDPbPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AMDPbPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirKeywordPirParameters and conformance AspirePirKeywordPirParameters, type metadata accessor for AspirePirKeywordPirParameters, (uint64_t)&protocol conformance descriptor for AspirePirKeywordPirParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspirePirKeywordPirParameters);
}

Swift::Int AMDPbPIRConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbPIRConfig, &lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0xC000000000000000;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 40);
  v7 = type metadata accessor for AspirePirKeywordPirParameters(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPIRConfig()
{
  return 0xD000000000000015;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbPIRConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPIRConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPIRConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPIRConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPIRConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPIRConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
  return Message.hash(into:)();
}

void *AMDPbPIRShardConfig.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPIRShardConfig.protoMessageName;
}

unint64_t static AMDPbPIRShardConfig.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t AMDPbPIRShardConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRShardConfig._protobuf_nameMap);
}

uint64_t static AMDPbPIRShardConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRShardConfig._protobuf_nameMap, a1);
}

uint64_t AMDPbPIRShardConfig.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AMDPbPIRShardConfig.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16)
        || (result = dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for AMDPbPIRShardConfig(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int AMDPbPIRShardConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbPIRShardConfig, &lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPIRShardConfig@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = MEMORY[0x24BEE4AF8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPIRShardConfig()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AMDPbPIRShardConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AMDPbPIRShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AMDPbPIRShardConfig())()
{
  return Repeated.subscript.readspecialized ;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPIRShardConfig()
{
  return AMDPbPIRShardConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPIRShardConfig()
{
  return AMDPbPIRShardConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPIRShardConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, type metadata accessor for AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPIRShardConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRShardConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPIRShardConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, type metadata accessor for AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPIRShardConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, type metadata accessor for AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
  return Message.hash(into:)();
}

void *AMDPbPECConfig.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPECConfig.protoMessageName;
}

unint64_t static AMDPbPECConfig.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t AMDPbPECConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECConfig._protobuf_nameMap);
}

uint64_t static AMDPbPECConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECConfig._protobuf_nameMap, a1);
}

uint64_t AMDPbPECConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          closure #1 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbPECConfig);
          goto LABEL_5;
        case 2:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #3 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbPECConfig, type metadata accessor for AspireSimilarityPlaintextPacking, &lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
          goto LABEL_5;
        case 4:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  type metadata accessor for AspireHeEncryptionParameters(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in AMDPbPIRConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AMDPbPIRConfig.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for AMDPbPECConfig);
  if (!v4)
  {
    if (*(_QWORD *)v3)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    closure #2 in AMDPbPECConfig.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (*(_DWORD *)(v3 + 8))
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if ((*(_BYTE *)(v3 + 24) & 1) == 0)
    {
      if (*(_QWORD *)(v3 + 16))
      {
        lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric();
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
      }
    }
    __asm { BR              X10 }
  }
  return result;
}

void sub_237BE7068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0xFF000000000000) == 0 || (dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    type metadata accessor for AMDPbPECConfig(0);
    UnknownStorage.traverse<A>(visitor:)();
  }
  JUMPOUT(0x237BE6F70);
}

uint64_t closure #1 in AMDPbPIRConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[3] = a4;
  v16[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AspireHeEncryptionParameters(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a5(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v14 + 36), (uint64_t)v9, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v13, type metadata accessor for AspireHeEncryptionParameters);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireHeEncryptionParameters);
}

uint64_t closure #2 in AMDPbPECConfig.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AMDPbPECConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 40), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilarityPlaintextPacking and conformance AspireSimilarityPlaintextPacking, type metadata accessor for AspireSimilarityPlaintextPacking, (uint64_t)&protocol conformance descriptor for AspireSimilarityPlaintextPacking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilarityPlaintextPacking);
}

Swift::Int AMDPbPECConfig.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbPECConfig, &lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPECConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_OWORD *)(a2 + 32) = xmmword_237D54090;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 40);
  v7 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPECConfig()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AMDPbPIRConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AMDPbPIRConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPECConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECConfig.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPECConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECConfig.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPECConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPECConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPECConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPECConfig()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
  return Message.hash(into:)();
}

void *AMDPbHEQueries.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEQueries.protoMessageName;
}

unint64_t static AMDPbHEQueries.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t AMDPbHEQueries._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQueries._protobuf_nameMap);
}

uint64_t static AMDPbHEQueries._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQueries._protobuf_nameMap, a1);
}

uint64_t AMDPbHEQueries.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AMDPbHEQuery, &lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
}

uint64_t AMDPbHEQueries.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AMDPbHEQuery, &lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery, (void (*)(_QWORD))type metadata accessor for AMDPbHEQueries);
}

uint64_t static AMDPbHEQueries.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbHEQueries) & 1;
}

Swift::Int AMDPbHEQueries.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbHEQueries, &lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, (uint64_t)&protocol conformance descriptor for AMDPbHEQueries);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEQueries()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEQueries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEQueries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEQueries()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, type metadata accessor for AMDPbHEQueries, (uint64_t)&protocol conformance descriptor for AMDPbHEQueries);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEQueries@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQueries._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEQueries()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, type metadata accessor for AMDPbHEQueries, (uint64_t)&protocol conformance descriptor for AMDPbHEQueries);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEQueries()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, type metadata accessor for AMDPbHEQueries, (uint64_t)&protocol conformance descriptor for AMDPbHEQueries);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbHEQueries(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbHEQueries) & 1;
}

void *AMDPbHEReplies.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEReplies.protoMessageName;
}

unint64_t static AMDPbHEReplies.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t AMDPbHEReplies._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReplies._protobuf_nameMap);
}

uint64_t static AMDPbHEReplies._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReplies._protobuf_nameMap, a1);
}

uint64_t AMDPbHEReplies.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AMDPbHEReply, &lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
}

uint64_t AMDPbHEReplies.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AMDPbHEReply, &lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply, (void (*)(_QWORD))type metadata accessor for AMDPbHEReplies);
}

uint64_t static AMDPbHEReplies.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbHEReplies) & 1;
}

Swift::Int AMDPbHEReplies.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbHEReplies, &lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEReplies()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEReplies(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEReplies.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEReplies(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEReplies.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEReplies()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEReplies@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReplies._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEReplies()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEReplies()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbHEReplies(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbHEReplies) & 1;
}

void *AMDPbHEQuery.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEQuery.protoMessageName;
}

unint64_t static AMDPbHEQuery.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t AMDPbHEQuery._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQuery._protobuf_nameMap);
}

uint64_t static AMDPbHEQuery._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQuery._protobuf_nameMap, a1);
}

uint64_t AMDPbHEQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        closure #3 in AMDPbHEQuery.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in AMDPbHEQuery.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
    }
  }
  return result;
}

uint64_t closure #2 in AMDPbHEQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for AMDPbPIRQuery(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPIRQuery?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    v26 = v13;
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRQuery?);
      outlined init with take of SecretKey((uint64_t)v17, (uint64_t)v9, type metadata accessor for AMDPbPIRQuery);
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v24, type metadata accessor for AMDPbPIRQuery);
      v25(v24, 0, 1, v4);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRQuery?);
  v29 = v36;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v36, &demangling cache variable for type metadata for AMDPbPIRQuery?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRQuery?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AMDPbPIRQuery?);
  }
  else
  {
    v30 = v35;
    outlined init with take of SecretKey(v29, v35, type metadata accessor for AMDPbPIRQuery);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRQuery?);
    v31 = v33;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with take of SecretKey(v30, v31, type metadata accessor for AMDPbPIRQuery);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t closure #3 in AMDPbHEQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a1;
  v4 = type metadata accessor for AMDPbPECQuery(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPECQuery?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v36 = (uint64_t)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v32 - v23;
  v37 = v5;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v32 - v23, 1, 1, v4);
  v33 = v42 + *(int *)(type metadata accessor for AMDPbHEQuery(0) + 20);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v34 = v14;
  LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v42 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    v26 = v13;
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    v26 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECQuery?);
      outlined init with take of SecretKey((uint64_t)v17, (uint64_t)v9, type metadata accessor for AMDPbPECQuery);
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v24, type metadata accessor for AMDPbPECQuery);
      v25(v24, 0, 1, v4);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    }
  }
  v27 = v38;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECQuery?);
  v29 = v36;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, v36, &demangling cache variable for type metadata for AMDPbPECQuery?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v29, 1, v4) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECQuery?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AMDPbPECQuery?);
  }
  else
  {
    v30 = v35;
    outlined init with take of SecretKey(v29, v35, type metadata accessor for AMDPbPECQuery);
    if ((_DWORD)v42 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECQuery?);
    v31 = v33;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with take of SecretKey(v30, v31, type metadata accessor for AMDPbPECQuery);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v26);
  }
}

uint64_t AMDPbHEQuery.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[1];
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v8 = type metadata accessor for AMDPbHEQuery(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
      return UnknownStorage.traverse<A>(visitor:)();
    if (swift_getEnumCaseMultiPayload() == 1)
      closure #2 in AMDPbHEQuery.traverse<A>(visitor:)((uint64_t)v0);
    else
      closure #1 in AMDPbHEQuery.traverse<A>(visitor:)((uint64_t)v0);
    result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (!v1)
      return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbHEQuery.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbPIRQuery(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AMDPbHEQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPIRQuery);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPIRQuery);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  __break(1u);
  return result;
}

uint64_t closure #2 in AMDPbHEQuery.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbPECQuery(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AMDPbHEQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPECQuery);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPECQuery);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  __break(1u);
  return result;
}

Swift::Int AMDPbHEQuery.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbHEQuery, &lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEQuery@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  v2 = (char *)a2 + *(int *)(a1 + 20);
  v3 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEQuery()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQuery.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEQuery()
{
  return AMDPbHEQuery.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEQuery()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, type metadata accessor for AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEQuery@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEQuery._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEQuery()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, type metadata accessor for AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEQuery()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, type metadata accessor for AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
  return Message.hash(into:)();
}

void *AMDPbHEReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbHEReply.protoMessageName;
}

unint64_t static AMDPbHEReply.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  char *v19;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, a2);
  __swift_project_value_buffer(v8, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_237D540A0;
  v14 = (_QWORD *)(v13 + v12);
  v15 = v13 + v12 + *(int *)(v9 + 48);
  *v14 = 1;
  *(_QWORD *)v15 = a3;
  *(_QWORD *)(v15 + 8) = a4;
  *(_BYTE *)(v15 + 16) = 2;
  v16 = *MEMORY[0x24BE5C328];
  v17 = type metadata accessor for _NameMap.NameDescription();
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v18)(v15, v16, v17);
  v19 = (char *)v14 + v11 + *(int *)(v9 + 48);
  *(_QWORD *)((char *)v14 + v11) = 2;
  *(_QWORD *)v19 = a5;
  *((_QWORD *)v19 + 1) = a4;
  v19[16] = 2;
  v18();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_237D540E0;
  v14 = v13 + v12 + *(int *)(v10 + 48);
  *(_QWORD *)(v13 + v12) = a3;
  *(_QWORD *)v14 = a4;
  *(_QWORD *)(v14 + 8) = a5;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *MEMORY[0x24BE5C318];
  v16 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AMDPbHEReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReply._protobuf_nameMap);
}

uint64_t static AMDPbHEReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReply._protobuf_nameMap, a1);
}

uint64_t AMDPbHEReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEConfig.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AMDPbHEReply.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AMDPbHEReply.decodeMessage<A>(decoder:));
}

uint64_t AMDPbHEConfig.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t result;
  char v14;

  v9 = v5;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v14 & 1) != 0)
      break;
    if (result == 2)
    {
      a5(v9, a1, a2, a3);
    }
    else if (result == 1)
    {
      a4(v9, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbHEReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AMDPbPIRReply(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPIRReply?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRReply?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AMDPbPIRReply);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AMDPbPIRReply);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRReply?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AMDPbPIRReply?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRReply?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AMDPbPIRReply?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AMDPbPIRReply);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPIRReply?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AMDPbPIRReply);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AMDPbHEReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AMDPbPECReply(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbPECReply?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v19, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    outlined init with take of SecretKey((uint64_t)v19, (uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECReply?);
      outlined init with take of SecretKey((uint64_t)v17, v31, type metadata accessor for AMDPbPECReply);
      outlined init with take of SecretKey(v31, (uint64_t)v24, type metadata accessor for AMDPbPECReply);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, type metadata accessor for AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECReply?);
  v33 = v41;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AMDPbPECReply?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECReply?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AMDPbPECReply?);
  }
  else
  {
    v34 = v40;
    outlined init with take of SecretKey((uint64_t)v33, (uint64_t)v40, type metadata accessor for AMDPbPECReply);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AMDPbPECReply?);
    v35 = v39;
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined init with take of SecretKey((uint64_t)v34, v35, type metadata accessor for AMDPbPECReply);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AMDPbHEReply.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v5 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in AMDPbHEReply.traverse<A>(visitor:)(v0);
  else
    closure #1 in AMDPbHEReply.traverse<A>(visitor:)(v0);
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AMDPbHEReply(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbHEReply.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPIRReply);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPIRReply);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  __break(1u);
  return result;
}

uint64_t closure #2 in AMDPbHEReply.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of SecretKey((uint64_t)v4, (uint64_t)v7, type metadata accessor for AMDPbPECReply);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, type metadata accessor for AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPECReply);
  }
  result = outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  __break(1u);
  return result;
}

Swift::Int AMDPbHEReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbHEReply, &lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AMDPbHEConfig(type metadata accessor for AMDPbHEReply.OneOf_Reply, a1);
}

uint64_t protocol witness for Message.init() in conformance AMDPbHEConfig@<X0>(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbHEReply()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbHEReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEReply.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbHEReply()
{
  return AMDPbHEReply.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbHEReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, type metadata accessor for AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbHEReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbHEReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbHEReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, type metadata accessor for AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbHEReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, type metadata accessor for AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
  return Message.hash(into:)();
}

void *AMDPbEvaluationKeys.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbEvaluationKeys.protoMessageName;
}

unint64_t static AMDPbEvaluationKeys.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t AMDPbEvaluationKeys._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeys._protobuf_nameMap);
}

uint64_t static AMDPbEvaluationKeys._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeys._protobuf_nameMap, a1);
}

uint64_t AMDPbEvaluationKeys.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AMDPbEvaluationKey, &lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
}

uint64_t AMDPbEvaluationKeys.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AMDPbEvaluationKey, &lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey, (void (*)(_QWORD))type metadata accessor for AMDPbEvaluationKeys);
}

uint64_t static AMDPbEvaluationKeys.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbEvaluationKeys) & 1;
}

Swift::Int AMDPbEvaluationKeys.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbEvaluationKeys, &lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeys);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbEvaluationKeys()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbEvaluationKeys.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbEvaluationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbEvaluationKeys.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbEvaluationKeys()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, type metadata accessor for AMDPbEvaluationKeys, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeys);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbEvaluationKeys@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeys._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbEvaluationKeys()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, type metadata accessor for AMDPbEvaluationKeys, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeys);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbEvaluationKeys()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, type metadata accessor for AMDPbEvaluationKeys, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeys);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbEvaluationKeys(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbEvaluationKeys) & 1;
}

void *AMDPbEvaluationKey.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbEvaluationKey.protoMessageName;
}

unint64_t static AMDPbEvaluationKey.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t AMDPbEvaluationKey._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKey._protobuf_nameMap);
}

uint64_t static AMDPbEvaluationKey._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKey._protobuf_nameMap, a1);
}

uint64_t AMDPbEvaluationKey.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in AMDPbEvaluationKey.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      closure #1 in AMDPbEvaluationKey.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbEvaluationKey.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AMDPbEvaluationKey(0);
  type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in AMDPbEvaluationKey.decodeMessage<A>(decoder:)()
{
  type metadata accessor for AMDPbEvaluationKey(0);
  type metadata accessor for AspireHeSerializedEvaluationKey(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AMDPbEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in AMDPbEvaluationKey.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AMDPbEvaluationKeyMetadata);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AMDPbEvaluationKeyMetadata);
}

uint64_t closure #2 in AMDPbEvaluationKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireHeSerializedEvaluationKey);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireHeSerializedEvaluationKey);
}

Swift::Int AMDPbEvaluationKey.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbEvaluationKey, &lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
}

uint64_t protocol witness for Message.init() in conformance AMDPbEvaluationKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 24);
  v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbEvaluationKey()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbEvaluationKey()
{
  return AMDPbEvaluationKey.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbEvaluationKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbEvaluationKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbEvaluationKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbEvaluationKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbEvaluationKey()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
  return Message.hash(into:)();
}

void *AMDPbEvaluationKeyMetadata.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbEvaluationKeyMetadata.protoMessageName;
}

unint64_t static AMDPbEvaluationKeyMetadata.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t AMDPbEvaluationKeyMetadata._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeyMetadata._protobuf_nameMap);
}

uint64_t static AMDPbEvaluationKeyMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeyMetadata._protobuf_nameMap, a1);
}

uint64_t AMDPbEvaluationKeyMetadata.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AMDPbEvaluationKeyMetadata.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    __asm { BR              X10 }
  return result;
}

Swift::Int AMDPbEvaluationKeyMetadata.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbEvaluationKeyMetadata, &lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
}

uint64_t protocol witness for Message.init() in conformance AMDPbEvaluationKeyMetadata@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbEvaluationKeyMetadata()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbEvaluationKeyMetadata()
{
  return AMDPbEvaluationKeyMetadata.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbEvaluationKeyMetadata()
{
  return AMDPbEvaluationKeyMetadata.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbEvaluationKeyMetadata()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbEvaluationKeyMetadata@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbEvaluationKeyMetadata._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbEvaluationKeyMetadata()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbEvaluationKeyMetadata()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
  return Message.hash(into:)();
}

void *AMDPbPIRQuery.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPIRQuery.protoMessageName;
}

unint64_t static AMDPbPIRQuery.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t AMDPbPIRQuery._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRQuery._protobuf_nameMap);
}

uint64_t static AMDPbPIRQuery._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRQuery._protobuf_nameMap, a1);
}

uint64_t AMDPbPIRQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 2:
          closure #2 in AMDPbHEKeyStatus.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbPIRQuery, type metadata accessor for AspirePirEncryptedIndices, &lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
          break;
        case 3:
          closure #3 in AMDPbPIRQuery.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbPIRQuery);
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AMDPbPIRQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in AMDPbPIRQuery.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in AMDPbPIRQuery.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for AMDPbPIRQuery);
      __asm { BR              X10 }
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbPIRQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspirePirEncryptedIndices(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AMDPbPIRQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspirePirEncryptedIndices);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspirePirEncryptedIndices);
}

Swift::Int AMDPbPIRQuery.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbPIRQuery, &lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPIRQuery@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_237D54090;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for AspirePirEncryptedIndices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 32);
  v7 = type metadata accessor for AMDPbEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPIRQuery()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRQuery.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRQuery.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPIRQuery()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPIRQuery@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRQuery._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPIRQuery()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPIRQuery()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
  return Message.hash(into:)();
}

void *AMDPbPIRReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPIRReply.protoMessageName;
}

unint64_t static AMDPbPIRReply.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t AMDPbPIRReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRReply._protobuf_nameMap);
}

uint64_t static AMDPbPIRReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRReply._protobuf_nameMap, a1);
}

uint64_t AMDPbPIRReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AspireHeSerializedCiphertextVec, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec);
}

uint64_t AMDPbPIRReply.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AspireHeSerializedCiphertextVec, &lazy protocol witness table cache variable for type AspireHeSerializedCiphertextVec and conformance AspireHeSerializedCiphertextVec, (uint64_t)&protocol conformance descriptor for AspireHeSerializedCiphertextVec, (void (*)(_QWORD))type metadata accessor for AMDPbPIRReply);
}

Swift::Int AMDPbPIRReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbPIRReply, &lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPIRReply()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPIRReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRReply.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPIRReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPIRReply.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPIRReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPIRReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPIRReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPIRReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPIRReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbPIRReply(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbPIRReply) & 1;
}

void *AMDPbPECQuery.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPECQuery.protoMessageName;
}

unint64_t static AMDPbPECQuery.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_237D540D0;
  v13 = (_QWORD *)(v12 + v11);
  v14 = v12 + v11 + *(int *)(v8 + 48);
  *v13 = 1;
  *(_QWORD *)v14 = a3;
  *(_QWORD *)(v14 + 8) = a4;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *MEMORY[0x24BE5C328];
  v16 = type metadata accessor for _NameMap.NameDescription();
  v17 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  v18 = (char *)v13 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)((char *)v13 + v10) = 2;
  *(_QWORD *)v18 = "query";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v17();
  v19 = (_QWORD *)((char *)v13 + 2 * v10);
  v20 = (char *)v19 + *(int *)(v8 + 48);
  *v19 = 3;
  *(_QWORD *)v20 = "evaluation_key";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v17();
  v21 = (_QWORD *)((char *)v13 + 3 * v10);
  v22 = (char *)v21 + *(int *)(v8 + 48);
  *v21 = 4;
  *(_QWORD *)v22 = "configuration_hash";
  *((_QWORD *)v22 + 1) = 18;
  v22[16] = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  char *v16;
  uint64_t v17;

  v5 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v5, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_237D540B0;
  v11 = (_QWORD *)(v10 + v9);
  v12 = v10 + v9 + *(int *)(v6 + 48);
  *v11 = 1;
  *(_QWORD *)v12 = "keyword";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x24BE5C318];
  v14 = type metadata accessor for _NameMap.NameDescription();
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v15)(v12, v13, v14);
  v16 = (char *)v11 + v8 + *(int *)(v6 + 48);
  *(_QWORD *)((char *)v11 + v8) = 2;
  *(_QWORD *)v16 = "value";
  *((_QWORD *)v16 + 1) = 5;
  v16[16] = 2;
  v15();
  v17 = (uint64_t)v11 + 2 * v8 + *(int *)(v6 + 48);
  *(_QWORD *)((char *)v11 + 2 * v8) = 3;
  *(_QWORD *)v17 = a3;
  *(_QWORD *)(v17 + 8) = a4;
  *(_BYTE *)(v17 + 16) = 2;
  v15();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AMDPbPECQuery._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECQuery._protobuf_nameMap);
}

uint64_t static AMDPbPECQuery._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECQuery._protobuf_nameMap, a1);
}

uint64_t AMDPbPECQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
          break;
        case 2:
          closure #2 in AMDPbHEKeyStatus.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbPECQuery, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, &lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
          break;
        case 3:
          closure #3 in AMDPbPIRQuery.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbPECQuery);
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in AMDPbPIRQuery.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(0);
  type metadata accessor for AMDPbEvaluationKey(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbPECQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (result = dispatch thunk of Visitor.visitPackedUInt32Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in AMDPbPECQuery.traverse<A>(visitor:)(v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in AMDPbPIRQuery.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for AMDPbPECQuery);
      __asm { BR              X10 }
    }
  }
  return result;
}

uint64_t closure #1 in AMDPbPECQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AMDPbPECQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

uint64_t closure #2 in AMDPbPIRQuery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[3] = a4;
  v16[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AMDPbEvaluationKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a5(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v14 + 32), (uint64_t)v9, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v9, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v13, type metadata accessor for AMDPbEvaluationKey);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AMDPbEvaluationKey);
}

Swift::Int AMDPbPECQuery.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbPECQuery, &lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPECQuery@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a2 + 8) = xmmword_237D54090;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 32);
  v7 = type metadata accessor for AMDPbEvaluationKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPECQuery()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPECQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECQuery.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPECQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECQuery.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPECQuery()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPECQuery@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECQuery._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPECQuery()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPECQuery()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
  return Message.hash(into:)();
}

void *AMDPbPECShardReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPECShardReply.protoMessageName;
}

unint64_t static AMDPbPECShardReply.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t AMDPbPECShardReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECShardReply._protobuf_nameMap);
}

uint64_t static AMDPbPECShardReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECShardReply._protobuf_nameMap, a1);
}

uint64_t AMDPbPECShardReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          break;
        case 1:
          closure #2 in AMDPbHEKeyStatus.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AMDPbPECShardReply, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, &lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AMDPbHEKeyStatus.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AMDPbPECShardReply.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AMDPbPECShardReply.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*v3 + 16))
      dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
    if (*(_QWORD *)(v3[1] + 16))
      dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)();
    type metadata accessor for AMDPbPECShardReply(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AMDPbPECShardReply.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AMDPbPECShardReply(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireSimilaritySerializedCiphertextMatrix and conformance AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, (uint64_t)&protocol conformance descriptor for AspireSimilaritySerializedCiphertextMatrix);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

Swift::Int AMDPbPECShardReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbPECShardReply, &lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply);
}

uint64_t protocol witness for Message.init() in conformance AMDPbPECShardReply@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v4;
  UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 28);
  v6 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPECShardReply()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AMDPbHEConfigsReply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AMDPbHEConfigsReply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPECShardReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECShardReply.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPECShardReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECShardReply.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPECShardReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, type metadata accessor for AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPECShardReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECShardReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPECShardReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, type metadata accessor for AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPECShardReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, type metadata accessor for AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply);
  return Message.hash(into:)();
}

void *AMDPbPECReply.protoMessageName.unsafeMutableAddressor()
{
  return &static AMDPbPECReply.protoMessageName;
}

unint64_t static AMDPbPECReply.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_237D540E0;
  v14 = v13 + v12 + *(int *)(v10 + 48);
  *(_QWORD *)(v13 + v12) = 1;
  *(_QWORD *)v14 = a3;
  *(_QWORD *)(v14 + 8) = a4;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *a5;
  v16 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AMDPbPECReply._protobuf_nameMap.unsafeMutableAddressor()
{
  return AMDPbFetchHEConfigs._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECReply._protobuf_nameMap);
}

uint64_t static AMDPbPECReply._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AMDPbFetchHEConfigs._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECReply._protobuf_nameMap, a1);
}

uint64_t AMDPbPECReply.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for AMDPbPECShardReply, &lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply);
}

uint64_t AMDPbHEQueries.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  char v11;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v11 & 1) != 0)
      break;
    if (result == 1)
    {
      a4(0);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a5, a4, a6);
      dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    }
    v6 = 0;
  }
  return result;
}

uint64_t AMDPbPECReply.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbHEQueries.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for AMDPbPECShardReply, &lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply, (void (*)(_QWORD))type metadata accessor for AMDPbPECReply);
}

uint64_t AMDPbHEQueries.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v13)(_QWORD);

  if (!*(_QWORD *)(*(_QWORD *)v7 + 16)
    || (v13 = a7,
        a4(0),
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a5, a4, a6),
        result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        a7 = v13,
        !v8))
  {
    a7(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AMDPbPECReply.hashValue.getter()
{
  return AMDPbFetchHEConfigs.hashValue.getter(type metadata accessor for AMDPbPECReply, &lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
}

Swift::Int AMDPbFetchHEConfigs.hashValue.getter(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  a1(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance AMDPbPECReply@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AMDPbPECReply()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AMDPbHEConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AMDPbHEConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AMDPbPECReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECReply.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AMDPbPECReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AMDPbPECReply.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AMDPbPECReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, type metadata accessor for AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbPECReply@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AMDPbFetchHEConfigs(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AMDPbPECReply._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AMDPbPECReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, type metadata accessor for AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AMDPbFetchHEConfigs()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AMDPbPECReply()
{
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, type metadata accessor for AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AMDPbFetchHEConfigs()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AMDPbPECReply(_QWORD *a1, char *a2)
{
  return specialized static AMDPbEvaluationKeys.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for AMDPbPECReply) & 1;
}

uint64_t specialized static AMDPbEvaluationKeyMetadata.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  if (*a1 == *(_QWORD *)a2 && (specialized static Data.== infix(_:_:)(a1[1], a1[2]), (v11 & 1) != 0))
  {
    v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v13 = (char *)a1 + *(int *)(v12 + 24);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, &a2[*(int *)(v12 + 24)], v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AMDPbPIRShardConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16)))
  {
    v11 = type metadata accessor for AMDPbPIRShardConfig(0);
    v12 = a1 + *(int *)(v11 + 28);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AMDPbHEConfigsReply.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)
  {
    v11 = type metadata accessor for AMDPbHEConfigsReply(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AMDPbPECShardReply.== infix(_:_:)(_QWORD **a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  _QWORD **v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD **v48;
  char *v49;
  char *v50;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)&v43 - v7;
  v8 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v43 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v43 - v21;
  v23 = type metadata accessor for AMDPbPECShardReply(0);
  v24 = *(int *)(v23 + 28);
  v48 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = v23;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v25, (uint64_t)v22, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v27 = *(int *)(v26 + 28);
  v49 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&a2[v27], (uint64_t)v20, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v28, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    v30 = (uint64_t)v50;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    if (v29(v28, 1, v8) != 1)
    {
      outlined init with take of SecretKey(v28, v30, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      v31 = static AspireSimilaritySerializedCiphertextMatrix.== infix(_:_:)((uint64_t)v17, v30);
      outlined destroy of AspireApiPECConfig(v30, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      if ((v31 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v40 = 0;
      return v40 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
    goto LABEL_11;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
LABEL_8:
  v32 = v48;
  v33 = v49;
  if (!specialized static Array<A>.== infix(_:_:)(*v48, *(_QWORD **)v49)
    || (specialized static Array<A>.== infix(_:_:)((uint64_t)v32[1], *((_QWORD *)v33 + 1)) & 1) == 0)
  {
    goto LABEL_11;
  }
  v34 = (char *)v32 + *(int *)(v26 + 24);
  v36 = v46;
  v35 = v47;
  v37 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v38 = v44;
  v37(v44, v34, v47);
  v39 = v45;
  v37(v45, &v33[*(int *)(v26 + 24)], v35);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41 = *(void (**)(char *, uint64_t))(v36 + 8);
  v41(v39, v35);
  v41(v38, v35);
  return v40 & 1;
}

uint64_t specialized static AMDPbEvaluationKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a1;
  v68 = a2;
  v60 = type metadata accessor for UnknownStorage();
  v58 = *(_QWORD *)(v60 - 8);
  v2 = MEMORY[0x24BDAC7A8](v60);
  v57 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v56 = (char *)&v55 - v4;
  v65 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v62 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v55 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeSerializedEvaluationKey?, AspireHeSerializedEvaluationKey?));
  MEMORY[0x24BDAC7A8](v61);
  v66 = (uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v59 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v63 = (uint64_t)&v55 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v64 = (uint64_t)&v55 - v12;
  v13 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (uint64_t *)((char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbEvaluationKeyMetadata?, AMDPbEvaluationKeyMetadata?));
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (uint64_t *)((char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v55 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v55 - v27;
  v29 = type metadata accessor for AMDPbEvaluationKey(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67 + *(int *)(v29 + 20), (uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v68 + *(int *)(v29 + 20), (uint64_t)v26, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  v30 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, (uint64_t)v19, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, v30, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v31((uint64_t)v19, 1, v13) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    if (v31(v30, 1, v13) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, (uint64_t)v23, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  if (v31(v30, 1, v13) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AMDPbEvaluationKeyMetadata);
LABEL_9:
    v40 = &demangling cache variable for type metadata for (AMDPbEvaluationKeyMetadata?, AMDPbEvaluationKeyMetadata?);
    v41 = (uint64_t)v19;
LABEL_18:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, v40);
    goto LABEL_19;
  }
  outlined init with take of SecretKey(v30, (uint64_t)v16, type metadata accessor for AMDPbEvaluationKeyMetadata);
  if (*v23 != *v16 || (specialized static Data.== infix(_:_:)(v23[1], v23[2]), (v42 & 1) == 0))
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AMDPbEvaluationKeyMetadata);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AMDPbEvaluationKeyMetadata);
    v41 = (uint64_t)v19;
    v40 = &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?;
    goto LABEL_18;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AMDPbEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AMDPbEvaluationKeyMetadata);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  if ((v43 & 1) == 0)
    goto LABEL_19;
LABEL_4:
  v32 = v67;
  v33 = v64;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67 + *(int *)(v29 + 24), v64, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v34 = v68;
  v35 = v63;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v68 + *(int *)(v29 + 24), v63, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v36 = v66;
  v37 = v66 + *(int *)(v61 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, v66, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35, v37, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  v39 = v65;
  if (v38(v36, 1, v65) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    if (v38(v37, 1, v39) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
LABEL_22:
      v49 = v58;
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
      v51 = v56;
      v52 = v60;
      v50(v56, v32, v60);
      v53 = v57;
      v50(v57, v34, v52);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      v54 = *(void (**)(char *, uint64_t))(v49 + 8);
      v54(v53, v52);
      v54(v51, v52);
      return v45 & 1;
    }
    goto LABEL_17;
  }
  v44 = v59;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v36, v59, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if (v38(v37, 1, v39) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined destroy of AspireApiPECConfig(v44, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_17:
    v40 = &demangling cache variable for type metadata for (AspireHeSerializedEvaluationKey?, AspireHeSerializedEvaluationKey?);
    v41 = v36;
    goto LABEL_18;
  }
  v47 = v55;
  outlined init with take of SecretKey(v37, v55, type metadata accessor for AspireHeSerializedEvaluationKey);
  v48 = specialized static AspireHeSerializedEvaluationKey.== infix(_:_:)(v44, v47);
  outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AspireHeSerializedEvaluationKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v35, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  outlined destroy of AspireApiPECConfig(v44, type metadata accessor for AspireHeSerializedEvaluationKey);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
  if ((v48 & 1) != 0)
    goto LABEL_22;
LABEL_19:
  v45 = 0;
  return v45 & 1;
}

uint64_t specialized static AMDPbHEKeyStatus.== infix(_:_:)(char *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t *v29;
  char v30;
  uint64_t *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t *v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for UnknownStorage();
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v41 - v8;
  v10 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v41 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v41 - v22;
  if (*(_QWORD *)a1 != *a2)
    goto LABEL_8;
  v24 = a1;
  v25 = a2;
  v43 = v7;
  v44 = (uint64_t *)v21;
  v41 = v12;
  v42 = v9;
  v26 = type metadata accessor for AMDPbHEKeyStatus(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v24[*(int *)(v26 + 28)], (uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + *(int *)(v26 + 28), (uint64_t)v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, (uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v27, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  if (v28((uint64_t)v15, 1, v48) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if (v28(v27, 1, v48) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  v29 = v44;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, (uint64_t)v44, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if (v28(v27, 1, v48) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    outlined destroy of AspireApiPECConfig((uint64_t)v29, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for (AspireHeEvaluationKeyConfig?, AspireHeEvaluationKeyConfig?));
LABEL_8:
    v30 = 0;
    return v30 & 1;
  }
  v32 = v41;
  outlined init with take of SecretKey(v27, (uint64_t)v41, type metadata accessor for AspireHeEvaluationKeyConfig);
  v33 = specialized static AspireHeEvaluationKeyConfig.== infix(_:_:)(v29, v32);
  outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v23, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  outlined destroy of AspireApiPECConfig((uint64_t)v29, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  if ((v33 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  if (*((_QWORD *)v24 + 1) == v25[1] && *((_QWORD *)v24 + 2) == v25[2]
    || (v30 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v35 = v45;
    v34 = v46;
    v36 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
    v37 = v42;
    v36(v42, &v24[*(int *)(v26 + 24)], v46);
    v38 = (char *)v25 + *(int *)(v26 + 24);
    v39 = v43;
    v36(v43, v38, v34);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v30 = dispatch thunk of static Equatable.== infix(_:_:)();
    v40 = *(void (**)(char *, uint64_t))(v35 + 8);
    v40(v39, v34);
    v40(v37, v34);
  }
  return v30 & 1;
}

uint64_t specialized static AMDPbPECConfig.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  char v60;
  void (*v61)(char *, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;

  v76 = a2;
  v3 = type metadata accessor for UnknownStorage();
  v65 = *(_QWORD *)(v3 - 8);
  v66 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v64 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v63 = (char *)&v63 - v6;
  v72 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v70 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v67 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?));
  MEMORY[0x24BDAC7A8](v69);
  v73 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v74 = (uint64_t)&v63 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v71 = (uint64_t)&v63 - v14;
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v63 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v63 - v29;
  v31 = type metadata accessor for AMDPbPECConfig(0);
  v32 = *(int *)(v31 + 36);
  v75 = a1;
  v33 = (uint64_t)a1 + v32;
  v34 = (int *)v31;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v33, (uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v76 + v34[9], (uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v35 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, v35, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v36((uint64_t)v21, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v36(v35, 1, v15) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    v37 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    v38 = (uint64_t)v21;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, v37);
    goto LABEL_27;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v36(v35, 1, v15) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AspireApiPECConfig((uint64_t)v25, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  outlined init with take of SecretKey(v35, (uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  v39 = static AspireHeEncryptionParameters.== infix(_:_:)(v25, v18);
  outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v28, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v30, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AspireApiPECConfig((uint64_t)v25, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v39 & 1) == 0)
    goto LABEL_27;
LABEL_9:
  v41 = v75;
  v40 = v76;
  if (*v75 != *v76)
    goto LABEL_27;
  v42 = v71;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v75 + v34[10], v71, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v43 = v74;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v40 + v34[10], v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v44 = v73;
  v45 = v73 + *(int *)(v69 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v73, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v45, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  v47 = v72;
  if (v46(v44, 1, v72) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    if (v46(v45, 1, v47) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v48 = v68;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, v68, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if (v46(v45, 1, v47) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_15:
    v37 = &demangling cache variable for type metadata for (AspireSimilarityPlaintextPacking?, AspireSimilarityPlaintextPacking?);
    v38 = v44;
    goto LABEL_7;
  }
  v49 = v67;
  outlined init with take of SecretKey(v45, v67, type metadata accessor for AspireSimilarityPlaintextPacking);
  v50 = static AspireSimilarityPlaintextPacking.== infix(_:_:)(v48, v49);
  outlined destroy of AspireApiPECConfig(v49, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v74, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspireSimilarityPlaintextPacking);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
  if ((v50 & 1) == 0)
    goto LABEL_27;
LABEL_17:
  if (*((_DWORD *)v41 + 2) != *((_DWORD *)v40 + 2))
    goto LABEL_27;
  if ((v41[3] & 1) != 0)
  {
    if ((v40[3] & 1) != 0)
      goto LABEL_25;
    v51 = 0;
LABEL_24:
    if (v51 == v40[2])
      goto LABEL_25;
LABEL_27:
    v60 = 0;
    return v60 & 1;
  }
  v51 = v41[2];
  if ((v40[3] & 1) == 0)
    goto LABEL_24;
  if (v51)
    goto LABEL_27;
LABEL_25:
  specialized static Data.== infix(_:_:)(v41[4], v41[5]);
  if ((v52 & 1) == 0)
    goto LABEL_27;
  v53 = (char *)v41 + v34[8];
  v55 = v65;
  v54 = v66;
  v56 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v57 = v63;
  v56(v63, v53, v66);
  v58 = (char *)v40 + v34[8];
  v59 = v64;
  v56(v64, v58, v54);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  v61 = *(void (**)(char *, uint64_t))(v55 + 8);
  v61(v59, v54);
  v61(v57, v54);
  return v60 & 1;
}

uint64_t specialized static AMDPbEvaluationKeys.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - v13;
  if ((a3(*a1, *(_QWORD *)a2) & 1) != 0)
  {
    v15 = a4(0);
    v16 = (char *)a1 + *(int *)(v15 + 20);
    v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v17(v14, v16, v8);
    v17(v12, &a2[*(int *)(v15 + 20)], v8);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v12, v8);
    v19(v14, v8);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static AMDPbPECQuery.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  char v53;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = type metadata accessor for UnknownStorage();
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v71 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v70 = (char *)&v66 - v7;
  v8 = type metadata accessor for AMDPbEvaluationKey(0);
  v77 = *(_QWORD *)(v8 - 8);
  v78 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v74 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbEvaluationKey?, AMDPbEvaluationKey?));
  MEMORY[0x24BDAC7A8](v76);
  v79 = (uint64_t)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v75 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v66 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v66 - v17;
  v19 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v80 = *(_QWORD *)(v19 - 8);
  v81 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?));
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v66 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v66 - v32;
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2))
    goto LABEL_16;
  v68 = v18;
  v69 = v28;
  v66 = v21;
  v67 = v16;
  v34 = type metadata accessor for AMDPbPECQuery(0);
  v35 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + *(int *)(v34 + 28), (uint64_t)v33, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v36 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + *(int *)(v34 + 28), (uint64_t)v31, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v37 = (uint64_t)&v24[*(int *)(v22 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, (uint64_t)v24, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, v37, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  v38 = v81;
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  if (v39((uint64_t)v24, 1, v81) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    if (v39(v37, 1, v38) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      goto LABEL_9;
    }
LABEL_7:
    v41 = &demangling cache variable for type metadata for (AspireSimilaritySerializedCiphertextMatrix?, AspireSimilaritySerializedCiphertextMatrix?);
    v42 = (uint64_t)v24;
LABEL_15:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v42, v41);
    goto LABEL_16;
  }
  v40 = (uint64_t)v69;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, (uint64_t)v69, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if (v39(v37, 1, v38) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined destroy of AspireApiPECConfig(v40, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    goto LABEL_7;
  }
  v43 = v37;
  v44 = (uint64_t)v66;
  outlined init with take of SecretKey(v43, (uint64_t)v66, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  v45 = specialized static AspireSimilaritySerializedCiphertextMatrix.== infix(_:_:)(v40, v44);
  outlined destroy of AspireApiPECConfig(v44, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v31, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  outlined destroy of AspireApiPECConfig(v40, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((v45 & 1) == 0)
    goto LABEL_16;
LABEL_9:
  v46 = (uint64_t)v68;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v35 + *(int *)(v34 + 32), (uint64_t)v68, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v81 = v34;
  v47 = (uint64_t)v67;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v36 + *(int *)(v34 + 32), (uint64_t)v67, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v48 = v79;
  v49 = v79 + *(int *)(v76 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v46, v79, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v47, v49, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v50 = v78;
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  if (v51(v48, 1, v78) != 1)
  {
    v52 = v75;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v48, v75, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    if (v51(v49, 1, v50) != 1)
    {
      v55 = v74;
      outlined init with take of SecretKey(v49, v74, type metadata accessor for AMDPbEvaluationKey);
      v56 = specialized static AMDPbEvaluationKey.== infix(_:_:)(v52, v55);
      outlined destroy of AspireApiPECConfig(v55, type metadata accessor for AMDPbEvaluationKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      outlined destroy of AspireApiPECConfig(v52, type metadata accessor for AMDPbEvaluationKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v48, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      if ((v56 & 1) == 0)
        goto LABEL_16;
      goto LABEL_19;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined destroy of AspireApiPECConfig(v52, type metadata accessor for AMDPbEvaluationKey);
    goto LABEL_14;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if (v51(v49, 1, v50) != 1)
  {
LABEL_14:
    v41 = &demangling cache variable for type metadata for (AMDPbEvaluationKey?, AMDPbEvaluationKey?);
    v42 = v48;
    goto LABEL_15;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v48, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
LABEL_19:
  specialized static Data.== infix(_:_:)(v35[1], v35[2]);
  if ((v57 & 1) != 0)
  {
    v58 = v81;
    v60 = v72;
    v59 = v73;
    v61 = v36;
    v62 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
    v63 = v70;
    v62(v70, (char *)v35 + *(int *)(v81 + 24), v73);
    v64 = v71;
    v62(v71, (char *)v61 + *(int *)(v58 + 24), v59);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v53 = dispatch thunk of static Equatable.== infix(_:_:)();
    v65 = *(void (**)(char *, uint64_t))(v60 + 8);
    v65(v64, v59);
    v65(v63, v59);
    return v53 & 1;
  }
LABEL_16:
  v53 = 0;
  return v53 & 1;
}

uint64_t specialized static AMDPbHEConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v39 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v22, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of SecretKey(v22, v36, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      v25 = specialized static AMDPbHEConfig.OneOf_Config.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AMDPbHEConfig.OneOf_Config);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config?, AMDPbHEConfig.OneOf_Config?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
LABEL_8:
  v26 = type metadata accessor for AMDPbHEConfig(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AMDPbPIRConfig.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v61 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v60 = (char *)&v59 - v5;
  v70 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v64 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v72 = (uint64_t)&v59 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v59 - v13;
  v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v59 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v59 - v28;
  v30 = type metadata accessor for AMDPbPIRConfig(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v73 + *(int *)(v30 + 36), (uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v68 = v30;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v74 + *(int *)(v30 + 36), (uint64_t)v27, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, v31, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      goto LABEL_9;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (AspireHeEncryptionParameters?, AspireHeEncryptionParameters?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, v33);
    goto LABEL_34;
  }
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for AspireHeEncryptionParameters);
    goto LABEL_6;
  }
  outlined init with take of SecretKey(v31, (uint64_t)v17, type metadata accessor for AspireHeEncryptionParameters);
  v35 = static AspireHeEncryptionParameters.== infix(_:_:)(v24, v17);
  outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v27, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v29, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for AspireHeEncryptionParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  if ((v35 & 1) == 0)
    goto LABEL_34;
LABEL_9:
  v37 = v73;
  v36 = v74;
  if ((specialized static Array<A>.== infix(_:_:)(*v73, *v74) & 1) == 0)
    goto LABEL_34;
  v39 = v68;
  v38 = v69;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v37 + *(int *)(v68 + 40), v69, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v40 = v72;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v36 + *(int *)(v39 + 40), v72, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v41 = v71;
  v42 = v71 + *(int *)(v66 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v71, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, v42, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v44 = v70;
  if (v43(v41, 1, v70) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    if (v43(v42, 1, v44) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  v47 = v65;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v41, v65, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if (v43(v42, 1, v44) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AspirePirKeywordPirParameters);
LABEL_20:
    v33 = &demangling cache variable for type metadata for (AspirePirKeywordPirParameters?, AspirePirKeywordPirParameters?);
    v34 = v41;
    goto LABEL_7;
  }
  v48 = v64;
  outlined init with take of SecretKey(v42, v64, type metadata accessor for AspirePirKeywordPirParameters);
  if (*(_QWORD *)v47 != *(_QWORD *)v48 || *(unsigned __int8 *)(v47 + 8) != *(unsigned __int8 *)(v48 + 8))
  {
    outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspirePirKeywordPirParameters);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AspirePirKeywordPirParameters);
    v34 = v41;
    v33 = &demangling cache variable for type metadata for AspirePirKeywordPirParameters?;
    goto LABEL_7;
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireApiPECConfig(v48, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v72, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v38, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AspirePirKeywordPirParameters);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v41, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
  if ((v49 & 1) == 0)
    goto LABEL_34;
LABEL_13:
  v45 = v37[1];
  v46 = v36[1];
  if (*((_BYTE *)v36 + 16) != 1)
  {
    if (v45 != v46)
      goto LABEL_34;
    goto LABEL_31;
  }
  if (!v46)
  {
    if (!v45)
      goto LABEL_31;
    goto LABEL_34;
  }
  if (v46 != 1)
  {
    if (v45 == 2)
      goto LABEL_31;
LABEL_34:
    v56 = 0;
    return v56 & 1;
  }
  if (v45 != 1)
    goto LABEL_34;
LABEL_31:
  if (v37[3] != v36[3])
    goto LABEL_34;
  specialized static Data.== infix(_:_:)(v37[4], v37[5]);
  if ((v50 & 1) == 0)
    goto LABEL_34;
  v52 = v62;
  v51 = v63;
  v53 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  v54 = v60;
  v53(v60, (char *)v37 + *(int *)(v39 + 32), v63);
  v55 = v61;
  v53(v61, (char *)v36 + *(int *)(v39 + 32), v51);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  v57 = *(void (**)(char *, uint64_t))(v52 + 8);
  v57(v55, v51);
  v57(v54, v51);
  return v56 & 1;
}

uint64_t specialized static AMDPbHEConfig.OneOf_Config.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for AMDPbPECConfig(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for AMDPbPIRConfig(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v27 - v14);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config, AMDPbHEConfig.OneOf_Config));
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of SecretKey(a1, (uint64_t)v19, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  outlined init with copy of SecretKey(a2, v20, type metadata accessor for AMDPbHEConfig.OneOf_Config);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of SecretKey((uint64_t)v19, (uint64_t)v13, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SecretKey(v20, (uint64_t)v6, type metadata accessor for AMDPbPECConfig);
      v21 = specialized static AMDPbPECConfig.== infix(_:_:)(v13, v6);
      outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbPECConfig);
      v22 = (uint64_t)v13;
      v23 = type metadata accessor for AMDPbPECConfig;
LABEL_9:
      outlined destroy of AspireApiPECConfig(v22, v23);
      outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for AMDPbHEConfig.OneOf_Config);
      return v21 & 1;
    }
    v24 = type metadata accessor for AMDPbPECConfig;
    v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of SecretKey((uint64_t)v19, (uint64_t)v15, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey(v20, (uint64_t)v9, type metadata accessor for AMDPbPIRConfig);
      v21 = specialized static AMDPbPIRConfig.== infix(_:_:)(v15, v9);
      outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AMDPbPIRConfig);
      v22 = (uint64_t)v15;
      v23 = type metadata accessor for AMDPbPIRConfig;
      goto LABEL_9;
    }
    v24 = type metadata accessor for AMDPbPIRConfig;
    v25 = (uint64_t)v15;
  }
  outlined destroy of AspireApiPECConfig(v25, v24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for (AMDPbHEConfig.OneOf_Config, AMDPbHEConfig.OneOf_Config));
  v21 = 0;
  return v21 & 1;
}

uint64_t type metadata accessor for AMDPbHEKeyStatus(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEKeyStatus);
}

uint64_t type metadata accessor for AMDPbPIRShardConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPIRShardConfig);
}

uint64_t type metadata accessor for AMDPbHEQueries(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEQueries);
}

uint64_t type metadata accessor for AMDPbHEReplies(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEReplies);
}

uint64_t type metadata accessor for AMDPbHEQuery(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEQuery);
}

uint64_t type metadata accessor for AMDPbHEQuery.OneOf_Query(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEQuery.OneOf_Query);
}

uint64_t type metadata accessor for AMDPbPIRQuery(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPIRQuery);
}

uint64_t type metadata accessor for AMDPbEvaluationKey(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbEvaluationKey);
}

uint64_t type metadata accessor for AMDPbPECQuery(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPECQuery);
}

uint64_t specialized static AMDPbHEReply.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v39 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, v22, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of SecretKey(v22, v36, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      v25 = specialized static AMDPbHEReply.OneOf_Reply.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of AspireApiPECConfig(v24, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AMDPbHEReply.OneOf_Reply);
LABEL_6:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply?, AMDPbHEReply.OneOf_Reply?));
    goto LABEL_9;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
LABEL_8:
  v26 = type metadata accessor for AMDPbHEReply(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AMDPbHEReply.OneOf_Reply.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a2;
  v2 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v13 = (uint64_t *)((char *)&v26 - v12);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply, AMDPbHEReply.OneOf_Reply));
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  outlined init with copy of SecretKey(v26, (uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  outlined init with copy of SecretKey(v27, v18, type metadata accessor for AMDPbHEReply.OneOf_Reply);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of SecretKey((uint64_t)v17, (uint64_t)v11, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SecretKey(v18, (uint64_t)v4, type metadata accessor for AMDPbPECReply);
      if ((specialized static Array<A>.== infix(_:_:)(*v11, *v4) & 1) != 0)
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
        {
          v19 = type metadata accessor for AMDPbPECReply;
          outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbPECReply);
          v20 = (uint64_t)v11;
LABEL_13:
          outlined destroy of AspireApiPECConfig(v20, v19);
          outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
          return 1;
        }
      }
      v24 = type metadata accessor for AMDPbPECReply;
      outlined destroy of AspireApiPECConfig((uint64_t)v4, type metadata accessor for AMDPbPECReply);
      v25 = (uint64_t)v11;
LABEL_16:
      outlined destroy of AspireApiPECConfig(v25, v24);
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEReply.OneOf_Reply);
      return 0;
    }
    v21 = type metadata accessor for AMDPbPECReply;
    v22 = (uint64_t)v11;
  }
  else
  {
    outlined init with copy of SecretKey((uint64_t)v17, (uint64_t)v13, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey(v18, (uint64_t)v7, type metadata accessor for AMDPbPIRReply);
      if ((specialized static Array<A>.== infix(_:_:)(*v13, *v7) & 1) != 0)
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
        {
          v19 = type metadata accessor for AMDPbPIRReply;
          outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPIRReply);
          v20 = (uint64_t)v13;
          goto LABEL_13;
        }
      }
      v24 = type metadata accessor for AMDPbPIRReply;
      outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbPIRReply);
      v25 = (uint64_t)v13;
      goto LABEL_16;
    }
    v21 = type metadata accessor for AMDPbPIRReply;
    v22 = (uint64_t)v13;
  }
  outlined destroy of AspireApiPECConfig(v22, v21);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for (AMDPbHEReply.OneOf_Reply, AMDPbHEReply.OneOf_Reply));
  return 0;
}

uint64_t specialized static AMDPbHEQuery.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;

  v4 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v42 = (char *)&v40 - v7;
  v8 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v41 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v40 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v40 - v21;
  v23 = *a1;
  v24 = a1[1];
  v25 = *(_QWORD *)a2;
  v26 = *((_QWORD *)a2 + 1);
  v45 = a2;
  if (v23 == v25 && v24 == v26 || (v27 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v40 = v4;
    v28 = type metadata accessor for AMDPbHEQuery(0);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + *(int *)(v28 + 20), (uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v45[*(int *)(v28 + 20)], (uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, v29, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v30((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      if (v30(v29, 1, v8) == 1)
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
LABEL_11:
        v33 = v44;
        v34 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
        v35 = v42;
        v36 = v40;
        v34(v42, (char *)a1 + *(int *)(v28 + 24), v40);
        v37 = v43;
        v34(v43, &v45[*(int *)(v28 + 24)], v36);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(char *, uint64_t))(v33 + 8);
        v38(v37, v36);
        v38(v35, v36);
        return v27 & 1;
      }
    }
    else
    {
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      if (v30(v29, 1, v8) != 1)
      {
        v31 = v41;
        outlined init with take of SecretKey(v29, v41, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        v32 = specialized static AMDPbHEQuery.OneOf_Query.== infix(_:_:)((uint64_t)v17, v31);
        outlined destroy of AspireApiPECConfig(v31, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
        outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEQuery.OneOf_Query);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
        if ((v32 & 1) != 0)
          goto LABEL_11;
LABEL_12:
        v27 = 0;
        return v27 & 1;
      }
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v22, &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query?, AMDPbHEQuery.OneOf_Query?));
    goto LABEL_12;
  }
  return v27 & 1;
}

uint64_t specialized static AMDPbPIRQuery.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  _DWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  _DWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;

  v79 = type metadata accessor for UnknownStorage();
  v77 = *(_QWORD *)(v79 - 8);
  v4 = MEMORY[0x24BDAC7A8](v79);
  v76 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v75 = (char *)&v69 - v6;
  v7 = type metadata accessor for AMDPbEvaluationKey(0);
  v8 = *(_QWORD *)(v7 - 8);
  v81 = v7;
  v82 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v78 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbEvaluationKey?, AMDPbEvaluationKey?));
  MEMORY[0x24BDAC7A8](v80);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v69 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v69 - v19;
  v21 = type metadata accessor for AspirePirEncryptedIndices(0);
  v83 = *(_QWORD *)(v21 - 8);
  v84 = (char *)v21;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (uint64_t *)((char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspirePirEncryptedIndices?, AspirePirEncryptedIndices?));
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v29 = MEMORY[0x24BDAC7A8](v28);
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v69 - v32;
  if (*a1 != *a2)
    goto LABEL_20;
  v70 = v23;
  v71 = v20;
  v73 = v18;
  v74 = (uint64_t *)v30;
  v69 = v15;
  v72 = v11;
  v34 = v31;
  v35 = type metadata accessor for AMDPbPIRQuery(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + *(int *)(v35 + 28), (uint64_t)v33, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + *(int *)(v35 + 28), v34, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v36 = (uint64_t)&v26[*(int *)(v24 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, (uint64_t)v26, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34, v36, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  v37 = (uint64_t)v84;
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  v39 = a1;
  if (v38((uint64_t)v26, 1, (uint64_t)v84) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    if (v38(v36, 1, v37) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  v48 = a2;
  v49 = v74;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v26, (uint64_t)v74, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if (v38(v36, 1, v37) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AspireApiPECConfig((uint64_t)v49, type metadata accessor for AspirePirEncryptedIndices);
LABEL_10:
    v50 = &demangling cache variable for type metadata for (AspirePirEncryptedIndices?, AspirePirEncryptedIndices?);
    v51 = (uint64_t)v26;
LABEL_19:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v51, v50);
    goto LABEL_20;
  }
  v52 = v70;
  outlined init with take of SecretKey(v36, (uint64_t)v70, type metadata accessor for AspirePirEncryptedIndices);
  if ((specialized static Array<A>.== infix(_:_:)(*v49, *v52) & 1) == 0 || v49[1] != v52[1])
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v52, type metadata accessor for AspirePirEncryptedIndices);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    outlined destroy of AspireApiPECConfig((uint64_t)v49, type metadata accessor for AspirePirEncryptedIndices);
    v51 = (uint64_t)v26;
    v50 = &demangling cache variable for type metadata for AspirePirEncryptedIndices?;
    goto LABEL_19;
  }
  v84 = v26;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AspireApiPECConfig((uint64_t)v52, type metadata accessor for AspirePirEncryptedIndices);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v33, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined destroy of AspireApiPECConfig((uint64_t)v49, type metadata accessor for AspirePirEncryptedIndices);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v84, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  a2 = v48;
  if ((v53 & 1) == 0)
    goto LABEL_20;
LABEL_5:
  v40 = (uint64_t)v71;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v39 + *(int *)(v35 + 32), (uint64_t)v71, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v84 = (char *)v35;
  v41 = a2;
  v42 = (uint64_t)a2 + *(int *)(v35 + 32);
  v43 = (uint64_t)v73;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, (uint64_t)v73, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v44 = (uint64_t)v72;
  v45 = (uint64_t)&v72[*(int *)(v80 + 48)];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v40, (uint64_t)v72, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v45, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  v46 = v81;
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  if (v47(v44, 1, v81) != 1)
  {
    v54 = (uint64_t)v69;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, (uint64_t)v69, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    if (v47(v45, 1, v46) != 1)
    {
      v57 = v78;
      outlined init with take of SecretKey(v45, v78, type metadata accessor for AMDPbEvaluationKey);
      v58 = specialized static AMDPbEvaluationKey.== infix(_:_:)(v54, v57);
      outlined destroy of AspireApiPECConfig(v57, type metadata accessor for AMDPbEvaluationKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v73, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      outlined destroy of AspireApiPECConfig(v54, type metadata accessor for AMDPbEvaluationKey);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
      if ((v58 & 1) == 0)
        goto LABEL_20;
      goto LABEL_23;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v73, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined destroy of AspireApiPECConfig(v54, type metadata accessor for AMDPbEvaluationKey);
    goto LABEL_18;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v40, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  if (v47(v45, 1, v46) != 1)
  {
LABEL_18:
    v50 = &demangling cache variable for type metadata for (AMDPbEvaluationKey?, AMDPbEvaluationKey?);
    v51 = v44;
    goto LABEL_19;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
LABEL_23:
  specialized static Data.== infix(_:_:)(*((_QWORD *)v39 + 1), *((_QWORD *)v39 + 2));
  if ((v59 & 1) != 0)
  {
    v60 = (uint64_t)v84;
    v61 = (char *)v39 + *((int *)v84 + 6);
    v62 = v77;
    v63 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v64 = v75;
    v65 = v79;
    v63(v75, v61, v79);
    v66 = (char *)v41 + *(int *)(v60 + 24);
    v67 = v76;
    v63(v76, v66, v65);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v55 = dispatch thunk of static Equatable.== infix(_:_:)();
    v68 = *(void (**)(char *, uint64_t))(v62 + 8);
    v68(v67, v65);
    v68(v64, v65);
    return v55 & 1;
  }
LABEL_20:
  v55 = 0;
  return v55 & 1;
}

uint64_t specialized static AMDPbHEQuery.OneOf_Query.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for AMDPbPECQuery(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for AMDPbPIRQuery(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (_DWORD *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (_DWORD *)((char *)&v27 - v14);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query, AMDPbHEQuery.OneOf_Query));
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of SecretKey(a1, (uint64_t)v19, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  outlined init with copy of SecretKey(a2, v20, type metadata accessor for AMDPbHEQuery.OneOf_Query);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of SecretKey((uint64_t)v19, (uint64_t)v13, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SecretKey(v20, (uint64_t)v6, type metadata accessor for AMDPbPECQuery);
      v21 = specialized static AMDPbPECQuery.== infix(_:_:)(v13, v6);
      outlined destroy of AspireApiPECConfig((uint64_t)v6, type metadata accessor for AMDPbPECQuery);
      v22 = (uint64_t)v13;
      v23 = type metadata accessor for AMDPbPECQuery;
LABEL_9:
      outlined destroy of AspireApiPECConfig(v22, v23);
      outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for AMDPbHEQuery.OneOf_Query);
      return v21 & 1;
    }
    v24 = type metadata accessor for AMDPbPECQuery;
    v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of SecretKey((uint64_t)v19, (uint64_t)v15, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of SecretKey(v20, (uint64_t)v9, type metadata accessor for AMDPbPIRQuery);
      v21 = specialized static AMDPbPIRQuery.== infix(_:_:)(v15, v9);
      outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AMDPbPIRQuery);
      v22 = (uint64_t)v15;
      v23 = type metadata accessor for AMDPbPIRQuery;
      goto LABEL_9;
    }
    v24 = type metadata accessor for AMDPbPIRQuery;
    v25 = (uint64_t)v15;
  }
  outlined destroy of AspireApiPECConfig(v25, v24);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v19, &demangling cache variable for type metadata for (AMDPbHEQuery.OneOf_Query, AMDPbHEQuery.OneOf_Query));
  v21 = 0;
  return v21 & 1;
}

uint64_t outlined assign with take of AMDPbHEConfig.OneOf_Config?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AMDPbHEReply.OneOf_Reply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEReply.OneOf_Reply);
}

uint64_t type metadata accessor for AMDPbPIRReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPIRReply);
}

uint64_t type metadata accessor for AMDPbPECReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPECReply);
}

uint64_t type metadata accessor for AMDPbHEReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbHEReply);
}

uint64_t type metadata accessor for AMDPbEvaluationKeys(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbEvaluationKeys);
}

uint64_t type metadata accessor for AMDPbEvaluationKeyMetadata(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbEvaluationKeyMetadata);
}

uint64_t type metadata accessor for AMDPbPECShardReply(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbPECShardReply);
}

uint64_t type metadata accessor for AMDPbFetchHEConfigs(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for AMDPbFetchHEConfigs);
}

uint64_t type metadata accessor for AMDPbHEConfigsReply(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
  if (!lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspirePirPirAlgorithm, &type metadata for AspirePirPirAlgorithm);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
  if (!lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspirePirPirAlgorithm, &type metadata for AspirePirPirAlgorithm);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
  if (!lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspirePirPirAlgorithm, &type metadata for AspirePirPirAlgorithm);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm;
  if (!lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspirePirPirAlgorithm, &type metadata for AspirePirPirAlgorithm);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspirePirPirAlgorithm and conformance AspirePirPirAlgorithm);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric;
  if (!lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireSimilaritySimilarityMetric, &type metadata for AspireSimilaritySimilarityMetric);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric;
  if (!lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireSimilaritySimilarityMetric, &type metadata for AspireSimilaritySimilarityMetric);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric;
  if (!lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireSimilaritySimilarityMetric, &type metadata for AspireSimilaritySimilarityMetric);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric;
  if (!lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AspireSimilaritySimilarityMetric, &type metadata for AspireSimilaritySimilarityMetric);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AspireSimilaritySimilarityMetric and conformance AspireSimilaritySimilarityMetric);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbFetchHEConfigs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, type metadata accessor for AMDPbFetchHEConfigs, (uint64_t)&protocol conformance descriptor for AMDPbFetchHEConfigs);
}

uint64_t base witness table accessor for Message in AMDPbFetchHEConfigs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, type metadata accessor for AMDPbFetchHEConfigs, (uint64_t)&protocol conformance descriptor for AMDPbFetchHEConfigs);
}

uint64_t base witness table accessor for Hashable in AMDPbFetchHEConfigs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, type metadata accessor for AMDPbFetchHEConfigs, (uint64_t)&protocol conformance descriptor for AMDPbFetchHEConfigs);
}

uint64_t base witness table accessor for Equatable in AMDPbFetchHEConfigs()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbFetchHEConfigs and conformance AMDPbFetchHEConfigs, type metadata accessor for AMDPbFetchHEConfigs, (uint64_t)&protocol conformance descriptor for AMDPbFetchHEConfigs);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEConfigsReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
}

uint64_t base witness table accessor for Message in AMDPbHEConfigsReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
}

uint64_t base witness table accessor for Hashable in AMDPbHEConfigsReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
}

uint64_t base witness table accessor for Equatable in AMDPbHEConfigsReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfigsReply and conformance AMDPbHEConfigsReply, type metadata accessor for AMDPbHEConfigsReply, (uint64_t)&protocol conformance descriptor for AMDPbHEConfigsReply);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
}

uint64_t base witness table accessor for Message in AMDPbHEConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
}

uint64_t base witness table accessor for Hashable in AMDPbHEConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
}

uint64_t base witness table accessor for Equatable in AMDPbHEConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEConfig and conformance AMDPbHEConfig, type metadata accessor for AMDPbHEConfig, (uint64_t)&protocol conformance descriptor for AMDPbHEConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEKeyStatus()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, type metadata accessor for AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus);
}

uint64_t base witness table accessor for Message in AMDPbHEKeyStatus()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, type metadata accessor for AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus);
}

uint64_t base witness table accessor for Hashable in AMDPbHEKeyStatus()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, type metadata accessor for AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus);
}

uint64_t base witness table accessor for Equatable in AMDPbHEKeyStatus()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEKeyStatus and conformance AMDPbHEKeyStatus, type metadata accessor for AMDPbHEKeyStatus, (uint64_t)&protocol conformance descriptor for AMDPbHEKeyStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPIRConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
}

uint64_t base witness table accessor for Message in AMDPbPIRConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
}

uint64_t base witness table accessor for Hashable in AMDPbPIRConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
}

uint64_t base witness table accessor for Equatable in AMDPbPIRConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRConfig and conformance AMDPbPIRConfig, type metadata accessor for AMDPbPIRConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPIRShardConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, type metadata accessor for AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
}

uint64_t base witness table accessor for Message in AMDPbPIRShardConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, type metadata accessor for AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
}

uint64_t base witness table accessor for Hashable in AMDPbPIRShardConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, type metadata accessor for AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
}

uint64_t base witness table accessor for Equatable in AMDPbPIRShardConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRShardConfig and conformance AMDPbPIRShardConfig, type metadata accessor for AMDPbPIRShardConfig, (uint64_t)&protocol conformance descriptor for AMDPbPIRShardConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPECConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
}

uint64_t base witness table accessor for Message in AMDPbPECConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
}

uint64_t base witness table accessor for Hashable in AMDPbPECConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
}

uint64_t base witness table accessor for Equatable in AMDPbPECConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECConfig and conformance AMDPbPECConfig, type metadata accessor for AMDPbPECConfig, (uint64_t)&protocol conformance descriptor for AMDPbPECConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEQueries()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, type metadata accessor for AMDPbHEQueries, (uint64_t)&protocol conformance descriptor for AMDPbHEQueries);
}

uint64_t base witness table accessor for Message in AMDPbHEQueries()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, type metadata accessor for AMDPbHEQueries, (uint64_t)&protocol conformance descriptor for AMDPbHEQueries);
}

uint64_t base witness table accessor for Hashable in AMDPbHEQueries()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, type metadata accessor for AMDPbHEQueries, (uint64_t)&protocol conformance descriptor for AMDPbHEQueries);
}

uint64_t base witness table accessor for Equatable in AMDPbHEQueries()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQueries and conformance AMDPbHEQueries, type metadata accessor for AMDPbHEQueries, (uint64_t)&protocol conformance descriptor for AMDPbHEQueries);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEReplies()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
}

uint64_t base witness table accessor for Message in AMDPbHEReplies()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
}

uint64_t base witness table accessor for Hashable in AMDPbHEReplies()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
}

uint64_t base witness table accessor for Equatable in AMDPbHEReplies()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReplies and conformance AMDPbHEReplies, type metadata accessor for AMDPbHEReplies, (uint64_t)&protocol conformance descriptor for AMDPbHEReplies);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, type metadata accessor for AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
}

uint64_t base witness table accessor for Message in AMDPbHEQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, type metadata accessor for AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
}

uint64_t base witness table accessor for Hashable in AMDPbHEQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, type metadata accessor for AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
}

uint64_t base witness table accessor for Equatable in AMDPbHEQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, type metadata accessor for AMDPbHEQuery, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbHEReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, type metadata accessor for AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
}

uint64_t base witness table accessor for Message in AMDPbHEReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, type metadata accessor for AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
}

uint64_t base witness table accessor for Hashable in AMDPbHEReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, type metadata accessor for AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
}

uint64_t base witness table accessor for Equatable in AMDPbHEReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEReply and conformance AMDPbHEReply, type metadata accessor for AMDPbHEReply, (uint64_t)&protocol conformance descriptor for AMDPbHEReply);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbEvaluationKeys()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, type metadata accessor for AMDPbEvaluationKeys, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeys);
}

uint64_t base witness table accessor for Message in AMDPbEvaluationKeys()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, type metadata accessor for AMDPbEvaluationKeys, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeys);
}

uint64_t base witness table accessor for Hashable in AMDPbEvaluationKeys()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, type metadata accessor for AMDPbEvaluationKeys, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeys);
}

uint64_t base witness table accessor for Equatable in AMDPbEvaluationKeys()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeys and conformance AMDPbEvaluationKeys, type metadata accessor for AMDPbEvaluationKeys, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
}

uint64_t base witness table accessor for Message in AMDPbEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
}

uint64_t base witness table accessor for Hashable in AMDPbEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
}

uint64_t base witness table accessor for Equatable in AMDPbEvaluationKey()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Message in AMDPbEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Hashable in AMDPbEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
}

uint64_t base witness table accessor for Equatable in AMDPbEvaluationKeyMetadata()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPIRQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
}

uint64_t base witness table accessor for Message in AMDPbPIRQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
}

uint64_t base witness table accessor for Hashable in AMDPbPIRQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
}

uint64_t base witness table accessor for Equatable in AMDPbPIRQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPIRReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
}

uint64_t base witness table accessor for Message in AMDPbPIRReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
}

uint64_t base witness table accessor for Hashable in AMDPbPIRReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
}

uint64_t base witness table accessor for Equatable in AMDPbPIRReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRReply and conformance AMDPbPIRReply, type metadata accessor for AMDPbPIRReply, (uint64_t)&protocol conformance descriptor for AMDPbPIRReply);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPECQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
}

uint64_t base witness table accessor for Message in AMDPbPECQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
}

uint64_t base witness table accessor for Hashable in AMDPbPECQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
}

uint64_t base witness table accessor for Equatable in AMDPbPECQuery()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPECShardReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, type metadata accessor for AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply);
}

uint64_t base witness table accessor for Message in AMDPbPECShardReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, type metadata accessor for AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply);
}

uint64_t base witness table accessor for Hashable in AMDPbPECShardReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, type metadata accessor for AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply);
}

uint64_t base witness table accessor for Equatable in AMDPbPECShardReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECShardReply and conformance AMDPbPECShardReply, type metadata accessor for AMDPbPECShardReply, (uint64_t)&protocol conformance descriptor for AMDPbPECShardReply);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AMDPbPECReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, type metadata accessor for AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
}

uint64_t base witness table accessor for Message in AMDPbPECReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, type metadata accessor for AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
}

uint64_t base witness table accessor for Hashable in AMDPbPECReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, type metadata accessor for AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
}

uint64_t base witness table accessor for Equatable in AMDPbPECReply()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECReply and conformance AMDPbPECReply, type metadata accessor for AMDPbPECReply, (uint64_t)&protocol conformance descriptor for AMDPbPECReply);
}

uint64_t sub_237BF2534@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.pirConfig.getter(a1);
}

uint64_t sub_237BF2554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPIRConfig, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?, type metadata accessor for AMDPbHEConfig.OneOf_Config);
}

uint64_t sub_237BF2584@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEConfig.pecConfig.getter(a1);
}

uint64_t sub_237BF25A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPECConfig, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?, type metadata accessor for AMDPbHEConfig.OneOf_Config);
}

uint64_t sub_237BF25D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEKeyStatus.keyConfig : AMDPbHEKeyStatus(a1, a2, a3, a4, type metadata accessor for AspireHeEvaluationKeyConfig, type metadata accessor for AMDPbHEKeyStatus, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
}

uint64_t sub_237BF2604@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPIRConfig.encryptionParameters.getter(a1);
}

uint64_t sub_237BF2624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRConfig.encryptionParameters : AMDPbPIRConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPIRConfig);
}

uint64_t sub_237BF2644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRConfig.keywordPirParams : AMDPbPIRConfig(a1, a2, a3, a4, type metadata accessor for AspirePirKeywordPirParameters, type metadata accessor for AMDPbPIRConfig, &demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
}

uint64_t sub_237BF2670@<X0>(uint64_t a1@<X8>)
{
  return AMDPbPECConfig.encryptionParameters.getter(a1);
}

uint64_t sub_237BF2690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRConfig.encryptionParameters : AMDPbPIRConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPECConfig);
}

uint64_t sub_237BF26B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRConfig.keywordPirParams : AMDPbPIRConfig(a1, a2, a3, a4, type metadata accessor for AspireSimilarityPlaintextPacking, type metadata accessor for AMDPbPECConfig, (uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
}

uint64_t sub_237BF26DC@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEQuery.pirQuery.getter(a1);
}

uint64_t sub_237BF26FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEQuery.pirQuery : AMDPbHEQuery(a1, a2, a3, a4, type metadata accessor for AMDPbPIRQuery);
}

uint64_t sub_237BF271C@<X0>(uint64_t a1@<X8>)
{
  return AMDPbHEQuery.pecQuery.getter(a1);
}

uint64_t sub_237BF273C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEQuery.pirQuery : AMDPbHEQuery(a1, a2, a3, a4, type metadata accessor for AMDPbPECQuery);
}

uint64_t sub_237BF2760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPIRReply, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?, type metadata accessor for AMDPbHEReply.OneOf_Reply);
}

uint64_t sub_237BF2794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEConfig.pirConfig : AMDPbHEConfig(a1, a2, a3, a4, type metadata accessor for AMDPbPECReply, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?, type metadata accessor for AMDPbHEReply.OneOf_Reply);
}

uint64_t sub_237BF27D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEKeyStatus.keyConfig : AMDPbHEKeyStatus(a1, a2, a3, a4, type metadata accessor for AspirePirEncryptedIndices, type metadata accessor for AMDPbPIRQuery, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
}

uint64_t sub_237BF2804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(a1, type metadata accessor for AMDPbPIRQuery, a2);
}

uint64_t sub_237BF2820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(a1, a2, a3, a4, type metadata accessor for AMDPbPIRQuery);
}

uint64_t sub_237BF283C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AMDPbPECQuery.query : AMDPbPECQuery(a1, type metadata accessor for AMDPbPECQuery, a2);
}

uint64_t sub_237BF2858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEKeyStatus.keyConfig : AMDPbHEKeyStatus(a1, a2, a3, a4, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AMDPbPECQuery, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
}

uint64_t sub_237BF2884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(a1, type metadata accessor for AMDPbPECQuery, a2);
}

uint64_t sub_237BF28A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbPIRQuery.evaluationKey : AMDPbPIRQuery(a1, a2, a3, a4, type metadata accessor for AMDPbPECQuery);
}

uint64_t sub_237BF28BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AMDPbPECQuery.query : AMDPbPECQuery(a1, type metadata accessor for AMDPbPECShardReply, a2);
}

uint64_t sub_237BF28D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AMDPbHEKeyStatus.keyConfig : AMDPbHEKeyStatus(a1, a2, a3, a4, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix, type metadata accessor for AMDPbPECShardReply, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
}

uint64_t initializeBufferWithCopyOfBuffer for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for AMDPbFetchHEConfigs(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for AMDPbFetchHEConfigs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbFetchHEConfigs()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF2A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AMDPbFetchHEConfigs()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF2AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for AMDPbFetchHEConfigs()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEConfigsReply(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AMDPbHEConfigsReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AMDPbHEConfigsReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AMDPbHEConfigsReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for AMDPbHEConfigsReply(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for AMDPbHEConfigsReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEConfigsReply()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF2E70(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEConfigsReply()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237BF2EF8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AMDPbHEConfigsReply()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v70 = v8;
        *a1 = *a2;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        v11 = a2[4];
        v12 = a2[5];
        outlined copy of Data._Representation(v11, v12);
        a1[4] = v11;
        a1[5] = v12;
        v13 = (int *)type metadata accessor for AMDPbPECConfig(0);
        v14 = v13[8];
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
        v68(v15, v16, v17);
        v18 = v13[9];
        v19 = (_OWORD *)((char *)a1 + v18);
        v20 = (_OWORD *)((char *)a2 + v18);
        v21 = type metadata accessor for AspireHeEncryptionParameters(0);
        v22 = *(_QWORD *)(v21 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          *v19 = *v20;
          v38 = *((_QWORD *)v20 + 3);
          *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
          *((_QWORD *)v19 + 3) = v38;
          *((_BYTE *)v19 + 32) = *((_BYTE *)v20 + 32);
          *((_QWORD *)v19 + 5) = *((_QWORD *)v20 + 5);
          *((_BYTE *)v19 + 48) = *((_BYTE *)v20 + 48);
          *((_QWORD *)v19 + 7) = *((_QWORD *)v20 + 7);
          *((_BYTE *)v19 + 64) = *((_BYTE *)v20 + 64);
          v39 = *(int *)(v21 + 40);
          v66 = (char *)v19 + v39;
          v40 = (char *)v20 + v39;
          swift_bridgeObjectRetain();
          v68(v66, v40, v17);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        v41 = v13[10];
        v42 = (char *)a1 + v41;
        v43 = (char *)a2 + v41;
        v44 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v45 = *(_QWORD *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          v57 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v67 = *(_QWORD *)(v57 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v43, 1, v57))
          {
            v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v68(v42, v43, v17);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v42, 0, 1, v57);
          }
          v68(&v42[*(int *)(v44 + 20)], &v43[*(int *)(v44 + 20)], v17);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
        }
        v8 = v70;
      }
      else
      {
        v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        v25 = a2[4];
        a1[3] = a2[3];
        v26 = a2[5];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v25, v26);
        a1[4] = v25;
        a1[5] = v26;
        v27 = type metadata accessor for AMDPbPIRConfig(0);
        v28 = *(int *)(v27 + 32);
        v29 = (char *)a1 + v28;
        v30 = (char *)a2 + v28;
        v31 = type metadata accessor for UnknownStorage();
        v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
        v32(v29, v30, v31);
        v71 = v27;
        v33 = *(int *)(v27 + 36);
        v34 = (_OWORD *)((char *)a1 + v33);
        v35 = (_OWORD *)((char *)a2 + v33);
        v36 = type metadata accessor for AspireHeEncryptionParameters(0);
        v65 = *(_QWORD *)(v36 - 8);
        v69 = v32;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v65 + 48))(v35, 1, v36))
        {
          v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          *v34 = *v35;
          v47 = *((_QWORD *)v35 + 3);
          *((_QWORD *)v34 + 2) = *((_QWORD *)v35 + 2);
          *((_QWORD *)v34 + 3) = v47;
          *((_BYTE *)v34 + 32) = *((_BYTE *)v35 + 32);
          *((_QWORD *)v34 + 5) = *((_QWORD *)v35 + 5);
          *((_BYTE *)v34 + 48) = *((_BYTE *)v35 + 48);
          *((_QWORD *)v34 + 7) = *((_QWORD *)v35 + 7);
          *((_BYTE *)v34 + 64) = *((_BYTE *)v35 + 64);
          v48 = *(int *)(v36 + 40);
          v64 = (char *)v34 + v48;
          v49 = (char *)v35 + v48;
          swift_bridgeObjectRetain();
          v32(v64, v49, v31);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v34, 0, 1, v36);
        }
        v50 = v31;
        v51 = *(int *)(v71 + 40);
        v52 = (char *)a1 + v51;
        v53 = (char *)a2 + v51;
        v54 = type metadata accessor for AspirePirKeywordPirParameters(0);
        v55 = *(_QWORD *)(v54 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v52 = *(_QWORD *)v53;
          v52[8] = v53[8];
          v69(&v52[*(int *)(v54 + 24)], &v53[*(int *)(v54 + 24)], v50);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v59 = *(int *)(a3 + 20);
    v60 = (char *)a1 + v59;
    v61 = (char *)a2 + v59;
    v62 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
  }
  return a1;
}

uint64_t destroy for AMDPbHEConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
    goto LABEL_2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v8 = (int *)type metadata accessor for AMDPbPECConfig(0);
    v9 = a1 + v8[8];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v9, v10);
    v12 = a1 + v8[9];
    v13 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
    {
      swift_bridgeObjectRelease();
      v11(v12 + *(int *)(v13 + 40), v10);
    }
    v14 = a1 + v8[10];
    v15 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      v16 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v14, 1, v16)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v11(v14, v10);
      }
      v17 = *(int *)(v15 + 20);
      goto LABEL_15;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v18 = (int *)type metadata accessor for AMDPbPIRConfig(0);
    v19 = a1 + v18[8];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v19, v10);
    v20 = a1 + v18[9];
    v21 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
    {
      swift_bridgeObjectRelease();
      v11(v20 + *(int *)(v21 + 40), v10);
    }
    v14 = a1 + v18[10];
    v22 = type metadata accessor for AspirePirKeywordPirParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v14, 1, v22))
    {
      v17 = *(int *)(v22 + 24);
LABEL_15:
      v11(v14 + v17, v10);
    }
  }
LABEL_2:
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

_QWORD *initializeWithCopy for AMDPbHEConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v6 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v71 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v69 = v7;
      *a1 = *a2;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      v9 = a2[4];
      v10 = a2[5];
      outlined copy of Data._Representation(v9, v10);
      a1[4] = v9;
      a1[5] = v10;
      v11 = (int *)type metadata accessor for AMDPbPECConfig(0);
      v12 = v11[8];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      v16(v13, v14, v15);
      v17 = v11[9];
      v18 = (_OWORD *)((char *)a1 + v17);
      v19 = (_OWORD *)((char *)a2 + v17);
      v20 = type metadata accessor for AspireHeEncryptionParameters(0);
      v21 = *(_QWORD *)(v20 - 8);
      v66 = v16;
      v68 = v15;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        *v18 = *v19;
        v38 = *((_QWORD *)v19 + 3);
        *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
        *((_QWORD *)v18 + 3) = v38;
        *((_BYTE *)v18 + 32) = *((_BYTE *)v19 + 32);
        *((_QWORD *)v18 + 5) = *((_QWORD *)v19 + 5);
        *((_BYTE *)v18 + 48) = *((_BYTE *)v19 + 48);
        *((_QWORD *)v18 + 7) = *((_QWORD *)v19 + 7);
        *((_BYTE *)v18 + 64) = *((_BYTE *)v19 + 64);
        v39 = *(int *)(v20 + 40);
        v64 = (char *)v18 + v39;
        v40 = (char *)v19 + v39;
        swift_bridgeObjectRetain();
        v16(v64, v40, v15);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v41 = v11[10];
      v42 = (char *)a1 + v41;
      v43 = (char *)a2 + v41;
      v44 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v45 = *(_QWORD *)(v44 - 8);
      v7 = v69;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v56 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v57 = *(_QWORD *)(v56 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v43, 1, v56))
        {
          v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v66(v42, v43, v68);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v42, 0, 1, v56);
          v7 = v69;
        }
        v66(&v42[*(int *)(v44 + 20)], &v43[*(int *)(v44 + 20)], v68);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
    }
    else
    {
      v23 = a2[1];
      *a1 = *a2;
      a1[1] = v23;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      v24 = a2[4];
      a1[3] = a2[3];
      v25 = a2[5];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v24, v25);
      a1[4] = v24;
      a1[5] = v25;
      v26 = type metadata accessor for AMDPbPIRConfig(0);
      v27 = *(int *)(v26 + 32);
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = type metadata accessor for UnknownStorage();
      v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
      v31(v28, v29, v30);
      v70 = v26;
      v32 = *(int *)(v26 + 36);
      v33 = (_OWORD *)((char *)a1 + v32);
      v34 = (_OWORD *)((char *)a2 + v32);
      v35 = type metadata accessor for AspireHeEncryptionParameters(0);
      v36 = *(_QWORD *)(v35 - 8);
      v67 = v30;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        *v33 = *v34;
        v47 = *((_QWORD *)v34 + 3);
        *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
        *((_QWORD *)v33 + 3) = v47;
        *((_BYTE *)v33 + 32) = *((_BYTE *)v34 + 32);
        *((_QWORD *)v33 + 5) = *((_QWORD *)v34 + 5);
        *((_BYTE *)v33 + 48) = *((_BYTE *)v34 + 48);
        *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
        *((_BYTE *)v33 + 64) = *((_BYTE *)v34 + 64);
        v48 = *(int *)(v35 + 40);
        v65 = (char *)v33 + v48;
        v49 = (char *)v34 + v48;
        swift_bridgeObjectRetain();
        v31(v65, v49, v30);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v50 = *(int *)(v70 + 40);
      v51 = (char *)a1 + v50;
      v52 = (char *)a2 + v50;
      v53 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v51 = *(_QWORD *)v52;
        v51[8] = v52[8];
        v31(&v51[*(int *)(v53 + 24)], &v52[*(int *)(v53 + 24)], v67);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
    }
    a3 = v71;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v59 = *(int *)(a3 + 20);
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
  return a1;
}

uint64_t assignWithCopy for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  void (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v6 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v138 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        v11 = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v11;
        v12 = *(_QWORD *)(a2 + 32);
        v13 = *(_QWORD *)(a2 + 40);
        outlined copy of Data._Representation(v12, v13);
        *(_QWORD *)(a1 + 32) = v12;
        *(_QWORD *)(a1 + 40) = v13;
        v14 = type metadata accessor for AMDPbPECConfig(0);
        v15 = *(int *)(v14 + 32);
        v16 = a1 + v15;
        v17 = a2 + v15;
        v18 = type metadata accessor for UnknownStorage();
        v132 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        v132(v16, v17, v18);
        v133 = v14;
        v19 = *(int *)(v14 + 36);
        v20 = (_QWORD *)(a1 + v19);
        v21 = (_QWORD *)(a2 + v19);
        v22 = type metadata accessor for AspireHeEncryptionParameters(0);
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          *v20 = *v21;
          v20[1] = v21[1];
          v20[2] = v21[2];
          v56 = v21[3];
          *((_BYTE *)v20 + 32) = *((_BYTE *)v21 + 32);
          v20[3] = v56;
          v57 = v21[5];
          *((_BYTE *)v20 + 48) = *((_BYTE *)v21 + 48);
          v20[5] = v57;
          v58 = v21[7];
          *((_BYTE *)v20 + 64) = *((_BYTE *)v21 + 64);
          v20[7] = v58;
          v59 = *(int *)(v22 + 40);
          v60 = (char *)v20 + v59;
          v61 = (char *)v21 + v59;
          swift_bridgeObjectRetain();
          v132((uint64_t)v60, (uint64_t)v61, v18);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        v62 = v18;
        v63 = *(int *)(v133 + 40);
        v64 = (char *)(a1 + v63);
        v65 = (char *)(a2 + v63);
        v66 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v67 = *(_QWORD *)(v66 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
        {
          v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          v94 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v137 = *(_QWORD *)(v94 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v65, 1, v94))
          {
            v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v132((uint64_t)v64, (uint64_t)v65, v62);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v64, 0, 1, v94);
          }
          v132((uint64_t)&v64[*(int *)(v66 + 20)], (uint64_t)&v65[*(int *)(v66 + 20)], v62);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
        }
        a3 = v138;
      }
      else
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v41 = *(_QWORD *)(a2 + 8);
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v41;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v42 = *(_QWORD *)(a2 + 32);
        v43 = *(_QWORD *)(a2 + 40);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v42, v43);
        *(_QWORD *)(a1 + 32) = v42;
        *(_QWORD *)(a1 + 40) = v43;
        v44 = type metadata accessor for AMDPbPIRConfig(0);
        v45 = *(int *)(v44 + 32);
        v46 = a1 + v45;
        v47 = a2 + v45;
        v48 = type metadata accessor for UnknownStorage();
        v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
        v49(v46, v47, v48);
        v135 = v44;
        v50 = *(int *)(v44 + 36);
        v51 = (_QWORD *)(a1 + v50);
        v52 = (_QWORD *)(a2 + v50);
        v53 = type metadata accessor for AspireHeEncryptionParameters(0);
        v54 = *(_QWORD *)(v53 - 8);
        v130 = v48;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
        {
          v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
          *v51 = *v52;
          v51[1] = v52[1];
          v51[2] = v52[2];
          v83 = v52[3];
          *((_BYTE *)v51 + 32) = *((_BYTE *)v52 + 32);
          v51[3] = v83;
          v84 = v52[5];
          *((_BYTE *)v51 + 48) = *((_BYTE *)v52 + 48);
          v51[5] = v84;
          v85 = v52[7];
          *((_BYTE *)v51 + 64) = *((_BYTE *)v52 + 64);
          v51[7] = v85;
          v86 = *(int *)(v53 + 40);
          v129 = (char *)v51 + v86;
          v87 = (char *)v52 + v86;
          swift_bridgeObjectRetain();
          v49((uint64_t)v129, (uint64_t)v87, v48);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
        }
        a3 = v138;
        v88 = *(int *)(v135 + 40);
        v89 = (_BYTE *)(a1 + v88);
        v90 = (_BYTE *)(a2 + v88);
        v91 = type metadata accessor for AspirePirKeywordPirParameters(0);
        v92 = *(_QWORD *)(v91 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
        {
          v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
          memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v89 = *(_QWORD *)v90;
          v89[8] = v90[8];
          v49((uint64_t)&v89[*(int *)(v91 + 24)], (uint64_t)&v90[*(int *)(v91 + 24)], v130);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_36;
    }
LABEL_8:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_36;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v139 = a3;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      v26 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v26;
      v27 = *(_QWORD *)(a2 + 32);
      v28 = *(_QWORD *)(a2 + 40);
      outlined copy of Data._Representation(v27, v28);
      *(_QWORD *)(a1 + 32) = v27;
      *(_QWORD *)(a1 + 40) = v28;
      v29 = (int *)type metadata accessor for AMDPbPECConfig(0);
      v30 = v29[8];
      v31 = a1 + v30;
      v32 = a2 + v30;
      v33 = type metadata accessor for UnknownStorage();
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
      v34(v31, v32, v33);
      v35 = v29[9];
      v36 = (_QWORD *)(a1 + v35);
      v37 = (_QWORD *)(a2 + v35);
      v38 = type metadata accessor for AspireHeEncryptionParameters(0);
      v39 = *(_QWORD *)(v38 - 8);
      v134 = v33;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        *v36 = *v37;
        v36[1] = v37[1];
        v36[2] = v37[2];
        v96 = v37[3];
        *((_BYTE *)v36 + 32) = *((_BYTE *)v37 + 32);
        v36[3] = v96;
        v97 = v37[5];
        *((_BYTE *)v36 + 48) = *((_BYTE *)v37 + 48);
        v36[5] = v97;
        v98 = v37[7];
        *((_BYTE *)v36 + 64) = *((_BYTE *)v37 + 64);
        v36[7] = v98;
        v99 = *(int *)(v38 + 40);
        v131 = (char *)v36 + v99;
        v100 = (char *)v37 + v99;
        swift_bridgeObjectRetain();
        v34((uint64_t)v131, (uint64_t)v100, v33);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      v101 = v29[10];
      v102 = (char *)(a1 + v101);
      v103 = (char *)(a2 + v101);
      v104 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v105 = *(_QWORD *)(v104 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
      {
        v106 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      }
      else
      {
        v126 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v127 = *(_QWORD *)(v126 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v103, 1, v126))
        {
          v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v34((uint64_t)v102, (uint64_t)v103, v134);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v102, 0, 1, v126);
        }
        v34((uint64_t)&v102[*(int *)(v104 + 20)], (uint64_t)&v103[*(int *)(v104 + 20)], v134);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
      }
      swift_storeEnumTagMultiPayload();
      a3 = v139;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v69 = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v69;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v70 = *(_QWORD *)(a2 + 32);
      v71 = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v70, v71);
      *(_QWORD *)(a1 + 32) = v70;
      *(_QWORD *)(a1 + 40) = v71;
      v72 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      v73 = v72[8];
      v74 = a1 + v73;
      v75 = a2 + v73;
      v76 = type metadata accessor for UnknownStorage();
      v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 16);
      v136(v74, v75, v76);
      v77 = v72[9];
      v78 = (_QWORD *)(a1 + v77);
      v79 = (_QWORD *)(a2 + v77);
      v80 = type metadata accessor for AspireHeEncryptionParameters(0);
      v81 = *(_QWORD *)(v80 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
      {
        v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
      }
      else
      {
        *v78 = *v79;
        v78[1] = v79[1];
        v78[2] = v79[2];
        v107 = v79[3];
        *((_BYTE *)v78 + 32) = *((_BYTE *)v79 + 32);
        v78[3] = v107;
        v108 = v79[5];
        *((_BYTE *)v78 + 48) = *((_BYTE *)v79 + 48);
        v78[5] = v108;
        v109 = v79[7];
        *((_BYTE *)v78 + 64) = *((_BYTE *)v79 + 64);
        v78[7] = v109;
        v110 = *(int *)(v80 + 40);
        v140 = a3;
        v111 = (char *)v78 + v110;
        v112 = (char *)v79 + v110;
        swift_bridgeObjectRetain();
        v113 = v111;
        a3 = v140;
        v136((uint64_t)v113, (uint64_t)v112, v76);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
      }
      v114 = v76;
      v115 = v72[10];
      v116 = (_BYTE *)(a1 + v115);
      v117 = (_BYTE *)(a2 + v115);
      v118 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v119 = *(_QWORD *)(v118 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
      {
        v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v116 = *(_QWORD *)v117;
        v116[8] = v117[8];
        v136((uint64_t)&v116[*(int *)(v118 + 24)], (uint64_t)&v117[*(int *)(v118 + 24)], v114);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_36:
  v121 = *(int *)(a3 + 20);
  v122 = a1 + v121;
  v123 = a2 + v121;
  v124 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 24))(v122, v123, v124);
  return a1;
}

_QWORD *initializeWithTake for AMDPbHEConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    v61 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      v59 = v7;
      *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v10 = (int *)type metadata accessor for AMDPbPECConfig(0);
      v11 = v10[8];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for UnknownStorage();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
      v15(v12, v13, v14);
      v16 = v10[9];
      v17 = (_OWORD *)((char *)a1 + v16);
      v18 = (_OWORD *)((char *)a2 + v16);
      v19 = type metadata accessor for AspireHeEncryptionParameters(0);
      v20 = *(_QWORD *)(v19 - 8);
      v56 = v15;
      v58 = v14;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        *v17 = *v18;
        v34 = *((_QWORD *)v18 + 3);
        *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
        *((_QWORD *)v17 + 3) = v34;
        *((_BYTE *)v17 + 32) = *((_BYTE *)v18 + 32);
        *((_QWORD *)v17 + 5) = *((_QWORD *)v18 + 5);
        *((_BYTE *)v17 + 48) = *((_BYTE *)v18 + 48);
        *((_QWORD *)v17 + 7) = *((_QWORD *)v18 + 7);
        *((_BYTE *)v17 + 64) = *((_BYTE *)v18 + 64);
        v15((char *)v17 + *(int *)(v19 + 40), (char *)v18 + *(int *)(v19 + 40), v14);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v35 = v10[10];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v38 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v39 = *(_QWORD *)(v38 - 8);
      v7 = v59;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v48 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v49 = *(_QWORD *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v37, 1, v48))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v56(v36, v37, v58);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v36, 0, 1, v48);
          v7 = v59;
        }
        v56(&v36[*(int *)(v38 + 20)], &v37[*(int *)(v38 + 20)], v58);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
    }
    else
    {
      a1[1] = a2[1];
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      a1[3] = a2[3];
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      v22 = type metadata accessor for AMDPbPIRConfig(0);
      v23 = *(int *)(v22 + 32);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for UnknownStorage();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      v27(v24, v25, v26);
      v60 = v22;
      v28 = *(int *)(v22 + 36);
      v29 = (_OWORD *)((char *)a1 + v28);
      v30 = (_OWORD *)((char *)a2 + v28);
      v31 = type metadata accessor for AspireHeEncryptionParameters(0);
      v32 = *(_QWORD *)(v31 - 8);
      v57 = v26;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        *v29 = *v30;
        v41 = *((_QWORD *)v30 + 3);
        *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
        *((_QWORD *)v29 + 3) = v41;
        *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
        *((_QWORD *)v29 + 5) = *((_QWORD *)v30 + 5);
        *((_BYTE *)v29 + 48) = *((_BYTE *)v30 + 48);
        *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
        *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
        v27((char *)v29 + *(int *)(v31 + 40), (char *)v30 + *(int *)(v31 + 40), v26);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v42 = *(int *)(v60 + 40);
      v43 = (char *)a1 + v42;
      v44 = (char *)a2 + v42;
      v45 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v43 = *(_QWORD *)v44;
        v43[8] = v44[8];
        v27(&v43[*(int *)(v45 + 24)], &v44[*(int *)(v45 + 24)], v57);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
    }
    a3 = v61;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v51 = *(int *)(a3 + 20);
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
  return a1;
}

uint64_t assignWithTake for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  _OWORD *v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  uint64_t v108;

  v6 = type metadata accessor for AMDPbHEConfig.OneOf_Config(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v107 = a3;
      if (EnumCaseMultiPayload == 1)
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        v12 = type metadata accessor for AMDPbPECConfig(0);
        v13 = *(int *)(v12 + 32);
        v14 = a1 + v13;
        v15 = a2 + v13;
        v16 = type metadata accessor for UnknownStorage();
        v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
        v17(v14, v15, v16);
        v104 = v12;
        v18 = *(int *)(v12 + 36);
        v19 = (_OWORD *)(a1 + v18);
        v20 = (_OWORD *)(a2 + v18);
        v21 = type metadata accessor for AspireHeEncryptionParameters(0);
        v22 = *(_QWORD *)(v21 - 8);
        v101 = v16;
        v103 = (void (*)(char *, char *, uint64_t))v17;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          *v19 = *v20;
          v50 = *((_QWORD *)v20 + 3);
          *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
          *((_QWORD *)v19 + 3) = v50;
          *((_BYTE *)v19 + 32) = *((_BYTE *)v20 + 32);
          *((_QWORD *)v19 + 5) = *((_QWORD *)v20 + 5);
          *((_BYTE *)v19 + 48) = *((_BYTE *)v20 + 48);
          *((_QWORD *)v19 + 7) = *((_QWORD *)v20 + 7);
          *((_BYTE *)v19 + 64) = *((_BYTE *)v20 + 64);
          v17((uint64_t)v19 + *(int *)(v21 + 40), (uint64_t)v20 + *(int *)(v21 + 40), v16);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        v51 = *(int *)(v104 + 40);
        v52 = (char *)(a1 + v51);
        v53 = (char *)(a2 + v51);
        v54 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v55 = *(_QWORD *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          v76 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v77 = *(_QWORD *)(v76 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v53, 1, v76))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v103(v52, v53, v101);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v52, 0, 1, v76);
          }
          v103(&v52[*(int *)(v54 + 20)], &v53[*(int *)(v54 + 20)], v101);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        v38 = type metadata accessor for AMDPbPIRConfig(0);
        v39 = *(int *)(v38 + 32);
        v40 = a1 + v39;
        v41 = a2 + v39;
        v42 = type metadata accessor for UnknownStorage();
        v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
        v43(v40, v41, v42);
        v105 = v38;
        v44 = *(int *)(v38 + 36);
        v45 = (_OWORD *)(a1 + v44);
        v46 = (_OWORD *)(a2 + v44);
        v47 = type metadata accessor for AspireHeEncryptionParameters(0);
        v48 = *(_QWORD *)(v47 - 8);
        v102 = v42;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          *v45 = *v46;
          v69 = *((_QWORD *)v46 + 3);
          *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
          *((_QWORD *)v45 + 3) = v69;
          *((_BYTE *)v45 + 32) = *((_BYTE *)v46 + 32);
          *((_QWORD *)v45 + 5) = *((_QWORD *)v46 + 5);
          *((_BYTE *)v45 + 48) = *((_BYTE *)v46 + 48);
          *((_QWORD *)v45 + 7) = *((_QWORD *)v46 + 7);
          *((_BYTE *)v45 + 64) = *((_BYTE *)v46 + 64);
          v43((uint64_t)v45 + *(int *)(v47 + 40), (uint64_t)v46 + *(int *)(v47 + 40), v42);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
        }
        v70 = *(int *)(v105 + 40);
        v71 = (_BYTE *)(a1 + v70);
        v72 = (_BYTE *)(a2 + v70);
        v73 = type metadata accessor for AspirePirKeywordPirParameters(0);
        v74 = *(_QWORD *)(v73 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
        {
          v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v71 = *(_QWORD *)v72;
          v71[8] = v72[8];
          v43((uint64_t)&v71[*(int *)(v73 + 24)], (uint64_t)&v72[*(int *)(v73 + 24)], v102);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        }
      }
      a3 = v107;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_41;
    }
LABEL_8:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_41;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    v25 = swift_getEnumCaseMultiPayload();
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v108 = a3;
    if (v25 == 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      v26 = (int *)type metadata accessor for AMDPbPECConfig(0);
      v27 = v26[8];
      v28 = a1 + v27;
      v29 = a2 + v27;
      v30 = type metadata accessor for UnknownStorage();
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
      v31(v28, v29, v30);
      v32 = v26[9];
      v33 = (_OWORD *)(a1 + v32);
      v34 = (_OWORD *)(a2 + v32);
      v35 = type metadata accessor for AspireHeEncryptionParameters(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        *v33 = *v34;
        v79 = *((_QWORD *)v34 + 3);
        *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
        *((_QWORD *)v33 + 3) = v79;
        *((_BYTE *)v33 + 32) = *((_BYTE *)v34 + 32);
        *((_QWORD *)v33 + 5) = *((_QWORD *)v34 + 5);
        *((_BYTE *)v33 + 48) = *((_BYTE *)v34 + 48);
        *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
        *((_BYTE *)v33 + 64) = *((_BYTE *)v34 + 64);
        v31((uint64_t)v33 + *(int *)(v35 + 40), (uint64_t)v34 + *(int *)(v35 + 40), v30);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v80 = v26[10];
      v81 = (char *)(a1 + v80);
      v82 = (char *)(a2 + v80);
      v83 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v106 = (void (*)(char *, char *, uint64_t))v31;
        v93 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v94 = *(_QWORD *)(v93 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v82, 1, v93))
        {
          v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v106(v81, v82, v30);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v81, 0, 1, v93);
        }
        v106(&v81[*(int *)(v83 + 20)], &v82[*(int *)(v83 + 20)], v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      v57 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      v58 = v57[8];
      v59 = a1 + v58;
      v60 = a2 + v58;
      v61 = type metadata accessor for UnknownStorage();
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 32);
      v62(v59, v60, v61);
      v63 = v57[9];
      v64 = (_OWORD *)(a1 + v63);
      v65 = (_OWORD *)(a2 + v63);
      v66 = type metadata accessor for AspireHeEncryptionParameters(0);
      v67 = *(_QWORD *)(v66 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
      {
        v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        *v64 = *v65;
        v86 = *((_QWORD *)v65 + 3);
        *((_QWORD *)v64 + 2) = *((_QWORD *)v65 + 2);
        *((_QWORD *)v64 + 3) = v86;
        *((_BYTE *)v64 + 32) = *((_BYTE *)v65 + 32);
        *((_QWORD *)v64 + 5) = *((_QWORD *)v65 + 5);
        *((_BYTE *)v64 + 48) = *((_BYTE *)v65 + 48);
        *((_QWORD *)v64 + 7) = *((_QWORD *)v65 + 7);
        *((_BYTE *)v64 + 64) = *((_BYTE *)v65 + 64);
        v62((uint64_t)v64 + *(int *)(v66 + 40), (uint64_t)v65 + *(int *)(v66 + 40), v61);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      }
      v87 = v57[10];
      v88 = (_BYTE *)(a1 + v87);
      v89 = (_BYTE *)(a2 + v87);
      v90 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v91 = *(_QWORD *)(v90 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
      {
        v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v88 = *(_QWORD *)v89;
        v88[8] = v89[8];
        v62((uint64_t)&v88[*(int *)(v90 + 24)], (uint64_t)&v89[*(int *)(v90 + 24)], v61);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
      }
    }
    swift_storeEnumTagMultiPayload();
    a3 = v108;
  }
LABEL_41:
  v96 = *(int *)(a3 + 20);
  v97 = a1 + v96;
  v98 = a2 + v96;
  v99 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 40))(v97, v98, v99);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF565C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_37Tm(a1, a2, a3, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
}

uint64_t storeEnumTagSinglePayload for AMDPbHEConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF5674(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_38Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AMDPbHEConfig.OneOf_Config?);
}

void type metadata completion function for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AMDPbHEConfig(a1, a2, a3, &lazy cache variable for type metadata for AMDPbHEConfig.OneOf_Config?, (void (*)(uint64_t))type metadata accessor for AMDPbHEConfig.OneOf_Config);
}

uint64_t initializeBufferWithCopyOfBuffer for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  void (*v64)(uint64_t, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      v6 = a2[4];
      v7 = a2[5];
      outlined copy of Data._Representation(v6, v7);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v7;
      v8 = (int *)type metadata accessor for AMDPbPECConfig(0);
      v9 = v8[8];
      v10 = a1 + v9;
      v11 = (uint64_t)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v13(v10, v11, v12);
      v14 = v8[9];
      v15 = (_OWORD *)(a1 + v14);
      v16 = (_OWORD *)((char *)a2 + v14);
      v17 = type metadata accessor for AspireHeEncryptionParameters(0);
      v18 = *(_QWORD *)(v17 - 8);
      v63 = (void (*)(char *, char *, uint64_t))v13;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        *v15 = *v16;
        v36 = *((_QWORD *)v16 + 3);
        *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
        *((_QWORD *)v15 + 3) = v36;
        *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
        *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
        *((_BYTE *)v15 + 48) = *((_BYTE *)v16 + 48);
        *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
        *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
        v37 = *(int *)(v17 + 40);
        v62 = v12;
        v38 = (char *)v15 + v37;
        v39 = (char *)v16 + v37;
        swift_bridgeObjectRetain();
        v40 = v38;
        v12 = v62;
        v13((uint64_t)v40, (uint64_t)v39, v62);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v41 = v8[10];
      v42 = (char *)(a1 + v41);
      v43 = (char *)a2 + v41;
      v44 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v58 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v59 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v43, 1, v58))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v63(v42, v43, v12);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v42, 0, 1, v58);
        }
        v63(&v42[*(int *)(v44 + 20)], &v43[*(int *)(v44 + 20)], v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
    }
    else
    {
      v21 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v21;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      v22 = a2[4];
      *(_QWORD *)(a1 + 24) = a2[3];
      v23 = a2[5];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v22, v23);
      *(_QWORD *)(a1 + 32) = v22;
      *(_QWORD *)(a1 + 40) = v23;
      v24 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      v25 = v24[8];
      v26 = a1 + v25;
      v27 = (uint64_t)a2 + v25;
      v28 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      v29(v26, v27, v28);
      v30 = v24[9];
      v31 = (_OWORD *)(a1 + v30);
      v32 = (_OWORD *)((char *)a2 + v30);
      v33 = type metadata accessor for AspireHeEncryptionParameters(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        *v31 = *v32;
        v47 = *((_QWORD *)v32 + 3);
        *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
        *((_QWORD *)v31 + 3) = v47;
        *((_BYTE *)v31 + 32) = *((_BYTE *)v32 + 32);
        *((_QWORD *)v31 + 5) = *((_QWORD *)v32 + 5);
        *((_BYTE *)v31 + 48) = *((_BYTE *)v32 + 48);
        *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
        *((_BYTE *)v31 + 64) = *((_BYTE *)v32 + 64);
        v48 = *(int *)(v33 + 40);
        v64 = v29;
        v49 = (char *)v31 + v48;
        v50 = (char *)v32 + v48;
        swift_bridgeObjectRetain();
        v51 = v49;
        v29 = v64;
        v64((uint64_t)v51, (uint64_t)v50, v28);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v52 = v24[10];
      v53 = (_BYTE *)(a1 + v52);
      v54 = (char *)a2 + v52;
      v55 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v56 = *(_QWORD *)(v55 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
      {
        v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v53 = *(_QWORD *)v54;
        v53[8] = v54[8];
        v29((uint64_t)&v53[*(int *)(v55 + 24)], (uint64_t)&v54[*(int *)(v55 + 24)], v28);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AMDPbHEConfig.OneOf_Config(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v2 = (int *)type metadata accessor for AMDPbPECConfig(0);
    v3 = a1 + v2[8];
    v4 = type metadata accessor for UnknownStorage();
    v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v17(v3, v4);
    v5 = a1 + v2[9];
    v6 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_bridgeObjectRelease();
      v17(v5 + *(int *)(v6 + 40), v4);
    }
    v7 = a1 + v2[10];
    v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
    if (!(_DWORD)result)
    {
      v10 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v7, 1, v10)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v17(v7, v4);
      }
      v11 = *(int *)(v8 + 20);
      return ((uint64_t (*)(uint64_t, uint64_t))v17)(v7 + v11, v4);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v12 = (int *)type metadata accessor for AMDPbPIRConfig(0);
    v13 = a1 + v12[8];
    v4 = type metadata accessor for UnknownStorage();
    v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v17(v13, v4);
    v14 = a1 + v12[9];
    v15 = type metadata accessor for AspireHeEncryptionParameters(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_bridgeObjectRelease();
      v17(v14 + *(int *)(v15 + 40), v4);
    }
    v7 = a1 + v12[10];
    v16 = type metadata accessor for AspirePirKeywordPirParameters(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v7, 1, v16);
    if (!(_DWORD)result)
    {
      v11 = *(int *)(v16 + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v17)(v7 + v11, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 40);
    outlined copy of Data._Representation(v4, v5);
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v5;
    v6 = (int *)type metadata accessor for AMDPbPECConfig(0);
    v7 = v6[8];
    v8 = a1 + v7;
    v9 = a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = v6[9];
    v13 = (_OWORD *)(a1 + v12);
    v14 = (_OWORD *)(a2 + v12);
    v15 = type metadata accessor for AspireHeEncryptionParameters(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v13 = *v14;
      v33 = *((_QWORD *)v14 + 3);
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      *((_QWORD *)v13 + 3) = v33;
      *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
      *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
      *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
      *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
      *((_BYTE *)v13 + 64) = *((_BYTE *)v14 + 64);
      v34 = *(int *)(v15 + 40);
      v35 = (char *)v13 + v34;
      v36 = (char *)v14 + v34;
      swift_bridgeObjectRetain();
      v11((uint64_t)v35, (uint64_t)v36, v10);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v37 = v6[10];
    v38 = (char *)(a1 + v37);
    v39 = (char *)(a2 + v37);
    v40 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v53 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v39, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v11((uint64_t)v38, (uint64_t)v39, v10);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v38, 0, 1, v53);
      }
      v11((uint64_t)&v38[*(int *)(v40 + 20)], (uint64_t)&v39[*(int *)(v40 + 20)], v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v18;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v19 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v20 = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v19, v20);
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v20;
    v21 = (int *)type metadata accessor for AMDPbPIRConfig(0);
    v22 = v21[8];
    v23 = a1 + v22;
    v24 = a2 + v22;
    v25 = type metadata accessor for UnknownStorage();
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    v27 = v21[9];
    v28 = (_OWORD *)(a1 + v27);
    v29 = (_OWORD *)(a2 + v27);
    v30 = type metadata accessor for AspireHeEncryptionParameters(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      *v28 = *v29;
      v43 = *((_QWORD *)v29 + 3);
      *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
      *((_QWORD *)v28 + 3) = v43;
      *((_BYTE *)v28 + 32) = *((_BYTE *)v29 + 32);
      *((_QWORD *)v28 + 5) = *((_QWORD *)v29 + 5);
      *((_BYTE *)v28 + 48) = *((_BYTE *)v29 + 48);
      *((_QWORD *)v28 + 7) = *((_QWORD *)v29 + 7);
      *((_BYTE *)v28 + 64) = *((_BYTE *)v29 + 64);
      v44 = *(int *)(v30 + 40);
      v45 = (char *)v28 + v44;
      v46 = (char *)v29 + v44;
      swift_bridgeObjectRetain();
      v26((uint64_t)v45, (uint64_t)v46, v25);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v47 = v21[10];
    v48 = (_BYTE *)(a1 + v47);
    v49 = (_BYTE *)(a2 + v47);
    v50 = type metadata accessor for AspirePirKeywordPirParameters(0);
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      v26((uint64_t)&v48[*(int *)(v50 + 24)], (uint64_t)&v49[*(int *)(v50 + 24)], v25);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      v4 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v4;
      v5 = *(_QWORD *)(a2 + 32);
      v6 = *(_QWORD *)(a2 + 40);
      outlined copy of Data._Representation(v5, v6);
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      v7 = (int *)type metadata accessor for AMDPbPECConfig(0);
      v8 = v7[8];
      v9 = a1 + v8;
      v10 = a2 + v8;
      v11 = type metadata accessor for UnknownStorage();
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(v9, v10, v11);
      v13 = v7[9];
      v14 = (_QWORD *)(a1 + v13);
      v15 = (_QWORD *)(a2 + v13);
      v16 = type metadata accessor for AspireHeEncryptionParameters(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        *v14 = *v15;
        v14[1] = v15[1];
        v14[2] = v15[2];
        v34 = v15[3];
        *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
        v14[3] = v34;
        v35 = v15[5];
        *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
        v14[5] = v35;
        v36 = v15[7];
        *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
        v14[7] = v36;
        v37 = *(int *)(v16 + 40);
        v38 = (char *)v14 + v37;
        v39 = (char *)v15 + v37;
        swift_bridgeObjectRetain();
        v12((uint64_t)v38, (uint64_t)v39, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      v40 = v7[10];
      v41 = (char *)(a1 + v40);
      v42 = (char *)(a2 + v40);
      v43 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v58 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v59 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v42, 1, v58))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v12((uint64_t)v41, (uint64_t)v42, v11);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v41, 0, 1, v58);
        }
        v12((uint64_t)&v41[*(int *)(v43 + 20)], (uint64_t)&v42[*(int *)(v43 + 20)], v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v19 = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v20 = *(_QWORD *)(a2 + 32);
      v21 = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v20, v21);
      *(_QWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 40) = v21;
      v22 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      v23 = v22[8];
      v24 = a1 + v23;
      v25 = a2 + v23;
      v26 = type metadata accessor for UnknownStorage();
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      v27(v24, v25, v26);
      v28 = v22[9];
      v29 = (_QWORD *)(a1 + v28);
      v30 = (_QWORD *)(a2 + v28);
      v31 = type metadata accessor for AspireHeEncryptionParameters(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        *v29 = *v30;
        v29[1] = v30[1];
        v29[2] = v30[2];
        v46 = v30[3];
        *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
        v29[3] = v46;
        v47 = v30[5];
        *((_BYTE *)v29 + 48) = *((_BYTE *)v30 + 48);
        v29[5] = v47;
        v48 = v30[7];
        *((_BYTE *)v29 + 64) = *((_BYTE *)v30 + 64);
        v29[7] = v48;
        v49 = *(int *)(v31 + 40);
        v50 = (char *)v29 + v49;
        v51 = (char *)v30 + v49;
        swift_bridgeObjectRetain();
        v27((uint64_t)v50, (uint64_t)v51, v26);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v52 = v22[10];
      v53 = (_BYTE *)(a1 + v52);
      v54 = (_BYTE *)(a2 + v52);
      v55 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v56 = *(_QWORD *)(v55 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
      {
        v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v53 = *(_QWORD *)v54;
        v53[8] = v54[8];
        v27((uint64_t)&v53[*(int *)(v55 + 24)], (uint64_t)&v54[*(int *)(v55 + 24)], v26);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v5 = (int *)type metadata accessor for AMDPbPECConfig(0);
    v6 = v5[8];
    v7 = a1 + v6;
    v8 = a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
    v10(v7, v8, v9);
    v11 = v5[9];
    v12 = (_OWORD *)(a1 + v11);
    v13 = (_OWORD *)(a2 + v11);
    v14 = type metadata accessor for AspireHeEncryptionParameters(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      *v12 = *v13;
      v29 = *((_QWORD *)v13 + 3);
      *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
      *((_QWORD *)v12 + 3) = v29;
      *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
      *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
      *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
      *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
      *((_BYTE *)v12 + 64) = *((_BYTE *)v13 + 64);
      v10((uint64_t)v12 + *(int *)(v14 + 40), (uint64_t)v13 + *(int *)(v14 + 40), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v30 = v5[10];
    v31 = (char *)(a1 + v30);
    v32 = (char *)(a2 + v30);
    v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v43 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v32, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v10((uint64_t)v31, (uint64_t)v32, v9);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v31, 0, 1, v43);
      }
      v10((uint64_t)&v31[*(int *)(v33 + 20)], (uint64_t)&v32[*(int *)(v33 + 20)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v17 = (int *)type metadata accessor for AMDPbPIRConfig(0);
    v18 = v17[8];
    v19 = a1 + v18;
    v20 = a2 + v18;
    v21 = type metadata accessor for UnknownStorage();
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v19, v20, v21);
    v23 = v17[9];
    v24 = (_OWORD *)(a1 + v23);
    v25 = (_OWORD *)(a2 + v23);
    v26 = type metadata accessor for AspireHeEncryptionParameters(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *v24 = *v25;
      v36 = *((_QWORD *)v25 + 3);
      *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
      *((_QWORD *)v24 + 3) = v36;
      *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
      *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
      *((_BYTE *)v24 + 48) = *((_BYTE *)v25 + 48);
      *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
      *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
      v22((uint64_t)v24 + *(int *)(v26 + 40), (uint64_t)v25 + *(int *)(v26 + 40), v21);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v37 = v17[10];
    v38 = (_BYTE *)(a1 + v37);
    v39 = (_BYTE *)(a2 + v37);
    v40 = type metadata accessor for AspirePirKeywordPirParameters(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v22((uint64_t)&v38[*(int *)(v40 + 24)], (uint64_t)&v39[*(int *)(v40 + 24)], v21);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AMDPbHEConfig.OneOf_Config);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      v5 = (int *)type metadata accessor for AMDPbPECConfig(0);
      v6 = v5[8];
      v7 = a1 + v6;
      v8 = a2 + v6;
      v9 = type metadata accessor for UnknownStorage();
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
      v10(v7, v8, v9);
      v11 = v5[9];
      v12 = (_OWORD *)(a1 + v11);
      v13 = (_OWORD *)(a2 + v11);
      v14 = type metadata accessor for AspireHeEncryptionParameters(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        *v12 = *v13;
        v29 = *((_QWORD *)v13 + 3);
        *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
        *((_QWORD *)v12 + 3) = v29;
        *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
        *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
        *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
        *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
        *((_BYTE *)v12 + 64) = *((_BYTE *)v13 + 64);
        v10((uint64_t)v12 + *(int *)(v14 + 40), (uint64_t)v13 + *(int *)(v14 + 40), v9);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v30 = v5[10];
      v31 = (char *)(a1 + v30);
      v32 = (char *)(a2 + v30);
      v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v43 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v44 = *(_QWORD *)(v43 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v32, 1, v43))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v10((uint64_t)v31, (uint64_t)v32, v9);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v31, 0, 1, v43);
        }
        v10((uint64_t)&v31[*(int *)(v33 + 20)], (uint64_t)&v32[*(int *)(v33 + 20)], v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      v17 = (int *)type metadata accessor for AMDPbPIRConfig(0);
      v18 = v17[8];
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v22(v19, v20, v21);
      v23 = v17[9];
      v24 = (_OWORD *)(a1 + v23);
      v25 = (_OWORD *)(a2 + v23);
      v26 = type metadata accessor for AspireHeEncryptionParameters(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        *v24 = *v25;
        v36 = *((_QWORD *)v25 + 3);
        *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
        *((_QWORD *)v24 + 3) = v36;
        *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
        *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
        *((_BYTE *)v24 + 48) = *((_BYTE *)v25 + 48);
        *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
        *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
        v22((uint64_t)v24 + *(int *)(v26 + 40), (uint64_t)v25 + *(int *)(v26 + 40), v21);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v37 = v17[10];
      v38 = (_BYTE *)(a1 + v37);
      v39 = (_BYTE *)(a2 + v37);
      v40 = type metadata accessor for AspirePirKeywordPirParameters(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v38 = *(_QWORD *)v39;
        v38[8] = v39[8];
        v22((uint64_t)&v38[*(int *)(v40 + 24)], (uint64_t)&v39[*(int *)(v40 + 24)], v21);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for AMDPbHEConfig.OneOf_Config()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AMDPbHEConfig.OneOf_Config(a1, a2, a3, type metadata accessor for AMDPbPIRConfig, type metadata accessor for AMDPbPECConfig);
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEKeyStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v32;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 28);
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13[8] = v14[8];
      v19 = *(int *)(v15 + 24);
      v20 = &v13[v19];
      v21 = &v14[v19];
      swift_bridgeObjectRetain();
      v11(v20, v21, v10);
      v22 = *(int *)(v15 + 28);
      v23 = &v13[v22];
      v24 = &v14[v22];
      v25 = type metadata accessor for AspireHeEncryptionParameters(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        *v23 = *v24;
        v28 = *((_QWORD *)v24 + 3);
        *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
        *((_QWORD *)v23 + 3) = v28;
        *((_BYTE *)v23 + 32) = *((_BYTE *)v24 + 32);
        *((_QWORD *)v23 + 5) = *((_QWORD *)v24 + 5);
        *((_BYTE *)v23 + 48) = *((_BYTE *)v24 + 48);
        *((_QWORD *)v23 + 7) = *((_QWORD *)v24 + 7);
        *((_BYTE *)v23 + 64) = *((_BYTE *)v24 + 64);
        v29 = *(int *)(v25 + 40);
        v32 = (char *)v23 + v29;
        v30 = (char *)v24 + v29;
        swift_bridgeObjectRetain();
        v11(v32, v30, v10);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 24), v5);
    v9 = v6 + *(int *)(v7 + 28);
    v10 = type metadata accessor for AspireHeEncryptionParameters(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 40), v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v30;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v17 = *(int *)(v14 + 24);
    v18 = &v12[v17];
    v19 = &v13[v17];
    swift_bridgeObjectRetain();
    v10((uint64_t)v18, (uint64_t)v19, v9);
    v20 = *(int *)(v14 + 28);
    v21 = &v12[v20];
    v22 = &v13[v20];
    v23 = type metadata accessor for AspireHeEncryptionParameters(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *v21 = *v22;
      v26 = *((_QWORD *)v22 + 3);
      *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
      *((_QWORD *)v21 + 3) = v26;
      *((_BYTE *)v21 + 32) = *((_BYTE *)v22 + 32);
      *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
      *((_BYTE *)v21 + 48) = *((_BYTE *)v22 + 48);
      *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
      *((_BYTE *)v21 + 64) = *((_BYTE *)v22 + 64);
      v27 = *(int *)(v23 + 40);
      v30 = (char *)v21 + v27;
      v28 = (char *)v22 + v27;
      swift_bridgeObjectRetain();
      v10((uint64_t)v30, (uint64_t)v28, v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for AMDPbHEKeyStatus(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(uint64_t, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 8) = v14[8];
      v11((char *)(v13 + *(int *)(v15 + 24)), &v14[*(int *)(v15 + 24)], v9);
      v32 = *(int *)(v15 + 28);
      v33 = v13 + v32;
      v34 = &v14[v32];
      v35 = type metadata accessor for AspireHeEncryptionParameters(0);
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      v38 = v37(v33, 1, v35);
      v39 = v37((uint64_t)v34, 1, v35);
      if (v38)
      {
        if (!v39)
        {
          *(_QWORD *)v33 = *(_QWORD *)v34;
          *(_QWORD *)(v33 + 8) = *((_QWORD *)v34 + 1);
          *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
          v40 = *((_QWORD *)v34 + 3);
          *(_BYTE *)(v33 + 32) = v34[32];
          *(_QWORD *)(v33 + 24) = v40;
          v41 = *((_QWORD *)v34 + 5);
          *(_BYTE *)(v33 + 48) = v34[48];
          *(_QWORD *)(v33 + 40) = v41;
          v42 = *((_QWORD *)v34 + 7);
          *(_BYTE *)(v33 + 64) = v34[64];
          *(_QWORD *)(v33 + 56) = v42;
          v43 = *(int *)(v35 + 40);
          v44 = v33 + v43;
          v45 = &v34[v43];
          v46 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          v46(v44, v45, v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          *(_QWORD *)v33 = *(_QWORD *)v34;
          *(_QWORD *)(v33 + 8) = *((_QWORD *)v34 + 1);
          *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v53 = *((_QWORD *)v34 + 3);
          *(_BYTE *)(v33 + 32) = v34[32];
          *(_QWORD *)(v33 + 24) = v53;
          v54 = *((_QWORD *)v34 + 5);
          *(_BYTE *)(v33 + 48) = v34[48];
          *(_QWORD *)(v33 + 40) = v54;
          v55 = *((_QWORD *)v34 + 7);
          *(_BYTE *)(v33 + 64) = v34[64];
          *(_QWORD *)(v33 + 56) = v55;
          v11((char *)(v33 + *(int *)(v35 + 40)), &v34[*(int *)(v35 + 40)], v9);
          return a1;
        }
        outlined destroy of AspireApiPECConfig(v33, type metadata accessor for AspireHeEncryptionParameters);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                  - 8)
                      + 64);
      v30 = (void *)v33;
      v31 = v34;
      goto LABEL_8;
    }
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?)
                                - 8)
                    + 64);
    v30 = (void *)v13;
    v31 = v14;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  v19 = *(int *)(v15 + 24);
  v20 = v13 + v19;
  v21 = &v14[v19];
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v9);
  v23 = *(int *)(v15 + 28);
  v24 = (_QWORD *)(v13 + v23);
  v25 = &v14[v23];
  v26 = type metadata accessor for AspireHeEncryptionParameters(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *v24 = *(_QWORD *)v25;
    v24[1] = *((_QWORD *)v25 + 1);
    v24[2] = *((_QWORD *)v25 + 2);
    v47 = *((_QWORD *)v25 + 3);
    *((_BYTE *)v24 + 32) = v25[32];
    v24[3] = v47;
    v48 = *((_QWORD *)v25 + 5);
    *((_BYTE *)v24 + 48) = v25[48];
    v24[5] = v48;
    v49 = *((_QWORD *)v25 + 7);
    *((_BYTE *)v24 + 64) = v25[64];
    v24[7] = v49;
    v50 = *(int *)(v26 + 40);
    v56 = (char *)v24 + v50;
    v51 = &v25[v50];
    swift_bridgeObjectRetain();
    v22((uint64_t)v56, v51, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (_BYTE *)(a1 + v6);
  v8 = (_BYTE *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  v14 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v10(&v12[*(int *)(v14 + 24)], &v13[*(int *)(v14 + 24)], v9);
    v17 = *(int *)(v14 + 28);
    v18 = &v12[v17];
    v19 = &v13[v17];
    v20 = type metadata accessor for AspireHeEncryptionParameters(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      v23 = *((_QWORD *)v19 + 3);
      *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
      *((_QWORD *)v18 + 3) = v23;
      *((_BYTE *)v18 + 32) = *((_BYTE *)v19 + 32);
      *((_QWORD *)v18 + 5) = *((_QWORD *)v19 + 5);
      *((_BYTE *)v18 + 48) = *((_BYTE *)v19 + 48);
      *((_QWORD *)v18 + 7) = *((_QWORD *)v19 + 7);
      *((_BYTE *)v18 + 64) = *((_BYTE *)v19 + 64);
      v10((_BYTE *)v18 + *(int *)(v20 + 40), (_BYTE *)v19 + *(int *)(v20 + 40), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  void (*v19)(uint64_t, _BYTE *, uint64_t);
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = (_BYTE *)(a2 + v12);
  v15 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v13 + 8) = v14[8];
      v11(v13 + *(int *)(v15 + 24), (uint64_t)&v14[*(int *)(v15 + 24)], v9);
      v29 = *(int *)(v15 + 28);
      v30 = v13 + v29;
      v31 = &v14[v29];
      v32 = type metadata accessor for AspireHeEncryptionParameters(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
      v35 = v34(v30, 1, v32);
      v36 = v34((uint64_t)v31, 1, v32);
      if (v35)
      {
        if (!v36)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          v37 = *((_QWORD *)v31 + 3);
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
          *(_QWORD *)(v30 + 24) = v37;
          *(_BYTE *)(v30 + 32) = v31[32];
          *(_BYTE *)(v30 + 48) = v31[48];
          *(_QWORD *)(v30 + 40) = *((_QWORD *)v31 + 5);
          *(_QWORD *)(v30 + 56) = *((_QWORD *)v31 + 7);
          *(_BYTE *)(v30 + 64) = v31[64];
          (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v30 + *(int *)(v32 + 40), &v31[*(int *)(v32 + 40)], v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
          return a1;
        }
      }
      else
      {
        if (!v36)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v30 + 24) = *((_QWORD *)v31 + 3);
          *(_BYTE *)(v30 + 32) = v31[32];
          *(_QWORD *)(v30 + 40) = *((_QWORD *)v31 + 5);
          *(_BYTE *)(v30 + 48) = v31[48];
          *(_QWORD *)(v30 + 56) = *((_QWORD *)v31 + 7);
          *(_BYTE *)(v30 + 64) = v31[64];
          v11(v30 + *(int *)(v32 + 40), (uint64_t)&v31[*(int *)(v32 + 40)], v9);
          return a1;
        }
        outlined destroy of AspireApiPECConfig(v30, type metadata accessor for AspireHeEncryptionParameters);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?)
                                  - 8)
                      + 64);
      v27 = (void *)v30;
      v28 = v31;
      goto LABEL_8;
    }
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireHeEvaluationKeyConfig);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?)
                                - 8)
                    + 64);
    v27 = (void *)v13;
    v28 = v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18)
    goto LABEL_7;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v14[8];
  v19 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 32);
  v19(v13 + *(int *)(v15 + 24), &v14[*(int *)(v15 + 24)], v9);
  v20 = *(int *)(v15 + 28);
  v21 = (_OWORD *)(v13 + v20);
  v22 = &v14[v20];
  v23 = type metadata accessor for AspireHeEncryptionParameters(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *v21 = *v22;
    v38 = *((_QWORD *)v22 + 3);
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
    *((_QWORD *)v21 + 3) = v38;
    *((_BYTE *)v21 + 32) = *((_BYTE *)v22 + 32);
    *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
    *((_BYTE *)v21 + 48) = *((_BYTE *)v22 + 48);
    *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
    *((_BYTE *)v21 + 64) = *((_BYTE *)v22 + 64);
    v19((uint64_t)v21 + *(int *)(v23 + 40), (_BYTE *)v22 + *(int *)(v23 + 40), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEKeyStatus()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF7F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEKeyStatus()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF7FD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AMDPbHEKeyStatus(a1, a2, a3, MEMORY[0x24BEE0178] + 64, (uint64_t)&unk_237D55DD8, &lazy cache variable for type metadata for AspireHeEvaluationKeyConfig?, (void (*)(uint64_t))type metadata accessor for AspireHeEvaluationKeyConfig);
}

void type metadata accessor for AMDPbHEConfig.OneOf_Config?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AMDPbPIRConfig(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    v9 = a2[5];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    v10 = a3[8];
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v15 = a3[9];
    v16 = (_OWORD *)(a1 + v15);
    v17 = (_OWORD *)((char *)a2 + v15);
    v18 = type metadata accessor for AspireHeEncryptionParameters(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *v16 = *v17;
      v21 = *((_QWORD *)v17 + 3);
      *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
      *((_QWORD *)v16 + 3) = v21;
      *((_BYTE *)v16 + 32) = *((_BYTE *)v17 + 32);
      *((_QWORD *)v16 + 5) = *((_QWORD *)v17 + 5);
      *((_BYTE *)v16 + 48) = *((_BYTE *)v17 + 48);
      *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
      *((_BYTE *)v16 + 64) = *((_BYTE *)v17 + 64);
      v22 = *(int *)(v18 + 40);
      v23 = (char *)v16 + v22;
      v24 = (char *)v17 + v22;
      swift_bridgeObjectRetain();
      v14((uint64_t)v23, (uint64_t)v24, v13);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v25 = a3[10];
    v26 = (_BYTE *)(a1 + v25);
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for AspirePirKeywordPirParameters(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      v14((uint64_t)&v26[*(int *)(v28 + 24)], (uint64_t)&v27[*(int *)(v28 + 24)], v13);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  return a1;
}

uint64_t destroy for AMDPbPIRConfig(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 40), v5);
  }
  v8 = a1 + a2[10];
  v9 = type metadata accessor for AspirePirKeywordPirParameters(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 24), v5);
  return result;
}

uint64_t initializeWithCopy for AMDPbPIRConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a3[8];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v14 = a3[9];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = type metadata accessor for AspireHeEncryptionParameters(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v15 = *v16;
    v20 = *((_QWORD *)v16 + 3);
    *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
    *((_QWORD *)v15 + 3) = v20;
    *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
    *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
    *((_BYTE *)v15 + 48) = *((_BYTE *)v16 + 48);
    *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
    *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
    v21 = *(int *)(v17 + 40);
    v22 = (char *)v15 + v21;
    v23 = (char *)v16 + v21;
    swift_bridgeObjectRetain();
    v13((uint64_t)v22, (uint64_t)v23, v12);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v24 = a3[10];
  v25 = (_BYTE *)(a1 + v24);
  v26 = (_BYTE *)(a2 + v24);
  v27 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v13((uint64_t)&v25[*(int *)(v27 + 24)], (uint64_t)&v26[*(int *)(v27 + 24)], v12);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  return a1;
}

uint64_t assignWithCopy for AMDPbPIRConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_BYTE *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v7, v8);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = a3[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UnknownStorage();
  v45 = *(_QWORD *)(v14 - 8);
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 24);
  v44(v12, v13, v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AspireHeEncryptionParameters(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
      v23 = *(_QWORD *)(v17 + 24);
      *(_BYTE *)(v16 + 32) = *(_BYTE *)(v17 + 32);
      *(_QWORD *)(v16 + 24) = v23;
      v24 = *(_QWORD *)(v17 + 40);
      *(_BYTE *)(v16 + 48) = *(_BYTE *)(v17 + 48);
      *(_QWORD *)(v16 + 40) = v24;
      v25 = *(_QWORD *)(v17 + 56);
      *(_BYTE *)(v16 + 64) = *(_BYTE *)(v17 + 64);
      *(_QWORD *)(v16 + 56) = v25;
      v26 = *(int *)(v18 + 40);
      v27 = v16 + v26;
      v28 = v17 + v26;
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    outlined destroy of AspireApiPECConfig(v16, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v16, (const void *)v17, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = *(_QWORD *)(v17 + 24);
  *(_BYTE *)(v16 + 32) = *(_BYTE *)(v17 + 32);
  *(_QWORD *)(v16 + 24) = v41;
  v42 = *(_QWORD *)(v17 + 40);
  *(_BYTE *)(v16 + 48) = *(_BYTE *)(v17 + 48);
  *(_QWORD *)(v16 + 40) = v42;
  v43 = *(_QWORD *)(v17 + 56);
  *(_BYTE *)(v16 + 64) = *(_BYTE *)(v17 + 64);
  *(_QWORD *)(v16 + 56) = v43;
  v44(v16 + *(int *)(v18 + 40), v17 + *(int *)(v18 + 40), v14);
LABEL_7:
  v31 = a3[10];
  v32 = (_BYTE *)(a1 + v31);
  v33 = (_BYTE *)(a2 + v31);
  v34 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v44((uint64_t)&v32[*(int *)(v34 + 24)], (uint64_t)&v33[*(int *)(v34 + 24)], v14);
      return a1;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspirePirKeywordPirParameters);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 16))(&v32[*(int *)(v34 + 24)], &v33[*(int *)(v34 + 24)], v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

uint64_t initializeWithTake for AMDPbPIRConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = a3[8];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[9];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v18 = *((_QWORD *)v14 + 3);
    *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
    *((_QWORD *)v13 + 3) = v18;
    *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
    *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
    *((_BYTE *)v13 + 48) = *((_BYTE *)v14 + 48);
    *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
    *((_BYTE *)v13 + 64) = *((_BYTE *)v14 + 64);
    v11((char *)v13 + *(int *)(v15 + 40), (char *)v14 + *(int *)(v15 + 40), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[10];
  v20 = (_BYTE *)(a1 + v19);
  v21 = (_BYTE *)(a2 + v19);
  v22 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v11(&v20[*(int *)(v22 + 24)], &v21[*(int *)(v22 + 24)], v10);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithTake for AMDPbPIRConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_BYTE *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v6;
  outlined consume of Data._Representation(v7, v8);
  v9 = a3[8];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v34 = *(_QWORD *)(v12 - 8);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 40);
  v33(v10, v11, v12);
  v13 = a3[9];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v21 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v14 + 24) = v21;
      *(_BYTE *)(v14 + 32) = *(_BYTE *)(v15 + 32);
      *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
      *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
      *(_BYTE *)(v14 + 64) = *(_BYTE *)(v15 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v14 + *(int *)(v16 + 40), v15 + *(int *)(v16 + 40), v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    outlined destroy of AspireApiPECConfig(v14, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  *(_BYTE *)(v14 + 32) = *(_BYTE *)(v15 + 32);
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
  *(_BYTE *)(v14 + 48) = *(_BYTE *)(v15 + 48);
  *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
  *(_BYTE *)(v14 + 64) = *(_BYTE *)(v15 + 64);
  v33(v14 + *(int *)(v16 + 40), v15 + *(int *)(v16 + 40), v12);
LABEL_7:
  v23 = a3[10];
  v24 = (_BYTE *)(a1 + v23);
  v25 = (_BYTE *)(a2 + v23);
  v26 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v33((uint64_t)&v24[*(int *)(v26 + 24)], (uint64_t)&v25[*(int *)(v26 + 24)], v12);
      return a1;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for AspirePirKeywordPirParameters);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v34 + 32))(&v24[*(int *)(v26 + 24)], &v25[*(int *)(v26 + 24)], v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbPIRConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF8E74(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPIRConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237BF8F4C(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AMDPbPIRConfig()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspirePirKeywordPirParameters?, (void (*)(uint64_t))type metadata accessor for AspirePirKeywordPirParameters);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbPIRShardConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v5 = *(int *)(a3 + 28);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for AMDPbPIRShardConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AMDPbPIRShardConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbPIRShardConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF93D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPIRShardConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BF9458(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AMDPbPIRShardConfig()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AMDPbPECConfig(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = a2[4];
    v8 = a2[5];
    outlined copy of Data._Representation(v7, v8);
    v4[4] = v7;
    v4[5] = v8;
    v9 = a3[8];
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[9];
    v15 = (_OWORD *)((char *)v4 + v14);
    v16 = (_OWORD *)((char *)a2 + v14);
    v17 = type metadata accessor for AspireHeEncryptionParameters(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      v21 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
      *((_QWORD *)v15 + 3) = v21;
      *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
      *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
      *((_BYTE *)v15 + 48) = *((_BYTE *)v16 + 48);
      *((_QWORD *)v15 + 7) = *((_QWORD *)v16 + 7);
      *((_BYTE *)v15 + 64) = *((_BYTE *)v16 + 64);
      v22 = *(int *)(v17 + 40);
      v23 = (char *)v15 + v22;
      v24 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      v13(v23, (uint64_t)v24, v12);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v25 = a3[10];
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v27, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v13(v26, (uint64_t)v27, v12);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v26, 0, 1, v31);
      }
      v13(&v26[*(int *)(v28 + 20)], (uint64_t)&v27[*(int *)(v28 + 20)], v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  return v4;
}

uint64_t destroy for AMDPbPECConfig(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v12(v4, v5);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 40), v5);
  }
  v8 = a1 + a2[10];
  v9 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v8, 1, v11)
      && swift_getEnumCaseMultiPayload() <= 2)
    {
      v12(v8, v5);
    }
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[9];
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v19 = *((_QWORD *)v15 + 3);
    *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
    *((_QWORD *)v14 + 3) = v19;
    *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
    *((_QWORD *)v14 + 5) = *((_QWORD *)v15 + 5);
    *((_BYTE *)v14 + 48) = *((_BYTE *)v15 + 48);
    *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
    *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
    v20 = *(int *)(v16 + 40);
    v21 = (char *)v14 + v20;
    v22 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    v12((uint64_t)v21, (uint64_t)v22, v11);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v23 = a3[10];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v29 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v25, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v12((uint64_t)v24, (uint64_t)v25, v11);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v24, 0, 1, v29);
    }
    v12((uint64_t)&v24[*(int *)(v26 + 20)], (uint64_t)&v25[*(int *)(v26 + 20)], v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for AMDPbPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v7, v8);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = a3[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v14 - 8);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 24);
  v54(v12, v13, v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for AspireHeEncryptionParameters(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
      v23 = *(_QWORD *)(v17 + 24);
      *(_BYTE *)(v16 + 32) = *(_BYTE *)(v17 + 32);
      *(_QWORD *)(v16 + 24) = v23;
      v24 = *(_QWORD *)(v17 + 40);
      *(_BYTE *)(v16 + 48) = *(_BYTE *)(v17 + 48);
      *(_QWORD *)(v16 + 40) = v24;
      v25 = *(_QWORD *)(v17 + 56);
      *(_BYTE *)(v16 + 64) = *(_BYTE *)(v17 + 64);
      *(_QWORD *)(v16 + 56) = v25;
      v26 = *(int *)(v18 + 40);
      v27 = v16 + v26;
      v28 = v17 + v26;
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    outlined destroy of AspireApiPECConfig(v16, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v16, (const void *)v17, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(v17 + 24);
  *(_BYTE *)(v16 + 32) = *(_BYTE *)(v17 + 32);
  *(_QWORD *)(v16 + 24) = v43;
  v44 = *(_QWORD *)(v17 + 40);
  *(_BYTE *)(v16 + 48) = *(_BYTE *)(v17 + 48);
  *(_QWORD *)(v16 + 40) = v44;
  v45 = *(_QWORD *)(v17 + 56);
  *(_BYTE *)(v16 + 64) = *(_BYTE *)(v17 + 64);
  *(_QWORD *)(v16 + 56) = v45;
  v54(v16 + *(int *)(v18 + 40), v17 + *(int *)(v18 + 40), v14);
LABEL_7:
  v31 = a3[10];
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  v34 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v46 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
    v49 = v48(v32, 1, v46);
    v50 = v48(v33, 1, v46);
    if (v49)
    {
      if (!v50)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v32, v33, v14);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v32, 0, 1, v46);
LABEL_23:
        v54((uint64_t)&v32[*(int *)(v34 + 20)], (uint64_t)&v33[*(int *)(v34 + 20)], v14);
        return a1;
      }
    }
    else
    {
      if (!v50)
      {
        if (a1 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v32, v33, v14);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v32, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_23;
  }
  if (v38)
  {
LABEL_13:
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  v39 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v33, 1, v39))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v14);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v51 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
    v51(v32, v33, v14);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v32, 0, 1, v39);
    v51(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v14);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

uint64_t initializeWithTake for AMDPbPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[9];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v17 = *((_QWORD *)v13 + 3);
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    *((_QWORD *)v12 + 3) = v17;
    *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
    *((_QWORD *)v12 + 5) = *((_QWORD *)v13 + 5);
    *((_BYTE *)v12 + 48) = *((_BYTE *)v13 + 48);
    *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
    *((_BYTE *)v12 + 64) = *((_BYTE *)v13 + 64);
    v10((uint64_t)v12 + *(int *)(v14 + 40), (uint64_t)v13 + *(int *)(v14 + 40), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[10];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v20, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v10((uint64_t)v19, (uint64_t)v20, v9);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v19, 0, 1, v24);
    }
    v10((uint64_t)&v19[*(int *)(v21 + 20)], (uint64_t)&v20[*(int *)(v21 + 20)], v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for AMDPbPECConfig(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v6, v7);
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v11 - 8);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 40);
  v42(v9, v10, v11);
  v12 = a3[9];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for AspireHeEncryptionParameters(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      v20 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v13 + 24) = v20;
      *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
      *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);
  *(_BYTE *)(v13 + 48) = *(_BYTE *)(v14 + 48);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
  *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
  v42(v13 + *(int *)(v15 + 40), v14 + *(int *)(v15 + 40), v11);
LABEL_7:
  v22 = a3[10];
  v23 = (char *)(a1 + v22);
  v24 = (char *)(a2 + v22);
  v25 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (v29)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking);
      goto LABEL_13;
    }
    v34 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v35 = *(_QWORD *)(v34 - 8);
    v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
    v37 = v36(v23, 1, v34);
    v38 = v36(v24, 1, v34);
    if (v37)
    {
      if (!v38)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v23, v24, v11);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v23, 0, 1, v34);
LABEL_23:
        v42((uint64_t)&v23[*(int *)(v25 + 20)], (uint64_t)&v24[*(int *)(v25 + 20)], v11);
        return a1;
      }
    }
    else
    {
      if (!v38)
      {
        if (a1 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v23, v24, v11);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_23;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v23, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_23;
  }
  if (v29)
  {
LABEL_13:
    v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  v30 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v24, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v11);
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    v39 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v39(v23, v24, v11);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v23, 0, 1, v30);
    v39(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v11);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbPECConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BFA8AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 40) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPECConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237BFA990(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AMDPbPECConfig()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeEncryptionParameters?, (void (*)(uint64_t))type metadata accessor for AspireHeEncryptionParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireSimilarityPlaintextPacking?, (void (*)(uint64_t))type metadata accessor for AspireSimilarityPlaintextPacking);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for AMDPbHEQueries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AMDPbHEQueries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for AMDPbHEReplies()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AMDPbHEReplies()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for AMDPbHEQuery(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  unsigned int (**v141)(const void *, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  unsigned int (**v182)(const void *, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  int *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(char *, char *, uint64_t);
  char *v204;
  uint64_t v205;
  _QWORD *v206;
  void (*v207)(char *, char *, uint64_t);
  char *v208;
  _QWORD *__dst;
  int *__dsta;
  int *__dstb;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;

  v3 = a2;
  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_62:
      v168 = v6[6];
      v169 = (char *)v4 + v168;
      v170 = (char *)v3 + v168;
      v171 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 16))(v169, v170, v171);
      return v4;
    }
    v212 = v12;
    v213 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v206 = v3;
      v16 = v10[1];
      *v9 = *v10;
      v17 = v10[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v16, v17);
      v9[1] = v16;
      v9[2] = v17;
      v18 = (int *)type metadata accessor for AMDPbPECQuery(0);
      v19 = v18[6];
      v20 = (char *)v9 + v19;
      v21 = (char *)v10 + v19;
      v22 = type metadata accessor for UnknownStorage();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v20, v21, v22);
      v24 = v18[7];
      __dst = (_QWORD *)((char *)v9 + v24);
      v25 = (_QWORD *)((char *)v10 + v24);
      v26 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      v27 = *(_QWORD *)(v26 - 8);
      v203 = v23;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        v29 = v22;
        v3 = v206;
      }
      else
      {
        v193 = v27;
        v196 = v18;
        v45 = v22;
        v215 = v9;
        v46 = __dst;
        *__dst = *v25;
        __dst[1] = v25[1];
        v47 = *(int *)(v26 + 28);
        v48 = (char *)__dst + v47;
        v49 = (char *)v25 + v47;
        swift_bridgeObjectRetain();
        v199 = v45;
        v23(v48, v49, v45);
        v50 = v26;
        v51 = *(int *)(v26 + 32);
        v52 = (char *)__dst + v51;
        v53 = (char *)v25 + v51;
        v54 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v55 = *(_QWORD *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
          v9 = v215;
          v18 = v196;
          v29 = v199;
          v3 = v206;
          v57 = v193;
        }
        else
        {
          v74 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v75 = *(_QWORD *)(v74 - 8);
          v189 = v54;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v53, 1, v74))
          {
            v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
            v29 = v199;
            v77 = v203;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v184 = v75;
            v29 = v199;
            v203(v52, v53, v199);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v52, 0, 1, v74);
            v77 = v203;
          }
          v3 = v206;
          v77(&v52[*(int *)(v189 + 20)], &v53[*(int *)(v189 + 20)], v29);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v189);
          v9 = v215;
          v57 = v193;
          v18 = v196;
          v46 = __dst;
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v46, 0, 1, v50);
      }
      v95 = v18[8];
      v96 = (char *)v9 + v95;
      v97 = (char *)v10 + v95;
      v98 = type metadata accessor for AMDPbEvaluationKey(0);
      v99 = *(_QWORD *)(v98 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
      {
        v198 = v99;
        v216 = v9;
        v101 = v203;
        v203(v96, v97, v29);
        v208 = v96;
        __dstb = (int *)v98;
        v102 = *(int *)(v98 + 20);
        v103 = &v96[v102];
        v104 = &v97[v102];
        v105 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v106 = *(_QWORD *)(v105 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
        {
          v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
        }
        else
        {
          v108 = *((_QWORD *)v104 + 1);
          *(_QWORD *)v103 = *(_QWORD *)v104;
          v109 = *((_QWORD *)v104 + 2);
          v201 = v29;
          v110 = v108;
          outlined copy of Data._Representation(v108, v109);
          *((_QWORD *)v103 + 1) = v110;
          *((_QWORD *)v103 + 2) = v109;
          v29 = v201;
          v101 = v203;
          v203(&v103[*(int *)(v105 + 24)], &v104[*(int *)(v105 + 24)], v201);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
        }
        v9 = v216;
        v111 = __dstb[6];
        v112 = &v208[v111];
        v113 = &v97[v111];
        v114 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v115 = *(_QWORD *)(v114 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
        {
          v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
          v88 = v212;
          v87 = v213;
          v117 = v198;
        }
        else
        {
          v192 = v115;
          v101(v112, v113, v29);
          v118 = *(int *)(v114 + 20);
          v195 = v112;
          v119 = &v112[v118];
          v120 = &v113[v118];
          v121 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v122 = *(_QWORD *)(v121 - 8);
          v202 = v29;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
          {
            v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v119 = *(_QWORD *)v120;
            v134 = *(int *)(v121 + 20);
            v187 = &v119[v134];
            v135 = &v120[v134];
            swift_bridgeObjectRetain();
            v203(v187, v135, v29);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
          }
          v9 = v216;
          v136 = v195;
          v137 = *(int *)(v114 + 24);
          v138 = &v195[v137];
          v139 = &v113[v137];
          v140 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v141 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v140 - 8);
          if (v141[6](v139, 1, v140))
          {
            v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
          }
          else
          {
            v182 = v141;
            v188 = v114;
            v203(v138, v139, v202);
            v185 = v140;
            v149 = *(int *)(v140 + 20);
            v150 = &v138[v149];
            v151 = &v139[v149];
            v152 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v153 = *(_QWORD *)(v152 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
            {
              v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
              v9 = v216;
              v136 = v195;
              v114 = v188;
            }
            else
            {
              v203(v150, v151, v202);
              v160 = *(int *)(v152 + 20);
              v178 = &v150[v160];
              v161 = &v151[v160];
              v162 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v163 = *(_QWORD *)(v162 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
              {
                v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v178, v161, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v178 = *(_QWORD *)v161;
                v167 = *(int *)(v162 + 20);
                v174 = &v178[v167];
                v176 = &v161[v167];
                swift_bridgeObjectRetain();
                v203(v174, v176, v202);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v178, 0, 1, v162);
              }
              v136 = v195;
              v114 = v188;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v153 + 56))(v150, 0, 1, v152);
              v9 = v216;
            }
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v182[7])(v138, 0, 1, v185);
          }
          v117 = v198;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v192 + 56))(v136, 0, 1, v114);
          v88 = v212;
          v87 = v213;
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v117 + 56))(v208, 0, 1, __dstb);
        goto LABEL_61;
      }
      v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    }
    else
    {
      __dsta = v6;
      *(_DWORD *)v9 = *(_DWORD *)v10;
      v30 = v9;
      v31 = v10[1];
      v32 = v10[2];
      outlined copy of Data._Representation(v31, v32);
      v30[1] = v31;
      v30[2] = v32;
      v33 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      v34 = v33[6];
      v35 = (char *)v30 + v34;
      v36 = (char *)v10 + v34;
      v37 = type metadata accessor for UnknownStorage();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      v38(v35, v36, v37);
      v39 = v33[7];
      v214 = v30;
      v40 = (_QWORD *)((char *)v30 + v39);
      v41 = (_QWORD *)((char *)v10 + v39);
      v42 = type metadata accessor for AspirePirEncryptedIndices(0);
      v43 = *(_QWORD *)(v42 - 8);
      v207 = v38;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        v58 = v41[1];
        *v40 = *v41;
        v40[1] = v58;
        v59 = *(int *)(v42 + 24);
        v204 = (char *)v40 + v59;
        v60 = (char *)v41 + v59;
        swift_bridgeObjectRetain();
        v38(v204, v60, v37);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      v61 = v37;
      v62 = v33[8];
      v9 = v214;
      v63 = (char *)v214 + v62;
      v64 = (char *)v10 + v62;
      v65 = type metadata accessor for AMDPbEvaluationKey(0);
      v66 = *(_QWORD *)(v65 - 8);
      v6 = __dsta;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
      {
        v197 = v66;
        v207(v63, v64, v61);
        v205 = v65;
        v68 = *(int *)(v65 + 20);
        v69 = &v63[v68];
        v70 = &v64[v68];
        v71 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v72 = *(_QWORD *)(v71 - 8);
        v194 = v61;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
        {
          v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          v78 = *((_QWORD *)v70 + 1);
          v190 = v78;
          *(_QWORD *)v69 = *(_QWORD *)v70;
          v79 = *((_QWORD *)v70 + 2);
          outlined copy of Data._Representation(v78, v79);
          *((_QWORD *)v69 + 1) = v190;
          *((_QWORD *)v69 + 2) = v79;
          v207(&v69[*(int *)(v71 + 24)], &v70[*(int *)(v71 + 24)], v194);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
        }
        v9 = v214;
        v80 = v205;
        v6 = __dsta;
        v81 = *(int *)(v205 + 24);
        v82 = &v63[v81];
        v83 = &v64[v81];
        v84 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v85 = *(_QWORD *)(v84 - 8);
        v200 = v63;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
        {
          v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          v88 = v212;
          v87 = v213;
          v89 = v197;
        }
        else
        {
          v183 = v85;
          v207(v82, v83, v194);
          v90 = *(int *)(v84 + 20);
          v180 = &v82[v90];
          v91 = &v83[v90];
          v92 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v93 = *(_QWORD *)(v92 - 8);
          v191 = v82;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
          {
            v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v180, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v180 = *(_QWORD *)v91;
            v124 = *(int *)(v92 + 20);
            v125 = &v180[v124];
            v126 = &v91[v124];
            swift_bridgeObjectRetain();
            v207(v125, v126, v194);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v180, 0, 1, v92);
          }
          v9 = v214;
          v6 = __dsta;
          v127 = *(int *)(v84 + 24);
          v128 = &v82[v127];
          v129 = &v83[v127];
          v130 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v131 = *(_QWORD *)(v130 - 8);
          v186 = v84;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
          {
            v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
            v80 = v205;
            v89 = v197;
            v133 = v82;
          }
          else
          {
            v207(v128, v129, v194);
            v179 = v130;
            v181 = v128;
            v143 = *(int *)(v130 + 20);
            v144 = &v128[v143];
            v145 = &v129[v143];
            v146 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v147 = *(_QWORD *)(v146 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
            {
              v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
              v80 = v205;
              v89 = v197;
              v6 = __dsta;
              v133 = v191;
            }
            else
            {
              v177 = v147;
              v207(v144, v145, v194);
              v155 = *(int *)(v146 + 20);
              v175 = &v144[v155];
              v156 = &v145[v155];
              v157 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v158 = *(_QWORD *)(v157 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
              {
                v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v175, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v175 = *(_QWORD *)v156;
                v165 = *(int *)(v157 + 20);
                v173 = &v175[v165];
                v166 = &v156[v165];
                swift_bridgeObjectRetain();
                v207(v173, v166, v194);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v175, 0, 1, v157);
              }
              v9 = v214;
              v6 = __dsta;
              v133 = v191;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v177 + 56))(v144, 0, 1, v146);
              v80 = v205;
              v89 = v197;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v181, 0, 1, v179);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v133, 0, 1, v186);
          v88 = v212;
          v87 = v213;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v200, 0, 1, v80);
        goto LABEL_61;
      }
      v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    v88 = v212;
    v87 = v213;
LABEL_61:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v9, 0, 1, v87);
    goto LABEL_62;
  }
  v15 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for AMDPbHEQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16));
      v9 = (int *)type metadata accessor for AMDPbPECQuery(0);
      v10 = v4 + v9[6];
      v11 = type metadata accessor for UnknownStorage();
      v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
      v12(v10, v11);
      v13 = v4 + v9[7];
      v14 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
      {
        swift_bridgeObjectRelease();
        v12(v13 + *(int *)(v14 + 28), v11);
        v15 = v13 + *(int *)(v14 + 32);
        v16 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
        {
          v17 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v15, 1, v17)
            && swift_getEnumCaseMultiPayload() <= 2)
          {
            v12(v15, v11);
          }
          v12(v15 + *(int *)(v16 + 20), v11);
        }
      }
      v18 = v4 + v9[8];
      v19 = type metadata accessor for AMDPbEvaluationKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
      {
        v12(v18, v11);
        v20 = v18 + *(int *)(v19 + 20);
        v21 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
        {
          outlined consume of Data._Representation(*(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 16));
          v12(v20 + *(int *)(v21 + 24), v11);
        }
        v22 = v18 + *(int *)(v19 + 24);
        v23 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
        {
          v12(v22, v11);
          v24 = v22 + *(int *)(v23 + 20);
          v25 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
          {
            swift_bridgeObjectRelease();
            v12(v24 + *(int *)(v25 + 20), v11);
          }
          v26 = v22 + *(int *)(v23 + 24);
          v27 = type metadata accessor for AspireHeSerializedRelinKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27))
          {
            v12(v26, v11);
            v28 = v26 + *(int *)(v27 + 20);
            v29 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29))
            {
              v12(v28, v11);
              v30 = v28 + *(int *)(v29 + 20);
              v31 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31))
              {
                swift_bridgeObjectRelease();
                v12(v30 + *(int *)(v31 + 20), v11);
              }
            }
          }
        }
      }
    }
    else
    {
      outlined consume of Data._Representation(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16));
      v32 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      v33 = v4 + v32[6];
      v34 = type metadata accessor for UnknownStorage();
      v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8);
      v35(v33, v34);
      v36 = v4 + v32[7];
      v37 = type metadata accessor for AspirePirEncryptedIndices(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37))
      {
        swift_bridgeObjectRelease();
        v35(v36 + *(int *)(v37 + 24), v34);
      }
      v38 = v4 + v32[8];
      v39 = type metadata accessor for AMDPbEvaluationKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39))
      {
        v35(v38, v34);
        v40 = v38 + *(int *)(v39 + 20);
        v41 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41))
        {
          outlined consume of Data._Representation(*(_QWORD *)(v40 + 8), *(_QWORD *)(v40 + 16));
          v35(v40 + *(int *)(v41 + 24), v34);
        }
        v42 = v38 + *(int *)(v39 + 24);
        v43 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v42, 1, v43))
        {
          v35(v42, v34);
          v44 = v42 + *(int *)(v43 + 20);
          v45 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v44, 1, v45))
          {
            swift_bridgeObjectRelease();
            v35(v44 + *(int *)(v45 + 20), v34);
          }
          v46 = v42 + *(int *)(v43 + 24);
          v47 = type metadata accessor for AspireHeSerializedRelinKey(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v46, 1, v47))
          {
            v35(v46, v34);
            v48 = v46 + *(int *)(v47 + 20);
            v49 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v48, 1, v49))
            {
              v35(v48, v34);
              v50 = v48 + *(int *)(v49 + 20);
              v51 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v50, 1, v51))
              {
                swift_bridgeObjectRelease();
                v35(v50 + *(int *)(v51 + 20), v34);
              }
            }
          }
        }
      }
    }
  }
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for AMDPbHEQuery(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int (**v28)(_QWORD *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void (**v59)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, _QWORD, uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  void *__dst;
  void *__dsta;
  void *__dstd;
  char *__dstb;
  char *__dstc;
  void (*v212)(char *, char *, uint64_t);
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  void (*v219)(char *, char *, uint64_t);
  void (*v220)(char *, char *, uint64_t);
  _QWORD *v221;
  _QWORD *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (!v12(v9, 1, v10))
  {
    v225 = v10;
    v226 = v3;
    v224 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v221 = v5;
      v14 = v9[1];
      *v8 = *v9;
      v15 = v9[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v14, v15);
      v8[1] = v14;
      v8[2] = v15;
      v16 = type metadata accessor for AMDPbPECQuery(0);
      v17 = *(int *)(v16 + 24);
      v18 = (char *)v8 + v17;
      v19 = (char *)v9 + v17;
      v20 = type metadata accessor for UnknownStorage();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      v22 = v18;
      v23 = v16;
      v21(v22, v19, v20);
      v24 = *(int *)(v16 + 28);
      v25 = (_QWORD *)((char *)v8 + v24);
      v26 = (_QWORD *)((char *)v9 + v24);
      v27 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      v28 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v27 - 8);
      if (v28[6](v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        v3 = v226;
        v30 = v21;
        v5 = v221;
      }
      else
      {
        __dst = v28;
        v216 = v23;
        v219 = v21;
        *v25 = *v26;
        v25[1] = v26[1];
        v46 = *(int *)(v27 + 28);
        v47 = (char *)v25 + v46;
        v48 = (char *)v26 + v46;
        swift_bridgeObjectRetain();
        v49 = v47;
        v50 = v48;
        v30 = v21;
        v51 = v20;
        v21(v49, v50, v20);
        v52 = *(int *)(v27 + 32);
        v213 = v25;
        v53 = (char *)v25 + v52;
        v54 = (char *)v26 + v52;
        v55 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v56 = *(_QWORD *)(v55 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
          v20 = v51;
          v58 = v213;
          v23 = v216;
          v3 = v226;
          v59 = (void (**)(_QWORD, _QWORD, uint64_t, uint64_t))__dst;
          v5 = v221;
        }
        else
        {
          v75 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v76 = *(_QWORD *)(v75 - 8);
          v197 = v75;
          v202 = v56;
          v77 = v55;
          if ((*(unsigned int (**)(char *, uint64_t))(v76 + 48))(v54, 1))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
            v79 = v51;
            v30 = v219;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v219(v53, v54, v51);
            swift_storeEnumTagMultiPayload();
            v99 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56);
            v30 = v219;
            v99(v53, 0, 1, v197);
            v79 = v51;
          }
          v3 = v226;
          v100 = v53;
          v5 = v221;
          v101 = *(int *)(v77 + 20);
          v102 = &v54[v101];
          v103 = v79;
          v30(&v100[v101], v102, v79);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v202 + 56))(v100, 0, 1, v77);
          v20 = v103;
          v58 = v213;
          v23 = v216;
          v59 = (void (**)(_QWORD, _QWORD, uint64_t, uint64_t))__dst;
        }
        ((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v59)[7](v58, 0, 1, v27);
      }
      v104 = *(int *)(v23 + 32);
      v65 = (char *)v8 + v104;
      v66 = (char *)v9 + v104;
      v105 = type metadata accessor for AMDPbEvaluationKey(0);
      v106 = *(_QWORD *)(v105 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v66, 1, v105))
      {
        v214 = v106;
        v30(v65, v66, v20);
        v217 = v105;
        v220 = v30;
        v108 = *(int *)(v105 + 20);
        v223 = v65;
        v109 = &v65[v108];
        v110 = &v66[v108];
        v111 = v20;
        v112 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v113 = *(_QWORD *)(v112 - 8);
        v206 = v111;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v110, 1, v112))
        {
          v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        }
        else
        {
          v115 = *((_QWORD *)v110 + 1);
          __dstd = (void *)v115;
          *(_QWORD *)v109 = *(_QWORD *)v110;
          v203 = *((_QWORD *)v110 + 2);
          outlined copy of Data._Representation(v115, v203);
          *((_QWORD *)v109 + 1) = __dstd;
          *((_QWORD *)v109 + 2) = v203;
          v220(&v109[*(int *)(v112 + 24)], &v110[*(int *)(v112 + 24)], v111);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v109, 0, 1, v112);
        }
        v116 = v217;
        v117 = *(int *)(v217 + 24);
        v118 = &v223[v117];
        v119 = &v66[v117];
        v120 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v121 = *(_QWORD *)(v120 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
        {
          v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        }
        else
        {
          v200 = v121;
          v220(v118, v119, v206);
          v123 = *(int *)(v120 + 20);
          v204 = v118;
          __dstb = &v118[v123];
          v124 = &v119[v123];
          v125 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v126 = *(_QWORD *)(v125 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v124, 1, v125))
          {
            v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(__dstb, v124, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__dstb = *(_QWORD *)v124;
            v140 = *(int *)(v125 + 20);
            v195 = &__dstb[v140];
            v141 = &v124[v140];
            swift_bridgeObjectRetain();
            v220(v195, v141, v206);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56))(__dstb, 0, 1, v125);
          }
          v3 = v226;
          v142 = v204;
          v143 = *(int *)(v120 + 24);
          v144 = &v204[v143];
          v145 = &v119[v143];
          v146 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v147 = *(_QWORD *)(v146 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
          {
            v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
            v116 = v217;
            v149 = v200;
          }
          else
          {
            v193 = v147;
            v220(v144, v145, v206);
            v196 = v146;
            v157 = *(int *)(v146 + 20);
            __dstc = v144;
            v158 = &v144[v157];
            v159 = &v145[v157];
            v160 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v161 = *(_QWORD *)(v160 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v159, 1, v160))
            {
              v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
              v116 = v217;
              v149 = v200;
              v142 = v204;
              v163 = v196;
            }
            else
            {
              v220(v158, v159, v206);
              v170 = *(int *)(v160 + 20);
              v191 = v158;
              v187 = &v158[v170];
              v171 = &v159[v170];
              v172 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v173 = *(_QWORD *)(v172 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(v171, 1, v172))
              {
                v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v187, v171, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v187 = *(_QWORD *)v171;
                v177 = *(int *)(v172 + 20);
                v185 = &v187[v177];
                v189 = &v171[v177];
                swift_bridgeObjectRetain();
                v220(v185, v189, v206);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v187, 0, 1, v172);
              }
              v3 = v226;
              v149 = v200;
              v142 = v204;
              v163 = v196;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v191, 0, 1, v160);
              v116 = v217;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(__dstc, 0, 1, v163);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v142, 0, 1, v120);
        }
        v90 = v224;
        v89 = v225;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v214 + 56))(v223, 0, 1, v116);
        goto LABEL_57;
      }
    }
    else
    {
      v218 = v4;
      *(_DWORD *)v8 = *(_DWORD *)v9;
      v31 = v9[1];
      v32 = v9[2];
      outlined copy of Data._Representation(v31, v32);
      v8[1] = v31;
      v8[2] = v32;
      v33 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      v34 = v33[6];
      v35 = (char *)v8 + v34;
      v36 = (char *)v9 + v34;
      v37 = v8;
      v38 = type metadata accessor for UnknownStorage();
      v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
      v39(v35, v36, v38);
      v40 = v33[7];
      v222 = v37;
      v41 = (_QWORD *)((char *)v37 + v40);
      v42 = (_QWORD *)((char *)v9 + v40);
      v43 = type metadata accessor for AspirePirEncryptedIndices(0);
      v44 = *(_QWORD *)(v43 - 8);
      v212 = v39;
      v215 = v38;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v60 = v42[1];
        *v41 = *v42;
        v41[1] = v60;
        v61 = *(int *)(v43 + 24);
        v62 = (char *)v41 + v61;
        v63 = (char *)v42 + v61;
        swift_bridgeObjectRetain();
        v39(v62, v63, v38);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v64 = v33[8];
      v8 = v222;
      v65 = (char *)v222 + v64;
      v66 = (char *)v9 + v64;
      v67 = type metadata accessor for AMDPbEvaluationKey(0);
      v68 = *(_QWORD *)(v67 - 8);
      v3 = v226;
      v4 = v218;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
      {
        v201 = v68;
        v212(v65, v66, v215);
        v69 = *(int *)(v67 + 20);
        v205 = v65;
        v70 = &v65[v69];
        v71 = &v66[v69];
        v72 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v73 = *(_QWORD *)(v72 - 8);
        __dsta = (void *)v67;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
        {
          v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          v80 = *((_QWORD *)v71 + 1);
          v198 = v80;
          *(_QWORD *)v70 = *(_QWORD *)v71;
          v81 = *((_QWORD *)v71 + 2);
          outlined copy of Data._Representation(v80, v81);
          *((_QWORD *)v70 + 1) = v198;
          *((_QWORD *)v70 + 2) = v81;
          v67 = (uint64_t)__dsta;
          v212(&v70[*(int *)(v72 + 24)], &v71[*(int *)(v72 + 24)], v215);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
        }
        v82 = v205;
        v4 = v218;
        v8 = v222;
        v83 = *(int *)(v67 + 24);
        v84 = &v205[v83];
        v85 = &v66[v83];
        v86 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v87 = *(_QWORD *)(v86 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
        {
          v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          v90 = v224;
          v89 = v225;
          v91 = __dsta;
          v92 = v201;
        }
        else
        {
          v212(v84, v85, v215);
          v93 = *(int *)(v86 + 20);
          v199 = v84;
          v94 = &v84[v93];
          v95 = &v85[v93];
          v96 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v97 = *(_QWORD *)(v96 - 8);
          v194 = v87;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
          {
            v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v94 = *(_QWORD *)v95;
            v128 = *(int *)(v96 + 20);
            v129 = v94;
            v130 = &v94[v128];
            v131 = &v95[v128];
            swift_bridgeObjectRetain();
            v212(v130, v131, v215);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v129, 0, 1, v96);
          }
          v3 = v226;
          v4 = v218;
          v8 = v222;
          v132 = v199;
          v133 = *(int *)(v86 + 24);
          v134 = &v199[v133];
          v135 = &v85[v133];
          v136 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v137 = *(_QWORD *)(v136 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136))
          {
            v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
            v92 = v201;
            v82 = v205;
            v139 = v194;
          }
          else
          {
            v188 = v137;
            v212(v134, v135, v215);
            v190 = v136;
            v192 = v134;
            v150 = *(int *)(v136 + 20);
            v151 = &v134[v150];
            v152 = &v135[v150];
            v153 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v154 = *(_QWORD *)(v153 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
            {
              v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
              v92 = v201;
              v82 = v205;
              v4 = v218;
              v8 = v222;
              v156 = v188;
              v139 = v194;
            }
            else
            {
              v184 = v154;
              v212(v151, v152, v215);
              v164 = *(int *)(v153 + 20);
              v186 = v151;
              v165 = &v151[v164];
              v166 = &v152[v164];
              v167 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v168 = *(_QWORD *)(v167 - 8);
              v156 = v188;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v166, 1, v167))
              {
                v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v165 = *(_QWORD *)v166;
                v175 = *(int *)(v167 + 20);
                v183 = &v165[v175];
                v176 = &v166[v175];
                swift_bridgeObjectRetain();
                v212(v183, v176, v215);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v168 + 56))(v165, 0, 1, v167);
              }
              v3 = v226;
              v4 = v218;
              v8 = v222;
              v139 = v194;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v186, 0, 1, v153);
              v92 = v201;
              v82 = v205;
              v132 = v199;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v192, 0, 1, v190);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v132, 0, 1, v86);
          v90 = v224;
          v89 = v225;
          v91 = __dsta;
        }
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v92 + 56))(v82, 0, 1, v91);
        goto LABEL_57;
      }
    }
    v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    v90 = v224;
    v89 = v225;
LABEL_57:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v8, 0, 1, v89);
    goto LABEL_58;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
LABEL_58:
  v178 = *(int *)(v3 + 24);
  v179 = (char *)v5 + v178;
  v180 = (char *)v4 + v178;
  v181 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(v179, v180, v181);
  return v5;
}

_QWORD *assignWithCopy for AMDPbHEQuery(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, void *);
  uint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unsigned int (**v118)(const void *, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, char *, void *);
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t);
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int (**v186)(const void *, uint64_t, uint64_t);
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  unsigned int (**v234)(const void *, uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int (**v251)(const void *, uint64_t, uint64_t);
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  unsigned int (**v298)(const void *, uint64_t, uint64_t);
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  char *v330;
  char *v331;
  void (**v332)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (**v333)(const void *, uint64_t, uint64_t);
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  char *v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  void (*v366)(char *, char *, uint64_t);
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  void (*v371)(char *, char *, void *);
  void *__src;
  void *__srca;
  char *__srcb;
  unsigned int (**__srcc)(const void *, uint64_t, uint64_t);
  void *__srcf;
  void *__srcg;
  void *__srcd;
  unsigned int (**__srce)(const void *, uint64_t, uint64_t);
  _QWORD *v380;
  void (*v381)(char *, char *, void *);
  uint64_t v382;
  uint64_t v383;
  void (*v384)(char *, char *, uint64_t);
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  void *__dst;
  void *__dsta;
  void (*__dstb)(char *, char *, uint64_t);
  char *__dstc;
  uint64_t v397;
  _QWORD *v398;
  _QWORD *v399;

  v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)v5 + v6);
  v398 = a2;
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v10 = *(_QWORD **)(v9 - 8);
  v11 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v10[6];
  v399 = v7;
  LODWORD(v7) = v11(v7, 1, v9);
  v12 = v11(v8, 1, v9);
  if ((_DWORD)v7)
  {
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?)
                                  - 8)
                      + 64);
      v14 = v399;
LABEL_6:
      memcpy(v14, v8, v13);
      goto LABEL_106;
    }
    __dst = v10;
    v397 = v9;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v386 = a3;
      *v399 = *v8;
      v15 = v8[1];
      v16 = v8[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v15, v16);
      v399[1] = v15;
      v399[2] = v16;
      v17 = (int *)type metadata accessor for AMDPbPECQuery(0);
      v18 = v17[6];
      v19 = (char *)v399 + v18;
      v20 = (char *)v8 + v18;
      v21 = type metadata accessor for UnknownStorage();
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      v22(v19, v20, v21);
      v23 = v17[7];
      v24 = (_DWORD *)((char *)v399 + v23);
      v25 = (_DWORD *)((char *)v8 + v23);
      v26 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v367 = v27;
        *v24 = *v25;
        v24[1] = v25[1];
        *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
        v58 = *(int *)(v26 + 28);
        v59 = (char *)v24 + v58;
        v60 = (char *)v25 + v58;
        swift_bridgeObjectRetain();
        __srca = (void *)v21;
        v381 = (void (*)(char *, char *, void *))v22;
        v22(v59, v60, v21);
        v61 = *(int *)(v26 + 32);
        v62 = (char *)v24 + v61;
        v63 = (char *)v25 + v61;
        v64 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v65 = *(_QWORD *)(v64 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          v67 = v367;
        }
        else
        {
          v109 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v361 = *(_QWORD *)(v109 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v361 + 48))(v63, 1, v109))
          {
            v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v381(v62, v63, __srca);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v361 + 56))(v62, 0, 1, v109);
          }
          v147 = v62;
          v67 = v367;
          v381(&v147[*(int *)(v64 + 20)], &v63[*(int *)(v64 + 20)], __srca);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v147, 0, 1, v64);
        }
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v24, 0, 1, v26);
        v21 = (uint64_t)__srca;
        v22 = (void (*)(char *, char *, uint64_t))v381;
      }
      v148 = v17[8];
      v149 = (char *)v399 + v148;
      v150 = (char *)v8 + v148;
      v151 = type metadata accessor for AMDPbEvaluationKey(0);
      v152 = *(_QWORD *)(v151 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151))
      {
        v363 = v152;
        v22(v149, v150, v21);
        v368 = v151;
        v154 = *(int *)(v151 + 20);
        v155 = &v149[v154];
        v156 = &v150[v154];
        v157 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v158 = *(_QWORD *)(v157 - 8);
        v384 = v22;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
        {
          v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v155 = *(_QWORD *)v156;
          __srcf = (void *)v21;
          v355 = v149;
          v160 = (void (*)(char *, char *, void *))v22;
          v161 = *((_QWORD *)v156 + 1);
          v162 = *((_QWORD *)v156 + 2);
          outlined copy of Data._Representation(v161, v162);
          *((_QWORD *)v155 + 1) = v161;
          *((_QWORD *)v155 + 2) = v162;
          v21 = (uint64_t)__srcf;
          v160(&v155[*(int *)(v157 + 24)], &v156[*(int *)(v157 + 24)], __srcf);
          v149 = v355;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
        }
        v163 = v368;
        v164 = *(int *)(v368 + 24);
        v165 = &v149[v164];
        v166 = &v150[v164];
        v167 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v168 = *(_QWORD *)(v167 - 8);
        a3 = v386;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v166, 1, v167))
        {
          v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
          v170 = v363;
        }
        else
        {
          v349 = v168;
          v171 = v384;
          v384(v165, v166, v21);
          v172 = *(int *)(v167 + 20);
          v342 = v165;
          v173 = &v165[v172];
          v174 = &v166[v172];
          v175 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v176 = *(_QWORD *)(v175 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
          {
            v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v173 = *(_QWORD *)v174;
            v198 = *(int *)(v175 + 20);
            __srcg = (void *)v21;
            v199 = &v173[v198];
            v200 = &v174[v198];
            swift_bridgeObjectRetain();
            v201 = v199;
            v21 = (uint64_t)__srcg;
            v202 = v200;
            v171 = v384;
            v384(v201, v202, (uint64_t)__srcg);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
          }
          v203 = *(int *)(v167 + 24);
          v204 = &v342[v203];
          v205 = &v166[v203];
          v206 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v207 = *(_QWORD *)(v206 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v205, 1, v206))
          {
            v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
            v170 = v363;
          }
          else
          {
            v171(v204, v205, v21);
            v339 = v206;
            v222 = *(int *)(v206 + 20);
            v356 = v204;
            v223 = &v204[v222];
            v224 = &v205[v222];
            v225 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            __srcd = (void *)v21;
            v226 = *(_QWORD *)(v225 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v226 + 48))(v224, 1, v225))
            {
              v227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v223, v224, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
              v228 = v356;
              v170 = v363;
            }
            else
            {
              v171(v223, v224, (uint64_t)__srcd);
              v274 = *(int *)(v225 + 20);
              v331 = v223;
              v335 = &v223[v274];
              v275 = &v224[v274];
              v276 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v327 = *(_QWORD *)(v276 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v327 + 48))(v275, 1, v276))
              {
                v277 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v335, v275, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v335 = *(_QWORD *)v275;
                v303 = *(int *)(v276 + 20);
                v326 = &v335[v303];
                v304 = &v275[v303];
                swift_bridgeObjectRetain();
                v171(v326, v304, (uint64_t)__srcd);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v335, 0, 1, v276);
              }
              v228 = v356;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v226 + 56))(v331, 0, 1, v225);
              v170 = v363;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v228, 0, 1, v339);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v349 + 56))(v342, 0, 1, v167);
          a3 = v386;
          v163 = v368;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v149, 0, 1, v163);
        goto LABEL_105;
      }
      v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    }
    else
    {
      v380 = v5;
      *(_DWORD *)v399 = *(_DWORD *)v8;
      v44 = v8[1];
      v45 = v8[2];
      outlined copy of Data._Representation(v44, v45);
      v399[1] = v44;
      v399[2] = v45;
      v46 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      v47 = v46[6];
      v48 = (char *)v399 + v47;
      v49 = (char *)v8 + v47;
      v50 = type metadata accessor for UnknownStorage();
      v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
      v51(v48, v49, v50);
      v52 = v46[7];
      v53 = (_QWORD *)((char *)v399 + v52);
      v54 = (_QWORD *)((char *)v8 + v52);
      v55 = type metadata accessor for AspirePirEncryptedIndices(0);
      v56 = *(_QWORD *)(v55 - 8);
      v366 = v51;
      __src = (void *)v50;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
      {
        v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *v53 = *v54;
        v53[1] = v54[1];
        v82 = *(int *)(v55 + 24);
        v83 = a3;
        v84 = (char *)v53 + v82;
        v85 = (char *)v54 + v82;
        swift_bridgeObjectRetain();
        v86 = v84;
        a3 = v83;
        v51(v86, v85, v50);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
      v87 = v46[8];
      v88 = (char *)v399 + v87;
      v89 = (char *)v8 + v87;
      v90 = type metadata accessor for AMDPbEvaluationKey(0);
      v91 = *(_QWORD *)(v90 - 8);
      v5 = v380;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
      {
        v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
LABEL_105:
        swift_storeEnumTagMultiPayload();
        (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__dst + 7))(v399, 0, 1, v397);
        goto LABEL_106;
      }
      v360 = v91;
      v386 = a3;
      v366(v88, v89, v50);
      v93 = *(int *)(v90 + 20);
      v94 = &v88[v93];
      v95 = &v89[v93];
      v96 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v97 = *(_QWORD *)(v96 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
      {
        v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v94 = *(_QWORD *)v95;
        v353 = v88;
        v120 = v90;
        v122 = *((_QWORD *)v95 + 1);
        v121 = *((_QWORD *)v95 + 2);
        outlined copy of Data._Representation(v122, v121);
        *((_QWORD *)v94 + 1) = v122;
        *((_QWORD *)v94 + 2) = v121;
        v90 = v120;
        v88 = v353;
        v366(&v94[*(int *)(v96 + 24)], &v95[*(int *)(v96 + 24)], v50);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      }
      v123 = *(int *)(v90 + 24);
      v124 = &v88[v123];
      v125 = &v89[v123];
      v126 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v127 = *(_QWORD *)(v126 - 8);
      v5 = v380;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
      {
        v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
        v129 = v360;
      }
      else
      {
        v348 = v90;
        v366(v124, v125, v50);
        v136 = *(int *)(v126 + 20);
        v354 = v124;
        v137 = &v124[v136];
        v138 = &v125[v136];
        v139 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v140 = *(_QWORD *)(v139 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
        {
          v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v137 = *(_QWORD *)v138;
          v187 = *(int *)(v139 + 20);
          v343 = v127;
          v188 = &v137[v187];
          v189 = &v138[v187];
          swift_bridgeObjectRetain();
          v190 = v188;
          v127 = v343;
          v366(v190, v189, v50);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v139);
        }
        v191 = *(int *)(v126 + 24);
        v192 = v354;
        v193 = &v354[v191];
        v194 = &v125[v191];
        v195 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v196 = *(_QWORD *)(v195 - 8);
        v5 = v380;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v194, 1, v195))
        {
          v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
          v129 = v360;
        }
        else
        {
          v366(v193, v194, (uint64_t)__src);
          v338 = v195;
          v344 = v193;
          v215 = *(int *)(v195 + 20);
          v216 = &v193[v215];
          v217 = &v194[v215];
          v218 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v219 = *(_QWORD *)(v218 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v217, 1, v218))
          {
            v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
            v129 = v360;
            v5 = v380;
            v221 = v338;
          }
          else
          {
            v366(v216, v217, (uint64_t)__src);
            v269 = *(int *)(v218 + 20);
            v330 = &v216[v269];
            v334 = v216;
            v270 = &v217[v269];
            v271 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v272 = *(_QWORD *)(v271 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v270, 1, v271))
            {
              v273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v330, v270, *(_QWORD *)(*(_QWORD *)(v273 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v330 = *(_QWORD *)v270;
              v302 = *(int *)(v271 + 20);
              v325 = &v270[v302];
              v328 = &v330[v302];
              swift_bridgeObjectRetain();
              v366(v328, v325, (uint64_t)__src);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v330, 0, 1, v271);
            }
            v129 = v360;
            v5 = v380;
            v221 = v338;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v219 + 56))(v334, 0, 1, v218);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v344, 0, 1, v221);
          v192 = v354;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v192, 0, 1, v126);
        v90 = v348;
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v88, 0, 1, v90);
    }
    a3 = v386;
    goto LABEL_105;
  }
  if (v12)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v399, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    v13 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?)
                                - 8)
                    + 64);
    v14 = v399;
    goto LABEL_6;
  }
  if (v5 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v399, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *v399 = *v8;
      v29 = v8[1];
      v30 = v8[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v29, v30);
      v399[1] = v29;
      v399[2] = v30;
      v31 = (int *)type metadata accessor for AMDPbPECQuery(0);
      v32 = v31[6];
      v33 = (char *)v399 + v32;
      v34 = (char *)v8 + v32;
      v35 = type metadata accessor for UnknownStorage();
      v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
      v36(v33, v34, v35);
      v37 = v31[7];
      v38 = (_DWORD *)((char *)v399 + v37);
      v39 = (_DWORD *)((char *)v8 + v37);
      v40 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      v41 = *(_QWORD *)(v40 - 8);
      __dsta = (void *)v35;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        v43 = (void (*)(char *, char *, void *))v36;
      }
      else
      {
        v383 = v41;
        v387 = a3;
        *v38 = *v39;
        v38[1] = v39[1];
        *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
        v99 = *(int *)(v40 + 28);
        v100 = (char *)v38 + v99;
        v101 = (char *)v39 + v99;
        swift_bridgeObjectRetain();
        v36(v100, v101, v35);
        v102 = *(int *)(v40 + 32);
        v103 = (char *)v38 + v102;
        v104 = (char *)v39 + v102;
        v105 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v106 = *(_QWORD *)(v105 - 8);
        __srcb = v104;
        v107 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105);
        v43 = (void (*)(char *, char *, void *))v36;
        if (v107)
        {
          v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v103, __srcb, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
        }
        else
        {
          v362 = v105;
          v142 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v143 = *(_QWORD *)(v142 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(__srcb, 1, v142))
          {
            v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            v145 = v103;
            memcpy(v103, __srcb, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
            v146 = (uint64_t)__dsta;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v345 = v143;
            v146 = (uint64_t)__dsta;
            v36(v103, __srcb, (uint64_t)__dsta);
            swift_storeEnumTagMultiPayload();
            v229 = v142;
            v145 = v103;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v345 + 56))(v103, 0, 1, v229);
          }
          v36(&v145[*(int *)(v362 + 20)], &__srcb[*(int *)(v362 + 20)], v146);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v145, 0, 1, v362);
          v43 = (void (*)(char *, char *, void *))v36;
        }
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v38, 0, 1, v40);
        a3 = v387;
      }
      v230 = v31[8];
      v231 = (char *)v399 + v230;
      v232 = (char *)v8 + v230;
      v233 = type metadata accessor for AMDPbEvaluationKey(0);
      v234 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v233 - 8);
      if (v234[6](v232, 1, v233))
      {
        v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
      }
      else
      {
        __srce = v234;
        v43(v231, v232, __dsta);
        v385 = v233;
        v236 = *(int *)(v233 + 20);
        v237 = &v231[v236];
        v238 = &v232[v236];
        v239 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v240 = *(_QWORD *)(v239 - 8);
        v371 = v43;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v240 + 48))(v238, 1, v239))
        {
          v241 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v237 = *(_QWORD *)v238;
          v390 = a3;
          v243 = *((_QWORD *)v238 + 1);
          v242 = *((_QWORD *)v238 + 2);
          outlined copy of Data._Representation(v243, v242);
          *((_QWORD *)v237 + 1) = v243;
          *((_QWORD *)v237 + 2) = v242;
          a3 = v390;
          v43(&v237[*(int *)(v239 + 24)], &v238[*(int *)(v239 + 24)], __dsta);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v240 + 56))(v237, 0, 1, v239);
        }
        v244 = v385;
        v245 = *(int *)(v385 + 24);
        v246 = &v231[v245];
        v247 = &v232[v245];
        v248 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v249 = *(_QWORD *)(v248 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v249 + 48))(v247, 1, v248))
        {
          v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v250 - 8) + 64));
          v251 = __srce;
        }
        else
        {
          v365 = v249;
          v371(v246, v247, __dsta);
          v252 = *(int *)(v248 + 20);
          v357 = v246;
          v253 = &v246[v252];
          v254 = &v247[v252];
          v255 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v256 = *(_QWORD *)(v255 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v256 + 48))(v254, 1, v255))
          {
            v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v253, v254, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v253 = *(_QWORD *)v254;
            v278 = *(int *)(v255 + 20);
            v350 = &v253[v278];
            v391 = a3;
            v279 = &v254[v278];
            swift_bridgeObjectRetain();
            v280 = v279;
            a3 = v391;
            v371(v350, v280, __dsta);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v256 + 56))(v253, 0, 1, v255);
          }
          v281 = *(int *)(v248 + 24);
          v282 = &v357[v281];
          v283 = &v247[v281];
          v284 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v285 = *(_QWORD *)(v284 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v285 + 48))(v283, 1, v284))
          {
            v286 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v282, v283, *(_QWORD *)(*(_QWORD *)(v286 - 8) + 64));
            v251 = __srce;
            v244 = v385;
          }
          else
          {
            v346 = v285;
            v392 = a3;
            v371(v282, v283, __dsta);
            v352 = v284;
            v294 = *(int *)(v284 + 20);
            v295 = &v282[v294];
            v296 = &v283[v294];
            v297 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v298 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v297 - 8);
            if (v298[6](v296, 1, v297))
            {
              v299 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v295, v296, *(_QWORD *)(*(_QWORD *)(v299 - 8) + 64));
              a3 = v392;
              v251 = __srce;
              v301 = v346;
              v300 = v352;
            }
            else
            {
              v333 = v298;
              v341 = v282;
              v371(v295, v296, __dsta);
              v314 = *(int *)(v297 + 20);
              v336 = v295;
              v315 = &v295[v314];
              v316 = &v296[v314];
              v317 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v318 = *(_QWORD *)(v317 - 8);
              v319 = v297;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v318 + 48))(v316, 1, v317))
              {
                v320 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v315, v316, *(_QWORD *)(*(_QWORD *)(v320 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v315 = *(_QWORD *)v316;
                v322 = *(int *)(v317 + 20);
                v323 = &v315[v322];
                v324 = &v316[v322];
                swift_bridgeObjectRetain();
                v371(v323, v324, __dsta);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v318 + 56))(v315, 0, 1, v317);
              }
              v301 = v346;
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v333[7])(v336, 0, 1, v319);
              a3 = v392;
              v251 = __srce;
              v282 = v341;
              v300 = v352;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v282, 0, 1, v300);
            v244 = v385;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v365 + 56))(v357, 0, 1, v248);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v251[7])(v231, 0, 1, v244);
      }
    }
    else
    {
      *(_DWORD *)v399 = *(_DWORD *)v8;
      v68 = v8[1];
      v69 = v8[2];
      outlined copy of Data._Representation(v68, v69);
      v399[1] = v68;
      v399[2] = v69;
      v70 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      v71 = v70[6];
      v72 = (char *)v399 + v71;
      v73 = (char *)v8 + v71;
      v74 = type metadata accessor for UnknownStorage();
      __dstb = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16);
      __dstb(v72, v73, v74);
      v75 = v70[7];
      v76 = (_QWORD *)((char *)v399 + v75);
      v77 = (_QWORD *)((char *)v8 + v75);
      v78 = type metadata accessor for AspirePirEncryptedIndices(0);
      v79 = *(_QWORD *)(v78 - 8);
      v382 = v74;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
      {
        v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        v81 = __dstb;
      }
      else
      {
        *v76 = *v77;
        v76[1] = v77[1];
        v111 = *(int *)(v78 + 24);
        v388 = a3;
        v112 = (char *)v76 + v111;
        v113 = (char *)v77 + v111;
        swift_bridgeObjectRetain();
        v114 = v112;
        a3 = v388;
        v81 = __dstb;
        __dstb(v114, v113, v74);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
      }
      v115 = v70[8];
      __dstc = (char *)v399 + v115;
      v116 = (char *)v8 + v115;
      v117 = type metadata accessor for AMDPbEvaluationKey(0);
      v118 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v117 - 8);
      if (v118[6](v116, 1, v117))
      {
        v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(__dstc, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        __srcc = v118;
        v81(__dstc, v116, v74);
        v130 = *(int *)(v117 + 20);
        v131 = &__dstc[v130];
        v132 = &v116[v130];
        v133 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v134 = *(_QWORD *)(v133 - 8);
        v389 = a3;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
        {
          v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v131 = *(_QWORD *)v132;
          v369 = v117;
          v179 = *((_QWORD *)v132 + 1);
          v178 = *((_QWORD *)v132 + 2);
          outlined copy of Data._Representation(v179, v178);
          *((_QWORD *)v131 + 1) = v179;
          *((_QWORD *)v131 + 2) = v178;
          v117 = v369;
          v81(&v131[*(int *)(v133 + 24)], &v132[*(int *)(v133 + 24)], v74);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v131, 0, 1, v133);
        }
        v180 = *(int *)(v117 + 24);
        v181 = &__dstc[v180];
        v182 = &v116[v180];
        v183 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v184 = *(_QWORD *)(v183 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v182, 1, v183))
        {
          v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
          v186 = __srcc;
        }
        else
        {
          v370 = v117;
          v81(v181, v182, v74);
          v209 = *(int *)(v183 + 20);
          v364 = v181;
          v210 = &v181[v209];
          v211 = &v182[v209];
          v212 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v213 = *(_QWORD *)(v212 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v213 + 48))(v211, 1, v212))
          {
            v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v210 = *(_QWORD *)v211;
            v258 = *(int *)(v212 + 20);
            v358 = v184;
            v259 = &v210[v258];
            v260 = &v211[v258];
            swift_bridgeObjectRetain();
            v261 = v259;
            v184 = v358;
            v81(v261, v260, v74);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v210, 0, 1, v212);
          }
          v262 = *(int *)(v183 + 24);
          v263 = v364;
          v264 = &v364[v262];
          v265 = &v182[v262];
          v266 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v267 = *(_QWORD *)(v266 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v267 + 48))(v265, 1, v266))
          {
            v268 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v264, v265, *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64));
            v186 = __srcc;
          }
          else
          {
            v81(v264, v265, v382);
            v351 = v266;
            v359 = v264;
            v287 = *(int *)(v266 + 20);
            v288 = &v264[v287];
            v289 = &v265[v287];
            v290 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v291 = *(_QWORD *)(v290 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v291 + 48))(v289, 1, v290))
            {
              v292 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v288, v289, *(_QWORD *)(*(_QWORD *)(v292 - 8) + 64));
              v186 = __srcc;
              v293 = v351;
            }
            else
            {
              v81(v288, v289, v382);
              v310 = *(int *)(v290 + 20);
              v340 = &v288[v310];
              v347 = v288;
              v311 = &v289[v310];
              v312 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v332 = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v312 - 8);
              if (((unsigned int (*)(char *, uint64_t, uint64_t))v332[6])(v311, 1, v312))
              {
                v313 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v340, v311, *(_QWORD *)(*(_QWORD *)(v313 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v340 = *(_QWORD *)v311;
                v321 = *(int *)(v312 + 20);
                v329 = &v340[v321];
                v337 = &v311[v321];
                swift_bridgeObjectRetain();
                v81(v329, v337, v382);
                v332[7](v340, 0, 1, v312);
              }
              v186 = __srcc;
              v293 = v351;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v291 + 56))(v347, 0, 1, v290);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v267 + 56))(v359, 0, 1, v293);
            v263 = v364;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v184 + 56))(v263, 0, 1, v183);
          v117 = v370;
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v186[7])(__dstc, 0, 1, v117);
        a3 = v389;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_106:
  v305 = *(int *)(a3 + 24);
  v306 = (char *)v5 + v305;
  v307 = (char *)v398 + v305;
  v308 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v308 - 8) + 24))(v306, v307, v308);
  return v5;
}

_OWORD *initializeWithTake for AMDPbHEQuery(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unsigned int (**v92)(const void *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *__dst;
  unsigned int (**__dsta)(const void *, uint64_t, uint64_t);
  char *__dstb;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  _OWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;

  v3 = a3;
  v4 = a2;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v189 = v10;
    v190 = v3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v187 = v4;
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
      v12 = type metadata accessor for AMDPbPECQuery(0);
      v13 = *(int *)(v12 + 24);
      v14 = &v7[v13];
      v15 = &v8[v13];
      v16 = type metadata accessor for UnknownStorage();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
      v17(v14, v15, v16);
      v183 = v12;
      v18 = *(int *)(v12 + 28);
      v19 = &v7[v18];
      v20 = &v8[v18];
      v21 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      v22 = *(_QWORD *)(v21 - 8);
      v181 = v16;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        v24 = v17;
        v25 = v183;
        v4 = v187;
      }
      else
      {
        v179 = v22;
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
        v17(&v19[*(int *)(v21 + 28)], &v20[*(int *)(v21 + 28)], v16);
        v39 = *(int *)(v21 + 32);
        v172 = &v19[v39];
        v40 = &v20[v39];
        v41 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v42 = *(_QWORD *)(v41 - 8);
        v175 = v40;
        v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41);
        v24 = v17;
        if (v43)
        {
          v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v172, v175, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          v25 = v183;
          v4 = v187;
        }
        else
        {
          v169 = v41;
          v57 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v163 = *(_QWORD *)(v57 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v175, 1, v57))
          {
            v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            v59 = v172;
            memcpy(v172, v175, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v158 = v57;
            v59 = v172;
            v17(v172, v175, v181);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v172, 0, 1, v158);
          }
          v74 = v59;
          v25 = v183;
          v17(&v74[*(int *)(v169 + 20)], &v175[*(int *)(v169 + 20)], v181);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v74, 0, 1, v169);
          v24 = v17;
          v4 = v187;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v19, 0, 1, v21);
      }
      v75 = *(int *)(v25 + 32);
      v76 = &v7[v75];
      v77 = &v8[v75];
      v78 = type metadata accessor for AMDPbEvaluationKey(0);
      v79 = *(_QWORD *)(v78 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
      {
        v177 = v79;
        v24(v76, v77, v181);
        v180 = v78;
        v81 = *(int *)(v78 + 20);
        v185 = v76;
        v82 = &v76[v81];
        v83 = &v77[v81];
        v84 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v85 = *(_QWORD *)(v84 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
        {
          v86 = v24;
          v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v82 = *(_QWORD *)v83;
          *(_OWORD *)(v82 + 8) = *(_OWORD *)(v83 + 8);
          v86 = v24;
          v24(&v82[*(int *)(v84 + 24)], &v83[*(int *)(v84 + 24)], v181);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
        }
        v4 = v187;
        v88 = *(int *)(v180 + 24);
        v89 = &v185[v88];
        v90 = &v77[v88];
        v91 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v92 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v91 - 8);
        if (v92[6](v90, 1, v91))
        {
          v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          v67 = v189;
          v3 = v190;
          v94 = v177;
          v95 = v180;
        }
        else
        {
          __dsta = v92;
          v96 = v86;
          v86(v89, v90, v181);
          v171 = v89;
          v174 = v91;
          v97 = *(int *)(v91 + 20);
          v98 = &v89[v97];
          v99 = &v90[v97];
          v100 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v101 = *(_QWORD *)(v100 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
          {
            v102 = v98;
            v103 = v96;
            v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v102, v99, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v98 = *(_QWORD *)v99;
            v112 = *(int *)(v100 + 20);
            v113 = &v98[v112];
            v114 = &v99[v112];
            v115 = v98;
            v103 = v96;
            v96(v113, v114, v181);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v115, 0, 1, v100);
          }
          v4 = v187;
          v116 = v171;
          v117 = *(int *)(v174 + 24);
          v118 = &v171[v117];
          v119 = &v90[v117];
          v120 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v121 = *(_QWORD *)(v120 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
          {
            v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
            v94 = v177;
            v95 = v180;
          }
          else
          {
            v131 = v103;
            v103(v118, v119, v181);
            v162 = v120;
            v165 = v118;
            v132 = *(int *)(v120 + 20);
            v133 = &v118[v132];
            v134 = &v119[v132];
            v135 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v136 = *(_QWORD *)(v135 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
            {
              v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
              v4 = v187;
              v94 = v177;
              v95 = v180;
              v116 = v171;
            }
            else
            {
              v160 = v136;
              v131(v133, v134, v181);
              v144 = *(int *)(v135 + 20);
              v145 = &v133[v144];
              v146 = &v134[v144];
              v147 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v157 = *(_QWORD *)(v147 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(v146, 1, v147))
              {
                v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v145 = *(_QWORD *)v146;
                v131(&v145[*(int *)(v147 + 20)], &v146[*(int *)(v147 + 20)], v181);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v145, 0, 1, v147);
              }
              v4 = v187;
              v116 = v171;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v160 + 56))(v133, 0, 1, v135);
              v94 = v177;
              v95 = v180;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v165, 0, 1, v162);
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dsta[7])(v116, 0, 1, v174);
          v67 = v189;
          v3 = v190;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v185, 0, 1, v95);
        goto LABEL_59;
      }
      v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      v188 = v9;
      *(_DWORD *)v7 = *(_DWORD *)v8;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
      v26 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      v27 = v26[6];
      v28 = &v7[v27];
      v29 = &v8[v27];
      v30 = type metadata accessor for UnknownStorage();
      v31 = v7;
      v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
      v32(v28, v29, v30);
      v33 = v26[7];
      v184 = v31;
      v34 = &v31[v33];
      v35 = &v8[v33];
      v36 = type metadata accessor for AspirePirEncryptedIndices(0);
      v37 = *(_QWORD *)(v36 - 8);
      v178 = v30;
      v182 = v32;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v34 = *(_OWORD *)v35;
        v32(&v34[*(int *)(v36 + 24)], &v35[*(int *)(v36 + 24)], v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v45 = v26[8];
      v7 = v184;
      v46 = &v184[v45];
      v47 = &v8[v45];
      v48 = type metadata accessor for AMDPbEvaluationKey(0);
      v49 = *(_QWORD *)(v48 - 8);
      v9 = v188;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        v182(v46, v47, v178);
        v173 = v46;
        v176 = v48;
        v51 = *(int *)(v48 + 20);
        v52 = &v46[v51];
        v53 = &v47[v51];
        v54 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v55 = *(_QWORD *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v52 = *(_QWORD *)v53;
          *(_OWORD *)(v52 + 8) = *(_OWORD *)(v53 + 8);
          v182(&v52[*(int *)(v54 + 24)], &v53[*(int *)(v54 + 24)], v178);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        v60 = v173;
        v7 = v184;
        v9 = v188;
        v61 = *(int *)(v176 + 24);
        v62 = &v173[v61];
        v63 = &v47[v61];
        v64 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v65 = *(_QWORD *)(v64 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          v67 = v189;
          v3 = v190;
          v68 = v176;
        }
        else
        {
          v164 = v65;
          v182(v62, v63, v178);
          v69 = *(int *)(v64 + 20);
          __dst = &v62[v69];
          v170 = v62;
          v70 = &v63[v69];
          v71 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v72 = *(_QWORD *)(v71 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
          {
            v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(__dst, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__dst = *(_QWORD *)v70;
            v182(&__dst[*(int *)(v71 + 20)], &v70[*(int *)(v71 + 20)], v178);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v71);
          }
          v60 = v173;
          v7 = v184;
          v9 = v188;
          v186 = v64;
          v105 = *(int *)(v64 + 24);
          v106 = &v170[v105];
          v107 = &v63[v105];
          v108 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v109 = *(_QWORD *)(v108 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
          {
            v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
            v68 = v176;
            v111 = v186;
          }
          else
          {
            v159 = v109;
            v182(v106, v107, v178);
            v161 = v108;
            v123 = *(int *)(v108 + 20);
            __dstb = v106;
            v124 = &v106[v123];
            v125 = &v107[v123];
            v126 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v127 = *(_QWORD *)(v126 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
            {
              v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
              v60 = v173;
              v68 = v176;
              v130 = v159;
              v129 = v161;
              v111 = v186;
            }
            else
            {
              v154 = v127;
              v182(v124, v125, v178);
              v155 = v126;
              v156 = v124;
              v138 = *(int *)(v126 + 20);
              v139 = &v124[v138];
              v140 = &v125[v138];
              v141 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v142 = *(_QWORD *)(v141 - 8);
              v111 = v186;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
              {
                v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v139 = *(_QWORD *)v140;
                v182(&v139[*(int *)(v141 + 20)], &v140[*(int *)(v141 + 20)], v178);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
              }
              v9 = v188;
              v130 = v159;
              v129 = v161;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v156, 0, 1, v155);
              v60 = v173;
              v68 = v176;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v130 + 56))(__dstb, 0, 1, v129);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v170, 0, 1, v111);
          v67 = v189;
          v3 = v190;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v60, 0, 1, v68);
        goto LABEL_59;
      }
      v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    v67 = v189;
    v3 = v190;
LABEL_59:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v7, 0, 1, v9);
    goto LABEL_60;
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_60:
  v149 = *(int *)(v3 + 24);
  v150 = (char *)a1 + v149;
  v151 = (char *)v4 + v149;
  v152 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 32))(v150, v151, v152);
  return a1;
}

_QWORD *assignWithTake for AMDPbHEQuery(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  int *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, char *, uint64_t);
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unsigned int (**v103)(const void *, uint64_t, uint64_t);
  uint64_t v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unsigned int (**v110)(const void *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (**v126)(void *, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unsigned int (**v134)(const void *, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unsigned int (**v148)(const void *, uint64_t, uint64_t);
  uint64_t v149;
  unsigned int (**v150)(const void *, uint64_t, uint64_t);
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(void);
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int (**v166)(const void *, uint64_t, uint64_t);
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  int *v180;
  unsigned int (**v181)(const void *, uint64_t, uint64_t);
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  unsigned int (**v191)(const void *, uint64_t, uint64_t);
  uint64_t v192;
  uint64_t v193;
  void (*v194)(void);
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  unsigned int (**v200)(const void *, uint64_t, uint64_t);
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unsigned int (**v220)(const void *, uint64_t, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  void (*v227)(uint64_t, char *, uint64_t);
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  unsigned int (**v254)(const void *, uint64_t, uint64_t);
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  void (*v263)(char *, char *, uint64_t);
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unsigned int (**v268)(const void *, uint64_t, uint64_t);
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  unsigned int (**v288)(const void *, uint64_t, uint64_t);
  unsigned int (**v289)(const void *, uint64_t, uint64_t);
  char *v290;
  char *v291;
  unsigned int (**v292)(const void *, uint64_t, uint64_t);
  uint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  unsigned int (**v303)(const void *, uint64_t, uint64_t);
  char *v304;
  unsigned int (**v305)(void *, uint64_t, uint64_t);
  void *v306;
  void *v307;
  int *v308;
  unsigned int (**v309)(const void *, uint64_t, uint64_t);
  int *v310;
  char *v311;
  unsigned int (**v312)(const void *, uint64_t, uint64_t);
  char *v313;
  char *v314;
  _QWORD *v315;
  void (*v316)(void);
  char *v317;
  void *v318;
  uint64_t v319;
  void (*v320)(char *, char *, void *);
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  char *__dst;
  void *__dsta;
  char *__dstb;
  unsigned int (**__dstc)(const void *, uint64_t, uint64_t);
  char *__dstd;
  char *__dste;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  void *__src;
  int *__srca;
  char *__srcb;
  unsigned int (**__srcc)(const void *, uint64_t, uint64_t);
  char *__srcd;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void (*v354)(uint64_t, char *, uint64_t);
  void (*v355)(uint64_t, char *, uint64_t);
  uint64_t v356;
  uint64_t v357;

  v4 = a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t)a1 + v7;
  v9 = (char *)v4 + v7;
  v10 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v353 = v11;
      v356 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v347 = v10;
        *(_QWORD *)v8 = *(_QWORD *)v9;
        *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
        v15 = type metadata accessor for AMDPbPECQuery(0);
        v16 = *(int *)(v15 + 24);
        v17 = v8 + v16;
        v18 = &v9[v16];
        v19 = type metadata accessor for UnknownStorage();
        v20 = *(void (**)(void))(*(_QWORD *)(v19 - 8) + 32);
        ((void (*)(uint64_t, char *, uint64_t))v20)(v17, v18, v19);
        v342 = v15;
        v21 = *(int *)(v15 + 28);
        v22 = (_QWORD *)(v8 + v21);
        v23 = &v9[v21];
        v24 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
        v25 = *(_QWORD *)(v24 - 8);
        __src = (void *)v19;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          v319 = v25;
          *v22 = *(_QWORD *)v23;
          v22[1] = *((_QWORD *)v23 + 1);
          ((void (*)(char *, char *, uint64_t))v20)((char *)v22 + *(int *)(v24 + 28), &v23[*(int *)(v24 + 28)], v19);
          v53 = *(int *)(v24 + 32);
          __dst = (char *)v22 + v53;
          v54 = &v23[v53];
          v55 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
          v56 = *(_QWORD *)(v55 - 8);
          v331 = v54;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
          {
            v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
            memcpy(__dst, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
            v58 = v319;
          }
          else
          {
            v308 = (int *)v55;
            v93 = v20;
            v94 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
            v297 = *(_QWORD *)(v94 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v297 + 48))(v54, 1, v94))
            {
              v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
              v96 = __dst;
              memcpy(__dst, v54, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
            }
            else
            {
              swift_getEnumCaseMultiPayload();
              v129 = v94;
              v96 = __dst;
              v93();
              swift_storeEnumTagMultiPayload();
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v297 + 56))(__dst, 0, 1, v129);
            }
            v58 = v319;
            ((void (*)(char *, char *, void *))v93)(&v96[v308[5]], &v331[v308[5]], __src);
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v96, 0, 1, v308);
            v20 = v93;
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v22, 0, 1, v24);
        }
        v130 = *(int *)(v342 + 32);
        v131 = (char *)(v8 + v130);
        v132 = &v9[v130];
        v133 = type metadata accessor for AMDPbEvaluationKey(0);
        v134 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v133 - 8);
        if (v134[6](v132, 1, v133))
        {
          v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
          memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
          v78 = v353;
          a3 = v356;
          v10 = v347;
          goto LABEL_104;
        }
        __dstc = v134;
        ((void (*)(char *, char *, void *))v20)(v131, v132, __src);
        v346 = v133;
        v136 = *(int *)(v133 + 20);
        v335 = v131;
        v137 = &v131[v136];
        v138 = &v132[v136];
        v139 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v140 = *(_QWORD *)(v139 - 8);
        v316 = v20;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
        {
          v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v137 = *(_QWORD *)v138;
          *(_OWORD *)(v137 + 8) = *(_OWORD *)(v138 + 8);
          ((void (*)(char *, char *, void *))v20)(&v137[*(int *)(v139 + 24)], &v138[*(int *)(v139 + 24)], __src);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v139);
        }
        v142 = v346;
        v143 = *(int *)(v346 + 24);
        v144 = v335;
        v145 = &v335[v143];
        v146 = &v132[v143];
        v147 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v148 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v147 - 8);
        v10 = v347;
        if (v148[6](v146, 1, v147))
        {
          v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
          v150 = __dstc;
        }
        else
        {
          v303 = v148;
          ((void (*)(char *, char *, void *))v316)(v145, v146, __src);
          v310 = (int *)v147;
          v151 = *(int *)(v147 + 20);
          v322 = v145;
          v152 = &v145[v151];
          v153 = &v146[v151];
          v154 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v155 = *(_QWORD *)(v154 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
          {
            v156 = v316;
            v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v152 = *(_QWORD *)v153;
            v156 = v316;
            ((void (*)(char *, char *, void *))v316)(&v152[*(int *)(v154 + 20)], &v153[*(int *)(v154 + 20)], __src);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v152, 0, 1, v154);
          }
          v173 = v310[6];
          v174 = &v322[v173];
          v175 = &v146[v173];
          v176 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v177 = *(_QWORD *)(v176 - 8);
          v142 = v346;
          v10 = v347;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v177 + 48))(v175, 1, v176))
          {
            v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
            v179 = v322;
            v150 = __dstc;
            v181 = v303;
            v180 = v310;
          }
          else
          {
            v293 = v177;
            v194 = v156;
            ((void (*)(char *, char *, void *))v156)(v174, v175, __src);
            v299 = v176;
            v195 = *(int *)(v176 + 20);
            v196 = v174;
            v197 = &v174[v195];
            v198 = &v175[v195];
            v199 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v200 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v199 - 8);
            if (v200[6](v198, 1, v199))
            {
              v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v201 - 8) + 64));
              v142 = v346;
              v10 = v347;
              v150 = __dstc;
              v181 = v303;
              v180 = v310;
            }
            else
            {
              v288 = v200;
              ((void (*)(char *, char *, void *))v194)(v197, v198, __src);
              v241 = *(int *)(v199 + 20);
              v290 = v197;
              v286 = &v197[v241];
              v242 = &v198[v241];
              v243 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v244 = *(_QWORD *)(v243 - 8);
              v245 = v242;
              v246 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v244 + 48))(v242, 1, v243);
              v180 = v310;
              if (v246)
              {
                v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v286, v245, *(_QWORD *)(*(_QWORD *)(v247 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v286 = *v245;
                ((void (*)(char *, char *, void *))v194)(&v286[*(int *)(v243 + 20)], (char *)v245 + *(int *)(v243 + 20), __src);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v244 + 56))(v286, 0, 1, v243);
              }
              v142 = v346;
              v10 = v347;
              v150 = __dstc;
              v181 = v303;
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v288[7])(v290, 0, 1, v199);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v293 + 56))(v196, 0, 1, v299);
            v179 = v322;
          }
          ((void (*)(char *, _QWORD, uint64_t, int *))v181[7])(v179, 0, 1, v180);
          v144 = v335;
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v150[7])(v144, 0, 1, v142);
      }
      else
      {
        v344 = v4;
        *(_DWORD *)v8 = *(_DWORD *)v9;
        *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
        v40 = (int *)type metadata accessor for AMDPbPIRQuery(0);
        v41 = v40[6];
        v42 = v8 + v41;
        v43 = &v9[v41];
        v44 = type metadata accessor for UnknownStorage();
        v45 = v8;
        v46 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32);
        v46(v42, v43, v44);
        v47 = v40[7];
        v349 = v45;
        v48 = (_OWORD *)(v45 + v47);
        v49 = &v9[v47];
        v50 = type metadata accessor for AspirePirEncryptedIndices(0);
        v51 = *(_QWORD *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
          memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        }
        else
        {
          *v48 = *(_OWORD *)v49;
          v46((uint64_t)v48 + *(int *)(v50 + 24), &v49[*(int *)(v50 + 24)], v44);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
        }
        v72 = v40[8];
        v73 = (char *)(v349 + v72);
        v74 = &v9[v72];
        v75 = type metadata accessor for AMDPbEvaluationKey(0);
        v76 = *(_QWORD *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
          v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
          memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
          v78 = v353;
          a3 = v356;
          v4 = v344;
          v8 = v349;
LABEL_104:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56))(v8, 0, 1, v10);
          goto LABEL_105;
        }
        v332 = v76;
        v46((uint64_t)v73, v74, v44);
        __srca = (int *)v75;
        v79 = *(int *)(v75 + 20);
        v80 = &v73[v79];
        v81 = &v74[v79];
        v82 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v83 = *(_QWORD *)(v82 - 8);
        v320 = (void (*)(char *, char *, void *))v46;
        __dsta = (void *)v44;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
        {
          v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v80 = *(_QWORD *)v81;
          *(_OWORD *)(v80 + 8) = *(_OWORD *)(v81 + 8);
          v46((uint64_t)&v80[*(int *)(v82 + 24)], &v81[*(int *)(v82 + 24)], v44);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
        }
        v105 = __srca;
        v106 = __srca[6];
        v107 = &v73[v106];
        v108 = &v74[v106];
        v109 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v110 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v109 - 8);
        v4 = v344;
        v8 = v349;
        if (v110[6](v108, 1, v109))
        {
          v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
          v112 = v332;
        }
        else
        {
          v309 = v110;
          v320(v107, v108, __dsta);
          v120 = *(int *)(v109 + 20);
          v314 = v107;
          v302 = &v107[v120];
          v121 = &v108[v120];
          v122 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v123 = *(_QWORD *)(v122 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
          {
            v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v302, v121, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v302 = *(_QWORD *)v121;
            v320(&v302[*(int *)(v122 + 20)], &v121[*(int *)(v122 + 20)], __dsta);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v302, 0, 1, v122);
          }
          v167 = *(int *)(v109 + 24);
          v168 = &v314[v167];
          v169 = &v108[v167];
          v170 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v171 = *(_QWORD *)(v170 - 8);
          v4 = v344;
          v8 = v349;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170))
          {
            v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v168, v169, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
            v112 = v332;
            v105 = __srca;
          }
          else
          {
            v320(v168, v169, __dsta);
            v298 = v170;
            v304 = v168;
            v187 = *(int *)(v170 + 20);
            v188 = &v168[v187];
            v189 = &v169[v187];
            v190 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v191 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v190 - 8);
            if (v191[6](v189, 1, v190))
            {
              v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v188, v189, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
              v112 = v332;
              v4 = v344;
              v193 = v298;
            }
            else
            {
              v289 = v191;
              v320(v188, v189, __dsta);
              v236 = *(int *)(v190 + 20);
              v294 = v188;
              v287 = &v188[v236];
              v237 = &v189[v236];
              v238 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v239 = *(_QWORD *)(v238 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48))(v237, 1, v238))
              {
                v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v287, v237, *(_QWORD *)(*(_QWORD *)(v240 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v287 = *(_QWORD *)v237;
                v320(&v287[*(int *)(v238 + 20)], &v237[*(int *)(v238 + 20)], __dsta);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v287, 0, 1, v238);
              }
              v112 = v332;
              v4 = v344;
              v8 = v349;
              v193 = v298;
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v289[7])(v294, 0, 1, v190);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v171 + 56))(v304, 0, 1, v193);
            v105 = __srca;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v309[7])(v314, 0, 1, v109);
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v112 + 56))(v73, 0, 1, v105);
      }
      v78 = v353;
      a3 = v356;
      goto LABEL_104;
    }
    goto LABEL_8;
  }
  if (v14)
  {
    outlined destroy of AspireApiPECConfig(v8, type metadata accessor for AMDPbHEQuery.OneOf_Query);
LABEL_8:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    memcpy((void *)v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_105;
  }
  if (a1 != v4)
  {
    v357 = a3;
    outlined destroy of AspireApiPECConfig(v8, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      v28 = type metadata accessor for AMDPbPECQuery(0);
      v29 = *(int *)(v28 + 24);
      v30 = v8 + v29;
      v31 = &v9[v29];
      v32 = type metadata accessor for UnknownStorage();
      v354 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
      v354(v30, v31, v32);
      v348 = v28;
      v33 = *(int *)(v28 + 28);
      v34 = (_QWORD *)(v8 + v33);
      v35 = &v9[v33];
      v36 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      v37 = *(_QWORD *)(v36 - 8);
      v343 = v32;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        v39 = (void (*)(char *, char *, uint64_t))v354;
      }
      else
      {
        v333 = v37;
        *v34 = *(_QWORD *)v35;
        v34[1] = *((_QWORD *)v35 + 1);
        v354((uint64_t)v34 + *(int *)(v36 + 28), &v35[*(int *)(v36 + 28)], v32);
        v85 = *(int *)(v36 + 32);
        v321 = v36;
        __dstb = (char *)v34 + v85;
        v86 = &v35[v85];
        v87 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v88 = *(_QWORD *)(v87 - 8);
        __srcb = v86;
        v89 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87);
        v39 = (void (*)(char *, char *, uint64_t))v354;
        v90 = v34;
        if (v89)
        {
          v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(__dstb, __srcb, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
          v92 = v321;
        }
        else
        {
          v315 = v34;
          v125 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v126 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v125 - 8);
          if (v126[6](__srcb, 1, v125))
          {
            v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(__dstb, __srcb, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
            v128 = v343;
          }
          else
          {
            v305 = v126;
            swift_getEnumCaseMultiPayload();
            v128 = v343;
            v354((uint64_t)__dstb, __srcb, v343);
            swift_storeEnumTagMultiPayload();
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v305[7])(__dstb, 0, 1, v125);
          }
          v92 = v321;
          v354((uint64_t)&__dstb[*(int *)(v87 + 20)], &__srcb[*(int *)(v87 + 20)], v128);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(__dstb, 0, 1, v87);
          v39 = (void (*)(char *, char *, uint64_t))v354;
          v90 = v315;
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v333 + 56))(v90, 0, 1, v92);
      }
      v202 = *(int *)(v348 + 32);
      v203 = (char *)(v8 + v202);
      v204 = &v9[v202];
      v205 = type metadata accessor for AMDPbEvaluationKey(0);
      v206 = *(_QWORD *)(v205 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v204, 1, v205))
      {
        v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
      }
      else
      {
        v336 = v206;
        v39(v203, v204, v343);
        v352 = v205;
        v208 = *(int *)(v205 + 20);
        __srcd = v203;
        v209 = &v203[v208];
        v210 = &v204[v208];
        v211 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v212 = *(_QWORD *)(v211 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48))(v210, 1, v211))
        {
          v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v209 = *(_QWORD *)v210;
          *(_OWORD *)(v209 + 8) = *(_OWORD *)(v210 + 8);
          v39(&v209[*(int *)(v211 + 24)], &v210[*(int *)(v211 + 24)], v343);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v212 + 56))(v209, 0, 1, v211);
        }
        v214 = v352;
        v215 = *(int *)(v352 + 24);
        v216 = __srcd;
        v217 = &__srcd[v215];
        v218 = &v204[v215];
        v219 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v220 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v219 - 8);
        if (v220[6](v218, 1, v219))
        {
          v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
          v222 = v336;
        }
        else
        {
          v312 = v220;
          v354((uint64_t)v217, v218, v343);
          v324 = v219;
          __dste = v217;
          v223 = *(int *)(v219 + 20);
          v317 = &v217[v223];
          v224 = &v218[v223];
          v225 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v226 = *(_QWORD *)(v225 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v226 + 48))(v224, 1, v225))
          {
            v227 = v354;
            v228 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v317, v224, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v317 = *(_QWORD *)v224;
            v227 = v354;
            v354((uint64_t)&v317[*(int *)(v225 + 20)], &v224[*(int *)(v225 + 20)], v343);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v226 + 56))(v317, 0, 1, v225);
          }
          v248 = *(int *)(v324 + 24);
          v249 = &__dste[v248];
          v250 = &v218[v248];
          v251 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v252 = *(void **)(v251 - 8);
          if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v252 + 6))(v250, 1, v251))
          {
            v253 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v249, v250, *(_QWORD *)(*(_QWORD *)(v253 - 8) + 64));
            v222 = v336;
            v216 = __srcd;
            v254 = v312;
          }
          else
          {
            v307 = v252;
            v261 = v249;
            v262 = v249;
            v263 = (void (*)(char *, char *, uint64_t))v227;
            v227((uint64_t)v261, v250, v343);
            v318 = (void *)v251;
            v264 = *(int *)(v251 + 20);
            v300 = v262;
            v265 = &v262[v264];
            v266 = &v250[v264];
            v267 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v268 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v267 - 8);
            if (v268[6](v266, 1, v267))
            {
              v269 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v265, v266, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
              v222 = v336;
              v254 = v312;
            }
            else
            {
              v292 = v268;
              v263(v265, v266, v343);
              v280 = *(int *)(v267 + 20);
              v296 = v265;
              v281 = &v265[v280];
              v282 = &v266[v280];
              v283 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v284 = *(_QWORD *)(v283 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v284 + 48))(v282, 1, v283))
              {
                v285 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v285 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v281 = *(_QWORD *)v282;
                v263(&v281[*(int *)(v283 + 20)], &v282[*(int *)(v283 + 20)], v343);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v284 + 56))(v281, 0, 1, v283);
              }
              v222 = v336;
              v252 = v307;
              v254 = v312;
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v292[7])(v296, 0, 1, v267);
            }
            (*((void (**)(char *, _QWORD, uint64_t, void *))v252 + 7))(v300, 0, 1, v318);
            v216 = __srcd;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v254[7])(__dste, 0, 1, v324);
          v214 = v352;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v222 + 56))(v216, 0, 1, v214);
      }
    }
    else
    {
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      v59 = type metadata accessor for AMDPbPIRQuery(0);
      v60 = *(int *)(v59 + 24);
      v61 = v8 + v60;
      v62 = &v9[v60];
      v63 = type metadata accessor for UnknownStorage();
      v355 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32);
      v355(v61, v62, v63);
      v350 = v59;
      v64 = *(int *)(v59 + 28);
      v65 = (_OWORD *)(v8 + v64);
      v66 = &v9[v64];
      v67 = type metadata accessor for AspirePirEncryptedIndices(0);
      v68 = *(_QWORD *)(v67 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
      {
        v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        v70 = v63;
        v71 = (void (*)(char *, char *, uint64_t))v355;
      }
      else
      {
        *v65 = *(_OWORD *)v66;
        v97 = *(int *)(v67 + 24);
        v98 = &v66[v97];
        v71 = (void (*)(char *, char *, uint64_t))v355;
        v355((uint64_t)v65 + v97, v98, v63);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        v70 = v63;
      }
      v99 = *(int *)(v350 + 32);
      v100 = (char *)(v8 + v99);
      v101 = &v9[v99];
      v102 = type metadata accessor for AMDPbEvaluationKey(0);
      v103 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v102 - 8);
      if (v103[6](v101, 1, v102))
      {
        v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
      }
      else
      {
        __srcc = v103;
        v71(v100, v101, v70);
        v345 = v100;
        v351 = v102;
        v113 = *(int *)(v102 + 20);
        v114 = &v100[v113];
        v115 = v70;
        v116 = &v101[v113];
        v117 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v118 = *(_QWORD *)(v117 - 8);
        v334 = v115;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
        {
          v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v114, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v114 = *(_QWORD *)v116;
          *(_OWORD *)(v114 + 8) = *(_OWORD *)(v116 + 8);
          v355((uint64_t)&v114[*(int *)(v117 + 24)], &v116[*(int *)(v117 + 24)], v115);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v114, 0, 1, v117);
        }
        v159 = v345;
        v158 = v351;
        v160 = *(int *)(v351 + 24);
        v161 = &v345[v160];
        v162 = &v101[v160];
        v163 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v164 = *(_QWORD *)(v163 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
        {
          v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
          v166 = __srcc;
        }
        else
        {
          v355((uint64_t)v161, v162, v334);
          v323 = v163;
          __dstd = v161;
          v182 = *(int *)(v163 + 20);
          v311 = &v161[v182];
          v183 = &v162[v182];
          v184 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v185 = *(_QWORD *)(v184 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48))(v183, 1, v184))
          {
            v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v311, v183, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v311 = *(_QWORD *)v183;
            v355((uint64_t)&v311[*(int *)(v184 + 20)], &v183[*(int *)(v184 + 20)], v334);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v311, 0, 1, v184);
          }
          v229 = *(int *)(v323 + 24);
          v230 = &__dstd[v229];
          v231 = &v162[v229];
          v232 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v233 = *(_QWORD *)(v232 - 8);
          v234 = v164;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v233 + 48))(v231, 1, v232))
          {
            v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
            v159 = v345;
            v158 = v351;
            v166 = __srcc;
          }
          else
          {
            v355((uint64_t)v230, v231, v334);
            v306 = (void *)v232;
            v313 = v230;
            v255 = *(int *)(v232 + 20);
            v256 = &v230[v255];
            v257 = &v231[v255];
            v258 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v259 = *(_QWORD *)(v258 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v259 + 48))(v257, 1, v258))
            {
              v260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v256, v257, *(_QWORD *)(*(_QWORD *)(v260 - 8) + 64));
              v166 = __srcc;
              v159 = v345;
              v234 = v164;
            }
            else
            {
              v295 = v259;
              v355((uint64_t)v256, v257, v334);
              v275 = *(int *)(v258 + 20);
              v301 = v256;
              v291 = &v256[v275];
              v276 = &v257[v275];
              v277 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v278 = *(_QWORD *)(v277 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v278 + 48))(v276, 1, v277))
              {
                v279 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v291, v276, *(_QWORD *)(*(_QWORD *)(v279 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v291 = *(_QWORD *)v276;
                v355((uint64_t)&v291[*(int *)(v277 + 20)], &v276[*(int *)(v277 + 20)], v334);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v278 + 56))(v291, 0, 1, v277);
              }
              v166 = __srcc;
              v159 = v345;
              v234 = v164;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v295 + 56))(v301, 0, 1, v258);
            }
            (*(void (**)(char *, _QWORD, uint64_t, void *))(v233 + 56))(v313, 0, 1, v306);
            v158 = v351;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v234 + 56))(__dstd, 0, 1, v323);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v166[7])(v159, 0, 1, v158);
      }
    }
    a3 = v357;
    swift_storeEnumTagMultiPayload();
  }
LABEL_105:
  v270 = *(int *)(a3 + 24);
  v271 = (char *)a1 + v270;
  v272 = (char *)v4 + v270;
  v273 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v273 - 8) + 40))(v271, v272, v273);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEQuery()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C00D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for UnknownStorage();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbHEQuery()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C00DE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for UnknownStorage();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AMDPbHEQuery()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AMDPbHEQuery.OneOf_Query?, (void (*)(uint64_t))type metadata accessor for AMDPbHEQuery.OneOf_Query);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEQuery.OneOf_Query(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, char *, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  void (*v184)(char *, char *, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  void (*v189)(char *, char *, uint64_t);
  uint64_t v190;
  void (*v191)(char *, char *, uint64_t);
  char *v192;
  void (*v193)(char *, char *, uint64_t);
  uint64_t v194;
  uint64_t *v195;
  char *v196;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      v7 = a2[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v6, v7);
      a1[1] = v6;
      a1[2] = v7;
      v8 = (int *)type metadata accessor for AMDPbPECQuery(0);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      v13 = v10;
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      v14(v13, v11, v12);
      v15 = v8[7];
      v16 = (uint64_t *)((char *)a1 + v15);
      v17 = (uint64_t *)((char *)a2 + v15);
      v18 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      v19 = *(_QWORD *)(v18 - 8);
      v194 = v12;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v186 = v19;
        v189 = v14;
        *v16 = *v17;
        v16[1] = v17[1];
        v38 = *(int *)(v18 + 28);
        v39 = (char *)v16 + v38;
        v40 = (char *)v17 + v38;
        swift_bridgeObjectRetain();
        v41 = v39;
        v14 = v189;
        v189(v41, v40, v12);
        v42 = *(int *)(v18 + 32);
        v43 = (char *)v16 + v42;
        v44 = (char *)v17 + v42;
        v45 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          v67 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v182 = *(_QWORD *)(v67 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v44, 1, v67))
          {
            v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
            v14 = v189;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v189(v43, v44, v194);
            swift_storeEnumTagMultiPayload();
            v85 = v67;
            v14 = v189;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v43, 0, 1, v85);
          }
          v189(&v43[*(int *)(v45 + 20)], &v44[*(int *)(v45 + 20)], v194);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v16, 0, 1, v18);
      }
      v86 = v8[8];
      v87 = (char *)a1 + v86;
      v88 = (char *)a2 + v86;
      v89 = type metadata accessor for AMDPbEvaluationKey(0);
      v90 = *(_QWORD *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        v185 = v90;
        v92 = v194;
        v14(v87, v88, v194);
        v93 = *(int *)(v89 + 20);
        v188 = v87;
        v94 = &v87[v93];
        v95 = &v88[v93];
        v96 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v97 = *(_QWORD *)(v96 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
        {
          v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
        }
        else
        {
          v191 = v14;
          v99 = *((_QWORD *)v95 + 1);
          *(_QWORD *)v94 = *(_QWORD *)v95;
          v100 = *((_QWORD *)v95 + 2);
          outlined copy of Data._Representation(v99, v100);
          *((_QWORD *)v94 + 1) = v99;
          *((_QWORD *)v94 + 2) = v100;
          v14 = v191;
          v92 = v194;
          v191(&v94[*(int *)(v96 + 24)], &v95[*(int *)(v96 + 24)], v194);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
        }
        v101 = v188;
        v102 = *(int *)(v89 + 24);
        v103 = &v188[v102];
        v104 = &v88[v102];
        v105 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v106 = *(_QWORD *)(v105 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
        {
          v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
          v108 = v185;
        }
        else
        {
          v178 = v106;
          v14(v103, v104, v92);
          v109 = *(int *)(v105 + 20);
          v183 = v103;
          v110 = &v103[v109];
          v111 = v14;
          v112 = &v104[v109];
          v113 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v114 = *(_QWORD *)(v113 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
          {
            v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v110, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v110 = *(_QWORD *)v112;
            v127 = *(int *)(v113 + 20);
            v192 = &v110[v127];
            v128 = &v112[v127];
            swift_bridgeObjectRetain();
            v111(v192, v128, v92);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v110, 0, 1, v113);
          }
          v129 = *(int *)(v105 + 24);
          v130 = &v183[v129];
          v131 = &v104[v129];
          v132 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v133 = *(_QWORD *)(v132 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
          {
            v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
            v108 = v185;
            v101 = v188;
          }
          else
          {
            v176 = v133;
            v111(v130, v131, v92);
            v143 = *(int *)(v132 + 20);
            v144 = &v130[v143];
            v145 = &v131[v143];
            v146 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v193 = v111;
            v147 = *(_QWORD *)(v146 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
            {
              v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
              v108 = v185;
              v149 = v176;
            }
            else
            {
              v193(v144, v145, v92);
              v172 = v146;
              v174 = v144;
              v156 = *(int *)(v146 + 20);
              v157 = &v144[v156];
              v158 = &v145[v156];
              v159 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v170 = *(_QWORD *)(v159 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v158, 1, v159))
              {
                v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v157 = *(_QWORD *)v158;
                v164 = *(int *)(v159 + 20);
                v168 = &v157[v164];
                v165 = &v158[v164];
                swift_bridgeObjectRetain();
                v193(v168, v165, v92);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v157, 0, 1, v159);
              }
              v108 = v185;
              v149 = v176;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v174, 0, 1, v172);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v130, 0, 1, v132);
            v101 = v188;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v178 + 56))(v183, 0, 1, v105);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v101, 0, 1, v89);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v22 = a2[1];
      v23 = a2[2];
      outlined copy of Data._Representation(v22, v23);
      a1[1] = v22;
      a1[2] = v23;
      v24 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      v25 = v24[6];
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      v28 = a1;
      v29 = type metadata accessor for UnknownStorage();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      v30(v26, v27, v29);
      v31 = v24[7];
      v195 = v28;
      v32 = (uint64_t *)((char *)v28 + v31);
      v33 = (uint64_t *)((char *)a2 + v31);
      v34 = type metadata accessor for AspirePirEncryptedIndices(0);
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = v29;
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        v48 = v33[1];
        *v32 = *v33;
        v32[1] = v48;
        v49 = *(int *)(v34 + 24);
        v50 = v30;
        v51 = (char *)v32 + v49;
        v52 = (char *)v33 + v49;
        swift_bridgeObjectRetain();
        v53 = v51;
        v30 = v50;
        v36 = v29;
        v30(v53, v52, v29);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v54 = v24[8];
      a1 = v195;
      v55 = (char *)v195 + v54;
      v56 = (char *)a2 + v54;
      v57 = type metadata accessor for AMDPbEvaluationKey(0);
      v58 = *(_QWORD *)(v57 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
      {
        v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        v187 = v58;
        v30(v55, v56, v36);
        v190 = v57;
        v60 = *(int *)(v57 + 20);
        v61 = &v55[v60];
        v62 = &v56[v60];
        v63 = v30;
        v64 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v65 = *(_QWORD *)(v64 - 8);
        v181 = v36;
        v184 = v63;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v62, 1, v64))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          v69 = *((_QWORD *)v62 + 1);
          *(_QWORD *)v61 = *(_QWORD *)v62;
          v177 = v55;
          v70 = *((_QWORD *)v62 + 2);
          outlined copy of Data._Representation(v69, v70);
          *((_QWORD *)v61 + 1) = v69;
          *((_QWORD *)v61 + 2) = v70;
          v55 = v177;
          v63(&v61[*(int *)(v64 + 24)], &v62[*(int *)(v64 + 24)], v36);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v61, 0, 1, v64);
        }
        a1 = v195;
        v71 = v190;
        v72 = *(int *)(v190 + 24);
        v73 = &v55[v72];
        v74 = &v56[v72];
        v75 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v76 = *(_QWORD *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
          v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
          v78 = v187;
        }
        else
        {
          v175 = v76;
          v184(v73, v74, v36);
          v79 = *(int *)(v75 + 20);
          v196 = v73;
          v80 = &v73[v79];
          v81 = &v74[v79];
          v82 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v83 = *(_QWORD *)(v82 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
          {
            v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v80 = *(_QWORD *)v81;
            v116 = *(int *)(v82 + 20);
            v179 = v55;
            v117 = &v80[v116];
            v118 = &v81[v116];
            swift_bridgeObjectRetain();
            v119 = v117;
            v55 = v179;
            v184(v119, v118, v36);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
          }
          v120 = v196;
          v121 = *(int *)(v75 + 24);
          v122 = &v196[v121];
          v123 = &v74[v121];
          v124 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v125 = *(_QWORD *)(v124 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
          {
            v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
            v71 = v190;
          }
          else
          {
            v173 = v125;
            v180 = v55;
            v184(v122, v123, v36);
            v135 = *(int *)(v124 + 20);
            v171 = v122;
            v136 = &v122[v135];
            v137 = &v123[v135];
            v138 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v139 = *(_QWORD *)(v138 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
            {
              v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
              v71 = v190;
              v55 = v180;
              v142 = v171;
              v141 = v173;
            }
            else
            {
              v184(v136, v137, v36);
              v167 = v138;
              v169 = v136;
              v150 = *(int *)(v138 + 20);
              v151 = &v136[v150];
              v152 = &v137[v150];
              v153 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v154 = *(_QWORD *)(v153 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
              {
                v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v151 = *(_QWORD *)v152;
                v161 = *(int *)(v153 + 20);
                v162 = &v151[v161];
                v163 = &v152[v161];
                swift_bridgeObjectRetain();
                v184(v162, v163, v181);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
              }
              v71 = v190;
              v142 = v171;
              v141 = v173;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v169, 0, 1, v167);
              v55 = v180;
              v120 = v196;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v142, 0, 1, v124);
          }
          v78 = v187;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v120, 0, 1, v75);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v55, 0, 1, v71);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AMDPbHEQuery.OneOf_Query(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v2 = (int *)type metadata accessor for AMDPbPIRQuery(0);
    v11 = a1 + v2[6];
    v4 = type metadata accessor for UnknownStorage();
    v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v28(v11, v4);
    v7 = a1 + v2[7];
    v12 = type metadata accessor for AspirePirEncryptedIndices(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v7, 1, v12))
      goto LABEL_11;
    swift_bridgeObjectRelease();
    v10 = *(int *)(v12 + 24);
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v2 = (int *)type metadata accessor for AMDPbPECQuery(0);
  v3 = a1 + v2[6];
  v4 = type metadata accessor for UnknownStorage();
  v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v28(v3, v4);
  v5 = a1 + v2[7];
  v6 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    v28(v5 + *(int *)(v6 + 28), v4);
    v7 = v5 + *(int *)(v6 + 32);
    v8 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      v9 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v28(v7, v4);
      }
      v10 = *(int *)(v8 + 20);
LABEL_10:
      v28(v7 + v10, v4);
    }
  }
LABEL_11:
  v13 = a1 + v2[8];
  v14 = type metadata accessor for AMDPbEvaluationKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
  if (!(_DWORD)result)
  {
    v28(v13, v4);
    v16 = v13 + *(int *)(v14 + 20);
    v17 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16));
      v28(v16 + *(int *)(v17 + 24), v4);
    }
    v18 = v13 + *(int *)(v14 + 24);
    v19 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19);
    if (!(_DWORD)result)
    {
      v28(v18, v4);
      v20 = v18 + *(int *)(v19 + 20);
      v21 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
      {
        swift_bridgeObjectRelease();
        v28(v20 + *(int *)(v21 + 20), v4);
      }
      v22 = v18 + *(int *)(v19 + 24);
      v23 = type metadata accessor for AspireHeSerializedRelinKey(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23);
      if (!(_DWORD)result)
      {
        v28(v22, v4);
        v24 = v22 + *(int *)(v23 + 20);
        v25 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25);
        if (!(_DWORD)result)
        {
          v28(v24, v4);
          v26 = v24 + *(int *)(v25 + 20);
          v27 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27);
          if (!(_DWORD)result)
          {
            swift_bridgeObjectRelease();
            return ((uint64_t (*)(uint64_t, uint64_t))v28)(v26 + *(int *)(v27 + 20), v4);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AMDPbHEQuery.OneOf_Query(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unsigned int (**v55)(const void *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (**v77)(const void *, uint64_t, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *__dst;
  void *__dsta;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(char *, char *, uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *__src;
  unsigned int (**__srca)(const void *, uint64_t, uint64_t);
  char *__srcb;
  uint64_t v184;
  void (*v185)(char *, char *, uint64_t);
  void (*v186)(char *, char *, uint64_t);
  char *v187;
  void (*v188)(char *, char *, uint64_t);
  uint64_t v189;
  _QWORD *v190;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    v5 = a2[2];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v4, v5);
    a1[1] = v4;
    a1[2] = v5;
    v6 = (int *)type metadata accessor for AMDPbPECQuery(0);
    v7 = v6[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = v8;
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v12(v11, v9, v10);
    v13 = v6[7];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    v17 = *(_QWORD *)(v16 - 8);
    v189 = v10;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v177 = v17;
      v185 = v12;
      *v14 = *v15;
      v14[1] = v15[1];
      v34 = *(int *)(v16 + 28);
      v35 = (char *)v14 + v34;
      v36 = (char *)v15 + v34;
      swift_bridgeObjectRetain();
      v37 = v35;
      v12 = v185;
      v185(v37, v36, v10);
      v38 = *(int *)(v16 + 32);
      v39 = (char *)v14 + v38;
      v40 = (char *)v15 + v38;
      v41 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v42 = *(_QWORD *)(v41 - 8);
      __src = v40;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        v44 = v177;
      }
      else
      {
        v174 = v42;
        v64 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v65 = *(_QWORD *)(v64 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(__src, 1, v64))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          v67 = v39;
          memcpy(v39, __src, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          v68 = v189;
          v12 = v185;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v67 = v39;
          v185(v39, __src, v189);
          swift_storeEnumTagMultiPayload();
          v84 = v64;
          v12 = v185;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v39, 0, 1, v84);
          v68 = v189;
        }
        v44 = v177;
        v12(&v67[*(int *)(v41 + 20)], &__src[*(int *)(v41 + 20)], v68);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v174 + 56))(v67, 0, 1, v41);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v14, 0, 1, v16);
    }
    v85 = v6[8];
    v86 = (char *)a1 + v85;
    v87 = (char *)a2 + v85;
    v88 = type metadata accessor for AMDPbEvaluationKey(0);
    v89 = *(_QWORD *)(v88 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
    {
      v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      v180 = v89;
      v91 = v189;
      v12(v86, v87, v189);
      v92 = *(int *)(v88 + 20);
      __srcb = v86;
      v93 = &v86[v92];
      v94 = &v87[v92];
      v95 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v96 = *(_QWORD *)(v95 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
      {
        v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
      }
      else
      {
        v186 = v12;
        v98 = *((_QWORD *)v94 + 1);
        *(_QWORD *)v93 = *(_QWORD *)v94;
        v99 = *((_QWORD *)v94 + 2);
        outlined copy of Data._Representation(v98, v99);
        *((_QWORD *)v93 + 1) = v98;
        *((_QWORD *)v93 + 2) = v99;
        v12 = v186;
        v91 = v189;
        v186(&v93[*(int *)(v95 + 24)], &v94[*(int *)(v95 + 24)], v189);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
      }
      v100 = __srcb;
      v101 = *(int *)(v88 + 24);
      v102 = &__srcb[v101];
      v103 = &v87[v101];
      v104 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v105 = *(_QWORD *)(v104 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
      {
        v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
        v107 = v180;
      }
      else
      {
        v173 = v105;
        v12(v102, v103, v91);
        v108 = *(int *)(v104 + 20);
        v176 = v102;
        v109 = &v102[v108];
        v110 = v12;
        v111 = &v103[v108];
        v112 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v113 = *(_QWORD *)(v112 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
        {
          v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v109, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v109 = *(_QWORD *)v111;
          v123 = *(int *)(v112 + 20);
          v187 = &v109[v123];
          v124 = &v111[v123];
          swift_bridgeObjectRetain();
          v110(v187, v124, v91);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v109, 0, 1, v112);
        }
        v125 = *(int *)(v104 + 24);
        v126 = &v176[v125];
        v127 = &v103[v125];
        v128 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v129 = *(_QWORD *)(v128 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
        {
          v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
          v107 = v180;
          v100 = __srcb;
        }
        else
        {
          v171 = v129;
          v110(v126, v127, v91);
          v138 = *(int *)(v128 + 20);
          v139 = &v126[v138];
          v140 = &v127[v138];
          v141 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v188 = v110;
          v142 = *(_QWORD *)(v141 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
          {
            v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
            v107 = v180;
            v144 = v171;
          }
          else
          {
            v188(v139, v140, v91);
            __dsta = (void *)v141;
            v168 = v139;
            v150 = *(int *)(v141 + 20);
            v151 = &v139[v150];
            v152 = &v140[v150];
            v153 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v164 = *(_QWORD *)(v153 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v152, 1, v153))
            {
              v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v151 = *(_QWORD *)v152;
              v157 = *(int *)(v153 + 20);
              v162 = &v151[v157];
              v158 = &v152[v157];
              swift_bridgeObjectRetain();
              v188(v162, v158, v91);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v151, 0, 1, v153);
            }
            v107 = v180;
            v144 = v171;
            (*(void (**)(char *, _QWORD, uint64_t, void *))(v142 + 56))(v168, 0, 1, __dsta);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v126, 0, 1, v128);
          v100 = __srcb;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v176, 0, 1, v104);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v100, 0, 1, v88);
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v19 = a2[1];
    v20 = a2[2];
    outlined copy of Data._Representation(v19, v20);
    a1[1] = v19;
    a1[2] = v20;
    v21 = (int *)type metadata accessor for AMDPbPIRQuery(0);
    v22 = v21[6];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = a1;
    v26 = type metadata accessor for UnknownStorage();
    v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
    v27(v23, v24, v26);
    v28 = v21[7];
    v190 = v25;
    v29 = (_QWORD *)((char *)v25 + v28);
    v30 = (_QWORD *)((char *)a2 + v28);
    v31 = type metadata accessor for AspirePirEncryptedIndices(0);
    v32 = *(_QWORD *)(v31 - 8);
    v184 = v26;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v45 = v30[1];
      *v29 = *v30;
      v29[1] = v45;
      v46 = *(int *)(v31 + 24);
      v47 = v27;
      v48 = (char *)v29 + v46;
      v49 = (char *)v30 + v46;
      swift_bridgeObjectRetain();
      v50 = v48;
      v27 = v47;
      v47(v50, v49, v26);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v51 = v21[8];
    a1 = v190;
    v52 = (char *)v190 + v51;
    v53 = (char *)a2 + v51;
    v54 = type metadata accessor for AMDPbEvaluationKey(0);
    v55 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v54 - 8);
    if (v55[6](v53, 1, v54))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      __srca = v55;
      v27(v52, v53, v184);
      v57 = *(int *)(v54 + 20);
      v58 = &v52[v57];
      v59 = v27;
      v60 = &v53[v57];
      v61 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v62 = *(_QWORD *)(v61 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v58, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        v178 = v52;
        v69 = *((_QWORD *)v60 + 1);
        *(_QWORD *)v58 = *(_QWORD *)v60;
        v70 = *((_QWORD *)v60 + 2);
        outlined copy of Data._Representation(v69, v70);
        *((_QWORD *)v58 + 1) = v69;
        *((_QWORD *)v58 + 2) = v70;
        v52 = v178;
        v59(&v58[*(int *)(v61 + 24)], &v60[*(int *)(v61 + 24)], v184);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v58, 0, 1, v61);
      }
      a1 = v190;
      v71 = *(int *)(v54 + 24);
      v72 = &v52[v71];
      v73 = &v53[v71];
      v74 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v75 = *(_QWORD *)(v74 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
      {
        v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        v77 = __srca;
      }
      else
      {
        v175 = v75;
        v179 = v52;
        v59(v72, v73, v184);
        v78 = *(int *)(v74 + 20);
        v79 = &v72[v78];
        v80 = &v73[v78];
        v81 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v82 = *(_QWORD *)(v81 - 8);
        v172 = v59;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
        {
          v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v79 = *(_QWORD *)v80;
          v115 = *(int *)(v81 + 20);
          v169 = &v79[v115];
          v116 = &v80[v115];
          swift_bridgeObjectRetain();
          v59(v169, v116, v184);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
        }
        a1 = v190;
        v117 = *(int *)(v74 + 24);
        v118 = &v72[v117];
        v119 = &v73[v117];
        v120 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v121 = *(_QWORD *)(v120 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
        {
          v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        }
        else
        {
          v170 = v121;
          v59(v118, v119, v184);
          v131 = *(int *)(v120 + 20);
          v132 = &v118[v131];
          v133 = &v119[v131];
          v134 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v135 = *(_QWORD *)(v134 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
          {
            v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v132, v133, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
            a1 = v190;
            v137 = v170;
          }
          else
          {
            v167 = v135;
            v172(v132, v133, v184);
            v161 = v134;
            v163 = v132;
            v145 = *(int *)(v134 + 20);
            __dst = &v132[v145];
            v146 = &v133[v145];
            v147 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v148 = *(_QWORD *)(v147 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
            {
              v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dst, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
            }
            else
            {
              *(_QWORD *)__dst = *(_QWORD *)v146;
              v155 = *(int *)(v147 + 20);
              v160 = &__dst[v155];
              v156 = &v146[v155];
              swift_bridgeObjectRetain();
              v172(v160, v156, v184);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(__dst, 0, 1, v147);
            }
            a1 = v190;
            v137 = v170;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v163, 0, 1, v161);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v118, 0, 1, v120);
        }
        v52 = v179;
        v77 = __srca;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v72, 0, 1, v74);
      }
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v77[7])(v52, 0, 1, v54);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AMDPbHEQuery.OneOf_Query(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, char *, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v155;
  char *__dst;
  char *__dsta;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  void (*v178)(char *, char *, uint64_t);
  uint64_t v179;
  void (*v180)(char *, char *, uint64_t);
  char *v181;
  void (*v182)(char *, char *, uint64_t);
  uint64_t v183;
  uint64_t v184;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v4 = a2[1];
      v5 = a2[2];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v4, v5);
      a1[1] = v4;
      a1[2] = v5;
      v6 = (int *)type metadata accessor for AMDPbPECQuery(0);
      v7 = v6[6];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for UnknownStorage();
      v11 = v8;
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v12(v11, v9, v10);
      v13 = v6[7];
      v14 = (_DWORD *)((char *)a1 + v13);
      v15 = (_DWORD *)((char *)a2 + v13);
      v16 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      v17 = *(_QWORD *)(v16 - 8);
      v183 = v10;
      if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v175 = v17;
        *v14 = *v15;
        v14[1] = v15[1];
        *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
        v33 = *(int *)(v16 + 28);
        v178 = v12;
        v34 = (char *)v14 + v33;
        v35 = (char *)v15 + v33;
        swift_bridgeObjectRetain();
        v36 = v34;
        v12 = v178;
        v178(v36, v35, v10);
        v37 = *(int *)(v16 + 32);
        v38 = (char *)v14 + v37;
        v39 = (char *)v15 + v37;
        v40 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v41 = *(_QWORD *)(v40 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          v61 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v169 = *(_QWORD *)(v61 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v39, 1, v61))
          {
            v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
            v12 = v178;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v178(v38, v39, v183);
            swift_storeEnumTagMultiPayload();
            v79 = v61;
            v12 = v178;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v38, 0, 1, v79);
          }
          v178(&v38[*(int *)(v40 + 20)], &v39[*(int *)(v40 + 20)], v183);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v14, 0, 1, v16);
      }
      v80 = v6[8];
      v81 = (char *)a1 + v80;
      v82 = (char *)a2 + v80;
      v83 = type metadata accessor for AMDPbEvaluationKey(0);
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v174 = v84;
        v86 = v183;
        v12(v81, v82, v183);
        v87 = *(int *)(v83 + 20);
        v177 = v81;
        v88 = &v81[v87];
        v89 = &v82[v87];
        v90 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v91 = *(_QWORD *)(v90 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
        {
          v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v88 = *(_QWORD *)v89;
          v180 = v12;
          v93 = *((_QWORD *)v89 + 1);
          v94 = *((_QWORD *)v89 + 2);
          outlined copy of Data._Representation(v93, v94);
          *((_QWORD *)v88 + 1) = v93;
          *((_QWORD *)v88 + 2) = v94;
          v12 = v180;
          v86 = v183;
          v180(&v88[*(int *)(v90 + 24)], &v89[*(int *)(v90 + 24)], v183);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
        }
        v95 = v177;
        v96 = *(int *)(v83 + 24);
        v97 = &v177[v96];
        v98 = &v82[v96];
        v99 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v100 = *(_QWORD *)(v99 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
        {
          v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
          v102 = v174;
        }
        else
        {
          v168 = v100;
          v12(v97, v98, v86);
          v103 = *(int *)(v99 + 20);
          v171 = v97;
          v104 = &v97[v103];
          v105 = v12;
          v106 = &v98[v103];
          v107 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v108 = *(_QWORD *)(v107 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
          {
            v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v104, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v104 = *(_QWORD *)v106;
            v118 = *(int *)(v107 + 20);
            v181 = &v104[v118];
            v119 = &v106[v118];
            swift_bridgeObjectRetain();
            v105(v181, v119, v86);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v104, 0, 1, v107);
          }
          v120 = *(int *)(v99 + 24);
          v121 = &v171[v120];
          v122 = &v98[v120];
          v123 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v124 = *(_QWORD *)(v123 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
          {
            v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
            v102 = v174;
            v95 = v177;
          }
          else
          {
            v166 = v124;
            v105(v121, v122, v86);
            v133 = *(int *)(v123 + 20);
            v134 = &v121[v133];
            v135 = &v122[v133];
            v136 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v182 = v105;
            v137 = *(_QWORD *)(v136 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136))
            {
              v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
              v102 = v174;
              v139 = v166;
            }
            else
            {
              v182(v134, v135, v86);
              v161 = v136;
              v163 = v134;
              v145 = *(int *)(v136 + 20);
              v146 = &v134[v145];
              v147 = &v135[v145];
              v148 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v159 = *(_QWORD *)(v148 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v147, 1, v148))
              {
                v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v146 = *(_QWORD *)v147;
                v152 = *(int *)(v148 + 20);
                __dsta = &v146[v152];
                v153 = &v147[v152];
                swift_bridgeObjectRetain();
                v182(__dsta, v153, v86);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v146, 0, 1, v148);
              }
              v102 = v174;
              v139 = v166;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v163, 0, 1, v161);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v121, 0, 1, v123);
            v95 = v177;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v168 + 56))(v171, 0, 1, v99);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v95, 0, 1, v83);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v19 = a2[1];
      v20 = a2[2];
      outlined copy of Data._Representation(v19, v20);
      a1[1] = v19;
      a1[2] = v20;
      v21 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      v22 = v21[6];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = type metadata accessor for UnknownStorage();
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
      v26(v23, v24, v25);
      v27 = v21[7];
      v28 = (_QWORD *)((char *)a1 + v27);
      v29 = (_QWORD *)((char *)a2 + v27);
      v30 = type metadata accessor for AspirePirEncryptedIndices(0);
      v31 = *(_QWORD *)(v30 - 8);
      v184 = v25;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *v28 = *v29;
        v28[1] = v29[1];
        v43 = *(int *)(v30 + 24);
        v44 = v26;
        v45 = (char *)v28 + v43;
        v46 = (char *)v29 + v43;
        swift_bridgeObjectRetain();
        v47 = v45;
        v26 = v44;
        v44(v47, v46, v25);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      v48 = v21[8];
      v49 = (char *)a1 + v48;
      v50 = (char *)a2 + v48;
      v51 = type metadata accessor for AMDPbEvaluationKey(0);
      v52 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
      {
        v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        v176 = v52;
        v26(v49, v50, v25);
        v179 = v51;
        v54 = *(int *)(v51 + 20);
        v55 = &v49[v54];
        v56 = v26;
        v57 = &v50[v54];
        v58 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v59 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v55, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v55 = *(_QWORD *)v57;
          v172 = v49;
          v63 = *((_QWORD *)v57 + 1);
          v64 = *((_QWORD *)v57 + 2);
          outlined copy of Data._Representation(v63, v64);
          *((_QWORD *)v55 + 1) = v63;
          *((_QWORD *)v55 + 2) = v64;
          v49 = v172;
          v56(&v55[*(int *)(v58 + 24)], &v57[*(int *)(v58 + 24)], v184);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v55, 0, 1, v58);
        }
        v65 = *(int *)(v179 + 24);
        v66 = &v49[v65];
        v67 = &v50[v65];
        v68 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v69 = *(_QWORD *)(v68 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        {
          v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          v71 = v176;
          v72 = v179;
        }
        else
        {
          v170 = v69;
          v173 = v49;
          v56(v66, v67, v184);
          v73 = *(int *)(v68 + 20);
          v74 = &v66[v73];
          v75 = &v67[v73];
          v76 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v77 = *(_QWORD *)(v76 - 8);
          v167 = v56;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v74 = *(_QWORD *)v75;
            v110 = *(int *)(v76 + 20);
            v164 = &v74[v110];
            v111 = &v75[v110];
            swift_bridgeObjectRetain();
            v56(v164, v111, v184);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
          }
          v112 = *(int *)(v68 + 24);
          v113 = &v66[v112];
          v114 = &v67[v112];
          v115 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v116 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            v165 = v116;
            v56(v113, v114, v184);
            v126 = *(int *)(v115 + 20);
            v127 = &v113[v126];
            v128 = &v114[v126];
            v129 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v130 = *(_QWORD *)(v129 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
            {
              v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
              v132 = v165;
            }
            else
            {
              v158 = v130;
              v56(v127, v128, v184);
              v160 = v129;
              v162 = v127;
              v140 = *(int *)(v129 + 20);
              __dst = &v127[v140];
              v141 = &v128[v140];
              v142 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v143 = *(_QWORD *)(v142 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
              {
                v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(__dst, v141, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
              }
              else
              {
                *(_QWORD *)__dst = *(_QWORD *)v141;
                v150 = *(int *)(v142 + 20);
                v155 = &__dst[v150];
                v151 = &v141[v150];
                swift_bridgeObjectRetain();
                v167(v155, v151, v184);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(__dst, 0, 1, v142);
              }
              v132 = v165;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v162, 0, 1, v160);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v113, 0, 1, v115);
          }
          v49 = v173;
          v71 = v176;
          v72 = v179;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v66, 0, 1, v68);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v49, 0, 1, v72);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AMDPbHEQuery.OneOf_Query(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *__dst;
  char *__dsta;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t, uint64_t, uint64_t);
  char *v148;
  void (*v149)(char *, char *, uint64_t);
  uint64_t v150;
  void (*v151)(char *, char *, uint64_t);
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *__src;
  char *__srca;
  char *__srcb;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v4 = (int *)type metadata accessor for AMDPbPECQuery(0);
    v5 = v4[6];
    v6 = a1 + v5;
    v7 = a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = v6;
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
    v10(v9, v7, v8);
    v11 = v4[7];
    v12 = (_QWORD *)(a1 + v11);
    v13 = (_QWORD *)(a2 + v11);
    v14 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v150 = v15;
      v153 = v8;
      *v12 = *v13;
      v12[1] = v13[1];
      v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v8);
      v29 = *(int *)(v14 + 32);
      v30 = (char *)v12 + v29;
      v31 = (char *)v13 + v29;
      v32 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v33 = *(_QWORD *)(v32 - 8);
      __src = v31;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        v35 = v150;
        v8 = v153;
      }
      else
      {
        v141 = v32;
        v144 = v33;
        v147 = v10;
        v48 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v49 = *(_QWORD *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v31, 1, v48))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
          v10 = v147;
          v51 = v153;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v51 = v153;
          v147((uint64_t)v30, (uint64_t)v31, v153);
          swift_storeEnumTagMultiPayload();
          v66 = v48;
          v10 = v147;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v30, 0, 1, v66);
        }
        v35 = v150;
        v10((uint64_t)&v30[*(int *)(v141 + 20)], (uint64_t)&__src[*(int *)(v141 + 20)], v51);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v30, 0, 1, v141);
        v8 = v51;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, v14);
    }
    v67 = v4[8];
    v68 = (char *)(a1 + v67);
    v69 = (char *)(a2 + v67);
    v70 = type metadata accessor for AMDPbEvaluationKey(0);
    v71 = *(_QWORD *)(v70 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
    {
      v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      v155 = v71;
      v10((uint64_t)v68, (uint64_t)v69, v8);
      v73 = *(int *)(v70 + 20);
      __srcb = v68;
      v74 = &v68[v73];
      v75 = (void (*)(char *, char *, uint64_t))v10;
      v76 = &v69[v73];
      v77 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v78 = *(_QWORD *)(v77 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
      {
        v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v74, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v74 = *(_QWORD *)v76;
        *(_OWORD *)(v74 + 8) = *(_OWORD *)(v76 + 8);
        v75(&v74[*(int *)(v77 + 24)], &v76[*(int *)(v77 + 24)], v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v74, 0, 1, v77);
      }
      v80 = __srcb;
      v81 = *(int *)(v70 + 24);
      v82 = &__srcb[v81];
      v83 = &v69[v81];
      v84 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v85 = *(_QWORD *)(v84 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
      {
        v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        v87 = v155;
      }
      else
      {
        v146 = v85;
        v75(v82, v83, v8);
        v88 = *(int *)(v84 + 20);
        v152 = v82;
        v89 = &v82[v88];
        v90 = &v83[v88];
        v91 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v92 = *(_QWORD *)(v91 - 8);
        v149 = v75;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
        {
          v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v89 = *(_QWORD *)v90;
          v75(&v89[*(int *)(v91 + 20)], &v90[*(int *)(v91 + 20)], v8);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
        }
        v101 = *(int *)(v84 + 24);
        v102 = &v152[v101];
        v103 = &v83[v101];
        v104 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v105 = *(_QWORD *)(v104 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
        {
          v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
        }
        else
        {
          v143 = v105;
          v75(v102, v103, v8);
          v115 = *(int *)(v104 + 20);
          v116 = &v102[v115];
          v117 = &v103[v115];
          v118 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v119 = *(_QWORD *)(v118 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
          {
            v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
            v121 = v143;
          }
          else
          {
            v140 = v119;
            v149(v116, v117, v8);
            v134 = v118;
            v136 = v116;
            v128 = *(int *)(v118 + 20);
            __dsta = &v116[v128];
            v129 = &v117[v128];
            v130 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v131 = *(_QWORD *)(v130 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
            {
              v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dsta, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
            }
            else
            {
              *(_QWORD *)__dsta = *(_QWORD *)v129;
              v149(&__dsta[*(int *)(v130 + 20)], &v129[*(int *)(v130 + 20)], v8);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(__dsta, 0, 1, v130);
            }
            v121 = v143;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v136, 0, 1, v134);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v102, 0, 1, v104);
        }
        v87 = v155;
        v80 = __srcb;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v152, 0, 1, v84);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v80, 0, 1, v70);
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v17 = (int *)type metadata accessor for AMDPbPIRQuery(0);
    v18 = v17[6];
    v19 = a1 + v18;
    v20 = a2 + v18;
    v21 = type metadata accessor for UnknownStorage();
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v19, v20, v21);
    v23 = v17[7];
    v24 = (_OWORD *)(a1 + v23);
    v25 = (_OWORD *)(a2 + v23);
    v26 = type metadata accessor for AspirePirEncryptedIndices(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *v24 = *v25;
      v22((uint64_t)v24 + *(int *)(v26 + 24), (uint64_t)v25 + *(int *)(v26 + 24), v21);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v36 = v17[8];
    v37 = (char *)(a1 + v36);
    v38 = (char *)(a2 + v36);
    v39 = type metadata accessor for AMDPbEvaluationKey(0);
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v154 = v40;
      v22((uint64_t)v37, (uint64_t)v38, v21);
      v42 = *(int *)(v39 + 20);
      __srca = v37;
      v43 = &v37[v42];
      v44 = &v38[v42];
      v45 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v46 = *(_QWORD *)(v45 - 8);
      v151 = (void (*)(char *, char *, uint64_t))v22;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v43 = *(_QWORD *)v44;
        *(_OWORD *)(v43 + 8) = *(_OWORD *)(v44 + 8);
        v22((uint64_t)&v43[*(int *)(v45 + 24)], (uint64_t)&v44[*(int *)(v45 + 24)], v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      v52 = __srca;
      v53 = *(int *)(v39 + 24);
      v54 = &__srca[v53];
      v55 = &v38[v53];
      v56 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v57 = *(_QWORD *)(v56 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
      {
        v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        v59 = v154;
      }
      else
      {
        v145 = v57;
        v151(v54, v55, v21);
        v60 = *(int *)(v56 + 20);
        v148 = v54;
        v61 = &v54[v60];
        v62 = &v55[v60];
        v63 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v64 = *(_QWORD *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v61 = *(_QWORD *)v62;
          v151(&v61[*(int *)(v63 + 20)], &v62[*(int *)(v63 + 20)], v21);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
        }
        v94 = v148;
        v95 = *(int *)(v56 + 24);
        v96 = &v148[v95];
        v97 = &v55[v95];
        v98 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v99 = *(_QWORD *)(v98 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
        {
          v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
          v52 = __srca;
        }
        else
        {
          v142 = v99;
          v151(v96, v97, v21);
          v107 = *(int *)(v98 + 20);
          v139 = v96;
          v108 = &v96[v107];
          v109 = &v97[v107];
          v110 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v111 = *(_QWORD *)(v110 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
          {
            v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
            v52 = __srca;
            v94 = v148;
            v114 = v139;
            v113 = v142;
          }
          else
          {
            v151(v108, v109, v21);
            v135 = v110;
            __dst = v108;
            v122 = *(int *)(v110 + 20);
            v123 = &v108[v122];
            v124 = &v109[v122];
            v125 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v126 = *(_QWORD *)(v125 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v124, 1, v125))
            {
              v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v123 = *(_QWORD *)v124;
              v151(&v123[*(int *)(v125 + 20)], &v124[*(int *)(v125 + 20)], v21);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
            }
            v52 = __srca;
            v94 = v148;
            v114 = v139;
            v113 = v142;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(__dst, 0, 1, v135);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v114, 0, 1, v98);
        }
        v59 = v154;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v94, 0, 1, v56);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v52, 0, 1, v39);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AMDPbHEQuery.OneOf_Query(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *__dst;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t, uint64_t, uint64_t);
  char *v148;
  void (*v149)(char *, char *, uint64_t);
  uint64_t v150;
  void (*v151)(char *, char *, uint64_t);
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *__src;
  char *__srca;
  char *__srcb;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig(a1, type metadata accessor for AMDPbHEQuery.OneOf_Query);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      v4 = (int *)type metadata accessor for AMDPbPECQuery(0);
      v5 = v4[6];
      v6 = a1 + v5;
      v7 = a2 + v5;
      v8 = type metadata accessor for UnknownStorage();
      v9 = v6;
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
      v10(v9, v7, v8);
      v11 = v4[7];
      v12 = (_QWORD *)(a1 + v11);
      v13 = (_QWORD *)(a2 + v11);
      v14 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v150 = v15;
        v153 = v8;
        *v12 = *v13;
        v12[1] = v13[1];
        v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v8);
        v29 = *(int *)(v14 + 32);
        v30 = (char *)v12 + v29;
        v31 = (char *)v13 + v29;
        v32 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
        v33 = *(_QWORD *)(v32 - 8);
        __src = v31;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
          v35 = v150;
          v8 = v153;
        }
        else
        {
          v141 = v32;
          v144 = v33;
          v147 = v10;
          v48 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
          v49 = *(_QWORD *)(v48 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v31, 1, v48))
          {
            v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
            memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
            v10 = v147;
            v51 = v153;
          }
          else
          {
            swift_getEnumCaseMultiPayload();
            v51 = v153;
            v147((uint64_t)v30, (uint64_t)v31, v153);
            swift_storeEnumTagMultiPayload();
            v66 = v48;
            v10 = v147;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v30, 0, 1, v66);
          }
          v35 = v150;
          v10((uint64_t)&v30[*(int *)(v141 + 20)], (uint64_t)&__src[*(int *)(v141 + 20)], v51);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v30, 0, 1, v141);
          v8 = v51;
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v12, 0, 1, v14);
      }
      v67 = v4[8];
      v68 = (char *)(a1 + v67);
      v69 = (char *)(a2 + v67);
      v70 = type metadata accessor for AMDPbEvaluationKey(0);
      v71 = *(_QWORD *)(v70 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        v155 = v71;
        v10((uint64_t)v68, (uint64_t)v69, v8);
        v73 = *(int *)(v70 + 20);
        __srcb = v68;
        v74 = &v68[v73];
        v75 = (void (*)(char *, char *, uint64_t))v10;
        v76 = &v69[v73];
        v77 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v78 = *(_QWORD *)(v77 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v74, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v74 = *(_QWORD *)v76;
          *(_OWORD *)(v74 + 8) = *(_OWORD *)(v76 + 8);
          v75(&v74[*(int *)(v77 + 24)], &v76[*(int *)(v77 + 24)], v8);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v74, 0, 1, v77);
        }
        v80 = __srcb;
        v81 = *(int *)(v70 + 24);
        v82 = &__srcb[v81];
        v83 = &v69[v81];
        v84 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v85 = *(_QWORD *)(v84 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
        {
          v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          v87 = v155;
        }
        else
        {
          v146 = v85;
          v75(v82, v83, v8);
          v88 = *(int *)(v84 + 20);
          v152 = v82;
          v89 = &v82[v88];
          v90 = &v83[v88];
          v91 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v92 = *(_QWORD *)(v91 - 8);
          v149 = v75;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
          {
            v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v89 = *(_QWORD *)v90;
            v75(&v89[*(int *)(v91 + 20)], &v90[*(int *)(v91 + 20)], v8);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
          }
          v101 = *(int *)(v84 + 24);
          v102 = &v152[v101];
          v103 = &v83[v101];
          v104 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v105 = *(_QWORD *)(v104 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
          {
            v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
          }
          else
          {
            v143 = v105;
            v75(v102, v103, v8);
            v115 = *(int *)(v104 + 20);
            v116 = &v102[v115];
            v117 = &v103[v115];
            v118 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v119 = *(_QWORD *)(v118 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
            {
              v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
              v121 = v143;
            }
            else
            {
              v136 = v119;
              v149(v116, v117, v8);
              v138 = v118;
              v140 = v116;
              v128 = *(int *)(v118 + 20);
              __dst = &v116[v128];
              v129 = &v117[v128];
              v130 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v131 = *(_QWORD *)(v130 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
              {
                v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(__dst, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
              }
              else
              {
                *(_QWORD *)__dst = *(_QWORD *)v129;
                v149(&__dst[*(int *)(v130 + 20)], &v129[*(int *)(v130 + 20)], v8);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(__dst, 0, 1, v130);
              }
              v121 = v143;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v140, 0, 1, v138);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v102, 0, 1, v104);
          }
          v87 = v155;
          v80 = __srcb;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v152, 0, 1, v84);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v80, 0, 1, v70);
      }
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      v17 = (int *)type metadata accessor for AMDPbPIRQuery(0);
      v18 = v17[6];
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v22(v19, v20, v21);
      v23 = v17[7];
      v24 = (_OWORD *)(a1 + v23);
      v25 = (_OWORD *)(a2 + v23);
      v26 = type metadata accessor for AspirePirEncryptedIndices(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        *v24 = *v25;
        v22((uint64_t)v24 + *(int *)(v26 + 24), (uint64_t)v25 + *(int *)(v26 + 24), v21);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v36 = v17[8];
      v37 = (char *)(a1 + v36);
      v38 = (char *)(a2 + v36);
      v39 = type metadata accessor for AMDPbEvaluationKey(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        v154 = v40;
        v22((uint64_t)v37, (uint64_t)v38, v21);
        v42 = *(int *)(v39 + 20);
        __srca = v37;
        v43 = &v37[v42];
        v44 = &v38[v42];
        v45 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
        v46 = *(_QWORD *)(v45 - 8);
        v151 = (void (*)(char *, char *, uint64_t))v22;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v43 = *(_QWORD *)v44;
          *(_OWORD *)(v43 + 8) = *(_OWORD *)(v44 + 8);
          v22((uint64_t)&v43[*(int *)(v45 + 24)], (uint64_t)&v44[*(int *)(v45 + 24)], v21);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        }
        v52 = __srca;
        v53 = *(int *)(v39 + 24);
        v54 = &__srca[v53];
        v55 = &v38[v53];
        v56 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v57 = *(_QWORD *)(v56 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
        {
          v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
          memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
          v59 = v154;
        }
        else
        {
          v145 = v57;
          v151(v54, v55, v21);
          v60 = *(int *)(v56 + 20);
          v148 = v54;
          v61 = &v54[v60];
          v62 = &v55[v60];
          v63 = type metadata accessor for AspireHeSerializedGaloisKey(0);
          v64 = *(_QWORD *)(v63 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
          {
            v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
            memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v61 = *(_QWORD *)v62;
            v151(&v61[*(int *)(v63 + 20)], &v62[*(int *)(v63 + 20)], v21);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
          }
          v94 = v148;
          v95 = *(int *)(v56 + 24);
          v96 = &v148[v95];
          v97 = &v55[v95];
          v98 = type metadata accessor for AspireHeSerializedRelinKey(0);
          v99 = *(_QWORD *)(v98 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
          {
            v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
            memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
            v52 = __srca;
          }
          else
          {
            v142 = v99;
            v151(v96, v97, v21);
            v107 = *(int *)(v98 + 20);
            v139 = v96;
            v108 = &v96[v107];
            v109 = &v97[v107];
            v110 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
            v111 = *(_QWORD *)(v110 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
            {
              v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
              memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
              v52 = __srca;
              v94 = v148;
              v114 = v139;
              v113 = v142;
            }
            else
            {
              v151(v108, v109, v21);
              v135 = v110;
              v137 = v108;
              v122 = *(int *)(v110 + 20);
              v123 = &v108[v122];
              v124 = &v109[v122];
              v125 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
              v126 = *(_QWORD *)(v125 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v124, 1, v125))
              {
                v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
              }
              else
              {
                *(_QWORD *)v123 = *(_QWORD *)v124;
                v151(&v123[*(int *)(v125 + 20)], &v124[*(int *)(v125 + 20)], v21);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
              }
              v52 = __srca;
              v94 = v148;
              v114 = v139;
              v113 = v142;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v137, 0, 1, v135);
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v114, 0, 1, v98);
          }
          v59 = v154;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v94, 0, 1, v56);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v52, 0, 1, v39);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEQuery.OneOf_Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AMDPbHEQuery.OneOf_Query(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t type metadata completion function for AMDPbHEQuery.OneOf_Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AMDPbHEConfig.OneOf_Config(a1, a2, a3, type metadata accessor for AMDPbPIRQuery, type metadata accessor for AMDPbPECQuery);
}

uint64_t type metadata completion function for AMDPbHEConfig.OneOf_Config(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  result = a4(319);
  if (v7 <= 0x3F)
  {
    result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEReply(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
        v12 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      else
        v12 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v17 = *(int *)(a3 + 20);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for AMDPbHEReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1)
      v6 = type metadata accessor for AMDPbPECReply(0);
    else
      v6 = type metadata accessor for AMDPbPIRReply(0);
    v7 = a1 + *(int *)(v6 + 20);
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  v9 = a1 + *(int *)(a2 + 20);
  v10 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

_QWORD *initializeWithCopy for AMDPbHEReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v10 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    else
      v10 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v15 = *(int *)(a3 + 20);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

_QWORD *assignWithCopy for AMDPbHEReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v6 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
        v12 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      else
        v12 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    v18 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (v18 == 1)
      v19 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    else
      v19 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for UnknownStorage();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    swift_bridgeObjectRetain();
    v23(v20, v21, v22);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v24 = *(int *)(a3 + 20);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  return a1;
}

_QWORD *initializeWithTake for AMDPbHEReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v10 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    else
      v10 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

_QWORD *assignWithTake for AMDPbHEReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
        v12 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
      else
        v12 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    v17 = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (v17 == 1)
      v18 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    else
      v18 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v22 = *(int *)(a3 + 20);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbHEReply()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C05BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_37Tm(a1, a2, a3, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
}

uint64_t __swift_get_extra_inhabitant_index_37Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v7;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v11 = a1;
  }
  else
  {
    v9 = type metadata accessor for UnknownStorage();
    v11 = a1 + *(int *)(a3 + 20);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  }
  return v10(v11, a2, v9);
}

uint64_t storeEnumTagSinglePayload for AMDPbHEReply()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C05C5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_38Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
}

uint64_t __swift_store_extra_inhabitant_index_38Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
  }
  else
  {
    v11 = type metadata accessor for UnknownStorage();
    v13 = a1 + *(int *)(a4 + 20);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  }
  return v12(v13, a2, a2, v11);
}

void type metadata completion function for AMDPbHEReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AMDPbHEConfig(a1, a2, a3, &lazy cache variable for type metadata for AMDPbHEReply.OneOf_Reply?, (void (*)(uint64_t))type metadata accessor for AMDPbHEReply.OneOf_Reply);
}

void type metadata completion function for AMDPbHEConfig(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, a4, a5);
  if (v5 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v6 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEReply.OneOf_Reply(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v7 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    else
      v7 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AMDPbHEReply.OneOf_Reply(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
    v3 = type metadata accessor for AMDPbPECReply(0);
  else
    v3 = type metadata accessor for AMDPbPIRReply(0);
  v4 = a1 + *(int *)(v3 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AMDPbHEReply.OneOf_Reply(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
    v5 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
  else
    v5 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AMDPbHEReply.OneOf_Reply(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v5 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    else
      v5 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithTake for AMDPbHEReply.OneOf_Reply(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
    v5 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
  else
    v5 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for AMDPbHEReply.OneOf_Reply(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, type metadata accessor for AMDPbHEReply.OneOf_Reply);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v5 = *(int *)(type metadata accessor for AMDPbPECReply(0) + 20);
    else
      v5 = *(int *)(type metadata accessor for AMDPbPIRReply(0) + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AMDPbHEReply.OneOf_Reply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AMDPbHEConfig.OneOf_Config(a1, a2, a3, type metadata accessor for AMDPbPIRReply, type metadata accessor for AMDPbPECReply);
}

uint64_t getEnumTagSinglePayload for AMDPbEvaluationKeys()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AMDPbEvaluationKeys()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbEvaluationKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v56;
  uint64_t v57;
  char *__dst;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(uint64_t *, uint64_t *, uint64_t);
  void (*v63)(char *, char *, uint64_t);
  uint64_t *v64;
  uint64_t v65;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v11[1];
      *v10 = *v11;
      v64 = a1;
      v17 = v7;
      v18 = v8;
      v19 = v11[2];
      outlined copy of Data._Representation(v16, v19);
      v10[1] = v16;
      v10[2] = v19;
      v8 = v18;
      v7 = v17;
      a1 = v64;
      v8((_QWORD *)((char *)v10 + *(int *)(v12 + 24)), (_QWORD *)((char *)v11 + *(int *)(v12 + 24)), v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v20 = *(int *)(a3 + 24);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v65 = v24;
      v8((uint64_t *)v21, (uint64_t *)v22, v7);
      v26 = *(int *)(v23 + 20);
      v27 = &v21[v26];
      v28 = &v22[v26];
      v29 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v27 = *(_QWORD *)v28;
        v32 = *(int *)(v29 + 20);
        v62 = v8;
        v33 = &v27[v32];
        v34 = &v28[v32];
        swift_bridgeObjectRetain();
        v35 = v33;
        v8 = v62;
        v62((uint64_t *)v35, (uint64_t *)v34, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      v36 = *(int *)(v23 + 24);
      v37 = &v21[v36];
      v38 = &v22[v36];
      v39 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        v61 = v40;
        v8((uint64_t *)v37, (uint64_t *)v38, v7);
        v42 = *(int *)(v39 + 20);
        v43 = &v37[v42];
        v63 = (void (*)(char *, char *, uint64_t))v8;
        v44 = &v38[v42];
        v45 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
          v48 = v61;
        }
        else
        {
          v59 = v46;
          v63(v43, v44, v7);
          v49 = *(int *)(v45 + 20);
          v60 = v43;
          __dst = &v43[v49];
          v50 = &v44[v49];
          v51 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v57 = *(_QWORD *)(v51 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v50, 1, v51))
          {
            v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(__dst, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__dst = *(_QWORD *)v50;
            v53 = *(int *)(v51 + 20);
            v56 = &__dst[v53];
            v54 = &v50[v53];
            swift_bridgeObjectRetain();
            v63(v56, v54, v7);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(__dst, 0, 1, v51);
          }
          v48 = v61;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v45);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v37, 0, 1, v39);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v21, 0, 1, v23);
    }
  }
  return a1;
}

uint64_t destroy for AMDPbEvaluationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v18(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
    v18(v5 + *(int *)(v6 + 24), v4);
  }
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v18(v7, v4);
    v10 = v7 + *(int *)(v8 + 20);
    v11 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      v18(v10 + *(int *)(v11 + 20), v4);
    }
    v12 = v7 + *(int *)(v8 + 24);
    v13 = type metadata accessor for AspireHeSerializedRelinKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
    if (!(_DWORD)result)
    {
      v18(v12, v4);
      v14 = v12 + *(int *)(v13 + 20);
      v15 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15);
      if (!(_DWORD)result)
      {
        v18(v14, v4);
        v16 = v14 + *(int *)(v15 + 20);
        v17 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17);
        if (!(_DWORD)result)
        {
          swift_bridgeObjectRelease();
          return ((uint64_t (*)(uint64_t, uint64_t))v18)(v16 + *(int *)(v17 + 20), v4);
        }
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v54;
  uint64_t v55;
  char *__dst;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v10[1];
    *v9 = *v10;
    v62 = v6;
    v15 = a1;
    v16 = v7;
    v17 = v10[2];
    outlined copy of Data._Representation(v14, v17);
    v9[1] = v14;
    v9[2] = v17;
    v7 = v16;
    a1 = v15;
    v6 = v62;
    v7((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v62);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v18 = *(int *)(a3 + 24);
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v63 = v22;
    v7((uint64_t)v19, (uint64_t)v20, v6);
    v24 = *(int *)(v21 + 20);
    v25 = &v19[v24];
    v26 = &v20[v24];
    v27 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v30 = *(int *)(v27 + 20);
      v60 = v7;
      v31 = &v25[v30];
      v32 = &v26[v30];
      swift_bridgeObjectRetain();
      v33 = v31;
      v7 = v60;
      v60((uint64_t)v33, (uint64_t)v32, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    v34 = *(int *)(v21 + 24);
    v35 = &v19[v34];
    v36 = &v20[v34];
    v37 = type metadata accessor for AspireHeSerializedRelinKey(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v59 = v38;
      v7((uint64_t)v35, (uint64_t)v36, v6);
      v40 = *(int *)(v37 + 20);
      v41 = &v35[v40];
      v61 = (void (*)(char *, char *, uint64_t))v7;
      v42 = &v36[v40];
      v43 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        v46 = v59;
      }
      else
      {
        v57 = v44;
        v61(v41, v42, v6);
        v47 = *(int *)(v43 + 20);
        v58 = v41;
        __dst = &v41[v47];
        v48 = &v42[v47];
        v49 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        v55 = *(_QWORD *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v48, 1, v49))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(__dst, v48, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dst = *(_QWORD *)v48;
          v51 = *(int *)(v49 + 20);
          v54 = &__dst[v51];
          v52 = &v48[v51];
          swift_bridgeObjectRetain();
          v61(v54, v52, v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v49);
        }
        v46 = v59;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v43);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v35, 0, 1, v37);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithCopy for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  int v28;
  int v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  size_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  size_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  int v82;
  int v83;
  void (*v84)(uint64_t, char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  int v93;
  int v94;
  void (*v95)(uint64_t, char *, uint64_t);
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t);
  int v116;
  int v117;
  uint64_t v118;
  char *v119;
  char *v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  void (*__src)(char *, char *, uint64_t);
  void (*__srcb)(char *, char *, uint64_t);
  char *__srca;
  uint64_t v136;
  uint64_t v137;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v136 = v6;
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2);
  v9 = *(int *)(a3 + 20);
  v137 = a1;
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v17 = *((_QWORD *)v11 + 1);
      v18 = *((_QWORD *)v11 + 2);
      outlined copy of Data._Representation(v17, v18);
      *((_QWORD *)v10 + 1) = v17;
      *((_QWORD *)v10 + 2) = v18;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v10[*(int *)(v12 + 24)], &v11[*(int *)(v12 + 24)], v136);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
      v20 = v137;
      v21 = (void (*)(uint64_t, char *, uint64_t))v8;
      goto LABEL_8;
    }
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  if (v16)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AMDPbEvaluationKeyMetadata);
    goto LABEL_6;
  }
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v41 = *((_QWORD *)v11 + 1);
  v42 = *((_QWORD *)v11 + 2);
  outlined copy of Data._Representation(v41, v42);
  v43 = *((_QWORD *)v10 + 1);
  v44 = *((_QWORD *)v10 + 2);
  *((_QWORD *)v10 + 1) = v41;
  *((_QWORD *)v10 + 2) = v42;
  outlined consume of Data._Representation(v43, v44);
  v21 = (void (*)(uint64_t, char *, uint64_t))v8;
  ((void (*)(char *, char *, uint64_t))v8)(&v10[*(int *)(v12 + 24)], &v11[*(int *)(v12 + 24)], v136);
  v20 = v137;
LABEL_8:
  v22 = *(int *)(a3 + 24);
  v23 = v20 + v22;
  v24 = (char *)(a2 + v22);
  v25 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27((uint64_t)v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      v30 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
      v30(v23, v24, v136);
      v31 = *(int *)(v25 + 20);
      v32 = (_QWORD *)(v23 + v31);
      v33 = &v24[v31];
      v34 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v35 = *(_QWORD *)(v34 - 8);
      __src = (void (*)(char *, char *, uint64_t))v30;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        *v32 = *(_QWORD *)v33;
        v54 = *(int *)(v34 + 20);
        v130 = (char *)v32 + v54;
        v55 = &v33[v54];
        swift_bridgeObjectRetain();
        v30((uint64_t)v130, v55, v136);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v56 = *(int *)(v25 + 24);
      v57 = (char *)(v23 + v56);
      v58 = &v24[v56];
      v59 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v60 = *(_QWORD *)(v59 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
      {
        v131 = v60;
        __src(v57, v58, v136);
        v64 = *(int *)(v59 + 20);
        v65 = &v57[v64];
        v66 = &v58[v64];
        v67 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v68 = *(_QWORD *)(v67 - 8);
        v20 = v137;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
          v70 = v131;
        }
        else
        {
          __src(v65, v66, v136);
          v74 = *(int *)(v67 + 20);
          v127 = v65;
          v75 = &v65[v74];
          v76 = &v66[v74];
          v77 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v126 = *(_QWORD *)(v77 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v76, 1, v77))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v75 = *(_QWORD *)v76;
            v101 = *(int *)(v77 + 20);
            v125 = &v75[v101];
            v102 = &v76[v101];
            swift_bridgeObjectRetain();
            __src(v125, v102, v136);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v75, 0, 1, v77);
          }
          v20 = v137;
          v70 = v131;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v127, 0, 1, v67);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v57, 0, 1, v59);
        goto LABEL_49;
      }
      v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                  - 8)
                      + 64);
      v62 = v57;
      v63 = v58;
      goto LABEL_24;
    }
    goto LABEL_14;
  }
  if (!v29)
  {
    v21(v23, v24, v136);
    v45 = *(int *)(v25 + 20);
    v46 = (_QWORD *)(v23 + v45);
    v47 = &v24[v45];
    v48 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    v49 = *(_QWORD *)(v48 - 8);
    v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
    v129 = v46;
    LODWORD(v46) = v50((char *)v46, 1, v48);
    v51 = v50(v47, 1, v48);
    if ((_DWORD)v46)
    {
      if (v51)
      {
        v52 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                    - 8)
                        + 64);
        v53 = v129;
LABEL_30:
        memcpy(v53, v47, v52);
        goto LABEL_35;
      }
      *v129 = *(_QWORD *)v47;
      v71 = *(int *)(v48 + 20);
      v72 = (char *)v129 + v71;
      v73 = &v47[v71];
      __srcb = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      __srcb(v72, v73, v136);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v129, 0, 1, v48);
    }
    else
    {
      if (v51)
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v129, type metadata accessor for AspireHeSerializedGaloisKey);
        v52 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                    - 8)
                        + 64);
        v53 = v129;
        goto LABEL_30;
      }
      *v129 = *(_QWORD *)v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v8)((char *)v129 + *(int *)(v48 + 20), &v47[*(int *)(v48 + 20)], v136);
    }
LABEL_35:
    v79 = *(int *)(v25 + 24);
    v23 += v79;
    v80 = &v24[v79];
    v25 = type metadata accessor for AspireHeSerializedRelinKey(0);
    v26 = *(_QWORD *)(v25 - 8);
    v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    v82 = v81(v23, 1, v25);
    v83 = v81((uint64_t)v80, 1, v25);
    v20 = v137;
    if (v82)
    {
      if (!v83)
      {
        v84 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
        v84(v23, v80, v136);
        v85 = *(int *)(v25 + 20);
        v86 = (char *)(v23 + v85);
        v87 = &v80[v85];
        v88 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v89 = *(_QWORD *)(v88 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
        {
          v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
        }
        else
        {
          v84((uint64_t)v86, v87, v136);
          v104 = *(int *)(v88 + 20);
          __srca = &v86[v104];
          v105 = &v87[v104];
          v106 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v132 = *(_QWORD *)(v106 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v105, 1, v106))
          {
            v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(__srca, v105, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__srca = *(_QWORD *)v105;
            v108 = *(int *)(v106 + 20);
            v128 = &__srca[v108];
            v109 = &v105[v108];
            swift_bridgeObjectRetain();
            v84((uint64_t)v128, v109, v136);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(__srca, 0, 1, v106);
          }
          v20 = v137;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
        }
        goto LABEL_49;
      }
    }
    else
    {
      if (!v83)
      {
        ((void (*)(uint64_t, char *, uint64_t))v8)(v23, v80, v136);
        v91 = *(int *)(v25 + 20);
        v23 += v91;
        v24 = &v80[v91];
        v25 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v26 = *(_QWORD *)(v25 - 8);
        v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
        v93 = v92(v23, 1, v25);
        v94 = v92((uint64_t)v24, 1, v25);
        if (v93)
        {
          if (!v94)
          {
            v95 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
            v95(v23, v24, v136);
            v96 = *(int *)(v25 + 20);
            v97 = (char *)(v23 + v96);
            v98 = &v24[v96];
            v99 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v100 = *(_QWORD *)(v99 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
            {
              *(_QWORD *)v97 = *(_QWORD *)v98;
              v122 = *(int *)(v99 + 20);
              v123 = &v97[v122];
              v124 = &v98[v122];
              swift_bridgeObjectRetain();
              v95((uint64_t)v123, v124, v136);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
              goto LABEL_25;
            }
            v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                        - 8)
                            + 64);
            v62 = v97;
            v63 = v98;
LABEL_24:
            memcpy(v62, v63, v61);
LABEL_25:
            v20 = v137;
LABEL_49:
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
            return v20;
          }
        }
        else
        {
          if (!v94)
          {
            ((void (*)(uint64_t, char *, uint64_t))v8)(v23, v24, v136);
            v110 = *(int *)(v25 + 20);
            v111 = (char *)(v23 + v110);
            v112 = &v24[v110];
            v113 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v114 = *(_QWORD *)(v113 - 8);
            v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
            v116 = v115(v111, 1, v113);
            v117 = v115(v112, 1, v113);
            if (v116)
            {
              if (!v117)
              {
                *(_QWORD *)v111 = *(_QWORD *)v112;
                v118 = *(int *)(v113 + 20);
                v119 = &v111[v118];
                v120 = &v112[v118];
                v121 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
                swift_bridgeObjectRetain();
                v121(v119, v120, v136);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
                return v20;
              }
            }
            else
            {
              if (!v117)
              {
                *(_QWORD *)v111 = *(_QWORD *)v112;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                ((void (*)(char *, char *, uint64_t))v8)(&v111[*(int *)(v113 + 20)], &v112[*(int *)(v113 + 20)], v136);
                return v20;
              }
              outlined destroy of AspireApiPECConfig((uint64_t)v111, type metadata accessor for AspireHeSerializedCiphertextVec);
            }
            v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                        - 8)
                            + 64);
            v39 = v111;
            v40 = v112;
            goto LABEL_16;
          }
          outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedKeySwitchKey);
        }
        v37 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
        goto LABEL_15;
      }
      outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedRelinKey);
    }
    v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    v39 = (void *)v23;
    v40 = v80;
    goto LABEL_16;
  }
  outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_14:
  v37 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_15:
  v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v37) - 8) + 64);
  v39 = (void *)v23;
  v40 = v24;
LABEL_16:
  memcpy(v39, v40, v38);
  return v20;
}

uint64_t initializeWithTake for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *__dst;
  uint64_t v49;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
    v7((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = *(int *)(a3 + 24);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v49 = v18;
    v7((uint64_t)v15, (uint64_t)v16, v6);
    v20 = *(int *)(v17 + 20);
    v21 = &v15[v20];
    v22 = &v16[v20];
    v23 = type metadata accessor for AspireHeSerializedGaloisKey(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v7((uint64_t)&v21[*(int *)(v23 + 20)], (uint64_t)&v22[*(int *)(v23 + 20)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v26 = *(int *)(v17 + 24);
    v27 = &v15[v26];
    v28 = &v16[v26];
    v29 = type metadata accessor for AspireHeSerializedRelinKey(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v27, (uint64_t)v28, v6);
      v32 = *(int *)(v29 + 20);
      v47 = v27;
      __dst = &v27[v32];
      v33 = &v28[v32];
      v34 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        v37 = v47;
      }
      else
      {
        v45 = v35;
        v46 = v30;
        v7((uint64_t)__dst, (uint64_t)v33, v6);
        v38 = *(int *)(v34 + 20);
        v44 = &__dst[v38];
        v39 = &v33[v38];
        v40 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        v41 = *(_QWORD *)(v40 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(v44, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v44 = *(_QWORD *)v39;
          v7((uint64_t)&v44[*(int *)(v40 + 20)], (uint64_t)&v39[*(int *)(v40 + 20)], v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v40);
        }
        v30 = v46;
        v37 = v47;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v34);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v37, 0, 1, v29);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for AMDPbEvaluationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  int v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  size_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  size_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int (**v53)(const void *, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (**v62)(const void *, uint64_t, uint64_t);
  void *v63;
  void (*v64)(uint64_t, char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  int v69;
  int v70;
  size_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, char *, uint64_t);
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  int v90;
  int v91;
  void (*v92)(uint64_t, char *, uint64_t);
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t, uint64_t);
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  void *__src;
  void (**__srca)(char *, _QWORD, uint64_t, uint64_t);
  void (*__dst)(uint64_t, uint64_t, uint64_t);
  unsigned int (**__dsta)(const void *, uint64_t, uint64_t);
  char *__dstb;
  uint64_t v121;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  __dst = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  __dst(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v121 = a1;
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *v9 = *v10;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 1);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v9 + *(int *)(v11 + 24), (char *)v10 + *(int *)(v11 + 24), v6);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AMDPbEvaluationKeyMetadata);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v37 = v10[2];
  v38 = v9[1];
  v39 = v9[2];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v9[2] = v37;
  outlined consume of Data._Representation(v38, v39);
  __dst((uint64_t)v9 + *(int *)(v11 + 24), (uint64_t)v10 + *(int *)(v11 + 24), v6);
LABEL_7:
  v17 = v121;
  v18 = *(int *)(a3 + 24);
  v19 = v121 + v18;
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23((uint64_t)v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      v26 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
      v26(v19, v20, v6);
      v27 = *(int *)(v21 + 20);
      v28 = (_QWORD *)(v19 + v27);
      v29 = &v20[v27];
      v30 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *v28 = *(_QWORD *)v29;
        v26((uint64_t)v28 + *(int *)(v30 + 20), &v29[*(int *)(v30 + 20)], v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      v49 = *(int *)(v21 + 24);
      v50 = (char *)(v19 + v49);
      v51 = &v20[v49];
      v52 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v53 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v52 - 8);
      if (v53[6](v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56);
      }
      else
      {
        __dsta = v53;
        v26((uint64_t)v50, v51, v6);
        v56 = *(int *)(v52 + 20);
        __src = v50;
        v57 = &v50[v56];
        v58 = &v51[v56];
        v59 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v60 = *(_QWORD *)(v59 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
          v63 = __src;
          v62 = __dsta;
        }
        else
        {
          v113 = v60;
          v26((uint64_t)v57, v58, v6);
          v74 = *(int *)(v59 + 20);
          v115 = v57;
          v75 = &v57[v74];
          v76 = &v58[v74];
          v77 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v112 = *(_QWORD *)(v77 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v76, 1, v77))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v75 = *(_QWORD *)v76;
            v26((uint64_t)&v75[*(int *)(v77 + 20)], &v76[*(int *)(v77 + 20)], v6);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v75, 0, 1, v77);
          }
          v63 = __src;
          v62 = __dsta;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v115, 0, 1, v59);
        }
        ((void (*)(void *, _QWORD, uint64_t, uint64_t))v62[7])(v63, 0, 1, v52);
        v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56);
      }
LABEL_56:
      v55(v19, 0, 1, v21);
      return v121;
    }
    goto LABEL_13;
  }
  if (v25)
  {
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_13:
    v33 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_14:
    v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v33) - 8) + 64);
    v35 = (void *)v19;
    v36 = v20;
LABEL_15:
    memcpy(v35, v36, v34);
    return v17;
  }
  __dst(v19, (uint64_t)v20, v6);
  v40 = *(int *)(v21 + 20);
  v41 = (char *)(v19 + v40);
  v42 = &v20[v40];
  v43 = type metadata accessor for AspireHeSerializedGaloisKey(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v114 = v41;
  LODWORD(v41) = v45(v41, 1, v43);
  v46 = v45(v42, 1, v43);
  if ((_DWORD)v41)
  {
    if (!v46)
    {
      *(_QWORD *)v114 = *(_QWORD *)v42;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v114[*(int *)(v43 + 20)], &v42[*(int *)(v43 + 20)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v114, 0, 1, v43);
      goto LABEL_29;
    }
    v47 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                - 8)
                    + 64);
    v48 = v114;
LABEL_27:
    memcpy(v48, v42, v47);
LABEL_29:
    v64 = (void (*)(uint64_t, char *, uint64_t))__dst;
    goto LABEL_30;
  }
  if (v46)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v114, type metadata accessor for AspireHeSerializedGaloisKey);
    v47 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?)
                                - 8)
                    + 64);
    v48 = v114;
    goto LABEL_27;
  }
  *(_QWORD *)v114 = *(_QWORD *)v42;
  swift_bridgeObjectRelease();
  v64 = (void (*)(uint64_t, char *, uint64_t))__dst;
  __dst((uint64_t)&v114[*(int *)(v43 + 20)], (uint64_t)&v42[*(int *)(v43 + 20)], v6);
LABEL_30:
  v65 = *(int *)(v21 + 24);
  v19 += v65;
  v66 = &v20[v65];
  v21 = type metadata accessor for AspireHeSerializedRelinKey(0);
  v67 = *(_QWORD *)(v21 - 8);
  v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v19, 1, v21);
  v70 = v68((uint64_t)v66, 1, v21);
  if (v69)
  {
    if (!v70)
    {
      v79 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
      v79(v19, v66, v6);
      v80 = *(int *)(v21 + 20);
      v81 = (char *)(v19 + v80);
      v82 = &v66[v80];
      v83 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v79((uint64_t)v81, v82, v6);
        v99 = *(int *)(v83 + 20);
        __dstb = &v81[v99];
        v100 = &v82[v99];
        v101 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
        __srca = *(void (***)(char *, _QWORD, uint64_t, uint64_t))(v101 - 8);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__srca[6])(v100, 1, v101))
        {
          v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
          memcpy(__dstb, v100, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dstb = *(_QWORD *)v100;
          v79((uint64_t)&__dstb[*(int *)(v101 + 20)], &v100[*(int *)(v101 + 20)], v6);
          __srca[7](__dstb, 0, 1, v101);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
      }
      v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56);
      goto LABEL_56;
    }
    v71 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    v72 = (void *)v19;
    v73 = v66;
    goto LABEL_33;
  }
  v17 = v121;
  if (v70)
  {
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for AspireHeSerializedRelinKey);
    v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                - 8)
                    + 64);
    v35 = (void *)v19;
    v36 = v66;
    goto LABEL_15;
  }
  v64(v19, v66, v6);
  v86 = *(int *)(v21 + 20);
  v19 += v86;
  v20 = &v66[v86];
  v87 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v88 = *(_QWORD *)(v87 - 8);
  v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  v90 = v89(v19, 1, v87);
  v91 = v89((uint64_t)v20, 1, v87);
  if (!v90)
  {
    if (!v91)
    {
      v64(v19, v20, v6);
      v104 = *(int *)(v87 + 20);
      v105 = (char *)(v19 + v104);
      v106 = &v20[v104];
      v107 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
      v108 = *(_QWORD *)(v107 - 8);
      v109 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48);
      v110 = v109(v105, 1, v107);
      v111 = v109(v106, 1, v107);
      if (!v110)
      {
        v17 = v121;
        if (!v111)
        {
          *(_QWORD *)v105 = *(_QWORD *)v106;
          swift_bridgeObjectRelease();
          v64((uint64_t)&v105[*(int *)(v107 + 20)], &v106[*(int *)(v107 + 20)], v6);
          return v17;
        }
        outlined destroy of AspireApiPECConfig((uint64_t)v105, type metadata accessor for AspireHeSerializedCiphertextVec);
        v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                    - 8)
                        + 64);
        v35 = v105;
        v36 = v106;
        goto LABEL_15;
      }
      if (!v111)
      {
        *(_QWORD *)v105 = *(_QWORD *)v106;
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v105[*(int *)(v107 + 20)], &v106[*(int *)(v107 + 20)], v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
        return v121;
      }
      v71 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                  - 8)
                      + 64);
      v72 = v105;
      v73 = v106;
LABEL_33:
      memcpy(v72, v73, v71);
      return v121;
    }
    outlined destroy of AspireApiPECConfig(v19, type metadata accessor for AspireHeSerializedKeySwitchKey);
LABEL_52:
    v33 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
    goto LABEL_14;
  }
  if (v91)
    goto LABEL_52;
  v92 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v92(v19, v20, v6);
  v93 = *(int *)(v87 + 20);
  v94 = (_QWORD *)(v19 + v93);
  v95 = &v20[v93];
  v96 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
  v97 = *(_QWORD *)(v96 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
  {
    v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    *v94 = *(_QWORD *)v95;
    v92((uint64_t)v94 + *(int *)(v96 + 20), &v95[*(int *)(v96 + 20)], v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
  }
  v17 = v121;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v88 + 56))(v19, 0, 1, v87);
  return v17;
}

uint64_t getEnumTagSinglePayload for AMDPbEvaluationKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C084FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AMDPbEvaluationKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C085A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AMDPbEvaluationKey()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AMDPbEvaluationKeyMetadata?, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKeyMetadata);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AspireHeSerializedEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AspireHeSerializedEvaluationKey);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbEvaluationKeyMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t destroy for AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AMDPbEvaluationKeyMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

_QWORD *assignWithCopy for AMDPbEvaluationKeyMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  v8 = a1[1];
  v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AMDPbEvaluationKeyMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  outlined consume of Data._Representation(v7, v8);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbEvaluationKeyMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C089F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbEvaluationKeyMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C08A8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AMDPbEvaluationKeyMetadata()
{
  return type metadata completion function for AMDPbHEConfigsReply();
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbPIRQuery(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a3[6];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for AspirePirEncryptedIndices(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = v16[1];
      *v15 = *v16;
      v15[1] = v21;
      v22 = *(int *)(v17 + 24);
      v23 = v13;
      v24 = (char *)v15 + v22;
      v25 = (char *)v16 + v22;
      swift_bridgeObjectRetain();
      v26 = v24;
      v13 = v23;
      v23(v26, v25, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v27 = a3[8];
    v28 = (char *)v4 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for AMDPbEvaluationKey(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v13(v28, v29, v12);
      v92 = v30;
      v33 = *(int *)(v30 + 20);
      v34 = &v28[v33];
      v35 = &v29[v33];
      v36 = v13;
      v37 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v38 = *(_QWORD *)(v37 - 8);
      v89 = v36;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v37))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v90 = v31;
        v40 = *((_QWORD *)v35 + 1);
        *(_QWORD *)v34 = *(_QWORD *)v35;
        v87 = v28;
        v41 = *((_QWORD *)v35 + 2);
        outlined copy of Data._Representation(v40, v41);
        *((_QWORD *)v34 + 1) = v40;
        *((_QWORD *)v34 + 2) = v41;
        v31 = v90;
        v28 = v87;
        v36(&v34[*(int *)(v37 + 24)], &v35[*(int *)(v37 + 24)], v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v37);
      }
      v42 = v92;
      v43 = *(int *)(v92 + 24);
      v44 = &v28[v43];
      v45 = &v29[v43];
      v46 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v85 = v47;
        v91 = v31;
        v88 = v28;
        v89(v44, v45, v12);
        v49 = *(int *)(v46 + 20);
        v86 = v44;
        v50 = &v44[v49];
        v51 = &v45[v49];
        v52 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v53 = *(_QWORD *)(v52 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
        {
          v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v50 = *(_QWORD *)v51;
          v55 = *(int *)(v52 + 20);
          v83 = &v50[v55];
          v56 = &v51[v55];
          swift_bridgeObjectRetain();
          v89(v83, v56, v12);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
        }
        v31 = v91;
        v57 = v86;
        v58 = *(int *)(v46 + 24);
        v59 = &v86[v58];
        v60 = &v45[v58];
        v61 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v62 = *(_QWORD *)(v61 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
        {
          v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        }
        else
        {
          v84 = v62;
          v89(v59, v60, v12);
          v64 = *(int *)(v61 + 20);
          v65 = &v59[v64];
          v66 = &v60[v64];
          v67 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v68 = *(_QWORD *)(v67 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
          {
            v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
            v31 = v91;
            v57 = v86;
            v70 = v84;
          }
          else
          {
            v80 = v68;
            v89(v65, v66, v12);
            v71 = *(int *)(v67 + 20);
            v82 = &v65[v71];
            v72 = &v66[v71];
            v73 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v74 = *(_QWORD *)(v73 - 8);
            v79 = v65;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
            {
              v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(v82, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
            }
            else
            {
              *(_QWORD *)v82 = *(_QWORD *)v72;
              v76 = *(int *)(v73 + 20);
              v77 = &v82[v76];
              v81 = &v72[v76];
              swift_bridgeObjectRetain();
              v89(v77, v81, v12);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v82, 0, 1, v73);
            }
            v31 = v91;
            v42 = v92;
            v57 = v86;
            v70 = v84;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v79, 0, 1, v67);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v59, 0, 1, v61);
        }
        v28 = v88;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v57, 0, 1, v46);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v42);
    }
  }
  return v4;
}

uint64_t destroy for AMDPbPIRQuery(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v23(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for AspirePirEncryptedIndices(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v23(v6 + *(int *)(v7 + 24), v5);
  }
  v8 = a1 + a2[8];
  v9 = type metadata accessor for AMDPbEvaluationKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v23(v8, v5);
    v11 = v8 + *(int *)(v9 + 20);
    v12 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16));
      v23(v11 + *(int *)(v12 + 24), v5);
    }
    v13 = v8 + *(int *)(v9 + 24);
    v14 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
    if (!(_DWORD)result)
    {
      v23(v13, v5);
      v15 = v13 + *(int *)(v14 + 20);
      v16 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
      {
        swift_bridgeObjectRelease();
        v23(v15 + *(int *)(v16 + 20), v5);
      }
      v17 = v13 + *(int *)(v14 + 24);
      v18 = type metadata accessor for AspireHeSerializedRelinKey(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18);
      if (!(_DWORD)result)
      {
        v23(v17, v5);
        v19 = v17 + *(int *)(v18 + 20);
        v20 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20);
        if (!(_DWORD)result)
        {
          v23(v19, v5);
          v21 = v19 + *(int *)(v20 + 20);
          v22 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22);
          if (!(_DWORD)result)
          {
            swift_bridgeObjectRelease();
            return ((uint64_t (*)(uint64_t, uint64_t))v23)(v21 + *(int *)(v22 + 20), v5);
          }
        }
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AMDPbPIRQuery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = type metadata accessor for AspirePirEncryptedIndices(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = v15[1];
    *v14 = *v15;
    v14[1] = v19;
    v20 = *(int *)(v16 + 24);
    v21 = v12;
    v22 = (char *)v14 + v20;
    v23 = (char *)v15 + v20;
    swift_bridgeObjectRetain();
    v24 = v22;
    v12 = v21;
    v21((uint64_t)v24, (uint64_t)v23, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v25 = a3[8];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = type metadata accessor for AMDPbEvaluationKey(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v26, (uint64_t)v27, v11);
    v90 = v28;
    v31 = *(int *)(v28 + 20);
    v32 = &v26[v31];
    v33 = &v27[v31];
    v34 = v12;
    v35 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v36 = *(_QWORD *)(v35 - 8);
    v87 = (void (*)(char *, char *, uint64_t))v34;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v88 = v29;
      v38 = *((_QWORD *)v33 + 1);
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v85 = v26;
      v39 = *((_QWORD *)v33 + 2);
      outlined copy of Data._Representation(v38, v39);
      *((_QWORD *)v32 + 1) = v38;
      *((_QWORD *)v32 + 2) = v39;
      v29 = v88;
      v26 = v85;
      v34((uint64_t)&v32[*(int *)(v35 + 24)], (uint64_t)&v33[*(int *)(v35 + 24)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v32, 0, 1, v35);
    }
    v40 = v90;
    v41 = *(int *)(v90 + 24);
    v42 = &v26[v41];
    v43 = &v27[v41];
    v44 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v83 = v45;
      v89 = v29;
      v86 = v26;
      v87(v42, v43, v11);
      v47 = *(int *)(v44 + 20);
      v84 = v42;
      v48 = &v42[v47];
      v49 = &v43[v47];
      v50 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v53 = *(int *)(v50 + 20);
        v81 = &v48[v53];
        v54 = &v49[v53];
        swift_bridgeObjectRetain();
        v87(v81, v54, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      v29 = v89;
      v55 = v84;
      v56 = *(int *)(v44 + 24);
      v57 = &v84[v56];
      v58 = &v43[v56];
      v59 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v60 = *(_QWORD *)(v59 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
      {
        v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        v82 = v60;
        v87(v57, v58, v11);
        v62 = *(int *)(v59 + 20);
        v63 = &v57[v62];
        v64 = &v58[v62];
        v65 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v66 = *(_QWORD *)(v65 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
        {
          v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
          v29 = v89;
          v55 = v84;
          v68 = v82;
        }
        else
        {
          v80 = v66;
          v87(v63, v64, v11);
          v69 = *(int *)(v65 + 20);
          v78 = &v63[v69];
          v70 = &v64[v69];
          v71 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v72 = *(_QWORD *)(v71 - 8);
          v79 = v63;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
          {
            v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v78, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v78 = *(_QWORD *)v70;
            v74 = *(int *)(v71 + 20);
            v75 = &v78[v74];
            v77 = &v70[v74];
            swift_bridgeObjectRetain();
            v87(v75, v77, v11);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v78, 0, 1, v71);
          }
          v29 = v89;
          v40 = v90;
          v55 = v84;
          v68 = v82;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v79, 0, 1, v65);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v57, 0, 1, v59);
      }
      v26 = v86;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v55, 0, 1, v44);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v40);
  }
  return a1;
}

_DWORD *assignWithCopy for AMDPbPIRQuery(_DWORD *a1, uint64_t a2, int *a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  int v34;
  void (*v35)(uint64_t, char *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  size_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, char *, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  int v79;
  int v80;
  void (*v81)(uint64_t, char *, uint64_t);
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(char *, uint64_t, uint64_t);
  int v117;
  int v118;
  uint64_t v119;
  char *v120;
  char *v121;
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, char *, uint64_t);
  uint64_t v145;
  uint64_t (*v146)(uint64_t, uint64_t, uint64_t);
  int v147;
  int v148;
  void (*v149)(uint64_t, char *, uint64_t);
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  size_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t (*v165)(uint64_t, uint64_t, uint64_t);
  int v166;
  int v167;
  void (*v168)(uint64_t, char *, uint64_t);
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t (*v188)(char *, uint64_t, uint64_t);
  int v189;
  int v190;
  uint64_t v191;
  char *v192;
  char *v193;
  void (*v194)(char *, char *, uint64_t);
  uint64_t v195;
  char *v196;
  char *v197;
  char *__dst;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(char *, char *, uint64_t);
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(char *, uint64_t, uint64_t);
  _DWORD *v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  char *v222;
  void (*v223)(char *, char *, uint64_t);
  char *v224;
  char *v225;

  v5 = a1;
  *a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  v8 = *((_QWORD *)v5 + 1);
  v9 = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 1) = v6;
  *((_QWORD *)v5 + 2) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a3[6];
  v11 = (char *)v5 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v219 = *(_QWORD **)(v13 - 8);
  v215 = (void (*)(char *, uint64_t, uint64_t))v219[3];
  v215(v11, v12, v13);
  v14 = a3[7];
  v15 = (_QWORD *)((char *)v5 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = type metadata accessor for AspirePirEncryptedIndices(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      v22 = *(int *)(v17 + 24);
      v23 = (char *)v15 + v22;
      v24 = (char *)v16 + v22;
      v25 = (void (*)(char *, char *, uint64_t))v219[2];
      swift_bridgeObjectRetain();
      v25(v23, v24, v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v15, type metadata accessor for AspirePirEncryptedIndices);
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  *v15 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[1] = v16[1];
  v215((char *)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v13);
LABEL_7:
  v27 = a3[8];
  v28 = (uint64_t)v5 + v27;
  v29 = (char *)(a2 + v27);
  v30 = type metadata accessor for AMDPbEvaluationKey(0);
  v31 = *(_QWORD **)(v30 - 8);
  v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31[6];
  v33 = v32(v28, 1, v30);
  v34 = v32((uint64_t)v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      v216 = v5;
      v35 = (void (*)(uint64_t, char *, uint64_t))v219[2];
      v35(v28, v29, v13);
      v36 = *(int *)(v30 + 20);
      v37 = (_QWORD *)(v28 + v36);
      v38 = &v29[v36];
      v39 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        *v37 = *(_QWORD *)v38;
        v220 = v31;
        v213 = v13;
        v57 = *((_QWORD *)v38 + 1);
        v58 = *((_QWORD *)v38 + 2);
        outlined copy of Data._Representation(v57, v58);
        v37[1] = v57;
        v37[2] = v58;
        v31 = v220;
        v13 = v213;
        v35((uint64_t)v37 + *(int *)(v39 + 24), &v38[*(int *)(v39 + 24)], v213);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      v59 = *(int *)(v30 + 24);
      v60 = (char *)(v28 + v59);
      v61 = &v29[v59];
      v62 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v63 = *(_QWORD *)(v62 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
      {
        v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        v5 = v216;
        v65 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v31[7];
      }
      else
      {
        v207 = v63;
        v221 = v31;
        v35((uint64_t)v60, v61, v13);
        v66 = *(int *)(v62 + 20);
        v209 = v60;
        v67 = &v60[v66];
        v68 = &v61[v66];
        v69 = v13;
        v70 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v71 = *(_QWORD *)(v70 - 8);
        v214 = v69;
        v205 = (void (*)(char *, char *, uint64_t))v35;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v68, 1, v70))
        {
          v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v67 = *(_QWORD *)v68;
          v89 = *(int *)(v70 + 20);
          v202 = &v67[v89];
          v90 = &v68[v89];
          swift_bridgeObjectRetain();
          v35((uint64_t)v202, v90, v69);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v67, 0, 1, v70);
        }
        v91 = *(int *)(v62 + 24);
        v92 = v209;
        v93 = &v209[v91];
        v94 = &v61[v91];
        v95 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v96 = *(_QWORD *)(v95 - 8);
        v5 = v216;
        v97 = v221;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
        {
          v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
        }
        else
        {
          v203 = v96;
          v205(v93, v94, v214);
          v99 = *(int *)(v95 + 20);
          v100 = &v93[v99];
          v101 = &v94[v99];
          v102 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v103 = *(_QWORD *)(v102 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
          {
            v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
            v5 = v216;
            v97 = v221;
            v105 = v203;
          }
          else
          {
            v199 = v103;
            v205(v100, v101, v214);
            v132 = *(int *)(v102 + 20);
            v200 = v100;
            __dst = &v100[v132];
            v133 = &v101[v132];
            v134 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v135 = *(_QWORD *)(v134 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
            {
              v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dst, v133, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
            }
            else
            {
              *(_QWORD *)__dst = *(_QWORD *)v133;
              v158 = *(int *)(v134 + 20);
              v197 = &__dst[v158];
              v159 = &v133[v158];
              swift_bridgeObjectRetain();
              v205(v197, v159, v214);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(__dst, 0, 1, v134);
            }
            v5 = v216;
            v97 = v221;
            v105 = v203;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v200, 0, 1, v102);
            v92 = v209;
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v93, 0, 1, v95);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v92, 0, 1, v62);
        v65 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v97[7];
      }
      goto LABEL_82;
    }
    goto LABEL_13;
  }
  if (!v34)
  {
    v212 = v13;
    v215((char *)v28, (uint64_t)v29, v13);
    v46 = *(int *)(v30 + 20);
    v47 = (char *)(v28 + v46);
    v48 = &v29[v46];
    v49 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v50 = *(_QWORD *)(v49 - 8);
    v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
    v52 = v51(v47, 1, v49);
    v53 = v51(v48, 1, v49);
    if (v52)
    {
      if (!v53)
      {
        *(_QWORD *)v47 = *(_QWORD *)v48;
        v54 = *((_QWORD *)v48 + 1);
        v55 = *((_QWORD *)v48 + 2);
        outlined copy of Data._Representation(v54, v55);
        *((_QWORD *)v47 + 1) = v54;
        *((_QWORD *)v47 + 2) = v55;
        v56 = v212;
        ((void (*)(char *, char *, uint64_t))v219[2])(&v47[*(int *)(v49 + 24)], &v48[*(int *)(v49 + 24)], v212);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
LABEL_28:
        v74 = (void (*)(uint64_t, char *, uint64_t))v215;
        goto LABEL_29;
      }
    }
    else
    {
      if (!v53)
      {
        *(_QWORD *)v47 = *(_QWORD *)v48;
        v107 = *((_QWORD *)v48 + 1);
        v106 = *((_QWORD *)v48 + 2);
        outlined copy of Data._Representation(v107, v106);
        v108 = *((_QWORD *)v47 + 1);
        v109 = *((_QWORD *)v47 + 2);
        *((_QWORD *)v47 + 1) = v107;
        *((_QWORD *)v47 + 2) = v106;
        outlined consume of Data._Representation(v108, v109);
        v110 = *(int *)(v49 + 24);
        v56 = v212;
        v74 = (void (*)(uint64_t, char *, uint64_t))v215;
        v215(&v47[v110], (uint64_t)&v48[v110], v212);
LABEL_29:
        v75 = *(int *)(v30 + 24);
        v28 += v75;
        v76 = &v29[v75];
        v30 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v77 = *(_QWORD *)(v30 - 8);
        v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
        v79 = v78(v28, 1, v30);
        v80 = v78((uint64_t)v76, 1, v30);
        if (v79)
        {
          if (!v80)
          {
            v217 = v77;
            v81 = (void (*)(uint64_t, char *, uint64_t))v219[2];
            v81(v28, v76, v56);
            v82 = *(int *)(v30 + 20);
            v83 = (_QWORD *)(v28 + v82);
            v84 = &v76[v82];
            v85 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v86 = *(_QWORD *)(v85 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
            {
              v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
            }
            else
            {
              *v83 = *(_QWORD *)v84;
              v123 = *(int *)(v85 + 20);
              v222 = (char *)v83 + v123;
              v124 = &v84[v123];
              swift_bridgeObjectRetain();
              v81((uint64_t)v222, v124, v56);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
            }
            v125 = *(int *)(v30 + 24);
            v126 = (char *)(v28 + v125);
            v127 = &v76[v125];
            v128 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v129 = *(_QWORD *)(v128 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
            {
              v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
              v131 = v217;
            }
            else
            {
              v223 = (void (*)(char *, char *, uint64_t))v81;
              v81((uint64_t)v126, v127, v212);
              v137 = *(int *)(v128 + 20);
              v138 = &v126[v137];
              v139 = &v127[v137];
              v140 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v141 = *(_QWORD *)(v140 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
              {
                v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
                v131 = v217;
              }
              else
              {
                v208 = v141;
                v223(v138, v139, v212);
                v160 = *(int *)(v140 + 20);
                v210 = v138;
                v206 = &v138[v160];
                v161 = &v139[v160];
                v162 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v204 = *(_QWORD *)(v162 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48))(v161, 1, v162))
                {
                  v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v206, v161, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v206 = *(_QWORD *)v161;
                  v178 = *(int *)(v162 + 20);
                  v201 = &v206[v178];
                  v179 = &v161[v178];
                  swift_bridgeObjectRetain();
                  v223(v201, v179, v212);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v204 + 56))(v206, 0, 1, v162);
                }
                v131 = v217;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v210, 0, 1, v140);
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
            }
            goto LABEL_81;
          }
          goto LABEL_35;
        }
        if (v80)
        {
          outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_35:
          v88 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_36:
          v43 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v88) - 8) + 64);
          v44 = (void *)v28;
          v45 = v76;
          goto LABEL_15;
        }
        v74(v28, v76, v56);
        v111 = *(int *)(v30 + 20);
        v112 = (char *)(v28 + v111);
        v113 = &v76[v111];
        v114 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v115 = *(_QWORD *)(v114 - 8);
        v116 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
        v117 = v116(v112, 1, v114);
        v118 = v116(v113, 1, v114);
        if (v117)
        {
          if (!v118)
          {
            *(_QWORD *)v112 = *(_QWORD *)v113;
            v119 = *(int *)(v114 + 20);
            v120 = &v112[v119];
            v121 = &v113[v119];
            v122 = (void (*)(char *, char *, uint64_t))v219[2];
            swift_bridgeObjectRetain();
            v122(v120, v121, v212);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
LABEL_56:
            v144 = (void (*)(uint64_t, char *, uint64_t))v215;
            goto LABEL_57;
          }
        }
        else
        {
          if (!v118)
          {
            *(_QWORD *)v112 = *(_QWORD *)v113;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v144 = (void (*)(uint64_t, char *, uint64_t))v215;
            v215(&v112[*(int *)(v114 + 20)], (uint64_t)&v113[*(int *)(v114 + 20)], v212);
LABEL_57:
            v145 = *(int *)(v30 + 24);
            v28 += v145;
            v29 = &v76[v145];
            v30 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v131 = *(_QWORD *)(v30 - 8);
            v146 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
            v147 = v146(v28, 1, v30);
            v148 = v146((uint64_t)v29, 1, v30);
            if (v147)
            {
              if (!v148)
              {
                v149 = (void (*)(uint64_t, char *, uint64_t))v219[2];
                v149(v28, v29, v212);
                v150 = *(int *)(v30 + 20);
                v151 = (char *)(v28 + v150);
                v152 = &v29[v150];
                v153 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v154 = *(_QWORD *)(v153 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
                {
                  v149((uint64_t)v151, v152, v212);
                  v174 = *(int *)(v153 + 20);
                  v224 = &v151[v174];
                  v175 = &v152[v174];
                  v176 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  v218 = *(_QWORD *)(v176 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48))(v175, 1, v176))
                  {
                    v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v224, v175, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
                  }
                  else
                  {
                    *(_QWORD *)v224 = *(_QWORD *)v175;
                    v181 = *(int *)(v176 + 20);
                    v211 = &v224[v181];
                    v182 = &v175[v181];
                    swift_bridgeObjectRetain();
                    v149((uint64_t)v211, v182, v212);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v218 + 56))(v224, 0, 1, v176);
                  }
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
                  goto LABEL_81;
                }
                v155 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                             - 8)
                                 + 64);
                v156 = v151;
                v157 = v152;
                goto LABEL_61;
              }
            }
            else
            {
              if (!v148)
              {
                v144(v28, v29, v212);
                v164 = *(int *)(v30 + 20);
                v28 += v164;
                v76 = &v29[v164];
                v30 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v131 = *(_QWORD *)(v30 - 8);
                v165 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
                v166 = v165(v28, 1, v30);
                v167 = v165((uint64_t)v76, 1, v30);
                if (v166)
                {
                  if (!v167)
                  {
                    v168 = (void (*)(uint64_t, char *, uint64_t))v219[2];
                    v168(v28, v76, v212);
                    v169 = *(int *)(v30 + 20);
                    v170 = (char *)(v28 + v169);
                    v171 = &v76[v169];
                    v172 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v173 = *(_QWORD *)(v172 - 8);
                    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(v171, 1, v172))
                    {
                      *(_QWORD *)v170 = *(_QWORD *)v171;
                      v195 = *(int *)(v172 + 20);
                      v225 = &v170[v195];
                      v196 = &v171[v195];
                      swift_bridgeObjectRetain();
                      v168((uint64_t)v225, v196, v212);
                      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v170, 0, 1, v172);
                      goto LABEL_81;
                    }
                    v155 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                 - 8)
                                     + 64);
                    v156 = v170;
                    v157 = v171;
LABEL_61:
                    memcpy(v156, v157, v155);
LABEL_81:
                    v65 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v131 + 56);
LABEL_82:
                    v65(v28, 0, 1, v30);
                    return v5;
                  }
                }
                else
                {
                  if (!v167)
                  {
                    v144(v28, v76, v212);
                    v183 = *(int *)(v30 + 20);
                    v184 = (_QWORD *)(v28 + v183);
                    v185 = &v76[v183];
                    v186 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v187 = *(_QWORD *)(v186 - 8);
                    v188 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v187 + 48);
                    v189 = v188((char *)v184, 1, v186);
                    v190 = v188(v185, 1, v186);
                    if (v189)
                    {
                      if (!v190)
                      {
                        *v184 = *(_QWORD *)v185;
                        v191 = *(int *)(v186 + 20);
                        v192 = (char *)v184 + v191;
                        v193 = &v185[v191];
                        v194 = (void (*)(char *, char *, uint64_t))v219[2];
                        swift_bridgeObjectRetain();
                        v194(v192, v193, v212);
                        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v187 + 56))((char *)v184, 0, 1, v186);
                        return v5;
                      }
                    }
                    else
                    {
                      if (!v190)
                      {
                        *v184 = *(_QWORD *)v185;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        v144((uint64_t)v184 + *(int *)(v186 + 20), &v185[*(int *)(v186 + 20)], v212);
                        return v5;
                      }
                      outlined destroy of AspireApiPECConfig((uint64_t)v184, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    v43 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    v44 = v184;
                    v45 = v185;
                    goto LABEL_15;
                  }
                  outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                v88 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_36;
              }
              outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireHeSerializedRelinKey);
            }
            v42 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
            goto LABEL_14;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v112, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
        goto LABEL_56;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v47, type metadata accessor for AMDPbEvaluationKeyMetadata);
    }
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    v56 = v212;
    goto LABEL_28;
  }
  outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AMDPbEvaluationKey);
LABEL_13:
  v42 = &demangling cache variable for type metadata for AMDPbEvaluationKey?;
LABEL_14:
  v43 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v42) - 8) + 64);
  v44 = (void *)v28;
  v45 = v29;
LABEL_15:
  memcpy(v44, v45, v43);
  return v5;
}

uint64_t initializeWithTake for AMDPbPIRQuery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *__dst;
  char *__dsta;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AspirePirEncryptedIndices(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((uint64_t)v12 + *(int *)(v14 + 24), (uint64_t)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for AMDPbEvaluationKey(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v69 = v21;
    v10((uint64_t)v18, (uint64_t)v19, v9);
    v23 = *(int *)(v20 + 20);
    v24 = &v18[v23];
    v25 = &v19[v23];
    v26 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
      v10((uint64_t)&v24[*(int *)(v26 + 24)], (uint64_t)&v25[*(int *)(v26 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = *(int *)(v20 + 24);
    v30 = &v18[v29];
    v31 = &v19[v29];
    v32 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      v35 = v69;
    }
    else
    {
      v67 = v33;
      v10((uint64_t)v30, (uint64_t)v31, v9);
      v36 = *(int *)(v32 + 20);
      v68 = v30;
      __dst = &v30[v36];
      v37 = &v31[v36];
      v38 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v37;
        v10((uint64_t)&__dst[*(int *)(v38 + 20)], (uint64_t)&v37[*(int *)(v38 + 20)], v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
      }
      v41 = *(int *)(v32 + 24);
      v42 = &v68[v41];
      v43 = &v31[v41];
      v44 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v64 = v45;
        v10((uint64_t)v42, (uint64_t)v43, v9);
        v47 = *(int *)(v44 + 20);
        v63 = v42;
        __dsta = &v42[v47];
        v48 = &v43[v47];
        v49 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v50 = *(_QWORD *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(__dsta, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
          v53 = v63;
          v52 = v64;
        }
        else
        {
          v61 = v50;
          v10((uint64_t)__dsta, (uint64_t)v48, v9);
          v62 = v49;
          v54 = *(int *)(v49 + 20);
          v55 = &__dsta[v54];
          v56 = &v48[v54];
          v57 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v60 = *(_QWORD *)(v57 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v56, 1, v57))
          {
            v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v55 = *(_QWORD *)v56;
            v10((uint64_t)&v55[*(int *)(v57 + 20)], (uint64_t)&v56[*(int *)(v57 + 20)], v9);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v55, 0, 1, v57);
          }
          v53 = v63;
          v52 = v64;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(__dsta, 0, 1, v62);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v44);
      }
      v35 = v69;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v68, 0, 1, v32);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

char *assignWithTake for AMDPbPIRQuery(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  int v28;
  int v29;
  void (*v30)(uint64_t, char *, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  size_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  int v67;
  int v68;
  void (*v69)(uint64_t, char *, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unsigned int (**v82)(const void *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (**v90)(const void *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(char *, uint64_t, uint64_t);
  int v101;
  int v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unsigned int (**v109)(_QWORD, uint64_t, uint64_t);
  size_t v110;
  void *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unsigned int (**v121)(const void *, uint64_t, uint64_t);
  uint64_t v122;
  void (**v123)(void *, _QWORD, uint64_t, uint64_t);
  uint64_t v124;
  void (*v125)(uint64_t, char *, uint64_t);
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t, uint64_t);
  int v128;
  int v129;
  void (*v130)(uint64_t, char *, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t, uint64_t, uint64_t);
  int v143;
  int v144;
  void (*v145)(uint64_t, char *, uint64_t);
  uint64_t v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(char *, uint64_t, uint64_t);
  int v161;
  int v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  char *v169;
  char *__dst;
  unsigned int (**__dsta)(const void *, uint64_t, uint64_t);
  unsigned int (**__dstb)(const void *, uint64_t, uint64_t);
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  void (*v179)(char *, char *, uint64_t);
  uint64_t v180;
  void (*v181)(char *, uint64_t, uint64_t);
  uint64_t *v182;
  void (**v183)(void *, _QWORD, uint64_t, uint64_t);
  char *v184;

  v5 = a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = a1[1];
  v7 = v5[2];
  *(_OWORD *)(v5 + 1) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v6, v7);
  v8 = a3[6];
  v9 = (char *)v5 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v177 = *(_QWORD *)(v11 - 8);
  v181 = *(void (**)(char *, uint64_t, uint64_t))(v177 + 40);
  v181(v9, v10, v11);
  v12 = a3[7];
  v13 = (char *)v5 + v12;
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for AspirePirEncryptedIndices(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      (*(void (**)(char *, char *, uint64_t))(v177 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
      v21 = (void (*)(uint64_t, char *, uint64_t))v181;
      goto LABEL_8;
    }
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  if (v19)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspirePirEncryptedIndices);
    goto LABEL_6;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  v21 = (void (*)(uint64_t, char *, uint64_t))v181;
  v181(&v13[*(int *)(v15 + 24)], (uint64_t)&v14[*(int *)(v15 + 24)], v11);
LABEL_8:
  v22 = a3[8];
  v23 = (uint64_t)v5 + v22;
  v24 = (char *)(a2 + v22);
  v25 = type metadata accessor for AMDPbEvaluationKey(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27((uint64_t)v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      v182 = v5;
      v30 = *(void (**)(uint64_t, char *, uint64_t))(v177 + 32);
      v30(v23, v24, v11);
      v31 = *(int *)(v25 + 20);
      v32 = (_QWORD *)(v23 + v31);
      v33 = &v24[v31];
      v34 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        *v32 = *(_QWORD *)v33;
        *(_OWORD *)(v32 + 1) = *(_OWORD *)(v33 + 8);
        v30((uint64_t)v32 + *(int *)(v34 + 24), &v33[*(int *)(v34 + 24)], v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v50 = *(int *)(v25 + 24);
      v51 = (char *)(v23 + v50);
      v52 = &v24[v50];
      v53 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        v5 = v182;
LABEL_72:
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        return (char *)v5;
      }
      v173 = v54;
      v30((uint64_t)v51, v52, v11);
      v56 = *(int *)(v53 + 20);
      v178 = v51;
      __dst = &v51[v56];
      v57 = &v52[v56];
      v58 = v11;
      v59 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v60 = *(_QWORD *)(v59 - 8);
      v176 = v58;
      v168 = (void (*)(char *, char *, uint64_t))v30;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v57, 1, v59))
      {
        v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(__dst, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v57;
        v30((uint64_t)&__dst[*(int *)(v59 + 20)], &v57[*(int *)(v59 + 20)], v58);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(__dst, 0, 1, v59);
      }
      v77 = *(int *)(v53 + 24);
      v78 = v178;
      v79 = &v178[v77];
      v80 = &v52[v77];
      v81 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v82 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v81 - 8);
      v5 = v182;
      if (v82[6](v80, 1, v81))
      {
        v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        __dsta = v82;
        v168(v79, v80, v176);
        v84 = *(int *)(v81 + 20);
        v85 = &v79[v84];
        v86 = &v80[v84];
        v87 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v88 = *(_QWORD *)(v87 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
        {
          v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
          v78 = v178;
          v5 = v182;
          v90 = __dsta;
        }
        else
        {
          v165 = v88;
          v168(v85, v86, v176);
          v113 = *(int *)(v87 + 20);
          v166 = v85;
          v164 = &v85[v113];
          v114 = &v86[v113];
          v115 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v163 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v114, 1, v115))
          {
            v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v164, v114, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v164 = *(_QWORD *)v114;
            v168(&v164[*(int *)(v115 + 20)], &v114[*(int *)(v115 + 20)], v176);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v164, 0, 1, v115);
          }
          v78 = v178;
          v5 = v182;
          v90 = __dsta;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v166, 0, 1, v87);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v90[7])(v79, 0, 1, v81);
      }
      v134 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v173 + 56);
LABEL_71:
      v134(v78, 0, 1, v53);
      goto LABEL_72;
    }
    goto LABEL_14;
  }
  if (!v29)
  {
    v175 = v11;
    v21(v23, v24, v11);
    v41 = *(int *)(v25 + 20);
    v42 = (_QWORD *)(v23 + v41);
    v43 = &v24[v41];
    v44 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
    v47 = v46((char *)v42, 1, v44);
    v48 = v46(v43, 1, v44);
    if (v47)
    {
      if (!v48)
      {
        *v42 = *(_QWORD *)v43;
        *(_OWORD *)(v42 + 1) = *(_OWORD *)(v43 + 8);
        v49 = v175;
        (*(void (**)(char *, char *, uint64_t))(v177 + 32))((char *)v42 + *(int *)(v44 + 24), &v43[*(int *)(v44 + 24)], v175);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
LABEL_29:
        v63 = (void (*)(uint64_t, char *, uint64_t))v181;
        goto LABEL_30;
      }
    }
    else
    {
      if (!v48)
      {
        v91 = *((_QWORD *)v43 + 2);
        v92 = v42[1];
        v93 = v42[2];
        *(_OWORD *)v42 = *(_OWORD *)v43;
        v42[2] = v91;
        outlined consume of Data._Representation(v92, v93);
        v94 = *(int *)(v44 + 24);
        v49 = v175;
        v63 = (void (*)(uint64_t, char *, uint64_t))v181;
        v181((char *)v42 + v94, (uint64_t)&v43[v94], v175);
LABEL_30:
        v64 = *(int *)(v25 + 24);
        v23 += v64;
        v65 = &v24[v64];
        v25 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v26 = *(_QWORD *)(v25 - 8);
        v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
        v67 = v66(v23, 1, v25);
        v68 = v66((uint64_t)v65, 1, v25);
        if (v67)
        {
          if (!v68)
          {
            v69 = *(void (**)(uint64_t, char *, uint64_t))(v177 + 32);
            v69(v23, v65, v49);
            v70 = *(int *)(v25 + 20);
            v71 = (_QWORD *)(v23 + v70);
            v72 = &v65[v70];
            v73 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v74 = *(_QWORD *)(v73 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
            {
              v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
            }
            else
            {
              *v71 = *(_QWORD *)v72;
              v69((uint64_t)v71 + *(int *)(v73 + 20), &v72[*(int *)(v73 + 20)], v175);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
            }
            v104 = (void (*)(char *, char *, uint64_t))v69;
            v105 = *(int *)(v25 + 24);
            v106 = (char *)(v23 + v105);
            v107 = &v65[v105];
            v108 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v109 = *(unsigned int (***)(_QWORD, uint64_t, uint64_t))(v108 - 8);
            if (!((unsigned int (**)(char *, uint64_t, uint64_t))v109)[6](v107, 1, v108))
            {
              v183 = (void (**)(void *, _QWORD, uint64_t, uint64_t))v109;
              v104(v106, v107, v175);
              v117 = *(int *)(v108 + 20);
              v179 = v104;
              v118 = &v106[v117];
              v119 = &v107[v117];
              v120 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v121 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v120 - 8);
              if (v121[6](v119, 1, v120))
              {
                v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
                v123 = v183;
              }
              else
              {
                __dstb = v121;
                v179(v118, v119, v175);
                v136 = *(int *)(v120 + 20);
                v174 = v118;
                v169 = &v118[v136];
                v137 = &v119[v136];
                v138 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v167 = *(_QWORD *)(v138 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v137, 1, v138))
                {
                  v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v169, v137, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v169 = *(_QWORD *)v137;
                  v179(&v169[*(int *)(v138 + 20)], &v137[*(int *)(v138 + 20)], v175);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v169, 0, 1, v138);
                }
                v123 = v183;
                ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v174, 0, 1, v120);
              }
              v123[7](v106, 0, 1, v108);
              goto LABEL_72;
            }
            v110 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                         - 8)
                             + 64);
            v111 = v106;
LABEL_50:
            v112 = v107;
LABEL_51:
            memcpy(v111, v112, v110);
            goto LABEL_72;
          }
          goto LABEL_36;
        }
        if (v68)
        {
          outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_36:
          v76 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
          goto LABEL_37;
        }
        v63(v23, v65, v49);
        v95 = *(int *)(v25 + 20);
        v96 = (char *)(v23 + v95);
        v97 = &v65[v95];
        v98 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v99 = *(_QWORD *)(v98 - 8);
        v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48);
        v101 = v100(v96, 1, v98);
        v102 = v100(v97, 1, v98);
        if (v101)
        {
          if (!v102)
          {
            *(_QWORD *)v96 = *(_QWORD *)v97;
            v103 = v175;
            (*(void (**)(char *, char *, uint64_t))(v177 + 32))(&v96[*(int *)(v98 + 20)], &v97[*(int *)(v98 + 20)], v175);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
LABEL_59:
            v125 = (void (*)(uint64_t, char *, uint64_t))v181;
            goto LABEL_60;
          }
        }
        else
        {
          if (!v102)
          {
            *(_QWORD *)v96 = *(_QWORD *)v97;
            swift_bridgeObjectRelease();
            v140 = *(int *)(v98 + 20);
            v103 = v175;
            v125 = (void (*)(uint64_t, char *, uint64_t))v181;
            v181(&v96[v140], (uint64_t)&v97[v140], v175);
LABEL_60:
            v126 = *(int *)(v25 + 24);
            v23 += v126;
            v24 = &v65[v126];
            v25 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v26 = *(_QWORD *)(v25 - 8);
            v127 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
            v128 = v127(v23, 1, v25);
            v129 = v127((uint64_t)v24, 1, v25);
            if (v128)
            {
              if (!v129)
              {
                v130 = *(void (**)(uint64_t, char *, uint64_t))(v177 + 32);
                v130(v23, v24, v103);
                v131 = *(int *)(v25 + 20);
                v78 = (char *)(v23 + v131);
                v107 = &v24[v131];
                v53 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v132 = v103;
                v133 = *(_QWORD *)(v53 - 8);
                if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v107, 1, v53))
                {
                  v130((uint64_t)v78, v107, v132);
                  v151 = *(int *)(v53 + 20);
                  v184 = &v78[v151];
                  v152 = &v107[v151];
                  v153 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  v180 = *(_QWORD *)(v153 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v180 + 48))(v152, 1, v153))
                  {
                    v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v184, v152, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
                  }
                  else
                  {
                    *(_QWORD *)v184 = *(_QWORD *)v152;
                    v130((uint64_t)&v184[*(int *)(v153 + 20)], &v152[*(int *)(v153 + 20)], v175);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v180 + 56))(v184, 0, 1, v153);
                  }
                  v134 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56);
                  goto LABEL_71;
                }
                v110 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?)
                                             - 8)
                                 + 64);
                v111 = v78;
                goto LABEL_50;
              }
            }
            else
            {
              if (!v129)
              {
                v125(v23, v24, v103);
                v141 = *(int *)(v25 + 20);
                v23 += v141;
                v65 = &v24[v141];
                v25 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v26 = *(_QWORD *)(v25 - 8);
                v142 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
                v143 = v142(v23, 1, v25);
                v144 = v142((uint64_t)v65, 1, v25);
                if (v143)
                {
                  if (!v144)
                  {
                    v145 = *(void (**)(uint64_t, char *, uint64_t))(v177 + 32);
                    v145(v23, v65, v103);
                    v146 = *(int *)(v25 + 20);
                    v147 = (_QWORD *)(v23 + v146);
                    v148 = &v65[v146];
                    v149 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v150 = *(_QWORD *)(v149 - 8);
                    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v148, 1, v149))
                    {
                      *v147 = *(_QWORD *)v148;
                      v145((uint64_t)v147 + *(int *)(v149 + 20), &v148[*(int *)(v149 + 20)], v103);
                      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v147, 0, 1, v149);
                      goto LABEL_72;
                    }
                    v110 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                 - 8)
                                     + 64);
                    v111 = v147;
                    v112 = v148;
                    goto LABEL_51;
                  }
                }
                else
                {
                  if (!v144)
                  {
                    v125(v23, v65, v103);
                    v155 = *(int *)(v25 + 20);
                    v156 = (char *)(v23 + v155);
                    v157 = &v65[v155];
                    v158 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v159 = *(_QWORD *)(v158 - 8);
                    v160 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v159 + 48);
                    v161 = v160(v156, 1, v158);
                    v162 = v160(v157, 1, v158);
                    if (v161)
                    {
                      if (!v162)
                      {
                        *(_QWORD *)v156 = *(_QWORD *)v157;
                        (*(void (**)(char *, char *, uint64_t))(v177 + 32))(&v156[*(int *)(v158 + 20)], &v157[*(int *)(v158 + 20)], v103);
                        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
                        return (char *)v5;
                      }
                    }
                    else
                    {
                      if (!v162)
                      {
                        *(_QWORD *)v156 = *(_QWORD *)v157;
                        swift_bridgeObjectRelease();
                        v125((uint64_t)&v156[*(int *)(v158 + 20)], &v157[*(int *)(v158 + 20)], v103);
                        return (char *)v5;
                      }
                      outlined destroy of AspireApiPECConfig((uint64_t)v156, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    v39 = v156;
                    v40 = v157;
                    goto LABEL_16;
                  }
                  outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                v76 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
LABEL_37:
                v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v76) - 8) + 64);
                v39 = (void *)v23;
                v40 = v65;
                goto LABEL_16;
              }
              outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AspireHeSerializedRelinKey);
            }
            v37 = &demangling cache variable for type metadata for AspireHeSerializedRelinKey?;
            goto LABEL_15;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v96, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
        v103 = v175;
        goto LABEL_59;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v42, type metadata accessor for AMDPbEvaluationKeyMetadata);
    }
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    v49 = v175;
    goto LABEL_29;
  }
  outlined destroy of AspireApiPECConfig(v23, type metadata accessor for AMDPbEvaluationKey);
LABEL_14:
  v37 = &demangling cache variable for type metadata for AMDPbEvaluationKey?;
LABEL_15:
  v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v37) - 8) + 64);
  v39 = (void *)v23;
  v40 = v24;
LABEL_16:
  memcpy(v39, v40, v38);
  return (char *)v5;
}

uint64_t getEnumTagSinglePayload for AMDPbPIRQuery()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C0BCB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPIRQuery()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C0BD9C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AMDPbPIRQuery(a1, a2, a3, MEMORY[0x24BEE0170] + 64, &lazy cache variable for type metadata for AspirePirEncryptedIndices?, (void (*)(uint64_t))type metadata accessor for AspirePirEncryptedIndices);
}

uint64_t getEnumTagSinglePayload for AMDPbPIRReply()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AMDPbPIRReply()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbPECQuery(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *__dst;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  void (*v107)(char *, char *, uint64_t);
  char *v108;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    v9 = a2[2];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    v10 = a3[6];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v15 = a3[7];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v104 = v19;
      *v16 = *v17;
      v16[1] = v17[1];
      v21 = *(int *)(v18 + 28);
      v22 = (char *)v16 + v21;
      v23 = (char *)v17 + v21;
      swift_bridgeObjectRetain();
      v106 = v14;
      v14(v22, v23, v13);
      v24 = *(int *)(v18 + 32);
      v25 = (char *)v16 + v24;
      v26 = (char *)v17 + v24;
      v27 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        v30 = v104;
        v14 = v106;
      }
      else
      {
        v99 = v13;
        v31 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v97 = *(_QWORD *)(v31 - 8);
        v101 = v28;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v26, 1, v31))
        {
          v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
          v13 = v99;
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v106(v25, v26, v99);
          swift_storeEnumTagMultiPayload();
          v33 = v31;
          v13 = v99;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v25, 0, 1, v33);
        }
        v30 = v104;
        v106(&v25[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v25, 0, 1, v27);
        v14 = v106;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v16, 0, 1, v18);
    }
    v34 = a3[8];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = type metadata accessor for AMDPbEvaluationKey(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v105 = v38;
      v14(v35, v36, v13);
      v40 = *(int *)(v37 + 20);
      v41 = &v35[v40];
      v42 = &v36[v40];
      v43 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v107 = v14;
        v46 = *((_QWORD *)v42 + 1);
        *(_QWORD *)v41 = *(_QWORD *)v42;
        v102 = v35;
        v47 = v13;
        v48 = *((_QWORD *)v42 + 2);
        outlined copy of Data._Representation(v46, v48);
        *((_QWORD *)v41 + 1) = v46;
        *((_QWORD *)v41 + 2) = v48;
        v14 = v107;
        v13 = v47;
        v35 = v102;
        v107(&v41[*(int *)(v43 + 24)], &v42[*(int *)(v43 + 24)], v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v49 = *(int *)(v37 + 24);
      v50 = &v35[v49];
      v51 = &v36[v49];
      v52 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v53 = *(_QWORD *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        v55 = v105;
      }
      else
      {
        v98 = v53;
        v103 = v35;
        v14(v50, v51, v13);
        v56 = *(int *)(v52 + 20);
        v108 = v50;
        v57 = &v50[v56];
        v58 = v14;
        v59 = &v51[v56];
        v60 = v13;
        v61 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v62 = *(_QWORD *)(v61 - 8);
        v100 = v60;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v59, 1, v61))
        {
          v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v57, v59, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v57 = *(_QWORD *)v59;
          v64 = *(int *)(v61 + 20);
          v95 = &v57[v64];
          v65 = &v59[v64];
          swift_bridgeObjectRetain();
          v58(v95, v65, v60);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v57, 0, 1, v61);
        }
        v66 = v108;
        v67 = *(int *)(v52 + 24);
        v68 = &v108[v67];
        v69 = &v51[v67];
        v70 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v71 = *(_QWORD *)(v70 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
        {
          v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
          v35 = v103;
        }
        else
        {
          v96 = v71;
          v58(v68, v69, v100);
          v73 = *(int *)(v70 + 20);
          v74 = &v68[v73];
          v75 = &v69[v73];
          v76 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v77 = *(_QWORD *)(v76 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
          {
            v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
            v35 = v103;
            v79 = v96;
            v66 = v108;
          }
          else
          {
            v92 = v77;
            v58(v74, v75, v100);
            v80 = *(int *)(v76 + 20);
            v93 = v74;
            __dst = &v74[v80];
            v81 = &v75[v80];
            v82 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v91 = *(_QWORD *)(v82 - 8);
            v83 = v81;
            v84 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48))(v81, 1, v82);
            v85 = v76;
            if (v84)
            {
              v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dst, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
            }
            else
            {
              *(_QWORD *)__dst = *v83;
              v87 = *(int *)(v82 + 20);
              v90 = &__dst[v87];
              v88 = (char *)v83 + v87;
              swift_bridgeObjectRetain();
              v58(v90, v88, v100);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v82);
            }
            v35 = v103;
            v79 = v96;
            v66 = v108;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v93, 0, 1, v85);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v68, 0, 1, v70);
        }
        v55 = v105;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v66, 0, 1, v52);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v35, 0, 1, v37);
    }
  }
  return a1;
}

uint64_t destroy for AMDPbPECQuery(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v26(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v26(v6 + *(int *)(v7 + 28), v5);
    v8 = v6 + *(int *)(v7 + 32);
    v9 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      v10 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v26(v8, v5);
      }
      v26(v8 + *(int *)(v9 + 20), v5);
    }
  }
  v11 = a1 + a2[8];
  v12 = type metadata accessor for AMDPbEvaluationKey(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    v26(v11, v5);
    v14 = v11 + *(int *)(v12 + 20);
    v15 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16));
      v26(v14 + *(int *)(v15 + 24), v5);
    }
    v16 = v11 + *(int *)(v12 + 24);
    v17 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17);
    if (!(_DWORD)result)
    {
      v26(v16, v5);
      v18 = v16 + *(int *)(v17 + 20);
      v19 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
      {
        swift_bridgeObjectRelease();
        v26(v18 + *(int *)(v19 + 20), v5);
      }
      v20 = v16 + *(int *)(v17 + 24);
      v21 = type metadata accessor for AspireHeSerializedRelinKey(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21);
      if (!(_DWORD)result)
      {
        v26(v20, v5);
        v22 = v20 + *(int *)(v21 + 20);
        v23 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23);
        if (!(_DWORD)result)
        {
          v26(v22, v5);
          v24 = v22 + *(int *)(v23 + 20);
          v25 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25);
          if (!(_DWORD)result)
          {
            swift_bridgeObjectRelease();
            return ((uint64_t (*)(uint64_t, uint64_t))v26)(v24 + *(int *)(v25 + 20), v5);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AMDPbPECQuery(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v87;
  uint64_t v88;
  char *__dst;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  void (*v104)(char *, char *, uint64_t);
  char *v105;

  v5 = a1;
  v6 = a2[1];
  *a1 = *a2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v6, v7);
  v5[1] = v6;
  v5[2] = v7;
  v8 = a3[6];
  v9 = (char *)v5 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (_QWORD *)((char *)v5 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v101 = v5;
    *v14 = *v15;
    v14[1] = v15[1];
    v19 = *(int *)(v16 + 28);
    v20 = (char *)v14 + v19;
    v21 = (char *)v15 + v19;
    swift_bridgeObjectRetain();
    v103 = v12;
    v12(v20, v21, v11);
    v22 = *(int *)(v16 + 32);
    v23 = (char *)v14 + v22;
    v24 = (char *)v15 + v22;
    v25 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      v5 = v101;
      v12 = v103;
    }
    else
    {
      v96 = v11;
      v28 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v94 = *(_QWORD *)(v28 - 8);
      v98 = v26;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v24, 1, v28))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        v11 = v96;
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v103(v23, v24, v96);
        swift_storeEnumTagMultiPayload();
        v30 = v28;
        v11 = v96;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v23, 0, 1, v30);
      }
      v5 = v101;
      v103(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v23, 0, 1, v25);
      v12 = v103;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v31 = a3[8];
  v32 = (char *)v5 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for AMDPbEvaluationKey(0);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v102 = v35;
    v12(v32, v33, v11);
    v37 = *(int *)(v34 + 20);
    v38 = &v32[v37];
    v39 = &v33[v37];
    v40 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v104 = v12;
      v43 = *((_QWORD *)v39 + 1);
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v99 = v32;
      v44 = v11;
      v45 = *((_QWORD *)v39 + 2);
      outlined copy of Data._Representation(v43, v45);
      *((_QWORD *)v38 + 1) = v43;
      *((_QWORD *)v38 + 2) = v45;
      v12 = v104;
      v11 = v44;
      v32 = v99;
      v104(&v38[*(int *)(v40 + 24)], &v39[*(int *)(v40 + 24)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v46 = *(int *)(v34 + 24);
    v47 = &v32[v46];
    v48 = &v33[v46];
    v49 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      v52 = v102;
    }
    else
    {
      v95 = v50;
      v100 = v32;
      v12(v47, v48, v11);
      v53 = *(int *)(v49 + 20);
      v105 = v47;
      v54 = &v47[v53];
      v55 = v12;
      v56 = &v48[v53];
      v57 = v11;
      v58 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v59 = *(_QWORD *)(v58 - 8);
      v97 = v57;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v56, 1, v58))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v54, v56, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v54 = *(_QWORD *)v56;
        v61 = *(int *)(v58 + 20);
        v92 = &v54[v61];
        v62 = &v56[v61];
        swift_bridgeObjectRetain();
        v55(v92, v62, v57);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v54, 0, 1, v58);
      }
      v63 = v105;
      v64 = *(int *)(v49 + 24);
      v65 = &v105[v64];
      v66 = &v48[v64];
      v67 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v68 = *(_QWORD *)(v67 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
      {
        v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        v32 = v100;
      }
      else
      {
        v93 = v68;
        v55(v65, v66, v97);
        v70 = *(int *)(v67 + 20);
        v71 = &v65[v70];
        v72 = &v66[v70];
        v73 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v74 = *(_QWORD *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
        {
          v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
          v32 = v100;
          v76 = v93;
          v63 = v105;
        }
        else
        {
          v90 = v74;
          v55(v71, v72, v97);
          v77 = *(int *)(v73 + 20);
          v91 = v71;
          __dst = &v71[v77];
          v78 = &v72[v77];
          v79 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v88 = *(_QWORD *)(v79 - 8);
          v80 = v78;
          v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48))(v78, 1, v79);
          v82 = v73;
          if (v81)
          {
            v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(__dst, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__dst = *v80;
            v84 = *(int *)(v79 + 20);
            v87 = &__dst[v84];
            v85 = (char *)v80 + v84;
            swift_bridgeObjectRetain();
            v55(v87, v85, v97);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v79);
          }
          v32 = v100;
          v76 = v93;
          v63 = v105;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v91, 0, 1, v82);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v65, 0, 1, v67);
      }
      v52 = v102;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v63, 0, 1, v49);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v32, 0, 1, v34);
  }
  return v5;
}

_QWORD *assignWithCopy for AMDPbPECQuery(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  int v57;
  int v58;
  void (*v59)(uint64_t, char *, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(char *, uint64_t, uint64_t);
  int v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  int v106;
  int v107;
  void (*v108)(uint64_t, char *, uint64_t);
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(char *, uint64_t, uint64_t);
  int v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(char *, uint64_t, uint64_t);
  int v148;
  int v149;
  uint64_t v150;
  char *v151;
  char *v152;
  void (*v153)(char *, char *, uint64_t);
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t (*v180)(uint64_t, uint64_t, uint64_t);
  int v181;
  int v182;
  void (*v183)(uint64_t, char *, uint64_t);
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(char *, char *, uint64_t);
  uint64_t v191;
  char *v192;
  void (*v193)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t (*v202)(uint64_t, uint64_t, uint64_t);
  int v203;
  int v204;
  void (*v205)(uint64_t, char *, uint64_t);
  uint64_t v206;
  _QWORD *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t (*v227)(char *, uint64_t, uint64_t);
  int v228;
  int v229;
  uint64_t v230;
  char *v231;
  char *v232;
  void (*v233)(char *, char *, uint64_t);
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *__dst;
  uint64_t v239;
  char *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(char *, char *, uint64_t);
  void (*v246)(char *, char *, uint64_t);
  char *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  int *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void (*v259)(char *, char *, uint64_t);
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  _QWORD *v264;
  char *v265;
  void (*v266)(char *, char *, uint64_t);
  char *v267;
  char *v268;

  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[1];
  v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  v8 = v5[1];
  v9 = v5[2];
  v5[1] = v6;
  v5[2] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a3[6];
  v11 = (char *)v5 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v264 = *(_QWORD **)(v13 - 8);
  v259 = (void (*)(char *, char *, uint64_t))v264[3];
  v259(v11, v12, v13);
  v14 = a3[7];
  v15 = (uint64_t)v5 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19((uint64_t)v16, 1, v17);
  if (!v20)
  {
    if (v21)
    {
      outlined destroy of AspireApiPECConfig(v15, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      goto LABEL_7;
    }
    *(_DWORD *)v15 = *(_DWORD *)v16;
    *(_DWORD *)(v15 + 4) = *((_DWORD *)v16 + 1);
    *(_QWORD *)(v15 + 8) = *((_QWORD *)v16 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v259((char *)(v15 + *(int *)(v17 + 28)), &v16[*(int *)(v17 + 28)], v13);
    v36 = *(int *)(v17 + 32);
    v37 = (char *)(v15 + v36);
    v38 = &v16[v36];
    v39 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
    v42 = v41(v37, 1, v39);
    v43 = v41(v38, 1, v39);
    if (v42)
    {
      if (!v43)
      {
        v248 = v5;
        v44 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v45 = *(_QWORD *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v38, 1, v44))
        {
          v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
          v47 = (void (*)(char *, char *, uint64_t))v264[2];
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v47 = (void (*)(char *, char *, uint64_t))v264[2];
          v47(v37, v38, v13);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v37, 0, 1, v44);
        }
        v5 = v248;
        v47(&v37[*(int *)(v39 + 20)], &v38[*(int *)(v39 + 20)], v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
        goto LABEL_21;
      }
      goto LABEL_17;
    }
    if (v43)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v37, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_17:
      v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                  - 8)
                      + 64);
      v34 = v37;
      v35 = v38;
      goto LABEL_8;
    }
    v132 = v13;
    v133 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v255 = *(_QWORD *)(v133 - 8);
    v134 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v255 + 48);
    v135 = v134(v37, 1, v133);
    v136 = v134(v38, 1, v133);
    if (v135)
    {
      if (!v136)
      {
        swift_getEnumCaseMultiPayload();
        ((void (*)(char *, char *, uint64_t))v264[2])(v37, v38, v132);
        v13 = v132;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v255 + 56))(v37, 0, 1, v133);
        goto LABEL_84;
      }
      v13 = v132;
    }
    else
    {
      v13 = v132;
      if (!v136)
      {
        v190 = v259;
        if (v5 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v37, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          ((void (*)(char *, char *, uint64_t))v264[2])(v37, v38, v13);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_85;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v37, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
LABEL_84:
    v190 = v259;
LABEL_85:
    v190(&v37[*(int *)(v39 + 20)], &v38[*(int *)(v39 + 20)], v13);
    goto LABEL_21;
  }
  if (v21)
  {
LABEL_7:
    v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?)
                                - 8)
                    + 64);
    v34 = (void *)v15;
    v35 = v16;
LABEL_8:
    memcpy(v34, v35, v33);
    goto LABEL_21;
  }
  v253 = a3;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_DWORD *)(v15 + 4) = *((_DWORD *)v16 + 1);
  *(_QWORD *)(v15 + 8) = *((_QWORD *)v16 + 1);
  v22 = *(int *)(v17 + 28);
  v23 = v15 + v22;
  v24 = v13;
  v25 = &v16[v22];
  v26 = (void (*)(uint64_t, char *, uint64_t))v264[2];
  swift_bridgeObjectRetain();
  v256 = v24;
  v26(v23, v25, v24);
  v27 = *(int *)(v17 + 32);
  v28 = (char *)(v15 + v27);
  v29 = &v16[v27];
  v30 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v245 = (void (*)(char *, char *, uint64_t))v26;
    v249 = v5;
    v48 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v29, 1, v48))
    {
      v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v245(v28, v29, v256);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v28, 0, 1, v48);
    }
    v5 = v249;
    v245(&v28[*(int *)(v30 + 20)], &v29[*(int *)(v30 + 20)], v256);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  a3 = v253;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  v13 = v256;
LABEL_21:
  v51 = a3[8];
  v52 = (uint64_t)v5 + v51;
  v53 = (char *)a2 + v51;
  v54 = type metadata accessor for AMDPbEvaluationKey(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56((uint64_t)v53, 1, v54);
  if (v57)
  {
    if (!v58)
    {
      v59 = (void (*)(uint64_t, char *, uint64_t))v264[2];
      v59(v52, v53, v13);
      v60 = *(int *)(v54 + 20);
      v265 = (char *)v52;
      v61 = (_QWORD *)(v52 + v60);
      v62 = &v53[v60];
      v63 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        *v61 = *(_QWORD *)v62;
        v258 = v13;
        v260 = v55;
        v82 = v5;
        v83 = *((_QWORD *)v62 + 1);
        v84 = *((_QWORD *)v62 + 2);
        outlined copy of Data._Representation(v83, v84);
        v61[1] = v83;
        v61[2] = v84;
        v5 = v82;
        v13 = v258;
        v55 = v260;
        v59((uint64_t)v61 + *(int *)(v63 + 24), &v62[*(int *)(v63 + 24)], v258);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      v85 = *(int *)(v54 + 24);
      v86 = v265;
      v87 = &v265[v85];
      v88 = &v53[v85];
      v89 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v90 = *(_QWORD *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        v250 = v5;
        v254 = v90;
        v261 = v55;
        v59((uint64_t)v87, v88, v13);
        v92 = *(int *)(v89 + 20);
        v93 = &v87[v92];
        v94 = v13;
        v95 = &v88[v92];
        v96 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v97 = *(_QWORD *)(v96 - 8);
        v246 = (void (*)(char *, char *, uint64_t))v59;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
        {
          v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v93, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v93 = *(_QWORD *)v95;
          v116 = *(int *)(v96 + 20);
          v242 = &v93[v116];
          v117 = &v95[v116];
          swift_bridgeObjectRetain();
          v59((uint64_t)v242, v117, v94);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v93, 0, 1, v96);
        }
        v118 = *(int *)(v89 + 24);
        v119 = &v87[v118];
        v120 = &v88[v118];
        v121 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v122 = *(_QWORD *)(v121 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
        {
          v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
          v5 = v250;
          v55 = v261;
        }
        else
        {
          v243 = v122;
          v59((uint64_t)v119, v120, v94);
          v124 = *(int *)(v121 + 20);
          v125 = &v119[v124];
          v126 = v94;
          v127 = &v120[v124];
          v128 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v129 = *(_QWORD *)(v128 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
          {
            v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v125, v127, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
            v55 = v261;
            v131 = v243;
          }
          else
          {
            v239 = v129;
            v246(v125, v127, v126);
            v166 = *(int *)(v128 + 20);
            v241 = v125;
            __dst = &v125[v166];
            v167 = &v127[v166];
            v168 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v237 = *(_QWORD *)(v168 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v237 + 48))(v167, 1, v168))
            {
              v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dst, v167, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
            }
            else
            {
              *(_QWORD *)__dst = *(_QWORD *)v167;
              v191 = *(int *)(v168 + 20);
              v236 = &__dst[v191];
              v192 = &v167[v191];
              swift_bridgeObjectRetain();
              v246(v236, v192, v126);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v237 + 56))(__dst, 0, 1, v168);
            }
            v55 = v261;
            v131 = v243;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v241, 0, 1, v128);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v119, 0, 1, v121);
          v5 = v250;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v254 + 56))(v87, 0, 1, v89);
        v86 = v265;
      }
      v193 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56);
      v194 = (uint64_t)v86;
      v195 = v54;
      goto LABEL_91;
    }
    goto LABEL_27;
  }
  if (!v58)
  {
    v257 = v13;
    v259((char *)v52, v53, v13);
    v69 = *(int *)(v54 + 20);
    v70 = v52;
    v71 = (char *)(v52 + v69);
    v72 = &v53[v69];
    v73 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v74 = *(_QWORD *)(v73 - 8);
    v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
    v76 = v75(v71, 1, v73);
    v77 = v75(v72, 1, v73);
    if (v76)
    {
      if (!v77)
      {
        *(_QWORD *)v71 = *(_QWORD *)v72;
        v78 = v5;
        v79 = *((_QWORD *)v72 + 1);
        v80 = *((_QWORD *)v72 + 2);
        outlined copy of Data._Representation(v79, v80);
        *((_QWORD *)v71 + 1) = v79;
        *((_QWORD *)v71 + 2) = v80;
        v5 = v78;
        v81 = v257;
        ((void (*)(char *, char *, uint64_t))v264[2])(&v71[*(int *)(v73 + 24)], &v72[*(int *)(v73 + 24)], v257);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        goto LABEL_41;
      }
    }
    else
    {
      if (!v77)
      {
        *(_QWORD *)v71 = *(_QWORD *)v72;
        v137 = v5;
        v138 = *((_QWORD *)v72 + 1);
        v139 = *((_QWORD *)v72 + 2);
        outlined copy of Data._Representation(v138, v139);
        v140 = *((_QWORD *)v71 + 1);
        v141 = *((_QWORD *)v71 + 2);
        *((_QWORD *)v71 + 1) = v138;
        *((_QWORD *)v71 + 2) = v139;
        v5 = v137;
        outlined consume of Data._Representation(v140, v141);
        v81 = v257;
        v259(&v71[*(int *)(v73 + 24)], &v72[*(int *)(v73 + 24)], v257);
LABEL_41:
        v100 = *(int *)(v54 + 24);
        v101 = v70 + v100;
        v102 = &v53[v100];
        v103 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v104 = *(_QWORD *)(v103 - 8);
        v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
        v106 = v105(v101, 1, v103);
        v107 = v105((uint64_t)v102, 1, v103);
        if (v106)
        {
          if (!v107)
          {
            v262 = v104;
            v108 = (void (*)(uint64_t, char *, uint64_t))v264[2];
            v108(v101, v102, v81);
            v109 = *(int *)(v103 + 20);
            v110 = (_QWORD *)(v101 + v109);
            v111 = &v102[v109];
            v112 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v113 = *(_QWORD *)(v112 - 8);
            v266 = (void (*)(char *, char *, uint64_t))v108;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
            {
              v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
            }
            else
            {
              *v110 = *(_QWORD *)v111;
              v156 = *(int *)(v112 + 20);
              v157 = (char *)v110 + v156;
              v158 = &v111[v156];
              swift_bridgeObjectRetain();
              v159 = v157;
              v81 = v257;
              v108((uint64_t)v159, v158, v257);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
            }
            v160 = *(int *)(v103 + 24);
            v161 = (char *)(v101 + v160);
            v162 = &v102[v160];
            v163 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v164 = *(_QWORD *)(v163 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
            {
              v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
            }
            else
            {
              v251 = v5;
              v108((uint64_t)v161, v162, v81);
              v170 = *(int *)(v163 + 20);
              v171 = &v161[v170];
              v172 = &v162[v170];
              v173 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v174 = *(_QWORD *)(v173 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v172, 1, v173))
              {
                v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
              }
              else
              {
                v266(v171, v172, v81);
                v197 = *(int *)(v173 + 20);
                v247 = &v171[v197];
                v198 = &v172[v197];
                v199 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v244 = *(_QWORD *)(v199 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v244 + 48))(v198, 1, v199))
                {
                  v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v247, v198, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v247 = *(_QWORD *)v198;
                  v218 = *(int *)(v199 + 20);
                  v240 = &v247[v218];
                  v219 = &v198[v218];
                  swift_bridgeObjectRetain();
                  v266(v240, v219, v257);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v244 + 56))(v247, 0, 1, v199);
                }
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v174 + 56))(v171, 0, 1, v173);
              }
              v5 = v251;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
            }
            v193 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v262 + 56);
            goto LABEL_108;
          }
          goto LABEL_47;
        }
        if (v107)
        {
          outlined destroy of AspireApiPECConfig(v101, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_47:
          v115 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_48:
          v66 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v115) - 8) + 64);
          v67 = (void *)v101;
          v68 = v102;
          goto LABEL_29;
        }
        v259((char *)v101, v102, v81);
        v142 = *(int *)(v103 + 20);
        v143 = (char *)(v101 + v142);
        v144 = &v102[v142];
        v145 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v146 = *(_QWORD *)(v145 - 8);
        v147 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v146 + 48);
        v148 = v147(v143, 1, v145);
        v149 = v147(v144, 1, v145);
        if (v148)
        {
          if (!v149)
          {
            *(_QWORD *)v143 = *(_QWORD *)v144;
            v150 = *(int *)(v145 + 20);
            v151 = &v143[v150];
            v152 = &v144[v150];
            v153 = (void (*)(char *, char *, uint64_t))v264[2];
            swift_bridgeObjectRetain();
            v154 = v151;
            v155 = v257;
            v153(v154, v152, v257);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
            goto LABEL_76;
          }
        }
        else
        {
          if (!v149)
          {
            *(_QWORD *)v143 = *(_QWORD *)v144;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v155 = v257;
            v259(&v143[*(int *)(v145 + 20)], &v144[*(int *)(v145 + 20)], v257);
LABEL_76:
            v178 = *(int *)(v103 + 24);
            v101 += v178;
            v53 = &v102[v178];
            v103 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v179 = *(_QWORD *)(v103 - 8);
            v180 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48);
            v181 = v180(v101, 1, v103);
            v182 = v180((uint64_t)v53, 1, v103);
            if (v181)
            {
              if (!v182)
              {
                v252 = v5;
                v183 = (void (*)(uint64_t, char *, uint64_t))v264[2];
                v183(v101, v53, v155);
                v184 = *(int *)(v103 + 20);
                v185 = (char *)(v101 + v184);
                v186 = &v53[v184];
                v187 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v188 = *(_QWORD *)(v187 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48))(v186, 1, v187))
                {
                  v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                  memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
                  v5 = v252;
                }
                else
                {
                  v183((uint64_t)v185, v186, v155);
                  v213 = *(int *)(v187 + 20);
                  v267 = &v185[v213];
                  v214 = &v186[v213];
                  v215 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  v216 = *(_QWORD *)(v215 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v216 + 48))(v214, 1, v215))
                  {
                    v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v267, v214, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
                  }
                  else
                  {
                    *(_QWORD *)v267 = *(_QWORD *)v214;
                    v220 = *(int *)(v215 + 20);
                    v263 = &v267[v220];
                    v221 = &v214[v220];
                    swift_bridgeObjectRetain();
                    v183((uint64_t)v263, v221, v257);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v267, 0, 1, v215);
                  }
                  v5 = v252;
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v188 + 56))(v185, 0, 1, v187);
                }
                goto LABEL_114;
              }
            }
            else
            {
              if (!v182)
              {
                v259((char *)v101, v53, v155);
                v201 = *(int *)(v103 + 20);
                v101 += v201;
                v102 = &v53[v201];
                v103 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v179 = *(_QWORD *)(v103 - 8);
                v202 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48);
                v203 = v202(v101, 1, v103);
                v204 = v202((uint64_t)v102, 1, v103);
                if (v203)
                {
                  if (!v204)
                  {
                    v205 = (void (*)(uint64_t, char *, uint64_t))v264[2];
                    v205(v101, v102, v155);
                    v206 = *(int *)(v103 + 20);
                    v207 = (_QWORD *)(v101 + v206);
                    v208 = &v102[v206];
                    v209 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v210 = v155;
                    v211 = *(_QWORD *)(v209 - 8);
                    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48))(v208, 1, v209))
                    {
                      v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                      memcpy(v207, v208, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
                    }
                    else
                    {
                      *v207 = *(_QWORD *)v208;
                      v234 = *(int *)(v209 + 20);
                      v268 = (char *)v207 + v234;
                      v235 = &v208[v234];
                      swift_bridgeObjectRetain();
                      v205((uint64_t)v268, v235, v210);
                      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v211 + 56))(v207, 0, 1, v209);
                    }
LABEL_114:
                    v193 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v179 + 56);
LABEL_108:
                    v194 = v101;
                    v195 = v103;
LABEL_91:
                    v193(v194, 0, 1, v195);
                    return v5;
                  }
                }
                else
                {
                  if (!v204)
                  {
                    v259((char *)v101, v102, v155);
                    v222 = *(int *)(v103 + 20);
                    v223 = (char *)(v101 + v222);
                    v224 = &v102[v222];
                    v225 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v226 = *(_QWORD *)(v225 - 8);
                    v227 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v226 + 48);
                    v228 = v227(v223, 1, v225);
                    v229 = v227(v224, 1, v225);
                    if (v228)
                    {
                      if (!v229)
                      {
                        *(_QWORD *)v223 = *(_QWORD *)v224;
                        v230 = *(int *)(v225 + 20);
                        v231 = &v223[v230];
                        v232 = &v224[v230];
                        v233 = (void (*)(char *, char *, uint64_t))v264[2];
                        swift_bridgeObjectRetain();
                        v233(v231, v232, v155);
                        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v226 + 56))(v223, 0, 1, v225);
                        return v5;
                      }
                    }
                    else
                    {
                      if (!v229)
                      {
                        *(_QWORD *)v223 = *(_QWORD *)v224;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        v259(&v223[*(int *)(v225 + 20)], &v224[*(int *)(v225 + 20)], v155);
                        return v5;
                      }
                      outlined destroy of AspireApiPECConfig((uint64_t)v223, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    v66 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    v67 = v223;
                    v68 = v224;
                    goto LABEL_29;
                  }
                  outlined destroy of AspireApiPECConfig(v101, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                v115 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_48;
              }
              outlined destroy of AspireApiPECConfig(v101, type metadata accessor for AspireHeSerializedRelinKey);
            }
            v66 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                        - 8)
                            + 64);
            v67 = (void *)v101;
            goto LABEL_28;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v143, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
        v155 = v257;
        goto LABEL_76;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v71, type metadata accessor for AMDPbEvaluationKeyMetadata);
    }
    v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    v81 = v257;
    goto LABEL_41;
  }
  outlined destroy of AspireApiPECConfig(v52, type metadata accessor for AMDPbEvaluationKey);
LABEL_27:
  v66 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?)
                              - 8)
                  + 64);
  v67 = (void *)v52;
LABEL_28:
  v68 = v53;
LABEL_29:
  memcpy(v67, v68, v66);
  return v5;
}

uint64_t initializeWithTake for AMDPbPECQuery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unsigned int (**v57)(const void *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (**v65)(const void *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *__dst;
  unsigned int (**__dsta)(const void *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;

  v5 = a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_QWORD *)(v5 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v86 = v5;
    v88 = v9;
    *v12 = *v13;
    v12[1] = v13[1];
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    v17 = *(int *)(v14 + 32);
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    v20 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      v5 = v86;
      v9 = v88;
    }
    else
    {
      v82 = v21;
      v84 = v10;
      v23 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v10 = v84;
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v84((uint64_t)v18, (uint64_t)v19, v88);
        swift_storeEnumTagMultiPayload();
        v26 = v23;
        v10 = v84;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v26);
      }
      v5 = v86;
      v10((uint64_t)&v18[*(int *)(v20 + 20)], (uint64_t)&v19[*(int *)(v20 + 20)], v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v18, 0, 1, v20);
      v9 = v88;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[8];
  v28 = (char *)(v5 + v27);
  v29 = (char *)(a2 + v27);
  v30 = type metadata accessor for AMDPbEvaluationKey(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v89 = v31;
    v10((uint64_t)v28, (uint64_t)v29, v9);
    v33 = *(int *)(v30 + 20);
    v34 = &v28[v33];
    v35 = &v29[v33];
    v36 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_OWORD *)(v34 + 8) = *(_OWORD *)(v35 + 8);
      v10((uint64_t)&v34[*(int *)(v36 + 24)], (uint64_t)&v35[*(int *)(v36 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    v39 = *(int *)(v30 + 24);
    v40 = &v28[v39];
    v41 = &v29[v39];
    v42 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      v45 = v89;
    }
    else
    {
      v83 = v43;
      v10((uint64_t)v40, (uint64_t)v41, v9);
      v46 = *(int *)(v42 + 20);
      v87 = v40;
      __dst = &v40[v46];
      v47 = &v41[v46];
      v48 = v10;
      v49 = type metadata accessor for AspireHeSerializedGaloisKey(0);
      v50 = *(_QWORD *)(v49 - 8);
      v85 = (void (*)(char *, char *, uint64_t))v48;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v47, 1, v49))
      {
        v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(__dst, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v47;
        v48((uint64_t)&__dst[*(int *)(v49 + 20)], (uint64_t)&v47[*(int *)(v49 + 20)], v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v49);
      }
      v52 = v87;
      v53 = *(int *)(v42 + 24);
      v54 = &v87[v53];
      v55 = &v41[v53];
      v56 = type metadata accessor for AspireHeSerializedRelinKey(0);
      v57 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v56 - 8);
      if (v57[6](v55, 1, v56))
      {
        v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        __dsta = v57;
        v85(v54, v55, v9);
        v59 = *(int *)(v56 + 20);
        v79 = v54;
        v60 = &v54[v59];
        v61 = &v55[v59];
        v62 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
        v63 = *(_QWORD *)(v62 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
          memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
          v52 = v87;
          v66 = v79;
          v65 = __dsta;
        }
        else
        {
          v77 = v63;
          v85(v60, v61, v9);
          v67 = *(int *)(v62 + 20);
          v78 = v60;
          v76 = &v60[v67];
          v68 = &v61[v67];
          v69 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
          v75 = *(_QWORD *)(v69 - 8);
          v70 = v68;
          v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48))(v68, 1, v69);
          v72 = v62;
          if (v71)
          {
            v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
            memcpy(v76, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v76 = *(_QWORD *)v70;
            v85(&v76[*(int *)(v69 + 20)], &v70[*(int *)(v69 + 20)], v9);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v76, 0, 1, v69);
          }
          v52 = v87;
          v66 = v79;
          v65 = __dsta;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v78, 0, 1, v72);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v65[7])(v66, 0, 1, v56);
      }
      v45 = v89;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v52, 0, 1, v42);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v28, 0, 1, v30);
  }
  return v5;
}

_QWORD *assignWithTake for AMDPbPECQuery(_QWORD *a1, uint64_t a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  int v52;
  int v53;
  void (*v54)(uint64_t, char *, uint64_t);
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  void *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  int v93;
  int v94;
  void (*v95)(uint64_t, char *, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(char *, uint64_t, uint64_t);
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(char *, uint64_t, uint64_t);
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t, uint64_t, uint64_t);
  int v159;
  int v160;
  void (*v161)(uint64_t, char *, uint64_t);
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(uint64_t, uint64_t, uint64_t);
  int v178;
  int v179;
  void (*v180)(uint64_t, char *, uint64_t);
  uint64_t v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(char *, uint64_t, uint64_t);
  int v198;
  int v199;
  uint64_t v200;
  char *__dst;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  void (*v205)(char *, char *, uint64_t);
  uint64_t v206;
  char *v207;
  uint64_t v208;
  void (*v209)(char *, char *, uint64_t);
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(char *, uint64_t, uint64_t);
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  char *v225;
  void (*v226)(char *, char *, uint64_t);
  char *v227;

  v5 = a1;
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = v5[1];
  v7 = v5[2];
  *(_OWORD *)(v5 + 1) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v6, v7);
  v8 = a3[6];
  v9 = (char *)v5 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v224 = *(_QWORD **)(v11 - 8);
  v221 = (void (*)(char *, uint64_t, uint64_t))v224[5];
  v221(v9, v10, v11);
  v12 = a3[7];
  v13 = (char *)v5 + v12;
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      goto LABEL_7;
    }
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
    swift_bridgeObjectRelease();
    v221(&v13[*(int *)(v15 + 28)], (uint64_t)&v14[*(int *)(v15 + 28)], v11);
    v30 = *(int *)(v15 + 32);
    v31 = &v13[v30];
    v32 = &v14[v30];
    v33 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
    v36 = v35(v31, 1, v33);
    v37 = v35(v32, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        v210 = v5;
        v38 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v39 = *(_QWORD *)(v38 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v32, 1, v38))
        {
          v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          v41 = (void (*)(char *, char *, uint64_t))v224[4];
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v41 = (void (*)(char *, char *, uint64_t))v224[4];
          v41(v31, v32, v11);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v31, 0, 1, v38);
        }
        v5 = v210;
        v41(&v31[*(int *)(v33 + 20)], &v32[*(int *)(v33 + 20)], v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
        goto LABEL_21;
      }
      goto LABEL_17;
    }
    if (v37)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_17:
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                  - 8)
                      + 64);
      v28 = v31;
      v29 = v32;
      goto LABEL_8;
    }
    v119 = v11;
    v120 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v217 = *(_QWORD *)(v120 - 8);
    v121 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v217 + 48);
    v122 = v121(v31, 1, v120);
    v123 = v121(v32, 1, v120);
    if (v122)
    {
      if (!v123)
      {
        swift_getEnumCaseMultiPayload();
        ((void (*)(char *, char *, uint64_t))v224[4])(v31, v32, v119);
        v11 = v119;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v31, 0, 1, v120);
        goto LABEL_84;
      }
      v11 = v119;
    }
    else
    {
      v11 = v119;
      if (!v123)
      {
        v168 = (void (*)(char *, char *, uint64_t))v221;
        if (v5 != (_QWORD *)a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          ((void (*)(char *, char *, uint64_t))v224[4])(v31, v32, v11);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_85;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v31, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
LABEL_84:
    v168 = (void (*)(char *, char *, uint64_t))v221;
LABEL_85:
    v168(&v31[*(int *)(v33 + 20)], &v32[*(int *)(v33 + 20)], v11);
    goto LABEL_21;
  }
  if (v19)
  {
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?)
                                - 8)
                    + 64);
    v28 = v13;
    v29 = v14;
LABEL_8:
    memcpy(v28, v29, v27);
    goto LABEL_21;
  }
  v215 = a3;
  v219 = v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  v20 = (void (*)(char *, char *, uint64_t))v224[4];
  v20(&v13[*(int *)(v15 + 28)], &v14[*(int *)(v15 + 28)], v11);
  v21 = *(int *)(v15 + 32);
  v22 = &v13[v21];
  v23 = &v14[v21];
  v24 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v205 = v20;
    v208 = v25;
    v211 = v5;
    v42 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v23, 1, v42))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      v45 = v22;
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v45 = v22;
      v205(v22, v23, v219);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v22, 0, 1, v42);
    }
    v5 = v211;
    v205(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v219);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v45, 0, 1, v24);
  }
  a3 = v215;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  v11 = v219;
LABEL_21:
  v46 = a3[8];
  v47 = (uint64_t)v5 + v46;
  v48 = (char *)(a2 + v46);
  v49 = type metadata accessor for AMDPbEvaluationKey(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51((uint64_t)v48, 1, v49);
  if (v52)
  {
    if (!v53)
    {
      v222 = v50;
      v54 = (void (*)(uint64_t, char *, uint64_t))v224[4];
      v54(v47, v48, v11);
      v55 = *(int *)(v49 + 20);
      v56 = (_QWORD *)(v47 + v55);
      v57 = &v48[v55];
      v58 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
      v59 = *(_QWORD *)(v58 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        *v56 = *(_QWORD *)v57;
        *(_OWORD *)(v56 + 1) = *(_OWORD *)(v57 + 8);
        v54((uint64_t)v56 + *(int *)(v58 + 24), &v57[*(int *)(v58 + 24)], v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      }
      v73 = *(int *)(v49 + 24);
      v74 = (char *)(v47 + v73);
      v75 = &v48[v73];
      v76 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
      v77 = *(_QWORD *)(v76 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
      {
        v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
        memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        v212 = v5;
        v216 = v77;
        v54((uint64_t)v74, v75, v11);
        v79 = *(int *)(v76 + 20);
        v225 = v74;
        v80 = &v74[v79];
        v81 = v11;
        v82 = &v75[v79];
        v83 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v84 = *(_QWORD *)(v83 - 8);
        v209 = (void (*)(char *, char *, uint64_t))v54;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
        {
          v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
          memcpy(v80, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v80 = *(_QWORD *)v82;
          v54((uint64_t)&v80[*(int *)(v83 + 20)], &v82[*(int *)(v83 + 20)], v81);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v80, 0, 1, v83);
        }
        v103 = *(int *)(v76 + 24);
        v104 = v225;
        v105 = &v225[v103];
        v106 = &v75[v103];
        v107 = type metadata accessor for AspireHeSerializedRelinKey(0);
        v108 = *(_QWORD *)(v107 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
        {
          v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
          memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
          v5 = v212;
          v110 = v216;
        }
        else
        {
          v206 = v108;
          v209(v105, v106, v81);
          v111 = *(int *)(v107 + 20);
          v112 = &v105[v111];
          v113 = v81;
          v114 = &v106[v111];
          v115 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
          v116 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
            memcpy(v112, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
            v110 = v216;
            v118 = v206;
          }
          else
          {
            v202 = v116;
            v209(v112, v114, v113);
            v143 = *(int *)(v115 + 20);
            v203 = v112;
            __dst = &v112[v143];
            v144 = &v114[v143];
            v145 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
            v200 = *(_QWORD *)(v145 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48))(v144, 1, v145))
            {
              v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
              memcpy(__dst, v144, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
            }
            else
            {
              *(_QWORD *)__dst = *(_QWORD *)v144;
              v209(&__dst[*(int *)(v145 + 20)], &v144[*(int *)(v145 + 20)], v113);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v200 + 56))(__dst, 0, 1, v145);
            }
            v110 = v216;
            v118 = v206;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v202 + 56))(v203, 0, 1, v115);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v105, 0, 1, v107);
          v5 = v212;
          v104 = v225;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v104, 0, 1, v76);
      }
      v142 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v222 + 56);
      v169 = v47;
      v170 = v49;
      goto LABEL_91;
    }
    goto LABEL_27;
  }
  if (!v53)
  {
    v220 = v11;
    v221((char *)v47, (uint64_t)v48, v11);
    v64 = *(int *)(v49 + 20);
    v65 = (_QWORD *)(v47 + v64);
    v66 = &v48[v64];
    v67 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
    v68 = *(_QWORD *)(v67 - 8);
    v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
    v70 = v69((char *)v65, 1, v67);
    v71 = v69(v66, 1, v67);
    if (v70)
    {
      if (!v71)
      {
        *v65 = *(_QWORD *)v66;
        *(_OWORD *)(v65 + 1) = *(_OWORD *)(v66 + 8);
        v72 = v220;
        ((void (*)(char *, char *, uint64_t))v224[4])((char *)v65 + *(int *)(v67 + 24), &v66[*(int *)(v67 + 24)], v220);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        goto LABEL_41;
      }
    }
    else
    {
      if (!v71)
      {
        v124 = *((_QWORD *)v66 + 2);
        v125 = v65[1];
        v126 = v65[2];
        *(_OWORD *)v65 = *(_OWORD *)v66;
        v65[2] = v124;
        outlined consume of Data._Representation(v125, v126);
        v72 = v220;
        v221((char *)v65 + *(int *)(v67 + 24), (uint64_t)&v66[*(int *)(v67 + 24)], v220);
LABEL_41:
        v87 = *(int *)(v49 + 24);
        v88 = v47 + v87;
        v89 = &v48[v87];
        v90 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
        v91 = *(_QWORD *)(v90 - 8);
        v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
        v93 = v92(v88, 1, v90);
        v94 = v92((uint64_t)v89, 1, v90);
        if (v93)
        {
          if (!v94)
          {
            v223 = v91;
            v95 = (void (*)(uint64_t, char *, uint64_t))v224[4];
            v95(v88, v89, v72);
            v96 = *(int *)(v90 + 20);
            v97 = (_QWORD *)(v88 + v96);
            v98 = &v89[v96];
            v99 = type metadata accessor for AspireHeSerializedGaloisKey(0);
            v100 = *(_QWORD *)(v99 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
            {
              v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
              memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
            }
            else
            {
              *v97 = *(_QWORD *)v98;
              v95((uint64_t)v97 + *(int *)(v99 + 20), &v98[*(int *)(v99 + 20)], v72);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
            }
            v136 = *(int *)(v90 + 24);
            v137 = (char *)(v88 + v136);
            v138 = &v89[v136];
            v139 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v140 = *(_QWORD *)(v139 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
            {
              v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?);
              memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
              v142 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v223 + 56);
            }
            else
            {
              v213 = v5;
              v95((uint64_t)v137, v138, v220);
              v147 = *(int *)(v139 + 20);
              v148 = &v137[v147];
              v149 = &v138[v147];
              v150 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
              v226 = (void (*)(char *, char *, uint64_t))v95;
              v151 = *(_QWORD *)(v150 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
              {
                v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
                v5 = v213;
                v153 = v223;
              }
              else
              {
                v226(v148, v149, v220);
                v172 = *(int *)(v150 + 20);
                v218 = v148;
                v207 = &v148[v172];
                v173 = &v149[v172];
                v174 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                v204 = *(_QWORD *)(v174 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48))(v173, 1, v174))
                {
                  v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                  memcpy(v207, v173, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
                }
                else
                {
                  *(_QWORD *)v207 = *(_QWORD *)v173;
                  v226(&v207[*(int *)(v174 + 20)], &v173[*(int *)(v174 + 20)], v220);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v204 + 56))(v207, 0, 1, v174);
                }
                v5 = v213;
                v153 = v223;
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v151 + 56))(v218, 0, 1, v150);
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v139);
              v142 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v153 + 56);
            }
            goto LABEL_113;
          }
          goto LABEL_47;
        }
        if (v94)
        {
          outlined destroy of AspireApiPECConfig(v88, type metadata accessor for AspireHeSerializedEvaluationKey);
LABEL_47:
          v102 = &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?;
LABEL_48:
          v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v102) - 8) + 64);
          v62 = (void *)v88;
          v63 = v89;
          goto LABEL_29;
        }
        v221((char *)v88, (uint64_t)v89, v72);
        v127 = *(int *)(v90 + 20);
        v128 = (char *)(v88 + v127);
        v129 = &v89[v127];
        v130 = type metadata accessor for AspireHeSerializedGaloisKey(0);
        v131 = *(_QWORD *)(v130 - 8);
        v132 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v131 + 48);
        v133 = v132(v128, 1, v130);
        v134 = v132(v129, 1, v130);
        if (v133)
        {
          if (!v134)
          {
            *(_QWORD *)v128 = *(_QWORD *)v129;
            v135 = v220;
            ((void (*)(char *, char *, uint64_t))v224[4])(&v128[*(int *)(v130 + 20)], &v129[*(int *)(v130 + 20)], v220);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
            goto LABEL_76;
          }
        }
        else
        {
          if (!v134)
          {
            *(_QWORD *)v128 = *(_QWORD *)v129;
            swift_bridgeObjectRelease();
            v135 = v220;
            v221(&v128[*(int *)(v130 + 20)], (uint64_t)&v129[*(int *)(v130 + 20)], v220);
LABEL_76:
            v156 = *(int *)(v90 + 24);
            v88 += v156;
            v48 = &v89[v156];
            v90 = type metadata accessor for AspireHeSerializedRelinKey(0);
            v157 = *(_QWORD *)(v90 - 8);
            v158 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 48);
            v159 = v158(v88, 1, v90);
            v160 = v158((uint64_t)v48, 1, v90);
            if (v159)
            {
              if (!v160)
              {
                v214 = v5;
                v161 = (void (*)(uint64_t, char *, uint64_t))v224[4];
                v161(v88, v48, v135);
                v162 = *(int *)(v90 + 20);
                v163 = (char *)(v88 + v162);
                v164 = &v48[v162];
                v165 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v166 = *(_QWORD *)(v165 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165))
                {
                  v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?);
                  memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
                  v5 = v214;
                }
                else
                {
                  v161((uint64_t)v163, v164, v135);
                  v187 = *(int *)(v165 + 20);
                  v227 = &v163[v187];
                  v188 = &v164[v187];
                  v189 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                  v190 = *(_QWORD *)(v189 - 8);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v190 + 48))(v188, 1, v189))
                  {
                    v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                    memcpy(v227, v188, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
                  }
                  else
                  {
                    *(_QWORD *)v227 = *(_QWORD *)v188;
                    v161((uint64_t)&v227[*(int *)(v189 + 20)], &v188[*(int *)(v189 + 20)], v220);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v190 + 56))(v227, 0, 1, v189);
                  }
                  v5 = v214;
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v163, 0, 1, v165);
                }
                goto LABEL_112;
              }
            }
            else
            {
              if (!v160)
              {
                v221((char *)v88, (uint64_t)v48, v135);
                v176 = *(int *)(v90 + 20);
                v88 += v176;
                v89 = &v48[v176];
                v90 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
                v157 = *(_QWORD *)(v90 - 8);
                v177 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 48);
                v178 = v177(v88, 1, v90);
                v179 = v177((uint64_t)v89, 1, v90);
                if (v178)
                {
                  if (!v179)
                  {
                    v180 = (void (*)(uint64_t, char *, uint64_t))v224[4];
                    v180(v88, v89, v135);
                    v181 = *(int *)(v90 + 20);
                    v182 = (_QWORD *)(v88 + v181);
                    v183 = &v89[v181];
                    v184 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v185 = *(_QWORD *)(v184 - 8);
                    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48))(v183, 1, v184))
                    {
                      v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?);
                      memcpy(v182, v183, *(_QWORD *)(*(_QWORD *)(v186 - 8) + 64));
                    }
                    else
                    {
                      *v182 = *(_QWORD *)v183;
                      v180((uint64_t)v182 + *(int *)(v184 + 20), &v183[*(int *)(v184 + 20)], v135);
                      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v182, 0, 1, v184);
                    }
LABEL_112:
                    v142 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v157 + 56);
LABEL_113:
                    v169 = v88;
                    v170 = v90;
LABEL_91:
                    v142(v169, 0, 1, v170);
                    return v5;
                  }
                }
                else
                {
                  if (!v179)
                  {
                    v221((char *)v88, (uint64_t)v89, v135);
                    v192 = *(int *)(v90 + 20);
                    v193 = (char *)(v88 + v192);
                    v194 = &v89[v192];
                    v195 = type metadata accessor for AspireHeSerializedCiphertextVec(0);
                    v196 = *(_QWORD *)(v195 - 8);
                    v197 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v196 + 48);
                    v198 = v197(v193, 1, v195);
                    v199 = v197(v194, 1, v195);
                    if (v198)
                    {
                      if (!v199)
                      {
                        *(_QWORD *)v193 = *(_QWORD *)v194;
                        ((void (*)(char *, char *, uint64_t))v224[4])(&v193[*(int *)(v195 + 20)], &v194[*(int *)(v195 + 20)], v135);
                        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v193, 0, 1, v195);
                        return v5;
                      }
                    }
                    else
                    {
                      if (!v199)
                      {
                        *(_QWORD *)v193 = *(_QWORD *)v194;
                        swift_bridgeObjectRelease();
                        v221(&v193[*(int *)(v195 + 20)], (uint64_t)&v194[*(int *)(v195 + 20)], v135);
                        return v5;
                      }
                      outlined destroy of AspireApiPECConfig((uint64_t)v193, type metadata accessor for AspireHeSerializedCiphertextVec);
                    }
                    v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedCiphertextVec?)
                                                - 8)
                                    + 64);
                    v62 = v193;
                    v63 = v194;
                    goto LABEL_29;
                  }
                  outlined destroy of AspireApiPECConfig(v88, type metadata accessor for AspireHeSerializedKeySwitchKey);
                }
                v102 = &demangling cache variable for type metadata for AspireHeSerializedKeySwitchKey?;
                goto LABEL_48;
              }
              outlined destroy of AspireApiPECConfig(v88, type metadata accessor for AspireHeSerializedRelinKey);
            }
            v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedRelinKey?)
                                        - 8)
                            + 64);
            v62 = (void *)v88;
            goto LABEL_28;
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v128, type metadata accessor for AspireHeSerializedGaloisKey);
        }
        v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeSerializedGaloisKey?);
        memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
        v135 = v220;
        goto LABEL_76;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v65, type metadata accessor for AMDPbEvaluationKeyMetadata);
    }
    v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    v72 = v220;
    goto LABEL_41;
  }
  outlined destroy of AspireApiPECConfig(v47, type metadata accessor for AMDPbEvaluationKey);
LABEL_27:
  v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?)
                              - 8)
                  + 64);
  v62 = (void *)v47;
LABEL_28:
  v63 = v48;
LABEL_29:
  memcpy(v62, v63, v61);
  return v5;
}

uint64_t getEnumTagSinglePayload for AMDPbPECQuery()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C0FE54(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPECQuery()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237C0FF2C(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbEvaluationKey?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AMDPbPECQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AMDPbPIRQuery(a1, a2, a3, MEMORY[0x24BEE0158] + 64, &lazy cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

void type metadata completion function for AMDPbPIRQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, a5, a6);
    if (v9 <= 0x3F)
    {
      type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, &lazy cache variable for type metadata for AMDPbEvaluationKey?, (void (*)(uint64_t))type metadata accessor for AMDPbEvaluationKey);
      if (v10 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbPECShardReply(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      v14[1] = v15[1];
      v19 = *(int *)(v16 + 28);
      v20 = (char *)v14 + v19;
      v21 = (char *)v15 + v19;
      swift_bridgeObjectRetain();
      v12(v20, v21, v11);
      v22 = *(int *)(v16 + 32);
      v23 = (char *)v14 + v22;
      v24 = (char *)v15 + v22;
      v25 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v32 = v26;
        v28 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v31 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v24, 1, v28))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v12(v23, v24, v11);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v23, 0, 1, v28);
        }
        v12(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v23, 0, 1, v25);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for AMDPbPECShardReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v12(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 28), v5);
    v9 = v6 + *(int *)(v7 + 32);
    v10 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      v11 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11)
        && swift_getEnumCaseMultiPayload() <= 2)
      {
        v12(v9, v5);
      }
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9 + *(int *)(v10 + 20), v5);
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AMDPbPECShardReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v13[1] = v14[1];
    v18 = *(int *)(v15 + 28);
    v19 = (char *)v13 + v18;
    v20 = (char *)v14 + v18;
    swift_bridgeObjectRetain();
    v11(v19, v20, v10);
    v21 = *(int *)(v15 + 32);
    v22 = (char *)v13 + v21;
    v23 = (char *)v14 + v21;
    v24 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v31 = v25;
      v27 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v30 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v23, 1, v27))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v11(v22, v23, v10);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v22, 0, 1, v27);
      }
      v11(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v22, 0, 1, v24);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithCopy for AMDPbPECShardReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *))(v10 + 24);
  v57 = v9;
  v11(v7, v8);
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17((uint64_t)v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      goto LABEL_7;
    }
    *(_DWORD *)v13 = *(_DWORD *)v14;
    *(_DWORD *)(v13 + 4) = *((_DWORD *)v14 + 1);
    *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(v15 + 28), &v14[*(int *)(v15 + 28)], v57);
    v33 = *(int *)(v15 + 32);
    v34 = (char *)(v13 + v33);
    v35 = &v14[v33];
    v36 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
    v39 = v38(v34, 1, v36);
    v40 = v38(v35, 1, v36);
    if (v39)
    {
      if (!v40)
      {
        v41 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v42 = *(_QWORD *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v35, 1, v41))
        {
          v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v34[*(int *)(v36 + 20)], &v35[*(int *)(v36 + 20)], v57);
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v52 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
          v52(v34, v35, v57);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v34, 0, 1, v41);
          v52(&v34[*(int *)(v36 + 20)], &v35[*(int *)(v36 + 20)], v57);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        return a1;
      }
      goto LABEL_17;
    }
    if (v40)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v34, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_17:
      v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                  - 8)
                      + 64);
      v31 = v34;
      v32 = v35;
      goto LABEL_8;
    }
    v47 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v56 = *(_QWORD *)(v47 - 8);
    v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
    v49 = v48(v34, 1, v47);
    v50 = v48(v35, 1, v47);
    if (v49)
    {
      v51 = v57;
      if (!v50)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v34, v35, v57);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v34, 0, 1, v47);
LABEL_30:
        ((void (*)(char *, char *, uint64_t))v11)(&v34[*(int *)(v36 + 20)], &v35[*(int *)(v36 + 20)], v51);
        return a1;
      }
    }
    else
    {
      v51 = v57;
      if (!v50)
      {
        if (a1 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v34, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v34, v35, v57);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_30;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v34, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_30;
  }
  if (v19)
  {
LABEL_7:
    v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?)
                                - 8)
                    + 64);
    v31 = (void *)v13;
    v32 = v14;
LABEL_8:
    memcpy(v31, v32, v30);
    return a1;
  }
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_DWORD *)(v13 + 4) = *((_DWORD *)v14 + 1);
  *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
  v20 = *(int *)(v15 + 28);
  v21 = v13 + v20;
  v22 = &v14[v20];
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v57);
  v24 = *(int *)(v15 + 32);
  v25 = (char *)(v13 + v24);
  v26 = &v14[v24];
  v27 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v55 = (void (*)(char *, char *, uint64_t))v23;
    v44 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v54 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v26, 1, v44))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v55(v25, v26, v57);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v25, 0, 1, v44);
    }
    v55(&v25[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v57);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *initializeWithTake for AMDPbPECShardReply(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v12[1] = v13[1];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    v17 = *(int *)(v14 + 32);
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    v20 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v27 = v21;
      v23 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
      v26 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v19, 1, v23))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        swift_getEnumCaseMultiPayload();
        v10(v18, v19, v9);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v18, 0, 1, v23);
      }
      v10(&v18[*(int *)(v20 + 20)], &v19[*(int *)(v20 + 20)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for AMDPbPECShardReply(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *))(v10 + 40);
  v53 = v9;
  v11(v7, v8);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (v18)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
      goto LABEL_7;
    }
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v11)(&v13[*(int *)(v15 + 28)], &v14[*(int *)(v15 + 28)], v53);
    v29 = *(int *)(v15 + 32);
    v30 = &v13[v29];
    v31 = &v14[v29];
    v32 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
    v35 = v34(v30, 1, v32);
    v36 = v34(v31, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        v37 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
        v38 = *(_QWORD *)(v37 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v31, 1, v37))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v30[*(int *)(v32 + 20)], &v31[*(int *)(v32 + 20)], v53);
        }
        else
        {
          swift_getEnumCaseMultiPayload();
          v48 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v48(v30, v31, v53);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v30, 0, 1, v37);
          v48(&v30[*(int *)(v32 + 20)], &v31[*(int *)(v32 + 20)], v53);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        return a1;
      }
      goto LABEL_17;
    }
    if (v36)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v30, type metadata accessor for AspireSimilarityPlaintextPacking);
LABEL_17:
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?)
                                  - 8)
                      + 64);
      v27 = v30;
      v28 = v31;
      goto LABEL_8;
    }
    v43 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v52 = *(_QWORD *)(v43 - 8);
    v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
    v45 = v44(v30, 1, v43);
    v46 = v44(v31, 1, v43);
    if (v45)
    {
      v47 = v53;
      if (!v46)
      {
        swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v30, v31, v53);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v30, 0, 1, v43);
LABEL_30:
        ((void (*)(char *, char *, uint64_t))v11)(&v30[*(int *)(v32 + 20)], &v31[*(int *)(v32 + 20)], v47);
        return a1;
      }
    }
    else
    {
      v47 = v53;
      if (!v46)
      {
        if (a1 != a2)
        {
          outlined destroy of AspireApiPECConfig((uint64_t)v30, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
          swift_getEnumCaseMultiPayload();
          (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v30, v31, v53);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_30;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v30, type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType);
    }
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_30;
  }
  if (v18)
  {
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?)
                                - 8)
                    + 64);
    v27 = v13;
    v28 = v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(&v13[*(int *)(v15 + 28)], &v14[*(int *)(v15 + 28)], v53);
  v20 = *(int *)(v15 + 32);
  v21 = &v13[v20];
  v22 = &v14[v20];
  v23 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v51 = v19;
    v40 = type metadata accessor for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType(0);
    v50 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v22, 1, v40))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilarityPlaintextPacking.OneOf_PlaintextPackingType?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      swift_getEnumCaseMultiPayload();
      v51(v21, v22, v53);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v21, 0, 1, v40);
    }
    v51(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v53);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbPECShardReply()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C11504(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPECShardReply()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_237C115B4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AMDPbPECShardReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AMDPbHEKeyStatus(a1, a2, a3, MEMORY[0x24BEE0158] + 64, MEMORY[0x24BEE0158] + 64, &lazy cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?, (void (*)(uint64_t))type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
}

void type metadata completion function for AMDPbHEKeyStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  unint64_t v9;
  unint64_t v10;

  type metadata accessor for UnknownStorage();
  if (v9 <= 0x3F)
  {
    type metadata accessor for AMDPbHEConfig.OneOf_Config?(319, a6, a7);
    if (v10 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AMDPbHEQueries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AMDPbHEQueries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AMDPbHEQueries(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for AMDPbHEQueries(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for AMDPbHEQueries(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for AMDPbHEQueries(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AMDPbPECReply()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_47Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AMDPbPECReply()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_48Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AMDPbHEQueries()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t outlined destroy of AMDPbHEConfig.OneOf_Config?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AMDPbHEConfig.OneOf_Config?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t AspireNetworkManager.endpointUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AspireNetworkManager.authenticationToken.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 20);
  v2 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for AspireNetworkManager()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AspireNetworkManager;
  if (!type metadata singleton initialization cache for AspireNetworkManager)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AspireNetworkManager.networkDelegationConfig.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AspireNetworkManager.privacyProxyFailClosed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 28));
}

uint64_t AspireNetworkManager.tokenFetcher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AspireNetworkManager();
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + *(int *)(v3 + 32), a1, &demangling cache variable for type metadata for TokenFetcher?);
}

id AspireNetworkManager.urlSession.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 36));
}

uint64_t AspireNetworkManager.init(endpointUrl:issuerUrl:authenticationToken:networkDelegationConfig:privacyProxyFailClosed:secondaryIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  int *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  int *v41;
  uint64_t *v42;
  id v43;
  uint64_t v44;
  uint64_t result;
  char *v46;
  uint64_t v47;
  int v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v48 = a7;
  v54 = a4;
  v55 = a3;
  v51 = a2;
  v52 = a1;
  v53 = a9;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v13);
  v47 = (uint64_t)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v46 = (char *)&v46 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  MEMORY[0x24BDAC7A8](v21);
  v50 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend((id)objc_opt_self(), sel_ephemeralSessionConfiguration);
  if (a6)
  {
    swift_bridgeObjectRetain();
    v24 = (void *)MEMORY[0x23B821F68](a5, a6);
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_set_sourceApplicationBundleIdentifier_, v24);

  }
  specialized static NetworkManagerHelper.configureSecondaryIdentifier(configuration:secondaryIdentifier:)(v23, a8, a10);
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_set_usesNWLoader_, 1);
  v49 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v23);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v26 = v52;
  v27 = v53;
  v25(v53, v52, v15);
  v28 = (int *)type metadata accessor for AspireNetworkManager();
  v29 = (_QWORD *)(v27 + v28[5]);
  v30 = v54;
  *v29 = v55;
  v29[1] = v30;
  v31 = (_QWORD *)(v27 + v28[6]);
  *v31 = a5;
  v31[1] = a6;
  v32 = v48 & 1;
  *(_BYTE *)(v27 + v28[7]) = v48 & 1;
  if (v30 >> 60 == 15)
  {
    v33 = type metadata accessor for TokenFetcher(0);
    v34 = (uint64_t)v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v50, 1, 1, v33);
    v35 = v54;
    v36 = v55;
    v37 = v26;
    v38 = v49;
  }
  else
  {
    v39 = v47;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51, v47, &demangling cache variable for type metadata for URL?);
    v25((uint64_t)v19, v26, v15);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v39, 1, v15) == 1)
    {
      v40 = v46;
      v25((uint64_t)v46, (uint64_t)v19, v15);
      v35 = v54;
      v36 = v55;
      outlined copy of Data._Representation(v55, v54);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      v40 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v46, v39, v15);
      v35 = v54;
      v36 = v55;
      outlined copy of Data._Representation(v55, v54);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v34 = (uint64_t)v50;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v50, v40, v15);
    v41 = (int *)type metadata accessor for TokenFetcher(0);
    v42 = (uint64_t *)(v34 + v41[5]);
    *v42 = v36;
    v42[1] = v35;
    v38 = v49;
    *(_QWORD *)(v34 + v41[6]) = v49;
    *(_BYTE *)(v34 + v41[7]) = v32;
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v41 - 1) + 56))(v34, 0, 1, v41);
    v43 = v38;
    v37 = v52;
  }
  outlined copy of Data?(v36, v35);

  outlined destroy of AMDPbHEConfig.OneOf_Config?(v51, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v37, v15);
  outlined consume of Data?(v36, v35);
  v44 = v53;
  result = outlined init with take of TokenFetcher?(v34, v53 + v28[8]);
  *(_QWORD *)(v44 + v28[9]) = v38;
  return result;
}

uint64_t AspireNetworkManager.prepareRequest(path:userId:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[21] = a6;
  v7[22] = v6;
  v7[19] = a4;
  v7[20] = a5;
  v7[17] = a2;
  v7[18] = a3;
  v7[16] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  v7[23] = swift_task_alloc();
  v8 = type metadata accessor for TokenFetcher(0);
  v7[24] = v8;
  v7[25] = *(_QWORD *)(v8 - 8);
  v7[26] = swift_task_alloc();
  v9 = type metadata accessor for URL.DirectoryHint();
  v7[27] = v9;
  v7[28] = *(_QWORD *)(v9 - 8);
  v7[29] = swift_task_alloc();
  v10 = type metadata accessor for URL();
  v7[30] = v10;
  v7[31] = *(_QWORD *)(v10 - 8);
  v7[32] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AspireNetworkManager.prepareRequest(path:userId:body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSURL *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  Swift::String_optional v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 184);
  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 144);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v2, *MEMORY[0x24BDCD7A0], v3);
  *(_QWORD *)(v0 + 264) = lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  v6 = objc_allocWithZone(MEMORY[0x24BDD16B0]);
  URL._bridgeToObjectiveC()(v7);
  v9 = v8;
  v10 = objc_msgSend(v6, sel_initWithURL_, v8);
  *(_QWORD *)(v0 + 272) = v10;

  v11 = type metadata accessor for AspireNetworkManager();
  objc_msgSend(v10, sel__setPrivacyProxyFailClosed_, *(unsigned __int8 *)(v5 + *(int *)(v11 + 28)));
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
  v12.value._countAndFlagsBits = UUID.uuidString.getter();
  v13._countAndFlagsBits = 0x6564492D72657355;
  v13._object = (void *)0xEF7265696669746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v12, v13);
  swift_bridgeObjectRelease();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v5 + *(int *)(v11 + 32), v4, &demangling cache variable for type metadata for TokenFetcher?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v4, 1, v23) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 184), &demangling cache variable for type metadata for TokenFetcher?);
    v14 = *(void **)(v0 + 272);
    v16 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 256);
    v17 = *(_QWORD *)(v0 + 240);
    v19 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 168);
    URLRequest.httpMethod.setter();
    outlined copy of Data._Representation(v19, v18);
    URLRequest.httpBody.setter();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    outlined init with take of TokenFetcher(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 208));
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v21;
    *v21 = v0;
    v21[1] = AspireNetworkManager.prepareRequest(path:userId:body:);
    return TokenFetcher.getToken()();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = *(_QWORD *)(v0 + 296);
  v1 = *(_QWORD *)(v0 + 304);
  v19 = *(_QWORD *)(v0 + 208);
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v0 + 32) = Data.base64EncodedString(options:)(0);
  *(_QWORD *)(v0 + 48) = 43;
  *(_QWORD *)(v0 + 56) = 0xE100000000000000;
  *(_QWORD *)(v0 + 64) = 45;
  *(_QWORD *)(v0 + 72) = 0xE100000000000000;
  v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v5 = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 80) = v3;
  *(_QWORD *)(v0 + 88) = v5;
  *(_QWORD *)(v0 + 96) = 47;
  *(_QWORD *)(v0 + 104) = 0xE100000000000000;
  *(_QWORD *)(v0 + 112) = 95;
  *(_QWORD *)(v0 + 120) = 0xE100000000000000;
  v6 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v8 = v7;
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10.value._countAndFlagsBits = 0xD000000000000013;
  v10.value._object = (void *)0x8000000237D61420;
  v11._countAndFlagsBits = 0x7A69726F68747541;
  v11._object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v10, v11);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v1, v2);
  outlined destroy of AspireApiPECConfig(v19, type metadata accessor for TokenFetcher);
  v12 = *(void **)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 160);
  v16 = *(_QWORD *)(v0 + 168);
  URLRequest.httpMethod.setter();
  outlined copy of Data._Representation(v17, v16);
  URLRequest.httpBody.setter();

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 128);

  outlined destroy of AspireApiPECConfig(v4, type metadata accessor for TokenFetcher);
  v6 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AspireNetworkManager.prepareRequest(path:userId:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 288) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 296) = a2;
    *(_QWORD *)(v6 + 304) = a1;
  }
  return swift_task_switch();
}

uint64_t AspireNetworkManager.fetchConfigs(useCases:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  type metadata accessor for String.Encoding();
  v4[9] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v4[10] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v4[11] = v5;
  v4[12] = *(_QWORD *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v6 = type metadata accessor for URLRequest();
  v4[14] = v6;
  v4[15] = *(_QWORD *)(v6 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = type metadata accessor for AspireApiConfigRequest(0);
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[25] = a1;
  v5[26] = a2;
  v5[27] = a3;
  v5[28] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AspireNetworkManager.fetchConfigs(useCases:userId:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[6];
  *(_QWORD *)(swift_task_alloc() + 16) = v1;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigRequest and conformance AspireApiConfigRequest, type metadata accessor for AspireApiConfigRequest, (uint64_t)&protocol conformance descriptor for AspireApiConfigRequest);
  static Message.with(_:)();
  swift_task_dealloc();
  v2 = Message.serializedData(partial:)();
  v4 = v3;
  v0[19] = v2;
  v0[20] = v3;
  outlined destroy of AspireApiPECConfig(v0[18], type metadata accessor for AspireApiConfigRequest);
  v5 = (_QWORD *)swift_task_alloc();
  v0[21] = v5;
  *v5 = v0;
  v5[1] = AspireNetworkManager.fetchConfigs(useCases:userId:);
  return AspireNetworkManager.prepareRequest(path:userId:body:)(v0[16], 0x6769666E6F63, 0xE600000000000000, v0[7], v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (one-time initialization token for networking != -1)
    swift_once();
  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[11];
  v4 = v0[7];
  v5 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v5, (uint64_t)static Logger.networking);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v10 = v0[12];
  v9 = v0[13];
  v11 = v0[11];
  if (v8)
  {
    v23 = v0[11];
    v12 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v24 = v22;
    *(_DWORD *)v12 = 136446467;
    v13 = swift_bridgeObjectRetain();
    v14 = MEMORY[0x23B822070](v13, MEMORY[0x24BEE0D00]);
    v21 = v10;
    v16 = v15;
    swift_bridgeObjectRelease();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2081;
    v17 = UUID.uuidString.getter();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v9, v23);
    _os_log_impl(&dword_237BC8000, v6, v7, "Request to fetchConfigs has started for useCases '%{public}s' and userId: '%{private}s'", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v22, -1, -1);
    MEMORY[0x23B822DA8](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }

  type metadata accessor for AspireNetworkManager();
  v19 = (_QWORD *)swift_task_alloc();
  v0[24] = v19;
  *v19 = v0;
  v19[1] = AspireNetworkManager.fetchConfigs(useCases:userId:);
  return NSURLSession.data(for:delegate:)();
}

{
  _QWORD *v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t v26;
  void *v27;

  objc_opt_self();
  v1 = (void *)swift_dynamicCastObjCClass();
  if (v1 && objc_msgSend(v1, sel_statusCode) == (id)200)
  {
    outlined copy of Data._Representation(v0[25], v0[26]);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    v4 = os_log_type_enabled(v2, v3);
    v5 = v0[26];
    if (v4)
    {
      v6 = v5 >> 62;
      *(_DWORD *)swift_slowAlloc() = 134349056;
      __asm { BR              X10 }
    }
    outlined consume of Data._Representation(v0[25], v5);
    v18 = v0[28];

    type metadata accessor for AspireApiConfigResponse(0);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfigResponse and conformance AspireApiConfigResponse, type metadata accessor for AspireApiConfigResponse, (uint64_t)&protocol conformance descriptor for AspireApiConfigResponse);
    Message.init(serializedData:extensions:partial:options:)();
    v19 = v18;
    v20 = (void *)v0[27];
    v22 = v0[19];
    v21 = v0[20];
    if (!v19)
    {
      (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);

      outlined consume of Data._Representation(v22, v21);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v23 = (uint64_t (*)(void))v0[1];
      return v23();
    }
    (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);

    outlined consume of Data._Representation(v22, v21);
  }
  else
  {
    v7 = v0[26];
    v8 = v0[25];
    v10 = v0[19];
    v9 = v0[20];
    v11 = v0[15];
    v26 = v0[16];
    v27 = (void *)v0[27];
    v25 = v0[14];
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    v13 = v12;
    static String.Encoding.utf8.getter();
    v14 = String.init(data:encoding:)();
    v16 = 0x6E776F6E6B6E75;
    if (v15)
      v16 = v14;
    v17 = 0xE700000000000000;
    if (v15)
      v17 = v15;
    *v13 = v16;
    v13[1] = v17;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined consume of Data._Representation(v10, v9);
    outlined consume of Data._Representation(v8, v7);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v26, v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AspireNetworkManager.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for UUID();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = type metadata accessor for AspireApiEvaluationKeys(0);
  v3[13] = swift_task_alloc();
  v5 = type metadata accessor for URLRequest();
  v3[14] = v5;
  v3[15] = *(_QWORD *)(v5 - 8);
  v3[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AspireNetworkManager.uploadKeys(evaluationKeys:userId:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeys and conformance AspireApiEvaluationKeys, type metadata accessor for AspireApiEvaluationKeys, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeys);
  v1 = Message.serializedData(partial:)();
  v0[17] = v1;
  v0[18] = v2;
  v3 = v1;
  v4 = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[19] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = AspireNetworkManager.uploadKeys(evaluationKeys:userId:);
  return AspireNetworkManager.prepareRequest(path:userId:body:)(v0[16], 7955819, 0xE300000000000000, v0[7], v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v22;

  if (one-time initialization token for networking != -1)
    swift_once();
  v1 = v0[6];
  v2 = v0[17];
  v22 = v0[18];
  v3 = v0[13];
  v4 = v0[10];
  v5 = v0[11];
  v6 = v0[9];
  v7 = v0[7];
  v8 = type metadata accessor for Logger();
  v0[21] = __swift_project_value_buffer(v8, (uint64_t)static Logger.networking);
  outlined init with copy of AspireApiEvaluationKeys(v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v7, v6);
  outlined copy of Data._Representation(v2, v22);
  v9 = Logger.logObject.getter();
  LOBYTE(v1) = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v9, (os_log_type_t)v1);
  v11 = v0[18];
  if (v10)
  {
    v12 = v0[13];
    v13 = v11 >> 62;
    v14 = swift_slowAlloc();
    swift_slowAlloc();
    *(_DWORD *)v14 = 134349571;
    v15 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    outlined destroy of AspireApiPECConfig(v12, type metadata accessor for AspireApiEvaluationKeys);
    v0[3] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2050;
    __asm { BR              X10 }
  }
  v16 = v0[17];
  v18 = v0[10];
  v17 = v0[11];
  v19 = v0[9];
  outlined destroy of AspireApiPECConfig(v0[13], type metadata accessor for AspireApiEvaluationKeys);
  outlined consume of Data._Representation(v16, v11);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);

  type metadata accessor for AspireNetworkManager();
  v20 = (_QWORD *)swift_task_alloc();
  v0[22] = v20;
  *v20 = v0;
  v20[1] = AspireNetworkManager.uploadKeys(evaluationKeys:userId:);
  return NSURLSession.data(for:delegate:)();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  unint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  outlined copy of Data._Representation(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = *(_QWORD *)(v0 + 192);
  if (v3)
  {
    v5 = v4 >> 62;
    *(_DWORD *)swift_slowAlloc() = 134349056;
    __asm { BR              X10 }
  }
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 184), v4);

  objc_opt_self();
  v6 = (void *)swift_dynamicCastObjCClass();
  if (v6 && objc_msgSend(v6, sel_statusCode) == (id)200)
  {
    v7 = *(_QWORD *)(v0 + 192);
    v8 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 112);

    outlined consume of Data._Representation(v8, v7);
    outlined consume of Data._Representation(v10, v9);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v14 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 192);
    v16 = *(void **)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 144);
    v20 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 112);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    outlined consume of Data._Representation(v17, v15);
    outlined consume of Data._Representation(v19, v18);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v14 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v14();
}

{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AspireNetworkManager.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[23] = a1;
  v5[24] = a2;
  v5[25] = a3;
  v5[26] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AspireNetworkManager.queries(requests:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  type metadata accessor for String.Encoding();
  v4[9] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v4[10] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v4[11] = v5;
  v4[12] = *(_QWORD *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v6 = type metadata accessor for URLRequest();
  v4[14] = v6;
  v4[15] = *(_QWORD *)(v6 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = type metadata accessor for AspireApiRequests(0);
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[25] = a1;
  v5[26] = a2;
  v5[27] = a3;
  v5[28] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AspireNetworkManager.queries(requests:userId:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[6];
  *(_QWORD *)(swift_task_alloc() + 16) = v1;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
  static Message.with(_:)();
  swift_task_dealloc();
  v2 = Message.serializedData(partial:)();
  v4 = v3;
  v0[19] = v2;
  v0[20] = v3;
  outlined destroy of AspireApiPECConfig(v0[18], type metadata accessor for AspireApiRequests);
  v5 = (_QWORD *)swift_task_alloc();
  v0[21] = v5;
  *v5 = v0;
  v5[1] = AspireNetworkManager.queries(requests:userId:);
  return AspireNetworkManager.prepareRequest(path:userId:body:)(v0[16], 0x73656972657571, 0xE700000000000000, v0[7], v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  if (one-time initialization token for networking != -1)
    swift_once();
  v1 = v0[19];
  v2 = v0[20];
  v4 = v0[12];
  v3 = v0[13];
  v5 = v0[11];
  v6 = v0[7];
  v7 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v7, (uint64_t)static Logger.networking);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  outlined copy of Data._Representation(v1, v2);
  outlined copy of Data._Representation(v1, v2);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[20];
  if (v10)
  {
    v13 = v0[12];
    v12 = v0[13];
    v23 = v0[11];
    v24 = v11 >> 62;
    v14 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    *(_DWORD *)v14 = 136380931;
    v15 = UUID.uuidString.getter();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v23);
    *(_WORD *)(v14 + 12) = 2050;
    __asm { BR              X9 }
  }
  v17 = v0[19];
  v19 = v0[12];
  v18 = v0[13];
  v20 = v0[11];
  outlined consume of Data._Representation(v17, v0[20]);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  outlined consume of Data._Representation(v17, v11);

  type metadata accessor for AspireNetworkManager();
  v21 = (_QWORD *)swift_task_alloc();
  v0[24] = v21;
  *v21 = v0;
  v21[1] = AspireNetworkManager.queries(requests:userId:);
  return NSURLSession.data(for:delegate:)();
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  outlined copy of Data._Representation(v0[25], v0[26]);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = v0[26];
  if (v3)
  {
    v5 = v4 >> 62;
    *(_DWORD *)swift_slowAlloc() = 134349056;
    __asm { BR              X10 }
  }
  outlined consume of Data._Representation(v0[25], v4);

  objc_opt_self();
  v6 = (void *)swift_dynamicCastObjCClass();
  if (v6 && objc_msgSend(v6, sel_statusCode) == (id)200)
  {
    v7 = v0[28];
    type metadata accessor for AspireApiResponses(0);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
    Message.init(serializedData:extensions:partial:options:)();
    v8 = v7;
    v9 = (void *)v0[27];
    v11 = v0[19];
    v10 = v0[20];
    if (!v8)
    {
      (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
      outlined consume of Data._Representation(v11, v10);

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v23 = (uint64_t (*)(void))v0[1];
      return v23();
    }
    (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
    outlined consume of Data._Representation(v11, v10);

  }
  else
  {
    v13 = v0[26];
    v12 = (void *)v0[27];
    v14 = v0[25];
    v16 = v0[19];
    v15 = v0[20];
    v25 = v0[15];
    v26 = v0[14];
    v27 = v0[16];
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    v18 = v17;
    static String.Encoding.utf8.getter();
    v19 = String.init(data:encoding:)();
    v21 = 0x6E776F6E6B6E75;
    if (v20)
      v21 = v19;
    v22 = 0xE700000000000000;
    if (v20)
      v22 = v20;
    *v18 = v21;
    v18[1] = v22;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    outlined consume of Data._Representation(v14, v13);
    outlined consume of Data._Representation(v16, v15);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

Swift::Void __swiftcall AspireNetworkManager.cancel()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  _QWORD v3[6];

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for AspireNetworkManager() + 36));
  v3[4] = closure #1 in AspireNetworkManager.cancel();
  v3[5] = 0;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 1107296256;
  v3[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [NSURLSessionTask]) -> ();
  v3[3] = &block_descriptor;
  v2 = _Block_copy(v3);
  objc_msgSend(v1, sel_getAllTasksWithCompletionHandler_, v2);
  _Block_release(v2);
}

uint64_t closure #1 in AspireNetworkManager.cancel()(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  id v5;
  void *v6;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x23B822298](i, a1);
      else
        v5 = *(id *)(a1 + 8 * i + 32);
      v6 = v5;
      objc_msgSend(v5, sel_cancel);

    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [NSURLSessionTask]) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for NSURLSessionTask();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for NetworkManager.networkDelegationConfig.getter in conformance AspireNetworkManager(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return AspireNetworkManager.fetchConfigs(useCases:userId:)(a1, a2, a3);
}

uint64_t protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return AspireNetworkManager.uploadKeys(evaluationKeys:userId:)(a1, a2);
}

uint64_t protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t protocol witness for NetworkManager.queries(requests:userId:) in conformance AspireNetworkManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return AspireNetworkManager.queries(requests:userId:)(a1, a2, a3);
}

void protocol witness for NetworkManager.cancel() in conformance AspireNetworkManager(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD v4[6];

  v2 = *(void **)(v1 + *(int *)(a1 + 36));
  v4[4] = closure #1 in AspireNetworkManager.cancel();
  v4[5] = 0;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [NSURLSessionTask]) -> ();
  v4[3] = &block_descriptor_12;
  v3 = _Block_copy(v4);
  objc_msgSend(v2, sel_getAllTasksWithCompletionHandler_, v3);
  _Block_release(v3);
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int?>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined init with take of TokenFetcher?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AspireNetworkManager.fetchConfigs(useCases:userId:)(_QWORD *a1)
{
  return partial apply for closure #1 in AspireNetworkManager.fetchConfigs(useCases:userId:)(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t outlined init with copy of AspireApiEvaluationKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AspireApiEvaluationKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

char *initializeBufferWithCopyOfBuffer for AspireNetworkManager(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, int *);
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void (*v35)(char *, _QWORD, uint64_t, int *);
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  void (*v41)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = (uint64_t *)&a2[v9];
    v12 = v11[1];
    v41 = v8;
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
    }
    else
    {
      v14 = *v11;
      outlined copy of Data._Representation(*v11, v12);
      *(_QWORD *)v10 = v14;
      *((_QWORD *)v10 + 1) = v12;
    }
    v15 = a3[6];
    v16 = a3[7];
    v17 = &a1[v15];
    v18 = (uint64_t *)&a2[v15];
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v18) = a2[v16];
    *(_QWORD *)v17 = v19;
    *((_QWORD *)v17 + 1) = v20;
    a1[v16] = (char)v18;
    v21 = a3[8];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = (int *)type metadata accessor for TokenFetcher(0);
    v25 = *((_QWORD *)v24 - 1);
    v26 = *(unsigned int (**)(char *, uint64_t, int *))(v25 + 48);
    swift_bridgeObjectRetain();
    if (v26(v23, 1, v24))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v41(v22, v23, v7);
      v28 = v24[5];
      v29 = (uint64_t *)&v22[v28];
      v30 = (uint64_t *)&v23[v28];
      v31 = *v30;
      v32 = v30[1];
      outlined copy of Data._Representation(*v30, v32);
      *v29 = v31;
      v29[1] = v32;
      v33 = v24[6];
      v34 = *(void **)&v23[v33];
      *(_QWORD *)&v22[v33] = v34;
      v22[v24[7]] = v23[v24[7]];
      v35 = *(void (**)(char *, _QWORD, uint64_t, int *))(v25 + 56);
      v36 = v34;
      v35(v22, 0, 1, v24);
    }
    v37 = a3[9];
    v38 = *(void **)&a2[v37];
    *(_QWORD *)&a1[v37] = v38;
    v39 = v38;
  }
  return a1;
}

void destroy for AspireNetworkManager(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for URL();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (uint64_t *)(a1 + a2[5]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  swift_bridgeObjectRelease();
  v8 = a1 + a2[8];
  v9 = type metadata accessor for TokenFetcher(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v5(v8, v4);
    outlined consume of Data._Representation(*(_QWORD *)(v8 + *(int *)(v9 + 20)), *(_QWORD *)(v8 + *(int *)(v9 + 20) + 8));

  }
}

char *initializeWithCopy for AspireNetworkManager(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, int *);
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void (*v33)(char *, _QWORD, uint64_t, int *);
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  void (*v39)(char *, char *, uint64_t);

  v6 = type metadata accessor for URL();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = (uint64_t *)&a2[v8];
  v11 = v10[1];
  v39 = v7;
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  else
  {
    v12 = *v10;
    outlined copy of Data._Representation(*v10, v11);
    *(_QWORD *)v9 = v12;
    *((_QWORD *)v9 + 1) = v11;
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = (uint64_t *)&a2[v13];
  v17 = *v16;
  v18 = v16[1];
  LOBYTE(v16) = a2[v14];
  *(_QWORD *)v15 = v17;
  *((_QWORD *)v15 + 1) = v18;
  a1[v14] = (char)v16;
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = (int *)type metadata accessor for TokenFetcher(0);
  v23 = *((_QWORD *)v22 - 1);
  v24 = *(unsigned int (**)(char *, uint64_t, int *))(v23 + 48);
  swift_bridgeObjectRetain();
  if (v24(v21, 1, v22))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v39(v20, v21, v6);
    v26 = v22[5];
    v27 = (uint64_t *)&v20[v26];
    v28 = (uint64_t *)&v21[v26];
    v29 = *v28;
    v30 = v28[1];
    outlined copy of Data._Representation(*v28, v30);
    *v27 = v29;
    v27[1] = v30;
    v31 = v22[6];
    v32 = *(void **)&v21[v31];
    *(_QWORD *)&v20[v31] = v32;
    v20[v22[7]] = v21[v22[7]];
    v33 = *(void (**)(char *, _QWORD, uint64_t, int *))(v23 + 56);
    v34 = v32;
    v33(v20, 0, 1, v22);
  }
  v35 = a3[9];
  v36 = *(void **)&a2[v35];
  *(_QWORD *)&a1[v35] = v36;
  v37 = v36;
  return a1;
}

uint64_t assignWithCopy for AspireNetworkManager(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int *v21;
  uint64_t v22;
  uint64_t (*v23)(_BYTE *, uint64_t, int *);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void (*v33)(_BYTE *, _QWORD, uint64_t, int *);
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;

  v6 = type metadata accessor for URL();
  v53 = *(_QWORD *)(v6 - 8);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 24);
  v52(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  v15 = a3[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v18 = a3[8];
  v19 = (_BYTE *)(a1 + v18);
  v20 = (_BYTE *)(a2 + v18);
  v21 = (int *)type metadata accessor for TokenFetcher(0);
  v22 = *((_QWORD *)v21 - 1);
  v23 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      v52((uint64_t)v19, (uint64_t)v20, v6);
      v41 = v21[5];
      v42 = (uint64_t *)&v19[v41];
      v43 = (uint64_t *)&v20[v41];
      v44 = *v43;
      v45 = v43[1];
      outlined copy of Data._Representation(*v43, v45);
      v46 = *v42;
      v47 = v42[1];
      *v42 = v44;
      v42[1] = v45;
      outlined consume of Data._Representation(v46, v47);
      v48 = v21[6];
      v49 = *(void **)&v20[v48];
      v50 = *(void **)&v19[v48];
      *(_QWORD *)&v19[v48] = v49;
      v51 = v49;

      v19[v21[7]] = v20[v21[7]];
      goto LABEL_14;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for TokenFetcher);
    goto LABEL_13;
  }
  if (v25)
  {
LABEL_13:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v53 + 16))(v19, v20, v6);
  v26 = v21[5];
  v27 = (uint64_t *)&v19[v26];
  v28 = (uint64_t *)&v20[v26];
  v29 = *v28;
  v30 = v28[1];
  outlined copy of Data._Representation(*v28, v30);
  *v27 = v29;
  v27[1] = v30;
  v31 = v21[6];
  v32 = *(void **)&v20[v31];
  *(_QWORD *)&v19[v31] = v32;
  v19[v21[7]] = v20[v21[7]];
  v33 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v22 + 56);
  v34 = v32;
  v33(v19, 0, 1, v21);
LABEL_14:
  v36 = a3[9];
  v37 = *(void **)(a2 + v36);
  v38 = *(void **)(a1 + v36);
  *(_QWORD *)(a1 + v36) = v37;
  v39 = v37;

  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

uint64_t initializeWithTake for AspireNetworkManager(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for URL();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for TokenFetcher(0);
  v13 = *((_QWORD *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    *(_OWORD *)&v10[v12[5]] = *(_OWORD *)&v11[v12[5]];
    *(_QWORD *)&v10[v12[6]] = *(_QWORD *)&v11[v12[6]];
    v10[v12[7]] = v11[v12[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for AspireNetworkManager(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int *v21;
  uint64_t v22;
  uint64_t (*v23)(_BYTE *, uint64_t, int *);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  v6 = type metadata accessor for URL();
  v36 = *(_QWORD *)(v6 - 8);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 40);
  v35(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v19 = (_BYTE *)(a1 + v18);
  v20 = (_BYTE *)(a2 + v18);
  v21 = (int *)type metadata accessor for TokenFetcher(0);
  v22 = *((_QWORD *)v21 - 1);
  v23 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      v35((uint64_t)v19, (uint64_t)v20, v6);
      v30 = v21[5];
      v31 = *(_QWORD *)&v19[v30];
      v32 = *(_QWORD *)&v19[v30 + 8];
      *(_OWORD *)&v19[v30] = *(_OWORD *)&v20[v30];
      outlined consume of Data._Representation(v31, v32);
      v33 = v21[6];
      v34 = *(void **)&v19[v33];
      *(_QWORD *)&v19[v33] = *(_QWORD *)&v20[v33];

      v19[v21[7]] = v20[v21[7]];
      goto LABEL_12;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v19, type metadata accessor for TokenFetcher);
    goto LABEL_11;
  }
  if (v25)
  {
LABEL_11:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v36 + 32))(v19, v20, v6);
  *(_OWORD *)&v19[v21[5]] = *(_OWORD *)&v20[v21[5]];
  *(_QWORD *)&v19[v21[6]] = *(_QWORD *)&v20[v21[6]];
  v19[v21[7]] = v20[v21[7]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
LABEL_12:
  v27 = a3[9];
  v28 = *(void **)(a1 + v27);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);

  return a1;
}

uint64_t getEnumTagSinglePayload for AspireNetworkManager()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C15E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for AspireNetworkManager()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C15ED8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenFetcher?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

void type metadata completion function for AspireNetworkManager()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TokenFetcher?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for TokenFetcher?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TokenFetcher?)
  {
    type metadata accessor for TokenFetcher(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TokenFetcher?);
  }
}

unint64_t type metadata accessor for NSURLSessionTask()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSURLSessionTask;
  if (!lazy cache variable for type metadata for NSURLSessionTask)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSURLSessionTask);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined init with take of TokenFetcher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TokenFetcher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t RequestsManager.configCache.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.keyStorage.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RequestsManager.activeUseCaseTracker.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.allowListLock.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.rotationTask.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.cacheCleaner.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.tokenFetcherTask.getter()
{
  return swift_retain();
}

uint64_t RequestsManager.currentTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_retain();
  return v1;
}

uint64_t RequestsManager.allowList.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  v1 = *(os_unfair_lock_s **)(v0 + 48);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t (*default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

uint64_t RequestsManager.__allocating_init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint8_t *a5, uint8_t *a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

_QWORD *RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint8_t *a5, uint8_t *a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  _QWORD v55[2];
  __int128 v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = v7;
  v57 = a6;
  v60 = a2;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = a1;
  if (a1)
  {
    v17 = v59;
  }
  else
  {
    if (one-time initialization token for configCacheFile != -1)
      swift_once();
    v18 = type metadata accessor for URL();
    v19 = __swift_project_value_buffer(v18, (uint64_t)static CacheDirectory.configCacheFile);
    v20 = *(_QWORD *)(v18 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v16, v19, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v18);
    type metadata accessor for ConfigCache();
    swift_allocObject();
    v17 = ConfigCache.init(cacheFile:)((uint64_t)v16);
  }
  v8[2] = v17;
  if (v60)
  {
    swift_retain();
    v8[3] = v60;
    v8[4] = a3;
    if (a4)
    {
LABEL_8:
      swift_unknownObjectRetain();
      v21 = a4;
      goto LABEL_13;
    }
  }
  else
  {
    type metadata accessor for KVSKeyStorage();
    v22 = swift_allocObject();
    swift_retain();
    swift_defaultActor_initialize();
    v23 = objc_allocWithZone(MEMORY[0x24BDD1888]);
    v24 = (void *)MEMORY[0x23B821F68](0xD000000000000013, 0x8000000237D61440);
    v25 = objc_msgSend(v23, sel_initWithStoreIdentifier_type_, v24, 1);

    *(_QWORD *)(v22 + 112) = v25;
    v8[3] = v22;
    v8[4] = &protocol witness table for KVSKeyStorage;
    if (a4)
      goto LABEL_8;
  }
  v26 = one-time initialization token for activeUseCaseTrackerFile;
  swift_unknownObjectRetain();
  if (v26 != -1)
    swift_once();
  v27 = type metadata accessor for URL();
  v28 = __swift_project_value_buffer(v27, (uint64_t)static CacheDirectory.activeUseCaseTrackerFile);
  v29 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v16, v28, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v16, 0, 1, v27);
  v21 = specialized ActiveUseCaseTracker.__allocating_init(persistenceFile:)((uint64_t)v16);
LABEL_13:
  v8[5] = v21;
  v58 = a4;
  swift_retain();
  if (a5)
  {
    v30 = a5;
    v31 = a5;
  }
  else
  {
    v31 = 0;
    v30 = specialized AllowList.__allocating_init()();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<AllowList, os_unfair_lock_s>);
  v32 = swift_allocObject();
  *(_DWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 16) = v30;
  v8[6] = v32;
  v33 = v8[2];
  v34 = v8[5];
  type metadata accessor for RotationTask();
  v35 = swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  v56 = *(_OWORD *)(v8 + 3);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(_QWORD *)(v35 + 112) = v33;
  *(_OWORD *)(v35 + 120) = v56;
  *(_QWORD *)(v35 + 136) = v32;
  *(_QWORD *)(v35 + 144) = v34;
  v36 = v57;
  *(_QWORD *)(v35 + 152) = v57;
  *(_QWORD *)(v35 + 160) = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScheduledActivity<RotationTask>);
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = v35;
  v8[7] = v37;
  v38 = v8[6];
  type metadata accessor for CacheCleaner();
  v39 = (_QWORD *)swift_allocObject();
  v39[2] = v38;
  v39[3] = v36;
  v39[4] = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScheduledActivity<CacheCleaner>);
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = v39;
  v8[8] = v40;
  type metadata accessor for TokenFetcherTask();
  v41 = (_QWORD *)swift_allocObject();
  v41[2] = v38;
  v41[3] = v36;
  v41[4] = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScheduledActivity<TokenFetcherTask>);
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = v41;
  v8[9] = v42;
  v8[10] = v36;
  v8[11] = a7;
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  RequestsManager.loadDynamicAllowList()();
  if (!v43)
  {
    swift_release();
    swift_release();
LABEL_23:
    swift_release();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  v57 = v30;
  v55[1] = v31;
  if (one-time initialization token for daemon != -1)
    swift_once();
  v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.daemon);
  v45 = v43;
  v46 = v43;
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v47, v48))
  {
    swift_release();
    swift_release();

    goto LABEL_23;
  }
  v49 = (uint8_t *)swift_slowAlloc();
  v50 = swift_slowAlloc();
  *(_QWORD *)&v56 = a7;
  v51 = (_QWORD *)v50;
  *(_DWORD *)v49 = 138543362;
  v52 = v43;
  v53 = _swift_stdlib_bridgeErrorToNSError();
  v61 = v53;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *v51 = v53;

  _os_log_impl(&dword_237BC8000, v47, v48, "Failed to load dynamic allow list: %{public}@", v49, 0xCu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  MEMORY[0x23B822DA8](v51, -1, -1);
  MEMORY[0x23B822DA8](v49, -1, -1);

  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
LABEL_24:
  swift_release();
  return v8;
}

Swift::Void __swiftcall RequestsManager.registerScheduledTasks()()
{
  specialized ScheduledActivity.register()();
  specialized ScheduledActivity.register()();
  specialized ScheduledActivity.register()();
}

void specialized ScheduledActivity.register()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD v7[6];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (void *)objc_opt_self();
  swift_retain();
  v3 = objc_msgSend(v2, sel_sharedScheduler);
  v4 = (void *)MEMORY[0x23B821F68](0xD00000000000001FLL, 0x8000000237D61570);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = 0xD00000000000001FLL;
  v5[3] = 0x8000000237D61570;
  v5[4] = &async function pointer to partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  v5[5] = v1;
  v7[4] = closure #1 in ScheduledActivity.registerTask(identifier:handler:)partial apply;
  v7[5] = v5;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v7[3] = &block_descriptor_24;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v4, 0, v6);
  _Block_release(v6);
  swift_release();

}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD v7[6];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (void *)objc_opt_self();
  swift_retain();
  v3 = objc_msgSend(v2, sel_sharedScheduler);
  v4 = (void *)MEMORY[0x23B821F68](0xD00000000000001FLL, 0x8000000237D61550);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = 0xD00000000000001FLL;
  v5[3] = 0x8000000237D61550;
  v5[4] = &async function pointer to partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  v5[5] = v1;
  v7[4] = closure #1 in ScheduledActivity.registerTask(identifier:handler:)partial apply;
  v7[5] = v5;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v7[3] = &block_descriptor_14;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v4, 0, v6);
  _Block_release(v6);
  swift_release();

}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD v7[6];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (void *)objc_opt_self();
  swift_retain();
  v3 = objc_msgSend(v2, sel_sharedScheduler);
  v4 = (void *)MEMORY[0x23B821F68](0xD000000000000023, 0x8000000237D61500);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = 0xD000000000000023;
  v5[3] = 0x8000000237D61500;
  v5[4] = &async function pointer to partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  v5[5] = v1;
  v7[4] = partial apply for closure #1 in ScheduledActivity.registerTask(identifier:handler:);
  v7[5] = v5;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v7[3] = &block_descriptor_0;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v4, 0, v6);
  _Block_release(v6);
  swift_release();

}

uint64_t RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[13] = a5;
  v6[14] = v5;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  v6[15] = type metadata accessor for AspireApiEvaluationKey(0);
  v6[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v6[17] = swift_task_alloc();
  v7 = type metadata accessor for SecretKey();
  v6[18] = v7;
  v6[19] = *(_QWORD *)(v7 - 8);
  v6[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiKeyStatus?);
  v6[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v6[22] = swift_task_alloc();
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  v8 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v6[25] = v8;
  v6[26] = *(_QWORD *)(v8 - 8);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  v9 = type metadata accessor for UserIdentifier();
  v6[32] = v9;
  v6[33] = *(_QWORD *)(v9 - 8);
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v6[36] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];

  if (one-time initialization token for daemon != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 80);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 72);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v46[0] = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v2, v3, "rotateKeysOffline for use case %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v8, -1, -1);
    MEMORY[0x23B822DA8](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 112) + 48);
  v10 = v9 + 4;
  v11 = v9 + 6;
  os_unfair_lock_lock(v9 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v10, v46);
  os_unfair_lock_unlock(v11);
  v12 = *(_QWORD *)(v46[0] + 48);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_13;
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v17 = (uint64_t *)(*(_QWORD *)(v12 + 56) + 16 * v15);
  v18 = *v17;
  *(_QWORD *)(v0 + 296) = *v17;
  v19 = v17[1];
  *(_QWORD *)(v0 + 304) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v11);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v10, v46);
  os_unfair_lock_unlock(v11);
  v20 = *(_QWORD *)(v46[0] + 32);
  swift_bridgeObjectRetain();
  swift_release();
  if (*(_QWORD *)(v20 + 16))
  {
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    v22 = *(_QWORD *)(v0 + 288);
    if ((v23 & 1) != 0)
    {
      v24 = v21;
      v44 = *(_QWORD *)(v20 + 56);
      v25 = type metadata accessor for UseCaseGroup();
      v26 = *(_QWORD *)(v25 - 8);
      outlined init with copy of SecretKey(v44 + *(_QWORD *)(v26 + 72) * v24, v22, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
    }
    else
    {
      v25 = type metadata accessor for UseCaseGroup();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 288);
    v25 = type metadata accessor for UseCaseGroup();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v28, 1, 1, v25);
  }
  v29 = *(_QWORD *)(v0 + 288);
  swift_bridgeObjectRelease();
  type metadata accessor for UseCaseGroup();
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v29, 1, v25);
  v31 = *(_QWORD *)(v0 + 288);
  if (v30 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for UseCaseGroup?);
    goto LABEL_14;
  }
  v32 = *(_QWORD **)(v0 + 112);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 288), &demangling cache variable for type metadata for UseCaseGroup?);
  v33 = v32[2];
  v34 = v32[3];
  *(_QWORD *)(v0 + 312) = v34;
  v35 = v32[4];
  *(_QWORD *)(v0 + 320) = v35;
  swift_retain();
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v11);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v10, v46);
  os_unfair_lock_unlock(v11);
  v37 = *(_QWORD *)(v0 + 104);
  v36 = *(_QWORD **)(v0 + 112);
  v42 = v46[0];
  v38 = v36[5];
  v39 = v36[11];
  v43 = v36[10];
  v45 = *(_QWORD *)(v0 + 96);
  type metadata accessor for KeyRotation();
  v40 = swift_allocObject();
  *(_QWORD *)(v0 + 328) = v40;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(_QWORD *)(v40 + 216) = 0;
  *(_OWORD *)(v40 + 200) = 0u;
  *(_OWORD *)(v40 + 184) = 0u;
  *(_QWORD *)(v40 + 112) = v33;
  *(_QWORD *)(v40 + 120) = v34;
  *(_QWORD *)(v40 + 128) = v35;
  *(_QWORD *)(v40 + 136) = v42;
  *(_QWORD *)(v40 + 144) = v38;
  *(_QWORD *)(v40 + 152) = v43;
  *(_QWORD *)(v40 + 168) = v45;
  *(_QWORD *)(v40 + 176) = v37;
  *(_QWORD *)(v40 + 160) = v39;
  v41 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 336) = v41;
  *v41 = v0;
  v41[1] = RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:);
  return KeyRotation.rotateUserId(groupName:)(*(_QWORD *)(v0 + 280), v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t inited;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiKeyStatus>);
  v4 = type metadata accessor for AspireApiKeyStatus(0);
  *(_QWORD *)(v0 + 352) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v0 + 360) = v5;
  LODWORD(v5) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 416) = v5;
  v6 = (v5 + 32) & ~(unint64_t)v5;
  v7 = swift_allocObject();
  *(_QWORD *)(v0 + 368) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_237D540E0;
  outlined init with copy of SecretKey(v2, v7 + v6, type metadata accessor for AspireApiKeyStatus);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540E0;
  *(_QWORD *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = v1;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 376) = specialized Set.init<A>(_:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;

  v1 = v0[43];
  v0[48] = (uint64_t)KeyRotation.collectKeyStatusesToUpload(groupName:userId:keyStatuses:activeUseCases:)(v0[31], v0[37], v0[38], v0[35], v0[46], v0[47]);
  v0[49] = v1;
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ObjectType;
  _QWORD *v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD);

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 248), v3, &demangling cache variable for type metadata for UserIdentifier?);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(_QWORD *)(v0 + 384);
  if (v4 == 1)
  {
    v6 = *(_QWORD *)(v0 + 280);
    v8 = *(_QWORD *)(v0 + 240);
    v7 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for UserIdentifier?);
    outlined destroy of AspireApiPECConfig(v6, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    v9 = v8;
    v10 = &demangling cache variable for type metadata for UserIdentifier?;
LABEL_8:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xF000000000000000);
  }
  outlined init with take of SecretKey(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 272), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  if (*(_QWORD *)(v5 + 16))
  {
    outlined init with copy of SecretKey(*(_QWORD *)(v0 + 384)+ ((*(unsigned __int8 *)(v0 + 416) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 416)), *(_QWORD *)(v0 + 168), type metadata accessor for AspireApiKeyStatus);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  v12 = *(_QWORD *)(v0 + 352);
  v13 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v14, v11, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) == 1)
  {
    v16 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 280);
    v17 = *(_QWORD *)(v0 + 248);
    v18 = *(_QWORD *)(v0 + 200);
    v19 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 192);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 168), &demangling cache variable for type metadata for AspireApiKeyStatus?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, 1, 1, v18);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiPECConfig(v16, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v17, &demangling cache variable for type metadata for UserIdentifier?);
    outlined destroy of AspireApiPECConfig(v15, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    v10 = &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?;
    v9 = v20;
    goto LABEL_8;
  }
  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 208);
  v24 = *(_QWORD *)(v0 + 184);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 352) + 24), v24, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  *(_QWORD *)(v0 + 400) = v25;
  if (v25(v24, 1, v22) == 1)
  {
    v27 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 200);
    v28 = *(_QWORD *)(v0 + 184);
    *(_QWORD *)v27 = MEMORY[0x24BEE4AF8];
    *(_BYTE *)(v27 + 8) = 0;
    UnknownStorage.init()();
    v29 = v27 + *(int *)(v26 + 28);
    v30 = type metadata accessor for AspireHeEncryptionParameters(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of SecretKey(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  v41 = *(_QWORD *)(v0 + 320);
  v32 = *(_QWORD *)(v0 + 264);
  v31 = *(_QWORD *)(v0 + 272);
  v33 = *(_QWORD *)(v0 + 256);
  v35 = *(_QWORD *)(v0 + 224);
  v34 = *(_QWORD *)(v0 + 232);
  v36 = *(_QWORD *)(v0 + 200);
  v37 = *(_QWORD *)(v0 + 208);
  v38 = *(_QWORD *)(v0 + 192);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 168), type metadata accessor for AspireApiKeyStatus);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
  outlined init with take of SecretKey(v38, v35, type metadata accessor for AspireHeEvaluationKeyConfig);
  ObjectType = swift_getObjectType();
  outlined init with copy of SecretKey(v31, v34, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v33);
  v42 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(**(int **)(v41 + 16) + *(_QWORD *)(v41 + 16));
  v40 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 408) = v40;
  *v40 = v0;
  v40[1] = RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:);
  return v42(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 232), ObjectType, *(_QWORD *)(v0 + 320));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = specialized Message.hash()();
  if (v1)
  {
    v5 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 280);
    v6 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 224);
    swift_release();
    outlined destroy of AspireApiPECConfig(v7, type metadata accessor for AspireHeEvaluationKeyConfig);
    outlined destroy of AspireApiPECConfig(v5, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for UserIdentifier?);
    outlined destroy of AspireApiPECConfig(v4, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v9 = (uint64_t)v2;
  v10 = v3;
  v11 = *(_QWORD *)(*(_QWORD *)(v0 + 272) + *(int *)(*(_QWORD *)(v0 + 256) + 24));
  if (*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v9, v10);
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BDCDCF8], specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v13 & 1) != 0)
    {
      outlined init with copy of SecretKey(*(_QWORD *)(v11 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 152) + 72) * v12, *(_QWORD *)(v0 + 136), (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      v14 = 0;
    }
    else
    {
      v14 = 1;
    }
    v15 = *(_QWORD *)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 136);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v17, v14, 1, v15);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v9, v10);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15) != 1)
    {
      v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
      v24 = *(_QWORD *)(v0 + 352);
      v25 = *(_QWORD *)(v0 + 200);
      v26 = *(_QWORD *)(v0 + 176);
      v27 = *(_QWORD *)(v0 + 88);
      outlined init with take of SecretKey(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160), (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v27 + *(int *)(v24 + 24), v26, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      v28 = v23(v26, 1, v25);
      v29 = *(_QWORD *)(v0 + 216);
      if (v28 == 1)
      {
        v30 = *(_QWORD *)(v0 + 200);
        v31 = *(_QWORD *)(v0 + 176);
        *(_QWORD *)v29 = MEMORY[0x24BEE4AF8];
        *(_BYTE *)(v29 + 8) = 0;
        UnknownStorage.init()();
        v32 = v29 + *(int *)(v30 + 28);
        v33 = type metadata accessor for AspireHeEncryptionParameters(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      }
      else
      {
        outlined init with take of SecretKey(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 216), type metadata accessor for AspireHeEvaluationKeyConfig);
      }
      generateEvaluationKey(secretKey:config:)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 128));
      outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 216), type metadata accessor for AspireHeEvaluationKeyConfig);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
      v34 = Message.serializedData(partial:)();
      v36 = v35;
      v38 = *(_QWORD *)(v0 + 272);
      v37 = *(_QWORD *)(v0 + 280);
      v39 = *(_QWORD *)(v0 + 248);
      v40 = *(_QWORD *)(v0 + 224);
      v42 = *(_QWORD *)(v0 + 128);
      v44 = *(_QWORD *)(v0 + 160);
      swift_release();
      outlined consume of Data._Representation(v9, v10);
      outlined destroy of AspireApiPECConfig(v42, type metadata accessor for AspireApiEvaluationKey);
      outlined destroy of AspireApiPECConfig(v44, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      outlined destroy of AspireApiPECConfig(v40, type metadata accessor for AspireHeEvaluationKeyConfig);
      outlined destroy of AspireApiPECConfig(v38, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for UserIdentifier?);
      outlined destroy of AspireApiPECConfig(v37, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
      v41 = v34;
      v43 = v36;
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 136), 1, 1, *(_QWORD *)(v0 + 144));
  }
  v19 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 280);
  v20 = *(_QWORD *)(v0 + 248);
  v21 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 136);
  swift_release();
  outlined consume of Data._Representation(v9, v10);
  outlined destroy of AspireApiPECConfig(v21, type metadata accessor for AspireHeEvaluationKeyConfig);
  outlined destroy of AspireApiPECConfig(v19, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for UserIdentifier?);
  outlined destroy of AspireApiPECConfig(v18, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v22, &demangling cache variable for type metadata for SecretKey?);
  v41 = 0;
  v43 = 0xF000000000000000;
LABEL_10:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v41, v43);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 280);
  swift_release();
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  result = Set.init(minimumCapacity:)();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (Swift::Int *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

char *specialized Message.hash()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[14];

  v9[13] = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for SHA256();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = type metadata accessor for SHA256Digest();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AspireHeEvaluationKeyConfig(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeEvaluationKeyConfig and conformance AspireHeEvaluationKeyConfig, type metadata accessor for AspireHeEvaluationKeyConfig, (uint64_t)&protocol conformance descriptor for AspireHeEvaluationKeyConfig);
  Message.serializedData(partial:)();
  if (!v0)
  {
    v9[4] = v2;
    v9[5] = v5;
    v7 = v6;
    v9[3] = lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    dispatch thunk of HashFunction.init()();
    __asm { BR              X10 }
  }
  return v5;
}

void RequestsManager.validateConfig(useCase:keyStatus:encryptionParams:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  os_unfair_lock_s *v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  unint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *boxed_opaque_existential_1;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  Swift::String v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  Swift::String v119;
  unint64_t v120;
  uint64_t v121;
  Swift::String v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154[5];
  uint64_t v155;

  v152 = a4;
  v147 = a3;
  v145 = type metadata accessor for AspireApiKeyStatus(0);
  v8 = MEMORY[0x24BDAC7A8](v145);
  v142 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v132 = (uint64_t)&v124 - v10;
  v11 = type metadata accessor for UnknownStorage();
  v138 = *(_QWORD *)(v11 - 8);
  v139 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v137 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v128 = (uint64_t)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v126 = (uint64_t)&v124 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v134 = (uint64_t)&v124 - v18;
  v146 = type metadata accessor for AspireHeEncryptionParameters(0);
  v143 = *(_QWORD *)(v146 - 8);
  v19 = MEMORY[0x24BDAC7A8](v146);
  v129 = (uint64_t *)((char *)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = MEMORY[0x24BDAC7A8](v19);
  v125 = (uint64_t *)((char *)&v124 - v22);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v131 = (uint64_t)&v124 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v135 = (uint64_t)&v124 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v136 = (char *)&v124 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v127 = (uint64_t)&v124 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v124 = (uint64_t)&v124 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v133 = (uint64_t)&v124 - v33;
  v144 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v140 = *(_QWORD *)(v144 - 8);
  v34 = MEMORY[0x24BDAC7A8](v144);
  v148 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v124 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = MEMORY[0x24BDAC7A8](v34);
  v130 = (uint64_t *)((char *)&v124 - v37);
  MEMORY[0x24BDAC7A8](v36);
  v150 = (uint64_t)&v124 - v38;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)&v124 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for UseCaseGroup();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = MEMORY[0x24BDAC7A8](v42);
  v141 = (uint64_t)&v124 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v44);
  v151 = (uint64_t)&v124 - v46;
  v47 = *(os_unfair_lock_s **)(v4 + 48);
  v48 = v47 + 4;
  v49 = v47 + 6;
  os_unfair_lock_lock(v47 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v48, v154);
  if (v5)
  {
    os_unfair_lock_unlock(v49);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v49);
  v149 = a1;
  v153 = a2;
  AllowList.group(useCase:)(a1, a2, (uint64_t)v41);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42) != 1)
  {
    v58 = v151;
    outlined init with take of SecretKey((uint64_t)v41, v151, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    os_unfair_lock_lock(v49);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v48, v154);
    os_unfair_lock_unlock(v49);
    v59 = AllowList.isAllowListed(group:encryptionParameters:)(v58, v152);
    v60 = (uint64_t)v148;
    v61 = v150;
    v62 = v59;
    swift_release();
    if ((v62 & 1) != 0)
    {
      v63 = v133;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v147 + *(int *)(v145 + 24), v133, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      v64 = v144;
      v148 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
      if (v148(v63, 1, v144) == 1)
      {
        *(_QWORD *)v61 = MEMORY[0x24BEE4AF8];
        *(_BYTE *)(v61 + 8) = 0;
        UnknownStorage.init()();
        v65 = v61 + *(int *)(v64 + 28);
        v66 = v143;
        v67 = v61;
        v68 = v64;
        v69 = v146;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v143 + 56))(v65, 1, 1, v146);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v63, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
      }
      else
      {
        outlined init with take of SecretKey(v63, v61, type metadata accessor for AspireHeEvaluationKeyConfig);
        v67 = v61;
        v68 = v64;
        v69 = v146;
        v66 = v143;
      }
      v83 = (uint64_t)v136;
      v84 = v134;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v67 + *(int *)(v68 + 28), v134, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
      v86 = v85(v84, 1, v69);
      v142 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v85;
      if (v86 == 1)
      {
        *(_QWORD *)v83 = 0;
        *(_QWORD *)(v83 + 8) = 0;
        *(_QWORD *)(v83 + 16) = MEMORY[0x24BEE4AF8];
        *(_QWORD *)(v83 + 24) = 0;
        *(_BYTE *)(v83 + 32) = 1;
        *(_QWORD *)(v83 + 40) = 0;
        *(_BYTE *)(v83 + 48) = 1;
        *(_QWORD *)(v83 + 56) = 0;
        *(_BYTE *)(v83 + 64) = 1;
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v84, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      }
      else
      {
        outlined init with take of SecretKey(v84, v83, type metadata accessor for AspireHeEncryptionParameters);
      }
      v87 = v152;
      outlined destroy of AspireApiPECConfig(v150, type metadata accessor for AspireHeEvaluationKeyConfig);
      v88 = v135;
      outlined init with copy of SecretKey(v87, v135, type metadata accessor for AspireHeEncryptionParameters);
      v89 = v83 + *(int *)(v69 + 40);
      v90 = v83;
      v92 = v138;
      v91 = v139;
      v93 = v137;
      (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v137, v89, v139);
      (*(void (**)(uint64_t, char *, uint64_t))(v92 + 40))(v88 + *(int *)(v69 + 40), v93, v91);
      v154[3] = v69;
      v154[4] = lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v154);
      outlined init with copy of SecretKey(v88, (uint64_t)boxed_opaque_existential_1, type metadata accessor for AspireHeEncryptionParameters);
      v95 = dispatch thunk of Message.isEqualTo(message:)();
      outlined destroy of AspireApiPECConfig(v88, type metadata accessor for AspireHeEncryptionParameters);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v154);
      outlined destroy of AspireApiPECConfig(v90, type metadata accessor for AspireHeEncryptionParameters);
      if ((v95 & 1) == 0)
      {
        if (one-time initialization token for framework != -1)
          swift_once();
        v96 = type metadata accessor for Logger();
        __swift_project_value_buffer(v96, (uint64_t)static Logger.framework);
        v97 = v132;
        outlined init with copy of SecretKey(v147, v132, type metadata accessor for AspireApiKeyStatus);
        v98 = v131;
        outlined init with copy of SecretKey(v152, v131, type metadata accessor for AspireHeEncryptionParameters);
        swift_bridgeObjectRetain_n();
        v99 = Logger.logObject.getter();
        v100 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v99, v100))
        {
          v101 = swift_slowAlloc();
          v152 = swift_slowAlloc();
          v154[0] = v152;
          *(_DWORD *)v101 = 136446722;
          v102 = v124;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v97 + *(int *)(v145 + 24), v124, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
          v103 = v144;
          if (v148(v102, 1, v144) == 1)
          {
            v104 = v130;
            *v130 = MEMORY[0x24BEE4AF8];
            *((_BYTE *)v104 + 8) = 0;
            UnknownStorage.init()();
            v105 = v146;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v143 + 56))((char *)v104 + *(int *)(v103 + 28), 1, 1, v146);
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v102, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
          }
          else
          {
            v104 = v130;
            outlined init with take of SecretKey(v102, (uint64_t)v130, type metadata accessor for AspireHeEvaluationKeyConfig);
            v105 = v146;
          }
          v117 = v126;
          outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v104 + *(int *)(v103 + 28), v126, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          if (v142(v117, 1, v105) == 1)
          {
            v118 = v125;
            *v125 = 0;
            v118[1] = 0;
            v118[2] = MEMORY[0x24BEE4AF8];
            v118[3] = 0;
            *((_BYTE *)v118 + 32) = 1;
            v118[5] = 0;
            *((_BYTE *)v118 + 48) = 1;
            v118[7] = 0;
            *((_BYTE *)v118 + 64) = 1;
            UnknownStorage.init()();
            outlined destroy of AMDPbHEConfig.OneOf_Config?(v117, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
          }
          else
          {
            v118 = v125;
            outlined init with take of SecretKey(v117, (uint64_t)v125, type metadata accessor for AspireHeEncryptionParameters);
          }
          outlined destroy of AspireApiPECConfig((uint64_t)v130, type metadata accessor for AspireHeEvaluationKeyConfig);
          v119 = Message.textFormatString()();
          outlined destroy of AspireApiPECConfig((uint64_t)v118, type metadata accessor for AspireHeEncryptionParameters);
          v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119._countAndFlagsBits, (unint64_t)v119._object, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of AspireApiPECConfig(v132, type metadata accessor for AspireApiKeyStatus);
          *(_WORD *)(v101 + 12) = 2082;
          v120 = v153;
          swift_bridgeObjectRetain();
          v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v120, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v101 + 22) = 2082;
          v121 = v131;
          v122 = Message.textFormatString()();
          v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122._countAndFlagsBits, (unint64_t)v122._object, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of AspireApiPECConfig(v121, type metadata accessor for AspireHeEncryptionParameters);
          _os_log_impl(&dword_237BC8000, v99, v100, "Invalid key config encryptionParameters '%{public}s' for useCase '%{public}s', expected: '%{public}s'", (uint8_t *)v101, 0x20u);
          v123 = v152;
          swift_arrayDestroy();
          MEMORY[0x23B822DA8](v123, -1, -1);
          MEMORY[0x23B822DA8](v101, -1, -1);
        }
        else
        {
          outlined destroy of AspireApiPECConfig(v97, type metadata accessor for AspireApiKeyStatus);
          swift_bridgeObjectRelease_n();
          outlined destroy of AspireApiPECConfig(v98, type metadata accessor for AspireHeEncryptionParameters);
        }

        type metadata accessor for CipherMLError();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        v116 = v151;
        goto LABEL_43;
      }
    }
    else
    {
      if (one-time initialization token for framework != -1)
        swift_once();
      v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.framework);
      v71 = v142;
      outlined init with copy of SecretKey(v147, (uint64_t)v142, type metadata accessor for AspireApiKeyStatus);
      v72 = v141;
      outlined init with copy of SecretKey(v58, v141, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      swift_bridgeObjectRetain_n();
      v73 = Logger.logObject.getter();
      v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = swift_slowAlloc();
        v152 = swift_slowAlloc();
        v154[0] = v152;
        *(_DWORD *)v75 = 136446722;
        v76 = v127;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v71 + *(int *)(v145 + 24), v127, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        v77 = v144;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48))(v76, 1, v144) == 1)
        {
          v78 = MEMORY[0x24BEE4AF8];
          *(_QWORD *)v60 = MEMORY[0x24BEE4AF8];
          *(_BYTE *)(v60 + 8) = 0;
          UnknownStorage.init()();
          v79 = v60 + *(int *)(v77 + 28);
          v80 = v77;
          v81 = v143;
          v82 = v146;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v143 + 56))(v79, 1, 1, v146);
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v76, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
        }
        else
        {
          v78 = MEMORY[0x24BEE4AF8];
          outlined init with take of SecretKey(v76, v60, type metadata accessor for AspireHeEvaluationKeyConfig);
          v82 = v146;
          v80 = v77;
          v81 = v143;
        }
        v106 = v60 + *(int *)(v80 + 28);
        v107 = v128;
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v106, v128, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v107, 1, v82) == 1)
        {
          v108 = v129;
          *v129 = 0;
          v108[1] = 0;
          v108[2] = v78;
          v108[3] = 0;
          *((_BYTE *)v108 + 32) = 1;
          v108[5] = 0;
          *((_BYTE *)v108 + 48) = 1;
          v108[7] = 0;
          *((_BYTE *)v108 + 64) = 1;
          v109 = v108;
          UnknownStorage.init()();
          outlined destroy of AMDPbHEConfig.OneOf_Config?(v107, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
        }
        else
        {
          v109 = v129;
          outlined init with take of SecretKey(v107, (uint64_t)v129, type metadata accessor for AspireHeEncryptionParameters);
        }
        outlined destroy of AspireApiPECConfig(v60, type metadata accessor for AspireHeEvaluationKeyConfig);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type AspireHeEncryptionParameters and conformance AspireHeEncryptionParameters, type metadata accessor for AspireHeEncryptionParameters, (uint64_t)&protocol conformance descriptor for AspireHeEncryptionParameters);
        v110 = Message.textFormatString()();
        outlined destroy of AspireApiPECConfig((uint64_t)v109, type metadata accessor for AspireHeEncryptionParameters);
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110._countAndFlagsBits, (unint64_t)v110._object, v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AspireApiPECConfig((uint64_t)v142, type metadata accessor for AspireApiKeyStatus);
        *(_WORD *)(v75 + 12) = 2082;
        v111 = v153;
        swift_bridgeObjectRetain();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v111, v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v75 + 22) = 2082;
        v112 = v141;
        v113 = HE.SecurityLevel.rawValue.getter();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AspireApiPECConfig(v112, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
        _os_log_impl(&dword_237BC8000, v73, v74, "Invalid key config encryptionParameters '%{public}s' for useCase '%{public}s' and security level '%{public}s'", (uint8_t *)v75, 0x20u);
        v115 = v152;
        swift_arrayDestroy();
        MEMORY[0x23B822DA8](v115, -1, -1);
        MEMORY[0x23B822DA8](v75, -1, -1);

        v58 = v151;
      }
      else
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v71, type metadata accessor for AspireApiKeyStatus);
        swift_bridgeObjectRelease_n();
        outlined destroy of AspireApiPECConfig(v72, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);

      }
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    v116 = v58;
LABEL_43:
    outlined destroy of AspireApiPECConfig(v116, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    return;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v41, &demangling cache variable for type metadata for UseCaseGroup?);
  if (one-time initialization token for framework != -1)
    swift_once();
  v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)static Logger.framework);
  v51 = v153;
  swift_bridgeObjectRetain_n();
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.error.getter();
  v54 = os_log_type_enabled(v52, v53);
  v55 = v149;
  if (v54)
  {
    v56 = (uint8_t *)swift_slowAlloc();
    v57 = swift_slowAlloc();
    v154[0] = v57;
    *(_DWORD *)v56 = 136446210;
    swift_bridgeObjectRetain();
    v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v51, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v52, v53, "No group associated with use-case '%{public}s'", v56, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v57, -1, -1);
    MEMORY[0x23B822DA8](v56, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
}

uint64_t RequestsManager.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t RequestsManager.__deallocating_deinit()
{
  RequestsManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BDCDCF8], specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for HE.SecurityLevel();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type HE.SecurityLevel and conformance HE.SecurityLevel, (uint64_t (*)(uint64_t))MEMORY[0x24BE2A0C8], MEMORY[0x24BE2A0E0]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _BYTE v10[72];

  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for HE.SecurityLevel();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type HE.SecurityLevel and conformance HE.SecurityLevel, (uint64_t (*)(uint64_t))MEMORY[0x24BE2A0C8], MEMORY[0x24BE2A0E8]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return TokenFetcherTask.run()();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  _QWORD *v6;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = *(os_unfair_lock_s **)(static TokenCache.shared + OBJC_IVAR____TtC8CipherML10TokenCache_tokensForUserLock);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  partial apply for closure #1 in TokenCache.pruneCache()(v2);
  os_unfair_lock_unlock(v3);
  TokenCache.save()();
  if (v4)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  return CacheCleaner.cleanPirCaches()();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return RotationTask.run()();
}

uint64_t specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *a1;
  return swift_task_switch();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for RequestsManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for RequestsManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RequestsManager.__allocating_init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  return ((uint64_t (__cdecl *)())((char *)&async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()
                                + async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  return ((uint64_t (*)(_QWORD *))((char *)&async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()
                                           + async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()))((_QWORD *)(v1 + 16));
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = partial apply for specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register();
  return ((uint64_t (__cdecl *)())((char *)&async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()
                                + async function pointer to specialized implicit closure #2 in implicit closure #1 in ScheduledActivity.register()))();
}

uint64_t partial apply for closure #1 in ScheduledActivity.registerTask(identifier:handler:)(void *a1)
{
  uint64_t v1;

  return closure #1 in ScheduledActivity.registerTask(identifier:handler:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in TokenCache.pruneCache()(uint64_t *a1)
{
  uint64_t **v1;

  return closure #1 in TokenCache.pruneCache()(a1, v1);
}

uint64_t objectdestroyTm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void *PrivateAccessToken.TokenTypeBlindRSA.unsafeMutableAddressor()
{
  return &static PrivateAccessToken.TokenTypeBlindRSA;
}

uint64_t static PrivateAccessToken.TokenTypeBlindRSA.getter()
{
  return 2;
}

uint64_t PrivateAccessToken.Token.nonce.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrivateAccessToken.Token.challengeDigest.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PrivateAccessToken.TokenRequest.truncatedKeyId.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t PrivateAccessToken.TokenRequest.blindedMsg.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  outlined copy of Data._Representation(a2, a3);
  return a2;
}

void PrivateAccessToken.TokenRequest.requestData.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

void sub_237C1BCB8()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  __int16 v3;
  _QWORD v4[6];
  uint64_t v5;

  if (!__OFADD__(BYTE6(v0), 3))
  {
    v4[5] = specialized Data.init(capacity:)(BYTE6(v0) + 3);
    v5 = v2;
    v3 = bswap32(v1) >> 16;
    v4[3] = MEMORY[0x24BEE0F88];
    v4[4] = MEMORY[0x24BDCFB90];
    v4[0] = &v3;
    v4[1] = v4;
    __swift_project_boxed_opaque_existential_1(v4, MEMORY[0x24BEE0F88]);
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v4);
    __asm { BR              X12 }
  }
  __break(1u);
  JUMPOUT(0x237C1BE14);
}

Swift::Void __swiftcall Data.appendU16BE(_:)(Swift::UInt16 a1)
{
  __int16 v1;
  _QWORD v2[6];

  v2[5] = *MEMORY[0x24BDAC8D0];
  v1 = bswap32(a1) >> 16;
  v2[3] = MEMORY[0x24BEE0F88];
  v2[4] = MEMORY[0x24BDCFB90];
  v2[0] = &v1;
  v2[1] = v2;
  __swift_project_boxed_opaque_existential_1(v2, MEMORY[0x24BEE0F88]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
}

uint64_t static PrivateAccessToken.TokenRequest.request(challenge:publicKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized static PrivateAccessToken.TokenRequest.request(challenge:publicKey:)(a1, a2, a3, a4) & 0xFFFFFF;
}

void specialized BidirectionalCollection.last.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t PrivateAccessToken.ClientState.__allocating_init(tokenWaitingActivation:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t PrivateAccessToken.ClientState.init(tokenWaitingActivation:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

id PrivateAccessToken.ClientState.tokenWaitingActivation.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t PrivateAccessToken.ClientState.finalize(tokenResponse:)()
{
  uint64_t v0;
  void *v1;
  Class isa;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 16);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v16 = 0;
  v3 = objc_msgSend(v1, sel_activateTokenWithServerResponse_error_, isa, &v16);

  v4 = (void *)v16;
  if (v3)
  {
    v16 = xmmword_237D54090;
    v5 = v4;
    v6 = objc_msgSend(v3, sel_tokenContent);
    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    Data.append(_:)();
    outlined consume of Data._Representation(v7, v9);
    v10 = objc_msgSend(v3, sel_signature);
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    Data.append(_:)();
    outlined consume of Data._Representation(v11, v13);
    return v16;
  }
  else
  {
    v15 = (id)v16;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t PrivateAccessToken.ClientState.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PrivateAccessToken.ClientState.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t Data.init(base64urlEncoded:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  v0 = Data.init(base64Encoded:options:)();
  v2 = v1;
  outlined copy of Data?(v0, v1);
  swift_bridgeObjectRelease();
  if (v2 >> 60 != 15)
    outlined consume of Data?(v0, v2);
  return v0;
}

Swift::String __swiftcall Data.base64urlEncodedString()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String result;

  Data.base64EncodedString(options:)(0);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v2 = v1;
  swift_bridgeObjectRelease();
  v3 = v0;
  v4 = v2;
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  size_t v10;

  Data.InlineSlice.ensureUniqueReference()();
  v2 = *a1;
  v3 = a1[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = __DataStorage._bytes.getter();
  if (!v4)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v5 = v4;
  v6 = __DataStorage._offset.getter();
  v7 = v2 - v6;
  if (__OFSUB__(v2, v6))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = v3 - v2;
  v9 = __DataStorage._length.getter();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  arc4random_buf((void *)(v5 + v7), v10);
}

uint64_t specialized Data.init(capacity:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>;
  if (!lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
    result = MEMORY[0x23B822CDC](MEMORY[0x24BDD06A0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>);
  }
  return result;
}

id specialized @nonobjc RSABSSATokenBlinder.init(publicKey:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithPublicKey_error_, isa, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t specialized static PrivateAccessToken.TokenRequest.request(challenge:publicKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD v18[11];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a2;
  v18[9] = a1;
  v24 = *MEMORY[0x24BDAC8D0];
  v19 = type metadata accessor for SHA256();
  v18[8] = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v18[10] = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SHA256Digest();
  v8 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for __DataStorage();
  swift_allocObject();
  v12 = __DataStorage.init(length:)();
  v22 = 0x2000000000;
  v23 = v12;
  specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&v22);
  v13 = v22;
  v14 = v23;
  v15 = objc_allocWithZone(MEMORY[0x24BE2A400]);
  outlined copy of Data._Representation(a3, a4);
  v16 = specialized @nonobjc RSABSSATokenBlinder.init(publicKey:)();
  outlined consume of Data._Representation(a3, a4);
  if (!v4)
  {
    v18[3] = v11;
    v18[4] = v13;
    v18[5] = v16;
    v18[6] = v8;
    v18[7] = v10;
    v18[2] = v14 | 0x4000000000000000;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    dispatch thunk of HashFunction.init()();
    __asm { BR              X10 }
  }
  return swift_release();
}

void specialized static PrivateAccessToken.newBlindRSATokenChallenge(for:)(uint64_t a1, unint64_t a2)
{
  __int16 v5;
  _QWORD v6[5];
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = xmmword_237D54090;
  v5 = 512;
  v6[3] = MEMORY[0x24BEE0F88];
  v6[4] = MEMORY[0x24BDCFB90];
  v6[0] = &v5;
  v6[1] = v6;
  __swift_project_boxed_opaque_existential_1(v6, MEMORY[0x24BEE0F88]);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
  swift_bridgeObjectRetain();
  specialized Data.init<A>(_:)(a1, a2);
  __asm { BR              X11 }
}

uint64_t sub_237C1CF10()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  __int16 v5;
  __int16 *v6;
  __int16 **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = bswap32(BYTE6(v2)) >> 16;
  v8 = v0;
  v9 = v3;
  v6 = &v5;
  v7 = &v6;
  __swift_project_boxed_opaque_existential_1(&v6, v0);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v6);
  Data.append(_:)();
  Data._Representation.append(contentsOf:)();
  v5 = 0;
  v8 = v0;
  v9 = v3;
  v6 = &v5;
  v7 = &v6;
  __swift_project_boxed_opaque_existential_1(&v6, v0);
  Data._Representation.append(contentsOf:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v6);
  outlined consume of Data._Representation(v1, v2);
  return v10;
}

ValueMetadata *type metadata accessor for PrivateAccessToken()
{
  return &type metadata for PrivateAccessToken;
}

uint64_t destroy for PrivateAccessToken.Token()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for PrivateAccessToken.Token(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PrivateAccessToken.Token(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PrivateAccessToken.Token(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrivateAccessToken.Token(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrivateAccessToken.Token(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateAccessToken.Token()
{
  return &type metadata for PrivateAccessToken.Token;
}

uint64_t destroy for PrivateAccessToken.TokenRequest(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PrivateAccessToken.TokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for PrivateAccessToken.TokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for PrivateAccessToken.TokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrivateAccessToken.TokenRequest(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PrivateAccessToken.TokenRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateAccessToken.TokenRequest()
{
  return &type metadata for PrivateAccessToken.TokenRequest;
}

uint64_t type metadata accessor for PrivateAccessToken.ClientState()
{
  return objc_opt_self();
}

uint64_t method lookup function for PrivateAccessToken.ClientState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PrivateAccessToken.ClientState.__allocating_init(tokenWaitingActivation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PrivateAccessToken.ClientState.finalize(tokenResponse:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

unint64_t lazy protocol witness table accessor for type AuthenticationError and conformance AuthenticationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError;
  if (!lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AuthenticationError, &type metadata for AuthenticationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError;
  if (!lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AuthenticationError, &type metadata for AuthenticationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthenticationError and conformance AuthenticationError);
  }
  return result;
}

char *Message.hash()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  _QWORD v11[5];
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for SHA256();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = type metadata accessor for SHA256Digest();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v12;
  Message.serializedData(partial:)();
  if (!v6)
  {
    v11[4] = v3;
    v12 = v5;
    v8 = v7;
    v11[3] = lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    dispatch thunk of HashFunction.init()();
    v9 = (char *)&loc_237C1D614 + *((int *)qword_237C1D8F0 + (v8 >> 62));
    v11[2] = v1;
    __asm { BR              X10 }
  }
  return v5;
}

uint64_t AspireApiPIRConfig.validate(static:useCase:allowList:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a3;
  v26 = a4;
  v24 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AspireHeEncryptionParameters(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UseCaseGroup();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  if (*a1 >= *(_QWORD *)(*(_QWORD *)v4 + 16))
  {
    v23 = (uint64_t)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    AllowList.group(useCase:)(v24, v25, (uint64_t)v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v15, &demangling cache variable for type metadata for UseCaseGroup?);
      v19 = type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
      outlined init with take of SecretKey((uint64_t)v15, v23, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v20 = type metadata accessor for AspireApiPIRConfig(0);
      outlined init with copy of AspireHeEncryptionParameters?(v4 + *(int *)(v20 + 36), (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = MEMORY[0x24BEE4AF8];
        *((_QWORD *)v12 + 3) = 0;
        v12[32] = 1;
        *((_QWORD *)v12 + 5) = 0;
        v12[48] = 1;
        *((_QWORD *)v12 + 7) = 0;
        v12[64] = 1;
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      }
      else
      {
        outlined init with take of SecretKey((uint64_t)v8, (uint64_t)v12, type metadata accessor for AspireHeEncryptionParameters);
      }
      v21 = v23;
      v19 = AllowList.isAllowListed(group:encryptionParameters:)(v23, (uint64_t)v12);
      outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspireHeEncryptionParameters);
      outlined destroy of AspireApiPECConfig(v21, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t AspireApiPECConfig.validate(static:useCase:allowList:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized AspireApiPECConfig.validate(static:useCase:allowList:)(a2, a3) & 1;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of AspireHeEncryptionParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized AspireApiPECConfig.validate(static:useCase:allowList:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AspireHeEncryptionParameters(0);
  v6 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UseCaseGroup();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AllowList.group(useCase:)(a1, v21, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for UseCaseGroup?);
    v16 = type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    v17 = type metadata accessor for AspireApiPECConfig(0);
    outlined init with copy of AspireHeEncryptionParameters?(v19[2] + *(int *)(v17 + 40), (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v20) == 1)
    {
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = MEMORY[0x24BEE4AF8];
      *((_QWORD *)v8 + 3) = 0;
      v8[32] = 1;
      *((_QWORD *)v8 + 5) = 0;
      v8[48] = 1;
      *((_QWORD *)v8 + 7) = 0;
      v8[64] = 1;
      UnknownStorage.init()();
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    }
    else
    {
      outlined init with take of SecretKey((uint64_t)v5, (uint64_t)v8, type metadata accessor for AspireHeEncryptionParameters);
    }
    v16 = AllowList.isAllowListed(group:encryptionParameters:)((uint64_t)v15, (uint64_t)v8);
    outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AspireHeEncryptionParameters);
    outlined destroy of AspireApiPECConfig((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  }
  return v16 & 1;
}

void CipherMLError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v7 = type metadata accessor for HE.SecurityLevel();
  MEMORY[0x24BDAC7A8](v7);
  v1 = type metadata accessor for HE.Scheme();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for AspireHeEncryptionParameters(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for CipherMLError();
  MEMORY[0x24BDAC7A8](v3);
  outlined init with copy of CipherMLError(v0, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (char *)sub_237C1E1A4 + 4 * word_237D56160[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_237C1E1A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;

  v2 = *v0;
  v3 = (void *)v0[1];
  *(_QWORD *)(v1 - 96) = 0;
  *(_QWORD *)(v1 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 - 96) = 0xD00000000000002DLL;
  *(_QWORD *)(v1 - 88) = 0x8000000237D61A00;
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 39;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return *(_QWORD *)(v1 - 96);
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  v11 = MEMORY[0x24BEE0D00];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          outlined consume of [String : String].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
      result = (unint64_t)outlined init with take of Any(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void specialized static CipherMLError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;

  v31 = a1;
  v32 = (char *)a2;
  v27 = type metadata accessor for HE.SecurityLevel();
  v25[4] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v25[2] = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for HE.Scheme();
  v25[3] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v25[1] = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  MEMORY[0x24BDAC7A8](v4);
  v25[0] = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CipherMLError();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v30 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)v25 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v28 = (char *)v25 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CipherMLError, CipherMLError));
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of CipherMLError(v31, (uint64_t)v22);
  v31 = v23;
  outlined init with copy of CipherMLError((uint64_t)v32, v23);
  v32 = v22;
  v24 = (char *)sub_237C1EE4C + 4 * word_237D561AA[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_237C1EE4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v7;
  char v8;

  v2 = *(_QWORD *)(v1 - 120);
  outlined init with copy of CipherMLError(v2, (uint64_t)v0);
  v4 = *v0;
  v3 = v0[1];
  v5 = *(_QWORD **)(v1 - 128);
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for (CipherMLError, CipherMLError));
    goto LABEL_12;
  }
  if (v4 == *v5 && v3 == v5[1])
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      outlined destroy of AspireApiPECConfig(v2, (uint64_t (*)(_QWORD))type metadata accessor for CipherMLError);
LABEL_12:
      v7 = 0;
      return v7 & 1;
    }
  }
  outlined destroy of AspireApiPECConfig(v2, (uint64_t (*)(_QWORD))type metadata accessor for CipherMLError);
  v7 = 1;
  return v7 & 1;
}

uint64_t type metadata accessor for CipherMLError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CipherMLError;
  if (!type metadata singleton initialization cache for CipherMLError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of CipherMLError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CipherMLError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of AspireHeEncryptionParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized static CipherMLError.makeErrorConformToSecureCoding(error:)(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  char isUniquelyReferenced_nonNull_native;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  Class isa;
  void *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v2 = (void *)_convertErrorToNSError(_:)();
  v3 = objc_msgSend(v2, sel_userInfo);
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v62 = (uint64_t)a1;
  v63 = v4;
  v5 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
  if (!swift_dynamicCast())
  {
    *(_QWORD *)&v59 = 0;
    v57 = 0u;
    v58 = 0u;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v57, &demangling cache variable for type metadata for LocalizedError?);
    specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000001ELL, 0x8000000237D61A70, &v60);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000020, 0x8000000237D61A90, &v60);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    specialized Dictionary._Variant.removeValue(forKey:)(v21, v22, &v60);
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    specialized Dictionary._Variant.removeValue(forKey:)(v23, v24, &v60);
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
    v25 = objc_msgSend(v2, sel_userInfo);
    v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = 0;
    v56 = v26 + 64;
    v28 = 1 << *(_BYTE *)(v26 + 32);
    v29 = -1;
    if (v28 < 64)
      v29 = ~(-1 << v28);
    v30 = v29 & *(_QWORD *)(v26 + 64);
    v31 = v63;
    v32 = (unint64_t)(v28 + 63) >> 6;
    while (!v30)
    {
      v38 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
        return;
      }
      if (v38 >= v32)
      {
        v40 = v27;
      }
      else
      {
        v39 = *(_QWORD *)(v56 + 8 * v38);
        if (v39)
          goto LABEL_16;
        v40 = v27 + 1;
        if (v27 + 2 < v32)
        {
          v39 = *(_QWORD *)(v56 + 8 * (v27 + 2));
          if (v39)
          {
            v38 = v27 + 2;
            goto LABEL_16;
          }
          v40 = v27 + 2;
          if (v27 + 3 < v32)
          {
            v39 = *(_QWORD *)(v56 + 8 * (v27 + 3));
            if (v39)
            {
              v38 = v27 + 3;
LABEL_16:
              v30 = (v39 - 1) & v39;
              v34 = __clz(__rbit64(v39)) + (v38 << 6);
              v27 = v38;
LABEL_12:
              v35 = *(_QWORD *)(v26 + 56);
              v36 = (_QWORD *)(*(_QWORD *)(v26 + 48) + 16 * v34);
              v37 = v36[1];
              *(_QWORD *)&v57 = *v36;
              *((_QWORD *)&v57 + 1) = v37;
              outlined init with copy of Any(v35 + 32 * v34, (uint64_t)&v58);
              swift_bridgeObjectRetain();
              goto LABEL_19;
            }
            v38 = v27 + 4;
            v40 = v27 + 3;
            if (v27 + 4 < v32)
            {
              v39 = *(_QWORD *)(v56 + 8 * v38);
              if (v39)
                goto LABEL_16;
              while (v32 - 5 != v27)
              {
                v39 = *(_QWORD *)(v26 + 104 + 8 * v27++);
                if (v39)
                {
                  v38 = v27 + 4;
                  goto LABEL_16;
                }
              }
              v40 = v32 - 1;
            }
          }
        }
      }
      v30 = 0;
      v58 = 0u;
      v59 = 0u;
      v27 = v40;
      v57 = 0u;
LABEL_19:
      outlined init with take of (key: String, value: Any)?((uint64_t)&v57, (uint64_t)&v60);
      v41 = *((_QWORD *)&v60 + 1);
      if (!*((_QWORD *)&v60 + 1))
      {
        v63 = v31;
        swift_release();
        v47 = objc_msgSend(v2, sel_domain);
        v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v50 = v49;

        v51 = objc_msgSend(v2, sel_code);
        v52 = objc_allocWithZone(MEMORY[0x24BDD1540]);
        v53 = (void *)MEMORY[0x23B821F68](v48, v50);
        swift_bridgeObjectRelease();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v52, sel_initWithDomain_code_userInfo_, v53, v51, isa);

        return;
      }
      v42 = v60;
      outlined init with take of Any(&v61, &v57);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        v55 = v2;
        swift_bridgeObjectRetain();
        v43 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v41);
        v45 = v44;
        swift_bridgeObjectRelease();
        if ((v45 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v62 = v31;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v31 = v62;
          }
          swift_bridgeObjectRelease();
          outlined init with take of Any((_OWORD *)(*(_QWORD *)(v31 + 56) + 32 * v43), &v57);
          specialized _NativeDictionary._delete(at:)(v43, v31);
          swift_bridgeObjectRelease();
        }
        else
        {
          v57 = 0u;
          v58 = 0u;
        }
        v2 = v55;
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v57, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
      }
    }
    v33 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    v34 = v33 | (v27 << 6);
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  outlined init with take of LocalizedError(&v57, (uint64_t)&v60);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540E0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v7;
  __swift_project_boxed_opaque_existential_1(&v60, *((uint64_t *)&v61 + 1));
  v8 = dispatch thunk of LocalizedError.errorDescription.getter();
  v10 = 0x296C6C756E28;
  if (v9)
    v10 = v8;
  v11 = 0xE600000000000000;
  if (v9)
    v11 = v9;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = v11;
  v12 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v13 = objc_msgSend(v2, sel_domain);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v17 = objc_msgSend(v2, sel_code);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v12);
  swift_bridgeObjectRelease();
  v18 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v19 = (void *)MEMORY[0x23B821F68](v14, v16);
  swift_bridgeObjectRelease();
  v20 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, v17, v20);

  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v60);
}

uint64_t base witness table accessor for Error in CipherMLError()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
}

_QWORD *initializeBufferWithCopyOfBuffer for CipherMLError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        v11 = a2[3];
        a1[2] = a2[2];
        a1[3] = v11;
        v12 = a2[4];
        v13 = a2[5];
        a1[4] = v12;
        a1[5] = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        a1[5] = a2[5];
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        a1[7] = a2[7];
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
        v15 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for UnknownStorage();
        v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v16, v17, v18);
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v20 = type metadata accessor for HE.Scheme();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        v21 = type metadata accessor for HE.SecurityLevel();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for CipherMLError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return swift_bridgeObjectRelease();
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 6:
      swift_bridgeObjectRelease();
      a1 += *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
      v3 = type metadata accessor for UnknownStorage();
      goto LABEL_7;
    case 8:
      v3 = type metadata accessor for HE.Scheme();
      goto LABEL_7;
    case 9:
      v3 = type metadata accessor for HE.SecurityLevel();
LABEL_7:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for CipherMLError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 1u:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      v9 = a2[4];
      v10 = a2[5];
      a1[4] = v9;
      a1[5] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 6u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      a1[5] = a2[5];
      *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
      a1[7] = a2[7];
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      v12 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      goto LABEL_8;
    case 8u:
      v17 = type metadata accessor for HE.Scheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
      goto LABEL_8;
    case 9u:
      v18 = type metadata accessor for HE.SecurityLevel();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for CipherMLError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for CipherMLError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        v6 = a2[3];
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        a1[3] = v6;
        v7 = a2[5];
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        a1[5] = v7;
        v8 = a2[7];
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
        a1[7] = v8;
        v9 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
        v10 = (char *)a1 + v9;
        v11 = (char *)a2 + v9;
        v12 = type metadata accessor for UnknownStorage();
        v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
        swift_bridgeObjectRetain();
        v13(v10, v11, v12);
        goto LABEL_9;
      case 8u:
        v14 = type metadata accessor for HE.Scheme();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        goto LABEL_9;
      case 9u:
        v15 = type metadata accessor for HE.SecurityLevel();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_QWORD *initializeWithTake for CipherMLError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 9:
      v12 = type metadata accessor for HE.SecurityLevel();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
      break;
    case 8:
      v13 = type metadata accessor for HE.Scheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      swift_storeEnumTagMultiPayload();
      break;
    case 6:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      a1[5] = a2[5];
      *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
      a1[7] = a2[7];
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      v8 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithTake for CipherMLError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for CipherMLError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 9:
        v12 = type metadata accessor for HE.SecurityLevel();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      case 8:
        v13 = type metadata accessor for HE.Scheme();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v7 = a2[3];
        a1[2] = a2[2];
        a1[3] = v7;
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        a1[5] = a2[5];
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        a1[7] = a2[7];
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
        v8 = *(int *)(type metadata accessor for AspireHeEncryptionParameters(0) + 40);
        v9 = (char *)a1 + v8;
        v10 = (char *)a2 + v8;
        v11 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for CipherMLError()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for AspireHeEncryptionParameters(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for HE.Scheme();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for HE.SecurityLevel();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with take of LocalizedError(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void Data.hexString.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

uint64_t sub_237C20AE4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  Swift::String v10;

  outlined copy of Data._Representation(v3, v1);
  outlined copy of Data._Representation(v3, v1);
  Data.Iterator.init(_:at:)();
  outlined consume of Data._Representation(v3, v1);
  lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(_BYTE *)(v5 - 97) & 1) == 0)
  {
    *(_OWORD *)(v5 - 128) = xmmword_237D540E0;
    v6 = MEMORY[0x24BEE4260];
    v7 = MEMORY[0x24BEE42B0];
    do
    {
      v8 = *(_BYTE *)(v5 - 98);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 128);
      *(_QWORD *)(v9 + 56) = v6;
      *(_QWORD *)(v9 + 64) = v7;
      *(_BYTE *)(v9 + 32) = v8;
      v10._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()();
    }
    while (*(_BYTE *)(v5 - 97) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
  return *(_QWORD *)(v5 - 96);
}

unint64_t lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator;
  if (!lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator)
  {
    v1 = type metadata accessor for Data.Iterator();
    result = MEMORY[0x23B822CDC](MEMORY[0x24BDCDD80], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator);
  }
  return result;
}

uint64_t FixedWidthInteger.divCeil(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t result;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t AssociatedConformanceWitness;
  char *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t AssociatedTypeWitness;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;

  v84 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
  v87 = *(_QWORD *)(v84 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v86 = (char *)&v79 - v8;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v81 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v82 = (char *)&v79 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v83 = (char *)&v79 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v79 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v79 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v79 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v79 - v25;
  v91 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v91((char *)&v79 - v25, a1, a2);
  v27 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v88 = a1;
  v89 = a4;
  if ((v27 & 1) == 0)
  {
    v31 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v31 & 1) != 0)
    {
      if (v32 <= 64)
      {
        v80 = v18;
        v33 = v87;
        v34 = AssociatedTypeWitness;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v36 = v86;
        MEMORY[0x23B822520](&unk_237D56340, 256, v34, AssociatedConformanceWitness);
        MEMORY[0x23B8224E4](v36, a2, v33);
        LOBYTE(v34) = dispatch thunk of static Comparable.>= infix(_:_:)();
        v29 = *(void (**)(char *, uint64_t))(v9 + 8);
        v29(v24, a2);
        v91(v21, (uint64_t)v26, a2);
        if ((v34 & 1) == 0)
        {
          v29(v21, a2);
          v29(v26, a2);
          v18 = v80;
          a1 = v88;
          v38 = v90;
          goto LABEL_16;
        }
        v28 = dispatch thunk of BinaryInteger._lowWord.getter();
        v29(v21, a2);
        result = ((uint64_t (*)(char *, uint64_t))v29)(v26, a2);
        v18 = v80;
        goto LABEL_11;
      }
    }
    else if (v32 < 64)
    {
      v28 = dispatch thunk of BinaryInteger._lowWord.getter();
      v29 = *(void (**)(char *, uint64_t))(v9 + 8);
      result = ((uint64_t (*)(char *, uint64_t))v29)(v26, a2);
LABEL_11:
      a1 = v88;
LABEL_12:
      v38 = v90;
      if (!v28)
        goto LABEL_57;
LABEL_16:
      v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v40 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v39 & 1) != 0)
      {
        if (v40 <= 64)
          goto LABEL_18;
      }
      else if (v40 <= 63)
      {
LABEL_18:
        v91(v24, v38, a2);
        v41 = dispatch thunk of BinaryInteger._lowWord.getter();
        v29(v24, a2);
        if (v41 <= 0)
        {
LABEL_28:
          if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
          {
            if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
            {
LABEL_36:
              v91(v24, v38, a2);
              v57 = dispatch thunk of BinaryInteger._lowWord.getter();
              v29(v24, a2);
              if ((v57 & 0x8000000000000000) == 0)
                return dispatch thunk of static BinaryInteger./ infix(_:_:)();
LABEL_42:
              if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
              {
                if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
                {
LABEL_50:
                  v91(v24, a1, a2);
                  v68 = dispatch thunk of BinaryInteger._lowWord.getter();
                  v29(v24, a2);
                  if ((v68 & 0x8000000000000000) == 0)
                    return dispatch thunk of static BinaryInteger./ infix(_:_:)();
                  goto LABEL_55;
                }
              }
              else
              {
                v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
                v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
                if ((v65 & 1) == 0)
                {
                  if (v66 < 64)
                    goto LABEL_50;
                  return dispatch thunk of static BinaryInteger./ infix(_:_:)();
                }
                if (v66 <= 64)
                {
                  v69 = v18;
                  v70 = v87;
                  v71 = AssociatedTypeWitness;
                  v72 = swift_getAssociatedConformanceWitness();
                  v73 = v86;
                  MEMORY[0x23B822520](&unk_237D56340, 256, v71, v72);
                  MEMORY[0x23B8224E4](v73, a2, v70);
                  LOBYTE(v71) = dispatch thunk of static Comparable.< infix(_:_:)();
                  v29(v24, a2);
                  v74 = v81;
                  v91(v81, a1, a2);
                  if ((v71 & 1) != 0)
                  {
                    v29(v74, a2);
                    v18 = v69;
                  }
                  else
                  {
                    v75 = dispatch thunk of BinaryInteger._lowWord.getter();
                    v29(v74, a2);
                    v18 = v69;
                    if ((v75 & 0x8000000000000000) == 0)
                      return dispatch thunk of static BinaryInteger./ infix(_:_:)();
                  }
                  goto LABEL_55;
                }
              }
              v92 = 0;
              lazy protocol witness table accessor for type Int and conformance Int();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              v67 = dispatch thunk of static Comparable.< infix(_:_:)();
              v29(v24, a2);
              if ((v67 & 1) != 0)
              {
LABEL_55:
                v46 = v18;
                v47 = v87;
                v48 = AssociatedTypeWitness;
                v90 = swift_getAssociatedConformanceWitness();
                v91 = (void (*)(char *, uint64_t, uint64_t))v24;
                v76 = v38;
                v49 = v86;
                MEMORY[0x23B822520](&unk_237D56338, 512, v48, v90);
                v50 = v29;
                v51 = v83;
                MEMORY[0x23B8224E4](v49, a2, v47);
                v77 = v76;
                v52 = *(_QWORD *)(v84 + 8);
                MEMORY[0x23B822334](v77, v51, a2);
                goto LABEL_56;
              }
              return dispatch thunk of static BinaryInteger./ infix(_:_:)();
            }
          }
          else
          {
            v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
            v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if ((v54 & 1) == 0)
            {
              if (v55 >= 64)
                return dispatch thunk of static BinaryInteger./ infix(_:_:)();
              goto LABEL_36;
            }
            if (v55 <= 64)
            {
              v58 = v18;
              v59 = v87;
              v60 = AssociatedTypeWitness;
              v61 = swift_getAssociatedConformanceWitness();
              v62 = v86;
              MEMORY[0x23B822520](&unk_237D56340, 256, v60, v61);
              MEMORY[0x23B8224E4](v62, a2, v59);
              LOBYTE(v60) = dispatch thunk of static Comparable.< infix(_:_:)();
              v29(v24, a2);
              v63 = v82;
              v91(v82, v38, a2);
              if ((v60 & 1) != 0)
              {
                v29(v63, a2);
                v18 = v58;
              }
              else
              {
                v64 = dispatch thunk of BinaryInteger._lowWord.getter();
                v29(v63, a2);
                v18 = v58;
                if ((v64 & 0x8000000000000000) == 0)
                  return dispatch thunk of static BinaryInteger./ infix(_:_:)();
              }
              goto LABEL_42;
            }
          }
          v92 = 0;
          lazy protocol witness table accessor for type Int and conformance Int();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          v56 = dispatch thunk of static Comparable.< infix(_:_:)();
          v29(v24, a2);
          if ((v56 & 1) == 0)
            return dispatch thunk of static BinaryInteger./ infix(_:_:)();
          goto LABEL_42;
        }
LABEL_22:
        v43 = dispatch thunk of static BinaryInteger.isSigned.getter();
        v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if ((v43 & 1) != 0)
        {
          if (v44 <= 64)
            goto LABEL_24;
        }
        else if (v44 <= 63)
        {
LABEL_24:
          v91(v24, a1, a2);
          v45 = dispatch thunk of BinaryInteger._lowWord.getter();
          v29(v24, a2);
          if (v45 <= 0)
            goto LABEL_28;
          goto LABEL_25;
        }
        v92 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v53 = dispatch thunk of static Comparable.< infix(_:_:)();
        v29(v24, a2);
        if ((v53 & 1) == 0)
          goto LABEL_28;
LABEL_25:
        v46 = v18;
        v47 = v87;
        v48 = AssociatedTypeWitness;
        v90 = swift_getAssociatedConformanceWitness();
        v91 = (void (*)(char *, uint64_t, uint64_t))v24;
        v49 = v86;
        MEMORY[0x23B822520](&unk_237D56338, 512, v48, v90);
        v50 = v29;
        v51 = v83;
        MEMORY[0x23B8224E4](v49, a2, v47);
        v52 = *(_QWORD *)(v84 + 8);
        dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
LABEL_56:
        v50(v51, a2);
        v78 = v91;
        dispatch thunk of static BinaryInteger./ infix(_:_:)();
        v50(v46, a2);
        MEMORY[0x23B822520](&unk_237D56338, 512, v48, v90);
        MEMORY[0x23B8224E4](v49, a2, v47);
        MEMORY[0x23B822334](v78, v46, a2, v52);
        v50(v46, a2);
        return ((uint64_t (*)(void (*)(char *, uint64_t, uint64_t), uint64_t))v50)(v78, a2);
      }
      v92 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v42 = dispatch thunk of static Comparable.< infix(_:_:)();
      v29(v24, a2);
      if ((v42 & 1) == 0)
        goto LABEL_28;
      goto LABEL_22;
    }
    v92 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    v29(v24, a2);
    result = ((uint64_t (*)(char *, uint64_t))v29)(v26, a2);
    a1 = v88;
    goto LABEL_15;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
    v28 = dispatch thunk of BinaryInteger._lowWord.getter();
    v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    result = ((uint64_t (*)(char *, uint64_t))v29)(v26, a2);
    goto LABEL_12;
  }
  v92 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29 = *(void (**)(char *, uint64_t))(v9 + 8);
  v29(v24, a2);
  result = ((uint64_t (*)(char *, uint64_t))v29)(v26, a2);
LABEL_15:
  v38 = v90;
  if ((v37 & 1) == 0)
    goto LABEL_16;
LABEL_57:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x23B822CDC](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t FixedWidthInteger.nextMultipleOf(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  char *v35;
  char *v37;
  uint64_t AssociatedTypeWitness;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = v4;
  v43 = a4;
  v41 = a3;
  v44 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
  v40 = *(_QWORD *)(v44 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v37 = (char *)&v37 - v9;
  v10 = *(char **)(a2 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v39 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v37 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v37 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v37 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v37 - v22;
  v24 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v10 + 2);
  v45 = a1;
  v24((char *)&v37 - v22, a1, a2);
  v42 = v5;
  v24(v21, v5, a2);
  LOBYTE(v5) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v25 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v5 & 1) == 0)
    goto LABEL_6;
  if (v25 <= 64)
    goto LABEL_7;
LABEL_3:
  v46 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v26 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*((void (**)(char *, uint64_t))v10 + 1))(v18, a2);
  v24(v15, (uint64_t)v21, a2);
  if ((v26 & 1) == 0)
  {
LABEL_4:
    v27 = (void (*)(char *, uint64_t))*((_QWORD *)v10 + 1);
    goto LABEL_5;
  }
  while (1)
  {
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
      {
LABEL_13:
        v46 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v31 = dispatch thunk of static Comparable.< infix(_:_:)();
        v27 = (void (*)(char *, uint64_t))*((_QWORD *)v10 + 1);
        v27(v18, a2);
        v27(v15, a2);
        v27(v21, a2);
        v27(v23, a2);
        if ((v31 & 1) == 0)
          goto LABEL_22;
        goto LABEL_20;
      }
      goto LABEL_16;
    }
    v29 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v30 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v29 & 1) == 0)
    {
      if (v30 >= 64)
        goto LABEL_21;
LABEL_16:
      v32 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27 = (void (*)(char *, uint64_t))*((_QWORD *)v10 + 1);
      v27(v15, a2);
      goto LABEL_19;
    }
    if (v30 > 64)
      goto LABEL_13;
    v33 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v35 = v37;
    MEMORY[0x23B822520](&unk_237D56340, 256, v33, AssociatedConformanceWitness);
    MEMORY[0x23B8224E4](v35, a2, v40);
    LOBYTE(v33) = dispatch thunk of static Comparable.< infix(_:_:)();
    v27 = (void (*)(char *, uint64_t))*((_QWORD *)v10 + 1);
    v27(v18, a2);
    v10 = v39;
    v24(v39, (uint64_t)v15, a2);
    if ((v33 & 1) == 0)
      break;
    v27(v10, a2);
LABEL_5:
    v27(v15, a2);
    v27(v21, a2);
    v25 = ((uint64_t (*)(char *, uint64_t))v27)(v23, a2);
    __break(1u);
LABEL_6:
    if (v25 > 63)
      goto LABEL_3;
LABEL_7:
    v28 = dispatch thunk of BinaryInteger._lowWord.getter();
    v24(v15, (uint64_t)v21, a2);
    if (v28 <= 0)
      goto LABEL_4;
  }
  v32 = dispatch thunk of BinaryInteger._lowWord.getter();
  v27(v10, a2);
  v27(v15, a2);
LABEL_19:
  v27(v21, a2);
  v27(v23, a2);
  if ((v32 & 0x8000000000000000) == 0)
    goto LABEL_22;
LABEL_20:
  __break(1u);
LABEL_21:
  v27 = (void (*)(char *, uint64_t))*((_QWORD *)v10 + 1);
  v27(v15, a2);
  v27(v21, a2);
  v27(v23, a2);
LABEL_22:
  FixedWidthInteger.divCeil(_:)(v45, a2, v41, (uint64_t)v18);
  dispatch thunk of static Numeric.* infix(_:_:)();
  return ((uint64_t (*)(char *, uint64_t))v27)(v18, a2);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay10Foundation4DataVGSaySSGG_8CipherML16AspireApiRequestVsAE_pTg5015_s10Foundation4g4VSS8h4ML16jkl3Vs5C33_pIgggrzo_AC_SStAFsAG_pIegnrzr_TRAJSSAPsAE_pIgggrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v40 = a3;
  v41 = a4;
  v7 = type metadata accessor for AspireApiRequest(0);
  v39 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v37 = (uint64_t)&v33 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  v35 = *(_QWORD *)(a2 + 16);
  v36 = v12;
  if (v35 >= v12)
    v13 = v12;
  else
    v13 = v35;
  v43 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  v14 = v43;
  v38 = a1;
  v42 = a2;
  v34 = v13;
  if (v13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = 0;
    v16 = v13;
    while (1)
    {
      v17 = *(_QWORD *)(v38 + v15 + 32);
      v18 = *(_QWORD *)(v38 + v15 + 40);
      v19 = *(_QWORD *)(v42 + v15 + 32);
      v20 = *(_QWORD *)(v42 + v15 + 40);
      outlined copy of Data._Representation(v17, v18);
      result = swift_bridgeObjectRetain();
      if (!v20)
        goto LABEL_27;
      v40(v17, v18, v19, v20);
      if (v4)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v17, v18);
LABEL_24:
        swift_bridgeObjectRelease();
        return v14;
      }
      outlined consume of Data._Representation(v17, v18);
      swift_bridgeObjectRelease();
      v43 = v14;
      v23 = *(_QWORD *)(v14 + 16);
      v22 = *(_QWORD *)(v14 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v14 = v43;
      }
      *(_QWORD *)(v14 + 16) = v23 + 1;
      result = outlined init with take of SecretKey((uint64_t)v10, v14+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v23, type metadata accessor for AspireApiRequest);
      v15 += 16;
      if (!--v16)
        goto LABEL_13;
    }
  }
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
LABEL_13:
  if (v36 > v35)
  {
    v24 = v35 - v34;
    v25 = v36 - v34;
    v36 = v38 + 40;
    v26 = 16 * v34;
    while (v25)
    {
      if (!v24)
        goto LABEL_21;
      v27 = *(_QWORD *)(v36 + v26 - 8);
      v28 = *(_QWORD *)(v36 + v26);
      v29 = *(_QWORD *)(v42 + v26 + 32);
      v30 = *(_QWORD *)(v42 + v26 + 40);
      outlined copy of Data._Representation(v27, v28);
      swift_bridgeObjectRetain();
      v40(v27, v28, v29, v30);
      if (v4)
      {
        outlined consume of Data._Representation(v27, v28);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      outlined consume of Data._Representation(v27, v28);
      swift_bridgeObjectRelease();
      v43 = v14;
      v32 = *(_QWORD *)(v14 + 16);
      v31 = *(_QWORD *)(v14 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        v14 = v43;
      }
      *(_QWORD *)(v14 + 16) = v32 + 1;
      result = outlined init with take of SecretKey(v37, v14+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v32, type metadata accessor for AspireApiRequest);
      --v24;
      v26 += 16;
      if (!--v25)
        goto LABEL_21;
    }
    __break(1u);
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML17AspireApiResponseVGSay10Foundation4DataVGG_ANSgsAE_pTg503_s8f4ML17hij14V10Foundation4l7VAFSgs5C33_pIgngozo_AC_AFtAGsAH_pIegnrzr_TRAjnQsAE_pIgngozo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, unint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v68 = a3;
  v69 = a4;
  v6 = type metadata accessor for AspireApiResponse(0);
  v70 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v61 = (uint64_t)&v58 - v10;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AspireApiResponse, Data));
  v11 = MEMORY[0x24BDAC7A8](v67);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v60 = (uint64_t)&v58 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v59 = (uint64_t)&v58 - v16;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a2 + 16);
  if (v18 >= v17)
    v19 = *(_QWORD *)(a1 + 16);
  else
    v19 = *(_QWORD *)(a2 + 16);
  v72 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
  v20 = v19;
  v65 = v18;
  v66 = a1;
  v64 = v17;
  v58 = a2;
  if (v19)
  {
    v63 = v13;
    v21 = v72;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v23 = 0;
    v24 = (unint64_t *)(a2 + 40);
    v62 = v9;
    while (v17 != v23)
    {
      result = outlined init with copy of SecretKey(a1+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v23, (uint64_t)v9, type metadata accessor for AspireApiResponse);
      if (v18 == v23)
        goto LABEL_36;
      v25 = v20;
      v26 = *(v24 - 1);
      v27 = *v24;
      v28 = (uint64_t)v63;
      v29 = (uint64_t *)&v63[*(int *)(v67 + 48)];
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v63, type metadata accessor for AspireApiResponse);
      *v29 = v26;
      v29[1] = v27;
      outlined copy of Data._Representation(v26, v27);
      v30 = v71;
      v31 = v68(v28, v26, v27);
      if (v30)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, &demangling cache variable for type metadata for (AspireApiResponse, Data));
      }
      v33 = v31;
      v34 = v32;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, &demangling cache variable for type metadata for (AspireApiResponse, Data));
      result = swift_isUniquelyReferenced_nonNull_native();
      v71 = 0;
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v21 = v72;
      }
      v20 = v25;
      v36 = *(_QWORD *)(v21 + 16);
      v35 = *(_QWORD *)(v21 + 24);
      if (v36 >= v35 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        v20 = v25;
        v21 = v72;
      }
      ++v23;
      *(_QWORD *)(v21 + 16) = v36 + 1;
      v37 = v21 + 16 * v36;
      *(_QWORD *)(v37 + 32) = v33;
      *(_QWORD *)(v37 + 40) = v34;
      v24 += 2;
      v18 = v65;
      a1 = v66;
      v17 = v64;
      v9 = v62;
      if (v20 == v23)
        goto LABEL_16;
    }
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
LABEL_16:
    if (v17 <= v18)
    {
LABEL_33:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v72;
    }
    if (v20 <= (uint64_t)v18)
      v38 = v18;
    else
      v38 = v20;
    v63 = (char *)v38;
    v39 = (unint64_t *)(v58 + 16 * v20 + 40);
    while (v17 != v20)
    {
      result = outlined init with copy of SecretKey(a1+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v20, v61, type metadata accessor for AspireApiResponse);
      if (v65 == v20)
      {
        outlined destroy of AspireApiPECConfig(v61, type metadata accessor for AspireApiResponse);
        goto LABEL_33;
      }
      if (v63 == (char *)v20)
        goto LABEL_38;
      v40 = v20;
      v41 = *(v39 - 1);
      v42 = *v39;
      v43 = v67;
      v44 = v60;
      v45 = (uint64_t *)(v60 + *(int *)(v67 + 48));
      outlined init with take of SecretKey(v61, v60, type metadata accessor for AspireApiResponse);
      *v45 = v41;
      v45[1] = v42;
      v46 = v59;
      outlined init with take of RequestContext<StaticPIRParameters>(v44, v59, &demangling cache variable for type metadata for (AspireApiResponse, Data));
      v47 = (uint64_t *)(v46 + *(int *)(v43 + 48));
      v48 = *v47;
      v49 = v47[1];
      outlined copy of Data._Representation(v41, v42);
      v50 = v71;
      v51 = v68(v46, v48, v49);
      v53 = v52;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v46, &demangling cache variable for type metadata for (AspireApiResponse, Data));
      if (v50)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      v71 = 0;
      v54 = v72;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v54 + 16) + 1, 1);
        v54 = v72;
      }
      v56 = *(_QWORD *)(v54 + 16);
      v55 = *(_QWORD *)(v54 + 24);
      if (v56 >= v55 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
        v54 = v72;
      }
      *(_QWORD *)(v54 + 16) = v56 + 1;
      v57 = v54 + 16 * v56;
      v20 = v40 + 1;
      *(_QWORD *)(v57 + 32) = v51;
      *(_QWORD *)(v57 + 40) = v53;
      v39 += 2;
      v17 = v64;
      a1 = v66;
      if (v64 == v40 + 1)
        goto LABEL_33;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t RequestsManager.PIRContext.useCase.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestsManager.PIRContext.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RequestsManager.PIRContext();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
}

uint64_t type metadata accessor for RequestsManager.PIRContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RequestsManager.PIRContext;
  if (!type metadata singleton initialization cache for RequestsManager.PIRContext)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t RequestsManager.PIRContext.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RequestsManager.PIRContext();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 24), a1, type metadata accessor for AspireApiPIRConfig);
}

uint64_t RequestsManager.PIRContext.configID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for RequestsManager.PIRContext() + 28);
  v2 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t RequestsManager.PIRContext.secretKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RequestsManager.PIRContext();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
}

uint64_t RequestsManager.PIRContext.cache.getter()
{
  type metadata accessor for RequestsManager.PIRContext();
  return swift_unknownObjectRetain();
}

uint64_t RequestsManager.PIRContext.constructPIRClient(keyword:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v6 = type metadata accessor for AspireApiPIRConfig(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v26 - v10;
  v12 = type metadata accessor for SecretKey();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v26 - v16;
  v18 = (int *)type metadata accessor for RequestsManager.PIRContext();
  v19 = v3 + v18[6];
  specialized static Sharding.sha256Shard(keyword:shardCount:)(a1, a2);
  v21 = v20;
  outlined init with copy of SecretKey(v3 + v18[8], (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  outlined init with copy of SecretKey(v19, (uint64_t)v11, type metadata accessor for AspireApiPIRConfig);
  v22 = (uint64_t *)(v3 + v18[7]);
  v23 = *v22;
  v24 = v22[1];
  outlined init with copy of SecretKey((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  outlined init with copy of SecretKey((uint64_t)v11, (uint64_t)v9, type metadata accessor for AspireApiPIRConfig);
  outlined copy of Data._Representation(v23, v24);
  KeywordPIRClient.init(secretKey:config:configID:shardLabel:)((uint64_t)v15, (uint64_t)v9, v23, v24, v21, 0, 1, v27);
  outlined destroy of AspireApiPECConfig((uint64_t)v11, type metadata accessor for AspireApiPIRConfig);
  return outlined destroy of AspireApiPECConfig((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
}

uint64_t RequestsManager.PIRContext.constructPIRClient(shardId:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;

  v22 = a3;
  v23 = a1;
  v5 = type metadata accessor for AspireApiPIRConfig(0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  v11 = type metadata accessor for SecretKey();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v22 - v15;
  v17 = (int *)type metadata accessor for RequestsManager.PIRContext();
  outlined init with copy of SecretKey(v3 + v17[8], (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  outlined init with copy of SecretKey(v3 + v17[6], (uint64_t)v10, type metadata accessor for AspireApiPIRConfig);
  v18 = (uint64_t *)(v3 + v17[7]);
  v19 = *v18;
  v20 = v18[1];
  outlined init with copy of SecretKey((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  outlined init with copy of SecretKey((uint64_t)v10, (uint64_t)v8, type metadata accessor for AspireApiPIRConfig);
  outlined copy of Data._Representation(v19, v20);
  swift_bridgeObjectRetain();
  KeywordPIRClient.init(secretKey:config:configID:shardLabel:)((uint64_t)v14, (uint64_t)v8, v19, v20, v23, a2, 0, v22);
  outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AspireApiPIRConfig);
  return outlined destroy of AspireApiPECConfig((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
}

uint64_t RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v6 == v8)
    {
      MEMORY[0x24BDAC7A8](a1);
      v16 = v2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v4 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay10Foundation4DataVGSaySSGG_8CipherML16AspireApiRequestVsAE_pTg5015_s10Foundation4g4VSS8h4ML16jkl3Vs5C33_pIgggrzo_AC_SStAFsAG_pIegnrzr_TRAJSSAPsAE_pIgggrzo_Tf1cn_n(a1, a2, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))partial apply for closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:), (uint64_t)v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for daemon != -1)
        swift_once();
      v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.daemon);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.error.getter();
      v4 = v12;
      if (os_log_type_enabled(v11, v12))
      {
        v13 = swift_slowAlloc();
        *(_DWORD *)v13 = 134349312;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v13 + 12) = 2050;
        v17 = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_237BC8000, v11, (os_log_type_t)v4, "shardIds (length %{public}ld must be empty or match keywords.count %{public}ld.", (uint8_t *)v13, 0x16u);
        MEMORY[0x23B822DA8](v13, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v16 = v2;
    v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_8CipherML16AspireApiRequestVsAE_pTg5((void (*)(_QWORD *, uint64_t *))partial apply for closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:), (uint64_t)v15, a1);
    if (!v3)
      return v9;
  }
  return v4;
}

uint64_t closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  _QWORD v17[2];

  v7 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KeywordPIRClient();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[1];
  result = RequestsManager.PIRContext.constructPIRClient(keyword:)(*a1, v13, (uint64_t)v12);
  if (v3)
  {
    *a3 = v3;
  }
  else
  {
    KeywordPIRClient.constructPIRRequest(with:)(v13, (uint64_t)v9);
    v15 = type metadata accessor for AspireApiRequest(0);
    MEMORY[0x24BDAC7A8](v15);
    v17[-2] = a2;
    v17[-1] = v9;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, v16, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
    static Message.with(_:)();
    outlined destroy of AspireApiPECConfig((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for KeywordPIRClient);
    return outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireApiPIRRequest);
  }
  return result;
}

uint64_t closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  _QWORD v19[2];

  v10 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for KeywordPIRClient();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = RequestsManager.PIRContext.constructPIRClient(shardId:)(a3, a4, (uint64_t)v15);
  if (!v5)
  {
    KeywordPIRClient.constructPIRRequest(with:)(a2, (uint64_t)v12);
    v17 = type metadata accessor for AspireApiRequest(0);
    MEMORY[0x24BDAC7A8](v17);
    v19[-2] = a5;
    v19[-1] = v12;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, v18, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
    static Message.with(_:)();
    outlined destroy of AspireApiPECConfig((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for KeywordPIRClient);
    return outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspireApiPIRRequest);
  }
  return result;
}

uint64_t closure #1 in closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  v5 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v6;
  a1[1] = v5;
  v7 = (uint64_t)a1 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  outlined init with copy of SecretKey(a3, v7, type metadata accessor for AspireApiPIRRequest);
  v8 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
}

uint64_t RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  type metadata accessor for AspireApiResponses(0);
  v6[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[6];
  v2 = v0[7];
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v5 = type metadata accessor for RequestsManager.PIRContext();
  v0[9] = v5;
  v6 = v2 + *(int *)(v5 + 20);
  v7 = v6 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  v10 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v4 + 32) + *(_QWORD *)(v4 + 32));
  v8 = (_QWORD *)swift_task_alloc();
  v0[10] = v8;
  *v8 = v0;
  v8[1] = RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:);
  return v10(v0[8], v0[5], v7, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  void (*v19)(_QWORD, unint64_t, _QWORD, unint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  char v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = **(_QWORD **)(v0 + 64);
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML17AspireApiResponseVGSay10Foundation4DataVGG_ANSgsAE_pTg503_s8f4ML17hij14V10Foundation4l7VAFSgs5C33_pIgngozo_AC_AFtAGsAH_pIegnrzr_TRAjnQsAE_pIgngozo_Tf1cn_n(v4, v3, (uint64_t (*)(uint64_t, uint64_t, unint64_t))partial apply for closure #1 in RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 64), type metadata accessor for AspireApiResponses);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  v51 = *(_QWORD *)(v8 + 16);
  if (!v51)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v9 = *(_QWORD **)(v0 + 24);
LABEL_25:
    v33 = *(_QWORD *)(v0 + 32);
    v34 = *(_QWORD *)(v33 + 16);
    v35 = MEMORY[0x24BEE4AF8];
    if (v34)
    {
      v55 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
      v35 = v55;
      v36 = (unint64_t *)(v33 + 40);
      do
      {
        if (v9[2])
        {
          v37 = *(v36 - 1);
          v38 = *v36;
          outlined copy of Data._Representation(v37, *v36);
          outlined copy of Data._Representation(v37, v38);
          v39 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
          if ((v40 & 1) != 0)
          {
            v41 = (uint64_t *)(v9[7] + 16 * v39);
            v42 = *v41;
            v43 = v41[1];
            outlined copy of Data?(*v41, v43);
          }
          else
          {
            v42 = 0;
            v43 = 0xF000000000000000;
          }
          outlined consume of Data._Representation(v37, v38);
          outlined consume of Data._Representation(v37, v38);
        }
        else
        {
          v42 = 0;
          v43 = 0xF000000000000000;
        }
        v45 = *(_QWORD *)(v55 + 16);
        v44 = *(_QWORD *)(v55 + 24);
        if (v45 >= v44 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
        v36 += 2;
        *(_QWORD *)(v55 + 16) = v45 + 1;
        v46 = v55 + 16 * v45;
        *(_QWORD *)(v46 + 32) = v42;
        *(_QWORD *)(v46 + 40) = v43;
        --v34;
      }
      while (v34);
    }
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 64), type metadata accessor for AspireApiResponses);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v35);
  }
  v9 = *(_QWORD **)(v0 + 24);
  v52 = *(_QWORD *)(v6 + 16);
  v49 = *(_QWORD *)(v0 + 16) + 32;
  v50 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v47 = v6;
  v48 = v0;
  while (1)
  {
    if (v52 == v10)
    {
LABEL_23:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    if (v10 >= *(_QWORD *)(v6 + 16))
      break;
    v12 = *(_OWORD *)(v49 + 16 * v10);
    v13 = *(_OWORD *)(v6 + 16 * v10 + 32);
    v14 = (_QWORD *)(*(_QWORD *)(v0 + 56) + *(int *)(v50 + 36));
    v15 = *(_QWORD *)(v49 + 16 * v10 + 8);
    v16 = *((_QWORD *)&v13 + 1);
    v53 = v12;
    v54 = v13;
    if (*v14)
    {
      v17 = v14[1];
      ObjectType = swift_getObjectType();
      v19 = *(void (**)(_QWORD, unint64_t, _QWORD, unint64_t, uint64_t, uint64_t))(v17 + 48);
      outlined copy of Data._Representation(v53, v15);
      outlined copy of Data?(v54, v16);
      outlined copy of Data._Representation(v53, v15);
      outlined copy of Data?(v54, v16);
      v19(v54, v16, v53, v15, ObjectType, v17);
    }
    else
    {
      outlined copy of Data._Representation(v12, v15);
      outlined copy of Data?(v54, v16);
    }
    outlined copy of Data._Representation(v53, v15);
    outlined copy of Data?(v54, v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v15);
    v23 = v9[2];
    v24 = (v21 & 1) == 0;
    result = v23 + v24;
    if (__OFADD__(v23, v24))
      goto LABEL_39;
    v25 = v21;
    if (v9[3] >= result)
    {
      v27 = v53;
      v28 = v54;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v21 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        result = (uint64_t)specialized _NativeDictionary.copy()();
        v27 = v53;
        v28 = v54;
        if ((v25 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v53, v15);
      if ((v25 & 1) != (v26 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      v22 = result;
      v27 = v53;
      v28 = v54;
      if ((v25 & 1) != 0)
      {
LABEL_5:
        v11 = v9[7] + 16 * v22;
        outlined consume of Data?(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
        *(_QWORD *)v11 = v54;
        *(_QWORD *)(v11 + 8) = v16;
        goto LABEL_6;
      }
    }
    v9[(v22 >> 6) + 8] |= 1 << v22;
    v29 = 16 * v22;
    *(_OWORD *)(v9[6] + v29) = v27;
    *(_OWORD *)(v9[7] + v29) = v28;
    v30 = v9[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_40;
    v9[2] = v32;
    outlined copy of Data._Representation(v53, v15);
LABEL_6:
    ++v10;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v53, v15);
    outlined consume of Data._Representation(v53, v15);
    result = outlined consume of Data?(v54, v16);
    v6 = v47;
    v0 = v48;
    if (v51 == v10)
      goto LABEL_23;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD v18[2];

  v7 = type metadata accessor for KeywordPIRClient();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (_QWORD *)((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v16 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v12, 1, v16) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_5:
    a3 = type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return a3;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v12, type metadata accessor for AspireApiResponse.OneOf_Response);
    goto LABEL_5;
  }
  outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v15, type metadata accessor for AspireApiPIRResponse);
  RequestsManager.PIRContext.constructPIRClient(keyword:)(a2, a3, (uint64_t)v9);
  if (!v3)
  {
    a3 = KeywordPIRClient.decryptPIRResponse(_:keyword:)(v15, a2, a3);
    outlined destroy of AspireApiPECConfig((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for KeywordPIRClient);
  }
  outlined destroy of AspireApiPECConfig((uint64_t)v15, type metadata accessor for AspireApiPIRResponse);
  return a3;
}

uint64_t RequestsManager.PIRContext.init(useCase:userId:config:configID:secretKey:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int *v17;
  _QWORD *v18;
  uint64_t result;
  _QWORD *v20;

  *a9 = a1;
  a9[1] = a2;
  v17 = (int *)type metadata accessor for RequestsManager.PIRContext();
  outlined init with take of SecretKey(a3, (uint64_t)a9 + v17[5], (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  outlined init with take of SecretKey(a4, (uint64_t)a9 + v17[6], type metadata accessor for AspireApiPIRConfig);
  v18 = (_QWORD *)((char *)a9 + v17[7]);
  *v18 = a5;
  v18[1] = a6;
  result = outlined init with take of SecretKey(a7, (uint64_t)a9 + v17[8], (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  v20 = (_QWORD *)((char *)a9 + v17[9]);
  *v20 = a8;
  v20[1] = a10;
  return result;
}

uint64_t RequestsManager.CachedAndMissingKeywords.missingKeywords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RequestsManager.CachedAndMissingKeywords.missingShardIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RequestsManager.setPIRConfig(config:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v3[8] = swift_task_alloc();
  v4 = type metadata accessor for AspireHeEncryptionParameters(0);
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v5 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v3[14] = v5;
  v3[15] = *(_QWORD *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = type metadata accessor for AspireApiKeyStatus(0);
  v3[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v3[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v3[21] = swift_task_alloc();
  v3[22] = type metadata accessor for AspireApiPIRConfig(0);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v6 = type metadata accessor for AspireApiConfig(0);
  v3[27] = v6;
  v3[28] = *(_QWORD *)(v6 - 8);
  v3[29] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 264) = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    *(_QWORD *)(v6 + 272) = a2;
    *(_QWORD *)(v6 + 280) = a1;
  }
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

void RequestsManager.setPIRConfig(config:context:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id *v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  os_log_t log;
  uint64_t v96;
  uint64_t v97;
  uint64_t type;
  _QWORD *v99;
  uint64_t (*v100)(uint64_t, uint64_t, uint64_t);
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v1 = v0 + 5;
  v2 = (void *)v0[5];
  v3 = objc_msgSend(*(id *)v0[6], sel_useCase);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v0[30] = v6;
  v7 = objc_msgSend(v2, sel_serializedPIRConfig);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  v104 = 0;
  v102 = 0u;
  v103 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
  Message.init(serializedData:extensions:partial:options:)();
  v8 = v0[21];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0[29], v8, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v9 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  v11 = v0[21];
  if (v10 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v11, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_5:
    if (one-time initialization token for framework != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.framework);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_237BC8000, v13, v14, "CMLPIRConfig is missing pirConfig.", v15, 2u);
      MEMORY[0x23B822DA8](v15, -1, -1);
    }
    v16 = v0[29];

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    v17 = v16;
LABEL_10:
    outlined destroy of AspireApiPECConfig(v17, type metadata accessor for AspireApiConfig);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    ((void (*)(void))v0[1])();
    return;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiPECConfig(v11, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_5;
  }
  v18 = v0;
  v21 = v0 + 28;
  v19 = v0[28];
  v20 = v21[1];
  v22 = v18[27];
  v23 = v18[20];
  v99 = v18;
  v24 = v18[7];
  outlined init with take of SecretKey(v11, v18[24], type metadata accessor for AspireApiPIRConfig);
  v25 = *(_QWORD *)(v24 + 16);
  outlined init with copy of SecretKey(v20, v23, type metadata accessor for AspireApiConfig);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v23, 0, 1, v22);
  v26 = *(_QWORD *)(v25 + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v27 = (uint64_t *)swift_task_alloc();
  v27[2] = v4;
  v27[3] = v6;
  v27[4] = v23;
  swift_bridgeObjectRetain();
  os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
  closure #1 in ConfigCache.subscript.setter((_QWORD *)(v26 + 16), v27[2], v27[3], v27[4], &v102);
  os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));
  log = (os_log_t)v4;
  v28 = v99[20];
  v29 = (void *)v99[5];
  v30 = v102;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  ConfigCache.tryToSaveCache(configs:)(v30);
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, &demangling cache variable for type metadata for AspireApiConfig?);
  v31 = objc_msgSend(v29, sel_serializedKeyStatus);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  v104 = 0;
  v102 = 0u;
  v103 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
  Message.init(serializedData:extensions:partial:options:)();
  v32 = v99[24];
  v33 = v99[15];
  v34 = v99[14];
  v35 = v99[13];
  v36 = *(_QWORD *)(v32 + 32);
  v37 = *(_QWORD *)(v32 + 40);
  v38 = v99[19] + *(int *)(v99[18] + 24);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v35, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  v0 = v99;
  v40 = v39(v35, 1, v34);
  v41 = v99[17];
  v100 = v39;
  type = v38;
  if (v40 == 1)
  {
    v42 = v99[14];
    v96 = v99[13];
    v43 = v99[10];
    v44 = v99[9];
    *(_QWORD *)v41 = MEMORY[0x24BEE4AF8];
    *(_BYTE *)(v41 + 8) = 0;
    outlined copy of Data._Representation(v36, v37);
    UnknownStorage.init()();
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
    v0 = v99;
    v45(v41 + *(int *)(v42 + 28), 1, 1, v44);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v96, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  }
  else
  {
    outlined init with take of SecretKey(v99[13], v41, type metadata accessor for AspireHeEvaluationKeyConfig);
    outlined copy of Data._Representation(v36, v37);
  }
  v46 = specialized Message.hash()();
  v48 = v47;
  outlined destroy of AspireApiPECConfig(v0[17], type metadata accessor for AspireHeEvaluationKeyConfig);
  specialized static Data.== infix(_:_:)(v36, v37);
  v50 = v49;
  outlined consume of Data._Representation((uint64_t)v46, v48);
  outlined consume of Data._Representation(v36, v37);
  if ((v50 & 1) == 0)
  {
    v60 = v0[14];
    v61 = v0[12];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(type, v61, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    v62 = v100(v61, 1, v60);
    v63 = v0[16];
    if (v62 == 1)
    {
      v64 = v99[14];
      v65 = v99[12];
      v66 = v99[10];
      v67 = v99[9];
      *(_QWORD *)v63 = MEMORY[0x24BEE4AF8];
      *(_BYTE *)(v63 + 8) = 0;
      UnknownStorage.init()();
      v68 = *(int *)(v64 + 28);
      v0 = v99;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v63 + v68, 1, 1, v67);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v65, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    }
    else
    {
      outlined init with take of SecretKey(v0[12], v0[16], type metadata accessor for AspireHeEvaluationKeyConfig);
    }
    v75 = specialized Message.hash()();
    v77 = v76;
    outlined destroy of AspireApiPECConfig(v0[16], type metadata accessor for AspireHeEvaluationKeyConfig);
    Data.hexString.getter((uint64_t)v75, v77);
    v79 = v78;
    v101 = v80;
    outlined consume of Data._Representation((uint64_t)v75, v77);
    if (one-time initialization token for framework != -1)
      swift_once();
    v82 = v0[23];
    v81 = v0[24];
    v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)static Logger.framework);
    outlined init with copy of SecretKey(v81, v82, type metadata accessor for AspireApiPIRConfig);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v84 = Logger.logObject.getter();
    v85 = static os_log_type_t.error.getter();
    v86 = os_log_type_enabled(v84, v85);
    v87 = v0[23];
    if (v86)
    {
      v88 = swift_slowAlloc();
      v97 = swift_slowAlloc();
      *(_QWORD *)&v102 = v97;
      *(_DWORD *)v88 = 136446722;
      Data.hexString.getter(*(_QWORD *)(v87 + 32), *(_QWORD *)(v87 + 40));
      *(v1 - 3) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AspireApiPECConfig(v87, type metadata accessor for AspireApiPIRConfig);
      *(_WORD *)(v88 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(v1 - 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)log, v6, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v88 + 22) = 2082;
      v0 = v99;
      swift_bridgeObjectRetain();
      *(v1 - 1) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v101, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v84, v85, "Invalid PIR config hash '%{public}s' for useCase '%{public}s', expected: '%{public}s'", (uint8_t *)v88, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v97, -1, -1);
      MEMORY[0x23B822DA8](v88, -1, -1);
    }
    else
    {
      outlined destroy of AspireApiPECConfig(v0[23], type metadata accessor for AspireApiPIRConfig);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    v91 = v0[29];
    v92 = v0[24];
    v93 = v0[19];
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig(v93, type metadata accessor for AspireApiKeyStatus);
    outlined destroy of AspireApiPECConfig(v92, type metadata accessor for AspireApiPIRConfig);
    v17 = v91;
    goto LABEL_10;
  }
  v51 = v0[24];
  v52 = v0[22];
  v53 = v0;
  v54 = v0[10];
  v56 = v53[8];
  v55 = v53[9];
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v51 + *(int *)(v52 + 36), v56, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v56, 1, v55);
  v58 = v53[11];
  if (v57 == 1)
  {
    v59 = v53[8];
    *(_QWORD *)v58 = 0;
    *(_QWORD *)(v58 + 8) = 0;
    *(_QWORD *)(v58 + 16) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v58 + 24) = 0;
    *(_BYTE *)(v58 + 32) = 1;
    *(_QWORD *)(v58 + 40) = 0;
    *(_BYTE *)(v58 + 48) = 1;
    *(_QWORD *)(v58 + 56) = 0;
    *(_BYTE *)(v58 + 64) = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v59, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey(v53[8], v58, type metadata accessor for AspireHeEncryptionParameters);
  }
  RequestsManager.validateConfig(useCase:keyStatus:encryptionParams:)((uint64_t)log, v6, v53[19], v53[11]);
  v69 = (id *)v53[6];
  outlined destroy of AspireApiPECConfig(v53[11], type metadata accessor for AspireHeEncryptionParameters);
  v70 = objc_msgSend(*v69, sel_sourceApplicationBundleIdentifier);
  if (v70)
  {
    v71 = v70;
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v74 = v73;

  }
  else
  {
    v72 = 0;
    v74 = 0;
  }
  v53[31] = v74;
  v94 = (_QWORD *)swift_task_alloc();
  v53[32] = v94;
  *v94 = v53;
  v94[1] = RequestsManager.setPIRConfig(config:context:);
  RequestsManager.rotateKeysOffline(useCase:keyStatus:networkDelegation:)((uint64_t)log, v6, v53[19], v72, v74);
}

uint64_t RequestsManager.setPIRConfig(config:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 192);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 152), type metadata accessor for AspireApiKeyStatus);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 272));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 192);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 152), type metadata accessor for AspireApiKeyStatus);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.generateEvaluationKey(config:pirContext:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v25 = a3;
  v26 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
  MEMORY[0x24BDAC7A8](v4);
  v27 = (uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for AspireApiKeyStatus(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(a1, sel_serializedKeyStatus);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiKeyStatus and conformance AspireApiKeyStatus, type metadata accessor for AspireApiKeyStatus, (uint64_t)&protocol conformance descriptor for AspireApiKeyStatus);
  v15 = v31;
  result = Message.init(serializedData:extensions:partial:options:)();
  if (!v15)
  {
    v17 = v25;
    v18 = v26;
    v19 = (uint64_t)&v9[*(int *)(v7 + 24)];
    v20 = v27;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v19, v27, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v20, 1, v10) == 1)
    {
      *(_QWORD *)v13 = MEMORY[0x24BEE4AF8];
      v13[8] = 0;
      UnknownStorage.init()();
      v21 = &v13[*(int *)(v10 + 28)];
      v22 = type metadata accessor for AspireHeEncryptionParameters(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for AspireHeEvaluationKeyConfig?);
    }
    else
    {
      outlined init with take of SecretKey(v20, (uint64_t)v13, type metadata accessor for AspireHeEvaluationKeyConfig);
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AspireApiKeyStatus);
    v23 = type metadata accessor for RequestsManager.PIRContext();
    generateEvaluationKey(secretKey:config:)(v18 + *(int *)(v23 + 32), (uint64_t)v13, v17);
    return outlined destroy of AspireApiPECConfig((uint64_t)v13, type metadata accessor for AspireHeEvaluationKeyConfig);
  }
  return result;
}

uint64_t RequestsManager.generateEvaluationKey(config:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;

  v4[3] = a2;
  v4[4] = v3;
  v4[2] = a1;
  type metadata accessor for RequestsManager.PIRContext();
  v6 = swift_task_alloc();
  v4[5] = v6;
  v7 = (_QWORD *)swift_task_alloc();
  v4[6] = v7;
  *v7 = v4;
  v7[1] = RequestsManager.generateEvaluationKey(config:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v6, a3, 1);
}

uint64_t RequestsManager.generateEvaluationKey(config:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  RequestsManager.generateEvaluationKey(config:pirContext:)(*(void **)(v0 + 24), v1, *(_QWORD *)(v0 + 16));
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.loadContext(requestContext:allowingKeyRotation:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 224) = a2;
  *(_QWORD *)(v4 + 232) = v3;
  *(_BYTE *)(v4 + 145) = a3;
  *(_QWORD *)(v4 + 216) = a1;
  v5 = type metadata accessor for SecretKey();
  *(_QWORD *)(v4 + 240) = v5;
  *(_QWORD *)(v4 + 248) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 256) = swift_task_alloc();
  v6 = type metadata accessor for UserIdentifier();
  *(_QWORD *)(v4 + 264) = v6;
  *(_QWORD *)(v4 + 272) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  *(_QWORD *)(v4 + 288) = swift_task_alloc();
  *(_QWORD *)(v4 + 296) = swift_task_alloc();
  *(_QWORD *)(v4 + 304) = swift_task_alloc();
  *(_QWORD *)(v4 + 312) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  *(_QWORD *)(v4 + 320) = swift_task_alloc();
  *(_QWORD *)(v4 + 328) = swift_task_alloc();
  *(_QWORD *)(v4 + 336) = swift_task_alloc();
  *(_QWORD *)(v4 + 344) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  *(_QWORD *)(v4 + 352) = swift_task_alloc();
  type metadata accessor for AspireApiPIRConfig(0);
  *(_QWORD *)(v4 + 360) = swift_task_alloc();
  v7 = type metadata accessor for AspireApiConfig(0);
  *(_QWORD *)(v4 + 368) = v7;
  *(_QWORD *)(v4 + 376) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 384) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  *(_QWORD *)(v4 + 392) = swift_task_alloc();
  *(_QWORD *)(v4 + 400) = swift_task_alloc();
  *(_QWORD *)(v4 + 408) = swift_task_alloc();
  *(_QWORD *)(v4 + 416) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.loadContext(requestContext:allowingKeyRotation:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = objc_msgSend(**(id **)(v0 + 224), sel_useCase);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  *(_QWORD *)(v0 + 424) = v3;
  *(_QWORD *)(v0 + 432) = v5;
  *(_QWORD *)(v0 + 440) = *(_QWORD *)(v1 + 40);
  return swift_task_switch();
}

{
  uint64_t v0;

  ActiveUseCaseTracker.markActive(useCase:active:)(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432), 1);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  unint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t inited;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  _QWORD *v78;
  os_unfair_lock_s *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t ObjectType;
  int *v92;
  _QWORD *v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  _BOOL4 v97;
  unint64_t v98;
  unint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  unint64_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  __int128 v118;
  int *v119;
  uint64_t v120;
  uint64_t v121[2];

  v2 = *(_QWORD *)(v0 + 424);
  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 232) + 16);
  v5 = OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock;
  *(_QWORD *)(v0 + 448) = v4;
  *(_QWORD *)(v0 + 456) = v5;
  v6 = *(_QWORD *)(v4 + v5);
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v2;
  *(_QWORD *)(v7 + 24) = v1;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  closure #1 in ConfigCache.subscript.getter((uint64_t *)(v6 + 16), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  v9 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v8, v9, &demangling cache variable for type metadata for AspireApiConfig?);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  *(_QWORD *)(v0 + 464) = v12;
  LODWORD(v8) = v12(v9, 1, v10);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v9, &demangling cache variable for type metadata for AspireApiConfig?);
  if ((_DWORD)v8 != 1)
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    v21 = *(_QWORD *)(v0 + 392);
    v22 = *(_QWORD *)(v0 + 368);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 416), v21, &demangling cache variable for type metadata for AspireApiConfig?);
    v23 = v20(v21, 1, v22);
    v24 = *(_QWORD *)(v0 + 392);
    if (v23 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v24, &demangling cache variable for type metadata for AspireApiConfig?);
      if (one-time initialization token for framework != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.framework);
      swift_bridgeObjectRetain();
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.error.getter();
      v28 = os_log_type_enabled(v26, v27);
      v29 = *(_QWORD *)(v0 + 432);
      if (v28)
      {
        v30 = *(_QWORD *)(v0 + 424);
        v31 = (uint8_t *)swift_slowAlloc();
        v32 = swift_slowAlloc();
        v121[0] = v32;
        *(_DWORD *)v31 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_237BC8000, v26, v27, "No dynamic configuration for use-case '%{public}s'", v31, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B822DA8](v32, -1, -1);
        MEMORY[0x23B822DA8](v31, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      v53 = *(_QWORD *)(v0 + 416);
      type metadata accessor for CipherMLError();
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_27;
    }
    v44 = *(_QWORD *)(v0 + 384);
    v45 = *(_QWORD *)(v0 + 368);
    v46 = *(_QWORD *)(v0 + 352);
    outlined init with take of SecretKey(v24, v44, type metadata accessor for AspireApiConfig);
    v47 = (uint64_t *)(v44 + *(int *)(v45 + 20));
    v48 = *v47;
    *(_QWORD *)(v0 + 504) = *v47;
    v49 = v47[1];
    *(_QWORD *)(v0 + 512) = v49;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, v46, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    v50 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v46, 1, v50);
    v52 = *(_QWORD *)(v0 + 352);
    if (v51 == 1)
    {
      outlined copy of Data._Representation(v48, v49);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v52, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        v74 = *(_QWORD *)(v0 + 224);
        v73 = *(_QWORD *)(v0 + 232);
        outlined init with take of SecretKey(v52, *(_QWORD *)(v0 + 360), type metadata accessor for AspireApiPIRConfig);
        v75 = *(_OWORD *)(v74 + 24);
        v76 = *(_OWORD *)(v74 + 8);
        *(_BYTE *)(v0 + 144) = *(_BYTE *)(v74 + 40);
        *(_OWORD *)(v0 + 112) = v76;
        *(_OWORD *)(v0 + 128) = v75;
        v77 = *(_QWORD *)(v73 + 48);
        v78 = (_QWORD *)(v77 + 16);
        v79 = (os_unfair_lock_s *)(v77 + 24);
        outlined copy of Data._Representation(v48, v49);
        os_unfair_lock_lock(v79);
        closure #1 in OSAllocatedUnfairLock<A>.current.getter(v78, v121);
        os_unfair_lock_unlock(v79);
        v80 = AspireApiPIRConfig.validate(static:useCase:allowList:)((_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432), v121[0]);
        swift_release();
        if ((v80 & 1) != 0)
        {
          os_unfair_lock_lock(v79);
          closure #1 in OSAllocatedUnfairLock<A>.current.getter(v78, v121);
          os_unfair_lock_unlock(v79);
          v117 = v49;
          v81 = *(_QWORD *)(v121[0] + 48);
          swift_bridgeObjectRetain();
          swift_release();
          if (*(_QWORD *)(v81 + 16))
          {
            v83 = *(_QWORD *)(v0 + 424);
            v82 = *(_QWORD *)(v0 + 432);
            swift_bridgeObjectRetain();
            v84 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v82);
            if ((v85 & 1) != 0)
            {
              v86 = *(_QWORD *)(v0 + 232);
              v87 = (uint64_t *)(*(_QWORD *)(v81 + 56) + 16 * v84);
              v88 = *v87;
              *(_QWORD *)(v0 + 520) = *v87;
              v89 = v87[1];
              *(_QWORD *)(v0 + 528) = v89;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v0 + 536) = *(_QWORD *)(v86 + 24);
              v90 = *(_QWORD *)(v86 + 32);
              *(_QWORD *)(v0 + 544) = v90;
              ObjectType = swift_getObjectType();
              *(_QWORD *)(v0 + 552) = ObjectType;
              v92 = *(int **)(v90 + 8);
              *(_QWORD *)(v0 + 560) = v92;
              v119 = (int *)((char *)v92 + *v92);
              v93 = (_QWORD *)swift_task_alloc();
              *(_QWORD *)(v0 + 568) = v93;
              *v93 = v0;
              v93[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
              return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v119)(*(_QWORD *)(v0 + 344), v88, v89, ObjectType, v90);
            }
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          if (one-time initialization token for framework != -1)
            swift_once();
          v106 = type metadata accessor for Logger();
          __swift_project_value_buffer(v106, (uint64_t)static Logger.framework);
          swift_bridgeObjectRetain();
          v107 = Logger.logObject.getter();
          v108 = static os_log_type_t.error.getter();
          v109 = os_log_type_enabled(v107, v108);
          v110 = *(_QWORD *)(v0 + 432);
          if (v109)
          {
            v114 = *(_QWORD *)(v0 + 424);
            v111 = (uint8_t *)swift_slowAlloc();
            v112 = swift_slowAlloc();
            v121[0] = v112;
            *(_DWORD *)v111 = 136446210;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v110, v121);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_237BC8000, v107, v108, "No group associated with use-case '%{public}s'", v111, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x23B822DA8](v112, -1, -1);
            MEMORY[0x23B822DA8](v111, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          v53 = *(_QWORD *)(v0 + 416);
          v102 = *(_QWORD *)(v0 + 384);
          v103 = *(_QWORD *)(v0 + 360);
          type metadata accessor for CipherMLError();
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
          swift_allocError();
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          v105 = v117;
          v104 = v48;
        }
        else
        {
          if (one-time initialization token for framework != -1)
            swift_once();
          v120 = v48;
          v94 = type metadata accessor for Logger();
          __swift_project_value_buffer(v94, (uint64_t)static Logger.framework);
          swift_bridgeObjectRetain();
          v95 = Logger.logObject.getter();
          v96 = static os_log_type_t.error.getter();
          v97 = os_log_type_enabled(v95, v96);
          v98 = *(_QWORD *)(v0 + 432);
          v99 = v49;
          if (v97)
          {
            v113 = *(_QWORD *)(v0 + 424);
            v100 = (uint8_t *)swift_slowAlloc();
            v101 = swift_slowAlloc();
            v121[0] = v101;
            *(_DWORD *)v100 = 136446210;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v98, v121);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_237BC8000, v95, v96, "Dynamic configuration is invalid for use-case '%{public}s'", v100, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x23B822DA8](v101, -1, -1);
            MEMORY[0x23B822DA8](v100, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          v53 = *(_QWORD *)(v0 + 416);
          v102 = *(_QWORD *)(v0 + 384);
          v103 = *(_QWORD *)(v0 + 360);
          type metadata accessor for CipherMLError();
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
          swift_allocError();
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          v104 = v120;
          v105 = v99;
        }
        outlined consume of Data._Representation(v104, v105);
        outlined destroy of AspireApiPECConfig(v103, type metadata accessor for AspireApiPIRConfig);
        v64 = v102;
        goto LABEL_26;
      }
      outlined copy of Data._Representation(v48, v49);
      outlined destroy of AspireApiPECConfig(v52, type metadata accessor for AspireApiConfig.OneOf_Config);
    }
    if (one-time initialization token for framework != -1)
      swift_once();
    v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.error.getter();
    v57 = os_log_type_enabled(v55, v56);
    v58 = *(_QWORD *)(v0 + 432);
    if (v57)
    {
      v59 = *(_QWORD *)(v0 + 424);
      v60 = (uint8_t *)swift_slowAlloc();
      v116 = v49;
      v61 = swift_slowAlloc();
      v121[0] = v61;
      *(_DWORD *)v60 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v58, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v55, v56, "Did not find PIR config for PIR use-case '%{public}s.'", v60, 0xCu);
      swift_arrayDestroy();
      v62 = v61;
      v49 = v116;
      MEMORY[0x23B822DA8](v62, -1, -1);
      MEMORY[0x23B822DA8](v60, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v53 = *(_QWORD *)(v0 + 416);
    v63 = *(_QWORD *)(v0 + 384);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined consume of Data._Representation(v48, v49);
    v64 = v63;
LABEL_26:
    outlined destroy of AspireApiPECConfig(v64, type metadata accessor for AspireApiConfig);
LABEL_27:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v53, &demangling cache variable for type metadata for AspireApiConfig?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (one-time initialization token for framework != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 432);
  if (v16)
  {
    v115 = *(_QWORD *)(v0 + 424);
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v121[0] = v19;
    *(_DWORD *)v18 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v17, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v14, v15, "No dynamic configuration for use-case '%{public}s'. Running rotation task", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v19, -1, -1);
    MEMORY[0x23B822DA8](v18, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v33 = *(_QWORD *)(v0 + 232);
  v118 = *(_OWORD *)(v33 + 24);
  v34 = *(_QWORD *)(v33 + 48);
  v35 = (_QWORD *)(v34 + 16);
  v36 = (os_unfair_lock_s *)(v34 + 24);
  swift_retain();
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v36);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v35, v121);
  os_unfair_lock_unlock(v36);
  v37 = v121[0];
  v38 = **(void ***)(v0 + 224);
  swift_retain();
  v39 = objc_msgSend(v38, sel_sourceApplicationBundleIdentifier);
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0;
  }
  v66 = *(_QWORD *)(v0 + 432);
  v67 = *(_QWORD *)(v0 + 440);
  v68 = *(_QWORD *)(v0 + 424);
  type metadata accessor for KeyRotation();
  v69 = swift_allocObject();
  *(_QWORD *)(v0 + 472) = v69;
  swift_defaultActor_initialize();
  *(_QWORD *)(v69 + 216) = 0;
  *(_OWORD *)(v69 + 200) = 0u;
  *(_OWORD *)(v69 + 184) = 0u;
  *(_QWORD *)(v69 + 112) = v4;
  *(_OWORD *)(v69 + 120) = v118;
  *(_QWORD *)(v69 + 136) = v37;
  *(_QWORD *)(v69 + 144) = v67;
  *(_QWORD *)(v69 + 168) = v41;
  *(_QWORD *)(v69 + 176) = v43;
  *(_QWORD *)(v69 + 152) = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
  *(_QWORD *)(v69 + 160) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540E0;
  *(_QWORD *)(inited + 32) = v68;
  *(_QWORD *)(inited + 40) = v66;
  swift_bridgeObjectRetain();
  v71 = specialized Set.init<A>(_:)(inited);
  *(_QWORD *)(v0 + 480) = v71;
  swift_setDeallocating();
  swift_arrayDestroy();
  v72 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 488) = v72;
  *v72 = v0;
  v72[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  return KeyRotation.run(activeUseCases:)(v71);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 496) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v1 = v0[43];
  v2 = v0[33];
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[34] + 48);
  v0[72] = v3;
  if (v3(v1, 1, v2) || (v5 = *(_QWORD *)(v1 + *(int *)(v2 + 24)), !*(_QWORD *)(v5 + 16)))
  {
    v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[31] + 56);
    v4(v0[39], 1, 1, v0[30]);
  }
  else
  {
    v6 = v0[45];
    v7 = *(_QWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 40);
    outlined copy of Data._Representation(v7, v8);
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    v10 = v0[39];
    v11 = v0[30];
    v12 = v0[31];
    if ((v13 & 1) != 0)
    {
      outlined init with copy of SecretKey(*(_QWORD *)(v5 + 56) + *(_QWORD *)(v12 + 72) * v9, v0[39], (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      v4(v10, 0, 1, v11);
    }
    else
    {
      v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      v4(v0[39], 1, 1, v11);
    }
    outlined consume of Data._Representation(v7, v8);
  }
  v0[73] = v4;
  v14 = *(_QWORD *)(v0[29] + 56);
  v0[74] = v14;
  v0[75] = *(_QWORD *)(v14 + 16);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  v0[76] = RotationTask.keyRotation.getter();
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v0[77] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  return KeyRotation.areKeysExpired(groupName:)(v0[65], v0[66]);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 576);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 264);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 344), v2, &demangling cache variable for type metadata for UserIdentifier?);
  LODWORD(v3) = v1(v2, 1, v3);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v2, &demangling cache variable for type metadata for UserIdentifier?);
  if ((_DWORD)v3 == 1
    || (v4 = *(_QWORD *)(v0 + 304),
        v5 = *(_QWORD *)(v0 + 240),
        v6 = *(_QWORD *)(v0 + 248),
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 312), v4, &demangling cache variable for type metadata for SecretKey?), LODWORD(v5) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5), outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for SecretKey?), (_DWORD)v5 == 1))
  {
    if (*(_BYTE *)(v0 + 145) != 1)
    {
LABEL_4:
      *(_QWORD *)(v0 + 680) = *(_QWORD *)(*(_QWORD *)(v0 + 592) + 16);
      swift_retain();
      return swift_task_switch();
    }
  }
  else if (*(_BYTE *)(v0 + 146) != 1 || (*(_BYTE *)(v0 + 145) & 1) == 0)
  {
    goto LABEL_4;
  }
  if (one-time initialization token for framework != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 432);
  if (v10)
  {
    v12 = *(_QWORD *)(v0 + 424);
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v16 = v14;
    *(_DWORD *)v13 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v8, v9, "No userId or secretKey for use-case '%{public}s'. Running rotation task'", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v14, -1, -1);
    MEMORY[0x23B822DA8](v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  *(_QWORD *)(v0 + 632) = *(_QWORD *)(*(_QWORD *)(v0 + 592) + 16);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 640) = RotationTask.keyRotation.getter();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[53];
  v1 = v0[54];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540E0;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  swift_bridgeObjectRetain();
  v4 = specialized Set.init<A>(_:)(inited);
  v0[81] = v4;
  swift_setDeallocating();
  swift_arrayDestroy();
  v5 = (_QWORD *)swift_task_alloc();
  v0[82] = v5;
  *v5 = v0;
  v5[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  return KeyRotation.run(activeUseCases:)(v4);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  int *v4;
  _QWORD *v5;
  int *v6;

  v2 = (_QWORD *)*v1;
  v2[83] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
  else
  {
    v4 = (int *)v2[70];
    swift_bridgeObjectRelease();
    swift_release();
    v6 = (int *)((char *)v4 + *v4);
    v5 = (_QWORD *)swift_task_alloc();
    v2[84] = v5;
    *v5 = v2;
    v5[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v6)(v2[41], v2[65], v2[66], v2[69], v2[68]);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[72];
  v2 = v0[43];
  v3 = v0[33];
  outlined assign with take of UserIdentifier?(v0[41], v2);
  if (v1(v2, 1, v3))
  {
    v4 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[73];
    v5 = v0[37];
    v6 = v0[30];
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[39], &demangling cache variable for type metadata for SecretKey?);
    v4(v5, 1, 1, v6);
  }
  else
  {
    v7 = *(_QWORD *)(v0[43] + *(int *)(v0[33] + 24));
    if (*(_QWORD *)(v7 + 16))
    {
      v8 = v0[45];
      v9 = *(_QWORD *)(v8 + 32);
      v10 = *(_QWORD *)(v8 + 40);
      outlined copy of Data._Representation(v9, v10);
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
      v12 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[73];
      v13 = v0[37];
      if ((v14 & 1) != 0)
      {
        v15 = v0[30];
        outlined init with copy of SecretKey(*(_QWORD *)(v7 + 56) + *(_QWORD *)(v0[31] + 72) * v11, v0[37], (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
        v16 = v13;
        v17 = 0;
        v18 = v15;
      }
      else
      {
        v18 = v0[30];
        v16 = v0[37];
        v17 = 1;
      }
      v12(v16, v17, 1, v18);
      outlined consume of Data._Representation(v9, v10);
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v0[73])(v0[37], 1, 1, v0[30]);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v0[39], &demangling cache variable for type metadata for SecretKey?);
  }
  outlined init with take of RequestContext<StaticPIRParameters>(v0[37], v0[39], &demangling cache variable for type metadata for SecretKey?);
  v0[85] = *(_QWORD *)(v0[74] + 16);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  v0[86] = RotationTask.keyRotation.getter();
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v0[87] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  return KeyRotation.areKeysExpired(groupName:)(v0[65], v0[66]);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];

  if ((*(_BYTE *)(v0 + 147) & 1) == 0)
  {
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 576);
    v10 = *(_QWORD *)(v0 + 320);
    v11 = *(_QWORD *)(v0 + 264);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 344), v10, &demangling cache variable for type metadata for UserIdentifier?);
    v12 = v9(v10, 1, v11);
    v13 = *(_QWORD *)(v0 + 320);
    if (v12 == 1)
    {
      v14 = &demangling cache variable for type metadata for UserIdentifier?;
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 312);
      v16 = *(_QWORD *)(v0 + 288);
      v18 = *(_QWORD *)(v0 + 240);
      v17 = *(_QWORD *)(v0 + 248);
      outlined init with take of SecretKey(v13, *(_QWORD *)(v0 + 280), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v15, v16, &demangling cache variable for type metadata for SecretKey?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v16, 1, v18) != 1)
      {
        v53 = *(_QWORD *)(v0 + 504);
        v54 = *(_QWORD *)(v0 + 512);
        v36 = *(_QWORD *)(v0 + 416);
        v50 = *(_QWORD *)(v0 + 424);
        v51 = *(_QWORD *)(v0 + 432);
        v37 = *(_QWORD *)(v0 + 384);
        v38 = *(_QWORD *)(v0 + 360);
        v52 = *(_QWORD *)(v0 + 344);
        v39 = *(_QWORD *)(v0 + 312);
        v40 = *(_QWORD *)(v0 + 280);
        v41 = *(_QWORD *)(v0 + 256);
        v43 = *(_QWORD **)(v0 + 216);
        v42 = *(_QWORD *)(v0 + 224);
        outlined init with take of SecretKey(*(_QWORD *)(v0 + 288), v41, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
        v44 = specialized RequestsManager.loadCache(requestContext:)(v42);
        v46 = v45;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for SecretKey?);
        outlined destroy of AspireApiPECConfig(v37, type metadata accessor for AspireApiConfig);
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for AspireApiConfig?);
        v47 = (int *)type metadata accessor for RequestsManager.PIRContext();
        outlined init with take of SecretKey(v40, (uint64_t)v43 + v47[5], (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
        outlined init with take of SecretKey(v38, (uint64_t)v43 + v47[6], type metadata accessor for AspireApiPIRConfig);
        outlined init with take of SecretKey(v41, (uint64_t)v43 + v47[8], (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
        *v43 = v50;
        v43[1] = v51;
        v48 = (_QWORD *)((char *)v43 + v47[7]);
        *v48 = v53;
        v48[1] = v54;
        v49 = (_QWORD *)((char *)v43 + v47[9]);
        *v49 = v44;
        v49[1] = v46;
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v52, &demangling cache variable for type metadata for UserIdentifier?);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v34 = *(uint64_t (**)(void))(v0 + 8);
        return v34();
      }
      v19 = *(_QWORD *)(v0 + 288);
      outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 280), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
      v14 = &demangling cache variable for type metadata for SecretKey?;
      v13 = v19;
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, v14);
    if (one-time initialization token for framework != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v2 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    v22 = os_log_type_enabled(v2, v21);
    v23 = *(_QWORD *)(v0 + 432);
    if (v22)
    {
      v24 = *(_QWORD *)(v0 + 424);
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v55[0] = v26;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v2, v21, "No key for use-case '%{public}s'", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v26, -1, -1);
      MEMORY[0x23B822DA8](v25, -1, -1);
      goto LABEL_16;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  if (one-time initialization token for framework != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 432);
  if (!v4)
    goto LABEL_15;
  v6 = *(_QWORD *)(v0 + 424);
  v7 = (uint8_t *)swift_slowAlloc();
  v8 = swift_slowAlloc();
  v55[0] = v8;
  *(_DWORD *)v7 = 136446210;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v55);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_237BC8000, v2, v3, "Key expired for use-case '%{public}s'", v7, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x23B822DA8](v8, -1, -1);
  MEMORY[0x23B822DA8](v7, -1, -1);
LABEL_16:

  v28 = *(_QWORD *)(v0 + 504);
  v27 = *(_QWORD *)(v0 + 512);
  v29 = *(_QWORD *)(v0 + 416);
  v30 = *(_QWORD *)(v0 + 384);
  v31 = *(_QWORD *)(v0 + 360);
  v32 = *(_QWORD *)(v0 + 344);
  v33 = *(_QWORD *)(v0 + 312);
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  outlined consume of Data._Representation(v28, v27);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v33, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspireApiPECConfig(v31, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspireApiPECConfig(v30, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v29, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v32, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 416);
  swift_release();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 312);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 512));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 312);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 512));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 312);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 512));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v5, &demangling cache variable for type metadata for SecretKey?);
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for UserIdentifier?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void RequestsManager.loadContext(requestContext:allowingKeyRotation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  unint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  os_unfair_lock_s *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t ObjectType;
  int *v62;
  _QWORD *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  unint64_t v68;
  unint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  _BOOL4 v79;
  unint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89[2];

  v1 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + 448) + *(_QWORD *)(v0 + 456));
  v6 = swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v2;
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  closure #1 in ConfigCache.subscript.getter((uint64_t *)(v5 + 16), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v4);
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
    return;
  }
  v7 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 400);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
  swift_release();
  swift_task_dealloc();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v7, &demangling cache variable for type metadata for AspireApiConfig?);
  outlined init with take of RequestContext<StaticPIRParameters>(v8, v7, &demangling cache variable for type metadata for AspireApiConfig?);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  v10 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 368);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 416), v10, &demangling cache variable for type metadata for AspireApiConfig?);
  v12 = v9(v10, 1, v11);
  v13 = *(_QWORD *)(v0 + 392);
  if (v12 == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v13, &demangling cache variable for type metadata for AspireApiConfig?);
    if (one-time initialization token for framework != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(_QWORD *)(v0 + 432);
    if (v17)
    {
      v19 = *(_QWORD *)(v0 + 424);
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v89[0] = v21;
      *(_DWORD *)v20 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v15, v16, "No dynamic configuration for use-case '%{public}s'", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v21, -1, -1);
      MEMORY[0x23B822DA8](v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v31 = *(_QWORD *)(v0 + 416);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_21;
  }
  v22 = *(_QWORD *)(v0 + 384);
  v23 = *(_QWORD *)(v0 + 368);
  v24 = *(_QWORD *)(v0 + 352);
  outlined init with take of SecretKey(v13, v22, type metadata accessor for AspireApiConfig);
  v25 = (uint64_t *)(v22 + *(int *)(v23 + 20));
  v26 = *v25;
  *(_QWORD *)(v0 + 504) = *v25;
  v27 = v25[1];
  *(_QWORD *)(v0 + 512) = v27;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v22, v24, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v28 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v24, 1, v28);
  v30 = *(_QWORD *)(v0 + 352);
  if (v29 == 1)
  {
    outlined copy of Data._Representation(v26, v27);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
LABEL_14:
    if (one-time initialization token for framework != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(_QWORD *)(v0 + 432);
    if (v35)
    {
      v37 = *(_QWORD *)(v0 + 424);
      v38 = (uint8_t *)swift_slowAlloc();
      v85 = v27;
      v39 = swift_slowAlloc();
      v89[0] = v39;
      *(_DWORD *)v38 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v33, v34, "Did not find PIR config for PIR use-case '%{public}s.'", v38, 0xCu);
      swift_arrayDestroy();
      v40 = v39;
      v27 = v85;
      MEMORY[0x23B822DA8](v40, -1, -1);
      MEMORY[0x23B822DA8](v38, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v31 = *(_QWORD *)(v0 + 416);
    v41 = *(_QWORD *)(v0 + 384);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined consume of Data._Representation(v26, v27);
    v42 = v41;
    goto LABEL_20;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined copy of Data._Representation(v26, v27);
    outlined destroy of AspireApiPECConfig(v30, type metadata accessor for AspireApiConfig.OneOf_Config);
    goto LABEL_14;
  }
  v44 = *(_QWORD *)(v0 + 224);
  v43 = *(_QWORD *)(v0 + 232);
  outlined init with take of SecretKey(v30, *(_QWORD *)(v0 + 360), type metadata accessor for AspireApiPIRConfig);
  v45 = *(_OWORD *)(v44 + 24);
  v46 = *(_OWORD *)(v44 + 8);
  *(_BYTE *)(v0 + 144) = *(_BYTE *)(v44 + 40);
  *(_OWORD *)(v0 + 112) = v46;
  *(_OWORD *)(v0 + 128) = v45;
  v47 = *(_QWORD *)(v43 + 48);
  v48 = (_QWORD *)(v47 + 16);
  v49 = (os_unfair_lock_s *)(v47 + 24);
  outlined copy of Data._Representation(v26, v27);
  os_unfair_lock_lock(v49);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v48, v89);
  os_unfair_lock_unlock(v49);
  v50 = AspireApiPIRConfig.validate(static:useCase:allowList:)((_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432), v89[0]);
  swift_release();
  if ((v50 & 1) == 0)
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v88 = v26;
    v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v65 = Logger.logObject.getter();
    v66 = static os_log_type_t.error.getter();
    v67 = os_log_type_enabled(v65, v66);
    v68 = *(_QWORD *)(v0 + 432);
    v69 = v27;
    if (v67)
    {
      v83 = *(_QWORD *)(v0 + 424);
      v70 = (uint8_t *)swift_slowAlloc();
      v71 = swift_slowAlloc();
      v89[0] = v71;
      *(_DWORD *)v70 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v68, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v65, v66, "Dynamic configuration is invalid for use-case '%{public}s'", v70, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v71, -1, -1);
      MEMORY[0x23B822DA8](v70, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v31 = *(_QWORD *)(v0 + 416);
    v72 = *(_QWORD *)(v0 + 384);
    v73 = *(_QWORD *)(v0 + 360);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    v74 = v88;
    v75 = v69;
    goto LABEL_39;
  }
  os_unfair_lock_lock(v49);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v48, v89);
  os_unfair_lock_unlock(v49);
  v86 = v27;
  v51 = *(_QWORD *)(v89[0] + 48);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(_QWORD *)(v51 + 16))
  {
LABEL_33:
    swift_bridgeObjectRelease();
    if (one-time initialization token for framework != -1)
      swift_once();
    v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v77 = Logger.logObject.getter();
    v78 = static os_log_type_t.error.getter();
    v79 = os_log_type_enabled(v77, v78);
    v80 = *(_QWORD *)(v0 + 432);
    if (v79)
    {
      v84 = *(_QWORD *)(v0 + 424);
      v81 = (uint8_t *)swift_slowAlloc();
      v82 = swift_slowAlloc();
      v89[0] = v82;
      *(_DWORD *)v81 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v80, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v77, v78, "No group associated with use-case '%{public}s'", v81, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v82, -1, -1);
      MEMORY[0x23B822DA8](v81, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v31 = *(_QWORD *)(v0 + 416);
    v72 = *(_QWORD *)(v0 + 384);
    v73 = *(_QWORD *)(v0 + 360);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    v75 = v86;
    v74 = v26;
LABEL_39:
    outlined consume of Data._Representation(v74, v75);
    outlined destroy of AspireApiPECConfig(v73, type metadata accessor for AspireApiPIRConfig);
    v42 = v72;
LABEL_20:
    outlined destroy of AspireApiPECConfig(v42, type metadata accessor for AspireApiConfig);
LABEL_21:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for AspireApiConfig?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v53 = *(_QWORD *)(v0 + 424);
  v52 = *(_QWORD *)(v0 + 432);
  swift_bridgeObjectRetain();
  v54 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v52);
  if ((v55 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v56 = *(_QWORD *)(v0 + 232);
  v57 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 16 * v54);
  v58 = *v57;
  *(_QWORD *)(v0 + 520) = *v57;
  v59 = v57[1];
  *(_QWORD *)(v0 + 528) = v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 536) = *(_QWORD *)(v56 + 24);
  v60 = *(_QWORD *)(v56 + 32);
  *(_QWORD *)(v0 + 544) = v60;
  ObjectType = swift_getObjectType();
  *(_QWORD *)(v0 + 552) = ObjectType;
  v62 = *(int **)(v60 + 8);
  *(_QWORD *)(v0 + 560) = v62;
  v87 = (int *)((char *)v62 + *v62);
  v63 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 568) = v63;
  *v63 = v0;
  v63[1] = RequestsManager.loadContext(requestContext:allowingKeyRotation:);
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v87)(*(_QWORD *)(v0 + 344), v58, v59, ObjectType, v60);
}

uint64_t RequestsManager.loadContext(requestContext:allowingKeyRotation:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_BYTE *)(v3 + 146) = a1;
  *(_QWORD *)(v3 + 624) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 704) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    *(_BYTE *)(v4 + 147) = a1 & 1;
  }
  return swift_task_switch();
}

uint64_t RequestsManager.requestData(index:context:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.requestData(indices:context:)()
{
  return swift_task_switch();
}

uint64_t RequestsManager.constructPIRRequest(index:context:)()
{
  return swift_task_switch();
}

uint64_t RequestsManager.constructPIRBatchRequest(indices:context:)()
{
  return swift_task_switch();
}

uint64_t RequestsManager.decryptPIRResponse(encryptedResponse:index:context:)()
{
  return swift_task_switch();
}

uint64_t RequestsManager.decryptPIRBatchResponse(encryptedResponse:indices:context:)()
{
  return swift_task_switch();
}

uint64_t RequestsManager.requestData(keywords:context:shardIds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  v3[13] = type metadata accessor for RequestsManager.PIRContext();
  v5 = swift_task_alloc();
  v3[14] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v3[15] = v6;
  *v6 = v3;
  v6[1] = RequestsManager.requestData(keywords:context:shardIds:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v5, a2, 1);
}

uint64_t RequestsManager.requestData(keywords:context:shardIds:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = (uint64_t *)(*(_QWORD *)(v0 + 112) + *(int *)(*(_QWORD *)(v0 + 104) + 36));
  v5 = *v4;
  v6 = v4[1];
  swift_unknownObjectRetain();
  v7 = specialized static RequestsManager.cachedAndMissingKeywordsInBatch(keywords:shardIds:cache:)(v1, v3, v5, v6);
  *(_QWORD *)(v0 + 136) = v7;
  *(_QWORD *)(v0 + 144) = v8;
  *(_QWORD *)(v0 + 152) = v9;
  if (v2)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
    swift_unknownObjectRelease();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = v7;
    v11 = v8;
    v12 = v9;
    swift_unknownObjectRelease();
    if (one-time initialization token for framework != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      *(_DWORD *)v16 = 134349312;
      *(_QWORD *)(v0 + 64) = *(_QWORD *)(v10 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2050;
      *(_QWORD *)(v0 + 72) = *(_QWORD *)(v11 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237BC8000, v14, v15, "Cached: %{public}ld / Missing: %{public}ld", (uint8_t *)v16, 0x16u);
      MEMORY[0x23B822DA8](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(_QWORD *)(v11 + 16))
    {
      v17 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(v11, v12);
      *(_QWORD *)(v0 + 160) = v17;
      v20 = v17;
      specialized RequestContext.networkManager()(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>, v0 + 16);
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v22;
      *v22 = v0;
      v22[1] = RequestsManager.requestData(keywords:context:shardIds:);
      return RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:)(v11, v10, *(_QWORD *)(v0 + 80), v20, v0 + 16);
    }
    else
    {
      v18 = *(_QWORD *)(v0 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_AHSgs5NeverOTg5161_s8CipherML15RequestsManagerC11requestData8keywords7context8shardIdsSay10Foundation0F0VSgGSayAJG_AA14RequestContextVyAA19StaticPIRParametersVGSaySSGtYaKFAkJXEfU_0H2ML0jK0C24CachedAndMissingKeywordsVTf1cn_nTf4ngX_nTm(v18, v10);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.requestData(keywords:context:shardIds:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0(v4 + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 184) = a1;
    __swift_destroy_boxed_opaque_existential_0(v4 + 16);
  }
  return swift_task_switch();
}

uint64_t specialized RequestContext.networkManager()@<X0>(uint64_t a1@<X8>)
{
  return specialized RequestContext.networkManager()(&demangling cache variable for type metadata for RequestContext<StaticPECParameters>, a1);
}

uint64_t specialized RequestContext.networkManager()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  id *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[5];

  v5 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NetworkManagerConfig(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  outlined init with copy of SecretKey((uint64_t)v2 + *(int *)(v11 + 32), (uint64_t)v7, type metadata accessor for NetworkConfig);
  v12 = objc_msgSend(*v2, sel_sourceApplicationBundleIdentifier);
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  outlined init with take of SecretKey((uint64_t)v7, (uint64_t)v10, type metadata accessor for NetworkConfig);
  v17 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  *v17 = v14;
  v17[1] = v16;
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(_QWORD *__return_ptr, char *))(*(_QWORD *)static NetworkManagerHelper.shared + 96))(v21, v10);
  outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for NetworkManagerConfig);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, (uint64_t)&v19, &demangling cache variable for type metadata for NetworkManager?);
  if (v20)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for NetworkManager?);
    return outlined init with take of LocalizedError(&v19, a2);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v19, &demangling cache variable for type metadata for NetworkManager?);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v21, &demangling cache variable for type metadata for NetworkManager?);
  }
}

uint64_t RequestsManager.requestDataWithAsyncResponse(keywords:context:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2[7] = a1;
  v2[8] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[9] = swift_task_alloc();
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>)
                 - 8);
  v2[10] = v4;
  v2[11] = *(_QWORD *)(v4 + 64);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v2[14] = v5;
  v2[15] = *(_QWORD *)(v5 - 8);
  v2[16] = swift_task_alloc();
  v6 = type metadata accessor for RequestsManager.PIRContext();
  v2[17] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[18] = v7;
  v2[19] = *(_QWORD *)(v7 + 64);
  v2[20] = swift_task_alloc();
  v8 = swift_task_alloc();
  v2[21] = v8;
  v9 = (_QWORD *)swift_task_alloc();
  v2[22] = v9;
  *v9 = v2;
  v9[1] = RequestsManager.requestDataWithAsyncResponse(keywords:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v8, a2, 1);
}

uint64_t RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  id *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[2];

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  UUID.init()();
  v4 = UUID.uuidString.getter();
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  if (one-time initialization token for framework != -1)
    swift_once();
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.framework);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v8, v7, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(id **)(v0 + 104);
  if (v12)
  {
    v14 = swift_slowAlloc();
    v62 = swift_slowAlloc();
    *(_DWORD *)v14 = 136446466;
    v67[0] = v62;
    v15 = objc_msgSend(*v13, sel_useCase);
    v16 = v6;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    v20 = v17;
    v6 = v16;
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v13, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
    *(_WORD *)(v14 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v16, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v10, v11, "Async response is requested for '%{public}s', uuid: %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v62, -1, -1);
    MEMORY[0x23B822DA8](v14, -1, -1);
  }
  else
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 104), &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
    swift_bridgeObjectRelease_n();
  }

  v21 = *(_QWORD *)(v0 + 184);
  v22 = *(_QWORD *)(v0 + 56);
  v23 = (uint64_t *)(*(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 136) + 36));
  v25 = *v23;
  v24 = v23[1];
  swift_unknownObjectRetain();
  v26 = specialized static RequestsManager.cachedAndMissingKeywordsInBatch(keywords:shardIds:cache:)(v22, MEMORY[0x24BEE4AF8], v25, v24);
  if (v21)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 168), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v30 = v26;
    v31 = v27;
    v32 = v28;
    swift_unknownObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.default.getter();
    v66 = v4;
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      v35 = swift_slowAlloc();
      *(_DWORD *)v35 = 134218240;
      *(_QWORD *)(v0 + 24) = *(_QWORD *)(v30 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2048;
      *(_QWORD *)(v0 + 32) = *(_QWORD *)(v31 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237BC8000, v33, (os_log_type_t)v34, "Cached: %ld / Missing: %ld", (uint8_t *)v35, 0x16u);
      MEMORY[0x23B822DA8](v35, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    if (*(_QWORD *)(v31 + 16))
    {
      v36 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(v31, MEMORY[0x24BEE4AF8]);
      v37 = *(_QWORD *)(v0 + 168);
      v42 = *(_QWORD *)(v0 + 160);
      v58 = *(_QWORD *)(v0 + 152);
      v43 = *(_QWORD *)(v0 + 144);
      v44 = *(_QWORD *)(v0 + 96);
      v61 = v44;
      v45 = *(_QWORD *)(v0 + 72);
      v60 = *(_QWORD *)(v0 + 80);
      v63 = v6;
      v64 = v36;
      v46 = *(_QWORD *)(v0 + 64);
      v65 = *(_QWORD *)(v0 + 56);
      v47 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v45, 1, 1, v47);
      outlined init with copy of SecretKey(v37, v42, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v46, v44, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
      v48 = (*(unsigned __int8 *)(v43 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      v49 = (v58 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
      v50 = (v49 + 31) & 0xFFFFFFFFFFFFFFF8;
      v59 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
      v51 = (*(unsigned __int8 *)(v60 + 80) + v59 + 8) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      v52 = (_QWORD *)swift_allocObject();
      v52[2] = 0;
      v52[3] = 0;
      v52[4] = v66;
      v52[5] = v63;
      outlined init with take of SecretKey(v42, (uint64_t)v52 + v48, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
      v53 = (_QWORD *)((char *)v52 + v49);
      *v53 = v30;
      v53[1] = v31;
      v53[2] = v32;
      *(_QWORD *)((char *)v52 + v50) = v65;
      *(_QWORD *)((char *)v52 + v59) = v64;
      outlined init with take of RequestContext<StaticPIRParameters>(v61, (uint64_t)v52 + v51, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
      v54 = v63;
      v55 = &async function pointer to partial apply for closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:);
    }
    else
    {
      v38 = *(_QWORD *)(v0 + 72);
      v39 = *(_QWORD *)(v0 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_AHSgs5NeverOTg5161_s8CipherML15RequestsManagerC11requestData8keywords7context8shardIdsSay10Foundation0F0VSgGSayAJG_AA14RequestContextVyAA19StaticPIRParametersVGSaySSGtYaKFAkJXEfU_0H2ML0jK0C24CachedAndMissingKeywordsVTf1cn_nTf4ngX_nTm(v39, v30);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v41 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v38, 1, 1, v41);
      v52 = (_QWORD *)swift_allocObject();
      v52[2] = 0;
      v52[3] = 0;
      v52[4] = v40;
      v52[5] = v39;
      v55 = &async function pointer to partial apply for closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:);
      v52[6] = v66;
      v52[7] = v6;
      v54 = v6;
    }
    v56 = *(_QWORD *)(v0 + 168);
    v57 = *(_QWORD *)(v0 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v57, (uint64_t)v55, (uint64_t)v52);
    swift_release();
    outlined destroy of AspireApiPECConfig(v56, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v66, v54);
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return swift_task_switch();
}

uint64_t closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Class isa;
  Class v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v27[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = (unint64_t *)(v1 + 40);
    do
    {
      v4 = *v3;
      if (*v3 >> 60 == 15)
      {
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF8]), sel_init);
      }
      else
      {
        v5 = *(v3 - 1);
        outlined copy of Data._Representation(v5, *v3);
        Data._bridgeToObjectiveC()();
        outlined consume of Data?(v5, v4);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 2;
      --v2;
    }
    while (v2);
  }
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v8 = (void *)objc_opt_self();
  type metadata accessor for NSObject();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = Array._bridgeToObjectiveC()().super.isa;
  v11 = (void *)MEMORY[0x23B821F68](v7, v6);
  *(_QWORD *)(v0 + 16) = 0;
  v12 = objc_msgSend(v8, sel_sendReplyForBatchPIR_requestError_keywords_uuid_error_, isa, 0, v10, v11, v0 + 16);

  v13 = *(void **)(v0 + 16);
  if (v13)
  {
    v14 = v13;

    swift_willThrow();
    v15 = 0;
  }
  else
  {
    v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  if (one-time initialization token for framework != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  v19 = os_log_type_enabled(v17, v18);
  v20 = *(_QWORD *)(v0 + 48);
  if (v19)
  {
    v21 = *(_QWORD *)(v0 + 40);
    v22 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    v27[0] = v26;
    *(_DWORD *)v22 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2082;
    *(_QWORD *)(v0 + 16) = v15;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    v23 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v17, v18, "Notified AMD for '%{public}s', response: %{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v26, -1, -1);
    MEMORY[0x23B822DA8](v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 200) = v11;
  *(_OWORD *)(v8 + 184) = v10;
  *(_QWORD *)(v8 + 168) = a7;
  *(_QWORD *)(v8 + 176) = a8;
  *(_QWORD *)(v8 + 152) = a5;
  *(_QWORD *)(v8 + 160) = a6;
  *(_QWORD *)(v8 + 144) = a4;
  return swift_task_switch();
}

uint64_t closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t)(v0 + 2);
  if (one-time initialization token for framework != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  v0[26] = __swift_project_value_buffer(v2, (uint64_t)static Logger.framework);
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[19];
  if (v5)
  {
    v7 = v0[18];
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13[0] = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v3, v4, "Async response request '%{public}s' has started", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v9, -1, -1);
    v10 = v8;
    v1 = (uint64_t)(v0 + 2);
    MEMORY[0x23B822DA8](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  specialized RequestContext.networkManager()(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>, v1);
  v11 = (_QWORD *)swift_task_alloc();
  v0[27] = v11;
  *v11 = v0;
  v11[1] = closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:);
  return RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:)(v0[22], v0[21], v0[23], v0[24], v1);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Class isa;
  Class v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32[2];

  v32[1] = *MEMORY[0x24BDAC8D0];
  swift_bridgeObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v4 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 152);
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v32[0] = v6;
    *(_DWORD *)v5 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v1, v2, "Async response request '%{public}s' has finished", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v6, -1, -1);
    MEMORY[0x23B822DA8](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v7 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v32[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v9 = (unint64_t *)(v7 + 40);
    do
    {
      v10 = *v9;
      if (*v9 >> 60 == 15)
      {
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF8]), sel_init);
      }
      else
      {
        v11 = *(v9 - 1);
        outlined copy of Data._Representation(v11, *v9);
        Data._bridgeToObjectiveC()();
        outlined consume of Data?(v11, v10);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  v14 = (void *)objc_opt_self();
  type metadata accessor for NSObject();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v16 = Array._bridgeToObjectiveC()().super.isa;
  v17 = (void *)MEMORY[0x23B821F68](v13, v12);
  *(_QWORD *)(v0 + 96) = 0;
  v18 = objc_msgSend(v14, sel_sendReplyForBatchPIR_requestError_keywords_uuid_error_, isa, 0, v16, v17, v0 + 96);

  v19 = *(void **)(v0 + 96);
  if (v19)
  {
    v20 = v19;

    swift_willThrow();
    v21 = 0;
  }
  else
  {
    v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.default.getter();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(_QWORD *)(v0 + 152);
  if (v24)
  {
    v26 = *(_QWORD *)(v0 + 144);
    v27 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v32[0] = v28;
    *(_DWORD *)v27 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2082;
    *(_QWORD *)(v0 + 112) = v21;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    v29 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_237BC8000, v22, v23, "Notified AMD for '%{public}s', response: %{public}s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v28, -1, -1);
    MEMORY[0x23B822DA8](v27, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Class isa;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = (void *)objc_opt_self();
  v5 = (void *)_convertErrorToNSError(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = (void *)MEMORY[0x23B821F68](v3, v2);
  *(_QWORD *)(v0 + 56) = 0;
  v8 = objc_msgSend(v4, sel_sendReplyForBatchPIR_requestError_keywords_uuid_error_, 0, v5, isa, v7, v0 + 56);

  if (*(_QWORD *)(v0 + 56))
  {
    v9 = *(id *)(v0 + 56);

    swift_willThrow();
    v10 = 0;
  }
  else
  {
    v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  swift_bridgeObjectRetain();
  v11 = v1;
  swift_bridgeObjectRetain();
  v12 = v1;
  swift_bridgeObjectRetain();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 152);
  if (v15)
  {
    v17 = *(_QWORD *)(v0 + 144);
    v18 = swift_slowAlloc();
    v24 = (_QWORD *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v26[0] = v25;
    *(_DWORD *)v18 = 136446722;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2082;
    *(_QWORD *)(v0 + 72) = v10;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    v19 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 22) = 2114;
    v21 = v1;
    v22 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 88) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v24 = v22;

    _os_log_impl(&dword_237BC8000, v13, v14, "Async response request '%{public}s' has failed, notified AMD: %{public}s, error: %{public}@", (uint8_t *)v18, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v24, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v25, -1, -1);
    MEMORY[0x23B822DA8](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *v2 + 16;
  *(_QWORD *)(v3 + 224) = a1;
  *(_QWORD *)(v3 + 232) = v1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v4);
  return swift_task_switch();
}

uint64_t RequestsManager.removeCachedKeywords(keywords:context:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a1;
  v2[3] = type metadata accessor for RequestsManager.PIRContext();
  v4 = swift_task_alloc();
  v2[4] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v2[5] = v5;
  *v5 = v2;
  v5[1] = RequestsManager.removeCachedKeywords(keywords:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v4, a2, 0);
}

uint64_t RequestsManager.removeCachedKeywords(keywords:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = (_QWORD *)(v1 + *(int *)(*(_QWORD *)(v0 + 24) + 36));
  if (*v2)
  {
    v3 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 16);
    v5 = v2[1];
    ObjectType = swift_getObjectType();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    swift_unknownObjectRetain();
    v8 = v7(v4, ObjectType, v5);
    swift_unknownObjectRelease();
    v1 = *(_QWORD *)(v0 + 32);
    if (v3)
    {
      outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 32), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v8 = 0;
  }
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.constructPIRRequest(keyword:shardId:pirContext:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;

  if (!a4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_237D540E0;
    *(_QWORD *)(inited + 32) = a1;
    *(_QWORD *)(inited + 40) = a2;
    outlined copy of Data._Representation(a1, a2);
    v16 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(inited, MEMORY[0x24BEE4AF8]);
    swift_setDeallocating();
    result = swift_arrayDestroy();
    if (v5)
      return result;
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AspireApiRequest(0) - 8) + 80);
      outlined init with copy of SecretKey(v16 + ((v17 + 32) & ~v17), a5, type metadata accessor for AspireApiRequest);
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
  v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_237D540E0;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_237D540E0;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a1, a2);
  v12 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(v10, v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  result = swift_arrayDestroy();
  if (v5)
    return result;
  if (!*(_QWORD *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  v14 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AspireApiRequest(0) - 8) + 80);
  outlined init with copy of SecretKey(v12 + ((v14 + 32) & ~v14), a5, type metadata accessor for AspireApiRequest);
  return swift_bridgeObjectRelease();
}

uint64_t RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  *(_QWORD *)(v9 + 56) = a7;
  *(_QWORD *)(v9 + 64) = v8;
  *(_QWORD *)(v9 + 40) = a5;
  *(_QWORD *)(v9 + 48) = a6;
  *(_BYTE *)(v9 + 144) = a4;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  *(_QWORD *)(v9 + 72) = swift_task_alloc();
  *(_QWORD *)(v9 + 80) = type metadata accessor for AspireApiPIRRequest(0);
  *(_QWORD *)(v9 + 88) = swift_task_alloc();
  v11 = type metadata accessor for AspireApiEvaluationKey(0);
  *(_QWORD *)(v9 + 96) = v11;
  *(_QWORD *)(v9 + 104) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 112) = swift_task_alloc();
  type metadata accessor for RequestsManager.PIRContext();
  v12 = swift_task_alloc();
  *(_QWORD *)(v9 + 120) = v12;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 128) = v13;
  *v13 = v9;
  v13[1] = RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v12, a8, 0);
}

uint64_t RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 136);
  RequestsManager.constructPIRRequest(keyword:shardId:pirContext:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
  if (!v1 && *(_BYTE *)(v0 + 144) == 1)
  {
    RequestsManager.generateEvaluationKey(config:pirContext:)(*(void **)(v0 + 56), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));
    v2 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 16);
    v4 = v3 + *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v4, v2, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    v5 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5);
    v8 = *(_QWORD *)(v0 + 72);
    if (v7 == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 72), &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        outlined init with take of SecretKey(v8, *(_QWORD *)(v0 + 88), type metadata accessor for AspireApiPIRRequest);
        goto LABEL_9;
      }
      outlined destroy of AspireApiPECConfig(v8, type metadata accessor for AspireApiRequest.OneOf_Request);
    }
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 104);
    v12 = *(int **)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 88);
    *(_DWORD *)v11 = 0;
    *(_OWORD *)(v11 + 8) = xmmword_237D54090;
    UnknownStorage.init()();
    v13 = v11 + v12[7];
    v14 = type metadata accessor for AspirePirEncryptedIndices(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v15 = v11 + v12[8];
    v16 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    v17 = (_QWORD *)(v11 + v12[9]);
    *v17 = 0;
    v17[1] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11 + v12[10], 1, 1, v9);
LABEL_9:
    v19 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v21 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 96);
    v22 = v21 + *(int *)(*(_QWORD *)(v0 + 80) + 40);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v22, &demangling cache variable for type metadata for AspireApiEvaluationKey?);
    outlined init with take of SecretKey(v18, v22, type metadata accessor for AspireApiEvaluationKey);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v20);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
    outlined init with take of SecretKey(v21, v4, type metadata accessor for AspireApiPIRRequest);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  }
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 120), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = type metadata accessor for AspireApiRequests(0);
  v3[5] = swift_task_alloc();
  type metadata accessor for RequestsManager.PIRContext();
  v5 = swift_task_alloc();
  v3[6] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v3[7] = v6;
  *v6 = v3;
  v6[1] = RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v5, a3, 0);
}

uint64_t RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  if (v1)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 48), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(swift_task_alloc() + 16) = v2;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequests and conformance AspireApiRequests, type metadata accessor for AspireApiRequests, (uint64_t)&protocol conformance descriptor for AspireApiRequests);
    static Message.with(_:)();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v3 = Message.serializedData(partial:)();
    v4 = *(_QWORD *)(v0 + 48);
    v6 = v3;
    v8 = v7;
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 40), type metadata accessor for AspireApiRequests);
    outlined destroy of AspireApiPECConfig(v4, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v8);
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  return specialized RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(a1, a2, a3, a4, a5, a6);
}

uint64_t RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  type metadata accessor for RequestsManager.PIRContext();
  v8[10] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v8[11] = swift_task_alloc();
  v8[12] = type metadata accessor for AspireApiResponse(0);
  v8[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:)()
{
  _QWORD *v0;
  _QWORD *v1;

  outlined copy of Data._Representation(v0[2], v0[3]);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, type metadata accessor for AspireApiResponse, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
  Message.init(serializedData:extensions:partial:options:)();
  v1 = (_QWORD *)swift_task_alloc();
  v0[14] = v1;
  *v1 = v0;
  v1[1] = RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v0[10], v0[6], 0);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = specialized RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  if (v1)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 80), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 104), type metadata accessor for AspireApiResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = v2;
    v6 = v3;
    v7 = *(_QWORD *)(v0 + 104);
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 80), (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
    outlined destroy of AspireApiPECConfig(v7, type metadata accessor for AspireApiResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *, uint64_t))(v0 + 8))(v5, v6);
  }
}

{
  uint64_t v0;

  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 104), type metadata accessor for AspireApiResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v5[6] = a3;
  v5[7] = v4;
  v5[4] = a1;
  v5[5] = a2;
  type metadata accessor for BinaryDecodingOptions();
  v5[8] = swift_task_alloc();
  v5[9] = type metadata accessor for AspireApiResponses(0);
  v5[10] = swift_task_alloc();
  type metadata accessor for RequestsManager.PIRContext();
  v7 = swift_task_alloc();
  v5[11] = v7;
  v8 = (_QWORD *)swift_task_alloc();
  v5[12] = v8;
  *v8 = v5;
  v8[1] = RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v7, a4, 0);
}

uint64_t RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 104);
  outlined copy of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponses and conformance AspireApiResponses, type metadata accessor for AspireApiResponses, (uint64_t)&protocol conformance descriptor for AspireApiResponses);
  Message.init(serializedData:extensions:partial:options:)();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 88);
  }
  else
  {
    v3 = *(uint64_t **)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 48);
    v5 = *v3;
    v6 = *(_QWORD *)(*v3 + 16);
    v7 = *(_QWORD *)(v4 + 16);
    if (v6 == v7)
    {
      v8 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 56);
      v10 = swift_task_alloc();
      *(_QWORD *)(v10 + 16) = v9;
      *(_QWORD *)(v10 + 24) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8CipherML17AspireApiResponseVGSay10Foundation4DataVGG_ANSgsAE_pTg503_s8f4ML17hij14V10Foundation4l7VAFSgs5C33_pIgngozo_AC_AFtAGsAH_pIegnrzr_TRAjnQsAE_pIgngozo_Tf1cn_n(v5, v4, (uint64_t (*)(uint64_t, uint64_t, unint64_t))partial apply for closure #1 in RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:), v10);
      v13 = *(_QWORD *)(v0 + 80);
      v12 = *(_QWORD *)(v0 + 88);
      v21 = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of AspireApiPECConfig(v13, type metadata accessor for AspireApiResponses);
      outlined destroy of AspireApiPECConfig(v12, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v21);
    }
    v14 = one-time initialization token for daemon;
    swift_bridgeObjectRetain();
    if (v14 != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.daemon);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      *(_DWORD *)v18 = 134349312;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 16) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2050;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 24) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_237BC8000, v16, v17, "    encryptedResponses.count '%{public}ld'     does not equal keywords.count '%{public}ld'", (uint8_t *)v18, 0x16u);
      MEMORY[0x23B822DA8](v18, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    v20 = *(_QWORD *)(v0 + 80);
    v19 = *(_QWORD *)(v0 + 88);
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    outlined destroy of AspireApiPECConfig(v20, type metadata accessor for AspireApiResponses);
    v2 = v19;
  }
  outlined destroy of AspireApiPECConfig(v2, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.requestData(latitude:longitude:context:)()
{
  return swift_task_switch();
}

uint64_t RequestsManager.constructPIRRequest(latitude:longitude:context:)()
{
  return swift_task_switch();
}

uint64_t RequestsManager.decryptPIRResponse(encryptedResponse:latitude:longitude:context:)()
{
  return swift_task_switch();
}

void closure #1 in RequestsManager.loadCache(requestContext:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;

  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(a1 + 40) == 1)
    {
      if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
        swift_once();
      v6 = &static StaticPIRParameters.defaultCacheEntryMinutesToLive;
    }
    else
    {
      v6 = (uint64_t *)(a1 + 32);
    }
    v7 = *v6;
    v8 = objc_msgSend(*(id *)a1, sel_useCase);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    type metadata accessor for SqliteCache();
    swift_allocObject();
    v12 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v9, v11, v5, v7, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
    if (!v2)
    {
      *a2 = v12;
      a2[1] = (uint64_t)&protocol witness table for SqliteCache;
      return;
    }
    if (one-time initialization token for daemon != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.daemon);
    v14 = v2;
    v15 = v2;
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v18 = 138412290;
      v20 = v2;
      v21 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v19 = v21;

      _os_log_impl(&dword_237BC8000, v16, v17, "Failed to initialize cache: %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v19, -1, -1);
      MEMORY[0x23B822DA8](v18, -1, -1);

    }
    else
    {

    }
  }
  *a2 = 0;
  a2[1] = 0;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  __int128 v39;
  __int128 v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UseCase>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v36)
          goto LABEL_33;
        v23 = v37[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_33;
          v23 = v37[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v38 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v36)
                  goto LABEL_33;
                v23 = v37[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 48 * v21;
      v39 = *(_OWORD *)v32;
      v40 = *(_OWORD *)(v32 + 16);
      v33 = *(_QWORD *)(v32 + 32);
      v34 = *(_BYTE *)(v32 + 40);
      if ((v38 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 48 * v17;
      *(_OWORD *)v19 = v39;
      *(_OWORD *)(v19 + 16) = v40;
      *(_QWORD *)(v19 + 32) = v33;
      *(_BYTE *)(v19 + 40) = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, Data?>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v24 >= v12)
          goto LABEL_33;
        v25 = v9[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v12)
            goto LABEL_33;
          v25 = v9[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v25 = v9[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_42;
                if (v15 >= v12)
                  goto LABEL_33;
                v25 = v9[v15];
                ++v26;
                if (v25)
                  goto LABEL_30;
              }
            }
            v15 = v26;
          }
        }
LABEL_30:
        v11 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      v35 = v32;
      if ((a2 & 1) == 0)
      {
        outlined copy of Data._Representation(v32, *((unint64_t *)&v32 + 1));
        outlined copy of Data?(v34, *((unint64_t *)&v34 + 1));
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        v20 = v35;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        v20 = v35;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v21 = 16 * v19;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + v21) = v20;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + v21) = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, [TokenCache.CachedToken]>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      outlined copy of Data._Representation(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  char *v44;
  uint64_t v45;

  v3 = v2;
  v45 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  v43 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v40 = v2;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 64);
    v42 = (_QWORD *)(v7 + 64);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v41 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41)
          goto LABEL_34;
        v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v41)
            goto LABEL_34;
          v22 = v42[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              v3 = v40;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v7 + 32);
                if (v38 >= 64)
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v38;
                *(_QWORD *)(v7 + 16) = 0;
              }
              break;
            }
            v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v41)
                  goto LABEL_34;
                v22 = v42[v16];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v16 = v23;
          }
        }
LABEL_21:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = *(_QWORD *)(v7 + 56);
      v25 = v7;
      v26 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v5 + 72);
      v30 = v24 + v29 * v20;
      if ((v43 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v44, v30, v45);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v44, v30, v45);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(v9 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v14 + 8 * v33);
        }
        while (v37 == -1);
        v17 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v17);
      *v18 = v28;
      v18[1] = v27;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v9 + 56) + v29 * v17, v44, v45);
      ++*(_QWORD *)(v9 + 16);
      v7 = v25;
    }
  }
  result = swift_release();
  *v3 = v9;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup, &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;

  v3 = v2;
  v5 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v38 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AspireHeSerializedKeySwitchKey>);
  v39 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v35 = v3;
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v37 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v36 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v37;
        if (v20 >= v36)
          goto LABEL_34;
        v21 = v37[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v36)
            goto LABEL_34;
          v21 = v37[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_34:
              if ((v39 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v33;
              v3 = v35;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v36)
                  goto LABEL_34;
                v21 = v37[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19);
      v24 = *(_QWORD *)(v38 + 72);
      v25 = *(_QWORD *)(v8 + 56) + v24 * v19;
      if ((v39 & 1) != 0)
        outlined init with take of SecretKey(v25, (uint64_t)v7, type metadata accessor for AspireHeSerializedKeySwitchKey);
      else
        outlined init with copy of SecretKey(v25, (uint64_t)v7, type metadata accessor for AspireHeSerializedKeySwitchKey);
      result = static Hasher._hash(seed:_:)();
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v17) = v23;
      result = outlined init with take of SecretKey((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17, type metadata accessor for AspireHeSerializedKeySwitchKey);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  __int128 v43;

  v3 = v2;
  v5 = type metadata accessor for SecretKey();
  v41 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, SecretKey>);
  v42 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v38 = v2;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v40 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v39)
              goto LABEL_34;
            v24 = v40[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v41 + 72);
    v27 = *(_QWORD *)(v8 + 56) + v26 * v21;
    v28 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v21 + 8);
    v43 = *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    if ((v42 & 1) != 0)
    {
      outlined init with take of SecretKey(v27, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    }
    else
    {
      outlined init with copy of SecretKey(v27, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      outlined copy of Data._Representation(v43, v28);
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v10 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      v19 = v43;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      v19 = v43;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v15 + 8 * v31);
      }
      while (v35 == -1);
      v18 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18) = v19;
    result = outlined init with take of SecretKey((uint64_t)v7, *(_QWORD *)(v10 + 56) + v26 * v18, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v8 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for AspireApiConfig, &demangling cache variable for type metadata for _DictionaryStorage<String, AspireApiConfig>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t (*v48)(_QWORD);

  v6 = v4;
  v48 = a3;
  v8 = a3(0);
  v46 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v42 - v9;
  v11 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v47 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v45 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v4;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_34;
      v27 = v45[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_34:
          swift_release();
          v6 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_43;
            if (v20 >= v44)
              goto LABEL_34;
            v27 = v45[v20];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
        }
        v20 = v28;
      }
    }
LABEL_21:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    v29 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v24);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(v46 + 72);
    v33 = *(_QWORD *)(v11 + 56) + v32 * v24;
    if ((v47 & 1) != 0)
    {
      outlined init with take of SecretKey(v33, (uint64_t)v10, v48);
    }
    else
    {
      outlined init with copy of SecretKey(v33, (uint64_t)v10, v48);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v21 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    *v22 = v31;
    v22[1] = v30;
    result = outlined init with take of SecretKey((uint64_t)v10, *(_QWORD *)(v13 + 56) + v32 * v21, v48);
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v6 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v41 = 1 << *(_BYTE *)(v11 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v6 = v13;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UseCase>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 32);
    v23 = *(_BYTE *)(v21 + 40);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_OWORD *)v21;
    v26 = *(_OWORD *)(v21 + 16);
    *v24 = v19;
    v24[1] = v18;
    v27 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v27 = v25;
    *(_OWORD *)(v27 + 16) = v26;
    *(_QWORD *)(v27 + 32) = v22;
    *(_BYTE *)(v27 + 40) = v23;
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  __int128 v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, Data?>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v21 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v21;
    outlined copy of Data._Representation(v17, *((unint64_t *)&v17 + 1));
    result = (void *)outlined copy of Data?(v21, *((unint64_t *)&v21 + 1));
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)();
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup, &demangling cache variable for type metadata for _DictionaryStorage<String, UseCaseGroup>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, [TokenCache.CachedToken]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    outlined copy of Data._Representation(v19, *((unint64_t *)&v19 + 1));
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for AspireHeSerializedKeySwitchKey(0);
  v27 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AspireHeSerializedKeySwitchKey>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = 8 * v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v20 = *(_QWORD *)(v27 + 72) * v17;
    outlined init with copy of SecretKey(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for AspireHeSerializedKeySwitchKey);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v19;
    result = (void *)outlined init with take of SecretKey((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, type metadata accessor for AspireHeSerializedKeySwitchKey);
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for SecretKey();
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, SecretKey>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    outlined init with copy of SecretKey(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    outlined init with take of SecretKey((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
    result = (void *)outlined copy of Data._Representation(v19, v20);
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for AspireApiConfig, &demangling cache variable for type metadata for _DictionaryStorage<String, AspireApiConfig>);
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = a1(0);
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v29 - v6;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v29 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v29 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v20 = 16 * v19;
    v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(v32 + 72) * v19;
    outlined init with copy of SecretKey(*(_QWORD *)(v8 + 56) + v24, (uint64_t)v7, a1);
    v25 = (_QWORD *)(*(_QWORD *)(v10 + 48) + v20);
    *v25 = v23;
    v25[1] = v22;
    outlined init with take of SecretKey((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24, a1);
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v31)
    goto LABEL_26;
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DataVG_AHSgs5NeverOTg5161_s8CipherML15RequestsManagerC11requestData8keywords7context8shardIdsSay10Foundation0F0VSgGSayAJG_AA14RequestContextVyAA19StaticPIRParametersVGSaySSGtYaKFAkJXEfU_0H2ML0jK0C24CachedAndMissingKeywordsVTf1cn_nTf4ngX_nTm(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v18;
    v6 = (unint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        outlined copy of Data._Representation(v7, *v6);
        outlined copy of Data._Representation(v7, v8);
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
        if ((v10 & 1) != 0)
        {
          v11 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v9);
          v12 = *v11;
          v13 = v11[1];
          outlined copy of Data?(*v11, v13);
        }
        else
        {
          v12 = 0;
          v13 = 0xF000000000000000;
        }
        outlined consume of Data._Representation(v7, v8);
        outlined consume of Data._Representation(v7, v8);
      }
      else
      {
        v12 = 0;
        v13 = 0xF000000000000000;
      }
      v15 = *(_QWORD *)(v18 + 16);
      v14 = *(_QWORD *)(v18 + 24);
      if (v15 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v6 += 2;
      *(_QWORD *)(v18 + 16) = v15 + 1;
      v16 = v18 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v13;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_237C30080()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_237C300B4 + dword_237C3028C[v0 >> 62]))();
}

uint64_t sub_237C300C4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t partial apply for closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t partial apply for closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in RequestsManager.PIRContext.requestData(missingKeywords:availableResults:allKeywords:requests:networkManager:)(a1, a2, a3);
}

uint64_t specialized static RequestsManager.cachedAndMissingKeywordsInBatch(keywords:shardIds:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v76;
  uint64_t (*v77[3])(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t (*v78)(uint64_t, unint64_t, uint64_t, uint64_t);
  _QWORD *v79;
  _QWORD *v80;

  v4 = a2;
  v5 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 && v6 != *(_QWORD *)(a1 + 16))
  {
    if (one-time initialization token for daemon != -1)
      goto LABEL_65;
    goto LABEL_31;
  }
  if (!a3)
  {
    v76 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)v76;
  }
  swift_unknownObjectRetain();
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v8 = *(_QWORD *)(v5 + 16);
  v71 = v5;
  v76 = (_QWORD *)v7;
  if (v6)
  {
    if (v8)
    {
      v70 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a4 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = 0;
      v79 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v73 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v69 = v4;
      do
      {
        if (!v6)
          break;
        *(_OWORD *)v77 = *(_OWORD *)(v5 + v9 + 32);
        v12 = v4 + v9;
        v14 = *(_QWORD *)(v4 + v9 + 32);
        v13 = *(_QWORD *)(v12 + 40);
        ObjectType = swift_getObjectType();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation((uint64_t)v77[0], (unint64_t)v77[1]);
        v16 = v70(v77[0], v77[1], ObjectType, a4);
        if (v17 >> 60 == 11)
        {
          outlined copy of Data._Representation((uint64_t)v77[0], (unint64_t)v77[1]);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79[2] + 1, 1, v79);
          v5 = v71;
          v19 = v79[2];
          v18 = v79[3];
          if (v19 >= v18 >> 1)
            v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v79);
          v79[2] = v19 + 1;
          *(_OWORD *)&v79[2 * v19 + 4] = *(_OWORD *)v77;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73[2] + 1, 1, v73);
          v21 = v73[2];
          v20 = v73[3];
          if (v21 >= v20 >> 1)
            v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v73);
          v73[2] = v21 + 1;
          v22 = &v73[2 * v21];
          v22[4] = v14;
          v22[5] = v13;
          outlined consume of Data._Representation((uint64_t)v77[0], (unint64_t)v77[1]);
        }
        else
        {
          v11 = v16;
          v23 = v17;
          swift_bridgeObjectRelease();
          outlined copy of Data._Representation((uint64_t)v77[0], (unint64_t)v77[1]);
          v68 = v11;
          outlined copy of Data??(v11, v23);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v77[0], (uint64_t)v77[1]);
          v27 = v76[2];
          v28 = (v25 & 1) == 0;
          v29 = v27 + v28;
          if (__OFADD__(v27, v28))
            goto LABEL_62;
          v30 = v25;
          if (v76[3] >= v29)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
            v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v77[0], (uint64_t)v77[1]);
            if ((v30 & 1) != (v32 & 1))
              goto LABEL_66;
            v26 = v31;
          }
          if ((v30 & 1) != 0)
          {
            v10 = v76[7] + 16 * v26;
            outlined consume of Data?(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
            *(_QWORD *)v10 = v68;
            *(_QWORD *)(v10 + 8) = v23;
            v11 = v68;
          }
          else
          {
            v76[(v26 >> 6) + 8] |= 1 << v26;
            *(_OWORD *)(v76[6] + 16 * v26) = *(_OWORD *)v77;
            v33 = (uint64_t *)(v76[7] + 16 * v26);
            *v33 = v11;
            v33[1] = v23;
            v34 = v76[2];
            v35 = __OFADD__(v34, 1);
            v36 = v34 + 1;
            if (v35)
              goto LABEL_64;
            v76[2] = v36;
            outlined copy of Data._Representation((uint64_t)v77[0], (unint64_t)v77[1]);
          }
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation((uint64_t)v77[0], (unint64_t)v77[1]);
          outlined consume of Data._Representation((uint64_t)v77[0], (unint64_t)v77[1]);
          outlined consume of Data??(v11, v23);
          v5 = v71;
        }
        v4 = v69;
        v9 += 16;
        --v6;
        --v8;
      }
      while (v8);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v76;
    }
    goto LABEL_56;
  }
  if (!v8)
  {
LABEL_56:
    swift_unknownObjectRelease();
    return (uint64_t)v76;
  }
  v41 = swift_getObjectType();
  v78 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a4 + 40);
  swift_bridgeObjectRetain();
  v42 = (unint64_t *)(v5 + 40);
  v80 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v72 = v41;
  while (1)
  {
    v44 = *(v42 - 1);
    v45 = *v42;
    outlined copy of Data._Representation(v44, *v42);
    v46 = v78(v44, v45, v41, a4);
    v48 = v47;
    outlined copy of Data._Representation(v44, v45);
    if (v48 >> 60 == 11)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
      v50 = v80[2];
      v49 = v80[3];
      if (v50 >= v49 >> 1)
        v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v80);
      v80[2] = v50 + 1;
      v51 = &v80[2 * v50];
      v51[4] = v44;
      v51[5] = v45;
      outlined consume of Data._Representation(v44, v45);
      goto LABEL_39;
    }
    v74 = v8;
    v52 = v46;
    outlined copy of Data??(v46, v48);
    v53 = swift_isUniquelyReferenced_nonNull_native();
    v55 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45);
    v56 = v76[2];
    v57 = (v54 & 1) == 0;
    v58 = v56 + v57;
    if (__OFADD__(v56, v57))
      break;
    v59 = v54;
    if (v76[3] >= v58)
    {
      if ((v53 & 1) == 0)
        specialized _NativeDictionary.copy()();
      v62 = v52;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v58, v53);
      v60 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45);
      if ((v59 & 1) != (v61 & 1))
      {
LABEL_66:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v55 = v60;
      v62 = v52;
    }
    v8 = v74;
    if ((v59 & 1) != 0)
    {
      v43 = v76[7] + 16 * v55;
      outlined consume of Data?(*(_QWORD *)v43, *(_QWORD *)(v43 + 8));
      *(_QWORD *)v43 = v62;
      *(_QWORD *)(v43 + 8) = v48;
    }
    else
    {
      v76[(v55 >> 6) + 8] |= 1 << v55;
      v63 = (uint64_t *)(v76[6] + 16 * v55);
      *v63 = v44;
      v63[1] = v45;
      v64 = (uint64_t *)(v76[7] + 16 * v55);
      *v64 = v62;
      v64[1] = v48;
      v65 = v76[2];
      v35 = __OFADD__(v65, 1);
      v66 = v65 + 1;
      if (v35)
        goto LABEL_63;
      v76[2] = v66;
      outlined copy of Data._Representation(v44, v45);
    }
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v44, v45);
    outlined consume of Data._Representation(v44, v45);
    outlined consume of Data??(v62, v48);
    v41 = v72;
LABEL_39:
    v42 += 2;
    if (!--v8)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v76;
    }
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  swift_once();
LABEL_31:
  v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.daemon);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc();
    *(_DWORD *)v40 = 134349312;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_237BC8000, v38, v39, "shardIds (length %{public}ld must be empty or match keywords.count %{public}ld.", (uint8_t *)v40, 0x16u);
    MEMORY[0x23B822DA8](v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t sub_237C30B7C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(unint64_t, uint64_t);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t v33;

  v1 = (int *)type metadata accessor for RequestsManager.PIRContext();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v32 = (((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v0 + v3;
  swift_bridgeObjectRelease();
  v6 = v0 + v3 + v1[5];
  v7 = type metadata accessor for Date();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v6 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  v10 = v0 + v3 + v1[6];
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40));
  v11 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v12 = v10 + v11[8];
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  v15 = v10 + v11[9];
  v16 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    swift_bridgeObjectRelease();
    v14(v15 + *(int *)(v16 + 40), v13);
  }
  v17 = (v4 + v32 + 8) & ~v4;
  v18 = v10 + v11[10];
  v19 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))v14(v18 + *(int *)(v19 + 24), v13);
  outlined consume of Data._Representation(*(_QWORD *)(v5 + v1[7]), *(_QWORD *)(v5 + v1[7] + 8));
  v20 = v1[8];
  v21 = v5 + v20 + *(int *)(type metadata accessor for SecretKey() + 20);
  v22 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v23 = v0 + v17 + *(int *)(v33 + 32);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 2, v24))
  {
    v25 = type metadata accessor for URL();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v27(v23, v25);
    v28 = v23 + *(int *)(v24 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1, v25))
      v27(v28, v25);
    v29 = (uint64_t *)(v23 + *(int *)(v24 + 64));
    v30 = v29[1];
    if (v30 >> 60 != 15)
      outlined consume of Data._Representation(*v29, v30);
  }
  type metadata accessor for NetworkConfig(0);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(type metadata accessor for RequestsManager.PIRContext() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>)
                                      - 8)
                          + 80);
  v8 = v7 + v6 + 8;
  v9 = *(_QWORD *)(v0 + 32);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + v5);
  v12 = *(_QWORD *)(v0 + v6);
  v13 = v0 + (v8 & ~v7);
  v14 = swift_task_alloc();
  v15 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v14;
  *(_QWORD *)v14 = v1;
  *(_QWORD *)(v14 + 8) = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v14 + 192) = v12;
  *(_QWORD *)(v14 + 200) = v13;
  *(_QWORD *)(v14 + 184) = v11;
  *(_OWORD *)(v14 + 168) = v15;
  *(_QWORD *)(v14 + 152) = v10;
  *(_QWORD *)(v14 + 160) = v0 + v3;
  *(_QWORD *)(v14 + 144) = v9;
  return swift_task_switch();
}

uint64_t sub_237C30FF4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in RequestsManager.requestDataWithAsyncResponse(keywords:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  *(_QWORD *)(v4 + 40) = v2;
  *(_QWORD *)(v4 + 48) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  return swift_task_switch();
}

uint64_t specialized RequestsManager.loadCache(requestContext:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  os_signpost_id_t v24;
  os_signpost_id_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for OSSignpostID();
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (id *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for OSSignposter();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for daemon != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v8, (uint64_t)static OSSignposter.daemon);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v7, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  static OSSignpostID.exclusive.getter();
  v32 = v8;
  v13 = (uint8_t *)swift_slowAlloc();
  v14 = swift_slowAlloc();
  v30 = v14;
  *(_DWORD *)v13 = 136315138;
  v36 = v14;
  v15 = objc_msgSend(*v7, sel_useCase);
  v31 = v9;
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v11;
  v19 = a1;
  v21 = v20;

  v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v21, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v7, &demangling cache variable for type metadata for RequestContext<StaticPIRParameters>);
  v22 = OSSignposter.logHandle.getter();
  v23 = static os_signpost_type_t.begin.getter();
  v24 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_237BC8000, v22, v23, v24, "LRUCache: init", "%s", v13, 0xCu);
  closure #1 in RequestsManager.loadCache(requestContext:)(v19, &v35);
  LOBYTE(v16) = static os_signpost_type_t.end.getter();
  v25 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_237BC8000, v22, (os_signpost_type_t)v16, v25, "LRUCache: init", "%s", v13, 0xCu);

  v26 = v35;
  v27 = v30;
  swift_arrayDestroy();
  MEMORY[0x23B822DA8](v27, -1, -1);
  MEMORY[0x23B822DA8](v13, -1, -1);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v32);
  return v26;
}

char *specialized RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a5;
  v31 = a6;
  v9 = type metadata accessor for KeywordPIRClient();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v27 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AspireApiPIRResponse(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (uint64_t *)((char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v17, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  v21 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v17, 1, v21) != 1)
  {
    v22 = v31;
    v28 = a2;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for AspireApiResponse.OneOf_Response);
      goto LABEL_5;
    }
    outlined init with take of SecretKey((uint64_t)v17, (uint64_t)v20, type metadata accessor for AspireApiPIRResponse);
    if (v22)
    {
      v24 = v30;
      RequestsManager.PIRContext.constructPIRClient(shardId:)(v29, v22, (uint64_t)v12);
      if (!v24)
      {
        v25 = v28;
LABEL_12:
        outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for KeywordPIRClient);
        v17 = (char *)KeywordPIRClient.decryptPIRResponse(_:keyword:)(v20, v25, a3);
        outlined destroy of AspireApiPECConfig((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for KeywordPIRClient);
        outlined destroy of AspireApiPECConfig((uint64_t)v20, type metadata accessor for AspireApiPIRResponse);
        return v17;
      }
    }
    else
    {
      v25 = v28;
      v26 = v30;
      RequestsManager.PIRContext.constructPIRClient(keyword:)(v28, a3, (uint64_t)v12);
      if (!v26)
        goto LABEL_12;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v20, type metadata accessor for AspireApiPIRResponse);
    return v17;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v17, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
LABEL_5:
  v17 = (char *)type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return v17;
}

char *partial apply for closure #1 in RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized RequestsManager.decryptPIRServiceResponse(serviceResponse:keyword:context:shardId:)(a1, a2, a3, *(_QWORD *)(v3 + 24), 0, 0);
}

_QWORD *initializeBufferWithCopyOfBuffer for RequestsManager.PIRContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  int *v63;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v37 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = type metadata accessor for UserIdentifier();
    v14 = *(int *)(v13 + 20);
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    *(_QWORD *)&v9[*(int *)(v13 + 24)] = *(_QWORD *)&v10[*(int *)(v13 + 24)];
    v63 = a3;
    v18 = a3[6];
    v19 = (char *)v4 + v18;
    v20 = (_QWORD *)((char *)a2 + v18);
    v19[16] = *((_BYTE *)a2 + v18 + 16);
    v22 = *(_QWORD *)((char *)a2 + v18);
    v21 = *(_QWORD *)((char *)a2 + v18 + 8);
    *(_QWORD *)v19 = v22;
    *((_QWORD *)v19 + 1) = v21;
    v23 = v20[4];
    *((_QWORD *)v19 + 3) = v20[3];
    v24 = v20[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v23, v24);
    *((_QWORD *)v19 + 4) = v23;
    *((_QWORD *)v19 + 5) = v24;
    v25 = (int *)type metadata accessor for AspireApiPIRConfig(0);
    v26 = v25[8];
    v27 = &v19[v26];
    v28 = (char *)v20 + v26;
    v29 = type metadata accessor for UnknownStorage();
    v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
    v62(v27, v28, v29);
    v30 = v25[9];
    v31 = &v19[v30];
    v32 = (_OWORD *)((char *)v20 + v30);
    v33 = type metadata accessor for AspireHeEncryptionParameters(0);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      v36 = v62;
    }
    else
    {
      *(_OWORD *)v31 = *v32;
      v38 = *((_QWORD *)v32 + 3);
      *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
      *((_QWORD *)v31 + 3) = v38;
      v31[32] = *((_BYTE *)v32 + 32);
      *((_QWORD *)v31 + 5) = *((_QWORD *)v32 + 5);
      v31[48] = *((_BYTE *)v32 + 48);
      *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
      v31[64] = *((_BYTE *)v32 + 64);
      v39 = *(int *)(v33 + 40);
      v61 = &v31[v39];
      v40 = (char *)v32 + v39;
      swift_bridgeObjectRetain();
      v41 = v40;
      v36 = v62;
      v62(v61, v41, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    v42 = v25[10];
    v43 = &v19[v42];
    v44 = (char *)v20 + v42;
    v45 = type metadata accessor for AspirePirKeywordPirParameters(0);
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v36(&v43[*(int *)(v45 + 24)], &v44[*(int *)(v45 + 24)], v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    v48 = v63[7];
    v49 = (_QWORD *)((char *)v4 + v48);
    v50 = (_QWORD *)((char *)a2 + v48);
    v51 = *v50;
    v52 = v50[1];
    outlined copy of Data._Representation(*v50, v52);
    *v49 = v51;
    v49[1] = v52;
    v53 = v63[8];
    v54 = (char *)v4 + v53;
    v55 = (char *)a2 + v53;
    *(_QWORD *)((char *)v4 + v53) = *(_QWORD *)((char *)a2 + v53);
    v56 = *(int *)(type metadata accessor for SecretKey() + 20);
    v57 = &v54[v56];
    v58 = &v55[v56];
    v59 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
    *(_OWORD *)((char *)v4 + v63[9]) = *(_OWORD *)((char *)a2 + v63[9]);
    swift_unknownObjectRetain();
  }
  return v4;
}

uint64_t destroy for RequestsManager.PIRContext(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = v4 + *(int *)(type metadata accessor for UserIdentifier() + 20);
  v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  v8 = a1 + a2[6];
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
  v9 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v10 = v8 + v9[8];
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v13 = v8 + v9[9];
  v14 = type metadata accessor for AspireHeEncryptionParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    swift_bridgeObjectRelease();
    v12(v13 + *(int *)(v14 + 40), v11);
  }
  v15 = v8 + v9[10];
  v16 = type metadata accessor for AspirePirKeywordPirParameters(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
    v12(v15 + *(int *)(v16 + 24), v11);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  v17 = a1 + a2[8];
  v18 = v17 + *(int *)(type metadata accessor for SecretKey() + 20);
  v19 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  return swift_unknownObjectRelease();
}

_QWORD *initializeWithCopy for RequestsManager.PIRContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v58;
  _QWORD *v59;
  int *v60;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = type metadata accessor for UserIdentifier();
  v13 = *(int *)(v12 + 20);
  v14 = &v8[v13];
  v15 = &v9[v13];
  v16 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  *(_QWORD *)&v8[*(int *)(v12 + 24)] = *(_QWORD *)&v9[*(int *)(v12 + 24)];
  v59 = a2;
  v60 = a3;
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (_QWORD *)((char *)a2 + v17);
  v18[16] = *((_BYTE *)a2 + v17 + 16);
  v21 = *(_QWORD *)((char *)a2 + v17);
  v20 = *(_QWORD *)((char *)a2 + v17 + 8);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  v22 = v19[4];
  *((_QWORD *)v18 + 3) = v19[3];
  v23 = v19[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v22, v23);
  *((_QWORD *)v18 + 4) = v22;
  *((_QWORD *)v18 + 5) = v23;
  v24 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v25 = v24[8];
  v26 = &v18[v25];
  v27 = (char *)v19 + v25;
  v28 = type metadata accessor for UnknownStorage();
  v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  v29(v26, v27, v28);
  v30 = v24[9];
  v31 = &v18[v30];
  v32 = (_OWORD *)((char *)v19 + v30);
  v33 = type metadata accessor for AspireHeEncryptionParameters(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v31 = *v32;
    v36 = *((_QWORD *)v32 + 3);
    *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
    *((_QWORD *)v31 + 3) = v36;
    v31[32] = *((_BYTE *)v32 + 32);
    *((_QWORD *)v31 + 5) = *((_QWORD *)v32 + 5);
    v31[48] = *((_BYTE *)v32 + 48);
    *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
    v31[64] = *((_BYTE *)v32 + 64);
    v37 = *(int *)(v33 + 40);
    v58 = &v31[v37];
    v38 = (char *)v32 + v37;
    swift_bridgeObjectRetain();
    v29(v58, v38, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v39 = v24[10];
  v40 = &v18[v39];
  v41 = (char *)v19 + v39;
  v42 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v40[8] = v41[8];
    v29(&v40[*(int *)(v42 + 24)], &v41[*(int *)(v42 + 24)], v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  v45 = v60[7];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)v59 + v45);
  v48 = *v47;
  v49 = v47[1];
  outlined copy of Data._Representation(*v47, v49);
  *v46 = v48;
  v46[1] = v49;
  v50 = v60[8];
  v51 = (char *)a1 + v50;
  v52 = (char *)v59 + v50;
  *(_QWORD *)((char *)a1 + v50) = *(_QWORD *)((char *)v59 + v50);
  v53 = *(int *)(type metadata accessor for SecretKey() + 20);
  v54 = &v51[v53];
  v55 = &v52[v53];
  v56 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
  *(_OWORD *)((char *)a1 + v60[9]) = *(_OWORD *)((char *)v59 + v60[9]);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RequestsManager.PIRContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *);
  uint64_t v76;
  uint64_t v77;
  int *v78;
  _QWORD *v79;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = type metadata accessor for UserIdentifier();
  v11 = *(int *)(v10 + 20);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_QWORD *)&v7[*(int *)(v10 + 24)] = *(_QWORD *)&v8[*(int *)(v10 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v78 = a3;
  v79 = a2;
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = *((_QWORD *)v17 + 1);
  v16[16] = v17[16];
  *((_QWORD *)v16 + 1) = v18;
  *((_QWORD *)v16 + 3) = *((_QWORD *)v17 + 3);
  v19 = *((_QWORD *)v17 + 4);
  v20 = *((_QWORD *)v17 + 5);
  outlined copy of Data._Representation(v19, v20);
  v21 = *((_QWORD *)v16 + 4);
  v22 = *((_QWORD *)v16 + 5);
  *((_QWORD *)v16 + 4) = v19;
  *((_QWORD *)v16 + 5) = v20;
  outlined consume of Data._Representation(v21, v22);
  v23 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v24 = v23[8];
  v25 = &v16[v24];
  v26 = &v17[v24];
  v27 = type metadata accessor for UnknownStorage();
  v76 = *(_QWORD *)(v27 - 8);
  v77 = v27;
  v75 = *(void (**)(char *, char *))(v76 + 24);
  v75(v25, v26);
  v28 = v23[9];
  v29 = (uint64_t)&v16[v28];
  v30 = &v17[v28];
  v31 = type metadata accessor for AspireHeEncryptionParameters(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33((uint64_t)v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *(_QWORD *)(v29 + 8) = *((_QWORD *)v30 + 1);
      *(_QWORD *)(v29 + 16) = *((_QWORD *)v30 + 2);
      v36 = *((_QWORD *)v30 + 3);
      *(_BYTE *)(v29 + 32) = v30[32];
      *(_QWORD *)(v29 + 24) = v36;
      v37 = *((_QWORD *)v30 + 5);
      *(_BYTE *)(v29 + 48) = v30[48];
      *(_QWORD *)(v29 + 40) = v37;
      v38 = *((_QWORD *)v30 + 7);
      *(_BYTE *)(v29 + 64) = v30[64];
      *(_QWORD *)(v29 + 56) = v38;
      v39 = *(int *)(v31 + 40);
      v40 = v29 + v39;
      v41 = &v30[v39];
      v42 = *(void (**)(uint64_t, char *, uint64_t))(v76 + 16);
      swift_bridgeObjectRetain();
      v42(v40, v41, v77);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v35)
  {
    outlined destroy of AspireApiPECConfig(v29, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v29, v30, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_QWORD *)(v29 + 8) = *((_QWORD *)v30 + 1);
  *(_QWORD *)(v29 + 16) = *((_QWORD *)v30 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v72 = *((_QWORD *)v30 + 3);
  *(_BYTE *)(v29 + 32) = v30[32];
  *(_QWORD *)(v29 + 24) = v72;
  v73 = *((_QWORD *)v30 + 5);
  *(_BYTE *)(v29 + 48) = v30[48];
  *(_QWORD *)(v29 + 40) = v73;
  v74 = *((_QWORD *)v30 + 7);
  *(_BYTE *)(v29 + 64) = v30[64];
  *(_QWORD *)(v29 + 56) = v74;
  ((void (*)(uint64_t, char *, uint64_t))v75)(v29 + *(int *)(v31 + 40), &v30[*(int *)(v31 + 40)], v77);
LABEL_7:
  v44 = v23[10];
  v45 = &v16[v44];
  v46 = &v17[v44];
  v47 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (!v51)
    {
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      ((void (*)(char *, char *, uint64_t))v75)(&v45[*(int *)(v47 + 24)], &v46[*(int *)(v47 + 24)], v77);
      goto LABEL_13;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v45, type metadata accessor for AspirePirKeywordPirParameters);
    goto LABEL_12;
  }
  if (v51)
  {
LABEL_12:
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(&v45[*(int *)(v47 + 24)], &v46[*(int *)(v47 + 24)], v77);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_13:
  v53 = v78[7];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = (_QWORD *)((char *)v79 + v53);
  v56 = *v55;
  v57 = v55[1];
  outlined copy of Data._Representation(*v55, v57);
  v58 = *v54;
  v59 = v54[1];
  *v54 = v56;
  v54[1] = v57;
  outlined consume of Data._Representation(v58, v59);
  v60 = v78[8];
  v61 = (char *)a1 + v60;
  v62 = (char *)v79 + v60;
  *(_QWORD *)((char *)a1 + v60) = *(_QWORD *)((char *)v79 + v60);
  v63 = *(int *)(type metadata accessor for SecretKey() + 20);
  v64 = &v61[v63];
  v65 = &v62[v63];
  v66 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  v67 = v78[9];
  v68 = (_QWORD *)((char *)a1 + v67);
  v69 = (_QWORD *)((char *)v79 + v67);
  v70 = v69[1];
  *v68 = *v69;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v68[1] = v70;
  return a1;
}

_OWORD *initializeWithTake for RequestsManager.PIRContext(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _OWORD *v46;
  int *v47;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for UserIdentifier();
  v11 = *(int *)(v10 + 20);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)&v7[*(int *)(v10 + 24)] = *(_QWORD *)&v8[*(int *)(v10 + 24)];
  v46 = a2;
  v47 = a3;
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v16[16] = *((_BYTE *)a2 + v15 + 16);
  v18 = *(_QWORD *)((char *)a2 + v15 + 8);
  *(_QWORD *)v16 = *(_QWORD *)((char *)a2 + v15);
  *((_QWORD *)v16 + 1) = v18;
  *((_QWORD *)v16 + 3) = *(_QWORD *)((char *)a2 + v15 + 24);
  *((_OWORD *)v16 + 2) = *(_OWORD *)((char *)a2 + v15 + 32);
  v19 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v20 = v19[8];
  v21 = &v16[v20];
  v22 = &v17[v20];
  v23 = type metadata accessor for UnknownStorage();
  v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
  v24(v21, v22, v23);
  v25 = v19[9];
  v26 = &v16[v25];
  v27 = &v17[v25];
  v28 = type metadata accessor for AspireHeEncryptionParameters(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v31 = *((_QWORD *)v27 + 3);
    *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
    *((_QWORD *)v26 + 3) = v31;
    v26[32] = v27[32];
    *((_QWORD *)v26 + 5) = *((_QWORD *)v27 + 5);
    v26[48] = v27[48];
    *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
    v26[64] = v27[64];
    v24(&v26[*(int *)(v28 + 40)], &v27[*(int *)(v28 + 40)], v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v32 = v19[10];
  v33 = &v16[v32];
  v34 = &v17[v32];
  v35 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v24(&v33[*(int *)(v35 + 24)], &v34[*(int *)(v35 + 24)], v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v38 = v47[8];
  *(_OWORD *)((char *)a1 + v47[7]) = *(_OWORD *)((char *)v46 + v47[7]);
  v39 = (char *)a1 + v38;
  v40 = (char *)v46 + v38;
  *(_QWORD *)((char *)a1 + v38) = *(_QWORD *)((char *)v46 + v38);
  v41 = *(int *)(type metadata accessor for SecretKey() + 20);
  v42 = &v39[v41];
  v43 = &v40[v41];
  v44 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
  *(_OWORD *)((char *)a1 + v47[9]) = *(_OWORD *)((char *)v46 + v47[9]);
  return a1;
}

_QWORD *assignWithTake for RequestsManager.PIRContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void (*v61)(char *, char *);
  uint64_t v62;
  uint64_t v63;
  int *v64;
  _QWORD *v65;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = type metadata accessor for UserIdentifier();
  v12 = *(int *)(v11 + 20);
  v13 = &v8[v12];
  v14 = &v9[v12];
  v15 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_QWORD *)&v8[*(int *)(v11 + 24)] = *(_QWORD *)&v9[*(int *)(v11 + 24)];
  swift_bridgeObjectRelease();
  v64 = a3;
  v65 = a2;
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  swift_bridgeObjectRelease();
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  v17[16] = v18[16];
  v19 = *((_QWORD *)v18 + 5);
  v20 = *((_QWORD *)v17 + 4);
  v21 = *((_QWORD *)v17 + 5);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
  *((_QWORD *)v17 + 5) = v19;
  outlined consume of Data._Representation(v20, v21);
  v22 = (int *)type metadata accessor for AspireApiPIRConfig(0);
  v23 = v22[8];
  v24 = &v17[v23];
  v25 = &v18[v23];
  v26 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v26 - 8);
  v63 = v26;
  v61 = *(void (**)(char *, char *))(v62 + 40);
  v61(v24, v25);
  v27 = v22[9];
  v28 = (uint64_t)&v17[v27];
  v29 = &v18[v27];
  v30 = type metadata accessor for AspireHeEncryptionParameters(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32((uint64_t)v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
      v35 = *((_QWORD *)v29 + 3);
      *(_QWORD *)(v28 + 16) = *((_QWORD *)v29 + 2);
      *(_QWORD *)(v28 + 24) = v35;
      *(_BYTE *)(v28 + 32) = v29[32];
      *(_BYTE *)(v28 + 48) = v29[48];
      *(_QWORD *)(v28 + 40) = *((_QWORD *)v29 + 5);
      *(_QWORD *)(v28 + 56) = *((_QWORD *)v29 + 7);
      *(_BYTE *)(v28 + 64) = v29[64];
      (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v28 + *(int *)(v30 + 40), &v29[*(int *)(v30 + 40)], v63);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v34)
  {
    outlined destroy of AspireApiPECConfig(v28, type metadata accessor for AspireHeEncryptionParameters);
LABEL_6:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
    memcpy((void *)v28, v29, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_QWORD *)(v28 + 16) = *((_QWORD *)v29 + 2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 24) = *((_QWORD *)v29 + 3);
  *(_BYTE *)(v28 + 32) = v29[32];
  *(_QWORD *)(v28 + 40) = *((_QWORD *)v29 + 5);
  *(_BYTE *)(v28 + 48) = v29[48];
  *(_QWORD *)(v28 + 56) = *((_QWORD *)v29 + 7);
  *(_BYTE *)(v28 + 64) = v29[64];
  ((void (*)(uint64_t, char *, uint64_t))v61)(v28 + *(int *)(v30 + 40), &v29[*(int *)(v30 + 40)], v63);
LABEL_7:
  v37 = v22[10];
  v38 = &v17[v37];
  v39 = &v18[v37];
  v40 = type metadata accessor for AspirePirKeywordPirParameters(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      ((void (*)(char *, char *, uint64_t))v61)(&v38[*(int *)(v40 + 24)], &v39[*(int *)(v40 + 24)], v63);
      goto LABEL_13;
    }
    outlined destroy of AspireApiPECConfig((uint64_t)v38, type metadata accessor for AspirePirKeywordPirParameters);
    goto LABEL_12;
  }
  if (v44)
  {
LABEL_12:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirKeywordPirParameters?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v39[8];
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(&v38[*(int *)(v40 + 24)], &v39[*(int *)(v40 + 24)], v63);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
LABEL_13:
  v46 = v64[7];
  v47 = *(_QWORD *)((char *)a1 + v46);
  v48 = *(_QWORD *)((char *)a1 + v46 + 8);
  *(_OWORD *)((char *)a1 + v46) = *(_OWORD *)((char *)v65 + v46);
  outlined consume of Data._Representation(v47, v48);
  v49 = v64[8];
  v50 = (char *)a1 + v49;
  v51 = (char *)v65 + v49;
  *(_QWORD *)((char *)a1 + v49) = *(_QWORD *)((char *)v65 + v49);
  v52 = *(int *)(type metadata accessor for SecretKey() + 20);
  v53 = &v50[v52];
  v54 = &v51[v52];
  v55 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 40))(v53, v54, v55);
  v56 = v64[9];
  v57 = (_QWORD *)((char *)a1 + v56);
  v58 = (_QWORD *)((char *)v65 + v56);
  v59 = v58[1];
  *v57 = *v58;
  swift_unknownObjectRelease();
  v57[1] = v59;
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestsManager.PIRContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C32AB4(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UserIdentifier();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = type metadata accessor for AspireApiPIRConfig(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = type metadata accessor for SecretKey();
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for RequestsManager.PIRContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C32B84(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UserIdentifier();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = type metadata accessor for AspireApiPIRConfig(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = type metadata accessor for SecretKey();
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata completion function for RequestsManager.PIRContext()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for UserIdentifier();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AspireApiPIRConfig(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for SecretKey();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for RequestsManager.CachedAndMissingKeywords()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for RequestsManager.CachedAndMissingKeywords(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RequestsManager.CachedAndMissingKeywords(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RequestsManager.CachedAndMissingKeywords(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestsManager.CachedAndMissingKeywords(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RequestsManager.CachedAndMissingKeywords(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestsManager.CachedAndMissingKeywords()
{
  return &type metadata for RequestsManager.CachedAndMissingKeywords;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_237C32F14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t outlined copy of Data??(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return outlined copy of Data?(a1, a2);
  return a1;
}

uint64_t outlined consume of Data??(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return outlined consume of Data?(a1, a2);
  return a1;
}

uint64_t outlined assign with take of UserIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of RequestContext<StaticPIRParameters>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #2 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(_QWORD *a1)
{
  return partial apply for closure #1 in closure #1 in RequestsManager.PIRContext.prepareDataRequests(keywords:shardIds:)(a1);
}

void NetworkManagerType.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  int *v18;
  int v19;
  Swift::UInt v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  int v27;
  unint64_t v28;
  uint64_t v29;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v26 - v5;
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v26 - v12;
  v14 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(v0, (uint64_t)v16, v17);
  v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v19 = (*(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)v18 - 1) + 48))(v16, 2, v18);
  if (v19)
  {
    if (v19 == 1)
      v20 = 0;
    else
      v20 = 2;
    Hasher._combine(_:)(v20);
  }
  else
  {
    v21 = (uint64_t)&v16[v18[12]];
    v22 = &v16[v18[16]];
    v23 = *(_QWORD *)v22;
    v28 = *((_QWORD *)v22 + 1);
    v29 = v23;
    v27 = v16[v18[20]];
    v26 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v26(v13, v16, v7);
    outlined init with take of RequestContext<StaticPIRParameters>(v21, (uint64_t)v6, &demangling cache variable for type metadata for URL?);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    dispatch thunk of Hashable.hash(into:)();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, (uint64_t)v4, &demangling cache variable for type metadata for URL?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v26(v11, v4, v7);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    v25 = v28;
    v24 = v29;
    if (v28 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      outlined copy of Data._Representation(v24, v25);
      Data.hash(into:)();
      outlined consume of Data?(v24, v25);
    }
    Hasher._combine(_:)(v27);
    outlined consume of Data?(v24, v25);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkManagerType.AmsCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkManagerType.AmsCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance NetworkManagerType.AmsCodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance NetworkManagerType.AmsCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerType.AmsCodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerType.AmsCodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkManagerType.AspireCodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237C3348C + 4 * byte_237D56410[*v0]))(0x746E696F70646E65, 0xE800000000000000);
}

uint64_t sub_237C3348C()
{
  return 0x726575737369;
}

unint64_t sub_237C334A0()
{
  return 0xD000000000000013;
}

unint64_t sub_237C334BC()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkManagerType.AspireCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NetworkManagerType.AspireCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NetworkManagerType.AspireCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerType.AspireCodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerType.AspireCodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys();
  return CodingKey.debugDescription.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NetworkManagerType.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkManagerType.AspireCodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NetworkManagerType.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType.AspireCodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkManagerType.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x657269707361;
  if (*v0 != 1)
    v1 = 0x656E696C66666FLL;
  if (*v0)
    return v1;
  else
    return 7564641;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkManagerType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NetworkManagerType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NetworkManagerType.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerType.CodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerType.CodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerType.OfflineCodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerType.OfflineCodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NetworkManagerType.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerType.OfflineCodingKeys>);
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v38 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerType.AspireCodingKeys>);
  v37 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v5);
  v43 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v41 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerType.AmsCodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerType.CodingKeys>);
  v46 = *(_QWORD *)(v17 - 8);
  v47 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys();
  v50 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of SecretKey(v49, (uint64_t)v16, type metadata accessor for NetworkManagerType);
  v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v21 = (*(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)v20 - 1) + 48))(v16, 2, v20);
  if (v21)
  {
    if (v21 == 1)
    {
      LOBYTE(v51) = 0;
      lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys();
      v22 = v47;
      v23 = v50;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      LOBYTE(v51) = 2;
      lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys();
      v31 = v38;
      v22 = v47;
      v23 = v50;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v40);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v23, v22);
  }
  else
  {
    v24 = (uint64_t)&v16[v20[12]];
    v25 = (uint64_t *)&v16[v20[16]];
    v26 = v25[1];
    v49 = *v25;
    LODWORD(v40) = v16[v20[20]];
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v9, v16, v42);
    outlined init with take of RequestContext<StaticPIRParameters>(v24, v43, &demangling cache variable for type metadata for URL?);
    LOBYTE(v51) = 1;
    lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys();
    v27 = v47;
    v28 = v50;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v51) = 0;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    v29 = v48;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v29)
    {
      outlined consume of Data?(v49, v26);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v44, v45);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for URL?);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v28, v27);
    }
    else
    {
      v32 = v49;
      LOBYTE(v51) = 1;
      v34 = v41;
      v33 = v42;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      v51 = v32;
      v52 = v26;
      v53 = 2;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      LOBYTE(v51) = 3;
      KeyedEncodingContainer.encode(_:forKey:)();
      v35 = v50;
      v36 = v43;
      outlined consume of Data?(v32, v26);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v44, v45);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v36, &demangling cache variable for type metadata for URL?);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v33);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v35, v27);
    }
  }
}

Swift::Int NetworkManagerType.hashValue.getter()
{
  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)();
  return Hasher._finalize()();
}

uint64_t NetworkManagerType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char **v28;
  char **v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;

  v65 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerType.OfflineCodingKeys>);
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v62 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerType.AspireCodingKeys>);
  v56 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v64 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerType.AmsCodingKeys>);
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v63 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerType.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NetworkManagerType(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v52 - v16;
  v18 = a1[3];
  v66 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys();
  v19 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
    goto LABEL_13;
  v67 = (char *)v12;
  v53 = v17;
  v54 = 0;
  v20 = v63;
  v52 = v15;
  v55 = v9;
  v21 = v65;
  v22 = KeyedDecodingContainer.allKeys.getter();
  v23 = v11;
  if (*(_QWORD *)(v22 + 16) == 1)
  {
    if (*(_BYTE *)(v22 + 32))
    {
      if (*(_BYTE *)(v22 + 32) == 1)
      {
        v73 = 1;
        lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys();
        v24 = v54;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        if (!v24)
        {
          v25 = type metadata accessor for URL();
          v72 = 0;
          lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
          v26 = v52;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v67 = v11;
          v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
          v38 = &v26[*(int *)(v37 + 48)];
          v71 = 1;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v62 = v38;
          v63 = (char *)v25;
          v70 = 2;
          lazy protocol witness table accessor for type Data and conformance Data();
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v39 = v37;
          v69 = 3;
          v40 = v61;
          v41 = KeyedDecodingContainer.decode(_:forKey:)();
          v42 = v40;
          v43 = v55;
          v44 = v41;
          v45 = v39;
          v46 = *(int *)(v39 + 80);
          (*(void (**)(_QWORD, uint64_t))(v56 + 8))(0, v42);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v43 + 8))(v67, v8);
          v47 = v44 & 1;
          v48 = (uint64_t)v52;
          v52[v46] = v47;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v48, 0, 2, v45);
          v49 = v48;
          v50 = (uint64_t)v53;
          outlined init with take of SecretKey(v49, (uint64_t)v53, type metadata accessor for NetworkManagerType);
          v21 = v65;
          v51 = (uint64_t)v66;
LABEL_18:
          outlined init with take of SecretKey(v50, v21, type metadata accessor for NetworkManagerType);
          v33 = v51;
          return __swift_destroy_boxed_opaque_existential_0(v33);
        }
        goto LABEL_11;
      }
      v74 = 2;
      lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys();
      v31 = v62;
      v32 = v54;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v32)
      {
LABEL_11:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v8);
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v59 + 8))(v31, v60);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v8);
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      v50 = (uint64_t)v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v53, 2, 2, v36);
    }
    else
    {
      v68 = 0;
      lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys();
      v30 = v54;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v30)
        goto LABEL_11;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v20, v58);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v8);
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      v50 = (uint64_t)v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v53, 1, 2, v35);
    }
    v51 = (uint64_t)v66;
    goto LABEL_18;
  }
  v27 = type metadata accessor for DecodingError();
  swift_allocError();
  v29 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v29 = v67;
  KeyedDecodingContainer.codingPath.getter();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(char **, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x24BEE26D0], v27);
  swift_willThrow();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v23, v8);
LABEL_13:
  v33 = (uint64_t)v66;
  return __swift_destroy_boxed_opaque_existential_0(v33);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkManagerType()
{
  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType(a1, a2, a3, (void (*)(_BYTE *))NetworkManagerType.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance NetworkManagerType@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NetworkManagerType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkManagerType(_QWORD *a1)
{
  return NetworkManagerType.encode(to:)(a1);
}

uint64_t NetworkConfig.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SecretKey(v1, a1, type metadata accessor for NetworkManagerType);
}

uint64_t NetworkConfig.secondaryIdentifier.getter()
{
  return NetworkConfig.secondaryIdentifier.getter(type metadata accessor for NetworkConfig);
}

void NetworkConfig.hash(into:)()
{
  uint64_t v0;

  NetworkManagerType.hash(into:)();
  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for NetworkConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NetworkConfig.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkConfig.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 1701869940;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkConfig.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NetworkConfig.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NetworkConfig.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkConfig.CodingKeys()
{
  lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkConfig.CodingKeys()
{
  lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NetworkConfig.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkConfig.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for NetworkManagerType(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkManagerType and conformance NetworkManagerType, type metadata accessor for NetworkManagerType, (uint64_t)&protocol conformance descriptor for NetworkManagerType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for NetworkConfig(0);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int NetworkConfig.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)();
  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for NetworkConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t NetworkConfig.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  char v27;

  v22 = a2;
  v23 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v23);
  v24 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkConfig.CodingKeys>);
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v21 = v8;
  v11 = (uint64_t)v10;
  v27 = 0;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkManagerType and conformance NetworkManagerType, type metadata accessor for NetworkManagerType, (uint64_t)&protocol conformance descriptor for NetworkManagerType);
  v12 = (uint64_t)v24;
  v13 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of SecretKey(v12, v11, type metadata accessor for NetworkManagerType);
  v26 = 1;
  v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  v17 = v22;
  v18 = (uint64_t *)(v11 + *(int *)(v21 + 20));
  *v18 = v14;
  v18[1] = v16;
  outlined init with copy of SecretKey(v11, v17, type metadata accessor for NetworkConfig);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return outlined destroy of AspireApiPECConfig(v11, type metadata accessor for NetworkConfig);
}

uint64_t NetworkConfig.init(type:secondaryIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return NetworkConfig.init(type:secondaryIdentifier:)(a1, a2, a3, type metadata accessor for NetworkManagerType, type metadata accessor for NetworkConfig, a4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkConfig(uint64_t a1)
{
  uint64_t v1;

  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)();
  if (*(_QWORD *)(v1 + *(int *)(a1 + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NetworkConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  NetworkManagerType.hash(into:)();
  if (*(_QWORD *)(v2 + *(int *)(a2 + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)();
  if (*(_QWORD *)(v2 + *(int *)(a2 + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance NetworkConfig@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NetworkConfig.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkConfig(_QWORD *a1)
{
  return NetworkConfig.encode(to:)(a1);
}

uint64_t NetworkManagerConfig.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SecretKey(v1, a1, type metadata accessor for NetworkConfig);
}

uint64_t NetworkManagerConfig.delegation.getter()
{
  return NetworkConfig.secondaryIdentifier.getter(type metadata accessor for NetworkManagerConfig);
}

uint64_t NetworkConfig.secondaryIdentifier.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_bridgeObjectRetain();
  return v2;
}

void NetworkManagerConfig.hash(into:)()
{
  uint64_t v0;

  NetworkManagerType.hash(into:)();
  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for NetworkConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NetworkManagerConfig.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x69746167656C6564;
  else
    return 0x6769666E6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NetworkManagerConfig.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NetworkManagerConfig.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NetworkManagerConfig.CodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NetworkManagerConfig.CodingKeys()
{
  lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NetworkManagerConfig.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NetworkManagerConfig.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for NetworkConfig(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, type metadata accessor for NetworkConfig, (uint64_t)&protocol conformance descriptor for NetworkConfig);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20));
    v10[15] = 1;
    lazy protocol witness table accessor for type NetworkDelegationConfig and conformance NetworkDelegationConfig();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NetworkManagerConfig.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  NetworkManagerType.hash(into:)();
  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for NetworkConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20) + 8))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t NetworkManagerConfig.init(config:delegation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return NetworkConfig.init(type:secondaryIdentifier:)(a1, a2, a3, type metadata accessor for NetworkConfig, type metadata accessor for NetworkManagerConfig, a4);
}

uint64_t NetworkConfig.init(type:secondaryIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;
  _QWORD *v11;

  outlined init with take of SecretKey(a1, a6, a4);
  result = a5(0);
  v11 = (_QWORD *)(a6 + *(int *)(result + 20));
  *v11 = a2;
  v11[1] = a3;
  return result;
}

uint64_t NetworkManagerConfig.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char v23;

  v18 = a2;
  v19 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x24BDAC7A8](v19);
  v20 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NetworkManagerConfig.CodingKeys>);
  v5 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NetworkManagerConfig(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v17 = v8;
  v11 = (uint64_t)v10;
  LOBYTE(v22) = 0;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, type metadata accessor for NetworkConfig, (uint64_t)&protocol conformance descriptor for NetworkConfig);
  v12 = (uint64_t)v20;
  v13 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of SecretKey(v12, v11, type metadata accessor for NetworkConfig);
  v23 = 1;
  lazy protocol witness table accessor for type NetworkDelegationConfig and conformance NetworkDelegationConfig();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  v14 = v18;
  *(_OWORD *)(v11 + *(int *)(v17 + 20)) = v22;
  outlined init with copy of SecretKey(v11, v14, type metadata accessor for NetworkManagerConfig);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return outlined destroy of AspireApiPECConfig(v11, type metadata accessor for NetworkManagerConfig);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType(a1, a2, a3, (void (*)(_BYTE *))NetworkManagerConfig.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkManagerType(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance NetworkManagerConfig@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NetworkManagerConfig.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkManagerConfig(_QWORD *a1)
{
  return NetworkManagerConfig.encode(to:)(a1);
}

uint64_t one-time initialization function for shared()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  type metadata accessor for NetworkManagerHelper();
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>);
  v1 = (_QWORD *)swift_allocObject();
  type metadata accessor for NetworkManagerConfig(0);
  v1[4] = 0;
  v1[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>.LinkedListNode);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkManagerConfig and conformance NetworkManagerConfig, type metadata accessor for NetworkManagerConfig, (uint64_t)&protocol conformance descriptor for NetworkManagerConfig);
  v1[2] = Dictionary.init(minimumCapacity:)();
  swift_beginAccess();
  v1[3] = 0;
  swift_release();
  v1[5] = 15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<InMemoryLRUCache<NetworkManagerConfig, NetworkManager>, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(v0 + 16) = result;
  static NetworkManagerHelper.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = type metadata accessor for URL();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for tokenCacheFile != -1)
    swift_once();
  v4 = __swift_project_value_buffer(v0, (uint64_t)static CacheDirectory.tokenCacheFile);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  result = specialized TokenCache.__allocating_init(file:currentDate:)((uint64_t)v3, (uint64_t)closure #1 in default argument 1 of TokenCache.init(file:currentDate:), 0);
  static TokenCache.shared = result;
  return result;
}

uint64_t NetworkManagerHelper.__allocating_init(cacheSize:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>);
  v3 = (_QWORD *)swift_allocObject();
  type metadata accessor for NetworkManagerConfig(0);
  v3[4] = 0;
  v3[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>.LinkedListNode);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkManagerConfig and conformance NetworkManagerConfig, type metadata accessor for NetworkManagerConfig, (uint64_t)&protocol conformance descriptor for NetworkManagerConfig);
  v3[2] = Dictionary.init(minimumCapacity:)();
  swift_beginAccess();
  v3[3] = 0;
  swift_release();
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<InMemoryLRUCache<NetworkManagerConfig, NetworkManager>, os_unfair_lock_s>);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v2 + 16) = v4;
  return v2;
}

uint64_t *NetworkManagerHelper.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static NetworkManagerHelper.shared;
}

uint64_t static NetworkManagerHelper.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t NetworkManagerHelper.cacheLock.getter()
{
  return swift_retain();
}

uint64_t NetworkManagerHelper.init(cacheSize:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>);
  v3 = (_QWORD *)swift_allocObject();
  type metadata accessor for NetworkManagerConfig(0);
  v3[4] = 0;
  v3[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InMemoryLRUCache<NetworkManagerConfig, NetworkManager>.LinkedListNode);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkManagerConfig and conformance NetworkManagerConfig, type metadata accessor for NetworkManagerConfig, (uint64_t)&protocol conformance descriptor for NetworkManagerConfig);
  v3[2] = Dictionary.init(minimumCapacity:)();
  swift_beginAccess();
  v3[3] = 0;
  swift_release();
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<InMemoryLRUCache<NetworkManagerConfig, NetworkManager>, os_unfair_lock_s>);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v1 + 16) = v4;
  return v1;
}

uint64_t static NetworkManagerHelper.networkManager(managerConfig:)(uint64_t a1)
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)static NetworkManagerHelper.shared + 96))(a1);
}

uint64_t static NetworkManagerHelper.createNetworkManager(managerConfig:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(_QWORD);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;

  v62 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v57 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v58 = (uint64_t)&v53 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v53 - v8;
  v61 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v61 - 8);
  v11 = MEMORY[0x24BDAC7A8](v61);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v53 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v53 - v17;
  v19 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a1, (uint64_t)v24, v25);
  v26 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20));
  v28 = *v26;
  v27 = v26[1];
  v59 = v28;
  v60 = v27;
  outlined init with copy of SecretKey(a1, (uint64_t)v21, type metadata accessor for NetworkManagerType);
  v29 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v30 = (*(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)v29 - 1) + 48))(v21, 2, v29);
  if (!v30)
  {
    v40 = (uint64_t)&v21[v29[12]];
    v41 = (uint64_t *)&v21[v29[16]];
    v42 = *v41;
    v54 = v41[1];
    v55 = v42;
    v56 = v21[v29[20]];
    v43 = v61;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v21, v61);
    v44 = v58;
    outlined init with take of RequestContext<StaticPIRParameters>(v40, v58, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v43);
    v45 = v57;
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, v57, &demangling cache variable for type metadata for URL?);
    v46 = (uint64_t *)&v24[*(int *)(v22 + 20)];
    v47 = v46[1];
    v53 = *v46;
    v48 = type metadata accessor for AspireNetworkManager();
    v49 = v62;
    v62[3] = v48;
    v49[4] = (uint64_t)&protocol witness table for AspireNetworkManager;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v49);
    swift_bridgeObjectRetain();
    v51 = v60;
    swift_bridgeObjectRetain();
    AspireNetworkManager.init(endpointUrl:issuerUrl:authenticationToken:networkDelegationConfig:privacyProxyFailClosed:secondaryIdentifier:)((uint64_t)v13, v45, v55, v54, v59, v51, v56, v53, (uint64_t)boxed_opaque_existential_1, v47);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v43);
    return outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for NetworkConfig);
  }
  if (v30 == 1)
  {
    v31 = (uint64_t *)&v24[*(int *)(v22 + 20)];
    v32 = *v31;
    v33 = v31[1];
    swift_bridgeObjectRetain();
    v34 = v60;
    swift_bridgeObjectRetain();
    URL.init(string:)();
    v35 = v61;
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v61);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v9, v35);
      v37 = type metadata accessor for AMSNetworking();
      swift_allocObject();
      v38 = AMSNetworking.init(networkDelegationConfig:secondaryIdentifier:baseURL:)(v59, v34, v32, v33, (uint64_t)v18);
      v39 = v62;
      v62[3] = v37;
      v39[4] = (uint64_t)&protocol witness table for AMSNetworking;
      *v39 = v38;
      return outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for NetworkConfig);
    }
    __break(1u);
  }
  else
  {
    result = outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for NetworkConfig);
    v52 = v62;
    *(_OWORD *)v62 = 0u;
    *((_OWORD *)v52 + 1) = 0u;
    v52[4] = 0;
  }
  return result;
}

void NetworkManagerHelper.networkManager(managerConfig:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = (uint64_t *)&v5[4];
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  closure #1 in NetworkManagerHelper.networkManager(managerConfig:)(v6, a1, a2);
  os_unfair_lock_unlock(v7);
}

uint64_t closure #1 in NetworkManagerHelper.networkManager(managerConfig:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v6 = type metadata accessor for NetworkManagerConfig(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)*a1 + 240))(&v12, a2);
  if (v13)
    return outlined init with take of LocalizedError(&v12, (uint64_t)a3);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v12, &demangling cache variable for type metadata for NetworkManager?);
  type metadata accessor for NetworkManagerHelper();
  static NetworkManagerHelper.createNetworkManager(managerConfig:)(a2, a3);
  v10 = *a1;
  outlined init with copy of SecretKey(a2, (uint64_t)v8, type metadata accessor for NetworkManagerConfig);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a3, (uint64_t)&v12, &demangling cache variable for type metadata for NetworkManager?);
  return (*(uint64_t (**)(__int128 *, char *))(*(_QWORD *)v10 + 248))(&v12, v8);
}

uint64_t NetworkManagerHelper.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t NetworkManagerHelper.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized static NetworkManagerConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;

  if ((specialized static NetworkManagerType.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  v5 = (_QWORD *)(a1 + v4);
  v6 = *(_QWORD *)(a1 + v4 + 8);
  v7 = (_QWORD *)(a2 + v4);
  v8 = v7[1];
  if (!v6)
  {
    if (v8)
      return 0;
    goto LABEL_11;
  }
  if (!v8)
    return 0;
  v9 = *v5 == *v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
  {
LABEL_11:
    v12 = *(int *)(type metadata accessor for NetworkManagerConfig(0) + 20);
    v13 = (_QWORD *)(a1 + v12);
    v14 = *(_QWORD *)(a1 + v12 + 8);
    v15 = (_QWORD *)(a2 + v12);
    v16 = v15[1];
    if (v14)
    {
      if (v16)
      {
        v17 = *v13 == *v15 && v14 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return 1;
      }
    }
    else if (!v16)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static NetworkManagerType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int *v26;
  uint64_t (*v27)(char *, uint64_t, int *);
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v81 = a2;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  MEMORY[0x24BDAC7A8](v78);
  v79 = (uint64_t)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v77 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v80 = (uint64_t)&v65 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v65 - v9;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v65 - v16;
  v18 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NetworkManagerType, NetworkManagerType));
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (uint64_t)&v24[*(int *)(v22 + 48)];
  outlined init with copy of SecretKey(a1, (uint64_t)v24, type metadata accessor for NetworkManagerType);
  outlined init with copy of SecretKey(v81, v25, type metadata accessor for NetworkManagerType);
  v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v27 = *(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)v26 - 1) + 48);
  v28 = v27(v24, 2, v26);
  if (v28)
  {
    if (v28 == 1)
    {
      if (v27((char *)v25, 2, v26) != 1)
        goto LABEL_9;
LABEL_8:
      outlined destroy of AspireApiPECConfig((uint64_t)v24, type metadata accessor for NetworkManagerType);
      return 1;
    }
    if (v27((char *)v25, 2, v26) == 2)
      goto LABEL_8;
LABEL_9:
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v24, &demangling cache variable for type metadata for (NetworkManagerType, NetworkManagerType));
    return 0;
  }
  v76 = v12;
  v71 = v15;
  v72 = v10;
  v73 = v17;
  v74 = v24;
  v81 = v11;
  outlined init with copy of SecretKey((uint64_t)v24, (uint64_t)v20, type metadata accessor for NetworkManagerType);
  v29 = v26[12];
  v75 = &v20[v29];
  v30 = v26[16];
  v32 = *(_QWORD *)&v20[v30];
  v31 = *(_QWORD *)&v20[v30 + 8];
  v33 = v26[20];
  v34 = v20[v33];
  if (v27((char *)v25, 2, v26))
  {
    outlined consume of Data?(v32, v31);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v75, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v20, v81);
    v24 = v74;
    goto LABEL_9;
  }
  v68 = v32;
  v36 = v25 + v29;
  v37 = *(_QWORD *)(v25 + v30);
  v69 = *(_QWORD *)(v25 + v30 + 8);
  v70 = v31;
  v66 = *(unsigned __int8 *)(v25 + v33);
  v67 = v34;
  v38 = v76;
  v39 = v73;
  v40 = v25;
  v41 = v81;
  v42 = *(void (**)(void))(v76 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v42)(v73, v40, v81);
  v43 = (uint64_t)v72;
  outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v75, (uint64_t)v72, &demangling cache variable for type metadata for URL?);
  v44 = v80;
  v45 = v38;
  outlined init with take of RequestContext<StaticPIRParameters>(v36, v80, &demangling cache variable for type metadata for URL?);
  LOBYTE(v36) = MEMORY[0x23B8213F8](v20, v39);
  v46 = *(void (**)(char *, uint64_t))(v38 + 8);
  v46(v20, v41);
  if ((v36 & 1) == 0)
  {
    outlined consume of Data?(v37, v69);
    v55 = v68;
    v56 = v70;
LABEL_20:
    outlined consume of Data?(v55, v56);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for URL?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for URL?);
    v46(v39, v41);
    outlined destroy of AspireApiPECConfig((uint64_t)v74, type metadata accessor for NetworkManagerType);
    return 0;
  }
  v75 = (char *)v37;
  v47 = v79;
  v48 = v45;
  v49 = v79 + *(int *)(v78 + 48);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v43, v79, &demangling cache variable for type metadata for URL?);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v44, v49, &demangling cache variable for type metadata for URL?);
  v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  v51 = v50(v47, 1, v41);
  v52 = v70;
  if (v51 == 1)
  {
    if (v50(v49, 1, v41) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v79, &demangling cache variable for type metadata for URL?);
      v53 = (uint64_t)v75;
      v54 = v68;
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  v57 = v77;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v47, v77, &demangling cache variable for type metadata for URL?);
  if (v50(v49, 1, v41) == 1)
  {
    v46((char *)v57, v41);
    v52 = v70;
LABEL_18:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v79, &demangling cache variable for type metadata for (URL?, URL?));
    v53 = (uint64_t)v75;
    v54 = v68;
LABEL_19:
    outlined consume of Data?(v53, v69);
    v55 = v54;
    v56 = v52;
    goto LABEL_20;
  }
  v58 = v71;
  v42();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
  v59 = v58;
  LOBYTE(v58) = dispatch thunk of static Equatable.== infix(_:_:)();
  v46(v59, v41);
  v46((char *)v57, v41);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v47, &demangling cache variable for type metadata for URL?);
  v53 = (uint64_t)v75;
  v52 = v70;
  v54 = v68;
  if ((v58 & 1) == 0)
    goto LABEL_19;
LABEL_22:
  if (v52 >> 60 != 15)
  {
    if (v69 >> 60 != 15)
    {
      v61 = v69;
      outlined copy of Data?(v53, v69);
      outlined copy of Data?(v54, v52);
      specialized static Data.== infix(_:_:)(v54, v52);
      v63 = v62;
      outlined consume of Data?(v53, v61);
      outlined consume of Data?(v53, v61);
      outlined consume of Data?(v54, v52);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for URL?);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for URL?);
      v46(v39, v41);
      outlined consume of Data?(v54, v52);
      v60 = (uint64_t)v74;
      if ((v63 & 1) != 0)
        goto LABEL_29;
LABEL_30:
      outlined destroy of AspireApiPECConfig(v60, type metadata accessor for NetworkManagerType);
      return 0;
    }
    outlined copy of Data._Representation(v54, v52);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for URL?);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for URL?);
    v46(v39, v41);
    outlined consume of Data?(v54, v52);
LABEL_27:
    outlined consume of Data?(v54, v52);
    outlined consume of Data?(v53, v69);
    v60 = (uint64_t)v74;
    goto LABEL_30;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v44, &demangling cache variable for type metadata for URL?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v43, &demangling cache variable for type metadata for URL?);
  v46(v39, v41);
  if (v69 >> 60 != 15)
    goto LABEL_27;
  outlined consume of Data?(v54, v52);
  v60 = (uint64_t)v74;
LABEL_29:
  v64 = v67 ^ v66;
  outlined destroy of AspireApiPECConfig(v60, type metadata accessor for NetworkManagerType);
  return v64 ^ 1u;
}

uint64_t specialized static NetworkConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;

  if ((specialized static NetworkManagerType.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    v4 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
    v5 = (_QWORD *)(a1 + v4);
    v6 = *(_QWORD *)(a1 + v4 + 8);
    v7 = (_QWORD *)(a2 + v4);
    v8 = v7[1];
    if (v6)
    {
      if (v8)
      {
        v9 = *v5 == *v7 && v6 == v8;
        if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return 1;
      }
    }
    else if (!v8)
    {
      return 1;
    }
  }
  return 0;
}

unint64_t specialized static NetworkManagerHelper.inQaEnvironment()()
{
  id v0;
  void *v1;
  unint64_t v2;
  void *v3;
  id v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  v0 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v1 = (void *)MEMORY[0x23B821F68](0xD00000000000001ALL, 0x8000000237D61B80);
  v2 = (unint64_t)objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    v3 = (void *)MEMORY[0x23B821F68](7761509, 0xE300000000000000);
    v4 = objc_msgSend((id)v2, sel_objectForKey_, v3);

    if (v4)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v6, 0, sizeof(v6));
    }
    outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v6, (uint64_t)&v7, &demangling cache variable for type metadata for Any?);
    v2 = *((_QWORD *)&v8 + 1) != 0;
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)&v7, &demangling cache variable for type metadata for Any?);
  return v2;
}

void specialized static NetworkManagerHelper.configureSecondaryIdentifier(configuration:secondaryIdentifier:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (a3)
  {
    swift_bridgeObjectRetain();
    if ((specialized static NetworkManagerHelper.inQaEnvironment()() & 1) != 0)
    {
      if (one-time initialization token for networking != -1)
        swift_once();
      v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.networking);
      swift_bridgeObjectRetain();
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v7, v8))
      {

        swift_bridgeObjectRelease_n();
        return;
      }
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v16 = v10;
      *(_DWORD *)v9 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_237BC8000, v7, v8, "Skipping setting secondaryIdentifier = %{public}s because we are in a QA environment", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v10, -1, -1);
      MEMORY[0x23B822DA8](v9, -1, -1);
    }
    else
    {
      if (one-time initialization token for networking != -1)
        swift_once();
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.networking);
      swift_bridgeObjectRetain_n();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v15 = swift_slowAlloc();
        v16 = v15;
        *(_DWORD *)v14 = 136446210;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_237BC8000, v12, v13, "Setting secondaryIdentifier %{public}s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B822DA8](v15, -1, -1);
        MEMORY[0x23B822DA8](v14, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v7 = MEMORY[0x23B821F68](a2, a3);
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_set_sourceApplicationSecondaryIdentifier_, v7);
    }

  }
}

uint64_t type metadata accessor for NetworkManagerType(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkManagerType);
}

unint64_t lazy protocol witness table accessor for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.CodingKeys, &unk_2509A6498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.CodingKeys, &unk_2509A6498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.CodingKeys, &unk_2509A6498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.CodingKeys, &unk_2509A6498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.CodingKeys and conformance NetworkManagerType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.OfflineCodingKeys, &unk_2509A65D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.OfflineCodingKeys, &unk_2509A65D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.OfflineCodingKeys, &unk_2509A65D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.OfflineCodingKeys and conformance NetworkManagerType.OfflineCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.AspireCodingKeys, &unk_2509A6548);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.AspireCodingKeys, &unk_2509A6548);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.AspireCodingKeys, &unk_2509A6548);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.AspireCodingKeys, &unk_2509A6548);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AspireCodingKeys and conformance NetworkManagerType.AspireCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x23B822CDC](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x23B822CDC](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.AmsCodingKeys, &unk_2509A6528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.AmsCodingKeys, &unk_2509A6528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerType.AmsCodingKeys, &unk_2509A6528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerType.AmsCodingKeys and conformance NetworkManagerType.AmsCodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for NetworkConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, type metadata singleton initialization cache for NetworkConfig);
}

unint64_t lazy protocol witness table accessor for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkConfig.CodingKeys, &unk_2509A5E90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkConfig.CodingKeys, &unk_2509A5E90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkConfig.CodingKeys, &unk_2509A5E90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkConfig.CodingKeys, &unk_2509A5E90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConfig.CodingKeys and conformance NetworkConfig.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for NetworkManagerConfig(uint64_t a1)
{
  return type metadata accessor for AMDPbHEConfigsReply(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkManagerConfig);
}

unint64_t lazy protocol witness table accessor for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerConfig.CodingKeys, &unk_2509A6BC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerConfig.CodingKeys, &unk_2509A6BC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerConfig.CodingKeys, &unk_2509A6BC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkManagerConfig.CodingKeys, &unk_2509A6BC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkManagerConfig.CodingKeys and conformance NetworkManagerConfig.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkDelegationConfig and conformance NetworkDelegationConfig()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig, &type metadata for NetworkDelegationConfig);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig, &type metadata for NetworkDelegationConfig);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig;
  if (!lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for NetworkDelegationConfig, &type metadata for NetworkDelegationConfig);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkDelegationConfig and conformance NetworkDelegationConfig);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in NetworkManagerType()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkManagerType and conformance NetworkManagerType, type metadata accessor for NetworkManagerType, (uint64_t)&protocol conformance descriptor for NetworkManagerType);
}

uint64_t base witness table accessor for Equatable in NetworkConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, type metadata accessor for NetworkConfig, (uint64_t)&protocol conformance descriptor for NetworkConfig);
}

uint64_t base witness table accessor for Equatable in NetworkManagerConfig()
{
  return lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkManagerConfig and conformance NetworkManagerConfig, type metadata accessor for NetworkManagerConfig, (uint64_t)&protocol conformance descriptor for NetworkManagerConfig);
}

uint64_t dispatch thunk of NetworkManager.networkDelegationConfig.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NetworkManager.fetchConfigs(useCases:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 16) + *(_QWORD *)(a5 + 16));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of NetworkManager.uploadKeys(evaluationKeys:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 24) + *(_QWORD *)(a4 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of NetworkManager.queries(requests:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 32) + *(_QWORD *)(a5 + 32));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of NetworkManager.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t *initializeBufferWithCopyOfBuffer for NetworkManagerType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = type metadata accessor for URL();
      v11 = *(_QWORD *)(v10 - 8);
      v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16);
      v12(a1, a2, v10);
      v13 = v7[12];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))((char *)a2 + v13, 1, v10))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v12((uint64_t *)v14, (uint64_t *)v15, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      }
      v17 = v7[16];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = *((_QWORD *)v19 + 1);
      if (v20 >> 60 == 15)
      {
        *(_OWORD *)v18 = *(_OWORD *)v19;
      }
      else
      {
        v21 = *(_QWORD *)v19;
        outlined copy of Data._Representation(*(_QWORD *)v19, *((_QWORD *)v19 + 1));
        *(_QWORD *)v18 = v21;
        *((_QWORD *)v18 + 1) = v20;
      }
      *((_BYTE *)a1 + v7[20]) = *((_BYTE *)a2 + v7[20]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for NetworkManagerType(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for URL();
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v6(a1, v4);
    v7 = a1 + *(int *)(v2 + 48);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4);
    if (!(_DWORD)result)
      result = ((uint64_t (*)(uint64_t, uint64_t))v6)(v7, v4);
    v8 = (uint64_t *)(a1 + *(int *)(v2 + 64));
    v9 = v8[1];
    if (v9 >> 60 != 15)
      return outlined consume of Data._Representation(*v8, v9);
  }
  return result;
}

char *initializeWithCopy for NetworkManagerType(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for URL();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v10(a1, a2, v8);
    v11 = v6[12];
    v12 = &a1[v11];
    v13 = &a2[v11];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a2[v11], 1, v8))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v10(v12, v13, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
    }
    v15 = v6[16];
    v16 = &a1[v15];
    v17 = &a2[v15];
    v18 = *((_QWORD *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v19 = *(_QWORD *)v17;
      outlined copy of Data._Representation(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
      *(_QWORD *)v16 = v19;
      *((_QWORD *)v16 + 1) = v18;
    }
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

char *assignWithCopy for NetworkManagerType(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    v18 = type metadata accessor for URL();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(void (**)(char *, char *, uint64_t))(v19 + 24);
    v20(a1, a2, v18);
    v21 = v6[12];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
    v25 = v24(&a1[v21], 1, v18);
    v26 = v24(v23, 1, v18);
    if (v25)
    {
      if (!v26)
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v26)
      {
        v20(v22, v23, v18);
LABEL_19:
        v33 = v6[16];
        v34 = (uint64_t *)&a1[v33];
        v35 = (uint64_t *)&a2[v33];
        v36 = *(_QWORD *)&a2[v33 + 8];
        if (*(_QWORD *)&a1[v33 + 8] >> 60 == 15)
        {
          if (v36 >> 60 != 15)
          {
            v37 = *v35;
            outlined copy of Data._Representation(v37, v36);
            *v34 = v37;
            v34[1] = v36;
LABEL_26:
            a1[v6[20]] = a2[v6[20]];
            return a1;
          }
        }
        else
        {
          if (v36 >> 60 != 15)
          {
            v38 = *v35;
            outlined copy of Data._Representation(v38, v36);
            v39 = *v34;
            v40 = v34[1];
            *v34 = v38;
            v34[1] = v36;
            outlined consume of Data._Representation(v39, v40);
            goto LABEL_26;
          }
          outlined destroy of Data((uint64_t)v34);
        }
        *(_OWORD *)v34 = *(_OWORD *)v35;
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    }
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v13(a1, a2, v11);
  v14 = v6[12];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  v27 = v6[16];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *((_QWORD *)v29 + 1);
  if (v30 >> 60 == 15)
  {
    *(_OWORD *)v28 = *(_OWORD *)v29;
  }
  else
  {
    v31 = *(_QWORD *)v29;
    outlined copy of Data._Representation(*(_QWORD *)v29, *((_QWORD *)v29 + 1));
    *(_QWORD *)v28 = v31;
    *((_QWORD *)v28 + 1) = v30;
  }
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

char *initializeWithTake for NetworkManagerType(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for URL();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v10(a1, a2, v8);
    v11 = v6[12];
    v12 = &a1[v11];
    v13 = &a2[v11];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a2[v11], 1, v8))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v10(v12, v13, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
    }
    *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

char *assignWithTake for NetworkManagerType(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    v18 = type metadata accessor for URL();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(void (**)(char *, char *, uint64_t))(v19 + 40);
    v20(a1, a2, v18);
    v21 = v6[12];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
    v25 = v24(&a1[v21], 1, v18);
    v26 = v24(v23, 1, v18);
    if (v25)
    {
      if (!v26)
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v23, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
        goto LABEL_16;
      }
    }
    else
    {
      if (!v26)
      {
        v20(v22, v23, v18);
LABEL_16:
        v28 = v6[16];
        v29 = (uint64_t *)&a1[v28];
        v30 = (uint64_t *)&a2[v28];
        v31 = *(_QWORD *)&a1[v28 + 8];
        if (v31 >> 60 != 15)
        {
          v32 = v30[1];
          if (v32 >> 60 != 15)
          {
            v33 = *v29;
            *v29 = *v30;
            v29[1] = v32;
            outlined consume of Data._Representation(v33, v31);
            goto LABEL_21;
          }
          outlined destroy of Data((uint64_t)v29);
        }
        *(_OWORD *)v29 = *(_OWORD *)v30;
LABEL_21:
        a1[v6[20]] = a2[v6[20]];
        return a1;
      }
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    }
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(a1, a2, v11);
  v14 = v6[12];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkManagerType()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C37B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NetworkManagerType()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C37BEC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for NetworkManagerType(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for NetworkManagerType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

void type metadata completion function for NetworkManagerType()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F)
    {
      swift_getTupleTypeLayout();
      swift_initEnumMetadataSinglePayload();
    }
  }
}

void type metadata accessor for URL?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NetworkConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 2, v7))
    {
      v9 = type metadata accessor for NetworkManagerType(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for URL();
      v12 = *(_QWORD *)(v11 - 8);
      v13 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16);
      v13(a1, a2, v11);
      v14 = v7[12];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v14, 1, v11))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        v13((uint64_t *)v15, (uint64_t *)v16, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
      }
      v18 = v7[16];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = *((_QWORD *)v20 + 1);
      if (v21 >> 60 == 15)
      {
        *(_OWORD *)v19 = *(_OWORD *)v20;
      }
      else
      {
        v22 = *(_QWORD *)v20;
        outlined copy of Data._Representation(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
        *(_QWORD *)v19 = v22;
        *((_QWORD *)v19 + 1) = v21;
      }
      *((_BYTE *)a1 + v7[20]) = *((_BYTE *)a2 + v7[20]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 2, v7);
    }
    v23 = *(int *)(a3 + 20);
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NetworkConfig(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2))
  {
    v3 = type metadata accessor for URL();
    v4 = *(_QWORD *)(v3 - 8);
    v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(a1, v3);
    v6 = a1 + *(int *)(v2 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3))
      v5(v6, v3);
    v7 = (uint64_t *)(a1 + *(int *)(v2 + 64));
    v8 = v7[1];
    if (v8 >> 60 != 15)
      outlined consume of Data._Representation(*v7, v8);
  }
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for NetworkConfig(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    v8 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for URL();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v11(a1, a2, v9);
    v12 = v6[12];
    v13 = &a1[v12];
    v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    v16 = v6[16];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = *((_QWORD *)v18 + 1);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    else
    {
      v20 = *(_QWORD *)v18;
      outlined copy of Data._Representation(*(_QWORD *)v18, *((_QWORD *)v18 + 1));
      *(_QWORD *)v17 = v20;
      *((_QWORD *)v17 + 1) = v19;
    }
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  v21 = *(int *)(a3 + 20);
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for NetworkConfig(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(void);
  int v25;
  int v26;
  size_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v46;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    v19 = type metadata accessor for URL();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(void (**)(char *, char *, uint64_t))(v20 + 24);
    v21(a1, a2, v19);
    v22 = v6[12];
    v23 = &a2[v22];
    v24 = *(uint64_t (**)(void))(v20 + 48);
    v46 = &a1[v22];
    v25 = v24();
    v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v23, 1, v19);
    if (v25)
    {
      if (v26)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v28 = v46;
LABEL_18:
        memcpy(v28, v23, v27);
        goto LABEL_21;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v46, v23, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v46, 0, 1, v19);
    }
    else
    {
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v46, v19);
        v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v28 = v46;
        goto LABEL_18;
      }
      v21(v46, v23, v19);
    }
LABEL_21:
    v34 = v6[16];
    v35 = (uint64_t *)&a1[v34];
    v36 = (uint64_t *)&a2[v34];
    v37 = *(_QWORD *)&a2[v34 + 8];
    if (*(_QWORD *)&a1[v34 + 8] >> 60 == 15)
    {
      if (v37 >> 60 != 15)
      {
        v38 = *v36;
        outlined copy of Data._Representation(v38, v37);
        *v35 = v38;
        v35[1] = v37;
LABEL_28:
        a1[v6[20]] = a2[v6[20]];
        goto LABEL_29;
      }
    }
    else
    {
      if (v37 >> 60 != 15)
      {
        v39 = *v36;
        outlined copy of Data._Representation(v39, v37);
        v40 = *v35;
        v41 = v35[1];
        *v35 = v39;
        v35[1] = v37;
        outlined consume of Data._Representation(v40, v41);
        goto LABEL_28;
      }
      outlined destroy of Data((uint64_t)v35);
    }
    *(_OWORD *)v35 = *(_OWORD *)v36;
    goto LABEL_28;
  }
  if (v10)
  {
LABEL_7:
    v18 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_29;
  }
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v13(a1, a2, v11);
  v14 = v6[12];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  v29 = v6[16];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *((_QWORD *)v31 + 1);
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  else
  {
    v33 = *(_QWORD *)v31;
    outlined copy of Data._Representation(*(_QWORD *)v31, *((_QWORD *)v31 + 1));
    *(_QWORD *)v30 = v33;
    *((_QWORD *)v30 + 1) = v32;
  }
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
LABEL_29:
  v42 = *(int *)(a3 + 20);
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for NetworkConfig(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    v8 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for URL();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v11(a1, a2, v9);
    v12 = v6[12];
    v13 = &a1[v12];
    v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for NetworkConfig(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(void);
  int v25;
  int v26;
  size_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v41;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    v19 = type metadata accessor for URL();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(void (**)(char *, char *, uint64_t))(v20 + 40);
    v21(a1, a2, v19);
    v22 = v6[12];
    v23 = &a2[v22];
    v24 = *(uint64_t (**)(void))(v20 + 48);
    v41 = &a1[v22];
    v25 = v24();
    v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v23, 1, v19);
    if (v25)
    {
      if (v26)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v28 = v41;
LABEL_15:
        memcpy(v28, v23, v27);
        goto LABEL_18;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v41, v23, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v41, 0, 1, v19);
    }
    else
    {
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v41, v19);
        v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v28 = v41;
        goto LABEL_15;
      }
      v21(v41, v23, v19);
    }
LABEL_18:
    v29 = v6[16];
    v30 = (uint64_t *)&a1[v29];
    v31 = (uint64_t *)&a2[v29];
    v32 = *(_QWORD *)&a1[v29 + 8];
    if (v32 >> 60 != 15)
    {
      v33 = v31[1];
      if (v33 >> 60 != 15)
      {
        v34 = *v30;
        *v30 = *v31;
        v30[1] = v33;
        outlined consume of Data._Representation(v34, v32);
        goto LABEL_23;
      }
      outlined destroy of Data((uint64_t)v30);
    }
    *(_OWORD *)v30 = *(_OWORD *)v31;
LABEL_23:
    a1[v6[20]] = a2[v6[20]];
    goto LABEL_24;
  }
  if (v10)
  {
LABEL_7:
    v18 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_24;
  }
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(a1, a2, v11);
  v14 = v6[12];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
LABEL_24:
  v35 = *(int *)(a3 + 20);
  v36 = &a1[v35];
  v37 = (uint64_t *)&a2[v35];
  v39 = *v37;
  v38 = v37[1];
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C389E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_4Tm(a1, a2, a3, type metadata accessor for NetworkManagerType);
}

uint64_t storeEnumTagSinglePayload for NetworkConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C38A00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_5Tm(a1, a2, a3, a4, type metadata accessor for NetworkManagerType);
}

uint64_t type metadata completion function for NetworkConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NetworkConfig(a1, a2, a3, type metadata accessor for NetworkManagerType);
}

uint64_t *initializeBufferWithCopyOfBuffer for NetworkManagerConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 2, v7))
    {
      v9 = type metadata accessor for NetworkManagerType(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for URL();
      v12 = *(_QWORD *)(v11 - 8);
      v13 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16);
      v13(a1, a2, v11);
      v14 = v7[12];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v14, 1, v11))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        v13((uint64_t *)v15, (uint64_t *)v16, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
      }
      v18 = v7[16];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = *((_QWORD *)v20 + 1);
      if (v21 >> 60 == 15)
      {
        *(_OWORD *)v19 = *(_OWORD *)v20;
      }
      else
      {
        v22 = *(_QWORD *)v20;
        outlined copy of Data._Representation(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
        *(_QWORD *)v19 = v22;
        *((_QWORD *)v19 + 1) = v21;
      }
      *((_BYTE *)a1 + v7[20]) = *((_BYTE *)a2 + v7[20]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 2, v7);
    }
    v23 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = *(int *)(a3 + 20);
    v28 = (uint64_t *)((char *)a1 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NetworkManagerConfig(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2))
  {
    v3 = type metadata accessor for URL();
    v4 = *(_QWORD *)(v3 - 8);
    v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(a1, v3);
    v6 = a1 + *(int *)(v2 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3))
      v5(v6, v3);
    v7 = (uint64_t *)(a1 + *(int *)(v2 + 64));
    v8 = v7[1];
    if (v8 >> 60 != 15)
      outlined consume of Data._Representation(*v7, v8);
  }
  type metadata accessor for NetworkConfig(0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for NetworkManagerConfig(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    v8 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for URL();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v11(a1, a2, v9);
    v12 = v6[12];
    v13 = &a1[v12];
    v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    v16 = v6[16];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = *((_QWORD *)v18 + 1);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    else
    {
      v20 = *(_QWORD *)v18;
      outlined copy of Data._Representation(*(_QWORD *)v18, *((_QWORD *)v18 + 1));
      *(_QWORD *)v17 = v20;
      *((_QWORD *)v17 + 1) = v19;
    }
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  v21 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = *(int *)(a3 + 20);
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for NetworkManagerConfig(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v49;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    v49 = a3;
    v19 = type metadata accessor for URL();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(void (**)(char *, char *, uint64_t))(v20 + 24);
    v21(a1, a2, v19);
    v22 = v6[12];
    v23 = &a1[v22];
    v24 = &a2[v22];
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
    v26 = v25(&a1[v22], 1, v19);
    v27 = v25(v24, 1, v19);
    if (v26)
    {
      if (!v27)
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v24, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v27)
      {
        v21(v23, v24, v19);
LABEL_19:
        a3 = v49;
        v34 = v6[16];
        v35 = (uint64_t *)&a1[v34];
        v36 = (uint64_t *)&a2[v34];
        v37 = *(_QWORD *)&a2[v34 + 8];
        if (*(_QWORD *)&a1[v34 + 8] >> 60 == 15)
        {
          if (v37 >> 60 != 15)
          {
            v38 = *v36;
            outlined copy of Data._Representation(v38, v37);
            *v35 = v38;
            v35[1] = v37;
LABEL_26:
            a1[v6[20]] = a2[v6[20]];
            goto LABEL_27;
          }
        }
        else
        {
          if (v37 >> 60 != 15)
          {
            v39 = *v36;
            outlined copy of Data._Representation(v39, v37);
            v40 = *v35;
            v41 = v35[1];
            *v35 = v39;
            v35[1] = v37;
            outlined consume of Data._Representation(v40, v41);
            goto LABEL_26;
          }
          outlined destroy of Data((uint64_t)v35);
        }
        *(_OWORD *)v35 = *(_OWORD *)v36;
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    }
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    v18 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_27;
  }
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v13(a1, a2, v11);
  v14 = v6[12];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  v28 = v6[16];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *((_QWORD *)v30 + 1);
  if (v31 >> 60 == 15)
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
  }
  else
  {
    v32 = *(_QWORD *)v30;
    outlined copy of Data._Representation(*(_QWORD *)v30, *((_QWORD *)v30 + 1));
    *(_QWORD *)v29 = v32;
    *((_QWORD *)v29 + 1) = v31;
  }
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
LABEL_27:
  v42 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = *(int *)(a3 + 20);
  v46 = &a1[v45];
  v47 = &a2[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for NetworkManagerConfig(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 2, v6))
  {
    v8 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for URL();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v11(a1, a2, v9);
    v12 = v6[12];
    v13 = &a1[v12];
    v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
    a1[v6[20]] = a2[v6[20]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
  }
  v16 = type metadata accessor for NetworkConfig(0);
  *(_OWORD *)&a1[*(int *)(v16 + 20)] = *(_OWORD *)&a2[*(int *)(v16 + 20)];
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for NetworkManagerConfig(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(void);
  int v25;
  int v26;
  size_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (v10)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1, &demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      goto LABEL_7;
    }
    v19 = type metadata accessor for URL();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(void (**)(char *, char *, uint64_t))(v20 + 40);
    v21(a1, a2, v19);
    v22 = v6[12];
    v23 = &a2[v22];
    v24 = *(uint64_t (**)(void))(v20 + 48);
    v46 = &a1[v22];
    v25 = v24();
    v26 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v23, 1, v19);
    if (v25)
    {
      if (v26)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v28 = v46;
LABEL_15:
        memcpy(v28, v23, v27);
        goto LABEL_18;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v46, v23, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v46, 0, 1, v19);
    }
    else
    {
      if (v26)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v46, v19);
        v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v28 = v46;
        goto LABEL_15;
      }
      v21(v46, v23, v19);
    }
LABEL_18:
    v29 = v6[16];
    v30 = (uint64_t *)&a1[v29];
    v31 = (uint64_t *)&a2[v29];
    v32 = *(_QWORD *)&a1[v29 + 8];
    if (v32 >> 60 != 15)
    {
      v33 = v31[1];
      if (v33 >> 60 != 15)
      {
        v34 = *v30;
        *v30 = *v31;
        v30[1] = v33;
        outlined consume of Data._Representation(v34, v32);
        goto LABEL_23;
      }
      outlined destroy of Data((uint64_t)v30);
    }
    *(_OWORD *)v30 = *(_OWORD *)v31;
LABEL_23:
    a1[v6[20]] = a2[v6[20]];
    goto LABEL_24;
  }
  if (v10)
  {
LABEL_7:
    v18 = type metadata accessor for NetworkManagerType(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_24;
  }
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(a1, a2, v11);
  v14 = v6[12];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
  a1[v6[20]] = a2[v6[20]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 2, v6);
LABEL_24:
  v35 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  v36 = &a1[v35];
  v37 = (uint64_t *)&a2[v35];
  v39 = *v37;
  v38 = v37[1];
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  v40 = *(int *)(a3 + 20);
  v41 = &a1[v40];
  v42 = (uint64_t *)&a2[v40];
  v44 = *v42;
  v43 = v42[1];
  *(_QWORD *)v41 = v44;
  *((_QWORD *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkManagerConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C396F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_4Tm(a1, a2, a3, type metadata accessor for NetworkConfig);
}

uint64_t __swift_get_extra_inhabitant_index_4Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  int v11;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, v7);
  v10 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  v11 = v10 - 1;
  if (v11 < 0)
    v11 = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkManagerConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C3979C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_5Tm(a1, a2, a3, a4, type metadata accessor for NetworkConfig);
}

uint64_t __swift_store_extra_inhabitant_index_5Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = a5(0);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for NetworkManagerConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NetworkConfig(a1, a2, a3, type metadata accessor for NetworkConfig);
}

uint64_t type metadata completion function for NetworkConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NetworkManagerHelper()
{
  return objc_opt_self();
}

uint64_t method lookup function for NetworkManagerHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NetworkManagerHelper.__allocating_init(cacheSize:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of NetworkManagerHelper.networkManager(managerConfig:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

void *type metadata accessor for NetworkManagerConfig.CodingKeys()
{
  return &unk_2509A6BC0;
}

uint64_t getEnumTagSinglePayload for NetworkManagerConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkManagerConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237C399E4 + 4 * byte_237D56419[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237C39A18 + 4 * byte_237D56414[v4]))();
}

uint64_t sub_237C39A18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C39A20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C39A28);
  return result;
}

uint64_t sub_237C39A34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C39A3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237C39A40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C39A48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for NetworkConfig.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for NetworkConfig.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for NetworkConfig.CodingKeys()
{
  return &unk_2509A5E90;
}

uint64_t getEnumTagSinglePayload for NetworkManagerType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkManagerType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_237C39B54 + 4 * byte_237D56423[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_237C39B88 + 4 * byte_237D5641E[v4]))();
}

uint64_t sub_237C39B88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C39B90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C39B98);
  return result;
}

uint64_t sub_237C39BA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C39BACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_237C39BB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C39BB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for NetworkManagerType.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for NetworkManagerType.CodingKeys()
{
  return &unk_2509A6498;
}

void *type metadata accessor for NetworkManagerType.AmsCodingKeys()
{
  return &unk_2509A6528;
}

uint64_t getEnumTagSinglePayload for NetworkManagerType.AspireCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkManagerType.AspireCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_237C39CC8 + 4 * byte_237D5642D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_237C39CFC + 4 * byte_237D56428[v4]))();
}

uint64_t sub_237C39CFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C39D04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C39D0CLL);
  return result;
}

uint64_t sub_237C39D18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C39D20);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_237C39D24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C39D2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NetworkManagerType.AspireCodingKeys()
{
  return &unk_2509A6548;
}

void *type metadata accessor for NetworkManagerType.OfflineCodingKeys()
{
  return &unk_2509A65D8;
}

uint64_t specialized NetworkManagerType.AspireCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E696F70646E65 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726575737369 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000237D61B20
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000237D61B40)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized NetworkManagerType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7564641 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657269707361 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E696C66666FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized NetworkConfig.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000237D61B60)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized NetworkManagerConfig.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6769666E6F63 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69746167656C6564 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void *TimeConstants.second.unsafeMutableAddressor()
{
  return &static TimeConstants.second;
}

double static TimeConstants.second.getter()
{
  return 1.0;
}

void *TimeConstants.minute.unsafeMutableAddressor()
{
  return &static TimeConstants.minute;
}

double static TimeConstants.minute.getter()
{
  return 60.0;
}

void *TimeConstants.hour.unsafeMutableAddressor()
{
  return &static TimeConstants.hour;
}

double static TimeConstants.hour.getter()
{
  return 3600.0;
}

void *TimeConstants.day.unsafeMutableAddressor()
{
  return &static TimeConstants.day;
}

double static TimeConstants.day.getter()
{
  return 86400.0;
}

ValueMetadata *type metadata accessor for TimeConstants()
{
  return &type metadata for TimeConstants;
}

void static Telemetry.reportErrorToServer(useCase:identifier:method:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  void *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  _QWORD v18[6];

  v14 = (void *)MEMORY[0x23B821F68](0xD00000000000001BLL, 0x8000000237D61BA0);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  v15[6] = a5;
  v15[7] = a6;
  v15[8] = a7;
  v18[4] = partial apply for closure #1 in static Telemetry.reportErrorToServer(useCase:identifier:method:error:);
  v18[5] = v15;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v18[3] = &block_descriptor_1;
  v16 = _Block_copy(v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = a7;
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v16);

}

unint64_t closure #1 in static Telemetry.reportErrorToServer(useCase:identifier:method:error:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t inited;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540B0;
  *(_QWORD *)(inited + 32) = 0x65736143657375;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = MEMORY[0x23B821F68](a1, a2);
  *(_QWORD *)(inited + 56) = 0xD000000000000021;
  *(_QWORD *)(inited + 64) = 0x8000000237D61CA0;
  if (a4)
  {
    v13 = a4;
  }
  else
  {
    a3 = 1701736270;
    v13 = 0xE400000000000000;
  }
  swift_bridgeObjectRetain();
  v14 = MEMORY[0x23B821F68](a3, v13);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 72) = v14;
  *(_QWORD *)(inited + 80) = 0x646F6874656DLL;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  *(_QWORD *)(inited + 96) = MEMORY[0x23B821F68](a5, a6);
  v15 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized static Telemetry.prepareErrorForReporting(error:)();
  v17 = v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = v15;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v17, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v21);
  v19 = v21;
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_237C3A9B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in static Telemetry.reportErrorToServer(useCase:identifier:method:error:)()
{
  uint64_t v0;

  return closure #1 in static Telemetry.reportErrorToServer(useCase:identifier:method:error:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD v11[6];

  v8 = (void *)MEMORY[0x23B821F68](0xD000000000000021, 0x8000000237D61BE0);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v11[4] = partial apply for closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:);
  v11[5] = v9;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v11[3] = &block_descriptor_6;
  v10 = _Block_copy(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v10);

}

unint64_t closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Class v23;
  uint64_t v25;
  _QWORD *v26;

  v6 = type metadata accessor for AspireApiKeyStatus(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540B0;
  *(_QWORD *)(inited + 32) = 0x6D614E70756F7267;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  *(_QWORD *)(inited + 48) = MEMORY[0x23B821F68](a1, a2);
  strcpy((char *)(inited + 56), "keyTimestamp");
  *(_BYTE *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v13 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v14 = *(_QWORD *)(v7 + 72);
    do
    {
      outlined init with copy of SecretKey(v13, (uint64_t)v9, type metadata accessor for AspireApiKeyStatus);
      UInt64._bridgeToObjectiveC()();
      outlined destroy of AspireApiKeyStatus((uint64_t)v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v13 += v14;
      --v11;
    }
    while (v11);
    v12 = MEMORY[0x24BEE4AF8];
  }
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 72) = isa;
  strcpy((char *)(inited + 80), "activeUseCase");
  *(_WORD *)(inited + 94) = -4864;
  v16 = swift_bridgeObjectRetain();
  v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v16);
  swift_bridgeObjectRelease();
  v26 = v17;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v26);
  v18 = (uint64_t)v26;
  v19 = v26[2];
  if (v19)
  {
    v26 = (_QWORD *)v12;
    specialized ContiguousArray.reserveCapacity(_:)();
    v20 = (uint64_t *)(v18 + 40);
    do
    {
      v21 = *(v20 - 1);
      v22 = *v20;
      swift_bridgeObjectRetain();
      MEMORY[0x23B821F68](v21, v22);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  swift_release();
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSString);
  v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 96) = v23;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t sub_237C3AEA0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:)()
{
  uint64_t *v0;

  return closure #1 in static Telemetry.reportKeyRotationEvent(groupName:keyStatuses:activeUseCases:)(v0[2], v0[3], v0[4]);
}

ValueMetadata *type metadata accessor for Telemetry()
{
  return &type metadata for Telemetry;
}

uint64_t outlined destroy of AspireApiKeyStatus(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireApiKeyStatus(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  void *v54;

  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_23;
  v10 = v7;
  v11 = v8;
  v54 = v9;
  v12 = (_QWORD *)*a5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v21[6] + 16 * v14);
    *v25 = v10;
    v25[1] = v11;
    *(_QWORD *)(v21[7] + 8 * v14) = v54;
    v26 = v21[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v28;
LABEL_13:
    specialized LazyMapSequence.Iterator.next()();
    if (v30)
    {
      v32 = v29;
      v33 = v30;
      v34 = v31;
      do
      {
        v41 = (_QWORD *)*a5;
        v42 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
        v44 = v41[2];
        v45 = (v43 & 1) == 0;
        v27 = __OFADD__(v44, v45);
        v46 = v44 + v45;
        if (v27)
          goto LABEL_24;
        v47 = v43;
        if (v41[3] < v46)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, 1);
          v42 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v47 & 1) != (v48 & 1))
            goto LABEL_26;
        }
        v49 = (_QWORD *)*a5;
        if ((v47 & 1) != 0)
        {
          v35 = 8 * v42;
          v36 = *(id *)(v49[7] + 8 * v42);
          swift_bridgeObjectRelease();

          v37 = v49[7];
          *(_QWORD *)(v37 + v35) = v36;
        }
        else
        {
          v49[(v42 >> 6) + 8] |= 1 << v42;
          v50 = (uint64_t *)(v49[6] + 16 * v42);
          *v50 = v32;
          v50[1] = v33;
          *(_QWORD *)(v49[7] + 8 * v42) = v34;
          v51 = v49[2];
          v27 = __OFADD__(v51, 1);
          v52 = v51 + 1;
          if (v27)
            goto LABEL_25;
          v49[2] = v52;
        }
        specialized LazyMapSequence.Iterator.next()();
        v32 = v38;
        v33 = v39;
        v34 = v40;
      }
      while (v39);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : String].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v22 = 8 * v14;
    v23 = *(id *)(v21[7] + 8 * v14);
    swift_bridgeObjectRelease();

    v24 = v21[7];
    *(_QWORD *)(v24 + v22) = v23;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  Swift::Int v20;
  _QWORD *v21;
  Swift::Int v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v4;

  v2 = a1[1];
  v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain();
  return v4;
}

void specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int64_t v44;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char **)((char *)&v39 - v11);
  v13 = *v1;
  v14 = v1[1];
  v16 = v1[2];
  v15 = v1[3];
  v17 = v15;
  v18 = v1[4];
  v39 = v6;
  if (v18)
  {
    v43 = a1;
    v44 = v15;
    v40 = v16;
    v41 = v14;
    v42 = v10;
    v19 = v4;
    v20 = (v18 - 1) & v18;
    v21 = __clz(__rbit64(v18)) | (v15 << 6);
LABEL_3:
    v22 = *(_QWORD *)(v13 + 56);
    v23 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    v24 = v13;
    v26 = *v23;
    v25 = v23[1];
    v27 = type metadata accessor for UseCaseGroup();
    outlined init with copy of SecretKey(v22 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v21, (uint64_t)v12 + *(int *)(v3 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    *v12 = v26;
    v12[1] = v25;
    v4 = v19;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v12, 0, 1, v3);
    v13 = v24;
    swift_bridgeObjectRetain();
    v10 = v42;
    a1 = v43;
    v16 = v40;
    v14 = v41;
    goto LABEL_25;
  }
  v28 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
LABEL_23:
    v17 = v11;
    goto LABEL_24;
  }
  v29 = (unint64_t)(v16 + 64) >> 6;
  if (v28 < v29)
  {
    v30 = *(_QWORD *)(v14 + 8 * v28);
    if (v30)
    {
LABEL_7:
      v40 = v16;
      v41 = v14;
      v42 = v10;
      v43 = a1;
      v19 = v4;
      v20 = (v30 - 1) & v30;
      v21 = __clz(__rbit64(v30)) + (v28 << 6);
      v44 = v28;
      goto LABEL_3;
    }
    v31 = v15 + 2;
    v17 = v15 + 1;
    if (v15 + 2 < v29)
    {
      v30 = *(_QWORD *)(v14 + 8 * v31);
      if (v30)
      {
LABEL_10:
        v28 = v31;
        goto LABEL_7;
      }
      v17 = v15 + 2;
      if (v15 + 3 < v29)
      {
        v30 = *(_QWORD *)(v14 + 8 * (v15 + 3));
        if (v30)
        {
          v28 = v15 + 3;
          goto LABEL_7;
        }
        v31 = v15 + 4;
        v17 = v15 + 3;
        if (v15 + 4 < v29)
        {
          v30 = *(_QWORD *)(v14 + 8 * v31);
          if (v30)
            goto LABEL_10;
          v28 = v15 + 5;
          v17 = v15 + 4;
          if (v15 + 5 < v29)
          {
            v30 = *(_QWORD *)(v14 + 8 * v28);
            if (v30)
              goto LABEL_7;
            v11 = v29 - 1;
            v32 = v15 + 6;
            while (v29 != v32)
            {
              v30 = *(_QWORD *)(v14 + 8 * v32++);
              if (v30)
              {
                v28 = v32 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  v44 = v17;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v3);
  v20 = 0;
LABEL_25:
  *v1 = v13;
  v1[1] = v14;
  v33 = v44;
  v1[2] = v16;
  v1[3] = v33;
  v1[4] = v20;
  v34 = (void (*)(uint64_t))v1[5];
  outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup)?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(a1, 1, 1, v35);
  }
  else
  {
    v37 = (uint64_t)v39;
    outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v10, (uint64_t)v39, &demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
    v34(v37);
    outlined destroy of (key: String, value: UseCaseGroup)(v37);
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UseCaseGroup));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a1, 0, 1, v38);
  }
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t type metadata accessor for NSNumber(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void specialized static Telemetry.prepareErrorForReporting(error:)()
{
  uint64_t inited;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_237D540B0;
  *(_QWORD *)(inited + 32) = 0x6E69616D6F64;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v1 = (void *)_convertErrorToNSError(_:)();
  v2 = objc_msgSend(v1, sel_domain);

  if (v2)
  {
    *(_QWORD *)(inited + 48) = v2;
    *(_QWORD *)(inited + 56) = 1701080931;
    *(_QWORD *)(inited + 64) = 0xE400000000000000;
    v3 = (void *)_convertErrorToNSError(_:)();
    objc_msgSend(v3, sel_code);

    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 80) = 0x7470697263736564;
    *(_QWORD *)(inited + 88) = 0xEB000000006E6F69;
    swift_getErrorValue();
    v4 = Error.localizedDescription.getter();
    v5 = MEMORY[0x23B821F68](v4);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 96) = v5;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
  }
  else
  {
    __break(1u);
  }
}

uint64_t outlined destroy of (key: String, value: UseCaseGroup)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: UseCaseGroup));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Sequence.asyncForEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v5[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[9] = swift_task_alloc();
  type metadata accessor for Optional();
  v5[10] = swift_task_alloc();
  v5[11] = *(_QWORD *)(a3 - 8);
  v5[12] = swift_task_alloc();
  v8 = swift_getAssociatedTypeWitness();
  v5[13] = v8;
  v5[14] = *(_QWORD *)(v8 - 8);
  v5[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Sequence.asyncForEach(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  dispatch thunk of Sequence.makeIterator()();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(int **)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
    v7 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v6;
    *v6 = v0;
    v6[1] = Sequence.asyncForEach(_:);
    return v7(*(_QWORD *)(v0 + 72));
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(int **)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
    v7 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v6;
    *v6 = v0;
    v6[1] = Sequence.asyncForEach(_:);
    return v7(*(_QWORD *)(v0 + 72));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Sequence.asyncMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v6[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[12] = swift_task_alloc();
  type metadata accessor for Optional();
  v6[13] = swift_task_alloc();
  v6[14] = *(_QWORD *)(a3 - 8);
  v6[15] = swift_task_alloc();
  v9 = swift_getAssociatedTypeWitness();
  v6[16] = v9;
  v6[17] = *(_QWORD *)(v9 - 8);
  v6[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Sequence.asyncMap<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  int *v12;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = static Array._allocateUninitialized(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  dispatch thunk of Sequence.makeIterator()();
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v8 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  else
  {
    v10 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    v12 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v11;
    *v11 = v0;
    v11[1] = Sequence.asyncMap<A>(_:);
    return ((uint64_t (*)(_QWORD, _QWORD))v12)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  _QWORD *v10;
  int *v11;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  type metadata accessor for Array();
  Array.append(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v7 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
  else
  {
    v9 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    v11 = (int *)((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v10;
    *v10 = v0;
    v10[1] = Sequence.asyncMap<A>(_:);
    return ((uint64_t (*)(_QWORD, _QWORD))v11)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *StaticPIRParameters.defaultCacheEntryMinutesToLive.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
    swift_once();
  return &static StaticPIRParameters.defaultCacheEntryMinutesToLive;
}

CipherML::StaticPIRParameters::CodingKeys_optional __swiftcall StaticPIRParameters.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of StaticPIRParameters.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return (CipherML::StaticPIRParameters::CodingKeys_optional)3;
  else
    return (CipherML::StaticPIRParameters::CodingKeys_optional)v3;
}

CipherML::StaticPIRParameters::CodingKeys_optional __swiftcall StaticPIRParameters.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::StaticPIRParameters::CodingKeys_optional)3;
}

uint64_t StaticPIRParameters.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t StaticPIRParameters.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return 0x647261685378616DLL;
  if (a1 == 1)
    return 0xD000000000000011;
  return 0xD000000000000017;
}

uint64_t StaticPIRParameters.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x647261685378616DLL;
  if (a1 == 1)
    return 0xD000000000000011;
  return 0xD000000000000017;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StaticPIRParameters.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = 0xD000000000000011;
  v3 = *a1;
  v4 = 0x8000000237D60B10;
  if (v3 == 1)
    v5 = 0xD000000000000011;
  else
    v5 = 0xD000000000000017;
  if (v3 == 1)
    v6 = 0x8000000237D60B10;
  else
    v6 = 0x8000000237D60B30;
  if (*a1)
    v7 = v5;
  else
    v7 = 0x647261685378616DLL;
  if (v3)
    v8 = v6;
  else
    v8 = 0xE900000000000073;
  if (*a2 != 1)
  {
    v2 = 0xD000000000000017;
    v4 = 0x8000000237D60B30;
  }
  if (*a2)
    v9 = v2;
  else
    v9 = 0x647261685378616DLL;
  if (*a2)
    v10 = v4;
  else
    v10 = 0xE900000000000073;
  if (v7 == v9 && v8 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StaticPIRParameters.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StaticPIRParameters.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StaticPIRParameters.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance StaticPIRParameters.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized StaticPIRParameters.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance StaticPIRParameters.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000073;
  v4 = 0x8000000237D60B10;
  v5 = 0xD000000000000011;
  if (v2 != 1)
  {
    v5 = 0xD000000000000017;
    v4 = 0x8000000237D60B30;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x647261685378616DLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StaticPIRParameters.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0xD000000000000017;
  if (*v0)
    return v1;
  else
    return 0x647261685378616DLL;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance StaticPIRParameters.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized StaticPIRParameters.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticPIRParameters.CodingKeys()
{
  lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StaticPIRParameters.CodingKeys()
{
  lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void one-time initialization function for defaultCacheEntryMinutesToLive()
{
  static StaticPIRParameters.defaultCacheEntryMinutesToLive = 10080;
}

uint64_t static StaticPIRParameters.defaultCacheEntryMinutesToLive.getter()
{
  return static StaticPIRParameters.defaultCacheEntryMinutesToLive.getter(&one-time initialization token for defaultCacheEntryMinutesToLive, (uint64_t)&static StaticPIRParameters.defaultCacheEntryMinutesToLive);
}

void one-time initialization function for maximumCacheEntryMinutesToLive()
{
  static StaticPIRParameters.maximumCacheEntryMinutesToLive = 20160;
}

uint64_t *StaticPIRParameters.maximumCacheEntryMinutesToLive.unsafeMutableAddressor()
{
  if (one-time initialization token for maximumCacheEntryMinutesToLive != -1)
    swift_once();
  return &static StaticPIRParameters.maximumCacheEntryMinutesToLive;
}

uint64_t static StaticPIRParameters.maximumCacheEntryMinutesToLive.getter()
{
  return static StaticPIRParameters.defaultCacheEntryMinutesToLive.getter(&one-time initialization token for maximumCacheEntryMinutesToLive, (uint64_t)&static StaticPIRParameters.maximumCacheEntryMinutesToLive);
}

uint64_t static StaticPIRParameters.defaultCacheEntryMinutesToLive.getter(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(_QWORD *)a2;
}

uint64_t StaticPIRParameters.maxShards.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t StaticPIRParameters.cacheElementCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t StaticPIRParameters.cacheEntryMinutesToLive.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> StaticPIRParameters.init(maxShards:cacheElementCount:cacheEntryMinutesToLive:)(CipherML::StaticPIRParameters *__return_ptr retstr, Swift::Int maxShards, Swift::Int_optional cacheElementCount, Swift::Int_optional cacheEntryMinutesToLive)
{
  uint64_t v4;
  Swift::Int value;
  Swift::Int v6;
  _BOOL4 is_nil;
  _BOOL4 v10;

  value = cacheEntryMinutesToLive.value;
  v6 = cacheElementCount.value;
  is_nil = cacheElementCount.is_nil;
  v10 = cacheEntryMinutesToLive.is_nil;
  specialized static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)(cacheElementCount.value, cacheElementCount.is_nil, cacheEntryMinutesToLive.value, cacheEntryMinutesToLive.is_nil);
  if (!v4)
  {
    retstr->maxShards = maxShards;
    retstr->cacheElementCount.value = v6;
    retstr->cacheElementCount.is_nil = is_nil;
    retstr->cacheEntryMinutesToLive.value = value;
    retstr->cacheEntryMinutesToLive.is_nil = v10;
  }
}

void static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  specialized static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)(a1, a2 & 1, a3, a4 & 1);
}

uint64_t StaticPIRParameters.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  _BYTE v12[16];
  _BYTE v13[16];
  _BYTE v14[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StaticPIRParameters.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    outlined init with take of RequestContext<StaticPIRParameters>(v3 + 8, (uint64_t)v14, &demangling cache variable for type metadata for Int?);
    outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for Int?);
    v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, MEMORY[0x24BEE1770], MEMORY[0x24BEE4AA8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined init with take of RequestContext<StaticPIRParameters>(v3 + 24, (uint64_t)v13, &demangling cache variable for type metadata for Int?);
    outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v13, (uint64_t)v12, &demangling cache variable for type metadata for Int?);
    v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StaticPIRParameters(_QWORD *a1)
{
  return StaticPIRParameters.encode(to:)(a1);
}

double StaticPIRParameters.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  specialized StaticPIRParameters.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

double protocol witness for Decodable.init(from:) in conformance StaticPIRParameters@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  specialized StaticPIRParameters.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

double PECDPParameters.successCount.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double PECDPParameters.successProbability.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t PECDPParameters.maxQueryCountPerDpInterval.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PECDPParameters.maxFakesPerQuery.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PECDPParameters.maxTrials.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

BOOL static PECDPParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

uint64_t PECDPParameters.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237C3D9A8 + 4 * byte_237D56D60[a1]))(0x4373736563637573, 0xEC000000746E756FLL);
}

unint64_t sub_237C3D9A8()
{
  return 0xD000000000000012;
}

unint64_t sub_237C3D9E4()
{
  return 0xD000000000000010;
}

uint64_t sub_237C3DA00()
{
  return 0x6C6169725478616DLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PECDPParameters.CodingKeys()
{
  unsigned __int8 *v0;

  return PECDPParameters.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PECDPParameters.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PECDPParameters.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PECDPParameters.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PECDPParameters.CodingKeys()
{
  lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PECDPParameters.CodingKeys()
{
  lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PECDPParameters.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PECDPParameters.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

double PECDPParameters.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  specialized PECDPParameters.init(from:)(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

void __swiftcall PECDPParameters.init(successCount:successProbability:maxQueryCountPerDpInterval:maxFakesPerQuery:maxTrials:)(CipherML::PECDPParameters *__return_ptr retstr, Swift::Double successCount, Swift::Double successProbability, Swift::Int maxQueryCountPerDpInterval, Swift::Int maxFakesPerQuery, Swift::Int maxTrials)
{
  retstr->successCount = successCount;
  retstr->successProbability = successProbability;
  retstr->maxQueryCountPerDpInterval = maxQueryCountPerDpInterval;
  retstr->maxFakesPerQuery = maxFakesPerQuery;
  retstr->maxTrials = maxTrials;
}

double protocol witness for Decodable.init(from:) in conformance PECDPParameters@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  specialized PECDPParameters.init(from:)(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PECDPParameters(_QWORD *a1)
{
  return PECDPParameters.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PECDPParameters(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

__n128 StaticPECParameters.differentialPrivacyParameters.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_BYTE *)(v1 + 40);
  result = *(__n128 *)v1;
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

void __swiftcall StaticPECParameters.init(differentialPrivacyParameters:)(CipherML::StaticPECParameters *__return_ptr retstr, CipherML::PECDPParameters_optional *differentialPrivacyParameters)
{
  Swift::Int v3;
  Swift::Bool v4;
  __int128 v5;
  _OWORD v6[2];
  Swift::Int v7;
  Swift::Bool v8;

  outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)differentialPrivacyParameters, (uint64_t)v6, &demangling cache variable for type metadata for PECDPParameters?);
  v3 = v7;
  v4 = v8;
  v5 = v6[1];
  *(_OWORD *)&retstr->differentialPrivacyParameters.value.successCount = v6[0];
  *(_OWORD *)&retstr->differentialPrivacyParameters.value.maxQueryCountPerDpInterval = v5;
  retstr->differentialPrivacyParameters.value.maxTrials = v3;
  retstr->differentialPrivacyParameters.is_nil = v4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StaticPECParameters.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StaticPECParameters.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance StaticPECParameters.CodingKeys()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StaticPECParameters.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance StaticPECParameters.CodingKeys()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StaticPECParameters.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized StaticPECParameters.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticPECParameters.CodingKeys()
{
  lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StaticPECParameters.CodingKeys()
{
  lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t StaticPECParameters.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[48];
  _BYTE v10[48];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StaticPECParameters.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of RequestContext<StaticPIRParameters>(v2, (uint64_t)v10, &demangling cache variable for type metadata for PECDPParameters?);
  outlined init with take of RequestContext<StaticPIRParameters>((uint64_t)v10, (uint64_t)v9, &demangling cache variable for type metadata for PECDPParameters?);
  lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

double StaticPECParameters.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  specialized StaticPECParameters.init(from:)(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

double protocol witness for Decodable.init(from:) in conformance StaticPECParameters@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  specialized StaticPECParameters.init(from:)(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StaticPECParameters(_QWORD *a1)
{
  return StaticPECParameters.encode(to:)(a1);
}

CipherML::UseCaseGroup::CodingKeys_optional __swiftcall UseCaseGroup.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UseCaseGroup.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return (CipherML::UseCaseGroup::CodingKeys_optional)6;
  else
    return (CipherML::UseCaseGroup::CodingKeys_optional)v3;
}

CipherML::UseCaseGroup::CodingKeys_optional __swiftcall UseCaseGroup.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::UseCaseGroup::CodingKeys_optional)6;
}

uint64_t UseCaseGroup.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t UseCaseGroup.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237C3E134 + 4 * byte_237D56D65[a1]))(0x7974697275636573, 0xED00006C6576654CLL);
}

unint64_t sub_237C3E134()
{
  return 0xD000000000000014;
}

unint64_t sub_237C3E150()
{
  return 0xD000000000000022;
}

uint64_t sub_237C3E188()
{
  return 0x7365736143657375;
}

uint64_t sub_237C3E1A0()
{
  return 0x436B726F7774656ELL;
}

uint64_t UseCaseGroup.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237C3E204 + 4 * byte_237D56D6B[a1]))(0x7974697275636573, 0xED00006C6576654CLL);
}

unint64_t sub_237C3E204()
{
  return 0xD000000000000014;
}

unint64_t sub_237C3E220()
{
  return 0xD000000000000022;
}

uint64_t sub_237C3E258()
{
  return 0x7365736143657375;
}

uint64_t sub_237C3E270()
{
  return 0x436B726F7774656ELL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UseCaseGroup.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = UseCaseGroup.CodingKeys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == UseCaseGroup.CodingKeys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UseCaseGroup.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  UseCaseGroup.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UseCaseGroup.CodingKeys()
{
  unsigned __int8 *v0;

  UseCaseGroup.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UseCaseGroup.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  UseCaseGroup.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UseCaseGroup.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized UseCaseGroup.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UseCaseGroup.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = UseCaseGroup.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance UseCaseGroup.CodingKeys()
{
  unsigned __int8 *v0;

  return UseCaseGroup.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance UseCaseGroup.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized UseCaseGroup.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance UseCaseGroup.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UseCaseGroup.CodingKeys()
{
  lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UseCaseGroup.CodingKeys()
{
  lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void *UseCaseGroup.minutesPer30Days.unsafeMutableAddressor()
{
  return &static UseCaseGroup.minutesPer30Days;
}

uint64_t static UseCaseGroup.minutesPer30Days.getter()
{
  return 43200;
}

uint64_t UseCaseGroup.securityLevel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for HE.SecurityLevel();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t UseCaseGroup.keyExpirationMinutes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for UseCaseGroup() + 20));
}

uint64_t UseCaseGroup.keyRotationBeforeExpirationMinutes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for UseCaseGroup() + 24));
}

uint64_t UseCaseGroup.keyRotationIgnoreMissingEvaluationKey.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for UseCaseGroup() + 28));
}

uint64_t UseCaseGroup.useCases.getter()
{
  type metadata accessor for UseCaseGroup();
  return swift_bridgeObjectRetain();
}

uint64_t UseCaseGroup.networkConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UseCaseGroup();
  return outlined init with copy of SecretKey(v1 + *(int *)(v3 + 36), a1, type metadata accessor for NetworkConfig);
}

uint64_t UseCaseGroup.managesOwnNetworking.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + *(int *)(type metadata accessor for UseCaseGroup() + 36);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 2, 2, v5);
  LOBYTE(v4) = specialized static NetworkManagerType.== infix(_:_:)(v4, (uint64_t)v3);
  outlined destroy of AspireApiPECConfig((uint64_t)v3, type metadata accessor for NetworkManagerType);
  return v4 & 1;
}

uint64_t UseCaseGroup.init(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:keyRotationIgnoreMissingEvaluationKey:securityLevel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v15 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 0x8000000000000000) != 0 || (a4 & 0x8000000000000000) != 0 || a3 < a4)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for framework != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.framework);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = a6;
      v32 = swift_slowAlloc();
      *(_DWORD *)v32 = 134349312;
      v43 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2050;
      v43 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237BC8000, v29, v30, "Invalid keyExpirationMinutes '%{public}ld' or 'keyExpirationMinutes %{public}ld'", (uint8_t *)v32, 0x16u);
      v33 = v32;
      a6 = v31;
      MEMORY[0x23B822DA8](v33, -1, -1);
    }

    goto LABEL_19;
  }
  v41 = a6;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 2, 2, v18);
  v19 = specialized static NetworkManagerType.== infix(_:_:)(a2, (uint64_t)v17);
  outlined destroy of AspireApiPECConfig((uint64_t)v17, type metadata accessor for NetworkManagerType);
  if ((v19 & 1) == 0 && a3 > 0xA8C0)
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.framework);
    swift_bridgeObjectRetain();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v40 = swift_slowAlloc();
      v43 = v40;
      *(_DWORD *)v23 = 134349570;
      v42 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2082;
      swift_bridgeObjectRetain();
      v24 = Dictionary.description.getter();
      v26 = v25;
      swift_bridgeObjectRelease();
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2050;
      v42 = 43200;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237BC8000, v21, v22, "Invalid keyExpirationMinutes '%{public}ld'\nfor self-managed networking usecases '%{public}s'.\nMust be <= %{public}ld", (uint8_t *)v23, 0x20u);
      v27 = v40;
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v27, -1, -1);
      MEMORY[0x23B822DA8](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a6 = v41;
LABEL_19:
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_20;
  }
  a6 = v41;
  specialized static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(a1, a2, a3, a4);
  if (v7)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    v34 = type metadata accessor for HE.SecurityLevel();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a6, v34);
    return outlined destroy of AspireApiPECConfig(a2, type metadata accessor for NetworkConfig);
  }
  v36 = a6;
  v37 = (int *)type metadata accessor for UseCaseGroup();
  *(_QWORD *)(a7 + v37[5]) = a3;
  *(_QWORD *)(a7 + v37[6]) = a4;
  *(_BYTE *)(a7 + v37[7]) = a5 & 1;
  *(_QWORD *)(a7 + v37[8]) = a1;
  v38 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(a7, v36, v38);
  return outlined init with take of NetworkConfig(a2, a7 + v37[9]);
}

uint64_t static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(a1, a2, a3, a4);
}

uint64_t UseCaseGroup.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UseCaseGroup.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = 0;
  type metadata accessor for HE.SecurityLevel();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type HE.SecurityLevel and conformance HE.SecurityLevel, (uint64_t (*)(uint64_t))MEMORY[0x24BE2A0C8], MEMORY[0x24BE2A0D8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = type metadata accessor for UseCaseGroup();
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UseCase]);
    lazy protocol witness table accessor for type [String : UseCase] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : UseCase] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type UseCase and conformance UseCase, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[14] = 5;
    type metadata accessor for NetworkConfig(0);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, type metadata accessor for NetworkConfig, (uint64_t)&protocol conformance descriptor for NetworkConfig);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UseCaseGroup(_QWORD *a1)
{
  return UseCaseGroup.encode(to:)(a1);
}

uint64_t UseCaseGroup.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v33 = a2;
  v34 = type metadata accessor for NetworkConfig(0);
  MEMORY[0x24BDAC7A8](v34);
  v35 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for HE.SecurityLevel();
  v4 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v38 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UseCaseGroup.CodingKeys>);
  v6 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UseCaseGroup();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys();
  v12 = (uint64_t)v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v32 = v6;
  v39 = a1;
  v13 = v11;
  v46 = 0;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type HE.SecurityLevel and conformance HE.SecurityLevel, (uint64_t (*)(uint64_t))MEMORY[0x24BE2A0C8], MEMORY[0x24BE2A0F8]);
  v14 = v37;
  v15 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  v17 = (uint64_t)v13;
  v16(v13, v38, v14);
  v45 = 1;
  v18 = KeyedDecodingContainer.decode(_:forKey:)();
  v19 = v8;
  v20 = (int *)v9;
  *(_QWORD *)(v17 + *(int *)(v9 + 20)) = v18;
  v44 = 2;
  v21 = v18;
  v22 = KeyedDecodingContainer.decode(_:forKey:)();
  v38 = v21;
  *(_QWORD *)(v17 + v20[6]) = v22;
  v43 = 3;
  v23 = v22;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v31 = v23;
  *(_BYTE *)(v17 + v20[7]) = v24 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UseCase]);
  v42 = 4;
  lazy protocol witness table accessor for type [String : UseCase] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : UseCase] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type UseCase and conformance UseCase, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v25 = v40;
  *(_QWORD *)(v17 + v20[8]) = v40;
  v41 = 5;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type NetworkConfig and conformance NetworkConfig, type metadata accessor for NetworkConfig, (uint64_t)&protocol conformance descriptor for NetworkConfig);
  v30 = v25;
  swift_bridgeObjectRetain();
  v26 = (uint64_t)v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v34 = (uint64_t)v19;
  v27 = v17 + v20[9];
  outlined init with take of NetworkConfig(v26, v27);
  specialized static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(v30, v27, v38, v31);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v15);
  swift_bridgeObjectRelease();
  outlined init with copy of SecretKey(v17, v33, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v39);
  return outlined destroy of AspireApiPECConfig(v17, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UseCaseGroup@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return UseCaseGroup.init(from:)(a1, a2);
}

unint64_t specialized StaticPIRParameters.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of StaticPIRParameters.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

void specialized static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;

  if ((a2 & 1) != 0)
  {
    if ((a4 & 1) != 0)
    {
      if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
        swift_once();
      a3 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
    }
  }
  else if ((a4 & 1) != 0)
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.framework);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      MEMORY[0x23B822DA8](v8, -1, -1);
    }

LABEL_20:
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  if (one-time initialization token for maximumCacheEntryMinutesToLive != -1)
    swift_once();
  if (static StaticPIRParameters.maximumCacheEntryMinutesToLive < a3)
  {
    if (one-time initialization token for framework != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.framework);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      *(_DWORD *)v12 = 134349312;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237BC8000, v10, v11, "Invalid cacheEntryMinutesToLive '%{public}ld'. Must be <= %ld", (uint8_t *)v12, 0x16u);
      MEMORY[0x23B822DA8](v12, -1, -1);
    }

    goto LABEL_20;
  }
}

unint64_t lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPIRParameters.CodingKeys, &type metadata for StaticPIRParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPIRParameters.CodingKeys, &type metadata for StaticPIRParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPIRParameters.CodingKeys, &type metadata for StaticPIRParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPIRParameters.CodingKeys, &type metadata for StaticPIRParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys);
  }
  return result;
}

uint64_t specialized StaticPIRParameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StaticPIRParameters.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticPIRParameters.CodingKeys and conformance StaticPIRParameters.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  LOBYTE(v20) = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = 1;
  LOBYTE(v20) = 1;
  v12 = KeyedDecodingContainer.contains(_:)();
  if ((v12 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    v22 = 1;
    lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, MEMORY[0x24BEE1798], MEMORY[0x24BEE4AC0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v18 = v10;
    v19 = v20;
    v11 = v21;
  }
  else
  {
    v18 = v10;
    v19 = 0;
  }
  LOBYTE(v20) = 2;
  if ((KeyedDecodingContainer.contains(_:)() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    v22 = 2;
    lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, MEMORY[0x24BEE1798], MEMORY[0x24BEE4AC0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v13 = v20;
    v14 = v21;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = v19;
  v17 = v13;
  specialized static StaticPIRParameters.validateCacheParams(cacheElementCount:cacheEntryMinutesToLive:)(v19, v11, v13, v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v15;
  *(_BYTE *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v17;
  *(_BYTE *)(a2 + 32) = v14;
  return result;
}

unint64_t lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for PECDPParameters.CodingKeys, &unk_2509A6220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for PECDPParameters.CodingKeys, &unk_2509A6220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for PECDPParameters.CodingKeys, &unk_2509A6220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for PECDPParameters.CodingKeys, &unk_2509A6220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys);
  }
  return result;
}

uint64_t specialized PECDPParameters.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4373736563637573 && a2 == 0xEC000000746E756FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000237D61CD0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000237D61CF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000237D61D10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6169725478616DLL && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized PECDPParameters.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PECDPParameters.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PECDPParameters.CodingKeys and conformance PECDPParameters.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v22 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  v10 = v9;
  v21 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  v12 = v11;
  v20 = 2;
  v13 = KeyedDecodingContainer.decode(_:forKey:)();
  v19 = 3;
  v14 = KeyedDecodingContainer.decode(_:forKey:)();
  v18 = 4;
  v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  a2[4] = v15;
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPECParameters.CodingKeys, &unk_2509A69E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPECParameters.CodingKeys, &unk_2509A69E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPECParameters.CodingKeys, &unk_2509A69E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPECParameters.CodingKeys, &unk_2509A69E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters;
  if (!lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for PECDPParameters, &type metadata for PECDPParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters;
  if (!lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for PECDPParameters, &type metadata for PECDPParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PECDPParameters and conformance PECDPParameters);
  }
  return result;
}

uint64_t specialized StaticPECParameters.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD00000000000001DLL && a2 == 0x8000000237D61D30)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized StaticPECParameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StaticPECParameters.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StaticPECParameters.CodingKeys and conformance StaticPECParameters.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  lazy protocol witness table accessor for type PECDPParameters and conformance PECDPParameters();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v16;
  v14 = v15;
  v9 = v17;
  v10 = v18;
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v12 = v13;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 32) = v9;
  *(_BYTE *)(a2 + 40) = v10;
  return result;
}

unint64_t specialized UseCaseGroup.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UseCaseGroup.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t type metadata accessor for UseCaseGroup()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UseCaseGroup;
  if (!type metadata singleton initialization cache for UseCaseGroup)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized static UseCaseGroup.validate(useCases:networkConfig:keyExpirationMinutes:keyRotationBeforeExpirationMinutes:securityLevel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t result;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v8 = type metadata accessor for NetworkManagerType(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 < 0 || a4 < 0 || a3 < a4)
  {
    if (one-time initialization token for framework != -1)
LABEL_46:
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.framework);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      *(_DWORD *)v25 = 134349312;
      v50 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2050;
      v50 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237BC8000, v23, v24, "Invalid keyExpirationMinutes '%{public}ld' or 'keyExpirationMinutes %{public}ld'", (uint8_t *)v25, 0x16u);
      MEMORY[0x23B822DA8](v25, -1, -1);
    }

    goto LABEL_13;
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 2, 2, v11);
  v13 = specialized static NetworkManagerType.== infix(_:_:)(a2, (uint64_t)v10);
  outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for NetworkManagerType);
  if ((v13 & 1) == 0 && (unint64_t)a3 > 0xA8C0)
  {
    if (one-time initialization token for framework != -1)
      goto LABEL_48;
    goto LABEL_7;
  }
  v12(v10, 2, 2, v11);
  a3 = specialized static NetworkManagerType.== infix(_:_:)(a2, (uint64_t)v10);
  result = outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for NetworkManagerType);
  if ((a3 & 1) != 0)
  {
    v27 = 0;
    v28 = a1 + 64;
    v29 = 1 << *(_BYTE *)(a1 + 32);
    v30 = -1;
    if (v29 < 64)
      v30 = ~(-1 << v29);
    v31 = v30 & *(_QWORD *)(a1 + 64);
    v32 = (unint64_t)(v29 + 63) >> 6;
    while (1)
    {
      if (v31)
      {
        v33 = __clz(__rbit64(v31));
        v31 &= v31 - 1;
        v34 = v33 | (v27 << 6);
      }
      else
      {
        v35 = v27 + 1;
        if (__OFADD__(v27, 1))
        {
          __break(1u);
          goto LABEL_46;
        }
        if (v35 >= v32)
          return result;
        v36 = *(_QWORD *)(v28 + 8 * v35);
        ++v27;
        if (!v36)
        {
          v27 = v35 + 1;
          if (v35 + 1 >= v32)
            return result;
          v36 = *(_QWORD *)(v28 + 8 * v27);
          if (!v36)
          {
            v27 = v35 + 2;
            if (v35 + 2 >= v32)
              return result;
            v36 = *(_QWORD *)(v28 + 8 * v27);
            if (!v36)
            {
              v37 = v35 + 3;
              if (v37 >= v32)
                return result;
              v36 = *(_QWORD *)(v28 + 8 * v37);
              if (!v36)
              {
                while (1)
                {
                  v27 = v37 + 1;
                  if (__OFADD__(v37, 1))
                    break;
                  if (v27 >= v32)
                    return result;
                  v36 = *(_QWORD *)(v28 + 8 * v27);
                  ++v37;
                  if (v36)
                    goto LABEL_34;
                }
                __break(1u);
LABEL_48:
                swift_once();
LABEL_7:
                v14 = type metadata accessor for Logger();
                __swift_project_value_buffer(v14, (uint64_t)static Logger.framework);
                swift_bridgeObjectRetain_n();
                v15 = Logger.logObject.getter();
                v16 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v15, v16))
                {
                  v17 = swift_slowAlloc();
                  v18 = swift_slowAlloc();
                  v50 = v18;
                  *(_DWORD *)v17 = 134349570;
                  v49 = a3;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v17 + 12) = 2082;
                  swift_bridgeObjectRetain();
                  v19 = Dictionary.description.getter();
                  v21 = v20;
                  swift_bridgeObjectRelease();
                  v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v50);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v17 + 22) = 2050;
                  v49 = 43200;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  _os_log_impl(&dword_237BC8000, v15, v16, "Invalid keyExpirationMinutes '%{public}ld' for self-managed networking usecases\n'%{public}s'. Must be <= %{public}ld", (uint8_t *)v17, 0x20u);
                  swift_arrayDestroy();
                  MEMORY[0x23B822DA8](v18, -1, -1);
                  MEMORY[0x23B822DA8](v17, -1, -1);

                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }
LABEL_13:
                type metadata accessor for CipherMLError();
                lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
                swift_allocError();
                swift_storeEnumTagMultiPayload();
                return swift_willThrow();
              }
              v27 = v37;
            }
          }
        }
LABEL_34:
        v31 = (v36 - 1) & v36;
        v34 = __clz(__rbit64(v36)) + (v27 << 6);
      }
      v38 = *(_QWORD *)(a1 + 56) + 48 * v34;
      if (*(char *)(v38 + 40) < 0 && ((*(_BYTE *)(v38 + 16) & 1) == 0 || (*(_QWORD *)(v38 + 32) & 1) == 0))
      {
        v39 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v34);
        v41 = *v39;
        v40 = v39[1];
        v42 = one-time initialization token for framework;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v42 != -1)
          swift_once();
        v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Logger.framework);
        swift_bridgeObjectRetain();
        v44 = Logger.logObject.getter();
        v45 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = (uint8_t *)swift_slowAlloc();
          v47 = swift_slowAlloc();
          v50 = v47;
          *(_DWORD *)v46 = 136446210;
          swift_bridgeObjectRetain();
          v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v40, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_237BC8000, v44, v45, "Invalid use case '%{public}s'\nfor self-managed networking use case group.\nMust have no cache.", v46, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B822DA8](v47, -1, -1);
          MEMORY[0x23B822DA8](v46, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        type metadata accessor for CipherMLError();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t outlined init with take of NetworkConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NetworkConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCaseGroup.CodingKeys, &type metadata for UseCaseGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCaseGroup.CodingKeys, &type metadata for UseCaseGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCaseGroup.CodingKeys, &type metadata for UseCaseGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCaseGroup.CodingKeys, &type metadata for UseCaseGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCaseGroup.CodingKeys and conformance UseCaseGroup.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UseCase and conformance UseCase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCase and conformance UseCase;
  if (!lazy protocol witness table cache variable for type UseCase and conformance UseCase)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCase, &type metadata for UseCase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase and conformance UseCase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCase and conformance UseCase;
  if (!lazy protocol witness table cache variable for type UseCase and conformance UseCase)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCase, &type metadata for UseCase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase and conformance UseCase);
  }
  return result;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for UseCase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 40) & 0x7E | (*(unsigned __int8 *)(a1 + 40) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for UseCase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t getEnumTag for UseCase(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 7;
}

uint64_t destructiveProjectEnumData for UseCase(uint64_t result)
{
  *(_BYTE *)(result + 40) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for UseCase(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = *(_BYTE *)(result + 40) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for UseCase()
{
  return &type metadata for UseCase;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for StaticPIRParameters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StaticPIRParameters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for StaticPIRParameters()
{
  return &type metadata for StaticPIRParameters;
}

uint64_t storeEnumTagSinglePayload for StaticPIRParameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_237C40C30 + 4 * byte_237D56D76[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_237C40C64 + 4 * byte_237D56D71[v4]))();
}

uint64_t sub_237C40C64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C40C6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C40C74);
  return result;
}

uint64_t sub_237C40C80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C40C88);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_237C40C8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C40C94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StaticPIRParameters.CodingKeys()
{
  return &type metadata for StaticPIRParameters.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for PECDPParameters(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PECDPParameters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PECDPParameters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PECDPParameters()
{
  return &type metadata for PECDPParameters;
}

uint64_t getEnumTagSinglePayload for StaticPECParameters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StaticPECParameters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for StaticPECParameters()
{
  return &type metadata for StaticPECParameters;
}

_QWORD *initializeBufferWithCopyOfBuffer for UseCaseGroup(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for HE.SecurityLevel();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *(_QWORD *)((char *)a1 + v9) = *(_QWORD *)((char *)a2 + v9);
    v10 = a3[9];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    swift_bridgeObjectRetain();
    v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v14 = *((_QWORD *)v13 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 2, v13))
    {
      v15 = type metadata accessor for NetworkManagerType(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for URL();
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v19(v11, v12, v17);
      v20 = v13[12];
      v21 = &v11[v20];
      v22 = &v12[v20];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(&v12[v20], 1, v17))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v19(v21, v22, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
      }
      v24 = v13[16];
      v25 = &v11[v24];
      v26 = &v12[v24];
      v27 = *((_QWORD *)v26 + 1);
      if (v27 >> 60 == 15)
      {
        *(_OWORD *)v25 = *(_OWORD *)v26;
      }
      else
      {
        v28 = *(_QWORD *)v26;
        outlined copy of Data._Representation(*(_QWORD *)v26, *((_QWORD *)v26 + 1));
        *(_QWORD *)v25 = v28;
        *((_QWORD *)v25 + 1) = v27;
      }
      v11[v13[20]] = v12[v13[20]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 2, v13);
    }
    v29 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
    v30 = &v11[v29];
    v31 = &v12[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UseCaseGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;

  v4 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 36);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 2, v6))
  {
    v7 = type metadata accessor for URL();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v9(v5, v7);
    v10 = v5 + *(int *)(v6 + 48);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
      v9(v10, v7);
    v11 = (uint64_t *)(v5 + *(int *)(v6 + 64));
    v12 = v11[1];
    if (v12 >> 60 != 15)
      outlined consume of Data._Representation(*v11, v12);
  }
  type metadata accessor for NetworkConfig(0);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UseCaseGroup(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[9];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  swift_bridgeObjectRetain();
  v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v13 = *((_QWORD *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 2, v12))
  {
    v14 = type metadata accessor for NetworkManagerType(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for URL();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v17(v10, v11, v15);
    v18 = v12[12];
    v19 = &v10[v18];
    v20 = &v11[v18];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&v11[v18], 1, v15))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v17(v19, v20, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
    }
    v22 = v12[16];
    v23 = &v10[v22];
    v24 = &v11[v22];
    v25 = *((_QWORD *)v24 + 1);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v26 = *(_QWORD *)v24;
      outlined copy of Data._Representation(*(_QWORD *)v24, *((_QWORD *)v24 + 1));
      *(_QWORD *)v23 = v26;
      *((_QWORD *)v23 + 1) = v25;
    }
    v10[v12[20]] = v11[v12[20]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 2, v12);
  }
  v27 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  v28 = &v10[v27];
  v29 = &v11[v27];
  v30 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UseCaseGroup(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(void);
  int v29;
  int v30;
  size_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v50;

  v6 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[9];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 2, v10);
  v14 = v12(v9, 2, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool)((uint64_t)v8);
      goto LABEL_7;
    }
    v23 = type metadata accessor for URL();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(void (**)(char *, char *, uint64_t))(v24 + 24);
    v25(v8, v9, v23);
    v26 = v10[12];
    v27 = &v9[v26];
    v28 = *(uint64_t (**)(void))(v24 + 48);
    v50 = &v8[v26];
    v29 = v28();
    v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28)(v27, 1, v23);
    if (v29)
    {
      if (v30)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v32 = v50;
LABEL_18:
        memcpy(v32, v27, v31);
        goto LABEL_21;
      }
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v50, v27, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v50, 0, 1, v23);
    }
    else
    {
      if (v30)
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v50, v23);
        v31 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v32 = v50;
        goto LABEL_18;
      }
      v25(v50, v27, v23);
    }
LABEL_21:
    v38 = v10[16];
    v39 = (uint64_t *)&v8[v38];
    v40 = (uint64_t *)&v9[v38];
    v41 = *(_QWORD *)&v9[v38 + 8];
    if (*(_QWORD *)&v8[v38 + 8] >> 60 == 15)
    {
      if (v41 >> 60 != 15)
      {
        v42 = *v40;
        outlined copy of Data._Representation(v42, v41);
        *v39 = v42;
        v39[1] = v41;
LABEL_28:
        v8[v10[20]] = v9[v10[20]];
        goto LABEL_29;
      }
    }
    else
    {
      if (v41 >> 60 != 15)
      {
        v43 = *v40;
        outlined copy of Data._Representation(v43, v41);
        v44 = *v39;
        v45 = v39[1];
        *v39 = v43;
        v39[1] = v41;
        outlined consume of Data._Representation(v44, v45);
        goto LABEL_28;
      }
      outlined destroy of Data((uint64_t)v39);
    }
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_28;
  }
  if (v14)
  {
LABEL_7:
    v22 = type metadata accessor for NetworkManagerType(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_29;
  }
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v17(v8, v9, v15);
  v18 = v10[12];
  v19 = &v8[v18];
  v20 = &v9[v18];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&v9[v18], 1, v15))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17(v19, v20, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
  }
  v33 = v10[16];
  v34 = &v8[v33];
  v35 = &v9[v33];
  v36 = *((_QWORD *)v35 + 1);
  if (v36 >> 60 == 15)
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  else
  {
    v37 = *(_QWORD *)v35;
    outlined copy of Data._Representation(*(_QWORD *)v35, *((_QWORD *)v35 + 1));
    *(_QWORD *)v34 = v37;
    *((_QWORD *)v34 + 1) = v36;
  }
  v8[v10[20]] = v9[v10[20]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 2, v10);
LABEL_29:
  v46 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  v47 = &v8[v46];
  v48 = &v9[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for UseCaseGroup(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[9];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v13 = *((_QWORD *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 2, v12))
  {
    v14 = type metadata accessor for NetworkManagerType(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for URL();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v17(v10, v11, v15);
    v18 = v12[12];
    v19 = &v10[v18];
    v20 = &v11[v18];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&v11[v18], 1, v15))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v17(v19, v20, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
    }
    *(_OWORD *)&v10[v12[16]] = *(_OWORD *)&v11[v12[16]];
    v10[v12[20]] = v11[v12[20]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 2, v12);
  }
  v22 = type metadata accessor for NetworkConfig(0);
  *(_OWORD *)&v10[*(int *)(v22 + 20)] = *(_OWORD *)&v11[*(int *)(v22 + 20)];
  return a1;
}

uint64_t assignWithTake for UseCaseGroup(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(void);
  int v31;
  int v32;
  size_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;

  v6 = type metadata accessor for HE.SecurityLevel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease();
  v9 = a3[9];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 2, v12);
  v16 = v14(v11, 2, v12);
  if (!v15)
  {
    if (v16)
    {
      outlined destroy of (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool)((uint64_t)v10);
      goto LABEL_7;
    }
    v25 = type metadata accessor for URL();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(void (**)(char *, char *, uint64_t))(v26 + 40);
    v27(v10, v11, v25);
    v28 = v12[12];
    v29 = &v11[v28];
    v30 = *(uint64_t (**)(void))(v26 + 48);
    v47 = &v10[v28];
    v31 = v30();
    v32 = ((uint64_t (*)(char *, uint64_t, uint64_t))v30)(v29, 1, v25);
    if (v31)
    {
      if (v32)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v34 = v47;
LABEL_15:
        memcpy(v34, v29, v33);
        goto LABEL_18;
      }
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v47, v29, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v47, 0, 1, v25);
    }
    else
    {
      if (v32)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v47, v25);
        v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                    - 8)
                        + 64);
        v34 = v47;
        goto LABEL_15;
      }
      v27(v47, v29, v25);
    }
LABEL_18:
    v35 = v12[16];
    v36 = (uint64_t *)&v10[v35];
    v37 = (uint64_t *)&v11[v35];
    v38 = *(_QWORD *)&v10[v35 + 8];
    if (v38 >> 60 != 15)
    {
      v39 = v37[1];
      if (v39 >> 60 != 15)
      {
        v40 = *v36;
        *v36 = *v37;
        v36[1] = v39;
        outlined consume of Data._Representation(v40, v38);
        goto LABEL_23;
      }
      outlined destroy of Data((uint64_t)v36);
    }
    *(_OWORD *)v36 = *(_OWORD *)v37;
LABEL_23:
    v10[v12[20]] = v11[v12[20]];
    goto LABEL_24;
  }
  if (v16)
  {
LABEL_7:
    v24 = type metadata accessor for NetworkManagerType(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_24;
  }
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v19(v10, v11, v17);
  v20 = v12[12];
  v21 = &v10[v20];
  v22 = &v11[v20];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(&v11[v20], 1, v17))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v19(v21, v22, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
  }
  *(_OWORD *)&v10[v12[16]] = *(_OWORD *)&v11[v12[16]];
  v10[v12[20]] = v11[v12[20]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 2, v12);
LABEL_24:
  v41 = *(int *)(type metadata accessor for NetworkConfig(0) + 20);
  v42 = &v10[v41];
  v43 = (uint64_t *)&v11[v41];
  v45 = *v43;
  v44 = v43[1];
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UseCaseGroup()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C41C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for HE.SecurityLevel();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for NetworkConfig(0);
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for UseCaseGroup()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C41CF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for HE.SecurityLevel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for NetworkConfig(0);
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for UseCaseGroup()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for HE.SecurityLevel();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NetworkConfig(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UseCaseGroup.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UseCaseGroup.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_237C41F1C + 4 * byte_237D56D80[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_237C41F50 + 4 * byte_237D56D7B[v4]))();
}

uint64_t sub_237C41F50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C41F58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C41F60);
  return result;
}

uint64_t sub_237C41F6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C41F74);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_237C41F78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C41F80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UseCaseGroup.CodingKeys()
{
  return &type metadata for UseCaseGroup.CodingKeys;
}

uint64_t getEnumTagSinglePayload for StaticPECParameters.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for StaticPECParameters.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237C42030 + 4 * byte_237D56D85[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237C42050 + 4 * byte_237D56D8A[v4]))();
}

_BYTE *sub_237C42030(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237C42050(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237C42058(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237C42060(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237C42068(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237C42070(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for StaticPECParameters.CodingKeys()
{
  return 0;
}

void *type metadata accessor for StaticPECParameters.CodingKeys()
{
  return &unk_2509A69E0;
}

uint64_t getEnumTagSinglePayload for PECDPParameters.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PECDPParameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_237C42170 + 4 * byte_237D56D94[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_237C421A4 + 4 * byte_237D56D8F[v4]))();
}

uint64_t sub_237C421A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C421AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C421B4);
  return result;
}

uint64_t sub_237C421C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C421C8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_237C421CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C421D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PECDPParameters.CodingKeys()
{
  return &unk_2509A6220;
}

uint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
    v8 = a2;
    result = MEMORY[0x23B822CDC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEE0073726574656DLL;
  v3 = 0x6172615065776C52;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x656D656863536548;
    else
      v5 = 0x4765736143657355;
    if (v4 == 1)
      v6 = 0xE900000000000073;
    else
      v6 = 0xED00007370756F72;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6172615065776C52;
  v6 = 0xEE0073726574656DLL;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x656D656863536548;
    else
      v3 = 0x4765736143657355;
    if (v7 == 1)
      v2 = 0xE900000000000073;
    else
      v2 = 0xED00007370756F72;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AllowListFormat.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AllowListFormat.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AllowListFormat.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AllowListFormat.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AllowListFormat.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AllowListFormat.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AllowListFormat.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEE0073726574656DLL;
  v4 = 0xE900000000000073;
  v5 = 0x656D656863536548;
  if (v2 != 1)
  {
    v5 = 0x4765736143657355;
    v4 = 0xED00007370756F72;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6172615065776C52;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AllowListFormat.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656D656863536548;
  if (*v0 != 1)
    v1 = 0x4765736143657355;
  if (*v0)
    return v1;
  else
    return 0x6172615065776C52;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance AllowListFormat.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AllowListFormat.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AllowListFormat.CodingKeys()
{
  lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AllowListFormat.CodingKeys()
{
  lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AllowListFormat.heSchemes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowListFormat.useCaseGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AllowListFormat.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v13 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AllowListFormat.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = a2;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HE.SecurityLevel : [HE.RlweParams]]);
  lazy protocol witness table accessor for type [HE.SecurityLevel : [HE.RlweParams]] and conformance <> [A : B]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    v15 = v13;
    v14 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HE.Scheme]);
    lazy protocol witness table accessor for type [HE.Scheme] and conformance <A> [A](&lazy protocol witness table cache variable for type [HE.Scheme] and conformance <A> [A], &lazy protocol witness table cache variable for type HE.Scheme and conformance HE.Scheme, MEMORY[0x24BE2A1E8], MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v15 = a4;
    v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UseCaseGroup]);
    lazy protocol witness table accessor for type [String : UseCaseGroup] and conformance <> [A : B]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AllowListFormat.CodingKeys, &unk_2509A60E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AllowListFormat.CodingKeys, &unk_2509A60E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AllowListFormat.CodingKeys, &unk_2509A60E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AllowListFormat.CodingKeys, &unk_2509A60E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys);
  }
  return result;
}

uint64_t AllowListFormat.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = specialized AllowListFormat.init(from:)(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AllowListFormat@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = specialized AllowListFormat.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AllowListFormat(_QWORD *a1)
{
  uint64_t *v1;

  return AllowListFormat.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t static AllowListParser.parseAllowList(allowListData:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = specialized static AllowListParser.parseAllowList(allowListData:)();
  if (v0)
    return v2;
  return result;
}

uint64_t static AllowListParser.encodeAllowList(allowListFormat:)()
{
  uint64_t v0;

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type AllowListFormat and conformance AllowListFormat();
  v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

BOOL static UseCase.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void UseCase.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t UseCase.CodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int UseCase.CodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t UseCase.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t UseCase.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 6514032;
  else
    return 7498096;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance UseCase.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 6514032;
  else
    return 7498096;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance UseCase.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized UseCase.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UseCase.CodingKeys()
{
  lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UseCase.CodingKeys()
{
  lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t UseCase.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[48];

  result = specialized UseCase.init(from:)(a1, (uint64_t)v5);
  if (!v2)
    return outlined init with take of UseCase((uint64_t)v5, a2);
  return result;
}

uint64_t UseCase.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UseCase.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of UseCase(v2, (uint64_t)&v15);
  if (v18 < 0)
  {
    v18 &= ~0x80u;
    v11 = v15;
    LOBYTE(v12) = v16;
    *((_QWORD *)&v12 + 1) = *((_QWORD *)&v16 + 1);
    LOBYTE(v13) = v17;
    v10 = 0;
    lazy protocol witness table accessor for type StaticPIRParameters and conformance StaticPIRParameters();
  }
  else
  {
    v11 = v15;
    v12 = v16;
    v13 = v17;
    v14 = v18 & 1;
    v10 = 1;
    lazy protocol witness table accessor for type StaticPECParameters and conformance StaticPECParameters();
  }
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UseCase@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[48];

  result = specialized UseCase.init(from:)(a1, (uint64_t)v5);
  if (!v2)
    return outlined init with take of UseCase((uint64_t)v5, a2);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UseCase(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  outlined init with take of UseCase(v1, (uint64_t)&v4);
  return UseCase.encode(to:)(a1);
}

uint64_t specialized static AllowListParser.parseAllowList(allowListData:)()
{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type AllowListFormat and conformance AllowListFormat();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v0)
  {
    swift_release();
    if (one-time initialization token for framework != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.framework);
    v2 = v0;
    v3 = v0;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v6 = 138543362;
      v8 = v0;
      v11 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v7 = v11;

      _os_log_impl(&dword_237BC8000, v4, v5, "Unable to parse list of use-cases due to '%{public}@'", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B822DA8](v7, -1, -1);
      MEMORY[0x23B822DA8](v6, -1, -1);
    }
    else
    {

    }
    return swift_willThrow();
  }
  else
  {
    swift_release();
    return v10;
  }
}

unint64_t specialized AllowListFormat.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AllowListFormat.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t specialized AllowListFormat.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AllowListFormat.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type AllowListFormat.CodingKeys and conformance AllowListFormat.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HE.SecurityLevel : [HE.RlweParams]]);
    v10 = 0;
    lazy protocol witness table accessor for type [HE.SecurityLevel : [HE.RlweParams]] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HE.Scheme]);
    v10 = 1;
    lazy protocol witness table accessor for type [HE.Scheme] and conformance <A> [A](&lazy protocol witness table cache variable for type [HE.Scheme] and conformance <A> [A], &lazy protocol witness table cache variable for type HE.Scheme and conformance HE.Scheme, MEMORY[0x24BE2A200], MEMORY[0x24BEE12D0]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UseCaseGroup]);
    v10 = 2;
    lazy protocol witness table accessor for type [String : UseCaseGroup] and conformance <> [A : B]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t lazy protocol witness table accessor for type AllowListFormat and conformance AllowListFormat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat;
  if (!lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AllowListFormat, &type metadata for AllowListFormat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat;
  if (!lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for AllowListFormat, &type metadata for AllowListFormat);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowListFormat and conformance AllowListFormat);
  }
  return result;
}

uint64_t specialized UseCase.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7498096 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6514032 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized UseCase.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UseCase.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v9 = KeyedDecodingContainer.allKeys.getter();
  v10 = v9;
  if (*(_QWORD *)(v9 + 16) != 1)
  {
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *(_QWORD *)&v20 = v10;
    *v18 = &type metadata for UseCase;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  if ((*(_BYTE *)(v9 + 32) & 1) != 0)
  {
    v26 = 1;
    lazy protocol witness table accessor for type StaticPECParameters and conformance StaticPECParameters();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v21;
    v12 = v22;
    v13 = v23;
    v14 = v24;
    v15 = v25;
  }
  else
  {
    v26 = 0;
    lazy protocol witness table accessor for type StaticPIRParameters and conformance StaticPIRParameters();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v21;
    v12 = v22;
    v13 = v23;
    v15 = 0x80;
    v14 = v24;
  }
  v20 = v11;
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  *(_OWORD *)a2 = v20;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  *(_BYTE *)(a2 + 40) = v15;
  return result;
}

uint64_t outlined init with take of UseCase(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UseCase.CodingKeys and conformance UseCase.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCase.CodingKeys, &type metadata for UseCase.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCase.CodingKeys, &type metadata for UseCase.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCase.CodingKeys, &type metadata for UseCase.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for UseCase.CodingKeys, &type metadata for UseCase.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseCase.CodingKeys and conformance UseCase.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticPECParameters and conformance StaticPECParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters;
  if (!lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPECParameters, &type metadata for StaticPECParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters;
  if (!lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPECParameters, &type metadata for StaticPECParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPECParameters and conformance StaticPECParameters);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticPIRParameters and conformance StaticPIRParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPIRParameters, &type metadata for StaticPIRParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters;
  if (!lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for StaticPIRParameters, &type metadata for StaticPIRParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticPIRParameters and conformance StaticPIRParameters);
  }
  return result;
}

ValueMetadata *type metadata accessor for AllowListFormat()
{
  return &type metadata for AllowListFormat;
}

ValueMetadata *type metadata accessor for AllowListParser()
{
  return &type metadata for AllowListParser;
}

uint64_t storeEnumTagSinglePayload for UseCase.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237C43C5C + 4 * byte_237D5748D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237C43C90 + 4 * byte_237D57488[v4]))();
}

uint64_t sub_237C43C90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C43C98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C43CA0);
  return result;
}

uint64_t sub_237C43CAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C43CB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237C43CB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C43CC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UseCase.CodingKeys()
{
  return &type metadata for UseCase.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AllowListFormat.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_237C43D28 + 4 * byte_237D57497[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_237C43D5C + 4 * byte_237D57492[v4]))();
}

uint64_t sub_237C43D5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C43D64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C43D6CLL);
  return result;
}

uint64_t sub_237C43D78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C43D80);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_237C43D84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C43D8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AllowListFormat.CodingKeys()
{
  return &unk_2509A60E0;
}

uint64_t lazy protocol witness table accessor for type [HE.RlweParams] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HE.RlweParams]);
    v10 = lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BE2A088], a3);
    result = MEMORY[0x23B822CDC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [HE.Scheme] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HE.Scheme]);
    v10 = lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BE2A1D8], a3);
    result = MEMORY[0x23B822CDC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t one-time initialization function for daemon(uint64_t a1)
{
  return one-time initialization function for daemon(a1, static Logger.daemon);
}

{
  return one-time initialization function for daemon(a1, static OSSignposter.daemon, &one-time initialization token for daemon, (uint64_t)static Logger.daemon);
}

uint64_t static Logger.daemon.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for daemon, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logger.daemon, a1);
}

uint64_t one-time initialization function for framework(uint64_t a1)
{
  return one-time initialization function for daemon(a1, static Logger.framework);
}

{
  return one-time initialization function for daemon(a1, static OSSignposter.framework, &one-time initialization token for framework, (uint64_t)static Logger.framework);
}

uint64_t static Logger.framework.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for framework, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logger.framework, a1);
}

uint64_t one-time initialization function for networking(uint64_t a1)
{
  return one-time initialization function for daemon(a1, static Logger.networking);
}

uint64_t one-time initialization function for daemon(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t static Logger.networking.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for networking, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)static Logger.networking, a1);
}

uint64_t static OSSignposter.daemon.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for daemon, (uint64_t (*)(_QWORD))MEMORY[0x24BEE77F0], (uint64_t)static OSSignposter.daemon, a1);
}

uint64_t one-time initialization function for daemon(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  if (*a3 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  return OSSignposter.init(logger:)();
}

uint64_t static OSSignposter.framework.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.daemon.getter(&one-time initialization token for framework, (uint64_t (*)(_QWORD))MEMORY[0x24BEE77F0], (uint64_t)static OSSignposter.framework, a1);
}

uint64_t static Logger.daemon.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = __swift_project_value_buffer(v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t SecretKey.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SecretKey.key.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SecretKey() + 20);
  v4 = type metadata accessor for HE.SerializedSecretKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SecretKey()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SecretKey;
  if (!type metadata singleton initialization cache for SecretKey)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SecretKey.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  uint64_t result;
  uint64_t v9;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  v7 = v6;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v7 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 < 1.84467441e19)
  {
    *a1 = (unint64_t)v7;
    type metadata accessor for SecretKey();
    return HE.SerializedSecretKey.init()();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t SecretKey.init(timestamp:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for SecretKey() + 20);
  v5 = type metadata accessor for HE.SerializedSecretKey();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

BOOL static SecretKey.Keys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SecretKey.Keys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

CipherML::SecretKey::Keys_optional __swiftcall SecretKey.Keys.init(intValue:)(Swift::Int intValue)
{
  return (CipherML::SecretKey::Keys_optional)2;
}

Swift::Int SecretKey.Keys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t SecretKey.Keys.intValue.getter()
{
  return 0;
}

uint64_t SecretKey.Keys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 7955819;
  else
    return 0x6D617473656D6974;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SecretKey.Keys()
{
  _BYTE *v0;

  if (*v0)
    return 7955819;
  else
    return 0x6D617473656D6974;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecretKey.Keys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SecretKey.Keys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SecretKey.Keys()
{
  lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SecretKey.Keys()
{
  lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys();
  return CodingKey.debugDescription.getter();
}

uint64_t SecretKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v27 = a2;
  v4 = type metadata accessor for HE.SerializedSecretKey();
  v5 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  v25 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v26 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SecretKey.Keys>);
  v7 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SecretKey();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v23 = v10;
    v13 = v7;
    v14 = v26;
    v15 = v27;
    LOBYTE(v29) = 0;
    v16 = v28;
    *v12 = KeyedDecodingContainer.decode(_:forKey:)();
    v30 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v22 = v12;
    v18 = v16;
    v19 = v14;
    HE.SerializedSecretKey.init(seed:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v18);
    v20 = (uint64_t)v22;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))((char *)v22 + *(int *)(v23 + 20), v19, v24);
    outlined init with take of SecretKey(v20, v15);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t SecretKey.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  unint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SecretKey.Keys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for SecretKey();
    v7 = HE.SerializedSecretKey.seed.getter();
    v9 = v8;
    v12 = v7;
    v13 = v8;
    v11[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined consume of Data._Representation(v7, v9);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SecretKey@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SecretKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SecretKey(_QWORD *a1)
{
  return SecretKey.encode(to:)(a1);
}

uint64_t specialized SecretKey.Keys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t lazy protocol witness table accessor for type SecretKey.Keys and conformance SecretKey.Keys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys;
  if (!lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for SecretKey.Keys, &type metadata for SecretKey.Keys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys;
  if (!lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for SecretKey.Keys, &type metadata for SecretKey.Keys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys;
  if (!lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for SecretKey.Keys, &type metadata for SecretKey.Keys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys;
  if (!lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys)
  {
    result = MEMORY[0x23B822CDC](&protocol conformance descriptor for SecretKey.Keys, &type metadata for SecretKey.Keys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecretKey.Keys and conformance SecretKey.Keys);
  }
  return result;
}

uint64_t outlined init with take of SecretKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SecretKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecretKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for HE.SerializedSecretKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for SecretKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for HE.SerializedSecretKey();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for SecretKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for SecretKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for SecretKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for SecretKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for HE.SerializedSecretKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecretKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C44FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for HE.SerializedSecretKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for SecretKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237C45048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for HE.SerializedSecretKey();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for SecretKey()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HE.SerializedSecretKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecretKey.Keys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237C45150 + 4 * byte_237D577C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237C45184 + 4 * byte_237D577C0[v4]))();
}

uint64_t sub_237C45184(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C4518C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237C45194);
  return result;
}

uint64_t sub_237C451A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237C451A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237C451AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237C451B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecretKey.Keys()
{
  return &type metadata for SecretKey.Keys;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.useCase.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return outlined consume of Data?(v5, v6);
}

uint64_t (*RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t key path setter for RequestsManager.CMLUseCaseStatusBuilder.lastUsed : RequestsManager.CMLUseCaseStatusBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 152))(v6);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter@<X0>(uint64_t a1@<X8>)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter(&OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed, a1);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(uint64_t a1)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(a1, &OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed);
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t key path setter for RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime : RequestsManager.CMLUseCaseStatusBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 176))(v6);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.getter@<X0>(uint64_t a1@<X8>)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter(&OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, a1);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *a1;
  swift_beginAccess();
  return outlined init with copy of AMDPbHEConfig.OneOf_Config?(v4, a2, &demangling cache variable for type metadata for Date?);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.setter(uint64_t a1)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(a1, &OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime);
}

uint64_t (*RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify;
}

uint64_t key path setter for RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime : RequestsManager.CMLUseCaseStatusBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 200))(v6);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.getter@<X0>(uint64_t a1@<X8>)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter(&OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, a1);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.setter(uint64_t a1)
{
  return RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(a1, &OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *a2;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v4);
  return swift_endAccess();
}

uint64_t (*RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify())()
{
  swift_beginAccess();
  return RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.__allocating_init(useCase:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 32) = xmmword_237D57950;
  v5 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, 1, 1, v6);
  v7(v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, 1, 1, v6);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  return v4;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.init(useCase:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_OWORD *)(v2 + 32) = xmmword_237D57950;
  v5 = v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, 1, 1, v6);
  v7(v2 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, 1, 1, v6);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

id RequestsManager.CMLUseCaseStatusBuilder.build(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v23 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  v12 = v1[2];
  v13 = v1[3];
  v14 = *(uint64_t (**)(uint64_t))(*v1 + 120);
  v15 = swift_bridgeObjectRetain();
  v16 = v14(v15);
  v18 = v17;
  v19 = (*(uint64_t (**)(void))(*v1 + 144))();
  v20 = (*(uint64_t (**)(uint64_t))(*v1 + 168))(v19);
  (*(void (**)(uint64_t))(*v1 + 192))(v20);
  v21 = objc_allocWithZone((Class)CMLUseCaseStatus);
  return @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v12, v13, v16, v18, (uint64_t)v11, (uint64_t)v9, (uint64_t)v6, a1);
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.withDynamicConfig(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  void (*v5)(uint64_t, unint64_t);

  v5 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 128);
  outlined copy of Data?(a1, a2);
  v5(a1, a2);
  return swift_retain();
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.withLastUsed(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Date?);
  (*(void (**)(char *))(*(_QWORD *)v1 + 152))(v5);
  return swift_retain();
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.withKeyGenerationTime(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Date?);
  (*(void (**)(char *))(*(_QWORD *)v1 + 176))(v5);
  return swift_retain();
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of Data?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed, &demangling cache variable for type metadata for Date?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, &demangling cache variable for type metadata for Date?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, &demangling cache variable for type metadata for Date?);
  return v0;
}

uint64_t RequestsManager.CMLUseCaseStatusBuilder.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of Data?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed, &demangling cache variable for type metadata for Date?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, &demangling cache variable for type metadata for Date?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v0 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, &demangling cache variable for type metadata for Date?);
  return swift_deallocClassInstance();
}

uint64_t RequestsManager.queryStatus(for:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.queryStatus(for:options:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;

  v1 = *(_QWORD *)(v0 + 24);
  if ((v1 & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(void **)(v0 + 16);
    v7 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = v4;
    v8[5] = v6;
    v8[6] = v1;
    swift_retain();
    v9 = v6;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in RequestsManager.queryStatus(for:options:), (uint64_t)v8);
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v2;
    *v2 = v0;
    v2[1] = RequestsManager.queryStatus(for:options:);
    return RequestsManager.handleOptions(clientConfig:options:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_useCase);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  *(_QWORD *)(v0 + 56) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = RequestsManager.queryStatus(for:options:);
  return RequestsManager.fetchStatus(useCase:)(v2, v4);
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.queryStatus(for:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 72) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t closure #1 in RequestsManager.queryStatus(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v9;
  *v9 = v6;
  v9[1] = closure #1 in RequestsManager.queryStatus(for:options:);
  return RequestsManager.handleOptions(clientConfig:options:)(a5, a6);
}

uint64_t closure #1 in RequestsManager.queryStatus(for:options:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;

  if (one-time initialization token for daemon != -1)
    swift_once();
  v1 = *(void **)(v0 + 32);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.daemon);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 32);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138543362;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_237BC8000, v5, v6, "async queryStatus caught an error: %{public}@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v10, -1, -1);
    MEMORY[0x23B822DA8](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RequestsManager.handleOptions(clientConfig:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  type metadata accessor for NetworkConfig(0);
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v3[12] = swift_task_alloc();
  type metadata accessor for NetworkManagerType(0);
  v3[13] = swift_task_alloc();
  v4 = type metadata accessor for UserIdentifier();
  v3[14] = v4;
  v3[15] = *(_QWORD *)(v4 - 8);
  v3[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.handleOptions(clientConfig:options:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  _QWORD *v24;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  os_unfair_lock_s *v45;
  os_unfair_lock_s *v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_unfair_lock_s *v65;
  uint64_t v66;
  os_unfair_lock_s *v67;
  uint64_t v68;
  os_unfair_lock_s *v69;
  os_unfair_lock_s *v70;
  os_unfair_lock_s *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  os_unfair_lock_s *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t inited;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t (*v107)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t (*v108)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v109;
  _QWORD v110[2];

  v1 = *(_QWORD *)(v0 + 72);
  v2 = objc_msgSend(*(id *)(v0 + 64), sel_useCase);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  *(_QWORD *)(v0 + 152) = v3;
  *(_QWORD *)(v0 + 160) = v5;
  if ((v1 & 2) != 0)
  {
    if ((v1 & 4) != 0)
    {
      if (one-time initialization token for daemon != -1)
        swift_once();
      v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.daemon);
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_237BC8000, v27, v28, "Options contains both mark active and mark inactive", v29, 2u);
        MEMORY[0x23B822DA8](v29, -1, -1);
      }

    }
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
    return swift_task_switch();
  }
  v6 = *(_QWORD *)(v0 + 72);
  if ((v6 & 4) != 0)
  {
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
    return swift_task_switch();
  }
  if ((v6 & 0x10) != 0)
  {
    v7 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v8 = v7 + 4;
    v9 = v7 + 6;
    os_unfair_lock_lock(v7 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v8, v110);
    *(_QWORD *)(v0 + 184) = 0;
    os_unfair_lock_unlock(v9);
    v10 = *(_QWORD *)(v110[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(_QWORD *)(v10 + 16))
    {
      v12 = *(_QWORD *)(v0 + 152);
      v11 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
      if ((v14 & 1) != 0)
      {
        v15 = *(_QWORD *)(v0 + 144);
        v16 = *(_QWORD *)(v0 + 112);
        v17 = *(_QWORD *)(v0 + 120);
        v18 = *(_QWORD *)(v0 + 80);
        v19 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 16 * v13);
        v20 = *v19;
        v21 = v19[1];
        *(_QWORD *)(v0 + 192) = v21;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v22 = *(_QWORD *)(v18 + 32);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
        v107 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(**(int **)(v22 + 16)
                                                                                  + *(_QWORD *)(v22 + 16));
        v24 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 200) = v24;
        *v24 = v0;
        v24[1] = RequestsManager.handleOptions(clientConfig:options:);
        return v107(v20, v21, *(_QWORD *)(v0 + 144), ObjectType, v22);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 72) & 0x80) != 0)
  {
    v30 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v31 = v30 + 4;
    v32 = v30 + 6;
    os_unfair_lock_lock(v30 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v31, v110);
    *(_QWORD *)(v0 + 208) = 0;
    os_unfair_lock_unlock(v32);
    v33 = *(_QWORD *)(v110[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(_QWORD *)(v33 + 16))
    {
      v35 = *(_QWORD *)(v0 + 152);
      v34 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
      if ((v37 & 1) != 0)
      {
        v38 = *(_QWORD *)(v0 + 80);
        v39 = (uint64_t *)(*(_QWORD *)(v33 + 56) + 16 * v36);
        v40 = *v39;
        *(_QWORD *)(v0 + 216) = *v39;
        v41 = v39[1];
        *(_QWORD *)(v0 + 224) = v41;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 232) = *(_QWORD *)(v38 + 24);
        v42 = *(_QWORD *)(v38 + 32);
        *(_QWORD *)(v0 + 240) = v42;
        v43 = swift_getObjectType();
        *(_QWORD *)(v0 + 248) = v43;
        v108 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v42 + 8)
                                                                                  + *(_QWORD *)(v42 + 8));
        v44 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 256) = v44;
        *v44 = v0;
        v44[1] = RequestsManager.handleOptions(clientConfig:options:);
        return v108(*(_QWORD *)(v0 + 136), v40, v41, v43, v42);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 72) & 0x20) != 0)
  {
    v45 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v46 = v45 + 4;
    v47 = v45 + 6;
    os_unfair_lock_lock(v45 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v46, v110);
    os_unfair_lock_unlock(v47);
    v48 = *(_QWORD *)(v110[0] + 40);
    if (*(_QWORD *)(v48 + 16))
    {
      v50 = *(_QWORD *)(v0 + 152);
      v49 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v49);
      if ((v52 & 1) != 0)
      {
        v53 = *(_QWORD *)(v48 + 56) + 48 * v51;
        v54 = *(_QWORD *)(v53 + 8);
        v55 = *(_QWORD *)(v53 + 16);
        v56 = *(_QWORD *)(v53 + 24);
        v57 = *(_QWORD *)(v53 + 32);
        v58 = *(char *)(v53 + 40);
        swift_bridgeObjectRelease();
        swift_release();
        if ((v58 & 0x80000000) == 0 || (v55 & 1) != 0)
          goto LABEL_38;
        if ((v57 & 1) != 0)
        {
          if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
            swift_once();
          v56 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
        }
        v60 = *(_QWORD *)(v0 + 152);
        v59 = *(void **)(v0 + 160);
        type metadata accessor for SqliteCache();
        swift_allocObject();
        swift_bridgeObjectRetain();
        v61 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v60, v59, v54, v56, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
        (*(void (**)(void))(*(_QWORD *)v61 + 152))();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
LABEL_38:
  if ((*(_BYTE *)(v0 + 73) & 1) != 0)
  {
    v69 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v70 = v69 + 4;
    v71 = v69 + 6;
    os_unfair_lock_lock(v69 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v70, v110);
    os_unfair_lock_unlock(v71);
    v72 = *(_QWORD *)(v0 + 96);
    AllowList.group(useCase:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v72);
    swift_release();
    v73 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v72, 1, v73) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 96), &demangling cache variable for type metadata for UseCaseGroup?);
    }
    else
    {
      v79 = *(_QWORD *)(v0 + 96);
      v80 = *(_QWORD *)(v0 + 104);
      v81 = *(_QWORD *)(v0 + 88);
      outlined init with copy of SecretKey(v79 + *(int *)(v73 + 36), v81, type metadata accessor for NetworkConfig);
      outlined destroy of AspireApiPECConfig(v79, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      outlined init with copy of SecretKey(v81, v80, type metadata accessor for NetworkManagerType);
      outlined destroy of AspireApiPECConfig(v81, type metadata accessor for NetworkConfig);
      v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 48))(v80, 2, v82);
      v84 = *(_QWORD *)(v0 + 104);
      if (v83)
      {
        outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 104), type metadata accessor for NetworkManagerType);
      }
      else
      {
        v93 = v84 + *(int *)(v82 + 48);
        v94 = (uint64_t *)(v84 + *(int *)(v82 + 64));
        v95 = *v94;
        v96 = v94[1];
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v93, &demangling cache variable for type metadata for URL?);
        v97 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 8))(v84, v97);
        if (v96 >> 60 != 15)
        {
          outlined copy of Data._Representation(v95, v96);
          if (one-time initialization token for shared != -1)
            swift_once();
          TokenCache.clearTokens(user:)(v95, v96);
          outlined consume of Data?(v95, v96);
          outlined consume of Data?(v95, v96);
        }
      }
    }
  }
  v62 = *(_QWORD *)(v0 + 72);
  v63 = *(_QWORD *)(v0 + 160);
  if ((v62 & 0x40) != 0)
  {
    v64 = *(_QWORD *)(v0 + 152);
    v65 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16)
                               + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
    v66 = swift_task_alloc();
    *(_QWORD *)(v66 + 16) = v64;
    *(_QWORD *)(v66 + 24) = v63;
    v67 = v65 + 4;
    v65 += 6;
    os_unfair_lock_lock(v65);
    closure #1 in ConfigCache.clearCache(useCase:)(v67, *(_QWORD *)(v66 + 16), *(_QWORD *)(v66 + 24), v110);
    os_unfair_lock_unlock(v65);
    v68 = v110[0];
    swift_task_dealloc();
    ConfigCache.tryToSaveCache(configs:)(v68);
    swift_bridgeObjectRelease();
    v62 = *(_QWORD *)(v0 + 72);
  }
  swift_bridgeObjectRelease();
  if ((v62 & 8) != 0)
  {
    v74 = *(_QWORD *)(v0 + 80);
    v75 = *(_QWORD *)(v74 + 16);
    v109 = *(_OWORD *)(v74 + 24);
    v76 = *(_QWORD *)(v74 + 48);
    v77 = (_QWORD *)(v76 + 16);
    v78 = (os_unfair_lock_s *)(v76 + 24);
    swift_retain();
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v78);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v77, v110);
    os_unfair_lock_unlock(v78);
    v85 = *(void **)(v0 + 64);
    v86 = v110[0];
    v87 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
    swift_retain();
    v88 = objc_msgSend(v85, sel_sourceApplicationBundleIdentifier);
    if (v88)
    {
      v89 = v88;
      v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v92 = v91;

    }
    else
    {
      v90 = 0;
      v92 = 0;
    }
    v98 = *(void **)(v0 + 64);
    type metadata accessor for KeyRotation();
    v99 = swift_allocObject();
    *(_QWORD *)(v0 + 272) = v99;
    swift_defaultActor_initialize();
    *(_QWORD *)(v99 + 216) = 0;
    *(_OWORD *)(v99 + 200) = 0u;
    *(_OWORD *)(v99 + 184) = 0u;
    *(_QWORD *)(v99 + 112) = v75;
    *(_OWORD *)(v99 + 120) = v109;
    *(_QWORD *)(v99 + 136) = v86;
    *(_QWORD *)(v99 + 144) = v87;
    *(_QWORD *)(v99 + 168) = v90;
    *(_QWORD *)(v99 + 176) = v92;
    *(_QWORD *)(v99 + 152) = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
    *(_QWORD *)(v99 + 160) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_237D540E0;
    v101 = objc_msgSend(v98, sel_useCase);
    v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v104 = v103;

    *(_QWORD *)(inited + 32) = v102;
    *(_QWORD *)(inited + 40) = v104;
    v105 = specialized Set.init<A>(_:)(inited);
    *(_QWORD *)(v0 + 280) = v105;
    swift_setDeallocating();
    swift_arrayDestroy();
    v106 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v106;
    *v106 = v0;
    v106[1] = RequestsManager.handleOptions(clientConfig:options:);
    return KeyRotation.run(activeUseCases:)(v105);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  ActiveUseCaseTracker.markActive(useCase:active:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), 1);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  _QWORD *v19;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  os_unfair_lock_s *v36;
  os_unfair_lock_s *v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  os_unfair_lock_s *v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  os_unfair_lock_s *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t inited;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t (*v98)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t (*v99)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v100;
  _QWORD v101[2];

  v1 = *(_QWORD *)(v0 + 72);
  if ((v1 & 4) != 0)
  {
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
    return swift_task_switch();
  }
  if ((v1 & 0x10) != 0)
  {
    v2 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v3 = v2 + 4;
    v4 = v2 + 6;
    os_unfair_lock_lock(v2 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v3, v101);
    *(_QWORD *)(v0 + 184) = 0;
    os_unfair_lock_unlock(v4);
    v5 = *(_QWORD *)(v101[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(_QWORD *)(v5 + 16))
    {
      v7 = *(_QWORD *)(v0 + 152);
      v6 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v9 & 1) != 0)
      {
        v10 = *(_QWORD *)(v0 + 144);
        v11 = *(_QWORD *)(v0 + 112);
        v12 = *(_QWORD *)(v0 + 120);
        v13 = *(_QWORD *)(v0 + 80);
        v14 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v8);
        v15 = *v14;
        v16 = v14[1];
        *(_QWORD *)(v0 + 192) = v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 = *(_QWORD *)(v13 + 32);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
        v98 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(**(int **)(v17 + 16)
                                                                                 + *(_QWORD *)(v17 + 16));
        v19 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 200) = v19;
        *v19 = v0;
        v19[1] = RequestsManager.handleOptions(clientConfig:options:);
        return v98(v15, v16, *(_QWORD *)(v0 + 144), ObjectType, v17);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 72) & 0x80) != 0)
  {
    v21 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v22 = v21 + 4;
    v23 = v21 + 6;
    os_unfair_lock_lock(v21 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v22, v101);
    *(_QWORD *)(v0 + 208) = 0;
    os_unfair_lock_unlock(v23);
    v24 = *(_QWORD *)(v101[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(_QWORD *)(v24 + 16))
    {
      v26 = *(_QWORD *)(v0 + 152);
      v25 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
      if ((v28 & 1) != 0)
      {
        v29 = *(_QWORD *)(v0 + 80);
        v30 = (uint64_t *)(*(_QWORD *)(v24 + 56) + 16 * v27);
        v31 = *v30;
        *(_QWORD *)(v0 + 216) = *v30;
        v32 = v30[1];
        *(_QWORD *)(v0 + 224) = v32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 232) = *(_QWORD *)(v29 + 24);
        v33 = *(_QWORD *)(v29 + 32);
        *(_QWORD *)(v0 + 240) = v33;
        v34 = swift_getObjectType();
        *(_QWORD *)(v0 + 248) = v34;
        v99 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v33 + 8)
                                                                                 + *(_QWORD *)(v33 + 8));
        v35 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 256) = v35;
        *v35 = v0;
        v35[1] = RequestsManager.handleOptions(clientConfig:options:);
        return v99(*(_QWORD *)(v0 + 136), v31, v32, v34, v33);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 72) & 0x20) != 0)
  {
    v36 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v37 = v36 + 4;
    v38 = v36 + 6;
    os_unfair_lock_lock(v36 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v37, v101);
    os_unfair_lock_unlock(v38);
    v39 = *(_QWORD *)(v101[0] + 40);
    if (*(_QWORD *)(v39 + 16))
    {
      v41 = *(_QWORD *)(v0 + 152);
      v40 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
      if ((v43 & 1) != 0)
      {
        v44 = *(_QWORD *)(v39 + 56) + 48 * v42;
        v45 = *(_QWORD *)(v44 + 8);
        v46 = *(_QWORD *)(v44 + 16);
        v47 = *(_QWORD *)(v44 + 24);
        v48 = *(_QWORD *)(v44 + 32);
        v49 = *(char *)(v44 + 40);
        swift_bridgeObjectRelease();
        swift_release();
        if ((v49 & 0x80000000) == 0 || (v46 & 1) != 0)
          goto LABEL_29;
        if ((v48 & 1) != 0)
        {
          if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
            swift_once();
          v47 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
        }
        v51 = *(_QWORD *)(v0 + 152);
        v50 = *(void **)(v0 + 160);
        type metadata accessor for SqliteCache();
        swift_allocObject();
        swift_bridgeObjectRetain();
        v52 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v51, v50, v45, v47, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
        (*(void (**)(void))(*(_QWORD *)v52 + 152))();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
LABEL_29:
  if ((*(_BYTE *)(v0 + 73) & 1) != 0)
  {
    v60 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v61 = v60 + 4;
    v62 = v60 + 6;
    os_unfair_lock_lock(v60 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v61, v101);
    os_unfair_lock_unlock(v62);
    v63 = *(_QWORD *)(v0 + 96);
    AllowList.group(useCase:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v63);
    swift_release();
    v64 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 48))(v63, 1, v64) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 96), &demangling cache variable for type metadata for UseCaseGroup?);
    }
    else
    {
      v70 = *(_QWORD *)(v0 + 96);
      v71 = *(_QWORD *)(v0 + 104);
      v72 = *(_QWORD *)(v0 + 88);
      outlined init with copy of SecretKey(v70 + *(int *)(v64 + 36), v72, type metadata accessor for NetworkConfig);
      outlined destroy of AspireApiPECConfig(v70, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      outlined init with copy of SecretKey(v72, v71, type metadata accessor for NetworkManagerType);
      outlined destroy of AspireApiPECConfig(v72, type metadata accessor for NetworkConfig);
      v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v71, 2, v73);
      v75 = *(_QWORD *)(v0 + 104);
      if (v74)
      {
        outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 104), type metadata accessor for NetworkManagerType);
      }
      else
      {
        v84 = v75 + *(int *)(v73 + 48);
        v85 = (uint64_t *)(v75 + *(int *)(v73 + 64));
        v86 = *v85;
        v87 = v85[1];
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v84, &demangling cache variable for type metadata for URL?);
        v88 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v75, v88);
        if (v87 >> 60 != 15)
        {
          outlined copy of Data._Representation(v86, v87);
          if (one-time initialization token for shared != -1)
            swift_once();
          TokenCache.clearTokens(user:)(v86, v87);
          outlined consume of Data?(v86, v87);
          outlined consume of Data?(v86, v87);
        }
      }
    }
  }
  v53 = *(_QWORD *)(v0 + 72);
  v54 = *(_QWORD *)(v0 + 160);
  if ((v53 & 0x40) != 0)
  {
    v55 = *(_QWORD *)(v0 + 152);
    v56 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16)
                               + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
    v57 = swift_task_alloc();
    *(_QWORD *)(v57 + 16) = v55;
    *(_QWORD *)(v57 + 24) = v54;
    v58 = v56 + 4;
    v56 += 6;
    os_unfair_lock_lock(v56);
    closure #1 in ConfigCache.clearCache(useCase:)(v58, *(_QWORD *)(v57 + 16), *(_QWORD *)(v57 + 24), v101);
    os_unfair_lock_unlock(v56);
    v59 = v101[0];
    swift_task_dealloc();
    ConfigCache.tryToSaveCache(configs:)(v59);
    swift_bridgeObjectRelease();
    v53 = *(_QWORD *)(v0 + 72);
  }
  swift_bridgeObjectRelease();
  if ((v53 & 8) != 0)
  {
    v65 = *(_QWORD *)(v0 + 80);
    v66 = *(_QWORD *)(v65 + 16);
    v100 = *(_OWORD *)(v65 + 24);
    v67 = *(_QWORD *)(v65 + 48);
    v68 = (_QWORD *)(v67 + 16);
    v69 = (os_unfair_lock_s *)(v67 + 24);
    swift_retain();
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v69);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v68, v101);
    os_unfair_lock_unlock(v69);
    v76 = *(void **)(v0 + 64);
    v77 = v101[0];
    v78 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
    swift_retain();
    v79 = objc_msgSend(v76, sel_sourceApplicationBundleIdentifier);
    if (v79)
    {
      v80 = v79;
      v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v83 = v82;

    }
    else
    {
      v81 = 0;
      v83 = 0;
    }
    v89 = *(void **)(v0 + 64);
    type metadata accessor for KeyRotation();
    v90 = swift_allocObject();
    *(_QWORD *)(v0 + 272) = v90;
    swift_defaultActor_initialize();
    *(_QWORD *)(v90 + 216) = 0;
    *(_OWORD *)(v90 + 200) = 0u;
    *(_OWORD *)(v90 + 184) = 0u;
    *(_QWORD *)(v90 + 112) = v66;
    *(_OWORD *)(v90 + 120) = v100;
    *(_QWORD *)(v90 + 136) = v77;
    *(_QWORD *)(v90 + 144) = v78;
    *(_QWORD *)(v90 + 168) = v81;
    *(_QWORD *)(v90 + 176) = v83;
    *(_QWORD *)(v90 + 152) = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
    *(_QWORD *)(v90 + 160) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_237D540E0;
    v92 = objc_msgSend(v89, sel_useCase);
    v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v95 = v94;

    *(_QWORD *)(inited + 32) = v93;
    *(_QWORD *)(inited + 40) = v95;
    v96 = specialized Set.init<A>(_:)(inited);
    *(_QWORD *)(v0 + 280) = v96;
    swift_setDeallocating();
    swift_arrayDestroy();
    v97 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v97;
    *v97 = v0;
    v97[1] = RequestsManager.handleOptions(clientConfig:options:);
    return KeyRotation.run(activeUseCases:)(v96);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  ActiveUseCaseTracker.markActive(useCase:active:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), 0);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  _QWORD *v18;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  os_unfair_lock_s *v35;
  os_unfair_lock_s *v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  os_unfair_lock_s *v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  os_unfair_lock_s *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t inited;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t (*v97)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t (*v98)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v99;
  _QWORD v100[2];

  if ((*(_BYTE *)(v0 + 72) & 0x10) != 0)
  {
    v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v2 = v1 + 4;
    v3 = v1 + 6;
    os_unfair_lock_lock(v1 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v100);
    *(_QWORD *)(v0 + 184) = 0;
    os_unfair_lock_unlock(v3);
    v4 = *(_QWORD *)(v100[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(_QWORD *)(v4 + 16))
    {
      v6 = *(_QWORD *)(v0 + 152);
      v5 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(v0 + 144);
        v10 = *(_QWORD *)(v0 + 112);
        v11 = *(_QWORD *)(v0 + 120);
        v12 = *(_QWORD *)(v0 + 80);
        v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v7);
        v14 = *v13;
        v15 = v13[1];
        *(_QWORD *)(v0 + 192) = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = *(_QWORD *)(v12 + 32);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
        v97 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(**(int **)(v16 + 16)
                                                                                 + *(_QWORD *)(v16 + 16));
        v18 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 200) = v18;
        *v18 = v0;
        v18[1] = RequestsManager.handleOptions(clientConfig:options:);
        return v97(v14, v15, *(_QWORD *)(v0 + 144), ObjectType, v16);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 72) & 0x80) != 0)
  {
    v20 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v21 = v20 + 4;
    v22 = v20 + 6;
    os_unfair_lock_lock(v20 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v21, v100);
    *(_QWORD *)(v0 + 208) = 0;
    os_unfair_lock_unlock(v22);
    v23 = *(_QWORD *)(v100[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(_QWORD *)(v23 + 16))
    {
      v25 = *(_QWORD *)(v0 + 152);
      v24 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v24);
      if ((v27 & 1) != 0)
      {
        v28 = *(_QWORD *)(v0 + 80);
        v29 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v26);
        v30 = *v29;
        *(_QWORD *)(v0 + 216) = *v29;
        v31 = v29[1];
        *(_QWORD *)(v0 + 224) = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 232) = *(_QWORD *)(v28 + 24);
        v32 = *(_QWORD *)(v28 + 32);
        *(_QWORD *)(v0 + 240) = v32;
        v33 = swift_getObjectType();
        *(_QWORD *)(v0 + 248) = v33;
        v98 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v32 + 8)
                                                                                 + *(_QWORD *)(v32 + 8));
        v34 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 256) = v34;
        *v34 = v0;
        v34[1] = RequestsManager.handleOptions(clientConfig:options:);
        return v98(*(_QWORD *)(v0 + 136), v30, v31, v33, v32);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 72) & 0x20) != 0)
  {
    v35 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v36 = v35 + 4;
    v37 = v35 + 6;
    os_unfair_lock_lock(v35 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v36, v100);
    os_unfair_lock_unlock(v37);
    v38 = *(_QWORD *)(v100[0] + 40);
    if (*(_QWORD *)(v38 + 16))
    {
      v40 = *(_QWORD *)(v0 + 152);
      v39 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v39);
      if ((v42 & 1) != 0)
      {
        v43 = *(_QWORD *)(v38 + 56) + 48 * v41;
        v44 = *(_QWORD *)(v43 + 8);
        v45 = *(_QWORD *)(v43 + 16);
        v46 = *(_QWORD *)(v43 + 24);
        v47 = *(_QWORD *)(v43 + 32);
        v48 = *(char *)(v43 + 40);
        swift_bridgeObjectRelease();
        swift_release();
        if ((v48 & 0x80000000) == 0 || (v45 & 1) != 0)
          goto LABEL_27;
        if ((v47 & 1) != 0)
        {
          if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
            swift_once();
          v46 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
        }
        v50 = *(_QWORD *)(v0 + 152);
        v49 = *(void **)(v0 + 160);
        type metadata accessor for SqliteCache();
        swift_allocObject();
        swift_bridgeObjectRetain();
        v51 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v50, v49, v44, v46, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
        (*(void (**)(void))(*(_QWORD *)v51 + 152))();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
LABEL_27:
  if ((*(_BYTE *)(v0 + 73) & 1) != 0)
  {
    v59 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v60 = v59 + 4;
    v61 = v59 + 6;
    os_unfair_lock_lock(v59 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v60, v100);
    os_unfair_lock_unlock(v61);
    v62 = *(_QWORD *)(v0 + 96);
    AllowList.group(useCase:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v62);
    swift_release();
    v63 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v62, 1, v63) == 1)
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 96), &demangling cache variable for type metadata for UseCaseGroup?);
    }
    else
    {
      v69 = *(_QWORD *)(v0 + 96);
      v70 = *(_QWORD *)(v0 + 104);
      v71 = *(_QWORD *)(v0 + 88);
      outlined init with copy of SecretKey(v69 + *(int *)(v63 + 36), v71, type metadata accessor for NetworkConfig);
      outlined destroy of AspireApiPECConfig(v69, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      outlined init with copy of SecretKey(v71, v70, type metadata accessor for NetworkManagerType);
      outlined destroy of AspireApiPECConfig(v71, type metadata accessor for NetworkConfig);
      v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
      v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 48))(v70, 2, v72);
      v74 = *(_QWORD *)(v0 + 104);
      if (v73)
      {
        outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 104), type metadata accessor for NetworkManagerType);
      }
      else
      {
        v83 = v74 + *(int *)(v72 + 48);
        v84 = (uint64_t *)(v74 + *(int *)(v72 + 64));
        v85 = *v84;
        v86 = v84[1];
        outlined destroy of AMDPbHEConfig.OneOf_Config?(v83, &demangling cache variable for type metadata for URL?);
        v87 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v74, v87);
        if (v86 >> 60 != 15)
        {
          outlined copy of Data._Representation(v85, v86);
          if (one-time initialization token for shared != -1)
            swift_once();
          TokenCache.clearTokens(user:)(v85, v86);
          outlined consume of Data?(v85, v86);
          outlined consume of Data?(v85, v86);
        }
      }
    }
  }
  v52 = *(_QWORD *)(v0 + 72);
  v53 = *(_QWORD *)(v0 + 160);
  if ((v52 & 0x40) != 0)
  {
    v54 = *(_QWORD *)(v0 + 152);
    v55 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16)
                               + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
    v56 = swift_task_alloc();
    *(_QWORD *)(v56 + 16) = v54;
    *(_QWORD *)(v56 + 24) = v53;
    v57 = v55 + 4;
    v55 += 6;
    os_unfair_lock_lock(v55);
    closure #1 in ConfigCache.clearCache(useCase:)(v57, *(_QWORD *)(v56 + 16), *(_QWORD *)(v56 + 24), v100);
    os_unfair_lock_unlock(v55);
    v58 = v100[0];
    swift_task_dealloc();
    ConfigCache.tryToSaveCache(configs:)(v58);
    swift_bridgeObjectRelease();
    v52 = *(_QWORD *)(v0 + 72);
  }
  swift_bridgeObjectRelease();
  if ((v52 & 8) != 0)
  {
    v64 = *(_QWORD *)(v0 + 80);
    v65 = *(_QWORD *)(v64 + 16);
    v99 = *(_OWORD *)(v64 + 24);
    v66 = *(_QWORD *)(v64 + 48);
    v67 = (_QWORD *)(v66 + 16);
    v68 = (os_unfair_lock_s *)(v66 + 24);
    swift_retain();
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v68);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v67, v100);
    os_unfair_lock_unlock(v68);
    v75 = *(void **)(v0 + 64);
    v76 = v100[0];
    v77 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
    swift_retain();
    v78 = objc_msgSend(v75, sel_sourceApplicationBundleIdentifier);
    if (v78)
    {
      v79 = v78;
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v82 = v81;

    }
    else
    {
      v80 = 0;
      v82 = 0;
    }
    v88 = *(void **)(v0 + 64);
    type metadata accessor for KeyRotation();
    v89 = swift_allocObject();
    *(_QWORD *)(v0 + 272) = v89;
    swift_defaultActor_initialize();
    *(_QWORD *)(v89 + 216) = 0;
    *(_OWORD *)(v89 + 200) = 0u;
    *(_OWORD *)(v89 + 184) = 0u;
    *(_QWORD *)(v89 + 112) = v65;
    *(_OWORD *)(v89 + 120) = v99;
    *(_QWORD *)(v89 + 136) = v76;
    *(_QWORD *)(v89 + 144) = v77;
    *(_QWORD *)(v89 + 168) = v80;
    *(_QWORD *)(v89 + 176) = v82;
    *(_QWORD *)(v89 + 152) = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
    *(_QWORD *)(v89 + 160) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_237D540E0;
    v91 = objc_msgSend(v88, sel_useCase);
    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v94 = v93;

    *(_QWORD *)(inited + 32) = v92;
    *(_QWORD *)(inited + 40) = v94;
    v95 = specialized Set.init<A>(_:)(inited);
    *(_QWORD *)(v0 + 280) = v95;
    swift_setDeallocating();
    swift_arrayDestroy();
    v96 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v96;
    *v96 = v0;
    v96[1] = RequestsManager.handleOptions(clientConfig:options:);
    return KeyRotation.run(activeUseCases:)(v95);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void RequestsManager.handleOptions(clientConfig:options:)()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _QWORD *v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  os_unfair_lock_s *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t inited;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void (*v78)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v79;
  _QWORD v80[2];

  v1 = *(_QWORD *)(v0 + 184);
  if ((*(_BYTE *)(v0 + 72) & 0x80) != 0)
  {
    v2 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v3 = v2 + 4;
    v4 = v2 + 6;
    os_unfair_lock_lock(v2 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v3, v80);
    *(_QWORD *)(v0 + 208) = v1;
    os_unfair_lock_unlock(v4);
    if (v1)
      return;
    v5 = *(_QWORD *)(v80[0] + 48);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(_QWORD *)(v5 + 16))
    {
      v7 = *(_QWORD *)(v0 + 152);
      v6 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRetain();
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v9 & 1) != 0)
      {
        v10 = *(_QWORD *)(v0 + 80);
        v11 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v8);
        v12 = *v11;
        *(_QWORD *)(v0 + 216) = *v11;
        v13 = v11[1];
        *(_QWORD *)(v0 + 224) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 232) = *(_QWORD *)(v10 + 24);
        v14 = *(_QWORD *)(v10 + 32);
        *(_QWORD *)(v0 + 240) = v14;
        ObjectType = swift_getObjectType();
        *(_QWORD *)(v0 + 248) = ObjectType;
        v78 = (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v14 + 8)
                                                                              + *(_QWORD *)(v14 + 8));
        v16 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 256) = v16;
        *v16 = v0;
        v16[1] = RequestsManager.handleOptions(clientConfig:options:);
        v78(*(_QWORD *)(v0 + 136), v12, v13, ObjectType, v14);
        return;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  if ((*(_BYTE *)(v0 + 72) & 0x20) != 0)
  {
    v17 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v18 = v17 + 4;
    v19 = v17 + 6;
    os_unfair_lock_lock(v17 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v18, v80);
    os_unfair_lock_unlock(v19);
    if (v1)
      return;
    v20 = *(_QWORD *)(v80[0] + 40);
    if (!*(_QWORD *)(v20 + 16))
      goto LABEL_21;
    v22 = *(_QWORD *)(v0 + 152);
    v21 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRetain();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v21);
    if ((v24 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_21:
      swift_release();
      v1 = 0;
      goto LABEL_22;
    }
    v25 = *(_QWORD *)(v20 + 56) + 48 * v23;
    v26 = *(_QWORD *)(v25 + 8);
    v27 = *(_QWORD *)(v25 + 16);
    v28 = *(_QWORD *)(v25 + 24);
    v29 = *(_QWORD *)(v25 + 32);
    v30 = *(char *)(v25 + 40);
    swift_bridgeObjectRelease();
    swift_release();
    v1 = 0;
    if (v30 < 0 && (v27 & 1) == 0)
    {
      if ((v29 & 1) != 0)
      {
        if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
          swift_once();
        v28 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
      }
      v32 = *(_QWORD *)(v0 + 152);
      v31 = *(void **)(v0 + 160);
      type metadata accessor for SqliteCache();
      swift_allocObject();
      swift_bridgeObjectRetain();
      v33 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v32, v31, v26, v28, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
      (*(void (**)(void))(*(_QWORD *)v33 + 152))();
      goto LABEL_21;
    }
  }
LABEL_22:
  if ((*(_BYTE *)(v0 + 73) & 1) == 0)
    goto LABEL_33;
  v34 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
  v35 = v34 + 4;
  v36 = v34 + 6;
  os_unfair_lock_lock(v34 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v35, v80);
  os_unfair_lock_unlock(v36);
  if (v1)
    return;
  v37 = *(_QWORD *)(v0 + 96);
  AllowList.group(useCase:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v37);
  swift_release();
  v38 = type metadata accessor for UseCaseGroup();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 96), &demangling cache variable for type metadata for UseCaseGroup?);
  }
  else
  {
    v39 = *(_QWORD *)(v0 + 96);
    v40 = *(_QWORD *)(v0 + 104);
    v41 = *(_QWORD *)(v0 + 88);
    outlined init with copy of SecretKey(v39 + *(int *)(v38 + 36), v41, type metadata accessor for NetworkConfig);
    outlined destroy of AspireApiPECConfig(v39, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    outlined init with copy of SecretKey(v41, v40, type metadata accessor for NetworkManagerType);
    outlined destroy of AspireApiPECConfig(v41, type metadata accessor for NetworkConfig);
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v40, 2, v42);
    v44 = *(_QWORD *)(v0 + 104);
    if (v43)
    {
      outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 104), type metadata accessor for NetworkManagerType);
    }
    else
    {
      v45 = v44 + *(int *)(v42 + 48);
      v46 = (uint64_t *)(v44 + *(int *)(v42 + 64));
      v47 = *v46;
      v48 = v46[1];
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v45, &demangling cache variable for type metadata for URL?);
      v49 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v44, v49);
      v1 = 0;
      if (v48 >> 60 == 15)
        goto LABEL_33;
      outlined copy of Data._Representation(v47, v48);
      if (one-time initialization token for shared != -1)
        swift_once();
      TokenCache.clearTokens(user:)(v47, v48);
      outlined consume of Data?(v47, v48);
      outlined consume of Data?(v47, v48);
    }
  }
  v1 = 0;
LABEL_33:
  v50 = *(_QWORD *)(v0 + 72);
  v51 = *(_QWORD *)(v0 + 160);
  if ((v50 & 0x40) != 0)
  {
    v52 = *(_QWORD *)(v0 + 152);
    v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16) + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
    v54 = swift_task_alloc();
    *(_QWORD *)(v54 + 16) = v52;
    *(_QWORD *)(v54 + 24) = v51;
    os_unfair_lock_lock((os_unfair_lock_t)(v53 + 24));
    closure #1 in ConfigCache.clearCache(useCase:)((_QWORD *)(v53 + 16), *(_QWORD *)(v54 + 16), *(_QWORD *)(v54 + 24), v80);
    os_unfair_lock_unlock((os_unfair_lock_t)(v53 + 24));
    if (v1)
      return;
    v55 = v80[0];
    swift_task_dealloc();
    ConfigCache.tryToSaveCache(configs:)(v55);
    swift_bridgeObjectRelease();
    v1 = 0;
    v50 = *(_QWORD *)(v0 + 72);
  }
  swift_bridgeObjectRelease();
  if ((v50 & 8) != 0)
  {
    v56 = *(_QWORD *)(v0 + 80);
    v57 = *(_QWORD *)(v56 + 16);
    v79 = *(_OWORD *)(v56 + 24);
    v58 = *(_QWORD *)(v56 + 48);
    v59 = (_QWORD *)(v58 + 16);
    v60 = (os_unfair_lock_s *)(v58 + 24);
    swift_retain();
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v60);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v59, v80);
    os_unfair_lock_unlock(v60);
    if (!v1)
    {
      v61 = *(void **)(v0 + 64);
      v62 = v80[0];
      v63 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
      swift_retain();
      v64 = objc_msgSend(v61, sel_sourceApplicationBundleIdentifier);
      if (v64)
      {
        v65 = v64;
        v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v68 = v67;

      }
      else
      {
        v66 = 0;
        v68 = 0;
      }
      v69 = *(void **)(v0 + 64);
      type metadata accessor for KeyRotation();
      v70 = swift_allocObject();
      *(_QWORD *)(v0 + 272) = v70;
      swift_defaultActor_initialize();
      *(_QWORD *)(v70 + 216) = 0;
      *(_OWORD *)(v70 + 200) = 0u;
      *(_OWORD *)(v70 + 184) = 0u;
      *(_QWORD *)(v70 + 112) = v57;
      *(_OWORD *)(v70 + 120) = v79;
      *(_QWORD *)(v70 + 136) = v62;
      *(_QWORD *)(v70 + 144) = v63;
      *(_QWORD *)(v70 + 168) = v66;
      *(_QWORD *)(v70 + 176) = v68;
      *(_QWORD *)(v70 + 152) = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
      *(_QWORD *)(v70 + 160) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_237D540E0;
      v72 = objc_msgSend(v69, sel_useCase);
      v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v75 = v74;

      *(_QWORD *)(inited + 32) = v73;
      *(_QWORD *)(inited + 40) = v75;
      v76 = specialized Set.init<A>(_:)(inited);
      *(_QWORD *)(v0 + 280) = v76;
      swift_setDeallocating();
      swift_arrayDestroy();
      v77 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 288) = v77;
      *v77 = v0;
      v77[1] = RequestsManager.handleOptions(clientConfig:options:);
      KeyRotation.run(activeUseCases:)(v76);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  os_unfair_lock_s *v28;
  os_unfair_lock_s *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  os_unfair_lock_s *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t inited;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void (*v72)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  __int128 v73;
  _QWORD v74[2];

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v22 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 144);
    v24 = *(_QWORD *)(v0 + 128);
    outlined init with take of SecretKey(v1, v24, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v26 = *(int *)(v2 + 24);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v24 + v26) = v25;
    outlined init with copy of SecretKey(v24, v23, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v23, 0, 1, v2);
    v72 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v22 + 16) + *(_QWORD *)(v22 + 16));
    v27 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v27;
    *v27 = v0;
    v27[1] = RequestsManager.handleOptions(clientConfig:options:);
    v72(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 240));
    return;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v1, &demangling cache variable for type metadata for UserIdentifier?);
  v4 = *(_QWORD *)(v0 + 208);
  if ((*(_BYTE *)(v0 + 72) & 0x20) != 0)
  {
    v5 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v6 = v5 + 4;
    v7 = v5 + 6;
    os_unfair_lock_lock(v5 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v6, v74);
    os_unfair_lock_unlock(v7);
    if (v4)
      return;
    v8 = *(_QWORD *)(v74[0] + 40);
    if (!*(_QWORD *)(v8 + 16))
      goto LABEL_15;
    v10 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRetain();
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    if ((v12 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_15:
      swift_release();
      v4 = 0;
      goto LABEL_16;
    }
    v13 = *(_QWORD *)(v8 + 56) + 48 * v11;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 24);
    v17 = *(_QWORD *)(v13 + 32);
    v18 = *(char *)(v13 + 40);
    swift_bridgeObjectRelease();
    swift_release();
    v4 = 0;
    if (v18 < 0 && (v15 & 1) == 0)
    {
      if ((v17 & 1) != 0)
      {
        if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
          swift_once();
        v16 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
      }
      v20 = *(_QWORD *)(v0 + 152);
      v19 = *(void **)(v0 + 160);
      type metadata accessor for SqliteCache();
      swift_allocObject();
      swift_bridgeObjectRetain();
      v21 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v20, v19, v14, v16, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
      (*(void (**)(void))(*(_QWORD *)v21 + 152))();
      goto LABEL_15;
    }
  }
LABEL_16:
  if ((*(_BYTE *)(v0 + 73) & 1) == 0)
    goto LABEL_27;
  v28 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
  v29 = v28 + 4;
  v30 = v28 + 6;
  os_unfair_lock_lock(v28 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v29, v74);
  os_unfair_lock_unlock(v30);
  if (v4)
    return;
  v31 = *(_QWORD *)(v0 + 96);
  AllowList.group(useCase:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v31);
  swift_release();
  v32 = type metadata accessor for UseCaseGroup();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v31, 1, v32) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 96), &demangling cache variable for type metadata for UseCaseGroup?);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 96);
    v34 = *(_QWORD *)(v0 + 104);
    v35 = *(_QWORD *)(v0 + 88);
    outlined init with copy of SecretKey(v33 + *(int *)(v32 + 36), v35, type metadata accessor for NetworkConfig);
    outlined destroy of AspireApiPECConfig(v33, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    outlined init with copy of SecretKey(v35, v34, type metadata accessor for NetworkManagerType);
    outlined destroy of AspireApiPECConfig(v35, type metadata accessor for NetworkConfig);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v34, 2, v36);
    v38 = *(_QWORD *)(v0 + 104);
    if (v37)
    {
      outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 104), type metadata accessor for NetworkManagerType);
    }
    else
    {
      v39 = v38 + *(int *)(v36 + 48);
      v40 = (uint64_t *)(v38 + *(int *)(v36 + 64));
      v41 = *v40;
      v42 = v40[1];
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v39, &demangling cache variable for type metadata for URL?);
      v43 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v38, v43);
      v4 = 0;
      if (v42 >> 60 == 15)
        goto LABEL_27;
      outlined copy of Data._Representation(v41, v42);
      if (one-time initialization token for shared != -1)
        swift_once();
      TokenCache.clearTokens(user:)(v41, v42);
      outlined consume of Data?(v41, v42);
      outlined consume of Data?(v41, v42);
    }
  }
  v4 = 0;
LABEL_27:
  v44 = *(_QWORD *)(v0 + 72);
  v45 = *(_QWORD *)(v0 + 160);
  if ((v44 & 0x40) != 0)
  {
    v46 = *(_QWORD *)(v0 + 152);
    v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16) + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
    v48 = swift_task_alloc();
    *(_QWORD *)(v48 + 16) = v46;
    *(_QWORD *)(v48 + 24) = v45;
    os_unfair_lock_lock((os_unfair_lock_t)(v47 + 24));
    closure #1 in ConfigCache.clearCache(useCase:)((_QWORD *)(v47 + 16), *(_QWORD *)(v48 + 16), *(_QWORD *)(v48 + 24), v74);
    os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 24));
    if (v4)
      return;
    v49 = v74[0];
    swift_task_dealloc();
    ConfigCache.tryToSaveCache(configs:)(v49);
    swift_bridgeObjectRelease();
    v4 = 0;
    v44 = *(_QWORD *)(v0 + 72);
  }
  swift_bridgeObjectRelease();
  if ((v44 & 8) != 0)
  {
    v50 = *(_QWORD *)(v0 + 80);
    v51 = *(_QWORD *)(v50 + 16);
    v73 = *(_OWORD *)(v50 + 24);
    v52 = *(_QWORD *)(v50 + 48);
    v53 = (_QWORD *)(v52 + 16);
    v54 = (os_unfair_lock_s *)(v52 + 24);
    swift_retain();
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v54);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v53, v74);
    os_unfair_lock_unlock(v54);
    if (!v4)
    {
      v55 = *(void **)(v0 + 64);
      v56 = v74[0];
      v57 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
      swift_retain();
      v58 = objc_msgSend(v55, sel_sourceApplicationBundleIdentifier);
      if (v58)
      {
        v59 = v58;
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v62 = v61;

      }
      else
      {
        v60 = 0;
        v62 = 0;
      }
      v63 = *(void **)(v0 + 64);
      type metadata accessor for KeyRotation();
      v64 = swift_allocObject();
      *(_QWORD *)(v0 + 272) = v64;
      swift_defaultActor_initialize();
      *(_QWORD *)(v64 + 216) = 0;
      *(_OWORD *)(v64 + 200) = 0u;
      *(_OWORD *)(v64 + 184) = 0u;
      *(_QWORD *)(v64 + 112) = v51;
      *(_OWORD *)(v64 + 120) = v73;
      *(_QWORD *)(v64 + 136) = v56;
      *(_QWORD *)(v64 + 144) = v57;
      *(_QWORD *)(v64 + 168) = v60;
      *(_QWORD *)(v64 + 176) = v62;
      *(_QWORD *)(v64 + 152) = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
      *(_QWORD *)(v64 + 160) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_237D540E0;
      v66 = objc_msgSend(v63, sel_useCase);
      v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v69 = v68;

      *(_QWORD *)(inited + 32) = v67;
      *(_QWORD *)(inited + 40) = v69;
      v70 = specialized Set.init<A>(_:)(inited);
      *(_QWORD *)(v0 + 280) = v70;
      swift_setDeallocating();
      swift_arrayDestroy();
      v71 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 288) = v71;
      *v71 = v0;
      v71[1] = RequestsManager.handleOptions(clientConfig:options:);
      KeyRotation.run(activeUseCases:)(v70);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  os_unfair_lock_s *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t inited;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  _QWORD v64[2];

  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 128), (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  v1 = *(_QWORD *)(v0 + 208);
  if ((*(_BYTE *)(v0 + 72) & 0x20) != 0)
  {
    v2 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
    v3 = v2 + 4;
    v4 = v2 + 6;
    os_unfair_lock_lock(v2 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v3, v64);
    os_unfair_lock_unlock(v4);
    if (v1)
      return;
    v5 = *(_QWORD *)(v64[0] + 40);
    if (!*(_QWORD *)(v5 + 16))
      goto LABEL_13;
    v7 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    if ((v9 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      swift_release();
      v1 = 0;
      goto LABEL_14;
    }
    v10 = *(_QWORD *)(v5 + 56) + 48 * v8;
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 24);
    v14 = *(_QWORD *)(v10 + 32);
    v15 = *(char *)(v10 + 40);
    swift_bridgeObjectRelease();
    swift_release();
    v1 = 0;
    if (v15 < 0 && (v12 & 1) == 0)
    {
      if ((v14 & 1) != 0)
      {
        if (one-time initialization token for defaultCacheEntryMinutesToLive != -1)
          swift_once();
        v13 = static StaticPIRParameters.defaultCacheEntryMinutesToLive;
      }
      v17 = *(_QWORD *)(v0 + 152);
      v16 = *(void **)(v0 + 160);
      type metadata accessor for SqliteCache();
      swift_allocObject();
      swift_bridgeObjectRetain();
      v18 = SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(v17, v16, v11, v13, (void (*)(uint64_t))closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:), 0);
      (*(void (**)(void))(*(_QWORD *)v18 + 152))();
      goto LABEL_13;
    }
  }
LABEL_14:
  if ((*(_BYTE *)(v0 + 73) & 1) == 0)
    goto LABEL_25;
  v19 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 80) + 48);
  v20 = v19 + 4;
  v21 = v19 + 6;
  os_unfair_lock_lock(v19 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v20, v64);
  os_unfair_lock_unlock(v21);
  if (v1)
    return;
  v22 = *(_QWORD *)(v0 + 96);
  AllowList.group(useCase:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v22);
  swift_release();
  v23 = type metadata accessor for UseCaseGroup();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23) == 1)
  {
    outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v0 + 96), &demangling cache variable for type metadata for UseCaseGroup?);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 88);
    outlined init with copy of SecretKey(v24 + *(int *)(v23 + 36), v26, type metadata accessor for NetworkConfig);
    outlined destroy of AspireApiPECConfig(v24, (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
    outlined init with copy of SecretKey(v26, v25, type metadata accessor for NetworkManagerType);
    outlined destroy of AspireApiPECConfig(v26, type metadata accessor for NetworkConfig);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (endpoint: URL, issuer: URL?, authenticationToken: Data?, privacyProxyFailClosed: Bool));
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v25, 2, v27);
    v29 = *(_QWORD *)(v0 + 104);
    if (v28)
    {
      outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 104), type metadata accessor for NetworkManagerType);
    }
    else
    {
      v30 = v29 + *(int *)(v27 + 48);
      v31 = (uint64_t *)(v29 + *(int *)(v27 + 64));
      v32 = *v31;
      v33 = v31[1];
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for URL?);
      v34 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v29, v34);
      v1 = 0;
      if (v33 >> 60 == 15)
        goto LABEL_25;
      outlined copy of Data._Representation(v32, v33);
      if (one-time initialization token for shared != -1)
        swift_once();
      TokenCache.clearTokens(user:)(v32, v33);
      outlined consume of Data?(v32, v33);
      outlined consume of Data?(v32, v33);
    }
  }
  v1 = 0;
LABEL_25:
  v35 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 160);
  if ((v35 & 0x40) != 0)
  {
    v37 = *(_QWORD *)(v0 + 152);
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16) + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
    v39 = swift_task_alloc();
    *(_QWORD *)(v39 + 16) = v37;
    *(_QWORD *)(v39 + 24) = v36;
    os_unfair_lock_lock((os_unfair_lock_t)(v38 + 24));
    closure #1 in ConfigCache.clearCache(useCase:)((_QWORD *)(v38 + 16), *(_QWORD *)(v39 + 16), *(_QWORD *)(v39 + 24), v64);
    os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 24));
    if (v1)
      return;
    v40 = v64[0];
    swift_task_dealloc();
    ConfigCache.tryToSaveCache(configs:)(v40);
    swift_bridgeObjectRelease();
    v1 = 0;
    v35 = *(_QWORD *)(v0 + 72);
  }
  swift_bridgeObjectRelease();
  if ((v35 & 8) != 0)
  {
    v41 = *(_QWORD *)(v0 + 80);
    v42 = *(_QWORD *)(v41 + 16);
    v63 = *(_OWORD *)(v41 + 24);
    v43 = *(_QWORD *)(v41 + 48);
    v44 = (_QWORD *)(v43 + 16);
    v45 = (os_unfair_lock_s *)(v43 + 24);
    swift_retain();
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v45);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v44, v64);
    os_unfair_lock_unlock(v45);
    if (!v1)
    {
      v46 = *(void **)(v0 + 64);
      v47 = v64[0];
      v48 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
      swift_retain();
      v49 = objc_msgSend(v46, sel_sourceApplicationBundleIdentifier);
      if (v49)
      {
        v50 = v49;
        v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v53 = v52;

      }
      else
      {
        v51 = 0;
        v53 = 0;
      }
      v54 = *(void **)(v0 + 64);
      type metadata accessor for KeyRotation();
      v55 = swift_allocObject();
      *(_QWORD *)(v0 + 272) = v55;
      swift_defaultActor_initialize();
      *(_QWORD *)(v55 + 216) = 0;
      *(_OWORD *)(v55 + 200) = 0u;
      *(_OWORD *)(v55 + 184) = 0u;
      *(_QWORD *)(v55 + 112) = v42;
      *(_OWORD *)(v55 + 120) = v63;
      *(_QWORD *)(v55 + 136) = v47;
      *(_QWORD *)(v55 + 144) = v48;
      *(_QWORD *)(v55 + 168) = v51;
      *(_QWORD *)(v55 + 176) = v53;
      *(_QWORD *)(v55 + 152) = closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
      *(_QWORD *)(v55 + 160) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_237D540E0;
      v57 = objc_msgSend(v54, sel_useCase);
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v60 = v59;

      *(_QWORD *)(inited + 32) = v58;
      *(_QWORD *)(inited + 40) = v60;
      v61 = specialized Set.init<A>(_:)(inited);
      *(_QWORD *)(v0 + 280) = v61;
      swift_setDeallocating();
      swift_arrayDestroy();
      v62 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 288) = v62;
      *v62 = v0;
      v62[1] = RequestsManager.handleOptions(clientConfig:options:);
      KeyRotation.run(activeUseCases:)(v61);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t RequestsManager.fetchStatus(useCase:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[72] = v2;
  v3[71] = a2;
  v3[70] = a1;
  type metadata accessor for AspireApiPECConfig(0);
  v3[73] = swift_task_alloc();
  type metadata accessor for AspireApiPIRConfig(0);
  v3[74] = swift_task_alloc();
  v3[75] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UseCase?, AspireApiConfig.OneOf_Config));
  v3[76] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
  v3[77] = swift_task_alloc();
  v4 = type metadata accessor for AspireApiConfig.OneOf_Config(0);
  v3[78] = v4;
  v3[79] = *(_QWORD *)(v4 - 8);
  v3[80] = swift_task_alloc();
  v5 = type metadata accessor for AspireApiConfig(0);
  v3[81] = v5;
  v3[82] = *(_QWORD *)(v5 - 8);
  v3[83] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiConfig?);
  v3[84] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v3[85] = swift_task_alloc();
  v3[86] = swift_task_alloc();
  v3[87] = swift_task_alloc();
  v3[88] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t RequestsManager.fetchStatus(useCase:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  type metadata accessor for RequestsManager.CMLUseCaseStatusBuilder();
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 712) = v4;
  *(_OWORD *)(v4 + 32) = xmmword_237D57950;
  v5 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  v6 = type metadata accessor for Date();
  *(_QWORD *)(v0 + 720) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v0 + 728) = v7;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  *(_QWORD *)(v0 + 736) = v8;
  v8(v5, 1, 1, v6);
  v8(v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime, 1, 1, v6);
  v8(v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime, 1, 1, v6);
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v9 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 744) = v9;
  v10 = (_QWORD *)(v9 + 16);
  v11 = (os_unfair_lock_s *)(v9 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v11);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v10, &v29);
  *(_QWORD *)(v0 + 752) = 0;
  os_unfair_lock_unlock(v11);
  if (*(_QWORD *)(*(_QWORD *)(v29 + 40) + 16))
  {
    v12 = *(_QWORD *)(v0 + 568);
    v13 = *(_QWORD *)(v0 + 560);
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
    v15 = v14;
    swift_bridgeObjectRelease();
    swift_release();
    if ((v15 & 1) != 0)
    {
      *(_QWORD *)(v0 + 760) = *(_QWORD *)(*(_QWORD *)(v0 + 576) + 40);
      swift_bridgeObjectRetain();
      return swift_task_switch();
    }
  }
  else
  {
    swift_release();
  }
  v17 = *(_QWORD *)(v0 + 704);
  v18 = *(_QWORD *)(v0 + 696);
  v26 = *(_QWORD *)(v0 + 688);
  v19 = *(_QWORD *)(v4 + 24);
  v27 = *(_QWORD *)(v4 + 16);
  swift_beginAccess();
  v20 = *(_QWORD *)(v4 + 32);
  v21 = *(_QWORD *)(v4 + 40);
  v22 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v22, v17, &demangling cache variable for type metadata for Date?);
  v23 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v23, v18, &demangling cache variable for type metadata for Date?);
  v24 = v4 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
  swift_beginAccess();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v24, v26, &demangling cache variable for type metadata for Date?);
  v25 = objc_allocWithZone((Class)CMLUseCaseStatus);
  swift_bridgeObjectRetain();
  outlined copy of Data?(v20, v21);
  v28 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v27, v19, v20, v21, v17, v18, v26, 0);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v28);
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 760) + OBJC_IVAR____TtC8CipherML20ActiveUseCaseTracker_lastUsed);
  swift_beginAccess();
  *(_QWORD *)(v0 + 768) = *v1;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 768) + 16)
    && (v1 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568)), (v2 & 1) != 0))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 728) + 16))(*(_QWORD *)(v0 + 680), *(_QWORD *)(*(_QWORD *)(v0 + 768) + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 728) + 72) * v1, *(_QWORD *)(v0 + 720));
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = *(_QWORD *)(v0 + 712);
  v5 = *(_QWORD *)(v0 + 704);
  v6 = *(_QWORD *)(v0 + 680);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 736))(v6, v3, 1, *(_QWORD *)(v0 + 720));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v6, v5, &demangling cache variable for type metadata for Date?);
  v7 = OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  *(_QWORD *)(v0 + 776) = OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_lastUsed;
  v8 = v4 + v7;
  swift_beginAccess();
  outlined assign with take of Date?(v5, v8);
  swift_endAccess();
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v6, &demangling cache variable for type metadata for Date?);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_BYTE *)(v0 + 49) = ActiveUseCaseTracker.isActive(useCase:)(*(Swift::String *)(v0 + 560));
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 640);
  v3 = *(_QWORD *)(v0 + 592);
  swift_release();
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiConfig);
  v5 = *(_QWORD *)(v0 + 800);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 640);
  v3 = *(_QWORD *)(v0 + 584);
  swift_release();
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPECConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiConfig);
  v5 = *(_QWORD *)(v0 + 824);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 640);
  v3 = *(_QWORD *)(v0 + 592);
  swift_release();
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPIRConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 640);
  v3 = *(_QWORD *)(v0 + 584);
  swift_release();
  outlined destroy of AspireApiPECConfig(v3, type metadata accessor for AspireApiPECConfig);
  outlined destroy of AspireApiPECConfig(v2, type metadata accessor for AspireApiConfig.OneOf_Config);
  outlined destroy of AspireApiPECConfig(v1, type metadata accessor for AspireApiConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void RequestsManager.fetchStatus(useCase:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_unfair_lock_s *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int EnumCaseMultiPayload;
  uint64_t v80;
  os_unfair_lock_s *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  os_unfair_lock_s *v96;
  _QWORD *v97;
  char v98;
  _QWORD *v99;
  char v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t);
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139[2];

  v1 = v0;
  if ((*(_BYTE *)(v0 + 49) & 1) == 0)
  {
    v134 = v0;
    v8 = *(_QWORD **)(v0 + 712);
    v9 = *(_QWORD *)(v0 + 704);
    v10 = *(_QWORD *)(v1 + 696);
    v11 = *(_QWORD *)(v1 + 688);
    v12 = (uint64_t)v8 + *(_QWORD *)(v1 + 776);
    v13 = v8[3];
    v135 = v8[2];
    swift_beginAccess();
    v14 = v8[4];
    v15 = v8[5];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v12, v9, &demangling cache variable for type metadata for Date?);
    v16 = (uint64_t)v8 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v16, v10, &demangling cache variable for type metadata for Date?);
    v17 = (uint64_t)v8 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v17, v11, &demangling cache variable for type metadata for Date?);
    v18 = objc_allocWithZone((Class)CMLUseCaseStatus);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v14, v15);
    v19 = v135;
    v20 = v13;
    v21 = v14;
    v22 = v15;
    v23 = v9;
    v24 = v10;
    v25 = v11;
    v26 = 1;
LABEL_5:
    v129 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v19, v20, v21, v22, v23, v24, v25, v26);
    swift_release();
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(id))(v134 + 8))(v129);
    return;
  }
  v2 = *(_QWORD *)(v0 + 752);
  v3 = *(_QWORD *)(v0 + 672);
  v4 = *(_QWORD *)(v1 + 568);
  v5 = *(_QWORD *)(v1 + 560);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 576) + 16) + OBJC_IVAR____TtC8CipherML11ConfigCache_configsLock);
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v4;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  closure #1 in ConfigCache.subscript.getter((uint64_t *)(v6 + 16), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  if (!v2)
  {
    v27 = *(_QWORD *)(v1 + 672);
    v28 = *(_QWORD *)(v1 + 656);
    v29 = *(_QWORD *)(v1 + 648);
    swift_task_dealloc();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v27, 1, v29) == 1)
    {
      v30 = *(_QWORD **)(v1 + 712);
      v31 = *(_QWORD *)(v1 + 704);
      v32 = *(_QWORD *)(v1 + 696);
      v33 = *(_QWORD *)(v1 + 688);
      v34 = (uint64_t)v30 + *(_QWORD *)(v1 + 776);
      v35 = v30[3];
      v136 = v30[2];
      swift_beginAccess();
      v36 = v30[4];
      v37 = v30[5];
      v134 = v1;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34, v31, &demangling cache variable for type metadata for Date?);
      v38 = (uint64_t)v30 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
      swift_beginAccess();
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v38, v32, &demangling cache variable for type metadata for Date?);
      v39 = (uint64_t)v30 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
      swift_beginAccess();
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v39, v33, &demangling cache variable for type metadata for Date?);
      objc_allocWithZone((Class)CMLUseCaseStatus);
      swift_bridgeObjectRetain();
      outlined copy of Data?(v36, v37);
      v19 = v136;
      v20 = v35;
      v21 = v36;
      v22 = v37;
      v23 = v31;
      v24 = v32;
      v25 = v33;
      v26 = 2;
      goto LABEL_5;
    }
    outlined init with take of SecretKey(*(_QWORD *)(v1 + 672), *(_QWORD *)(v1 + 664), type metadata accessor for AspireApiConfig);
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiConfig and conformance AspireApiConfig, type metadata accessor for AspireApiConfig, (uint64_t)&protocol conformance descriptor for AspireApiConfig);
    v40 = Message.serializedData(partial:)();
    v41 = *(_QWORD *)(v1 + 712);
    v42 = *(_QWORD *)(v1 + 664);
    v43 = v40;
    v45 = v44;
    v46 = *(_QWORD *)(v1 + 632);
    v47 = *(_QWORD *)(v1 + 624);
    v48 = *(_QWORD *)(v1 + 616);
    swift_beginAccess();
    v49 = *(_QWORD *)(v41 + 32);
    v50 = *(_QWORD *)(v41 + 40);
    *(_QWORD *)(v41 + 32) = v43;
    *(_QWORD *)(v41 + 40) = v45;
    outlined consume of Data?(v49, v50);
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v42, v48, &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v48, 1, v47) == 1)
    {
      v51 = *(_QWORD **)(v1 + 712);
      v52 = *(_QWORD *)(v1 + 704);
      v53 = *(_QWORD *)(v1 + 696);
      v54 = *(_QWORD *)(v1 + 688);
      v137 = *(_QWORD *)(v1 + 664);
      v55 = (uint64_t)v51 + *(_QWORD *)(v1 + 776);
      outlined destroy of AMDPbHEConfig.OneOf_Config?(*(_QWORD *)(v1 + 616), &demangling cache variable for type metadata for AspireApiConfig.OneOf_Config?);
      v56 = v51[3];
      v130 = v51[2];
      v134 = v1;
      v57 = v51[4];
      v58 = v51[5];
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v55, v52, &demangling cache variable for type metadata for Date?);
      v59 = (uint64_t)v51 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
      swift_beginAccess();
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v59, v53, &demangling cache variable for type metadata for Date?);
      v60 = (uint64_t)v51 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
      swift_beginAccess();
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v60, v54, &demangling cache variable for type metadata for Date?);
      objc_allocWithZone((Class)CMLUseCaseStatus);
      swift_bridgeObjectRetain();
      outlined copy of Data?(v57, v58);
      v129 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v130, v56, v57, v58, v52, v53, v54, 3);
      swift_release();
LABEL_11:
      outlined destroy of AspireApiPECConfig(v137, type metadata accessor for AspireApiConfig);
      goto LABEL_6;
    }
    v61 = *(_QWORD *)(v1 + 744);
    v62 = (os_unfair_lock_s *)(v61 + 24);
    v63 = (_QWORD *)(v61 + 16);
    outlined init with take of SecretKey(*(_QWORD *)(v1 + 616), *(_QWORD *)(v1 + 640), type metadata accessor for AspireApiConfig.OneOf_Config);
    os_unfair_lock_lock(v62);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v63, v139);
    os_unfair_lock_unlock(v62);
    v64 = *(_QWORD *)(v139[0] + 40);
    if (*(_QWORD *)(v64 + 16))
    {
      v65 = *(_QWORD *)(v1 + 568);
      v66 = *(_QWORD *)(v1 + 560);
      swift_bridgeObjectRetain();
      v67 = specialized __RawDictionaryStorage.find<A>(_:)(v66, v65);
      if ((v68 & 1) != 0)
      {
        v69 = *(_QWORD *)(v64 + 56) + 48 * v67;
        v70 = *(_QWORD *)v69;
        v71 = *(_QWORD *)(v69 + 8);
        v73 = *(_QWORD *)(v69 + 16);
        v72 = *(_QWORD *)(v69 + 24);
        v74 = *(_QWORD *)(v69 + 32);
        v75 = *(unsigned __int8 *)(v69 + 40);
      }
      else
      {
        v70 = 0;
        v71 = 0;
        v73 = 0;
        v72 = 0;
        v74 = 0;
        v75 = 254;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v70 = 0;
      v71 = 0;
      v73 = 0;
      v72 = 0;
      v74 = 0;
      v75 = 254;
    }
    swift_release();
    v76 = *(_QWORD *)(v1 + 640);
    v77 = *(_QWORD *)(v1 + 608);
    v78 = v77 + *(int *)(*(_QWORD *)(v1 + 600) + 48);
    *(_QWORD *)v77 = v70;
    *(_QWORD *)(v77 + 8) = v71;
    *(_QWORD *)(v77 + 16) = v73;
    *(_QWORD *)(v77 + 24) = v72;
    *(_QWORD *)(v77 + 32) = v74;
    *(_BYTE *)(v77 + 40) = v75;
    outlined init with copy of SecretKey(v76, v78, type metadata accessor for AspireApiConfig.OneOf_Config);
    if (v75 <= 0xFD)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if ((v75 & 0x80) != 0)
      {
        if (EnumCaseMultiPayload != 1)
        {
          v94 = *(_QWORD *)(v1 + 744);
          v95 = *(_QWORD *)(v1 + 592);
          v96 = (os_unfair_lock_s *)(v94 + 24);
          v97 = (_QWORD *)(v94 + 16);
          *(_QWORD *)(v1 + 16) = v70;
          *(_QWORD *)(v1 + 24) = v71;
          *(_BYTE *)(v1 + 32) = v73 & 1;
          *(_QWORD *)(v1 + 40) = v72;
          *(_BYTE *)(v1 + 48) = v74 & 1;
          outlined init with take of SecretKey(v78, v95, type metadata accessor for AspireApiPIRConfig);
          os_unfair_lock_lock(v96);
          closure #1 in OSAllocatedUnfairLock<A>.current.getter(v97, v139);
          os_unfair_lock_unlock(v96);
          v100 = AspireApiPIRConfig.validate(static:useCase:allowList:)((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 560), *(_QWORD *)(v1 + 568), v139[0]);
          swift_release();
          if ((v100 & 1) != 0)
          {
            v101 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v1 + 784) = v101;
            *v101 = v1;
            v101[1] = RequestsManager.fetchStatus(useCase:);
            specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)(*(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 592));
            return;
          }
          v114 = *(_QWORD **)(v1 + 712);
          v115 = *(_QWORD *)(v1 + 704);
          v116 = *(_QWORD *)(v1 + 696);
          v117 = *(_QWORD *)(v1 + 688);
          v134 = v1;
          v137 = *(_QWORD *)(v1 + 664);
          v118 = *(_QWORD *)(v1 + 640);
          v126 = *(_QWORD *)(v1 + 592);
          v119 = (uint64_t)v114 + *(_QWORD *)(v1 + 776);
          v120 = v114[3];
          v128 = v118;
          v133 = v114[2];
          v121 = v114[4];
          v122 = v114[5];
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v119, v115, &demangling cache variable for type metadata for Date?);
          v123 = (uint64_t)v114 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
          swift_beginAccess();
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v123, v116, &demangling cache variable for type metadata for Date?);
          v124 = (uint64_t)v114 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
          swift_beginAccess();
          outlined init with copy of AMDPbHEConfig.OneOf_Config?(v124, v117, &demangling cache variable for type metadata for Date?);
          objc_allocWithZone((Class)CMLUseCaseStatus);
          swift_bridgeObjectRetain();
          outlined copy of Data?(v121, v122);
          v129 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v133, v120, v121, v122, v115, v116, v117, 3);
          swift_release();
          v113 = type metadata accessor for AspireApiPIRConfig;
          goto LABEL_31;
        }
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v80 = *(_QWORD *)(v1 + 744);
        v81 = (os_unfair_lock_s *)(v80 + 24);
        v82 = (_QWORD *)(v80 + 16);
        outlined init with take of SecretKey(v78, *(_QWORD *)(v1 + 584), type metadata accessor for AspireApiPECConfig);
        os_unfair_lock_lock(v81);
        closure #1 in OSAllocatedUnfairLock<A>.current.getter(v82, v139);
        os_unfair_lock_unlock(v81);
        v98 = specialized AspireApiPECConfig.validate(static:useCase:allowList:)(*(_QWORD *)(v1 + 560), *(_QWORD *)(v1 + 568));
        swift_release();
        if ((v98 & 1) != 0)
        {
          v99 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v1 + 808) = v99;
          *v99 = v1;
          v99[1] = RequestsManager.fetchStatus(useCase:);
          specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)(*(_QWORD *)(v1 + 712), *(_QWORD *)(v1 + 584));
          return;
        }
        v102 = *(_QWORD **)(v1 + 712);
        v103 = *(_QWORD *)(v1 + 704);
        v104 = *(_QWORD *)(v1 + 696);
        v105 = *(_QWORD *)(v1 + 688);
        v134 = v1;
        v137 = *(_QWORD *)(v1 + 664);
        v106 = *(_QWORD *)(v1 + 640);
        v126 = *(_QWORD *)(v1 + 584);
        v107 = (uint64_t)v102 + *(_QWORD *)(v1 + 776);
        v108 = v102[3];
        v128 = v106;
        v132 = v102[2];
        v109 = v102[4];
        v110 = v102[5];
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v107, v103, &demangling cache variable for type metadata for Date?);
        v111 = (uint64_t)v102 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
        swift_beginAccess();
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v111, v104, &demangling cache variable for type metadata for Date?);
        v112 = (uint64_t)v102 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
        swift_beginAccess();
        outlined init with copy of AMDPbHEConfig.OneOf_Config?(v112, v105, &demangling cache variable for type metadata for Date?);
        objc_allocWithZone((Class)CMLUseCaseStatus);
        swift_bridgeObjectRetain();
        outlined copy of Data?(v109, v110);
        v129 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v132, v108, v109, v110, v103, v104, v105, 3);
        swift_release();
        v113 = type metadata accessor for AspireApiPECConfig;
LABEL_31:
        outlined destroy of AspireApiPECConfig(v126, v113);
        outlined destroy of AspireApiPECConfig(v128, type metadata accessor for AspireApiConfig.OneOf_Config);
        goto LABEL_11;
      }
    }
    v83 = *(_QWORD **)(v1 + 712);
    v84 = *(_QWORD *)(v1 + 704);
    v85 = *(_QWORD *)(v1 + 696);
    v86 = *(_QWORD *)(v1 + 688);
    v87 = *(_QWORD *)(v1 + 664);
    v125 = *(_QWORD *)(v1 + 640);
    v134 = v1;
    v138 = *(_QWORD *)(v1 + 608);
    v88 = (uint64_t)v83 + *(_QWORD *)(v1 + 776);
    v89 = v83[3];
    v127 = v87;
    v131 = v83[2];
    v90 = v83[4];
    v91 = v83[5];
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v88, v84, &demangling cache variable for type metadata for Date?);
    v92 = (uint64_t)v83 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyGenerationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v92, v85, &demangling cache variable for type metadata for Date?);
    v93 = (uint64_t)v83 + OBJC_IVAR____TtCC8CipherML15RequestsManager23CMLUseCaseStatusBuilder_keyExpirationTime;
    swift_beginAccess();
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v93, v86, &demangling cache variable for type metadata for Date?);
    objc_allocWithZone((Class)CMLUseCaseStatus);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v90, v91);
    v129 = @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(v131, v89, v90, v91, v84, v85, v86, 3);
    swift_release();
    outlined destroy of AspireApiPECConfig(v125, type metadata accessor for AspireApiConfig.OneOf_Config);
    outlined destroy of AspireApiPECConfig(v127, type metadata accessor for AspireApiConfig);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v138, &demangling cache variable for type metadata for (UseCase?, AspireApiConfig.OneOf_Config));
    goto LABEL_6;
  }
}

uint64_t RequestsManager.fetchStatus(useCase:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 792) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 800) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 816) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 824) = a1;
  return swift_task_switch();
}

uint64_t specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v3[5] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v3[6] = swift_task_alloc();
  v4 = type metadata accessor for Date();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v3[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserIdentifier?);
  v3[5] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecretKey?);
  v3[6] = swift_task_alloc();
  v4 = type metadata accessor for Date();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UseCaseGroup?);
  v3[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return swift_task_switch();
}

void specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  _QWORD v51[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 32) + 48);
  *(_QWORD *)(v0 + 136) = v1;
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v51);
  *(_QWORD *)(v0 + 144) = 0;
  os_unfair_lock_unlock(v3);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v51[0] + 48);
  swift_bridgeObjectRetain();
  swift_release();
  v6 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v0 + 152) = v6;
  v7 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v0 + 160) = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v0 + 32);
      v11 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v8);
      v12 = *v11;
      v13 = v11[1];
      *(_QWORD *)(v0 + 168) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(v10 + 32);
      ObjectType = swift_getObjectType();
      v49 = (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v14 + 8) + *(_QWORD *)(v14 + 8));
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 176) = v16;
      *v16 = v0;
      v16[1] = specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:);
      v49(*(_QWORD *)(v0 + 40), v12, v13, ObjectType, v14);
      return;
    }
    swift_bridgeObjectRelease();
  }
  v17 = swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 56);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = *(void (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 168);
  v21(v17);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  v23 = v22(v18, 1, v19);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v18, &demangling cache variable for type metadata for Date?);
  if (v23 == 1)
  {
    v24 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 224))(4);
LABEL_17:
    v50 = v24;
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(uint64_t))(v0 + 8))(v50);
    return;
  }
  v25 = *(os_unfair_lock_s **)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 144);
  v27 = v25 + 6;
  v28 = v25 + 4;
  os_unfair_lock_lock(v25 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v28, v51);
  os_unfair_lock_unlock(v27);
  if (!v26)
  {
    v29 = *(_QWORD *)(v0 + 96);
    AllowList.group(useCase:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v29);
    swift_release();
    v30 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30) == 1)
    {
      v31 = *(_QWORD *)(v0 + 96);
      v32 = &demangling cache variable for type metadata for UseCaseGroup?;
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 120);
      v34 = *(_QWORD *)(v0 + 56);
      v35 = outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 96), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v21(v35);
      if (v22(v33, 1, v34) != 1)
      {
        v36 = *(_QWORD *)(v0 + 112);
        v37 = *(_QWORD *)(v0 + 80);
        v39 = *(_QWORD *)(v0 + 64);
        v38 = *(_QWORD *)(v0 + 72);
        v40 = *(_QWORD *)(v0 + 56);
        v41 = *(_QWORD *)(v0 + 32);
        v42 = *(_QWORD *)(v0 + 16);
        (*(void (**)(_QWORD, _QWORD, uint64_t))(v39 + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 120), v40);
        Date.addingTimeInterval(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v36, v37, v40);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v40);
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 200))(v36);
        (*(void (**)(uint64_t))(v41 + 80))(v43);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
        v44 = dispatch thunk of static Comparable.< infix(_:_:)();
        v45 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v45(v38, v40);
        v47 = *(_QWORD *)(v0 + 80);
        v46 = *(_QWORD *)(v0 + 88);
        v48 = *(_QWORD *)(v0 + 56);
        if ((v44 & 1) == 0)
        {
          v50 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 224))(5);
          v45(v47, v48);
          v45(v46, v48);
          goto LABEL_18;
        }
        v45(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
        v45(v46, v48);
        goto LABEL_16;
      }
      v32 = &demangling cache variable for type metadata for Date?;
      v31 = *(_QWORD *)(v0 + 120);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, v32);
LABEL_16:
    v24 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 224))(6);
    goto LABEL_17;
  }
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  _QWORD v51[2];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 32) + 48);
  *(_QWORD *)(v0 + 136) = v1;
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v2, v51);
  *(_QWORD *)(v0 + 144) = 0;
  os_unfair_lock_unlock(v3);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v51[0] + 48);
  swift_bridgeObjectRetain();
  swift_release();
  v6 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v0 + 152) = v6;
  v7 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v0 + 160) = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v0 + 32);
      v11 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v8);
      v12 = *v11;
      v13 = v11[1];
      *(_QWORD *)(v0 + 168) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(v10 + 32);
      ObjectType = swift_getObjectType();
      v49 = (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v14 + 8) + *(_QWORD *)(v14 + 8));
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 176) = v16;
      *v16 = v0;
      v16[1] = specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:);
      v49(*(_QWORD *)(v0 + 40), v12, v13, ObjectType, v14);
      return;
    }
    swift_bridgeObjectRelease();
  }
  v17 = swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 56);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = *(void (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 168);
  v21(v17);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  v23 = v22(v18, 1, v19);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v18, &demangling cache variable for type metadata for Date?);
  if (v23 == 1)
  {
    v24 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 224))(4);
LABEL_17:
    v50 = v24;
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(uint64_t))(v0 + 8))(v50);
    return;
  }
  v25 = *(os_unfair_lock_s **)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 144);
  v27 = v25 + 6;
  v28 = v25 + 4;
  os_unfair_lock_lock(v25 + 6);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v28, v51);
  os_unfair_lock_unlock(v27);
  if (!v26)
  {
    v29 = *(_QWORD *)(v0 + 96);
    AllowList.group(useCase:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v29);
    swift_release();
    v30 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30) == 1)
    {
      v31 = *(_QWORD *)(v0 + 96);
      v32 = &demangling cache variable for type metadata for UseCaseGroup?;
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 120);
      v34 = *(_QWORD *)(v0 + 56);
      v35 = outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 96), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v21(v35);
      if (v22(v33, 1, v34) != 1)
      {
        v36 = *(_QWORD *)(v0 + 112);
        v37 = *(_QWORD *)(v0 + 80);
        v39 = *(_QWORD *)(v0 + 64);
        v38 = *(_QWORD *)(v0 + 72);
        v40 = *(_QWORD *)(v0 + 56);
        v41 = *(_QWORD *)(v0 + 32);
        v42 = *(_QWORD *)(v0 + 16);
        (*(void (**)(_QWORD, _QWORD, uint64_t))(v39 + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 120), v40);
        Date.addingTimeInterval(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v36, v37, v40);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v40);
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 200))(v36);
        (*(void (**)(uint64_t))(v41 + 80))(v43);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
        v44 = dispatch thunk of static Comparable.< infix(_:_:)();
        v45 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v45(v38, v40);
        v47 = *(_QWORD *)(v0 + 80);
        v46 = *(_QWORD *)(v0 + 88);
        v48 = *(_QWORD *)(v0 + 56);
        if ((v44 & 1) == 0)
        {
          v50 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 224))(5);
          v45(v47, v48);
          v45(v46, v48);
          goto LABEL_18;
        }
        v45(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
        v45(v46, v48);
        goto LABEL_16;
      }
      v32 = &demangling cache variable for type metadata for Date?;
      v31 = *(_QWORD *)(v0 + 120);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, v32);
LABEL_16:
    v24 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 224))(6);
    goto LABEL_17;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for UserIdentifier();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    v3 = &demangling cache variable for type metadata for UserIdentifier?;
    v4 = v1;
LABEL_10:
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v4, v3);
    v18 = 1;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v1 + *(int *)(v2 + 24));
  swift_bridgeObjectRetain();
  outlined destroy of AspireApiPECConfig(v1, (uint64_t (*)(_QWORD))type metadata accessor for UserIdentifier);
  v7 = *(_QWORD *)(v5 + 32);
  v8 = *(_QWORD *)(v5 + 40);
  if (*(_QWORD *)(v6 + 16))
  {
    outlined copy of Data._Representation(v7, v8);
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    v10 = *(_QWORD *)(v0 + 48);
    if ((v11 & 1) != 0)
    {
      v12 = v9;
      v13 = *(_QWORD *)(v6 + 56);
      v14 = type metadata accessor for SecretKey();
      v15 = *(_QWORD *)(v14 - 8);
      outlined init with copy of SecretKey(v13 + *(_QWORD *)(v15 + 72) * v12, v10, (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
    }
    else
    {
      v14 = type metadata accessor for SecretKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
    }
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 48);
    v14 = type metadata accessor for SecretKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v16, 1, 1, v14);
    outlined copy of Data._Representation(v7, v8);
  }
  v17 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v7, v8);
  type metadata accessor for SecretKey();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v17, 1, v14) == 1)
  {
    v4 = *(_QWORD *)(v0 + 48);
    v3 = &demangling cache variable for type metadata for SecretKey?;
    goto LABEL_10;
  }
  outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 48), (uint64_t (*)(_QWORD))type metadata accessor for SecretKey);
  Date.init(timeIntervalSince1970:)();
  v18 = 0;
LABEL_12:
  v19 = *(_QWORD *)(v0 + 104);
  v20 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 56))(v19, v18, 1, *(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 248))(v19);
  swift_release();
  v21 = outlined destroy of AMDPbHEConfig.OneOf_Config?(v19, &demangling cache variable for type metadata for Date?);
  v22 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_QWORD *)(v0 + 64);
  v25 = *(void (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 168);
  v25(v21);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v20) = v26(v22, 1, v23);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v22, &demangling cache variable for type metadata for Date?);
  if ((_DWORD)v20 != 1)
  {
    v28 = *(os_unfair_lock_s **)(v0 + 136);
    v29 = *(_QWORD *)(v0 + 144);
    v30 = v28 + 6;
    v31 = v28 + 4;
    os_unfair_lock_lock(v28 + 6);
    closure #1 in OSAllocatedUnfairLock<A>.current.getter(v31, &v53);
    os_unfair_lock_unlock(v30);
    if (v29)
      return;
    v32 = *(_QWORD *)(v0 + 96);
    AllowList.group(useCase:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v32);
    swift_release();
    v33 = type metadata accessor for UseCaseGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v32, 1, v33) == 1)
    {
      v34 = *(_QWORD *)(v0 + 96);
      v35 = &demangling cache variable for type metadata for UseCaseGroup?;
    }
    else
    {
      v36 = *(_QWORD *)(v0 + 120);
      v37 = *(_QWORD *)(v0 + 56);
      v38 = outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 96), (uint64_t (*)(_QWORD))type metadata accessor for UseCaseGroup);
      v25(v38);
      if (v26(v36, 1, v37) != 1)
      {
        v39 = *(_QWORD *)(v0 + 112);
        v40 = *(_QWORD *)(v0 + 80);
        v42 = *(_QWORD *)(v0 + 64);
        v41 = *(_QWORD *)(v0 + 72);
        v43 = *(_QWORD *)(v0 + 56);
        v44 = *(_QWORD *)(v0 + 32);
        v45 = *(_QWORD *)(v0 + 16);
        (*(void (**)(_QWORD, _QWORD, uint64_t))(v42 + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 120), v43);
        Date.addingTimeInterval(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v39, v40, v43);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v43);
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 200))(v39);
        (*(void (**)(uint64_t))(v44 + 80))(v46);
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
        v47 = dispatch thunk of static Comparable.< infix(_:_:)();
        v48 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v48(v41, v43);
        v50 = *(_QWORD *)(v0 + 80);
        v49 = *(_QWORD *)(v0 + 88);
        v51 = *(_QWORD *)(v0 + 56);
        if ((v47 & 1) == 0)
        {
          v52 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 224))(5);
          v48(v50, v51);
          v48(v49, v51);
          goto LABEL_22;
        }
        v48(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
        v48(v49, v51);
        goto LABEL_20;
      }
      v35 = &demangling cache variable for type metadata for Date?;
      v34 = *(_QWORD *)(v0 + 120);
    }
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v34, v35);
LABEL_20:
    v27 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 224))(6);
    goto LABEL_21;
  }
  v27 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 16) + 224))(4);
LABEL_21:
  v52 = v27;
LABEL_22:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(uint64_t))(v0 + 8))(v52);
}

uint64_t specialized RequestsManager.fetchStatus<A>(status:dynamicConfig:)()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

id @nonobjc CMLUseCaseStatus.init(useCase:serializedDynamicConfig:lastUsed:keyGenerationTime:keyExpirationTime:status:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  Class v18;
  Class v19;
  Class v20;
  id v21;
  void *v23;

  v13 = (void *)MEMORY[0x23B821F68]();
  swift_bridgeObjectRelease();
  if (a4 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a3, a4);
  }
  v15 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = 0;
  if (v17(a5, 1, v15) != 1)
  {
    v18 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a5, v15);
  }
  if (v17(a6, 1, v15) == 1)
  {
    v19 = 0;
  }
  else
  {
    v19 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a6, v15);
  }
  if (v17(a7, 1, v15) == 1)
  {
    v20 = 0;
  }
  else
  {
    v20 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a7, v15);
  }
  v21 = objc_msgSend(v23, sel_initWithUseCase_serializedDynamicConfig_lastUsed_keyGenerationTime_keyExpirationTime_status_, v13, isa, v18, v19, v20, a8);

  return v21;
}

uint64_t sub_237C4C680()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RequestsManager.queryStatus(for:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v5 = (_QWORD *)swift_task_alloc();
  v4[3] = v5;
  *v5 = v4;
  v5[1] = closure #1 in RequestsManager.queryStatus(for:options:);
  return RequestsManager.handleOptions(clientConfig:options:)(v2, v3);
}

uint64_t sub_237C4C734@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_237C4C764(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(uint64_t, unint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(_QWORD **)a2 + 128);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t sub_237C4C7AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
}

uint64_t sub_237C4C7D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
}

uint64_t sub_237C4C804(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
}

uint64_t ObjC metadata update function for RequestsManager.CMLUseCaseStatusBuilder()
{
  return type metadata accessor for RequestsManager.CMLUseCaseStatusBuilder();
}

uint64_t type metadata accessor for RequestsManager.CMLUseCaseStatusBuilder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RequestsManager.CMLUseCaseStatusBuilder;
  if (!type metadata singleton initialization cache for RequestsManager.CMLUseCaseStatusBuilder)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for RequestsManager.CMLUseCaseStatusBuilder()
{
  unint64_t v0;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for RequestsManager.CMLUseCaseStatusBuilder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.serializedDynamicConfig.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.lastUsed.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.lastUsed.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.lastUsed.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyGenerationTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.keyExpirationTime.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.__allocating_init(useCase:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.build(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.withDynamicConfig(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.withLastUsed(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of RequestsManager.CMLUseCaseStatusBuilder.withKeyGenerationTime(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

void type metadata accessor for Date?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
  }
}

uint64_t AspireApiRequest.amd()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v50 = a1;
  v56 = type metadata accessor for AspireApiPIRRequest(0);
  MEMORY[0x24BDAC7A8](v56);
  v58 = (uint64_t)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for BinaryDecodingOptions();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v54 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)&v48 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v48 - v11;
  v59 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v13 = *(_QWORD *)(v59 - 8);
  v14 = MEMORY[0x24BDAC7A8](v59);
  v16 = (uint64_t *)((char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v18 = (uint64_t *)((char *)&v48 - v17);
  v55 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v19 = MEMORY[0x24BDAC7A8](v55);
  v52 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v51 = (char *)&v48 - v21;
  v22 = type metadata accessor for AspireApiPECRequest(0);
  MEMORY[0x24BDAC7A8](v22);
  v57 = (uint64_t)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(int *)(type metadata accessor for AspireApiRequest(0) + 20);
  v49 = v1;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v1 + v27, (uint64_t)v26, &demangling cache variable for type metadata for AspireApiRequest.OneOf_Request?);
  v28 = type metadata accessor for AspireApiRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v26, 1, v28) == 1)
  {
    if (one-time initialization token for networking != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.networking);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_237BC8000, v30, v31, "query has neither PecRequest nor PirRequest", v32, 2u);
      MEMORY[0x23B822DA8](v32, -1, -1);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v34 = v57;
      outlined init with take of SecretKey((uint64_t)v26, v57, type metadata accessor for AspireApiPECRequest);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v34 + *(int *)(v22 + 32), (uint64_t)v12, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v59) == 1)
      {
        *v18 = 0;
        v18[1] = 0;
        v18[2] = 0xC000000000000000;
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      }
      else
      {
        outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v18, type metadata accessor for AspireApiEvaluationKeyMetadata);
      }
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
      v36 = v63;
      Message.serializedData(partial:)();
      if (v36)
      {
        v37 = type metadata accessor for AspireApiEvaluationKeyMetadata;
      }
      else
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v18, type metadata accessor for AspireApiEvaluationKeyMetadata);
        v62 = 0;
        v60 = 0u;
        v61 = 0u;
        BinaryDecodingOptions.init()();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
        v18 = v51;
        Message.init(serializedData:extensions:partial:options:)();
        v44 = type metadata accessor for AMDPbHEQuery(0);
        MEMORY[0x24BDAC7A8](v44);
        *(&v48 - 4) = v49;
        *(&v48 - 3) = v34;
        *(&v48 - 2) = (uint64_t)v18;
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, v45, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
        static Message.with(_:)();
        v37 = type metadata accessor for AMDPbEvaluationKeyMetadata;
      }
      outlined destroy of AspireApiPECConfig((uint64_t)v18, v37);
      v41 = type metadata accessor for AspireApiPECRequest;
      v42 = v34;
    }
    else
    {
      v35 = v58;
      outlined init with take of SecretKey((uint64_t)v26, v58, type metadata accessor for AspireApiPIRRequest);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v35 + *(int *)(v56 + 32), (uint64_t)v10, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v59) == 1)
      {
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0xC000000000000000;
        UnknownStorage.init()();
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
      }
      else
      {
        outlined init with take of SecretKey((uint64_t)v10, (uint64_t)v16, type metadata accessor for AspireApiEvaluationKeyMetadata);
      }
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, type metadata accessor for AspireApiEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
      v38 = v63;
      Message.serializedData(partial:)();
      if (v38)
      {
        v39 = type metadata accessor for AspireApiEvaluationKeyMetadata;
        v40 = (uint64_t)v16;
      }
      else
      {
        outlined destroy of AspireApiPECConfig((uint64_t)v16, type metadata accessor for AspireApiEvaluationKeyMetadata);
        v62 = 0;
        v60 = 0u;
        v61 = 0u;
        BinaryDecodingOptions.init()();
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKeyMetadata and conformance AMDPbEvaluationKeyMetadata, type metadata accessor for AMDPbEvaluationKeyMetadata, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKeyMetadata);
        v43 = v52;
        Message.init(serializedData:extensions:partial:options:)();
        v46 = type metadata accessor for AMDPbHEQuery(0);
        MEMORY[0x24BDAC7A8](v46);
        *(&v48 - 4) = v49;
        *(&v48 - 3) = v35;
        *(&v48 - 2) = (uint64_t)v43;
        lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbHEQuery and conformance AMDPbHEQuery, v47, (uint64_t)&protocol conformance descriptor for AMDPbHEQuery);
        static Message.with(_:)();
        v39 = type metadata accessor for AMDPbEvaluationKeyMetadata;
        v40 = (uint64_t)v43;
      }
      outlined destroy of AspireApiPECConfig(v40, v39);
      v41 = type metadata accessor for AspireApiPIRRequest;
      v42 = v35;
    }
    return outlined destroy of AspireApiPECConfig(v42, v41);
  }
}

uint64_t closure #1 in AspireApiRequest.amd()(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *a2;
  v11 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v12;
  a1[1] = v11;
  type metadata accessor for AMDPbPECQuery(0);
  v17 = a3;
  v18 = a4;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPECQuery and conformance AMDPbPECQuery, type metadata accessor for AMDPbPECQuery, (uint64_t)&protocol conformance descriptor for AMDPbPECQuery);
  static Message.with(_:)();
  v13 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 0, 1, v13);
  v14 = type metadata accessor for AMDPbHEQuery(0);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, (uint64_t)a1 + *(int *)(v14 + 20), &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
}

uint64_t closure #1 in closure #1 in AspireApiRequest.amd()(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  char *v30;

  v29 = a3;
  v6 = type metadata accessor for AMDPbEvaluationKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v30 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a2;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v13;
  v15 = a2[1];
  if (*(_QWORD *)(v15 + 16))
  {
    v16 = v15 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v28 = v7;
    outlined init with copy of SecretKey(v16, (uint64_t)v12, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    v17 = type metadata accessor for AMDPbPECQuery(0);
    v18 = *(int *)(v17 + 28);
    v27[1] = v3;
    v19 = (uint64_t)a1 + v18;
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)a1 + v18, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
    outlined init with take of SecretKey((uint64_t)v12, v19, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
    v20 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
    MEMORY[0x24BDAC7A8](v20);
    v27[-2] = v29;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
    v21 = (uint64_t)v30;
    static Message.with(_:)();
    v22 = (uint64_t)a1 + *(int *)(v17 + 32);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v22, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
    outlined init with take of SecretKey(v21, v22, type metadata accessor for AMDPbEvaluationKey);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v22, 0, 1, v6);
    v23 = a2[2];
    v24 = a2[3];
    v25 = a1[1];
    v26 = a1[2];
    outlined copy of Data._Representation(v23, v24);
    result = outlined consume of Data._Representation(v25, v26);
    a1[1] = v23;
    a1[2] = v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in AspireApiRequest.amd()(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *a2;
  v12 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v13;
  a1[1] = v12;
  type metadata accessor for AMDPbPIRQuery(0);
  v18 = a3;
  v19 = a4;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbPIRQuery and conformance AMDPbPIRQuery, type metadata accessor for AMDPbPIRQuery, (uint64_t)&protocol conformance descriptor for AMDPbPIRQuery);
  result = static Message.with(_:)();
  if (!v4)
  {
    v15 = type metadata accessor for AMDPbHEQuery.OneOf_Query(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 0, 1, v15);
    v16 = type metadata accessor for AMDPbHEQuery(0);
    return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, (uint64_t)a1 + *(int *)(v16 + 20), &demangling cache variable for type metadata for AMDPbHEQuery.OneOf_Query?);
  }
  return result;
}

uint64_t closure #1 in closure #2 in AspireApiRequest.amd()(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v33 = a3;
  v5 = type metadata accessor for AMDPbEvaluationKey(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AspirePirEncryptedIndices(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v33 - v16;
  v18 = *a2;
  v38 = a1;
  *a1 = v18;
  v19 = *(int *)(type metadata accessor for AspireApiPIRRequest(0) + 28);
  v37 = a2;
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + v19, (uint64_t)v10, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    *v15 = MEMORY[0x24BEE4AF8];
    v15[1] = 0;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v10, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v10, (uint64_t)v15, type metadata accessor for AspirePirEncryptedIndices);
  }
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspirePirEncryptedIndices and conformance AspirePirEncryptedIndices, type metadata accessor for AspirePirEncryptedIndices, (uint64_t)&protocol conformance descriptor for AspirePirEncryptedIndices);
  v20 = v42;
  Message.serializedData(partial:)();
  if (v20)
    return outlined destroy of AspireApiPECConfig((uint64_t)v15, type metadata accessor for AspirePirEncryptedIndices);
  outlined destroy of AspireApiPECConfig((uint64_t)v15, type metadata accessor for AspirePirEncryptedIndices);
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  BinaryDecodingOptions.init()();
  Message.init(serializedData:extensions:partial:options:)();
  v22 = type metadata accessor for AMDPbPIRQuery(0);
  v23 = v38;
  v24 = (uint64_t)v38 + *(int *)(v22 + 28);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v24, &demangling cache variable for type metadata for AspirePirEncryptedIndices?);
  outlined init with take of SecretKey((uint64_t)v17, v24, type metadata accessor for AspirePirEncryptedIndices);
  v25 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v24, 0, 1, v11);
  MEMORY[0x24BDAC7A8](v25);
  *(&v33 - 2) = v33;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AMDPbEvaluationKey and conformance AMDPbEvaluationKey, type metadata accessor for AMDPbEvaluationKey, (uint64_t)&protocol conformance descriptor for AMDPbEvaluationKey);
  v26 = (uint64_t)v34;
  v27 = v36;
  static Message.with(_:)();
  v28 = (uint64_t)v23 + *(int *)(v22 + 32);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v28, &demangling cache variable for type metadata for AMDPbEvaluationKey?);
  outlined init with take of SecretKey(v26, v28, type metadata accessor for AMDPbEvaluationKey);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v28, 0, 1, v27);
  v29 = *((_QWORD *)v37 + 1);
  v30 = *((_QWORD *)v37 + 2);
  v31 = *((_QWORD *)v23 + 1);
  v32 = *((_QWORD *)v23 + 2);
  outlined copy of Data._Representation(v29, v30);
  result = outlined consume of Data._Representation(v31, v32);
  *((_QWORD *)v23 + 1) = v29;
  *((_QWORD *)v23 + 2) = v30;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in AspireApiRequest.amd()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AMDPbEvaluationKeyMetadata(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SecretKey(a2, (uint64_t)v7, type metadata accessor for AMDPbEvaluationKeyMetadata);
  v8 = a1 + *(int *)(type metadata accessor for AMDPbEvaluationKey(0) + 20);
  outlined destroy of AMDPbHEConfig.OneOf_Config?(v8, &demangling cache variable for type metadata for AMDPbEvaluationKeyMetadata?);
  outlined init with take of SecretKey((uint64_t)v7, v8, type metadata accessor for AMDPbEvaluationKeyMetadata);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AMDPbHEResponse.validateSuccessReponse()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _BYTE v31[4];
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for AMDPbHEResponse(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v31[-v8];
  if (!*v2)
    return outlined init with copy of SecretKey((uint64_t)v2, a1, type metadata accessor for AMDPbHEResponse);
  if (one-time initialization token for networking != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.networking);
  outlined init with copy of SecretKey((uint64_t)v2, (uint64_t)v9, type metadata accessor for AMDPbHEResponse);
  outlined init with copy of SecretKey((uint64_t)v2, (uint64_t)v7, type metadata accessor for AMDPbHEResponse);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    v14 = swift_slowAlloc();
    v32 = v13;
    v15 = v14;
    v33 = swift_slowAlloc();
    v36 = v33;
    *(_DWORD *)v15 = 136446466;
    v16 = v9[8];
    v34 = *(_QWORD *)v9;
    v35 = v16;
    v17 = String.init<A>(describing:)();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AMDPbHEResponse);
    *(_WORD *)(v15 + 12) = 2082;
    v19 = swift_bridgeObjectRetain();
    v20 = MEMORY[0x23B822070](v19, MEMORY[0x24BEE0D00]);
    v22 = v21;
    swift_bridgeObjectRelease();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbHEResponse);
    _os_log_impl(&dword_237BC8000, v11, (os_log_type_t)v32, "AMDPbHEResponse has non-success status '%{public}s', with error '%{public}s'", (uint8_t *)v15, 0x16u);
    v23 = v33;
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v23, -1, -1);
    MEMORY[0x23B822DA8](v15, -1, -1);
  }
  else
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v9, type metadata accessor for AMDPbHEResponse);
    outlined destroy of AspireApiPECConfig((uint64_t)v7, type metadata accessor for AMDPbHEResponse);
  }

  v25 = (_QWORD *)v2[3];
  if (v25[2] == 1)
  {
    v26 = v25[4];
    v27 = v25[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = swift_bridgeObjectRetain();
    v26 = MEMORY[0x23B822070](v28, MEMORY[0x24BEE0D00]);
    v27 = v29;
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  *v30 = v26;
  v30[1] = v27;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t AMDPbHEResponse.validateAPICode(expected:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v7 = type metadata accessor for AMDPbHEResponse(0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v3 + *(int *)(v8 + 36);
  if (*(_BYTE *)(v11 + 9))
    v12 = 0;
  else
    v12 = *(_QWORD *)v11;
  if ((a2 & 1) != 0)
    __asm { BR              X10 }
  if (v12 == a1)
    return outlined init with copy of SecretKey(v3, a3, type metadata accessor for AMDPbHEResponse);
  if (one-time initialization token for networking != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.networking);
  outlined init with copy of SecretKey(v3, (uint64_t)v10, type metadata accessor for AMDPbHEResponse);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v26 = v17;
    *(_DWORD *)v16 = 136446466;
    v18 = v10[8];
    v24 = *(_QWORD *)v10;
    v25 = v18;
    v19 = String.init<A>(describing:)();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AMDPbHEResponse);
    *(_WORD *)(v16 + 12) = 2082;
    v24 = a1;
    v25 = a2 & 1;
    v21 = String.init<A>(describing:)();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_237BC8000, v14, v15, "AMDPbHEResponse has incorrect apiCode '%{public}s', expected '%{public}s'", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v17, -1, -1);
    MEMORY[0x23B822DA8](v16, -1, -1);
  }
  else
  {
    outlined destroy of AspireApiPECConfig((uint64_t)v10, type metadata accessor for AMDPbHEResponse);
  }

  type metadata accessor for CipherMLError();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t AMDPbHEReply.aspire()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  _QWORD v22[2];

  v1 = type metadata accessor for AMDPbPIRReply(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AMDPbPECReply(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?(v0, (uint64_t)v9, &demangling cache variable for type metadata for AMDPbHEReply.OneOf_Reply?);
  v10 = type metadata accessor for AMDPbHEReply.OneOf_Reply(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    if (one-time initialization token for networking != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.networking);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_237BC8000, v12, v13, "Response is neither pecReply nor pirReply", v14, 2u);
      MEMORY[0x23B822DA8](v14, -1, -1);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v6, type metadata accessor for AMDPbPECReply);
      v16 = type metadata accessor for AspireApiResponse(0);
      MEMORY[0x24BDAC7A8](v16);
      v22[-2] = v6;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, v17, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
      static Message.with(_:)();
      v18 = (uint64_t)v6;
      v19 = type metadata accessor for AMDPbPECReply;
    }
    else
    {
      outlined init with take of SecretKey((uint64_t)v9, (uint64_t)v3, type metadata accessor for AMDPbPIRReply);
      v20 = type metadata accessor for AspireApiResponse(0);
      MEMORY[0x24BDAC7A8](v20);
      v22[-2] = v3;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiResponse and conformance AspireApiResponse, v21, (uint64_t)&protocol conformance descriptor for AspireApiResponse);
      static Message.with(_:)();
      v18 = (uint64_t)v3;
      v19 = type metadata accessor for AMDPbPIRReply;
    }
    return outlined destroy of AspireApiPECConfig(v18, v19);
  }
}

uint64_t closure #1 in AMDPbHEReply.aspire()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AspireApiPECResponse(0);
  v10 = a2;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECResponse and conformance AspireApiPECResponse, type metadata accessor for AspireApiPECResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECResponse);
  static Message.with(_:)();
  v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

uint64_t closure #1 in closure #1 in AMDPbHEReply.aspire()(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = type metadata accessor for AMDPbPECShardReply(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AspireApiPECShardResponse(0);
  v10 = *(_QWORD *)(v9 - 8);
  v26 = v9;
  v27 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a2;
  v14 = *(_QWORD *)(*a2 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  if (v14)
  {
    v28 = v2;
    v24 = a1;
    v29 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v16 = *(unsigned __int8 *)(v6 + 80);
    v23 = v13;
    v17 = v13 + ((v16 + 32) & ~v16);
    v25 = *(_QWORD *)(v6 + 72);
    do
    {
      v18 = outlined init with copy of SecretKey(v17, (uint64_t)v8, type metadata accessor for AMDPbPECShardReply);
      MEMORY[0x24BDAC7A8](v18);
      *(&v23 - 2) = (uint64_t)v8;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, type metadata accessor for AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
      v19 = v28;
      static Message.with(_:)();
      v28 = v19;
      outlined destroy of AspireApiPECConfig((uint64_t)v8, type metadata accessor for AMDPbPECShardReply);
      v15 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v29;
      }
      v21 = *(_QWORD *)(v15 + 16);
      v20 = *(_QWORD *)(v15 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v15 = v29;
      }
      *(_QWORD *)(v15 + 16) = v21 + 1;
      outlined init with take of SecretKey((uint64_t)v12, v15+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v21, type metadata accessor for AspireApiPECShardResponse);
      v17 += v25;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    a1 = v24;
  }
  result = swift_bridgeObjectRelease();
  *a1 = v15;
  return result;
}

uint64_t AMDPbPECShardReply.aspire()()
{
  type metadata accessor for AspireApiPECShardResponse(0);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPECShardResponse and conformance AspireApiPECShardResponse, type metadata accessor for AspireApiPECShardResponse, (uint64_t)&protocol conformance descriptor for AspireApiPECShardResponse);
  return static Message.with(_:)();
}

uint64_t closure #2 in AMDPbHEReply.aspire()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AspireApiPIRResponse(0);
  v10 = a2;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiPIRResponse and conformance AspireApiPIRResponse, type metadata accessor for AspireApiPIRResponse, (uint64_t)&protocol conformance descriptor for AspireApiPIRResponse);
  static Message.with(_:)();
  v7 = type metadata accessor for AspireApiResponse.OneOf_Response(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  return outlined assign with take of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, a1, &demangling cache variable for type metadata for AspireApiResponse.OneOf_Response?);
}

uint64_t closure #1 in AMDPbPECShardReply.aspire()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AspireSimilaritySerializedCiphertextMatrix>);
  v7 = type metadata accessor for AspireSimilaritySerializedCiphertextMatrix(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_237D540E0;
  v11 = (_QWORD *)(v10 + v9);
  v12 = type metadata accessor for AMDPbPECShardReply(0);
  outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)a2 + *(int *)(v12 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    *v11 = 0;
    v11[1] = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v13 = (char *)v11 + *(int *)(v7 + 32);
    v14 = type metadata accessor for AspireSimilarityPlaintextPacking(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v6, &demangling cache variable for type metadata for AspireSimilaritySerializedCiphertextMatrix?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v6, (uint64_t)v11, type metadata accessor for AspireSimilaritySerializedCiphertextMatrix);
  }
  swift_bridgeObjectRelease();
  *a1 = v10;
  v15 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = v15;
  v16 = a2[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  a1[2] = v16;
  return result;
}

uint64_t partial apply for closure #2 in AspireApiRequest.amd()(_QWORD *a1)
{
  uint64_t v1;

  return closure #2 in AspireApiRequest.amd()(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #1 in AspireApiRequest.amd()(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in AspireApiRequest.amd()(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #2 in AMDPbHEReply.aspire()(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in AMDPbHEReply.aspire()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in AMDPbHEReply.aspire()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AMDPbHEReply.aspire()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in AMDPbPECShardReply.aspire()(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in AMDPbPECShardReply.aspire()(a1, *(uint64_t **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in AMDPbHEReply.aspire()(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in AMDPbHEReply.aspire()(a1, *(uint64_t **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #2 in AMDPbHEReply.aspire()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = **(_QWORD **)(v1 + 16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in AspireApiRequest.amd()(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in AspireApiRequest.amd()(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #2 in AspireApiRequest.amd()(_DWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in AspireApiRequest.amd()(a1, *(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in AspireApiRequest.amd()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in AspireApiRequest.amd()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t closure #1 in AMDPbPECShardReply.aspire()partial apply(uint64_t *a1)
{
  return partial apply for closure #1 in AMDPbPECShardReply.aspire()(a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in AspireApiRequest.amd()(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #2 in AspireApiRequest.amd()(a1);
}

_QWORD *RotationTask.__allocating_init(configCache:keyStorage:allowListLock:activeUseCaseTracker:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;

  v14 = (_QWORD *)swift_allocObject();
  swift_defaultActor_initialize();
  v14[14] = a1;
  v14[15] = a2;
  v14[16] = a3;
  v14[17] = a4;
  v14[18] = a5;
  v14[19] = a6;
  v14[20] = a7;
  return v14;
}

uint64_t RotationTask.configCache.getter()
{
  return swift_retain();
}

uint64_t RotationTask.keyStorage.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RotationTask.allowListLock.getter()
{
  return swift_retain();
}

uint64_t RotationTask.activeUseCaseTracker.getter()
{
  return swift_retain();
}

uint64_t RotationTask.currentTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_retain();
  return v1;
}

uint64_t RotationTask.keyRotation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = (_QWORD *)(v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + 24);
  swift_retain();
  v11 = *(_OWORD *)(v1 + 120);
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v5);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v4, &v12);
  os_unfair_lock_unlock(v5);
  v6 = v12;
  v7 = *(_QWORD *)(v1 + 160);
  type metadata accessor for KeyRotation();
  v8 = swift_allocObject();
  v10 = *(_OWORD *)(v1 + 144);
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(_QWORD *)(v8 + 216) = 0;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_QWORD *)(v8 + 112) = v2;
  *(_OWORD *)(v8 + 120) = v11;
  *(_QWORD *)(v8 + 136) = v6;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 176) = 0;
  *(_OWORD *)(v8 + 144) = v10;
  *(_QWORD *)(v8 + 160) = v7;
  return v8;
}

uint64_t (*default argument 4 of RotationTask.init(configCache:keyStorage:allowListLock:activeUseCaseTracker:currentTime:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

_QWORD *RotationTask.init(configCache:keyStorage:allowListLock:activeUseCaseTracker:currentTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  swift_defaultActor_initialize();
  v7[14] = a1;
  v7[15] = a2;
  v7[16] = a3;
  v7[17] = a4;
  v7[18] = a5;
  v7[19] = a6;
  v7[20] = a7;
  return v7;
}

uint64_t RotationTask.run()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 + 112);
  v13 = *(_OWORD *)(v1 + 120);
  v3 = *(_QWORD *)(v1 + 136);
  v4 = (_QWORD *)(v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + 24);
  swift_retain();
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v5);
  closure #1 in OSAllocatedUnfairLock<A>.current.getter(v4, &v14);
  v6 = v0[2];
  os_unfair_lock_unlock(v5);
  v7 = v14;
  v8 = *(_QWORD *)(v6 + 160);
  type metadata accessor for KeyRotation();
  v9 = swift_allocObject();
  v12 = *(_OWORD *)(v6 + 144);
  v0[3] = v9;
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(_QWORD *)(v9 + 216) = 0;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_QWORD *)(v9 + 112) = v2;
  *(_OWORD *)(v9 + 120) = v13;
  *(_QWORD *)(v9 + 136) = v7;
  *(_QWORD *)(v9 + 168) = 0;
  *(_QWORD *)(v9 + 176) = 0;
  *(_OWORD *)(v9 + 144) = v12;
  *(_QWORD *)(v9 + 160) = v8;
  v10 = (_QWORD *)swift_task_alloc();
  v0[4] = v10;
  *v10 = v0;
  v10[1] = RotationTask.run();
  return KeyRotation.run()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RotationTask.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t RotationTask.__deallocating_deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t RotationTask.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance RotationTask()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for ScheduledActivityHandler.run@Sendable () in conformance RotationTask()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t type metadata accessor for RotationTask()
{
  return objc_opt_self();
}

uint64_t method lookup function for RotationTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RotationTask.keyRotation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of RotationTask.__allocating_init(configCache:keyStorage:allowListLock:activeUseCaseTracker:currentTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of RotationTask.run()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 144) + *(_QWORD *)(*(_QWORD *)v0 + 144));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for NetworkManager.uploadKeys(evaluationKeys:userId:) in conformance AspireNetworkManager;
  return v4();
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v14, &demangling cache variable for type metadata for ContiguousBytes?);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = _StringObject.sharedUTF8.getter();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = specialized Data._Representation.init(_:)(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = specialized Data._Representation.init(count:)(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)();
    __asm { BR              X12 }
  }
  outlined init with take of LocalizedError(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t (*default argument 3 of SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)())()
{
  return closure #1 in default argument 4 of RequestsManager.init(configCache:keyStorage:activeUseCaseTracker:allowList:currentTime:);
}

uint64_t SqliteCache.__allocating_init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t one-time initialization function for keyword()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
  __swift_allocate_value_buffer(v0, static SqliteCache.Column.keyword);
  __swift_project_value_buffer(v0, (uint64_t)static SqliteCache.Column.keyword);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data>, MEMORY[0x24BEB3200]);
  return ExpressionType.init(_:)();
}

uint64_t SqliteCache.Column.keyword.unsafeMutableAddressor()
{
  return SqliteCache.Column.keyword.unsafeMutableAddressor(&one-time initialization token for keyword, &demangling cache variable for type metadata for Expression<Data>, (uint64_t)static SqliteCache.Column.keyword);
}

uint64_t static SqliteCache.Column.keyword.getter@<X0>(uint64_t a1@<X8>)
{
  return static SqliteCache.Column.keyword.getter(&one-time initialization token for keyword, &demangling cache variable for type metadata for Expression<Data>, (uint64_t)static SqliteCache.Column.keyword, a1);
}

uint64_t one-time initialization function for value()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data?>);
  __swift_allocate_value_buffer(v0, static SqliteCache.Column.value);
  __swift_project_value_buffer(v0, (uint64_t)static SqliteCache.Column.value);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data?> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data?>, MEMORY[0x24BEB3200]);
  return ExpressionType.init(_:)();
}

uint64_t SqliteCache.Column.value.unsafeMutableAddressor()
{
  return SqliteCache.Column.keyword.unsafeMutableAddressor(&one-time initialization token for value, &demangling cache variable for type metadata for Expression<Data?>, (uint64_t)static SqliteCache.Column.value);
}

uint64_t SqliteCache.Column.keyword.unsafeMutableAddressor(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once();
  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  return __swift_project_value_buffer(v5, a3);
}

uint64_t static SqliteCache.Column.value.getter@<X0>(uint64_t a1@<X8>)
{
  return static SqliteCache.Column.keyword.getter(&one-time initialization token for value, &demangling cache variable for type metadata for Expression<Data?>, (uint64_t)static SqliteCache.Column.value, a1);
}

uint64_t static SqliteCache.Column.keyword.getter@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = __swift_project_value_buffer(v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t one-time initialization function for accessTime()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  __swift_allocate_value_buffer(v0, static SqliteCache.Column.accessTime);
  __swift_project_value_buffer(v0, (uint64_t)static SqliteCache.Column.accessTime);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>, MEMORY[0x24BEB3200]);
  return ExpressionType.init(_:)();
}

uint64_t SqliteCache.Column.accessTime.unsafeMutableAddressor()
{
  return SqliteCache.Column.keyword.unsafeMutableAddressor(&one-time initialization token for accessTime, &demangling cache variable for type metadata for Expression<Double>, (uint64_t)static SqliteCache.Column.accessTime);
}

uint64_t static SqliteCache.Column.accessTime.getter@<X0>(uint64_t a1@<X8>)
{
  return static SqliteCache.Column.keyword.getter(&one-time initialization token for accessTime, &demangling cache variable for type metadata for Expression<Double>, (uint64_t)static SqliteCache.Column.accessTime, a1);
}

uint64_t one-time initialization function for expirationTime()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  __swift_allocate_value_buffer(v0, static SqliteCache.Column.expirationTime);
  __swift_project_value_buffer(v0, (uint64_t)static SqliteCache.Column.expirationTime);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>, MEMORY[0x24BEB3200]);
  return ExpressionType.init(_:)();
}

uint64_t SqliteCache.Column.expirationTime.unsafeMutableAddressor()
{
  return SqliteCache.Column.keyword.unsafeMutableAddressor(&one-time initialization token for expirationTime, &demangling cache variable for type metadata for Expression<Double>, (uint64_t)static SqliteCache.Column.expirationTime);
}

uint64_t static SqliteCache.Column.expirationTime.getter@<X0>(uint64_t a1@<X8>)
{
  return static SqliteCache.Column.keyword.getter(&one-time initialization token for expirationTime, &demangling cache variable for type metadata for Expression<Double>, (uint64_t)static SqliteCache.Column.expirationTime, a1);
}

void *SqliteCache.tableName.unsafeMutableAddressor()
{
  return &static SqliteCache.tableName;
}

uint64_t static SqliteCache.tableName.getter()
{
  return 0x6552646568636143;
}

void *SqliteCache.latestSchemaVersion.unsafeMutableAddressor()
{
  return &static SqliteCache.latestSchemaVersion;
}

uint64_t static SqliteCache.latestSchemaVersion.getter()
{
  return 1;
}

uint64_t SqliteCache.cachedResponses.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  v4 = type metadata accessor for Table();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SqliteCache.maximumCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_maximumCount);
}

uint64_t SqliteCache.minutesToLive.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_minutesToLive);
}

uint64_t SqliteCache.db.getter()
{
  return swift_retain();
}

uint64_t SqliteCache.updateLastAccessAndGetValueForKeyword.getter()
{
  return swift_retain();
}

uint64_t SqliteCache.currentTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime);
  swift_retain();
  return v1;
}

double SqliteCache.expirationTime.getter()
{
  uint64_t v0;

  return (*(double (**)(void))(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime))()
       + (double)*(uint64_t *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_minutesToLive) * 60.0;
}

double static SqliteCache.computeExpirationTime(currentTime:cacheEntryMinutesToLive:)(uint64_t a1, double a2)
{
  return (double)a1 * 60.0 + a2;
}

uint64_t SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  double (**v62)();
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  unint64_t v78;

  v76 = a6;
  v72 = a4;
  v73 = a5;
  v71 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Table();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v75;
  v75 = static SqliteCache.createTable(useCase:schemaVersion:)((uint64_t)v18, a1, a2, 1uLL);
  if (v19)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v64 = v14;
    v65 = v12;
    v66 = v11;
    v67 = v10;
    v68 = v16;
    v69 = v15;
    v70 = v18;
    v20 = v73;
    swift_bridgeObjectRelease();
    v21 = (_QWORD *)Connection.columnNames(tableName:)(0x6552646568636143, 0xEF7365736E6F7073);
    v22 = specialized Sequence<>.contains(_:)(0x6974617269707865, 0xEE00656D69546E6FLL, v21);
    v23 = swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
    {
      v24 = v69;
    }
    else
    {
      v25 = v64;
      v20(v23);
      Date.timeIntervalSinceReferenceDate.getter();
      v27 = v26;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v25, v66);
      v28 = (double)v72 * 60.0 + v27;
      if (one-time initialization token for expirationTime != -1)
        swift_once();
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
      __swift_project_value_buffer(v29, (uint64_t)static SqliteCache.Column.expirationTime);
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>);
      v31 = (uint64_t)v67;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v67, 1, 1, v30);
      v77 = v28;
      v32 = v70;
      v33 = Table.addColumn<A>(_:check:defaultValue:)();
      v35 = v34;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v31, &demangling cache variable for type metadata for Expression<Bool>?);
      v36._countAndFlagsBits = v33;
      v36._object = v35;
      Connection.execute(_:)(v36);
      v24 = v69;
      if (v37)
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v32, v24);
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
    }
    v77 = 0.0;
    v78 = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v38._countAndFlagsBits = 0x20455441445055;
    v38._object = (void *)0xE700000000000000;
    String.append(_:)(v38);
    v39._countAndFlagsBits = 0x6552646568636143;
    v39._object = (void *)0xEF7365736E6F7073;
    String.append(_:)(v39);
    v40._countAndFlagsBits = 0x205445530ALL;
    v40._object = (void *)0xE500000000000000;
    String.append(_:)(v40);
    if (one-time initialization token for accessTime != -1)
      swift_once();
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
    __swift_project_value_buffer(v41, (uint64_t)static SqliteCache.Column.accessTime);
    lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>, MEMORY[0x24BEB3208]);
    v42 = Expressible.asSQL()();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._object = (void *)0x8000000237D61E50;
    v43._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v43);
    if (one-time initialization token for keyword != -1)
      swift_once();
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
    __swift_project_value_buffer(v44, (uint64_t)static SqliteCache.Column.keyword);
    lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data>, MEMORY[0x24BEB3208]);
    v45 = Expressible.asSQL()();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 0xD00000000000001FLL;
    v46._object = (void *)0x8000000237D61E70;
    String.append(_:)(v46);
    if (one-time initialization token for expirationTime != -1)
      swift_once();
    __swift_project_value_buffer(v41, (uint64_t)static SqliteCache.Column.expirationTime);
    v47 = Expressible.asSQL()();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 0x494E525554455220;
    v48._object = (void *)0xEB0000000020474ELL;
    String.append(_:)(v48);
    v49 = v76;
    v50 = v68;
    if (one-time initialization token for value != -1)
      swift_once();
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data?>);
    __swift_project_value_buffer(v51, (uint64_t)static SqliteCache.Column.value);
    lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data?> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data?>, MEMORY[0x24BEB3208]);
    v52 = Expressible.asSQL()();
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 59;
    v53._object = (void *)0xE100000000000000;
    String.append(_:)(v53);
    v54 = v75;
    v55 = Connection.prepare(_:_:)();
    v56 = v70;
    v57 = v55;
    swift_bridgeObjectRelease();
    Connection.setUserVersion(_:)(1);
    if (!v58)
    {
      v59 = v74;
      (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v74 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses, v56, v24);
      *(_QWORD *)(v59 + OBJC_IVAR____TtC8CipherML11SqliteCache_maximumCount) = v71;
      *(_QWORD *)(v59 + OBJC_IVAR____TtC8CipherML11SqliteCache_minutesToLive) = v72;
      *(_QWORD *)(v59 + OBJC_IVAR____TtC8CipherML11SqliteCache_db) = v54;
      *(_QWORD *)(v59 + OBJC_IVAR____TtC8CipherML11SqliteCache_updateLastAccessAndGetValueForKeyword) = v57;
      v61 = swift_allocObject();
      *(_QWORD *)(v61 + 16) = v73;
      *(_QWORD *)(v61 + 24) = v49;
      v62 = (double (**)())(v59 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime);
      *v62 = partial apply for closure #1 in SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:);
      v62[1] = (double (*)())v61;
      return v59;
    }
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v56, v24);
  }
LABEL_20:
  v59 = v74;
  type metadata accessor for SqliteCache();
  swift_deallocPartialClassInstance();
  return v59;
}

uint64_t static SqliteCache.createTable(useCase:schemaVersion:)(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;

  v40 = a1;
  v7 = type metadata accessor for URL.DirectoryHint();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a4;
  if (a4 <= 1)
  {
    if (one-time initialization token for url != -1)
      swift_once();
    __swift_project_value_buffer(v11, (uint64_t)static CacheDirectory.url);
    v43._countAndFlagsBits = a2;
    v43._object = a3;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDCD7A0], v7);
    lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v19 = URL.absoluteString.getter();
    v7 = v20;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v43._countAndFlagsBits = v19;
    v43._object = (void *)v7;
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = 0x6574696C71732ELL;
    v21._object = (void *)0xE700000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    type metadata accessor for Connection();
    v22 = v44;
    v23 = Connection.__allocating_init(_:readonly:)();
    if (!v22)
    {
      v7 = v23;
      v24 = v40;
      v25 = MEMORY[0x23B821758](0x6552646568636143, 0xEF7365736E6F7073, 0, 0);
      MEMORY[0x24BDAC7A8](v25);
      *(&v40 - 2) = v41;
      v42._countAndFlagsBits = Table.create(temporary:ifNotExists:withoutRowid:block:)();
      v42._object = v26;
      swift_bridgeObjectRetain();
      v27._countAndFlagsBits = 2619;
      v27._object = (void *)0xE200000000000000;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v43 = v42;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Expressible>);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_237D540E0;
      if (one-time initialization token for accessTime != -1)
        swift_once();
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
      v30 = __swift_project_value_buffer(v29, (uint64_t)static SqliteCache.Column.accessTime);
      *(_QWORD *)(v28 + 56) = v29;
      *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>, MEMORY[0x24BEB3208]);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v28 + 32));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(boxed_opaque_existential_1, v30, v29);
      v32 = Table.createIndex(_:unique:ifNotExists:)();
      v34 = v33;
      swift_bridgeObjectRelease();
      v42._countAndFlagsBits = v32;
      v42._object = v34;
      swift_bridgeObjectRetain();
      v35._countAndFlagsBits = 2619;
      v35._object = (void *)0xE200000000000000;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v36._object = (void *)0x8000000237D61E90;
      v36._countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v36);
      Connection.execute(_:)(v43);
      if (v37)
      {
        v38 = type metadata accessor for Table();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v24, v38);
        swift_release();
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for daemon != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.daemon);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v7 = 12;
      v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v18 = 134217984;
      v43._countAndFlagsBits = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_237BC8000, v16, v17, "Invalid schemaVersion %ld", v18, 0xCu);
      MEMORY[0x23B822DA8](v18, -1, -1);
    }

    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return v7;
}

uint64_t type metadata accessor for SqliteCache()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SqliteCache;
  if (!type metadata singleton initialization cache for SqliteCache)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Connection.columnNames(tableName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  Connection.prepare(_:_:)();
  if (v2)
    return (uint64_t)v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Binding?>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_237D540E0;
  v7 = MEMORY[0x24BEB33D0];
  *(_QWORD *)(v6 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v6 + 64) = v7;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  swift_bridgeObjectRetain();
  v9 = Statement.run(_:)();
  swift_bridgeObjectRelease();
  v20[0] = v9;
  type metadata accessor for Statement();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BEB33A8];
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type Statement and conformance Statement, (uint64_t (*)(uint64_t))MEMORY[0x24BEB33A8], MEMORY[0x24BEB33B8]);
  swift_retain();
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type Statement and conformance Statement, v10, MEMORY[0x24BEB33C0]);
  result = dispatch thunk of IteratorProtocol.next()();
  v11 = v23;
  if (!v23)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_22:
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v3;
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (*(_QWORD *)(v11 + 16))
  {
    outlined init with copy of AMDPbHEConfig.OneOf_Config?(v11 + 32, (uint64_t)v20, &demangling cache variable for type metadata for Binding?);
    if (v20[3])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding);
      if ((swift_dynamicCast() & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v20, &demangling cache variable for type metadata for Binding?);
    }
    v21 = 0;
    v22 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    v12 = v22;
    if (v22)
    {
      v18 = v21;
      v19 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v14 = v3[2];
      v13 = v3[3];
      v15 = v14 + 1;
      if (v14 >= v13 >> 1)
      {
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
        v15 = v14 + 1;
        v3 = v17;
      }
      v3[2] = v15;
      v16 = &v3[2 * v14];
      v16[4] = v18;
      v16[5] = v12;
      result = dispatch thunk of IteratorProtocol.next()();
      v11 = v23;
      v9 = v19;
      if (!v23)
        goto LABEL_22;
    }
    else
    {
      result = dispatch thunk of IteratorProtocol.next()();
      v11 = v23;
      if (!v23)
        goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X8 }
  }
  return 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.setUserVersion(_:)(Swift::Int a1)
{
  uint64_t v1;
  Swift::String v2;

  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  if (!v1)
    swift_release();
}

double closure #1 in SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  uint64_t v10;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  Date.timeIntervalSinceReferenceDate.getter();
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8;
}

uint64_t sub_237C51A7C()
{
  swift_release();
  return swift_deallocObject();
}

double partial apply for closure #1 in SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)()
{
  uint64_t v0;

  return closure #1 in SqliteCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t closure #1 in static SqliteCache.createTable(useCase:schemaVersion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for keyword != -1)
    swift_once();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
  __swift_project_value_buffer(v12, (uint64_t)static SqliteCache.Column.keyword);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v11, 1, 1, v13);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v15(v8, 1, 1, v12);
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for Expression<Data>?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for Expression<Bool>?);
  if (one-time initialization token for value != -1)
    swift_once();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data?>);
  __swift_project_value_buffer(v16, (uint64_t)static SqliteCache.Column.value);
  v14(v11, 1, 1, v13);
  v15(v8, 1, 1, v12);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v8, &demangling cache variable for type metadata for Expression<Data>?);
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for Expression<Bool>?);
  if (one-time initialization token for accessTime != -1)
    swift_once();
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  __swift_project_value_buffer(v17, (uint64_t)static SqliteCache.Column.accessTime);
  v14(v11, 1, 1, v13);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v5, 1, 1, v17);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for Expression<Double>?);
  result = outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for Expression<Bool>?);
  if (a2 >= 1)
  {
    if (one-time initialization token for expirationTime != -1)
      swift_once();
    __swift_project_value_buffer(v17, (uint64_t)static SqliteCache.Column.expirationTime);
    v14(v11, 1, 1, v13);
    v18(v5, 1, 1, v17);
    TableBuilder.column<A>(_:unique:check:defaultValue:)();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v5, &demangling cache variable for type metadata for Expression<Double>?);
    return outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v11, &demangling cache variable for type metadata for Expression<Bool>?);
  }
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SqliteCache.removeExpiredValues()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::Int v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>);
  v14 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v2 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Table();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Delete();
  v7 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_db);
  if (one-time initialization token for expirationTime != -1)
    swift_once();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  __swift_project_value_buffer(v10, (uint64_t)static SqliteCache.Column.expirationTime);
  v17 = (*(double (**)(void))(v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime))();
  < infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v2, v16);
  QueryType.delete()();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v11 = Connection.run(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
  return v11;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SqliteCache.removeAllValues()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v0 = type metadata accessor for Delete();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Table();
  QueryType.delete()();
  Connection.run(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t SqliteCache.removeLRUValues(count:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  void (*v16)(char *, uint64_t);
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a1;
  v2 = type metadata accessor for Table();
  v19 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v18 - v6;
  v8 = type metadata accessor for Delete();
  v21 = *(_QWORD *)(v8 - 8);
  v22 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8CipherML11SqliteCache_db);
  v18[0] = v1 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  v18[1] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Expressible>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_237D540E0;
  if (one-time initialization token for accessTime != -1)
    swift_once();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  v14 = __swift_project_value_buffer(v13, (uint64_t)static SqliteCache.Column.accessTime);
  *(_QWORD *)(v12 + 56) = v13;
  *(_QWORD *)(v12 + 64) = lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Double> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Double>, MEMORY[0x24BEB3208]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v12 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(boxed_opaque_existential_1, v14, v13);
  MEMORY[0x23B8217AC](v12, v2, MEMORY[0x24BEB32F8]);
  swift_bridgeObjectRelease();
  QueryType.limit(_:)();
  v16 = *(void (**)(char *, uint64_t))(v19 + 8);
  v16(v5, v2);
  QueryType.delete()();
  v16(v7, v2);
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v10, v22);
}

NSObject *SqliteCache.getValue(keyword:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  os_signpost_id_t v19;
  uint64_t v20;
  os_signpost_type_t v21;
  os_signpost_id_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;

  v4 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for OSSignpostID();
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignposter();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for daemon != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v8, (uint64_t)static OSSignposter.daemon);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  static OSSignpostID.exclusive.getter();
  v13 = (uint8_t *)swift_slowAlloc();
  v25 = swift_slowAlloc();
  v32 = v25;
  v26 = v9;
  *(_DWORD *)v13 = 136380675;
  static String.Encoding.utf8.getter();
  v14 = String.init(data:encoding:)();
  if (v15)
  {
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0xE000000000000000;
  }
  v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v32);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  v17 = OSSignposter.logHandle.getter();
  v18 = static os_signpost_type_t.begin.getter();
  v19 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_237BC8000, v17, v18, v19, "LRUCache: getValue", "%{private}s", v13, 0xCu);
  v20 = v28;
  closure #1 in SqliteCache.getValue(keyword:)(v27, (uint64_t *)&v31);
  if (v20)
  {

  }
  else
  {
    v21 = static os_signpost_type_t.end.getter();
    v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_237BC8000, v17, v21, v22, "LRUCache: getValue", "%{private}s", v13, 0xCu);

    v17 = v31;
    v23 = v25;
    swift_arrayDestroy();
    MEMORY[0x23B822DA8](v23, -1, -1);
    MEMORY[0x23B822DA8](v13, -1, -1);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v8);
  return v17;
}

uint64_t closure #1 in SqliteCache.getValue(keyword:)@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  Swift::Bool v24;
  uint64_t v25;
  uint64_t result;
  Swift::Bool v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];
  uint64_t v50;
  _BYTE v51[40];

  v46 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Blob?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v44 = (uint64_t)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)v42 - v6;
  v47 = type metadata accessor for Cursor();
  v7 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Blob();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v42 - v15;
  v17 = Data.datatypeValue.getter();
  v18 = (*(double (**)(uint64_t))(a1 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime))(v17);
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8CipherML11SqliteCache_updateLastAccessAndGetValueForKeyword);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Binding?>);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_237D540A0;
  v21 = MEMORY[0x24BEB33E0];
  *(_QWORD *)(v20 + 56) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v20 + 64) = v21;
  *(double *)(v20 + 32) = v18;
  v22 = MEMORY[0x24BEB32C0];
  *(_QWORD *)(v20 + 96) = v10;
  *(_QWORD *)(v20 + 104) = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v20 + 72));
  (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v16, v10);
  Statement.bind(_:)();
  swift_bridgeObjectRelease();
  v24 = Statement.step()();
  v48 = v25;
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    return swift_release();
  }
  else
  {
    v27 = v24;
    v42[1] = v19;
    v43 = v16;
    v28 = v47;
    v42[0] = v14;
    swift_release();
    if (v27)
    {
      Statement.row.getter();
      Cursor.subscript.getter();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v28);
      outlined init with copy of AMDPbHEConfig.OneOf_Config?((uint64_t)v51, (uint64_t)v49, &demangling cache variable for type metadata for Binding?);
      v29 = v11;
      if (v50)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding);
        v30 = (uint64_t)v45;
        v31 = swift_dynamicCast();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v30, v31 ^ 1u, 1, v10);
      }
      else
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v49, &demangling cache variable for type metadata for Binding?);
        v30 = (uint64_t)v45;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v45, 1, 1, v10);
      }
      v32 = v44;
      outlined init with copy of AMDPbHEConfig.OneOf_Config?(v30, v44, &demangling cache variable for type metadata for Blob?);
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v32, 1, v10);
      v34 = v42[0];
      v35 = v43;
      if (v33 == 1)
      {
        v36 = 0;
        v37 = 0xF000000000000000;
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 32))(v42[0], v32, v10);
        v38 = Blob.bytes.getter();
        v36 = specialized Data.init<A>(_:)(v38);
        v37 = v39;
        v30 = (uint64_t)v45;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v34, v10);
      }
      v40 = v46;
      outlined destroy of AMDPbHEConfig.OneOf_Config?(v30, &demangling cache variable for type metadata for Blob?);
      Statement.step()();
      if (v41)
      {
        outlined consume of Data?(v36, v37);
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v51, &demangling cache variable for type metadata for Binding?);
        return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v35, v10);
      }
      else
      {
        outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v51, &demangling cache variable for type metadata for Binding?);
        result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v35, v10);
        *v40 = v36;
        v40[1] = v37;
      }
    }
    else
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v43, v10);
      *(_OWORD *)v46 = xmmword_237D57AB0;
    }
  }
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SqliteCache.removeValues(for:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *rawValue;

  v3 = type metadata accessor for Delete();
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Bool>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Table();
  v17 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v1;
  v16 = v1 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  rawValue = a1._rawValue;
  if (one-time initialization token for keyword != -1)
    swift_once();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
  __swift_project_value_buffer(v13, (uint64_t)static SqliteCache.Column.keyword);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type [Data] and conformance [A], &demangling cache variable for type metadata for [Data], MEMORY[0x24BEE12E0]);
  Collection<>.contains(_:)();
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  QueryType.delete()();
  v14 = Connection.run(_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v10);
  return v14;
}

uint64_t SqliteCache.setValue(keyword:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double (*v24)(void);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char *v33;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScalarQuery<Int>);
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v39 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Insert();
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v53 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8CipherML11SqliteCache_db);
  v11 = OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Setter>);
  v13 = *(_QWORD *)(type metadata accessor for Setter() - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (v15 + 32) & ~v15;
  v48 = v12;
  v46 = v15 | 7;
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_237D540D0;
  v50 = v17;
  v47 = v16;
  if (one-time initialization token for keyword != -1)
    swift_once();
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data>);
  v19 = __swift_project_value_buffer(v18, (uint64_t)static SqliteCache.Column.keyword);
  v60 = *(double *)&a1;
  v61 = a2;
  v45 = v19;
  <- infix<A>(_:_:)();
  if (one-time initialization token for value != -1)
    swift_once();
  v49 = v4 + v11;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Data?>);
  v21 = __swift_project_value_buffer(v20, (uint64_t)static SqliteCache.Column.value);
  v51 = *(double *)&a3;
  v52 = a4;
  v60 = *(double *)&a3;
  v61 = a4;
  v44 = v21;
  <- infix<A>(_:_:)();
  v43 = 2 * v14;
  if (one-time initialization token for accessTime != -1)
    swift_once();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Double>);
  v23 = __swift_project_value_buffer(v22, (uint64_t)static SqliteCache.Column.accessTime);
  v64 = v4;
  v24 = *(double (**)(void))(v4 + OBJC_IVAR____TtC8CipherML11SqliteCache_currentTime);
  v60 = v24();
  v42 = v23;
  <- infix<A>(_:_:)();
  if (one-time initialization token for expirationTime != -1)
    swift_once();
  __swift_project_value_buffer(v22, (uint64_t)static SqliteCache.Column.expirationTime);
  v60 = (*(double (**)(void))(*(_QWORD *)v64 + 128))();
  <- infix<A>(_:_:)();
  v62 = v18;
  v63 = lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type Expression<Data> and conformance Expression<A>, &demangling cache variable for type metadata for Expression<Data>, MEMORY[0x24BEB3208]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(boxed_opaque_existential_1, v45, v18);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_237D540A0;
  v58 = v51;
  v59 = v52;
  v27 = <- infix<A>(_:_:)();
  v58 = ((double (*)(uint64_t))v24)(v27);
  <- infix<A>(_:_:)();
  v28 = type metadata accessor for Table();
  v29 = v53;
  MEMORY[0x23B8217D0](v50, &v60, v26, v28, MEMORY[0x24BEB32F8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v60);
  v30 = v57;
  Connection.run(_:)();
  if (v30)
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v29, v56);
  v32 = v64;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v29, v56);
  v33 = v39;
  SchemaType.count.getter();
  Connection.scalar<A>(_:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v33, v41);
  v34 = v60;
  v35 = v32;
  v36 = *(double *)(v32 + OBJC_IVAR____TtC8CipherML11SqliteCache_maximumCount);
  if (*(uint64_t *)&v36 < *(uint64_t *)&v60)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 144))(result);
    v37 = *(_QWORD *)&v34 - result;
    if (__OFSUB__(*(_QWORD *)&v34, result))
    {
      __break(1u);
    }
    else
    {
      if (*(uint64_t *)&v36 >= v37)
        return result;
      result = v37 - *(_QWORD *)&v36;
      if (!__OFSUB__(v37, *(_QWORD *)&v36))
        return SqliteCache.removeLRUValues(count:)(result);
    }
    __break(1u);
  }
  return result;
}

uint64_t key path setter for SqliteCache.subscript(_:) : SqliteCache(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t, unint64_t, uint64_t, unint64_t);

  v3 = *a3;
  v4 = a3[1];
  v5 = *a1;
  v6 = a1[1];
  v7 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))(**(_QWORD **)a2 + 216);
  outlined copy of Data._Representation(*a3, v4);
  outlined copy of Data??(v5, v6);
  return v7(v5, v6, v3, v4);
}

NSObject *SqliteCache.subscript.getter(uint64_t a1, unint64_t a2)
{
  return SqliteCache.getValue(keyword:)(a1, a2);
}

uint64_t SqliteCache.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  void (*v10)(uint64_t);

  if (a2 >> 60 == 11)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_237D540E0;
    *(_QWORD *)(v9 + 32) = a3;
    *(_QWORD *)(v9 + 40) = a4;
    v10 = *(void (**)(uint64_t))(*(_QWORD *)v4 + 176);
    outlined copy of Data._Representation(a3, a4);
    v10(v9);
    swift_bridgeObjectRelease();
    return outlined consume of Data._Representation(a3, a4);
  }
  else
  {
    outlined copy of Data?(a1, a2);
    SqliteCache.setValue(keyword:newValue:)(a3, a4, a1, a2);
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data??(a1, a2);
    return outlined consume of Data??(a1, a2);
  }
}

void (*SqliteCache.subscript.modify(_QWORD *a1, uint64_t a2, unint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *v7 = SqliteCache.subscript.getter(a2, a3);
  v7[1] = v8;
  return SqliteCache.subscript.modify;
}

void SqliteCache.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v5 = **a1;
  v4 = (*a1)[1];
  outlined copy of Data._Representation((*a1)[2], (*a1)[3]);
  v6 = v3[3];
  v7 = v3[2];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data??(v5, v4);
    SqliteCache.subscript.setter(v5, v4, v7, v6);
    outlined consume of Data??(*v3, v3[1]);
  }
  else
  {
    SqliteCache.subscript.setter(v5, v4, v3[2], v3[3]);
  }
  free(v3);
}

uint64_t SqliteCache.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  v2 = type metadata accessor for Table();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t SqliteCache.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8CipherML11SqliteCache_cachedResponses;
  v2 = type metadata accessor for Table();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for LRUCache.init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:) in conformance SqliteCache()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t protocol witness for LRUCache.removeExpiredValues() in conformance SqliteCache()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t protocol witness for LRUCache.removeAllValues() in conformance SqliteCache()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t protocol witness for LRUCache.removeValues(for:) in conformance SqliteCache()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t protocol witness for LRUCache.subscript.getter in conformance SqliteCache()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t protocol witness for LRUCache.subscript.setter in conformance SqliteCache()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

void (*protocol witness for LRUCache.subscript.modify in conformance SqliteCache(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 224))();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t Connection.userVersion.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _BYTE v3[24];
  uint64_t v4;

  result = Connection.scalar(_:_:)();
  if (!v0)
  {
    if (v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding);
      if ((swift_dynamicCast() & 1) != 0)
        return v2;
    }
    else
    {
      outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v3, &demangling cache variable for type metadata for Binding?);
    }
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t partial apply for closure #1 in static SqliteCache.createTable(useCase:schemaVersion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static SqliteCache.createTable(useCase:schemaVersion:)(a1, *(_QWORD *)(v1 + 16));
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CMLSimilarityScore]>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int?>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AspireApiKeyStatus>, type metadata accessor for AspireApiKeyStatus);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TokenCache.CachedToken>, type metadata accessor for TokenCache.CachedToken);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x23B822010](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_237C544F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 208))(*a2, a2[1]);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_237C54530()
{
  return 0;
}

uint64_t ObjC metadata update function for SqliteCache()
{
  return type metadata accessor for SqliteCache();
}

uint64_t type metadata completion function for SqliteCache()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Table();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SqliteCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SqliteCache.expirationTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SqliteCache.__allocating_init(useCase:cacheElementCount:cacheEntryMinutesToLive:getCurrentDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of SqliteCache.removeExpiredValues()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SqliteCache.removeAllValues()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SqliteCache.removeValues(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SqliteCache.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SqliteCache.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SqliteCache.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

ValueMetadata *type metadata accessor for SqliteCache.Column()
{
  return &type metadata for SqliteCache.Column;
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X11 }
}

_QWORD *sub_237C546F8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_QWORD *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CMLSimilarityScore]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *specialized Data._Representation.init(_:)(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v10 = lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8], MEMORY[0x24BDCFBE0]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  return v5;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type Expression<Double> and conformance Expression<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B822CDC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t generateEvaluationKey(secretKey:config:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;

  v47 = a1;
  v40 = a3;
  v4 = type metadata accessor for HE.SerializedSecretKey();
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HE.EvaluationKeyConfig();
  MEMORY[0x24BDAC7A8](v6);
  v45 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HE.SerializedEvaluationKey();
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v48 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AspireHeEncryptionParameters(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for HE.Scheme();
  v17 = *(_QWORD *)(v46 - 8);
  v18 = MEMORY[0x24BDAC7A8](v46);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v38 - v21;
  v23 = type metadata accessor for AspireHeEvaluationKeyConfig(0);
  outlined init with copy of AspireHeEncryptionParameters?(a2 + *(int *)(v23 + 28), (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = MEMORY[0x24BEE4AF8];
    *((_QWORD *)v16 + 3) = 0;
    v16[32] = 1;
    *((_QWORD *)v16 + 5) = 0;
    v16[48] = 1;
    *((_QWORD *)v16 + 7) = 0;
    v16[64] = 1;
    UnknownStorage.init()();
    outlined destroy of AMDPbHEConfig.OneOf_Config?((uint64_t)v12, &demangling cache variable for type metadata for AspireHeEncryptionParameters?);
  }
  else
  {
    outlined init with take of SecretKey((uint64_t)v12, (uint64_t)v16, type metadata accessor for AspireHeEncryptionParameters);
  }
  v24 = *((_QWORD *)v16 + 7);
  v25 = v16[64];
  outlined destroy of AspireHeEncryptionParameters((uint64_t)v16);
  if (v25 != 1 || v24 == 0)
  {
    type metadata accessor for CipherMLError();
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError((unint64_t *)&lazy protocol witness table cache variable for type CipherMLError and conformance CipherMLError, (uint64_t (*)(uint64_t))type metadata accessor for CipherMLError, (uint64_t)&protocol conformance descriptor for CipherMLError);
    swift_allocError();
    *(_QWORD *)v27 = v24;
    *(_BYTE *)(v27 + 8) = v25;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    if (v24 == 1)
      v29 = (unsigned int *)MEMORY[0x24BE2A1C8];
    else
      v29 = (unsigned int *)MEMORY[0x24BE2A1D0];
    v30 = a2;
    v31 = v46;
    v32 = v47;
    v33 = v44;
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v22, *v29, v46);
    AspireHeEvaluationKeyConfig.cryptokit()();
    if (v33)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v31);
    }
    else
    {
      v34 = type metadata accessor for SecretKey();
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v43, v32 + *(int *)(v34 + 20), v42);
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v31);
      HE.SerializedEvaluationKey.init(config:secretKey:scheme:)();
      v35 = type metadata accessor for AspireApiEvaluationKey(0);
      MEMORY[0x24BDAC7A8](v35);
      *(&v38 - 4) = v47;
      *(&v38 - 3) = v30;
      v36 = v48;
      *(&v38 - 2) = (uint64_t)v48;
      lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, v37, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
      static Message.with(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v46);
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v36, v39);
    }
  }
}

uint64_t outlined destroy of AspireHeEncryptionParameters(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AspireHeEncryptionParameters(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in generateEvaluationKey(secretKey:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a4;
  v25 = a1;
  v7 = type metadata accessor for AspireHeSerializedEvaluationKey(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AspireApiEvaluationKeyMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a2;
  v24 = a3;
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKeyMetadata and conformance AspireApiEvaluationKeyMetadata, v15, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKeyMetadata);
  result = static Message.with(_:)();
  if (!v4)
  {
    v17 = type metadata accessor for AspireApiEvaluationKey(0);
    v18 = v25 + *(int *)(v17 + 20);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v18, &demangling cache variable for type metadata for AspireApiEvaluationKeyMetadata?);
    outlined init with take of SecretKey((uint64_t)v14, v18, type metadata accessor for AspireApiEvaluationKeyMetadata);
    v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
    MEMORY[0x24BDAC7A8](v19);
    *(&v21 - 2) = v22;
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireHeSerializedEvaluationKey and conformance AspireHeSerializedEvaluationKey, type metadata accessor for AspireHeSerializedEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireHeSerializedEvaluationKey);
    static Message.with(_:)();
    v20 = v25 + *(int *)(v17 + 24);
    outlined destroy of AMDPbHEConfig.OneOf_Config?(v20, &demangling cache variable for type metadata for AspireHeSerializedEvaluationKey?);
    outlined init with take of SecretKey((uint64_t)v10, v20, type metadata accessor for AspireHeSerializedEvaluationKey);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v20, 0, 1, v7);
  }
  return result;
}

uint64_t partial apply for closure #1 in generateEvaluationKey(secretKey:config:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in generateEvaluationKey(secretKey:config:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t closure #1 in closure #1 in generateEvaluationKey(secretKey:config:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  result = (uint64_t)specialized Message.hash()();
  if (!v2)
  {
    v6 = result;
    v7 = v5;
    result = outlined consume of Data._Representation(a1[1], a1[2]);
    a1[1] = v6;
    a1[2] = v7;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in generateEvaluationKey(secretKey:config:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in generateEvaluationKey(secretKey:config:)(a1, *(_QWORD **)(v1 + 16));
}

uint64_t partial apply for closure #1 in HE.SerializedEvaluationKey.proto()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in HE.SerializedEvaluationKey.proto()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg5086_s8CipherML10XPCHandlerC16similarityScores11forElements12shardIndices12clientConfigSayo48So18CMLSimilarityScoreCGGSay10Foundation4DataVG_o3So8D134CGSo09CMLClientK0CtYaKFAkA14RequestContextVyAA19StaticPECParametersVGYaKXEfU_SiAQcfu_33_5bdac5b40c7411f20a64c1277f8fd44fAQSiTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v11 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x23B822298](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_integerValue);

      v10 = *(_QWORD *)(v11 + 16);
      v9 = *(_QWORD *)(v11 + 24);
      if (v10 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      ++v5;
      *(_QWORD *)(v11 + 16) = v10 + 1;
      *(_QWORD *)(v11 + 8 * v10 + 32) = v8;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t XPCHandler.requestsManager.getter()
{
  return swift_retain();
}

id XPCHandler.connection.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t XPCHandler.__allocating_init(requestsManager:connection:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t XPCHandler.init(requestsManager:connection:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t XPCHandler.requestData(by:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.requestData(by:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  int8x16_t v7;

  v2 = (void *)v0[5];
  v1 = v0[6];
  v3 = v0[4];
  v4 = swift_task_alloc();
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  swift_retain();
  v5 = v2;
  v6 = swift_task_alloc();
  v0[8] = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = XPCHandler.requestData(by:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 5);
  *(_QWORD *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.requestData(by:clientConfig:);
  *(_QWORD *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 104) = 0xD00000000000001DLL;
  *(_QWORD *)(v6 + 112) = 0x8000000237D62070;
  *(_QWORD *)(v6 + 88) = v0 + 2;
  *(_QWORD *)(v6 + 96) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.requestData(by:clientConfig:)()
{
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in XPCHandler.requestData(by:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for NetworkManager.fetchConfigs(useCases:userId:) in conformance AspireNetworkManager;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.requestData(by:clientConfig:)(uint64_t a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v8;
  _QWORD *v9;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v8 = a2;
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  v4[5] = v9;
  *v9 = v4;
  v9[1] = @objc closure #1 in XPCHandler.requestData(by:clientConfig:);
  v9[5] = v8;
  v9[6] = a4;
  v9[4] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.requestData(byIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.requestData(byIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;

  v2 = (void *)v0[3];
  v1 = v0[4];
  v3 = v0[2];
  v4 = swift_task_alloc();
  v0[5] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  swift_retain();
  v5 = v2;
  v6 = (int8x16_t *)swift_task_alloc();
  v0[6] = v6;
  v6->i64[0] = (uint64_t)v0;
  v6->i64[1] = (uint64_t)XPCHandler.requestData(byIndices:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 3);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.requestData(byIndices:clientConfig:);
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000024;
  v6[6].i64[1] = 0x8000000237D62090;
  v6[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XPCHandler.requestData(byIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(*v2 + 24);
  v5 = *v2;
  *(_QWORD *)(v5 + 56) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t closure #1 in XPCHandler.requestData(byIndices:clientConfig:)()
{
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v6;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v4[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = a2;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;

  v1 = v0[2].i64[1];
  v3 = (void *)v0[1].i64[0];
  v2 = v0[1].i64[1];
  v4 = swift_task_alloc();
  v0[3].i64[0] = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = v3;
  swift_retain();
  v6 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v6;
  v6->i64[0] = (uint64_t)v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:);
  v7 = v0[1];
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.requestData(byIndices:clientConfig:)partial apply;
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000024;
  v6[6].i64[1] = 0x8000000237D62090;
  v6[5].i64[1] = (uint64_t)v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  Class isa;
  void (**v2)(_QWORD, _QWORD, _QWORD);

  swift_release();
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, Class, _QWORD))v2)[2](v2, isa, 0);

  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void (**v3)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 64);

  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v2 = (void *)_convertErrorToNSError(_:)();

  v3 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, _QWORD, void *))v3)[2](v3, 0, v2);

  _Block_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byIndices:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc();

  swift_release();
  if (!v1)
  {
    *(_QWORD *)(v4 + 72) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.requestData(byKeywords:shardIds:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  __int128 v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;

  v2 = *(void **)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v3;
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  swift_retain();
  v5 = v2;
  v6 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 32);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  v6[8].i64[1] = v3;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD00000000000002ELL;
  v6[6].i64[1] = 0x8000000237D620C0;
  v6[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(*v2 + 32);
  v5 = *v2;
  *(_QWORD *)(v5 + 64) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  return RequestsManager.requestData(keywords:context:shardIds:)(v0[5], v0[3], v0[6]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = (unint64_t *)(v1 + 40);
    do
    {
      v4 = *v3;
      if (*v3 >> 60 == 15)
      {
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF8]), sel_init);
      }
      else
      {
        v5 = *(v3 - 1);
        outlined copy of Data._Representation(v5, *v3);
        Data._bridgeToObjectiveC()();
        outlined consume of Data?(v5, v4);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 2;
      --v2;
    }
    while (v2);
    v6 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x24BEE4AF8];
  }
  **(_QWORD **)(v0 + 16) = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 64) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  id v7;

  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v5[5] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[6] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = a3;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  __int128 v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;

  v2 = *(void **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  v4 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  v5 = v2;
  swift_retain();
  v6 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 16);
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)partial apply;
  v6[8].i64[1] = v3;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD00000000000002ELL;
  v6[6].i64[1] = 0x8000000237D620C0;
  v6[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  Class isa;
  void (**v2)(_QWORD, _QWORD, _QWORD);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, Class, _QWORD))v2)[2](v2, isa, 0);

  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void (**v3)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 72);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v2 = (void *)_convertErrorToNSError(_:)();

  v3 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, _QWORD, void *))v3)[2](v3, 0, v2);

  _Block_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byKeywords:shardIds:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (!v1)
  {
    *(_QWORD *)(v4 + 80) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t XPCHandler.requestData(byLatitude:longitude:clientConfig:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = a1;
  *(_QWORD *)(v4 + 56) = v3;
  *(double *)(v4 + 32) = a2;
  *(double *)(v4 + 40) = a3;
  return swift_task_switch();
}

uint64_t XPCHandler.requestData(byLatitude:longitude:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  int8x16_t v8;

  v2 = (void *)v0[3].i64[0];
  v1 = v0[3].i64[1];
  v4 = v0[2].i64[0];
  v3 = v0[2].i64[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  swift_retain();
  v6 = v2;
  v7 = swift_task_alloc();
  v0[4].i64[1] = v7;
  *(_QWORD *)v7 = v0;
  *(_QWORD *)(v7 + 8) = XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  v8 = v0[3];
  *(_QWORD *)(v7 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  *(_QWORD *)(v7 + 144) = v5;
  *(int8x16_t *)(v7 + 120) = vextq_s8(v8, v8, 8uLL);
  *(_QWORD *)(v7 + 104) = 0xD00000000000002FLL;
  *(_QWORD *)(v7 + 112) = 0x8000000237D620F0;
  *(_QWORD *)(v7 + 88) = v0 + 1;
  *(_QWORD *)(v7 + 96) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)(void *a1, void *aBlock, uint64_t a3, double a4, double a5)
{
  _QWORD *v5;
  id v10;
  uint64_t v11;

  v5[2] = a1;
  v5[3] = a3;
  v5[4] = _Block_copy(aBlock);
  v10 = a1;
  swift_retain();
  v11 = swift_task_alloc();
  v5[5] = v11;
  *(_QWORD *)v11 = v5;
  *(_QWORD *)(v11 + 8) = @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:);
  *(_QWORD *)(v11 + 48) = v10;
  *(_QWORD *)(v11 + 56) = a3;
  *(double *)(v11 + 32) = a4;
  *(double *)(v11 + 40) = a5;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.requestData(byLatitude:longitude:clientConfig:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(void **)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc();

  swift_release();
  if (v4)
  {
    v10 = _convertErrorToNSError(_:)();

    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a1, a2);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.removedCachedEntries(byKeywords:clientConfig:)()
{
  int8x16_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  uint64_t v6;
  int8x16_t v7;

  v2 = (void *)v0[2].i64[0];
  v1 = v0[2].i64[1];
  v3 = v0[1].i64[1];
  v0[1].i64[0] = 0;
  v4 = (_QWORD *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v4;
  v4[2] = v0 + 1;
  v4[3] = v1;
  v4[4] = v3;
  swift_retain();
  v5 = v2;
  v6 = swift_task_alloc();
  v0[3].i64[1] = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = XPCHandler.removedCachedEntries(byKeywords:clientConfig:);
  v7 = v0[2];
  *(_QWORD *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:);
  *(_QWORD *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 104) = 0xD00000000000002ELL;
  *(_QWORD *)(v6 + 112) = 0x8000000237D62120;
  *(_QWORD *)(v6 + 96) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[4] = a4;
  v5[5] = a5;
  v5[2] = a2;
  v5[3] = a3;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:);
  return RequestsManager.removeCachedKeywords(keywords:context:)(v0[5], v0[2]);
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 56) = a1;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v7;
  v8 = a2;
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  v4[6] = v9;
  *v9 = v4;
  v9[1] = @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:);
  v9[4] = v8;
  v9[5] = a4;
  v9[3] = v7;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.removedCachedEntries(byKeywords:clientConfig:)(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(void **)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 32);
  if (v1)
  {
    v7 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t))(v6 + 16))(v6);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 32), a1, 0);
  }
  _Block_release(*(const void **)(v5 + 32));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.setPIRConfig(_:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  int8x16_t v7;

  v2 = (void *)v0[5];
  v1 = v0[6];
  v3 = v0[4];
  v4 = swift_task_alloc();
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  swift_retain();
  v5 = v2;
  v6 = swift_task_alloc();
  v0[8] = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 5);
  *(_QWORD *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.setPIRConfig(_:clientConfig:);
  *(_QWORD *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 104) = 0xD00000000000001DLL;
  *(_QWORD *)(v6 + 112) = 0x8000000237D62150;
  *(_QWORD *)(v6 + 88) = v0 + 2;
  *(_QWORD *)(v6 + 96) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.setPIRConfig(_:clientConfig:);
  return RequestsManager.setPIRConfig(config:context:)(v0[5], v0[3]);
}

uint64_t closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v6 + 56) = a2;
  *(_QWORD *)(v6 + 64) = a1;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.setPIRConfig(_:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v8;
  id v9;
  _QWORD *v10;

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  v8 = a1;
  v9 = a2;
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  v4[6] = v10;
  *v10 = v4;
  v10[1] = @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  v10[5] = v9;
  v10[6] = a4;
  v10[4] = v8;
  return swift_task_switch();
}

uint64_t XPCHandler.generateEvaluationKey(_:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.generateEvaluationKey(_:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  int8x16_t v7;

  v2 = (void *)v0[5];
  v1 = v0[6];
  v3 = v0[4];
  v4 = swift_task_alloc();
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  swift_retain();
  v5 = v2;
  v6 = swift_task_alloc();
  v0[8] = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 5);
  *(_QWORD *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  *(_QWORD *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 104) = 0xD000000000000026;
  *(_QWORD *)(v6 + 112) = 0x8000000237D62170;
  *(_QWORD *)(v6 + 88) = v0 + 2;
  *(_QWORD *)(v6 + 96) = v2;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for RequestsManager.PIRContext();
  v4[6] = swift_task_alloc();
  v4[7] = type metadata accessor for AspireApiEvaluationKey(0);
  v4[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[9] = *(_QWORD *)(v0[4] + 16);
  v1 = (_QWORD *)swift_task_alloc();
  v0[10] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  return RequestsManager.loadContext(requestContext:allowingKeyRotation:)(v0[6], v0[3], 1);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  RequestsManager.generateEvaluationKey(config:pirContext:)(*(void **)(v0 + 40), v2, *(_QWORD *)(v0 + 64));
  outlined destroy of AspireApiPECConfig(v2, (uint64_t (*)(_QWORD))type metadata accessor for RequestsManager.PIRContext);
  if (!v1)
  {
    lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiEvaluationKey and conformance AspireApiEvaluationKey, type metadata accessor for AspireApiEvaluationKey, (uint64_t)&protocol conformance descriptor for AspireApiEvaluationKey);
    v4 = Message.serializedData(partial:)();
    v6 = v5;
    v7 = *(uint64_t **)(v0 + 16);
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 64), type metadata accessor for AspireApiEvaluationKey);
    *v7 = v4;
    v7[1] = v6;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:)(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v8;
  id v9;
  _QWORD *v10;

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  v8 = a1;
  v9 = a2;
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc();
  v4[6] = v10;
  *v10 = v4;
  v10[1] = @objc closure #1 in XPCHandler.generateEvaluationKey(_:clientConfig:);
  v10[5] = v9;
  v10[6] = a4;
  v10[4] = v8;
  return swift_task_switch();
}

uint64_t XPCHandler.constructPIRRequest(with:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.constructPIRRequest(with:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  int8x16_t v7;

  v2 = (void *)v0[5];
  v1 = v0[6];
  v3 = v0[4];
  v4 = swift_task_alloc();
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  swift_retain();
  v5 = v2;
  v6 = swift_task_alloc();
  v0[8] = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 5);
  *(_QWORD *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:);
  *(_QWORD *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 104) = 0xD000000000000027;
  *(_QWORD *)(v6 + 112) = 0x8000000237D621A0;
  *(_QWORD *)(v6 + 88) = v0 + 2;
  *(_QWORD *)(v6 + 96) = v2;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)(uint64_t a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  id v8;
  _QWORD *v9;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v8 = a2;
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  v4[5] = v9;
  *v9 = v4;
  v9[1] = @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:);
  v9[5] = v8;
  v9[6] = a4;
  v9[4] = a1;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(with:clientConfig:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(void **)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc();

  swift_release();
  if (v4)
  {
    v10 = _convertErrorToNSError(_:)();

    isa = 0;
    v12 = (void *)v10;
  }
  else if (a2 >> 60 == 15)
  {
    v10 = 0;
    isa = 0;
    v12 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  int8x16_t v7;

  v2 = (void *)v0[5];
  v1 = v0[6];
  v3 = v0[4];
  v4 = swift_task_alloc();
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  swift_retain();
  v5 = v2;
  v6 = swift_task_alloc();
  v0[8] = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = XPCHandler.setPIRConfig(_:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 5);
  *(_QWORD *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:);
  *(_QWORD *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 104) = 0xD000000000000033;
  *(_QWORD *)(v6 + 112) = 0x8000000237D621D0;
  *(_QWORD *)(v6 + 88) = v0 + 2;
  *(_QWORD *)(v6 + 96) = v2;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)(int a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[5] = v7;
  v8 = a2;
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  v4[6] = v9;
  *v9 = v4;
  v9[1] = @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:);
  v9[5] = v8;
  v9[6] = a4;
  v9[4] = v7;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRBatchRequest(withIndices:clientConfig:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(void **)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  if (v4)
  {
    v10 = _convertErrorToNSError(_:)();

    isa = 0;
    v12 = (void *)v10;
  }
  else if (a2 >> 60 == 15)
  {
    v10 = 0;
    isa = 0;
    v12 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t XPCHandler.decryptPIRResponse(_:index:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.decryptPIRResponse(_:index:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  int8x16_t v7;
  __int128 v9;

  v2 = *(void **)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v9 = *(_OWORD *)(v0 + 32);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v9;
  *(_QWORD *)(v4 + 40) = v3;
  swift_retain();
  v5 = v2;
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = XPCHandler.decryptPIRResponse(_:index:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 56);
  *(_QWORD *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:);
  *(_QWORD *)(v6 + 144) = v4;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 104) = 0xD000000000000029;
  *(_QWORD *)(v6 + 112) = 0x8000000237D62210;
  *(_QWORD *)(v6 + 88) = v0 + 16;
  *(_QWORD *)(v6 + 96) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)(void *a1, uint64_t a2, void *a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v10 = a1;
  v11 = a3;
  swift_retain();
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v5[5] = v12;
  v5[6] = v14;
  v15 = (_QWORD *)swift_task_alloc();
  v5[7] = v15;
  *v15 = v5;
  v15[1] = @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:);
  v15[7] = v11;
  v15[8] = a5;
  v15[5] = v14;
  v15[6] = a2;
  v15[4] = v12;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:index:clientConfig:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *(void **)(*v3 + 16);
  v8 = *v3;
  swift_task_dealloc();

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48));
  if (v4)
  {
    v9 = _convertErrorToNSError(_:)();

    isa = 0;
    v11 = (void *)v9;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a1, a2);
    v9 = 0;
    v11 = isa;
  }
  v12 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 + 32);
  ((void (**)(_QWORD, Class, uint64_t))v12)[2](v12, isa, v9);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;
  __int128 v9;

  v2 = *(void **)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v9 = *(_OWORD *)(v0 + 16);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v9;
  *(_QWORD *)(v4 + 40) = v3;
  swift_retain();
  v5 = v2;
  v6 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 40);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:);
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000030;
  v6[6].i64[1] = 0x8000000237D62240;
  v6[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(*v2 + 40);
  v5 = *v2;
  *(_QWORD *)(v5 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(void *a1, void *a2, void *a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v9 = a1;
  v10 = a2;
  v11 = a3;
  swift_retain();
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v5[5] = v12;
  v5[6] = v14;
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  v5[7] = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 56);
  v9 = *(_OWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 24) = v9;
  *(_QWORD *)(v4 + 40) = v1;
  v5 = v3;
  swift_retain();
  v6 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 16);
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)partial apply;
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000030;
  v6[6].i64[1] = 0x8000000237D62240;
  v6[5].i64[1] = (uint64_t)v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  Class isa;
  void (**v4)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v1);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, Class, _QWORD))v4)[2](v4, isa, 0);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v3, v2);
  swift_task_dealloc();
  v4 = (void *)_convertErrorToNSError(_:)();

  v5 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, _QWORD, void *))v5)[2](v5, 0, v4);

  _Block_release(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:indices:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();

  swift_release();
  if (!v1)
  {
    *(_QWORD *)(v4 + 88) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = v7;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a2;
  *(_QWORD *)(v8 + 48) = a4;
  *(_BYTE *)(v8 + 112) = a3;
  *(_QWORD *)(v8 + 32) = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  int8x16_t v10;
  __int128 v12;

  v2 = *(void **)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v12 = *(_OWORD *)(v0 + 48);
  v4 = *(_BYTE *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v7;
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v7 + 32) = v5;
  *(_BYTE *)(v7 + 40) = v4;
  *(_OWORD *)(v7 + 48) = v12;
  *(_QWORD *)(v7 + 64) = v3;
  swift_retain();
  v8 = v2;
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v9;
  *(_QWORD *)v9 = v0;
  *(_QWORD *)(v9 + 8) = XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  v10 = *(int8x16_t *)(v0 + 72);
  *(_QWORD *)(v9 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  *(_QWORD *)(v9 + 144) = v7;
  *(int8x16_t *)(v9 + 120) = vextq_s8(v10, v10, 8uLL);
  *(_QWORD *)(v9 + 104) = 0xD000000000000052;
  *(_QWORD *)(v9 + 112) = 0x8000000237D62280;
  *(_QWORD *)(v9 + 88) = v0 + 16;
  *(_QWORD *)(v9 + 96) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)(v8 + 64) = a8;
  *(_QWORD *)(v8 + 72) = v10;
  *(_BYTE *)(v8 + 112) = a6;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 80) = type metadata accessor for AspireApiRequest(0);
  *(_QWORD *)(v8 + 88) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  return RequestsManager.constructPIRRequest(keyword:withEvaluationKey:shardId:config:context:)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 112), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 24));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v1 = *(_QWORD *)(v0 + 104);
  lazy protocol witness table accessor for type CipherMLError and conformance CipherMLError(&lazy protocol witness table cache variable for type AspireApiRequest and conformance AspireApiRequest, type metadata accessor for AspireApiRequest, (uint64_t)&protocol conformance descriptor for AspireApiRequest);
  v2 = Message.serializedData(partial:)();
  if (v1)
  {
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 88), type metadata accessor for AspireApiRequest);
  }
  else
  {
    v4 = v2;
    v5 = v3;
    v6 = *(uint64_t **)(v0 + 16);
    outlined destroy of AspireApiPECConfig(*(_QWORD *)(v0 + 88), type metadata accessor for AspireApiRequest);
    *v6 = v4;
    v6[1] = v5;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(void *a1, char a2, void *a3, void *a4, void *a5, void *aBlock, uint64_t a7)
{
  _QWORD *v7;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7[3] = a5;
  v7[4] = a7;
  v7[2] = a4;
  v7[5] = _Block_copy(aBlock);
  v14 = a3;
  v15 = a1;
  v16 = a4;
  v17 = a5;
  swift_retain();
  v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  v7[6] = v18;
  v7[7] = v20;
  if (a3)
  {
    a3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

  }
  else
  {
    v22 = 0;
  }
  v7[8] = v22;
  v23 = swift_task_alloc();
  v7[9] = v23;
  *(_QWORD *)v23 = v7;
  *(_QWORD *)(v23 + 8) = @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:);
  *(_QWORD *)(v23 + 72) = v17;
  *(_QWORD *)(v23 + 80) = a7;
  *(_QWORD *)(v23 + 56) = v22;
  *(_QWORD *)(v23 + 64) = v16;
  *(_QWORD *)(v23 + 40) = v20;
  *(_QWORD *)(v23 + 48) = a3;
  *(_BYTE *)(v23 + 112) = a2 & 1;
  *(_QWORD *)(v23 + 32) = v18;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRRequest(withKeyword:withEvaluationKey:shardId:pirConfig:clientConfig:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v6 = *v3;
  v8 = *(_QWORD *)(*v3 + 48);
  v7 = *(_QWORD *)(*v3 + 56);
  v9 = *(void **)(*v3 + 24);
  v10 = *(void **)(*v3 + 16);
  v11 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v8, v7);
  if (v4)
  {
    v12 = _convertErrorToNSError(_:)();

    isa = 0;
    v14 = (void *)v12;
  }
  else if (a2 >> 60 == 15)
  {
    v12 = 0;
    isa = 0;
    v14 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    v12 = 0;
    v14 = isa;
  }
  v15 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 40);
  ((void (**)(_QWORD, Class, uint64_t))v15)[2](v15, isa, v12);

  _Block_release(v15);
  return (*(uint64_t (**)(void))(v11 + 8))();
}

uint64_t XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  int8x16_t v7;

  v2 = *(void **)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  swift_retain();
  v5 = v2;
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 48);
  *(_QWORD *)(v6 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  *(_QWORD *)(v6 + 144) = v3;
  *(int8x16_t *)(v6 + 120) = vextq_s8(v7, v7, 8uLL);
  *(_QWORD *)(v6 + 104) = 0xD00000000000003DLL;
  *(_QWORD *)(v6 + 112) = 0x8000000237D622E0;
  *(_QWORD *)(v6 + 88) = v0 + 16;
  *(_QWORD *)(v6 + 96) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  return RequestsManager.constructPIRBatchRequest(keywords:shardIds:context:)(v0[5], v0[6], v0[3]);
}

{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 64), *(int8x16_t *)(v0 + 64), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v6 + 64) = a2;
  *(_QWORD *)(v6 + 72) = a1;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(int a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;

  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[5] = v8;
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5[6] = v9;
  v10 = a3;
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc();
  v5[7] = v11;
  *v11 = v5;
  v11[1] = @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:);
  v11[6] = v10;
  v11[7] = a5;
  v11[4] = v8;
  v11[5] = v9;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.constructPIRBatchRequest(withKeywords:shardIds:clientConfig:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(void **)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    v10 = _convertErrorToNSError(_:)();

    isa = 0;
    v12 = (void *)v10;
  }
  else if (a2 >> 60 == 15)
  {
    v10 = 0;
    isa = 0;
    v12 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[10] = a7;
  v8[11] = v7;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  v8[4] = a1;
  v8[5] = a2;
  return swift_task_switch();
}

uint64_t XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  int8x16_t v8;
  __int128 v10;
  __int128 v11;

  v2 = *(void **)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v10 = *(_OWORD *)(v0 + 32);
  v11 = *(_OWORD *)(v0 + 48);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v5;
  *(_QWORD *)(v5 + 16) = v1;
  *(_OWORD *)(v5 + 24) = v10;
  *(_OWORD *)(v5 + 40) = v11;
  *(_QWORD *)(v5 + 56) = v4;
  *(_QWORD *)(v5 + 64) = v3;
  swift_retain();
  v6 = v2;
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  *(_QWORD *)v7 = v0;
  *(_QWORD *)(v7 + 8) = XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:);
  v8 = *(int8x16_t *)(v0 + 80);
  *(_QWORD *)(v7 + 136) = &async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:);
  *(_QWORD *)(v7 + 144) = v5;
  *(int8x16_t *)(v7 + 120) = vextq_s8(v8, v8, 8uLL);
  *(_QWORD *)(v7 + 104) = 0xD000000000000033;
  *(_QWORD *)(v7 + 112) = 0x8000000237D62320;
  *(_QWORD *)(v7 + 88) = v0 + 16;
  *(_QWORD *)(v7 + 96) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[9] = a8;
  v8[10] = v10;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[11] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:);
  return RequestsManager.decryptPIRResponse(encryptedResponse:keyword:context:shardId:)(v0[5], v0[6], v0[7], v0[8], v0[3], v0[9], v0[10]);
}

{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 96), *(int8x16_t *)(v0 + 96), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v6 + 96) = a2;
  *(_QWORD *)(v6 + 104) = a1;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(void *a1, void *a2, void *a3, void *a4, void *aBlock, uint64_t a6)
{
  _QWORD *v6;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v6[2] = a4;
  v6[3] = a6;
  v6[4] = _Block_copy(aBlock);
  v12 = a3;
  v13 = a1;
  v14 = a2;
  v15 = a4;
  swift_retain();
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  v6[5] = v16;
  v6[6] = v18;
  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v6[7] = v19;
  v6[8] = v21;
  if (a3)
  {
    a3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

  }
  else
  {
    v23 = 0;
  }
  v6[9] = v23;
  v24 = (_QWORD *)swift_task_alloc();
  v6[10] = v24;
  *v24 = v6;
  v24[1] = @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:);
  v24[10] = v15;
  v24[11] = a6;
  v24[8] = a3;
  v24[9] = v23;
  v24[6] = v19;
  v24[7] = v21;
  v24[4] = v16;
  v24[5] = v18;
  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRResponse(_:keyword:shardId:clientConfig:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v5 = *v3;
  v7 = *(_QWORD *)(*v3 + 56);
  v6 = *(_QWORD *)(*v3 + 64);
  v9 = *(_QWORD *)(*v3 + 40);
  v8 = *(_QWORD *)(*v3 + 48);
  v10 = *(void **)(*v3 + 16);
  v11 = *v3;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v7, v6);
  outlined consume of Data._Representation(v9, v8);
  if (v4)
  {
    v12 = _convertErrorToNSError(_:)();

    isa = 0;
    v14 = (void *)v12;
  }
  else if (a2 >> 60 == 15)
  {
    v12 = 0;
    isa = 0;
    v14 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
    v12 = 0;
    v14 = isa;
  }
  v15 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 32);
  ((void (**)(_QWORD, Class, uint64_t))v15)[2](v15, isa, v12);

  _Block_release(v15);
  return (*(uint64_t (**)(void))(v11 + 8))();
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;
  __int128 v9;

  v2 = *(void **)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v9 = *(_OWORD *)(v0 + 16);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v9;
  *(_QWORD *)(v4 + 40) = v3;
  swift_retain();
  v5 = v2;
  v6 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 40);
  v6[8].i64[0] = (uint64_t)&async function pointer to partial apply for closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000031;
  v6[6].i64[1] = 0x8000000237D62360;
  v6[5].i64[1] = (uint64_t)v2;
  return swift_task_switch();
}

uint64_t XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(*v2 + 40);
  v5 = *v2;
  *(_QWORD *)(v5 + 72) = v1;
  swift_task_dealloc();

  swift_release();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[8] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  return RequestsManager.decryptPIRBatchResponse(encryptedResponses:keywords:context:)(v0[5], v0[6], v0[7], v0[3]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = (unint64_t *)(v1 + 40);
    do
    {
      v4 = *v3;
      if (*v3 >> 60 == 15)
      {
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF8]), sel_init);
      }
      else
      {
        v5 = *(v3 - 1);
        outlined copy of Data._Representation(v5, *v3);
        Data._bridgeToObjectiveC()();
        outlined consume of Data?(v5, v4);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 2;
      --v2;
    }
    while (v2);
    v6 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x24BEE4AF8];
  }
  **(_QWORD **)(v0 + 16) = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 72) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(void *a1, void *a2, void *a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v9 = a1;
  v10 = a2;
  v11 = a3;
  swift_retain();
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v5[5] = v12;
  v5[6] = v14;
  v5[7] = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return swift_task_switch();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  int8x16_t *v6;
  int8x16_t v7;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 56);
  v9 = *(_OWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 24) = v9;
  *(_QWORD *)(v4 + 40) = v1;
  v5 = v3;
  swift_retain();
  v6 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  v6->i64[0] = v0;
  v6->i64[1] = (uint64_t)@objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:);
  v7 = *(int8x16_t *)(v0 + 16);
  v6[8].i64[0] = (uint64_t)&closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)partial apply;
  v6[8].i64[1] = v4;
  v6[7] = vextq_s8(v7, v7, 8uLL);
  v6[6].i64[0] = 0xD000000000000031;
  v6[6].i64[1] = 0x8000000237D62360;
  v6[5].i64[1] = (uint64_t)v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  Class isa;
  void (**v4)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v1);
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, Class, _QWORD))v4)[2](v4, isa, 0);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in XPCHandler.decryptPIRBatchResponse(_:keywords:clientConfig:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 16);
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();

  swift_release();
  if (!v1)
  {
    *(_QWORD *)(v4 + 88) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

