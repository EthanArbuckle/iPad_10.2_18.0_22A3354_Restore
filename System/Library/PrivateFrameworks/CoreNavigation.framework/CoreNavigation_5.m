_QWORD *sub_18D23C5C0@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_18D0778AC(a2, off_1E25CD3D0[*a1]);
}

raven::RavenConvergenceEstimator *raven::RavenConvergenceEstimator::RavenConvergenceEstimator(raven::RavenConvergenceEstimator *this)
{
  char *v2;
  uint64_t v3;
  cnprint::CNPrinter *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v18;
  unsigned __int8 v19;
  __int16 v20;

  v2 = (char *)this + 4176;
  raven::RavenEstimator::RavenEstimator((uint64_t)this, 2);
  *(_QWORD *)v3 = off_1E25C3190;
  *(_QWORD *)(v3 + 2536) = 0x100000000;
  *(_DWORD *)(v3 + 2544) = 0x7FFFFFFF;
  *(_QWORD *)(v3 + 2552) = 0x3E45798EE2308C3ALL;
  *(_QWORD *)(v3 + 2560) = 0x3E45798EE2308C3ALL;
  *(_WORD *)(v3 + 2568) = 0;
  *(_QWORD *)(v3 + 2576) = 0x3FEE666666666666;
  *(_QWORD *)(v3 + 2592) = 0;
  *(_QWORD *)(v3 + 2584) = 0;
  *(_QWORD *)(v3 + 2600) = 0x4197D78400000000;
  *(_QWORD *)(v3 + 2616) = 0;
  *(_QWORD *)(v3 + 2608) = 0;
  *(_WORD *)(v3 + 2624) = 1;
  *(_QWORD *)(v3 + 2632) = 0;
  *(_QWORD *)(v3 + 2672) = 0x100000008;
  *(_QWORD *)(v3 + 2648) = &unk_1E25C86C0;
  *(_QWORD *)(v3 + 2680) = v3 + 2688;
  *(_QWORD *)(v3 + 2776) = 0x800000008;
  *(_QWORD *)(v3 + 2752) = &unk_1E25C87E0;
  *(_QWORD *)(v3 + 2784) = v3 + 2792;
  *(_QWORD *)(v3 + 3328) = 0x100000008;
  *(_QWORD *)(v3 + 3304) = &unk_1E25C86C0;
  *(_QWORD *)(v3 + 3336) = v3 + 3344;
  *(_QWORD *)(v3 + 3432) = 0x100000008;
  *(_QWORD *)(v3 + 3408) = &unk_1E25C86C0;
  *(_QWORD *)(v3 + 3440) = v3 + 3448;
  *(_QWORD *)(v3 + 3536) = 0x800000008;
  *(_QWORD *)(v3 + 3512) = &unk_1E25C87E0;
  *(_QWORD *)(v3 + 3544) = v3 + 3552;
  *(_QWORD *)(v3 + 4088) = 0x100000008;
  *(_QWORD *)(v3 + 4064) = &unk_1E25C86C0;
  *(_QWORD *)(v3 + 4096) = v3 + 4104;
  *(_QWORD *)(v3 + 4200) = 0x3E45798EE2308C3ALL;
  *(_QWORD *)(v3 + 4208) = 0x3E45798EE2308C3ALL;
  *(_WORD *)(v3 + 4216) = 0;
  *(_QWORD *)(v3 + 4224) = 0x3FEE666666666666;
  *(_QWORD *)(v3 + 4232) = 0;
  *(_QWORD *)(v3 + 4240) = 0;
  *(_QWORD *)(v3 + 4248) = 0x4197D78400000000;
  *(_QWORD *)(v3 + 4168) = 0;
  *v2 = 0;
  *(_QWORD *)(v3 + 2656) = 0;
  *(_QWORD *)(v3 + 2664) = 0;
  *(_QWORD *)(v3 + 2760) = 0;
  *(_QWORD *)(v3 + 2768) = 0;
  *(_QWORD *)(v3 + 3312) = 0;
  *(_QWORD *)(v3 + 3320) = 0;
  *(_QWORD *)(v3 + 3416) = 0;
  *(_QWORD *)(v3 + 3424) = 0;
  *(_QWORD *)(v3 + 3520) = 0;
  *(_QWORD *)(v3 + 3528) = 0;
  *(_QWORD *)(v3 + 4072) = 0;
  *(_QWORD *)(v3 + 4080) = 0;
  *(_OWORD *)(v3 + 4256) = 0u;
  *(_OWORD *)(v3 + 4272) = 0u;
  *(_OWORD *)(v3 + 4288) = 0u;
  *(_OWORD *)(v3 + 4304) = 0u;
  *(_OWORD *)(v3 + 4320) = 0u;
  *(_OWORD *)(v3 + 4336) = 0u;
  *(_OWORD *)(v3 + 4352) = 0u;
  *(_OWORD *)(v3 + 4368) = 0u;
  *(_QWORD *)(v3 + 4384) = 0;
  *(_OWORD *)(v2 + 4) = xmmword_18D3197A0;
  *(_QWORD *)(v3 + 2640) = &unk_1E25B9210;
  *(_QWORD *)(v3 + 4416) = 0x800000008;
  *(_QWORD *)(v3 + 4392) = &unk_1E25C87E0;
  *(_QWORD *)(v3 + 4424) = v3 + 4432;
  *(_QWORD *)(v3 + 4968) = 0x100000008;
  *(_QWORD *)(v3 + 4944) = &unk_1E25C86C0;
  *(_QWORD *)(v3 + 4976) = v3 + 4984;
  *(_QWORD *)(v3 + 5072) = 0x800000008;
  *(_QWORD *)(v3 + 5048) = &unk_1E25C87E0;
  *(_QWORD *)(v3 + 5080) = v3 + 5088;
  *(_QWORD *)(v3 + 5600) = 0x100000000;
  *(_DWORD *)(v3 + 5608) = 0x7FFFFFFF;
  v18 = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  *(int64x2_t *)(v3 + 5616) = v18;
  *(_WORD *)(v3 + 5632) = 0;
  *(_QWORD *)(v3 + 5640) = 0x3FEE666666666666;
  *(_QWORD *)(v3 + 5656) = 0;
  *(_QWORD *)(v3 + 5648) = 0;
  *(_QWORD *)(v3 + 5664) = 0x4197D78400000000;
  *(_QWORD *)(v3 + 5680) = 0;
  *(_QWORD *)(v3 + 5672) = 0;
  *(_WORD *)(v3 + 5688) = 1;
  *(_QWORD *)(v3 + 5696) = 0;
  *(_QWORD *)(v3 + 4408) = 0;
  *(_QWORD *)(v3 + 4400) = 0;
  *(_QWORD *)(v3 + 4960) = 0;
  *(_QWORD *)(v3 + 4952) = 0;
  *(_QWORD *)(v3 + 5064) = 0;
  *(_QWORD *)(v3 + 5056) = 0;
  sub_18D1C3264(v3 + 5704);
  *((_QWORD *)this + 1020) = 0x100000000;
  *((_DWORD *)this + 2042) = 0x7FFFFFFF;
  *((int64x2_t *)this + 511) = v18;
  *((_WORD *)v2 + 2008) = 0;
  *((_QWORD *)this + 1025) = 0x3FEE666666666666;
  *((_QWORD *)this + 1027) = 0;
  *((_QWORD *)this + 1026) = 0;
  *((_QWORD *)this + 1028) = 0x4197D78400000000;
  *((_QWORD *)this + 1030) = 0;
  *((_QWORD *)this + 1029) = 0;
  *((_WORD *)v2 + 2036) = 1;
  *((_QWORD *)this + 1032) = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *((_OWORD *)this + 517) = _Q0;
  *((_DWORD *)this + 2072) = 0;
  *((_QWORD *)this + 1033) = &unk_1E25B90A0;
  *((_QWORD *)this + 1037) = 0x3FE0000000000000;
  *((_OWORD *)this + 519) = xmmword_18D331E10;
  *((_OWORD *)this + 520) = _Q0;
  *((_WORD *)this + 4168) = 0;
  *(_OWORD *)((char *)this + 8360) = 0u;
  *(_OWORD *)((char *)this + 8344) = 0u;
  *((_QWORD *)this + 1047) = (char *)this + 8376;
  *((_QWORD *)this + 1048) = (char *)this + 8376;
  *((_QWORD *)this + 1049) = 0;
  sub_18D1C6D74((uint64_t)this + 8400);
  *((_QWORD *)this + 1406) = 0x1000000AELL;
  *((_QWORD *)this + 1403) = &unk_1E25C6500;
  *((_OWORD *)this + 702) = xmmword_18D3197E0;
  *((_QWORD *)this + 1407) = (char *)this + 11264;
  *((_QWORD *)this + 1498) = 0x1000000AELL;
  *((_QWORD *)this + 1495) = &unk_1E25C64D0;
  *((_OWORD *)this + 748) = xmmword_18D3197E0;
  *((_QWORD *)this + 1499) = (char *)this + 12000;
  sub_18D1C6E44((uint64_t)this + 13392);
  *((_QWORD *)this + 1683) = 0x1000000AELL;
  *(_OWORD *)((char *)this + 13448) = xmmword_18D3197E0;
  *((_QWORD *)this + 1680) = &unk_1E25C6500;
  *((_QWORD *)this + 1684) = (char *)this + 13480;
  sub_18D1C6E44((uint64_t)this + 14176);
  sub_18D1C6ED4((uint64_t)this + 14224);
  *((_DWORD *)this + 3568) = 0;
  *((_QWORD *)this + 1788) = 0x1000000AELL;
  *((_QWORD *)this + 1785) = &off_1E25C6470;
  *((_OWORD *)this + 893) = xmmword_18D3197E0;
  *((_QWORD *)this + 1789) = (char *)this + 14320;
  *((_QWORD *)this + 1967) = 0x1000000AELL;
  *(_OWORD *)((char *)this + 15720) = xmmword_18D3197E0;
  *((_QWORD *)this + 1964) = &unk_1E25C64A0;
  *((_QWORD *)this + 1968) = (char *)this + 15752;
  sub_18D1C6F64((uint64_t)this + 17144);
  *((_QWORD *)this + 2325) = 0x100000057;
  *((_QWORD *)this + 2322) = &unk_1E25C83F0;
  *(_OWORD *)((char *)this + 18584) = xmmword_18D3197F0;
  *((_QWORD *)this + 2326) = (char *)this + 18616;
  *((_QWORD *)this + 2374) = 0x100000057;
  *((_QWORD *)this + 2371) = &unk_1E25C83C0;
  *((_OWORD *)this + 1186) = xmmword_18D3197F0;
  *((_QWORD *)this + 2375) = (char *)this + 19008;
  sub_18D1C7034((uint64_t)this + 19704);
  *((_QWORD *)this + 2472) = 0x100000057;
  *((_QWORD *)this + 2469) = &unk_1E25C83F0;
  *((_OWORD *)this + 1235) = xmmword_18D3197F0;
  *((_QWORD *)this + 2473) = (char *)this + 19792;
  sub_18D1C7034((uint64_t)this + 20144);
  sub_18D1C70C4((uint64_t)this + 20192);
  *((_DWORD *)this + 5060) = 0;
  *((_QWORD *)this + 2534) = 0x100000057;
  *((_QWORD *)this + 2531) = &off_1E25C8360;
  *((_OWORD *)this + 1266) = xmmword_18D3197F0;
  *((_QWORD *)this + 2535) = (char *)this + 20288;
  *((_QWORD *)this + 2626) = 0x100000057;
  *((_QWORD *)this + 2623) = &unk_1E25C8390;
  *((_OWORD *)this + 1312) = xmmword_18D3197F0;
  *((_QWORD *)this + 2627) = (char *)this + 21024;
  sub_18D04AE0C((uint64_t)this + 8336);
  if (cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    v20 = 12;
    v19 = 1;
    v10 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Resetting from constructor");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v16) = v10;
    else
      v16 = *((_QWORD *)this + 311);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v11, v12, v13, v14, v15, v16);
  }
  (*(void (**)(raven::RavenConvergenceEstimator *))(*(_QWORD *)this + 168))(this);
  *((_QWORD *)this + 150) = 0;
  *((_OWORD *)this + 74) = 0u;
  return this;
}

void sub_18D23CB74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  sub_18D23CDAC(v3);
  v1[1033] = v5 + 16;
  sub_18D04AF7C(v2);
  v1[330] = v4 + 16;
  v1[631] = &unk_1E25C5E70;
  v1[618] = &unk_1E25C5E70;
  v1[549] = &unk_1E25C5E70;
  sub_18D05711C((uint64_t)(v1 + 330));
  sub_18D04A18C((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_18D23CDAC(uint64_t *a1)
{
  a1[1581] = (uint64_t)&unk_1E25C5DE0;
  a1[1489] = (uint64_t)&unk_1E25C5D20;
  a1[1482] = (uint64_t)&unk_1E25C82D0;
  sub_18D1C3A48(a1 + 1487);
  a1[1482] = (uint64_t)&unk_1E25C5A50;
  a1[1476] = (uint64_t)&unk_1E25C82A0;
  sub_18D1C3D98(a1 + 1481);
  a1[1476] = (uint64_t)&unk_1E25C5A20;
  a1[1427] = (uint64_t)&unk_1E25C5EA0;
  a1[1421] = (uint64_t)&unk_1E25C82A0;
  sub_18D1C3D98(a1 + 1426);
  a1[1421] = (uint64_t)&unk_1E25C5A20;
  a1[1329] = (uint64_t)&unk_1E25C5E70;
  a1[1280] = (uint64_t)&unk_1E25C5EA0;
  a1[1101] = (uint64_t)&unk_1E25C58D0;
  a1[922] = (uint64_t)&unk_1E25C5DE0;
  a1[743] = (uint64_t)&unk_1E25C5D20;
  a1[736] = (uint64_t)&unk_1E25C6410;
  sub_18D1C3A48(a1 + 741);
  a1[736] = (uint64_t)&unk_1E25C5A50;
  a1[730] = (uint64_t)&unk_1E25C63E0;
  sub_18D1C3D98(a1 + 735);
  a1[730] = (uint64_t)&unk_1E25C5A20;
  a1[638] = (uint64_t)&unk_1E25C5EA0;
  a1[632] = (uint64_t)&unk_1E25C63E0;
  sub_18D1C3D98(a1 + 637);
  a1[632] = (uint64_t)&unk_1E25C5A20;
  a1[453] = (uint64_t)&unk_1E25C5E70;
  a1[361] = (uint64_t)&unk_1E25C5EA0;
  a1[8] = (uint64_t)&unk_1E25C58D0;
  sub_18D05DB90(a1 + 5);
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::AdjustClockOffset(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;

  if (!*(_BYTE *)(a1 + 58))
    return 1;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v36 = 0x100000008;
    v34 = &unk_1E25C86C0;
    v35 = xmmword_18D319940;
    v37 = (double *)&v38;
    if (*(_DWORD *)(a1 + 4180))
      v6 = a1 + 3408;
    else
      v6 = a1 + 2648;
    sub_18D053AA8((uint64_t)&v34, v6);
    v31 = 0x800000008;
    v29 = &unk_1E25C87E0;
    v30 = xmmword_18D319930;
    v32 = &v33;
    if (*(_DWORD *)(a1 + 4180))
      v7 = a1 + 3512;
    else
      v7 = a1 + 2752;
    sub_18D053AA8((uint64_t)&v29, v7);
    v37[6] = v37[6] + a3 * 1000000.0;
    v26 = 0x100000008;
    v24 = &unk_1E25C86C0;
    v25 = xmmword_18D319940;
    v27 = &v28;
    sub_18D053B2C((uint64_t)&v29, (uint64_t)&v34, (uint64_t)&v24);
    sub_18D23D160(a1 + 2640, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v24);
    LOWORD(v24) = 12;
    v23 = 2;
    v8 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "adjusted clock offset by %.3lf us to %.3lf us", a3 * 1000000.0, v37[6]);
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v14) = v8;
    else
      v14 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s", v9, v10, v11, v12, v13, v14);
    return 1;
  }
  LOWORD(v29) = 12;
  LOBYTE(v34) = 4;
  v16 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "invalid clock correction %.3lf s", a3);
  if (*(char *)(a1 + 2511) >= 0)
    LOBYTE(v22) = v16;
  else
    v22 = *(_QWORD *)(a1 + 2488);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, (unsigned __int8 *)&v34, "%s", v17, v18, v19, v20, v21, v22);
  return 0;
}

void sub_18D23D160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int32x2_t v7;
  int32x4_t v8;
  int32x2_t v9;
  int32x4_t v10;
  _BYTE v11[8];
  int32x4_t v12;

  v7.i32[1] = 1;
  v7.i32[0] = *(_DWORD *)(a2 + 16);
  v9 = v7;
  sub_18D054198((uint64_t)v11, a2);
  v8 = vdupq_lane_s32(v9, 0);
  v8.i32[1] = 1;
  v10 = v8;
  v12 = v8;
  sub_18D053AA8(a1 + 8, (uint64_t)v11);
  sub_18D053AA8(a1 + 112, a3);
  sub_18D054198((uint64_t)v11, a4);
  v12 = v10;
  sub_18D053AA8(a1 + 664, (uint64_t)v11);
  sub_18D053AA8(a1 + 768, a1 + 8);
  sub_18D053AA8(a1 + 872, a1 + 112);
  sub_18D053AA8(a1 + 1424, a1 + 664);
  *(_QWORD *)(a1 + 1528) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1540) = 1;
}

void sub_18D23D244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000008;
  *(_QWORD *)a1 = &unk_1E25C86C0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319940;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D23D2A0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D23D2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float64_t a14)
{
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _QWORD *v36;
  int v37;
  int v38;
  int i;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _QWORD *v45;
  int v46;
  int v47;
  int j;
  double *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  _BYTE *v55;
  int v56;
  int v57;
  int k;
  float64x2_t v59;
  void *v60;
  __int128 v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE v64[32];
  _BYTE v65[48];
  void *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  void *v72;
  __int128 v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE v76[72];
  void *v77;
  __int128 v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD v81[9];
  void *v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD v86[9];
  void *v87;
  __int128 v88;
  uint64_t v89;
  double *v90;
  _BYTE v91[72];
  void *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  int v97;
  void *v98;
  __int128 v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD v102[64];
  void *v103;
  __int128 v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE v107[24];

  v100 = 0x800000008;
  v98 = &unk_1E25C87E0;
  v101 = v102;
  v99 = xmmword_18D319930;
  sub_18D04BE88((uint64_t)&v98, 0.0);
  v30 = a1 + 80;
  sub_18D053AA8(a1 + 80, (uint64_t)&v98);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  *(double *)(a1 + 32) = a8;
  *(double *)(a1 + 40) = a9;
  *(double *)(a1 + 48) = a10;
  *(double *)(a1 + 56) = a11;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v102[0] = 0x100000000;
  v94 = 0x100000003;
  v92 = &unk_1E25C77C0;
  v93 = xmmword_18D313070;
  v97 = 2;
  v95 = &v96;
  v96 = 0x100000000;
  v74 = 0x300000003;
  v72 = &unk_1E25C78E0;
  v73 = xmmword_18D30BB60;
  v75 = v76;
  LOBYTE(v98) = 0;
  sub_18D05C654(a4, (uint64_t)&v72, (BOOL *)&v98);
  v79 = 0x300000003;
  v77 = &unk_1E25C78E0;
  v78 = xmmword_18D30BB60;
  v80 = v81;
  v62 = 0x100000003;
  v60 = &unk_1E25C77C0;
  v61 = xmmword_18D313070;
  v63 = v64;
  v100 = 0x10000000CLL;
  v98 = &unk_1E25C6200;
  v99 = xmmword_18D3191A0;
  v101 = v102;
  sub_18D04F504((uint64_t)&v72, (uint64_t)&v60, (uint64_t)&v98, (uint64_t)&v77);
  v31 = DWORD1(v78);
  v32 = v78;
  v84 = 0x300000003;
  v82 = &unk_1E25C78E0;
  v85 = v86;
  *(_QWORD *)&v83 = __PAIR64__(v78, DWORD1(v78));
  DWORD2(v83) = v78 * DWORD1(v78);
  HIDWORD(v83) = DWORD1(v78);
  if (DWORD1(v78))
  {
    v33 = 0;
    v34 = 0;
    v35 = HIDWORD(v78);
    v36 = v80;
    do
    {
      v37 = v33;
      v38 = v34;
      for (i = v32; i; --i)
      {
        v86[v38] = v36[v37];
        v38 += v31;
        ++v37;
      }
      ++v34;
      v33 += v35;
    }
    while (v34 != v31);
  }
  v62 = 0x100000003;
  v60 = &unk_1E25C7790;
  v61 = xmmword_18D313070;
  v63 = v64;
  v100 = 0x300000003;
  v98 = &unk_1E25C78E0;
  v99 = xmmword_18D30BB60;
  v101 = v102;
  v89 = 0x300000003;
  v87 = &unk_1E25C78E0;
  v88 = xmmword_18D30BB60;
  v90 = (double *)v91;
  sub_18D05C770((uint64_t)&v82, (uint64_t)&v60, (uint64_t)&v98, (uint64_t)&v87);
  sub_18D04F764((uint64_t)&v98, v30, (uint64_t)&v92, (uint64_t)&v92);
  sub_18D16171C((uint64_t)&v98, (uint64_t)&v87);
  v102[0] = 0x400000003;
  v68 = 0x100000003;
  v66 = &unk_1E25C77C0;
  v67 = xmmword_18D313070;
  v71 = 5;
  v69 = &v70;
  v70 = 0x400000003;
  v74 = 0x300000003;
  v72 = &unk_1E25C78E0;
  v73 = xmmword_18D30BB60;
  v75 = v76;
  LOBYTE(v98) = 0;
  sub_18D05C654(a5, (uint64_t)&v72, (BOOL *)&v98);
  v79 = 0x300000003;
  v77 = &unk_1E25C78E0;
  v78 = xmmword_18D30BB60;
  v80 = v81;
  v62 = 0x100000003;
  v60 = &unk_1E25C77C0;
  v61 = xmmword_18D313070;
  v63 = v64;
  v100 = 0x10000000CLL;
  v98 = &unk_1E25C6200;
  v99 = xmmword_18D3191A0;
  v101 = v102;
  sub_18D04F504((uint64_t)&v72, (uint64_t)&v60, (uint64_t)&v98, (uint64_t)&v77);
  v40 = DWORD1(v78);
  v41 = v78;
  v84 = 0x300000003;
  v82 = &unk_1E25C78E0;
  v85 = v86;
  *(_QWORD *)&v83 = __PAIR64__(v78, DWORD1(v78));
  DWORD2(v83) = v78 * DWORD1(v78);
  HIDWORD(v83) = DWORD1(v78);
  if (DWORD1(v78))
  {
    v42 = 0;
    v43 = 0;
    v44 = HIDWORD(v78);
    v45 = v80;
    do
    {
      v46 = v42;
      v47 = v43;
      for (j = v41; j; --j)
      {
        v86[v47] = v45[v46];
        v47 += v40;
        ++v46;
      }
      ++v43;
      v42 += v44;
    }
    while (v43 != v40);
  }
  v62 = 0x100000003;
  v60 = &unk_1E25C7790;
  v61 = xmmword_18D313070;
  v63 = v64;
  v100 = 0x300000003;
  v98 = &unk_1E25C78E0;
  v99 = xmmword_18D30BB60;
  v101 = v102;
  v89 = 0x300000003;
  v87 = &unk_1E25C78E0;
  v88 = xmmword_18D30BB60;
  v90 = (double *)v91;
  sub_18D05C770((uint64_t)&v82, (uint64_t)&v60, (uint64_t)&v98, (uint64_t)&v87);
  sub_18D04F764((uint64_t)&v98, v30, (uint64_t)&v66, (uint64_t)&v66);
  sub_18D16171C((uint64_t)&v98, (uint64_t)&v87);
  v89 = 0x200000002;
  v87 = &unk_1E25C75B0;
  v90 = (double *)v91;
  v88 = xmmword_18D319340;
  sub_18D04BE88((uint64_t)&v87, 0.0);
  v49 = v90;
  *v90 = a12 * a12;
  v49[SHIDWORD(v88) + 1] = a13 * a13;
  v84 = 0x300000001;
  v82 = &unk_1E25C6C50;
  v85 = v86;
  v83 = xmmword_18D319920;
  v86[0] = 0x700000006;
  v100 = 0x100000003;
  v98 = &unk_1E25C77C0;
  v99 = xmmword_18D319330;
  v101 = v102;
  v102[0] = 0x700000006;
  sub_18D1CDE7C((uint64_t)v65, (uint64_t)&v98);
  v62 = 0x200000002;
  v60 = &unk_1E25C75B0;
  v61 = xmmword_18D319340;
  v63 = v64;
  LOBYTE(v98) = 0;
  sub_18D05C654((uint64_t)&v87, (uint64_t)&v60, (BOOL *)&v98);
  v74 = 0x200000002;
  v72 = &unk_1E25C75B0;
  v73 = xmmword_18D319340;
  v75 = v76;
  v105 = 0x100000002;
  v103 = &unk_1E25C7550;
  v104 = xmmword_18D319330;
  v106 = v107;
  v100 = 0x100000008;
  v98 = &unk_1E25C86C0;
  v99 = xmmword_18D319940;
  v101 = v102;
  sub_18D04F504((uint64_t)&v60, (uint64_t)&v103, (uint64_t)&v98, (uint64_t)&v72);
  v51 = v73;
  v50 = DWORD1(v73);
  v79 = 0x200000002;
  v77 = &unk_1E25C75B0;
  v80 = v81;
  *(_QWORD *)&v78 = __PAIR64__(v73, DWORD1(v73));
  DWORD2(v78) = v73 * DWORD1(v73);
  HIDWORD(v78) = DWORD1(v73);
  if (DWORD1(v73))
  {
    v52 = 0;
    v53 = 0;
    v54 = HIDWORD(v73);
    v55 = v75;
    do
    {
      v56 = v52;
      v57 = v53;
      for (k = v51; k; --k)
      {
        v81[v57] = *(_QWORD *)&v55[8 * v56];
        v57 += v50;
        ++v56;
      }
      ++v53;
      v52 += v54;
    }
    while (v53 != v50);
  }
  v105 = 0x100000002;
  v103 = &unk_1E25C7520;
  v104 = xmmword_18D319330;
  v106 = v107;
  v100 = 0x200000002;
  v98 = &unk_1E25C75B0;
  v99 = xmmword_18D319340;
  v101 = v102;
  v84 = 0x200000002;
  v82 = &unk_1E25C75B0;
  v83 = xmmword_18D319340;
  v85 = v86;
  sub_18D05C770((uint64_t)&v77, (uint64_t)&v103, (uint64_t)&v98, (uint64_t)&v82);
  sub_18D1CDF50((uint64_t)&v98, v30, (uint64_t)v65, (uint64_t)v65);
  sub_18D1CDB38((uint64_t)&v98, (uint64_t)&v82);
  v59.f64[0] = a14;
  v100 = 0x800000008;
  v98 = &unk_1E25C87E0;
  v99 = xmmword_18D319930;
  v101 = v102;
  sub_18D064EF4(v30, (uint64_t)&v98, v59);
  sub_18D053AA8(v30, (uint64_t)&v98);
}

uint64_t raven::RavenConvergenceEstimator::Configure(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  int32x4_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  cnstatistics *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::string __p;
  uint64_t v44;
  _BYTE *v45;
  _BYTE v46[520];

  if (*(_BYTE *)(a1 + 57))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 2;
    v3 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 2488), "Configure() called more than once");
    goto LABEL_22;
  }
  v10 = *a2;
  if (!*a2)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() called with null raven parameters");
    goto LABEL_22;
  }
  if (!*(_BYTE *)(v10 + 33))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() called with uninitialized raven parameters");
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v10 + 1016);
  v12 = v11 & 0x7FFFFFFFFFFFFFFFLL;
  v13 = (v11 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  v14 = v11 < 0;
  v15 = v11 < 0 && ((v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (!v14)
    v13 = 0;
  v16 = v12 <= 0x7FF0000000000000;
  v17 = v12 == 0x7FF0000000000000 || v13;
  if (!v16)
    v17 = 1;
  if (((v17 | v15) & 1) != 0 || *(double *)(v10 + 1016) > 1.0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() called with invalid probability speeds differ,%.3lf");
LABEL_22:
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v26) = v3;
    else
      v26 = *(_QWORD *)(a1 + 2488);
LABEL_25:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v38, "%s", v4, v5, v6, v7, v8, v26);
    return 0xFFFFFFFFLL;
  }
  *(_WORD *)(a1 + 2624) = 1;
  v18 = (_OWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2536) = 0x100000000;
  *(_WORD *)(a1 + 2568) = 257;
  *(_QWORD *)(a1 + 2576) = *(_QWORD *)(v10 + 912);
  *(_QWORD *)(a1 + 2600) = *(_QWORD *)(v10 + 920);
  v19 = *(_OWORD *)(a1 + 2568);
  *(_OWORD *)(a1 + 5648) = *(_OWORD *)(a1 + 2584);
  *(_OWORD *)(a1 + 5680) = *(_OWORD *)(a1 + 2616);
  *(_QWORD *)(a1 + 5696) = *(_QWORD *)(a1 + 2632);
  v20 = *(_OWORD *)(a1 + 2552);
  *(_OWORD *)(a1 + 5600) = *(_OWORD *)(a1 + 2536);
  v21 = *(_OWORD *)(a1 + 2536);
  *(_OWORD *)(a1 + 5616) = *(_OWORD *)(a1 + 2552);
  v23 = *(_OWORD *)(a1 + 2584);
  v22 = *(_OWORD *)(a1 + 2600);
  *(_OWORD *)(a1 + 5664) = v22;
  *(_OWORD *)(a1 + 5632) = v19;
  *(_OWORD *)(a1 + 4184) = v21;
  *(_OWORD *)(a1 + 4200) = v20;
  *(_QWORD *)(a1 + 4264) = *(_QWORD *)(a1 + 2616);
  *(_OWORD *)(a1 + 4232) = v23;
  *(_OWORD *)(a1 + 4248) = v22;
  *(_OWORD *)(a1 + 4216) = v19;
  *(_BYTE *)(a1 + 4176) = 0;
  v40 = 0x100000008;
  v38 = &unk_1E25C86C0;
  v41 = &v42;
  v39 = xmmword_18D319940;
  sub_18D04BE88((uint64_t)&v38, 0.0);
  v24 = DWORD2(v39);
  sub_18D054198((uint64_t)&__p, (uint64_t)&v38);
  v25 = vdupq_lane_s32((int32x2_t)(v24 | 0x100000000), 0);
  v25.i32[1] = 1;
  *(int32x4_t *)&__p.__r_.__value_.__r.__words[1] = v25;
  sub_18D053AA8(a1 + 2648, (uint64_t)&__p);
  v44 = 0x800000008;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C87E0;
  v45 = v46;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = v24;
  HIDWORD(__p.__r_.__value_.__r.__words[1]) = v24;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v24 * v24;
  HIDWORD(__p.__r_.__value_.__r.__words[2]) = v24;
  sub_18D04BE88((uint64_t)&__p, 0.0);
  sub_18D053AA8(a1 + 2752, (uint64_t)&__p);
  v44 = 0x100000008;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C86C0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319940;
  v45 = v46;
  sub_18D053B2C(a1 + 2752, a1 + 2648, (uint64_t)&__p);
  sub_18D053AA8(a1 + 3304, (uint64_t)&__p);
  sub_18D053AA8(a1 + 3408, a1 + 2648);
  sub_18D053AA8(a1 + 3512, a1 + 2752);
  sub_18D053AA8(a1 + 4064, a1 + 3304);
  *(_QWORD *)(a1 + 4168) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 4176) = 0;
  *(_DWORD *)(a1 + 4180) = 1;
  if (*(char *)(a1 + 2535) < 0)
    sub_18D077798(&__p, *(void **)(a1 + 2512), *(_QWORD *)(a1 + 2520));
  else
    __p = *(std::string *)(a1 + 2512);
  v28 = raven::RavenSequentialGNSSMeasurementSelector::Configure(a1 + 5704, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v28 & 1) == 0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() failed to configure sequential GNSS measurement selector");
    goto LABEL_41;
  }
  if (*(_BYTE *)(v10 + 3753))
  {
    LOBYTE(v38) = *(_BYTE *)(a1 + 56);
    raven::RavenParameters::GetDebugMsrLoggingFilenameForEstimator(v10, (char *)&v38, &__p);
    raven::RavenSequentialGNSSMeasurementSelector::EnableLoggingToFile(a1 + 5704, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v29 = *(_OWORD *)(a1 + 2568);
  *(_OWORD *)(a1 + 8208) = *(_OWORD *)(a1 + 2584);
  v30 = *(_OWORD *)(a1 + 2616);
  *(_OWORD *)(a1 + 8224) = *(_OWORD *)(a1 + 2600);
  *(_OWORD *)(a1 + 8240) = v30;
  *(_OWORD *)(a1 + 0x2000) = v29;
  v31 = *(_OWORD *)(a1 + 2552);
  *(_OWORD *)(a1 + 8160) = *v18;
  *(_QWORD *)(a1 + 8256) = *(_QWORD *)(a1 + 2632);
  *(_OWORD *)(a1 + 8176) = v31;
  *(_WORD *)(a1 + 0x2000) = 0;
  __p.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
  v32 = (cnstatistics *)sub_18D04AD78(a1 + 8272, (double *)&__p);
  v33 = *(double *)(v10 + 1488);
  if (v33 < 0.0
    || v33 > 1.0
    || (v34 = *(double *)(v10 + 1496), v34 < 0.0)
    || v34 > 1.0
    || (v35 = *(double *)(v10 + 1480), v35 < 0.0))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() failed to set consistency monitor prediction parameters");
    goto LABEL_41;
  }
  *(double *)(a1 + 8312) = v35;
  *(_QWORD *)(a1 + 8296) = *(_QWORD *)(v10 + 1488);
  *(_QWORD *)(a1 + 8304) = *(_QWORD *)(v10 + 1496);
  v36 = 1.0
      - fabs(cnstatistics::InverseNormal(v32, (1.0 - *(double *)(v10 + 912)) * 0.5, 0.0, 1.0)) / *(double *)(v10 + 1504);
  if (v36 < 0.0 || v36 > 1.0 || (v37 = 1.0 - *(double *)(v10 + 912), v37 < 0.0) || v37 > 1.0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() failed to set consistency monitor update parameters");
LABEL_41:
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v26) = a1 - 72;
    else
      v26 = *(_QWORD *)(a1 + 2488);
    goto LABEL_25;
  }
  *(double *)(a1 + 8320) = v36;
  *(double *)(a1 + 8328) = v37;
  if (*(_BYTE *)(a1 + 57))
  {
    puts("Warning: RavenEstimator::Configure() called more than once.");
    return 0xFFFFFFFFLL;
  }
  result = 0;
  *(_QWORD *)(a1 + 1168) = *a2;
  *(_BYTE *)(a1 + 57) = 1;
  return result;
}

void sub_18D23E088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double raven::RavenConvergenceEstimator::GetHDOP(raven::RavenConvergenceEstimator *this)
{
  return *((double *)this + 1019);
}

double raven::RavenConvergenceEstimator::GetPSRPostFitResidualsBasedHorizontalPositionMisclosure(raven::RavenConvergenceEstimator *this)
{
  return *((double *)this + 1017);
}

std::string *raven::RavenConvergenceEstimator::SetLogPrefix(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 2512), a2);
  return std::string::operator=((std::string *)(a1 + 4368), a2);
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::AccessoryVehicleSpeedEvent *a2)
{
  __int128 v4;
  __int128 v5;
  int8x16_t v6;
  cnprint::CNPrinter *v7;
  int8x16_t v8;
  cnprint::CNPrinter *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  cnprint::CNPrinter *v26;
  uint64_t v27;
  char v28;
  cnprint::CNPrinter *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  __int16 v52;
  void *v53;
  __int128 v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  double v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  uint64_t v81;
  char v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  uint64_t v87;
  int8x16_t v88;
  int8x16_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;

  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  v4 = *(_OWORD *)((char *)a2 + 56);
  v90 = *(_OWORD *)((char *)a2 + 40);
  v91 = v4;
  v5 = *(_OWORD *)((char *)a2 + 88);
  v92 = *(_OWORD *)((char *)a2 + 72);
  v93 = v5;
  v6 = *(int8x16_t *)((char *)a2 + 24);
  v88 = *(int8x16_t *)((char *)a2 + 8);
  v89 = v6;
  v7 = (cnprint::CNPrinter *)raven::PopulateAllTimeFields((uint64_t)&v88, (uint64_t)this + 136, v88, v6);
  if (!*((_DWORD *)a2 + 51) || *((_QWORD *)a2 + 30) == *((_QWORD *)a2 + 29))
  {
    if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
    {
      LOWORD(v49) = 12;
      LOBYTE(v52) = 1;
      v53 = (void *)(*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
      *(_QWORD *)&v54 = v18;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v53, "AccessoryVehicleSpeed,rejected,0 speed samples,iOSTime,%.2lf", *(double *)&v90 + (double)v89.i64[1]);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v24) = (_BYTE)this - 72;
      else
        v24 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v49, (unsigned __int8 *)&v52, "%s", v19, v20, v21, v22, v23, v24);
    }
    return 0;
  }
  if (!raven::RavenEstimator::IsZUPTAppropriate(this, a2))
  {
    v54 = 0uLL;
    v53 = &unk_1E25C2438;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v65 = NAN;
    v26 = (cnprint::CNPrinter *)sub_18D193D60((uint64_t)a2, (uint64_t)&v53, v64, v8);
    if ((_DWORD)v26)
    {
      if (cnprint::CNPrinter::GetLogLevel(v26) <= 1)
      {
        v52 = 12;
        v51 = 1;
        v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v50 = v27;
        v28 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,rejected,unable to add USPD,iOSTime,%.2lf", *(double *)&v90 + (double)v89.i64[1]);
        if (*((char *)this + 2511) >= 0)
          LOBYTE(v17) = v28;
        else
          v17 = *((_QWORD *)this + 311);
        goto LABEL_27;
      }
      return 0xFFFFFFFFLL;
    }
    if (cnprint::CNPrinter::GetLogLevel(v26) <= 1)
    {
      v52 = 12;
      v51 = 1;
      v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
      v50 = v32;
      v33 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,accepted,USPD,iOSTime,%.2lf,speed,%.2lf,speedUnc,%.2lf", *(double *)&v90 + (double)v89.i64[1], *(double *)&v64.i64[1], v65);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v39) = v33;
      else
        v39 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "%s", v34, v35, v36, v37, v38, v39);
    }
    raven::RavenConvergenceEstimator::HandleEvent(this, (const raven::UserSpeedEvent *)&v53);
    return 0;
  }
  v54 = 0uLL;
  v53 = &unk_1E25C2278;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v65 = 0.0;
  v64 = (int8x16_t)0x7FF8000000000000uLL;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0x7FF8000000000000;
  v76 = 0;
  v77 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v78 = v77;
  v79 = v77;
  v80 = v77;
  v81 = 0x7FF8000000000000;
  v82 = 0;
  v83 = v77;
  v84 = v77;
  v85 = v77;
  v86 = v77;
  v87 = 0x7FF8000000000000;
  v9 = (cnprint::CNPrinter *)sub_18D193BFC((uint64_t)a2, (uint64_t)&v53, v77, v8);
  if ((_DWORD)v9)
  {
    if (cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      v52 = 12;
      v51 = 1;
      v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
      v50 = v10;
      v11 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,rejected,unable to add ZUPT 2,iOSTime,%.2lf", *(double *)&v90 + (double)v89.i64[1]);
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v17) = v11;
      else
        v17 = *((_QWORD *)this + 311);
LABEL_27:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "%s", v12, v13, v14, v15, v16, v17);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  v29 = (cnprint::CNPrinter *)(*(uint64_t (**)(raven::RavenConvergenceEstimator *, void **))(*(_QWORD *)this + 320))(this, &v53);
  if (!(_DWORD)v29)
  {
    v40 = *((unsigned __int8 *)this + 232);
    *((_OWORD *)this + 15) = v54;
    if (!v40)
      *((_BYTE *)this + 232) = 1;
    if (cnprint::CNPrinter::GetLogLevel(v29) <= 1)
    {
      v52 = 12;
      v51 = 1;
      v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
      v50 = v41;
      v42 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,accepted,ZUPT,iOSTime,%.2lf,speed,%.2lf", *(double *)&v90 + (double)v89.i64[1], *(double *)(*((_QWORD *)a2 + 30) - 8));
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v48) = v42;
      else
        v48 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "%s", v43, v44, v45, v46, v47, v48);
    }
    return 0;
  }
  if (cnprint::CNPrinter::GetLogLevel(v29) <= 1)
  {
    v52 = 12;
    v51 = 1;
    v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
    v50 = v30;
    v31 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,rejected,unable to add ZUPT 1,iOSTime,%.2lf", *(double *)&v90 + (double)v89.i64[1]);
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v17) = v31;
    else
      v17 = *((_QWORD *)this + 311);
    goto LABEL_27;
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::UserSpeedEvent *a2)
{
  double v4;
  __int128 v5;
  uint64_t v6;
  cnprint::CNPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  __n128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60[3];
  _QWORD v61[4];
  char v62;
  __int128 v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  double *v67;
  double v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unsigned __int8 v81;
  void (*v82[5])(uint64_t);

  v82[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57) || !*((_BYTE *)this + 58))
    return 0xFFFFFFFFLL;
  v71 = 0x100000003;
  v69 = &unk_1E25C7790;
  v4 = *((double *)a2 + 14);
  v73 = *((_QWORD *)a2 + 13);
  v66 = 0x300000003;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v70 = v5;
  v72 = &v73;
  v64 = &unk_1E25C78E0;
  v65 = v5;
  v67 = &v68;
  v68 = v4 * v4;
  sub_18D1C7988(v61, 26);
  v61[0] = off_1E25C3EA0;
  *(_QWORD *)&v63 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)&v63 + 1) = v6;
  *(_OWORD *)v60 = v63;
  if ((v65 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v78 = 0x100000003;
  v74 = &unk_1E25C7790;
  v79 = &v80;
  v75 = v65 | 0x100000000;
  v76 = v65;
  v77 = v65;
  v7 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v74, 0.0);
  if (*((_BYTE *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v82[0]) = 2;
      v81 = 2;
      v56 = v60[1] + (double)*(uint64_t *)&v60[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v82, &v81, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v8, v9, v10, v11, v12, SLOBYTE(v56));
    }
    else if (*((_BYTE *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
      {
        LOWORD(v82[0]) = 2;
        v81 = 1;
        v58 = v60[1] + (double)*(uint64_t *)&v60[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v82, &v81, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v58));
      }
    }
    else
    {
      v24 = sub_18D03FE4C(v60, (double *)this + 1043);
      if (v24)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v24) <= 1)
        {
          LOWORD(v82[0]) = 2;
          v81 = 1;
          v59 = v60[1] + (double)*(uint64_t *)&v60[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v82, &v81, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v25, v26, v27, v28, v29, SLOBYTE(v59));
        }
      }
      else
      {
        v82[0] = 0;
        v82[1] = 0;
        sub_18D24E130((void (**)(int))v82, (uint64_t)v61);
        v30 = sub_18D1C7B34((uint64_t *)this + 1047, v82);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v82);
        v31 = *((int *)this + 3568);
        v32 = (v31 + 1);
        if (*((_QWORD *)this + 1049) == v32)
        {
          *((_DWORD *)this + 3568) = v32;
          *((_DWORD *)this + 2102) = v32;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v32;
          *((_DWORD *)this + 2105) = v32;
          *((_DWORD *)this + 2808) = v32;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v32;
          *((_DWORD *)this + 2811) = v32;
          *((_DWORD *)this + 2992) = v32;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v32;
          *((_DWORD *)this + 2995) = v32;
          *((_DWORD *)this + 3350) = v32;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v32;
          *((_DWORD *)this + 3353) = v32;
          *((_DWORD *)this + 3362) = v32;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v32;
          *((_DWORD *)this + 3365) = v32;
          *((_DWORD *)this + 3546) = v32;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v32;
          *((_DWORD *)this + 3549) = v32;
          *((_DWORD *)this + 3558) = v32;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v32;
          *((_DWORD *)this + 3561) = v32;
          *((_DWORD *)this + 3572) = v32;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v32;
          *((_DWORD *)this + 3575) = v32;
          *((_DWORD *)this + 3930) = v32;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v32;
          *((_DWORD *)this + 3933) = v32;
          *(_OWORD *)(*((_QWORD *)this + 1054) + 16 * v31) = *(_OWORD *)v60;
          if (v70 <= DWORD1(v70))
            v33 = DWORD1(v70);
          else
            v33 = v70;
          if (DWORD1(v70))
            v34 = (_DWORD)v70 == 0;
          else
            v34 = 1;
          if (v34)
            v35 = 0;
          else
            v35 = v33;
          *(_DWORD *)(*((_QWORD *)this + 1407) + 4 * v31) = v35;
          sub_18D053AA8(*((_QWORD *)this + 1678) + (v31 << 6), (uint64_t)&v69);
          if (v75 <= HIDWORD(v75))
            v36 = HIDWORD(v75);
          else
            v36 = v75;
          if (HIDWORD(v75))
            v37 = (_DWORD)v75 == 0;
          else
            v37 = 1;
          if (v37)
            v38 = 0;
          else
            v38 = v36;
          *(_DWORD *)(*((_QWORD *)this + 1684) + 4 * v31) = v38;
          sub_18D053AA8(*((_QWORD *)this + 1776) + (v31 << 6), (uint64_t)&v74);
          v39 = sub_18D053AA8(*((_QWORD *)this + 1782) + 112 * (int)v31, (uint64_t)&v64);
          *(_QWORD *)(*((_QWORD *)this + 1789) + 8 * v31) = sub_18D24867C;
          if (*v30)
            v40 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v30)(3, v30, 0, &unk_1E25B4600, &std::__any_imp::__unique_typeinfo<raven::h_UserSpeedArgs_RavenConvergence>::__id, v39);
          else
            v40 = 0;
          v13 = 0;
          *(_QWORD *)(*((_QWORD *)this + 1968) + 8 * v31) = v40;
          goto LABEL_42;
        }
        LOWORD(v82[0]) = 2;
        v81 = 4;
        v41 = (*(uint64_t (**)(uint64_t))(v61[0] + 16))((uint64_t)v61);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v82, &v81, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v42, v43, v44, v45, v46, v41);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
  {
    LOWORD(v82[0]) = 2;
    v81 = 1;
    v57 = v60[1] + (double)*(uint64_t *)&v60[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v82, &v81, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v14, v15, v16, v17, v18, SLOBYTE(v57));
  }
  LOWORD(v82[0]) = 12;
  v81 = 4;
  v74 = (void *)(*(uint64_t (**)(const raven::UserSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
  v75 = v47;
  v48 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v74, "Could not add measurement - user speed");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v54) = v48;
  else
    v54 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v82, &v81, "%s", v49, v50, v51, v52, v53, v54);
  v13 = 0xFFFFFFFFLL;
LABEL_42:
  v61[0] = &unk_1E25B8EE0;
  if (v62 < 0)
    operator delete((void *)v61[2]);
  return v13;
}

void sub_18D23EB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::AltitudeEvent *a2)
{
  double v4;
  __int128 v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  cnprint::CNPrinter *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  __n128 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v59;
  double v60;
  double v61;
  double v62;
  __int128 v63;
  _QWORD v64[4];
  char v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  __int128 v69;
  uint64_t v70;
  double *v71;
  double v72;
  void *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unsigned __int8 v85;
  void (*v86[5])(uint64_t);

  v86[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  v75 = 0x100000003;
  v73 = &unk_1E25C7790;
  v4 = *((double *)a2 + 14);
  v77 = *((_QWORD *)a2 + 13);
  v70 = 0x300000003;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v74 = v5;
  v76 = &v77;
  v68 = &unk_1E25C78E0;
  v69 = v5;
  v71 = &v72;
  v72 = v4 * v4;
  sub_18D1C7988(v64, 2);
  v64[0] = off_1E25C3D38;
  v66 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v67 = v6;
  v8 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v63 = v8;
  *((double *)&v63 + 1) = v7;
  if ((v69 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v82 = 0x100000003;
  v78 = &unk_1E25C7790;
  v83 = &v84;
  v9 = v7;
  v79 = v69 | 0x100000000;
  v80 = v69;
  v81 = v69;
  v10 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v78, 0.0);
  if (*((_BYTE *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v86[0]) = 2;
      v85 = 2;
      v59 = v9 + (double)v8;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v86, &v85, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v11, v12, v13, v14, v15, SLOBYTE(v59));
    }
    else if (*((_BYTE *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
      {
        LOWORD(v86[0]) = 2;
        v85 = 1;
        v61 = v9 + (double)v8;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v86, &v85, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v61));
      }
    }
    else
    {
      v27 = sub_18D03FE4C((double *)&v63, (double *)this + 1043);
      if (v27)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
        {
          LOWORD(v86[0]) = 2;
          v85 = 1;
          v62 = *((double *)&v63 + 1) + (double)(uint64_t)v63;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v86, &v85, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v62));
        }
      }
      else
      {
        v86[0] = 0;
        v86[1] = 0;
        sub_18D24BCB8((void (**)(int))v86, (uint64_t)v64);
        v33 = sub_18D1C7B34((uint64_t *)this + 1047, v86);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v86);
        v34 = *((int *)this + 3568);
        v35 = (v34 + 1);
        if (*((_QWORD *)this + 1049) == v35)
        {
          *((_DWORD *)this + 3568) = v35;
          *((_DWORD *)this + 2102) = v35;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v35;
          *((_DWORD *)this + 2105) = v35;
          *((_DWORD *)this + 2808) = v35;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v35;
          *((_DWORD *)this + 2811) = v35;
          *((_DWORD *)this + 2992) = v35;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v35;
          *((_DWORD *)this + 2995) = v35;
          *((_DWORD *)this + 3350) = v35;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v35;
          *((_DWORD *)this + 3353) = v35;
          *((_DWORD *)this + 3362) = v35;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v35;
          *((_DWORD *)this + 3365) = v35;
          *((_DWORD *)this + 3546) = v35;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v35;
          *((_DWORD *)this + 3549) = v35;
          *((_DWORD *)this + 3558) = v35;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v35;
          *((_DWORD *)this + 3561) = v35;
          *((_DWORD *)this + 3572) = v35;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v35;
          *((_DWORD *)this + 3575) = v35;
          *((_DWORD *)this + 3930) = v35;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v35;
          *((_DWORD *)this + 3933) = v35;
          *(_OWORD *)(*((_QWORD *)this + 1054) + 16 * v34) = v63;
          if (v74 <= DWORD1(v74))
            v36 = DWORD1(v74);
          else
            v36 = v74;
          if (DWORD1(v74))
            v37 = (_DWORD)v74 == 0;
          else
            v37 = 1;
          if (v37)
            v38 = 0;
          else
            v38 = v36;
          *(_DWORD *)(*((_QWORD *)this + 1407) + 4 * v34) = v38;
          sub_18D053AA8(*((_QWORD *)this + 1678) + (v34 << 6), (uint64_t)&v73);
          if (v79 <= HIDWORD(v79))
            v39 = HIDWORD(v79);
          else
            v39 = v79;
          if (HIDWORD(v79))
            v40 = (_DWORD)v79 == 0;
          else
            v40 = 1;
          if (v40)
            v41 = 0;
          else
            v41 = v39;
          *(_DWORD *)(*((_QWORD *)this + 1684) + 4 * v34) = v41;
          sub_18D053AA8(*((_QWORD *)this + 1776) + (v34 << 6), (uint64_t)&v78);
          v42 = sub_18D053AA8(*((_QWORD *)this + 1782) + 112 * (int)v34, (uint64_t)&v68);
          *(_QWORD *)(*((_QWORD *)this + 1789) + 8 * v34) = sub_18D23F130;
          if (*v33)
            v43 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33)(3, v33, 0, &unk_1E25B4588, &std::__any_imp::__unique_typeinfo<raven::h_AltitudeArgs_RavenConvergence>::__id, v42);
          else
            v43 = 0;
          v16 = 0;
          *(_QWORD *)(*((_QWORD *)this + 1968) + 8 * v34) = v43;
          goto LABEL_43;
        }
        LOWORD(v86[0]) = 2;
        v85 = 4;
        v44 = (*(uint64_t (**)(uint64_t))(v64[0] + 16))((uint64_t)v64);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v86, &v85, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v45, v46, v47, v48, v49, v44);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
  {
    LOWORD(v86[0]) = 2;
    v85 = 1;
    v60 = v9 + (double)v8;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v86, &v85, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v60));
  }
  LOWORD(v86[0]) = 12;
  v85 = 4;
  v78 = (void *)(*(uint64_t (**)(const raven::AltitudeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v79 = v50;
  v51 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v78, "Could not add measurement - altitude");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v57) = v51;
  else
    v57 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v86, &v85, "%s", v52, v53, v54, v55, v56, v57);
  v16 = 0xFFFFFFFFLL;
LABEL_43:
  v64[0] = &unk_1E25B8EE0;
  if (v65 < 0)
    operator delete((void *)v64[2]);
  return v16;
}

void sub_18D23F0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D23F130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  double v20;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE v41[64];
  unsigned __int8 v42[48];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  double v47[2];
  double v48;
  float64x2_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 8;
  if (v13
    && ((v15 = *(_DWORD *)(a2 + 8), v16 = *(_DWORD *)(a2 + 12), v15 <= v16)
      ? (v17 = *(_DWORD *)(a2 + 12))
      : (v17 = *(_DWORD *)(a2 + 8)),
        v15 ? (v18 = v16 == 0) : (v18 = 1),
        !v18 ? (v19 = v17 == 1) : (v19 = 0),
        v19))
  {
    v25 = *(_QWORD *)(a1 + 32);
    v49 = *(float64x2_t *)v25;
    v50 = *(_QWORD *)(v25 + 16);
    v47[0] = 0.0;
    v47[1] = 0.0;
    v48 = 0.0;
    if (!cnnavigation::ECEFToLLA(&v49, 1, v47, 1, (uint64_t)v42))
    {
      *(_QWORD *)&v32 = 0x100000001;
      *((_QWORD *)&v32 + 1) = 0x100000001;
      *(_OWORD *)(a4 + 8) = v32;
      **(double **)(a4 + 32) = v48 + **(double **)(a2 + 32);
      v39 = 0x800000001;
      v37 = &unk_1E25C6E00;
      v40 = v41;
      v38 = xmmword_18D331E20;
      sub_18D04BE88((uint64_t)&v37, 0.0);
      sub_18D053AA8(a5, (uint64_t)&v37);
      v33 = *(_QWORD **)(a5 + 32);
      v34 = v44;
      *v33 = v43;
      v35 = *(int *)(a5 + 20);
      v33[v35] = v34;
      v33[2 * v35] = v45;
      v39 = 0x100000001;
      v37 = &unk_1E25C6A40;
      v40 = v41;
      *(_QWORD *)&v36 = 0x100000001;
      *((_QWORD *)&v36 + 1) = 0x100000001;
      v38 = v36;
      sub_18D04BE88((uint64_t)&v37, 0.0);
      *v40 = 0x3FF0000000000000;
      sub_18D053AA8(a6, (uint64_t)&v37);
      return 0;
    }
    LOWORD(v37) = 12;
    v46 = 4;
    v31 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v46, "time,%.3lf,h-function failure on line %d: %s() %s", v26, v27, v28, v29, v30, SLOBYTE(v31));
  }
  else
  {
    LOWORD(v37) = 12;
    v42[0] = 4;
    v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, v42, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v20));
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D23F398(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::AltitudeChangeEvent *a2)
{
  double v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  __int128 v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  cnprint::CNPrinter *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  __n128 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v65;
  double v66;
  double v67;
  double v68;
  __int128 v69;
  _QWORD v70[4];
  char v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  __int128 v76;
  void *v77;
  __int128 v78;
  uint64_t v79;
  double *v80;
  double v81;
  void *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unsigned __int8 v94;
  void (*v95[5])(uint64_t);

  v95[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  v84 = 0x100000003;
  v82 = &unk_1E25C7790;
  v4 = *((double *)a2 + 26);
  v86 = *((_QWORD *)a2 + 25);
  v79 = 0x300000003;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v83 = v5;
  v85 = &v86;
  v77 = &unk_1E25C78E0;
  v78 = v5;
  v80 = &v81;
  v81 = v4 * v4;
  sub_18D1C7988(v70, 3);
  v70[0] = off_1E25C4680;
  v72 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v73 = v6;
  v87 = (void *)(*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v88 = v7;
  v10 = CNTimeSpan::operator-((uint64_t)&v87, (_QWORD *)a2 + 13, v8, v9);
  v11 = *(_OWORD *)(*((_QWORD *)this + 146) + 104);
  v74 = v12 + (double)v10;
  v75 = v11;
  v76 = v11;
  v14 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v69 = v14;
  *((double *)&v69 + 1) = v13;
  if ((v78 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v91 = 0x100000003;
  v87 = &unk_1E25C7790;
  v92 = &v93;
  v15 = v13;
  v88 = v78 | 0x100000000;
  v89 = v78;
  v90 = v78;
  v16 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v87, 0.0);
  if (*((_BYTE *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v95[0]) = 2;
      v94 = 2;
      v65 = v15 + (double)v14;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v65));
    }
    else if (*((_BYTE *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v16) <= 1)
      {
        LOWORD(v95[0]) = 2;
        v94 = 1;
        v67 = v15 + (double)v14;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v67));
      }
    }
    else
    {
      v33 = sub_18D03FE4C((double *)&v69, (double *)this + 1043);
      if (v33)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v33) <= 1)
        {
          LOWORD(v95[0]) = 2;
          v94 = 1;
          v68 = *((double *)&v69 + 1) + (double)(uint64_t)v69;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v34, v35, v36, v37, v38, SLOBYTE(v68));
        }
      }
      else
      {
        v95[0] = 0;
        v95[1] = 0;
        sub_18D24C2B8((void (**)(int))v95, (uint64_t)v70);
        v39 = sub_18D1C7B34((uint64_t *)this + 1047, v95);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v95);
        v40 = *((int *)this + 3568);
        v41 = (v40 + 1);
        if (*((_QWORD *)this + 1049) == v41)
        {
          *((_DWORD *)this + 3568) = v41;
          *((_DWORD *)this + 2102) = v41;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v41;
          *((_DWORD *)this + 2105) = v41;
          *((_DWORD *)this + 2808) = v41;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v41;
          *((_DWORD *)this + 2811) = v41;
          *((_DWORD *)this + 2992) = v41;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v41;
          *((_DWORD *)this + 2995) = v41;
          *((_DWORD *)this + 3350) = v41;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v41;
          *((_DWORD *)this + 3353) = v41;
          *((_DWORD *)this + 3362) = v41;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v41;
          *((_DWORD *)this + 3365) = v41;
          *((_DWORD *)this + 3546) = v41;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v41;
          *((_DWORD *)this + 3549) = v41;
          *((_DWORD *)this + 3558) = v41;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v41;
          *((_DWORD *)this + 3561) = v41;
          *((_DWORD *)this + 3572) = v41;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v41;
          *((_DWORD *)this + 3575) = v41;
          *((_DWORD *)this + 3930) = v41;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v41;
          *((_DWORD *)this + 3933) = v41;
          *(_OWORD *)(*((_QWORD *)this + 1054) + 16 * v40) = v69;
          if (v83 <= DWORD1(v83))
            v42 = DWORD1(v83);
          else
            v42 = v83;
          if (DWORD1(v83))
            v43 = (_DWORD)v83 == 0;
          else
            v43 = 1;
          if (v43)
            v44 = 0;
          else
            v44 = v42;
          *(_DWORD *)(*((_QWORD *)this + 1407) + 4 * v40) = v44;
          sub_18D053AA8(*((_QWORD *)this + 1678) + (v40 << 6), (uint64_t)&v82);
          if (v88 <= HIDWORD(v88))
            v45 = HIDWORD(v88);
          else
            v45 = v88;
          if (HIDWORD(v88))
            v46 = (_DWORD)v88 == 0;
          else
            v46 = 1;
          if (v46)
            v47 = 0;
          else
            v47 = v45;
          *(_DWORD *)(*((_QWORD *)this + 1684) + 4 * v40) = v47;
          sub_18D053AA8(*((_QWORD *)this + 1776) + (v40 << 6), (uint64_t)&v87);
          v48 = sub_18D053AA8(*((_QWORD *)this + 1782) + 112 * (int)v40, (uint64_t)&v77);
          *(_QWORD *)(*((_QWORD *)this + 1789) + 8 * v40) = sub_18D23F9C8;
          if (*v39)
            v49 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v39)(3, v39, 0, &unk_1E25B4940, &std::__any_imp::__unique_typeinfo<raven::h_AltitudeChangeArgs_RavenConvergence<double>>::__id, v48);
          else
            v49 = 0;
          v22 = 0;
          *(_QWORD *)(*((_QWORD *)this + 1968) + 8 * v40) = v49;
          goto LABEL_43;
        }
        LOWORD(v95[0]) = 2;
        v94 = 4;
        v50 = (*(uint64_t (**)(uint64_t))(v70[0] + 16))((uint64_t)v70);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v51, v52, v53, v54, v55, v50);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v16) <= 1)
  {
    LOWORD(v95[0]) = 2;
    v94 = 1;
    v66 = v15 + (double)v14;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v23, v24, v25, v26, v27, SLOBYTE(v66));
  }
  LOWORD(v95[0]) = 12;
  v94 = 4;
  v87 = (void *)(*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v88 = v56;
  v57 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v87, "Could not add measurement - altitude change");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v63) = v57;
  else
    v63 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "%s", v58, v59, v60, v61, v62, v63);
  v22 = 0xFFFFFFFFLL;
LABEL_43:
  v70[0] = &unk_1E25B8EE0;
  if (v71 < 0)
    operator delete((void *)v70[2]);
  return v22;
}

void sub_18D23F968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D23F9C8(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v13;
  double *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  double v42;
  unsigned __int8 v43[32];
  uint64_t v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  __int128 *v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[184];
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _BYTE v57[184];
  void *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _BYTE v63[16];
  uint64_t v64;
  void *v65;
  __int128 v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD v69[7];
  __int128 v70;
  uint64_t v71;
  __int128 *v72;
  __int128 v73;
  uint64_t v74;
  void *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  void *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  double v95[2];

  if (!lpsrc
    || (v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4940, 0)) == 0)
  {
    LOWORD(v80) = 12;
    LOBYTE(v75) = 4;
    v32 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_24:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v80, (unsigned __int8 *)&v75, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v32));
    return 0xFFFFFFFFLL;
  }
  v14 = v13;
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    LOWORD(v80) = 12;
    LOBYTE(v75) = 4;
    v32 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_24;
  }
  v21 = v13[7];
  if (v21 <= 0.0)
  {
    LOWORD(v80) = 12;
    LOBYTE(v75) = 4;
    v32 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_24;
  }
  v95[0] = -v21;
  v92 = 0x100000006;
  v90 = &unk_1E25C8120;
  v93 = &v94;
  v91 = xmmword_18D319950;
  sub_18D04BE88((uint64_t)&v90, 0.0);
  v24 = 0;
  v87 = 0x100000006;
  v85 = &unk_1E25C8120;
  v86 = xmmword_18D319950;
  v88 = &v89;
  v82 = 0x600000006;
  v80 = &unk_1E25C81B0;
  v81 = xmmword_18D314680;
  v83 = &v84;
  v77 = 0x600000006;
  v75 = &unk_1E25C81B0;
  v76 = xmmword_18D314680;
  v78 = &v79;
  do
  {
    *((_DWORD *)&v49 + v24) = v24;
    ++v24;
  }
  while (v24 != 6);
  v25 = 0;
  v71 = 0x100000006;
  v69[6] = &unk_1E25C8150;
  v70 = xmmword_18D319950;
  v73 = v49;
  v72 = &v73;
  v74 = v50;
  v67 = 0x100000006;
  v65 = &unk_1E25C8120;
  v66 = xmmword_18D319950;
  v68 = v69;
  v26 = *(_QWORD *)(a1 + 32);
  do
  {
    v69[v25] = *(_QWORD *)(v26 + 8 * *((int *)&v73 + v25));
    ++v25;
  }
  while (v25 != 6);
  if (sub_18D1C8214((uint64_t)&v65, (uint64_t)&v90, (uint64_t *)v95, (uint64_t)&v85, (uint64_t)&v80, (uint64_t)&v75, v22, v23))
  {
    LOWORD(v45) = 12;
    v43[0] = 4;
    v42 = v14[6] + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, v43, "time,%.3lf,h-function failure on line %d: %s() %s", v27, v28, v29, v30, v31, SLOBYTE(v42));
    return 0xFFFFFFFFLL;
  }
  sub_18D16AF50((uint64_t)v63, **(float64_t **)(a1 + 32), *(float64_t *)(*(_QWORD *)(a1 + 32) + 8), *(double *)(*(_QWORD *)(a1 + 32) + 16));
  if (!v63[8])
  {
    sub_18D1C741C((uint64_t)(v14 + 5), (uint64_t)"could not compute Jacobian", (uint64_t)"h_AltitudeChange_RavenConvergence", 366, v34, v35, v36, v37);
    return 0xFFFFFFFFLL;
  }
  v60 = 0x300000003;
  v58 = &unk_1E25C78E0;
  v59 = xmmword_18D30BB60;
  v61 = &v62;
  sub_18D053AA8((uint64_t)&v58, (uint64_t)&v64);
  sub_18D24BF04((uint64_t)v51);
  sub_18D24BE98((uint64_t)&v52, (uint64_t)&v58, (uint64_t)v51);
  sub_18D24BF74((uint64_t)v43);
  v47 = 0x600000006;
  v45 = &unk_1E25C81B0;
  v46 = xmmword_18D314680;
  v48 = &v49;
  sub_18D0540FC((uint64_t)v43, (uint64_t)&v80, (uint64_t)&v45);
  sub_18D24BE2C((uint64_t)v57, (uint64_t)&v52, (uint64_t)&v45);
  sub_18D24C000((uint64_t)v43, (uint64_t)v57, (uint64_t)&v65);
  v38 = *(double *)(v44 + 16);
  *(_QWORD *)&v39 = 0x100000001;
  *((_QWORD *)&v39 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v39;
  **(double **)(a4 + 32) = v38 + **(double **)(a2 + 32);
  v54 = 0x300000001;
  v52 = &unk_1E25C6C20;
  v55 = &v56;
  v53 = xmmword_18D314670;
  sub_18D04BE88((uint64_t)&v52, 0.0);
  v55[2] = 0x3FF0000000000000;
  sub_18D24C070((uint64_t)&v45, (uint64_t)&v52, (uint64_t)v57);
  sub_18D053AA8(a5, (uint64_t)&v45);
  result = 0;
  *(_OWORD *)(a5 + 8) = xmmword_18D331E20;
  v40 = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(v40 + 48) = 0;
  *(_QWORD *)(v40 + 56) = 0;
  *(_QWORD *)&v41 = 0x100000001;
  *((_QWORD *)&v41 + 1) = 0x100000001;
  *(_OWORD *)(a6 + 8) = v41;
  **(_QWORD **)(a6 + 32) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_18D23FEF0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  raven::RavenEstimator *v2;
  const raven::GnssPreprocessedMeasurementsEvent *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  cnprint::CNPrinter *updated;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  double v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t UnprocessedMSRData;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  const std::string *v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  cnprint::CNPrinter *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  int v94;
  int v95;
  BOOL v96;
  int v97;
  __n128 v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  cnprint::CNPrinter *LogLevel;
  std::string::size_type v114;
  const char *v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::string::size_type v123;
  const char *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::string::size_type v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::string::size_type v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::string::size_type v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::string::size_type v156;
  std::string::size_type v157;
  uint64_t v158;
  double v159;
  double v160;
  uint64_t v161;
  double v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int v169;
  uint64_t v170;
  int8x16_t v171;
  int8x16_t v172;
  uint64_t v173;
  double v174;
  int8x16_t v175;
  _BOOL4 v176;
  int8x16_t *v177;
  _BOOL8 EstimatorPredictAndUpdateArguments;
  int v179;
  std::string::size_type v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  char v198;
  __int128 v199;
  __int128 v200;
  _BOOL4 v201;
  uint64_t v202;
  int8x16_t v203;
  int8x16_t v204;
  char v205;
  void *v206;
  std::string::size_type v207;
  std::string::size_type v208;
  int8x16_t v209;
  int8x16_t v210;
  uint64_t *ITRCount;
  int v212;
  uint64_t *v213;
  unsigned int v214;
  unsigned int v215;
  double v216;
  double v217;
  double v218;
  double v219;
  _BYTE *v220;
  int64x2_t v221;
  uint64_t v222;
  std::string *v223[2];
  void *v224[2];
  char v225;
  void *v226[2];
  char v227;
  void *__p[2];
  char v229;
  _BYTE v230[64];
  __int128 v231;
  uint64_t v232;
  _BYTE v233[32];
  _QWORD *v234;
  _QWORD v235[4];
  __int128 v236;
  _OWORD v237[6];
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  int64x2_t v243;
  char v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  _QWORD v248[2];
  unsigned __int8 v249;
  __int16 v250;
  uint64_t v251;
  uint64_t v252;
  std::string v253;
  uint64_t data;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  _BYTE v262[64];
  __int128 v263;
  int64x2_t v264;
  void (**v265)(cnnavigation::GNSSEphemerides *__hidden);
  std::string v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  int8x16_t v279;
  _QWORD v280[2];
  uint64_t v281[2];
  void *v282;
  uint64_t v283;
  void *v284;
  char v285;
  __int128 v286;
  void *v287;
  char v288;
  void (**v289)(cnnavigation::GNSSEphemerides *__hidden);
  void *v290;
  char v291;
  uint64_t v292[128];
  char v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  int8x16_t v298;
  uint64_t v299;
  void *v300;
  void *v301;
  void *v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  int8x16_t v307;
  __int128 v308;
  uint64_t v309;
  __int128 v310;
  char v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _BYTE v321[32];
  _QWORD *v322;
  _QWORD v323[3];
  _OWORD v324[2];
  uint64_t v325;

  v2 = (raven::RavenEstimator *)MEMORY[0x1E0C80A78](this, a2);
  v325 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)v2 + 57))
    return 0xFFFFFFFFLL;
  v4 = (uint64_t)v2;
  if (!*((_BYTE *)v2 + 58))
    return 0xFFFFFFFFLL;
  v5 = (unsigned int *)v3;
  if (raven::RavenEstimator::HandleGnssPreprocessedMeasurementsEvent(v2, v3))
    return 0xFFFFFFFFLL;
  v282 = (void *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  v283 = v6;
  updated = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::UpdateClockOffsetEstimateIfNecessary(v4, (uint64_t)(v5 + 6), (uint64_t)&v282);
  if (!(_DWORD)updated)
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)v5 + 88))
  {
    if (cnprint::CNPrinter::GetLogLevel(updated) <= 1)
    {
      LOWORD(v253.__r_.__value_.__l.__data_) = 12;
      LOBYTE(v236) = 1;
      v282 = (void *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      v283 = v10;
      cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v282, "Encountered GnssPreprocessedMeasurementsEvent with no oscillator model.");
      if (*(char *)(v4 + 2511) >= 0)
        LOBYTE(v16) = v4 - 72;
      else
        v16 = *(_QWORD *)(v4 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v253, (unsigned __int8 *)&v236, "%s", v11, v12, v13, v14, v15, v16);
    }
    raven::RavenConvergenceEstimator::ResetOscillatorStates((raven::RavenConvergenceEstimator *)v4);
  }
  v310 = 0uLL;
  v311 = 0;
  v313 = 0;
  v312 = 0;
  v314 = 0;
  v316 = 0;
  v315 = 0;
  v317 = 0;
  v319 = 0;
  v318 = 0;
  v320 = 0x7FF8000000000000;
  if (!*(_BYTE *)(*(_QWORD *)(v4 + 1168) + 3811)
    || (v8.i64[0] = 0x3EB0C6F7A0B5ED8DLL, !raven::RavenEstimator::AreGnssMeasurementsAtSameTime(v4, v5, &v310, v8, v9)))
  {
    v245 = (uint64_t)&v245;
    v246 = &v245;
    v247 = 0;
    goto LABEL_20;
  }
  sub_18D242474((uint64_t)&v282, v4 + 2640);
  v306 = *(_OWORD *)(v4 + 8208);
  v307 = *(int8x16_t *)(v4 + 8224);
  v308 = *(_OWORD *)(v4 + 8240);
  v309 = *(_QWORD *)(v4 + 8256);
  v303 = *(_OWORD *)(v4 + 8160);
  v304 = *(_OWORD *)(v4 + 8176);
  v305 = *(_OWORD *)(v4 + 0x2000);
  v296 = v305;
  v297 = v306;
  v298 = v307;
  v294 = v303;
  v295 = v304;
  v299 = *(_QWORD *)(v4 + 8240);
  v293 = 0;
  v17 = v4 + 80;
  *(_OWORD *)&v253.__r_.__value_.__l.__data_ = *(_OWORD *)(v4 + 80);
  v18 = CNTimeSpan::operator-((uint64_t)&v310, &v253, *(int8x16_t *)&v253.__r_.__value_.__l.__data_, v307);
  v22 = v18;
  v23 = v19;
  if (!v18)
  {
    if (v19 >= 0.0)
      goto LABEL_16;
LABEL_135:
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
    {
      LOWORD(v236) = 12;
      v230[0] = 1;
      v253.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      v253.__r_.__value_.__l.__size_ = v148;
      v149 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v253, "GNSS measurement selection: negative prediction interval,dt,%.3lf", v23 + (double)v22);
      if (*(char *)(v4 + 2511) >= 0)
        LOBYTE(v155) = v149;
      else
        v155 = *(_QWORD *)(v4 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v236, v230, "%s", v150, v151, v152, v153, v154, v155);
    }
    v24 = 0;
    goto LABEL_141;
  }
  if (v18 < 0)
    goto LABEL_135;
LABEL_16:
  v24 = 1;
LABEL_141:
  v157 = *(_QWORD *)(v4 + 88);
  v253.__r_.__value_.__r.__words[0] = *(_QWORD *)(v4 + 80);
  v156 = v253.__r_.__value_.__r.__words[0];
  v253.__r_.__value_.__l.__size_ = v157;
  v158 = CNTimeSpan::operator-((uint64_t)&v310, &v253, v20, v21);
  v160 = v159;
  v161 = *(_QWORD *)(v4 + 1168);
  v162 = *(double *)(v161 + 872);
  *(_QWORD *)&v324[0] = v156;
  *((_QWORD *)&v324[0] + 1) = v157;
  v246 = 0;
  v245 = 0;
  *(double *)v163.i64 = v162;
  CNTimeSpan::SetTimeSpan(&v245, 0, v163, v164);
  v165.i64[0] = *(_QWORD *)(v161 + 880);
  v281[1] = 0;
  v281[0] = 0;
  CNTimeSpan::SetTimeSpan(v281, 0, v165, v166);
  if (!v24)
    goto LABEL_172;
  *(double *)v168.i64 = v160;
  *(double *)v167.i64 = (v160 + (double)v158) / v162;
  v169 = vcvtpd_s64_f64(*(double *)v167.i64);
  if (v169 < 1)
    goto LABEL_172;
  *(int64x2_t *)v223 = vdupq_n_s64(0x7FF8000000000000uLL);
  v167 = (int8x16_t)xmmword_18D319330;
  while (1)
  {
    v280[0] = CNTimeSpan::operator+((uint64_t)v324, &v245, v167, v168);
    v280[1] = v170;
    v173 = CNTimeSpan::operator+((uint64_t)v280, v281, v171, v172);
    if (!v173 && (*(_QWORD *)&v174 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_149:
      v175.i64[0] = *((_QWORD *)&v310 + 1);
LABEL_150:
      v176 = *(double *)v175.i64 <= v174;
      goto LABEL_152;
    }
    if (!(_QWORD)v310)
    {
      v175.i64[0] = *((_QWORD *)&v310 + 1);
      if ((*((_QWORD *)&v310 + 1) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        goto LABEL_150;
    }
    if (v173 == (_QWORD)v310)
      goto LABEL_149;
    v176 = v173 > (uint64_t)v310;
LABEL_152:
    v177 = (int8x16_t *)v280;
    if (v176)
      v177 = (int8x16_t *)&v310;
    v279 = *v177;
    v236 = 0uLL;
    *(_OWORD *)((char *)v237 + 8) = *(_OWORD *)v223;
    *(_OWORD *)((char *)&v237[1] + 8) = *(_OWORD *)v223;
    EstimatorPredictAndUpdateArguments = raven::RavenConvergenceEstimator::GetEstimatorPredictAndUpdateArguments(v4, (uint64_t)v324, &v279, (uint64_t)&v236, *(double *)v223, v175);
    if (!EstimatorPredictAndUpdateArguments)
      break;
    data = 0x800000008;
    v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C87E0;
    *(_OWORD *)&v253.__r_.__value_.__r.__words[1] = xmmword_18D319930;
    *(_QWORD *)&v255 = (char *)&v255 + 8;
    if (sub_18D05B61C(v4, (uint64_t)&v236))
    {
      v24 = 0;
      goto LABEL_171;
    }
    *(_QWORD *)&v230[24] = 0x200000002;
    *(_QWORD *)v230 = &unk_1E25C75E0;
    *(_OWORD *)&v230[8] = xmmword_18D319340;
    *(_QWORD *)&v230[32] = &v230[40];
    *(_OWORD *)&v230[40] = xmmword_18D319970;
    *(_QWORD *)&v321[24] = 0x100000002;
    *(_QWORD *)v321 = &unk_1E25C7460;
    *(_OWORD *)&v321[8] = xmmword_18D319330;
    v322 = v323;
    v323[0] = sub_18D054EFC;
    v323[1] = sub_18D055218;
    v252 = *(_QWORD *)&v237[0];
    v251 = *(_QWORD *)&v237[0];
    *(_QWORD *)&v233[24] = 0x100000002;
    *(_QWORD *)v233 = &unk_1E25C74F0;
    *(_OWORD *)&v233[8] = xmmword_18D319330;
    v234 = v235;
    v235[0] = &v252;
    v235[1] = &v251;
    v179 = sub_18D0516F0((uint64_t)&v282, (uint64_t)&v253);
    v24 = v179 == 0;
    if (v179)
    {
      v250 = 12;
      v249 = 4;
      v248[0] = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      v248[1] = v188;
      v189 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)v248, "GNSS measurement selection: could not predict filter,code,%d", v179);
      if (*(char *)(v4 + 2511) >= 0)
        LOBYTE(v195) = v189;
      else
        v195 = *(_QWORD *)(v4 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v250, &v249, "%s", v190, v191, v192, v193, v194, v195);
      goto LABEL_171;
    }
    v167 = v279;
    v324[0] = v279;
    if (v176)
      goto LABEL_171;
    if (!--v169)
    {
      v24 = 1;
LABEL_171:
      v17 = v4 + 80;
      goto LABEL_172;
    }
  }
  v17 = v4 + 80;
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)EstimatorPredictAndUpdateArguments) <= 1)
  {
    *(_WORD *)v230 = 12;
    v321[0] = 1;
    v253.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    v253.__r_.__value_.__l.__size_ = v180;
    v181 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v253, "GNSS measurement selection: could not get predict and update arguments");
    if (*(char *)(v4 + 2511) >= 0)
      LOBYTE(v187) = v181;
    else
      v187 = *(_QWORD *)(v4 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v230, v321, "%s", v182, v183, v184, v185, v186, v187);
  }
  v24 = 0;
LABEL_172:
  raven::PopulateAllTimeFields((uint64_t)&v310, v4 + 136, v167, v168);
  if (*(_BYTE *)(v4 + 1208))
  {
    v232 = *(_QWORD *)(v4 + 1400);
    v196 = *(_OWORD *)(v4 + 1368);
    *(_OWORD *)&v230[32] = *(_OWORD *)(v4 + 1352);
    *(_OWORD *)&v230[48] = v196;
    v231 = *(_OWORD *)(v4 + 1384);
    v197 = *(_OWORD *)(v4 + 1336);
    *(_OWORD *)v230 = *(_OWORD *)(v4 + 1320);
    *(_OWORD *)&v230[16] = v197;
  }
  else
  {
    *(_QWORD *)v230 = 0;
    *(_QWORD *)&v230[8] = 0x3FF0000000000000;
    memset(&v230[16], 0, 48);
    v231 = 0u;
    v232 = 0;
  }
  v198 = *(_BYTE *)(v4 + 2368);
  if (v198)
    v198 = *(_BYTE *)(v4 + 2480);
  LOBYTE(v280[0]) = v198;
  if (*(_BYTE *)(v4 + 1624))
  {
    v322 = *(_QWORD **)(v4 + 1768);
    v199 = *(_OWORD *)(v4 + 1752);
    *(_OWORD *)v321 = *(_OWORD *)(v4 + 1736);
    *(_OWORD *)&v321[16] = v199;
  }
  else
  {
    *(_QWORD *)v321 = 0;
    *(_QWORD *)&v321[8] = 0x3FF0000000000000;
    *(_QWORD *)&v321[24] = 0;
    v322 = 0;
    *(_QWORD *)&v321[16] = 0;
  }
  if (*(_BYTE *)(v4 + 1776))
  {
    v200 = *(_OWORD *)(v4 + 1904);
    *(_OWORD *)v233 = *(_OWORD *)(v4 + 1888);
    *(_OWORD *)&v233[16] = v200;
    v234 = *(_QWORD **)(v4 + 1920);
  }
  else
  {
    *(_QWORD *)v233 = 0;
    *(_QWORD *)&v233[8] = 0x3FF0000000000000;
    *(_QWORD *)&v233[24] = 0;
    v234 = 0;
    *(_QWORD *)&v233[16] = 0;
  }
  if (v24)
  {
    sub_18D20AD6C((uint64_t)&v282, (uint64_t)&v236);
    sub_18D04F338((uint64_t)&v282, (uint64_t)&v253);
    v201 = sub_18D1A0B60(v4 + 5704, (uint64_t)&v310, (uint64_t)&v236, (uint64_t)&v253, v230, (unsigned __int8 *)v280, (__int128 *)v321, (__int128 *)v233);
  }
  else
  {
    v201 = 0;
  }
  v302 = &unk_1E25C5E70;
  v301 = &unk_1E25C5E70;
  v282 = &unk_1E25B9210;
  v300 = &unk_1E25C5E70;
  sub_18D05711C((uint64_t)&v282);
  v245 = (uint64_t)&v245;
  v246 = &v245;
  v247 = 0;
  if (!v201)
    goto LABEL_20;
  LOBYTE(v282) = 0;
  LOBYTE(v283) = 0;
  v202 = raven::RavenSequentialGNSSMeasurementSelector::SelectMeasurements(v4 + 5704, (uint64_t)v5, &v245, (uint64_t)&v282);
  v205 = v202;
  if ((v202 & 1) != 0)
  {
    if ((_BYTE)v283)
    {
      v206 = v282;
      v253.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      v253.__r_.__value_.__l.__size_ = v207;
      v202 = raven::RavenConvergenceEstimator::AdjustClockOffset(v4, (uint64_t)&v253, *(double *)&v206);
      if ((v202 & 1) == 0)
        goto LABEL_192;
    }
  }
  if (*(_DWORD *)(v4 + 288) < 0x1Fu)
  {
    v253.__r_.__value_.__r.__words[0] = CNTimeSpan::operator-(v17, (_QWORD *)(v4 + 64), v203, v204);
    v253.__r_.__value_.__l.__size_ = v208;
    v202 = raven::RavenEstimator::UpdateAggressiveFlooringOfOutputUncertaintyData(v4, (uint64_t)&v253, v4 + 1928, v5[23], v209, v210);
  }
  else
  {
    *(_BYTE *)(v4 + 8128) = 0;
    *(_BYTE *)(v4 + 280) = 0;
  }
  LODWORD(v253.__r_.__value_.__l.__data_) = 1;
  LODWORD(v236) = 5;
  ITRCount = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount(v202, (_QWORD *)(v4 + 7168), (int *)&v253, (int *)&v236);
  v212 = (int)ITRCount;
  LODWORD(v253.__r_.__value_.__l.__data_) = 1;
  LODWORD(v236) = 4;
  v213 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)ITRCount, (_QWORD *)(v4 + 7168), (int *)&v253, (int *)&v236);
  v214 = v213;
  v215 = (_DWORD)v213 + v212;
  *(_DWORD *)(v4 + 312) = v215 - *(_DWORD *)(v4 + 8144);
  LODWORD(v253.__r_.__value_.__l.__data_) = 1;
  LODWORD(v236) = 3;
  UnprocessedMSRData = (uint64_t)raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v213, (_QWORD *)(v4 + 7168), (int *)&v253, (int *)&v236);
  *(_DWORD *)(v4 + 316) = UnprocessedMSRData - *(_DWORD *)(v4 + 8148);
  if (v215)
    *(double *)(v4 + 320) = (double)v214 / (double)v215;
  if ((v205 & 1) == 0)
  {
LABEL_20:
    UnprocessedMSRData = raven::RavenSequentialGNSSMeasurementSelector::GetUnprocessedMSRData(v4 + 5704, (uint64_t)v5, &v245);
    if ((UnprocessedMSRData & 1) != 0)
      goto LABEL_21;
LABEL_192:
    v25 = 0xFFFFFFFFLL;
    goto LABEL_193;
  }
LABEL_21:
  v28 = v246;
  if (v246 == &v245)
    goto LABEL_99;
  v29 = 0;
  v220 = (_BYTE *)(v4 + 8336);
  v222 = v4 + 2488;
  v221 = vdupq_n_s64(0x7FF8000000000000uLL);
  while (2)
  {
    v30 = v28 + 2;
    v31 = (const std::string *)v28[2];
    v32 = *((_DWORD *)v28 + 48);
    if ((v32 - 1) >= 2)
    {
      if (v32 == 3)
      {
        ++v29;
        goto LABEL_93;
      }
      raven::RavenSequentialGNSSMeasurementSelector::GetFinalGnssObservable(v4 + 5704, (uint64_t)(v28 + 2), (uint64_t)&v236);
      if (v244)
      {
        *(_QWORD *)&v233[24] = 0x100000003;
        *(_QWORD *)v233 = &unk_1E25C7790;
        *(_QWORD *)&v33 = 0x100000001;
        *((_QWORD *)&v33 + 1) = 0x100000001;
        *(_OWORD *)&v233[8] = v33;
        v234 = v235;
        *(_QWORD *)&v230[24] = 0x300000003;
        *(_QWORD *)v230 = &unk_1E25C78E0;
        *(_OWORD *)&v230[8] = v33;
        *(_QWORD *)&v230[32] = &v230[40];
        sub_18D0778AC(&v253, "");
        LOBYTE(data) = 0;
        HIDWORD(data) = -1;
        v255 = 0uLL;
        LOBYTE(v256) = 0;
        *((_QWORD *)&v256 + 1) = 0;
        *(_QWORD *)&v257 = 0;
        BYTE8(v257) = 0;
        v258 = 0uLL;
        LOBYTE(v259) = 0;
        *((_QWORD *)&v259 + 1) = 0;
        *(_QWORD *)&v260 = 0;
        *((_QWORD *)&v260 + 1) = 0x7FF8000000000000;
        LODWORD(v261) = 0;
        BYTE4(v261) = 0;
        *((_QWORD *)&v261 + 1) = 0x7FF8000000000000;
        *(int64x2_t *)&v262[8] = v221;
        *(int64x2_t *)&v262[24] = v221;
        *(int64x2_t *)&v262[40] = v221;
        *(_DWORD *)v262 = 2143289344;
        *(_DWORD *)&v262[56] = 2143289344;
        v262[60] = 0;
        LOBYTE(v263) = 0;
        BYTE4(v263) = 0;
        BYTE8(v263) = 0;
        WORD6(v263) = 0;
        BYTE14(v263) = 1;
        v264 = v221;
        v265 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
        sub_18D0778AC(&v266, "");
        LOBYTE(v267) = 0;
        HIDWORD(v267) = -1;
        v268 = 0u;
        v269 = 0u;
        v270 = 0u;
        v271 = 0u;
        v272 = 0u;
        v273 = 0u;
        v274 = 0u;
        v275 = 0u;
        v276 = 0u;
        v277 = 0u;
        v278 = 0u;
        v34 = *v30;
        *(_QWORD *)&v35 = 0x100000001;
        *((_QWORD *)&v35 + 1) = 0x100000001;
        *(_OWORD *)&v233[8] = v35;
        *(_OWORD *)&v230[8] = v35;
        *v234 = *((_QWORD *)&v238 + 1);
        **(double **)&v230[32] = (float)(*((float *)&v241 + 2) * *((float *)&v241 + 2));
        *(_OWORD *)&v262[48] = v241;
        v263 = v242;
        v264 = v243;
        v261 = v237[5];
        *(_OWORD *)v262 = v238;
        *(_OWORD *)&v262[16] = v239;
        *(_OWORD *)&v262[32] = v240;
        v257 = v237[1];
        v258 = v237[2];
        v259 = v237[3];
        v260 = v237[4];
        v255 = v236;
        v256 = v237[0];
        std::string::operator=(&v253, v31);
        data = (uint64_t)v31[1].__r_.__value_.__l.__data_;
        UnprocessedMSRData = (uint64_t)std::string::operator=(&v266, (const std::string *)(v34 + 40));
        v267 = *(_QWORD *)(v34 + 64);
        v36 = *(_OWORD *)(v34 + 72);
        v37 = *(_OWORD *)(v34 + 104);
        v269 = *(_OWORD *)(v34 + 88);
        v270 = v37;
        v268 = v36;
        v38 = *(_OWORD *)(v34 + 120);
        v39 = *(_OWORD *)(v34 + 136);
        v40 = *(_OWORD *)(v34 + 168);
        v273 = *(_OWORD *)(v34 + 152);
        v274 = v40;
        v271 = v38;
        v272 = v39;
        v41 = *(_OWORD *)(v34 + 184);
        v42 = *(_OWORD *)(v34 + 200);
        v43 = *(_OWORD *)(v34 + 232);
        v277 = *(_OWORD *)(v34 + 216);
        v278 = v43;
        v275 = v41;
        v276 = v42;
        v44 = *(_DWORD *)(v28[3] + 96);
        if ((v44 - 3) >= 2)
        {
          if (v44 == 2)
          {
            sub_18D24B5B0((uint64_t)&v282, (__int128 *)&v253);
            v286 = *(_OWORD *)v28[3];
            v63 = v283;
            v64 = (char *)sub_18D181C54((uint64_t)v31);
            sub_18D0778AC(v226, v64);
            sub_18D1A1738((uint64_t)&v282, v63, (__int128 *)v226);
            if (v227 < 0)
              operator delete(v226[0]);
            if (sub_18D2436BC((uint64_t)v220, (double *)&v286, (uint64_t)v233, (uint64_t)v230, (uint64_t)&v282))
            {
              LOWORD(v324[0]) = 12;
              LOBYTE(v281[0]) = 4;
              *(_QWORD *)v321 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
              *(_QWORD *)&v321[8] = v65;
              v66 = sub_18D181C54((uint64_t)v31);
              cnprint::CNLogFormatter::FormatGeneral(v222, (uint64_t)v321, "Could not add measurement - Doppler for %s", v66);
              LOBYTE(v72) = v4 - 72;
              if (*(char *)(v4 + 2511) < 0)
                v72 = *(_QWORD *)(v4 + 2488);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v281, "%s", v67, v68, v69, v70, v71, v72);
            }
            UnprocessedMSRData = sub_18D243AE8((uint64_t)&v282);
          }
          else if (v44 == 1)
          {
            sub_18D24B36C((uint64_t)&v282, (__int128 *)&v253);
            v286 = *(_OWORD *)v28[3];
            v45 = v283;
            v46 = (char *)sub_18D181C54((uint64_t)v31);
            sub_18D0778AC(__p, v46);
            sub_18D1A1738((uint64_t)&v282, v45, (__int128 *)__p);
            if (v229 < 0)
              operator delete(__p[0]);
            sub_18D1893E8(v292, (uint64_t *)(*v30 + 312));
            if (sub_18D242CD4((uint64_t)v220, (double *)&v286, (uint64_t)v233, (uint64_t)v230, (uint64_t)&v282))
            {
              LOWORD(v324[0]) = 12;
              LOBYTE(v281[0]) = 4;
              *(_QWORD *)v321 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
              *(_QWORD *)&v321[8] = v47;
              v48 = sub_18D181C54((uint64_t)v31);
              cnprint::CNLogFormatter::FormatGeneral(v222, (uint64_t)v321, "Could not add measurement - PSR for %s", v48);
              LOBYTE(v54) = v4 - 72;
              if (*(char *)(v4 + 2511) < 0)
                v54 = *(_QWORD *)(v4 + 2488);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v281, "%s", v49, v50, v51, v52, v53, v54);
            }
            UnprocessedMSRData = sub_18D243100((uint64_t)&v282);
          }
          goto LABEL_89;
        }
        sub_18D24B7D4((uint64_t)&v282, (__int128 *)&v253);
        v286 = *(_OWORD *)v28[3];
        v55 = v283;
        v56 = (char *)sub_18D181C54((uint64_t)v31);
        sub_18D0778AC(v224, v56);
        sub_18D1A1738((uint64_t)&v282, v55, (__int128 *)v224);
        if (v225 < 0)
          operator delete(v224[0]);
        if ((*(_DWORD *)&v230[8] & 0x80000000) != 0)
          __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
        *(_QWORD *)&v321[24] = 0x100000003;
        *(_QWORD *)v321 = &unk_1E25C7790;
        v322 = v323;
        *(_DWORD *)&v321[8] = *(_DWORD *)&v230[8];
        *(_DWORD *)&v321[12] = 1;
        *(_DWORD *)&v321[16] = *(_DWORD *)&v230[8];
        *(_DWORD *)&v321[20] = *(_DWORD *)&v230[8];
        v57 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)v321, 0.0);
        if (*v220)
        {
          if (*(_DWORD *)(v4 + 14272) == 174)
          {
            LOWORD(v324[0]) = 2;
            LOBYTE(v281[0]) = 2;
            v216 = *((double *)&v286 + 1) + (double)(uint64_t)v286;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v281, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v58, v59, v60, v61, v62, SLOBYTE(v216));
            goto LABEL_80;
          }
          if (*(_BYTE *)(v4 + 8337))
          {
            if (cnprint::CNPrinter::GetLogLevel(v57) <= 1)
            {
              LOWORD(v324[0]) = 2;
              LOBYTE(v281[0]) = 1;
              v218 = *((double *)&v286 + 1) + (double)(uint64_t)v286;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v281, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v78, v79, v80, v81, v82, SLOBYTE(v218));
            }
            goto LABEL_80;
          }
          v83 = sub_18D03FE4C((double *)&v286, (double *)(v4 + 8344));
          if (v83)
          {
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v83) <= 1)
            {
              LOWORD(v324[0]) = 2;
              LOBYTE(v281[0]) = 1;
              v219 = *((double *)&v286 + 1) + (double)(uint64_t)v286;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v281, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v84, v85, v86, v87, v88, SLOBYTE(v219));
            }
            goto LABEL_80;
          }
          v324[0] = 0uLL;
          sub_18D24D12C((void (**)(int))v324, (uint64_t)&v282);
          v89 = sub_18D1C7B34((uint64_t *)(v4 + 8376), (void (**)(uint64_t))v324);
          sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v324);
          v90 = *(int *)(v4 + 14272);
          v91 = (v90 + 1);
          if (*(_QWORD *)(v4 + 8392) != v91)
          {
            LOWORD(v324[0]) = 2;
            LOBYTE(v281[0]) = 4;
            v99 = (*((uint64_t (**)(void **))v282 + 2))(&v282);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v281, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v100, v101, v102, v103, v104, v99);
            goto LABEL_80;
          }
          *(_DWORD *)(v4 + 14272) = v91;
          *(_DWORD *)(v4 + 8408) = v91;
          *(_DWORD *)(v4 + 8412) = 1;
          *(_DWORD *)(v4 + 8416) = v91;
          *(_DWORD *)(v4 + 8420) = v91;
          *(_DWORD *)(v4 + 11232) = v91;
          *(_DWORD *)(v4 + 11236) = 1;
          *(_DWORD *)(v4 + 11240) = v91;
          *(_DWORD *)(v4 + 11244) = v91;
          *(_DWORD *)(v4 + 11968) = v91;
          *(_DWORD *)(v4 + 11972) = 1;
          *(_DWORD *)(v4 + 11976) = v91;
          *(_DWORD *)(v4 + 11980) = v91;
          *(_DWORD *)(v4 + 13400) = v91;
          *(_DWORD *)(v4 + 13404) = 1;
          *(_DWORD *)(v4 + 13408) = v91;
          *(_DWORD *)(v4 + 13412) = v91;
          *(_DWORD *)(v4 + 13448) = v91;
          *(_DWORD *)(v4 + 13452) = 1;
          *(_DWORD *)(v4 + 13456) = v91;
          *(_DWORD *)(v4 + 13460) = v91;
          *(_DWORD *)(v4 + 14184) = v91;
          *(_DWORD *)(v4 + 14188) = 1;
          *(_DWORD *)(v4 + 14192) = v91;
          *(_DWORD *)(v4 + 14196) = v91;
          *(_DWORD *)(v4 + 14232) = v91;
          *(_DWORD *)(v4 + 14236) = 1;
          *(_DWORD *)(v4 + 14240) = v91;
          *(_DWORD *)(v4 + 14244) = v91;
          *(_DWORD *)(v4 + 14288) = v91;
          *(_DWORD *)(v4 + 14292) = 1;
          *(_DWORD *)(v4 + 14296) = v91;
          *(_DWORD *)(v4 + 14300) = v91;
          *(_DWORD *)(v4 + 15720) = v91;
          *(_DWORD *)(v4 + 15724) = 1;
          *(_DWORD *)(v4 + 15728) = v91;
          *(_DWORD *)(v4 + 15732) = v91;
          *(_OWORD *)(*(_QWORD *)(v4 + 8432) + 16 * v90) = v286;
          if (*(_DWORD *)&v233[8] <= *(_DWORD *)&v233[12])
            v92 = *(_DWORD *)&v233[12];
          else
            v92 = *(_DWORD *)&v233[8];
          if (*(_DWORD *)&v233[12])
            v93 = *(_DWORD *)&v233[8] == 0;
          else
            v93 = 1;
          if (v93)
            v94 = 0;
          else
            v94 = v92;
          *(_DWORD *)(*(_QWORD *)(v4 + 11256) + 4 * v90) = v94;
          sub_18D053AA8(*(_QWORD *)(v4 + 13424) + (v90 << 6), (uint64_t)v233);
          if (*(_DWORD *)&v321[8] <= *(_DWORD *)&v321[12])
            v95 = *(_DWORD *)&v321[12];
          else
            v95 = *(_DWORD *)&v321[8];
          if (*(_DWORD *)&v321[12])
            v96 = *(_DWORD *)&v321[8] == 0;
          else
            v96 = 1;
          if (v96)
            v97 = 0;
          else
            v97 = v95;
          *(_DWORD *)(*(_QWORD *)(v4 + 13472) + 4 * v90) = v97;
          sub_18D053AA8(*(_QWORD *)(v4 + 14208) + (v90 << 6), (uint64_t)v321);
          v98 = sub_18D053AA8(*(_QWORD *)(v4 + 14256) + 112 * (int)v90, (uint64_t)v230);
          *(_QWORD *)(*(_QWORD *)(v4 + 14312) + 8 * v90) = sub_18D243B68;
          if (*v89)
            UnprocessedMSRData = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v89)(3, v89, 0, &unk_1E25B49F8, &std::__any_imp::__unique_typeinfo<raven::h_GnssAverageDopplerArgs_RavenConvergence>::__id, v98);
          else
            UnprocessedMSRData = 0;
          *(_QWORD *)(*(_QWORD *)(v4 + 15744) + 8 * v90) = UnprocessedMSRData;
        }
        else
        {
          if (cnprint::CNPrinter::GetLogLevel(v57) <= 1)
          {
            LOWORD(v324[0]) = 2;
            LOBYTE(v281[0]) = 1;
            v217 = *((double *)&v286 + 1) + (double)(uint64_t)v286;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v281, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v73, v74, v75, v76, v77, SLOBYTE(v217));
          }
LABEL_80:
          LOWORD(v324[0]) = 12;
          LOBYTE(v281[0]) = 4;
          *(_QWORD *)v321 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
          *(_QWORD *)&v321[8] = v105;
          v106 = sub_18D181C54((uint64_t)v31);
          cnprint::CNLogFormatter::FormatGeneral(v222, (uint64_t)v321, "Could not add measurement - average Doppler for %s", v106);
          LOBYTE(v112) = v4 - 72;
          if (*(char *)(v4 + 2511) < 0)
            v112 = *(_QWORD *)(v4 + 2488);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v281, "%s", v107, v108, v109, v110, v111, v112);
        }
        v282 = &unk_1E25B8EE0;
        if (v285 < 0)
          operator delete(v284);
        v289 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
        if (v291 < 0)
          operator delete(v290);
        v289 = off_1E25B93B0;
        if (v288 < 0)
          operator delete(v287);
LABEL_89:
        v265 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
        if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v266.__r_.__value_.__l.__data_);
        v265 = off_1E25B93B0;
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
      }
    }
LABEL_93:
    v28 = (uint64_t *)v28[1];
    if (v28 != &v245)
      continue;
    break;
  }
  if (v29)
    UnprocessedMSRData = sub_18D1A37F8(v4 + 8264, v29, *(_DWORD *)(*(_QWORD *)(v4 + 1168) + 1472));
LABEL_99:
  LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)UnprocessedMSRData);
  if (LogLevel <= 1)
  {
    LOWORD(v236) = 12;
    v230[0] = 1;
    v253.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    v253.__r_.__value_.__l.__size_ = v114;
    raven::RavenSequentialGNSSMeasurementSelector::StringOfL1MeasurementCountsByConstellation((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 5704), &v282);
    v115 = SHIBYTE(v284) >= 0 ? (const char *)&v282 : (const char *)v282;
    v116 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v253, "%s", v115);
    if (*(char *)(v4 + 2511) >= 0)
      LOBYTE(v122) = v116;
    else
      v122 = *(_QWORD *)(v4 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v236, v230, "%s", v117, v118, v119, v120, v121, v122);
    if (SHIBYTE(v284) < 0)
      operator delete(v282);
  }
  if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v236) = 12;
    v230[0] = 1;
    v253.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    v253.__r_.__value_.__l.__size_ = v123;
    raven::RavenSequentialGNSSMeasurementSelector::StringOfL5MeasurementCountsByConstellation((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 5704), &v282);
    v124 = SHIBYTE(v284) >= 0 ? (const char *)&v282 : (const char *)v282;
    v125 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v253, "%s", v124);
    if (*(char *)(v4 + 2511) >= 0)
      LOBYTE(v131) = v125;
    else
      v131 = *(_QWORD *)(v4 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v236, v230, "%s", v126, v127, v128, v129, v130, v131);
    if (SHIBYTE(v284) < 0)
      operator delete(v282);
  }
  LOWORD(v236) = 12;
  v230[0] = 2;
  v253.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  v253.__r_.__value_.__l.__size_ = v132;
  raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCounts((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 5704), &v282);
  if (SHIBYTE(v284) >= 0)
    v133 = (const char *)&v282;
  else
    v133 = (const char *)v282;
  cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v253, "%s", v133);
  if (*(char *)(v4 + 2511) >= 0)
    LOBYTE(v139) = v4 - 72;
  else
    v139 = *(_QWORD *)(v4 + 2488);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v236, v230, "%s", v134, v135, v136, v137, v138, v139);
  if (SHIBYTE(v284) < 0)
    operator delete(v282);
  LOWORD(v236) = 12;
  v230[0] = 2;
  v253.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  v253.__r_.__value_.__l.__size_ = v140;
  raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCountsForRayTracedMeasurements((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 5704), &v282);
  if (SHIBYTE(v284) >= 0)
    v141 = (const char *)&v282;
  else
    v141 = (const char *)v282;
  cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v253, "%s", v141);
  if (*(char *)(v4 + 2511) >= 0)
    LOBYTE(v147) = v4 - 72;
  else
    v147 = *(_QWORD *)(v4 + 2488);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v236, v230, "%s", v142, v143, v144, v145, v146, v147);
  if (SHIBYTE(v284) < 0)
    operator delete(v282);
  v25 = 0;
LABEL_193:
  sub_18D1C5494(&v245);
  return v25;
}

void sub_18D241698(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_18D076A08(a1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenConvergenceEstimator::UpdateClockOffsetEstimateIfNecessary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  uint64_t v6;
  cnprint::CNPrinter *v7;
  double v8;
  double v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v18;
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  __int16 v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;

  if (*(_BYTE *)(a2 + 8))
    v5 = *(_BYTE *)(a2 + 24) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v31 = 0x100000008;
    v29 = &unk_1E25C86C0;
    v30 = xmmword_18D319940;
    v32 = (double *)&v33;
    if (*(_DWORD *)(a1 + 4180))
      v6 = a1 + 3408;
    else
      v6 = a1 + 2648;
    sub_18D053AA8((uint64_t)&v29, v6);
    v8 = v32[6] * 0.001;
    v9 = round(v8);
    if (fabs(v9) < 2.22044605e-16)
      return 1;
    if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
    {
      v28 = 12;
      v27 = 1;
      v10 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a3, "clock offset exceeds 0.5 ms,%.3lf ms", v8);
      if (*(char *)(a1 + 2511) >= 0)
        LOBYTE(v16) = v10;
      else
        v16 = *(_QWORD *)(a1 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v11, v12, v13, v14, v15, v16);
    }
    return raven::RavenConvergenceEstimator::AdjustClockOffset(a1, a3, v9 * -0.001);
  }
  else
  {
    v18 = *(double *)(a2 + 16);
    if (vabdd_f64(*(double *)a2, v18) < 2.22044605e-16)
      return 1;
    v19 = *(double *)a2 - v18;
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v29) = 12;
      LOBYTE(v28) = 1;
      v20 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a3, "clock jump detected");
      if (*(char *)(a1 + 2511) >= 0)
        LOBYTE(v26) = v20;
      else
        v26 = *(_QWORD *)(a1 + 2488);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, (unsigned __int8 *)&v28, "%s", v21, v22, v23, v24, v25, v26);
    }
    return raven::RavenConvergenceEstimator::AdjustClockOffset(a1, a3, v19);
  }
}

void raven::RavenConvergenceEstimator::ResetOscillatorStates(raven::RavenConvergenceEstimator *this)
{
  uint64_t v2;
  double v3;
  double v4;
  double *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t *v11;
  int v12;
  int v13;
  int i;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  double v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  __int128 v38;
  int v39;
  int j;
  int v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  __int128 v46;
  char v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int k;
  int v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  _BYTE *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  int v63;
  _DWORD *v64;
  int v65;
  int v66;
  int m;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  int v79;
  uint64_t v80;
  void *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD v90[3];
  __int128 v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  double *v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD v109[64];
  _BYTE v110[24];
  uint64_t v111;
  _QWORD *v112;
  _QWORD v113[84];
  void *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD v121[8];
  _BYTE v122[72];
  void *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  _DWORD *v129;
  _DWORD v130[8];
  void *v131;
  __int128 v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE v135[32];
  void *v136;
  __int128 v137;
  uint64_t v138;
  _DWORD *v139;
  _DWORD v140[12];

  *((_OWORD *)this + 7) = *((_OWORD *)this + 5);
  v97 = 0x200000002;
  v95 = &unk_1E25C75B0;
  v98 = (double *)&v99;
  v96 = xmmword_18D319340;
  sub_18D04BE88((uint64_t)&v95, 0.0);
  v2 = *((_QWORD *)this + 146);
  v3 = *(double *)(v2 + 1256) * *(double *)(v2 + 1256);
  v4 = *(double *)(v2 + 1264) * *(double *)(v2 + 1264);
  v5 = v98;
  *v98 = v3;
  v5[SHIDWORD(v96) + 1] = v4;
  v113[0] = 0x700000006;
  v92 = 0x100000002;
  v90[2] = &unk_1E25C7550;
  v91 = xmmword_18D319330;
  v93 = &v94;
  v94 = 0x700000006;
  v88 = 0x100000002;
  v86 = &unk_1E25C7520;
  v89 = v90;
  v87 = xmmword_18D319330;
  sub_18D04BE88((uint64_t)&v86, 0.0);
  v138 = 0x200000002;
  v136 = &unk_1E25C75B0;
  v137 = xmmword_18D319340;
  v139 = v140;
  v110[0] = 0;
  sub_18D05C654((uint64_t)&v95, (uint64_t)&v136, v110);
  v102 = 0x200000002;
  v100 = &unk_1E25C75B0;
  v101 = xmmword_18D319340;
  v103 = &v104;
  v107 = 0x100000002;
  v105 = &unk_1E25C7550;
  v106 = xmmword_18D319330;
  v108 = v109;
  v111 = 0x100000008;
  *(_QWORD *)v110 = &unk_1E25C86C0;
  *(_OWORD *)&v110[8] = xmmword_18D319940;
  v112 = v113;
  sub_18D04F504((uint64_t)&v136, (uint64_t)&v105, (uint64_t)v110, (uint64_t)&v100);
  v6 = DWORD1(v101);
  v7 = v101;
  v107 = 0x200000002;
  v105 = &unk_1E25C75B0;
  v108 = v109;
  *(_QWORD *)&v106 = __PAIR64__(v101, DWORD1(v101));
  DWORD2(v106) = v101 * DWORD1(v101);
  HIDWORD(v106) = DWORD1(v101);
  if (DWORD1(v101))
  {
    v8 = 0;
    v9 = 0;
    v10 = HIDWORD(v101);
    v11 = v103;
    do
    {
      v12 = v8;
      v13 = v9;
      for (i = v7; i; --i)
      {
        v109[v13] = v11[v12];
        v13 += v6;
        ++v12;
      }
      ++v9;
      v8 += v10;
    }
    while (v9 != v6);
  }
  v133 = 0x100000002;
  v131 = &unk_1E25C7520;
  v132 = xmmword_18D319330;
  v134 = v135;
  v111 = 0x200000002;
  *(_QWORD *)v110 = &unk_1E25C75B0;
  *(_OWORD *)&v110[8] = xmmword_18D319340;
  v112 = v113;
  v83 = 0x200000002;
  v81 = &unk_1E25C75B0;
  v82 = xmmword_18D319340;
  v84 = &v85;
  sub_18D05C770((uint64_t)&v105, (uint64_t)&v131, (uint64_t)v110, (uint64_t)&v81);
  if (v91 <= DWORD1(v91))
    v15 = DWORD1(v91);
  else
    v15 = v91;
  if (DWORD1(v91))
    v16 = (_DWORD)v91 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  v111 = 0x100000002;
  *(_QWORD *)v110 = &unk_1E25C7520;
  *(_OWORD *)&v110[8] = xmmword_18D319330;
  v112 = v113;
  sub_18D053B2C((uint64_t)&v81, (uint64_t)&v86, (uint64_t)v110);
  v18 = sub_18D1CD594((uint64_t)&v100, (uint64_t)v110);
  if (!*((_DWORD *)this + 1045))
  {
    sub_18D053AA8((uint64_t)this + 3408, (uint64_t)this + 2648);
    sub_18D053AA8((uint64_t)this + 3512, (uint64_t)this + 2752);
    *(_QWORD *)&v18 = sub_18D053AA8((uint64_t)this + 4064, (uint64_t)this + 3304).n128_u64[0];
  }
  *((_DWORD *)this + 1045) = 1;
  if (!(_DWORD)v91 || !DWORD1(v91))
  {
    sub_18D053AA8((uint64_t)this + 2648, (uint64_t)this + 3408);
    sub_18D053AA8((uint64_t)this + 2752, (uint64_t)this + 3512);
    sub_18D053AA8((uint64_t)this + 3304, (uint64_t)this + 4064);
    *((_DWORD *)this + 1045) = 1;
    goto LABEL_92;
  }
  *((_BYTE *)this + 4176) = 0;
  v19 = *((_DWORD *)this + 854);
  v20 = *((_DWORD *)this + 855);
  if (v19 <= v20)
    v21 = *((_DWORD *)this + 855);
  else
    v21 = *((_DWORD *)this + 854);
  if (v20)
    v22 = v19 == 0;
  else
    v22 = 1;
  if (v22)
    v23 = 0;
  else
    v23 = v21;
  v80 = v17;
  if ((int)v17 >= 1)
  {
    v24 = 0;
    do
    {
      v25 = *(_DWORD *)((char *)v93 + v24);
      if (v25 < 0 || v25 >= (int)v23)
      {
        *(_WORD *)v110 = 2;
        LOBYTE(v105) = 4;
        cnprint::CNLogFormatter::FormatGeneral((const void **)this + 543, "ResetStates(): states must contain valid indices into x, Rxx, and zx.", v18);
        if (*((char *)this + 4367) >= 0)
          LOBYTE(v31) = (_BYTE)this - 8;
        else
          v31 = *((_QWORD *)this + 543);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v110, (unsigned __int8 *)&v105, "%s", v26, v27, v28, v29, v30, v31);
      }
      v24 += 4;
    }
    while (4 * v17 != v24);
  }
  v111 = 0x800000001;
  *(_QWORD *)v110 = &unk_1E25C6E30;
  v112 = v113;
  v32 = v23 - 1;
  if ((_DWORD)v23 == 1)
  {
    v35 = 0;
    *(_QWORD *)&v38 = 0x100000001;
    *((_QWORD *)&v38 + 1) = 0x100000001;
    *(_OWORD *)&v110[8] = v38;
    LODWORD(v113[0]) = 0;
    v36 = 1;
    v37 = 1;
    v33 = v80;
  }
  else
  {
    v33 = v80;
    if ((int)v23 <= 0)
    {
      v36 = 0;
      v37 = 0;
      *(_QWORD *)&v110[8] = 0;
      *(_QWORD *)&v110[16] = 0;
      v35 = 1;
    }
    else
    {
      v34 = 0;
      *(_DWORD *)&v110[8] = 1;
      *(_DWORD *)&v110[12] = v23;
      *(_DWORD *)&v110[16] = v23;
      *(_DWORD *)&v110[20] = 1;
      do
      {
        *((_DWORD *)v113 + v34) = v34;
        ++v34;
      }
      while (v23 != v34);
      v35 = 0;
      v36 = 1;
      v37 = v23;
    }
  }
  v138 = 0x100000008;
  v136 = &unk_1E25C86F0;
  v139 = v140;
  *(_QWORD *)&v137 = __PAIR64__(v36, v37);
  DWORD2(v137) = v37 * v36;
  HIDWORD(v137) = v37;
  if (v37)
  {
    v39 = 0;
    for (j = 0; j != v37; ++j)
    {
      if ((v35 & 1) == 0)
      {
        v41 = 0;
        do
        {
          v140[j + HIDWORD(v137) * v41] = *((_DWORD *)v113 + v39 + v41);
          ++v41;
        }
        while (v36 != v41);
      }
      v39 += v36;
    }
  }
  if ((int)v33 > 0)
  {
    v42 = (int *)v93;
    v43 = v33;
    do
    {
      v44 = *v42++;
      v140[v44] = -1;
      --v43;
    }
    while (v43);
  }
  v133 = 0x100000008;
  v134 = 0;
  v132 = 0uLL;
  v131 = &unk_1E25C86F0;
  if ((v23 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v45 = vdupq_lane_s32((int32x2_t)(v23 | 0x100000000), 0);
  v45.i32[1] = 1;
  *(_QWORD *)&v46 = 0x100000001;
  *((_QWORD *)&v46 + 1) = 0x100000001;
  v132 = (__int128)v45;
  v134 = v135;
  v111 = 0x800000001;
  *(_QWORD *)v110 = &unk_1E25C6E30;
  v112 = v113;
  if ((_DWORD)v33 == 1)
  {
    v47 = 0;
    *(_OWORD *)&v110[8] = v46;
    LODWORD(v113[0]) = 0;
    v48 = 1;
    v49 = 1;
  }
  else if ((int)v33 <= 0)
  {
    v48 = 0;
    v49 = 0;
    *(_QWORD *)&v110[8] = 0;
    *(_QWORD *)&v110[16] = 0;
    v47 = 1;
  }
  else
  {
    v50 = 0;
    *(_DWORD *)&v110[8] = 1;
    *(_DWORD *)&v110[12] = v33;
    *(_DWORD *)&v110[16] = v33;
    *(_DWORD *)&v110[20] = 1;
    do
    {
      *((_DWORD *)v113 + v50) = v50;
      ++v50;
    }
    while (v33 != v50);
    v47 = 0;
    v48 = 1;
    v49 = v33;
  }
  v128 = 0x100000008;
  v123 = &unk_1E25C86F0;
  v129 = v130;
  v124 = v49;
  v125 = v48;
  v126 = v49 * v48;
  v127 = v49;
  if (v49)
  {
    v51 = 0;
    for (k = 0; k != v49; ++k)
    {
      if ((v47 & 1) == 0)
      {
        v53 = 0;
        do
        {
          v130[k + v127 * v53] = *((_DWORD *)v113 + v51 + v53);
          ++v53;
        }
        while (v48 != v53);
      }
      v51 += v48;
    }
  }
  sub_18D24EBB4((uint64_t)v110, (uint64_t)&v131, (uint64_t)&v123);
  sub_18D24E550((uint64_t)v110, SDWORD2(v91), (int *)v93);
  v54 = v23 - v33;
  if ((int)v23 > (int)v33)
  {
    LODWORD(v55) = 0;
    v56 = v139;
    v57 = v134;
    v58 = (int)v33;
    do
    {
      v55 = (int)v55;
      do
        v59 = v56[v55++];
      while (v59 == -1);
      *(_DWORD *)&v57[4 * v58++] = v59;
    }
    while (v58 != v23);
  }
  sub_18D24E5D8((uint64_t)this + 2640, v23, (uint64_t)&v131);
  sub_18D24F1B8((uint64_t)v122, (uint64_t)&v123);
  v111 = 0x800000001;
  *(_QWORD *)v110 = &unk_1E25C6E30;
  v112 = v113;
  if (v32 == (_DWORD)v33)
  {
    LOBYTE(v60) = 0;
    *(_QWORD *)&v61 = 0x100000001;
    *((_QWORD *)&v61 + 1) = 0x100000001;
    *(_OWORD *)&v110[8] = v61;
    LODWORD(v113[0]) = v33;
    v62 = 1;
    v63 = 1;
  }
  else if (v32 - (int)v33 < 0)
  {
    v62 = 0;
    v63 = 0;
    *(_QWORD *)&v110[8] = 0;
    *(_QWORD *)&v110[16] = 0;
    LOBYTE(v60) = 1;
  }
  else
  {
    v63 = v23 - v33;
    *(_DWORD *)&v110[8] = 1;
    *(_DWORD *)&v110[12] = v23 - v33;
    *(_DWORD *)&v110[16] = v23 - v33;
    *(_DWORD *)&v110[20] = 1;
    v64 = v113;
    v60 = (v23 - v33);
    v65 = v33;
    do
    {
      *v64++ = v65++;
      --v60;
    }
    while (v60);
    v62 = 1;
  }
  v119 = 0x100000008;
  v114 = &unk_1E25C86F0;
  v120 = v121;
  v115 = v63;
  v116 = v62;
  v117 = v63 * v62;
  v118 = v63;
  if (v63)
  {
    v66 = 0;
    for (m = 0; m != v63; ++m)
    {
      if ((v60 & 1) == 0)
      {
        v68 = 0;
        do
        {
          v121[m + v118 * v68] = *((_DWORD *)v113 + v66 + v68);
          ++v68;
        }
        while (v62 != v68);
      }
      v66 += v62;
    }
  }
  sub_18D053E04((uint64_t)v110, (uint64_t)this + 3408, (uint64_t)&v123);
  sub_18D05495C((uint64_t)v110, (uint64_t)&v86);
  sub_18D053C48((uint64_t)v110, (uint64_t)this + 3512, (uint64_t)v122, (uint64_t)v122);
  sub_18D053EBC((uint64_t)v110, (uint64_t)&v81);
  if ((v33 & 0x80000000) != 0)
  {
    v78 = "nr >= 0";
    v79 = 3098;
    goto LABEL_99;
  }
  if (v54 < 0)
  {
    v78 = "nc >= 0";
    v79 = 3099;
LABEL_99:
    __assert_rtn("Zeros", "cnmatrix.h", v79, v78);
  }
  v107 = 0x800000008;
  v105 = &unk_1E25C87E0;
  v108 = v109;
  LODWORD(v106) = v33;
  DWORD1(v106) = v23 - v33;
  DWORD2(v106) = v54 * v33;
  HIDWORD(v106) = v33;
  sub_18D04BE88((uint64_t)&v105, 0.0);
  sub_18D053C48((uint64_t)v110, (uint64_t)this + 3512, (uint64_t)v122, (uint64_t)&v114);
  sub_18D053EBC((uint64_t)v110, (uint64_t)&v105);
  sub_18D053E04((uint64_t)v110, (uint64_t)this + 4064, (uint64_t)&v123);
  sub_18D05495C((uint64_t)v110, (uint64_t)&v100);
  v111 = 0x100000008;
  *(_QWORD *)v110 = &unk_1E25C86F0;
  *(_DWORD *)&v110[8] = v23;
  *(_DWORD *)&v110[12] = 1;
  *(_DWORD *)&v110[16] = v23;
  *(_DWORD *)&v110[20] = v23;
  v112 = v113;
  if ((int)v23 >= 1)
  {
    v69 = 0;
    v70 = v134;
    do
    {
      *((_DWORD *)v113 + *(int *)&v70[4 * v69]) = v69;
      ++v69;
    }
    while (v23 != v69);
  }
  sub_18D24E5D8((uint64_t)this + 2640, v23, (uint64_t)v110);
LABEL_92:
  LOWORD(v105) = 12;
  LOBYTE(v100) = 2;
  *(_OWORD *)v110 = *((_OWORD *)this + 5);
  v71 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v110, "Resetting estimator oscillator states.");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v77) = v71;
  else
    v77 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, (unsigned __int8 *)&v100, "%s", v72, v73, v74, v75, v76, v77);
}

uint64_t sub_18D242474(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)a1 = &unk_1E25B8FC0;
  v4 = a1 + 112;
  sub_18D054198(a1 + 8, a2 + 8);
  sub_18D0549D0(v4, a2 + 112);
  sub_18D054198(a1 + 664, a2 + 664);
  sub_18D054198(a1 + 768, a2 + 768);
  sub_18D0549D0(a1 + 872, a2 + 872);
  sub_18D054198(a1 + 1424, a2 + 1424);
  v5 = *(_OWORD *)(a2 + 1528);
  v6 = *(_OWORD *)(a2 + 1560);
  *(_OWORD *)(a1 + 1544) = *(_OWORD *)(a2 + 1544);
  *(_OWORD *)(a1 + 1560) = v6;
  *(_OWORD *)(a1 + 1528) = v5;
  v7 = *(_OWORD *)(a2 + 1576);
  v8 = *(_OWORD *)(a2 + 1592);
  v9 = *(_OWORD *)(a2 + 1608);
  *(_QWORD *)(a1 + 1624) = *(_QWORD *)(a2 + 1624);
  *(_OWORD *)(a1 + 1592) = v8;
  *(_OWORD *)(a1 + 1608) = v9;
  *(_OWORD *)(a1 + 1576) = v7;
  *(_QWORD *)(a1 + 1632) = 0;
  *(_QWORD *)(a1 + 1648) = 0;
  *(_QWORD *)(a1 + 1640) = 0;
  sub_18D1E7E30((_QWORD *)(a1 + 1632), *(_QWORD *)(a2 + 1632), *(_QWORD *)(a2 + 1640), (uint64_t)(*(_QWORD *)(a2 + 1640) - *(_QWORD *)(a2 + 1632)) >> 5);
  *(_QWORD *)(a1 + 1672) = 0;
  *(_OWORD *)(a1 + 1656) = 0u;
  sub_18D1E7E30((_QWORD *)(a1 + 1656), *(_QWORD *)(a2 + 1656), *(_QWORD *)(a2 + 1664), (uint64_t)(*(_QWORD *)(a2 + 1664) - *(_QWORD *)(a2 + 1656)) >> 5);
  *(_QWORD *)(a1 + 1696) = 0;
  *(_OWORD *)(a1 + 1680) = 0u;
  sub_18D1E7E30((_QWORD *)(a1 + 1680), *(_QWORD *)(a2 + 1680), *(_QWORD *)(a2 + 1688), (uint64_t)(*(_QWORD *)(a2 + 1688) - *(_QWORD *)(a2 + 1680)) >> 5);
  if (*(char *)(a2 + 1727) < 0)
  {
    sub_18D077798((_BYTE *)(a1 + 1704), *(void **)(a2 + 1704), *(_QWORD *)(a2 + 1712));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 1704);
    *(_QWORD *)(a1 + 1720) = *(_QWORD *)(a2 + 1720);
    *(_OWORD *)(a1 + 1704) = v10;
  }
  v11 = (_BYTE *)(a1 + 1728);
  if (*(char *)(a2 + 1751) < 0)
  {
    sub_18D077798(v11, *(void **)(a2 + 1728), *(_QWORD *)(a2 + 1736));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 1728);
    *(_QWORD *)(a1 + 1744) = *(_QWORD *)(a2 + 1744);
    *(_OWORD *)v11 = v12;
  }
  *(_QWORD *)a1 = &unk_1E25B9210;
  sub_18D0549D0(a1 + 1752, a2 + 1752);
  sub_18D054198(a1 + 2304, a2 + 2304);
  sub_18D0549D0(a1 + 2408, a2 + 2408);
  v13 = *(_OWORD *)(a2 + 2960);
  v14 = *(_OWORD *)(a2 + 2976);
  *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
  *(_OWORD *)(a1 + 2976) = v14;
  *(_OWORD *)(a1 + 2960) = v13;
  v15 = *(_OWORD *)(a2 + 3008);
  v16 = *(_OWORD *)(a2 + 3024);
  v17 = *(_OWORD *)(a2 + 3040);
  *(_QWORD *)(a1 + 3056) = *(_QWORD *)(a2 + 3056);
  *(_OWORD *)(a1 + 3040) = v17;
  *(_OWORD *)(a1 + 3024) = v16;
  *(_OWORD *)(a1 + 3008) = v15;
  return a1;
}

void sub_18D2426B8(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, ...)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v5 + 1727) < 0)
    operator delete(*v6);
  sub_18D1C59AC((void ***)va);
  sub_18D1C59AC((void ***)va);
  sub_18D1C59AC((void ***)va);
  *v9 = &unk_1E25C5E70;
  *v8 = &unk_1E25C5E70;
  *v7 = &unk_1E25C5E70;
  *a3 = &unk_1E25C5E70;
  *v4 = &unk_1E25C5E70;
  *a4 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D2427C8()
{
  JUMPOUT(0x18D242778);
}

void sub_18D2427D0()
{
  JUMPOUT(0x18D242788);
}

void sub_18D2427D8()
{
  JUMPOUT(0x18D24279CLL);
}

void sub_18D2427E0()
{
  JUMPOUT(0x18D2427ACLL);
}

uint64_t sub_18D2427E8(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  __int128 *v21;
  unint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  cnprint::CNPrinter *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  cnprint::CNPrinter *v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  __int128 v73;
  float64x2_t v74;
  __int128 v75;
  __int128 v76;
  double v77;
  void *v78;
  void *v79;
  __int128 v80;
  uint64_t v81;

  if (!lpsrc
    || (v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B44F0, 0)) == 0)
  {
    LOWORD(v66) = 12;
    LOBYTE(v74.f64[0]) = 4;
    v38 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v74, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v38));
    return 0xFFFFFFFFLL;
  }
  v14 = v13;
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    LOWORD(v66) = 12;
    LOBYTE(v74.f64[0]) = 4;
    v38 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_21;
  }
  if (!v13[128])
  {
    LOWORD(v66) = 12;
    LOBYTE(v74.f64[0]) = 4;
    v40 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v74, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v40));
    LOWORD(v66) = 12;
    LOBYTE(v74.f64[0]) = 4;
    v41 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    sub_18D181C54((uint64_t)(v14 + 56));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v74, "t,%.3lf,%s,TAI time invalid", v42, v43, v44, v45, v46, SLOBYTE(v41));
    return 0xFFFFFFFFLL;
  }
  v21 = *(__int128 **)(a1 + 32);
  v80 = *v21;
  v81 = *((_QWORD *)v21 + 2);
  v79 = &unk_1E25B97E0;
  v77 = 0.0;
  v78 = &unk_1E25B9818;
  *(double *)&v22 = *((double *)v21 + 6) * 0.000001;
  v75 = 0u;
  v76 = 0u;
  v73 = *(_OWORD *)(v13 + 136);
  v23.i64[1] = *((_QWORD *)&v73 + 1);
  v74 = 0u;
  v23.i64[0] = *((_QWORD *)v13 + 24);
  LOWORD(v66) = 0;
  v67 = 0u;
  v68 = 0u;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  if (cnnavigation::GNSSPseudorange((uint64_t)&v73, (uint64_t)&v66, (uint64_t)&v80, (uint64_t)(v13 + 296), (uint64_t *)&v79, (uint64_t *)&v78, &v77, 1, v23, (int8x16_t)v22, &v74))
  {
    LOWORD(v66) = 12;
    LOBYTE(v73) = 4;
    v29 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v73, "time,%.3lf,h-function failure on line %d: %s() %s", v24, v25, v26, v27, v28, SLOBYTE(v29));
    if (cnprint::CNPrinter::GetLogLevel(v30) <= 1)
    {
      LOWORD(v66) = 12;
      LOBYTE(v73) = 1;
      v32 = *((_QWORD *)v14 + 11);
      v31 = *((double *)v14 + 12);
      sub_18D181C54((uint64_t)(v14 + 56));
      v64 = v31 + (double)v32;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v73, "t,%.3lf,%s,GNSSPseudorange returned != 0", v33, v34, v35, v36, v37, SLOBYTE(v64));
    }
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)&v47 = 0x100000001;
  *((_QWORD *)&v47 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v47;
  *(_QWORD *)&v68 = 0x800000001;
  v66 = &unk_1E25C6E00;
  *((_QWORD *)&v68 + 1) = &v69;
  v67 = xmmword_18D331E20;
  sub_18D04BE88((uint64_t)&v66, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v66);
  v48 = *((_QWORD *)v14 + 64);
  if (v48)
  {
    **(double **)(a4 + 32) = v77 + *(double *)v48 + **(double **)(a2 + 32);
    v49 = *(_QWORD **)(v48 + 40);
    v50 = *(_QWORD **)(a5 + 32);
    *v50 = *v49;
    v53 = *(int *)(v48 + 28);
    v51 = *(int *)(a5 + 20);
    v50[v51] = v49[v53];
    v52 = (__int128 *)&v49[2 * v53];
    LODWORD(v53) = v51;
  }
  else
  {
    **(double **)(a4 + 32) = v77 + **(double **)(a2 + 32);
    v50 = *(_QWORD **)(a5 + 32);
    v54 = *((_QWORD *)&v75 + 1);
    *v50 = v75;
    v53 = *(int *)(a5 + 20);
    v50[v53] = v54;
    v52 = &v76;
  }
  v50[2 * (int)v53] = *(_QWORD *)v52;
  *(double *)&v50[6 * (int)v53] = *((double *)&v76 + 1) * 0.000001;
  *(_QWORD *)&v68 = 0x100000001;
  v66 = &unk_1E25C6A40;
  *((_QWORD *)&v68 + 1) = &v69;
  *(_QWORD *)&v55 = 0x100000001;
  *((_QWORD *)&v55 + 1) = 0x100000001;
  v67 = v55;
  sub_18D04BE88((uint64_t)&v66, 0.0);
  **((_QWORD **)&v68 + 1) = 0x3FF0000000000000;
  sub_18D053AA8(a6, (uint64_t)&v66);
  if (!cnprint::CNPrinter::GetLogLevel(v56))
  {
    LOWORD(v66) = 12;
    LOBYTE(v73) = 0;
    v58 = *((_QWORD *)v14 + 11);
    v57 = *((double *)v14 + 12);
    sub_18D181C54((uint64_t)(v14 + 56));
    v65 = v57 + (double)v58;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v73, "t,%.3lf,%s,using PSR,predicted,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v59, v60, v61, v62, v63, SLOBYTE(v65));
  }
  return 0;
}

uint64_t sub_18D242CD4(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D24C54C((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D2427E8;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B44F0, &std::__any_imp::__unique_typeinfo<raven::h_GnssPsrArgs_RavenConvergence>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D2430D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D243100(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25C3BC0;
  sub_18D07C868(a1 + 512);
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

uint64_t sub_18D243198(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  int8x16_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  __int128 *v22;
  int8x16_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  cnprint::CNPrinter *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  __int128 v50;
  double v51;
  double *v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  __int128 v57;
  cnprint::CNPrinter *v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  double v81;
  void *v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;

  if (!lpsrc
    || (v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4708, 0)) == 0)
  {
    LOWORD(v68) = 12;
    LOBYTE(v76) = 4;
    v39 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v76, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v39));
    return 0xFFFFFFFFLL;
  }
  v15 = v13;
  v17 = *(_DWORD *)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 12);
  if (v17 <= v16)
    v18 = *(_DWORD *)(a1 + 12);
  else
    v18 = *(_DWORD *)(a1 + 8);
  if (!v17
    || !v16
    || v18 != 8
    || ((v20 = *(_DWORD *)(a2 + 8), v19 = *(_DWORD *)(a2 + 12), v20 <= v19)
      ? (v21 = *(_DWORD *)(a2 + 12))
      : (v21 = *(_DWORD *)(a2 + 8)),
        !v20 || !v19 || v21 != 1))
  {
    LOWORD(v68) = 12;
    LOBYTE(v76) = 4;
    v39 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_21;
  }
  if (!v13[128])
  {
    LOWORD(v68) = 12;
    LOBYTE(v76) = 4;
    v41 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v76, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v41));
    LOWORD(v68) = 12;
    LOBYTE(v76) = 4;
    v42 = *((double *)v15 + 12) + (double)*((uint64_t *)v15 + 11);
    sub_18D181C54((uint64_t)(v15 + 56));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v76, "t,%.3lf,%s,TAI time invalid", v43, v44, v45, v46, v47, SLOBYTE(v42));
    return 0xFFFFFFFFLL;
  }
  v22 = *(__int128 **)(a1 + 32);
  v86 = *v22;
  v87 = *((_QWORD *)v22 + 2);
  v84 = *(__int128 *)((char *)v22 + 24);
  v14.i64[0] = *((_QWORD *)v22 + 6);
  v85 = *((_QWORD *)v22 + 5);
  v83 = &unk_1E25B97E0;
  v81 = 0.0;
  v82 = &unk_1E25B9818;
  v79 = 0u;
  v80 = 0u;
  *(double *)v14.i64 = *(double *)v14.i64 / 1000000.0;
  v77 = 0u;
  v78 = 0u;
  v75 = *(_OWORD *)(v13 + 136);
  v23.i64[1] = *((_QWORD *)&v75 + 1);
  v76 = 0u;
  v23.i64[0] = *((_QWORD *)v13 + 24);
  v24 = *((double *)v22 + 7);
  LOWORD(v68) = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  if (cnnavigation::GNSSDopplerShift((uint64_t)&v75, (const cnnavigation::GNSSUTCParameters *)&v68, (uint64_t)&v86, (double *)&v84, (uint64_t)(v13 + 296), (uint64_t *)&v83, (uint64_t *)&v82, 1, v23, v14, v24 / 1000000.0, &v81, 1u, (uint64_t)&v76))
  {
    LOWORD(v68) = 12;
    LOBYTE(v75) = 4;
    v30 = *((double *)v15 + 6) + (double)*((uint64_t *)v15 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v75, "time,%.3lf,h-function failure on line %d: %s() %s", v25, v26, v27, v28, v29, SLOBYTE(v30));
    if (cnprint::CNPrinter::GetLogLevel(v31) <= 1)
    {
      LOWORD(v68) = 12;
      LOBYTE(v75) = 1;
      v33 = *((_QWORD *)v15 + 11);
      v32 = *((double *)v15 + 12);
      sub_18D181C54((uint64_t)(v15 + 56));
      v66 = v32 + (double)v33;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v75, "t,%.3lf,%s,GNSSDopplerShift returned != 0", v34, v35, v36, v37, v38, SLOBYTE(v66));
    }
    return 0xFFFFFFFFLL;
  }
  v48 = 299792458.0 / *((double *)v15 + 24);
  v49 = -(v48 * v81);
  *(_QWORD *)&v50 = 0x100000001;
  *((_QWORD *)&v50 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v50;
  **(double **)(a4 + 32) = v49 + **(double **)(a2 + 32);
  *(_QWORD *)&v70 = 0x800000001;
  v68 = &unk_1E25C6E00;
  *((_QWORD *)&v70 + 1) = &v71;
  v69 = xmmword_18D331E20;
  sub_18D04BE88((uint64_t)&v68, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v68);
  v51 = *((double *)&v77 + 1);
  v52 = *(double **)(a5 + 32);
  *v52 = -(*(double *)&v77 * v48);
  v53 = *(int *)(a5 + 20);
  v52[v53] = -(v51 * v48);
  v54 = *((double *)&v78 + 1);
  v52[2 * v53] = -(*(double *)&v78 * v48);
  v52[3 * (int)v53] = -(v54 * v48);
  v55 = *((double *)&v79 + 1);
  v52[4 * v53] = -(*(double *)&v79 * v48);
  v52[5 * (int)v53] = -(v55 * v48);
  v56 = *((double *)&v80 + 1);
  v52[6 * (int)v53] = -(*(double *)&v80 * v48) / 1000000.0;
  v52[7 * (int)v53] = -(v56 * v48) / 1000000.0;
  *(_QWORD *)&v70 = 0x100000001;
  v68 = &unk_1E25C6A40;
  *((_QWORD *)&v70 + 1) = &v71;
  *(_QWORD *)&v57 = 0x100000001;
  *((_QWORD *)&v57 + 1) = 0x100000001;
  v69 = v57;
  sub_18D04BE88((uint64_t)&v68, 0.0);
  **((_QWORD **)&v70 + 1) = 0x3FF0000000000000;
  sub_18D053AA8(a6, (uint64_t)&v68);
  if (!cnprint::CNPrinter::GetLogLevel(v58))
  {
    LOWORD(v68) = 12;
    LOBYTE(v75) = 0;
    v60 = *((_QWORD *)v15 + 11);
    v59 = *((double *)v15 + 12);
    sub_18D181C54((uint64_t)(v15 + 56));
    v67 = v59 + (double)v60;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v75, "t,%.3lf,%s,using Doppler,predicted,%.3lf,obs,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,clockDriftMps,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v61, v62, v63, v64, v65, SLOBYTE(v67));
  }
  return 0;
}

uint64_t sub_18D2436BC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D24C838((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D243198;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B4708, &std::__any_imp::__unique_typeinfo<raven::h_GnssDopplerArgs_RavenConvergence>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D243ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D243AE8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

uint64_t sub_18D243B68(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v13;
  int8x16_t v14;
  double *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  double v22;
  unint64_t v23;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  double v37;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  __int128 v64;
  double v65;
  double *v66;
  uint64_t v67;
  double v68;
  double v69;
  double *v70;
  uint64_t v71;
  double v72;
  void **v73;
  unsigned __int8 *v74;
  cnprint::CNPrinter *v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  _BYTE v85[104];
  unsigned __int8 v86[104];
  void *v87;
  __int128 v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE v91[41];
  void *v92;
  __int128 v93;
  uint64_t v94;
  double *v95;
  uint64_t v96;
  void *v97;
  __int128 v98;
  uint64_t v99;
  double *v100;
  uint64_t v101;
  _QWORD v102[2];
  void *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  float64x2_t v108;
  __int128 v109;
  __int128 v110;
  double v111;
  _QWORD v112[2];
  void *v113;
  __int128 v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  float64x2_t v118;
  __int128 v119;
  double v120[3];
  double v121;
  _QWORD v122[2];

  if (!lpsrc
    || (v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B49F8, 0)) == 0)
  {
    LOWORD(v113) = 12;
    LOBYTE(v103) = 4;
    v37 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_27:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v103, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v37));
    return 0xFFFFFFFFLL;
  }
  v15 = v13;
  v17 = *(_DWORD *)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 12);
  if (v17 <= v16)
    v18 = *(_DWORD *)(a1 + 12);
  else
    v18 = *(_DWORD *)(a1 + 8);
  if (!v17
    || !v16
    || v18 != 8
    || ((v20 = *(_DWORD *)(a2 + 8), v19 = *(_DWORD *)(a2 + 12), v20 <= v19)
      ? (v21 = *(_DWORD *)(a2 + 12))
      : (v21 = *(_DWORD *)(a2 + 8)),
        !v20 || !v19 || v21 != 1))
  {
    LOWORD(v113) = 12;
    LOBYTE(v103) = 4;
    v37 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_27;
  }
  if (!*((_BYTE *)v13 + 128))
  {
    LOWORD(v113) = 12;
    LOBYTE(v103) = 4;
    v39 = v13[6] + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v103, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v39));
    LOWORD(v113) = 12;
    LOBYTE(v103) = 4;
    v40 = v15[12] + (double)*((uint64_t *)v15 + 11);
    sub_18D181C54((uint64_t)(v15 + 7));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v103, "t,%.3lf,%s,%s,TAI time invalid", v43, v44, v45, v46, v47, SLOBYTE(v40));
    return 0xFFFFFFFFLL;
  }
  v14.i64[0] = (uint64_t)v13[35];
  v22 = v13[36] - *(double *)v14.i64;
  v23 = (unint64_t)(COERCE__INT64(fabs(v22)) - 0x10000000000000) >> 53;
  if ((*(uint64_t *)&v22 <= -1 || v23 >= 0x3FF) && (unint64_t)(*(_QWORD *)&v22 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v113) = 12;
    LOBYTE(v103) = 4;
    v41 = v13[6] + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v103, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v41));
    LOWORD(v113) = 12;
    LOBYTE(v103) = 4;
    v42 = v15[12] + (double)*((uint64_t *)v15 + 11);
    sub_18D181C54((uint64_t)(v15 + 7));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v103, "t,%.3lf,%s,%s,Invalid time interval,%.2lf", v48, v49, v50, v51, v52, SLOBYTE(v42));
    return 0xFFFFFFFFLL;
  }
  v122[0] = a1;
  v122[1] = v13;
  v121 = 0.0;
  v119 = 0u;
  *(_OWORD *)v120 = 0u;
  v118 = 0u;
  v115 = 0x800000008;
  v113 = &unk_1E25C87E0;
  v114 = xmmword_18D319930;
  v116 = &v117;
  *(_QWORD *)&v104 = 0;
  v103 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v103, 0, v14, (int8x16_t)xmmword_18D319930);
  v112[0] = CNTimeSpan::operator+((uint64_t)(v15 + 11), &v103, v26, v27);
  v112[1] = v28;
  if (sub_18D24CAFC(v122, (uint64_t)v112, &v121, &v118, (uint64_t)&v113, v29, v30))
  {
    LOWORD(v103) = 12;
    LOBYTE(v97) = 4;
    v83 = v15[6] + (double)*((uint64_t *)v15 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v103, (unsigned __int8 *)&v97, "time,%.3lf,h-function failure on line %d: %s() %s", v31, v32, v33, v34, v35, SLOBYTE(v83));
    return 0xFFFFFFFFLL;
  }
  v111 = 0.0;
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v105 = 0x800000008;
  v103 = &unk_1E25C87E0;
  v53.i64[1] = 0x800000040;
  v104 = xmmword_18D319930;
  v106 = &v107;
  v53.i64[0] = (uint64_t)v15[36];
  v97 = 0;
  *(_QWORD *)&v98 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v97, 0, v53, v36);
  v102[0] = CNTimeSpan::operator+((uint64_t)(v15 + 11), &v97, v54, v55);
  v102[1] = v56;
  if (sub_18D24CAFC(v122, (uint64_t)v102, &v111, &v108, (uint64_t)&v103, v57, v58))
  {
    sub_18D1C741C((uint64_t)(v15 + 5), (uint64_t)"could not compute expected carrier phase at end", (uint64_t)"h_GnssAverageDoppler_RavenConvergence", 836, v59, v60, v61, v62);
    return 0xFFFFFFFFLL;
  }
  v63 = 1.0 / v22 * (299792458.0 / v15[24]);
  *(_QWORD *)&v64 = 0x100000001;
  *((_QWORD *)&v64 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v64;
  **(double **)(a4 + 32) = **(double **)(a2 + 32) + (v111 - v121) * v63;
  v99 = 0x800000001;
  v97 = &unk_1E25C6E00;
  v100 = (double *)&v101;
  v98 = xmmword_18D331E20;
  sub_18D04BE88((uint64_t)&v97, 0.0);
  v65 = *((double *)&v109 + 1);
  v66 = v100;
  *v100 = v63 * *(double *)&v109;
  v67 = SHIDWORD(v98);
  v66[SHIDWORD(v98)] = v63 * v65;
  v68 = *((double *)&v110 + 1);
  v66[2 * v67] = v63 * *(double *)&v110;
  v66[6 * (int)v67] = v63 * v68 * 0.000001;
  v94 = 0x800000001;
  v92 = &unk_1E25C6E00;
  v95 = (double *)&v96;
  v93 = xmmword_18D331E20;
  sub_18D04BE88((uint64_t)&v92, 0.0);
  v69 = *((double *)&v119 + 1);
  v70 = v95;
  *v95 = v63 * *(double *)&v119;
  v71 = SHIDWORD(v93);
  v70[SHIDWORD(v93)] = v63 * v69;
  v72 = v120[1];
  v70[2 * v71] = v63 * v120[0];
  v70[6 * (int)v71] = v63 * v72 * 0.000001;
  v89 = 0x800000001;
  v87 = &unk_1E25C6E00;
  v90 = v91;
  v88 = xmmword_18D331E20;
  sub_18D04BE88((uint64_t)&v87, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v87);
  if (fabs(v15[36]) <= 0.001)
  {
    sub_18D24D0C4((uint64_t)&v92, (uint64_t)&v113, (uint64_t)v86);
    v89 = 0x800000001;
    v87 = &unk_1E25C6E00;
    v88 = xmmword_18D331E20;
    v90 = v91;
    v73 = &v97;
    v74 = v86;
  }
  else
  {
    sub_18D24D0C4((uint64_t)&v97, (uint64_t)&v103, (uint64_t)v86);
    sub_18D24D0C4((uint64_t)&v92, (uint64_t)&v113, (uint64_t)v85);
    v89 = 0x800000001;
    v87 = &unk_1E25C6E00;
    v88 = xmmword_18D331E20;
    v90 = v91;
    v73 = (void **)v86;
    v74 = v85;
  }
  sub_18D0540FC((uint64_t)v73, (uint64_t)v74, (uint64_t)&v87);
  sub_18D053AA8(a5, (uint64_t)&v87);
  *(double *)(*(_QWORD *)(a5 + 32) + 56 * *(int *)(a5 + 20)) = *(double *)(*(_QWORD *)(a5 + 32)
                                                                           + 56 * *(int *)(a5 + 20))
                                                               + v63 * (v111 - v121) * 0.000001;
  sub_18D1CC610(1u, 1u, (uint64_t)&v87);
  sub_18D053AA8(a6, (uint64_t)&v87);
  if (!cnprint::CNPrinter::GetLogLevel(v75))
  {
    LOWORD(v87) = 12;
    v86[0] = 0;
    v77 = *((_QWORD *)v15 + 11);
    v76 = v15[12];
    sub_18D181C54((uint64_t)(v15 + 7));
    v84 = v76 + (double)v77;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v87, v86, "t,%.3lf,%s,using average Doppler,predictedCrnt,%.3lf,predictedPrev,%.3lf,diff,%.3lf,std,%.4lf,multipath,%hhu,cno,%.1lf", v78, v79, v80, v81, v82, SLOBYTE(v84));
  }
  return 0;
}

uint64_t sub_18D2442A4(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::MapVectorEvent *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  double v9;
  int ShouldMapVectorConstraintBeApplied;
  uint64_t v11;
  double v13;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double *v20;
  int v21;
  int v22;
  int i;
  __int128 v24;
  cnstatistics *v25;
  unsigned int v26;
  double *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  cnprint::CNPrinter *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  BOOL v56;
  __int128 v57;
  double v58;
  double v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _BOOL8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  int v91;
  int v92;
  BOOL v93;
  int v94;
  __n128 v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  char v104;
  int v105;
  double v106;
  double v107;
  double v108;
  double v109;
  unsigned __int8 v110;
  __int16 v111;
  uint64_t (**v112)();
  void *__p[2];
  uint64_t v114;
  _OWORD *v115;
  _OWORD v116[10];
  _OWORD v117[2];
  BOOL v118;
  void *v119;
  __int128 v120;
  uint64_t v121;
  double *v122;
  double v123[3];
  void *v124;
  __int128 v125;
  uint64_t v126;
  double *v127;
  uint64_t v128;
  void *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  int v134;
  void *v135;
  __int128 v136;
  uint64_t v137;
  double *v138;
  double v139[3];
  _QWORD v140[4];
  char v141;
  __int128 v142;
  float64x2_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD v152[22];
  float64x2_t v153;
  uint64_t v154;
  void *v155;
  __int128 v156;
  uint64_t v157;
  double *v158;
  uint64_t v159;
  __int128 v160;
  void (*v161)(uint64_t);
  __int128 v162;
  uint64_t v163;
  double *v164;
  double v165[6];

  v165[3] = *(double *)MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57) || !*((_BYTE *)this + 58))
    return 0xFFFFFFFFLL;
  v4 = (char *)a2 + 104;
  *(_QWORD *)&v160 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)&v160 + 1) = v5;
  v157 = 0x100000008;
  v155 = &unk_1E25C86C0;
  v156 = xmmword_18D319940;
  v158 = (double *)&v159;
  if (*((_DWORD *)this + 1045))
    v6 = (char *)this + 3408;
  else
    v6 = (char *)this + 2648;
  sub_18D053AA8((uint64_t)&v155, (uint64_t)v6);
  v7 = v158[4];
  v8 = v158[5];
  v153 = 0uLL;
  v154 = 0;
  v153 = *(float64x2_t *)v158;
  v9 = v158[3];
  v154 = *((_QWORD *)v158 + 2);
  ShouldMapVectorConstraintBeApplied = raven::RavenEstimator::ShouldMapVectorConstraintBeApplied(this, &v153, (float64x2_t *)v4);
  if (ShouldMapVectorConstraintBeApplied == -2)
    return 4294967293;
  v13 = sqrt(v7 * v7 + v9 * v9 + v8 * v8);
  if (fabs(v13) <= 0.000000015 || ShouldMapVectorConstraintBeApplied != 0)
    goto LABEL_26;
  sub_18D04F338((uint64_t)this + 2640, (uint64_t)v140);
  v137 = 0x300000001;
  v135 = &unk_1E25C6C20;
  v136 = xmmword_18D314670;
  v138 = v139;
  v139[0] = v9 * (1.0 / v13);
  v139[1] = v7 * (1.0 / v13);
  v139[2] = v8 * (1.0 / v13);
  *(_QWORD *)&v116[0] = 0x400000003;
  v131 = 0x100000003;
  v129 = &unk_1E25C77C0;
  v130 = xmmword_18D313070;
  v134 = 5;
  v132 = &v133;
  v133 = 0x400000003;
  sub_18D04F764((uint64_t)&v112, (uint64_t)v140, (uint64_t)&v129, (uint64_t)&v129);
  v121 = 0x300000001;
  v119 = &unk_1E25C6C20;
  v120 = xmmword_18D314670;
  v122 = v123;
  sub_18D053B2C((uint64_t)&v135, (uint64_t)&v112, (uint64_t)&v119);
  v16 = v136;
  v15 = DWORD1(v136);
  v163 = 0x100000003;
  v161 = (void (*)(uint64_t))&unk_1E25C7790;
  v164 = v165;
  *(_QWORD *)&v162 = __PAIR64__(v136, DWORD1(v136));
  DWORD2(v162) = v136 * DWORD1(v136);
  HIDWORD(v162) = DWORD1(v136);
  if (DWORD1(v136))
  {
    v17 = 0;
    v18 = 0;
    v19 = HIDWORD(v136);
    v20 = v138;
    do
    {
      v21 = v17;
      v22 = v18;
      for (i = v16; i; --i)
      {
        v165[v22] = v20[v21];
        v22 += v15;
        ++v21;
      }
      ++v18;
      v17 += v19;
    }
    while (v18 != v15);
  }
  v126 = 0x100000001;
  v124 = &unk_1E25C6A40;
  *(_QWORD *)&v24 = 0x100000001;
  *((_QWORD *)&v24 + 1) = 0x100000001;
  v125 = v24;
  v127 = (double *)&v128;
  sub_18D053B2C((uint64_t)&v119, (uint64_t)&v161, (uint64_t)&v124);
  if (!*((_BYTE *)this + 1208))
    goto LABEL_24;
  v26 = *((unsigned __int8 *)this + 1320);
  if (v26 <= 7 && ((1 << v26) & 0xCE) != 0)
    v27 = (double *)(*((_QWORD *)this + 146) + 936);
  else
LABEL_24:
    v27 = (double *)(*((_QWORD *)this + 146) + 928);
  if (v13 < cnstatistics::InverseNormal(v25, 1.0 - *v27, 0.0, sqrt(*v127)))
  {
LABEL_26:
    v28 = 0;
    goto LABEL_27;
  }
  sub_18D1C7988(&v112, 21);
  v116[0] = v160;
  v50 = *((_OWORD *)v4 + 6);
  v116[8] = *((_OWORD *)v4 + 7);
  v51 = *((_OWORD *)v4 + 9);
  v116[9] = *((_OWORD *)v4 + 8);
  v117[0] = v51;
  *(_OWORD *)((char *)v117 + 12) = *(_OWORD *)(v4 + 156);
  v52 = *((_OWORD *)v4 + 2);
  v116[4] = *((_OWORD *)v4 + 3);
  v53 = *((_OWORD *)v4 + 5);
  v116[5] = *((_OWORD *)v4 + 4);
  v116[6] = v53;
  v116[7] = v50;
  v54 = *((_OWORD *)v4 + 1);
  v116[1] = *(_OWORD *)v4;
  v116[2] = v54;
  v112 = off_1E25C4AF8;
  v116[3] = v52;
  v55 = *((unsigned __int8 *)this + 1208);
  v56 = *((_BYTE *)this + 1208)
     && *((_BYTE *)this + 1320) == 5
     && *((_BYTE *)this + 2368)
     && *((unsigned __int8 *)this + 2480) - 2 < 3;
  v118 = v56;
  v121 = 0x100000003;
  v119 = &unk_1E25C7790;
  *(_QWORD *)&v57 = 0x100000001;
  *((_QWORD *)&v57 + 1) = 0x100000001;
  v120 = v57;
  v122 = v123;
  v123[0] = 0.0;
  v163 = 0x100000001;
  v161 = (void (*)(uint64_t))&unk_1E25C6A40;
  v162 = v57;
  v164 = v165;
  v58 = *(double *)(*((_QWORD *)this + 146) + 2528);
  if (v58 <= 0.0)
  {
    v111 = 12;
    v110 = 4;
    v124 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v125 = v78;
    v79 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v124, "estimator_map_vector_number_of_cross_track_position_sigmas_in_road_width_ <= 0");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v67) = v79;
    else
      v67 = *((_QWORD *)this + 311);
    goto LABEL_57;
  }
  v59 = *((double *)a2 + 30) / v58;
  if (v55 && v59 < 1.0 && *((_BYTE *)this + 1320) != 5)
    v59 = 1.0;
  v165[0] = v59 * v59;
  if (sub_18D245354((uint64_t)this + 8336, (double *)&v160, (uint64_t)&v119, (uint64_t)&v161, (uint64_t)&v112))
  {
    v111 = 12;
    v110 = 4;
    v124 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v125 = v60;
    v61 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v124, "Could not add measurement - map vector position");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v67) = v61;
    else
      v67 = *((_QWORD *)this + 311);
LABEL_57:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, &v110, "%s", v62, v63, v64, v65, v66, v67);
    v28 = -1;
    goto LABEL_58;
  }
  v28 = 0;
LABEL_58:
  v112 = (uint64_t (**)())&unk_1E25B8EE0;
  if (SHIBYTE(v115) < 0)
    operator delete(__p[1]);
LABEL_27:
  sub_18D1C7988(v140, 22);
  v142 = v160;
  v29 = *((_OWORD *)v4 + 6);
  v150 = *((_OWORD *)v4 + 7);
  v30 = *((_OWORD *)v4 + 9);
  v151 = *((_OWORD *)v4 + 8);
  v152[0] = v30;
  *(_OWORD *)((char *)v152 + 12) = *(_OWORD *)(v4 + 156);
  v31 = *((_OWORD *)v4 + 2);
  v146 = *((_OWORD *)v4 + 3);
  v32 = *((_OWORD *)v4 + 5);
  v147 = *((_OWORD *)v4 + 4);
  v140[0] = off_1E25C4B20;
  v148 = v32;
  v149 = v29;
  v33 = *((_OWORD *)v4 + 1);
  v143 = *(float64x2_t *)v4;
  v144 = v33;
  v145 = v31;
  v137 = 0x100000003;
  v135 = &unk_1E25C7790;
  *(_QWORD *)&v34 = 0x100000001;
  *((_QWORD *)&v34 + 1) = 0x100000001;
  v136 = v34;
  v138 = v139;
  v139[0] = 0.0;
  v121 = 0x100000001;
  v119 = &unk_1E25C6A40;
  v120 = v34;
  v35 = *(double *)(*((_QWORD *)this + 146) + 2536);
  v122 = v123;
  if (v35 <= 0.0)
  {
    LOWORD(v161) = 12;
    LOBYTE(v129) = 4;
    v112 = (uint64_t (**)())(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
    __p[0] = v42;
    v43 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v112, "estimator_map_vector_cross_track_velocity_sigma_ <= 0");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v49) = v43;
    else
      v49 = *((_QWORD *)this + 311);
  }
  else
  {
    v123[0] = v35 * v35;
    v114 = 0x100000003;
    v112 = (uint64_t (**)())&unk_1E25C7790;
    v115 = v116;
    *(_OWORD *)__p = v34;
    v36 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v112, 0.0);
    if (*((_BYTE *)this + 8336))
    {
      if (*((_DWORD *)this + 3568) == 174)
      {
        LOWORD(v161) = 2;
        LOBYTE(v129) = 2;
        v106 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v37, v38, v39, v40, v41, SLOBYTE(v106));
      }
      else if (*((_BYTE *)this + 8337))
      {
        if (cnprint::CNPrinter::GetLogLevel(v36) <= 1)
        {
          LOWORD(v161) = 2;
          LOBYTE(v129) = 1;
          v108 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v73, v74, v75, v76, v77, SLOBYTE(v108));
        }
      }
      else
      {
        v80 = sub_18D03FE4C((double *)&v160, (double *)this + 1043);
        if (v80)
        {
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v80) <= 1)
          {
            LOWORD(v161) = 2;
            LOBYTE(v129) = 1;
            v109 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v81, v82, v83, v84, v85, SLOBYTE(v109));
          }
        }
        else
        {
          v161 = 0;
          *(_QWORD *)&v162 = 0;
          sub_18D24D5C4((void (**)(int))&v161, (uint64_t)v140);
          v86 = sub_18D1C7B34((uint64_t *)this + 1047, &v161);
          sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v161);
          v87 = *((int *)this + 3568);
          v88 = (v87 + 1);
          if (*((_QWORD *)this + 1049) == v88)
          {
            *((_DWORD *)this + 3568) = v88;
            *((_DWORD *)this + 2102) = v88;
            *((_DWORD *)this + 2103) = 1;
            *((_DWORD *)this + 2104) = v88;
            *((_DWORD *)this + 2105) = v88;
            *((_DWORD *)this + 2808) = v88;
            *((_DWORD *)this + 2809) = 1;
            *((_DWORD *)this + 2810) = v88;
            *((_DWORD *)this + 2811) = v88;
            *((_DWORD *)this + 2992) = v88;
            *((_DWORD *)this + 2993) = 1;
            *((_DWORD *)this + 2994) = v88;
            *((_DWORD *)this + 2995) = v88;
            *((_DWORD *)this + 3350) = v88;
            *((_DWORD *)this + 3351) = 1;
            *((_DWORD *)this + 3352) = v88;
            *((_DWORD *)this + 3353) = v88;
            *((_DWORD *)this + 3362) = v88;
            *((_DWORD *)this + 3363) = 1;
            *((_DWORD *)this + 3364) = v88;
            *((_DWORD *)this + 3365) = v88;
            *((_DWORD *)this + 3546) = v88;
            *((_DWORD *)this + 3547) = 1;
            *((_DWORD *)this + 3548) = v88;
            *((_DWORD *)this + 3549) = v88;
            *((_DWORD *)this + 3558) = v88;
            *((_DWORD *)this + 3559) = 1;
            *((_DWORD *)this + 3560) = v88;
            *((_DWORD *)this + 3561) = v88;
            *((_DWORD *)this + 3572) = v88;
            *((_DWORD *)this + 3573) = 1;
            *((_DWORD *)this + 3574) = v88;
            *((_DWORD *)this + 3575) = v88;
            *((_DWORD *)this + 3930) = v88;
            *((_DWORD *)this + 3931) = 1;
            *((_DWORD *)this + 3932) = v88;
            *((_DWORD *)this + 3933) = v88;
            *(_OWORD *)(*((_QWORD *)this + 1054) + 16 * v87) = v160;
            if (v136 <= DWORD1(v136))
              v89 = DWORD1(v136);
            else
              v89 = v136;
            if (DWORD1(v136))
              v90 = (_DWORD)v136 == 0;
            else
              v90 = 1;
            if (v90)
              v91 = 0;
            else
              v91 = v89;
            *(_DWORD *)(*((_QWORD *)this + 1407) + 4 * v87) = v91;
            sub_18D053AA8(*((_QWORD *)this + 1678) + (v87 << 6), (uint64_t)&v135);
            if (LODWORD(__p[0]) <= HIDWORD(__p[0]))
              v92 = HIDWORD(__p[0]);
            else
              v92 = (int)__p[0];
            if (HIDWORD(__p[0]))
              v93 = LODWORD(__p[0]) == 0;
            else
              v93 = 1;
            if (v93)
              v94 = 0;
            else
              v94 = v92;
            *(_DWORD *)(*((_QWORD *)this + 1684) + 4 * v87) = v94;
            sub_18D053AA8(*((_QWORD *)this + 1776) + (v87 << 6), (uint64_t)&v112);
            v95 = sub_18D053AA8(*((_QWORD *)this + 1782) + 112 * (int)v87, (uint64_t)&v119);
            *(_QWORD *)(*((_QWORD *)this + 1789) + 8 * v87) = sub_18D2457C0;
            if (*v86)
              v96 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v86)(3, v86, 0, &unk_1E25B4C00, &std::__any_imp::__unique_typeinfo<raven::h_MapVectorVelocityConstraintArgs_RavenConvergence>::__id, v95);
            else
              v96 = 0;
            v105 = 0;
            *(_QWORD *)(*((_QWORD *)this + 1968) + 8 * v87) = v96;
            goto LABEL_90;
          }
          LOWORD(v161) = 2;
          LOBYTE(v129) = 4;
          v97 = (*(uint64_t (**)(_QWORD *))(v140[0] + 16))(v140);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v98, v99, v100, v101, v102, v97);
        }
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel(v36) <= 1)
    {
      LOWORD(v161) = 2;
      LOBYTE(v129) = 1;
      v107 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v68, v69, v70, v71, v72, SLOBYTE(v107));
    }
    LOWORD(v161) = 12;
    LOBYTE(v129) = 4;
    v112 = (uint64_t (**)())(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
    __p[0] = v103;
    v104 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v112, "Could not add measurement - map vector velocity");
    if (*((char *)this + 2511) >= 0)
      LOBYTE(v49) = v104;
    else
      v49 = *((_QWORD *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "%s", v44, v45, v46, v47, v48, v49);
  v105 = -2;
LABEL_90:
  v11 = (v105 + v28);
  v140[0] = &unk_1E25B8EE0;
  if (v141 < 0)
    operator delete((void *)v140[2]);
  return v11;
}

void sub_18D244E04(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_18D076A08(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D244EA8(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v13;
  double *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  double v36;
  __double2 v37;
  __int128 v38;
  double v39;
  double *v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  double v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  _BYTE v53[64];
  void *v54;
  __int128 v55;
  uint64_t v56;
  double *v57;
  uint64_t v58;
  void (**v59)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v60;
  void *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  double v66[3];
  float64x2_t v67;
  uint64_t v68;
  float64x2_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (!lpsrc
    || (v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4BE8, 0)) == 0)
  {
    LOWORD(v59) = 12;
    LOBYTE(v54) = 4;
    v48 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v54, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v48));
    return 0xFFFFFFFFLL;
  }
  v14 = v13;
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    LOWORD(v59) = 12;
    LOBYTE(v54) = 4;
    v28 = v13[6] + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v54, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v28));
    return 0xFFFFFFFFLL;
  }
  v21 = *(_QWORD *)(a1 + 32);
  v69 = *(float64x2_t *)v21;
  v70 = *(_QWORD *)(v21 + 16);
  v68 = 0;
  if (cnnavigation::ECEFToLLA(&v69, 1, v67.f64, 0, (uint64_t)&v59))
  {
    LOWORD(v59) = 12;
    LOBYTE(v54) = 4;
    v27 = v14[6] + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v54, "time,%.3lf,h-function failure on line %d: %s() %s", v22, v23, v24, v25, v26, SLOBYTE(v27));
    return 0xFFFFFFFFLL;
  }
  v67 = vmulq_f64(*(float64x2_t *)(v14 + 19), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  v60 = 0;
  v63 = 0x300000003;
  v61 = &unk_1E25C78E0;
  v62 = xmmword_18D30BB60;
  v64 = &v65;
  v59 = &off_1E25B9560;
  cnnavigation::ECEFToENU(&v69, 1, 1, &v67, 0, (uint64_t)v66, (uint64_t)&v59, COERCE_DOUBLE(0x300000003));
  if (v35)
  {
    LOWORD(v54) = 12;
    LOBYTE(v49) = 4;
    v36 = v14[6] + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v49, "time,%.3lf,h-function failure on line %d: %s() %s", v30, v31, v32, v33, v34, SLOBYTE(v36));
    return 0xFFFFFFFFLL;
  }
  v56 = 0x300000003;
  v54 = &unk_1E25C78E0;
  v55 = xmmword_18D30BB60;
  v57 = (double *)&v58;
  if (v60)
    sub_18D053AA8((uint64_t)&v54, (uint64_t)&v61);
  v37 = __sincos_stret(v14[26] * 0.0174532925);
  *(_QWORD *)&v38 = 0x100000001;
  *((_QWORD *)&v38 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v38;
  v39 = -v37.__cosval;
  v40 = *(double **)(a4 + 32);
  v41 = v37.__sinval * v66[1] - v37.__cosval * v66[0] + **(double **)(a2 + 32);
  *v40 = v41;
  if (!*((_BYTE *)v14 + 232))
  {
    v42 = v14[24];
    if (fabs(v41) > v42 * 0.5)
    {
      if (v41 >= 0.0)
        v42 = -v42;
      *v40 = v41 + v42 * 0.5;
    }
  }
  v51 = 0x800000001;
  v49 = &unk_1E25C6E00;
  v52 = v53;
  v50 = xmmword_18D331E20;
  sub_18D04BE88((uint64_t)&v49, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v49);
  v43 = v57;
  v44 = *(double **)(a5 + 32);
  *v44 = v37.__sinval * v57[1] + v39 * *v57;
  v45 = SHIDWORD(v55);
  v46 = *(int *)(a5 + 20);
  v44[v46] = v37.__sinval * v43[SHIDWORD(v55) + 1] + v39 * v43[SHIDWORD(v55)];
  v44[2 * v46] = v37.__sinval * v43[(int)((2 * v45) | 1)] + v39 * v43[2 * v45];
  v51 = 0x100000001;
  v49 = &unk_1E25C6A40;
  v52 = v53;
  *(_QWORD *)&v47 = 0x100000001;
  *((_QWORD *)&v47 + 1) = 0x100000001;
  v50 = v47;
  sub_18D04BE88((uint64_t)&v49, 0.0);
  *v52 = 0x3FF0000000000000;
  sub_18D053AA8(a6, (uint64_t)&v49);
  return 0;
}

uint64_t sub_18D245354(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000003;
  v57 = &unk_1E25C7790;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D24D3F0((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 5936);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 2920) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 5136) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 5920) + 112 * (int)v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 5976) + 8 * v34) = sub_18D244EA8;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B4BE8, &std::__any_imp::__unique_typeinfo<raven::h_MapVectorPositionConstraintArgs_RavenConvergence>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18D245754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D245780(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D2457C0(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v13;
  double *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  __double2 v22;
  __int128 v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  double v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE v35[64];
  void *v36;
  __int128 v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  __int16 v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  double v46[3];

  if (!lpsrc
    || (v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4C00, 0)) == 0)
  {
    v41 = 12;
    LOBYTE(v36) = 4;
    v30 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, (unsigned __int8 *)&v36, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v30));
    return 0xFFFFFFFFLL;
  }
  v14 = v13;
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    v41 = 12;
    LOBYTE(v36) = 4;
    v30 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  v21 = *(_QWORD *)(a1 + 32);
  v44 = *(_OWORD *)(v21 + 24);
  v45 = *(_QWORD *)(v21 + 40);
  sub_18D0758F4((uint64_t)&v41, v13[19] * 0.0174532925, v13[20] * 0.0174532925);
  sub_18D056ECC((uint64_t)&v41, (double *)&v44, v46);
  v38 = 0x300000003;
  v36 = &unk_1E25C78E0;
  v37 = xmmword_18D30BB60;
  v39 = (double *)&v40;
  if (v42)
    sub_18D053AA8((uint64_t)&v36, (uint64_t)&v43);
  v22 = __sincos_stret(v14[26] * 0.0174532925);
  *(_QWORD *)&v23 = 0x100000001;
  *((_QWORD *)&v23 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v23;
  **(double **)(a4 + 32) = v22.__sinval * v46[1] - v22.__cosval * v46[0] + **(double **)(a2 + 32);
  v33 = 0x800000001;
  v31 = &unk_1E25C6E00;
  v34 = v35;
  v32 = xmmword_18D331E20;
  sub_18D04BE88((uint64_t)&v31, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v31);
  v24 = v39;
  v25 = *(int *)(a5 + 20);
  v26 = *(_QWORD *)(a5 + 32);
  *(double *)(v26 + 24 * (_DWORD)v25) = v22.__sinval * v39[1] - v22.__cosval * *v39;
  v27 = SHIDWORD(v37);
  *(double *)(v26 + 32 * v25) = v22.__sinval * v24[SHIDWORD(v37) + 1] - v22.__cosval * v24[SHIDWORD(v37)];
  *(double *)(v26 + 40 * (_DWORD)v25) = v22.__sinval * v24[(int)((2 * v27) | 1)] - v22.__cosval * v24[2 * v27];
  v33 = 0x100000001;
  v31 = &unk_1E25C6A40;
  v34 = v35;
  *(_QWORD *)&v28 = 0x100000001;
  *((_QWORD *)&v28 + 1) = 0x100000001;
  v32 = v28;
  sub_18D04BE88((uint64_t)&v31, 0.0);
  *v34 = 0x3FF0000000000000;
  sub_18D053AA8(a6, (uint64_t)&v31);
  return 0;
}

uint64_t sub_18D245AD0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::OdometerEvent *a2)
{
  double v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  __int128 v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  cnprint::CNPrinter *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  __n128 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v65;
  double v66;
  double v67;
  double v68;
  __int128 v69;
  _QWORD v70[4];
  char v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  __int128 v76;
  void *v77;
  __int128 v78;
  uint64_t v79;
  double *v80;
  double v81;
  void *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unsigned __int8 v94;
  void (*v95[5])(uint64_t);

  v95[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  v84 = 0x100000003;
  v82 = &unk_1E25C7790;
  v4 = *((double *)a2 + 26);
  v86 = *((_QWORD *)a2 + 25);
  v79 = 0x300000003;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v83 = v5;
  v85 = &v86;
  v77 = &unk_1E25C78E0;
  v78 = v5;
  v80 = &v81;
  v81 = v4 * v4;
  sub_18D1C7988(v70, 19);
  v70[0] = off_1E25C4AD0;
  v72 = (*(uint64_t (**)(const raven::OdometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  v73 = v6;
  v87 = (void *)(*(uint64_t (**)(const raven::OdometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  v88 = v7;
  v10 = CNTimeSpan::operator-((uint64_t)&v87, (_QWORD *)a2 + 13, v8, v9);
  v11 = *(_OWORD *)(*((_QWORD *)this + 146) + 104);
  v74 = v12 + (double)v10;
  v75 = v11;
  v76 = v11;
  v14 = (*(uint64_t (**)(const raven::OdometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v69 = v14;
  *((double *)&v69 + 1) = v13;
  if ((v78 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v91 = 0x100000003;
  v87 = &unk_1E25C7790;
  v92 = &v93;
  v15 = v13;
  v88 = v78 | 0x100000000;
  v89 = v78;
  v90 = v78;
  v16 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v87, 0.0);
  if (*((_BYTE *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v95[0]) = 2;
      v94 = 2;
      v65 = v15 + (double)v14;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v65));
    }
    else if (*((_BYTE *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v16) <= 1)
      {
        LOWORD(v95[0]) = 2;
        v94 = 1;
        v67 = v15 + (double)v14;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v67));
      }
    }
    else
    {
      v33 = sub_18D03FE4C((double *)&v69, (double *)this + 1043);
      if (v33)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v33) <= 1)
        {
          LOWORD(v95[0]) = 2;
          v94 = 1;
          v68 = *((double *)&v69 + 1) + (double)(uint64_t)v69;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v34, v35, v36, v37, v38, SLOBYTE(v68));
        }
      }
      else
      {
        v95[0] = 0;
        v95[1] = 0;
        sub_18D24D7E0((void (**)(int))v95, (uint64_t)v70);
        v39 = sub_18D1C7B34((uint64_t *)this + 1047, v95);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v95);
        v40 = *((int *)this + 3568);
        v41 = (v40 + 1);
        if (*((_QWORD *)this + 1049) == v41)
        {
          *((_DWORD *)this + 3568) = v41;
          *((_DWORD *)this + 2102) = v41;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v41;
          *((_DWORD *)this + 2105) = v41;
          *((_DWORD *)this + 2808) = v41;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v41;
          *((_DWORD *)this + 2811) = v41;
          *((_DWORD *)this + 2992) = v41;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v41;
          *((_DWORD *)this + 2995) = v41;
          *((_DWORD *)this + 3350) = v41;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v41;
          *((_DWORD *)this + 3353) = v41;
          *((_DWORD *)this + 3362) = v41;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v41;
          *((_DWORD *)this + 3365) = v41;
          *((_DWORD *)this + 3546) = v41;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v41;
          *((_DWORD *)this + 3549) = v41;
          *((_DWORD *)this + 3558) = v41;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v41;
          *((_DWORD *)this + 3561) = v41;
          *((_DWORD *)this + 3572) = v41;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v41;
          *((_DWORD *)this + 3575) = v41;
          *((_DWORD *)this + 3930) = v41;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v41;
          *((_DWORD *)this + 3933) = v41;
          *(_OWORD *)(*((_QWORD *)this + 1054) + 16 * v40) = v69;
          if (v83 <= DWORD1(v83))
            v42 = DWORD1(v83);
          else
            v42 = v83;
          if (DWORD1(v83))
            v43 = (_DWORD)v83 == 0;
          else
            v43 = 1;
          if (v43)
            v44 = 0;
          else
            v44 = v42;
          *(_DWORD *)(*((_QWORD *)this + 1407) + 4 * v40) = v44;
          sub_18D053AA8(*((_QWORD *)this + 1678) + (v40 << 6), (uint64_t)&v82);
          if (v88 <= HIDWORD(v88))
            v45 = HIDWORD(v88);
          else
            v45 = v88;
          if (HIDWORD(v88))
            v46 = (_DWORD)v88 == 0;
          else
            v46 = 1;
          if (v46)
            v47 = 0;
          else
            v47 = v45;
          *(_DWORD *)(*((_QWORD *)this + 1684) + 4 * v40) = v47;
          sub_18D053AA8(*((_QWORD *)this + 1776) + (v40 << 6), (uint64_t)&v87);
          v48 = sub_18D053AA8(*((_QWORD *)this + 1782) + 112 * (int)v40, (uint64_t)&v77);
          *(_QWORD *)(*((_QWORD *)this + 1789) + 8 * v40) = sub_18D246108;
          if (*v39)
            v49 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v39)(3, v39, 0, &unk_1E25B4BD0, &std::__any_imp::__unique_typeinfo<raven::h_HorizontalDistanceTraveledArgs_RavenConvergence<double>>::__id, v48);
          else
            v49 = 0;
          v22 = 0;
          *(_QWORD *)(*((_QWORD *)this + 1968) + 8 * v40) = v49;
          goto LABEL_43;
        }
        LOWORD(v95[0]) = 2;
        v94 = 4;
        v50 = (*(uint64_t (**)(uint64_t))(v70[0] + 16))((uint64_t)v70);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v51, v52, v53, v54, v55, v50);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v16) <= 1)
  {
    LOWORD(v95[0]) = 2;
    v94 = 1;
    v66 = v15 + (double)v14;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v23, v24, v25, v26, v27, SLOBYTE(v66));
  }
  LOWORD(v95[0]) = 12;
  v94 = 4;
  v87 = (void *)(*(uint64_t (**)(const raven::OdometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  v88 = v56;
  v57 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v87, "Could not add measurement - horizontal distance");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v63) = v57;
  else
    v63 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "%s", v58, v59, v60, v61, v62, v63);
  v22 = 0xFFFFFFFFLL;
LABEL_43:
  v70[0] = &unk_1E25B8EE0;
  if (v71 < 0)
    operator delete((void *)v70[2]);
  return v22;
}

void sub_18D2460A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D246108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  double v14;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  int v37;
  uint64_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  __int128 v46;
  double *v47;
  unsigned __int8 v48;
  double v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  __int128 v53;
  double v54;
  int v55;
  double v56;
  void *v57;
  __int128 v58;
  uint64_t v59;
  double *v60;
  _BYTE v61[288];
  void *v62;
  __int128 v63;
  uint64_t v64;
  __int128 *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t (**v68)();
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t (**v73)();
  __int128 v74;
  uint64_t v75;
  double *v76;
  double v77[18];
  uint64_t (**v78)();
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _BYTE v88[16];
  uint64_t v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD v94[7];
  __int128 v95;
  uint64_t v96;
  __int128 *v97;
  __int128 v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  void *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  void *v115;
  __int128 v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 8;
  if (!v13
    || ((v18 = *(_DWORD *)(a2 + 8), v17 = *(_DWORD *)(a2 + 12), v18 <= v17)
      ? (v19 = *(_DWORD *)(a2 + 12))
      : (v19 = *(_DWORD *)(a2 + 8)),
        !v18 || !v17 || v19 != 1))
  {
    LOWORD(v105) = 12;
    LOBYTE(v100) = 4;
    v14 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_12:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, (unsigned __int8 *)&v100, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v14));
    return 0xFFFFFFFFLL;
  }
  if (*(double *)(a3 + 56) <= 0.0)
  {
    LOWORD(v105) = 12;
    LOBYTE(v100) = 4;
    v14 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_12;
  }
  v120 = *(_QWORD *)(a3 + 56);
  v117 = 0x100000006;
  v115 = &unk_1E25C8120;
  v118 = &v119;
  v116 = xmmword_18D319950;
  sub_18D04BE88((uint64_t)&v115, 0.0);
  v26 = 0;
  v112 = 0x100000006;
  v110 = &unk_1E25C8120;
  v111 = xmmword_18D319950;
  v113 = &v114;
  v107 = 0x600000006;
  v105 = &unk_1E25C81B0;
  v106 = xmmword_18D314680;
  v108 = &v109;
  v102 = 0x600000006;
  v100 = &unk_1E25C81B0;
  v101 = xmmword_18D314680;
  v103 = &v104;
  do
  {
    *((_DWORD *)&v66 + v26) = v26;
    ++v26;
  }
  while (v26 != 6);
  v27 = 0;
  v96 = 0x100000006;
  v94[6] = &unk_1E25C8150;
  v95 = xmmword_18D319950;
  v98 = v66;
  v97 = &v98;
  v99 = v67;
  v92 = 0x100000006;
  v90 = &unk_1E25C8120;
  v91 = xmmword_18D319950;
  v93 = v94;
  v28 = *(_QWORD *)(a1 + 32);
  do
  {
    v94[v27] = *(_QWORD *)(v28 + 8 * *((int *)&v98 + v27));
    ++v27;
  }
  while (v27 != 6);
  v29 = 0;
  v64 = 0x100000006;
  v62 = &unk_1E25C8120;
  v63 = xmmword_18D319950;
  v65 = &v66;
  v30 = *(_QWORD *)(a1 + 32);
  do
  {
    *((_QWORD *)&v66 + v29) = *(_QWORD *)(v30 + 8 * *((int *)&v98 + v29));
    ++v29;
  }
  while (v29 != 6);
  if (sub_18D1C8214((uint64_t)&v62, (uint64_t)&v115, &v120, (uint64_t)&v110, (uint64_t)&v105, (uint64_t)&v100, v24, v25))
  {
    LOWORD(v62) = 12;
    LOBYTE(v57) = 4;
    v36 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_29:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v57, "time,%.3lf,h-function failure on line %d: %s() %s", v31, v32, v33, v34, v35, SLOBYTE(v36));
    return 0xFFFFFFFFLL;
  }
  sub_18D16AF50((uint64_t)v88, **(float64_t **)(a1 + 32), *(float64_t *)(*(_QWORD *)(a1 + 32) + 8), *(double *)(*(_QWORD *)(a1 + 32) + 16));
  if (!v88[8])
  {
    LOWORD(v62) = 12;
    LOBYTE(v57) = 4;
    v36 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_29;
  }
  v85 = 0x300000003;
  v83 = &unk_1E25C78E0;
  v84 = xmmword_18D30BB60;
  v86 = &v87;
  sub_18D053AA8((uint64_t)&v83, (uint64_t)&v89);
  v70 = 0x600000003;
  v68 = &off_1E25C7970;
  v71 = &v72;
  v69 = xmmword_18D331E30;
  sub_18D04BE88((uint64_t)&v68, 0.0);
  v37 = HIDWORD(v69) + 1;
  v38 = v71;
  *v71 = 0x3FF0000000000000;
  v38[v37] = 0x3FF0000000000000;
  v38[2 * v37] = 0x3FF0000000000000;
  v75 = 0x600000003;
  v73 = &off_1E25C7970;
  v74 = xmmword_18D331E30;
  v76 = v77;
  sub_18D053B2C((uint64_t)&v83, (uint64_t)&v68, (uint64_t)&v73);
  v59 = 0x600000006;
  v57 = &unk_1E25C81B0;
  v60 = (double *)v61;
  v58 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v57, 0.0);
  v39 = 0;
  v40 = HIDWORD(v58) + 1;
  v41 = 6;
  v42 = v60;
  do
  {
    v42[v39] = 1.0;
    v39 += v40;
    --v41;
  }
  while (v41);
  v64 = 0x600000006;
  v62 = &unk_1E25C81B0;
  v63 = xmmword_18D314680;
  v65 = &v66;
  sub_18D0540FC((uint64_t)&v57, (uint64_t)&v105, (uint64_t)&v62);
  v80 = 0x600000003;
  v78 = &off_1E25C7970;
  v79 = xmmword_18D331E30;
  v81 = &v82;
  sub_18D053B2C((uint64_t)&v73, (uint64_t)&v62, (uint64_t)&v78);
  v59 = 0x100000003;
  v57 = &unk_1E25C7790;
  v58 = xmmword_18D313070;
  v60 = (double *)v61;
  sub_18D053B2C((uint64_t)&v78, (uint64_t)&v90, (uint64_t)&v57);
  v44 = *v60;
  v43 = v60[1];
  v45 = sqrt(v43 * v43 + v44 * v44);
  *(_QWORD *)&v46 = 0x100000001;
  *((_QWORD *)&v46 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v46;
  **(double **)(a4 + 32) = v45 + **(double **)(a2 + 32);
  v75 = 0x300000001;
  v73 = (uint64_t (**)())&unk_1E25C6C20;
  v74 = xmmword_18D314670;
  v47 = v77;
  v76 = v77;
  if (fabs(v45) <= 0.000000015)
  {
    v48 = atomic_load((unsigned __int8 *)&qword_1ECF24060);
    if ((v48 & 1) == 0)
    {
      v56 = v43;
      v54 = v44;
      v55 = __cxa_guard_acquire(&qword_1ECF24060);
      v44 = v54;
      v43 = v56;
      if (v55)
      {
        qword_1ECF24058 = 0x3FE6A09E667F3BCDLL;
        __cxa_guard_release(&qword_1ECF24060);
        v44 = v54;
        v43 = v56;
      }
    }
    v49 = 1.0;
    if (v44 <= 0.0)
    {
      v49 = 0.0;
      if (v44 < 0.0)
        v49 = -1.0;
    }
    v47 = v76;
    *v76 = *(double *)&qword_1ECF24058 * v49;
    v50 = qword_1ECF24058;
    v51 = 1.0;
    if (v43 <= 0.0)
    {
      v51 = 0.0;
      if (v43 < 0.0)
        v51 = -1.0;
    }
    v47[1] = *(double *)&qword_1ECF24058 * v51;
    if (fabs(v44) < 2.22044605e-16 || fabs(v43) < 2.22044605e-16)
    {
      *(_QWORD *)v47 = v50;
      *((_QWORD *)v47 + 1) = qword_1ECF24058;
    }
  }
  else
  {
    v77[0] = v44 / v45;
    v77[1] = v43 / v45;
  }
  v47[2] = 0.0;
  v64 = 0x600000001;
  v62 = &unk_1E25C6D40;
  v63 = xmmword_18D319A00;
  v65 = &v66;
  sub_18D053B2C((uint64_t)&v73, (uint64_t)&v78, (uint64_t)&v62);
  sub_18D053AA8(a5, (uint64_t)&v62);
  result = 0;
  *(_OWORD *)(a5 + 8) = xmmword_18D331E20;
  v52 = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(v52 + 48) = 0;
  *(_QWORD *)(v52 + 56) = 0;
  *(_QWORD *)&v53 = 0x100000001;
  *((_QWORD *)&v53 + 1) = 0x100000001;
  *(_OWORD *)(a6 + 8) = v53;
  **(_QWORD **)(a6 + 32) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_18D246894(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::PositionChangeEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  uint64_t v12;
  double v13;
  double v14;
  __int128 v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  cnprint::CNPrinter *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  __n128 v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v68;
  double v69;
  double v70;
  double v71;
  __int128 v72;
  void *v73;
  __int128 v74;
  uint64_t v75;
  double *v76;
  double v77;
  void *v78;
  __int128 v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD v82[3];
  void *v83;
  __int128 v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE v87[2464];
  _BYTE v88[24];
  uint64_t v89;
  _QWORD *v90;
  _QWORD v91[2];
  double v92;
  unsigned __int8 v93;
  void (*v94[5])(uint64_t);

  v94[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  v89 = 0x100000003;
  *(_QWORD *)v88 = &unk_1E25C7790;
  *(_OWORD *)&v88[8] = xmmword_18D313070;
  v90 = v91;
  v85 = 0x100000134;
  v83 = &unk_1E25C7640;
  v84 = xmmword_18D3130C0;
  v86 = v87;
  v80 = 0x100000003;
  v78 = &unk_1E25C7790;
  v79 = xmmword_18D313070;
  v81 = v82;
  sub_18D159EE0((uint64_t)a2 + 200, (uint64_t)v88, (uint64_t)&v83, (uint64_t)&v78, "2");
  v5 = v4;
  v6 = *((unsigned int *)a2 + 68);
  if ((int)v6 < 1)
  {
    v8 = 0.0;
  }
  else
  {
    v7 = 0;
    v8 = 0.0;
    do
    {
      v8 = v8 + *(double *)(*((_QWORD *)a2 + 37) + 8 * v7);
      v7 += *((_DWORD *)a2 + 71) + 1;
      --v6;
    }
    while (v6);
  }
  v83 = (void *)(*(uint64_t (**)(const raven::PositionChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v84 = v10;
  *(_OWORD *)v88 = *(_OWORD *)((char *)a2 + 104);
  v12 = CNTimeSpan::operator-((uint64_t)&v83, v88, *(int8x16_t *)v88, v11);
  v14 = v13;
  v80 = 0x100000001;
  v78 = &unk_1E25C6A40;
  *(_QWORD *)&v15 = 0x100000001;
  *((_QWORD *)&v15 + 1) = 0x100000001;
  v79 = v15;
  v81 = v82;
  v82[0] = v5;
  v75 = 0x100000001;
  v73 = &unk_1E25C6A40;
  v74 = v15;
  v76 = &v77;
  v77 = v8;
  sub_18D1C7988(v88, 0);
  *(_QWORD *)v88 = off_1E25C48F8;
  v92 = 0.0;
  v91[0] = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  v91[1] = v16;
  v92 = v14 + (double)v12;
  v18 = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v72 = v18;
  *((double *)&v72 + 1) = v17;
  if ((v74 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v85 = 0x100000003;
  v83 = &unk_1E25C7790;
  v86 = v87;
  v19 = v17;
  *(_QWORD *)&v84 = v74 | 0x100000000;
  DWORD2(v84) = v74;
  HIDWORD(v84) = v74;
  v20 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v83, 0.0);
  if (*((_BYTE *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v94[0]) = 2;
      v93 = 2;
      v68 = v19 + (double)v18;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v21, v22, v23, v24, v25, SLOBYTE(v68));
    }
    else if (*((_BYTE *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v20) <= 1)
      {
        LOWORD(v94[0]) = 2;
        v93 = 1;
        v70 = v19 + (double)v18;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v31, v32, v33, v34, v35, SLOBYTE(v70));
      }
    }
    else
    {
      v36 = sub_18D03FE4C((double *)&v72, (double *)this + 1043);
      if (v36)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v36) <= 1)
        {
          LOWORD(v94[0]) = 2;
          v93 = 1;
          v71 = *((double *)&v72 + 1) + (double)(uint64_t)v72;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v37, v38, v39, v40, v41, SLOBYTE(v71));
        }
      }
      else
      {
        v94[0] = 0;
        v94[1] = 0;
        sub_18D24DD08((void (**)(int))v94, (uint64_t)v88);
        v42 = sub_18D1C7B34((uint64_t *)this + 1047, v94);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v94);
        v43 = *((int *)this + 3568);
        v44 = (v43 + 1);
        if (*((_QWORD *)this + 1049) == v44)
        {
          *((_DWORD *)this + 3568) = v44;
          *((_DWORD *)this + 2102) = v44;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v44;
          *((_DWORD *)this + 2105) = v44;
          *((_DWORD *)this + 2808) = v44;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v44;
          *((_DWORD *)this + 2811) = v44;
          *((_DWORD *)this + 2992) = v44;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v44;
          *((_DWORD *)this + 2995) = v44;
          *((_DWORD *)this + 3350) = v44;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v44;
          *((_DWORD *)this + 3353) = v44;
          *((_DWORD *)this + 3362) = v44;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v44;
          *((_DWORD *)this + 3365) = v44;
          *((_DWORD *)this + 3546) = v44;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v44;
          *((_DWORD *)this + 3549) = v44;
          *((_DWORD *)this + 3558) = v44;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v44;
          *((_DWORD *)this + 3561) = v44;
          *((_DWORD *)this + 3572) = v44;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v44;
          *((_DWORD *)this + 3575) = v44;
          *((_DWORD *)this + 3930) = v44;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v44;
          *((_DWORD *)this + 3933) = v44;
          *(_OWORD *)(*((_QWORD *)this + 1054) + 16 * v43) = v72;
          if (v79 <= DWORD1(v79))
            v45 = DWORD1(v79);
          else
            v45 = v79;
          if (DWORD1(v79))
            v46 = (_DWORD)v79 == 0;
          else
            v46 = 1;
          if (v46)
            v47 = 0;
          else
            v47 = v45;
          *(_DWORD *)(*((_QWORD *)this + 1407) + 4 * v43) = v47;
          sub_18D053AA8(*((_QWORD *)this + 1678) + (v43 << 6), (uint64_t)&v78);
          if (v84 <= DWORD1(v84))
            v48 = DWORD1(v84);
          else
            v48 = v84;
          if (DWORD1(v84))
            v49 = (_DWORD)v84 == 0;
          else
            v49 = 1;
          if (v49)
            v50 = 0;
          else
            v50 = v48;
          *(_DWORD *)(*((_QWORD *)this + 1684) + 4 * v43) = v50;
          sub_18D053AA8(*((_QWORD *)this + 1776) + (v43 << 6), (uint64_t)&v83);
          v51 = sub_18D053AA8(*((_QWORD *)this + 1782) + 112 * (int)v43, (uint64_t)&v73);
          *(_QWORD *)(*((_QWORD *)this + 1789) + 8 * v43) = sub_18D246F94;
          if (*v42)
            v52 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v42)(3, v42, 0, &unk_1E25B49E0, &std::__any_imp::__unique_typeinfo<raven::h_3DDistanceTraveledArgs_RavenConvergence<double>>::__id, v51);
          else
            v52 = 0;
          v9 = 0;
          *(_QWORD *)(*((_QWORD *)this + 1968) + 8 * v43) = v52;
          goto LABEL_48;
        }
        LOWORD(v94[0]) = 2;
        v93 = 4;
        v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 16))((uint64_t)v88);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v54, v55, v56, v57, v58, v53);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v20) <= 1)
  {
    LOWORD(v94[0]) = 2;
    v93 = 1;
    v69 = v19 + (double)v18;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v26, v27, v28, v29, v30, SLOBYTE(v69));
  }
  LOWORD(v94[0]) = 12;
  v93 = 4;
  v83 = (void *)(*(uint64_t (**)(const raven::PositionChangeEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v84 = v59;
  v60 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v83, "Could not add measurement - 3D distance traveled from delta-position");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v66) = v60;
  else
    v66 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "%s", v61, v62, v63, v64, v65, v66);
  v9 = 0xFFFFFFFFLL;
LABEL_48:
  *(_QWORD *)v88 = &unk_1E25B8EE0;
  if (SHIBYTE(v90) < 0)
    operator delete(*(void **)&v88[16]);
  return v9;
}

void sub_18D246F38(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D246F94(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v13;
  double *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t result;
  unsigned __int8 v35;
  int v36;
  int v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  __int128 v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  __int128 v49;
  double v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  double *v54;
  _BYTE v55[288];
  void *v56;
  __int128 v57;
  uint64_t v58;
  __int128 *v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  int64x2_t *v65;
  int64x2_t v66;
  double v67;
  _BYTE v68[184];
  void *v69;
  __int128 v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD v73[7];
  __int128 v74;
  uint64_t v75;
  __int128 *v76;
  __int128 v77;
  uint64_t v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  void *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  void *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;

  if (!lpsrc
    || (v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B49E0, 0)) == 0)
  {
    LOWORD(v84) = 12;
    LOBYTE(v79) = 4;
    v33 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_26:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v84, (unsigned __int8 *)&v79, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v33));
    return 0xFFFFFFFFLL;
  }
  v14 = v13;
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    LOWORD(v84) = 12;
    LOBYTE(v79) = 4;
    v33 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_26;
  }
  if (v13[7] <= 0.0)
  {
    LOWORD(v84) = 12;
    LOBYTE(v79) = 4;
    v33 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_26;
  }
  v99 = *((_QWORD *)v13 + 7);
  v96 = 0x100000006;
  v94 = &unk_1E25C8120;
  v97 = &v98;
  v95 = xmmword_18D319950;
  sub_18D04BE88((uint64_t)&v94, 0.0);
  v23 = 0;
  v91 = 0x100000006;
  v89 = &unk_1E25C8120;
  v90 = xmmword_18D319950;
  v92 = &v93;
  v86 = 0x600000006;
  v84 = &unk_1E25C81B0;
  v85 = xmmword_18D314680;
  v87 = &v88;
  v81 = 0x600000006;
  v79 = &unk_1E25C81B0;
  v80 = xmmword_18D314680;
  v82 = &v83;
  do
  {
    *((_DWORD *)&v60 + v23) = v23;
    ++v23;
  }
  while (v23 != 6);
  v24 = 0;
  v75 = 0x100000006;
  v73[6] = &unk_1E25C8150;
  v74 = xmmword_18D319950;
  v77 = v60;
  v76 = &v77;
  v78 = v61;
  v71 = 0x100000006;
  v69 = &unk_1E25C8120;
  v70 = xmmword_18D319950;
  v72 = v73;
  v25 = *(_QWORD *)(a1 + 32);
  do
  {
    v73[v24] = *(_QWORD *)(v25 + 8 * *((int *)&v77 + v24));
    ++v24;
  }
  while (v24 != 6);
  v26 = 0;
  v58 = 0x100000006;
  v56 = &unk_1E25C8120;
  v57 = xmmword_18D319950;
  v59 = &v60;
  v27 = *(_QWORD *)(a1 + 32);
  do
  {
    *((_QWORD *)&v60 + v26) = *(_QWORD *)(v27 + 8 * *((int *)&v77 + v26));
    ++v26;
  }
  while (v26 != 6);
  if (sub_18D1C8214((uint64_t)&v56, (uint64_t)&v94, &v99, (uint64_t)&v89, (uint64_t)&v84, (uint64_t)&v79, v21, v22))
  {
    LOWORD(v56) = 12;
    LOBYTE(v51) = 4;
    v50 = v14[6] + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, (unsigned __int8 *)&v51, "time,%.3lf,h-function failure on line %d: %s() %s", v28, v29, v30, v31, v32, SLOBYTE(v50));
    return 0xFFFFFFFFLL;
  }
  v35 = atomic_load((unsigned __int8 *)&qword_1ECF24068);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24068))
  {
    v58 = 0x300000001;
    v56 = &unk_1E25C6C50;
    v59 = &v60;
    v57 = xmmword_18D314670;
    *(_QWORD *)&v60 = 0x100000000;
    DWORD2(v60) = 2;
    sub_18D16169C((uint64_t)&v56, (uint64_t)&unk_1ECF24110);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF24110, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24068);
  }
  v53 = 0x600000006;
  v51 = &unk_1E25C81B0;
  v54 = (double *)v55;
  v52 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v51, 0.0);
  v36 = 0;
  v37 = HIDWORD(v52) + 1;
  v38 = 6;
  v39 = v54;
  do
  {
    v39[v36] = 1.0;
    v36 += v37;
    --v38;
  }
  while (v38);
  v58 = 0x600000006;
  v56 = &unk_1E25C81B0;
  v57 = xmmword_18D314680;
  v59 = &v60;
  sub_18D0540FC((uint64_t)&v51, (uint64_t)&v84, (uint64_t)&v56);
  sub_18D24D964((uint64_t)&v62, (uint64_t)&v56);
  sub_18D24DB88((uint64_t)v68, (uint64_t)&v62);
  v53 = 0x100000003;
  v51 = &unk_1E25C7790;
  v52 = xmmword_18D313070;
  v54 = (double *)v55;
  sub_18D053B2C((uint64_t)v68, (uint64_t)&v69, (uint64_t)&v51);
  v41 = *v54;
  v40 = v54[1];
  v42 = v54[2];
  v43 = sqrt(v40 * v40 + v41 * v41 + v42 * v42);
  *(_QWORD *)&v44 = 0x100000001;
  *((_QWORD *)&v44 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v44;
  **(double **)(a4 + 32) = v43 + **(double **)(a2 + 32);
  v64 = 0x300000001;
  v62 = &unk_1E25C6C20;
  v63 = xmmword_18D314670;
  v65 = &v66;
  if (fabs(v43) <= 0.000000015)
  {
    if (v41 <= 0.0)
    {
      v45 = -0.577350269;
      if (v41 >= 0.0)
        v45 = 0.0;
    }
    else
    {
      v45 = 0.577350269;
    }
    *(double *)v66.i64 = v45;
    if (v40 <= 0.0)
    {
      v46 = -0.577350269;
      if (v40 >= 0.0)
        v46 = 0.0;
    }
    else
    {
      v46 = 0.577350269;
    }
    *(double *)&v66.i64[1] = v46;
    if (v42 <= 0.0)
    {
      v47 = -0.577350269;
      if (v42 >= 0.0)
        v47 = 0.0;
    }
    else
    {
      v47 = 0.577350269;
    }
    v67 = v47;
    if (fabs(v41) < 2.22044605e-16 && fabs(v40) < 2.22044605e-16 && fabs(v42) < 2.22044605e-16)
    {
      v66 = vdupq_n_s64(0x3FE279A74590331CuLL);
      v67 = 0.577350269;
    }
  }
  else
  {
    *(double *)v66.i64 = v41 / v43;
    *(double *)&v66.i64[1] = v40 / v43;
    v67 = v42 / v43;
  }
  v58 = 0x600000001;
  v56 = &unk_1E25C6D40;
  v57 = xmmword_18D319A00;
  v59 = &v60;
  sub_18D053B2C((uint64_t)&v62, (uint64_t)v68, (uint64_t)&v56);
  sub_18D053AA8(a5, (uint64_t)&v56);
  result = 0;
  *(_OWORD *)(a5 + 8) = xmmword_18D331E20;
  v48 = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(v48 + 48) = 0;
  *(_QWORD *)(v48 + 56) = 0;
  *(_QWORD *)&v49 = 0x100000001;
  *((_QWORD *)&v49 + 1) = 0x100000001;
  *(_OWORD *)(a6 + 8) = v49;
  **(_QWORD **)(a6 + 32) = 0x3FF0000000000000;
  return result;
}

void sub_18D2476E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF24068);
  _Unwind_Resume(a1);
}

uint64_t sub_18D247714(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::PositionEvent *a2)
{
  _BOOL8 IsPositionMeasurementUsable;
  __int128 v5;
  int v6;
  _QWORD *v7;
  std::string::size_type v8;
  _BOOL8 ShouldInflatePositionStateUncertaintyForVL;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  cnprint::CNPrinter *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  __n128 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  __int128 v77;
  std::string v78;
  __int128 v79;
  unsigned __int8 v80;
  __int16 v81;
  double v82;
  __int128 v83;
  std::string __p;
  __int128 v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD v90[3];
  unsigned __int8 v91[32];
  _QWORD *v92;
  uint64_t (**v93)();
  int v94;
  std::string v95;
  __int128 v96;
  __int128 v97;
  void *v98;
  __int128 v99;
  uint64_t v100;
  __int128 *v101;
  __int128 v102;
  uint64_t v103;
  void *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  void *v109;
  _OWORD v110[22];
  void (*v111)(uint64_t);
  __int128 v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD v115[10];

  v115[9] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (!*((_BYTE *)this + 58))
    return 0;
  IsPositionMeasurementUsable = raven::RavenEstimator::IsPositionMeasurementUsable(this, (uint64_t)a2);
  if (!IsPositionMeasurementUsable)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)IsPositionMeasurementUsable) <= 1)
    {
      LOWORD(v109) = 12;
      LOBYTE(v104) = 1;
      *(_QWORD *)&v83 = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      *((_QWORD *)&v83 + 1) = v19;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v83, "WiFi position measurement not used in non-dense urban fitness case");
      if (*((char *)this + 2511) >= 0)
        LOBYTE(v25) = (_BYTE)this - 72;
      else
        v25 = *((_QWORD *)this + 311);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v109, (unsigned __int8 *)&v104, "%s", v20, v21, v22, v23, v24, v25);
    }
    return 0;
  }
  v109 = &unk_1E25C21B8;
  memcpy(v110, (char *)a2 + 8, sizeof(v110));
  v106 = 0x300000003;
  v104 = &unk_1E25C78E0;
  v105 = xmmword_18D30BB60;
  v107 = &v108;
  if (!sub_18D24809C((uint64_t)&v109, (uint64_t)&v104))
    return 0xFFFFFFFFLL;
  v100 = 0x100000003;
  v98 = &unk_1E25C7790;
  v99 = xmmword_18D313070;
  v101 = &v102;
  v102 = *(_OWORD *)((char *)&v110[17] + 8);
  v103 = *((_QWORD *)&v110[18] + 1);
  v5 = v110[6];
  v97 = v110[6];
  sub_18D1C7988(&v93, 24);
  v93 = off_1E25C3D60;
  v96 = v97;
  v6 = LOBYTE(v110[12]);
  if (LOBYTE(v110[12]) == 14)
  {
    if ((*(unsigned int (**)(raven::RavenConvergenceEstimator *))(*(_QWORD *)this + 144))(this))
    {
      sub_18D20AD6C((uint64_t)this + 2640, (uint64_t)v91);
      v88 = 0x100000003;
      v86 = &unk_1E25C7790;
      v87 = xmmword_18D313070;
      v89 = v90;
      v90[0] = *v92;
      v90[1] = v92[1];
      v90[2] = v92[2];
      sub_18D04F338((uint64_t)this + 2640, (uint64_t)&v83);
      v113 = 0x300000003;
      v111 = (void (*)(uint64_t))&unk_1E25C78E0;
      v112 = xmmword_18D30BB60;
      v114 = v115;
      v115[0] = *(_QWORD *)__p.__r_.__value_.__r.__words[2];
      v7 = (_QWORD *)(__p.__r_.__value_.__r.__words[2] + 8 * SHIDWORD(__p.__r_.__value_.__r.__words[0]));
      v115[3] = *v7;
      v115[6] = *(_QWORD *)(__p.__r_.__value_.__r.__words[2] + 16 * SHIDWORD(__p.__r_.__value_.__r.__words[0]));
      v115[1] = *v7;
      v115[4] = v7[1];
      v8 = __p.__r_.__value_.__r.__words[2] + 16 * HIDWORD(__p.__r_.__value_.__r.__words[0]);
      v115[7] = *(_QWORD *)(v8 + 8);
      v115[2] = *(_QWORD *)(__p.__r_.__value_.__r.__words[2] + 16 * SHIDWORD(__p.__r_.__value_.__r.__words[0]));
      v115[5] = *(_QWORD *)(v8 + 8);
      v115[8] = *(_QWORD *)(v8 + 16);
      v82 = 1.0;
      ShouldInflatePositionStateUncertaintyForVL = raven::RavenEstimator::ShouldInflatePositionStateUncertaintyForVL((char *)this, (uint64_t)&v98, (uint64_t)&v104, (uint64_t)&v86, (uint64_t)&v111, &v82);
      if (ShouldInflatePositionStateUncertaintyForVL)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)ShouldInflatePositionStateUncertaintyForVL) <= 1)
        {
          v81 = 12;
          v80 = 1;
          v77 = v110[0];
          v10 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v77, "kVLF Inflate Position State Uncertainty, sf,%.3lf", v82);
          if (*((char *)this + 2511) >= 0)
            LOBYTE(v16) = v10;
          else
            v16 = *((_QWORD *)this + 311);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, &v80, "%s", v11, v12, v13, v14, v15, v16);
        }
        raven::RavenConvergenceEstimator::InflatePositionUncertainty(this, v82);
      }
      sub_18D1C7988(&v77, 31);
      *(_QWORD *)&v77 = off_1E25C41D0;
      v94 = DWORD2(v77);
      std::string::operator=(&v95, &v78);
      v96 = v79;
      *(_QWORD *)&v77 = &unk_1E25B8EE0;
      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      v17 = (void *)v78.__r_.__value_.__r.__words[0];
      goto LABEL_28;
    }
    v6 = LOBYTE(v110[12]);
  }
  if (v6 != 15)
    goto LABEL_30;
  sub_18D1C7988(&v83, 30);
  *(_QWORD *)&v83 = off_1E25C41A8;
  v94 = DWORD2(v83);
  std::string::operator=(&v95, &__p);
  v96 = v85;
  *(_QWORD *)&v83 = &unk_1E25B8EE0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_28:
    operator delete(v17);
  }
LABEL_29:
  v96 = v97;
LABEL_30:
  if ((v105 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  __p.__r_.__value_.__l.__size_ = 0x100000003;
  *(_QWORD *)&v83 = &unk_1E25C7790;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v85;
  *((_QWORD *)&v83 + 1) = v105 | 0x100000000;
  LODWORD(__p.__r_.__value_.__l.__data_) = v105;
  HIDWORD(__p.__r_.__value_.__r.__words[0]) = v105;
  v27 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v83, 0.0);
  if (*((_BYTE *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v111) = 2;
      v91[0] = 2;
      v73 = *((double *)&v5 + 1) + (double)(uint64_t)v5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v73));
    }
    else if (*((_BYTE *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v27) <= 1)
      {
        LOWORD(v111) = 2;
        v91[0] = 1;
        v75 = *((double *)&v5 + 1) + (double)(uint64_t)v5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v38, v39, v40, v41, v42, SLOBYTE(v75));
      }
    }
    else
    {
      v43 = sub_18D03FE4C((double *)&v97, (double *)this + 1043);
      if (v43)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v43) <= 1)
        {
          LOWORD(v111) = 2;
          v91[0] = 1;
          v76 = *((double *)&v97 + 1) + (double)(uint64_t)v97;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v44, v45, v46, v47, v48, SLOBYTE(v76));
        }
      }
      else
      {
        v111 = 0;
        *(_QWORD *)&v112 = 0;
        sub_18D24DFBC((void (**)(int))&v111, (uint64_t)&v93);
        v49 = sub_18D1C7B34((uint64_t *)this + 1047, &v111);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v111);
        v50 = *((int *)this + 3568);
        v51 = (v50 + 1);
        if (*((_QWORD *)this + 1049) == v51)
        {
          *((_DWORD *)this + 3568) = v51;
          *((_DWORD *)this + 2102) = v51;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v51;
          *((_DWORD *)this + 2105) = v51;
          *((_DWORD *)this + 2808) = v51;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v51;
          *((_DWORD *)this + 2811) = v51;
          *((_DWORD *)this + 2992) = v51;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v51;
          *((_DWORD *)this + 2995) = v51;
          *((_DWORD *)this + 3350) = v51;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v51;
          *((_DWORD *)this + 3353) = v51;
          *((_DWORD *)this + 3362) = v51;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v51;
          *((_DWORD *)this + 3365) = v51;
          *((_DWORD *)this + 3546) = v51;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v51;
          *((_DWORD *)this + 3549) = v51;
          *((_DWORD *)this + 3558) = v51;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v51;
          *((_DWORD *)this + 3561) = v51;
          *((_DWORD *)this + 3572) = v51;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v51;
          *((_DWORD *)this + 3575) = v51;
          *((_DWORD *)this + 3930) = v51;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v51;
          *((_DWORD *)this + 3933) = v51;
          *(_OWORD *)(*((_QWORD *)this + 1054) + 16 * v50) = v97;
          if (v99 <= DWORD1(v99))
            v52 = DWORD1(v99);
          else
            v52 = v99;
          if (DWORD1(v99))
            v53 = (_DWORD)v99 == 0;
          else
            v53 = 1;
          if (v53)
            v54 = 0;
          else
            v54 = v52;
          *(_DWORD *)(*((_QWORD *)this + 1407) + 4 * v50) = v54;
          sub_18D053AA8(*((_QWORD *)this + 1678) + (v50 << 6), (uint64_t)&v98);
          if (DWORD2(v83) <= HIDWORD(v83))
            v55 = HIDWORD(v83);
          else
            v55 = DWORD2(v83);
          if (HIDWORD(v83))
            v56 = DWORD2(v83) == 0;
          else
            v56 = 1;
          if (v56)
            v57 = 0;
          else
            v57 = v55;
          *(_DWORD *)(*((_QWORD *)this + 1684) + 4 * v50) = v57;
          sub_18D053AA8(*((_QWORD *)this + 1776) + (v50 << 6), (uint64_t)&v83);
          v58 = sub_18D053AA8(*((_QWORD *)this + 1782) + 112 * (int)v50, (uint64_t)&v104);
          *(_QWORD *)(*((_QWORD *)this + 1789) + 8 * v50) = sub_18D24812C;
          if (*v49)
            v59 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v49)(3, v49, 0, &unk_1E25B45A0, &std::__any_imp::__unique_typeinfo<raven::h_PositionArgs_RavenConvergence>::__id, v58);
          else
            v59 = 0;
          v18 = 0;
          *(_QWORD *)(*((_QWORD *)this + 1968) + 8 * v50) = v59;
          goto LABEL_68;
        }
        LOWORD(v111) = 2;
        v91[0] = 4;
        v60 = ((uint64_t (*)(uint64_t))v93[2])((uint64_t)&v93);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v61, v62, v63, v64, v65, v60);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v27) <= 1)
  {
    LOWORD(v111) = 2;
    v91[0] = 1;
    v74 = *((double *)&v5 + 1) + (double)(uint64_t)v5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v33, v34, v35, v36, v37, SLOBYTE(v74));
  }
  LOWORD(v111) = 12;
  v91[0] = 4;
  v83 = v110[0];
  v66 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v83, "Could not add measurement - position, src,%d", LOBYTE(v110[12]));
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v72) = v66;
  else
    v72 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "%s", v67, v68, v69, v70, v71, v72);
  v18 = 0xFFFFFFFFLL;
LABEL_68:
  v93 = (uint64_t (**)())&unk_1E25B8EE0;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  return v18;
}

void sub_18D247FE0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_18D076A08(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D24809C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;

  if (*(_BYTE *)(a1 + 280) || (result = sub_18D20C258(a1), (_DWORD)result))
  {
    *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
    v5 = *(_QWORD **)(a2 + 32);
    *v5 = *(_QWORD *)(a1 + 312);
    v5[3] = *(_QWORD *)(a1 + 320);
    v5[6] = *(_QWORD *)(a1 + 328);
    v5[1] = *(_QWORD *)(a1 + 320);
    v5[4] = *(_QWORD *)(a1 + 336);
    v5[7] = *(_QWORD *)(a1 + 344);
    v5[2] = *(_QWORD *)(a1 + 328);
    v5[5] = *(_QWORD *)(a1 + 344);
    v5[8] = *(_QWORD *)(a1 + 352);
    return 1;
  }
  return result;
}

uint64_t sub_18D24812C(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  double *v20;
  double *v21;
  double *v22;
  _QWORD *v23;
  int v24;
  int v25;
  _QWORD *v26;
  double v28;
  uint64_t (**v29)();
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE v33[199];
  unsigned __int8 v34;

  if (lpsrc
    && (v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B45A0, 0)) != 0)
  {
    v15 = *(_DWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 12);
    if (v15 <= v14)
      v16 = *(_DWORD *)(a1 + 12);
    else
      v16 = *(_DWORD *)(a1 + 8);
    if (v15 && v14 && v16 == 8)
    {
      v18 = *(_DWORD *)(a2 + 8);
      v17 = *(_DWORD *)(a2 + 12);
      v19 = v18 <= v17 ? *(_DWORD *)(a2 + 12) : *(_DWORD *)(a2 + 8);
      if (v18 && v17 && v19 == 3)
      {
        *(_OWORD *)(a4 + 8) = xmmword_18D313070;
        v20 = *(double **)(a1 + 32);
        v21 = *(double **)(a2 + 32);
        v22 = *(double **)(a4 + 32);
        *v22 = *v20 + *v21;
        v22[1] = v20[1] + v21[1];
        v22[2] = v20[2] + v21[2];
        v31 = 0x800000003;
        v29 = &off_1E25C79A0;
        v32 = v33;
        v30 = xmmword_18D331E40;
        sub_18D04BE88((uint64_t)&v29, 0.0);
        sub_18D053AA8(a5, (uint64_t)&v29);
        v23 = *(_QWORD **)(a5 + 32);
        *v23 = 0x3FF0000000000000;
        v24 = *(_DWORD *)(a5 + 20);
        v23[v24 + 1] = 0x3FF0000000000000;
        v23[2 * v24 + 2] = 0x3FF0000000000000;
        v31 = 0x300000003;
        v29 = (uint64_t (**)())&unk_1E25C78E0;
        v32 = v33;
        v30 = xmmword_18D30BB60;
        sub_18D04BE88((uint64_t)&v29, 0.0);
        v25 = HIDWORD(v30) + 1;
        v26 = v32;
        *v32 = 0x3FF0000000000000;
        v26[v25] = 0x3FF0000000000000;
        v26[2 * v25] = 0x3FF0000000000000;
        sub_18D053AA8(a6, (uint64_t)&v29);
        return 0;
      }
    }
    LOWORD(v29) = 12;
    v34 = 4;
    v28 = v13[6] + (double)*((uint64_t *)v13 + 5);
  }
  else
  {
    LOWORD(v29) = 12;
    v34 = 4;
    v28 = MEMORY[0x30] + (double)MEMORY[0x28];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v34, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v28));
  return 0xFFFFFFFFLL;
}

void raven::RavenConvergenceEstimator::InflatePositionUncertainty(raven::RavenConvergenceEstimator *this, double a2)
{
  unsigned __int8 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *__p[2];
  char v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v3 = atomic_load((unsigned __int8 *)&qword_1ECF24040);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24040))
  {
    v15 = 0x300000001;
    *(_QWORD *)v14 = &unk_1E25C6C50;
    v16 = &v17;
    *(_OWORD *)&v14[8] = xmmword_18D314670;
    v17 = 0x100000000;
    v18 = 2;
    sub_18D16169C((uint64_t)v14, (uint64_t)&unk_1ECF240A0);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF240A0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24040);
  }
  sub_18D24F2E4((uint64_t)v14, (uint64_t)&unk_1ECF240A0);
  sub_18D0778AC(__p, "InflatePositionUncertainty");
  raven::RavenConvergenceEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14);
  if (v13 < 0)
    operator delete(__p[0]);
  LOWORD(__p[0]) = 12;
  v11 = 2;
  *(_OWORD *)v14 = *((_OWORD *)this + 5);
  v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of position states.");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v10) = v4;
  else
    v10 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v11, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18D2484E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1ECF24040);
  _Unwind_Resume(a1);
}

uint64_t sub_18D248520(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D248560(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_18D2485A0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

BOOL sub_18D2485E0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(a1 + 296);
  if (*(_BYTE *)(a1 + 296))
  {
    if (*(_DWORD *)(a2 + 8) == 3 && *(_DWORD *)(a2 + 12) == 3)
    {
      v4 = *(_DWORD *)(a2 + 20);
    }
    else
    {
      *(_OWORD *)(a2 + 8) = xmmword_18D30BB60;
      v4 = 3;
    }
    v5 = *(_QWORD **)(a2 + 32);
    *v5 = *(_QWORD *)(a1 + 328);
    v6 = &v5[v4];
    *v6 = *(_QWORD *)(a1 + 336);
    v5[2 * v4] = *(_QWORD *)(a1 + 344);
    v5[1] = *(_QWORD *)(a1 + 336);
    v6[1] = *(_QWORD *)(a1 + 352);
    v7 = &v5[2 * v4];
    v7[1] = *(_QWORD *)(a1 + 360);
    v5[2] = *(_QWORD *)(a1 + 344);
    v6[2] = *(_QWORD *)(a1 + 360);
    v7[2] = *(_QWORD *)(a1 + 368);
  }
  return v2 != 0;
}

uint64_t sub_18D24867C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  BOOL v17;
  double v18;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  __int128 v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  _BYTE v36[71];
  unsigned __int8 v37;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 8;
  if (v12
    && ((v13 = *(_DWORD *)(a2 + 8), v14 = *(_DWORD *)(a2 + 12), v13 <= v14)
      ? (v15 = *(_DWORD *)(a2 + 12))
      : (v15 = *(_DWORD *)(a2 + 8)),
        v13 ? (v16 = v14 == 0) : (v16 = 1),
        !v16 ? (v17 = v15 == 1) : (v17 = 0),
        v17))
  {
    v22 = *(double **)(a1 + 32);
    v24 = v22[3];
    v23 = v22[4];
    v25 = v22[5];
    v26 = sqrt(v23 * v23 + v24 * v24 + v25 * v25);
    *(_QWORD *)&v27 = 0x100000001;
    *((_QWORD *)&v27 + 1) = 0x100000001;
    *(_OWORD *)(a4 + 8) = v27;
    **(double **)(a4 + 32) = v26 + **(double **)(a2 + 32);
    v34 = 0x800000001;
    v32 = &unk_1E25C6E00;
    v35 = v36;
    v33 = xmmword_18D331E20;
    sub_18D04BE88((uint64_t)&v32, 0.0);
    sub_18D053AA8(a5, (uint64_t)&v32);
    v28 = *(int *)(a5 + 20);
    v29 = *(_QWORD *)(a5 + 32);
    if (fabs(v26) <= 0.000000015)
    {
      *(_QWORD *)(v29 + 24 * (_DWORD)v28) = 0x3FE279A745904047;
      *(_QWORD *)(v29 + 32 * v28) = 0x3FE279A745904047;
      v30 = 0.577350269;
    }
    else
    {
      *(double *)(v29 + 24 * (_DWORD)v28) = v24 / v26;
      *(double *)(v29 + 32 * v28) = v23 / v26;
      v30 = v25 / v26;
    }
    *(double *)(v29 + 40 * (_DWORD)v28) = v30;
    v34 = 0x100000001;
    v32 = &unk_1E25C6A40;
    v35 = v36;
    *(_QWORD *)&v31 = 0x100000001;
    *((_QWORD *)&v31 + 1) = 0x100000001;
    v33 = v31;
    sub_18D04BE88((uint64_t)&v32, 0.0);
    *v35 = 0x3FF0000000000000;
    sub_18D053AA8(a6, (uint64_t)&v32);
    return 0;
  }
  else
  {
    LOWORD(v32) = 12;
    v37 = 4;
    v18 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v37, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v18));
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18D248890(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::VelocityEvent *a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  double v12;
  cnprint::CNPrinter *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  __n128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v61;
  double v62;
  double v63;
  double v64;
  _QWORD v65[4];
  char v66;
  __int128 v67;
  __int128 v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD v73[7];
  __int128 v74;
  void *v75;
  __int128 v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned __int8 v88;
  void (*v89[5])(uint64_t);

  v89[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 57))
    return 0xFFFFFFFFLL;
  if (*((_BYTE *)this + 58))
    v4 = *((_BYTE *)a2 + 280) == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  v77 = 0x100000003;
  v75 = &unk_1E25C7790;
  v76 = xmmword_18D313070;
  v78 = &v79;
  v79 = *((_OWORD *)a2 + 18);
  v6 = *((_QWORD *)a2 + 39);
  v80 = *((_QWORD *)a2 + 38);
  v71 = 0x300000003;
  v69 = &unk_1E25C78E0;
  v70 = xmmword_18D30BB60;
  v72 = v73;
  v7 = *((_QWORD *)a2 + 40);
  v8 = *((_QWORD *)a2 + 41);
  v73[0] = v6;
  v73[1] = v7;
  v9 = *((_QWORD *)a2 + 42);
  v73[2] = v8;
  v73[3] = v7;
  v10 = *(_OWORD *)((char *)a2 + 344);
  v73[4] = v9;
  v73[5] = v10;
  v73[6] = v8;
  v74 = v10;
  v11 = *((_QWORD *)a2 + 13);
  v12 = *((double *)a2 + 14);
  *(_QWORD *)&v68 = v11;
  *((double *)&v68 + 1) = v12;
  sub_18D1C7988(v65, 28);
  v65[0] = off_1E25C3D88;
  v67 = v68;
  if ((v70 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v85 = 0x100000003;
  v81 = &unk_1E25C7790;
  v86 = &v87;
  v82 = v70 | 0x100000000;
  v83 = v70;
  v84 = v70;
  v13 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v81, 0.0);
  if (*((_BYTE *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v89[0]) = 2;
      v88 = 2;
      v61 = v12 + (double)v11;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v14, v15, v16, v17, v18, SLOBYTE(v61));
    }
    else if (*((_BYTE *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
      {
        LOWORD(v89[0]) = 2;
        v88 = 1;
        v63 = v12 + (double)v11;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v63));
      }
    }
    else
    {
      v29 = sub_18D03FE4C((double *)&v68, (double *)this + 1043);
      if (v29)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v29) <= 1)
        {
          LOWORD(v89[0]) = 2;
          v88 = 1;
          v64 = *((double *)&v68 + 1) + (double)(uint64_t)v68;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v64));
        }
      }
      else
      {
        v89[0] = 0;
        v89[1] = 0;
        sub_18D24E2A4((void (**)(int))v89, (uint64_t)v65);
        v35 = sub_18D1C7B34((uint64_t *)this + 1047, v89);
        sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v89);
        v36 = *((int *)this + 3568);
        v37 = (v36 + 1);
        if (*((_QWORD *)this + 1049) == v37)
        {
          *((_DWORD *)this + 3568) = v37;
          *((_DWORD *)this + 2102) = v37;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v37;
          *((_DWORD *)this + 2105) = v37;
          *((_DWORD *)this + 2808) = v37;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v37;
          *((_DWORD *)this + 2811) = v37;
          *((_DWORD *)this + 2992) = v37;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v37;
          *((_DWORD *)this + 2995) = v37;
          *((_DWORD *)this + 3350) = v37;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v37;
          *((_DWORD *)this + 3353) = v37;
          *((_DWORD *)this + 3362) = v37;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v37;
          *((_DWORD *)this + 3365) = v37;
          *((_DWORD *)this + 3546) = v37;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v37;
          *((_DWORD *)this + 3549) = v37;
          *((_DWORD *)this + 3558) = v37;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v37;
          *((_DWORD *)this + 3561) = v37;
          *((_DWORD *)this + 3572) = v37;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v37;
          *((_DWORD *)this + 3575) = v37;
          *((_DWORD *)this + 3930) = v37;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v37;
          *((_DWORD *)this + 3933) = v37;
          *(_OWORD *)(*((_QWORD *)this + 1054) + 16 * v36) = v68;
          if (v76 <= DWORD1(v76))
            v38 = DWORD1(v76);
          else
            v38 = v76;
          if (DWORD1(v76))
            v39 = (_DWORD)v76 == 0;
          else
            v39 = 1;
          if (v39)
            v40 = 0;
          else
            v40 = v38;
          *(_DWORD *)(*((_QWORD *)this + 1407) + 4 * v36) = v40;
          sub_18D053AA8(*((_QWORD *)this + 1678) + (v36 << 6), (uint64_t)&v75);
          if (v82 <= HIDWORD(v82))
            v41 = HIDWORD(v82);
          else
            v41 = v82;
          if (HIDWORD(v82))
            v42 = (_DWORD)v82 == 0;
          else
            v42 = 1;
          if (v42)
            v43 = 0;
          else
            v43 = v41;
          *(_DWORD *)(*((_QWORD *)this + 1684) + 4 * v36) = v43;
          sub_18D053AA8(*((_QWORD *)this + 1776) + (v36 << 6), (uint64_t)&v81);
          v44 = sub_18D053AA8(*((_QWORD *)this + 1782) + 112 * (int)v36, (uint64_t)&v69);
          *(_QWORD *)(*((_QWORD *)this + 1789) + 8 * v36) = sub_18D248EAC;
          if (*v35)
            v45 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v35)(3, v35, 0, &unk_1E25B45B8, &std::__any_imp::__unique_typeinfo<raven::h_VelocityArgs_RavenConvergence>::__id, v44);
          else
            v45 = 0;
          v5 = 0;
          *(_QWORD *)(*((_QWORD *)this + 1968) + 8 * v36) = v45;
          goto LABEL_47;
        }
        LOWORD(v89[0]) = 2;
        v88 = 4;
        v46 = (*(uint64_t (**)(uint64_t))(v65[0] + 16))((uint64_t)v65);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v47, v48, v49, v50, v51, v46);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
  {
    LOWORD(v89[0]) = 2;
    v88 = 1;
    v62 = v12 + (double)v11;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v62));
  }
  LOWORD(v89[0]) = 12;
  v88 = 4;
  v81 = (void *)(*(uint64_t (**)(const raven::VelocityEvent *))(*(_QWORD *)a2 + 16))(a2);
  v82 = v52;
  v53 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v81, "Could not add measurement - velocity");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v59) = v53;
  else
    v59 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v89, &v88, "%s", v54, v55, v56, v57, v58, v59);
  v5 = 0xFFFFFFFFLL;
LABEL_47:
  v65[0] = &unk_1E25B8EE0;
  if (v66 < 0)
    operator delete((void *)v65[2]);
  return v5;
}

void sub_18D248E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D248EAC(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  double *v20;
  double *v21;
  double *v22;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  double v28;
  uint64_t (**v29)();
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE v33[199];
  unsigned __int8 v34;

  if (lpsrc
    && (v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B45B8, 0)) != 0)
  {
    v15 = *(_DWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 12);
    if (v15 <= v14)
      v16 = *(_DWORD *)(a1 + 12);
    else
      v16 = *(_DWORD *)(a1 + 8);
    if (v15 && v14 && v16 == 8)
    {
      v18 = *(_DWORD *)(a2 + 8);
      v17 = *(_DWORD *)(a2 + 12);
      v19 = v18 <= v17 ? *(_DWORD *)(a2 + 12) : *(_DWORD *)(a2 + 8);
      if (v18 && v17 && v19 == 3)
      {
        *(_OWORD *)(a4 + 8) = xmmword_18D313070;
        v20 = *(double **)(a1 + 32);
        v21 = *(double **)(a2 + 32);
        v22 = *(double **)(a4 + 32);
        *v22 = v20[3] + *v21;
        v22[1] = v20[4] + v21[1];
        v22[2] = v20[5] + v21[2];
        v31 = 0x800000003;
        v29 = &off_1E25C79A0;
        v32 = v33;
        v30 = xmmword_18D331E40;
        sub_18D04BE88((uint64_t)&v29, 0.0);
        sub_18D053AA8(a5, (uint64_t)&v29);
        v23 = *(_DWORD *)(a5 + 20);
        v24 = *(_QWORD *)(a5 + 32);
        *(_QWORD *)(v24 + 24 * v23) = 0x3FF0000000000000;
        *(_QWORD *)(v24 + 8 * ((4 * v23) | 1)) = 0x3FF0000000000000;
        *(_QWORD *)(v24 + 8 * (5 * v23 + 2)) = 0x3FF0000000000000;
        v31 = 0x300000003;
        v29 = (uint64_t (**)())&unk_1E25C78E0;
        v32 = v33;
        v30 = xmmword_18D30BB60;
        sub_18D04BE88((uint64_t)&v29, 0.0);
        v25 = HIDWORD(v30) + 1;
        v26 = v32;
        *v32 = 0x3FF0000000000000;
        v26[v25] = 0x3FF0000000000000;
        v26[2 * v25] = 0x3FF0000000000000;
        sub_18D053AA8(a6, (uint64_t)&v29);
        return 0;
      }
    }
    LOWORD(v29) = 12;
    v34 = 4;
    v28 = v13[6] + (double)*((uint64_t *)v13 + 5);
  }
  else
  {
    LOWORD(v29) = 12;
    v34 = 4;
    v28 = MEMORY[0x30] + (double)MEMORY[0x28];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v34, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v28));
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D249108(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void raven::RavenConvergenceEstimator::InflateUncertainties(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  int32x4_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  int i;
  float64x2_t v30;
  unsigned int v31;
  unsigned int v32;
  double v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  const void **v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int v57;
  int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  int j;
  int v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  int32x4_t v73;
  __int128 v74;
  char v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int k;
  int v81;
  int v82;
  uint64_t v83;
  _DWORD *v84;
  _BYTE *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  int v91;
  _DWORD *v92;
  int v93;
  int v94;
  int m;
  int v96;
  uint64_t v97;
  _BYTE *v98;
  const char *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  _DWORD *v111;
  _DWORD v112[128];
  void *v113;
  __int128 v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE v117[265];
  void *v118;
  __int128 v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD v122[66];
  void *v123;
  __int128 v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD v127[64];
  void *v128;
  __int128 v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE v132[265];
  void *v133;
  int32x4_t v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE v137[64];
  unsigned __int8 v138[552];
  void *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  void *v144;
  __int128 v145;
  uint64_t v146;
  unsigned int *v147;
  _BYTE v148[512];
  _BYTE v149[24];
  uint64_t v150;
  _DWORD *v151;
  _DWORD v152[166];
  void *v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD v160[8];
  _BYTE v161[88];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = v2;
  if (v4 < 1.0 || (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v144) = 12;
    v138[0] = 4;
    *(_OWORD *)v149 = *(_OWORD *)(v2 + 80);
    v59 = cnprint::CNLogFormatter::FormatGeneral(v2 + 2488, (uint64_t)v149, "%s failed, invalid inflation factor, %.6lf.");
LABEL_55:
    if (*(char *)(v6 + 2511) >= 0)
      LOBYTE(v65) = v59;
    else
      v65 = *(_QWORD *)(v6 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v144, v138, "%s", v60, v61, v62, v63, v64, v65);
    return;
  }
  v7 = v3;
  v146 = 0x100000008;
  v144 = &unk_1E25C86F0;
  v145 = xmmword_18D319940;
  v147 = (unsigned int *)v148;
  v150 = 0x100000008;
  *(_QWORD *)v149 = &off_1E25C8720;
  *(_OWORD *)&v149[8] = xmmword_18D319940;
  v151 = v152;
  sub_18D1D5074(v3, (uint64_t)&v144, (uint64_t)v149);
  v8 = *v147;
  v146 = 0x100000008;
  v144 = &unk_1E25C86F0;
  v145 = xmmword_18D319940;
  v147 = (unsigned int *)v148;
  v150 = 0x100000008;
  *(_QWORD *)v149 = &off_1E25C8720;
  *(_OWORD *)&v149[8] = xmmword_18D319940;
  v151 = v152;
  sub_18D1D53BC(v7, (uint64_t)&v144, (uint64_t)v149);
  v9 = *v147;
  if (v8 > 7 || v9 < 0 || v9 >= 8)
  {
    LOWORD(v144) = 12;
    v138[0] = 4;
    *(_OWORD *)v149 = *(_OWORD *)(v6 + 80);
    v59 = cnprint::CNLogFormatter::FormatGeneral(v6 + 2488, (uint64_t)v149, "%s failed, invalid specified states, min state %d, max state %d.");
    goto LABEL_55;
  }
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(v6 + 80);
  v10 = *(_DWORD *)(v7 + 8);
  v141 = 0x100000008;
  v139 = &unk_1E25C86C0;
  v140 = xmmword_18D319940;
  v142 = &v143;
  v11 = v6 + 2648;
  v102 = v6 + 3408;
  v103 = v6;
  if (*(_DWORD *)(v6 + 4180))
    v12 = v6 + 3408;
  else
    v12 = v6 + 2648;
  sub_18D053AA8((uint64_t)&v139, v12);
  v101 = v6 + 2640;
  sub_18D04F338(v6 + 2640, (uint64_t)v138);
  v13 = v142;
  v14 = *(_DWORD *)(v7 + 8);
  v15 = *(_DWORD *)(v7 + 12);
  v16 = v15 * v14;
  v135 = 0x100000008;
  v133 = &unk_1E25C86C0;
  v134.i64[0] = __PAIR64__(v15, v14);
  v134.i64[1] = __PAIR64__(v14, v16);
  v17 = v137;
  v136 = v137;
  if ((_DWORD)v16)
  {
    v18 = *(int **)(v7 + 32);
    do
    {
      v19 = *v18++;
      *v17++ = v13[v19];
      --v16;
    }
    while (v16);
  }
  v20 = vdupq_lane_s32((int32x2_t)(v10 | 0x100000000), 0);
  v20.i32[1] = 1;
  v134 = v20;
  sub_18D1CE204((uint64_t)v138, v7, v7, (uint64_t)&v105);
  v115 = 0x800000008;
  v113 = &unk_1E25C87E0;
  v114 = xmmword_18D319930;
  v116 = v117;
  v149[0] = 0;
  sub_18D05C654((uint64_t)&v105, (uint64_t)&v113, v149);
  v120 = 0x800000008;
  v118 = &unk_1E25C87E0;
  v119 = xmmword_18D319930;
  v121 = v122;
  v146 = 0x100000008;
  v144 = &unk_1E25C86F0;
  v145 = xmmword_18D319940;
  v147 = (unsigned int *)v148;
  v150 = 0x100000020;
  *(_QWORD *)v149 = &unk_1E25C7670;
  *(_OWORD *)&v149[8] = xmmword_18D319960;
  v151 = v152;
  sub_18D04F504((uint64_t)&v113, (uint64_t)&v144, (uint64_t)v149, (uint64_t)&v118);
  v21 = DWORD1(v119);
  v22 = v119;
  v125 = 0x800000008;
  v123 = &unk_1E25C87E0;
  v126 = v127;
  *(_QWORD *)&v124 = __PAIR64__(v119, DWORD1(v119));
  DWORD2(v124) = v119 * DWORD1(v119);
  HIDWORD(v124) = DWORD1(v119);
  if (DWORD1(v119))
  {
    v23 = 0;
    v24 = 0;
    v25 = HIDWORD(v119);
    v26 = v121;
    do
    {
      v27 = v23;
      v28 = v24;
      for (i = v22; i; --i)
      {
        v127[v28] = *(_QWORD *)&v26[2 * v27];
        v28 += v21;
        ++v27;
      }
      ++v24;
      v23 += v25;
    }
    while (v24 != v21);
  }
  v130 = 0x100000008;
  v128 = &unk_1E25C86C0;
  v129 = xmmword_18D319940;
  v131 = v132;
  v150 = 0x800000008;
  *(_QWORD *)v149 = &unk_1E25C87E0;
  *(_OWORD *)&v149[8] = xmmword_18D319930;
  v151 = v152;
  v146 = 0x800000008;
  v144 = &unk_1E25C87E0;
  v145 = xmmword_18D319930;
  v147 = (unsigned int *)v148;
  sub_18D05C770((uint64_t)&v123, (uint64_t)&v128, (uint64_t)v149, (uint64_t)&v144);
  v130 = 0x800000008;
  v128 = &unk_1E25C87E0;
  v129 = xmmword_18D319930;
  v131 = v132;
  v30.f64[0] = 1.0 / v5;
  sub_18D1C94E0((uint64_t)&v144, (uint64_t)&v128, v30);
  LODWORD(v129) = v10;
  DWORD1(v129) = v10;
  DWORD2(v129) = v10 * v10;
  HIDWORD(v129) = v10;
  v31 = *(_DWORD *)(v7 + 8);
  v32 = *(_DWORD *)(v7 + 12);
  v125 = 0x100000008;
  v123 = &unk_1E25C86C0;
  v124 = xmmword_18D319940;
  v126 = v127;
  sub_18D053B2C((uint64_t)&v128, (uint64_t)&v133, (uint64_t)&v123);
  if (v31 <= v32)
    v34 = v32;
  else
    v34 = v31;
  if (v32)
    v35 = v31 == 0;
  else
    v35 = 1;
  if (v35)
    v36 = 0;
  else
    v36 = v34;
  if (!*(_DWORD *)(v6 + 4180))
  {
    sub_18D053AA8(v102, v11);
    sub_18D053AA8(v6 + 3512, v6 + 2752);
    *(_QWORD *)&v33 = sub_18D053AA8(v6 + 4064, v6 + 3304).n128_u64[0];
  }
  *(_DWORD *)(v6 + 4180) = 1;
  if (!*(_DWORD *)(v7 + 8) || !*(_DWORD *)(v7 + 12))
  {
    sub_18D053AA8(v11, v102);
    sub_18D053AA8(v6 + 2752, v6 + 3512);
    sub_18D053AA8(v6 + 3304, v6 + 4064);
    *(_DWORD *)(v6 + 4180) = 1;
    return;
  }
  *(_BYTE *)(v6 + 4176) = 0;
  v37 = *(_DWORD *)(v6 + 3416);
  v38 = *(_DWORD *)(v6 + 3420);
  if (v37 <= v38)
    v39 = *(_DWORD *)(v6 + 3420);
  else
    v39 = *(_DWORD *)(v6 + 3416);
  if (v38)
    v40 = v37 == 0;
  else
    v40 = 1;
  if (v40)
    v41 = 0;
  else
    v41 = v39;
  v104 = v36;
  if ((int)v36 >= 1)
  {
    v42 = 0;
    v43 = (const void **)(v103 + 4344);
    do
    {
      v44 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + v42);
      if (v44 < 0 || v44 >= (int)v41)
      {
        *(_WORD *)v149 = 2;
        LOBYTE(v144) = 4;
        cnprint::CNLogFormatter::FormatGeneral(v43, "ResetStates(): states must contain valid indices into x, Rxx, and zx.", v33);
        if (*(char *)(v103 + 4367) >= 0)
          LOBYTE(v50) = v103 - 8;
        else
          v50 = *v43;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v149, (unsigned __int8 *)&v144, "%s", v45, v46, v47, v48, v49, (char)v50);
      }
      v42 += 4;
    }
    while (4 * v104 != v42);
  }
  v150 = 0x800000001;
  *(_QWORD *)v149 = &unk_1E25C6E30;
  v151 = v152;
  v51 = v41 - 1;
  if ((_DWORD)v41 == 1)
  {
    v56 = 0;
    *(_QWORD *)&v66 = 0x100000001;
    *((_QWORD *)&v66 + 1) = 0x100000001;
    *(_OWORD *)&v149[8] = v66;
    v152[0] = 0;
    v57 = 1;
    v58 = 1;
    v52 = v103;
    v53 = v101;
    v54 = v104;
  }
  else
  {
    v52 = v103;
    v53 = v101;
    v54 = v104;
    if ((int)v41 <= 0)
    {
      v57 = 0;
      v58 = 0;
      *(_QWORD *)&v149[8] = 0;
      *(_QWORD *)&v149[16] = 0;
      v56 = 1;
    }
    else
    {
      v55 = 0;
      *(_DWORD *)&v149[8] = 1;
      *(_DWORD *)&v149[12] = v41;
      *(_DWORD *)&v149[16] = v41;
      *(_DWORD *)&v149[20] = 1;
      do
      {
        v152[v55] = v55;
        ++v55;
      }
      while (v41 != v55);
      v56 = 0;
      v57 = 1;
      v58 = v41;
    }
  }
  v120 = 0x100000008;
  v118 = &unk_1E25C86F0;
  v121 = v122;
  *(_QWORD *)&v119 = __PAIR64__(v57, v58);
  DWORD2(v119) = v58 * v57;
  HIDWORD(v119) = v58;
  if (v58)
  {
    v67 = 0;
    for (j = 0; j != v58; ++j)
    {
      if ((v56 & 1) == 0)
      {
        v69 = 0;
        do
        {
          v122[j + HIDWORD(v119) * v69] = v152[v67 + v69];
          ++v69;
        }
        while (v57 != v69);
      }
      v67 += v57;
    }
  }
  if ((int)v54 > 0)
  {
    v70 = *(int **)(v7 + 32);
    v71 = v54;
    do
    {
      v72 = *v70++;
      v122[v72] = -1;
      --v71;
    }
    while (v71);
  }
  v115 = 0x100000008;
  v116 = 0;
  v114 = 0uLL;
  v113 = &unk_1E25C86F0;
  if ((v41 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v73 = vdupq_lane_s32((int32x2_t)(v41 | 0x100000000), 0);
  v73.i32[1] = 1;
  *(_QWORD *)&v74 = 0x100000001;
  *((_QWORD *)&v74 + 1) = 0x100000001;
  v114 = (__int128)v73;
  v116 = v117;
  v150 = 0x800000001;
  *(_QWORD *)v149 = &unk_1E25C6E30;
  v151 = v152;
  if ((_DWORD)v54 == 1)
  {
    v75 = 0;
    *(_OWORD *)&v149[8] = v74;
    v152[0] = 0;
    v76 = 1;
    v77 = 1;
  }
  else if ((int)v54 <= 0)
  {
    v76 = 0;
    v77 = 0;
    *(_QWORD *)&v149[8] = 0;
    *(_QWORD *)&v149[16] = 0;
    v75 = 1;
  }
  else
  {
    v78 = 0;
    *(_DWORD *)&v149[8] = 1;
    *(_DWORD *)&v149[12] = v54;
    *(_DWORD *)&v149[16] = v54;
    *(_DWORD *)&v149[20] = 1;
    do
    {
      v152[v78] = v78;
      ++v78;
    }
    while (v54 != v78);
    v75 = 0;
    v76 = 1;
    v77 = v54;
  }
  v110 = 0x100000008;
  v105 = &unk_1E25C86F0;
  v111 = v112;
  v106 = v77;
  v107 = v76;
  v108 = v77 * v76;
  v109 = v77;
  if (v77)
  {
    v79 = 0;
    for (k = 0; k != v77; ++k)
    {
      if ((v75 & 1) == 0)
      {
        v81 = 0;
        do
        {
          v112[k + v109 * v81] = v152[v79 + v81];
          ++v81;
        }
        while (v76 != v81);
      }
      v79 += v76;
    }
  }
  sub_18D24EBB4((uint64_t)v149, (uint64_t)&v113, (uint64_t)&v105);
  sub_18D24E550((uint64_t)v149, *(_DWORD *)(v7 + 16), *(int **)(v7 + 32));
  v82 = v41 - v54;
  if ((int)v41 > (int)v54)
  {
    LODWORD(v83) = 0;
    v84 = v121;
    v85 = v116;
    v86 = (int)v54;
    do
    {
      v83 = (int)v83;
      do
        v87 = v84[v83++];
      while (v87 == -1);
      *(_DWORD *)&v85[4 * v86++] = v87;
    }
    while (v86 != v41);
  }
  sub_18D24E5D8(v53, v41, (uint64_t)&v113);
  sub_18D24F1B8((uint64_t)v161, (uint64_t)&v105);
  v150 = 0x800000001;
  *(_QWORD *)v149 = &unk_1E25C6E30;
  v151 = v152;
  if (v51 == (_DWORD)v54)
  {
    LOBYTE(v88) = 0;
    *(_QWORD *)&v89 = 0x100000001;
    *((_QWORD *)&v89 + 1) = 0x100000001;
    *(_OWORD *)&v149[8] = v89;
    v152[0] = v54;
    v90 = 1;
    v91 = 1;
  }
  else if (v51 - (int)v54 < 0)
  {
    v90 = 0;
    v91 = 0;
    *(_QWORD *)&v149[8] = 0;
    *(_QWORD *)&v149[16] = 0;
    LOBYTE(v88) = 1;
  }
  else
  {
    v91 = v41 - v54;
    *(_DWORD *)&v149[8] = 1;
    *(_DWORD *)&v149[12] = v41 - v54;
    *(_DWORD *)&v149[16] = v41 - v54;
    *(_DWORD *)&v149[20] = 1;
    v92 = v152;
    v88 = (v41 - v54);
    v93 = v54;
    do
    {
      *v92++ = v93++;
      --v88;
    }
    while (v88);
    v90 = 1;
  }
  v158 = 0x100000008;
  v153 = &unk_1E25C86F0;
  v159 = v160;
  v154 = v91;
  v155 = v90;
  v156 = v91 * v90;
  v157 = v91;
  if (v91)
  {
    v94 = 0;
    for (m = 0; m != v91; ++m)
    {
      if ((v88 & 1) == 0)
      {
        v96 = 0;
        do
        {
          v160[m + v157 * v96] = v152[v94 + v96];
          ++v96;
        }
        while (v90 != v96);
      }
      v94 += v90;
    }
  }
  sub_18D053E04((uint64_t)v149, v102, (uint64_t)&v105);
  sub_18D05495C((uint64_t)v149, (uint64_t)&v133);
  sub_18D053C48((uint64_t)v149, v52 + 3512, (uint64_t)v161, (uint64_t)v161);
  sub_18D053EBC((uint64_t)v149, (uint64_t)&v128);
  if ((v54 & 0x80000000) != 0)
  {
    v99 = "nr >= 0";
    v100 = 3098;
    goto LABEL_112;
  }
  if (v82 < 0)
  {
    v99 = "nc >= 0";
    v100 = 3099;
LABEL_112:
    __assert_rtn("Zeros", "cnmatrix.h", v100, v99);
  }
  v146 = 0x800000008;
  v144 = &unk_1E25C87E0;
  v147 = (unsigned int *)v148;
  LODWORD(v145) = v54;
  DWORD1(v145) = v41 - v54;
  DWORD2(v145) = v82 * v54;
  HIDWORD(v145) = v54;
  sub_18D04BE88((uint64_t)&v144, 0.0);
  sub_18D053C48((uint64_t)v149, v52 + 3512, (uint64_t)v161, (uint64_t)&v153);
  sub_18D053EBC((uint64_t)v149, (uint64_t)&v144);
  sub_18D053E04((uint64_t)v149, v52 + 4064, (uint64_t)&v105);
  sub_18D05495C((uint64_t)v149, (uint64_t)&v123);
  v150 = 0x100000008;
  *(_QWORD *)v149 = &unk_1E25C86F0;
  *(_DWORD *)&v149[8] = v41;
  *(_DWORD *)&v149[12] = 1;
  *(_DWORD *)&v149[16] = v41;
  *(_DWORD *)&v149[20] = v41;
  v151 = v152;
  if ((int)v41 >= 1)
  {
    v97 = 0;
    v98 = v116;
    do
    {
      v152[*(int *)&v98[4 * v97]] = v97;
      ++v97;
    }
    while (v41 != v97);
  }
  sub_18D24E5D8(v53, v41, (uint64_t)v149);
}

uint64_t sub_18D249DEC(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x800000008;
  *(_QWORD *)a1 = &unk_1E25C87E0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D073454(a2, a1);
}

void sub_18D249E44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void raven::RavenConvergenceEstimator::InflatePositionUncertainty(raven::RavenConvergenceEstimator *this)
{
  raven::RavenConvergenceEstimator::InflatePositionUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1440));
}

void raven::RavenConvergenceEstimator::InflateVelocityUncertainty(raven::RavenConvergenceEstimator *this, double a2)
{
  unsigned __int8 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *__p[2];
  char v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v3 = atomic_load((unsigned __int8 *)&qword_1ECF24048);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24048))
  {
    v15 = 0x300000001;
    *(_QWORD *)v14 = &unk_1E25C6C50;
    v16 = &v17;
    *(_OWORD *)&v14[8] = xmmword_18D314670;
    v17 = 0x400000003;
    v18 = 5;
    sub_18D16169C((uint64_t)v14, (uint64_t)&unk_1ECF240D8);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF240D8, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24048);
  }
  sub_18D24F2E4((uint64_t)v14, (uint64_t)&unk_1ECF240D8);
  sub_18D0778AC(__p, "InflateVelocityUncertainty");
  raven::RavenConvergenceEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14);
  if (v13 < 0)
    operator delete(__p[0]);
  LOWORD(__p[0]) = 12;
  v11 = 2;
  *(_OWORD *)v14 = *((_OWORD *)this + 5);
  v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of velocity states.");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v10) = v4;
  else
    v10 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v11, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18D249FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1ECF24048);
  _Unwind_Resume(a1);
}

void raven::RavenConvergenceEstimator::InflateVelocityUncertainty(raven::RavenConvergenceEstimator *this)
{
  raven::RavenConvergenceEstimator::InflateVelocityUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1448));
}

void raven::RavenConvergenceEstimator::InflateXOUncertainty(raven::RavenConvergenceEstimator *this, double a2)
{
  unsigned __int8 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *__p[2];
  char v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v3 = atomic_load((unsigned __int8 *)&qword_1ECF24050);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24050))
  {
    v15 = 0x200000001;
    *(_QWORD *)v14 = &unk_1E25C6BF0;
    v16 = &v17;
    *(_OWORD *)&v14[8] = xmmword_18D319920;
    v17 = 0x700000006;
    sub_18D1B82C8((uint64_t)v14, (uint64_t)&unk_1ECF24070);
    __cxa_atexit((void (*)(void *))sub_18D1B8348, &unk_1ECF24070, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24050);
  }
  sub_18D24F2E4((uint64_t)v14, (uint64_t)&unk_1ECF24070);
  sub_18D0778AC(__p, "InflateXOUncertainty");
  raven::RavenConvergenceEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14);
  if (v13 < 0)
    operator delete(__p[0]);
  LOWORD(__p[0]) = 12;
  v11 = 2;
  *(_OWORD *)v14 = *((_OWORD *)this + 5);
  v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of xo states.");
  if (*((char *)this + 2511) >= 0)
    LOBYTE(v10) = v4;
  else
    v10 = *((_QWORD *)this + 311);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v11, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18D24A170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_guard_abort(&qword_1ECF24050);
  _Unwind_Resume(a1);
}

void raven::RavenConvergenceEstimator::InflateXOUncertainty(raven::RavenConvergenceEstimator *this)
{
  raven::RavenConvergenceEstimator::InflateXOUncertainty(this, *(double *)(*((_QWORD *)this + 146) + 1456));
}

uint64_t raven::RavenConvergenceEstimator::Initialize(uint64_t a1, __n128 *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _WORD v24[276];
  void *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  if (!*(_BYTE *)(a1 + 57))
    return 0xFFFFFFFFLL;
  if (*(_BYTE *)(a1 + 58))
  {
    v24[0] = 12;
    LOBYTE(v25) = 4;
    v4 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a1 + 80, "Attempting to initialize an already initialized estimator");
    if (*(char *)(a1 + 2511) >= 0)
      LOBYTE(v10) = v4;
    else
      v10 = *(_QWORD *)(a1 + 2488);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v24, (unsigned __int8 *)&v25, "%s", v5, v6, v7, v8, v9, v10);
  }
  *(__n128 *)(a1 + 64) = *a2;
  *(__n128 *)(a1 + 80) = *a2;
  *(__n128 *)(a1 + 96) = *a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_18D04AE0C(a1 + 8336);
  sub_18D05DB3C(a1 + 8336, a2, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 980) = 0;
  *(_OWORD *)(a1 + 948) = 0u;
  *(_OWORD *)(a1 + 964) = 0u;
  *(_OWORD *)(a1 + 916) = 0u;
  *(_OWORD *)(a1 + 932) = 0u;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 900) = 0u;
  *(_OWORD *)(a1 + 852) = 0u;
  *(_OWORD *)(a1 + 868) = 0u;
  *(_OWORD *)(a1 + 820) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  *(_OWORD *)(a1 + 788) = 0u;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)(a1 + 756) = 0u;
  *(_OWORD *)(a1 + 772) = 0u;
  *(_OWORD *)(a1 + 724) = 0u;
  *(_OWORD *)(a1 + 740) = 0u;
  *(_QWORD *)(a1 + 320) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_OWORD *)(a1 + 1020) = 0u;
  *(_OWORD *)(a1 + 1036) = 0u;
  *(_OWORD *)(a1 + 1052) = 0u;
  *(_OWORD *)(a1 + 1068) = 0u;
  *(_OWORD *)(a1 + 1084) = 0u;
  *(_OWORD *)(a1 + 1100) = 0u;
  *(_DWORD *)(a1 + 1116) = 0;
  v27 = 0x100000008;
  v25 = &unk_1E25C86C0;
  v28 = &v29;
  v26 = xmmword_18D319940;
  sub_18D04BE88((uint64_t)&v25, 0.0);
  v17 = v28;
  *v28 = a2[1].n128_i64[0];
  v17[1] = a2[1].n128_i64[1];
  v17[2] = a2[2].n128_i64[0];
  v17[3] = a2[2].n128_i64[1];
  v17[4] = a2[3].n128_i64[0];
  v17[5] = a2[3].n128_i64[1];
  v17[6] = a2[4].n128_i64[0];
  v17[7] = a2[4].n128_i64[1];
  sub_18D0549D0((uint64_t)v24, (uint64_t)&a2[5]);
  v21 = 0x100000008;
  v19 = (uint64_t)&unk_1E25C86C0;
  v20 = xmmword_18D319940;
  v22 = &v23;
  sub_18D053B2C((uint64_t)v24, (uint64_t)&v25, (uint64_t)&v19);
  sub_18D23D160(a1 + 2640, (uint64_t)&v25, (uint64_t)v24, (uint64_t)&v19);
  v19 = 0x3FE0000000000000;
  result = sub_18D04AD78(a1 + 8272, (double *)&v19);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 58) = 1;
  return result;
}

uint64_t sub_18D24A414(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  char *v19;
  void **v20;
  double v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  double v31;
  int v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  uint64_t *v37;
  int v38;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  char v43;
  uint64_t (**v44)();
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE v73[41];
  void *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 6;
  if (!v13
    || ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 6) : (v18 = 0),
        !v18))
  {
    LOWORD(v74) = 12;
    LOBYTE(v49) = 4;
    v19 = "in_SixStateNearlyConstantVelocity called with inadequate matrices.";
    v20 = &v49;
LABEL_41:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, (unsigned __int8 *)v20, v19, a4, a5, a6, a7, a8, v43);
    return 0xFFFFFFFFLL;
  }
  v26 = *a3;
  v61 = 0x100000006;
  v59 = &unk_1E25C8120;
  v62 = &v63;
  v60 = xmmword_18D319950;
  sub_18D04BE88((uint64_t)&v59, 0.0);
  v56 = 0x100000008;
  v54 = &unk_1E25C86C0;
  v55 = xmmword_18D319950;
  v57 = &v58;
  v51 = 0x800000008;
  v49 = &unk_1E25C87E0;
  v50 = xmmword_18D314680;
  v52 = &v53;
  v46 = 0x600000008;
  v44 = &off_1E25C8780;
  v47 = &v48;
  v28 = *(_DWORD *)(a1 + 8);
  v27 = *(_DWORD *)(a1 + 12);
  if (v28 <= v27)
    v29 = *(_DWORD *)(a1 + 12);
  else
    v29 = *(_DWORD *)(a1 + 8);
  v45 = xmmword_18D314680;
  if (!v28
    || !v27
    || v29 != 6
    || (v60 <= DWORD1(v60) ? (v30 = DWORD1(v60)) : (v30 = v60), !(_DWORD)v60 || !DWORD1(v60) || v30 != 6))
  {
    LOWORD(v74) = 12;
    LOBYTE(v69) = 4;
    v19 = "f_SixStateNearlyConstantVelocity called with inadequate matrices.";
    v20 = &v69;
    goto LABEL_41;
  }
  v31 = v26 * a9;
  v71 = 0x600000006;
  v69 = &unk_1E25C81B0;
  v72 = v73;
  v70 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v69, 0.0);
  v32 = 0;
  v33 = HIDWORD(v70) + 1;
  v34 = 6;
  v35 = v72;
  do
  {
    *(_QWORD *)&v35[8 * v32] = 0x3FF0000000000000;
    v32 += v33;
    --v34;
  }
  while (v34);
  sub_18D055148((uint64_t)&v74, (uint64_t)&v69);
  v36 = HIDWORD(v75);
  v37 = v77;
  *(double *)&v77[3 * HIDWORD(v75)] = v31;
  *(double *)&v37[(4 * v36) | 1] = v31;
  *(double *)&v37[5 * v36 + 2] = v31;
  v66 = 0x100000008;
  v64 = &unk_1E25C86C0;
  v65 = xmmword_18D319940;
  v67 = &v68;
  sub_18D053B2C((uint64_t)&v74, a1, (uint64_t)&v64);
  v71 = 0x100000008;
  v69 = &unk_1E25C86C0;
  v70 = xmmword_18D319940;
  v72 = v73;
  sub_18D053FA4((uint64_t)&v64, (uint64_t)&v59, (uint64_t)&v69);
  sub_18D053AA8((uint64_t)&v54, (uint64_t)&v69);
  sub_18D053AA8((uint64_t)&v49, (uint64_t)&v74);
  v71 = 0x600000006;
  v69 = &unk_1E25C81B0;
  v72 = v73;
  v70 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v69, 0.0);
  v38 = 0;
  v39 = HIDWORD(v70) + 1;
  v40 = 6;
  v41 = v72;
  do
  {
    *(_QWORD *)&v41[8 * v38] = 0x3FF0000000000000;
    v38 += v39;
    --v40;
  }
  while (v40);
  sub_18D053AA8((uint64_t)&v44, (uint64_t)&v69);
  sub_18D053AA8(a4, (uint64_t)&v54);
  sub_18D053AA8(a5, (uint64_t)&v49);
  v76 = 0x600000006;
  v74 = &unk_1E25C81B0;
  v77 = &v78;
  v75 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v74, 0.0);
  sub_18D053AA8(a6, (uint64_t)&v74);
  return 0;
}

uint64_t sub_18D24A7E4(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  char *v19;
  void **v20;
  double v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  char v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  _QWORD *v65;
  _BYTE v66[64];
  void *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 2;
  if (v13
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 2) : (v18 = 0),
        v18))
  {
    v26 = *a3;
    v54 = 0x100000002;
    v52 = &unk_1E25C7520;
    v55 = &v56;
    v53 = xmmword_18D319330;
    sub_18D04BE88((uint64_t)&v52, 0.0);
    v49 = 0x100000008;
    v47 = &unk_1E25C86C0;
    v48 = xmmword_18D319330;
    v50 = &v51;
    v44 = 0x800000008;
    v42 = &unk_1E25C87E0;
    v43 = xmmword_18D319340;
    v45 = &v46;
    v39 = 0x200000008;
    v37 = &off_1E25C8750;
    v40 = &v41;
    v28 = *(_DWORD *)(a1 + 8);
    v27 = *(_DWORD *)(a1 + 12);
    if (v28 <= v27)
      v29 = *(_DWORD *)(a1 + 12);
    else
      v29 = *(_DWORD *)(a1 + 8);
    v38 = xmmword_18D319340;
    if (v28 && v27 && v29 == 2)
    {
      v30 = v53 <= DWORD1(v53) ? DWORD1(v53) : v53;
      if ((_DWORD)v53 && DWORD1(v53) && v30 == 2)
      {
        v64 = 0x200000002;
        v62 = &unk_1E25C75B0;
        v65 = v66;
        v63 = xmmword_18D319340;
        sub_18D04BE88((uint64_t)&v62, 0.0);
        v31 = HIDWORD(v63) + 1;
        v32 = v65;
        *v65 = 0x3FF0000000000000;
        v32[v31] = 0x3FF0000000000000;
        sub_18D055148((uint64_t)&v67, (uint64_t)&v62);
        *(double *)&v70[SHIDWORD(v68)] = v26 * a9;
        v59 = 0x100000008;
        v57 = &unk_1E25C86C0;
        v58 = xmmword_18D319940;
        v60 = &v61;
        sub_18D053B2C((uint64_t)&v67, a1, (uint64_t)&v57);
        v64 = 0x100000008;
        v62 = &unk_1E25C86C0;
        v63 = xmmword_18D319940;
        v65 = v66;
        sub_18D053FA4((uint64_t)&v57, (uint64_t)&v52, (uint64_t)&v62);
        sub_18D053AA8((uint64_t)&v47, (uint64_t)&v62);
        sub_18D053AA8((uint64_t)&v42, (uint64_t)&v67);
        v64 = 0x200000002;
        v62 = &unk_1E25C75B0;
        v65 = v66;
        v63 = xmmword_18D319340;
        sub_18D04BE88((uint64_t)&v62, 0.0);
        v33 = HIDWORD(v63) + 1;
        v34 = v65;
        *v65 = 0x3FF0000000000000;
        v34[v33] = 0x3FF0000000000000;
        sub_18D053AA8((uint64_t)&v37, (uint64_t)&v62);
        sub_18D053AA8(a4, (uint64_t)&v47);
        sub_18D053AA8(a5, (uint64_t)&v42);
        v69 = 0x200000002;
        v67 = &unk_1E25C75B0;
        v70 = &v71;
        v68 = xmmword_18D319340;
        sub_18D04BE88((uint64_t)&v67, 0.0);
        sub_18D053AA8(a6, (uint64_t)&v67);
        return 0;
      }
    }
    LOWORD(v67) = 12;
    LOBYTE(v62) = 4;
    v19 = "f_TwoStateOscillator called with inadequate matrices.";
    v20 = &v62;
  }
  else
  {
    LOWORD(v67) = 12;
    LOBYTE(v42) = 4;
    v19 = "in_TwoStateOscillator called with inadequate matrices.";
    v20 = &v42;
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)v20, v19, a4, a5, a6, a7, a8, v36);
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D24AB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD v73[5];
  uint64_t v74;
  void *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  int32x4_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  void *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  void *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  void *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;

  v108 = 0x100000008;
  v106 = &unk_1E25C86C0;
  v107 = xmmword_18D319940;
  v109 = &v110;
  v103 = 0x800000008;
  v101 = &unk_1E25C87E0;
  v102 = xmmword_18D319930;
  v104 = &v105;
  v98 = 0x100000008;
  v96 = &unk_1E25C86C0;
  v97 = xmmword_18D319940;
  v99 = &v100;
  if (*(_DWORD *)(a1 + 1540))
  {
    sub_18D053AA8((uint64_t)&v106, a1 + 768);
    sub_18D053AA8((uint64_t)&v101, a1 + 872);
    v21 = a1 + 1424;
  }
  else
  {
    sub_18D053AA8((uint64_t)&v106, a1 + 8);
    sub_18D053AA8((uint64_t)&v101, a1 + 112);
    v21 = a1 + 664;
  }
  sub_18D053AA8((uint64_t)&v96, v21);
  if (v107 <= DWORD1(v107))
    v22 = DWORD1(v107);
  else
    v22 = v107;
  if (DWORD1(v107))
    v23 = (_DWORD)v107 == 0;
  else
    v23 = 1;
  if (v23)
    v24 = 0;
  else
    v24 = v22;
  v25 = *(_DWORD *)(a2 + 8);
  if ((v25 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v63 = v24;
  v64 = a8;
  v93 = 0x100000008;
  v88 = &unk_1E25C86C0;
  v94 = &v95;
  v89 = v25;
  v90 = 1;
  v91 = v25;
  v62 = v25;
  v92 = v25;
  sub_18D04BE88((uint64_t)&v88, 0.0);
  v26 = *(_DWORD *)(a9 + 8);
  v27 = *(_DWORD *)(a9 + 12);
  if (v26 <= v27)
    v28 = *(_DWORD *)(a9 + 12);
  else
    v28 = *(_DWORD *)(a9 + 8);
  if (v27)
    v29 = v26 == 0;
  else
    v29 = 1;
  if (v29)
    v30 = 0;
  else
    v30 = v28;
  v85 = 0x100000057;
  v83 = &unk_1E25C83F0;
  if ((v30 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v59 = a3;
  v60 = a1;
  v61 = a2;
  v31 = vdupq_lane_s32((int32x2_t)(v30 | 0x100000000), 0);
  v31.i32[1] = 1;
  v84 = v31;
  v86 = &v87;
  if (v30)
  {
    v32 = 0;
    v33 = 0;
    do
    {
      sub_18D04DA0C((uint64_t)&v75, *(_QWORD *)(a4 + 32) + v33);
      if (v76 <= v77)
        v34 = v77;
      else
        v34 = v76;
      if (v77)
        v35 = v76 == 0;
      else
        v35 = 1;
      if (v35)
        v36 = 0;
      else
        v36 = v34;
      *(_DWORD *)((char *)v86 + v32) = v36;
      v33 += 64;
      v32 += 4;
    }
    while ((unint64_t)v30 << 6 != v33);
  }
  v80 = 0x100000057;
  v75 = &unk_1E25C83F0;
  v76 = v30;
  v77 = 1;
  v78 = v30;
  v79 = v30;
  v81 = &v82;
  sub_18D1DF480((uint64_t)v73, v30, 1);
  if ((int)v30 >= 1)
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    do
    {
      sub_18D159B20((uint64_t)&v65, *(_QWORD *)(a5 + 32) + v39);
      v40 = v81;
      *(_DWORD *)((char *)v81 + v37) = v66;
      v41 = *(_DWORD *)((char *)v40 + v37);
      if (v41 < 0)
        __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
      v70 = 0x100000003;
      v65 = &unk_1E25C7790;
      v71 = &v72;
      v66 = v41;
      v67 = 1;
      v68 = v41;
      v69 = v41;
      sub_18D04BE88((uint64_t)&v65, 0.0);
      sub_18D053AA8(v73[4] + v38, (uint64_t)&v65);
      v39 += 112;
      v38 += 64;
      v37 += 4;
    }
    while (112 * v30 != v39);
  }
  v42 = *(_DWORD *)(a7 + 8);
  v43 = *(_DWORD *)(a7 + 12);
  if (v42 <= v43)
    v44 = *(_DWORD *)(a7 + 12);
  else
    v44 = *(_DWORD *)(a7 + 8);
  if (v43)
    v45 = v42 == 0;
  else
    v45 = 1;
  if (v45)
    v46 = 0;
  else
    v46 = v44;
  v47 = *(_DWORD *)(a12 + 8);
  v48 = *(_DWORD *)(a12 + 12);
  if (v47 <= v48)
    v49 = *(_DWORD *)(a12 + 12);
  else
    v49 = *(_DWORD *)(a12 + 8);
  if (v48)
    v50 = v47 == 0;
  else
    v50 = 1;
  if (v50)
    v51 = 0;
  else
    v51 = v49;
  v52 = sub_18D24F974(v60, v63, (uint64_t)&v106, (uint64_t)&v101, (uint64_t)&v96, v62, (uint64_t)&v88, v61, (uint64_t)&v83, v59, a4, (uint64_t)&v75, (uint64_t)v73, a5, v46, a6, a7, v64, v30,
          a9,
          a10,
          v51,
          a11,
          a12,
          a13,
          v60 + 2960);
  v53 = v74;
  v73[0] = &unk_1E25C82A0;
  v74 = 0;
  if (v53)
  {
    v54 = v53 - 16;
    v55 = *(_QWORD *)(v53 - 8);
    if (v55)
    {
      v56 = v55 << 6;
      v57 = v53 - 64;
      do
      {
        *(_QWORD *)(v57 + v56) = &unk_1E25C5E70;
        v56 -= 64;
      }
      while (v56);
    }
    MEMORY[0x18D78B5BC](v54, 0x1081C8052DD7B27);
  }
  return v52;
}

void sub_18D24AFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v56;
  uint64_t v57;

  if (a55)
  {
    v56 = *(_QWORD *)(a55 - 8);
    if (v56)
    {
      v57 = v56 << 6;
      do
      {
        *(_QWORD *)(a55 - 64 + v57) = &unk_1E25C5E70;
        v57 -= 64;
      }
      while (v57);
    }
    MEMORY[0x18D78B5BC](a55 - 16, 0x1081C8052DD7B27);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D24B064(_QWORD *result)
{
  *result = off_1E25C5D80;
  return result;
}

void sub_18D24B078(uint64_t *a1)
{
  sub_18D20AB14(a1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D24B09C(_QWORD *result)
{
  *result = &unk_1E25C5D20;
  return result;
}

_QWORD *sub_18D24B0B0(_QWORD *result)
{
  *result = &unk_1E25C5D20;
  return result;
}

void sub_18D24B0C4(_QWORD *a1)
{
  *a1 = &unk_1E25C5D20;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24B0E8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24B0F4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[87];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D24B1EC(_QWORD *a1)
{
  *a1 = &unk_1E25C5D20;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24B210(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24B21C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[174];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D24B31C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24B36C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*((char *)a2 + 23) < 0)
  {
    sub_18D077798((_BYTE *)(a1 + 56), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v4;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  v8 = a2[7];
  v9 = a2[8];
  v10 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  v11 = a2[11];
  v12 = a2[12];
  v13 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  v14 = (_BYTE *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18D077798(v14, *((void **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v15 = *(__int128 *)((char *)a2 + 248);
    *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 33);
    *(_OWORD *)v14 = v15;
  }
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 34);
  v16 = *(__int128 *)((char *)a2 + 280);
  v17 = *(__int128 *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(__int128 *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v17;
  *(_OWORD *)(a1 + 336) = v16;
  v18 = *(__int128 *)((char *)a2 + 328);
  v19 = *(__int128 *)((char *)a2 + 344);
  v20 = *(__int128 *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(__int128 *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 384) = v18;
  *(_OWORD *)(a1 + 400) = v19;
  v21 = *(__int128 *)((char *)a2 + 392);
  v22 = *(__int128 *)((char *)a2 + 408);
  v23 = *(__int128 *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(__int128 *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v23;
  *(_OWORD *)(a1 + 448) = v21;
  *(_OWORD *)(a1 + 464) = v22;
  sub_18D1C7988((_QWORD *)a1, 18);
  *(_QWORD *)a1 = &unk_1E25C3BC0;
  *(_OWORD *)(a1 + 512) = 0u;
  return a1;
}

void sub_18D24B4CC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 296) = off_1E25B93B0;
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18D24B508(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25C3BC0;
  sub_18D07C868(a1 + 512);
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24B5B0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*((char *)a2 + 23) < 0)
  {
    sub_18D077798((_BYTE *)(a1 + 56), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v4;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  v8 = a2[7];
  v9 = a2[8];
  v10 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  v11 = a2[11];
  v12 = a2[12];
  v13 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  v14 = (_BYTE *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18D077798(v14, *((void **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v15 = *(__int128 *)((char *)a2 + 248);
    *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 33);
    *(_OWORD *)v14 = v15;
  }
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 34);
  v16 = *(__int128 *)((char *)a2 + 280);
  v17 = *(__int128 *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(__int128 *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v17;
  *(_OWORD *)(a1 + 336) = v16;
  v18 = *(__int128 *)((char *)a2 + 328);
  v19 = *(__int128 *)((char *)a2 + 344);
  v20 = *(__int128 *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(__int128 *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 384) = v18;
  *(_OWORD *)(a1 + 400) = v19;
  v21 = *(__int128 *)((char *)a2 + 392);
  v22 = *(__int128 *)((char *)a2 + 408);
  v23 = *(__int128 *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(__int128 *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v23;
  *(_OWORD *)(a1 + 448) = v21;
  *(_OWORD *)(a1 + 464) = v22;
  sub_18D1C7988((_QWORD *)a1, 17);
  *(_QWORD *)a1 = &unk_1E25C4180;
  return a1;
}

void sub_18D24B708(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 296) = off_1E25B93B0;
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18D24B744(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24B7D4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*((char *)a2 + 23) < 0)
  {
    sub_18D077798((_BYTE *)(a1 + 56), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v4;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  v8 = a2[7];
  v9 = a2[8];
  v10 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  v11 = a2[11];
  v12 = a2[12];
  v13 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  v14 = (_BYTE *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18D077798(v14, *((void **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v15 = *(__int128 *)((char *)a2 + 248);
    *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 33);
    *(_OWORD *)v14 = v15;
  }
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 34);
  v16 = *(__int128 *)((char *)a2 + 280);
  v17 = *(__int128 *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(__int128 *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v17;
  *(_OWORD *)(a1 + 336) = v16;
  v18 = *(__int128 *)((char *)a2 + 328);
  v19 = *(__int128 *)((char *)a2 + 344);
  v20 = *(__int128 *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(__int128 *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 384) = v18;
  *(_OWORD *)(a1 + 400) = v19;
  v21 = *(__int128 *)((char *)a2 + 392);
  v22 = *(__int128 *)((char *)a2 + 408);
  v23 = *(__int128 *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(__int128 *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v23;
  *(_OWORD *)(a1 + 448) = v21;
  *(_OWORD *)(a1 + 464) = v22;
  sub_18D1C7988((_QWORD *)a1, 16);
  *(_QWORD *)a1 = &unk_1E25C4920;
  return a1;
}

void sub_18D24B92C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 296) = off_1E25B93B0;
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18D24B968(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 296) = &unk_1E25B9850;
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  *(_QWORD *)(a1 + 296) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D24B9F8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D24BA0C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24BA30(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24BA3C(uint64_t a1)
{
  char v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

void sub_18D24BA88(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D24BAD8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D24BB28(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D24BB78(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D24BBC8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D24BC18(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D24BC68(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D24BCB8(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x38uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v4 + 40) = result;
  *(_QWORD *)v4 = off_1E25C3D38;
  *a1 = sub_18D24BD64;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D24BD50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24BD64(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24BD98()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

void sub_18D24BE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x600000003;
  *(_QWORD *)a1 = &off_1E25C7970;
  *(_OWORD *)(a1 + 8) = xmmword_18D331E30;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D24BE84(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D24BE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x600000003;
  *(_QWORD *)a1 = &off_1E25C7970;
  *(_OWORD *)(a1 + 8) = xmmword_18D331E30;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D24BEF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D24BF04(uint64_t a1)
{
  uint64_t result;
  int v3;
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0x600000003;
  *(_QWORD *)a1 = &off_1E25C7970;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D331E30;
  result = sub_18D04BE88(a1, 0.0);
  v3 = *(_DWORD *)(a1 + 20) + 1;
  v4 = *(_QWORD **)(a1 + 32);
  *v4 = 0x3FF0000000000000;
  v4[v3] = 0x3FF0000000000000;
  v4[2 * v3] = 0x3FF0000000000000;
  return result;
}

uint64_t sub_18D24BF74(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 24) = 0x600000006;
  *(_QWORD *)a1 = &unk_1E25C81B0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D314680;
  result = sub_18D04BE88(a1, 0.0);
  v3 = 0;
  v4 = *(_DWORD *)(a1 + 20) + 1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = 6;
  do
  {
    *(_QWORD *)(v5 + 8 * v3) = 0x3FF0000000000000;
    v3 += v4;
    --v6;
  }
  while (v6);
  return result;
}

_QWORD *sub_18D24BFEC(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D24C000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D24C05C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D24C070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x600000001;
  *(_QWORD *)a1 = &unk_1E25C6D40;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A00;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D24C0CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D24C0E0(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D24C0F4(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24C118(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24C124(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[18];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D24C218(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24C23C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24C248(uint64_t a1)
{
  char v1[6];

  sub_18D0894A0(a1, v1);
}

void sub_18D24C268(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D24C2B8(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x58uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)v4 = off_1E25C4680;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *a1 = sub_18D24C374;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D24C360(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24C374(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24C3A8()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

void sub_18D24C43C(uint64_t a1, uint64_t a2, double *a3)
{
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  *(_QWORD *)(a1 + 24) = 0x800000008;
  *(_QWORD *)a1 = &unk_1E25C87E0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319930;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v15 = 0x100000008;
  v13 = &unk_1E25C86F0;
  v14 = xmmword_18D319940;
  v16 = &v17;
  v10 = 0x100000008;
  v8 = &unk_1E25C86F0;
  v9 = xmmword_18D319940;
  v11 = &v12;
  v5 = 0x100000020;
  v3 = &unk_1E25C7670;
  v4 = xmmword_18D319960;
  v6 = &v7;
  *a3 = sub_18D054568(a2, (uint64_t)&v13, (uint64_t)&v8, (uint64_t)&v3, a1);
}

void sub_18D24C538(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_BYTE *sub_18D24C54C(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *result;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = (char *)operator new(0x210uLL);
  v5 = v4;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18D077798(v4 + 56, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v4 + 9) = *(_QWORD *)(a2 + 72);
  }
  *((_QWORD *)v5 + 10) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 280) = v6;
  *((_QWORD *)v5 + 37) = &unk_1E25B9850;
  v7 = v5 + 304;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18D077798(v7, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)(a2 + 304);
    *((_QWORD *)v5 + 40) = *(_QWORD *)(a2 + 320);
  }
  *((_QWORD *)v5 + 41) = *(_QWORD *)(a2 + 328);
  v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  *(_QWORD *)v5 = &unk_1E25B8EE0;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a2 + 8);
  result = v5 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    result = sub_18D077798(result, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v5 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)v5 = &unk_1E25C3BC0;
  *((_QWORD *)v5 + 64) = *(_QWORD *)(a2 + 512);
  v14 = *(_QWORD *)(a2 + 520);
  *((_QWORD *)v5 + 65) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *a1 = sub_18D24C770;
  a1[1] = (void (*)(int))v5;
  return result;
}

void sub_18D24C724(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_18D1A3798(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24C770(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24C7A4()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_18D24C838(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  __n128 result;

  v4 = (char *)operator new(0x200uLL);
  v5 = v4;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18D077798(v4 + 56, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v4 + 9) = *(_QWORD *)(a2 + 72);
  }
  *((_QWORD *)v5 + 10) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 280) = v6;
  *((_QWORD *)v5 + 37) = &unk_1E25B9850;
  v7 = v5 + 304;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18D077798(v7, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)(a2 + 304);
    *((_QWORD *)v5 + 40) = *(_QWORD *)(a2 + 320);
  }
  *((_QWORD *)v5 + 41) = *(_QWORD *)(a2 + 328);
  v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  *(_QWORD *)v5 = &unk_1E25B8EE0;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a2 + 8);
  v13 = v5 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v13, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v5 + 4) = *(_QWORD *)(a2 + 32);
  }
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v5 + 40) = result;
  *(_QWORD *)v5 = &unk_1E25C4180;
  *a1 = sub_18D24CA34;
  a1[1] = (void (*)(int))v5;
  return result;
}

void sub_18D24C9E8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_18D1A3798(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24CA34(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24CA68()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D24CAFC(_QWORD *a1, uint64_t a2, double *a3, float64x2_t *a4, uint64_t a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  __int128 *v14;
  double v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  cnprint::CNPrinter *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  cnprint::CNPrinter *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t result;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  void *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  unsigned __int8 v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  void *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  int *v103;
  __int128 v104;
  uint64_t v105;
  double v106;
  void *v107;
  __int128 v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  void *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  void *v117;
  __int128 v118;
  uint64_t v119;
  double *v120;
  uint64_t v121;
  void *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  void *v127;
  __int128 v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  double v132;
  __int128 v133;
  uint64_t v134;

  v10 = a1[1];
  v11 = CNTimeSpan::operator-(a2, (_QWORD *)(v10 + 88), a6, a7);
  v13 = v12;
  v14 = *(__int128 **)(*a1 + 32);
  v133 = *v14;
  v134 = *((_QWORD *)v14 + 2);
  v15 = *((double *)v14 + 6);
  *(_QWORD *)&v75 = 0x800000008;
  v73 = &unk_1E25C87E0;
  *((_QWORD *)&v75 + 1) = &v76;
  v74 = xmmword_18D319930;
  sub_18D04BE88((uint64_t)&v73, 0.0);
  v16 = 0;
  v17 = HIDWORD(v74) + 1;
  v18 = 8;
  v19 = *((_QWORD *)&v75 + 1);
  do
  {
    *(_QWORD *)(v19 + 8 * v16) = 0x3FF0000000000000;
    v16 += v17;
    --v18;
  }
  while (v18);
  v20 = sub_18D053AA8(a5, (uint64_t)&v73);
  v21.i64[0] = 0x3F50624DD2F1A9FCLL;
  if (fabs(v13 + (double)v11) > 0.001)
  {
    v132 = v13 + (double)v11;
    *(_QWORD *)&v76 = 0x700000006;
    v129 = 0x100000008;
    v127 = &unk_1E25C86F0;
    v128 = xmmword_18D319330;
    v130 = &v131;
    v131 = 0x700000006;
    v124 = 0x100000008;
    v122 = &unk_1E25C86C0;
    v125 = &v126;
    v123 = xmmword_18D319330;
    sub_18D04BE88((uint64_t)&v122, 0.0);
    v119 = 0x100000008;
    v117 = &unk_1E25C86C0;
    v118 = xmmword_18D319940;
    v120 = (double *)&v121;
    v114 = 0x800000008;
    v112 = &unk_1E25C87E0;
    v113 = xmmword_18D319930;
    v115 = &v116;
    v109 = 0x800000008;
    v107 = &unk_1E25C87E0;
    v108 = xmmword_18D319930;
    v110 = &v111;
    v24 = *a1;
    v25 = (DWORD1(v128) * v128);
    *(_QWORD *)&v75 = 0x100000008;
    v73 = &unk_1E25C86C0;
    *(_QWORD *)&v74 = v128;
    *((_QWORD *)&v74 + 1) = __PAIR64__(v128, v25);
    v26 = &v76;
    *((_QWORD *)&v75 + 1) = &v76;
    if ((_DWORD)v25)
    {
      v27 = v130;
      v28 = *(_QWORD *)(v24 + 32);
      do
      {
        v29 = *(int *)v27;
        v27 = (uint64_t *)((char *)v27 + 4);
        *(_QWORD *)v26 = *(_QWORD *)(v28 + 8 * v29);
        v26 = (__int128 *)((char *)v26 + 8);
        --v25;
      }
      while (v25);
    }
    v30 = (cnprint::CNPrinter *)sub_18D055218((uint64_t)&v73, (uint64_t)&v122, (uint64_t *)&v132, (uint64_t)&v117, (uint64_t)&v112, (uint64_t)&v107, v22, v23);
    if ((_DWORD)v30)
    {
      if (cnprint::CNPrinter::GetLogLevel(v30) <= 1)
      {
        LOWORD(v73) = 12;
        LOBYTE(v85) = 1;
        v32 = *(_QWORD *)(v10 + 88);
        v31 = *(double *)(v10 + 96);
        sub_18D181C54(a1[1] + 56);
        v70 = v31 + (double)v32;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, (unsigned __int8 *)&v85, "t,%.3lf,%s,f_TwoStateOscillator failed", v33, v34, v35, v36, v37, SLOBYTE(v70));
      }
      return 0xFFFFFFFFLL;
    }
    v38 = 0;
    v106 = v13 + (double)v11;
    do
    {
      *((_DWORD *)&v76 + v38) = v38;
      ++v38;
    }
    while (v38 != 6);
    v102 = 0x100000008;
    v100 = &unk_1E25C86F0;
    v101 = xmmword_18D319950;
    v104 = v76;
    v103 = (int *)&v104;
    v105 = v77;
    v97 = 0x100000008;
    v95 = &unk_1E25C86C0;
    v98 = &v99;
    v96 = xmmword_18D319950;
    sub_18D04BE88((uint64_t)&v95, 0.0);
    v92 = 0x100000008;
    v90 = &unk_1E25C86C0;
    v91 = xmmword_18D319940;
    v93 = &v94;
    v87 = 0x800000008;
    v85 = &unk_1E25C87E0;
    v86 = xmmword_18D319930;
    v88 = &v89;
    v82 = 0x800000008;
    v80 = &unk_1E25C87E0;
    v81 = xmmword_18D319930;
    v83 = &v84;
    v41 = *a1;
    v42 = (DWORD1(v101) * v101);
    *(_QWORD *)&v75 = 0x100000008;
    v73 = &unk_1E25C86C0;
    *(_QWORD *)&v74 = v101;
    *((_QWORD *)&v74 + 1) = __PAIR64__(v101, v42);
    v43 = &v76;
    *((_QWORD *)&v75 + 1) = &v76;
    if ((_DWORD)v42)
    {
      v44 = v103;
      v45 = *(_QWORD *)(v41 + 32);
      do
      {
        v46 = *v44++;
        *(_QWORD *)v43 = *(_QWORD *)(v45 + 8 * v46);
        v43 = (__int128 *)((char *)v43 + 8);
        --v42;
      }
      while (v42);
    }
    v47 = (cnprint::CNPrinter *)sub_18D054EFC((uint64_t)&v73, (uint64_t)&v95, (uint64_t *)&v106, (uint64_t)&v90, (uint64_t)&v85, (uint64_t)&v80, v39, v40);
    if ((_DWORD)v47)
    {
      if (cnprint::CNPrinter::GetLogLevel(v47) <= 1)
      {
        LOWORD(v73) = 12;
        v79 = 1;
        v49 = *(_QWORD *)(v10 + 88);
        v48 = *(double *)(v10 + 96);
        sub_18D181C54(a1[1] + 56);
        v71 = v48 + (double)v49;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, &v79, "t,%.3lf,%s,f_SixStateNearlyConstantVelocity failed", v50, v51, v52, v53, v54, SLOBYTE(v71));
      }
      return 0xFFFFFFFFLL;
    }
    v55 = v93[2];
    v133 = *(_OWORD *)v93;
    v134 = v55;
    v15 = *v120;
    sub_18D053C48((uint64_t)&v73, a5, (uint64_t)&v100, (uint64_t)&v100);
    sub_18D053EBC((uint64_t)&v73, (uint64_t)&v85);
    sub_18D053C48((uint64_t)&v73, a5, (uint64_t)&v127, (uint64_t)&v127);
    sub_18D053EBC((uint64_t)&v73, (uint64_t)&v112);
  }
  v56 = a1[1];
  v73 = 0;
  *(_QWORD *)&v74 = 0;
  v20.n128_f64[0] = v13 + (double)v11;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v73, 0, (int8x16_t)v20, v21);
  v112 = (void *)CNTimeSpan::operator+(v56 + 136, &v73, v57, v58);
  *(_QWORD *)&v113 = v59;
  v60.i64[0] = *(_QWORD *)(v56 + 192);
  *(double *)v61.i64 = v15 * 0.000001;
  v107 = &unk_1E25B97E0;
  v85 = &unk_1E25B9818;
  LOWORD(v73) = 0;
  v74 = 0u;
  v75 = 0u;
  LODWORD(v76) = 0;
  *((_QWORD *)&v76 + 1) = 0;
  v77 = 0;
  v78 = 0;
  result = cnnavigation::GNSSCarrierPhase((uint64_t)&v112, (uint64_t)&v73, (uint64_t)&v133, v56 + 296, (uint64_t *)&v107, (uint64_t *)&v85, a3, 1, v60, v61, 0.0, a4);
  if (!(_DWORD)result)
    return result;
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
  {
    LOWORD(v73) = 12;
    LOBYTE(v107) = 1;
    v63 = a1[1];
    v64 = *(double *)(v63 + 96) + (double)*(uint64_t *)(v63 + 88);
    sub_18D181C54(v63 + 56);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, (unsigned __int8 *)&v107, "t,%.3lf,%s,GNSSCarrierPhase,start,returned != 0", v65, v66, v67, v68, v69, SLOBYTE(v64));
  }
  return 0xFFFFFFFFLL;
}

void sub_18D24D0C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x800000001;
  *(_QWORD *)a3 = &unk_1E25C6E00;
  *(_OWORD *)(a3 + 8) = xmmword_18D331E20;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_18D053B2C(a1, a2, a3);
}

void sub_18D24D118(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 sub_18D24D12C(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  __n128 result;

  v4 = (char *)operator new(0x200uLL);
  v5 = v4;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18D077798(v4 + 56, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v4 + 9) = *(_QWORD *)(a2 + 72);
  }
  *((_QWORD *)v5 + 10) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 280) = v6;
  *((_QWORD *)v5 + 37) = &unk_1E25B9850;
  v7 = v5 + 304;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18D077798(v7, *(void **)(a2 + 304), *(_QWORD *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)(a2 + 304);
    *((_QWORD *)v5 + 40) = *(_QWORD *)(a2 + 320);
  }
  *((_QWORD *)v5 + 41) = *(_QWORD *)(a2 + 328);
  v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  *(_QWORD *)v5 = &unk_1E25B8EE0;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a2 + 8);
  v13 = v5 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v13, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v5 + 4) = *(_QWORD *)(a2 + 32);
  }
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v5 + 40) = result;
  *(_QWORD *)v5 = &unk_1E25C4920;
  *a1 = sub_18D24D328;
  a1[1] = (void (*)(int))v5;
  return result;
}

void sub_18D24D2DC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_18D1A3798(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24D328(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24D35C()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_18D24D3F0(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0xF0uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)v4 = off_1E25C4AF8;
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 216);
  v4[232] = *(_BYTE *)(a2 + 232);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 88);
  result = *(__n128 *)(a2 + 104);
  *(__n128 *)(v4 + 104) = result;
  *a1 = sub_18D24D4FC;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D24D4E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24D4FC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24D530()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_18D24D5C4(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0xE8uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)v4 = off_1E25C4B20;
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(v4 + 88) = result;
  *a1 = sub_18D24D6C8;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D24D6B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24D6C8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24D6FC()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

void sub_18D24D790(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D24D7E0(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x58uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)v4 = off_1E25C4AD0;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *a1 = sub_18D24D89C;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D24D888(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24D89C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24D8D0()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_18D24D964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int32x4_t v5;
  uint64_t i;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  void *v19;
  int32x4_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD v23[6];

  v2 = *(unsigned int *)(a2 + 12);
  v21 = 0x100000006;
  v19 = &unk_1E25C8150;
  if ((v2 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v5 = vdupq_lane_s32((int32x2_t)(v2 | 0x100000000), 0);
  v5.i32[1] = 1;
  v20 = v5;
  v22 = v23;
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
      v23[i] = i;
  }
  *(_QWORD *)(a1 + 24) = 0x600000003;
  *(_OWORD *)(a1 + 8) = xmmword_18D331E30;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5090;
  *(_QWORD *)(a1 + 184) = a2;
  *(_QWORD *)(a1 + 216) = 0x100000003;
  *(_QWORD *)(a1 + 192) = &unk_1E25C77C0;
  *(_OWORD *)(a1 + 200) = xmmword_18D313070;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 248) = &unk_1E25C8150;
  *(_QWORD *)(a1 + 272) = 0x100000006;
  *(_OWORD *)(a1 + 256) = xmmword_18D319950;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  sub_18D053D7C(a1 + 192, (uint64_t)&unk_1ECF24110);
  result = sub_18D053D7C(a1 + 248, (uint64_t)&v19);
  v8 = *(unsigned int *)(a1 + 208);
  v9 = *(unsigned int *)(a1 + 264);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 20);
    v13 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v8)
      {
        v14 = *(int **)(a1 + 224);
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * v11) * v12;
        v16 = *(_QWORD *)(a1 + 32);
        v17 = v10;
        result = v8;
        do
        {
          v18 = *v14++;
          *(_QWORD *)(v16 + 8 * v17++) = *(_QWORD *)(v13 + 8 * (v18 + v15));
          --result;
        }
        while (result);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return result;
}

_QWORD *sub_18D24DB28(_QWORD *result)
{
  result[31] = &unk_1E25C5EA0;
  result[24] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D24DB50(_QWORD *a1)
{
  a1[31] = &unk_1E25C5EA0;
  a1[24] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

__n128 sub_18D24DB88(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x600000003;
  *(_QWORD *)(a1 + 24) = 0x600000003;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C7970;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 7u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D24DCA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D24DCB8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x18D78B5D4);
}

double sub_18D24DD08(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  double result;

  v4 = (char *)operator new(0x40uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)v4 = off_1E25C48F8;
  result = *(double *)(a2 + 56);
  *((double *)v4 + 7) = result;
  *a1 = sub_18D24DDBC;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D24DDA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24DDBC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24DDF0()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

_QWORD *sub_18D24DE84(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D24DE98(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24DEBC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24DEC8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

__n128 sub_18D24DFBC(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x38uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v4 + 40) = result;
  *(_QWORD *)v4 = off_1E25C3D60;
  *a1 = sub_18D24E068;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D24E054(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24E068(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24E09C()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_18D24E130(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x38uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v4 + 40) = result;
  *(_QWORD *)v4 = off_1E25C3EA0;
  *a1 = sub_18D24E1DC;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D24E1C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24E1DC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24E210()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_18D24E2A4(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  __n128 result;

  v4 = (char *)operator new(0x38uLL);
  *(_QWORD *)v4 = &unk_1E25B8EE0;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v5, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  }
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v4 + 40) = result;
  *(_QWORD *)v4 = off_1E25C3D88;
  *a1 = sub_18D24E350;
  a1[1] = (void (*)(int))v4;
  return result;
}

void sub_18D24E33C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D24E350(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D24E384()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

_QWORD *sub_18D24E418(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D24E42C(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24E450(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24E45C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D24E550(uint64_t result, int a2, int *a3)
{
  int *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  if (*(_DWORD *)(result + 16) != a2)
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if (a2 >= 1)
  {
    v3 = *(int **)(result + 112);
    v4 = *(_QWORD *)(*(_QWORD *)(result + 72) + 32);
    v5 = *(_DWORD **)(result + 32);
    v6 = a2;
    do
    {
      v8 = *a3++;
      v7 = v8;
      v9 = *v3++;
      *(_DWORD *)(v4 + 4 * v9) = v7;
      *v5++ = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *sub_18D24E5C0(_QWORD *result)
{
  result[10] = &unk_1E25C5EA0;
  *result = &unk_1E25C5EA0;
  return result;
}

void sub_18D24E5D8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  int *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  int v65;
  int *v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD v94[9];
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE v101[8];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 1540))
  {
    sub_18D053AA8(a1 + 768, a1 + 8);
    sub_18D053AA8(a1 + 872, a1 + 112);
    sub_18D053AA8(a1 + 1424, a1 + 664);
  }
  v6 = *(_DWORD *)(a1 + 776);
  v7 = *(_DWORD *)(a1 + 780);
  if (v6 <= v7)
    v8 = *(_DWORD *)(a1 + 780);
  else
    v8 = *(_DWORD *)(a1 + 776);
  if (v7)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (v9)
    v10 = 0;
  else
    v10 = v8;
  if (v10 != a2)
  {
    LOWORD(v85) = 2;
    LOBYTE(v76) = 4;
    v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1704), "ReorderStates(): Length(order) != Length(x).");
    if (*(char *)(a1 + 1727) >= 0)
      LOBYTE(v17) = v11;
    else
      v17 = *(_QWORD *)(a1 + 1704);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v85, (unsigned __int8 *)&v76, "%s", v12, v13, v14, v15, v16, v17);
  }
  v99 = 0x100000008;
  v94[8] = &off_1E25C8690;
  v95 = a2;
  v96 = 1;
  v97 = a2;
  v98 = a2;
  v18 = v101;
  v100 = v101;
  if (a2 > 3)
  {
    bzero(v101, a2 - 1);
    v101[a2 - 1] = 0;
    v19 = a2;
  }
  else
  {
    if (!a2)
    {
      v22 = 0;
      goto LABEL_28;
    }
    v19 = a2;
    bzero(v101, a2);
  }
  v20 = 0;
  v21 = *(_QWORD *)(a3 + 32);
  v22 = 1;
  do
  {
    v23 = *(int *)(v21 + 4 * v20);
    if (v18[v23])
    {
      LOWORD(v85) = 2;
      LOBYTE(v76) = 4;
      cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1704), "ReorderStates(): order must reference each state once and only once.");
      if (*(char *)(a1 + 1727) >= 0)
        LOBYTE(v29) = a1 - 88;
      else
        v29 = *(_QWORD *)(a1 + 1704);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v85, (unsigned __int8 *)&v76, "%s", v24, v25, v26, v27, v28, v29);
      v21 = *(_QWORD *)(a3 + 32);
      v18 = v100;
      v23 = *(int *)(v21 + 4 * v20);
    }
    v18[v23] = 1;
    ++v20;
  }
  while (v19 != v20);
LABEL_28:
  sub_18D053AA8(a1 + 8, a1 + 768);
  sub_18D053AA8(a1 + 112, a1 + 872);
  sub_18D053AA8(a1 + 664, a1 + 1424);
  if ((v22 & 1) != 0)
  {
    v30 = 0;
    do
    {
      v31 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4 * v30);
      *(_QWORD *)(*(_QWORD *)(a1 + 800) + 8 * v30) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v31);
      sub_18D24EC90((uint64_t)&v85, a1 + 112, v31);
      sub_18D24EC90((uint64_t)&v76, a1 + 872, v30);
      v32 = v77;
      if ((_DWORD)v77 != (_DWORD)v86)
        __assert_rtn("operator=", "cnsubmatrix.h", 436, "this->num_rows_ == A.num_rows_");
      v33 = DWORD1(v77);
      if (DWORD1(v77) != DWORD1(v86))
        __assert_rtn("operator=", "cnsubmatrix.h", 437, "this->num_cols_ == A.num_cols_");
      if (DWORD1(v77))
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = v88;
        v38 = v82;
        v39 = v83;
        v40 = HIDWORD(v77);
        v41 = v81;
        v42 = v79;
        do
        {
          if (v32)
          {
            v43 = *(_DWORD *)(v41 + 20) * *(_DWORD *)(v39 + 4 * v36);
            v44 = *(_QWORD *)(v41 + 32);
            v45 = v34;
            v46 = v38;
            v47 = v35;
            v48 = v32;
            do
            {
              v49 = v37[v45];
              v50 = *v46++;
              *(_QWORD *)(v44 + 8 * (v50 + v43)) = v49;
              v42[v47++] = v49;
              ++v45;
              --v48;
            }
            while (v48);
          }
          ++v36;
          v35 += v40;
          v34 += v32;
        }
        while (v36 != v33);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 1456) + 8 * v30++) = *(_QWORD *)(*(_QWORD *)(a1 + 696) + 8 * v31);
    }
    while (v30 != a2);
    sub_18D053AA8(a1 + 112, a1 + 872);
    v51 = 0;
    do
    {
      sub_18D24EE58((uint64_t)&v85, a1 + 112, *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4 * v51));
      sub_18D24EE58((uint64_t)&v76, a1 + 872, v51);
      v52 = v77;
      if ((_DWORD)v77 != (_DWORD)v86)
        __assert_rtn("operator=", "cnsubmatrix.h", 436, "this->num_rows_ == A.num_rows_");
      v53 = DWORD1(v77);
      if (DWORD1(v77) != DWORD1(v86))
        __assert_rtn("operator=", "cnsubmatrix.h", 437, "this->num_cols_ == A.num_cols_");
      if (DWORD1(v77))
      {
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = v88;
        v58 = v82;
        v59 = v84;
        v60 = HIDWORD(v77);
        v61 = v81;
        v62 = v79;
        do
        {
          if (v52)
          {
            v63 = *(_DWORD *)(v61 + 20) * *(_DWORD *)(v59 + 4 * v56);
            v64 = *(_QWORD *)(v61 + 32);
            v65 = v54;
            v66 = v58;
            v67 = v55;
            v68 = v52;
            do
            {
              v69 = v57[v65];
              v70 = *v66++;
              *(_QWORD *)(v64 + 8 * (v70 + v63)) = v69;
              v62[v67++] = v69;
              ++v65;
              --v68;
            }
            while (v68);
          }
          ++v56;
          v55 += v60;
          v54 += v52;
        }
        while (v56 != v53);
      }
      ++v51;
    }
    while (v51 != a2);
  }
  else
  {
    sub_18D053AA8(a1 + 112, a1 + 872);
  }
  v78 = 0x800000008;
  v76 = &unk_1E25C87E0;
  v77 = xmmword_18D319930;
  v79 = &v80;
  v73 = 0x100000008;
  v71 = &unk_1E25C86C0;
  v72 = xmmword_18D319940;
  v74 = &v75;
  v92 = 0x100000008;
  v90 = &unk_1E25C86C0;
  v91 = xmmword_18D319940;
  v93 = v94;
  v87 = 0x800000008;
  v85 = &unk_1E25C87E0;
  v86 = xmmword_18D319930;
  v88 = &v89;
  sub_18D054C20(a1 + 872, a1 + 1424, (uint64_t)&v90, (uint64_t)&v85, (uint64_t)&v71, (uint64_t)&v76);
  sub_18D053AA8(a1 + 872, (uint64_t)&v76);
  sub_18D053AA8(a1 + 1424, (uint64_t)&v71);
  sub_18D053AA8(a1 + 8, a1 + 768);
  sub_18D053AA8(a1 + 112, a1 + 872);
  sub_18D053AA8(a1 + 664, a1 + 1424);
  *(_DWORD *)(a1 + 1540) = 1;
}

uint64_t sub_18D24EBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x100000008;
  *(_OWORD *)(a1 + 8) = xmmword_18D319940;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C58A0;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 104) = 0x100000008;
  *(_QWORD *)(a1 + 80) = &unk_1E25C86F0;
  *(_OWORD *)(a1 + 88) = xmmword_18D319940;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  sub_18D053D7C(a1 + 80, a3);
  v6 = *(_DWORD *)(a1 + 88);
  v5 = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 112);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_DWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_DWORD *)(v9 + 4 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D24EC68(_QWORD *a1)
{
  a1[10] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24EC90(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v5;
  int v6;
  int i;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD v27[8];
  void *v28;
  __int128 v29;
  uint64_t v30;
  int *v31;
  int v32;

  v30 = 0x100000001;
  v28 = &unk_1E25C6A70;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v29 = v5;
  v31 = &v32;
  v32 = a3;
  v6 = *(_DWORD *)(a2 + 12);
  v25 = 0x100000008;
  v20 = &unk_1E25C86F0;
  v21 = v6;
  v22 = 1;
  v23 = v6;
  v24 = v6;
  v26 = v27;
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      v27[i] = i;
  }
  *(_QWORD *)(a1 + 24) = 0x800000001;
  *(_OWORD *)(a1 + 8) = xmmword_18D331E20;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C4D60;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 136) = 0x100000001;
  *(_QWORD *)(a1 + 112) = &unk_1E25C6A70;
  *(_OWORD *)(a1 + 120) = v5;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 160) = &unk_1E25C86F0;
  *(_QWORD *)(a1 + 184) = 0x100000008;
  *(_OWORD *)(a1 + 168) = xmmword_18D319940;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  sub_18D053D7C(a1 + 112, (uint64_t)&v28);
  result = sub_18D053D7C(a1 + 160, (uint64_t)&v20);
  v9 = *(unsigned int *)(a1 + 128);
  v10 = *(unsigned int *)(a1 + 176);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v9)
      {
        v15 = *(int **)(a1 + 144);
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 4 * v12) * v13;
        v17 = *(_QWORD *)(a1 + 32);
        v18 = v11;
        result = v9;
        do
        {
          v19 = *v15++;
          *(_QWORD *)(v17 + 8 * v18++) = *(_QWORD *)(v14 + 8 * (v19 + v16));
          --result;
        }
        while (result);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return result;
}

_QWORD *sub_18D24EE30(_QWORD *result)
{
  result[20] = &unk_1E25C5EA0;
  result[14] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D24EE58(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  int i;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  int v24;
  void *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD v32[8];

  v5 = *(_DWORD *)(a2 + 8);
  v30 = 0x100000008;
  v25 = &unk_1E25C86F0;
  v26 = v5;
  v27 = 1;
  v28 = v5;
  v29 = v5;
  v31 = v32;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
      v32[i] = i;
  }
  v22 = 0x100000001;
  v20 = &unk_1E25C6A70;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  v21 = v7;
  v23 = &v24;
  v24 = a3;
  *(_QWORD *)(a1 + 24) = 0x100000008;
  *(_OWORD *)(a1 + 8) = xmmword_18D319940;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5210;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 136) = 0x100000008;
  *(_QWORD *)(a1 + 112) = &unk_1E25C86F0;
  *(_OWORD *)(a1 + 120) = xmmword_18D319940;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 208) = 0x100000001;
  *(_QWORD *)(a1 + 184) = &unk_1E25C6A70;
  *(_OWORD *)(a1 + 192) = v7;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  sub_18D053D7C(a1 + 112, (uint64_t)&v25);
  result = sub_18D053D7C(a1 + 184, (uint64_t)&v20);
  v9 = *(unsigned int *)(a1 + 128);
  v10 = *(unsigned int *)(a1 + 200);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v9)
      {
        v15 = *(int **)(a1 + 144);
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 4 * v12) * v13;
        v17 = *(_QWORD *)(a1 + 32);
        v18 = v11;
        result = v9;
        do
        {
          v19 = *v15++;
          *(_QWORD *)(v17 + 8 * v18++) = *(_QWORD *)(v14 + 8 * (v19 + v16));
          --result;
        }
        while (result);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return result;
}

_QWORD *sub_18D24EFE8(_QWORD *result)
{
  result[23] = &unk_1E25C5EA0;
  result[14] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D24F010(_QWORD *result)
{
  *result = &unk_1E25C5E40;
  return result;
}

void sub_18D24F024(_QWORD *a1)
{
  *a1 = &unk_1E25C5E40;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24F048(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24F054(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  int v11;
  char v12;
  _BYTE v13[8];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_BYTE *)(v7 + v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_BYTE *)(v7 + v11);
              *(_BYTE *)(v7 + v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D24F148(_QWORD *a1)
{
  a1[20] = &unk_1E25C5EA0;
  a1[14] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D24F180(_QWORD *a1)
{
  a1[23] = &unk_1E25C5EA0;
  a1[14] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24F1B8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int *v7;
  int v8;
  uint64_t v9;
  int *v10;
  int *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  int v16;

  *(_QWORD *)(result + 24) = 0x100000008;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E25C86F0;
  *(_QWORD *)(result + 8) = 0;
  if (result == a2)
  {
    v15 = "this != &(A)";
    v16 = 603;
    goto LABEL_16;
  }
  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  v4 = (v3 * v2);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  v5 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    v15 = "this->max_num_rows_ >= A.num_rows_";
    v16 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v15 = "this->max_num_cols_ >= A.num_cols_";
    v16 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v16, v15);
  }
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 > 3)
  {
    v9 = (v6 - 1);
    v10 = *(int **)(a2 + 32);
    v11 = v10;
    v12 = (_DWORD *)(result + 40);
    v13 = v9;
    do
    {
      v14 = *v11++;
      *v12++ = v14;
      --v13;
    }
    while (v13);
    v5[v9] = v10[v9];
  }
  else if ((int)v4 >= 1)
  {
    v7 = *(int **)(a2 + 32);
    do
    {
      v8 = *v7++;
      *v5++ = v8;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18D24F2D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D24F2E4(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int *v6;
  int v7;
  const char *v8;
  int v9;

  *(_QWORD *)(result + 24) = 0x100000008;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E25C86F0;
  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = v2;
  v4 = (v2 * v3);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v3;
  v5 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    v8 = "this->max_num_rows_ >= A.NumRows()";
    v9 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v8 = "this->max_num_cols_ >= A.NumCols()";
    v9 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  if ((int)v4 >= 1)
  {
    v6 = *(int **)(a2 + 32);
    do
    {
      v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18D24F3A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D24F3B8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C62F0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

void sub_18D24F414(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C62F0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24F480(uint64_t a1)
{
  uint64_t result;

  result = sub_18D24F59C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D24F4A8(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x650uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D24F59C(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x3280uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D24F604(_QWORD *a1)
{
  *a1 = off_1E25C5D80;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24F624(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24F630(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[2];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

_QWORD *sub_18D24F704(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D24F718(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24F73C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24F748(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[48];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

_QWORD *sub_18D24F83C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D24F850(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D24F874(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D24F880(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D24F974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  cnprint::CNPrinter *LogLevel;
  double v59;
  int v60;
  double v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  cnprint::CNPrinter *v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BOOL4 v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (***v109)();
  uint64_t v110;
  uint64_t v111;
  uint64_t (***v112)();
  int v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  char v136;
  __int128 v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  int *v145;
  double *v146;
  int v147;
  uint64_t v148;
  char v149;
  __int128 v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  int *v158;
  double *v159;
  int v160;
  unsigned int (*v161)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  double v162;
  double v163;
  unsigned __int8 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  __int128 v181;
  int v182;
  uint64_t v183;
  _DWORD *v184;
  int v185;
  int v186;
  int v187;
  int v188;
  _DWORD *v189;
  unsigned int (*v190)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double);
  unsigned int (*v191)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128);
  __n128 v192;
  int v193;
  int v194;
  uint64_t v195;
  __int128 v196;
  int v197;
  uint64_t v198;
  double *v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  _QWORD *v209;
  int v210;
  int v211;
  int i;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  _DWORD *v216;
  uint64_t v217;
  int v218;
  double v219;
  unsigned int v220;
  uint64_t v221;
  double v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  __int128 v230;
  std::string *v231;
  std::string::size_type v232;
  unint64_t v233;
  uint64_t v234;
  unsigned int v235;
  int v236;
  signed int v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  double v241;
  _BOOL4 v242;
  _BOOL4 v243;
  uint64_t v244;
  unint64_t v245;
  double v246;
  int v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  _BOOL4 v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  double v263;
  double *v264;
  double *v265;
  uint64_t v266;
  double v267;
  int v268;
  uint64_t v269;
  int v270;
  double *v271;
  uint64_t v272;
  _DWORD *v273;
  int v274;
  uint64_t v275;
  double *v276;
  double *v277;
  double *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  double *v282;
  _QWORD *v283;
  double *v284;
  uint64_t v285;
  uint64_t v286;
  double *v287;
  double *v288;
  uint64_t v289;
  double *v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  double v294;
  int v295;
  double v296;
  double *v297;
  uint64_t v298;
  double v299;
  int v300;
  double v301;
  double *v302;
  uint64_t v303;
  double v304;
  int v305;
  double v306;
  double *v307;
  uint64_t v308;
  double v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  double *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  double *v320;
  uint64_t v321;
  double v322;
  double *v323;
  double *v324;
  uint64_t v325;
  double v326;
  _QWORD *v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _DWORD *v333;
  double v334;
  int v335;
  double v336;
  uint64_t v337;
  double *v338;
  double v339;
  double v340;
  double v341;
  int v342;
  uint64_t v343;
  double *v344;
  double v345;
  _DWORD *v346;
  double v347;
  int v348;
  uint64_t v349;
  double *v350;
  double v351;
  uint64_t v352;
  int v353;
  int v354;
  uint64_t v355;
  __int128 v356;
  int v357;
  int v358;
  double *v359;
  unsigned int v360;
  int v361;
  int j;
  int v363;
  cnstatistics *v364;
  uint64_t v365;
  double v366;
  double *v367;
  __int128 v368;
  double v369;
  __int128 v370;
  __int128 v371;
  float64x2_t v372;
  __n128 v373;
  int v374;
  _BOOL4 v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  cnprint::CNPrinter *v381;
  double v382;
  double v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  cnstatistics *v390;
  double v391;
  double v392;
  unsigned __int8 v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  _QWORD *v406;
  unint64_t v407;
  uint64_t v408;
  double v409;
  uint64_t v410;
  _QWORD *v411;
  _QWORD *v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  unint64_t v416;
  __n128 v417;
  double v418;
  cnprint::CNPrinter *v419;
  unint64_t v420;
  unint64_t v421;
  unsigned int v422;
  int v423;
  double *v424;
  double v425;
  unint64_t v426;
  double v427;
  unsigned __int8 v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int32x4_t v435;
  cnprint::CNPrinter *v436;
  double *v437;
  uint64_t v438;
  int *v439;
  int v440;
  __n128 v441;
  double v442;
  cnstatistics *v443;
  cnprint::CNPrinter *v444;
  double v445;
  uint64_t v446;
  double v447;
  unint64_t *v448;
  unint64_t v449;
  unsigned __int8 v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char v457;
  unsigned __int8 v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unsigned __int8 v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char v469;
  __int128 v470;
  int v471;
  int v472;
  uint64_t v473;
  int v474;
  int k;
  int v476;
  int v477;
  uint64_t v478;
  __int128 v479;
  int v480;
  int v481;
  _DWORD *v482;
  unsigned int v483;
  int v484;
  int m;
  int v486;
  double v487;
  double v488;
  uint64_t v489;
  uint64_t v490;
  unsigned int v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  double v495;
  unsigned int v496;
  uint64_t v497;
  double v498;
  uint64_t v499;
  uint64_t v500;
  unsigned int v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  double v505;
  unsigned int v506;
  uint64_t v507;
  double v508;
  uint64_t v509;
  uint64_t v510;
  unsigned int v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  double v515;
  unsigned int v516;
  uint64_t v517;
  double v518;
  uint64_t v519;
  uint64_t v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  double v525;
  unsigned int v526;
  uint64_t v527;
  double v528;
  uint64_t v529;
  uint64_t v530;
  __n128 v531;
  uint64_t *v532;
  int v533;
  uint64_t v534;
  int v535;
  double v536;
  __int128 v537;
  uint64_t v538;
  int32x4_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  int v546;
  _QWORD *v547;
  uint64_t *v548;
  uint64_t *v549;
  double *v550;
  int v551;
  int *v552;
  int v553;
  uint64_t v554;
  int v555;
  _QWORD *v556;
  double *v557;
  uint64_t v558;
  double *v559;
  uint64_t v560;
  double *v561;
  _OWORD *v562;
  __int128 v563;
  unsigned int v564;
  unsigned int v565;
  uint64_t v566;
  _DWORD *v567;
  uint64_t v568;
  int *v569;
  double *v570;
  uint64_t v571;
  _QWORD *v572;
  double *v573;
  uint64_t v574;
  double *v575;
  uint64_t v576;
  double *v577;
  _OWORD *v578;
  __int128 v579;
  __int128 v580;
  int v581;
  uint64_t v582;
  _DWORD *v583;
  unsigned int v584;
  __int128 v585;
  int v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  const char *v596;
  int v597;
  const char *v598;
  int v599;
  const char *v600;
  int v601;
  double v602;
  _BOOL4 v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  unsigned int (*v611)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128);
  uint64_t (*v612)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v613;
  int v614;
  uint64_t v615;
  uint64_t v616;
  double v617;
  double v618;
  int v619;
  unsigned int v620;
  uint64_t v621;
  char v622;
  int v623;
  uint64_t v624;
  uint64_t v625;
  const void **v626;
  uint64_t v627;
  uint64_t v628;
  _BOOL4 v629;
  unsigned int v630;
  uint64_t (**v631)();
  __int128 v632;
  uint64_t v633;
  _DWORD *v634;
  _DWORD v635[512];
  uint64_t (**v636)();
  std::string v637;
  double *v638;
  double v639[17];
  uint64_t (**v640)();
  __int128 v641;
  uint64_t v642;
  int *v643;
  _QWORD v644[235];
  uint64_t (**v645)();
  __int128 v646;
  uint64_t v647;
  uint64_t *v648;
  uint64_t v649;
  uint64_t (**v650)();
  __int128 v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t v654;
  uint64_t (**v655)();
  __int128 v656;
  uint64_t v657;
  _QWORD *v658;
  _QWORD v659[8];
  std::string __p;
  uint64_t v661;
  _QWORD *v662;
  _QWORD v663[256];
  uint64_t (**v664)();
  __int128 v665;
  uint64_t v666;
  _QWORD *v667;
  _QWORD v668[8];
  void *v669;
  __int128 v670;
  uint64_t v671;
  _BYTE *v672;
  _BYTE v673[512];
  void *v674;
  __int128 v675;
  uint64_t v676;
  _QWORD *v677;
  _QWORD v678[64];
  void *v679;
  __int128 v680;
  uint64_t v681;
  _QWORD *v682;
  _QWORD v683[44];
  void *v684;
  __int128 v685;
  uint64_t v686;
  int *v687;
  _DWORD v688[88];
  uint64_t (**v689)();
  __int128 v690;
  uint64_t v691;
  _BYTE *v692;
  _BYTE v693[512];
  double v694;
  char v695;
  void *v696;
  __int128 v697;
  uint64_t v698;
  _DWORD *v699;
  _DWORD v700[88];
  uint64_t (**v701)();
  __int128 v702;
  uint64_t v703;
  double *v704;
  _BYTE v705[696];
  uint64_t (**v706)();
  __int128 v707;
  uint64_t v708;
  _BYTE *v709;
  _BYTE v710[824];
  _QWORD v711[5];
  uint64_t v712;
  uint64_t (**v713)();
  __int128 v714;
  uint64_t v715;
  _DWORD *v716;
  _DWORD v717[206];
  void *v718;
  __int128 v719;
  uint64_t v720;
  _QWORD *v721;
  _QWORD v722[9];
  uint64_t (**v723)();
  unint64_t v724;
  uint64_t v725;
  uint64_t v726;
  _QWORD *v727;
  _QWORD v728[2];
  uint64_t (**v729)();
  __int128 v730;
  uint64_t v731;
  _QWORD *v732;
  _QWORD v733[8];
  _QWORD v734[2];
  int v735;
  uint64_t v736;
  uint64_t v737;
  _QWORD v738[5];
  uint64_t v739;
  void *v740;
  __int128 v741;
  uint64_t v742;
  _BYTE *v743;
  _BYTE v744[696];
  void *v745;
  __int128 v746;
  uint64_t v747;
  _BYTE *v748;
  _BYTE v749[696];
  void *v750;
  __int128 v751;
  uint64_t v752;
  uint64_t *v753;
  uint64_t v754;
  void *v755;
  __int128 v756;
  uint64_t v757;
  uint64_t *v758;
  uint64_t v759;
  void *v760;
  unsigned int v761;
  unsigned int v762;
  int v763;
  signed int v764;
  uint64_t v765;
  double *v766;
  uint64_t v767;
  void *v768;
  unsigned int v769;
  unsigned int v770;
  int v771;
  unsigned int v772;
  uint64_t v773;
  uint64_t *v774;
  uint64_t v775;
  void *v776;
  unsigned int v777;
  unsigned int v778;
  int v779;
  unsigned int v780;
  uint64_t v781;
  uint64_t *v782;
  uint64_t v783;
  void *v784;
  unsigned int v785;
  int v786;
  unsigned int v787;
  unsigned int v788;
  uint64_t v789;
  double *v790;
  uint64_t v791;
  _BYTE v792[32];
  double *v793;
  _QWORD v794[13];
  _BYTE v795[32];
  double *v796;

  v26 = MEMORY[0x1E0C80A78](a1, a2);
  v615 = v27;
  v621 = v28;
  v30 = v29;
  v627 = v31;
  v33 = v32;
  v625 = v34;
  v630 = v35;
  v36 = v26;
  if (a19 >= 1)
  {
    v37 = 0;
    do
    {
      sub_18D04DA0C((uint64_t)&v636, *(_QWORD *)(a11 + 32) + v37);
      v37 += 64;
    }
    while ((unint64_t)a19 << 6 != v37);
    v38 = 0;
    v39 = 0;
    do
    {
      sub_18D04DA0C((uint64_t)&v636, *(_QWORD *)(a13 + 32) + v39);
      sub_18D159B20((uint64_t)&v636, *(_QWORD *)(a14 + 32) + v38);
      sub_18D159B20((uint64_t)&v636, *(_QWORD *)(a14 + 32) + v38);
      v39 += 64;
      v38 += 112;
    }
    while ((unint64_t)a19 << 6 != v39);
  }
  sub_18D054040(":", a16, 0, (uint64_t)&__p);
  v638 = v639;
  v40 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  LODWORD(v637.__r_.__value_.__l.__data_) = 1;
  HIDWORD(v637.__r_.__value_.__r.__words[0]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  HIDWORD(v637.__r_.__value_.__r.__words[2]) = 1;
  LODWORD(v637.__r_.__value_.__r.__words[1]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  *(std::string::size_type *)((char *)&v637.__r_.__value_.__r.__words[1] + 4) = 0x200000001;
  if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
  {
    v41 = 0;
    v42 = (uint64_t)v662;
    v43 = __p.__r_.__value_.__r.__words[1];
    v44 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
    v45 = 1;
    do
    {
      v46 = *(_DWORD *)(v42 + 4 * v43 * v41);
      v47 = v45;
      v48 = v44;
      if (v43 >= 2)
      {
        do
        {
          v46 += *(_DWORD *)(v42 + 4 * v47++);
          --v48;
        }
        while (v48);
      }
      *((_DWORD *)v639 + v41++) = v46;
      v45 += v43;
    }
    while (v41 != v40);
  }
  sub_18D054040(":", a16, 1, (uint64_t)&__p);
  v638 = v639;
  v49 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  LODWORD(v637.__r_.__value_.__l.__data_) = 1;
  HIDWORD(v637.__r_.__value_.__r.__words[0]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  HIDWORD(v637.__r_.__value_.__r.__words[2]) = 1;
  LODWORD(v637.__r_.__value_.__r.__words[1]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  *(std::string::size_type *)((char *)&v637.__r_.__value_.__r.__words[1] + 4) = 0x200000001;
  if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
  {
    v50 = 0;
    v51 = (uint64_t)v662;
    v52 = __p.__r_.__value_.__r.__words[1];
    v53 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
    v54 = 1;
    do
    {
      v55 = *(_DWORD *)(v51 + 4 * v52 * v50);
      v56 = v54;
      v57 = v53;
      if (v52 >= 2)
      {
        do
        {
          v55 += *(_DWORD *)(v51 + 4 * v56++);
          --v57;
        }
        while (v57);
      }
      *((_DWORD *)v639 + v50++) = v55;
      v54 += v52;
    }
    while (v50 != v49);
  }
  v616 = v33;
  v620 = v30;
  v624 = v36;
  v637.__r_.__value_.__r.__words[2] = 0x100000002;
  v636 = (uint64_t (**)())&unk_1E25C7550;
  *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319330;
  v638 = v639;
  LogLevel = (cnprint::CNPrinter *)sub_18D1CE424(a23, 1, (uint64_t)&v636);
  v59 = *(double *)(a26 + 64);
  v60 = *(unsigned __int8 *)(a26 + 32);
  v614 = *(unsigned __int8 *)(a26 + 33);
  v61 = *(double *)(a26 + 40);
  v608 = *(unsigned __int8 *)(a26 + 88);
  v611 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128))(a26 + 72);
  v612 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a26 + 96);
  v609 = *(_QWORD *)(a26 + 56);
  v610 = *(_QWORD *)(a26 + 80);
  if (a19 >= 1)
  {
    v62 = 0;
    do
    {
      v63 = *(_DWORD *)(*(_QWORD *)(a9 + 32) + 4 * v62);
      v64 = *(_DWORD *)(*(_QWORD *)(a12 + 32) + 4 * v62);
      if (v63 <= v64)
      {
        ++v62;
      }
      else
      {
        LOWORD(v636) = 2;
        __p.__r_.__value_.__s.__data_[0] = 2;
        cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v36 + 1704), "%d measurements > %d noise sources in measurement function %d.", v63, v64, ++v62);
        if (*(char *)(v36 + 1727) >= 0)
          LOBYTE(v70) = v36 - 88;
        else
          v70 = *(_QWORD *)(v36 + 1704);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v65, v66, v67, v68, v69, v70);
      }
    }
    while (v62 != a19);
  }
  if (*(_DWORD *)a26)
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (LogLevel <= 1)
    {
      LOWORD(v636) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v71 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v36 + 1704), "PredictAndUpdate is only compatible with NewtonRaphson solver.");
      if (*(char *)(v36 + 1727) >= 0)
        LOBYTE(v77) = v71;
      else
        v77 = *(_QWORD *)(v36 + 1704);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v72, v73, v74, v75, v76, v77);
    }
  }
  if (*(int *)(a26 + 4) >= 2 && cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v636) = 2;
    __p.__r_.__value_.__s.__data_[0] = 1;
    v78 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v36 + 1704), "PredictAndUpdate is only compatible with single-iteration least squares solutions.");
    if (*(char *)(v36 + 1727) >= 0)
      LOBYTE(v84) = v78;
    else
      v84 = *(_QWORD *)(v36 + 1704);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v79, v80, v81, v82, v83, v84);
  }
  v85 = *(_DWORD *)(a26 + 8);
  v637.__r_.__value_.__r.__words[2] = 0x100000057;
  v636 = (uint64_t (**)())&unk_1E25C83F0;
  *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D3197F0;
  v638 = v639;
  v86 = (cnprint::CNPrinter *)sub_18D1CE424(a9, 1, (uint64_t)&v636);
  if (v85 < *(_DWORD *)v638)
  {
    v86 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v86);
    if (v86 <= 1)
    {
      LOWORD(v636) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v87 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v624 + 1704), "PredictAndUpdate is only compatible with QR factorizations of unconstrained size.");
      if (*(char *)(v624 + 1727) >= 0)
        LOBYTE(v93) = v87;
      else
        v93 = *(_QWORD *)(v624 + 1704);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v88, v89, v90, v91, v92, v93);
    }
  }
  if (*(_BYTE *)(a26 + 89))
  {
    v86 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v86);
    if (v86 <= 1)
    {
      LOWORD(v636) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v94 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v624 + 1704), "PredictAndUpdate is only compatible with dense prediction.");
      if (*(char *)(v624 + 1727) >= 0)
        LOBYTE(v100) = v94;
      else
        v100 = *(_QWORD *)(v624 + 1704);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v95, v96, v97, v98, v99, v100);
    }
  }
  v101 = v60 != 0;
  if (!v60)
  {
    if (v614)
    {
      v101 = 1;
      if (cnprint::CNPrinter::GetLogLevel(v86) <= 1)
      {
        LOWORD(v636) = 2;
        __p.__r_.__value_.__s.__data_[0] = 1;
        v102 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v624 + 1704), "Local hypothesis testing implies global hypothesis testing.  Global hypothesis testing will be enabled.");
        if (*(char *)(v624 + 1727) >= 0)
          LOBYTE(v108) = v102;
        else
          v108 = *(_QWORD *)(v624 + 1704);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v103, v104, v105, v106, v107, v108);
      }
    }
  }
  v109 = (uint64_t (***)())v625;
  if (*(_DWORD *)(v625 + 8) && *(_DWORD *)(v625 + 12))
  {
    v110 = v624 + 8;
  }
  else
  {
    if ((v630 & 0x80000000) != 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
    v637.__r_.__value_.__r.__words[2] = 0x100000008;
    v636 = (uint64_t (**)())&unk_1E25C86C0;
    v638 = v639;
    v637.__r_.__value_.__r.__words[0] = v630 | 0x100000000;
    LODWORD(v637.__r_.__value_.__r.__words[1]) = v630;
    HIDWORD(v637.__r_.__value_.__r.__words[1]) = v630;
    sub_18D04BE88((uint64_t)&v636, 0.0);
    v110 = v624 + 8;
    v109 = &v636;
  }
  sub_18D053AA8(v110, (uint64_t)v109);
  if (*(_DWORD *)(v33 + 8) && *(_DWORD *)(v33 + 12))
  {
    v111 = v624 + 112;
    v112 = (uint64_t (***)())v33;
  }
  else
  {
    if ((v630 & 0x80000000) != 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
    v637.__r_.__value_.__r.__words[2] = 0x800000008;
    v636 = (uint64_t (**)())&unk_1E25C87E0;
    v638 = v639;
    LODWORD(v637.__r_.__value_.__l.__data_) = v630;
    HIDWORD(v637.__r_.__value_.__r.__words[0]) = v630;
    LODWORD(v637.__r_.__value_.__r.__words[1]) = v630 * v630;
    HIDWORD(v637.__r_.__value_.__r.__words[1]) = v630;
    sub_18D04BE88((uint64_t)&v636, 0.0);
    v111 = v624 + 112;
    v112 = &v636;
  }
  sub_18D053AA8(v111, (uint64_t)v112);
  if (!*(_DWORD *)(v627 + 8) || !*(_DWORD *)(v627 + 12))
  {
    v637.__r_.__value_.__r.__words[2] = 0x100000008;
    v636 = (uint64_t (**)())&unk_1E25C86C0;
    *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319940;
    v638 = v639;
    sub_18D053B2C(v624 + 112, v624 + 8, (uint64_t)&v636);
    sub_18D053AA8(v624 + 664, (uint64_t)&v636);
  }
  if ((v630 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  v637.__r_.__value_.__r.__words[2] = 0x800000008;
  v636 = (uint64_t (**)())&unk_1E25C87E0;
  v638 = v639;
  v637.__r_.__value_.__r.__words[0] = __PAIR64__(v630, v30);
  LODWORD(v637.__r_.__value_.__r.__words[1]) = v30 * v630;
  HIDWORD(v637.__r_.__value_.__r.__words[1]) = v30;
  sub_18D04BE88((uint64_t)&v636, 0.0);
  sub_18D053AA8(v624 + 1752, (uint64_t)&v636);
  v637.__r_.__value_.__r.__words[2] = 0x100000008;
  v636 = (uint64_t (**)())&unk_1E25C86C0;
  v638 = v639;
  v637.__r_.__value_.__r.__words[0] = v30 | 0x100000000;
  LODWORD(v637.__r_.__value_.__r.__words[1]) = v30;
  HIDWORD(v637.__r_.__value_.__r.__words[1]) = v30;
  sub_18D04BE88((uint64_t)&v636, 0.0);
  sub_18D053AA8(v624 + 2304, (uint64_t)&v636);
  sub_18D053AA8(v624 + 2408, v615);
  *(_DWORD *)(v624 + 1540) = 0;
  *(_BYTE *)(v624 + 1536) = 0;
  v637.__r_.__value_.__r.__words[2] = 0x100000057;
  v636 = (uint64_t (**)())&unk_1E25C83F0;
  *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D3197F0;
  v638 = v639;
  sub_18D1CE424(a9, 1, (uint64_t)&v636);
  v113 = *(_DWORD *)v638;
  if (*(_DWORD *)v638 >= 0x58u)
  {
    v114 = 2;
    LOWORD(v636) = 2;
    __p.__r_.__value_.__s.__data_[0] = 5;
    v115 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v624 + 1704), "SquareRootInformationFilter::PredictAndUpdate called with %u measurements vs. maximum %u", v113, 87);
    if (*(char *)(v624 + 1727) >= 0)
      LOBYTE(v121) = v115;
    else
      v121 = *(_QWORD *)(v624 + 1704);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v116, v117, v118, v119, v120, v121);
    return v114;
  }
  v603 = v101;
  v613 = *(unsigned int *)v638;
  v604 = v624 + 2304;
  v605 = v624 + 1752;
  v606 = v624 + 2408;
  v123 = *(_DWORD *)(a21 + 8);
  v122 = *(_DWORD *)(a21 + 12);
  if (v123 <= v122)
    v124 = *(_DWORD *)(a21 + 12);
  else
    v124 = *(_DWORD *)(a21 + 8);
  if (v123 && v122 && v124)
  {
    v126 = *(_DWORD *)(a9 + 8);
    v125 = *(_DWORD *)(a9 + 12);
    v127 = v126 <= v125 ? *(_DWORD *)(a9 + 12) : *(_DWORD *)(a9 + 8);
    if (!v126 || !v125 || v127 <= v124)
    {
      v637.__r_.__value_.__r.__words[2] = 0x100000057;
      v636 = (uint64_t (**)())&unk_1E25C83F0;
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D3197F0;
      v638 = v639;
      sub_18D1CE424(a9, 1, (uint64_t)&v636);
      sub_18D1C59EC((uint64_t *)(v624 + 1680));
      v223 = *(_DWORD *)(a9 + 8);
      if (v223)
      {
        v224 = *(_DWORD *)(a9 + 12);
        if (v224)
        {
          if (v224 | v223)
          {
            v225 = 0;
            v226 = *(_QWORD *)(a9 + 32);
            do
            {
              v227 = v225;
              if (*(int *)(v226 + 4 * v225) >= 1)
              {
                v228 = 0;
                do
                {
                  v229 = *(_QWORD *)(*(_QWORD *)(a21 + 32) + 8 * v227);
                  LODWORD(v636) = *(_DWORD *)(v229 + 8);
                  if (*(char *)(v229 + 39) < 0)
                  {
                    sub_18D077798(&v637, *(void **)(v229 + 16), *(_QWORD *)(v229 + 24));
                    v226 = *(_QWORD *)(a9 + 32);
                  }
                  else
                  {
                    v230 = *(_OWORD *)(v229 + 16);
                    v637.__r_.__value_.__r.__words[2] = *(_QWORD *)(v229 + 32);
                    *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v230;
                  }
                  if (*(int *)(v226 + 4 * v227) >= 2)
                  {
                    std::to_string(&__p, v228);
                    v231 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                         ? &__p
                         : (std::string *)__p.__r_.__value_.__r.__words[0];
                    v232 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                         : __p.__r_.__value_.__l.__size_;
                    std::string::append(&v637, (const std::string::value_type *)v231, v232);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  v233 = *(_QWORD *)(v624 + 1688);
                  if (v233 >= *(_QWORD *)(v624 + 1696))
                  {
                    v234 = sub_18D1E09D4((uint64_t *)(v624 + 1680), (uint64_t)&v636);
                  }
                  else
                  {
                    sub_18D1E096C(v624 + 1680, (uint64_t)&v636);
                    v234 = v233 + 32;
                  }
                  *(_QWORD *)(v624 + 1688) = v234;
                  if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v637.__r_.__value_.__l.__data_);
                  ++v228;
                  v226 = *(_QWORD *)(a9 + 32);
                }
                while (v228 < *(_DWORD *)(v226 + 4 * v227));
                v223 = *(_DWORD *)(a9 + 8);
                v224 = *(_DWORD *)(a9 + 12);
              }
              if (v223 <= v224)
                v235 = v224;
              else
                v235 = v223;
              if (!v223)
                break;
              if (!v224)
                break;
              v225 = v227 + 1;
            }
            while (v235 > (int)v227 + 1);
          }
        }
      }
    }
  }
  v602 = v61;
  sub_18D1C59EC((uint64_t *)(v624 + 1656));
  sub_18D1C59EC((uint64_t *)(v624 + 1632));
  sub_18D054198((uint64_t)v795, v625);
  sub_18D054198((uint64_t)v794, v627);
  sub_18D054198((uint64_t)v792, v621);
  v789 = 0x100000008;
  v784 = &unk_1E25C86C0;
  v785 = v630;
  v786 = 1;
  v787 = v630;
  v788 = v630;
  v790 = (double *)&v791;
  v781 = 0x800000008;
  v776 = &unk_1E25C87E0;
  v128 = v787 * v787;
  v782 = &v783;
  v777 = v630;
  v778 = v630;
  v779 = v787 * v787;
  v780 = v630;
  sub_18D04BE88((uint64_t)&v776, 0.0);
  v773 = 0x800000008;
  v768 = &unk_1E25C87E0;
  v774 = &v775;
  v769 = v630;
  v770 = v630;
  v607 = v128;
  v771 = v128;
  v772 = v630;
  sub_18D04BE88((uint64_t)&v768, 0.0);
  v765 = 0x800000008;
  v760 = &unk_1E25C87E0;
  v766 = (double *)&v767;
  v761 = v630;
  v129 = v30;
  v762 = v30;
  v763 = v30 * v630;
  v764 = v630;
  sub_18D04BE88((uint64_t)&v760, 0.0);
  v757 = 0x100000008;
  v755 = &unk_1E25C86F0;
  v756 = xmmword_18D319940;
  v758 = &v759;
  v752 = 0x100000008;
  v750 = &unk_1E25C86F0;
  v751 = xmmword_18D319940;
  v753 = &v754;
  if (a15 < 1)
  {
    v134 = 1.0;
  }
  else
  {
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v133 = *(_QWORD *)(a16 + 32);
    v134 = 1.0;
    v622 = 1;
    do
    {
      v135 = *(unsigned int *)(v133 + 4 * v130);
      v633 = 0x800000001;
      v631 = (uint64_t (**)())&unk_1E25C6E30;
      v634 = v635;
      if ((_DWORD)v135 == 1)
      {
        v136 = 0;
        *(_QWORD *)&v137 = 0x100000001;
        *((_QWORD *)&v137 + 1) = 0x100000001;
        v632 = v137;
        v635[0] = 0;
        v138 = 1;
        LODWORD(v135) = 1;
      }
      else if ((int)v135 <= 0)
      {
        v138 = 0;
        LODWORD(v135) = 0;
        v632 = 0uLL;
        v136 = 1;
      }
      else
      {
        v139 = 0;
        LODWORD(v632) = 1;
        DWORD1(v632) = v135;
        *((_QWORD *)&v632 + 1) = v135 | 0x100000000;
        do
        {
          v635[v139] = v139;
          ++v139;
        }
        while (v135 != v139);
        v136 = 0;
        v138 = 1;
      }
      v661 = 0x100000008;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C86F0;
      v662 = v663;
      __p.__r_.__value_.__l.__size_ = __PAIR64__(v138, v135);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = v135 * v138;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = v135;
      if ((_DWORD)v135)
      {
        v140 = 0;
        v141 = 0;
        do
        {
          if ((v136 & 1) == 0)
          {
            v142 = 0;
            do
            {
              *((_DWORD *)v663 + v141 + HIDWORD(__p.__r_.__value_.__r.__words[2]) * v142) = v635[v140 + v142];
              ++v142;
            }
            while (v138 != v142);
          }
          ++v141;
          v140 += v138;
        }
        while (v141 != (_DWORD)v135);
        v143 = __p.__r_.__value_.__r.__words[1];
        v138 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
      }
      else
      {
        v143 = 0;
      }
      v637.__r_.__value_.__r.__words[2] = 0x100000008;
      v636 = (uint64_t (**)())&unk_1E25C86F0;
      v638 = v639;
      v637.__r_.__value_.__r.__words[0] = __PAIR64__(v138, v143);
      v144 = v138 * v143;
      v637.__r_.__value_.__l.__size_ = __PAIR64__(v143, v144);
      if ((int)v144 >= 1)
      {
        v145 = (int *)v663;
        v146 = v639;
        do
        {
          v147 = *v145++;
          *(_DWORD *)v146 = v147 + v132;
          v146 = (double *)((char *)v146 + 4);
          --v144;
        }
        while (v144);
      }
      sub_18D053D7C((uint64_t)&v755, (uint64_t)&v636);
      v148 = *(unsigned int *)(*(_QWORD *)(a16 + 32) + 4 * (*(_DWORD *)(a16 + 20) + (int)v130));
      v633 = 0x800000001;
      v631 = (uint64_t (**)())&unk_1E25C6E30;
      v634 = v635;
      if ((_DWORD)v148 == 1)
      {
        v149 = 0;
        *(_QWORD *)&v150 = 0x100000001;
        *((_QWORD *)&v150 + 1) = 0x100000001;
        v632 = v150;
        v635[0] = 0;
        v151 = 1;
        LODWORD(v148) = 1;
      }
      else if ((int)v148 <= 0)
      {
        v151 = 0;
        LODWORD(v148) = 0;
        v632 = 0uLL;
        v149 = 1;
      }
      else
      {
        v152 = 0;
        LODWORD(v632) = 1;
        DWORD1(v632) = v148;
        *((_QWORD *)&v632 + 1) = v148 | 0x100000000;
        do
        {
          v635[v152] = v152;
          ++v152;
        }
        while (v148 != v152);
        v149 = 0;
        v151 = 1;
      }
      v661 = 0x100000008;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C86F0;
      v662 = v663;
      __p.__r_.__value_.__l.__size_ = __PAIR64__(v151, v148);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = v148 * v151;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = v148;
      if ((_DWORD)v148)
      {
        v153 = 0;
        v154 = 0;
        do
        {
          if ((v149 & 1) == 0)
          {
            v155 = 0;
            do
            {
              *((_DWORD *)v663 + v154 + HIDWORD(__p.__r_.__value_.__r.__words[2]) * v155) = v635[v153 + v155];
              ++v155;
            }
            while (v151 != v155);
          }
          ++v154;
          v153 += v151;
        }
        while (v154 != (_DWORD)v148);
        v156 = __p.__r_.__value_.__r.__words[1];
        v151 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
      }
      else
      {
        v156 = 0;
      }
      v637.__r_.__value_.__r.__words[2] = 0x100000008;
      v636 = (uint64_t (**)())&unk_1E25C86F0;
      v638 = v639;
      v637.__r_.__value_.__r.__words[0] = __PAIR64__(v151, v156);
      v157 = v151 * v156;
      v637.__r_.__value_.__l.__size_ = __PAIR64__(v156, v157);
      if ((int)v157 >= 1)
      {
        v158 = (int *)v663;
        v159 = v639;
        do
        {
          v160 = *v158++;
          *(_DWORD *)v159 = v160 + v131;
          v159 = (double *)((char *)v159 + 4);
          --v157;
        }
        while (v157);
      }
      sub_18D053D7C((uint64_t)&v750, (uint64_t)&v636);
      v708 = 0x100000008;
      v706 = (uint64_t (**)())&unk_1E25C86C0;
      v707 = xmmword_18D319940;
      v709 = v710;
      v661 = 0x800000008;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C87E0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319930;
      v662 = v663;
      v633 = 0x800000008;
      v631 = (uint64_t (**)())&unk_1E25C87E0;
      v632 = xmmword_18D319930;
      v634 = v635;
      v161 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a17 + 32)
                                                                                           + 8 * v130);
      sub_18D053E04((uint64_t)&v636, (uint64_t)v795, (uint64_t)&v755);
      sub_18D053E04((uint64_t)&v713, (uint64_t)v792, (uint64_t)&v750);
      if (v161(&v636, &v713, *(_QWORD *)(*(_QWORD *)(a18 + 32) + 8 * v130), &v706, &__p, &v631))
        return 20;
      sub_18D053E04((uint64_t)&v636, (uint64_t)&v784, (uint64_t)&v755);
      sub_18D05495C((uint64_t)&v636, (uint64_t)&v706);
      sub_18D053C48((uint64_t)&v636, (uint64_t)&v776, (uint64_t)&v755, (uint64_t)&v755);
      sub_18D053EBC((uint64_t)&v636, (uint64_t)&__p);
      v715 = 0x100000008;
      v713 = (uint64_t (**)())&unk_1E25C86F0;
      v714 = xmmword_18D319940;
      v716 = v717;
      v637.__r_.__value_.__r.__words[2] = 0x800000008;
      v636 = (uint64_t (**)())&unk_1E25C87E0;
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319930;
      v638 = v639;
      v162 = sub_18D159938((uint64_t)&__p, (uint64_t)&v713, (uint64_t)&v636);
      v715 = 0x800000008;
      v713 = (uint64_t (**)())&unk_1E25C87E0;
      v714 = xmmword_18D319930;
      v716 = v717;
      v747 = 0x100000008;
      v745 = &unk_1E25C86F0;
      v746 = xmmword_18D319940;
      v748 = v749;
      v742 = 0x100000008;
      v740 = &unk_1E25C86F0;
      v741 = xmmword_18D319940;
      v743 = v744;
      v637.__r_.__value_.__r.__words[2] = 0x100000020;
      v636 = (uint64_t (**)())&unk_1E25C7670;
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319960;
      v638 = v639;
      v163 = sub_18D054568((uint64_t)&__p, (uint64_t)&v745, (uint64_t)&v740, (uint64_t)&v636, (uint64_t)&v713);
      sub_18D053C48((uint64_t)&v636, (uint64_t)&v768, (uint64_t)&v755, (uint64_t)&v755);
      sub_18D053EBC((uint64_t)&v636, (uint64_t)&v713);
      sub_18D053C48((uint64_t)&v636, (uint64_t)&v760, (uint64_t)&v755, (uint64_t)&v750);
      sub_18D053EBC((uint64_t)&v636, (uint64_t)&v631);
      v134 = v134 * v162;
      v622 &= v163 <= v59;
      v133 = *(_QWORD *)(a16 + 32);
      v132 += *(_DWORD *)(v133 + 4 * v130);
      v131 += *(_DWORD *)(v133 + 4 * (*(_DWORD *)(a16 + 20) + (int)v130++));
    }
    while (v130 != a15);
    v129 = v620;
    if ((v622 & 1) == 0)
    {
      LOWORD(v636) = 2;
      __p.__r_.__value_.__s.__data_[0] = 2;
      v164 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v624 + 1704), "PredictAndUpdate state Jacobian matrix is not invertible.");
      if (*(char *)(v624 + 1727) >= 0)
        LOBYTE(v170) = v164;
      else
        v170 = *(_QWORD *)(v624 + 1704);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v165, v166, v167, v168, v169, v170);
      sub_18D053AA8(v624 + 768, (uint64_t)&v784);
      sub_18D053AA8(v624 + 872, v33);
      v637.__r_.__value_.__r.__words[2] = 0x100000008;
      v636 = (uint64_t (**)())&unk_1E25C86C0;
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319940;
      v638 = v639;
      sub_18D053B2C(v624 + 872, (uint64_t)&v784, (uint64_t)&v636);
      sub_18D053AA8(v624 + 1424, (uint64_t)&v636);
      v637.__r_.__value_.__r.__words[2] = 0x800000008;
      v636 = (uint64_t (**)())&unk_1E25C87E0;
      v638 = v639;
      v637.__r_.__value_.__r.__words[0] = __PAIR64__(v630, v620);
      LODWORD(v637.__r_.__value_.__r.__words[1]) = v620 * v630;
      HIDWORD(v637.__r_.__value_.__r.__words[1]) = v620;
      sub_18D04BE88((uint64_t)&v636, 0.0);
      sub_18D053AA8(v605, (uint64_t)&v636);
      v661 = 0x100000008;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C86C0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319940;
      v662 = v663;
      sub_18D053B2C(v615, (uint64_t)v792, (uint64_t)&__p);
      v633 = 0x100000008;
      v631 = (uint64_t (**)())&unk_1E25C86C0;
      v632 = xmmword_18D319940;
      v634 = v635;
      sub_18D053B2C(v605, (uint64_t)&v784, (uint64_t)&v631);
      v637.__r_.__value_.__r.__words[2] = 0x100000008;
      v636 = (uint64_t (**)())&unk_1E25C86C0;
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319940;
      v638 = v639;
      sub_18D053FA4((uint64_t)&__p, (uint64_t)&v631, (uint64_t)&v636);
      sub_18D053AA8(v604, (uint64_t)&v636);
      sub_18D053AA8(v606, v615);
      *(_DWORD *)(v624 + 1540) = 1;
      return 21;
    }
  }
  v747 = 0x100000057;
  v745 = &unk_1E25C83C0;
  *(_QWORD *)&v746 = v613 | 0x100000000;
  DWORD2(v746) = v613;
  HIDWORD(v746) = v613;
  v748 = v749;
  v742 = 0x100000057;
  v740 = &unk_1E25C83C0;
  *(_QWORD *)&v741 = v746;
  DWORD2(v741) = v613;
  HIDWORD(v741) = v613;
  v743 = v744;
  sub_18D255A90((uint64_t)v738, v613, v630);
  sub_18D255A90((uint64_t)v734, v613, v129);
  v617 = v59;
  if (a19 >= 1)
  {
    v171 = 0;
    v619 = 0;
    v172 = v635;
    v173 = a22;
    v618 = 1.0;
    while (1)
    {
      v731 = 0x100000008;
      v729 = (uint64_t (**)())&unk_1E25C86C0;
      v732 = v733;
      *(_QWORD *)&v730 = v630 | 0x100000000;
      DWORD2(v730) = v630;
      HIDWORD(v730) = v630;
      v174 = v173;
      sub_18D04BE88((uint64_t)&v729, 0.0);
      v661 = 0x800000008;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C87E0;
      v662 = v663;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = v630;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 4) = __PAIR64__(v607, v630);
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = v630;
      sub_18D04BE88((uint64_t)&__p, 0.0);
      v633 = 0x800000008;
      v631 = (uint64_t (**)())&unk_1E25C87E0;
      v634 = v172;
      LODWORD(v632) = v630;
      *(_QWORD *)((char *)&v632 + 4) = __PAIR64__(v607, v630);
      HIDWORD(v632) = v630;
      sub_18D04BE88((uint64_t)&v631, 0.0);
      if (v174 >= 1)
        break;
LABEL_152:
      v666 = 0x100000003;
      v664 = (uint64_t (**)())&unk_1E25C7790;
      v665 = xmmword_18D313070;
      v667 = v668;
      v708 = 0x800000003;
      v706 = &off_1E25C79A0;
      v707 = xmmword_18D331E40;
      v709 = v710;
      v676 = 0x300000003;
      v674 = &unk_1E25C78E0;
      v675 = xmmword_18D30BB60;
      v677 = v678;
      v191 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)(a20 + 32) + 8 * v171);
      v192 = sub_18D04DA0C((uint64_t)&v636, *(_QWORD *)(a13 + 32) + (v171 << 6));
      if (v191(&v729, &v636, *(_QWORD *)(*(_QWORD *)(a21 + 32) + 8 * v171), &v664, &v706, &v674, v192))
      {
        v114 = 3;
        goto LABEL_538;
      }
      v715 = 0x800000008;
      v713 = (uint64_t (**)())&unk_1E25C87E0;
      v714 = xmmword_18D319930;
      v716 = v717;
      sub_18D053B2C((uint64_t)&v631, (uint64_t)&v776, (uint64_t)&v713);
      v637.__r_.__value_.__r.__words[2] = 0x800000008;
      v636 = (uint64_t (**)())&unk_1E25C87E0;
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319930;
      v638 = v639;
      sub_18D053FA4((uint64_t)&__p, (uint64_t)&v713, (uint64_t)&v636);
      v703 = 0x800000003;
      v701 = &off_1E25C79A0;
      v702 = xmmword_18D331E40;
      v704 = (double *)v705;
      sub_18D053B2C((uint64_t)&v706, (uint64_t)&v636, (uint64_t)&v701);
      v637.__r_.__value_.__r.__words[2] = 0x800000008;
      v636 = (uint64_t (**)())&unk_1E25C87E0;
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319930;
      v638 = v639;
      sub_18D053B2C((uint64_t)&v631, (uint64_t)&v760, (uint64_t)&v636);
      v691 = 0x800000003;
      v689 = &off_1E25C79A0;
      v690 = xmmword_18D331E40;
      v692 = v693;
      sub_18D053B2C((uint64_t)&v706, (uint64_t)&v636, (uint64_t)&v689);
      v193 = v619 + *(_DWORD *)(*(_QWORD *)(a9 + 32) + 4 * v171) - 1;
      v637.__r_.__value_.__r.__words[2] = 0x300000001;
      v636 = (uint64_t (**)())&unk_1E25C6C50;
      v638 = v639;
      v194 = v193 - v619;
      if (v194)
      {
        if (v194 < 0)
        {
          v197 = 0;
          LODWORD(v198) = 0;
          *(_OWORD *)&v637.__r_.__value_.__l.__data_ = 0uLL;
          LOBYTE(v195) = 1;
        }
        else
        {
          v198 = (v194 + 1);
          LODWORD(v637.__r_.__value_.__l.__data_) = 1;
          HIDWORD(v637.__r_.__value_.__r.__words[0]) = v198;
          v637.__r_.__value_.__l.__size_ = v198 | 0x100000000;
          v199 = v639;
          v195 = v198;
          v200 = v619;
          do
          {
            *(_DWORD *)v199 = v200;
            v199 = (double *)((char *)v199 + 4);
            ++v200;
            --v195;
          }
          while (v195);
          v197 = 1;
        }
      }
      else
      {
        LOBYTE(v195) = 0;
        *(_QWORD *)&v196 = 0x100000001;
        *((_QWORD *)&v196 + 1) = 0x100000001;
        *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v196;
        LODWORD(v639[0]) = v619;
        v197 = 1;
        LODWORD(v198) = 1;
      }
      v726 = 0x100000003;
      v723 = (uint64_t (**)())&unk_1E25C77C0;
      v727 = v728;
      v724 = __PAIR64__(v197, v198);
      LODWORD(v725) = v198 * v197;
      HIDWORD(v725) = v198;
      if ((_DWORD)v198)
      {
        v201 = 0;
        v202 = 0;
        do
        {
          if ((v195 & 1) == 0)
          {
            v203 = 0;
            do
            {
              *((_DWORD *)v728 + v202 + HIDWORD(v725) * v203) = *((_DWORD *)v639 + v201 + v203);
              ++v203;
            }
            while (v197 != v203);
          }
          ++v202;
          v201 += v197;
        }
        while (v202 != (_DWORD)v198);
      }
      sub_18D159B20((uint64_t)&v679, *(_QWORD *)(a14 + 32) + 112 * v171);
      v686 = 0x300000003;
      v684 = &unk_1E25C78E0;
      v685 = xmmword_18D30BB60;
      v687 = v688;
      sub_18D053B2C((uint64_t)&v674, (uint64_t)&v679, (uint64_t)&v684);
      v204 = DWORD1(v675);
      v205 = v675;
      v720 = 0x300000003;
      v718 = &unk_1E25C78E0;
      v721 = v722;
      *(_QWORD *)&v719 = __PAIR64__(v675, DWORD1(v675));
      DWORD2(v719) = v675 * DWORD1(v675);
      HIDWORD(v719) = DWORD1(v675);
      if (DWORD1(v675))
      {
        v206 = 0;
        v207 = 0;
        v208 = HIDWORD(v675);
        v209 = v677;
        do
        {
          v210 = v206;
          v211 = v207;
          for (i = v205; i; --i)
          {
            v722[v211] = v209[v210];
            v211 += v204;
            ++v210;
          }
          ++v207;
          v206 += v208;
        }
        while (v207 != v204);
      }
      v698 = 0x300000003;
      v696 = &unk_1E25C78E0;
      v697 = xmmword_18D30BB60;
      v699 = v700;
      sub_18D053B2C((uint64_t)&v684, (uint64_t)&v718, (uint64_t)&v696);
      v715 = 0x300000003;
      v713 = (uint64_t (**)())&unk_1E25C78E0;
      v714 = xmmword_18D30BB60;
      v716 = v717;
      LOBYTE(v636) = 0;
      sub_18D05C654((uint64_t)&v696, (uint64_t)&v713, (BOOL *)&v636);
      v671 = 0x300000003;
      v669 = &unk_1E25C78E0;
      v670 = xmmword_18D30BB60;
      v672 = v673;
      v657 = 0x100000003;
      v655 = (uint64_t (**)())&unk_1E25C77C0;
      v656 = xmmword_18D313070;
      v658 = v659;
      v637.__r_.__value_.__r.__words[2] = 0x10000000CLL;
      v636 = (uint64_t (**)())&unk_1E25C6200;
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D3191A0;
      v638 = v639;
      sub_18D04F504((uint64_t)&v713, (uint64_t)&v655, (uint64_t)&v636, (uint64_t)&v669);
      v715 = 0x600000006;
      v713 = (uint64_t (**)())&unk_1E25C81B0;
      v714 = xmmword_18D314680;
      v716 = v717;
      sub_18D1D4A98((uint64_t)&v669, 0, (uint64_t)&v713);
      v213 = DWORD1(v714);
      if (DWORD1(v714))
      {
        v214 = 0;
        v215 = v714;
        v216 = v716;
        v217 = v714 - 1;
        v218 = 1;
        do
        {
          v219 = *(double *)&v216[2 * v215 * v214];
          v220 = v218;
          v221 = v217;
          if (v215 >= 2)
          {
            do
            {
              v219 = v219 * *(double *)&v216[2 * v220++];
              --v221;
            }
            while (v221);
          }
          v639[v214++] = v219;
          v218 += v215;
        }
        while (v214 != v213);
      }
      v222 = v639[0];
      sub_18D04DA0C((uint64_t)&v696, *(_QWORD *)(a11 + 32) + (v171 << 6));
      v715 = 0x100000003;
      v713 = (uint64_t (**)())&unk_1E25C7790;
      v714 = xmmword_18D313070;
      v716 = v717;
      sub_18D053B2C((uint64_t)&v669, (uint64_t)&v696, (uint64_t)&v713);
      sub_18D1C9120((uint64_t)&v636, (uint64_t)&v745, (uint64_t)&v723);
      sub_18D1BE7FC((uint64_t)&v636, (uint64_t)&v713);
      v715 = 0x100000003;
      v713 = (uint64_t (**)())&unk_1E25C7790;
      v714 = xmmword_18D313070;
      v716 = v717;
      sub_18D053B2C((uint64_t)&v669, (uint64_t)&v664, (uint64_t)&v713);
      sub_18D1C9120((uint64_t)&v636, (uint64_t)&v740, (uint64_t)&v723);
      sub_18D1BE7FC((uint64_t)&v636, (uint64_t)&v713);
      v715 = 0x800000003;
      v713 = &off_1E25C79A0;
      v714 = xmmword_18D331E40;
      v716 = v717;
      sub_18D053B2C((uint64_t)&v669, (uint64_t)&v701, (uint64_t)&v713);
      sub_18D254C20((uint64_t)&v636, (uint64_t)v738, (uint64_t)&v723);
      sub_18D254DE0((uint64_t)&v636, (uint64_t)&v713);
      v715 = 0x800000003;
      v713 = &off_1E25C79A0;
      v714 = xmmword_18D331E40;
      v716 = v717;
      sub_18D053B2C((uint64_t)&v669, (uint64_t)&v689, (uint64_t)&v713);
      sub_18D254C20((uint64_t)&v636, (uint64_t)v734, (uint64_t)&v723);
      sub_18D254DE0((uint64_t)&v636, (uint64_t)&v713);
      v618 = v618 * v222;
      v619 += *(_DWORD *)(*(_QWORD *)(a9 + 32) + 4 * v171++);
      v59 = v617;
      v173 = a22;
      if (v171 == a19)
        goto LABEL_213;
    }
    v175 = 0;
    v176 = 0;
    v177 = *(_QWORD *)(a23 + 32);
    while (1)
    {
      v178 = v176 + *(_DWORD *)(v177 + 4 * v175) - 1;
      v715 = 0x800000001;
      v713 = (uint64_t (**)())&unk_1E25C6E30;
      v716 = v717;
      v179 = v178 - v176;
      if (v179)
      {
        if (v179 < 0)
        {
          v182 = 0;
          LODWORD(v183) = 0;
          v714 = 0uLL;
          LOBYTE(v180) = 1;
        }
        else
        {
          v183 = (v179 + 1);
          LODWORD(v714) = 1;
          DWORD1(v714) = v183;
          *((_QWORD *)&v714 + 1) = v183 | 0x100000000;
          v184 = v717;
          v180 = v183;
          v185 = v176;
          do
          {
            *v184++ = v185++;
            --v180;
          }
          while (v180);
          v182 = 1;
        }
      }
      else
      {
        LOBYTE(v180) = 0;
        *(_QWORD *)&v181 = 0x100000001;
        *((_QWORD *)&v181 + 1) = 0x100000001;
        v714 = v181;
        v717[0] = v176;
        v182 = 1;
        LODWORD(v183) = 1;
      }
      v637.__r_.__value_.__r.__words[2] = 0x100000008;
      v636 = (uint64_t (**)())&unk_1E25C86F0;
      v638 = v639;
      v637.__r_.__value_.__r.__words[0] = __PAIR64__(v182, v183);
      LODWORD(v637.__r_.__value_.__r.__words[1]) = v183 * v182;
      HIDWORD(v637.__r_.__value_.__r.__words[1]) = v183;
      if ((_DWORD)v183)
      {
        v186 = 0;
        v187 = 0;
        do
        {
          if ((v180 & 1) == 0)
          {
            v188 = 0;
            do
            {
              *((_DWORD *)v639 + v187 + HIDWORD(v637.__r_.__value_.__r.__words[1]) * v188) = v717[v186 + v188];
              ++v188;
            }
            while (v182 != v188);
          }
          ++v187;
          v186 += v182;
        }
        while (v187 != (_DWORD)v183);
      }
      v189 = v172;
      sub_18D053D7C((uint64_t)&v755, (uint64_t)&v636);
      v691 = 0x100000008;
      v689 = (uint64_t (**)())&unk_1E25C86C0;
      v690 = xmmword_18D319940;
      v692 = v693;
      v715 = 0x800000008;
      v713 = (uint64_t (**)())&unk_1E25C87E0;
      v714 = xmmword_18D319930;
      v716 = v717;
      v708 = 0x800000008;
      v706 = (uint64_t (**)())&unk_1E25C87E0;
      v707 = xmmword_18D319930;
      v709 = v710;
      v190 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)(a24 + 32) + 8 * v175);
      sub_18D053E04((uint64_t)&v636, (uint64_t)v795, (uint64_t)&v755);
      sub_18D053E04((uint64_t)&v701, (uint64_t)&v784, (uint64_t)&v755);
      if (v190(&v636, &v701, *(_QWORD *)(*(_QWORD *)(a25 + 32) + 8 * v175), &v689, &v713, &v706, *(double *)(*(_QWORD *)(a10 + 32) + 8 * v171)))
      {
        break;
      }
      v172 = v189;
      sub_18D053E04((uint64_t)&v636, (uint64_t)&v729, (uint64_t)&v755);
      sub_18D05495C((uint64_t)&v636, (uint64_t)&v689);
      sub_18D053C48((uint64_t)&v636, (uint64_t)&__p, (uint64_t)&v755, (uint64_t)&v755);
      sub_18D053EBC((uint64_t)&v636, (uint64_t)&v713);
      sub_18D053C48((uint64_t)&v636, (uint64_t)&v631, (uint64_t)&v755, (uint64_t)&v755);
      sub_18D053EBC((uint64_t)&v636, (uint64_t)&v706);
      v177 = *(_QWORD *)(a23 + 32);
      v176 += *(_DWORD *)(v177 + 4 * v175++);
      if (v175 == a22)
        goto LABEL_152;
    }
    v114 = 22;
    goto LABEL_538;
  }
  v618 = 1.0;
LABEL_213:
  v236 = v620;
  v237 = v620 + v630;
  v726 = 0x1000000067;
  v725 = 0;
  v724 = 0;
  v723 = &off_1E25C5F00;
  v728[0] = 0;
  v727 = 0;
  if ((int)(v613 + v620 + v630) < 0)
  {
    v596 = "nr >= 0";
    v597 = 419;
    goto LABEL_547;
  }
  if (v237 < 0)
  {
    v596 = "nc >= 0";
    v597 = 420;
LABEL_547:
    __assert_rtn("CNMatrix", "cnmatrix.h", v597, v596);
  }
  LODWORD(v724) = v613 + v620 + v630;
  HIDWORD(v724) = v620 + v630;
  LODWORD(v725) = v724 * v237;
  HIDWORD(v725) = v724;
  sub_18D255ED0((uint64_t)&v723);
  v238 = (_QWORD *)v728[0];
  v727 = (_QWORD *)v728[0];
  v715 = 0x100000067;
  v713 = &off_1E25C5F30;
  LODWORD(v714) = v613 + v620 + v630;
  DWORD1(v714) = 1;
  DWORD2(v714) = v714;
  HIDWORD(v714) = v714;
  v716 = v717;
  v623 = v714;
  if ((int)v630 < 1)
  {
    v629 = 0;
    v243 = 0;
  }
  else
  {
    if (fabs(*v796) >= 2.22044605e-16)
    {
      v242 = 1;
    }
    else
    {
      v239 = 1;
      do
      {
        v240 = v239;
        if (v630 == v239)
          break;
        v241 = fabs(v796[v239++]);
      }
      while (v241 < 2.22044605e-16);
      v242 = v240 < v630;
    }
    v629 = v242;
    if (fabs(*v790) >= 2.22044605e-16)
    {
      v243 = 1;
    }
    else
    {
      v244 = 1;
      do
      {
        v245 = v244;
        if (v630 == v244)
          break;
        v246 = fabs(v790[v244++]);
      }
      while (v246 < 2.22044605e-16);
      v243 = v245 < v630;
    }
  }
  v247 = v620;
  v628 = v620 + v630;
  if ((int)v620 < 1)
  {
    v252 = 0;
  }
  else
  {
    v248 = v793;
    if (fabs(*v793) >= 2.22044605e-16)
    {
      v252 = 1;
    }
    else
    {
      v249 = 1;
      do
      {
        v250 = v249;
        if (v620 == v249)
          break;
        v251 = fabs(v793[v249++]);
      }
      while (v251 < 2.22044605e-16);
      v252 = v250 < v620;
    }
    v253 = 0;
    v254 = *(_QWORD **)(v615 + 32);
    v255 = 8 * SHIDWORD(v725);
    v256 = 8 * *(int *)(v615 + 20);
    v257 = 8 * SHIDWORD(v725) * (unint64_t)v620;
    do
    {
      v258 = v254;
      v259 = v238;
      v260 = v620;
      do
      {
        *v259 = *v258;
        v259 = (_QWORD *)((char *)v259 + v255);
        v258 = (_QWORD *)((char *)v258 + v256);
        --v260;
      }
      while (v260);
      v261 = v257;
      v262 = v620;
      if ((int)v630 >= 1)
      {
        do
        {
          *(_QWORD *)((char *)v238 + v261) = 0;
          ++v262;
          v261 += v255;
        }
        while (v262 < v237);
      }
      v263 = 0.0;
      if (v252)
      {
        v264 = (double *)v254;
        v265 = v248;
        v266 = v620;
        do
        {
          v267 = *v265++;
          v263 = v263 + *v264 * v267;
          v264 = (double *)((char *)v264 + v256);
          --v266;
        }
        while (v266);
      }
      *(double *)&v717[2 * v253++] = v263;
      ++v238;
      ++v254;
    }
    while (v253 != v620);
  }
  v637.__r_.__value_.__r.__words[2] = 0x800000008;
  v636 = (uint64_t (**)())&unk_1E25C87E0;
  *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319930;
  v638 = v639;
  sub_18D053B2C(v616, (uint64_t)&v768, (uint64_t)&v636);
  v661 = 0x800000008;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C87E0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319930;
  v662 = v663;
  sub_18D053B2C((uint64_t)&v636, (uint64_t)&v760, (uint64_t)&__p);
  if ((int)v630 >= 1)
  {
    v268 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
    v269 = (uint64_t)v662;
    v270 = HIDWORD(v637.__r_.__value_.__r.__words[1]);
    v271 = v638;
    v272 = v794[4];
    v273 = v716;
    v274 = *(_DWORD *)(v616 + 20);
    v275 = *(_QWORD *)(v616 + 32);
    v276 = v796;
    v277 = v790;
    v278 = (double *)&v727[v620];
    v279 = 8 * SHIDWORD(v725);
    v280 = &v662[-v620];
    v281 = 8 * SHIDWORD(__p.__r_.__value_.__r.__words[2]);
    v282 = v793;
    v283 = &v727[v620 * (uint64_t)SHIDWORD(v725) + v620];
    v284 = &v638[-v620];
    v285 = 8 * SHIDWORD(v637.__r_.__value_.__r.__words[1]);
    v286 = v620;
    do
    {
      if (v236 >= 1)
      {
        v287 = (double *)&v280[(int)v286];
        v288 = v278;
        v289 = v620;
        do
        {
          *v288 = -*v287;
          v288 = (double *)((char *)v288 + v279);
          v287 = (double *)((char *)v287 + v281);
          --v289;
        }
        while (v289);
      }
      v290 = &v284[(int)v286];
      v291 = v283;
      v292 = v620;
      do
      {
        *v291 = *(_QWORD *)v290;
        ++v292;
        v291 = (_QWORD *)((char *)v291 + v279);
        v290 = (double *)((char *)v290 + v285);
      }
      while (v292 < (int)v628);
      v293 = v286 - v620;
      v294 = *(double *)(v272 + 8 * v293);
      *(double *)&v273[2 * v286] = v294;
      if (v629)
      {
        v295 = 0;
        v296 = 0.0;
        v297 = v276;
        v298 = v630;
        do
        {
          v299 = *v297++;
          v296 = v296 - *(double *)(v275 + 8 * (v293 + v295)) * v299;
          v295 += v274;
          --v298;
        }
        while (v298);
        v294 = v294 + v296;
        *(double *)&v273[2 * v286] = v294;
      }
      if (v243)
      {
        v300 = 0;
        v301 = 0.0;
        v302 = v277;
        v303 = v630;
        do
        {
          v304 = *v302++;
          v301 = v301 + v271[v293 + v300] * v304;
          v300 += v270;
          --v303;
        }
        while (v303);
        v294 = v294 + v301;
        *(double *)&v273[2 * v286] = v294;
      }
      v236 = v620;
      if (v252)
      {
        if ((int)v620 < 1)
        {
          v306 = 0.0;
        }
        else
        {
          v305 = 0;
          v306 = 0.0;
          v307 = v282;
          v308 = v620;
          do
          {
            v309 = *v307++;
            v306 = v306 - *(double *)(v269 + 8 * (v293 + v305)) * v309;
            v305 += v268;
            --v308;
          }
          while (v308);
        }
        *(double *)&v273[2 * v286] = v294 + v306;
        v236 = v620;
      }
      ++v286;
      ++v278;
      ++v283;
    }
    while (v286 < (int)v628);
  }
  v661 = 0x800000057;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C84E0;
  v663[0] = 0;
  v662 = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D331E60;
  sub_18D255CA8((uint64_t)&__p);
  v662 = (_QWORD *)v663[0];
  sub_18D053B2C((uint64_t)v738, (uint64_t)&v768, (uint64_t)&__p);
  if ((int)v613 >= 1)
  {
    v310 = 0;
    v311 = (int)v628;
    do
    {
      v312 = v310;
      if ((int)v620 >= 1)
      {
        v313 = 0;
        v314 = v766;
        v315 = v735;
        v316 = v736;
        v317 = SHIDWORD(v725);
        v318 = v727;
        v319 = 8 * v764;
        v320 = (double *)&v662[v312];
        v321 = 8 * SHIDWORD(__p.__r_.__value_.__r.__words[2]);
        do
        {
          v322 = 0.0;
          if ((int)v630 >= 1)
          {
            v323 = v320;
            v324 = v314;
            v325 = v630;
            do
            {
              v326 = *v324++;
              v322 = v322 + *v323 * v326;
              v323 = (double *)((char *)v323 + v321);
              --v325;
            }
            while (v325);
          }
          *(double *)&v318[v311 + v313 * v317] = *(double *)(v316 + 8 * ((int)v311 - (int)v628 + v313 * v315)) - v322;
          ++v313;
          v314 = (double *)((char *)v314 + v319);
        }
        while (v313 != v620);
      }
      if ((int)v630 >= 1)
      {
        v327 = &v727[v311 + v620 * (uint64_t)SHIDWORD(v725)];
        v328 = 8 * SHIDWORD(v725);
        v329 = &v662[v312];
        v330 = 8 * SHIDWORD(__p.__r_.__value_.__r.__words[2]);
        v331 = v620;
        do
        {
          *v327 = *v329;
          ++v331;
          v327 = (_QWORD *)((char *)v327 + v328);
          v329 = (_QWORD *)((char *)v329 + v330);
        }
        while (v331 < (int)v628);
      }
      v332 = v311 - (int)v628;
      v333 = v716;
      v334 = *(double *)&v748[8 * v332] - *(double *)&v743[8 * v332];
      *(double *)&v716[2 * v311] = v334;
      if (v243)
      {
        if ((int)v630 < 1)
        {
          v336 = 0.0;
        }
        else
        {
          v335 = 0;
          v336 = 0.0;
          v337 = v630;
          v338 = v790;
          do
          {
            v339 = *v338++;
            v336 = v336 + *(double *)&v662[v332 + v335] * v339;
            v335 += HIDWORD(__p.__r_.__value_.__r.__words[2]);
            --v337;
          }
          while (v337);
        }
        *(double *)&v333[2 * v311] = v334 + v336;
      }
      if (v252)
      {
        v637.__r_.__value_.__r.__words[2] = 0x100000008;
        v636 = (uint64_t (**)())&unk_1E25C86C0;
        *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319940;
        v638 = v639;
        sub_18D053B2C((uint64_t)&v760, (uint64_t)v792, (uint64_t)&v636);
        v340 = 0.0;
        v341 = 0.0;
        if ((int)v630 >= 1)
        {
          v342 = 0;
          v343 = v630;
          v344 = v638;
          do
          {
            v345 = *v344++;
            v341 = v341 + *(double *)&v662[v332 + v342] * v345;
            v342 += HIDWORD(__p.__r_.__value_.__r.__words[2]);
            --v343;
          }
          while (v343);
        }
        v346 = v716;
        v347 = v341 + *(double *)&v716[2 * v311];
        *(double *)&v716[2 * v311] = v347;
        if ((int)v620 >= 1)
        {
          v348 = 0;
          v340 = 0.0;
          v349 = v620;
          v350 = v793;
          do
          {
            v351 = *v350++;
            v340 = v340 + *(double *)(v736 + 8 * (v332 + v348)) * v351;
            v348 += v735;
            --v349;
          }
          while (v349);
        }
        *(double *)&v346[2 * v311] = v347 + v340;
      }
      ++v311;
      ++v310;
    }
    while (v311 < v623);
  }
  v352 = v663[0];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C84E0;
  v663[0] = 0;
  if (v352)
    MEMORY[0x18D78B5BC](v352, 0x1000C8000313F17);
  sub_18D25605C((uint64_t)v711);
  v353 = v620;
  v354 = v613;
  v708 = 0x100000067;
  v706 = &off_1E25C5F30;
  v707 = xmmword_18D331E70;
  v709 = v710;
  v661 = 0x100000067;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C5F30;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D331E70;
  v662 = v663;
  v637.__r_.__value_.__r.__words[2] = 0x1000000010;
  v636 = (uint64_t (**)())&unk_1E25C6320;
  *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319990;
  v638 = v639;
  sub_18D054C20((uint64_t)&v723, (uint64_t)&v713, (uint64_t)&__p, (uint64_t)&v636, (uint64_t)&v706, (uint64_t)v711);
  v703 = 0x100000057;
  v701 = (uint64_t (**)())&unk_1E25C83C0;
  v702 = xmmword_18D3197F0;
  v704 = (double *)v705;
  v637.__r_.__value_.__r.__words[2] = 0x5700000001;
  v636 = (uint64_t (**)())&unk_1E25C6DD0;
  v638 = v639;
  if (v623 - 1 == (_DWORD)v628)
  {
    LOBYTE(v355) = 0;
    *(_QWORD *)&v356 = 0x100000001;
    *((_QWORD *)&v356 + 1) = 0x100000001;
    *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v356;
    LODWORD(v639[0]) = v620 + v630;
    v357 = 1;
    v358 = 1;
  }
  else if (v623 - 1 - (int)v628 < 0)
  {
    v357 = 0;
    v358 = 0;
    *(_OWORD *)&v637.__r_.__value_.__l.__data_ = 0uLL;
    LOBYTE(v355) = 1;
  }
  else
  {
    v358 = v623 - v628;
    LODWORD(v637.__r_.__value_.__l.__data_) = 1;
    HIDWORD(v637.__r_.__value_.__r.__words[0]) = v623 - v628;
    LODWORD(v637.__r_.__value_.__r.__words[1]) = v623 - v628;
    HIDWORD(v637.__r_.__value_.__r.__words[1]) = 1;
    v359 = v639;
    v355 = (v623 - v628);
    v360 = v620 + v630;
    do
    {
      *(_DWORD *)v359 = v360;
      v359 = (double *)((char *)v359 + 4);
      ++v360;
      --v355;
    }
    while (v355);
    v357 = 1;
  }
  v698 = 0x100000057;
  v696 = &unk_1E25C83F0;
  v699 = v700;
  *(_QWORD *)&v697 = __PAIR64__(v357, v358);
  DWORD2(v697) = v358 * v357;
  HIDWORD(v697) = v358;
  if (v358)
  {
    v361 = 0;
    for (j = 0; j != v358; ++j)
    {
      if ((v355 & 1) == 0)
      {
        v363 = 0;
        do
        {
          v700[j + HIDWORD(v697) * v363] = *((_DWORD *)v639 + v361 + v363);
          ++v363;
        }
        while (v357 != v363);
      }
      v361 += v357;
    }
  }
  sub_18D1E1C4C((uint64_t)&v636, (uint64_t)&v706, (uint64_t)&v696);
  sub_18D053AA8((uint64_t)&v701, (uint64_t)&v636);
  v365 = DWORD2(v702);
  v366 = 0.0;
  if (SDWORD2(v702) < 1)
  {
    v368 = xmmword_18D319930;
  }
  else
  {
    v367 = v704;
    v368 = xmmword_18D319930;
    do
    {
      v369 = *v367++;
      v366 = v366 + v369 * v369;
      --v365;
    }
    while (v365);
  }
  v695 = 1;
  if (!v603)
  {
    v114 = 0;
    goto LABEL_415;
  }
  if (!v612)
  {
    cnstatistics::InverseChi2(v364, v61, (double)(int)v613);
    v383 = v382;
    if (v366 <= v382)
    {
      v114 = 0;
      v695 = 1;
      goto LABEL_414;
    }
    if (!v614)
    {
      if (cnprint::CNPrinter::GetLogLevel(v381) <= 1)
      {
        LOWORD(v636) = 2;
        __p.__r_.__value_.__s.__data_[0] = 1;
        v393 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v624 + 1704), "SRIF Global test rejected %d-dof measurement with Chi2 statistic %lg vs. bound %lg; no"
                                  " further testing (dolocaltest = %d)",
                                  v613,
                                  v366,
                                  v383,
                                  0);
        if (*(char *)(v624 + 1727) >= 0)
          LOBYTE(v399) = v393;
        else
          v399 = *(_QWORD *)(v624 + 1704);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v394, v395, v396, v397, v398, v399);
      }
      v695 = 0;
      sub_18D1E2AB8((uint64_t *)(v624 + 1632), *(_DWORD **)(v624 + 1680), *(_DWORD **)(v624 + 1688), (uint64_t)(*(_QWORD *)(v624 + 1688) - *(_QWORD *)(v624 + 1680)) >> 5);
      sub_18D1C59EC((uint64_t *)(v624 + 1680));
      v114 = 8;
      goto LABEL_414;
    }
    LOWORD(v636) = 2;
    __p.__r_.__value_.__s.__data_[0] = 2;
    cnprint::CNLogFormatter::FormatGeneral((const void **)(v624 + 1704), "SRIF Global test rejected %d-dof measurement with Chi2 statistic %lg vs. bound %lg; begin local testing",
      v613,
      v366,
      v382);
    if (*(char *)(v624 + 1727) >= 0)
      LOBYTE(v389) = v624 - 88;
    else
      v389 = *(_QWORD *)(v624 + 1704);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&__p, "%s", v384, v385, v386, v387, v388, v389);
    cnstatistics::InverseChi2(v390, v61, 1.0);
    v392 = v391;
    v694 = INFINITY;
    sub_18D24C43C((uint64_t)&v636, v624 + 112, &v694);
    sub_18D249DEC((uint64_t)&v689, (uint64_t)&v636);
    if (v694 > v59)
    {
      v114 = 0;
LABEL_414:
      v368 = xmmword_18D319930;
LABEL_415:
      v691 = 0x800000008;
      v689 = (uint64_t (**)())&unk_1E25C87E0;
      v690 = v368;
      v692 = v693;
      v676 = 0x800000008;
      v674 = &unk_1E25C87E0;
      v675 = v368;
      v677 = v678;
      v671 = 0x800000008;
      v669 = &unk_1E25C87E0;
      v670 = v368;
      v672 = v673;
      v720 = 0x100000008;
      v718 = &unk_1E25C86C0;
      v719 = xmmword_18D319940;
      v721 = v722;
      v731 = 0x100000008;
      v729 = (uint64_t (**)())&unk_1E25C86C0;
      v730 = xmmword_18D319940;
      v732 = v733;
      v666 = 0x100000008;
      v664 = (uint64_t (**)())&unk_1E25C86C0;
      v665 = xmmword_18D319940;
      v667 = v668;
      v661 = 0x800000001;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6E30;
      v662 = v663;
      if (v353 == 1)
      {
        v469 = 0;
        *(_QWORD *)&v470 = 0x100000001;
        *((_QWORD *)&v470 + 1) = 0x100000001;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v470;
        LODWORD(v663[0]) = 0;
        v471 = 1;
        v472 = 1;
      }
      else if (v353 <= 0)
      {
        v471 = 0;
        v472 = 0;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        v469 = 1;
      }
      else
      {
        v473 = 0;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 1;
        HIDWORD(__p.__r_.__value_.__r.__words[1]) = v353;
        __p.__r_.__value_.__r.__words[2] = v353 | 0x100000000;
        do
        {
          *((_DWORD *)v663 + v473) = v473;
          ++v473;
        }
        while (v620 != v473);
        v469 = 0;
        v471 = 1;
        v472 = v620;
      }
      v637.__r_.__value_.__r.__words[2] = 0x100000008;
      v636 = (uint64_t (**)())&unk_1E25C86F0;
      v638 = v639;
      v637.__r_.__value_.__r.__words[0] = __PAIR64__(v471, v472);
      LODWORD(v637.__r_.__value_.__r.__words[1]) = v472 * v471;
      HIDWORD(v637.__r_.__value_.__r.__words[1]) = v472;
      if (v472)
      {
        v474 = 0;
        for (k = 0; k != v472; ++k)
        {
          if ((v469 & 1) == 0)
          {
            v476 = 0;
            do
            {
              *((_DWORD *)v639 + k + HIDWORD(v637.__r_.__value_.__r.__words[1]) * v476) = *((_DWORD *)v663 + v474 + v476);
              ++v476;
            }
            while (v471 != v476);
          }
          v474 += v471;
        }
      }
      sub_18D053D7C((uint64_t)&v750, (uint64_t)&v636);
      v477 = v628 - 1;
      v661 = 0x800000001;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6E30;
      v662 = v663;
      if ((_DWORD)v628 - 1 == v620)
      {
        LOBYTE(v478) = 0;
        *(_QWORD *)&v479 = 0x100000001;
        *((_QWORD *)&v479 + 1) = 0x100000001;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v479;
        LODWORD(v663[0]) = v620;
        v480 = 1;
        v481 = 1;
      }
      else if ((int)(v477 - v620) < 0)
      {
        v480 = 0;
        v481 = 0;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        LOBYTE(v478) = 1;
      }
      else
      {
        v481 = v630;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 1;
        HIDWORD(__p.__r_.__value_.__r.__words[1]) = v630;
        __p.__r_.__value_.__r.__words[2] = v630 | 0x100000000;
        v482 = v663;
        v478 = v630;
        v483 = v620;
        do
        {
          *v482++ = v483++;
          --v478;
        }
        while (v478);
        v480 = 1;
      }
      v637.__r_.__value_.__r.__words[2] = 0x100000008;
      v636 = (uint64_t (**)())&unk_1E25C86F0;
      v638 = v639;
      v637.__r_.__value_.__r.__words[0] = __PAIR64__(v480, v481);
      LODWORD(v637.__r_.__value_.__r.__words[1]) = v481 * v480;
      HIDWORD(v637.__r_.__value_.__r.__words[1]) = v481;
      if (v481)
      {
        v484 = 0;
        for (m = 0; m != v481; ++m)
        {
          if ((v478 & 1) == 0)
          {
            v486 = 0;
            do
            {
              *((_DWORD *)v639 + m + HIDWORD(v637.__r_.__value_.__r.__words[1]) * v486) = *((_DWORD *)v663 + v484 + v486);
              ++v486;
            }
            while (v480 != v486);
          }
          v484 += v480;
        }
      }
      sub_18D053D7C((uint64_t)&v755, (uint64_t)&v636);
      sub_18D053C48((uint64_t)&v636, (uint64_t)v711, (uint64_t)&v755, (uint64_t)&v755);
      sub_18D053AA8((uint64_t)&v689, (uint64_t)&v636);
      sub_18D053C48((uint64_t)&v636, (uint64_t)v711, (uint64_t)&v750, (uint64_t)&v750);
      sub_18D053AA8((uint64_t)&v674, (uint64_t)&v636);
      sub_18D053C48((uint64_t)&v636, (uint64_t)v711, (uint64_t)&v750, (uint64_t)&v755);
      sub_18D053AA8((uint64_t)&v669, (uint64_t)&v636);
      sub_18D053E04((uint64_t)&v636, (uint64_t)&v706, (uint64_t)&v750);
      sub_18D053AA8((uint64_t)&v718, (uint64_t)&v636);
      sub_18D053E04((uint64_t)&v636, (uint64_t)&v706, (uint64_t)&v755);
      sub_18D053AA8((uint64_t)&v729, (uint64_t)&v636);
      v487 = pow(6.28318531, (double)v354 * -0.5);
      v488 = exp(v366 * -0.5);
      v661 = 0x1000000010;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6320;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319990;
      v662 = v663;
      sub_18D1D4A98(v616, 0, (uint64_t)&__p);
      v489 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
      if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
      {
        v490 = 0;
        v491 = __p.__r_.__value_.__r.__words[1];
        v492 = (uint64_t)v662;
        v493 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
        v494 = 1;
        do
        {
          v495 = *(double *)(v492 + 8 * v491 * v490);
          v496 = v494;
          v497 = v493;
          if (v491 >= 2)
          {
            do
            {
              v495 = v495 * *(double *)(v492 + 8 * v496++);
              --v497;
            }
            while (v497);
          }
          v639[v490++] = v495;
          v494 += v491;
        }
        while (v490 != v489);
      }
      v498 = v639[0];
      v661 = 0x1000000010;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6320;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319990;
      v662 = v663;
      sub_18D1D4A98((uint64_t)&v689, 0, (uint64_t)&__p);
      v499 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
      if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
      {
        v500 = 0;
        v501 = __p.__r_.__value_.__r.__words[1];
        v502 = (uint64_t)v662;
        v503 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
        v504 = 1;
        do
        {
          v505 = *(double *)(v502 + 8 * v501 * v500);
          v506 = v504;
          v507 = v503;
          if (v501 >= 2)
          {
            do
            {
              v505 = v505 * *(double *)(v502 + 8 * v506++);
              --v507;
            }
            while (v507);
          }
          v639[v500++] = v505;
          v504 += v501;
        }
        while (v500 != v499);
      }
      v508 = v639[0];
      v661 = 0x1000000010;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6320;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319990;
      v662 = v663;
      sub_18D1D4A98(v615, 0, (uint64_t)&__p);
      v509 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
      if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
      {
        v510 = 0;
        v511 = __p.__r_.__value_.__r.__words[1];
        v512 = (uint64_t)v662;
        v513 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
        v514 = 1;
        do
        {
          v515 = *(double *)(v512 + 8 * v511 * v510);
          v516 = v514;
          v517 = v513;
          if (v511 >= 2)
          {
            do
            {
              v515 = v515 * *(double *)(v512 + 8 * v516++);
              --v517;
            }
            while (v517);
          }
          v639[v510++] = v515;
          v514 += v511;
        }
        while (v510 != v509);
      }
      v518 = v639[0];
      v661 = 0x1000000010;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6320;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319990;
      v662 = v663;
      sub_18D1D4A98((uint64_t)&v674, 0, (uint64_t)&__p);
      v519 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
      if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
      {
        v520 = 0;
        v521 = __p.__r_.__value_.__r.__words[1];
        v522 = (uint64_t)v662;
        v523 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
        v524 = 1;
        do
        {
          v525 = *(double *)(v522 + 8 * v521 * v520);
          v526 = v524;
          v527 = v523;
          if (v521 >= 2)
          {
            do
            {
              v525 = v525 * *(double *)(v522 + 8 * v526++);
              --v527;
            }
            while (v527);
          }
          v639[v520++] = v525;
          v524 += v521;
        }
        while (v520 != v519);
      }
      v528 = v488 * (v487 * fabs(v618 * (v498 * v518) / (v134 * v508 * v639[0])));
      if (v695)
      {
        if (v611)
        {
          v661 = 0x100000008;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C86C0;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319940;
          v662 = v663;
          sub_18D053B2C((uint64_t)&v689, (uint64_t)&v784, (uint64_t)&__p);
          v529 = v624;
          v530 = v624 + 2408;
          v637.__r_.__value_.__r.__words[2] = 0x100000008;
          v636 = (uint64_t (**)())&unk_1E25C86C0;
          *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319940;
          v638 = v639;
          v531 = (__n128)sub_18D0540FC((uint64_t)&v729, (uint64_t)&__p, (uint64_t)&v636);
          __p.__r_.__value_.__s.__data_[0] = 0;
          v532 = (uint64_t *)(v624 + 1656);
          if (v611(v630, v795, &v636, &v689, v610, &__p, &v664, &v729, v531))
          {
            v114 = 18;
            goto LABEL_534;
          }
          if (!__p.__r_.__value_.__s.__data_[0])
          {
            sub_18D053AA8(v624 + 768, (uint64_t)&v784);
            sub_18D053AA8(v624 + 1424, (uint64_t)&v729);
            sub_18D053AA8(v624 + 872, (uint64_t)&v689);
            sub_18D053AA8(v605, (uint64_t)&v669);
            sub_18D053AA8(v604, (uint64_t)&v718);
            sub_18D053AA8(v606, (uint64_t)&v674);
            v114 = 0;
            *(double *)(v624 + 1528) = v528;
            goto LABEL_533;
          }
        }
        else
        {
          v637.__r_.__value_.__r.__words[2] = 0x800000008;
          v636 = (uint64_t (**)())&unk_1E25C87E0;
          *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319930;
          v638 = v639;
          v661 = 0x800000008;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C87E0;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319930;
          v662 = v663;
          v686 = 0x100000008;
          v684 = &unk_1E25C86F0;
          v685 = xmmword_18D319940;
          v687 = v688;
          v681 = 0x100000008;
          v679 = &unk_1E25C86F0;
          v680 = xmmword_18D319940;
          v682 = v683;
          v633 = 0x100000020;
          v631 = (uint64_t (**)())&unk_1E25C7670;
          v632 = xmmword_18D319960;
          v634 = v635;
          v529 = v624;
          v530 = v624 + 2408;
          v536 = sub_18D054568((uint64_t)&v689, (uint64_t)&v684, (uint64_t)&v679, (uint64_t)&v631, (uint64_t)&__p);
          sub_18D053AA8((uint64_t)&v636, (uint64_t)&__p);
          v532 = (uint64_t *)(v624 + 1656);
          if (v536 > v617)
          {
            sub_18D053AA8(v624 + 768, (uint64_t)&v784);
            sub_18D053AA8(v624 + 1424, (uint64_t)&v729);
            sub_18D053AA8(v624 + 872, (uint64_t)&v689);
            sub_18D053AA8(v605, (uint64_t)&v669);
            sub_18D053AA8(v604, (uint64_t)&v718);
            sub_18D053AA8(v606, (uint64_t)&v674);
            v114 = 0;
            *(double *)(v624 + 1528) = v528;
            *(_BYTE *)(v624 + 1536) = 1;
LABEL_533:
            *(_DWORD *)(v529 + 1540) = 1;
            goto LABEL_534;
          }
          sub_18D23D244((uint64_t)&__p, (uint64_t)&v636, (uint64_t)&v729);
          sub_18D053AA8((uint64_t)&v664, (uint64_t)&__p);
          *(_BYTE *)(v624 + 1536) = 2;
        }
LABEL_527:
        sub_18D053AA8(v529 + 768, (uint64_t)&v664);
        sub_18D053AA8(v529 + 872, (uint64_t)&v689);
        sub_18D053AA8(v529 + 1424, (uint64_t)&v729);
        sub_18D053AA8(v605, (uint64_t)&v669);
        sub_18D053AA8(v604, (uint64_t)&v718);
        sub_18D053AA8(v530, (uint64_t)&v674);
        *(double *)(v529 + 1528) = v528;
        if ((_DWORD)v114 == 9 || !(_DWORD)v114)
        {
          sub_18D1E4000(v532, ((uint64_t)(*(_QWORD *)(v529 + 1688) - *(_QWORD *)(v529 + 1680)) >> 5)+ ((uint64_t)(*(_QWORD *)(v529 + 1664) - *(_QWORD *)(v529 + 1656)) >> 5));
          v589 = *(_QWORD *)(v529 + 1680);
          v590 = *(_QWORD *)(v529 + 1688);
          while (v589 != v590)
          {
            sub_18D1E4090(v532, v589);
            v589 += 32;
          }
          sub_18D1C59EC((uint64_t *)(v529 + 1680));
        }
        goto LABEL_533;
      }
      if (!v608)
      {
        sub_18D053AA8(v624 + 768, (uint64_t)&v784);
        sub_18D053AA8(v624 + 872, v616);
        sub_18D23D244((uint64_t)&v636, v624 + 872, (uint64_t)&v784);
        sub_18D053AA8(v624 + 1424, (uint64_t)&v636);
        v637.__r_.__value_.__r.__words[2] = 0x800000008;
        v636 = (uint64_t (**)())&unk_1E25C87E0;
        v638 = v639;
        v637.__r_.__value_.__r.__words[0] = __PAIR64__(v630, v620);
        LODWORD(v637.__r_.__value_.__r.__words[1]) = v620 * v630;
        HIDWORD(v637.__r_.__value_.__r.__words[1]) = v620;
        sub_18D04BE88((uint64_t)&v636, 0.0);
        sub_18D053AA8(v605, (uint64_t)&v636);
        sub_18D23D244((uint64_t)&__p, v615, (uint64_t)v792);
        sub_18D23D244((uint64_t)&v631, v605, (uint64_t)&v784);
        v637.__r_.__value_.__r.__words[2] = 0x100000008;
        v636 = (uint64_t (**)())&unk_1E25C86C0;
        *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319940;
        v638 = v639;
        sub_18D053FA4((uint64_t)&__p, (uint64_t)&v631, (uint64_t)&v636);
        sub_18D053AA8(v604, (uint64_t)&v636);
        sub_18D053AA8(v606, v615);
        *(double *)(v624 + 1528) = v528;
        *(_DWORD *)(v624 + 1540) = 1;
        goto LABEL_534;
      }
      v637.__r_.__value_.__r.__words[2] = 0x1000000001;
      v636 = &off_1E25C6800;
      v638 = v639;
      if ((_DWORD)v628 == 1)
      {
        *(_QWORD *)&v537 = 0x100000001;
        *((_QWORD *)&v537 + 1) = 0x100000001;
        *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v537;
        LODWORD(v639[0]) = 0;
        v535 = 1;
        v533 = 1;
      }
      else
      {
        v533 = v620 + v630;
        if ((int)v628 <= 0)
        {
          v535 = 0;
          v533 = 0;
          *(_OWORD *)&v637.__r_.__value_.__l.__data_ = 0uLL;
        }
        else
        {
          v534 = 0;
          LODWORD(v637.__r_.__value_.__l.__data_) = 1;
          HIDWORD(v637.__r_.__value_.__r.__words[0]) = v620 + v630;
          v637.__r_.__value_.__l.__size_ = v628 | 0x100000000;
          do
          {
            *((_DWORD *)v639 + v534) = v534;
            ++v534;
          }
          while (v628 != v534);
          v535 = 1;
        }
      }
      v657 = 0x100000010;
      v655 = &off_1E25C6380;
      *(_QWORD *)&v656 = __PAIR64__(v535, v533);
      DWORD2(v656) = v535 * v533;
      HIDWORD(v656) = v533;
      v658 = v659;
      sub_18D163160((uint64_t)&v636, (uint64_t)&v655);
      v538 = HIDWORD(v724);
      v633 = 0x100000010;
      v631 = &off_1E25C6380;
      if ((v724 & 0x8000000000000000) != 0)
        __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
      v539 = vdupq_lane_s32((int32x2_t)(HIDWORD(v724) | 0x100000000), 0);
      v539.i32[1] = 1;
      v632 = (__int128)v539;
      v634 = v635;
      if (HIDWORD(v724))
      {
        v540 = 0;
        do
        {
          v635[v540] = v540;
          ++v540;
        }
        while (v538 != v540);
      }
      v637.__r_.__value_.__r.__words[2] = 0x1000000010;
      *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319990;
      v636 = &off_1E25C4C70;
      v638 = v639;
      v644[234] = &v723;
      v647 = 0x100000010;
      v645 = &off_1E25C6380;
      v646 = xmmword_18D319180;
      v648 = &v649;
      v652 = 0x100000010;
      v650 = &off_1E25C6380;
      v651 = xmmword_18D319180;
      v653 = &v654;
      sub_18D053D7C((uint64_t)&v645, (uint64_t)&v655);
      sub_18D053D7C((uint64_t)&v650, (uint64_t)&v631);
      v541 = DWORD2(v646);
      v542 = DWORD2(v651);
      v637.__r_.__value_.__r.__words[0] = __PAIR64__(DWORD2(v651), DWORD2(v646));
      v543 = (DWORD2(v651) * DWORD2(v646));
      LODWORD(v637.__r_.__value_.__r.__words[1]) = DWORD2(v651) * DWORD2(v646);
      HIDWORD(v637.__r_.__value_.__r.__words[1]) = DWORD2(v646);
      if (DWORD2(v651))
      {
        v544 = 0;
        v545 = 0;
        v546 = HIDWORD(v725);
        v547 = v727;
        v548 = v653;
        v549 = v648;
        v550 = v638;
        do
        {
          if ((_DWORD)v541)
          {
            v551 = *((_DWORD *)v548 + v545) * v546;
            v552 = (int *)v549;
            v553 = v544;
            v554 = v541;
            do
            {
              v555 = *v552++;
              v550[v553++] = *(double *)&v547[v555 + v551];
              --v554;
            }
            while (v554);
          }
          ++v545;
          v544 += v541;
        }
        while (v545 != v542);
      }
      v661 = 0x1000000010;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6320;
      __p.__r_.__value_.__l.__size_ = __PAIR64__(v542, v541);
      __p.__r_.__value_.__r.__words[2] = __PAIR64__(v541, v543);
      v556 = v663;
      v662 = v663;
      if (v541 > 0x10)
      {
        v598 = "this->max_num_rows_ >= A.num_rows_";
        v599 = 616;
      }
      else
      {
        if (v542 < 0x11)
        {
          if ((int)v543 > 3)
          {
            v559 = v638;
            v560 = (v543 - 1) >> 1;
            v561 = v638;
            v562 = v663;
            do
            {
              v563 = *(_OWORD *)v561;
              v561 += 2;
              *v562++ = v563;
              --v560;
            }
            while (v560);
            *(_OWORD *)&v663[(v543 - 2)] = *(_OWORD *)&v559[(v543 - 2)];
          }
          else if ((int)v543 >= 1)
          {
            v557 = v638;
            do
            {
              v558 = *(_QWORD *)v557++;
              *v556++ = v558;
              --v543;
            }
            while (v543);
          }
          v637.__r_.__value_.__r.__words[2] = 0x100000010;
          *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319180;
          v636 = &off_1E25C5300;
          v638 = v639;
          *(_QWORD *)&v639[16] = &v713;
          v642 = 0x100000010;
          v640 = &off_1E25C6380;
          v641 = xmmword_18D319180;
          v643 = (int *)v644;
          sub_18D053D7C((uint64_t)&v640, (uint64_t)&v655);
          v564 = v641;
          v565 = DWORD1(v641);
          v637.__r_.__value_.__r.__words[0] = v641;
          v566 = (DWORD1(v641) * v641);
          v637.__r_.__value_.__l.__size_ = __PAIR64__(v641, v566);
          if ((int)v566 >= 1)
          {
            v567 = v716;
            v568 = (DWORD1(v641) * v641);
            v569 = v643;
            v570 = v638;
            do
            {
              v571 = *v569++;
              *v570++ = *(double *)&v567[2 * v571];
              --v568;
            }
            while (v568);
          }
          v681 = 0x100000010;
          v679 = &unk_1E25C6350;
          *(_QWORD *)&v680 = __PAIR64__(v565, v564);
          *((_QWORD *)&v680 + 1) = __PAIR64__(v564, v566);
          v572 = v683;
          v682 = v683;
          if (v564 > 0x10)
          {
            v600 = "this->max_num_rows_ >= A.num_rows_";
            v601 = 616;
          }
          else
          {
            if (v565 < 2)
            {
              if ((int)v566 > 3)
              {
                v575 = v638;
                v576 = (v566 - 1) >> 1;
                v577 = v638;
                v578 = v683;
                do
                {
                  v579 = *(_OWORD *)v577;
                  v577 += 2;
                  *v578++ = v579;
                  --v576;
                }
                while (v576);
                *(_OWORD *)&v683[(v566 - 2)] = *(_OWORD *)&v575[(v566 - 2)];
              }
              else if ((int)v566 >= 1)
              {
                v573 = v638;
                do
                {
                  v574 = *(_QWORD *)v573++;
                  *v572++ = v574;
                  --v566;
                }
                while (v566);
              }
              v633 = 0x1000000010;
              v631 = (uint64_t (**)())&unk_1E25C6320;
              v632 = xmmword_18D319990;
              v634 = v635;
              v686 = 0x100000010;
              v684 = &unk_1E25C6350;
              v685 = xmmword_18D319180;
              v687 = v688;
              v637.__r_.__value_.__r.__words[2] = 0x1000000010;
              v636 = (uint64_t (**)())&unk_1E25C6320;
              *(_OWORD *)&v637.__r_.__value_.__l.__data_ = xmmword_18D319990;
              v638 = v639;
              sub_18D054C20((uint64_t)&__p, (uint64_t)&v679, (uint64_t)&v684, (uint64_t)&v636, (uint64_t)&v706, (uint64_t)&v631);
              v686 = 0x800000001;
              v684 = &unk_1E25C6E30;
              v687 = v688;
              v532 = (uint64_t *)(v624 + 1656);
              if (v620 == 1)
              {
                *(_QWORD *)&v580 = 0x100000001;
                *((_QWORD *)&v580 + 1) = 0x100000001;
                v685 = v580;
                v688[0] = 0;
                v581 = 1;
                v247 = 1;
              }
              else if ((int)v620 <= 0)
              {
                v581 = 0;
                v247 = 0;
                v685 = 0uLL;
              }
              else
              {
                v582 = 0;
                LODWORD(v685) = 1;
                DWORD1(v685) = v620;
                *((_QWORD *)&v685 + 1) = v620 | 0x100000000;
                do
                {
                  v688[v582] = v582;
                  ++v582;
                }
                while (v620 != v582);
                v581 = 1;
              }
              v637.__r_.__value_.__r.__words[2] = 0x100000008;
              v636 = (uint64_t (**)())&unk_1E25C86F0;
              v637.__r_.__value_.__r.__words[0] = __PAIR64__(v581, v247);
              LODWORD(v637.__r_.__value_.__r.__words[1]) = v581 * v247;
              HIDWORD(v637.__r_.__value_.__r.__words[1]) = v247;
              v638 = v639;
              sub_18D163160((uint64_t)&v684, (uint64_t)&v636);
              sub_18D053D7C((uint64_t)&v750, (uint64_t)&v636);
              v686 = 0x800000001;
              v684 = &unk_1E25C6E30;
              v583 = v688;
              v687 = v688;
              v584 = v620;
              v529 = v624;
              if (v477 == v620)
              {
                *(_QWORD *)&v585 = 0x100000001;
                *((_QWORD *)&v585 + 1) = 0x100000001;
                v685 = v585;
                v688[0] = v620;
                v586 = 1;
                v587 = 1;
                v530 = v624 + 2408;
              }
              else
              {
                v530 = v624 + 2408;
                if ((int)(v477 - v620) < 0)
                {
                  v586 = 0;
                  v587 = 0;
                  v685 = 0uLL;
                }
                else
                {
                  v587 = v630;
                  LODWORD(v685) = 1;
                  DWORD1(v685) = v630;
                  *((_QWORD *)&v685 + 1) = v630 | 0x100000000;
                  v588 = v630;
                  do
                  {
                    *v583++ = v584++;
                    --v588;
                  }
                  while (v588);
                  v586 = 1;
                }
              }
              v637.__r_.__value_.__r.__words[2] = 0x100000008;
              v636 = (uint64_t (**)())&unk_1E25C86F0;
              v637.__r_.__value_.__r.__words[0] = __PAIR64__(v586, v587);
              LODWORD(v637.__r_.__value_.__r.__words[1]) = v586 * v587;
              HIDWORD(v637.__r_.__value_.__r.__words[1]) = v587;
              v638 = v639;
              sub_18D163160((uint64_t)&v684, (uint64_t)&v636);
              sub_18D053D7C((uint64_t)&v755, (uint64_t)&v636);
              sub_18D053C48((uint64_t)&v636, (uint64_t)&v631, (uint64_t)&v755, (uint64_t)&v755);
              sub_18D053AA8((uint64_t)&v689, (uint64_t)&v636);
              sub_18D053C48((uint64_t)&v636, (uint64_t)&v631, (uint64_t)&v750, (uint64_t)&v750);
              sub_18D053AA8((uint64_t)&v674, (uint64_t)&v636);
              sub_18D053C48((uint64_t)&v636, (uint64_t)&v631, (uint64_t)&v750, (uint64_t)&v755);
              sub_18D053AA8((uint64_t)&v669, (uint64_t)&v636);
              sub_18D053E04((uint64_t)&v636, (uint64_t)&v706, (uint64_t)&v750);
              sub_18D053AA8((uint64_t)&v718, (uint64_t)&v636);
              sub_18D053E04((uint64_t)&v636, (uint64_t)&v706, (uint64_t)&v755);
              sub_18D053AA8((uint64_t)&v729, (uint64_t)&v636);
              sub_18D053AA8((uint64_t)&v664, (uint64_t)&v784);
              goto LABEL_527;
            }
            v600 = "this->max_num_cols_ >= A.num_cols_";
            v601 = 617;
          }
          __assert_rtn("CNMatrix", "cnmatrix.h", v601, v600);
        }
        v598 = "this->max_num_cols_ >= A.num_cols_";
        v599 = 617;
      }
      __assert_rtn("CNMatrix", "cnmatrix.h", v599, v598);
    }
    sub_18D2560EC((uint64_t)&v729, v613 + v630, v613);
    sub_18D254FE4((uint64_t)&v636, (uint64_t)v738);
    sub_18D255098((uint64_t)&__p, (uint64_t)&v689, (uint64_t)&v636);
    if ((int)v630 >= 1)
    {
      v400 = 0;
      v401 = (uint64_t)v662;
      v402 = v732;
      v403 = 8 * SHIDWORD(v730);
      v404 = 8 * SHIDWORD(__p.__r_.__value_.__r.__words[2]);
      do
      {
        v405 = (_QWORD *)v401;
        v406 = v402;
        v407 = v613;
        if ((int)v613 >= 1)
        {
          do
          {
            *v406 = *v405;
            v406 = (_QWORD *)((char *)v406 + v403);
            v405 = (_QWORD *)((char *)v405 + v404);
            --v407;
          }
          while (v407);
        }
        ++v400;
        ++v402;
        v401 += 8;
      }
      while (v400 != v630);
    }
    v408 = v663[0];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C87B0;
    v663[0] = 0;
    if (v408)
      MEMORY[0x18D78B5BC](v408, 0x1000C8000313F17);
    v626 = (const void **)(v624 + 1704);
    v409 = v639[0];
    v636 = &off_1E25C87B0;
    v639[0] = 0.0;
    if (v409 != 0.0)
      MEMORY[0x18D78B5BC](*(_QWORD *)&v409, 0x1000C8000313F17);
    if ((int)v613 >= 1)
    {
      v410 = SHIDWORD(v730);
      v411 = v732;
      v412 = &v732[v630];
      v413 = 8 * SHIDWORD(v730);
      v414 = v630;
      do
      {
        v415 = v412;
        v416 = v613;
        do
        {
          *v415 = 0;
          v415 = (_QWORD *)((char *)v415 + v413);
          --v416;
        }
        while (v416);
        v411[v414 + (v414 - v630) * v410] = 0x3FF0000000000000;
        ++v414;
        ++v412;
      }
      while (v414 < (int)(v613 + v630));
    }
    sub_18D2551AC((uint64_t)&v664, (uint64_t)&v729);
    sub_18D1DF868(0, v613 - 1, (uint64_t)&v636);
    sub_18D1DF7FC((uint64_t)&v636, (uint64_t)&v669);
    sub_18D1DFD60((uint64_t)&v636, (uint64_t)&v664, (uint64_t)&v669, (uint64_t)&v669);
    sub_18D1DFC34((uint64_t)&v636, &v694, (uint64_t)&v655);
    v418 = v639[0];
    v636 = (uint64_t (**)())&unk_1E25C84B0;
    v639[0] = 0.0;
    if (v418 != 0.0)
      MEMORY[0x18D78B5BC](*(_QWORD *)&v418, 0x1000C8000313F17);
    v417.n128_f64[0] = v694;
    if (v694 > v59)
    {
      v114 = 0;
LABEL_408:
      v466 = v659[0];
      v655 = (uint64_t (**)())&unk_1E25C84B0;
      v659[0] = 0;
      if (v466)
        MEMORY[0x18D78B5BC](v466, 0x1000C8000313F17, v417);
      v467 = v668[0];
      v664 = &off_1E25C8840;
      v668[0] = 0;
      v354 = v613;
      if (v467)
        MEMORY[0x18D78B5BC](v467, 0x1000C8000313F17, v417);
      v468 = v733[0];
      v729 = &off_1E25C8840;
      v733[0] = 0;
      if (v468)
        MEMORY[0x18D78B5BC](v468, 0x1000C8000313F17, v417);
      goto LABEL_414;
    }
    v661 = 0x100000057;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C83C0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D3197F0;
    v662 = v663;
    sub_18D0540FC((uint64_t)&v745, (uint64_t)&v740, (uint64_t)&__p);
    sub_18D1DFED0((uint64_t)&v655, (uint64_t)&v674);
    sub_18D1DFE68((uint64_t)&v674, (uint64_t)&__p, (uint64_t)&v636);
    sub_18D1DFE68((uint64_t)&v655, (uint64_t)&v636, (uint64_t)&v631);
    v636 = (uint64_t (**)())&unk_1E25C5E70;
    v419 = (cnprint::CNPrinter *)v678[0];
    v674 = &unk_1E25C84B0;
    v678[0] = 0;
    if (v419)
      v419 = (cnprint::CNPrinter *)MEMORY[0x18D78B5BC](v419, 0x1000C8000313F17);
    v686 = 0x100000057;
    v684 = &unk_1E25C83F0;
    *(_QWORD *)&v685 = v613 | 0x100000000;
    DWORD2(v685) = v613;
    HIDWORD(v685) = v613;
    v687 = v688;
    if ((int)v613 < 1)
    {
      v423 = 0;
      v422 = 0;
    }
    else
    {
      v420 = 0;
      v421 = 0;
      v422 = 0;
      v423 = 0;
      do
      {
        v424 = (double *)((char *)&v658[v420 / 8] + v420 * SHIDWORD(v656));
        v425 = 0.0;
        v426 = v421;
        do
        {
          v425 = v425 + *v424 * *v424;
          ++v426;
          v424 += SHIDWORD(v656);
        }
        while (v426 < v613);
        v427 = *(double *)&v634[2 * v421] * (*(double *)&v634[2 * v421] / v425);
        if (v427 <= v392)
        {
          v687[v422++] = v421;
          ++v423;
        }
        else
        {
          if (cnprint::CNPrinter::GetLogLevel(v419) <= 1)
          {
            LOWORD(v636) = 2;
            LOBYTE(v674) = 1;
            v428 = cnprint::CNLogFormatter::FormatGeneral(v626, "SRIF Local test rejected measurement with Chi2 statistic %lg vs. bound %lg.", v427, v392);
            if (*(char *)(v624 + 1727) >= 0)
              LOBYTE(v434) = v428;
            else
              v434 = *(_QWORD *)(v624 + 1704);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&v674, "%s", v429, v430, v431, v432, v433, v434);
          }
          sub_18D255308(v624, v421);
        }
        ++v421;
        v420 += 8;
      }
      while (v421 != v613);
    }
    v435 = vdupq_lane_s32((int32x2_t)(v422 | 0x100000000), 0);
    v435.i32[1] = 1;
    v685 = (__int128)v435;
    sub_18D255408(v624, (uint64_t)&v684);
    v353 = v620;
    if ((int)v613 > v423 && v423 >= 1)
    {
      sub_18D255608((uint64_t)&v718, v628 - 1);
      sub_18D25559C((uint64_t)&v679, (uint64_t)&v718);
      v637.__r_.__value_.__r.__words[2] = 0x100000057;
      v636 = (uint64_t (**)())&unk_1E25C83F0;
      v437 = v639;
      v638 = v639;
      v637.__r_.__value_.__r.__words[0] = v685;
      v438 = (DWORD1(v685) * v685);
      v637.__r_.__value_.__l.__size_ = __PAIR64__(v685, v438);
      if ((int)v438 >= 1)
      {
        v439 = v687;
        do
        {
          v440 = *v439++;
          *(_DWORD *)v437 = v440 + v628;
          v437 = (double *)((char *)v437 + 4);
          --v438;
        }
        while (v438);
      }
      sub_18D255530((uint64_t)&v674, (uint64_t)&v679, (uint64_t)&v636);
      sub_18D25569C((uint64_t)&v636, (uint64_t)&v723, (uint64_t)&v674);
      v441 = sub_18D053AA8((uint64_t)&v723, (uint64_t)&v636);
      v644[37] = &unk_1E25C5EA0;
      *(_QWORD *)&v639[2] = &unk_1E25C5EA0;
      v442 = v639[0];
      v636 = &off_1E25C5F00;
      v639[0] = 0.0;
      if (v442 != 0.0)
        MEMORY[0x18D78B5BC](*(_QWORD *)&v442, 0x1000C8000313F17, v441);
      sub_18D256A50((uint64_t)&v636, (uint64_t)&v713, (uint64_t)&v674);
      sub_18D053AA8((uint64_t)&v713, (uint64_t)&v636);
      sub_18D254F4C((uint64_t)&v723, (uint64_t)&v713, (uint64_t)&v706, (uint64_t)v711);
      sub_18D1DF868(v628, v422 + v628 - 1, (uint64_t)&v679);
      sub_18D1DF7FC((uint64_t)&v679, (uint64_t)&v636);
      sub_18D053D7C((uint64_t)&v696, (uint64_t)&v636);
      sub_18D1E1C4C((uint64_t)&v636, (uint64_t)&v706, (uint64_t)&v696);
      sub_18D053AA8((uint64_t)&v701, (uint64_t)&v636);
      cnstatistics::InverseChi2(v443, v602, (double)v423);
      v445 = v417.n128_f64[0];
      v446 = DWORD2(v702);
      v447 = 0.0;
      if (SDWORD2(v702) >= 1)
      {
        v448 = (unint64_t *)v704;
        do
        {
          v449 = *v448++;
          v417.n128_u64[0] = v449;
          v447 = v447 + v417.n128_f64[0] * v417.n128_f64[0];
          --v446;
        }
        while (v446);
      }
      if (v447 <= v445)
      {
        v114 = 9;
        v457 = 1;
      }
      else
      {
        if (cnprint::CNPrinter::GetLogLevel(v444) <= 1)
        {
          LOWORD(v636) = 2;
          LOBYTE(v679) = 1;
          v450 = cnprint::CNLogFormatter::FormatGeneral(v626, "SRIF Global test rejected %d-dof measurement with Chi2 statistic %lg vs. bound %lg after measurement set changed", v423, v447, v445);
          if (*(char *)(v624 + 1727) >= 0)
            LOBYTE(v456) = v450;
          else
            v456 = *(_QWORD *)(v624 + 1704);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&v679, "%s", v451, v452, v453, v454, v455, v456);
        }
        v457 = 0;
        v114 = 8;
      }
      v695 = v457;
      goto LABEL_408;
    }
    if ((_DWORD)v613 == v423)
    {
      if (cnprint::CNPrinter::GetLogLevel(v436) <= 1)
      {
        LOWORD(v636) = 2;
        LOBYTE(v674) = 1;
        v458 = cnprint::CNLogFormatter::FormatGeneral(v626, "Measurement set unchanged after local test.");
        if (*(char *)(v624 + 1727) >= 0)
          LOBYTE(v464) = v458;
        else
          v464 = *(_QWORD *)(v624 + 1704);
LABEL_404:
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v636, (unsigned __int8 *)&v674, "%s", v459, v460, v461, v462, v463, v464);
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel(v436) <= 1)
    {
      LOWORD(v636) = 2;
      LOBYTE(v674) = 1;
      v465 = cnprint::CNLogFormatter::FormatGeneral(v626, "Measurement set eliminated after local test.");
      if (*(char *)(v624 + 1727) >= 0)
        LOBYTE(v464) = v465;
      else
        v464 = *(_QWORD *)(v624 + 1704);
      goto LABEL_404;
    }
    v695 = 0;
    v114 = 8;
    goto LABEL_408;
  }
  v637.__r_.__value_.__r.__words[2] = 0x100000057;
  v636 = (uint64_t (**)())&unk_1E25C83F0;
  *(_QWORD *)&v370 = 0x100000001;
  *((_QWORD *)&v370 + 1) = 0x100000001;
  *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v370;
  v638 = v639;
  LODWORD(v639[0]) = v613;
  sub_18D1E2DD8((uint64_t)&__p);
  v691 = 0x100000001;
  v689 = (uint64_t (**)())&unk_1E25C6A40;
  v692 = v693;
  *(_QWORD *)&v371 = 0x100000001;
  *((_QWORD *)&v371 + 1) = 0x100000001;
  v690 = v371;
  sub_18D04BE88((uint64_t)&v689, 1.0);
  v633 = 0x100000001;
  v631 = (uint64_t (**)())&unk_1E25C6A40;
  *(_QWORD *)&v372.f64[0] = 0x100000001;
  *(_QWORD *)&v372.f64[1] = 0x100000001;
  v632 = (__int128)v372;
  v634 = v635;
  v372.f64[0] = (double)(int)v613;
  sub_18D064EF4((uint64_t)&v689, (uint64_t)&v631, v372);
  v373 = sub_18D053AA8((uint64_t)v662, (uint64_t)&v631);
  v374 = v612(1, &v636, &__p, v613, &v745, &v740, v738, v734, v373, v630, v616, v609, &v695, &v706, v711);
  v375 = v695 == 0;
  v376 = v663[0];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C8300;
  v663[0] = 0;
  v368 = xmmword_18D319930;
  if (v376)
  {
    v377 = v376 - 16;
    v378 = *(_QWORD *)(v376 - 8);
    if (v378)
    {
      v379 = 736 * v378;
      v380 = v376 - 736;
      do
      {
        *(_QWORD *)(v380 + v379) = &unk_1E25C5E70;
        v379 -= 736;
      }
      while (v379);
    }
    MEMORY[0x18D78B5BC](v377, 0x1081C80BC64BFAFLL);
    v368 = xmmword_18D319930;
  }
  if (!v374)
  {
    v114 = (8 * v375);
    goto LABEL_415;
  }
  v114 = 10;
LABEL_534:
  v591 = v712;
  v711[0] = &off_1E25C5F00;
  v712 = 0;
  if (v591)
    MEMORY[0x18D78B5BC](v591, 0x1000C8000313F17);
  v592 = v728[0];
  v723 = &off_1E25C5F00;
  v728[0] = 0;
  if (v592)
    MEMORY[0x18D78B5BC](v592, 0x1000C8000313F17);
LABEL_538:
  v593 = v737;
  v734[0] = &off_1E25C84E0;
  v737 = 0;
  if (v593)
    MEMORY[0x18D78B5BC](v593, 0x1000C8000313F17);
  v594 = v739;
  v738[0] = &off_1E25C84E0;
  v739 = 0;
  if (v594)
    MEMORY[0x18D78B5BC](v594, 0x1000C8000313F17);
  return v114;
}

void sub_18D2547E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = STACK[0x1420];
  STACK[0x13F8] = v1 + 16;
  STACK[0x1420] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  v4 = STACK[0x1CB0];
  STACK[0x1C88] = (unint64_t)&off_1E25C8840;
  STACK[0x1CB0] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  v5 = STACK[0x32B0];
  STACK[0x3288] = (unint64_t)&off_1E25C8840;
  STACK[0x32B0] = 0;
  if (v5)
    MEMORY[0x18D78B5BC](v5, 0x1000C8000313F17);
  v6 = STACK[0x2E78];
  STACK[0x2E50] = (unint64_t)&off_1E25C5F00;
  STACK[0x2E78] = 0;
  if (v6)
    MEMORY[0x18D78B5BC](v6, 0x1000C8000313F17);
  v7 = STACK[0x3278];
  STACK[0x3250] = (unint64_t)&off_1E25C5F00;
  STACK[0x3278] = 0;
  if (v7)
    MEMORY[0x18D78B5BC](v7, 0x1000C8000313F17);
  v8 = STACK[0x3318];
  STACK[0x32F0] = (unint64_t)&off_1E25C84E0;
  STACK[0x3318] = 0;
  if (v8)
    MEMORY[0x18D78B5BC](v8, 0x1000C8000313F17);
  v9 = STACK[0x3348];
  STACK[0x3320] = (unint64_t)&off_1E25C84E0;
  STACK[0x3348] = 0;
  if (v9)
    MEMORY[0x18D78B5BC](v9, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D254C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int32x4_t v6;
  uint64_t i;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  int32x4_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD v24[8];

  v3 = *(unsigned int *)(a2 + 12);
  v22 = 0x100000008;
  v20 = &unk_1E25C86F0;
  if ((v3 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v6 = vdupq_lane_s32((int32x2_t)(v3 | 0x100000000), 0);
  v6.i32[1] = 1;
  v21 = v6;
  v23 = v24;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      v24[i] = i;
  }
  *(_QWORD *)(a1 + 24) = 0x800000003;
  *(_OWORD *)(a1 + 8) = xmmword_18D331E40;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C50C0;
  *(_QWORD *)(a1 + 232) = a2;
  *(_QWORD *)(a1 + 264) = 0x100000003;
  *(_QWORD *)(a1 + 240) = &unk_1E25C77C0;
  *(_OWORD *)(a1 + 248) = xmmword_18D313070;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 320) = 0x100000008;
  *(_QWORD *)(a1 + 296) = &unk_1E25C86F0;
  *(_OWORD *)(a1 + 304) = xmmword_18D319940;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  sub_18D053D7C(a1 + 240, a3);
  result = sub_18D053D7C(a1 + 296, (uint64_t)&v20);
  v9 = *(unsigned int *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 312);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v9)
      {
        v15 = *(int **)(a1 + 272);
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 328) + 4 * v12) * v13;
        v17 = *(_QWORD *)(a1 + 32);
        v18 = v11;
        result = v9;
        do
        {
          v19 = *v15++;
          *(_QWORD *)(v17 + 8 * v18++) = *(_QWORD *)(v14 + 8 * (v19 + v16));
          --result;
        }
        while (result);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return result;
}

uint64_t sub_18D254DE0(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 232);
        v8 = *(int **)(result + 272);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 328) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D254EC8(_QWORD *result)
{
  result[37] = &unk_1E25C5EA0;
  result[30] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D254EF0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C84E0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D254F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v12 = 0x100000067;
  v10 = &off_1E25C5F30;
  v11 = xmmword_18D331E70;
  v13 = &v14;
  v7 = 0x1000000010;
  v5 = &unk_1E25C6320;
  v6 = xmmword_18D319990;
  v8 = &v9;
  return sub_18D054C20(a1, a2, (uint64_t)&v10, (uint64_t)&v5, a3, a4);
}

uint64_t sub_18D254FE4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  v5 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x5700000008;
  *(_QWORD *)a1 = &off_1E25C87B0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = v5 * v4;
  *(_DWORD *)(a1 + 20) = v4;
  sub_18D255CA8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return sub_18D073454(a2, a1);
}

void sub_18D255050(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  *v1 = v2;
  v4 = v1[5];
  v1[5] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D255098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x5700000008;
  *(_QWORD *)a1 = &off_1E25C87B0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D331E80;
  sub_18D255CA8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D255108(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  *v1 = v2;
  v4 = v1[5];
  v1[5] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D255150(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C87B0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D2551AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = 0x10000005FLL;
  v7 = &off_1E25C8810;
  v8 = xmmword_18D331E90;
  v10 = &v11;
  sub_18D1E22B8((uint64_t)v5);
  *(_QWORD *)(a1 + 24) = 0x570000005FLL;
  *(_QWORD *)a1 = &off_1E25C8840;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D331EA0;
  sub_18D256334(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  sub_18D05C770(a2, (uint64_t)&v7, (uint64_t)v5, a1);
  result = v6;
  v5[0] = &unk_1E25C84B0;
  v6 = 0;
  if (result)
    return MEMORY[0x18D78B5BC](result, 0x1000C8000313F17);
  return result;
}

void sub_18D255290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  *v14 = v15;
  v17 = v14[5];
  v14[5] = 0;
  if (v17)
    MEMORY[0x18D78B5BC](v17, 0x1000C8000313F17);
  *v14 = &unk_1E25C5E70;
  if (a14)
    MEMORY[0x18D78B5BC](a14, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_18D255308(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  cnprint::CNPrinter *v8;
  uint64_t v9;
  const char *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  __int16 v19;

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 1680);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 1688) - v3) >> 5))
  {
    v5 = (uint64_t *)(a1 + 1632);
    v6 = *(_QWORD *)(a1 + 1640);
    v7 = v3 + 32 * a2;
    if (v6 >= *(_QWORD *)(a1 + 1648))
    {
      v8 = (cnprint::CNPrinter *)sub_18D1E09D4(v5, v7);
    }
    else
    {
      sub_18D1E096C((uint64_t)v5, v7);
      v8 = (cnprint::CNPrinter *)(v6 + 32);
    }
    *(_QWORD *)(a1 + 1640) = v8;
    if (cnprint::CNPrinter::GetLogLevel(v8) <= 1)
    {
      v19 = 2;
      v18 = 1;
      v9 = v3 + 32 * v2;
      v10 = (const char *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const char **)v10;
      v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1704), "Rejected measurement of type,%d,%s,totalRejected,%d", *(_DWORD *)(v3 + 32 * v2), v10, (*(_QWORD *)(a1 + 1640) - *(_QWORD *)(a1 + 1632)) >> 5);
      if (*(char *)(a1 + 1727) >= 0)
        LOBYTE(v17) = v11;
      else
        v17 = *(_QWORD *)(a1 + 1704);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "%s", v12, v13, v14, v15, v16, v17);
    }
  }
}

void sub_18D255408(uint64_t a1, uint64_t a2)
{
  char *v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char *v17;
  char *v18;
  unint64_t v19;
  char **v20;

  v3 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 12);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6 || (v5 | v4) == 0)
  {
LABEL_9:
    if ((char **)(a1 + 1680) != &v17)
      sub_18D1E2AB8((uint64_t *)(a1 + 1680), v17, v3, (v3 - v17) >> 5);
  }
  else
  {
    v3 = 0;
    v9 = 1;
    while (1)
    {
      v10 = *(int *)(*(_QWORD *)(a2 + 32) + 4 * (int)(v9 - 1));
      v11 = *(_QWORD *)(a1 + 1680);
      if (v10 >= (*(_QWORD *)(a1 + 1688) - v11) >> 5)
        break;
      v12 = v11 + 32 * v10;
      if ((unint64_t)v3 >= v19)
      {
        v3 = (char *)sub_18D1E09D4((uint64_t *)&v17, v12);
      }
      else
      {
        sub_18D1E096C((uint64_t)&v17, v12);
        v3 += 32;
      }
      v18 = v3;
      v14 = *(_DWORD *)(a2 + 8);
      v13 = *(_DWORD *)(a2 + 12);
      if (v14 <= v13)
        v15 = *(_DWORD *)(a2 + 12);
      else
        v15 = *(_DWORD *)(a2 + 8);
      if (v14)
      {
        if (v13)
        {
          if (v15 > v9++)
            continue;
        }
      }
      goto LABEL_9;
    }
  }
  v20 = &v17;
  sub_18D1C59AC((void ***)&v20);
}

void sub_18D255510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_18D1C59AC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D255530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000067;
  *(_QWORD *)a1 = &off_1E25C5F60;
  *(_OWORD *)(a1 + 8) = xmmword_18D331E70;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D1CD0EC(a2, a3, a1);
}

void sub_18D255588(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D25559C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x100000010;
  *(_QWORD *)a1 = &off_1E25C6380;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D2555F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D255608(uint64_t result, int a2)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = (_QWORD *)(result + 8);
  *(_QWORD *)(result + 24) = 0x1000000001;
  *(_QWORD *)result = &off_1E25C6800;
  v3 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (a2)
  {
    if (a2 < 0)
    {
      *v2 = 0;
      *(_QWORD *)(result + 16) = 0;
    }
    else
    {
      v4 = 0;
      v5 = (a2 + 1);
      *(_DWORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = v5;
      *(_DWORD *)(result + 16) = v5;
      *(_DWORD *)(result + 20) = 1;
      do
      {
        v3[v4] = v4;
        ++v4;
      }
      while (v5 != v4);
    }
  }
  else
  {
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    *(_OWORD *)v2 = v6;
    *v3 = 0;
  }
  return result;
}

_QWORD *sub_18D255674(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D255688(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D25569C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int32x4_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t (**v22)();
  int32x4_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD v26[16];

  v3 = *(unsigned int *)(a2 + 12);
  v24 = 0x100000010;
  v22 = &off_1E25C6380;
  if ((v3 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v7 = vdupq_lane_s32((int32x2_t)(v3 | 0x100000000), 0);
  v7.i32[1] = 1;
  v23 = v7;
  v25 = v26;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      v26[i] = i;
  }
  v9 = sub_18D25605C(a1);
  *(_QWORD *)a1 = &off_1E25C4BE0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 80) = 0x100000067;
  *(_QWORD *)(v9 + 56) = &off_1E25C5F60;
  *(_OWORD *)(a1 + 64) = xmmword_18D331E70;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 536) = 0x100000010;
  *(_QWORD *)(a1 + 512) = &off_1E25C6380;
  *(_OWORD *)(a1 + 520) = xmmword_18D319180;
  *(_QWORD *)(a1 + 544) = a1 + 552;
  sub_18D053D7C(v9 + 56, a3);
  result = sub_18D053D7C(a1 + 512, (uint64_t)&v22);
  v11 = *(unsigned int *)(a1 + 72);
  v12 = *(unsigned int *)(a1 + 528);
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v12;
  *(_DWORD *)(a1 + 16) = v12 * v11;
  *(_DWORD *)(a1 + 20) = v11;
  if (!*(_QWORD *)(a1 + 40))
    __assert_rtn("CNSubMatrix", "cnsubmatrix.h", 160, "this->allocated_data_ != NULL");
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = *(_DWORD *)(a2 + 20);
    v16 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v11)
      {
        v17 = *(int **)(a1 + 88);
        v18 = *(_DWORD *)(*(_QWORD *)(a1 + 544) + 4 * v14) * v15;
        v19 = *(_QWORD *)(a1 + 32);
        v20 = v13;
        result = v11;
        do
        {
          v21 = *v17++;
          *(_QWORD *)(v19 + 8 * v20++) = *(_QWORD *)(v16 + 8 * (v21 + v18));
          --result;
        }
        while (result);
      }
      ++v14;
      v13 += v11;
    }
    while (v14 != v12);
  }
  return result;
}

void sub_18D255874(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v1[64] = &unk_1E25C5EA0;
  v1[7] = &unk_1E25C5EA0;
  *v1 = &off_1E25C5F00;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D2558D0(_QWORD *a1)
{
  uint64_t v2;

  a1[64] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C5F00;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D255940(_QWORD *result)
{
  result[109] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D255964(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D255978(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8840;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D2559D4(_QWORD *result)
{
  result[275] = &unk_1E25C5EA0;
  result[262] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D2559FC(_QWORD *result)
{
  result[22] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D255A20(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D255A34(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C5F00;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

uint64_t sub_18D255A90(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x800000057;
  *(_QWORD *)a1 = &off_1E25C84E0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D255CA8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D255AE4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D255B20(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C84E0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D255B8C(uint64_t a1)
{
  uint64_t result;

  result = sub_18D255CA8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D255BB4(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x2B8uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D255CA8(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x15C0uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D255D10(_QWORD *a1)
{
  a1[37] = &unk_1E25C5EA0;
  a1[30] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D255D48(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C5F00;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D255DB4(uint64_t a1)
{
  uint64_t result;

  result = sub_18D255ED0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D255DDC(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x670uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D255ED0(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x3380uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D255F38(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D255F5C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D255F68(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[103];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D25605C(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1000000067;
  *(_QWORD *)a1 = &off_1E25C5F00;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D331EB0;
  sub_18D255ED0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D2560B0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2560EC(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x570000005FLL;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C8840;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (a2 < 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D256334(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D256170(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D2561AC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8840;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D256218(uint64_t a1)
{
  uint64_t result;

  result = sub_18D256334(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D256240(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x2049uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D256334(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x10248uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D2563A4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C87B0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D256410(uint64_t a1)
{
  uint64_t result;

  result = sub_18D255CA8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D256438(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x2B8uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

_QWORD *sub_18D25652C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D256540(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D256564(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D256570(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[95];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D256664(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D256688(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D256694(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[103];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D256788(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2567AC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2567B8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D2568AC(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2568D0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2568DC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D2569D0(_QWORD *a1)
{
  uint64_t v2;

  a1[64] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C5F00;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D256A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x100000067;
  *(_OWORD *)(a1 + 8) = xmmword_18D331E70;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5270;
  *(_QWORD *)(a1 + 864) = a2;
  *(_QWORD *)(a1 + 896) = 0x100000067;
  *(_QWORD *)(a1 + 872) = &off_1E25C5F60;
  *(_OWORD *)(a1 + 880) = xmmword_18D331E70;
  *(_QWORD *)(a1 + 904) = a1 + 912;
  sub_18D053D7C(a1 + 872, a3);
  v5 = *(_DWORD *)(a1 + 880);
  v6 = *(_DWORD *)(a1 + 884);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = (v6 * v5);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 904);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_QWORD *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D256B08(_QWORD *a1)
{
  a1[109] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D256B3C(_QWORD *a1)
{
  a1[275] = &unk_1E25C5EA0;
  a1[262] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D256B74(_QWORD *a1)
{
  a1[22] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D256BA8(_QWORD *result)
{
  result[180] = &unk_1E25C5EA0;
  *result = &unk_1E25C5D20;
  return result;
}

void sub_18D256BCC(_QWORD *a1)
{
  a1[180] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5D20;
  JUMPOUT(0x18D78B5D4);
}

unint64_t raven::GNSSUncertaintyScaling::GNSSUncertaintyWrapper::GetUncertaintyScaleFactor(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, float a9)
{
  BOOL v9;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v26;
  unsigned __int8 v27;
  __int16 v28;
  _QWORD v29[2];
  float v30;

  v30 = a9;
  if (*a2)
    v9 = *a2 == 5;
  else
    v9 = 1;
  if (v9)
    goto LABEL_8;
  v29[0] = 0;
  v29[1] = 0;
  if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 8))(a1, v29) & 1) == 0)
  {
    v28 = 12;
    v27 = 4;
    v26 = a7;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "GNSS uncertainty table index not found,cn0,%.1f,elev_deg,%.1lf", v17, v18, v19, v20, v21, SLOBYTE(v26));
LABEL_8:
    v24 = 0;
    v23 = 0x100000000;
    LODWORD(v22) = 1065353216;
    return v23 & 0xFF00000000 | v22 | v24 & 0xFFFFFF0000000000;
  }
  v22 = (**(uint64_t (***)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, _QWORD *, float *, uint64_t))a1)(a1, a2, a3, a4, a5, v29, &v30, a6);
  v23 = v22 & 0xFFFFFFFF00000000;
  v24 = v22 & 0xFFFFFF0000000000;
  return v23 & 0xFF00000000 | v22 | v24 & 0xFFFFFF0000000000;
}

_QWORD *raven::GNSSUncertaintyScaling::EurekaGNSSUncertaintyWrapper::Instance(raven::GNSSUncertaintyScaling::EurekaGNSSUncertaintyWrapper *this)
{
  _QWORD *result;

  result = (_QWORD *)qword_1EE0618D8;
  if (!qword_1EE0618D8)
  {
    result = (_QWORD *)operator new();
    *result = off_1E25C2E98;
    qword_1EE0618D8 = (uint64_t)result;
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::EurekaGNSSUncertaintyWrapper::GetUncertaintyScaleFactorCore(uint64_t a1, _DWORD *a2, _BYTE *a3, unsigned __int8 *a4, char *a5, _QWORD *a6, float *a7, uint64_t a8)
{
  int v8;
  unsigned int v14;
  int v15;
  uint64_t v16;
  float v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int8 v35;
  __int16 v36;
  unsigned __int8 v37;
  __int16 v38;
  unsigned __int8 v39;
  __int16 v40;

  v8 = a8;
  v14 = *a4;
  if (v14 > 6)
    goto LABEL_36;
  v15 = 1 << v14;
  if ((v15 & 0x27) == 0)
  {
    if ((v15 & 0x18) != 0)
    {
      v18 = *a5;
      v19 = v18 > 6;
      v20 = (1 << v18) & 0x4C;
      if (!v19 && v20 != 0)
      {
        switch((_DWORD)a8)
        {
          case 2:
            v22 = qword_1ECF24188;
            if (!qword_1ECF24188)
            {
              v22 = operator new();
              *(_WORD *)(v22 + 48) = 88;
              *(_OWORD *)v22 = xmmword_18D333FD0;
              *(_OWORD *)(v22 + 16) = unk_18D333FE0;
              *(_OWORD *)(v22 + 32) = xmmword_18D333FF0;
              *(_DWORD *)(v22 + 52) = 1008981770;
              *(_WORD *)(v22 + 104) = 156;
              *(_OWORD *)(v22 + 56) = xmmword_18D334008;
              *(_OWORD *)(v22 + 72) = unk_18D334018;
              *(_OWORD *)(v22 + 88) = xmmword_18D334028;
              *(_DWORD *)(v22 + 108) = 1008981770;
              *(_WORD *)(v22 + 160) = 12;
              *(_OWORD *)(v22 + 128) = unk_18D334050;
              *(_OWORD *)(v22 + 144) = xmmword_18D334060;
              *(_OWORD *)(v22 + 112) = xmmword_18D334040;
              *(_DWORD *)(v22 + 164) = 1008981770;
              *(_WORD *)(v22 + 216) = 112;
              *(_OWORD *)(v22 + 200) = xmmword_18D334098;
              *(_OWORD *)(v22 + 184) = unk_18D334088;
              *(_OWORD *)(v22 + 168) = xmmword_18D334078;
              *(_DWORD *)(v22 + 220) = 1008981770;
              *(_WORD *)(v22 + 272) = 166;
              *(_OWORD *)(v22 + 224) = xmmword_18D3340B0;
              *(_OWORD *)(v22 + 240) = unk_18D3340C0;
              *(_OWORD *)(v22 + 256) = xmmword_18D3340D0;
              *(_DWORD *)(v22 + 276) = 1008981770;
              *(_WORD *)(v22 + 328) = 282;
              *(_OWORD *)(v22 + 280) = xmmword_18D3340E8;
              *(_OWORD *)(v22 + 296) = unk_18D3340F8;
              *(_OWORD *)(v22 + 312) = xmmword_18D334108;
              *(_DWORD *)(v22 + 332) = 1008981770;
              *(_WORD *)(v22 + 384) = 1057;
              *(_OWORD *)(v22 + 336) = xmmword_18D334120;
              *(_OWORD *)(v22 + 352) = unk_18D334130;
              *(_OWORD *)(v22 + 368) = xmmword_18D334140;
              *(_DWORD *)(v22 + 388) = 1008981770;
              qword_1ECF24188 = v22;
            }
            v23 = qword_1ECF24190;
            if (!qword_1ECF24190)
            {
              v23 = operator new();
              *(_QWORD *)(v23 + 142) = 0x54011D0000;
              *(_OWORD *)(v23 + 96) = xmmword_18D3341B8;
              *(_OWORD *)(v23 + 112) = unk_18D3341C8;
              *(_OWORD *)(v23 + 128) = xmmword_18D3341D8;
              *(_OWORD *)(v23 + 32) = xmmword_18D334178;
              *(_OWORD *)(v23 + 48) = unk_18D334188;
              *(_OWORD *)(v23 + 64) = xmmword_18D334198;
              *(_OWORD *)(v23 + 80) = unk_18D3341A8;
              *(_OWORD *)v23 = xmmword_18D334158;
              *(_OWORD *)(v23 + 16) = unk_18D334168;
              *(_QWORD *)(v23 + 298) = 0x94011B0000;
              *(_OWORD *)(v23 + 236) = unk_18D334240;
              *(_OWORD *)(v23 + 252) = xmmword_18D334250;
              *(_OWORD *)(v23 + 268) = unk_18D334260;
              *(_OWORD *)(v23 + 284) = xmmword_18D334270;
              *(_OWORD *)(v23 + 172) = unk_18D334200;
              *(_OWORD *)(v23 + 188) = xmmword_18D334210;
              *(_OWORD *)(v23 + 204) = unk_18D334220;
              *(_DWORD *)(v23 + 152) = 1025758986;
              *(_OWORD *)(v23 + 220) = xmmword_18D334230;
              *(_OWORD *)(v23 + 156) = xmmword_18D3341F0;
              *(_DWORD *)(v23 + 308) = 1025758986;
              *(_QWORD *)(v23 + 454) = 167575552;
              *(_OWORD *)(v23 + 408) = xmmword_18D3342E8;
              *(_OWORD *)(v23 + 424) = unk_18D3342F8;
              *(_OWORD *)(v23 + 440) = xmmword_18D334308;
              *(_OWORD *)(v23 + 344) = xmmword_18D3342A8;
              *(_OWORD *)(v23 + 360) = unk_18D3342B8;
              *(_OWORD *)(v23 + 376) = xmmword_18D3342C8;
              *(_OWORD *)(v23 + 392) = unk_18D3342D8;
              *(_OWORD *)(v23 + 312) = xmmword_18D334288;
              *(_OWORD *)(v23 + 328) = unk_18D334298;
              *(_DWORD *)(v23 + 464) = 1025758986;
              *(_QWORD *)(v23 + 610) = 72089600;
              *(_OWORD *)(v23 + 564) = xmmword_18D334380;
              *(_OWORD *)(v23 + 580) = unk_18D334390;
              *(_OWORD *)(v23 + 596) = xmmword_18D3343A0;
              *(_OWORD *)(v23 + 500) = xmmword_18D334340;
              *(_OWORD *)(v23 + 516) = unk_18D334350;
              *(_OWORD *)(v23 + 532) = xmmword_18D334360;
              *(_OWORD *)(v23 + 548) = unk_18D334370;
              *(_OWORD *)(v23 + 468) = xmmword_18D334320;
              *(_OWORD *)(v23 + 484) = unk_18D334330;
              *(_DWORD *)(v23 + 620) = 1025758986;
              *(_QWORD *)(v23 + 766) = 0xA4030A0000;
              *(_OWORD *)(v23 + 720) = xmmword_18D334418;
              *(_OWORD *)(v23 + 736) = unk_18D334428;
              *(_OWORD *)(v23 + 752) = xmmword_18D334438;
              *(_OWORD *)(v23 + 656) = xmmword_18D3343D8;
              *(_OWORD *)(v23 + 672) = unk_18D3343E8;
              *(_OWORD *)(v23 + 688) = xmmword_18D3343F8;
              *(_OWORD *)(v23 + 704) = unk_18D334408;
              *(_OWORD *)(v23 + 624) = xmmword_18D3343B8;
              *(_OWORD *)(v23 + 640) = unk_18D3343C8;
              *(_DWORD *)(v23 + 776) = 1025758986;
              *(_QWORD *)(v23 + 922) = 0xA303020000;
              *(_OWORD *)(v23 + 876) = xmmword_18D3344B0;
              *(_OWORD *)(v23 + 892) = unk_18D3344C0;
              *(_OWORD *)(v23 + 908) = xmmword_18D3344D0;
              *(_OWORD *)(v23 + 812) = xmmword_18D334470;
              *(_OWORD *)(v23 + 828) = unk_18D334480;
              *(_OWORD *)(v23 + 844) = xmmword_18D334490;
              *(_OWORD *)(v23 + 860) = unk_18D3344A0;
              *(_OWORD *)(v23 + 780) = xmmword_18D334450;
              *(_OWORD *)(v23 + 796) = unk_18D334460;
              *(_DWORD *)(v23 + 932) = 1025758986;
              *(_QWORD *)(v23 + 1078) = 82837504;
              *(_OWORD *)(v23 + 1032) = xmmword_18D334548;
              *(_OWORD *)(v23 + 1048) = unk_18D334558;
              *(_OWORD *)(v23 + 1064) = xmmword_18D334568;
              *(_OWORD *)(v23 + 968) = xmmword_18D334508;
              *(_OWORD *)(v23 + 984) = unk_18D334518;
              *(_OWORD *)(v23 + 1000) = xmmword_18D334528;
              *(_OWORD *)(v23 + 1016) = unk_18D334538;
              *(_OWORD *)(v23 + 936) = xmmword_18D3344E8;
              *(_OWORD *)(v23 + 952) = unk_18D3344F8;
              *(_DWORD *)(v23 + 1088) = 1025758986;
              qword_1ECF24190 = v23;
            }
            break;
          case 1:
            v22 = qword_1ECF24178;
            if (!qword_1ECF24178)
            {
              v22 = operator new();
              *(_WORD *)(v22 + 48) = 97;
              *(_OWORD *)v22 = *(_OWORD *)aXCu;
              *(_OWORD *)(v22 + 16) = unk_18D333A30;
              *(_OWORD *)(v22 + 32) = xmmword_18D333A40;
              *(_DWORD *)(v22 + 52) = 1008981770;
              *(_WORD *)(v22 + 104) = 171;
              *(_OWORD *)(v22 + 56) = xmmword_18D333A58;
              *(_OWORD *)(v22 + 72) = unk_18D333A68;
              *(_OWORD *)(v22 + 88) = xmmword_18D333A78;
              *(_DWORD *)(v22 + 108) = 1008981770;
              *(_WORD *)(v22 + 160) = 48;
              *(_OWORD *)(v22 + 128) = *(_OWORD *)L"P=\\k^L:ir\\G7}}dJ0";
              *(_OWORD *)(v22 + 144) = *(_OWORD *)L"r\\G7}}dJ0";
              *(_OWORD *)(v22 + 112) = *(_OWORD *)L"U_eP;YihP=\\k^L:ir\\G7}}dJ0";
              *(_DWORD *)(v22 + 164) = 1008981770;
              *(_WORD *)(v22 + 216) = 76;
              *(_OWORD *)(v22 + 200) = xmmword_18D333AE8;
              *(_OWORD *)(v22 + 184) = unk_18D333AD8;
              *(_OWORD *)(v22 + 168) = xmmword_18D333AC8;
              *(_DWORD *)(v22 + 220) = 1008981770;
              *(_WORD *)(v22 + 272) = 179;
              *(_OWORD *)(v22 + 224) = xmmword_18D333B00;
              *(_OWORD *)(v22 + 240) = unk_18D333B10;
              *(_OWORD *)(v22 + 256) = xmmword_18D333B20;
              *(_DWORD *)(v22 + 276) = 1008981770;
              *(_WORD *)(v22 + 328) = 62;
              *(_OWORD *)(v22 + 280) = xmmword_18D333B38;
              *(_OWORD *)(v22 + 296) = unk_18D333B48;
              *(_OWORD *)(v22 + 312) = xmmword_18D333B58;
              *(_DWORD *)(v22 + 332) = 1008981770;
              *(_WORD *)(v22 + 384) = 523;
              *(_OWORD *)(v22 + 336) = xmmword_18D333B70;
              *(_OWORD *)(v22 + 352) = unk_18D333B80;
              *(_OWORD *)(v22 + 368) = xmmword_18D333B90;
              *(_DWORD *)(v22 + 388) = 1008981770;
              qword_1ECF24178 = v22;
            }
            v23 = qword_1ECF24180;
            if (!qword_1ECF24180)
            {
              v23 = operator new();
              *(_QWORD *)(v23 + 142) = 0x8701710000;
              *(_OWORD *)(v23 + 96) = xmmword_18D333C08;
              *(_OWORD *)(v23 + 112) = unk_18D333C18;
              *(_OWORD *)(v23 + 128) = xmmword_18D333C28;
              *(_OWORD *)(v23 + 32) = xmmword_18D333BC8;
              *(_OWORD *)(v23 + 48) = unk_18D333BD8;
              *(_OWORD *)(v23 + 64) = xmmword_18D333BE8;
              *(_OWORD *)(v23 + 80) = unk_18D333BF8;
              *(_OWORD *)v23 = xmmword_18D333BA8;
              *(_OWORD *)(v23 + 16) = unk_18D333BB8;
              *(_QWORD *)(v23 + 298) = 0xA000B60000;
              *(_OWORD *)(v23 + 236) = unk_18D333C90;
              *(_OWORD *)(v23 + 252) = xmmword_18D333CA0;
              *(_OWORD *)(v23 + 268) = unk_18D333CB0;
              *(_OWORD *)(v23 + 284) = xmmword_18D333CC0;
              *(_OWORD *)(v23 + 172) = unk_18D333C50;
              *(_OWORD *)(v23 + 188) = xmmword_18D333C60;
              *(_OWORD *)(v23 + 204) = unk_18D333C70;
              *(_DWORD *)(v23 + 152) = 1025758986;
              *(_OWORD *)(v23 + 220) = xmmword_18D333C80;
              *(_OWORD *)(v23 + 156) = xmmword_18D333C40;
              *(_DWORD *)(v23 + 308) = 1025758986;
              *(_QWORD *)(v23 + 454) = 0x20D00BB0000;
              *(_OWORD *)(v23 + 408) = xmmword_18D333D38;
              *(_OWORD *)(v23 + 424) = unk_18D333D48;
              *(_OWORD *)(v23 + 440) = xmmword_18D333D58;
              *(_OWORD *)(v23 + 344) = xmmword_18D333CF8;
              *(_OWORD *)(v23 + 360) = unk_18D333D08;
              *(_OWORD *)(v23 + 376) = xmmword_18D333D18;
              *(_OWORD *)(v23 + 392) = unk_18D333D28;
              *(_OWORD *)(v23 + 312) = xmmword_18D333CD8;
              *(_OWORD *)(v23 + 328) = unk_18D333CE8;
              *(_DWORD *)(v23 + 464) = 1025758986;
              *(_QWORD *)(v23 + 610) = 0x3E00EA0000;
              *(_OWORD *)(v23 + 564) = xmmword_18D333DD0;
              *(_OWORD *)(v23 + 580) = unk_18D333DE0;
              *(_OWORD *)(v23 + 596) = xmmword_18D333DF0;
              *(_OWORD *)(v23 + 500) = xmmword_18D333D90;
              *(_OWORD *)(v23 + 516) = unk_18D333DA0;
              *(_OWORD *)(v23 + 532) = xmmword_18D333DB0;
              *(_OWORD *)(v23 + 548) = unk_18D333DC0;
              *(_OWORD *)(v23 + 468) = xmmword_18D333D70;
              *(_OWORD *)(v23 + 484) = unk_18D333D80;
              *(_DWORD *)(v23 + 620) = 1025758986;
              *(_QWORD *)(v23 + 766) = 18677760;
              *(_OWORD *)(v23 + 720) = xmmword_18D333E68;
              *(_OWORD *)(v23 + 736) = unk_18D333E78;
              *(_OWORD *)(v23 + 752) = xmmword_18D333E88;
              *(_OWORD *)(v23 + 656) = xmmword_18D333E28;
              *(_OWORD *)(v23 + 672) = unk_18D333E38;
              *(_OWORD *)(v23 + 688) = xmmword_18D333E48;
              *(_OWORD *)(v23 + 704) = unk_18D333E58;
              *(_OWORD *)(v23 + 624) = xmmword_18D333E08;
              *(_OWORD *)(v23 + 640) = unk_18D333E18;
              *(_DWORD *)(v23 + 776) = 1025758986;
              *(_QWORD *)(v23 + 922) = 0x3D004C0000;
              *(_OWORD *)(v23 + 876) = xmmword_18D333F00;
              *(_OWORD *)(v23 + 892) = *(_OWORD *)aQ6;
              *(_OWORD *)(v23 + 908) = xmmword_18D333F20;
              *(_OWORD *)(v23 + 812) = xmmword_18D333EC0;
              *(_OWORD *)(v23 + 828) = unk_18D333ED0;
              *(_OWORD *)(v23 + 844) = xmmword_18D333EE0;
              *(_OWORD *)(v23 + 860) = *(_OWORD *)a6Z33;
              *(_OWORD *)(v23 + 780) = xmmword_18D333EA0;
              *(_OWORD *)(v23 + 796) = unk_18D333EB0;
              *(_DWORD *)(v23 + 932) = 1025758986;
              *(_QWORD *)(v23 + 1078) = 0x29B019B0000;
              *(_OWORD *)(v23 + 1032) = xmmword_18D333F98;
              *(_OWORD *)(v23 + 1048) = unk_18D333FA8;
              *(_OWORD *)(v23 + 1064) = xmmword_18D333FB8;
              *(_OWORD *)(v23 + 968) = xmmword_18D333F58;
              *(_OWORD *)(v23 + 984) = unk_18D333F68;
              *(_OWORD *)(v23 + 1000) = xmmword_18D333F78;
              *(_OWORD *)(v23 + 1016) = unk_18D333F88;
              *(_OWORD *)(v23 + 936) = xmmword_18D333F38;
              *(_OWORD *)(v23 + 952) = unk_18D333F48;
              *(_DWORD *)(v23 + 1088) = 1025758986;
              qword_1ECF24180 = v23;
            }
            break;
          case 0:
            v22 = qword_1ECF24168;
            if (!qword_1ECF24168)
            {
              v22 = operator new();
              *(_WORD *)(v22 + 48) = 10;
              *(_OWORD *)v22 = *(_OWORD *)aIh3;
              *(_OWORD *)(v22 + 16) = unk_18D333480;
              *(_OWORD *)(v22 + 32) = xmmword_18D333490;
              *(_DWORD *)(v22 + 52) = 1036831949;
              *(_WORD *)(v22 + 104) = 11;
              *(_OWORD *)(v22 + 56) = xmmword_18D3334A8;
              *(_OWORD *)(v22 + 72) = *(_OWORD *)asc_18D3334B8;
              *(_OWORD *)(v22 + 88) = xmmword_18D3334C8;
              *(_DWORD *)(v22 + 108) = 1036831949;
              *(_WORD *)(v22 + 160) = 9;
              *(_OWORD *)(v22 + 128) = unk_18D3334F0;
              *(_OWORD *)(v22 + 144) = xmmword_18D333500;
              *(_OWORD *)(v22 + 112) = *(_OWORD *)aM1;
              *(_WORD *)(v22 + 216) = 16;
              *(_DWORD *)(v22 + 164) = 1036831949;
              *(_OWORD *)(v22 + 200) = xmmword_18D333538;
              *(_OWORD *)(v22 + 184) = *(_OWORD *)asc_18D333528;
              *(_OWORD *)(v22 + 168) = xmmword_18D333518;
              *(_DWORD *)(v22 + 220) = 1036831949;
              *(_WORD *)(v22 + 272) = 18;
              *(_OWORD *)(v22 + 224) = *(_OWORD *)aMP72;
              *(_OWORD *)(v22 + 240) = *(_OWORD *)&aMP72[16];
              *(_OWORD *)(v22 + 256) = xmmword_18D333570;
              *(_DWORD *)(v22 + 276) = 1036831949;
              *(_WORD *)(v22 + 328) = 9;
              *(_OWORD *)(v22 + 280) = *(_OWORD *)aSyr7;
              *(_OWORD *)(v22 + 296) = unk_18D333598;
              *(_OWORD *)(v22 + 312) = xmmword_18D3335A8;
              *(_DWORD *)(v22 + 332) = 1036831949;
              *(_WORD *)(v22 + 384) = 4;
              *(_OWORD *)(v22 + 336) = xmmword_18D3335C0;
              *(_OWORD *)(v22 + 352) = *(_OWORD *)asc_18D3335D0;
              *(_OWORD *)(v22 + 368) = xmmword_18D3335E0;
              *(_DWORD *)(v22 + 388) = 1036831949;
              qword_1ECF24168 = v22;
            }
            v23 = qword_1ECF24170;
            if (!qword_1ECF24170)
            {
              v23 = operator new();
              *(_OWORD *)(v23 + 96) = xmmword_18D333658;
              *(_OWORD *)(v23 + 112) = unk_18D333668;
              *(_OWORD *)(v23 + 128) = xmmword_18D333678;
              *(_QWORD *)(v23 + 142) = 0x10001000D0001;
              *(_OWORD *)(v23 + 32) = xmmword_18D333618;
              *(_OWORD *)(v23 + 48) = *(_OWORD *)aTX;
              *(_OWORD *)(v23 + 64) = xmmword_18D333638;
              *(_OWORD *)(v23 + 80) = unk_18D333648;
              *(_OWORD *)v23 = xmmword_18D3335F8;
              *(_OWORD *)(v23 + 16) = unk_18D333608;
              *(_DWORD *)(v23 + 152) = 1053609165;
              *(_OWORD *)(v23 + 252) = xmmword_18D3336F0;
              *(_OWORD *)(v23 + 268) = unk_18D333700;
              *(_OWORD *)(v23 + 284) = xmmword_18D333710;
              *(_QWORD *)(v23 + 298) = 0x1000100070001;
              *(_OWORD *)(v23 + 188) = xmmword_18D3336B0;
              *(_OWORD *)(v23 + 204) = *(_OWORD *)aC;
              *(_OWORD *)(v23 + 220) = xmmword_18D3336D0;
              *(_OWORD *)(v23 + 236) = unk_18D3336E0;
              *(_OWORD *)(v23 + 156) = xmmword_18D333690;
              *(_OWORD *)(v23 + 172) = unk_18D3336A0;
              *(_DWORD *)(v23 + 308) = 1053609165;
              *(_OWORD *)(v23 + 408) = xmmword_18D333788;
              *(_OWORD *)(v23 + 424) = unk_18D333798;
              *(_OWORD *)(v23 + 440) = xmmword_18D3337A8;
              *(_QWORD *)(v23 + 454) = 0x1000200150001;
              *(_OWORD *)(v23 + 344) = xmmword_18D333748;
              *(_OWORD *)(v23 + 360) = unk_18D333758;
              *(_OWORD *)(v23 + 376) = xmmword_18D333768;
              *(_OWORD *)(v23 + 392) = unk_18D333778;
              *(_OWORD *)(v23 + 312) = xmmword_18D333728;
              *(_OWORD *)(v23 + 328) = unk_18D333738;
              *(_DWORD *)(v23 + 464) = 1053609165;
              *(_OWORD *)(v23 + 564) = xmmword_18D333820;
              *(_OWORD *)(v23 + 580) = unk_18D333830;
              *(_OWORD *)(v23 + 596) = xmmword_18D333840;
              *(_QWORD *)(v23 + 610) = 0x1000A00060001;
              *(_OWORD *)(v23 + 500) = xmmword_18D3337E0;
              *(_OWORD *)(v23 + 516) = unk_18D3337F0;
              *(_OWORD *)(v23 + 532) = xmmword_18D333800;
              *(_OWORD *)(v23 + 548) = unk_18D333810;
              *(_OWORD *)(v23 + 468) = xmmword_18D3337C0;
              *(_OWORD *)(v23 + 484) = unk_18D3337D0;
              *(_DWORD *)(v23 + 620) = 1053609165;
              *(_OWORD *)(v23 + 720) = xmmword_18D3338B8;
              *(_OWORD *)(v23 + 736) = unk_18D3338C8;
              *(_OWORD *)(v23 + 752) = xmmword_18D3338D8;
              *(_QWORD *)(v23 + 766) = 0x10002000C0001;
              *(_OWORD *)(v23 + 656) = xmmword_18D333878;
              *(_OWORD *)(v23 + 672) = *(_OWORD *)aAC;
              *(_OWORD *)(v23 + 688) = xmmword_18D333898;
              *(_OWORD *)(v23 + 704) = unk_18D3338A8;
              *(_OWORD *)(v23 + 624) = xmmword_18D333858;
              *(_OWORD *)(v23 + 640) = unk_18D333868;
              *(_DWORD *)(v23 + 776) = 1053609165;
              *(_OWORD *)(v23 + 876) = xmmword_18D333950;
              *(_OWORD *)(v23 + 892) = unk_18D333960;
              *(_OWORD *)(v23 + 908) = xmmword_18D333970;
              *(_QWORD *)(v23 + 922) = 0x1000100080001;
              *(_OWORD *)(v23 + 812) = xmmword_18D333910;
              *(_OWORD *)(v23 + 828) = *(_OWORD *)aQC;
              *(_OWORD *)(v23 + 844) = xmmword_18D333930;
              *(_OWORD *)(v23 + 860) = unk_18D333940;
              *(_OWORD *)(v23 + 780) = xmmword_18D3338F0;
              *(_OWORD *)(v23 + 796) = unk_18D333900;
              *(_DWORD *)(v23 + 932) = 1053609165;
              *(_OWORD *)(v23 + 1032) = xmmword_18D3339E8;
              *(_OWORD *)(v23 + 1048) = unk_18D3339F8;
              *(_OWORD *)(v23 + 1064) = xmmword_18D333A08;
              *(_QWORD *)(v23 + 1078) = 0x2000A00160001;
              *(_OWORD *)(v23 + 968) = xmmword_18D3339A8;
              *(_OWORD *)(v23 + 984) = *(_OWORD *)aRH;
              *(_OWORD *)(v23 + 1000) = xmmword_18D3339C8;
              *(_OWORD *)(v23 + 1016) = unk_18D3339D8;
              *(_OWORD *)(v23 + 936) = xmmword_18D333988;
              *(_OWORD *)(v23 + 952) = unk_18D333998;
              *(_DWORD *)(v23 + 1088) = 1053609165;
              qword_1ECF24170 = v23;
            }
            break;
          default:
LABEL_36:
            v23 = 0;
            v22 = 0;
            break;
        }
LABEL_37:
        v29 = 0;
        switch(*a3)
        {
          case 0:
          case 9:
            v40 = 12;
            v39 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "Unsupported GNSS Band type: GNSS uncertainty parameters not found for obs_type,%d,band,%d,se,%d,activity,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *a2);
            goto LABEL_60;
          case 1:
          case 5:
          case 0xA:
            v29 = 5;
            break;
          case 2:
            v29 = 6;
            break;
          case 3:
            v29 = 4;
            break;
          case 6:
            v29 = 1;
            break;
          case 7:
            v29 = 2;
            break;
          case 8:
            v29 = 3;
            break;
          default:
            break;
        }
        if (*a2 == 1)
        {
          if (v22)
          {
            v30 = a6[1];
            v17 = 1.0;
            if (*(_WORD *)(v22 + 56 * v29 + 10 * *a6 + 2 * v30))
            {
              v31 = *(float *)(v22 + 56 * v29 + 52)
                  * (float)*(unsigned __int16 *)(v22 + 56 * v29 + 10 * *a6 + 2 * v30);
              if (v8 == 1)
              {
                v16 = 0x100000000;
                v17 = v31;
                return v16 | LODWORD(v17);
              }
              v17 = fmaxf(v31, 1.0);
            }
LABEL_61:
            v16 = 0x100000000;
            return v16 | LODWORD(v17);
          }
          v38 = 12;
          v37 = 5;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Invalid range unc scale pointer - activity_state = %d, signal_environment = %hhu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *a5);
        }
        else
        {
          if (v23)
          {
            v32 = 2;
            if (*a7 <= 0.6)
              v32 = 1;
            if (*a7 <= 0.12)
              v32 = 0;
            v33 = *(unsigned __int16 *)(v23 + 156 * v29 + 30 * *a6 + 6 * a6[1] + 2 * v32);
            if (v33)
            {
              v17 = *(float *)(v23 + 156 * v29 + 152) * (float)v33;
              if (v8 != 1)
                v17 = fmaxf(v17, 4.0);
            }
            else
            {
              v17 = *(float *)(v23 + 156 * v29 + 152) / flt_18D332888[v8 == 0];
            }
            goto LABEL_61;
          }
          v36 = 12;
          v35 = 5;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hhu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *a5);
        }
LABEL_60:
        v17 = 1.0;
        goto LABEL_61;
      }
      if ((_DWORD)a8 == 2)
      {
        v22 = qword_1ECF241A8;
        if (!qword_1ECF241A8)
        {
          v22 = operator new();
          *(_WORD *)(v22 + 48) = 170;
          *(_OWORD *)v22 = xmmword_18D3350E0;
          *(_OWORD *)(v22 + 16) = unk_18D3350F0;
          *(_OWORD *)(v22 + 32) = xmmword_18D335100;
          *(_DWORD *)(v22 + 52) = 1008981770;
          *(_WORD *)(v22 + 104) = 8;
          *(_OWORD *)(v22 + 56) = xmmword_18D335118;
          *(_OWORD *)(v22 + 72) = unk_18D335128;
          *(_OWORD *)(v22 + 88) = xmmword_18D335138;
          *(_DWORD *)(v22 + 108) = 1008981770;
          *(_WORD *)(v22 + 160) = 108;
          *(_OWORD *)(v22 + 128) = unk_18D335160;
          *(_OWORD *)(v22 + 144) = xmmword_18D335170;
          *(_OWORD *)(v22 + 112) = xmmword_18D335150;
          *(_DWORD *)(v22 + 164) = 1008981770;
          *(_WORD *)(v22 + 216) = 25;
          *(_OWORD *)(v22 + 200) = xmmword_18D3351A8;
          *(_OWORD *)(v22 + 184) = unk_18D335198;
          *(_OWORD *)(v22 + 168) = xmmword_18D335188;
          *(_DWORD *)(v22 + 220) = 1008981770;
          *(_WORD *)(v22 + 272) = 133;
          *(_OWORD *)(v22 + 224) = xmmword_18D3351C0;
          *(_OWORD *)(v22 + 240) = unk_18D3351D0;
          *(_OWORD *)(v22 + 256) = xmmword_18D3351E0;
          *(_DWORD *)(v22 + 276) = 1008981770;
          *(_WORD *)(v22 + 328) = 216;
          *(_OWORD *)(v22 + 280) = xmmword_18D3351F8;
          *(_OWORD *)(v22 + 296) = unk_18D335208;
          *(_OWORD *)(v22 + 312) = xmmword_18D335218;
          *(_DWORD *)(v22 + 332) = 1008981770;
          *(_WORD *)(v22 + 384) = 450;
          *(_OWORD *)(v22 + 336) = xmmword_18D335230;
          *(_OWORD *)(v22 + 352) = unk_18D335240;
          *(_OWORD *)(v22 + 368) = xmmword_18D335250;
          *(_DWORD *)(v22 + 388) = 1008981770;
          qword_1ECF241A8 = v22;
        }
        v23 = qword_1ECF241B0;
        if (!qword_1ECF241B0)
        {
          v23 = operator new();
          *(_QWORD *)(v23 + 142) = 0x30400450000;
          *(_OWORD *)(v23 + 96) = xmmword_18D3352C8;
          *(_OWORD *)(v23 + 112) = unk_18D3352D8;
          *(_OWORD *)(v23 + 128) = xmmword_18D3352E8;
          *(_OWORD *)(v23 + 32) = xmmword_18D335288;
          *(_OWORD *)(v23 + 48) = unk_18D335298;
          *(_OWORD *)(v23 + 64) = xmmword_18D3352A8;
          *(_OWORD *)(v23 + 80) = unk_18D3352B8;
          *(_OWORD *)v23 = xmmword_18D335268;
          *(_OWORD *)(v23 + 16) = unk_18D335278;
          *(_QWORD *)(v23 + 298) = 0x8A00000000;
          *(_OWORD *)(v23 + 236) = unk_18D335350;
          *(_OWORD *)(v23 + 252) = xmmword_18D335360;
          *(_OWORD *)(v23 + 268) = unk_18D335370;
          *(_OWORD *)(v23 + 284) = xmmword_18D335380;
          *(_OWORD *)(v23 + 172) = unk_18D335310;
          *(_OWORD *)(v23 + 188) = xmmword_18D335320;
          *(_OWORD *)(v23 + 204) = unk_18D335330;
          *(_DWORD *)(v23 + 152) = 1025758986;
          *(_OWORD *)(v23 + 220) = xmmword_18D335340;
          *(_OWORD *)(v23 + 156) = xmmword_18D335300;
          *(_DWORD *)(v23 + 308) = 1025758986;
          *(_QWORD *)(v23 + 454) = 55312384;
          *(_OWORD *)(v23 + 408) = xmmword_18D3353F8;
          *(_OWORD *)(v23 + 424) = unk_18D335408;
          *(_OWORD *)(v23 + 440) = xmmword_18D335418;
          *(_OWORD *)(v23 + 344) = xmmword_18D3353B8;
          *(_OWORD *)(v23 + 360) = unk_18D3353C8;
          *(_OWORD *)(v23 + 376) = xmmword_18D3353D8;
          *(_OWORD *)(v23 + 392) = unk_18D3353E8;
          *(_OWORD *)(v23 + 312) = xmmword_18D335398;
          *(_OWORD *)(v23 + 328) = unk_18D3353A8;
          *(_DWORD *)(v23 + 464) = 1025758986;
          *(_QWORD *)(v23 + 610) = 26738688;
          *(_OWORD *)(v23 + 564) = xmmword_18D335490;
          *(_OWORD *)(v23 + 580) = unk_18D3354A0;
          *(_OWORD *)(v23 + 596) = xmmword_18D3354B0;
          *(_OWORD *)(v23 + 500) = xmmword_18D335450;
          *(_OWORD *)(v23 + 516) = unk_18D335460;
          *(_OWORD *)(v23 + 532) = xmmword_18D335470;
          *(_OWORD *)(v23 + 548) = unk_18D335480;
          *(_OWORD *)(v23 + 468) = xmmword_18D335430;
          *(_OWORD *)(v23 + 484) = unk_18D335440;
          *(_DWORD *)(v23 + 620) = 1025758986;
          *(_QWORD *)(v23 + 766) = 8781824;
          *(_OWORD *)(v23 + 720) = xmmword_18D335528;
          *(_OWORD *)(v23 + 736) = unk_18D335538;
          *(_OWORD *)(v23 + 752) = xmmword_18D335548;
          *(_OWORD *)(v23 + 656) = xmmword_18D3354E8;
          *(_OWORD *)(v23 + 672) = unk_18D3354F8;
          *(_OWORD *)(v23 + 688) = xmmword_18D335508;
          *(_OWORD *)(v23 + 704) = unk_18D335518;
          *(_OWORD *)(v23 + 624) = xmmword_18D3354C8;
          *(_OWORD *)(v23 + 640) = unk_18D3354D8;
          *(_DWORD *)(v23 + 776) = 1025758986;
          *(_QWORD *)(v23 + 922) = 0xB4025A0005;
          *(_OWORD *)(v23 + 876) = xmmword_18D3355C0;
          *(_OWORD *)(v23 + 892) = unk_18D3355D0;
          *(_OWORD *)(v23 + 908) = xmmword_18D3355E0;
          *(_OWORD *)(v23 + 812) = xmmword_18D335580;
          *(_OWORD *)(v23 + 828) = unk_18D335590;
          *(_OWORD *)(v23 + 844) = xmmword_18D3355A0;
          *(_OWORD *)(v23 + 860) = unk_18D3355B0;
          *(_OWORD *)(v23 + 780) = xmmword_18D335560;
          *(_OWORD *)(v23 + 796) = unk_18D335570;
          *(_DWORD *)(v23 + 932) = 1025758986;
          *(_QWORD *)(v23 + 1078) = 171638784;
          *(_OWORD *)(v23 + 1032) = xmmword_18D335658;
          *(_OWORD *)(v23 + 1048) = unk_18D335668;
          *(_OWORD *)(v23 + 1064) = xmmword_18D335678;
          *(_OWORD *)(v23 + 968) = xmmword_18D335618;
          *(_OWORD *)(v23 + 984) = unk_18D335628;
          *(_OWORD *)(v23 + 1000) = xmmword_18D335638;
          *(_OWORD *)(v23 + 1016) = unk_18D335648;
          *(_OWORD *)(v23 + 936) = xmmword_18D3355F8;
          *(_OWORD *)(v23 + 952) = unk_18D335608;
          *(_DWORD *)(v23 + 1088) = 1025758986;
          qword_1ECF241B0 = v23;
        }
        goto LABEL_37;
      }
      if ((_DWORD)a8 == 1)
      {
        v22 = qword_1ECF24198;
        if (!qword_1ECF24198)
        {
          v22 = operator new();
          *(_WORD *)(v22 + 48) = 120;
          *(_OWORD *)v22 = *(_OWORD *)aYpozoxvFWIe;
          *(_OWORD *)(v22 + 16) = *(_OWORD *)&aYpozoxvFWIe[16];
          *(_OWORD *)(v22 + 32) = xmmword_18D334B50;
          *(_DWORD *)(v22 + 52) = 1008981770;
          *(_WORD *)(v22 + 104) = 187;
          *(_OWORD *)(v22 + 56) = xmmword_18D334B68;
          *(_OWORD *)(v22 + 72) = unk_18D334B78;
          *(_OWORD *)(v22 + 88) = xmmword_18D334B88;
          *(_DWORD *)(v22 + 108) = 1008981770;
          *(_WORD *)(v22 + 160) = 91;
          *(_OWORD *)(v22 + 144) = *(_OWORD *)L"jh^^otvf[";
          *(_DWORD *)(v22 + 164) = 1008981770;
          *(_WORD *)(v22 + 216) = 153;
          *(_OWORD *)(v22 + 200) = xmmword_18D334BF8;
          *(_OWORD *)(v22 + 184) = unk_18D334BE8;
          *(_OWORD *)(v22 + 168) = xmmword_18D334BD8;
          *(_DWORD *)(v22 + 220) = 1008981770;
          *(_WORD *)(v22 + 272) = 123;
          *(_OWORD *)(v22 + 224) = xmmword_18D334C10;
          *(_OWORD *)(v22 + 240) = unk_18D334C20;
          *(_OWORD *)(v22 + 256) = xmmword_18D334C30;
          *(_DWORD *)(v22 + 276) = 1008981770;
          *(_WORD *)(v22 + 328) = 62;
          *(_OWORD *)(v22 + 280) = xmmword_18D334C48;
          *(_OWORD *)(v22 + 296) = unk_18D334C58;
          *(_OWORD *)(v22 + 312) = xmmword_18D334C68;
          *(_DWORD *)(v22 + 332) = 1008981770;
          *(_WORD *)(v22 + 384) = 406;
          *(_OWORD *)(v22 + 336) = xmmword_18D334C80;
          *(_OWORD *)(v22 + 352) = unk_18D334C90;
          *(_OWORD *)(v22 + 368) = xmmword_18D334CA0;
          *(_DWORD *)(v22 + 388) = 1008981770;
          qword_1ECF24198 = v22;
        }
        v23 = qword_1ECF241A0;
        if (!qword_1ECF241A0)
        {
          v23 = operator new();
          *(_QWORD *)(v23 + 142) = 0x6400B10000;
          *(_OWORD *)(v23 + 96) = xmmword_18D334D18;
          *(_OWORD *)(v23 + 112) = unk_18D334D28;
          *(_OWORD *)(v23 + 128) = xmmword_18D334D38;
          *(_OWORD *)(v23 + 32) = xmmword_18D334CD8;
          *(_OWORD *)(v23 + 48) = unk_18D334CE8;
          *(_OWORD *)(v23 + 64) = xmmword_18D334CF8;
          *(_OWORD *)(v23 + 80) = unk_18D334D08;
          *(_OWORD *)v23 = xmmword_18D334CB8;
          *(_OWORD *)(v23 + 16) = unk_18D334CC8;
          *(_QWORD *)(v23 + 298) = 6356992;
          *(_OWORD *)(v23 + 236) = unk_18D334DA0;
          *(_OWORD *)(v23 + 252) = xmmword_18D334DB0;
          *(_OWORD *)(v23 + 268) = unk_18D334DC0;
          *(_OWORD *)(v23 + 284) = xmmword_18D334DD0;
          *(_OWORD *)(v23 + 172) = unk_18D334D60;
          *(_OWORD *)(v23 + 188) = xmmword_18D334D70;
          *(_OWORD *)(v23 + 204) = unk_18D334D80;
          *(_DWORD *)(v23 + 152) = 1025758986;
          *(_OWORD *)(v23 + 220) = xmmword_18D334D90;
          *(_OWORD *)(v23 + 156) = xmmword_18D334D50;
          *(_DWORD *)(v23 + 308) = 1025758986;
          *(_QWORD *)(v23 + 454) = 0xCC007A0000;
          *(_OWORD *)(v23 + 408) = xmmword_18D334E48;
          *(_OWORD *)(v23 + 424) = unk_18D334E58;
          *(_OWORD *)(v23 + 440) = xmmword_18D334E68;
          *(_OWORD *)(v23 + 344) = xmmword_18D334E08;
          *(_OWORD *)(v23 + 360) = unk_18D334E18;
          *(_OWORD *)(v23 + 376) = xmmword_18D334E28;
          *(_OWORD *)(v23 + 392) = unk_18D334E38;
          *(_OWORD *)(v23 + 312) = xmmword_18D334DE8;
          *(_OWORD *)(v23 + 328) = unk_18D334DF8;
          *(_DWORD *)(v23 + 464) = 1025758986;
          *(_QWORD *)(v23 + 610) = 26017792;
          *(_OWORD *)(v23 + 564) = xmmword_18D334EE0;
          *(_OWORD *)(v23 + 580) = unk_18D334EF0;
          *(_OWORD *)(v23 + 596) = xmmword_18D334F00;
          *(_OWORD *)(v23 + 500) = xmmword_18D334EA0;
          *(_OWORD *)(v23 + 516) = unk_18D334EB0;
          *(_OWORD *)(v23 + 532) = xmmword_18D334EC0;
          *(_OWORD *)(v23 + 548) = unk_18D334ED0;
          *(_OWORD *)(v23 + 468) = xmmword_18D334E80;
          *(_OWORD *)(v23 + 484) = unk_18D334E90;
          *(_DWORD *)(v23 + 620) = 1025758986;
          *(_QWORD *)(v23 + 766) = 0xB40063000CLL;
          *(_OWORD *)(v23 + 720) = xmmword_18D334F78;
          *(_OWORD *)(v23 + 736) = unk_18D334F88;
          *(_OWORD *)(v23 + 752) = xmmword_18D334F98;
          *(_OWORD *)(v23 + 656) = xmmword_18D334F38;
          *(_OWORD *)(v23 + 672) = unk_18D334F48;
          *(_OWORD *)(v23 + 688) = xmmword_18D334F58;
          *(_OWORD *)(v23 + 704) = unk_18D334F68;
          *(_OWORD *)(v23 + 624) = xmmword_18D334F18;
          *(_OWORD *)(v23 + 640) = unk_18D334F28;
          *(_DWORD *)(v23 + 776) = 1025758986;
          *(_QWORD *)(v23 + 922) = 0x3600200055;
          *(_OWORD *)(v23 + 876) = xmmword_18D335010;
          *(_OWORD *)(v23 + 892) = *(_OWORD *)asc_18D335020;
          *(_OWORD *)(v23 + 908) = xmmword_18D335030;
          *(_OWORD *)(v23 + 812) = xmmword_18D334FD0;
          *(_OWORD *)(v23 + 828) = unk_18D334FE0;
          *(_OWORD *)(v23 + 844) = xmmword_18D334FF0;
          *(_OWORD *)(v23 + 860) = *(_OWORD *)aRo456;
          *(_OWORD *)(v23 + 780) = xmmword_18D334FB0;
          *(_OWORD *)(v23 + 796) = unk_18D334FC0;
          *(_DWORD *)(v23 + 932) = 1025758986;
          *(_QWORD *)(v23 + 1078) = 11665418;
          *(_OWORD *)(v23 + 1032) = xmmword_18D3350A8;
          *(_OWORD *)(v23 + 1048) = unk_18D3350B8;
          *(_OWORD *)(v23 + 1064) = xmmword_18D3350C8;
          *(_OWORD *)(v23 + 968) = xmmword_18D335068;
          *(_OWORD *)(v23 + 984) = unk_18D335078;
          *(_OWORD *)(v23 + 1000) = xmmword_18D335088;
          *(_OWORD *)(v23 + 1016) = unk_18D335098;
          *(_OWORD *)(v23 + 936) = xmmword_18D335048;
          *(_OWORD *)(v23 + 952) = unk_18D335058;
          *(_DWORD *)(v23 + 1088) = 1025758986;
          qword_1ECF241A0 = v23;
        }
        goto LABEL_37;
      }
      if ((_DWORD)a8)
        goto LABEL_36;
    }
    else
    {
      if ((_DWORD)a8)
        goto LABEL_4;
      v27 = *a5;
      if (v27 <= 6 && ((1 << v27) & 0x4C) != 0)
      {
        v22 = qword_1ECF241B8;
        if (!qword_1ECF241B8)
        {
          v22 = operator new();
          *(_WORD *)(v22 + 48) = 5;
          *(_OWORD *)v22 = xmmword_18D335690;
          *(_OWORD *)(v22 + 16) = *(_OWORD *)asc_18D3356A0;
          *(_OWORD *)(v22 + 32) = xmmword_18D3356B0;
          *(_DWORD *)(v22 + 52) = 1036831949;
          *(_WORD *)(v22 + 104) = 4;
          *(_OWORD *)(v22 + 56) = *(_OWORD *)asc_18D3356C8;
          *(_OWORD *)(v22 + 72) = unk_18D3356D8;
          *(_OWORD *)(v22 + 88) = xmmword_18D3356E8;
          *(_DWORD *)(v22 + 108) = 1036831949;
          *(_WORD *)(v22 + 160) = 4;
          *(_OWORD *)(v22 + 128) = *(_OWORD *)asc_18D335710;
          *(_OWORD *)(v22 + 144) = xmmword_18D335720;
          *(_OWORD *)(v22 + 112) = xmmword_18D335700;
          *(_WORD *)(v22 + 216) = 2;
          *(_DWORD *)(v22 + 164) = 1036831949;
          *(_OWORD *)(v22 + 200) = xmmword_18D335758;
          *(_OWORD *)(v22 + 184) = unk_18D335748;
          *(_OWORD *)(v22 + 168) = *(_OWORD *)asc_18D335738;
          *(_DWORD *)(v22 + 220) = 1036831949;
          *(_WORD *)(v22 + 272) = 16;
          *(_OWORD *)(v22 + 224) = *(_OWORD *)a4352;
          *(_OWORD *)(v22 + 240) = *(_OWORD *)&a4352[16];
          *(_OWORD *)(v22 + 256) = xmmword_18D335790;
          *(_DWORD *)(v22 + 276) = 1036831949;
          *(_WORD *)(v22 + 328) = 4;
          *(_OWORD *)(v22 + 280) = xmmword_18D3357A8;
          *(_OWORD *)(v22 + 296) = *(_OWORD *)asc_18D3357B8;
          *(_OWORD *)(v22 + 312) = xmmword_18D3357C8;
          *(_DWORD *)(v22 + 332) = 1036831949;
          *(_WORD *)(v22 + 384) = 3;
          *(_OWORD *)(v22 + 336) = *(_OWORD *)asc_18D3357E0;
          *(_OWORD *)(v22 + 352) = unk_18D3357F0;
          *(_OWORD *)(v22 + 368) = xmmword_18D335800;
          *(_DWORD *)(v22 + 388) = 1036831949;
          qword_1ECF241B8 = v22;
        }
        v23 = qword_1ECF241C0;
        if (!qword_1ECF241C0)
        {
          v23 = operator new();
          *(_OWORD *)(v23 + 96) = xmmword_18D335878;
          *(_OWORD *)(v23 + 112) = unk_18D335888;
          *(_OWORD *)(v23 + 128) = xmmword_18D335898;
          *(_QWORD *)(v23 + 142) = 0x10001000C0001;
          *(_OWORD *)(v23 + 32) = xmmword_18D335838;
          *(_OWORD *)(v23 + 48) = unk_18D335848;
          *(_OWORD *)(v23 + 64) = xmmword_18D335858;
          *(_OWORD *)(v23 + 80) = unk_18D335868;
          *(_OWORD *)v23 = xmmword_18D335818;
          *(_OWORD *)(v23 + 16) = unk_18D335828;
          *(_DWORD *)(v23 + 152) = 1053609165;
          *(_OWORD *)(v23 + 252) = xmmword_18D335910;
          *(_OWORD *)(v23 + 268) = unk_18D335920;
          *(_OWORD *)(v23 + 284) = xmmword_18D335930;
          *(_QWORD *)(v23 + 298) = 0x1000A000B0001;
          *(_OWORD *)(v23 + 188) = xmmword_18D3358D0;
          *(_OWORD *)(v23 + 204) = unk_18D3358E0;
          *(_OWORD *)(v23 + 220) = xmmword_18D3358F0;
          *(_OWORD *)(v23 + 236) = unk_18D335900;
          *(_OWORD *)(v23 + 156) = xmmword_18D3358B0;
          *(_OWORD *)(v23 + 172) = unk_18D3358C0;
          *(_DWORD *)(v23 + 308) = 1053609165;
          *(_OWORD *)(v23 + 408) = xmmword_18D3359A8;
          *(_OWORD *)(v23 + 424) = unk_18D3359B8;
          *(_OWORD *)(v23 + 440) = xmmword_18D3359C8;
          *(_QWORD *)(v23 + 454) = 0x10001000B0001;
          *(_OWORD *)(v23 + 344) = xmmword_18D335968;
          *(_OWORD *)(v23 + 360) = *(_OWORD *)aVF;
          *(_OWORD *)(v23 + 376) = xmmword_18D335988;
          *(_OWORD *)(v23 + 392) = unk_18D335998;
          *(_OWORD *)(v23 + 312) = xmmword_18D335948;
          *(_OWORD *)(v23 + 328) = unk_18D335958;
          *(_DWORD *)(v23 + 464) = 1053609165;
          *(_OWORD *)(v23 + 564) = xmmword_18D335A40;
          *(_OWORD *)(v23 + 580) = unk_18D335A50;
          *(_OWORD *)(v23 + 596) = xmmword_18D335A60;
          *(_QWORD *)(v23 + 610) = 0xA000A0009000ALL;
          *(_OWORD *)(v23 + 500) = xmmword_18D335A00;
          *(_OWORD *)(v23 + 516) = unk_18D335A10;
          *(_OWORD *)(v23 + 532) = xmmword_18D335A20;
          *(_OWORD *)(v23 + 548) = unk_18D335A30;
          *(_OWORD *)(v23 + 468) = xmmword_18D3359E0;
          *(_OWORD *)(v23 + 484) = unk_18D3359F0;
          *(_DWORD *)(v23 + 620) = 1053609165;
          *(_OWORD *)(v23 + 720) = xmmword_18D335AD8;
          *(_OWORD *)(v23 + 736) = unk_18D335AE8;
          *(_OWORD *)(v23 + 752) = xmmword_18D335AF8;
          *(_QWORD *)(v23 + 766) = 0x10001000A0001;
          *(_OWORD *)(v23 + 656) = xmmword_18D335A98;
          *(_OWORD *)(v23 + 672) = *(_OWORD *)aT;
          *(_OWORD *)(v23 + 688) = xmmword_18D335AB8;
          *(_OWORD *)(v23 + 704) = unk_18D335AC8;
          *(_OWORD *)(v23 + 624) = xmmword_18D335A78;
          *(_OWORD *)(v23 + 640) = unk_18D335A88;
          *(_DWORD *)(v23 + 776) = 1053609165;
          *(_OWORD *)(v23 + 876) = xmmword_18D335B70;
          *(_OWORD *)(v23 + 892) = unk_18D335B80;
          *(_OWORD *)(v23 + 908) = xmmword_18D335B90;
          *(_QWORD *)(v23 + 922) = 0x1000100050001;
          *(_OWORD *)(v23 + 812) = xmmword_18D335B30;
          *(_OWORD *)(v23 + 828) = unk_18D335B40;
          *(_OWORD *)(v23 + 844) = xmmword_18D335B50;
          *(_OWORD *)(v23 + 860) = unk_18D335B60;
          *(_OWORD *)(v23 + 780) = xmmword_18D335B10;
          *(_OWORD *)(v23 + 796) = unk_18D335B20;
          *(_DWORD *)(v23 + 932) = 1053609165;
          *(_OWORD *)(v23 + 1032) = xmmword_18D335C08;
          *(_OWORD *)(v23 + 1048) = unk_18D335C18;
          *(_OWORD *)(v23 + 1064) = xmmword_18D335C28;
          *(_QWORD *)(v23 + 1078) = 0x10001000C0001;
          *(_OWORD *)(v23 + 968) = xmmword_18D335BC8;
          *(_OWORD *)(v23 + 984) = unk_18D335BD8;
          *(_OWORD *)(v23 + 1000) = xmmword_18D335BE8;
          *(_OWORD *)(v23 + 1016) = unk_18D335BF8;
          *(_OWORD *)(v23 + 936) = xmmword_18D335BA8;
          *(_OWORD *)(v23 + 952) = unk_18D335BB8;
          *(_DWORD *)(v23 + 1088) = 1053609165;
          qword_1ECF241C0 = v23;
        }
        goto LABEL_37;
      }
    }
    sub_18D258AA8();
    v22 = v28;
    sub_18D258BF4();
    goto LABEL_37;
  }
  if (!(_DWORD)a8)
  {
    v24 = *a5;
    v19 = v24 > 6;
    v25 = (1 << v24) & 0x4C;
    if (v19 || v25 == 0)
    {
      v22 = qword_1ECF24158;
      if (!qword_1ECF24158)
      {
        v22 = operator new();
        *(_WORD *)(v22 + 48) = 3;
        *(_OWORD *)v22 = xmmword_18D332EC0;
        *(_OWORD *)(v22 + 16) = unk_18D332ED0;
        *(_OWORD *)(v22 + 32) = xmmword_18D332EE0;
        *(_DWORD *)(v22 + 52) = 1036831949;
        *(_WORD *)(v22 + 104) = 3;
        *(_OWORD *)(v22 + 56) = *(_OWORD *)asc_18D332EF8;
        *(_OWORD *)(v22 + 72) = unk_18D332F08;
        *(_OWORD *)(v22 + 88) = xmmword_18D332F18;
        *(_DWORD *)(v22 + 108) = 1036831949;
        *(_WORD *)(v22 + 160) = 4;
        *(_OWORD *)(v22 + 128) = *(_OWORD *)asc_18D332F40;
        *(_OWORD *)(v22 + 144) = xmmword_18D332F50;
        *(_OWORD *)(v22 + 112) = xmmword_18D332F30;
        *(_DWORD *)(v22 + 164) = 1036831949;
        *(_WORD *)(v22 + 216) = 7;
        *(_OWORD *)(v22 + 200) = xmmword_18D332F88;
        *(_OWORD *)(v22 + 184) = unk_18D332F78;
        *(_OWORD *)(v22 + 168) = *(_OWORD *)asc_18D332F68;
        *(_DWORD *)(v22 + 220) = 1036831949;
        *(_WORD *)(v22 + 272) = 8;
        *(_OWORD *)(v22 + 224) = *(_OWORD *)a9;
        *(_OWORD *)(v22 + 240) = *(_OWORD *)&a9[16];
        *(_OWORD *)(v22 + 256) = xmmword_18D332FC0;
        *(_DWORD *)(v22 + 276) = 1036831949;
        *(_WORD *)(v22 + 328) = 5;
        *(_OWORD *)(v22 + 280) = *(_OWORD *)asc_18D332FD8;
        *(_OWORD *)(v22 + 296) = unk_18D332FE8;
        *(_OWORD *)(v22 + 312) = xmmword_18D332FF8;
        *(_DWORD *)(v22 + 332) = 1036831949;
        *(_WORD *)(v22 + 384) = 4;
        *(_OWORD *)(v22 + 336) = *(_OWORD *)asc_18D333010;
        *(_OWORD *)(v22 + 352) = unk_18D333020;
        *(_OWORD *)(v22 + 368) = xmmword_18D333030;
        *(_DWORD *)(v22 + 388) = 1036831949;
        qword_1ECF24158 = v22;
      }
      v23 = qword_1ECF24160;
      if (!qword_1ECF24160)
      {
        v23 = operator new();
        *(_OWORD *)(v23 + 96) = xmmword_18D3330A8;
        *(_OWORD *)(v23 + 112) = unk_18D3330B8;
        *(_OWORD *)(v23 + 128) = xmmword_18D3330C8;
        *(_QWORD *)(v23 + 142) = 0x1000A00060001;
        *(_OWORD *)(v23 + 32) = xmmword_18D333068;
        *(_OWORD *)(v23 + 48) = unk_18D333078;
        *(_OWORD *)(v23 + 64) = xmmword_18D333088;
        *(_OWORD *)(v23 + 80) = unk_18D333098;
        *(_OWORD *)v23 = xmmword_18D333048;
        *(_OWORD *)(v23 + 16) = unk_18D333058;
        *(_DWORD *)(v23 + 152) = 1053609165;
        *(_OWORD *)(v23 + 252) = xmmword_18D333140;
        *(_OWORD *)(v23 + 268) = unk_18D333150;
        *(_OWORD *)(v23 + 284) = xmmword_18D333160;
        *(_QWORD *)(v23 + 298) = 0x1000A00080001;
        *(_OWORD *)(v23 + 188) = xmmword_18D333100;
        *(_OWORD *)(v23 + 204) = unk_18D333110;
        *(_OWORD *)(v23 + 220) = xmmword_18D333120;
        *(_OWORD *)(v23 + 236) = unk_18D333130;
        *(_OWORD *)(v23 + 156) = xmmword_18D3330E0;
        *(_OWORD *)(v23 + 172) = unk_18D3330F0;
        *(_DWORD *)(v23 + 308) = 1053609165;
        *(_OWORD *)(v23 + 408) = xmmword_18D3331D8;
        *(_OWORD *)(v23 + 424) = unk_18D3331E8;
        *(_OWORD *)(v23 + 440) = xmmword_18D3331F8;
        *(_QWORD *)(v23 + 454) = 0x10001000E0001;
        *(_OWORD *)(v23 + 344) = xmmword_18D333198;
        *(_OWORD *)(v23 + 360) = unk_18D3331A8;
        *(_OWORD *)(v23 + 376) = xmmword_18D3331B8;
        *(_OWORD *)(v23 + 392) = unk_18D3331C8;
        *(_OWORD *)(v23 + 312) = xmmword_18D333178;
        *(_OWORD *)(v23 + 328) = unk_18D333188;
        *(_DWORD *)(v23 + 464) = 1053609165;
        *(_OWORD *)(v23 + 564) = xmmword_18D333270;
        *(_OWORD *)(v23 + 580) = unk_18D333280;
        *(_OWORD *)(v23 + 596) = xmmword_18D333290;
        *(_QWORD *)(v23 + 610) = 0x1000100060001;
        *(_OWORD *)(v23 + 500) = xmmword_18D333230;
        *(_OWORD *)(v23 + 516) = unk_18D333240;
        *(_OWORD *)(v23 + 532) = xmmword_18D333250;
        *(_OWORD *)(v23 + 548) = unk_18D333260;
        *(_OWORD *)(v23 + 468) = xmmword_18D333210;
        *(_OWORD *)(v23 + 484) = unk_18D333220;
        *(_DWORD *)(v23 + 620) = 1053609165;
        *(_OWORD *)(v23 + 720) = xmmword_18D333308;
        *(_OWORD *)(v23 + 736) = unk_18D333318;
        *(_OWORD *)(v23 + 752) = xmmword_18D333328;
        *(_QWORD *)(v23 + 766) = 0x10001000A0001;
        *(_OWORD *)(v23 + 656) = xmmword_18D3332C8;
        *(_OWORD *)(v23 + 672) = unk_18D3332D8;
        *(_OWORD *)(v23 + 688) = xmmword_18D3332E8;
        *(_OWORD *)(v23 + 704) = unk_18D3332F8;
        *(_OWORD *)(v23 + 624) = xmmword_18D3332A8;
        *(_OWORD *)(v23 + 640) = unk_18D3332B8;
        *(_DWORD *)(v23 + 776) = 1053609165;
        *(_OWORD *)(v23 + 876) = xmmword_18D3333A0;
        *(_OWORD *)(v23 + 892) = unk_18D3333B0;
        *(_OWORD *)(v23 + 908) = xmmword_18D3333C0;
        *(_QWORD *)(v23 + 922) = 0x1000100080001;
        *(_OWORD *)(v23 + 812) = xmmword_18D333360;
        *(_OWORD *)(v23 + 828) = unk_18D333370;
        *(_OWORD *)(v23 + 844) = xmmword_18D333380;
        *(_OWORD *)(v23 + 860) = unk_18D333390;
        *(_OWORD *)(v23 + 780) = xmmword_18D333340;
        *(_OWORD *)(v23 + 796) = unk_18D333350;
        *(_DWORD *)(v23 + 932) = 1053609165;
        *(_OWORD *)(v23 + 1032) = xmmword_18D333438;
        *(_OWORD *)(v23 + 1048) = unk_18D333448;
        *(_OWORD *)(v23 + 1064) = xmmword_18D333458;
        *(_QWORD *)(v23 + 1078) = 0x1000100090001;
        *(_OWORD *)(v23 + 968) = xmmword_18D3333F8;
        *(_OWORD *)(v23 + 984) = unk_18D333408;
        *(_OWORD *)(v23 + 1000) = xmmword_18D333418;
        *(_OWORD *)(v23 + 1016) = unk_18D333428;
        *(_OWORD *)(v23 + 936) = xmmword_18D3333D8;
        *(_OWORD *)(v23 + 952) = unk_18D3333E8;
        *(_DWORD *)(v23 + 1088) = 1053609165;
        qword_1ECF24160 = v23;
      }
    }
    else
    {
      v22 = qword_1ECF24148;
      if (!qword_1ECF24148)
      {
        v22 = operator new();
        *(_WORD *)(v22 + 48) = 4;
        *(_OWORD *)v22 = xmmword_18D332910;
        *(_OWORD *)(v22 + 16) = *(_OWORD *)asc_18D332920;
        *(_OWORD *)(v22 + 32) = xmmword_18D332930;
        *(_DWORD *)(v22 + 52) = 1036831949;
        *(_WORD *)(v22 + 104) = 5;
        *(_OWORD *)(v22 + 56) = *(_OWORD *)asc_18D332948;
        *(_OWORD *)(v22 + 72) = unk_18D332958;
        *(_OWORD *)(v22 + 88) = xmmword_18D332968;
        *(_DWORD *)(v22 + 108) = 1036831949;
        *(_WORD *)(v22 + 160) = 4;
        *(_OWORD *)(v22 + 128) = *(_OWORD *)asc_18D332990;
        *(_OWORD *)(v22 + 144) = xmmword_18D3329A0;
        *(_OWORD *)(v22 + 112) = xmmword_18D332980;
        *(_WORD *)(v22 + 216) = 7;
        *(_DWORD *)(v22 + 164) = 1036831949;
        *(_OWORD *)(v22 + 200) = xmmword_18D3329D8;
        *(_OWORD *)(v22 + 184) = unk_18D3329C8;
        *(_OWORD *)(v22 + 168) = xmmword_18D3329B8;
        *(_DWORD *)(v22 + 220) = 1036831949;
        *(_WORD *)(v22 + 272) = 20;
        *(_OWORD *)(v22 + 224) = *(_OWORD *)aG46;
        *(_OWORD *)(v22 + 240) = unk_18D332A00;
        *(_OWORD *)(v22 + 256) = xmmword_18D332A10;
        *(_DWORD *)(v22 + 276) = 1036831949;
        *(_WORD *)(v22 + 328) = 4;
        *(_OWORD *)(v22 + 280) = xmmword_18D332A28;
        *(_OWORD *)(v22 + 296) = unk_18D332A38;
        *(_OWORD *)(v22 + 312) = xmmword_18D332A48;
        *(_DWORD *)(v22 + 332) = 1036831949;
        *(_WORD *)(v22 + 384) = 10;
        *(_OWORD *)(v22 + 336) = *(_OWORD *)asc_18D332A60;
        *(_OWORD *)(v22 + 352) = unk_18D332A70;
        *(_OWORD *)(v22 + 368) = xmmword_18D332A80;
        *(_DWORD *)(v22 + 388) = 1036831949;
        qword_1ECF24148 = v22;
      }
      v23 = qword_1ECF24150;
      if (!qword_1ECF24150)
      {
        v23 = operator new();
        *(_OWORD *)(v23 + 96) = xmmword_18D332AF8;
        *(_OWORD *)(v23 + 112) = unk_18D332B08;
        *(_OWORD *)(v23 + 128) = xmmword_18D332B18;
        *(_QWORD *)(v23 + 142) = 0x1000100100001;
        *(_OWORD *)(v23 + 32) = xmmword_18D332AB8;
        *(_OWORD *)(v23 + 48) = unk_18D332AC8;
        *(_OWORD *)(v23 + 64) = xmmword_18D332AD8;
        *(_OWORD *)(v23 + 80) = unk_18D332AE8;
        *(_OWORD *)v23 = xmmword_18D332A98;
        *(_OWORD *)(v23 + 16) = unk_18D332AA8;
        *(_DWORD *)(v23 + 152) = 1053609165;
        *(_OWORD *)(v23 + 252) = xmmword_18D332B90;
        *(_OWORD *)(v23 + 268) = unk_18D332BA0;
        *(_OWORD *)(v23 + 284) = xmmword_18D332BB0;
        *(_QWORD *)(v23 + 298) = 0xA000A0003000ALL;
        *(_OWORD *)(v23 + 188) = xmmword_18D332B50;
        *(_OWORD *)(v23 + 204) = unk_18D332B60;
        *(_OWORD *)(v23 + 220) = xmmword_18D332B70;
        *(_OWORD *)(v23 + 236) = unk_18D332B80;
        *(_OWORD *)(v23 + 156) = xmmword_18D332B30;
        *(_OWORD *)(v23 + 172) = unk_18D332B40;
        *(_DWORD *)(v23 + 308) = 1053609165;
        *(_OWORD *)(v23 + 408) = xmmword_18D332C28;
        *(_OWORD *)(v23 + 424) = unk_18D332C38;
        *(_OWORD *)(v23 + 440) = xmmword_18D332C48;
        *(_QWORD *)(v23 + 454) = 0x2000A00150001;
        *(_OWORD *)(v23 + 344) = xmmword_18D332BE8;
        *(_OWORD *)(v23 + 360) = unk_18D332BF8;
        *(_OWORD *)(v23 + 376) = xmmword_18D332C08;
        *(_OWORD *)(v23 + 392) = unk_18D332C18;
        *(_OWORD *)(v23 + 312) = xmmword_18D332BC8;
        *(_OWORD *)(v23 + 328) = unk_18D332BD8;
        *(_DWORD *)(v23 + 464) = 1053609165;
        *(_OWORD *)(v23 + 564) = xmmword_18D332CC0;
        *(_OWORD *)(v23 + 580) = unk_18D332CD0;
        *(_OWORD *)(v23 + 596) = xmmword_18D332CE0;
        *(_QWORD *)(v23 + 610) = 0x1000A00090001;
        *(_OWORD *)(v23 + 500) = xmmword_18D332C80;
        *(_OWORD *)(v23 + 516) = unk_18D332C90;
        *(_OWORD *)(v23 + 532) = xmmword_18D332CA0;
        *(_OWORD *)(v23 + 548) = unk_18D332CB0;
        *(_OWORD *)(v23 + 468) = xmmword_18D332C60;
        *(_OWORD *)(v23 + 484) = unk_18D332C70;
        *(_DWORD *)(v23 + 620) = 1053609165;
        *(_OWORD *)(v23 + 720) = xmmword_18D332D58;
        *(_OWORD *)(v23 + 736) = unk_18D332D68;
        *(_OWORD *)(v23 + 752) = xmmword_18D332D78;
        *(_QWORD *)(v23 + 766) = 0x1000200140001;
        *(_OWORD *)(v23 + 656) = xmmword_18D332D18;
        *(_OWORD *)(v23 + 672) = unk_18D332D28;
        *(_OWORD *)(v23 + 688) = xmmword_18D332D38;
        *(_OWORD *)(v23 + 704) = unk_18D332D48;
        *(_OWORD *)(v23 + 624) = xmmword_18D332CF8;
        *(_OWORD *)(v23 + 640) = unk_18D332D08;
        *(_DWORD *)(v23 + 776) = 1053609165;
        *(_OWORD *)(v23 + 876) = xmmword_18D332DF0;
        *(_OWORD *)(v23 + 892) = unk_18D332E00;
        *(_OWORD *)(v23 + 908) = xmmword_18D332E10;
        *(_QWORD *)(v23 + 922) = 0x1000100080001;
        *(_OWORD *)(v23 + 812) = xmmword_18D332DB0;
        *(_OWORD *)(v23 + 828) = unk_18D332DC0;
        *(_OWORD *)(v23 + 844) = xmmword_18D332DD0;
        *(_OWORD *)(v23 + 860) = unk_18D332DE0;
        *(_OWORD *)(v23 + 780) = xmmword_18D332D90;
        *(_OWORD *)(v23 + 796) = unk_18D332DA0;
        *(_DWORD *)(v23 + 932) = 1053609165;
        *(_OWORD *)(v23 + 1032) = xmmword_18D332E88;
        *(_OWORD *)(v23 + 1048) = unk_18D332E98;
        *(_OWORD *)(v23 + 1064) = xmmword_18D332EA8;
        *(_QWORD *)(v23 + 1078) = 0x1000A00080001;
        *(_OWORD *)(v23 + 968) = xmmword_18D332E48;
        *(_OWORD *)(v23 + 984) = unk_18D332E58;
        *(_OWORD *)(v23 + 1000) = xmmword_18D332E68;
        *(_OWORD *)(v23 + 1016) = unk_18D332E78;
        *(_OWORD *)(v23 + 936) = xmmword_18D332E28;
        *(_OWORD *)(v23 + 952) = unk_18D332E38;
        *(_DWORD *)(v23 + 1088) = 1053609165;
        qword_1ECF24150 = v23;
      }
    }
    goto LABEL_37;
  }
LABEL_4:
  v16 = 0;
  v17 = 0.0;
  return v16 | LODWORD(v17);
}

double sub_18D258AA8()
{
  uint64_t v0;
  double result;

  if (!qword_1EE061860)
  {
    v0 = operator new();
    *(_WORD *)(v0 + 48) = 7;
    *(_OWORD *)v0 = *(_OWORD *)asc_18D334580;
    *(_OWORD *)(v0 + 16) = unk_18D334590;
    *(_OWORD *)(v0 + 32) = xmmword_18D3345A0;
    *(_DWORD *)(v0 + 52) = 1036831949;
    *(_WORD *)(v0 + 104) = 9;
    *(_OWORD *)(v0 + 56) = *(_OWORD *)asc_18D3345B8;
    *(_OWORD *)(v0 + 72) = unk_18D3345C8;
    *(_OWORD *)(v0 + 88) = xmmword_18D3345D8;
    *(_DWORD *)(v0 + 108) = 1036831949;
    *(_WORD *)(v0 + 160) = 8;
    *(_OWORD *)(v0 + 128) = unk_18D334600;
    *(_OWORD *)(v0 + 144) = xmmword_18D334610;
    *(_OWORD *)(v0 + 112) = xmmword_18D3345F0;
    *(_DWORD *)(v0 + 164) = 1036831949;
    *(_WORD *)(v0 + 216) = 6;
    *(_OWORD *)(v0 + 200) = xmmword_18D334648;
    *(_OWORD *)(v0 + 184) = *(_OWORD *)asc_18D334638;
    *(_OWORD *)(v0 + 168) = xmmword_18D334628;
    *(_DWORD *)(v0 + 220) = 1036831949;
    *(_WORD *)(v0 + 272) = 12;
    *(_OWORD *)(v0 + 224) = *(_OWORD *)aCb9;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)&aCb9[16];
    *(_OWORD *)(v0 + 256) = xmmword_18D334680;
    *(_DWORD *)(v0 + 276) = 1036831949;
    *(_WORD *)(v0 + 328) = 5;
    *(_OWORD *)(v0 + 280) = *(_OWORD *)a8;
    *(_OWORD *)(v0 + 296) = unk_18D3346A8;
    *(_OWORD *)(v0 + 312) = xmmword_18D3346B8;
    *(_DWORD *)(v0 + 332) = 1036831949;
    *(_WORD *)(v0 + 384) = 5;
    *(_OWORD *)(v0 + 336) = xmmword_18D3346D0;
    *(_OWORD *)(v0 + 352) = unk_18D3346E0;
    *(_QWORD *)&result = 0x4000400040004;
    *(_OWORD *)(v0 + 368) = xmmword_18D3346F0;
    *(_DWORD *)(v0 + 388) = 1036831949;
    qword_1EE061860 = v0;
  }
  return result;
}

double sub_18D258BF4()
{
  uint64_t v0;
  double result;

  if (!qword_1EE061868)
  {
    v0 = operator new();
    *(_OWORD *)(v0 + 96) = xmmword_18D334768;
    *(_OWORD *)(v0 + 112) = unk_18D334778;
    *(_OWORD *)(v0 + 128) = xmmword_18D334788;
    *(_QWORD *)(v0 + 142) = 0x1000100080001;
    *(_OWORD *)(v0 + 32) = xmmword_18D334728;
    *(_OWORD *)(v0 + 48) = unk_18D334738;
    *(_OWORD *)(v0 + 64) = xmmword_18D334748;
    *(_OWORD *)(v0 + 80) = unk_18D334758;
    *(_OWORD *)v0 = xmmword_18D334708;
    *(_OWORD *)(v0 + 16) = unk_18D334718;
    *(_DWORD *)(v0 + 152) = 1053609165;
    *(_OWORD *)(v0 + 252) = xmmword_18D334800;
    *(_OWORD *)(v0 + 268) = unk_18D334810;
    *(_OWORD *)(v0 + 284) = xmmword_18D334820;
    *(_QWORD *)(v0 + 298) = 0x1000100050001;
    *(_OWORD *)(v0 + 188) = xmmword_18D3347C0;
    *(_OWORD *)(v0 + 204) = unk_18D3347D0;
    *(_OWORD *)(v0 + 220) = xmmword_18D3347E0;
    *(_OWORD *)(v0 + 236) = unk_18D3347F0;
    *(_OWORD *)(v0 + 156) = xmmword_18D3347A0;
    *(_OWORD *)(v0 + 172) = unk_18D3347B0;
    *(_DWORD *)(v0 + 308) = 1053609165;
    *(_OWORD *)(v0 + 408) = xmmword_18D334898;
    *(_OWORD *)(v0 + 424) = unk_18D3348A8;
    *(_OWORD *)(v0 + 440) = xmmword_18D3348B8;
    *(_QWORD *)(v0 + 454) = 0x10001000E0001;
    *(_OWORD *)(v0 + 344) = xmmword_18D334858;
    *(_OWORD *)(v0 + 360) = unk_18D334868;
    *(_OWORD *)(v0 + 376) = xmmword_18D334878;
    *(_OWORD *)(v0 + 392) = unk_18D334888;
    *(_OWORD *)(v0 + 312) = xmmword_18D334838;
    *(_OWORD *)(v0 + 328) = unk_18D334848;
    *(_DWORD *)(v0 + 464) = 1053609165;
    *(_OWORD *)(v0 + 564) = xmmword_18D334930;
    *(_OWORD *)(v0 + 580) = unk_18D334940;
    *(_OWORD *)(v0 + 596) = xmmword_18D334950;
    *(_QWORD *)(v0 + 610) = 0x1000A00110001;
    *(_OWORD *)(v0 + 500) = xmmword_18D3348F0;
    *(_OWORD *)(v0 + 516) = unk_18D334900;
    *(_OWORD *)(v0 + 532) = xmmword_18D334910;
    *(_OWORD *)(v0 + 548) = unk_18D334920;
    *(_OWORD *)(v0 + 468) = xmmword_18D3348D0;
    *(_OWORD *)(v0 + 484) = unk_18D3348E0;
    *(_DWORD *)(v0 + 620) = 1053609165;
    *(_OWORD *)(v0 + 720) = xmmword_18D3349C8;
    *(_OWORD *)(v0 + 736) = unk_18D3349D8;
    *(_OWORD *)(v0 + 752) = xmmword_18D3349E8;
    *(_QWORD *)(v0 + 766) = 0x1000100070001;
    *(_OWORD *)(v0 + 656) = xmmword_18D334988;
    *(_OWORD *)(v0 + 672) = unk_18D334998;
    *(_OWORD *)(v0 + 688) = xmmword_18D3349A8;
    *(_OWORD *)(v0 + 704) = unk_18D3349B8;
    *(_OWORD *)(v0 + 624) = xmmword_18D334968;
    *(_OWORD *)(v0 + 640) = unk_18D334978;
    *(_DWORD *)(v0 + 776) = 1053609165;
    *(_OWORD *)(v0 + 876) = xmmword_18D334A60;
    *(_OWORD *)(v0 + 892) = unk_18D334A70;
    *(_OWORD *)(v0 + 908) = xmmword_18D334A80;
    *(_QWORD *)(v0 + 922) = 0x1000100030001;
    *(_OWORD *)(v0 + 812) = xmmword_18D334A20;
    *(_OWORD *)(v0 + 828) = unk_18D334A30;
    *(_OWORD *)(v0 + 844) = xmmword_18D334A40;
    *(_OWORD *)(v0 + 860) = unk_18D334A50;
    *(_OWORD *)(v0 + 780) = xmmword_18D334A00;
    *(_OWORD *)(v0 + 796) = unk_18D334A10;
    *(_DWORD *)(v0 + 932) = 1053609165;
    *(_OWORD *)(v0 + 1032) = xmmword_18D334AF8;
    *(_OWORD *)(v0 + 1048) = unk_18D334B08;
    *(_OWORD *)(v0 + 1064) = xmmword_18D334B18;
    *(_QWORD *)(v0 + 1078) = 0x1000A00070001;
    *(_OWORD *)(v0 + 968) = xmmword_18D334AB8;
    *(_OWORD *)(v0 + 984) = unk_18D334AC8;
    *(_OWORD *)(v0 + 1000) = xmmword_18D334AD8;
    *(_OWORD *)(v0 + 1016) = unk_18D334AE8;
    result = 1.53798148e-304;
    *(_OWORD *)(v0 + 936) = xmmword_18D334A98;
    *(_OWORD *)(v0 + 952) = unk_18D334AA8;
    *(_DWORD *)(v0 + 1088) = 1053609165;
    qword_1EE061868 = v0;
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::EurekaGNSSUncertaintyWrapper::GetScaleFactorTableIndices(float a1, double a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t i;
  unint64_t j;
  BOOL v12;
  uint64_t v13;
  double v14;
  unsigned __int8 v16;
  __int16 v17;

  for (i = 0; i != 4; ++i)
  {
    if (flt_18D33289C[i] >= a1)
      break;
  }
  for (j = 0; j != 4; ++j)
  {
    if (dbl_18D3328B0[j] >= a2)
      break;
  }
  v12 = i >= 5 || j >= 5;
  v13 = !v12;
  if (v12)
  {
    v17 = 12;
    v16 = 5;
    v14 = a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "invalid index found,cn0,%.3f,cn0_bin,%zu,elev,%.3lf,elev_bin,%zu,", a6, a7, a8, a9, a10, SLOBYTE(v14));
  }
  else
  {
    *a4 = i;
    a4[1] = j;
  }
  return v13;
}

void sub_18D258EC4()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t raven::UserSpeedChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double v9;
  uint64_t v10;
  unsigned __int8 v12;
  __int16 v13;
  unsigned __int8 v14;
  __int16 v15;

  *(_QWORD *)(a1 + 16) = a3;
  v8 = *(double *)(*(_QWORD *)a2 + 3288);
  v9 = *(double *)(*(_QWORD *)a2 + 3296);
  *(double *)(a1 + 24) = v8;
  *(double *)(a1 + 32) = v9;
  if (v8 >= 0.0)
  {
    if (v9 >= 0.0)
    {
      v10 = 0;
      *(_BYTE *)(a1 + 8) = 1;
      return v10;
    }
    v13 = 12;
    v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "UserSpeedChecker: Cannot configure. Invalid max_dot_covariance_trace_dense_urban_: %.2lf", a4, a5, a6, a7, a8, SLOBYTE(v9));
  }
  else
  {
    v15 = 12;
    v14 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "UserSpeedChecker: Cannot configure. Invalid max_dot_covariance_trace_: %.2lf", a4, a5, a6, a7, a8, SLOBYTE(v8));
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::UserSpeedChecker::HandleEvent(raven::UserSpeedChecker *this, const raven::UserSpeedEvent *a2, raven::UserSpeedEvent *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  unsigned __int8 v53;
  __int16 v54;
  unsigned __int8 v55;
  __int16 v56;
  unsigned __int8 v57;
  __int16 v58;
  unsigned __int8 v59;
  __int16 v60;
  unsigned __int8 v61;
  __int16 v62;

  if (*((_BYTE *)this + 8))
  {
    if ((*((_QWORD *)a2 + 13) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 13) <= 0.000000015)
    {
      if (!cnprint::CNPrinter::GetLogLevel(this))
      {
        v60 = 12;
        v59 = 0;
        v27 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v50 = v28 + (double)v27;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v59, "t,%.3lf,UserSpeedChecker: Assistance rejected due to invalid user speed", v29, v30, v31, v32, v33, SLOBYTE(v50));
      }
      return 0xFFFFFFFFLL;
    }
    if ((*((_QWORD *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 14) < 0.0)
    {
      if (!cnprint::CNPrinter::GetLogLevel(this))
      {
        v58 = 12;
        v57 = 0;
        v34 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v51 = v35 + (double)v34;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "t,%.3lf,UserSpeedChecker: Assistance rejected due to invalid user speed uncertainty", v36, v37, v38, v39, v40, SLOBYTE(v51));
      }
      return 0xFFFFFFFFLL;
    }
    v5 = *(_OWORD *)((char *)a2 + 8);
    v6 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a3 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a3 + 24) = v6;
    *(_OWORD *)((char *)a3 + 8) = v5;
    v7 = *(_OWORD *)((char *)a2 + 56);
    v8 = *(_OWORD *)((char *)a2 + 72);
    v9 = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a3 + 88) = v9;
    *(_OWORD *)((char *)a3 + 72) = v8;
    *(_OWORD *)((char *)a3 + 56) = v7;
    if (!*((_BYTE *)this + 9))
      return 0;
    result = (uint64_t)sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D335C3E);
    if (!result)
      return result;
    if (!*(_BYTE *)(result + 1369))
    {
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result))
      {
        v56 = 12;
        v55 = 0;
        v41 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
        v52 = v42 + (double)v41;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, &v55, "t,%.3lf,UserSpeedChecker: Assistance rejected due to invalid DOT", v43, v44, v45, v46, v47, SLOBYTE(v52));
      }
      return 0xFFFFFFFFLL;
    }
    v11 = *((_QWORD *)this + 2);
    v12 = *((double *)this + 3);
    if (*(_BYTE *)(v11 + 664) && *(unsigned __int8 *)(v11 + 776) - 3 <= 1)
      v12 = *((double *)this + 4);
    if (*(double *)(result + 1440) + *(double *)(result + 1464) + *(double *)(result + 1480) <= v12)
      return 0;
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result))
    {
      v54 = 12;
      v53 = 0;
      v13 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(_QWORD *)a2 + 16))(a2);
      v48 = v14 + (double)v13;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "t,%.3lf,UserSpeedChecker: Assistance rejected due to large DOT covariance trace: %.3f exceeding threshold of: %.3f", v15, v16, v17, v18, v19, SLOBYTE(v48));
    }
  }
  else
  {
    v62 = 12;
    v61 = 4;
    v20 = (*(uint64_t (**)(const raven::UserSpeedEvent *, const raven::UserSpeedEvent *, raven::UserSpeedEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v49 = v21 + (double)v20;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, &v61, "t,%.3lf,UserSpeedChecker, not configured", v22, v23, v24, v25, v26, SLOBYTE(v49));
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenMovingStateEstimatorActiveObject::Configure(cnframework::ActiveObjectBase *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  cnprint::CNPrinter *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  unsigned __int8 v30;
  __int16 v31;
  uint64_t v32;
  void *__p[2];
  char v34;

  if (*((_BYTE *)a1 + 480))
  {
    LOWORD(v32) = 12;
    LOBYTE(v31) = 2;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v34 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, (unsigned __int8 *)&v31, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v34 < 0)
      operator delete(__p[0]);
  }
  *((_BYTE *)a1 + 480) = 0;
  if (!*(_QWORD *)a2 || !*(_BYTE *)(*(_QWORD *)a2 + 33))
  {
    LOWORD(v32) = 12;
    LOBYTE(v31) = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v34 >= 0)
      v21 = __p;
    else
      LOBYTE(v21) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, (unsigned __int8 *)&v31, "%s could not be configured.", v16, v17, v18, v19, v20, (char)v21);
    goto LABEL_18;
  }
  v32 = *(_QWORD *)a2;
  if (raven::RavenMovingStateEstimator::Configure((uint64_t)a1 + 536, &v32))
  {
    v31 = 12;
    v30 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v34 >= 0)
      v15 = __p;
    else
      LOBYTE(v15) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s could not configure RavenMovingStateEstimator.", v10, v11, v12, v13, v14, (char)v15);
LABEL_18:
    if (v34 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  cnframework::ActiveObjectBase::SetEventQueueDelay(a1, 0.0);
  *((_BYTE *)a1 + 480) = 1;
  v23 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)a1 + 48))(a1);
  if (cnprint::CNPrinter::GetLogLevel(v23) <= 1)
  {
    v31 = 12;
    v30 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v34 >= 0)
      v29 = __p;
    else
      LOBYTE(v29) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s configured successfully.", v24, v25, v26, v27, v28, (char)v29);
    if (v34 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D259420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenMovingStateEstimatorActiveObject::IsConfigured(raven::RavenMovingStateEstimatorActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void sub_18D259454(void **a1)
{
  sub_18D07396C(a1);
  JUMPOUT(0x18D78B5D4);
}

int64x2_t *raven::RavenNLOSEngine::RavenNLOSEngine(int64x2_t *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  std::__shared_weak_count *v13;

  this->i64[0] = 0;
  this->i8[8] = 0;
  v2 = (std::__shared_weak_count *)operator new(0x28uLL);
  v3 = v2;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E25C0BF8;
  this[1].i64[0] = (uint64_t)&v2[1];
  this[1].i64[1] = (uint64_t)v2;
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCEF8;
  v2[1].__shared_owners_ = 0;
  this[2].i64[0] = 0;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  this[14].i64[0] = 0;
  this[2].i8[8] = 0;
  this[4].i8[0] = 0;
  this[4].i8[8] = 0;
  this[12].i8[8] = 0;
  this[13] = vdupq_n_s64(0x7FF8000000000000uLL);
  this[14].i64[1] = 0;
  v12 = &v2[1].__vftable;
  v13 = v2;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  sub_18D1893E8((int64x2_t *)this[14].i64, (uint64_t *)&v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  this[15].i8[0] = 0;
  this[16].i8[0] = 0;
  this[16].i8[8] = 0;
  this[28].i8[8] = 0;
  this[29].i8[0] = 0;
  this[181].i8[0] = 0;
  this[181].i8[8] = 0;
  this[188].i8[8] = 0;
  this[189] = 0u;
  this[190] = 0u;
  raven::RavenFacetVisibilityData::RavenFacetVisibilityData((raven::RavenFacetVisibilityData *)&this[191]);
  this[202].i64[1] = (uint64_t)&this[2].i64[1];
  return this;
}

void sub_18D2595FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  a9 = (void **)(v9 + 3032);
  sub_18D262D30(&a9);
  sub_18D07C868(v11);
  if (*(_BYTE *)(v9 + 200))
  {
    *(_QWORD *)(v9 + 72) = off_1E25B9B80;
    *(_QWORD *)(v9 + 88) = &unk_1E25C5E70;
  }
  v13 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_18D07C868(v10);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenNLOSEngine::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  char *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t result;
  char v26;
  unsigned __int8 v27;
  __int16 v28;

  if (*(_BYTE *)(a1 + 8))
  {
    v28 = 12;
    v27 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,Warning: RavenNLOSEngine configured more than once.", a4, a5, a6, a7, a8, v26);
  }
  *(_BYTE *)(a1 + 8) = 0;
  v10 = *a2;
  if (!*a2 || !*(_BYTE *)(v10 + 33))
  {
    v28 = 12;
    v27 = 4;
    v16 = "#nlos,NLOS engine could not be configured: invalid RavenParameters";
LABEL_43:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, v16, a4, a5, a6, a7, a8, v26);
    return 0xFFFFFFFFLL;
  }
  v11 = *(double *)(v10 + 3504);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 <= 0.0)
  {
    v28 = 12;
    v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_building_data_query_radius_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v11));
    return 0xFFFFFFFFLL;
  }
  v12 = *(double *)(v10 + 3512);
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v12 < 0.0)
  {
    v28 = 12;
    v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_distance_beyond_query_radius_to_keep_tiles_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v12));
    return 0xFFFFFFFFLL;
  }
  v13 = *(double *)(v10 + 3528);
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 <= 0.0)
  {
    v28 = 12;
    v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_allowable_distance_of_facet_from_point_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v13));
    return 0xFFFFFFFFLL;
  }
  v14 = *(double *)(v10 + 3536);
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 <= 0.0)
  {
    v28 = 12;
    v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_allowable_matrix_condition_number_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v14));
    return 0xFFFFFFFFLL;
  }
  v15 = *(_QWORD *)(v10 + 3544);
  if (v15 >= 6)
  {
    v28 = 12;
    v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_reflections_ exceeds maximum allowed value: %llu vs %llu", a4, a5, a6, a7, a8, v15);
    return 0xFFFFFFFFLL;
  }
  v17 = *(double *)(v10 + 3560);
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v17 < 0.0 || v17 > 360.0)
  {
    v28 = 12;
    v27 = 4;
    v26 = LOBYTE(v17);
    v16 = "#nlos,NLOS engine could not be configured: gnss_ray_tracing_azimuth_resolution_for_approximate_signal_path_search_deg_,%.2lf";
    goto LABEL_43;
  }
  v18 = *(double *)(v10 + 3568);
  if ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v18 <= 0.0)
  {
    v28 = 12;
    v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_reflection_point_shift_for_refined_path_convergence_m_,%.2lf", a4, a5, a6, a7, a8, SLOBYTE(v18));
    return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)(v10 + 3576))
  {
    v28 = 12;
    v27 = 4;
    v16 = "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_iterations_to_converge_refined_path_ is zero";
    goto LABEL_43;
  }
  v19 = *(double *)(v10 + 3584);
  if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v19 < 0.0)
  {
    v28 = 12;
    v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_min_radius_for_candidate_point_search_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v19));
  }
  else
  {
    v20 = *(double *)(v10 + 3592);
    if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v20 < 1.0)
    {
      v28 = 12;
      v27 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_error_ellipse_scale_factor_for_candidate_point_search_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v20));
    }
    else
    {
      v21 = *(double *)(v10 + 3600);
      if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v21 <= 0.0)
      {
        v28 = 12;
        v27 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_candidate_point_search_step_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v21));
      }
      else
      {
        v22 = *(double *)(v10 + 3616);
        if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v22 < 0.0 || v22 > 1.0)
        {
          v28 = 12;
          v27 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_probability_line_of_sight_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v22));
        }
        else
        {
          v23 = *(double *)(v10 + 3624);
          if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v23 < 0.0 || v23 > 90.0)
          {
            v28 = 12;
            v27 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_satellite_elevation_deg_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v23));
          }
          else
          {
            v24 = *(double *)(v10 + 3632);
            if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v24 >= 0.0 && v24 <= 1.0)
            {
              result = 0;
              *(double *)(a1 + 3152) = v13 * v13;
              *(_BYTE *)(a1 + 3160) = v15;
              *(_QWORD *)a1 = v10;
              *(_BYTE *)(a1 + 8) = 1;
              return result;
            }
            v28 = 12;
            v27 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_min_occurrence_rate_of_most_common_sequence_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v24));
          }
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

BOOL raven::RavenNLOSEngine::CopyBuildingSectionData(uint64_t a1, uint64_t *a2, uint64_t ***a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t i;
  double *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  char *v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  int64x2_t v124;
  int64x2_t v125;
  char v126;
  unint64_t v128;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  unsigned __int8 v135;
  _QWORD v136[2];
  __int128 v137;
  uint64_t *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;

  v9 = *a3;
  if (!*a3)
  {
    LOWORD(v141) = 12;
    LOBYTE(v140) = 4;
    v119 = "#nlos,null destination pointer";
LABEL_133:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, v119, (uint64_t)a4, a5, a6, a7, a8, v121);
    return 0;
  }
  v11 = a2[1];
  v12 = v11 - *a2;
  if (v11 == *a2)
  {
    LOWORD(v141) = 12;
    LOBYTE(v140) = 4;
    v119 = "#nlos,input building section container is empty";
    goto LABEL_133;
  }
  if (v12 != 80)
  {
    sub_18D17CA78(v9 + 2, 0xCCCCCCCCCCCCCCCDLL * (v12 >> 4) + v9[3] - v9[2]);
    v9 = *a3;
  }
  v13 = v9[12];
  v14 = v13;
  if (!v13)
    v14 = v9[11];
  v15 = *a2;
  v16 = a2[1];
  if (*a2 != v16)
  {
    v17 = 0;
    v130 = a1 + 40;
    v125 = vdupq_n_s64(0xFFF0000000000000);
    v124 = vdupq_n_s64(0x7FF0000000000000uLL);
    v131 = v12;
    v122 = a2[1];
    v123 = v9[12];
    while (1)
    {
      v18 = *(_QWORD *)(v15 + 8) - *(_QWORD *)v15;
      ++v17;
      if (v13)
        break;
      v19 = *(double *)(v15 + 32);
      if (fabs(v19) >= 2.22044605e-16)
      {
        if ((unint64_t)v18 >= 0x20)
        {
          v26 = v18 >> 4;
          v25 = *(double *)(v15 + 24);
LABEL_35:
          v34 = operator new();
          v35 = v34;
          *(_QWORD *)v34 = &off_1E25C0C60;
          *(_QWORD *)(v34 + 8) = &unk_1E25C0CA0;
          *(_QWORD *)(v34 + 24) = 0;
          *(_QWORD *)(v34 + 32) = 0;
          *(_QWORD *)(v34 + 16) = 0;
          *(int64x2_t *)(v34 + 40) = v125;
          *(_OWORD *)(v34 + 56) = xmmword_18D335D80;
          *(int64x2_t *)(v34 + 72) = v124;
          if (v12 == 80)
            v36 = *a3 + 2;
          else
            v36 = (_QWORD *)(v34 + 16);
          sub_18D17CA78(v36, v26);
          v128 = v18;
          if (*(_BYTE *)(a1 + 64))
          {
            v42 = **(double **)v15;
            v43 = *(double *)(a1 + 40);
            v44 = *(double *)(a1 + 208);
            v45 = sub_18D17CE64(v130, *(double *)(*(_QWORD *)v15 + 8));
            v46 = operator new(0x28uLL);
            v46[1] = 0;
            v47 = v46 + 1;
            v46[2] = 0;
            *((double *)v46 + 3) = v45;
            *v46 = &off_1E25CD080;
            *((double *)v46 + 4) = -(v43 - v42 * 0.0174532925) * v44;
            *(_QWORD *)&v141 = v46 + 3;
            *((_QWORD *)&v141 + 1) = v46;
            *(_QWORD *)&v140 = v46 + 3;
            *((_QWORD *)&v140 + 1) = v46;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          else
          {
            v141 = 0uLL;
            v140 = 0uLL;
          }
          v33 = 0;
          v126 = v26;
          if (v26 <= 2)
            v26 = 2;
          for (i = 1; i != v26; ++i)
          {
            if (*(_BYTE *)(a1 + 64))
            {
              v50 = (double *)(*(_QWORD *)v15 + 16 * i);
              v51 = *v50;
              v52 = *(double *)(a1 + 40);
              v53 = *(double *)(a1 + 208);
              v54 = sub_18D17CE64(v130, v50[1]);
              v55 = (std::__shared_weak_count *)operator new(0x28uLL);
              v55->__shared_owners_ = 0;
              v55->__shared_weak_owners_ = 0;
              v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CD080;
              *(double *)&v55[1].__vftable = v54;
              v56 = v55 + 1;
              *(double *)&v55[1].__shared_owners_ = -(v52 - v51 * 0.0174532925) * v53;
              *(_QWORD *)&v139 = v55 + 1;
              *((_QWORD *)&v139 + 1) = v55;
            }
            else
            {
              v55 = 0;
              v56 = 0;
              v139 = 0uLL;
            }
            v137 = v140;
            if (*((_QWORD *)&v140 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
            }
            v136[0] = v56;
            v136[1] = v55;
            if (v55)
            {
              p_shared_owners = (unint64_t *)&v55->__shared_owners_;
              do
                v60 = __ldxr(p_shared_owners);
              while (__stxr(v60 + 1, p_shared_owners));
            }
            sub_18D25A48C((uint64_t *)&v138, (uint64_t)&v137, (uint64_t)v136, v37, v38, v39, v40, v41, v25, v19);
            if (v55)
            {
              v66 = (unint64_t *)&v55->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            v68 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
            if (*((_QWORD *)&v137 + 1))
            {
              v69 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v71 = v138;
            if (v138)
            {
              *(_QWORD *)&v134 = v14;
              WORD4(v134) = i;
              WORD5(v134) = v17;
              sub_18D2661DC((uint64_t **)(a1 + 3216), (unint64_t *)&v134, &v134)[6] = v71;
              if (v131 == 80)
              {
                v78 = (uint64_t)*a3;
                v138 = 0;
                *(_QWORD *)&v134 = v71;
                sub_18D25A958(v78, (uint64_t *)&v134, v72, v73, v74, v75, v76, v77);
              }
              else
              {
                v138 = 0;
                *(_QWORD *)&v134 = v71;
                sub_18D25A958(v35, (uint64_t *)&v134, v72, v73, v74, v75, v76, v77);
              }
              if ((_QWORD)v134)
                (*(void (**)(_QWORD))(*(_QWORD *)v134 + 8))(v134);
              v79 = v139;
              if (*((_QWORD *)&v139 + 1))
              {
                v80 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                do
                  v81 = __ldxr(v80);
                while (__stxr(v81 + 1, v80));
              }
              ++v33;
              v82 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
              v140 = v79;
              if (v82)
              {
                v83 = (unint64_t *)&v82->__shared_owners_;
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
              }
            }
            else
            {
              LOWORD(v134) = 12;
              v135 = 4;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v134, &v135, "#nlos,failed to create new facet,%u", v61, v62, v63, v64, v65, i);
              *(_QWORD *)&v134 = v14;
              WORD4(v134) = i;
              WORD5(v134) = v17;
              sub_18D2661DC((uint64_t **)(a1 + 3216), (unint64_t *)&v134, &v134)[6] = 0;
            }
            if (v138)
              (*(void (**)(uint64_t *))(*v138 + 8))(v138);
            v85 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
            if (*((_QWORD *)&v139 + 1))
            {
              v86 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
          }
          v133 = v140;
          if (*((_QWORD *)&v140 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          v90 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
          v132 = v141;
          v12 = v131;
          if (*((_QWORD *)&v141 + 1))
          {
            v91 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          sub_18D25A48C((uint64_t *)&v134, (uint64_t)&v133, (uint64_t)&v132, v37, v38, v39, v40, v41, v25, v19);
          if (v90)
          {
            v98 = (unint64_t *)&v90->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          v100 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
          if (*((_QWORD *)&v133 + 1))
          {
            v101 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          v103 = (uint64_t *)v134;
          if ((_QWORD)v134)
          {
            *(_QWORD *)&v139 = v14;
            WORD4(v139) = v128 >> 4;
            WORD5(v139) = v17;
            sub_18D2661DC((uint64_t **)(a1 + 3216), (unint64_t *)&v139, &v139)[6] = v103;
            if (v131 == 80)
            {
              v110 = (uint64_t)*a3;
              *(_QWORD *)&v134 = 0;
              *(_QWORD *)&v139 = v103;
              sub_18D25A958(v110, (uint64_t *)&v139, v104, v105, v106, v107, v108, v109);
            }
            else
            {
              *(_QWORD *)&v134 = 0;
              *(_QWORD *)&v139 = v103;
              sub_18D25A958(v35, (uint64_t *)&v139, v104, v105, v106, v107, v108, v109);
            }
            v9 = (uint64_t **)v139;
            if ((_QWORD)v139)
              v9 = (uint64_t **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v139 + 8))(v139);
            ++v33;
          }
          else
          {
            LOWORD(v139) = 12;
            LOBYTE(v138) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v139, (unsigned __int8 *)&v138, "#nlos,failed to create new facet,%u", v93, v94, v95, v96, v97, v126);
            *(_QWORD *)&v139 = v14;
            WORD4(v139) = v128 >> 4;
            WORD5(v139) = v17;
            v9 = sub_18D2661DC((uint64_t **)(a1 + 3216), (unint64_t *)&v139, &v139);
            v9[6] = 0;
          }
          if (v131 != 80)
          {
            v112 = (uint64_t)*a3;
            *(_QWORD *)&v139 = v35;
            sub_18D25A958(v112, (uint64_t *)&v139, v111, (uint64_t)a4, a5, a6, a7, a8);
            v9 = (uint64_t **)v139;
            if ((_QWORD)v139)
              v9 = (uint64_t **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v139 + 8))(v139);
            v35 = 0;
          }
          *a4 += v33;
          v113 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
          if (*((_QWORD *)&v140 + 1))
          {
            v114 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          v116 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
          if (*((_QWORD *)&v141 + 1))
          {
            v117 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          if (v35)
            v9 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          v16 = v122;
          v13 = v123;
          goto LABEL_129;
        }
LABEL_31:
        LOWORD(v141) = 12;
        LOBYTE(v140) = 4;
        v121 = v18 >> 4;
        v27 = "#nlos,section has fewer than two footprint coordinates,%u, skipped.";
        goto LABEL_32;
      }
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v9) <= 1)
      {
        LOWORD(v141) = 12;
        LOBYTE(v140) = 1;
        v27 = "#nlos, skipped V1 building's section with zero height above ground.";
LABEL_32:
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, v27, (uint64_t)a4, a5, a6, a7, a8, v121);
      }
LABEL_33:
      *(_QWORD *)&v141 = v14;
      WORD4(v141) = 1;
      WORD5(v141) = v17;
      v9 = sub_18D2661DC((uint64_t **)(a1 + 3216), (unint64_t *)&v141, &v141);
      v33 = 0;
      v9[6] = 0;
LABEL_129:
      v15 += 80;
      if (v15 == v16)
        return v33 > 0;
    }
    v19 = *(double *)(v15 + 72);
    if (*(_BYTE *)(v15 + 40))
    {
      v20 = *(double *)(v15 + 56);
      v21 = *(double *)(v15 + 64);
      v22 = *(double *)(v15 + 48);
      if (v19 <= v21 || v21 < v20 || v22 > v21)
      {
LABEL_26:
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v9) <= 1)
        {
          LOWORD(v141) = 12;
          LOBYTE(v140) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, "#nlos, skipped V2 building's section with zero top height, building_id,%llu, has_terrain_elv,%d, terrain_elv,%5.2f, minBaseHght,%5.2f, maxBaseHght,%5.2f, topHght,%5.2f", v28, v29, v30, v31, v32, (char)v14);
        }
        goto LABEL_33;
      }
      if ((unint64_t)v18 >= 0x20)
      {
        v19 = v19 - v22;
        v25 = 0.0;
        v26 = v18 >> 4;
        if (v22 < v20)
          v25 = v20 - v22;
        goto LABEL_35;
      }
    }
    else
    {
      if (fabs(v19) < 2.22044605e-16)
        goto LABEL_26;
      if ((unint64_t)v18 >= 0x20)
      {
        v26 = v18 >> 4;
        v25 = *(double *)(v15 + 64);
        goto LABEL_35;
      }
    }
    goto LABEL_31;
  }
  v33 = 0;
  return v33 > 0;
}

void sub_18D25A380(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 200);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_18D07C868(v2 - 184);
  sub_18D07C868(v2 - 168);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_18D25A48C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  double *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  double *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  double *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  double *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char v59;
  uint64_t (**v60)();
  void *v61;
  double *v62;
  std::__shared_weak_count *v63;
  double *v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  double *v69;
  std::__shared_weak_count *v70;
  double *v71;
  std::__shared_weak_count *v72;
  unsigned __int8 v73;

  v14 = *(double **)a2;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  v71 = *(double **)a2;
  v72 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *(double **)a3;
  v19 = *(std::__shared_weak_count **)(a3 + 8);
  v69 = *(double **)a3;
  v70 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = a9 + a10;
  if (!v14 || !v18)
  {
    LOWORD(v60) = 1;
    v73 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v73, "#geo,extruded quadrilateral facet initialized with one or more null pointers", a4, a5, a6, a7, a8, v59);
LABEL_23:
    v34 = 0;
    v32 = 0.0;
    v33 = 0.0;
    goto LABEL_24;
  }
  if ((*(_QWORD *)&a9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || COERCE_UNSIGNED_INT64(fabs(a9 + a10)) >= 0x7FF0000000000000)
  {
    LOWORD(v60) = 1;
    v73 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v73, "#geo,extruded quadrilateral facet initialized with one or more non-finite height values", a4, a5, a6, a7, a8, v59);
    goto LABEL_23;
  }
  if (v22 - a9 <= 0.0)
  {
    LOWORD(v60) = 1;
    v73 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v73, "#geo,extruded quadrilateral facet initialized with non-positive facet height", a4, a5, a6, a7, a8, v59);
    goto LABEL_23;
  }
  v23 = *v14;
  if ((*(_QWORD *)v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v24 = v14[1], (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || (v25 = *v18, (*(_QWORD *)v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || (v26 = v18[1], (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
  {
    LOWORD(v60) = 1;
    v73 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v73, "#geo,extruded quadrilateral facet initialized with one or more non-finite footprint coordinates", a4, a5, a6, a7, a8, v59);
    goto LABEL_23;
  }
  v27 = vabdd_f64(v26, v24);
  if (vabdd_f64(v25, v23) < 2.22044605e-16 && v27 < 2.22044605e-16)
  {
    LOWORD(v60) = 1;
    v73 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v73, "#geo,extruded quadrilateral facet initialized with duplicate footprint coordinates", a4, a5, a6, a7, a8, v59);
    goto LABEL_23;
  }
  v29 = v25 - v23;
  v30 = v26 - v24;
  v31 = sqrt(v30 * v30 + v29 * v29);
  v32 = v30 / v31;
  v33 = -v29 / v31;
  v34 = 1;
LABEL_24:
  if (v19)
  {
    v35 = (unint64_t *)&v19->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v37 = v72;
  if (v72)
  {
    v38 = (unint64_t *)&v72->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if (v34)
        goto LABEL_34;
LABEL_51:
      *a1 = 0;
      return;
    }
  }
  if (!v34)
    goto LABEL_51;
LABEL_34:
  v41 = *(double **)a2;
  v40 = *(std::__shared_weak_count **)(a2 + 8);
  if (v40)
  {
    v42 = (unint64_t *)&v40->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v45 = *(double **)a3;
  v44 = *(std::__shared_weak_count **)(a3 + 8);
  if (v44)
  {
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v60 = &off_1E25C0E50;
  v61 = &unk_1E25C0EE8;
  v62 = v41;
  v63 = v40;
  v64 = v45;
  v65 = v44;
  *(double *)&v66 = a9;
  *((double *)&v66 + 1) = v22;
  *(double *)&v67 = v32;
  *((double *)&v67 + 1) = v33;
  v68 = 0;
  v48 = operator new();
  *(_QWORD *)v48 = &off_1E25C0E50;
  *(_QWORD *)(v48 + 8) = &unk_1E25C0EE8;
  *(_QWORD *)(v48 + 16) = v41;
  *(_QWORD *)(v48 + 24) = v40;
  if (v40)
  {
    v49 = (unint64_t *)&v40->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  *(_QWORD *)(v48 + 32) = v45;
  *(_QWORD *)(v48 + 40) = v44;
  if (v44)
  {
    v51 = (unint64_t *)&v44->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    v53 = v67;
    *(_OWORD *)(v48 + 48) = v66;
    *(_OWORD *)(v48 + 64) = v53;
    *(_QWORD *)(v48 + 80) = v68;
    *a1 = v48;
    v60 = &off_1E25C0E50;
    v61 = &unk_1E25C0EE8;
    do
      v54 = __ldaxr(v51);
    while (__stlxr(v54 - 1, v51));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  else
  {
    v55 = v67;
    *(_OWORD *)(v48 + 48) = v66;
    *(_OWORD *)(v48 + 64) = v55;
    *(_QWORD *)(v48 + 80) = v68;
    *a1 = v48;
    v60 = &off_1E25C0E50;
    v61 = &unk_1E25C0EE8;
  }
  v56 = v63;
  if (v63)
  {
    v57 = (unint64_t *)&v63->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_18D25A920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  sub_18D2664B0(&a13);
  sub_18D07C868((uint64_t)&a9);
  sub_18D07C868((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18D25A958(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  int64x2_t v37;
  double v38;
  double v39;
  double v40;
  unsigned __int8 v41;

  v8 = *a2;
  if (!*a2)
  {
    LOWORD(v36) = 1;
    v41 = 4;
    v17 = "#geo,trying to add nullptr to composite building data object";
LABEL_33:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v41, v17, a4, a5, a6, a7, a8, v35);
    return;
  }
  *(_QWORD *)&v11 = a1 + 32;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD **)(a1 + 24);
  v15 = v12 - v13;
  if ((unint64_t)v14 >= v12)
  {
    v18 = ((uint64_t)v14 - v13) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      sub_18D07AFE4();
    if (v15 >> 2 > v19)
      v19 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v39 = v11;
    if (v20)
    {
      v20 = (unint64_t)sub_18D07BF3C(v20);
      v8 = *a2;
    }
    else
    {
      v21 = 0;
    }
    v22 = (_QWORD *)(v20 + 8 * v18);
    *(_QWORD *)&v23 = v20 + 8 * v21;
    v38 = v23;
    *a2 = 0;
    *v22 = v8;
    v16 = v22 + 1;
    v37.i64[1] = (uint64_t)(v22 + 1);
    v25 = *(_QWORD **)(a1 + 16);
    v24 = *(_QWORD **)(a1 + 24);
    if (v24 == v25)
    {
      v27 = vdupq_n_s64((unint64_t)v24);
    }
    else
    {
      do
      {
        v26 = *--v24;
        *v24 = 0;
        *--v22 = v26;
      }
      while (v24 != v25);
      v27 = *(int64x2_t *)(a1 + 16);
      v16 = (_QWORD *)v37.i64[1];
      v23 = v38;
    }
    *(_QWORD *)(a1 + 16) = v22;
    *(_QWORD *)(a1 + 24) = v16;
    v37 = v27;
    v28 = *(double *)(a1 + 32);
    *(double *)(a1 + 32) = v23;
    v38 = v28;
    v36 = *(double *)v27.i64;
    sub_18D17CE04((uint64_t)&v36);
  }
  else
  {
    *a2 = 0;
    *v14 = v8;
    v16 = v14 + 1;
  }
  *(_QWORD *)(a1 + 24) = v16;
  (*(void (**)(double *__return_ptr))(*(_QWORD *)*(v16 - 1) + 24))(&v36);
  v29 = *(double *)(a1 + 64);
  if (v29 >= v38)
    v29 = v38;
  *(double *)(a1 + 64) = v29;
  v30 = *(double *)(a1 + 72);
  if (v30 >= v39)
    v30 = v39;
  *(double *)(a1 + 72) = v30;
  v31 = *(double *)(a1 + 80);
  if (v31 >= v40)
    v31 = v40;
  *(double *)(a1 + 80) = v31;
  v32 = *(double *)(a1 + 40);
  if (v32 <= v36)
    v32 = v36;
  *(double *)(a1 + 40) = v32;
  v33 = *(double *)(a1 + 48);
  if (v33 <= *(double *)v37.i64)
    v33 = *(double *)v37.i64;
  *(double *)(a1 + 48) = v33;
  v34 = *(double *)(a1 + 56);
  if (v34 <= *(double *)&v37.i64[1])
    v34 = *(double *)&v37.i64[1];
  *(double *)(a1 + 56) = v34;
  if (v15 >> 3 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 16)) >> 3))
  {
    LOWORD(v36) = 1;
    v41 = 4;
    v35 = v15 >> 3;
    v17 = "#geo,composite building capacity expanded unexpectedly,%ul,%ul";
    goto LABEL_33;
  }
}

__n128 raven::RavenNLOSEngine::HandleEvent(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 456))
    {
      v2 = *(_OWORD *)(a2 + 8);
      v3 = *(_OWORD *)(a2 + 24);
      v4 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 320) = v4;
      *(_OWORD *)(a1 + 272) = v2;
      *(_OWORD *)(a1 + 288) = v3;
      v5 = *(_OWORD *)(a2 + 72);
      v6 = *(_OWORD *)(a2 + 88);
      v7 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 384) = v7;
      *(_OWORD *)(a1 + 336) = v5;
      *(_OWORD *)(a1 + 352) = v6;
      result = *(__n128 *)(a2 + 136);
      v9 = *(_OWORD *)(a2 + 152);
      v10 = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 416) = v9;
      *(_OWORD *)(a1 + 432) = v10;
      *(__n128 *)(a1 + 400) = result;
    }
    else
    {
      *(_QWORD *)(a1 + 264) = &unk_1E25C2AB0;
      v11 = *(_OWORD *)(a2 + 8);
      v12 = *(_OWORD *)(a2 + 24);
      v13 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 320) = v13;
      *(_OWORD *)(a1 + 272) = v11;
      *(_OWORD *)(a1 + 288) = v12;
      v14 = *(_OWORD *)(a2 + 72);
      v15 = *(_OWORD *)(a2 + 88);
      v16 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 384) = v16;
      *(_OWORD *)(a1 + 336) = v14;
      *(_OWORD *)(a1 + 352) = v15;
      result = *(__n128 *)(a2 + 136);
      v17 = *(_OWORD *)(a2 + 152);
      v18 = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 416) = v17;
      *(_OWORD *)(a1 + 432) = v18;
      *(__n128 *)(a1 + 400) = result;
      *(_BYTE *)(a1 + 456) = 1;
    }
  }
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 3016))
    {
      v2 = *(_OWORD *)(a2 + 8);
      v3 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 2944) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 2928) = v3;
      *(_OWORD *)(a1 + 2912) = v2;
      result = *(__n128 *)(a2 + 56);
      v5 = *(_OWORD *)(a2 + 72);
      v6 = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 3008) = *(_BYTE *)(a2 + 104);
      *(_OWORD *)(a1 + 2992) = v6;
      *(_OWORD *)(a1 + 2976) = v5;
      *(__n128 *)(a1 + 2960) = result;
    }
    else
    {
      *(_QWORD *)(a1 + 2904) = &unk_1E25C2FC8;
      v7 = *(_OWORD *)(a2 + 8);
      v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 2944) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 2928) = v8;
      *(_OWORD *)(a1 + 2912) = v7;
      result = *(__n128 *)(a2 + 56);
      v9 = *(_OWORD *)(a2 + 72);
      v10 = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 3008) = *(_BYTE *)(a2 + 104);
      *(_OWORD *)(a1 + 2992) = v10;
      *(_OWORD *)(a1 + 2976) = v9;
      *(__n128 *)(a1 + 2960) = result;
      *(_BYTE *)(a1 + 3016) = 1;
    }
  }
  return result;
}

void raven::RavenNLOSEngine::HandleEvent(raven::RavenNLOSEngine *this, const raven::GEOMapBuildingDataEvent *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const raven::GEOMapBuildingDataEvent *v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t **v70;
  unint64_t v71;
  uint64_t **v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t *v87;
  int v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  cnprint::CNPrinter *v121;
  uint64_t v122;
  double v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  const raven::GEOMapBuildingDataEvent *v157;
  int64x2_t v158;
  int64x2_t v159;
  unsigned __int8 v160;
  int v161;
  uint64_t (**v162)();
  unint64_t v163;
  char v164;
  uint64_t v165;
  char v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t **v170[8];
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;

  if (!*((_BYTE *)this + 8))
    return;
  v8 = a2;
  v9 = *((_QWORD *)a2 + 13) == *((_QWORD *)a2 + 14) && *((_QWORD *)a2 + 20) == 0;
  if (v9)
  {
    LOWORD(v170[0]) = 12;
    LOBYTE(v162) = 4;
    v43 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(_QWORD *)a2 + 16))(a2);
    v148 = v44 + (double)v43;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v162, "#nlos,time,%.3lf,building event has no information to update building data hierarchy", v45, v46, v47, v48, v49, SLOBYTE(v148));
    return;
  }
  if (!*((_BYTE *)this + 64))
  {
    v50 = *((double *)a2 + 16);
    v51 = *((double *)a2 + 17);
    if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v170[0]) = 1;
      LOBYTE(v162) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v162, "#geo,invalid geodetic LLA origin for building coordinate transform,%.3lf,%.3lf,%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v50));
    }
    else if (v51 >= -3.14159265)
    {
      if (fabs(v50) <= 1.3962634)
      {
        *((double *)this + 5) = v50;
        *((double *)this + 6) = v51;
        *((_QWORD *)this + 7) = 0;
        *((_BYTE *)this + 64) = 1;
        if (v51 >= 6.28318531)
        {
          do
            v51 = v51 + -6.28318531;
          while (v51 >= 6.28318531);
          *((double *)this + 6) = v51;
        }
        if (cnnavigation::GeodeticLatLonIncrementsToNorthEastMetersPerRadian((raven::RavenNLOSEngine *)((char *)this + 208), v50, 0.0, (double *)this + 27, a3))
        {
          LOWORD(v170[0]) = 1;
          LOBYTE(v162) = 4;
          v155 = *((double *)this + 5) * 57.2957795;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v162, "#geo,error converting delta lat/lon to delta N/E,lat,%.9lf,hae,%.3f", v137, v138, v139, v140, v141, SLOBYTE(v155));
        }
        else
        {
          if (!*((_BYTE *)this + 64))
            sub_18D164CA0();
          sub_18D0758F4((uint64_t)v170, *((double *)this + 5), *((double *)this + 6));
          sub_18D262E88((uint64_t)this + 72, (uint64_t)v170);
          if (*((_BYTE *)this + 80))
            goto LABEL_7;
          LOWORD(v170[0]) = 1;
          LOBYTE(v162) = 4;
          v156 = *((double *)this + 5) * 57.2957795;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v162, "#geo,error computing ECEF to ENU Jacobian,lat,%.3lf,lon,%.3f", v142, v143, v144, v145, v146, SLOBYTE(v156));
        }
        *((int64x2_t *)this + 13) = vdupq_n_s64(0x7FF8000000000000uLL);
        if (*((_BYTE *)this + 64))
          *((_BYTE *)this + 64) = 0;
        if (*((_BYTE *)this + 200))
        {
          *((_QWORD *)this + 9) = off_1E25B9B80;
          *((_QWORD *)this + 11) = &unk_1E25C5E70;
          *((_BYTE *)this + 200) = 0;
        }
      }
      else
      {
        LOWORD(v170[0]) = 1;
        LOBYTE(v162) = 4;
        v154 = v50 * 57.2957795;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v162, "#geo,origin too close to poles,lat,%.9lf", a4, a5, a6, a7, a8, SLOBYTE(v154));
      }
    }
    else
    {
      LOWORD(v170[0]) = 1;
      LOBYTE(v162) = 4;
      v149 = v51 * 57.2957795;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v162, "#geo,invalid geodetic longitude,lon_deg,%.9lf", a4, a5, a6, a7, a8, SLOBYTE(v149));
    }
    LOWORD(v170[0]) = 12;
    LOBYTE(v162) = 4;
    v78 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(_QWORD *)v8 + 16))(v8);
    v150 = v79 + (double)v78;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v162, "#nlos,time,%.3lf,cannot set the building coordinate transform's origin from query LLA, building data ignored", v80, v81, v82, v83, v84, SLOBYTE(v150));
    return;
  }
LABEL_7:
  v11 = *((_QWORD *)this + 4);
  if (!v11)
  {
    v11 = operator new();
    *(_QWORD *)v11 = &off_1E25C0C60;
    *(_QWORD *)(v11 + 8) = &unk_1E25C0CA0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(int64x2_t *)(v11 + 40) = vdupq_n_s64(0xFFF0000000000000);
    *(_OWORD *)(v11 + 56) = xmmword_18D335D80;
    *(int64x2_t *)(v11 + 72) = vdupq_n_s64(0x7FF0000000000000uLL);
    v12 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v11;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v11 = *((_QWORD *)this + 4);
    }
  }
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v8 + 14) - *((_QWORD *)v8 + 13)) >> 3);
  v14 = *((_QWORD *)v8 + 20);
  v15 = v13 > v14;
  v16 = v13 - v14;
  v157 = v8;
  if (v15)
  {
    sub_18D17CA78((_QWORD *)(v11 + 16), v16 + ((uint64_t)(*(_QWORD *)(v11 + 24) - *(_QWORD *)(v11 + 16)) >> 3));
    v11 = *((_QWORD *)this + 4);
    v14 = *((_QWORD *)v8 + 20);
  }
  v18 = *(_QWORD *)(v11 + 16);
  v17 = *(_QWORD *)(v11 + 24);
  v162 = &off_1E25B8B78;
  LOBYTE(v163) = 0;
  v164 = 0;
  LOBYTE(v165) = 0;
  v166 = 0;
  v168 = 0;
  v169 = 0;
  v167 = &v168;
  if (v17 != v18 && v14)
  {
    v170[0] = (uint64_t **)&off_1E25C0E10;
    v170[1] = (uint64_t **)v11;
    memset(&v170[2], 0, 48);
    v171 = 0;
    v172 = 1;
    sub_18D2646AC(v170);
    v24 = (uint64_t **)((char *)this + 3216);
    v25 = (_QWORD *)((char *)v8 + 152);
    v26 = (uint64_t *)((char *)this + 3224);
    while (v171)
    {
      (*((void (**)(uint64_t **, uint64_t (***)()))*v170[2] + 2))(v170[2], &v162);
      if (v164)
      {
        v27 = (_QWORD *)*v25;
        if (*v25)
        {
          v28 = (_QWORD *)((char *)v8 + 152);
          do
          {
            v29 = v27[4];
            v30 = v29 >= v163;
            if (v29 >= v163)
              v31 = v27;
            else
              v31 = v27 + 1;
            if (v30)
              v28 = v27;
            v27 = (_QWORD *)*v31;
          }
          while (*v31);
          if (v28 != v25 && v163 >= v28[4])
          {
            if (v166)
              v32 = v165;
            else
              v32 = v163;
            v173 = v32;
            v174 = 65537;
            v33 = sub_18D17D41C((uint64_t)this + 3216, (unint64_t *)&v173);
            if (v26 != v33)
            {
              do
              {
                if (v33[4] != v32)
                  break;
                v34 = (uint64_t *)v33[1];
                v35 = v33;
                if (v34)
                {
                  do
                  {
                    v36 = v34;
                    v34 = (uint64_t *)*v34;
                  }
                  while (v34);
                }
                else
                {
                  do
                  {
                    v36 = (uint64_t *)v35[2];
                    v9 = *v36 == (_QWORD)v35;
                    v35 = v36;
                  }
                  while (!v9);
                }
                if (*v24 == v33)
                  *v24 = v36;
                --*((_QWORD *)this + 404);
                sub_18D185564(*((uint64_t **)this + 403), v33);
                operator delete(v33);
                v33 = v36;
              }
              while (v26 != v36);
            }
            v37 = v170[2];
            v38 = v168;
            v39 = &v168;
            v40 = &v168;
            if (v168)
            {
              while (1)
              {
                while (1)
                {
                  v40 = (uint64_t **)v38;
                  v41 = (uint64_t **)v38[4];
                  if (v41 <= v170[2])
                    break;
                  v38 = *v40;
                  v39 = v40;
                  if (!*v40)
                    goto LABEL_49;
                }
                if (v41 >= v170[2])
                  break;
                v38 = v40[1];
                if (!v38)
                {
                  v39 = v40 + 1;
                  goto LABEL_49;
                }
              }
            }
            else
            {
LABEL_49:
              v42 = (uint64_t *)operator new(0x28uLL);
              v42[4] = (uint64_t)v37;
              *v42 = 0;
              v42[1] = 0;
              v42[2] = (uint64_t)v40;
              *v39 = v42;
              if (*v167)
              {
                v167 = (uint64_t **)*v167;
                v42 = *v39;
              }
              sub_18D083D78(v168, v42);
              ++v169;
            }
          }
        }
      }
      sub_18D2647A8(v170);
    }
    v53 = *(_QWORD *)(v11 + 16);
    v52 = *(_QWORD *)(v11 + 24);
    if (v169)
    {
      if (v53 == v52)
      {
        LOWORD(v173) = 1;
        LOBYTE(v161) = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v173, (unsigned __int8 *)&v161, "#geo,existing building data hierarchy is empty while container of hashes to be removed is not empty", v19, v20, v21, v22, v23, v147);
        v54 = *(unint64_t **)(v11 + 24);
      }
      else
      {
        v54 = *(unint64_t **)(v11 + 24);
        v55 = *(unint64_t **)(v11 + 16);
        while (1)
        {
          v56 = v168;
          if (!v168)
            break;
          v57 = *v55;
          v58 = &v168;
          do
          {
            v59 = v56;
            v60 = v58;
            v61 = v56[4];
            v62 = (uint64_t **)(v56 + 1);
            if (v61 >= v57)
            {
              v62 = (uint64_t **)v59;
              v58 = (uint64_t **)v59;
            }
            v56 = *v62;
          }
          while (v56);
          if (v58 == &v168)
            break;
          if (v61 < v57)
            v59 = (uint64_t *)v60;
          if (v57 < v59[4])
            break;
          *v55 = *(v54 - 1);
          *(v54 - 1) = v57;
          v63 = *(_QWORD *)(v11 + 24);
          v65 = *(_QWORD *)(v63 - 8);
          v54 = (unint64_t *)(v63 - 8);
          v64 = v65;
          *v54 = 0;
          if (v65)
            (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
          *(_QWORD *)(v11 + 24) = v54;
          v55 = *(unint64_t **)(v11 + 16);
          if (v55 == v54)
            goto LABEL_94;
        }
        while (1)
        {
          v77 = v55 + 1;
          if (v55 + 1 == v54)
            break;
          v66 = v168;
          if (!v168)
            goto LABEL_83;
          v67 = v55[1];
          v68 = &v168;
          do
          {
            v69 = v66;
            v70 = v68;
            v71 = v66[4];
            v72 = (uint64_t **)(v66 + 1);
            if (v71 >= v67)
            {
              v72 = (uint64_t **)v69;
              v68 = (uint64_t **)v69;
            }
            v66 = *v72;
          }
          while (v66);
          if (v68 == &v168)
            goto LABEL_83;
          if (v71 < v67)
            v69 = (uint64_t *)v70;
          if (v67 >= v69[4])
          {
            v73 = v54 - 1;
            if (v77 == v54 - 1)
            {
              *v77 = 0;
              if (v67)
                (*(void (**)(unint64_t))(*(_QWORD *)v67 + 8))(v67);
              *(_QWORD *)(v11 + 24) = v77;
              v54 = v55 + 1;
              break;
            }
            *v77 = *v73;
            *v73 = v67;
            v74 = *(_QWORD *)(v11 + 24);
            v76 = *(_QWORD *)(v74 - 8);
            v54 = (unint64_t *)(v74 - 8);
            v75 = v76;
            *v54 = 0;
            if (v76)
              (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
            *(_QWORD *)(v11 + 24) = v54;
          }
          else
          {
LABEL_83:
            ++v55;
          }
        }
      }
    }
    else
    {
      v54 = *(unint64_t **)(v11 + 24);
    }
LABEL_94:
    v85 = (((unint64_t)v54 - *(_QWORD *)(v11 + 16)) >> 3) - ((unint64_t)(v52 - v53) >> 3) + v169;
    if (v85)
    {
      LOWORD(v173) = 12;
      LOBYTE(v161) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v173, (unsigned __int8 *)&v161, "#nlos,%d,ghost building IDs sent in GeoMapsDataEvent for removal", v19, v20, v21, v22, v23, v85);
    }
    if (v164)
      v164 = 0;
    v170[0] = (uint64_t **)&off_1E25C0E10;
    sub_18D26495C((uint64_t)&v170[3]);
  }
  v161 = 0;
  v86 = (uint64_t *)*((_QWORD *)v8 + 13);
  v87 = (uint64_t *)*((_QWORD *)v8 + 14);
  if (v86 != v87)
  {
    v88 = 0;
    v89 = 0;
    v90 = v86 + 2;
    v159 = vdupq_n_s64(0xFFF0000000000000);
    v158 = vdupq_n_s64(0x7FF0000000000000uLL);
    do
    {
      if (*v90 == v90[1])
      {
        LOWORD(v170[0]) = 12;
        LOBYTE(v173) = 4;
        v106 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(_QWORD *)v8 + 16))(v8);
        v151 = v107 + (double)v106;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v173, "#nlos,time,%.3lf,building has no sections", v108, v109, v110, v111, v112, SLOBYTE(v151));
      }
      else
      {
        v91 = operator new();
        *(_OWORD *)(v91 + 16) = 0u;
        *(_OWORD *)(v91 + 32) = 0u;
        *(int64x2_t *)(v91 + 40) = v159;
        *(_OWORD *)(v91 + 56) = xmmword_18D335D80;
        *(int64x2_t *)(v91 + 72) = v158;
        *(_QWORD *)v91 = &off_1E25C0B90;
        *(_QWORD *)(v91 + 8) = &unk_1E25C0BD0;
        v170[0] = (uint64_t **)v91;
        *(_OWORD *)(v91 + 88) = *((_OWORD *)v90 - 1);
        v96 = raven::RavenNLOSEngine::CopyBuildingSectionData((uint64_t)this, v90, v170, &v161, v92, v93, v94, v95);
        if (v96)
        {
          v103 = *v90;
          v104 = v90[1];
          v105 = *((_QWORD *)this + 4);
          v173 = v91;
          sub_18D25A958(v105, &v173, v97, v98, v99, v100, v101, v102);
          if (v173)
            (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
          v88 -= 858993459 * ((unint64_t)(v104 - v103) >> 4);
          ++v89;
          v8 = v157;
        }
        else
        {
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v96) <= 1)
          {
            LOWORD(v173) = 12;
            v160 = 1;
            v113 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(_QWORD *)v8 + 16))(v8);
            v152 = v114 + (double)v113;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v173, &v160, "#nlos,time,%.3lf,skipping building with no valid facets", v115, v116, v117, v118, v119, SLOBYTE(v152));
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
        }
      }
      v120 = v90 + 3;
      v90 += 5;
    }
    while (v120 != v87);
  }
  if (*(_QWORD *)(*((_QWORD *)this + 4) + 24) == *(_QWORD *)(*((_QWORD *)this + 4) + 16))
  {
    LOWORD(v170[0]) = 12;
    LOBYTE(v173) = 3;
    v130 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(_QWORD *)v8 + 16))(v8);
    v153 = v131 + (double)v130;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v173, "#nlos,time,%.3lf,resetting NLOS engine as all of the %lu buildings got deleted", v132, v133, v134, v135, v136, SLOBYTE(v153));
    raven::RavenNLOSEngine::Reset((int64x2_t *)this);
  }
  else
  {
    raven::RavenFacetVisibilityData::ResetFacetVisibilityContainers((raven::RavenNLOSEngine *)((char *)this + 3056));
    if (cnprint::CNPrinter::GetLogLevel(v121) <= 1)
    {
      LOWORD(v170[0]) = 12;
      LOBYTE(v173) = 1;
      v122 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(_QWORD *)v8 + 16))(v8);
      v124 = v123 + (double)v122;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v170, (unsigned __int8 *)&v173, "#nlos,time,%.3lf,preupdate_bldg_size,%lu,new_bldg_added,%d, num_bldg_removed,%lu,new_bldg_size,%lu,num_new_sections,%d,num_facets,%d", v125, v126, v127, v128, v129, SLOBYTE(v124));
    }
  }
  v162 = &off_1E25B8B78;
  sub_18D05B5E4(v168);
}

void sub_18D25B7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  sub_18D26495C((uint64_t)&a37);
  sub_18D05B5E4(a32);
  _Unwind_Resume(a1);
}

void raven::RavenNLOSEngine::Reset(int64x2_t *this)
{
  __int8 *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = &this[2].i8[8];
  v3 = this[1].i64[1];
  v13 = this[1].i64[0];
  v14 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_18D262C14((uint64_t)v2, &v13);
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = this[2].i64[0];
  this[2].i64[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (this[16].i8[0])
    this[16].i8[0] = 0;
  if (this[28].i8[8])
    this[28].i8[8] = 0;
  if (this[181].i8[0])
    this[181].i8[0] = 0;
  if (this[188].i8[8])
    this[188].i8[8] = 0;
  this[189].i64[0] = 0;
  v10 = this[190].i64[0];
  v11 = this[189].i64[1];
  if (v10 != v11)
  {
    do
    {
      v12 = v10 - 56;
      sub_18D262DA8(v10 - 24, *(_QWORD **)(v10 - 16));
      v10 = v12;
    }
    while (v12 != v11);
  }
  this[190].i64[0] = v11;
  raven::RavenFacetVisibilityData::Reset(this + 191);
}

void sub_18D25B99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D07C868((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18D25B9B0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25B8B78;
  sub_18D05B5E4(*(_QWORD **)(a1 + 48));
  return a1;
}

void raven::RavenNLOSEngine::HandleEvent(raven::RavenNLOSEngine *this, raven::GnssPreprocessedMeasurementsEvent *a2)
{
  uint64_t *v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  double v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  char *v40;
  uint64_t v41;
  double v42;
  cnprint::CNPrinter *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  double v48;
  cnprint::CNPrinter *v49;
  uint64_t updated;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  BOOL v79;
  unsigned int v80;
  int v81;
  double v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  uint64_t *v106;
  int v107;
  int v108;
  uint64_t v109;
  __int128 v110;
  float64x2_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  void *v115;
  __int128 v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  float64x2_t v123;
  uint64_t v124;
  double v125[2];
  unsigned __int8 v126[24];
  unsigned __int8 v127[24];
  _BYTE v128[24];
  __int128 v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;

  if (!*((_BYTE *)this + 8))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) > 1)
      return;
    LOWORD(v112) = 12;
    LOBYTE(v115) = 1;
    v41 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v42 + (double)v41;
    v40 = "#nlos,time,%.3lf,not configured";
    goto LABEL_42;
  }
  v3 = (uint64_t *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 3520)
    && (!*((_BYTE *)this + 3016) || *((unsigned __int8 *)this + 3008) - 3 > 1))
  {
    return;
  }
  if (*(_BYTE *)(*(_QWORD *)this + 3521) && *((_BYTE *)this + 456))
  {
    v4 = *((unsigned __int8 *)this + 368);
    v5 = (v4 & 0xFE) == 2 || v4 > 9;
    v6 = (1 << v4) & 0x370;
    if (!v5 && v6 != 0)
      return;
  }
  if (!*((_BYTE *)this + 256))
  {
    this = (raven::RavenNLOSEngine *)(*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v8 = *((unsigned __int8 *)v3 + 256);
    v3[30] = (uint64_t)this;
    v3[31] = v9;
    if (!v8)
      *((_BYTE *)v3 + 256) = 1;
  }
  v10 = v3[4];
  v11 = v10 != 0;
  if (!v10)
    ++*((_DWORD *)v3 + 756);
  if (!*(_BYTE *)(*v3 + 3648) && v3[398] == v3[399])
  {
    v11 = 0;
    ++*((_DWORD *)v3 + 757);
  }
  if (*((_DWORD *)v3 + 756) || *((_DWORD *)v3 + 757))
  {
    v112 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v113 = v12;
    if (!*((_BYTE *)v3 + 256))
      sub_18D164CA0();
    this = (raven::RavenNLOSEngine *)CNTimeSpan::operator-((uint64_t)&v112, v3 + 30, v13, v14);
    if (v15 + (double)(uint64_t)this >= 60.0)
    {
      if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
      {
        LOWORD(v112) = 12;
        LOBYTE(v115) = 1;
        v16 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
        v101 = v17 + (double)v16;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v112, (unsigned __int8 *)&v115, "#nlos,time,%.3lf,epoch count for no bldg data,%u,empty RT tile container,%u,in last %.0f seconds", v18, v19, v20, v21, v22, SLOBYTE(v101));
      }
      v3[378] = 0;
      this = (raven::RavenNLOSEngine *)(*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
      v23 = *((unsigned __int8 *)v3 + 256);
      v3[30] = (uint64_t)this;
      v3[31] = v24;
      if (!v23)
        *((_BYTE *)v3 + 256) = 1;
    }
  }
  if (!v11)
    return;
  if (!*((_BYTE *)v3 + 64))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) > 1)
      return;
    LOWORD(v112) = 12;
    LOBYTE(v115) = 1;
    v45 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v46 + (double)v45;
    v40 = "#nlos,time,%.3lf,no transformation";
    goto LABEL_42;
  }
  if (!*((_BYTE *)v3 + 2896))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) > 1)
      return;
    LOWORD(v112) = 12;
    LOBYTE(v115) = 1;
    v47 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v48 + (double)v47;
    v40 = "#nlos,time,%.3lf,no blended solution";
    goto LABEL_42;
  }
  v112 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
  v113 = v25;
  v28 = CNTimeSpan::operator-((uint64_t)(v3 + 204), &v112, v26, v27);
  *(_QWORD *)&v125[0] = v28;
  v125[1] = v29;
  if (v28 < 0 || (*(double *)v30.i64 = v29, v29 < 0.0))
  {
    v28 = CNTimeSpan::operator-(v125, v30, v31);
    v30.i64[0] = v32;
  }
  if (*(double *)v30.i64 + (double)v28 > 2.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v28) > 1)
      return;
    LOWORD(v112) = 12;
    LOBYTE(v115) = 1;
    v33 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v39 + (double)v33;
    v40 = "#nlos,time,%.3lf,blended solution not time aligned to data,t_soln,%.3lf";
    goto LABEL_42;
  }
  v123 = *((float64x2_t *)v3 + 121);
  v124 = v3[244];
  sub_18D25C380((uint64_t)&v120, (uint64_t)(v3 + 5), &v123);
  if (!v122)
  {
    if (cnprint::CNPrinter::GetLogLevel(v49) > 1)
      return;
    LOWORD(v112) = 12;
    LOBYTE(v115) = 1;
    v55 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v56 + (double)v55;
    v40 = "#nlos,time,%.3lf,could not convert blended solution to ENU,t_soln,%.3lf";
LABEL_42:
    v43 = (cnprint::CNPrinter *)&v112;
    v44 = (unsigned __int8 *)&v115;
LABEL_43:
    cnprint::CNPrinter::Print(v43, v44, v40, v34, v35, v36, v37, v38, SLOBYTE(v102));
    return;
  }
  if (*(_BYTE *)(*v3 + 3580))
    v121 = *(_QWORD *)(*v3 + 80);
  v117 = 0x300000003;
  v115 = &unk_1E25C78E0;
  v116 = xmmword_18D30BB60;
  v118 = &v119;
  if (!sub_18D2485E0((uint64_t)(v3 + 204), (uint64_t)&v115))
  {
    LOWORD(v112) = 12;
    v128[0] = 4;
    v57 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v103 = v58 + (double)v57;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v112, v128, "#nlos,time,%.3lf,could not extract position covariance,t_soln,%.3lf", v59, v60, v61, v62, v63, SLOBYTE(v103));
    return;
  }
  sub_18D25C434(&v112, (uint64_t)(v3 + 5), (uint64_t)&v115);
  if (!v114)
  {
    *(_WORD *)v128 = 12;
    v127[0] = 4;
    v64 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v65 + (double)v64;
    v40 = "#nlos,time,%.3lf,could not convert position covariance to ENU,t_soln,%.3lf";
    goto LABEL_100;
  }
  *(_OWORD *)v128 = v120;
  *(_QWORD *)&v128[16] = v121;
  updated = raven::RavenNLOSEngine::UpdateCandidatePointSearchSpace(v3, (uint64_t)v128, (uint64_t)&v112, v3[4]);
  if ((updated & 1) == 0)
  {
    *(_WORD *)v128 = 12;
    v127[0] = 4;
    v66 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v67 + (double)v66;
    v40 = "#nlos,time,%.3lf,could not compute candidate point search space,t_soln,%.3lf";
    goto LABEL_100;
  }
  v51 = v3[379];
  v52 = v3[380];
  if (v51 == v52)
  {
    *(_WORD *)v128 = 12;
    v127[0] = 4;
    v68 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v69 + (double)v68;
    v40 = "#nlos,time,%.3lf,empty candidate point search space,t_soln,%.3lf";
    goto LABEL_100;
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v52 - v51) >> 3)) > *(_QWORD *)(*v3 + 3608))
  {
    *(_WORD *)v128 = 12;
    v127[0] = 3;
    v53 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v54 + (double)v53;
    v40 = "#nlos,time,%.3lf,no ray tracing: too many candidate points,t_soln,%.3lf,N,%zu";
LABEL_100:
    v43 = (cnprint::CNPrinter *)v128;
    v44 = v127;
    goto LABEL_43;
  }
  v71 = (uint64_t *)*((_QWORD *)a2 + 12);
  v70 = (uint64_t *)*((_QWORD *)a2 + 13);
  if (v71 != v70)
  {
    v107 = 0;
    v108 = 0;
    v72 = 0;
    v106 = (uint64_t *)*((_QWORD *)a2 + 13);
    while (1)
    {
      v73 = *v71;
      if (!*v71)
        goto LABEL_93;
      v74 = *v3;
      if (*(_QWORD *)(*v3 + 3640) <= (unint64_t)v72)
        break;
      if (*(double *)(v73 + 264) <= *(double *)(v74 + 3624) * 0.0174532925)
      {
        v75 = *(_BYTE *)(v73 + 304) ? *(double *)(v73 + 296) : 1.0;
        if (v75 <= *(double *)(v74 + 3616))
        {
          v76 = *(_QWORD *)(v73 + 328);
          if (*(_QWORD *)(v73 + 336) != v76)
          {
            v77 = 0;
            v78 = 0;
            do
            {
              if (*(_BYTE *)(v76 + v77 + 40))
                v79 = *(_DWORD *)(v76 + v77 + 96) == 1;
              else
                v79 = 0;
              if (v79)
              {
                v80 = *(unsigned __int8 *)(v76 + v77 + 100);
                v5 = v80 > 9;
                v81 = (1 << v80) & 0x2BB;
                if (v5 || v81 == 0)
                {
                  v110 = *(_OWORD *)(v76 + v77 + 48);
                  *(_WORD *)v128 = 0;
                  *(_OWORD *)&v128[8] = 0u;
                  v129 = 0u;
                  v130 = 0;
                  v131 = 0;
                  v132 = 0;
                  v133 = 0;
                  updated = (*(uint64_t (**)(uint64_t, __int128 *, _BYTE *, float64x2_t *, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)(v73 + 32) + 56))(v73 + 32, &v110, v128, &v111, v127, v126);
                  if (!(_DWORD)updated)
                  {
                    v109 = v72;
                    v83 = sub_18D25C380((uint64_t)v128, (uint64_t)(v3 + 5), &v111);
                    if ((_BYTE)v129)
                    {
                      updated = raven::RavenNLOSEngine::ProcessSatellite((cnprint::CNPrinter *)v3, v73, (uint64_t)v128, v3[4]);
                      if ((_DWORD)updated)
                      {
                        updated = raven::RavenNLOSEngine::AugmentMeasurementWithRayTracingResults((uint64_t)v3, v73);
                        v107 += updated;
                        ++v108;
                      }
                      v72 = (v72 + 1);
                      v70 = v106;
                      break;
                    }
                    *(_WORD *)v127 = 12;
                    v126[0] = 4;
                    v84 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *, double))(*(_QWORD *)a2 + 16))(a2, v83);
                    v86 = v85;
                    sub_18D181C54(v73);
                    v104 = v86 + (double)v84;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v127, v126, "#nlos,time,%.3lf,could not compute ENU coordinates for satellite %s", v87, v88, v89, v90, v91, SLOBYTE(v104));
                    v72 = v109;
                    v70 = v106;
                  }
                }
              }
              ++v78;
              v76 = *(_QWORD *)(v73 + 328);
              v77 += 208;
            }
            while (v78 < 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v73 + 336) - v76) >> 4));
          }
        }
      }
LABEL_93:
      v71 += 2;
      if (v71 == v70)
        goto LABEL_98;
    }
    updated = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)updated);
    if (updated <= 1)
    {
      *(_WORD *)v128 = 12;
      v127[0] = 1;
      v92 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
      v105 = v93 + (double)v92;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v128, v127, "#nlos,time,%.3lf,maximum number of traced satellites reached,%u", v94, v95, v96, v97, v98, SLOBYTE(v105));
    }
  }
LABEL_98:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)updated) <= 1)
  {
    *(_WORD *)v128 = 12;
    v127[0] = 1;
    v99 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v102 = v100 + (double)v99;
    v40 = "#nlos,time,%.3lf,ray tracing satellite counts,attempted,%u,with nlos path,%u,forwarded,%u";
    goto LABEL_100;
  }
}

double sub_18D25C380(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  double result;
  int v5;
  __int128 v6;
  uint64_t v7;
  void (**v8)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v9;
  void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    v9 = 0;
    v12 = 0x300000003;
    v10 = &unk_1E25C78E0;
    v11 = xmmword_18D30BB60;
    v13 = &v14;
    v8 = &off_1E25B9560;
    result = cnnavigation::ECEFToENU(a3, 1, 1, (float64x2_t *)a2, 0, (uint64_t)&v6, (uint64_t)&v8, COERCE_DOUBLE(0x300000003));
    if (!v5)
    {
      result = *(double *)&v6;
      *(_OWORD *)a1 = v6;
      *(_QWORD *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 24) = 1;
    }
  }
  return result;
}

void sub_18D25C434(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unsigned __int8 v11;
  __int16 v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  if (*(_BYTE *)(a2 + 160))
  {
    v15 = 0x300000003;
    v13 = &unk_1E25C78E0;
    v14 = xmmword_18D30BB60;
    v16 = &v17;
    if (sub_18D04BB5C(a2 + 32, a3, (uint64_t)&v13))
    {
      sub_18D159B20((uint64_t)a1, (uint64_t)&v13);
      v9 = 1;
    }
    else
    {
      v12 = 1;
      v11 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "#geo,could not convert ECEF covariance to ENU", v4, v5, v6, v7, v8, v10);
      v9 = 0;
      *a1 = 0;
    }
    a1[112] = v9;
  }
  else
  {
    *a1 = 0;
    a1[112] = 0;
  }
}

BOOL raven::RavenNLOSEngine::UpdateCandidatePointSearchSpace(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned __int8 v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  BOOL v36;
  unint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t **v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  int64x2_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v109;
  int64x2_t v110;
  _QWORD *v111;
  BOOL v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  double v119;
  double v120;
  uint64_t v121;
  int v122;
  double v123;
  uint64_t (**v124)();
  __int128 v125;
  void *__p[4];
  uint64_t (**v127)();
  __int128 v128;
  _OWORD v129[2];
  __int128 v130;
  uint64_t v131;
  void *v132;
  __int128 v133;
  uint64_t v134;
  double *v135;
  uint64_t v136;
  _BYTE v137[24];
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  _BYTE v141[24];
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t (**v145)();
  _BYTE v146[56];
  uint64_t v147;
  uint64_t v148;

  v8 = a1[380];
  v9 = a1[379];
  if (v8 != v9)
  {
    do
    {
      v10 = v8 - 56;
      sub_18D262DA8(v8 - 24, *(_QWORD **)(v8 - 16));
      v8 = v10;
    }
    while (v10 != v9);
  }
  a1[380] = v9;
  v11 = *(double *)(*a1 + 3584);
  v12 = *(double *)(*a1 + 3592);
  v13 = *(double *)(*a1 + 3600);
  v14 = *(double **)(a3 + 32);
  v15 = sqrt(v14[*(int *)(a3 + 20) + 1]);
  v16 = v12 * sqrt(*v14);
  if (v16 <= v11)
    v16 = *(double *)(*a1 + 3584);
  v17 = v16;
  v18 = v12 * v15;
  if (v12 * v15 <= v11)
    v18 = *(double *)(*a1 + 3584);
  v19 = v18;
  v20 = atomic_load((unsigned __int8 *)&qword_1ECF241C8);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF241C8))
  {
    qword_1ECF241E8 = 0x200000001;
    qword_1ECF241D0 = (uint64_t)&unk_1E25C6BF0;
    qword_1ECF241F8 = 0x100000000;
    qword_1ECF241F0 = (uint64_t)&qword_1ECF241F8;
    unk_1ECF241D8 = xmmword_18D319920;
    __cxa_atexit((void (*)(void *))sub_18D1B8334, &qword_1ECF241D0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF241C8);
  }
  v21 = *(_DWORD *)(a3 + 20);
  v22 = *(_QWORD *)(a3 + 32);
  v23 = dword_1ECF241E0;
  *(_QWORD *)&v146[16] = 0x200000002;
  v145 = (uint64_t (**)())&unk_1E25C75B0;
  *(_DWORD *)v146 = dword_1ECF241E0;
  *(_DWORD *)&v146[4] = dword_1ECF241E0;
  *(_DWORD *)&v146[8] = *(_DWORD *)v146 * *(_DWORD *)v146;
  *(_DWORD *)&v146[12] = dword_1ECF241E0;
  *(_QWORD *)&v146[24] = &v146[32];
  if (dword_1ECF241E0)
  {
    v24 = 0;
    v25 = 0;
    v26 = qword_1ECF241F0;
    do
    {
      v27 = 0;
      v28 = *(_DWORD *)(v26 + 4 * v25) * v21;
      do
      {
        *(_QWORD *)&v146[8 * (v24 + v27) + 32] = *(_QWORD *)(v22
                                                           + 8 * (*(_DWORD *)(v26 + 4 * v27) + v28));
        ++v27;
      }
      while (v23 != v27);
      ++v25;
      v24 += v23;
    }
    while (v25 != v23);
  }
  v134 = 0x200000002;
  v132 = &unk_1E25C75B0;
  v133 = xmmword_18D319340;
  v135 = (double *)&v136;
  v142 = 0x100000002;
  *(_QWORD *)v141 = &unk_1E25C7550;
  *(_OWORD *)&v141[8] = xmmword_18D319330;
  v143 = &v144;
  v138 = 0x100000002;
  *(_QWORD *)v137 = &unk_1E25C7550;
  *(_OWORD *)&v137[8] = xmmword_18D319330;
  v139 = &v140;
  __p[0] = (void *)0x100000008;
  v124 = (uint64_t (**)())&unk_1E25C86C0;
  v125 = xmmword_18D319940;
  __p[1] = &__p[2];
  v35 = sub_18D054568((uint64_t)&v145, (uint64_t)v141, (uint64_t)v137, (uint64_t)&v124, (uint64_t)&v132);
  if (v35 > *(double *)(*a1 + 3536))
  {
    LOWORD(v124) = 12;
    LOBYTE(v145) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v124, (unsigned __int8 *)&v145, "#nlos,location covariance condition number too large,cond,%.1f", v30, v31, v32, v33, v34, SLOBYTE(v35));
    return 0;
  }
  v37 = vcvtpd_s64_f64(1.0 / v13 * v17);
  v117 = a1 + 379;
  v124 = &off_1E25C0F58;
  v125 = 0u;
  memset(__p, 0, 25);
  v127 = &off_1E25C0E10;
  v128 = 0u;
  memset(v129, 0, sizeof(v129));
  v130 = 0u;
  v131 = -1;
  *(float64x2_t *)v141 = vmulq_f64(*((float64x2_t *)a1 + 13), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  v38 = *((double *)a1 + 401);
  v115 = vcvtpd_s64_f64(1.0 / v13 * v19);
  v39 = 4 * v37 * v115;
  v40 = a1[379];
  if (0x6DB6DB6DB6DB6DB7 * ((a1[381] - v40) >> 3) < v39)
  {
    if (v39 > 0x492492492492492)
      sub_18D07AFE4();
    v41 = a1[380];
    *(_QWORD *)&v146[24] = a1 + 381;
    v145 = (uint64_t (**)())sub_18D266070(v39);
    *(_QWORD *)v146 = (char *)v145 + v41 - v40;
    *(_QWORD *)&v146[8] = *(_QWORD *)v146;
    *(_QWORD *)&v146[16] = &v145[7 * v42];
    sub_18D265FBC(v117, &v145);
    v29 = sub_18D2660B8((uint64_t)&v145);
  }
  if ((v37 & 0x8000000000000000) != 0)
  {
    v36 = 1;
LABEL_99:
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v29) <= 1)
    {
      LOWORD(v145) = 12;
      v137[0] = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v145, v137, "#nlos,%zu candidate points identified (%u inside a building)", v103, v104, v105, v106, v107, -73 * ((a1[380] - a1[379]) >> 3));
    }
    goto LABEL_101;
  }
  v36 = 0;
  v122 = 0;
  v43 = v11 * v11;
  v120 = v12 * v12;
  v119 = v38 * 0.5;
  v116 = -(uint64_t)v37;
  v111 = a1 + 390;
  if (v115 >= 0)
    v44 = v115;
  else
    v44 = -v115;
  v121 = v44;
  v110 = vdupq_n_s64(0x7FF8000000000000uLL);
  v113 = a4;
  v114 = v37;
  while (v115 < 0)
  {
LABEL_94:
    v55 = v116 == v114;
    v36 = v116++ >= v114;
    if (v55)
      goto LABEL_99;
  }
  v112 = v36;
  v45 = v13 * (double)v116;
  v46 = v45 * v45;
  v47 = -v115;
  while (1)
  {
    v48 = v13 * (double)v47;
    if (v46 + v48 * v48 > v43
      && v48 * (v45 * v135[SHIDWORD(v133)])
       + v48 * (v45 * v135[SHIDWORD(v133)])
       + v45 * *v135 * v45
       + v48 * v135[SHIDWORD(v133) + 1] * v48 > v120)
    {
      goto LABEL_33;
    }
    v49 = v48 + *(double *)(a2 + 8);
    v123 = v45 + *(double *)a2;
    *(double *)&v125 = v123;
    *((double *)&v125 + 1) = v49;
    LOBYTE(__p[3]) = 0;
    __p[1] = __p[0];
    v145 = &off_1E25C0E10;
    *(_QWORD *)v146 = a4;
    memset(&v146[8], 0, 48);
    v147 = 0;
    v148 = -1;
    v128 = *(_OWORD *)v146;
    sub_18D264A9C(v129, (uint64_t)&v146[16]);
    v131 = v148;
    v145 = &off_1E25C0E10;
    sub_18D26495C((uint64_t)&v146[16]);
    sub_18D2646AC(&v127);
    while (*((_QWORD *)&v130 + 1))
    {
      v29 = (*(uint64_t (**)(_QWORD, uint64_t (***)()))(**((_QWORD **)&v128 + 1) + 16))(*((_QWORD *)&v128 + 1), &v124);
      if (LOBYTE(__p[3]))
        goto LABEL_32;
      sub_18D2647A8(&v127);
    }
    sub_18D265320((uint64_t)&v124);
    if (LOBYTE(__p[3]))
    {
LABEL_32:
      ++v122;
      goto LABEL_33;
    }
    v118 = *(_QWORD *)(a2 + 16);
    if (*(_BYTE *)(*a1 + 3648))
    {
      v56 = a1[380];
      v57 = a1[381];
      if (v56 >= v57)
      {
        v72 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v56 - *v117) >> 3);
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) > 0x492492492492492)
          sub_18D07AFE4();
        v74 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v57 - *v117) >> 3);
        if (2 * v74 > v73)
          v73 = 2 * v74;
        if (v74 >= 0x249249249249249)
          v75 = 0x492492492492492;
        else
          v75 = v73;
        *(_QWORD *)&v146[24] = a1 + 381;
        if (v75)
          v75 = (unint64_t)sub_18D266070(v75);
        else
          v76 = 0;
        v78 = v75 + 56 * v72;
        v145 = (uint64_t (**)())v75;
        *(_QWORD *)v146 = v78;
        *(_QWORD *)&v146[16] = v75 + 56 * v76;
        *(double *)v78 = v123;
        *(double *)(v78 + 8) = v49;
        *(_QWORD *)(v78 + 16) = v118;
        *(_QWORD *)(v78 + 48) = 0;
        *(_QWORD *)(v78 + 40) = 0;
        *(_QWORD *)(v78 + 24) = 0;
        *(_QWORD *)(v78 + 32) = v78 + 40;
        *(_QWORD *)&v146[8] = v78 + 56;
        sub_18D265FBC(v117, &v145);
        v58 = a1[380];
        v29 = sub_18D2660B8((uint64_t)&v145);
      }
      else
      {
        *(double *)v56 = v123;
        *(double *)(v56 + 8) = v49;
        *(_QWORD *)(v56 + 16) = v118;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        v58 = v56 + 56;
        *(_QWORD *)(v56 + 24) = 0;
        *(_QWORD *)(v56 + 32) = v56 + 40;
      }
      a1[380] = v58;
      goto LABEL_33;
    }
    v59 = (uint64_t **)a1[388];
    v60 = (uint64_t **)a1[389];
    if (v59 != v60)
      break;
    LODWORD(v61) = 0;
    v77 = a1[388];
LABEL_64:
    v61 = v61;
    if (v61 != ((uint64_t)v59 - v77) >> 3)
      goto LABEL_80;
    *(int64x2_t *)v137 = v110;
    if (*((_BYTE *)a1 + 64))
    {
      v79 = *((double *)a1 + 27);
      v80 = v123 / v79;
      v71 = v79 <= 0.0;
      v81 = 0.0;
      if (!v71)
        v81 = v80;
      v82 = v81 + *((double *)a1 + 6);
      *(double *)v137 = v49 / *((double *)a1 + 26) + *((double *)a1 + 5);
      *(double *)&v137[8] = v82;
    }
    v83 = (*v111 - v77) >> 3;
    if (v83 <= v61)
    {
      v84 = v83 + v39;
      if (v83 < v83 + v39)
      {
        if (v84 >> 61)
          sub_18D07AFE4();
        *(_QWORD *)&v146[24] = a1 + 390;
        v85 = (char *)sub_18D0788C8((uint64_t)v111, v84);
        v87 = (_QWORD *)a1[389];
        v88 = (_QWORD *)a1[388];
        if (v87 == v88)
        {
          v91 = vdupq_n_s64((unint64_t)v87);
          v89 = &v85[8 * v61];
        }
        else
        {
          v89 = &v85[8 * v61];
          do
          {
            v90 = *--v87;
            *v87 = 0;
            *((_QWORD *)v89 - 1) = v90;
            v89 -= 8;
          }
          while (v87 != v88);
          v91 = *((int64x2_t *)a1 + 194);
        }
        a1[388] = (uint64_t)v89;
        a1[389] = (uint64_t)&v85[8 * v61];
        *(int64x2_t *)v146 = v91;
        v92 = a1[390];
        a1[390] = (uint64_t)&v85[8 * v86];
        *(_QWORD *)&v146[16] = v92;
        v145 = (uint64_t (**)())v91.i64[0];
        sub_18D17CEE8((uint64_t)&v145);
      }
    }
    v29 = raven::RavenFacetVisibilityData::ConstructPointToFacetVisibilityHierarchy((_QWORD **)a1 + 382, (float64x2_t *)v137, a1[4], v141);
    if ((_DWORD)v29)
    {
      v77 = a1[388];
      v61 = ((unint64_t)(a1[389] - v77) >> 3) - 1;
LABEL_80:
      v93 = *(_QWORD *)(v77 + 8 * v61);
      v94 = a1[380];
      v95 = a1[381];
      if (v94 >= v95)
      {
        v97 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v94 - *v117) >> 3);
        v98 = v97 + 1;
        a4 = v113;
        if ((unint64_t)(v97 + 1) > 0x492492492492492)
          sub_18D07AFE4();
        v99 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v95 - *v117) >> 3);
        if (2 * v99 > v98)
          v98 = 2 * v99;
        if (v99 >= 0x249249249249249)
          v100 = 0x492492492492492;
        else
          v100 = v98;
        *(_QWORD *)&v146[24] = a1 + 381;
        if (v100)
          v100 = (unint64_t)sub_18D266070(v100);
        else
          v101 = 0;
        v102 = v100 + 56 * v97;
        v145 = (uint64_t (**)())v100;
        *(_QWORD *)v146 = v102;
        *(_QWORD *)&v146[16] = v100 + 56 * v101;
        *(double *)v102 = v123;
        *(double *)(v102 + 8) = v49;
        *(_QWORD *)(v102 + 16) = v118;
        *(_QWORD *)(v102 + 48) = 0;
        *(_QWORD *)(v102 + 40) = 0;
        *(_QWORD *)(v102 + 24) = v93;
        *(_QWORD *)(v102 + 32) = v102 + 40;
        *(_QWORD *)&v146[8] = v102 + 56;
        sub_18D265FBC(v117, &v145);
        v96 = a1[380];
        v29 = sub_18D2660B8((uint64_t)&v145);
      }
      else
      {
        *(double *)v94 = v123;
        *(double *)(v94 + 8) = v49;
        *(_QWORD *)(v94 + 16) = v118;
        *(_QWORD *)(v94 + 48) = 0;
        *(_QWORD *)(v94 + 40) = 0;
        v96 = v94 + 56;
        *(_QWORD *)(v94 + 24) = v93;
        *(_QWORD *)(v94 + 32) = v94 + 40;
        a4 = v113;
      }
      a1[380] = v96;
      goto LABEL_33;
    }
    a4 = v113;
LABEL_33:
    v55 = v47++ == v121;
    if (v55)
      goto LABEL_94;
  }
  LODWORD(v61) = 0;
  while (*((_BYTE *)a1 + 64))
  {
    v62 = v46;
    v63 = v43;
    v64 = v13;
    v65 = **v59;
    v66 = (double)v65 * 0.000001;
    if (v66 > 180.0)
      v66 = v66 + -360.0;
    v67 = *((double *)a1 + 5);
    v68 = *((double *)a1 + 26);
    v69 = sub_18D17CE64((uint64_t)(a1 + 5), v66);
    v70 = vabdd_f64(v68 * -(v67 - ((double)HIDWORD(v65) * 0.000001 + -90.0) * 0.0174532925), v49);
    v71 = vabdd_f64(v69, v123) <= v119 && v70 <= v119;
    if (v71)
    {
      v13 = v64;
      v43 = v63;
      v46 = v62;
LABEL_63:
      v59 = (uint64_t **)a1[389];
      v77 = a1[388];
      goto LABEL_64;
    }
    LODWORD(v61) = v61 + 1;
    ++v59;
    v13 = v64;
    v43 = v63;
    v46 = v62;
    if (v59 == v60)
      goto LABEL_63;
  }
  LOWORD(v145) = 12;
  v137[0] = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v145, v137, "#nlos,Could not compute building data coordinates for tile point", v50, v51, v52, v53, v54, v109);
  v36 = v112;
LABEL_101:
  v124 = &off_1E25C0F58;
  v127 = &off_1E25C0E10;
  sub_18D26495C((uint64_t)v129);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v36;
}

void sub_18D25D10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_18D262CE0(&a41);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenNLOSEngine::ProcessSatellite(cnprint::CNPrinter *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  cnprint::CNPrinter *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  double v19;
  double v20;
  unsigned int v21;
  uint64_t *v22;
  char **v23;
  uint64_t *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  _BOOL4 v29;
  _BOOL4 v30;
  BOOL v31;
  _BOOL4 v32;
  char *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _QWORD *i;
  uint64_t v48;
  _QWORD *v49;
  float64x2_t *v50;
  float64x2_t *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  float64x2_t *v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v71;
  int64x2_t v72;
  unsigned int v73;
  __int128 *v74;
  __int128 v76;
  double v77;
  double v78;
  double v79;
  double v80;
  _QWORD v81[2];
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  void *v87;
  void *v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  double v93;
  double v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  void *v98;
  void *v99;
  char v100;
  float64x2_t *v101;
  uint64_t *v102;
  uint64_t v103;
  float64x2_t *v104;
  float64x2_t **v105;
  _OWORD v106[2];
  _QWORD v107[3];
  int v108;
  void *__p[2];
  _OWORD v110[2];
  _QWORD v111[2];
  __int128 v112;
  double v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v7 = (cnprint::CNPrinter *)sub_18D25F658(a2);
  v111[0] = v7;
  *(double *)&v111[1] = v8;
  if (*((_BYTE *)a1 + 8))
  {
    v104 = (float64x2_t *)&v104;
    v105 = &v104;
    memset(v106, 0, sizeof(v106));
    v107[0] = v107;
    v107[1] = v107;
    v107[2] = 0;
    v108 = 0;
    *(_OWORD *)__p = 0u;
    memset(v110, 0, sizeof(v110));
    v101 = (float64x2_t *)&v101;
    v102 = (uint64_t *)&v101;
    v103 = 0;
    v11 = (__int128 *)*((_QWORD *)a1 + 379);
    v74 = (__int128 *)*((_QWORD *)a1 + 380);
    if (v11 == v74)
    {
      v73 = 0;
      goto LABEL_64;
    }
    v73 = 0;
    v72 = vdupq_n_s64(0x7FF8000000000000uLL);
    while (1)
    {
      v12 = *(_QWORD *)a1;
      if (*(_BYTE *)(*(_QWORD *)a1 + 3648))
      {
        raven::RavenNLOSEngine::FindApproximatePathsUsingRayTracing(a1, (uint64_t)v111, a2, (double *)v11, (double *)a3, a4, v9, v10, (uint64_t *)&v90);
        sub_18D262FEC((uint64_t *)&v101);
        v13 = v91;
        if ((_QWORD)v91)
        {
          v14 = v90;
          v15 = **((_QWORD **)&v90 + 1);
          *(_QWORD *)(v15 + 8) = *(_QWORD *)(v90 + 8);
          **(_QWORD **)(v14 + 8) = v15;
          v16 = (uint64_t)v101;
          v101->f64[1] = *((float64_t *)&v14 + 1);
          **((_QWORD **)&v14 + 1) = v16;
          *(_QWORD *)(v14 + 8) = &v101;
          v101 = (float64x2_t *)v14;
          v103 += v13;
          *(_QWORD *)&v91 = 0;
        }
        sub_18D262FEC((uint64_t *)&v90);
        v17 = v103;
      }
      else
      {
        v35 = *((_QWORD *)v11 + 3);
        v36 = *(_QWORD *)(v12 + 3544);
        v37 = *(unsigned __int8 *)(v12 + 3552);
        __p[1] = __p[0];
        sub_18D262FEC((uint64_t *)&v104);
        sub_18D262FEC((uint64_t *)&v101);
        if (!a4)
          goto LABEL_56;
        if (!v35)
          goto LABEL_56;
        if (!(_BYTE)v36)
          goto LABEL_56;
        v108 = v36;
        v38 = *v11;
        *((_QWORD *)&v106[1] + 1) = *((_QWORD *)v11 + 2);
        *(_OWORD *)((char *)v106 + 8) = v38;
        *(_OWORD *)((char *)v110 + 8) = *(_OWORD *)a3;
        *((_QWORD *)&v110[1] + 1) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)&v90 = &off_1E25C0DC8;
        v39 = *(double *)a3 - *(double *)v11;
        v40 = *(double *)(a3 + 8) - *((double *)v11 + 1);
        v41 = *(double *)(a3 + 16) - *((double *)v11 + 2);
        v42 = sqrt(v40 * v40 + v39 * v39 + v41 * v41);
        if (fabs(v42) < 2.22044605e-16)
          goto LABEL_56;
        v43 = 1.0 / v42;
        v44 = v39 * v43;
        v45 = v40 * v43;
        v46 = v41 * v43;
        v112 = *v11;
        v113 = *((double *)v11 + 2);
        v91 = v112;
        *(double *)&v92 = v113;
        *((double *)&v92 + 1) = v39 * v43;
        v93 = v40 * v43;
        v94 = v41 * v43;
        *((_QWORD *)&v90 + 1) = a4;
        LODWORD(v95) = 0;
        BYTE4(v95) = 0;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a4 + 16))(a4, &v90);
        if (BYTE4(v95))
          goto LABEL_42;
        v76 = v112;
        v77 = v113;
        v78 = v44;
        v79 = v45;
        v80 = v46;
        v81[0] = v81;
        v81[1] = v81;
        v82 = 0;
        v61 = (float64x2_t *)sub_18D26610C(&v76);
        v62 = (uint64_t)v101;
        *(_QWORD *)&v61->f64[0] = v101;
        *(_QWORD *)&v61->f64[1] = &v101;
        *(_QWORD *)(v62 + 8) = v61;
        v101 = v61;
        ++v103;
        sub_18D1C5494(v81);
        if (!v37)
        {
LABEL_42:
          for (i = *(_QWORD **)(v35 + 24); i; i = (_QWORD *)*i)
          {
            sub_18D1C5494(v107);
            __p[1] = __p[0];
            sub_18D262624(__p, (v108 + 1));
            sub_18D26305C(&v104, i[2], a4);
          }
          v48 = *(_QWORD *)&v106[0];
          v17 = v103;
          if (*(_QWORD *)&v106[0])
          {
            v49 = v105;
            v50 = v104;
            v51 = *v105;
            v51->f64[1] = v104->f64[1];
            **(_QWORD **)&v50->f64[1] = v51;
            v52 = (uint64_t)v101;
            *(_QWORD *)&v101->f64[1] = v49;
            *v49 = v52;
            *(_QWORD *)&v50->f64[1] = &v101;
            v17 += v48;
            v101 = v50;
            v103 = v17;
            *(_QWORD *)&v106[0] = 0;
          }
          if (!v17)
            goto LABEL_56;
        }
        else
        {
          v17 = v103;
        }
      }
      if (!v17)
        goto LABEL_56;
      LOBYTE(v90) = 0;
      v100 = 0;
      v18 = v102;
      if (v102 == (uint64_t *)&v101)
        goto LABEL_56;
      v19 = INFINITY;
      do
      {
        raven::RavenNLOSEngine::RefineApproximatePath(a1, (uint64_t)(v18 + 2), (uint64_t)v111, a2, (double *)a3, (uint64_t)&v76);
        if (!v89)
          goto LABEL_18;
        if (v82)
          v20 = v86
              - sqrt((v84 - *((double *)&v76 + 1)) * (v84 - *((double *)&v76 + 1))+ (v83 - *(double *)&v76) * (v83 - *(double *)&v76)+ (v85 - v77) * (v85 - v77));
        else
          v20 = 0.0;
        if (v20 >= v19 || (sub_18D2638D8((uint64_t)&v90, &v76), v19 = v20, v89))
        {
          v88 = &unk_1E25C5E70;
          v87 = &unk_1E25C5E70;
          sub_18D1C5494(v81);
LABEL_18:
          v20 = v19;
        }
        v18 = (uint64_t *)v18[1];
        v19 = v20;
      }
      while (v18 != (uint64_t *)&v101);
      if (v100)
      {
        v21 = v73;
        if (v95)
          v21 = v73 + 1;
        v73 = v21;
        v22 = (uint64_t *)*((_QWORD *)v11 + 5);
        v23 = (char **)v11 + 5;
        v24 = (uint64_t *)v11 + 5;
        if (v22)
        {
          v25 = *(unsigned __int8 *)(a2 + 24);
          v26 = *(_DWORD *)(a2 + 28);
          while (1)
          {
            while (1)
            {
              v24 = v22;
              v27 = *((unsigned __int8 *)v22 + 56);
              v28 = *((_DWORD *)v24 + 15);
              v29 = v28 < v26;
              if (v27 != v25)
                v29 = v27 < v25;
              if (!v29)
                break;
              v22 = (uint64_t *)*v24;
              v23 = (char **)v24;
              if (!*v24)
                goto LABEL_35;
            }
            v30 = v28 > v26;
            v31 = v27 == v25;
            v32 = v27 > v25;
            if (v31)
              v32 = v30;
            if (!v32)
              break;
            v22 = (uint64_t *)v24[1];
            if (!v22)
            {
              v23 = (char **)(v24 + 1);
              goto LABEL_35;
            }
          }
        }
        else
        {
LABEL_35:
          v33 = (char *)operator new(0x128uLL);
          *(_QWORD *)&v76 = v33;
          *((_QWORD *)&v76 + 1) = (char *)v11 + 40;
          LOBYTE(v77) = 0;
          v34 = v33 + 32;
          if (*(char *)(a2 + 23) < 0)
          {
            sub_18D077798(v34, *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            *(_OWORD *)v34 = *(_OWORD *)a2;
            *((_QWORD *)v33 + 6) = *(_QWORD *)(a2 + 16);
          }
          *((_QWORD *)v33 + 7) = *(_QWORD *)(a2 + 24);
          *((int64x2_t *)v33 + 4) = v72;
          *((int64x2_t *)v33 + 5) = v72;
          *((int64x2_t *)v33 + 6) = v72;
          *((_QWORD *)v33 + 14) = v33 + 112;
          *((_QWORD *)v33 + 15) = v33 + 112;
          *((_QWORD *)v33 + 16) = 0;
          *(int64x2_t *)(v33 + 136) = v72;
          *(int64x2_t *)(v33 + 152) = v72;
          *((_QWORD *)v33 + 24) = 0x300000001;
          *((_QWORD *)v33 + 21) = &unk_1E25C6C20;
          *((_OWORD *)v33 + 11) = xmmword_18D314670;
          *((_QWORD *)v33 + 25) = v33 + 208;
          *((_QWORD *)v33 + 32) = 0x300000001;
          *((_QWORD *)v33 + 29) = &unk_1E25C6C20;
          *((_OWORD *)v33 + 15) = xmmword_18D314670;
          *((_QWORD *)v33 + 33) = v33 + 272;
          LOBYTE(v77) = 1;
          *(_QWORD *)v33 = 0;
          *((_QWORD *)v33 + 1) = 0;
          *((_QWORD *)v33 + 2) = v24;
          *v23 = v33;
          v53 = **((_QWORD **)v11 + 4);
          if (v53)
          {
            *((_QWORD *)v11 + 4) = v53;
            v33 = *v23;
          }
          sub_18D083D78(*((uint64_t **)v11 + 5), (uint64_t *)v33);
          ++*((_QWORD *)v11 + 6);
          v24 = (uint64_t *)v76;
          *(_QWORD *)&v76 = 0;
          sub_18D267440((uint64_t)&v76);
        }
        v54 = v91;
        *((_OWORD *)v24 + 4) = v90;
        *((_OWORD *)v24 + 5) = v54;
        *((_OWORD *)v24 + 6) = v92;
        sub_18D1C5494(v24 + 14);
        v55 = v95;
        if (v95)
        {
          v57 = v93;
          v56 = v94;
          v58 = **(_QWORD **)&v94;
          *(_QWORD *)(v58 + 8) = *(_QWORD *)(*(_QWORD *)&v93 + 8);
          **(_QWORD **)(*(_QWORD *)&v57 + 8) = v58;
          v59 = v24[14];
          *(double *)(v59 + 8) = v56;
          **(_QWORD **)&v56 = v59;
          *((double *)v24 + 14) = v57;
          *(_QWORD *)(*(_QWORD *)&v57 + 8) = v24 + 14;
          v24[16] += v55;
          v95 = 0;
        }
        v60 = v97;
        *(_OWORD *)(v24 + 17) = v96;
        *(_OWORD *)(v24 + 19) = v60;
        sub_18D053AA8((uint64_t)(v24 + 21), (uint64_t)&v98);
        sub_18D053AA8((uint64_t)(v24 + 29), (uint64_t)&v99);
        if (v100)
        {
          v99 = &unk_1E25C5E70;
          v98 = &unk_1E25C5E70;
          sub_18D1C5494(&v93);
        }
      }
LABEL_56:
      v11 = (__int128 *)((char *)v11 + 56);
      if (v11 == v74)
      {
LABEL_64:
        sub_18D262FEC((uint64_t *)&v101);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        sub_18D1C5494(v107);
        sub_18D262FEC((uint64_t *)&v104);
        return v73;
      }
    }
  }
  v63 = (uint64_t)v7;
  v64 = v8;
  if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
  {
    LOWORD(v90) = 12;
    LOBYTE(v76) = 1;
    v71 = v64 + (double)v63;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v90, (unsigned __int8 *)&v76, "#nlos,time,%.3lf,object not configured in %s", v65, v66, v67, v68, v69, SLOBYTE(v71));
  }
  return 0;
}

void sub_18D25D900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t raven::RavenNLOSEngine::AugmentMeasurementWithRayTracingResults(uint64_t a1, uint64_t a2)
{
  cnprint::CNPrinter *v4;
  double v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL4 v16;
  BOOL v17;
  uint64_t *v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t **v29;
  double v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  uint64_t **v35;
  unint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  int v55;
  uint64_t *v56;
  uint64_t **v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  _BOOL4 v66;
  BOOL v67;
  uint64_t *v68;
  unsigned int v69;
  BOOL v70;
  BOOL v71;
  void **v72;
  uint64_t **v73;
  double v74;
  double v75;
  double v76;
  double v77;
  float64x2_t v78;
  double *v79;
  cnprint::CNPrinter *v80;
  __n128 v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  uint64_t v106;
  void *v107;
  __int128 v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE v111[24];
  void *v112;
  __int128 v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE v116[24];
  double v117;
  _BYTE v118[24];
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  void *v122;
  __int128 v123;
  uint64_t v124;
  char *v125;
  char v126;
  char v127[4];
  __int128 v128;
  _DWORD v129[7];
  uint64_t **v130;
  uint64_t *v131;
  uint64_t v132;
  void *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  char v138;
  _BYTE v139[112];
  char v140;
  void *v141;
  __int128 v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE v145[80];

  LOBYTE(v133) = 0;
  v138 = 0;
  v143 = 0x300000003;
  v141 = &unk_1E25C78E0;
  v142 = xmmword_18D30BB60;
  v144 = v145;
  if (*(_BYTE *)(a1 + 200) && *(_BYTE *)(a1 + 80))
  {
    sub_18D053AA8((uint64_t)&v141, a1 + 88);
    sub_18D159B20((uint64_t)&v117, (uint64_t)&v141);
    v126 = 1;
    sub_18D159B20((uint64_t)&v133, (uint64_t)&v117);
    v138 = 1;
    v139[0] = 0;
    v140 = 0;
    sub_18D159B20((uint64_t)v139, (uint64_t)&v133);
    v140 = 1;
    v4 = (cnprint::CNPrinter *)sub_18D25F658(a2);
    v6 = &v131;
    v131 = 0;
    v132 = 0;
    v130 = &v131;
    v7 = *(_QWORD *)(a1 + 3032);
    v8 = *(_QWORD *)(a1 + 3040);
    if (v7 == v8)
      goto LABEL_104;
    v106 = (uint64_t)v4;
    v9 = 0;
    v10 = v5;
    do
    {
      v11 = *(_QWORD *)(v7 + 40);
      if (v11)
      {
        v12 = *(unsigned __int8 *)(a2 + 24);
        v13 = *(_DWORD *)(a2 + 28);
        v14 = v7 + 40;
        do
        {
          v15 = *(unsigned __int8 *)(v11 + 56);
          v17 = v15 == v12;
          v16 = v15 > v12;
          if (v17)
            v16 = *(_DWORD *)(v11 + 60) > v13;
          v17 = !v16;
          if (v16)
            v18 = (uint64_t *)(v11 + 8);
          else
            v18 = (uint64_t *)v11;
          if (v17)
            v14 = v11;
          v11 = *v18;
        }
        while (*v18);
        if (v14 != v7 + 40)
        {
          v19 = *(unsigned __int8 *)(v14 + 56);
          v20 = *(_DWORD *)(v14 + 60) < v13;
          v17 = v19 == v12;
          v21 = v19 < v12;
          if (v17)
            v21 = v20;
          if (!v21)
          {
            sub_18D262B80(&v117, v14 + 64);
            v22 = v131;
            v23 = &v131;
            v24 = &v131;
            if (v131)
            {
              while (1)
              {
                while (1)
                {
                  v24 = (uint64_t **)v22;
                  v25 = (uint64_t)(v22 + 4);
                  if ((sub_18D267A20((uint64_t)&v117, (uint64_t)(v22 + 4)) & 0x80) == 0)
                    break;
                  v22 = *v24;
                  v23 = v24;
                  if (!*v24)
                    goto LABEL_28;
                }
                if ((sub_18D267A20(v25, (uint64_t)&v117) & 0x80) == 0)
                  break;
                v22 = v24[1];
                if (!v22)
                {
                  v23 = v24 + 1;
                  goto LABEL_28;
                }
              }
              v26 = v24;
            }
            else
            {
LABEL_28:
              v27 = (uint64_t **)operator new(0x40uLL);
              v26 = v27;
              v27[4] = (uint64_t *)(v27 + 4);
              v27[5] = (uint64_t *)(v27 + 4);
              v27[6] = 0;
              v28 = *(uint64_t **)&v118[8];
              if (*(_QWORD *)&v118[8])
              {
                v30 = v117;
                v29 = *(uint64_t ***)v118;
                v31 = **(_QWORD **)v118;
                *(_QWORD *)(v31 + 8) = *(_QWORD *)(*(_QWORD *)&v117 + 8);
                **(_QWORD **)(*(_QWORD *)&v30 + 8) = v31;
                v32 = v27[4];
                v32[1] = (uint64_t)v29;
                *v29 = v32;
                *((double *)v27 + 4) = v30;
                *(_QWORD *)(*(_QWORD *)&v30 + 8) = v27 + 4;
                v27[6] = v28;
                *(_QWORD *)&v118[8] = 0;
              }
              *((_DWORD *)v27 + 14) = 0;
              *v27 = 0;
              v27[1] = 0;
              v27[2] = (uint64_t *)v24;
              *v23 = (uint64_t *)v27;
              v33 = (uint64_t *)v27;
              if (*v130)
              {
                v130 = (uint64_t **)*v130;
                v33 = *v23;
              }
              sub_18D083D78(v131, v33);
              ++v132;
            }
            v4 = (cnprint::CNPrinter *)sub_18D1C5494(&v117);
            v34 = *((_DWORD *)v26 + 14);
            *((_DWORD *)v26 + 14) = v34 + 1;
            if (v34 + 1 > v9)
              v9 = v34 + 1;
          }
        }
      }
      v7 += 56;
    }
    while (v7 != v8);
    if (!v132)
      goto LABEL_104;
    v35 = v130;
    if (v130 != &v131)
    {
      v36 = 0;
      do
      {
        sub_18D2642B8(&v117, (uint64_t)(v35 + 4));
        *(_DWORD *)&v118[16] = *((_DWORD *)v35 + 14);
        v37 = *(_DWORD *)&v118[16];
        v4 = (cnprint::CNPrinter *)sub_18D1C5494(&v117);
        if (v37 == v9)
          ++v36;
        v38 = v35[1];
        if (v38)
        {
          do
          {
            v39 = (uint64_t **)v38;
            v38 = (uint64_t *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v39 = (uint64_t **)v35[2];
            v17 = *v39 == (uint64_t *)v35;
            v35 = v39;
          }
          while (!v17);
        }
        v35 = v39;
      }
      while (v39 != &v131);
      if (v36 >= 2)
      {
        if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
        {
          LOWORD(v117) = 12;
          LOBYTE(v133) = 1;
          sub_18D181C54(a2);
          v101 = v10 + (double)v106;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v117, (unsigned __int8 *)&v133, "#nlos,time,%.3lf,ray tracing results ignored for %s: multiple sequences occur most frequently, %lld", v40, v41, v42, v43, v44, SLOBYTE(v101));
        }
LABEL_104:
        v53 = 0;
LABEL_105:
        sub_18D2679E0(v131);
        return v53;
      }
      v54 = v130;
      if (v130 != &v131)
      {
        while (1)
        {
          sub_18D2642B8(&v117, (uint64_t)(v54 + 4));
          *(_DWORD *)&v118[16] = *((_DWORD *)v54 + 14);
          v55 = *(_DWORD *)&v118[16];
          v4 = (cnprint::CNPrinter *)sub_18D1C5494(&v117);
          if (v55 == v9)
            break;
          v56 = v54[1];
          if (v56)
          {
            do
            {
              v57 = (uint64_t **)v56;
              v56 = (uint64_t *)*v56;
            }
            while (v56);
          }
          else
          {
            do
            {
              v57 = (uint64_t **)v54[2];
              v17 = *v57 == (uint64_t *)v54;
              v54 = v57;
            }
            while (!v17);
          }
          v54 = v57;
          if (v57 == &v131)
            goto LABEL_61;
        }
        v6 = v54;
      }
    }
LABEL_61:
    if (!v6[6])
    {
      if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
      {
        LOWORD(v117) = 12;
        LOBYTE(v133) = 1;
        sub_18D181C54(a2);
        v104 = v10 + (double)v106;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v117, (unsigned __int8 *)&v133, "#nlos,time,%.3lf,ray tracing results ignored for %s: most common path is LOS", v90, v91, v92, v93, v94, SLOBYTE(v104));
      }
      goto LABEL_104;
    }
    if ((double)v9
       / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7
                                  * ((uint64_t)(*(_QWORD *)(a1 + 3040) - *(_QWORD *)(a1 + 3032)) >> 3)) < *(double *)(*(_QWORD *)a1 + 3632))
    {
      if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
      {
        LOWORD(v117) = 12;
        LOBYTE(v133) = 1;
        sub_18D181C54(a2);
        v105 = v10 + (double)v106;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v117, (unsigned __int8 *)&v133, "#nlos,time,%.3lf,ray tracing results ignored for %s: low occurrence rate of %.1lf%% (N = %lu)", v95, v96, v97, v98, v99, SLOBYTE(v105));
      }
      goto LABEL_104;
    }
    v127[0] = 0;
    v128 = 0u;
    memset(v129, 0, sizeof(v129));
    v135 = 0x300000001;
    v133 = &unk_1E25C6C20;
    v136 = &v137;
    v134 = xmmword_18D314670;
    sub_18D04BE88((uint64_t)&v133, 0.0);
    v143 = 0x300000001;
    v141 = &unk_1E25C6C20;
    v144 = v145;
    v142 = xmmword_18D314670;
    sub_18D04BE88((uint64_t)&v141, 0.0);
    v59 = *(_QWORD *)(a1 + 3032);
    v60 = *(_QWORD *)(a1 + 3040);
    if (v59 == v60)
    {
LABEL_90:
      v119 = 0x300000001;
      *(_QWORD *)v118 = &unk_1E25C6C20;
      *(_OWORD *)&v118[8] = xmmword_18D314670;
      v124 = 0x300000001;
      v120 = &v121;
      v122 = &unk_1E25C6C20;
      v123 = xmmword_18D314670;
      v125 = &v126;
      v117 = *(double *)&v129[1];
      v109 = 0x300000001;
      v107 = &unk_1E25C6C20;
      v108 = xmmword_18D314670;
      v110 = v111;
      v58.n128_f64[0] = 1.0 / (double)v9;
      sub_18D064EF4((uint64_t)&v133, (uint64_t)&v107, (float64x2_t)v58);
      if (!v140)
        sub_18D164CA0();
      v114 = 0x300000001;
      v112 = &unk_1E25C6C20;
      v113 = xmmword_18D314670;
      v115 = v116;
      sub_18D053B2C((uint64_t)&v107, (uint64_t)v139, (uint64_t)&v112);
      sub_18D053AA8((uint64_t)v118, (uint64_t)&v112);
      v109 = 0x300000001;
      v107 = &unk_1E25C6C20;
      *(_QWORD *)&v78.f64[1] = 0x100000003;
      v108 = xmmword_18D314670;
      v110 = v111;
      v78.f64[0] = 1.0 / (double)v9;
      sub_18D064EF4((uint64_t)&v141, (uint64_t)&v107, v78);
      if (!v140)
        sub_18D164CA0();
      v114 = 0x300000001;
      v112 = &unk_1E25C6C20;
      v113 = xmmword_18D314670;
      v115 = v116;
      sub_18D053B2C((uint64_t)&v107, (uint64_t)v139, (uint64_t)&v112);
      sub_18D053AA8((uint64_t)&v122, (uint64_t)&v112);
      v79 = (double *)operator new(0xA0uLL);
      v79[1] = 0.0;
      v79[2] = 0.0;
      *(_QWORD *)v79 = &off_1E25CCFA0;
      v79[3] = v117;
      sub_18D263A2C((uint64_t)(v79 + 4), (uint64_t)v118);
      v81 = sub_18D263A2C((uint64_t)(v79 + 12), (uint64_t)&v122);
      v82 = *(std::__shared_weak_count **)(a2 + 320);
      *(_QWORD *)(a2 + 312) = v79 + 3;
      *(_QWORD *)(a2 + 320) = v79;
      if (v82)
      {
        p_shared_owners = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(p_shared_owners);
        while (__stlxr(v84 - 1, p_shared_owners));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v81);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      if (cnprint::CNPrinter::GetLogLevel(v80) <= 1)
      {
        LOWORD(v112) = 12;
        LOBYTE(v107) = 1;
        sub_18D181C54(a2);
        v103 = v10 + (double)v106;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v112, (unsigned __int8 *)&v107, "#nlos,time,%.3lf,%s augmented with ray tracing data, occurrence rate of %.1lf%% (N = %lu)", v85, v86, v87, v88, v89, SLOBYTE(v103));
      }
      v53 = 1;
      goto LABEL_105;
    }
    while (1)
    {
      v61 = *(_QWORD *)(v59 + 40);
      if (!v61)
        goto LABEL_89;
      v62 = *(unsigned __int8 *)(a2 + 24);
      v63 = *(_DWORD *)(a2 + 28);
      v64 = v59 + 40;
      do
      {
        v65 = *(unsigned __int8 *)(v61 + 56);
        v17 = v65 == v62;
        v66 = v65 > v62;
        if (v17)
          v66 = *(_DWORD *)(v61 + 60) > v63;
        v67 = !v66;
        if (v66)
          v68 = (uint64_t *)(v61 + 8);
        else
          v68 = (uint64_t *)v61;
        if (v67)
          v64 = v61;
        v61 = *v68;
      }
      while (*v68);
      if (v64 == v59 + 40)
        goto LABEL_89;
      v69 = *(unsigned __int8 *)(v64 + 56);
      v70 = *(_DWORD *)(v64 + 60) < v63;
      v17 = v69 == v62;
      v71 = v69 < v62;
      if (v17)
        v71 = v70;
      if (v71)
        goto LABEL_89;
      sub_18D262B80(&v117, v64 + 64);
      if (*(uint64_t **)&v118[8] == v6[6])
      {
        v72 = *(void ***)v118;
        if (*(double **)v118 == &v117)
        {
LABEL_84:
          sub_18D1C5494(&v117);
          if (*(_QWORD *)(v64 + 128))
          {
            v74 = *(double *)(v64 + 136) - *(double *)(v64 + 64);
            v75 = *(double *)(v64 + 144) - *(double *)(v64 + 72);
            v76 = *(double *)(v64 + 152) - *(double *)(v64 + 80);
            v77 = *(double *)(v64 + 160) - sqrt(v75 * v75 + v74 * v74 + v76 * v76);
          }
          else
          {
            v77 = 0.0;
          }
          v117 = v77;
          sub_18D1648E4((uint64_t)v127, &v117, 1.0);
          *(_QWORD *)&v118[16] = 0x300000001;
          v117 = COERCE_DOUBLE(&unk_1E25C6C20);
          *(_OWORD *)v118 = xmmword_18D314670;
          v119 = (uint64_t)&v120;
          sub_18D053FA4((uint64_t)&v133, v64 + 168, (uint64_t)&v117);
          sub_18D053AA8((uint64_t)&v133, (uint64_t)&v117);
          *(_QWORD *)&v118[16] = 0x300000001;
          v117 = COERCE_DOUBLE(&unk_1E25C6C20);
          *(_OWORD *)v118 = xmmword_18D314670;
          v119 = (uint64_t)&v120;
          sub_18D053FA4((uint64_t)&v133, v64 + 232, (uint64_t)&v117);
          v58 = sub_18D053AA8((uint64_t)&v141, (uint64_t)&v117);
          goto LABEL_89;
        }
        v73 = v6 + 4;
        while (1)
        {
          v73 = (uint64_t **)v73[1];
          if (v72[2] != v73[2])
            break;
          v72 = (void **)v72[1];
          if (v72 == (void **)&v117)
            goto LABEL_84;
        }
      }
      sub_18D1C5494(&v117);
LABEL_89:
      v59 += 56;
      if (v59 == v60)
        goto LABEL_90;
    }
  }
  v139[0] = 0;
  v140 = 0;
  LOWORD(v117) = 12;
  LOBYTE(v133) = 4;
  v45 = sub_18D25F658(a2);
  v47 = v46;
  sub_18D181C54(a2);
  v102 = v47 + (double)v45;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v117, (unsigned __int8 *)&v133, "#nlos,time,%.3lf,%s could not get ECEF-to-ENU rotation matrix", v48, v49, v50, v51, v52, SLOBYTE(v102));
  return 0;
}

void sub_18D25E364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,_QWORD *a58)
{
  sub_18D2679E0(a58);
  _Unwind_Resume(a1);
}

char *raven::RavenNLOSEngine::HandleEvent(char *this, const raven::RavenSolutionEvent *a2)
{
  BOOL v2;
  _BYTE *v6;

  if (this[8])
    v2 = *((_BYTE *)a2 + 209) == 2;
  else
    v2 = 0;
  if (v2 && *((_BYTE *)a2 + 208) == 4 && *((_BYTE *)a2 + 1464) != 0 && *((_BYTE *)a2 + 1264) != 0)
  {
    v6 = this;
    if (this[2896])
    {
      return (char *)memcpy(this + 472, (char *)a2 + 8, 0x971uLL);
    }
    else
    {
      *((_QWORD *)this + 58) = &unk_1E25C2B48;
      this = (char *)memcpy(this + 472, (char *)a2 + 8, 0x971uLL);
      v6[2896] = 1;
    }
  }
  return this;
}

void raven::RavenNLOSEngine::HandleEvent(raven::RavenNLOSEngine *this, const raven::RayTracingTileEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  BOOL v59;
  _QWORD *v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *v128;
  float64_t v129;
  CoreNavigation::CLP::LogEntry::RayTracingTileData *v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  CoreNavigation::CLP::LogEntry::RayTracingTileData *v187;
  double v188;
  double v189;
  uint64_t v190;
  float v191;
  uint64_t v192;
  unint64_t v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  cnprint::CNPrinter *v208;
  uint64_t v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  unsigned __int8 v247;
  double v248[3];
  float64x2_t v249;
  uint64_t v250;
  unsigned __int8 v251[40];
  uint64_t v252;
  int v253;
  CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *v254[10];

  if (*((_BYTE *)this + 8))
  {
    if (*(_BYTE *)(*(_QWORD *)this + 3648))
      return;
    CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v251);
    v4 = wireless_diagnostics::google::protobuf::MessageLite::ParseFromString();
    if ((v4 & 1) != 0)
    {
      if ((v253 & 2) != 0)
      {
        v253 |= 2u;
        v26 = v252;
        if (!v252)
        {
          v4 = operator new();
          v26 = v4;
          *(_QWORD *)v4 = &off_1E25BBD08;
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 40) = 0u;
          *(_OWORD *)(v4 + 56) = 0u;
          *(_OWORD *)(v4 + 72) = 0u;
          *(_OWORD *)(v4 + 88) = 0u;
          *(_OWORD *)(v4 + 104) = 0u;
          *(_OWORD *)(v4 + 120) = 0u;
          *(_OWORD *)(v4 + 136) = 0u;
          *(_OWORD *)(v4 + 152) = 0u;
          *(_OWORD *)(v4 + 168) = 0u;
          *(_OWORD *)(v4 + 184) = 0u;
          *(_OWORD *)(v4 + 200) = 0u;
          *(_OWORD *)(v4 + 216) = 0u;
          *(_OWORD *)(v4 + 232) = 0u;
          *(_OWORD *)(v4 + 248) = 0u;
          *(_OWORD *)(v4 + 8) = 0u;
          *(_OWORD *)(v4 + 264) = 0u;
          *(_OWORD *)(v4 + 280) = 0u;
          *(_OWORD *)(v4 + 296) = 0u;
          *(_OWORD *)(v4 + 308) = 0u;
          v252 = v4;
        }
        *(_DWORD *)(v26 + 320) |= 0x20u;
        v27 = *(_QWORD *)(v26 + 304);
        if (v27)
        {
          if ((*(_BYTE *)(v27 + 36) & 2) != 0)
          {
            v28 = *(_QWORD *)(v27 + 16);
            if (!v28)
            {
              CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)v4);
              v28 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry::default_instance_ + 16);
            }
            if ((*(_BYTE *)(v28 + 212) & 1) != 0)
            {
              v45 = *(_QWORD *)(v27 + 16);
              if (!v45)
              {
                CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)v4);
                v45 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry::default_instance_ + 16);
              }
              v46 = *(_QWORD *)(v45 + 8);
              if (!v46)
              {
                CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)v4);
                v46 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_
                                + 8);
              }
              v47 = *(_DWORD *)(v46 + 72);
              if ((v47 & 1) != 0)
              {
                v55 = *(_QWORD *)(v46 + 8);
                v56 = (_QWORD *)*((_QWORD *)this + 392);
                if (!v56)
                  goto LABEL_38;
                v57 = (_QWORD *)((char *)this + 3136);
                do
                {
                  v58 = v56[4];
                  v59 = v58 >= v55;
                  if (v58 >= v55)
                    v60 = v56;
                  else
                    v60 = v56 + 1;
                  if (v59)
                    v57 = v56;
                  v56 = (_QWORD *)*v60;
                }
                while (*v60);
                if (v57 != (_QWORD *)((char *)this + 3136) && v55 >= v57[4])
                {
                  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v4) <= 1)
                  {
                    LOWORD(v254[0]) = 12;
                    LOBYTE(v249.f64[0]) = 1;
                    v85 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                    v226 = v86 + (double)v85;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,RT tile already exist, skip the incoming, tile centroid ID,%llu", v87, v88, v89, v90, v91, SLOBYTE(v226));
                  }
                }
                else
                {
LABEL_38:
                  v61 = (double)HIDWORD(v55) * 0.000001 + -90.0;
                  v62 = (double)v55 * 0.000001;
                  if (v62 <= 180.0)
                    v63 = (double)v55 * 0.000001;
                  else
                    v63 = v62 + -360.0;
                  if (v61 <= -90.0 || v61 > 90.0)
                  {
                    LOWORD(v254[0]) = 12;
                    LOBYTE(v249.f64[0]) = 4;
                    v71 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                    v224 = v72 + (double)v71;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Invalid tile centroid latitude,%12.7f, tile centroid ID,%llu", v73, v74, v75, v76, v77, SLOBYTE(v224));
                  }
                  else if (v63 <= -180.0 || v63 > 180.0)
                  {
                    LOWORD(v254[0]) = 12;
                    LOBYTE(v249.f64[0]) = 4;
                    v78 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                    v225 = v79 + (double)v78;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Invalid tile centroid longitude,%12.7f, tile centroid ID,%llu", v80, v81, v82, v83, v84, SLOBYTE(v225));
                  }
                  else if ((v47 & 4) != 0)
                  {
                    if ((v47 & 8) != 0)
                    {
                      if ((v47 & 0x20) != 0)
                      {
                        if ((v47 & 0x40) != 0)
                        {
                          if ((v47 & 0x80) != 0)
                          {
                            if ((v47 & 0x100) != 0 && *(_DWORD *)(v46 + 44))
                            {
                              if ((v47 & 0x200) != 0 && *(_DWORD *)(v46 + 48))
                              {
                                if ((v47 & 0x400) != 0 && *(_DWORD *)(v46 + 52))
                                {
                                  if ((v47 & 0x800) != 0 && *(_DWORD *)(v46 + 56))
                                  {
                                    if ((v47 & 0x1000) != 0 && *(_DWORD *)(v46 + 60))
                                    {
                                      if ((v47 & 0x2000) != 0 && *(_DWORD *)(v46 + 64))
                                      {
                                        if (fabs(*(float *)(v46 + 28) + -1000000.0) >= 2.22044605e-16)
                                        {
                                          LOWORD(v254[0]) = 12;
                                          LOBYTE(v249.f64[0]) = 4;
                                          v180 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                                          v239 = v181 + (double)v180;
                                          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: mismatch in scale factor value used for generating GeoHashID, tile centroid ID,%llu", v182, v183, v184, v185, v186, SLOBYTE(v239));
                                        }
                                        else
                                        {
                                          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v4) <= 1)
                                          {
                                            LOWORD(v254[0]) = 12;
                                            LOBYTE(v249.f64[0]) = 1;
                                            v120 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                                            v231 = v121 + (double)v120;
                                            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Added RT tile with hash ID,%llu, centroid %12.7f, %12.7f, number of tiles in database %zu", v122, v123, v124, v125, v126, SLOBYTE(v231));
                                          }
                                          v254[0] = *(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload **)(v46 + 8);
                                          v127 = sub_18D23A8D4((uint64_t **)this + 391, (unint64_t *)v254, (uint64_t *)v254);
                                          *((double *)this + 401) = *(float *)(v46 + 32);
                                          v128 = *(const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload **)(v27 + 16);
                                          if (!v128)
                                          {
                                            CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)v127);
                                            v128 = *(const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload **)(CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry::default_instance_ + 16);
                                          }
                                          sub_18D25F4AC(v254, v128);
                                          sub_18D25F394((char **)this + 398, (uint64_t *)v254);
                                          if (v254[0])
                                            (*(void (**)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *))(*(_QWORD *)v254[0] + 8))(v254[0]);
                                          if (*((_BYTE *)this + 2896))
                                          {
                                            v129 = *((double *)this + 218);
                                            v249.f64[0] = *((float64_t *)this + 217);
                                            v249.f64[1] = v129;
                                            v250 = *((_QWORD *)this + 219);
                                            v130 = (CoreNavigation::CLP::LogEntry::RayTracingTileData *)cnnavigation::ECEFToLLA(&v249, 1, v248, 0, (uint64_t)v254);
                                            if ((_DWORD)v130)
                                            {
                                              LOWORD(v254[0]) = 1;
                                              v247 = 4;
                                              v131 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                                              v232 = v132 + (double)v131;
                                              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, &v247, "#nlos,time,%.3lf,could not convert latest user ECEF position to LLA,%.3lf,%.3lf,%.3lf", v133, v134, v135, v136, v137, SLOBYTE(v232));
                                            }
                                            else
                                            {
                                              v243 = *((double *)this + 26) * 0.0174532925;
                                              v242 = *((double *)this + 27) * 0.0174532925;
                                              v187 = (CoreNavigation::CLP::LogEntry::RayTracingTileData *)*((_QWORD *)this + 398);
                                              if (v187 != *((CoreNavigation::CLP::LogEntry::RayTracingTileData **)this
                                                           + 399))
                                              {
                                                v188 = v248[0];
                                                v189 = v248[1];
                                                v190 = *(_QWORD *)(*(_QWORD *)v187 + 8);
                                                if (v190)
                                                {
                                                  v191 = *(float *)(v190 + 20);
                                                }
                                                else
                                                {
                                                  CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(v130);
                                                  v190 = *(_QWORD *)(*(_QWORD *)v187 + 8);
                                                  v191 = *(float *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_
                                                                              + 8)
                                                                  + 20);
                                                  if (!v190)
                                                  {
                                                    CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(v130);
                                                    v190 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_
                                                                     + 8);
                                                  }
                                                }
                                                if (v187 != *((CoreNavigation::CLP::LogEntry::RayTracingTileData **)this
                                                             + 399))
                                                {
                                                  v244 = v189 * 57.2957795;
                                                  v245 = v188 * 57.2957795;
                                                  v246 = *(float *)(v190 + 24) * 0.5;
                                                  v240 = *(double *)(*(_QWORD *)this + 3504)
                                                       + *(double *)(*(_QWORD *)this + 3512);
                                                  v241 = v191 * 0.5;
                                                  do
                                                  {
                                                    v192 = *(_QWORD *)(*(_QWORD *)v187 + 8);
                                                    if (!v192)
                                                    {
                                                      CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(v130);
                                                      v192 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_
                                                                       + 8);
                                                    }
                                                    v193 = *(_QWORD *)(v192 + 8);
                                                    v194 = (double)HIDWORD(v193) * 0.000001 + -90.0;
                                                    v195 = (double)v193 * 0.000001;
                                                    if (v195 <= 180.0)
                                                      v196 = (double)v193 * 0.000001;
                                                    else
                                                      v196 = v195 + -360.0;
                                                    v197 = v245 - v194;
                                                    v198 = fabs(v241 + v245 - v194);
                                                    v199 = vabdd_f64(v197, v241);
                                                    if (v198 < v199)
                                                      v199 = v198;
                                                    v200 = v199;
                                                    v201 = v244 - v196;
                                                    v202 = v246 + v244 - v196;
                                                    v203 = fabs(v202);
                                                    if (v203 > 180.0)
                                                    {
                                                      v204 = dbl_18D318D20[v202 >= 0.0];
                                                      v203 = vabdd_f64(fmod(v202 + v204, 360.0), v204);
                                                    }
                                                    v205 = v201 - v246;
                                                    v206 = vabdd_f64(v201, v246);
                                                    if (v206 > 180.0)
                                                    {
                                                      v207 = dbl_18D318D20[v205 >= 0.0];
                                                      v206 = vabdd_f64(fmod(v205 + v207, 360.0), v207);
                                                    }
                                                    if (v203 < v206)
                                                      v206 = v203;
                                                    if (v243 * v200 * (v243 * v200) + v242 * v206 * (v242 * v206) <= v240 * v240)
                                                    {
                                                      v187 = (CoreNavigation::CLP::LogEntry::RayTracingTileData *)((char *)v187 + 8);
                                                    }
                                                    else
                                                    {
                                                      sub_18D26737C((uint64_t **)this + 391, v193);
                                                      if (cnprint::CNPrinter::GetLogLevel(v208) <= 1)
                                                      {
                                                        LOWORD(v254[0]) = 12;
                                                        LOBYTE(v248[0]) = 1;
                                                        v209 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                                                        v211 = v210 + (double)v209;
                                                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)v248, "#nlos,time,%.3lf,Removed far away RT tile from RT database with hash ID,%llu,tile centroid LL: %12.7f, %12.7f, user LL: %12.7f, %12.7f, distance to nearest tile vertex, %8.2f > %8.2f", v212, v213, v214, v215, v216, SLOBYTE(v211));
                                                      }
                                                      v130 = (CoreNavigation::CLP::LogEntry::RayTracingTileData *)sub_18D25F520((uint64_t)this + 3184, v187);
                                                      v187 = v130;
                                                    }
                                                  }
                                                  while (v187 != *((CoreNavigation::CLP::LogEntry::RayTracingTileData **)this
                                                                  + 399));
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        LOWORD(v254[0]) = 12;
                                        LOBYTE(v249.f64[0]) = 4;
                                        v173 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                                        v238 = v174 + (double)v173;
                                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: number of bits corresponding to facet number, tile centroid ID,%llu", v175, v176, v177, v178, v179, SLOBYTE(v238));
                                      }
                                    }
                                    else
                                    {
                                      LOWORD(v254[0]) = 12;
                                      LOBYTE(v249.f64[0]) = 4;
                                      v166 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                                      v237 = v167 + (double)v166;
                                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: number of bits corresponding to section number, tile centroid ID,%llu", v168, v169, v170, v171, v172, SLOBYTE(v237));
                                    }
                                  }
                                  else
                                  {
                                    LOWORD(v254[0]) = 12;
                                    LOBYTE(v249.f64[0]) = 4;
                                    v159 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                                    v236 = v160 + (double)v159;
                                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing or zero sample locations in tile, tile centroid ID,%llu", v161, v162, v163, v164, v165, SLOBYTE(v236));
                                  }
                                }
                                else
                                {
                                  LOWORD(v254[0]) = 12;
                                  LOBYTE(v249.f64[0]) = 4;
                                  v152 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                                  v235 = v153 + (double)v152;
                                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing or zero visible facets in tile, tile centroid ID,%llu", v154, v155, v156, v157, v158, SLOBYTE(v235));
                                }
                              }
                              else
                              {
                                LOWORD(v254[0]) = 12;
                                LOBYTE(v249.f64[0]) = 4;
                                v145 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                                v234 = v146 + (double)v145;
                                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing or zero visible building sections in tile, tile centroid ID,%llu", v147, v148, v149, v150, v151, SLOBYTE(v234));
                              }
                            }
                            else
                            {
                              LOWORD(v254[0]) = 12;
                              LOBYTE(v249.f64[0]) = 4;
                              v138 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                              v233 = v139 + (double)v138;
                              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing or zero visible buildings in tile, tile centroid ID,%llu", v140, v141, v142, v143, v144, SLOBYTE(v233));
                            }
                          }
                          else
                          {
                            LOWORD(v254[0]) = 12;
                            LOBYTE(v249.f64[0]) = 4;
                            v113 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                            v230 = v114 + (double)v113;
                            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing max reflection depth used for tile generation, tile centroid ID,%llu", v115, v116, v117, v118, v119, SLOBYTE(v230));
                          }
                        }
                        else
                        {
                          LOWORD(v254[0]) = 12;
                          LOBYTE(v249.f64[0]) = 4;
                          v106 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                          v229 = v107 + (double)v106;
                          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing max distance used for facet visibility determination, tile centroid ID,%llu", v108, v109, v110, v111, v112, SLOBYTE(v229));
                        }
                      }
                      else
                      {
                        LOWORD(v254[0]) = 12;
                        LOBYTE(v249.f64[0]) = 4;
                        v99 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                        v228 = v100 + (double)v99;
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing tile samples location spacing, tile centroid ID,%llu", v101, v102, v103, v104, v105, SLOBYTE(v228));
                      }
                    }
                    else
                    {
                      LOWORD(v254[0]) = 12;
                      LOBYTE(v249.f64[0]) = 4;
                      v92 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                      v227 = v93 + (double)v92;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing tile longitude span, tile centroid ID,%llu", v94, v95, v96, v97, v98, SLOBYTE(v227));
                    }
                  }
                  else
                  {
                    LOWORD(v254[0]) = 12;
                    LOBYTE(v249.f64[0]) = 4;
                    v64 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                    v223 = v65 + (double)v64;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing tile latitude span, tile centroid ID,%llu", v66, v67, v68, v69, v70, SLOBYTE(v223));
                  }
                }
              }
              else
              {
                LOWORD(v254[0]) = 12;
                LOBYTE(v249.f64[0]) = 4;
                v48 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
                v222 = v49 + (double)v48;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing tile centroid geohash ID", v50, v51, v52, v53, v54, SLOBYTE(v222));
              }
            }
            else
            {
              LOWORD(v254[0]) = 12;
              LOBYTE(v249.f64[0]) = 4;
              v29 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
              v220 = v30 + (double)v29;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing RT tile Meta Data", v31, v32, v33, v34, v35, SLOBYTE(v220));
            }
            goto LABEL_19;
          }
        }
        else
        {
          v36 = (_QWORD *)operator new();
          v37 = MEMORY[0x1E0DE8338];
          *v36 = &off_1E25BEA08;
          v36[1] = 0;
          v36[2] = 0;
          v36[3] = v37;
          v36[4] = 0;
          *(_QWORD *)(v26 + 304) = v36;
        }
        LOWORD(v254[0]) = 12;
        LOBYTE(v249.f64[0]) = 4;
        v38 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
        v221 = v39 + (double)v38;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,Cannot handle RT tile: Missing RT tile payload data", v40, v41, v42, v43, v44, SLOBYTE(v221));
      }
      else
      {
        LOWORD(v254[0]) = 12;
        LOBYTE(v249.f64[0]) = 4;
        v5 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
        v217 = v6 + (double)v5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,cannot handle RT tile: Missing serialized RT tile data in the LogEntry", v7, v8, v9, v10, v11, SLOBYTE(v217));
      }
    }
    else
    {
      LOWORD(v254[0]) = 12;
      LOBYTE(v249.f64[0]) = 4;
      v19 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
      v219 = v20 + (double)v19;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, (unsigned __int8 *)&v249, "#nlos,time,%.3lf,cannot handle RT tile: Failed to parse incoming tile LogEntry", v21, v22, v23, v24, v25, SLOBYTE(v219));
    }
LABEL_19:
    CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v251);
    return;
  }
  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    LOWORD(v254[0]) = 12;
    v251[0] = 1;
    v12 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(_QWORD *)a2 + 16))(a2);
    v218 = v13 + (double)v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v254, v251, "#nlos,time,%.3lf, RavenNLOSEngine not configured", v14, v15, v16, v17, v18, SLOBYTE(v218));
  }
}

void sub_18D25F2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_18D25F394(char **a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_18D07AFE4();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v26 = result;
    if (v13)
      v14 = (char *)sub_18D0788C8(result, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v25 = v16;
    v17 = *a2;
    *a2 = 0;
    *(_QWORD *)v15 = v17;
    v9 = v15 + 8;
    v24.i64[1] = (uint64_t)(v15 + 8);
    v19 = *a1;
    v18 = a1[1];
    if (v18 == *a1)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v15 - 1) = v20;
        v15 -= 8;
      }
      while (v18 != v19);
      v21 = *(int64x2_t *)a1;
      v9 = (char *)v24.i64[1];
      v16 = v25;
    }
    *a1 = v15;
    a1[1] = v9;
    v24 = v21;
    v22 = a1[2];
    a1[2] = v16;
    v25 = v22;
    v23 = v21.i64[0];
    result = sub_18D17CE04((uint64_t)&v23);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)v7 = v8;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *sub_18D25F4AC(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload **a1, const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *a2)
{
  CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *v4;
  CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *result;

  v4 = (CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *)operator new();
  result = CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::RayTracingTilePayload(v4, a2);
  *a1 = v4;
  return result;
}

void sub_18D25F4FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x10B1C407D9F545CLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D25F520(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2 + 1;
  v5 = *(_QWORD **)(a1 + 8);
  if (a2 + 1 == v5)
  {
    v7 = a2;
  }
  else
  {
    do
    {
      v6 = *(v4 - 1);
      *(v4 - 1) = *v4;
      *v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      ++v4;
    }
    while (v4 != v5);
    v7 = v4 - 1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  while (v4 != v7)
  {
    v9 = *--v4;
    v8 = v9;
    *v4 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  *(_QWORD *)(a1 + 8) = v7;
  return a2;
}

uint64_t sub_18D25F658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t v3;
  int8x16_t v4;
  uint64_t v6[2];
  _BYTE v7[4];
  __int128 v8;
  _DWORD v9[7];

  v1 = *(_QWORD *)(a1 + 328);
  v2 = *(_QWORD *)(a1 + 336);
  if (v1 != v2)
  {
    v7[0] = 0;
    v8 = 0u;
    memset(v9, 0, sizeof(v9));
    while (1)
    {
      *(double *)v6 = *(double *)(v1 + 8) + (double)*(uint64_t *)v1;
      if (sub_18D1648E4((uint64_t)v7, (double *)v6, 1.0))
        break;
      v1 += 208;
      if (v1 == v2)
      {
        v3.i64[0] = *(_QWORD *)&v9[1];
        v6[0] = 0;
        v6[1] = 0;
        CNTimeSpan::SetTimeSpan(v6, 0, v3, v4);
        return v6[0];
      }
    }
  }
  return 0;
}

void raven::RavenNLOSEngine::FindApproximatePathsUsingRayTracing(cnprint::CNPrinter *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  long double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  __double2 v48;
  double v49;
  __double2 v50;
  uint64_t v51;
  _OWORD *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t *i;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  __int128 v62;
  _QWORD *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  double v74;
  double v75;
  double v76;
  double v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t (**v84)();
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  char v90;
  __int128 v91;
  uint64_t v92;
  double v93;
  double v94;
  double sinval;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  *a9 = (uint64_t)a9;
  a9[1] = (uint64_t)a9;
  a9[2] = 0;
  if (*((_BYTE *)a1 + 8))
  {
    if (a6)
    {
      v15 = *(_QWORD *)a1;
      v16 = *(double *)(*(_QWORD *)a1 + 3560);
      v17 = *a5 - *a4;
      v18 = a5[1] - a4[1];
      v19 = a5[2] - a4[2];
      v20 = hypot(v17, v18);
      v21 = atan2(v19, v20);
      if (v21 >= 0.0)
      {
        v84 = &off_1E25C0DC8;
        v36 = sqrt(v18 * v18 + v17 * v17 + v19 * v19);
        if (fabs(v36) >= 2.22044605e-16)
        {
          v44 = *(_QWORD *)(v15 + 3544);
          v45 = 1.0 / v36;
          v46 = v18 * v45;
          v47 = v19 * v45;
          v91 = *(_OWORD *)a4;
          v92 = *((_QWORD *)a4 + 2);
          v86 = v91;
          *(_QWORD *)&v87 = v92;
          v76 = v46;
          v77 = v17 * v45;
          *((double *)&v87 + 1) = v17 * v45;
          *(double *)&v88 = v46;
          *((double *)&v88 + 1) = v19 * v45;
          v85 = a6;
          v89 = 0;
          v90 = 0;
          (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a6 + 16))(a6, &v84);
          if (v90)
            goto LABEL_11;
          v78 = v91;
          *(_QWORD *)&v79 = v92;
          *((double *)&v79 + 1) = v77;
          *(double *)&v80 = v76;
          *((double *)&v80 + 1) = v47;
          v81 = (uint64_t)&v81;
          v82 = &v81;
          v83 = 0;
          v71 = sub_18D26610C(&v78);
          v71[1] = a9;
          v72 = *a9;
          *v71 = *a9;
          *(_QWORD *)(v72 + 8) = v71;
          *a9 = (uint64_t)v71;
          ++a9[2];
          v73 = *(unsigned __int8 *)(*(_QWORD *)a1 + 3552);
          sub_18D1C5494(&v81);
          if (!v73)
          {
LABEL_11:
            v48 = __sincos_stret(v21);
            v49 = 0.0;
            do
            {
              v50 = __sincos_stret(v49);
              v91 = *(_OWORD *)a4;
              v92 = *((_QWORD *)a4 + 2);
              v93 = v48.__cosval * v50.__sinval;
              v94 = v48.__cosval * v50.__cosval;
              sinval = v48.__sinval;
              sub_18D262344((uint64_t)&v78, (double *)&v91, a6, v44, 0);
              v51 = v83;
              if (v83)
              {
                v52 = (_OWORD *)v81;
                v53 = *(double *)(v81 + 56);
                v54 = *(double *)(v81 + 64);
                v55 = sqrt((v76 * v76 + v77 * v77) * (v54 * v54 + v53 * v53));
                if (fabs(v55) >= 2.22044605e-16)
                {
                  v56 = (v76 * v54 + v77 * v53) / v55;
                  v57 = -3.14159265;
                  if (fabs(v56 + 1.0) >= 2.22044605e-16)
                  {
                    v57 = 0.0;
                    if (fabs(v56 + -1.0) >= 2.22044605e-16)
                      v57 = acos(v56);
                  }
                  if (v16 * 0.0174532925 * 0.5 >= v57)
                  {
                    for (i = (uint64_t *)a9[1]; i != a9; i = (uint64_t *)i[1])
                    {
                      if (v51 == i[10])
                      {
                        if (v82 == &v81)
                          goto LABEL_31;
                        v59 = i + 9;
                        v60 = v82;
                        while (1)
                        {
                          v61 = *v59;
                          if (v60[2] != *(_QWORD *)(v61 + 16))
                            break;
                          v59 = (uint64_t *)(v61 + 8);
                          v60 = (uint64_t *)v60[1];
                          if (v60 == &v81)
                            goto LABEL_31;
                        }
                      }
                    }
                    if (v51 != v44)
                      goto LABEL_28;
                    v62 = v52[3];
                    v86 = v52[2];
                    v87 = v62;
                    v88 = v52[4];
                    v85 = a6;
                    v89 = 0;
                    v90 = 0;
                    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a6 + 16))(a6, &v84);
                    if (!v90)
                    {
LABEL_28:
                      v63 = operator new(0x58uLL);
                      *v63 = 0;
                      v63[1] = 0;
                      v64 = v79;
                      *((_OWORD *)v63 + 1) = v78;
                      *((_OWORD *)v63 + 2) = v64;
                      *((_OWORD *)v63 + 3) = v80;
                      v63[8] = v63 + 8;
                      v63[9] = v63 + 8;
                      v63[10] = 0;
                      v65 = v83;
                      if (v83)
                      {
                        v67 = v81;
                        v66 = v82;
                        v68 = *v82;
                        *(_QWORD *)(v68 + 8) = *(_QWORD *)(v81 + 8);
                        **(_QWORD **)(v67 + 8) = v68;
                        v69 = v63[8];
                        *(_QWORD *)(v69 + 8) = v66;
                        *v66 = v69;
                        v63[8] = v67;
                        *(_QWORD *)(v67 + 8) = v63 + 8;
                        v63[10] = v65;
                        v83 = 0;
                      }
                      v70 = *a9;
                      *v63 = *a9;
                      v63[1] = a9;
                      *(_QWORD *)(v70 + 8) = v63;
                      *a9 = (uint64_t)v63;
                      ++a9[2];
                    }
                  }
                }
              }
LABEL_31:
              sub_18D1C5494(&v81);
              v49 = v16 * 0.0174532925 + v49;
            }
            while (v49 <= 6.28318531);
          }
        }
        else
        {
          LOWORD(v78) = 12;
          LOBYTE(v91) = 4;
          v37 = *(_QWORD *)a2;
          v38 = *(double *)(a2 + 8);
          sub_18D181C54(a3);
          v75 = v38 + (double)v37;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v91, "#nlos,time,%.3lf,zero distance to %s", v39, v40, v41, v42, v43, SLOBYTE(v75));
        }
      }
      else
      {
        LOWORD(v84) = 12;
        LOBYTE(v78) = 4;
        v22 = *(_QWORD *)a2;
        v23 = *(double *)(a2 + 8);
        sub_18D181C54(a3);
        v74 = v23 + (double)v22;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v84, (unsigned __int8 *)&v78, "#nlos,time,%.3lf,%s satellite below horizon; elevation = %.1f deg",
          v24,
          v25,
          v26,
          v27,
          v28,
          SLOBYTE(v74));
      }
    }
    else
    {
      LOWORD(v84) = 12;
      LOBYTE(v78) = 4;
      v35 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v84, (unsigned __int8 *)&v78, "#nlos,time,%.3lf,building data pointer is null in %s", (uint64_t)a4, (uint64_t)a5, 0, a7, a8, SLOBYTE(v35));
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    LOWORD(v84) = 12;
    LOBYTE(v78) = 1;
    v34 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v84, (unsigned __int8 *)&v78, "#nlos,time,%.3lf,object not configured in %s", v29, v30, v31, v32, v33, SLOBYTE(v34));
  }
}

void sub_18D25FC78(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  sub_18D1C5494(v2);
  sub_18D262FEC(v1);
  _Unwind_Resume(a1);
}

void raven::RavenNLOSEngine::RefineApproximatePath(cnprint::CNPrinter *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  double *v8;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  double *v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  double *v53;
  double *v54;
  double *v55;
  __int128 v56;
  uint64_t v57;
  double *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  double *v79;
  double *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  double *v85;
  double *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  double *v99;
  double *v100;
  double *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  double *v106;
  double *v107;
  __int128 v108;
  double v109;
  double v110;
  _OWORD *v111;
  double v112;
  double v113;
  __int128 v114;
  double *v115;
  _OWORD *v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  unint64_t v130;
  char *v131;
  double v132;
  double v133;
  __int128 v134;
  double *v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  double *v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  __int128 v152;
  uint64_t v153;
  double *v154;
  double v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  uint64_t v167;
  double v168;
  double *v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double *v174;
  double *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double *v222;
  double *v223;
  uint64_t v224;
  uint64_t v225;
  double v226;
  double v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  double *v235;
  uint64_t v236;
  double *v237;
  double *v238;
  uint64_t v239;
  double *v240;
  unint64_t v241;
  int v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _BOOL4 v247;
  double *v248;
  double v249;
  cnprint::CNPrinter *v250;
  int v251;
  uint64_t v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double *v288;
  uint64_t v289;
  uint64_t v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  _QWORD *v296;
  unint64_t v297;
  __int128 v298;
  double *v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double *v304;
  uint64_t v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double *v310;
  uint64_t v311;
  double *v312;
  double *v313;
  uint64_t v314;
  double *v315;
  double v316;
  double *v317;
  uint64_t v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  __int128 v327;
  unint64_t v328;
  double *v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  unsigned int v349;
  unsigned int v350;
  double v351;
  double *v353;
  char *v354;
  double v355;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  unint64_t v369;
  double v370;
  unint64_t v371;
  double v372;
  char *v373;
  double v374;
  char *v375;
  double *v376;
  char *v377;
  uint64_t v378;
  double v379;
  double *v380;
  unint64_t v381;
  double v382;
  _BOOL4 v383;
  double *v384;
  void *v385;
  char *v386;
  double v387;
  char *v388;
  uint64_t v389;
  char *v390;
  void *v391;
  __int128 v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  void *v396;
  __int128 v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  void *v401;
  __int128 v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  void *v406;
  __int128 v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  void *v411;
  __int128 v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  void *v416;
  __int128 v417;
  uint64_t v418;
  _BYTE *v419;
  _BYTE v420[32];
  void *v421;
  __int128 v422;
  uint64_t v423;
  double *v424;
  double v425[2];
  _BYTE v426[48];
  double v427;
  double v428;
  double v429;
  double v430;
  __int128 v431;
  __int128 v432;
  double v433;
  double v434;
  double v435;
  double v436;
  _QWORD v437[3];
  _QWORD v438[3];
  void *v439;
  __int128 v440;
  uint64_t v441;
  double *v442;
  uint64_t v443;
  void *v444;
  __int128 v445;
  uint64_t v446;
  double *v447;
  uint64_t v448;
  void *v449;
  __int128 v450;
  uint64_t v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t (**v454)();
  __int128 v455;
  uint64_t v456;
  double *v457;
  uint64_t v458;
  _BYTE v459[24];
  uint64_t v460;
  double *v461;
  uint64_t v462;
  _QWORD v463[3];
  __int128 v464;
  uint64_t v465;
  _QWORD v466[3];
  void *v467;
  void *v468;
  uint64_t v469;
  void *v470[3];
  void *v471;
  double *v472;
  unint64_t v473;
  void *v474;
  double *v475;
  unint64_t v476;
  void *__p;
  double *v478;
  double *v479;
  _BYTE v480[32];
  __int128 v481;
  double v482[3];
  __int128 v483;
  uint64_t v484;
  uint64_t v485;
  void *v486;
  __int128 v487;
  uint64_t v488;
  uint64_t *v489;
  uint64_t v490;
  void *v491;
  __int128 v492;
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  char v496;
  void *v497;
  __int128 v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  void *v502;
  __int128 v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  _BYTE v507[24];
  uint64_t v508;
  double *v509;
  double v510[7];

  v510[4] = *(double *)MEMORY[0x1E0C80C00];
  *(_BYTE *)a6 = 0;
  *(_BYTE *)(a6 + 232) = 0;
  if (!*((_BYTE *)a1 + 8))
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
    {
      *(_WORD *)v480 = 12;
      v459[0] = 1;
      v32 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v480, v459, "#nlos,time,%.3lf,object not configured in %s", v27, v28, v29, v30, v31, SLOBYTE(v32));
    }
    return;
  }
  v8 = a5;
  v11 = *(double *)a2;
  v10 = *(double *)(a2 + 8);
  v12 = *(double *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 64);
  if (!v13)
  {
    v33 = *a5 - v11;
    v34 = a5[1] - v10;
    v35 = a5[2] - v12;
    v36 = sqrt(v34 * v34 + v33 * v33 + v35 * v35);
    if (fabs(v36) >= 2.22044605e-16)
    {
      *(_QWORD *)v480 = *(_QWORD *)a2;
      *(double *)&v480[8] = v10;
      v49 = v33 * (1.0 / v36);
      *(double *)&v480[16] = v12;
      *(double *)&v480[24] = v49;
      v50 = v34 * (1.0 / v36);
      v51 = v35 * (1.0 / v36);
      *(double *)&v481 = v50;
      *((double *)&v481 + 1) = v51;
      *(_QWORD *)&v482[0] = v482;
      *(_QWORD *)&v482[1] = v482;
      v483 = *(_OWORD *)a5;
      v52 = *((_QWORD *)a5 + 2);
      v482[2] = 0.0;
      v484 = v52;
      v488 = 0x300000001;
      v485 = 0x7FF8000000000000;
      v486 = &unk_1E25C6C20;
      v487 = xmmword_18D314670;
      v493 = 0x300000001;
      v489 = &v490;
      v491 = &unk_1E25C6C20;
      v492 = xmmword_18D314670;
      v494 = &v495;
      v496 = 1;
      sub_18D2638D8(a6, (__int128 *)v480);
      if (v496)
      {
        v491 = &unk_1E25C5E70;
        v486 = &unk_1E25C5E70;
        sub_18D1C5494(v482);
      }
      *(double *)(a6 + 96) = v36;
      *(_OWORD *)(a6 + 112) = xmmword_18D314670;
      v53 = *(double **)(a6 + 136);
      *v53 = -v49;
      v53[1] = -v50;
      v53[2] = -v51;
      *(_OWORD *)(a6 + 176) = xmmword_18D314670;
      v54 = *(double **)(a6 + 200);
      *v54 = v49;
      v54[1] = v50;
      v54[2] = v51;
    }
    else
    {
      *(_WORD *)v480 = 12;
      v459[0] = 4;
      v37 = *(_QWORD *)a3;
      v38 = *(double *)(a3 + 8);
      sub_18D181C54(a4);
      v346 = v38 + (double)v37;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v480, v459, "#nlos,time,%.3lf,zero distance to %s", v39, v40, v41, v42, v43, SLOBYTE(v346));
    }
    return;
  }
  v478 = 0;
  __p = 0;
  v479 = 0;
  sub_18D262624(&__p, v13 + 2);
  if (v13 >> 61)
    sub_18D07AFE4();
  v14 = (char *)sub_18D07BF3C(v13);
  v389 = v15;
  v16 = v14;
  v475 = 0;
  v474 = 0;
  v476 = 0;
  sub_18D262624(&v474, v13);
  v472 = 0;
  v471 = 0;
  v473 = 0;
  sub_18D262624(&v471, v13);
  if (v13 >> 60)
    sub_18D07AFE4();
  v371 = v13;
  v17 = (char *)sub_18D264038(v13);
  v385 = v23;
  v24 = v17;
  v25 = v478;
  if (v478 >= v479)
  {
    v44 = (double *)__p;
    v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v478 - (_BYTE *)__p) >> 3);
    v46 = v45 + 1;
    if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_18D07AFE4();
    if (0x5555555555555556 * (((char *)v479 - (_BYTE *)__p) >> 3) > v46)
      v46 = 0x5555555555555556 * (((char *)v479 - (_BYTE *)__p) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v479 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
      v47 = 0xAAAAAAAAAAAAAAALL;
    else
      v47 = v46;
    if (v47)
      v47 = (unint64_t)sub_18D263FF4(v47);
    else
      v48 = 0;
    v55 = (double *)(v47 + 24 * v45);
    *v55 = v11;
    v55[1] = v10;
    v55[2] = v12;
    v26 = v55 + 3;
    if (v25 != v44)
    {
      do
      {
        v56 = *(_OWORD *)(v25 - 3);
        *(v55 - 1) = *(v25 - 1);
        *(_OWORD *)(v55 - 3) = v56;
        v55 -= 3;
        v25 -= 3;
      }
      while (v25 != v44);
      v25 = v44;
    }
    __p = v55;
    v479 = (double *)(v47 + 24 * v48);
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v478 = v11;
    v25[1] = v10;
    v26 = v25 + 3;
    v25[2] = v12;
  }
  v478 = v26;
  v57 = *(_QWORD *)(a2 + 56);
  v58 = (double *)&unk_18D30B000;
  v378 = a2 + 48;
  v353 = v8;
  if (v57 != a2 + 48)
  {
    v59 = v16;
    v60 = v24;
    v61 = &v16[8 * v389];
    v390 = &v24[16 * (_QWORD)v385];
    while (1)
    {
      v386 = v60;
      v62 = *(_QWORD *)(v57 + 16);
      if (!v62)
      {
        *(_WORD *)v480 = 12;
        v459[0] = 4;
        v137 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v480, v459, "#nlos,time,%.3lf,reflecting facet pointer is null in %s", v18, v19, v20, v21, v22, SLOBYTE(v137));
LABEL_127:
        v60 = v386;
        goto LABEL_194;
      }
      if (v59 >= v61)
      {
        v63 = (v59 - v16) >> 3;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 61)
          sub_18D07AFE4();
        v65 = v61 - v16;
        v66 = (v61 - v16) >> 2;
        if (v66 > v64)
          v64 = v66;
        if (v65 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v64;
        if (v67)
          v67 = (unint64_t)sub_18D07BF3C(v67);
        else
          v68 = 0;
        v69 = (char *)(v67 + 8 * v63);
        *(_QWORD *)v69 = v62;
        v70 = v69 + 8;
        while (v59 != v16)
        {
          v71 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *((_QWORD *)v69 - 1) = v71;
          v69 -= 8;
        }
        v381 = v67 + 8 * v68;
        if (v16)
          operator delete(v16);
        v16 = v69;
        v59 = v70;
      }
      else
      {
        v381 = (unint64_t)v61;
        *(_QWORD *)v59 = v62;
        v59 += 8;
      }
      v72 = (*(double (**)(uint64_t))(*(_QWORD *)v62 + 72))(v62);
      v75 = v72;
      v76 = v73;
      v77 = v74;
      v78 = v475;
      if ((unint64_t)v475 >= v476)
      {
        v80 = (double *)v474;
        v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v475 - (_BYTE *)v474) >> 3);
        v82 = v81 + 1;
        if (v81 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        if (0x5555555555555556 * ((uint64_t)(v476 - (_QWORD)v474) >> 3) > v82)
          v82 = 0x5555555555555556 * ((uint64_t)(v476 - (_QWORD)v474) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v476 - (_QWORD)v474) >> 3) >= 0x555555555555555)
          v83 = 0xAAAAAAAAAAAAAAALL;
        else
          v83 = v82;
        if (v83)
          v83 = (unint64_t)sub_18D263FF4(v83);
        else
          v84 = 0;
        v85 = (double *)(v83 + 24 * v81);
        *v85 = v75;
        *((_QWORD *)v85 + 1) = v76;
        *((_QWORD *)v85 + 2) = v77;
        v86 = v85;
        if (v78 != v80)
        {
          do
          {
            v87 = *(_OWORD *)(v78 - 3);
            *(v86 - 1) = *(v78 - 1);
            *(_OWORD *)(v86 - 3) = v87;
            v86 -= 3;
            v78 -= 3;
          }
          while (v78 != v80);
          v78 = (double *)v474;
        }
        v79 = v85 + 3;
        v474 = v86;
        v476 = v83 + 24 * v84;
        if (v78)
          operator delete(v78);
      }
      else
      {
        *v475 = v72;
        *((_QWORD *)v78 + 1) = v73;
        v79 = v78 + 3;
        *((_QWORD *)v78 + 2) = v74;
      }
      v475 = v79;
      v93 = (*(double (**)(uint64_t))(*(_QWORD *)v62 + 80))(v62);
      v96 = v93;
      v97 = v94;
      v98 = v95;
      v99 = v472;
      if ((unint64_t)v472 >= v473)
      {
        v101 = (double *)v471;
        v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v472 - (_BYTE *)v471) >> 3);
        v103 = v102 + 1;
        if (v102 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        if (0x5555555555555556 * ((uint64_t)(v473 - (_QWORD)v471) >> 3) > v103)
          v103 = 0x5555555555555556 * ((uint64_t)(v473 - (_QWORD)v471) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v473 - (_QWORD)v471) >> 3) >= 0x555555555555555)
          v104 = 0xAAAAAAAAAAAAAAALL;
        else
          v104 = v103;
        if (v104)
          v104 = (unint64_t)sub_18D263FF4(v104);
        else
          v105 = 0;
        v106 = (double *)(v104 + 24 * v102);
        *v106 = v96;
        *((_QWORD *)v106 + 1) = v97;
        *((_QWORD *)v106 + 2) = v98;
        v107 = v106;
        if (v99 != v101)
        {
          do
          {
            v108 = *(_OWORD *)(v99 - 3);
            *(v107 - 1) = *(v99 - 1);
            *(_OWORD *)(v107 - 3) = v108;
            v107 -= 3;
            v99 -= 3;
          }
          while (v99 != v101);
          v99 = (double *)v471;
        }
        v100 = v106 + 3;
        v471 = v107;
        v473 = v104 + 24 * v105;
        if (v99)
          operator delete(v99);
      }
      else
      {
        *v472 = v93;
        *((_QWORD *)v99 + 1) = v94;
        v100 = v99 + 3;
        *((_QWORD *)v99 + 2) = v95;
      }
      v109 = *(double *)(v57 + 40);
      v110 = *(double *)(v57 + 48);
      *(_QWORD *)v480 = *(_QWORD *)(v57 + 32);
      *(double *)&v480[8] = v109;
      *(double *)&v480[16] = v110;
      v111 = v478;
      v112 = *(v478 - 2);
      v113 = *(double *)v480 - *(v478 - 3);
      v472 = v100;
      if (fabs((v109 - v112) * (v109 - v112) + v113 * v113 + (v110 - *(v478 - 1)) * (v110 - *(v478 - 1))) <= 0.000000015)
      {
        *(_WORD *)v459 = 12;
        LOBYTE(v454) = 4;
        v138 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v459, (unsigned __int8 *)&v454, "#nlos,time,%.3lf,duplicate point at index %lu found", v88, v89, v90, v91, v92, SLOBYTE(v138));
        goto LABEL_127;
      }
      if (v478 < v479)
      {
        v114 = *(_OWORD *)v480;
        v478[2] = *(double *)&v480[16];
        *v111 = v114;
        v115 = (double *)v111 + 3;
        goto LABEL_98;
      }
      v116 = __p;
      v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v478 - (_BYTE *)__p) >> 3);
      v118 = v117 + 1;
      if (v117 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_18D07AFE4();
      if (0x5555555555555556 * (((char *)v479 - (_BYTE *)__p) >> 3) > v118)
        v118 = 0x5555555555555556 * (((char *)v479 - (_BYTE *)__p) >> 3);
      v119 = (char *)(0xAAAAAAAAAAAAAAABLL * (((char *)v479 - (_BYTE *)__p) >> 3) >= 0x555555555555555
                    ? 0xAAAAAAAAAAAAAAALL
                    : v118);
      if (v119)
        v119 = (char *)sub_18D263FF4((unint64_t)v119);
      else
        v120 = 0;
      v121 = &v119[24 * v117];
      v122 = *(_OWORD *)v480;
      *((_QWORD *)v121 + 2) = *(_QWORD *)&v480[16];
      *(_OWORD *)v121 = v122;
      v115 = (double *)(v121 + 24);
      if (v111 == v116)
        break;
      do
      {
        v123 = *(_OWORD *)((char *)v111 - 24);
        *((_QWORD *)v121 - 1) = *((_QWORD *)v111 - 1);
        *(_OWORD *)(v121 - 24) = v123;
        v121 -= 24;
        v111 = (_OWORD *)((char *)v111 - 24);
      }
      while (v111 != v116);
      v111 = __p;
      __p = v121;
      v479 = (double *)&v119[24 * v120];
      if (v111)
        goto LABEL_97;
LABEL_98:
      v478 = v115;
      *(_QWORD *)v459 = (*(double (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 120))(v62, v480);
      *(_QWORD *)&v459[8] = v124;
      if (((*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 40))(v62, v459) & 1) == 0)
      {
        LOWORD(v454) = 12;
        LOBYTE(v449) = 4;
        v139 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
        v60 = v386;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v454, (unsigned __int8 *)&v449, "#nlos,time,%.3lf,initial facet-plane coords for k=%zu are not inside facet boundary", v18, v19, v20, v21, v22, SLOBYTE(v139));
        goto LABEL_194;
      }
      v60 = v386;
      if (v24 >= v390)
      {
        v125 = (v24 - v386) >> 4;
        v126 = v125 + 1;
        if ((unint64_t)(v125 + 1) >> 60)
          sub_18D07AFE4();
        if ((v390 - v386) >> 3 > v126)
          v126 = (v390 - v386) >> 3;
        if ((unint64_t)(v390 - v386) >= 0x7FFFFFFFFFFFFFF0)
          v127 = 0xFFFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        if (v127)
        {
          v127 = (unint64_t)sub_18D264038(v127);
          v60 = v386;
        }
        else
        {
          v128 = 0;
        }
        v129 = (_OWORD *)(v127 + 16 * v125);
        *v129 = *(_OWORD *)v459;
        if (v24 == v60)
        {
          v131 = (char *)(v127 + 16 * v125);
        }
        else
        {
          v130 = v127 + 16 * v125;
          do
          {
            v131 = (char *)(v130 - 16);
            *(_OWORD *)(v130 - 16) = *((_OWORD *)v24 - 1);
            v24 -= 16;
            v130 -= 16;
          }
          while (v24 != v60);
        }
        v390 = (char *)(v127 + 16 * v128);
        v24 = (char *)(v129 + 1);
        if (v60)
          operator delete(v60);
        v60 = v131;
      }
      else
      {
        *(_OWORD *)v24 = *(_OWORD *)v459;
        v24 += 16;
      }
      v61 = (char *)v381;
      v57 = *(_QWORD *)(v57 + 8);
      if (v57 == v378)
      {
        v26 = v478;
        v8 = v353;
        v58 = (double *)&unk_18D30B000;
        goto LABEL_121;
      }
    }
    __p = &v119[24 * v117];
    v479 = (double *)&v119[24 * v120];
LABEL_97:
    operator delete(v111);
    goto LABEL_98;
  }
  v60 = v24;
LABEL_121:
  v132 = v8[1] - *(v26 - 2);
  v133 = v8[2] - *(v26 - 1);
  v354 = v16;
  if (fabs(v132 * v132 + (*v8 - *(v26 - 3)) * (*v8 - *(v26 - 3)) + v133 * v133) <= v58[159])
  {
    *(_WORD *)v480 = 12;
    v459[0] = 4;
    v136 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v480, v459, "#nlos,time,%.3lf,target point is duplicated in %s", v18, v19, v20, v21, v22, SLOBYTE(v136));
    goto LABEL_194;
  }
  if (v26 < v479)
  {
    v134 = *(_OWORD *)v8;
    v26[2] = v8[2];
    *(_OWORD *)v26 = v134;
    v135 = v26 + 3;
    goto LABEL_144;
  }
  v140 = (double *)__p;
  v141 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (_BYTE *)__p) >> 3);
  v142 = v141 + 1;
  if (v141 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_18D07AFE4();
  if (0x5555555555555556 * (((char *)v479 - (_BYTE *)__p) >> 3) > v142)
    v142 = 0x5555555555555556 * (((char *)v479 - (_BYTE *)__p) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v479 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
    v143 = 0xAAAAAAAAAAAAAAALL;
  else
    v143 = v142;
  if (v143)
    v143 = (unint64_t)sub_18D263FF4(v143);
  else
    v144 = 0;
  v145 = (double *)(v143 + 24 * v141);
  v146 = *(_OWORD *)v8;
  v145[2] = v8[2];
  *(_OWORD *)v145 = v146;
  v135 = v145 + 3;
  if (v26 == v140)
  {
    __p = (void *)(v143 + 24 * v141);
    v478 = v145 + 3;
    v479 = (double *)(v143 + 24 * v144);
LABEL_143:
    operator delete(v26);
    goto LABEL_144;
  }
  do
  {
    v147 = *(_OWORD *)(v26 - 3);
    *(v145 - 1) = *(v26 - 1);
    *(_OWORD *)(v145 - 3) = v147;
    v145 -= 3;
    v26 -= 3;
  }
  while (v26 != v140);
  v26 = (double *)__p;
  __p = v145;
  v478 = v135;
  v479 = (double *)(v143 + 24 * v144);
  if (v26)
    goto LABEL_143;
LABEL_144:
  v478 = v135;
  memset(v470, 0, sizeof(v470));
  sub_18D262700((char **)v470, v371);
  v468 = 0;
  v467 = 0;
  v469 = 0;
  sub_18D262700((char **)&v467, v371);
  memset(v466, 0, sizeof(v466));
  sub_18D26287C(v466, v371);
  v464 = 0uLL;
  v465 = 0;
  if (v371 >= 0x492492492492493)
    sub_18D07AFE4();
  *(_QWORD *)&v481 = &v465;
  v148 = 56 * v371;
  v149 = (char *)operator new(56 * v371);
  v150 = 0;
  *(_QWORD *)&v480[24] = &v149[56 * v371];
  do
  {
    v151 = &v149[v150];
    *((_QWORD *)v151 + 3) = 0x100000002;
    *(_QWORD *)v151 = &unk_1E25C7520;
    *(_OWORD *)(v151 + 8) = xmmword_18D319330;
    *((_QWORD *)v151 + 4) = &v149[v150 + 40];
    v150 += 56;
  }
  while (v148 != v150);
  v152 = v464;
  *(_QWORD *)&v464 = v149;
  *((_QWORD *)&v464 + 1) = &v149[v148];
  *(_OWORD *)&v480[8] = v152;
  v153 = v465;
  v465 = *(_QWORD *)&v480[24];
  *(_QWORD *)&v480[24] = v153;
  *(_QWORD *)v480 = v152;
  sub_18D2640BC((uint64_t)v480);
  memset(v463, 0, sizeof(v463));
  sub_18D26287C(v463, v371);
  v460 = 0x300000002;
  *(_QWORD *)v459 = &off_1E25C7610;
  *(_OWORD *)&v459[8] = xmmword_18D335D90;
  v461 = (double *)&v462;
  v456 = 0x300000002;
  v454 = &off_1E25C7610;
  v455 = xmmword_18D335D90;
  v457 = (double *)&v458;
  v451 = 0x200000002;
  v449 = &unk_1E25C75B0;
  v450 = xmmword_18D319340;
  v452 = &v453;
  v446 = 0x300000001;
  v444 = &unk_1E25C6C20;
  v445 = xmmword_18D314670;
  v447 = (double *)&v448;
  v441 = 0x300000001;
  v439 = &unk_1E25C6C20;
  v440 = xmmword_18D314670;
  v442 = (double *)&v443;
  memset(v438, 0, sizeof(v438));
  sub_18D26287C(v438, v371);
  memset(v437, 0, sizeof(v437));
  sub_18D26287C(v437, v371);
  v349 = *(_DWORD *)(*(_QWORD *)a1 + 3576);
  v355 = *(double *)(*(_QWORD *)a1 + 3568) * *(double *)(*(_QWORD *)a1 + 3568);
  v369 = v371 - 1;
  v154 = (double *)__p;
  v155 = 1.0;
  v156 = 1;
  v351 = v12;
  v347 = v10;
  v348 = v11;
  while (2)
  {
    v350 = v156;
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v160 = v154[5] - v154[2];
    v161 = v154[3] - *v154;
    v162 = v154[4] - v154[1];
    v163 = v155 / sqrt(v162 * v162 + v161 * v161 + v160 * v160);
    v164 = v160 * v163;
    v165 = v162 * v163;
    v166 = v161 * v163;
    v167 = 24;
    v168 = 1.0;
    do
    {
      v169 = (double *)((char *)__p + v167);
      v170 = *(double *)((char *)__p + v167 + 24) - *(double *)((char *)__p + v167);
      v171 = *(double *)((char *)__p + v167 + 32) - *(double *)((char *)__p + v167 + 8);
      v172 = *(double *)((char *)__p + v167 + 40) - *(double *)((char *)__p + v167 + 16);
      v173 = v168 / sqrt(v171 * v171 + v170 * v170 + v172 * v172);
      v174 = (double *)((char *)v470[0] + v167);
      *(v174 - 3) = v166;
      *(v174 - 2) = v165;
      *(v174 - 1) = v164;
      v175 = (double *)((char *)v467 + v167);
      v382 = v171 * v173;
      v387 = v170 * v173;
      *(v175 - 3) = v170 * v173;
      *(v175 - 2) = v171 * v173;
      v379 = v172 * v173;
      *(v175 - 1) = v172 * v173;
      v181 = (*(double (**)(_QWORD))(**(_QWORD **)&v16[8 * v159] + 88))(*(_QWORD *)&v16[8 * v159]);
      v183 = v182;
      v185 = v184;
      v186 = v169[3] - *(v169 - 3);
      v187 = v169[4] - *(v169 - 2);
      v188 = v169[5] - *(v169 - 1);
      v189 = v183 * v188 - v185 * v187;
      v190 = v185 * v186 - v181 * v188;
      v191 = v181 * v187 - v183 * v186;
      v192 = sqrt(v190 * v190 + v189 * v189 + v191 * v191);
      if (fabs(v192) < 2.22044605e-16)
      {
        *(_WORD *)v480 = 12;
        LOBYTE(v430) = 4;
        v337 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v480, (unsigned __int8 *)&v430, "#nlos,time,%.3lf,f is null vector,k,%zu", v176, v177, v178, v179, v180, SLOBYTE(v337));
        goto LABEL_190;
      }
      v193 = v165 * (v163 * v183) + v163 * v181 * v166 + v163 * v185 * v164;
      v194 = v163 * v181 - v166 * v193;
      v195 = v163 * v183 - v165 * v193;
      v196 = v163 * v185 - v164 * v193;
      v197 = -v185;
      v198 = 1.0 / v192;
      v199 = v189 * (1.0 / v192);
      v200 = v190 * (1.0 / v192);
      v201 = v191 * v198;
      v202 = v165 * (v163 * v200) + v163 * v199 * v166 + v163 * (v191 * v198) * v164;
      v203 = v163 * v199 - v166 * v202;
      v204 = v163 * v200 - v165 * v202;
      v205 = v163 * (v191 * v198) - v164 * v202;
      v206 = (v166 - v387) * v198;
      v207 = (v165 - v382) * v198;
      v208 = (v164 - v379) * v198;
      v209 = v207 * v200 + v206 * v199 + v208 * v201;
      v210 = v206 - v199 * v209;
      v211 = v207 - v200 * v209;
      v212 = -v181;
      v213 = v208 - v201 * v209;
      v214 = -v183;
      *(_QWORD *)&v432 = 0x200000002;
      v430 = COERCE_DOUBLE(&unk_1E25C75B0);
      v431 = xmmword_18D319340;
      *((_QWORD *)&v432 + 1) = &v433;
      if (v159)
      {
        v433 = -(v195 * *(double *)((char *)v474 + v167 - 40)
               + v194 * *(double *)((char *)v474 + v167 - 48)
               + v196 * *(double *)((char *)v474 + v167 - 32));
        v435 = -(v195 * *(double *)((char *)v471 + v167 - 40)
               + v194 * *(double *)((char *)v471 + v167 - 48)
               + v196 * *(double *)((char *)v471 + v167 - 32));
        v215 = *(double *)((char *)v474 + v167 - 48);
        v434 = -(v204 * *(double *)((char *)v474 + v167 - 40)
               + v203 * v215
               + v205 * *(double *)((char *)v474 + v167 - 32))
             - (v211 * (*(double *)((char *)v474 + v167 - 32) * v212 + v185 * v215)
              + v210 * (*(double *)((char *)v474 + v167 - 40) * v197 + v183 * *(double *)((char *)v474 + v167 - 32))
              + v213 * (v215 * v214 + v181 * *(double *)((char *)v474 + v167 - 40)));
        v216 = *(double *)((char *)v471 + v167 - 48);
        v436 = -(v204 * *(double *)((char *)v471 + v167 - 40)
               + v203 * v216
               + v205 * *(double *)((char *)v471 + v167 - 32))
             - (v211 * (*(double *)((char *)v471 + v167 - 32) * v212 + v185 * v216)
              + v210 * (*(double *)((char *)v471 + v167 - 40) * v197 + v183 * *(double *)((char *)v471 + v167 - 32))
              + v213 * (v216 * v214 + v181 * *(double *)((char *)v471 + v167 - 40)));
      }
      v372 = v208 - v201 * v209;
      v374 = v211;
      v370 = v210;
      v217 = v382 * (v173 * v183) + v173 * v181 * v387 + v173 * v185 * v379;
      v218 = v173 * v181 - v387 * v217;
      v219 = v173 * v183 - v382 * v217;
      v220 = v173 * v185 - v379 * v217;
      v221 = v382 * (v173 * v200) + v173 * v199 * v387 + v173 * v201 * v379;
      *(_QWORD *)&v426[24] = 0x200000002;
      *(_QWORD *)v426 = &unk_1E25C75B0;
      *(_OWORD *)&v426[8] = xmmword_18D319340;
      *(_QWORD *)&v426[32] = &v426[40];
      v222 = (double *)((char *)v474 + v167);
      v223 = (double *)((char *)v471 + v167);
      v360 = v194;
      v361 = v195;
      v362 = v196;
      v363 = v218;
      v364 = v173 * v199 - v387 * v221;
      v365 = v219;
      v366 = v173 * v200 - v382 * v221;
      v367 = v220;
      *(double *)&v426[40] = (v195 - v219) * *(v222 - 2) + (v194 - v218) * *(v222 - 3) + (v196 - v220) * *(v222 - 1);
      v428 = (v195 - v219) * *(double *)((char *)v471 + v167 - 16)
           + (v194 - v218) * *(double *)((char *)v471 + v167 - 24)
           + (v196 - v220) * *(double *)((char *)v471 + v167 - 8);
      v358 = v203;
      v359 = v204;
      v368 = v173 * v201 - v379 * v221;
      v427 = (v204 + v366) * *(v222 - 2) + (v203 + v364) * *(v222 - 3) + (v205 + v368) * *(v222 - 1);
      v429 = (v204 + v366) * *(double *)((char *)v471 + v167 - 16)
           + (v203 + v364) * *(double *)((char *)v471 + v167 - 24)
           + (v205 + v368) * *(double *)((char *)v471 + v167 - 8);
      v508 = 0x200000002;
      *(_QWORD *)v507 = &unk_1E25C75B0;
      *(_OWORD *)&v507[8] = xmmword_18D319340;
      v509 = v510;
      if (v369 != v159)
      {
        v510[0] = v219 * v222[1] + v218 * *v222 + v220 * v222[2];
        v510[2] = v219 * v223[1] + v218 * *v223 + v220 * v223[2];
        v510[1] = v211 * (v222[2] * v212 + v185 * *v222)
                + v210 * (v222[1] * v197 + v183 * v222[2])
                + v372 * (*v222 * v214 + v181 * v222[1])
                - (v366 * v222[1]
                 + v364 * *v222
                 + v368 * v222[2]);
        v510[3] = v211 * (v223[2] * v212 + v185 * *v223)
                + v210 * (v223[1] * v197 + v183 * v223[2])
                + v372 * (*v223 * v214 + v181 * v223[1])
                - (v366 * v223[1]
                 + v364 * *v223
                 + v368 * v223[2]);
      }
      v423 = 0x100000002;
      v421 = &unk_1E25C7520;
      v422 = xmmword_18D319330;
      v424 = v425;
      v425[0] = -((v165 + v382) * v183 + v181 * (v166 + v387) + v185 * (v164 + v379));
      v425[1] = -((v165 - v382) * v200 + v199 * (v166 - v387) + v201 * (v164 - v379));
      v224 = v466[0] + v158;
      v225 = v464;
      if (v159)
      {
        *(_QWORD *)&v480[24] = 0x200000002;
        *(_QWORD *)v480 = &unk_1E25C75B0;
        *(_OWORD *)&v480[8] = xmmword_18D319340;
        *(_QWORD *)&v481 = (char *)&v481 + 8;
        sub_18D053B2C((uint64_t)&v430, v224 - 72, (uint64_t)v480);
        v227 = v372;
        v226 = v374;
        v418 = 0x200000002;
        v416 = &unk_1E25C75B0;
        v417 = xmmword_18D319340;
        v419 = v420;
        sub_18D0540FC((uint64_t)v426, (uint64_t)v480, (uint64_t)&v416);
        v228 = xmmword_18D319340;
      }
      else
      {
        sub_18D267634((uint64_t)&v416, (uint64_t)v426);
        v226 = v374;
        v228 = xmmword_18D319340;
        v227 = v372;
      }
      v413 = 0x200000002;
      v411 = &unk_1E25C75B0;
      v412 = v228;
      v414 = &v415;
      v504 = 0x100000002;
      v502 = &unk_1E25C7550;
      v503 = xmmword_18D319330;
      v505 = &v506;
      v499 = 0x100000002;
      v497 = &unk_1E25C7550;
      v498 = xmmword_18D319330;
      v500 = &v501;
      *(_QWORD *)&v480[24] = 0x100000008;
      *(_QWORD *)v480 = &unk_1E25C86C0;
      *(_OWORD *)&v480[8] = xmmword_18D319940;
      *(_QWORD *)&v481 = (char *)&v481 + 8;
      if (sub_18D054568((uint64_t)&v416, (uint64_t)&v502, (uint64_t)&v497, (uint64_t)v480, (uint64_t)&v411) > *(double *)(*(_QWORD *)a1 + 3536))
      {
        *(_WORD *)v480 = 12;
        LOBYTE(v502) = 4;
        v338 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v480, (unsigned __int8 *)&v502, "#nlos,time,%.3lf,condition number too large in Thomas algorithm,k,%zu,N,%zu,cond,%.1f", v229, v230, v231, v232, v233, SLOBYTE(v338));
        goto LABEL_190;
      }
      *(_QWORD *)&v480[24] = 0x200000002;
      *(_QWORD *)v480 = &unk_1E25C75B0;
      *(_OWORD *)&v480[8] = xmmword_18D319340;
      *(_QWORD *)&v481 = (char *)&v481 + 8;
      sub_18D053B2C((uint64_t)&v411, (uint64_t)v507, (uint64_t)v480);
      sub_18D053AA8(v224, (uint64_t)v480);
      if (v159)
      {
        v403 = 0x100000002;
        v401 = &unk_1E25C7520;
        v402 = xmmword_18D319330;
        v404 = &v405;
        sub_18D053B2C((uint64_t)&v430, v464 + v157 - 56, (uint64_t)&v401);
        v408 = 0x100000002;
        v406 = &unk_1E25C7520;
        v407 = xmmword_18D319330;
        v409 = &v410;
        sub_18D0540FC((uint64_t)&v421, (uint64_t)&v401, (uint64_t)&v406);
        *(_QWORD *)&v480[24] = 0x100000002;
        *(_QWORD *)v480 = &unk_1E25C7520;
        *(_OWORD *)&v480[8] = xmmword_18D319330;
        *(_QWORD *)&v481 = (char *)&v481 + 8;
        sub_18D053B2C((uint64_t)&v411, (uint64_t)&v406, (uint64_t)v480);
      }
      else
      {
        *(_QWORD *)&v480[24] = 0x100000002;
        *(_QWORD *)v480 = &unk_1E25C7520;
        *(_OWORD *)&v480[8] = xmmword_18D319330;
        *(_QWORD *)&v481 = (char *)&v481 + 8;
        sub_18D053B2C((uint64_t)&v411, (uint64_t)&v421, (uint64_t)v480);
      }
      sub_18D053AA8(v225 + v157, (uint64_t)v480);
      if (v159)
      {
        v234 = v463[0];
        v393 = 0x200000002;
        v391 = &unk_1E25C75B0;
        v392 = xmmword_18D319340;
        v394 = &v395;
        sub_18D054E78((uint64_t)&v411, (uint64_t)&v391);
        v398 = 0x200000002;
        v396 = &unk_1E25C75B0;
        v397 = xmmword_18D319340;
        v399 = &v400;
        sub_18D053B2C((uint64_t)&v391, (uint64_t)&v430, (uint64_t)&v396);
        *(_QWORD *)&v480[24] = 0x200000002;
        *(_QWORD *)v480 = &unk_1E25C75B0;
        *(_OWORD *)&v480[8] = xmmword_18D319340;
        *(_QWORD *)&v481 = (char *)&v481 + 8;
        sub_18D053B2C((uint64_t)&v396, v463[0] + v158 - 72, (uint64_t)v480);
      }
      else
      {
        v235 = v461;
        *v461 = v360;
        v236 = *(int *)&v459[20];
        v237 = &v235[*(int *)&v459[20]];
        *v237 = v361;
        v235[2 * v236] = v362;
        v235[1] = v358 + v226 * v185 - v227 * v183;
        v237[1] = v359 + v227 * v181 - v370 * v185;
        v235[(int)((2 * v236) | 1)] = v205 + v370 * v183 - v226 * v181;
        v234 = v463[0];
        sub_18D267634((uint64_t)v480, (uint64_t)&v411);
      }
      sub_18D053AA8(v234 + v158, (uint64_t)v480);
      if (v369 == v159)
      {
        v238 = v457;
        *v457 = -v363;
        v239 = SHIDWORD(v455);
        v240 = &v238[SHIDWORD(v455)];
        *v240 = -v365;
        v238[2 * v239] = -v367;
        v238[1] = v364 - (v226 * v185 - v227 * v183);
        v240[1] = v366 - (v227 * v181 - v370 * v185);
        v238[(int)((2 * v239) | 1)] = v368 - (v370 * v183 - v226 * v181);
        sub_18D053AA8((uint64_t)&v449, (uint64_t)&v411);
      }
      v241 = v159 + 2;
      ++v159;
      v167 += 24;
      v158 += 72;
      v157 += 56;
      v163 = v173;
      v164 = v379;
      v165 = v382;
      v166 = v387;
      v168 = 1.0;
    }
    while (v241 <= v371);
    v388 = v60;
    *(_QWORD *)&v426[24] = 0x100000002;
    *(_QWORD *)v426 = &unk_1E25C7520;
    *(_OWORD *)&v426[8] = xmmword_18D319330;
    *(_QWORD *)&v426[32] = &v426[40];
    v242 = 1;
    v243 = v371;
    do
    {
      if (v243 == v371)
      {
        v244 = v371 - 1;
        sub_18D053AA8((uint64_t)v426, v464 + 56 * v369);
      }
      else
      {
        v244 = v243 - 1;
        v245 = v464;
        *(_QWORD *)&v432 = 0x100000002;
        v430 = COERCE_DOUBLE(&unk_1E25C7520);
        v431 = xmmword_18D319330;
        *((_QWORD *)&v432 + 1) = &v433;
        sub_18D053B2C(v466[0] + 72 * (v243 - 1), (uint64_t)v426, (uint64_t)&v430);
        *(_QWORD *)&v480[24] = 0x100000002;
        *(_QWORD *)v480 = &unk_1E25C7520;
        *(_OWORD *)&v480[8] = xmmword_18D319330;
        *(_QWORD *)&v481 = (char *)&v481 + 8;
        sub_18D0540FC(v245 + 56 * (v243 - 1), (uint64_t)&v430, (uint64_t)v480);
        sub_18D053AA8((uint64_t)v426, (uint64_t)v480);
      }
      v246 = *(_QWORD *)&v426[32];
      v247 = **(double **)&v426[32] * **(double **)&v426[32]
           + *(double *)(*(_QWORD *)&v426[32] + 8) * *(double *)(*(_QWORD *)&v426[32] + 8) <= v355;
      v248 = (double *)&v388[16 * v244];
      v249 = v248[1];
      *v248 = **(double **)&v426[32] + *v248;
      v248[1] = v249 + *(double *)(v246 + 8);
      v250 = (cnprint::CNPrinter *)(*(uint64_t (**)(_QWORD, double *))(**(_QWORD **)&v16[8 * v244] + 40))(*(_QWORD *)&v16[8 * v244], v248);
      if ((v250 & 1) == 0)
      {
        v60 = v388;
        if (cnprint::CNPrinter::GetLogLevel(v250) <= 1)
        {
          *(_WORD *)v480 = 12;
          LOBYTE(v430) = 1;
          v344 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v480, (unsigned __int8 *)&v430, "#nlos,time,%.3lf,updated facet-plane coords for k=%zu are not inside facet boundary, N=%zu", v339, v340, v341, v342, v343, SLOBYTE(v344));
        }
        goto LABEL_190;
      }
      v251 = v242;
      v383 = v247;
      v252 = *(_QWORD *)&v16[8 * v244];
      v253 = (*(double (**)(uint64_t))(*(_QWORD *)v252 + 48))(v252);
      v255 = v254;
      v257 = v256;
      v258 = (*(double (**)(uint64_t))(*(_QWORD *)v252 + 72))(v252);
      v260 = v259;
      v262 = v261;
      v263 = *v248;
      v264 = (*(double (**)(uint64_t))(*(_QWORD *)v252 + 80))(v252);
      v265 = v248[1];
      v154 = (double *)__p;
      v268 = (double *)((char *)__p + 24 * v243);
      *v268 = v253 + v258 * v263 + v264 * v265;
      v268[1] = v255 + v260 * v263 + v266 * v265;
      v268[2] = v257 + v262 * v263 + v267 * v265;
      v269 = v463[0] + 72 * v244;
      v270 = v438[0] + 72 * v244;
      v271 = v437[0];
      v272 = v437[0] + 72 * v244;
      if (v243 == v371)
      {
        sub_18D053AA8(v438[0] + 72 * v244, v463[0] + 72 * v244);
        v273 = v251;
        sub_18D053AA8(v272, (uint64_t)&v449);
      }
      else
      {
        v279 = v466[0] + 72 * v244;
        v280 = 9 * v243;
        *(_QWORD *)&v432 = 0x200000002;
        v430 = COERCE_DOUBLE(&unk_1E25C75B0);
        v431 = xmmword_18D319340;
        *((_QWORD *)&v432 + 1) = &v433;
        sub_18D053B2C(v279, v438[0] + 8 * v280, (uint64_t)&v430);
        *(_QWORD *)&v480[24] = 0x200000002;
        *(_QWORD *)v480 = &unk_1E25C75B0;
        *(_OWORD *)&v480[8] = xmmword_18D319340;
        *(_QWORD *)&v481 = (char *)&v481 + 8;
        sub_18D0540FC(v269, (uint64_t)&v430, (uint64_t)v480);
        sub_18D053AA8(v270, (uint64_t)v480);
        *(_QWORD *)&v432 = 0x200000002;
        v430 = COERCE_DOUBLE(&unk_1E25C75B0);
        v431 = xmmword_18D319340;
        *((_QWORD *)&v432 + 1) = &v433;
        sub_18D054E78(v279, (uint64_t)&v430);
        *(_QWORD *)&v480[24] = 0x200000002;
        *(_QWORD *)v480 = &unk_1E25C75B0;
        *(_OWORD *)&v480[8] = xmmword_18D319340;
        *(_QWORD *)&v481 = (char *)&v481 + 8;
        v16 = v354;
        sub_18D053B2C((uint64_t)&v430, v271 + 8 * v280, (uint64_t)v480);
        sub_18D053AA8(v272, (uint64_t)v480);
        v273 = v251;
      }
      v242 = v383 & v273;
      v243 = v244;
    }
    while (v244);
    v156 = v350 + 1;
    if (v350 > v349)
      v281 = 1;
    else
      v281 = v242;
    v60 = v388;
    v155 = 1.0;
    if (v281 != 1)
      continue;
    break;
  }
  if ((v242 & 1) != 0)
  {
    v282 = *v154;
    v283 = v154[1];
    v284 = v154[4];
    v285 = v154[5];
    v287 = v154[2];
    v286 = v154[3];
    *(_QWORD *)&v432 = 0x200000001;
    v430 = COERCE_DOUBLE(&unk_1E25C6BC0);
    *((_QWORD *)&v432 + 1) = &v433;
    v431 = xmmword_18D319920;
    sub_18D04BE88((uint64_t)&v430, 0.0);
    sub_18D2678AC((uint64_t)v426, (uint64_t)&v430);
    v288 = v154;
    v289 = 0;
    v290 = 0;
    v291 = v284 - v283;
    v292 = 1.0 / sqrt(v291 * v291 + (v286 - v282) * (v286 - v282) + (v285 - v287) * (v285 - v287));
    v293 = (v285 - v287) * v292;
    v294 = v291 * v292;
    v295 = (v286 - v282) * v292;
    v380 = v154;
    v384 = (double *)v470[0];
    v296 = v467;
    v377 = (char *)v467 + 16;
    v375 = (char *)v474 + 16;
    v376 = v288 + 8;
    v373 = (char *)v471 + 16;
    v297 = 1;
    v298 = xmmword_18D319920;
    do
    {
      v299 = &v384[v290];
      *v299 = v295;
      v299[1] = v294;
      v299[2] = v293;
      v300 = v376[v290 - 2] - v376[v290 - 5];
      v301 = v376[v290 - 1] - v376[v290 - 4];
      v302 = v376[v290] - v376[v290 - 3];
      v303 = 1.0 / sqrt(v301 * v301 + v300 * v300 + v302 * v302);
      v295 = v300 * v303;
      v294 = v301 * v303;
      v293 = v302 * v303;
      v304 = (double *)&v377[v290 * 8];
      *(v304 - 2) = v300 * v303;
      *(v304 - 1) = v301 * v303;
      *v304 = v302 * v303;
      v305 = v437[0];
      v306 = v384[v290] - v300 * v303;
      v307 = v384[v290 + 1] - v301 * v303;
      v308 = v384[v290 + 2] - v302 * v303;
      *(_QWORD *)&v480[24] = 0x200000001;
      *(_QWORD *)v480 = &unk_1E25C6BC0;
      *(_OWORD *)&v480[8] = v298;
      *(_QWORD *)&v481 = (char *)&v481 + 8;
      *((double *)&v481 + 1) = v307 * *(double *)&v375[v290 * 8 - 8]
                             + v306 * *(double *)&v375[v290 * 8 - 16]
                             + v308 * *(double *)&v375[v290 * 8];
      v482[0] = v307 * *(double *)&v373[v290 * 8 - 8]
              + v306 * *(double *)&v373[v290 * 8 - 16]
              + v308 * *(double *)&v373[v290 * 8];
      v418 = 0x200000001;
      v416 = &unk_1E25C6BC0;
      v417 = v298;
      v419 = v420;
      sub_18D053B2C((uint64_t)v480, v438[0] + v289, (uint64_t)&v416);
      v508 = 0x200000001;
      *(_QWORD *)v507 = &unk_1E25C6BC0;
      *(_OWORD *)&v507[8] = xmmword_18D319920;
      v509 = v510;
      sub_18D053FA4((uint64_t)&v430, (uint64_t)&v416, (uint64_t)v507);
      sub_18D053AA8((uint64_t)&v430, (uint64_t)v507);
      v418 = 0x200000001;
      v416 = &unk_1E25C6BC0;
      v417 = xmmword_18D319920;
      v419 = v420;
      sub_18D053B2C((uint64_t)v480, v305 + v289, (uint64_t)&v416);
      v508 = 0x200000001;
      *(_QWORD *)v507 = &unk_1E25C6BC0;
      *(_OWORD *)&v507[8] = xmmword_18D319920;
      v509 = v510;
      sub_18D053FA4((uint64_t)v426, (uint64_t)&v416, (uint64_t)v507);
      sub_18D053AA8((uint64_t)v426, (uint64_t)v507);
      ++v297;
      v290 += 3;
      v289 += 72;
      v298 = xmmword_18D319920;
    }
    while (v297 <= v371);
    sub_18D262AFC((uint64_t)v480, (uint64_t)&v430, (uint64_t)v459);
    v60 = v388;
    sub_18D053AA8((uint64_t)&v444, (uint64_t)v480);
    sub_18D262AFC((uint64_t)v480, (uint64_t)v426, (uint64_t)&v454);
    sub_18D053AA8((uint64_t)&v439, (uint64_t)v480);
    v309 = 0.0;
    v310 = v447;
    *v447 = *v447 - *v384;
    v311 = SHIDWORD(v445);
    v310[SHIDWORD(v445)] = v310[SHIDWORD(v445)] - v384[1];
    v310[2 * v311] = v310[2 * v311] - v384[2];
    v312 = (double *)&v296[3 * v369];
    v313 = v442;
    *v442 = *v312 + *v442;
    v314 = SHIDWORD(v440);
    v313[SHIDWORD(v440)] = v312[1] + v313[SHIDWORD(v440)];
    v313[2 * v314] = v312[2] + v313[2 * v314];
    *(_OWORD *)v507 = *(_OWORD *)v384;
    *(double *)&v507[16] = v384[2];
    v430 = v348;
    *(double *)&v431 = v347;
    *((double *)&v431 + 1) = v351;
    v432 = *(_OWORD *)v507;
    v433 = *(double *)&v507[16];
    v434 = COERCE_DOUBLE(&v434);
    v435 = COERCE_DOUBLE(&v434);
    v436 = 0.0;
    v315 = v380 + 3;
    v316 = 0.0;
    v317 = &v434;
    do
    {
      v318 = *(_QWORD *)&v16[8 * *(_QWORD *)&v309];
      v319 = *v315;
      v320 = v315[1];
      v322 = *(v315 - 3);
      v321 = *(v315 - 2);
      v324 = *(v315 - 1);
      *(double *)&v426[16] = v315[2];
      v323 = *(double *)&v426[16];
      *(_OWORD *)v426 = *(_OWORD *)v315;
      *(_OWORD *)&v426[24] = *(_OWORD *)v296;
      *(_QWORD *)&v426[40] = v296[2];
      *(_OWORD *)&v480[16] = *(_OWORD *)&v426[16];
      v481 = *(_OWORD *)&v426[32];
      *(_OWORD *)v480 = *(_OWORD *)v426;
      v325 = COERCE_DOUBLE(operator new(0x50uLL));
      *(_QWORD *)(*(_QWORD *)&v325 + 8) = &v434;
      *(_QWORD *)(*(_QWORD *)&v325 + 16) = v318;
      v326 = sqrt((v320 - v321) * (v320 - v321) + (v319 - v322) * (v319 - v322) + (v323 - v324) * (v323 - v324));
      *(double *)(*(_QWORD *)&v325 + 24) = v326;
      v327 = *(_OWORD *)&v480[16];
      *(_OWORD *)(*(_QWORD *)&v325 + 32) = *(_OWORD *)v480;
      *(_OWORD *)(*(_QWORD *)&v325 + 48) = v327;
      *(_OWORD *)(*(_QWORD *)&v325 + 64) = v481;
      **(_QWORD **)&v325 = v317;
      v317[1] = v325;
      v328 = *(_QWORD *)&v309 + 2;
      ++*(_QWORD *)&v309;
      v434 = v325;
      v436 = v309;
      v315 += 3;
      v316 = v316 + v326;
      v296 += 3;
      v317 = *(double **)&v325;
    }
    while (v328 <= v371);
    v329 = &v380[3 * v371];
    v331 = v329[1];
    v330 = v329[2];
    v332 = *v329;
    v333 = *v353;
    v334 = v353[1];
    v335 = v353[2];
    sub_18D26410C((uint64_t)v480, (__int128 *)&v430, (uint64_t)v353);
    v496 = 1;
    sub_18D2638D8(a6, (__int128 *)v480);
    v336 = v316 + sqrt((v334 - v331) * (v334 - v331) + (v333 - v332) * (v333 - v332) + (v335 - v330) * (v335 - v330));
    if (v496)
    {
      v491 = &unk_1E25C5E70;
      v486 = &unk_1E25C5E70;
      sub_18D1C5494(v482);
    }
    *(double *)(a6 + 96) = v336;
    sub_18D053AA8(a6 + 104, (uint64_t)&v444);
    sub_18D053AA8(a6 + 168, (uint64_t)&v439);
    sub_18D1C5494(&v434);
  }
  else
  {
    *(_WORD *)v480 = 12;
    LOBYTE(v430) = 3;
    v345 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v480, (unsigned __int8 *)&v430, "#nlos,time,%.3lf,failed to converge in %u iterations", v274, v275, v276, v277, v278, SLOBYTE(v345));
  }
LABEL_190:
  *(_QWORD *)v480 = v437;
  sub_18D2641A0((void ***)v480);
  *(_QWORD *)v480 = v438;
  sub_18D2641A0((void ***)v480);
  *(_QWORD *)v480 = v463;
  sub_18D2641A0((void ***)v480);
  *(_QWORD *)v480 = &v464;
  sub_18D26422C((void ***)v480);
  *(_QWORD *)v480 = v466;
  sub_18D2641A0((void ***)v480);
  if (v467)
  {
    v468 = v467;
    operator delete(v467);
  }
  if (v470[0])
    operator delete(v470[0]);
LABEL_194:
  if (v60)
    operator delete(v60);
  if (v471)
    operator delete(v471);
  if (v474)
    operator delete(v474);
  if (v16)
    operator delete(v16);
  if (__p)
    operator delete(__p);
}

void sub_18D262038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  _QWORD *v68;

  if (LOBYTE(STACK[0x7A8]))
  {
    STACK[0x768] = (unint64_t)&unk_1E25C5E70;
    STACK[0x728] = (unint64_t)&unk_1E25C5E70;
    sub_18D1C5494(&STACK[0x6F0]);
  }
  sub_18D1C5494(v68);
  STACK[0x6C0] = (unint64_t)&STACK[0x450];
  sub_18D2641A0((void ***)&STACK[0x6C0]);
  STACK[0x6C0] = (unint64_t)&STACK[0x468];
  sub_18D2641A0((void ***)&STACK[0x6C0]);
  STACK[0x6C0] = (unint64_t)&STACK[0x5F8];
  sub_18D2641A0((void ***)&STACK[0x6C0]);
  STACK[0x5A0] = (unint64_t)&STACK[0x610];
  sub_18D26422C((void ***)&STACK[0x5A0]);
  STACK[0x5A0] = (unint64_t)&STACK[0x630];
  sub_18D2641A0((void ***)&STACK[0x5A0]);
  if (STACK[0x648])
    operator delete((void *)STACK[0x648]);
  if (STACK[0x660])
    operator delete((void *)STACK[0x660]);
  if (a68)
    operator delete(a68);
  if (STACK[0x678])
    operator delete((void *)STACK[0x678]);
  if (STACK[0x690])
    operator delete((void *)STACK[0x690]);
  if (a21)
    operator delete(a21);
  if (STACK[0x6A8])
    operator delete((void *)STACK[0x6A8]);
  if (*(_BYTE *)(a19 + 232))
  {
    *(_QWORD *)(a19 + 168) = &unk_1E25C5E70;
    *(_QWORD *)(a19 + 104) = &unk_1E25C5E70;
    sub_18D1C5494((_QWORD *)(a19 + 48));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_18D262304(uint64_t *a1)
{
  void *v2;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = (uint64_t)v2;
    operator delete(v2);
  }
  sub_18D1C5494(a1 + 6);
  sub_18D262FEC(a1);
  return a1;
}

uint64_t sub_18D262344(uint64_t result, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)();
  __int128 v45;
  _QWORD v46[4];
  __int128 v47;
  uint64_t v48;
  uint64_t (**v49)();
  _BYTE v50[24];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  *(_OWORD *)(result + 32) = *((_OWORD *)a2 + 2);
  v6 = result + 48;
  *(_QWORD *)(result + 48) = result + 48;
  *(_QWORD *)(result + 56) = result + 48;
  *(_QWORD *)(result + 64) = 0;
  if (a4)
  {
    v10 = result;
    v48 = -1;
    v11 = *((_OWORD *)a2 + 1);
    v37 = *(_OWORD *)a2;
    v38 = v11;
    v39 = *((_OWORD *)a2 + 2);
    v36[0] = &off_1E25C0F10;
    v36[1] = a3;
    v43 = a5;
    v44 = &off_1E25C0E10;
    v40 = 0;
    *(double *)&v41 = INFINITY;
    v42 = 0;
    v49 = &off_1E25C0E10;
    *(_QWORD *)v50 = a3;
    *(_OWORD *)&v50[8] = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0;
    v54 = -1;
    v47 = 0u;
    v45 = *(_OWORD *)v50;
    memset(v46, 0, sizeof(v46));
    sub_18D264A9C(v46, (uint64_t)&v50[16]);
    v48 = v54;
    v49 = &off_1E25C0E10;
    sub_18D26495C((uint64_t)&v50[16]);
    sub_18D2646AC(&v44);
    while (*((_QWORD *)&v47 + 1))
    {
      (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)&v45 + 1) + 16))(*((_QWORD *)&v45 + 1), v36);
      sub_18D2647A8(&v44);
    }
    v12 = v42;
    if (v42)
    {
      v13 = *(double *)&v41;
      v14 = *((double *)&v38 + 1);
      v34 = *((double *)&v39 + 1);
      v35 = *(double *)&v39;
      v32 = *((double *)&v37 + 1);
      v33 = *(double *)&v37;
      v31 = *(double *)&v38;
      v15 = (*(double (**)(uint64_t))(*(_QWORD *)v42 + 88))(v42);
      v17 = v16;
      v19 = v18;
      v20 = a2[3];
      v21 = a2[4];
      v22 = a2[5];
      v23 = (double *)operator new(0x50uLL);
      v24 = v17 * v21 + v20 * v15 + v22 * v19;
      v25 = v24 + v24;
      *((_QWORD *)v23 + 1) = v6;
      *((_QWORD *)v23 + 2) = v12;
      v23[3] = v13;
      v23[4] = v13 * v14 + v33;
      v23[5] = v13 * v35 + v32;
      v23[6] = v13 * v34 + v31;
      v23[7] = v20 - v15 * v25;
      v23[8] = v21 - v17 * v25;
      v23[9] = v22 - v19 * v25;
      v26 = *(_QWORD *)(v10 + 48);
      *(_QWORD *)v23 = v26;
      *(_QWORD *)(v26 + 8) = v23;
      *(_QWORD *)(v10 + 48) = v23;
      ++*(_QWORD *)(v10 + 64);
      sub_18D262344(&v49, v23 + 4, a3, a4 - 1, v42);
      v27 = v53;
      if (v53)
      {
        v28 = v52;
        v29 = **((_QWORD **)&v52 + 1);
        *(_QWORD *)(v29 + 8) = *(_QWORD *)(v52 + 8);
        **(_QWORD **)(v28 + 8) = v29;
        v30 = *(_QWORD *)(v10 + 48);
        *(_QWORD *)(v30 + 8) = *((_QWORD *)&v28 + 1);
        **((_QWORD **)&v28 + 1) = v30;
        *(_QWORD *)(v10 + 48) = v28;
        *(_QWORD *)(v28 + 8) = v6;
        *(_QWORD *)(v10 + 64) += v27;
        v53 = 0;
      }
      sub_18D1C5494(&v52);
    }
    v36[0] = &off_1E25C0F10;
    v44 = &off_1E25C0E10;
    return sub_18D26495C((uint64_t)v46);
  }
  return result;
}

void sub_18D2625F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_18D26495C(v2);
  sub_18D1C5494(v1);
  _Unwind_Resume(a1);
}

void sub_18D262624(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_18D07AFE4();
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v4 = (char *)sub_18D263FF4(a2);
    v5 = &v4[24 * v3];
    v7 = &v4[24 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v8 -= 24;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void sub_18D262700(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  size_t v21;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[24 * a2];
    goto LABEL_17;
  }
  v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
  {
    v21 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(a1[1], v21);
    v20 = &v4[v21];
LABEL_17:
    a1[1] = v20;
    return;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL)
    sub_18D07AFE4();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v9;
  v11 = (char *)sub_18D263FF4(v10);
  v12 = &v11[24 * v5];
  v14 = &v11[24 * v13];
  v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
  bzero(v12, v15);
  v16 = &v12[v15];
  v18 = *a1;
  v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      v19 = *(_OWORD *)(v17 - 24);
      *((_QWORD *)v12 - 1) = *((_QWORD *)v17 - 1);
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      v17 -= 24;
    }
    while (v17 != v18);
    v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
    operator delete(v17);
}

_QWORD *sub_18D26287C(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  uint64_t (***v4)(_QWORD);
  uint64_t (***v5)(_QWORD);
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (***v20)(_QWORD);
  uint64_t (***v21)(_QWORD);
  uint64_t (***v22)(_QWORD);
  uint64_t (**v23)(_QWORD);
  BOOL v24;
  uint64_t (***v25)(_QWORD);
  uint64_t v26;
  uint64_t (***v27)(_QWORD);
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  _BYTE v32[24];
  _QWORD *v33;

  v3 = result;
  v5 = (uint64_t (***)(_QWORD))*result;
  v4 = (uint64_t (***)(_QWORD))result[1];
  v6 = 0x8E38E38E38E38E39 * (((uint64_t)v4 - *result) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v20 = &v5[9 * a2];
      if (v4 != v20)
      {
        v21 = v4 - 9;
        v22 = v4 - 9;
        do
        {
          v23 = *v22;
          v22 -= 9;
          result = (_QWORD *)(*v23)(v21);
          v24 = v21 == v20;
          v21 = v22;
        }
        while (!v24);
      }
      v3[1] = v20;
    }
  }
  else
  {
    v8 = result[2];
    if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)v4) >> 3) >= v7)
    {
      v25 = &v4[9 * v7];
      v26 = 72 * a2 - 8 * (((uint64_t)v4 - *result) >> 3);
      v27 = v4 + 5;
      do
      {
        *(v27 - 2) = (uint64_t (**)(_QWORD))0x200000002;
        *(v27 - 5) = (uint64_t (**)(_QWORD))&unk_1E25C75B0;
        *((_OWORD *)v27 - 2) = xmmword_18D319340;
        *(v27 - 1) = (uint64_t (**)(_QWORD))v27;
        v27 += 9;
        v26 -= 72;
      }
      while (v26);
      result[1] = v25;
    }
    else
    {
      if (a2 > 0x38E38E38E38E38ELL)
        sub_18D07AFE4();
      v9 = 0x8E38E38E38E38E39 * ((v8 - (uint64_t)v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x1C71C71C71C71C7)
        v11 = 0x38E38E38E38E38ELL;
      else
        v11 = v10;
      v33 = result + 2;
      if (v11 > 0x38E38E38E38E38ELL)
        sub_18D0788A0();
      v12 = 9 * v11;
      v13 = (char *)operator new(72 * v11);
      v14 = 9 * v6;
      v15 = &v13[72 * v6];
      v31 = v13;
      *(_QWORD *)v32 = v15;
      *(_QWORD *)&v32[16] = &v13[8 * v12];
      v16 = v15 + 40;
      v17 = &v13[72 * a2];
      v18 = 72 * a2 - 8 * v14;
      do
      {
        *((_QWORD *)v16 - 2) = 0x200000002;
        *((_QWORD *)v16 - 5) = &unk_1E25C75B0;
        *((_OWORD *)v16 - 2) = xmmword_18D319340;
        *((_QWORD *)v16 - 1) = v16;
        v16 += 72;
        v18 -= 72;
      }
      while (v18);
      v19 = 0;
      *(_QWORD *)&v32[8] = v17;
      while (&v4[v19] != v5)
      {
        v19 -= 9;
        sub_18D267634((uint64_t)&v15[v19 * 8], (uint64_t)&v4[v19]);
      }
      v28 = v3[2];
      v29 = *(_OWORD *)&v32[8];
      v30 = *(_OWORD *)v3;
      *v3 = &v15[v19 * 8];
      *(_OWORD *)v32 = v30;
      *(_OWORD *)(v3 + 1) = v29;
      *(_QWORD *)&v32[16] = v28;
      v31 = (char *)v30;
      return (_QWORD *)sub_18D26406C((uint64_t)&v31);
    }
  }
  return result;
}

_QWORD *sub_18D262AE8(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D262AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x300000001;
  *(_QWORD *)a1 = &unk_1E25C6C20;
  *(_OWORD *)(a1 + 8) = xmmword_18D314670;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D262B58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D262B6C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D262B80(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *result = result;
  result[1] = result;
  result[2] = 0;
  v2 = a2 + 48;
  v3 = *(_QWORD *)(a2 + 56);
  if (v3 != a2 + 48)
  {
    v4 = result;
    v5 = 1;
    v6 = result;
    do
    {
      result = operator new(0x18uLL);
      v7 = *(_QWORD *)(v3 + 16);
      result[1] = v4;
      result[2] = v7;
      *result = v6;
      v6[1] = result;
      *v4 = result;
      v4[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = result;
    }
    while (v3 != v2);
  }
  return result;
}

void sub_18D262C00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_18D1C5494(v1);
  _Unwind_Resume(a1);
}

void sub_18D262C14(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = a2[1];
  v9 = *a2;
  v10 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_18D1893E8((_QWORD *)(a1 + 184), &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(int64x2_t *)(a1 + 168) = vdupq_n_s64(0x7FF8000000000000uLL);
  if (*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a1 + 160))
  {
    *(_QWORD *)(a1 + 32) = off_1E25B9B80;
    *(_QWORD *)(a1 + 48) = &unk_1E25C5E70;
    *(_BYTE *)(a1 + 160) = 0;
  }
}

_QWORD *sub_18D262CE0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E25C0F58;
  a1[7] = &off_1E25C0E10;
  sub_18D26495C((uint64_t)(a1 + 10));
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_18D262D30(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        sub_18D262DA8((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18D262DA8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_18D262DA8(a1, *a2);
    sub_18D262DA8(a1, a2[1]);
    sub_18D262DF0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_18D262DF0(uint64_t a1)
{
  *(_QWORD *)(a1 + 200) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 136) = &unk_1E25C5E70;
  sub_18D1C5494((_QWORD *)(a1 + 80));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_18D262E40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CD080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D262E50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CD080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D262E88(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 128))
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    sub_18D053AA8(a1 + 16, a2 + 16);
  }
  else
  {
    *(_QWORD *)a1 = off_1E25B9B80;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    sub_18D159B20(a1 + 16, a2 + 16);
    *(_QWORD *)a1 = &off_1E25B9560;
    *(_BYTE *)(a1 + 128) = 1;
  }
  return a1;
}

void sub_18D262F04(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E25B8B78;
  sub_18D05B5E4(*(_QWORD **)(a1 + 48));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D262F48(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 16) = 0;
  if (*(_BYTE *)(result + 32))
    *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t sub_18D262F64(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 16) = 0;
  if (*(_BYTE *)(result + 32))
    *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t sub_18D262F80(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 16) = 0;
  if (*(_BYTE *)(result + 32))
    *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t sub_18D262F9C(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 16) = 0;
  if (*(_BYTE *)(result + 32))
    *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t sub_18D262FB8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(result + 16) = 1;
  v2 = *(_QWORD *)(a2 + 96);
  if (v2)
  {
    *(_QWORD *)(result + 24) = v2;
    *(_BYTE *)(result + 32) = 1;
  }
  else if (*(_BYTE *)(result + 32))
  {
    *(_BYTE *)(result + 32) = 0;
  }
  return result;
}

void sub_18D262FEC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_18D1C5494(v3 + 8);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_18D26305C(float64x2_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  float64x2_t *v8;
  float64x2_t *v9;
  float64x2_t *v10;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  unint64_t v21;
  float64x2_t *v22;
  double *v23;
  float64x2_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float64x2_t *v32;
  char *v33;
  __int128 v34;
  __n128 v35;
  double v36;
  double v37;
  uint64_t *v38;
  double v39;
  double v40;
  float64x2_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  unint64_t v47;
  double *v48;
  float64x2_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  double *v55;
  double *v56;
  double *v57;
  double *v58;
  uint64_t v59;
  double *v60;
  double v61;
  char v62;
  double v63;
  uint64_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  uint64_t v70;
  __int128 v71;
  float64_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  float64x2_t *v86;
  double v87;
  unint64_t v88;
  _QWORD *i;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  float64x2_t v93;
  float64x2_t v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  char v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char v112;
  _QWORD v113[2];
  float64x2_t v114;
  __int128 v115;
  __int128 v116;
  int v117;
  char v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  _QWORD *f64;
  _QWORD *v123;
  uint64_t v124;
  float64x2_t v125;
  _BYTE v126[32];
  float64x2_t *v127;
  float64x2_t *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = (unint64_t)a1[8];
    if (v4 < *((unsigned int *)a1 + 18))
    {
      v6 = a2;
      v7 = (uint64_t *)(a1 + 6);
      v8 = (float64x2_t *)operator new(0x18uLL);
      *(_QWORD *)&v8->f64[1] = v7;
      *(_QWORD *)&v8[1].f64[0] = v6;
      v9 = a1[6];
      *(_QWORD *)&v8->f64[0] = v9;
      *(_QWORD *)&v9->f64[1] = v8;
      a1[6] = v8;
      a1[8] = (float64x2_t *)(v4 + 1);
      LOBYTE(v99.f64[0]) = 0;
      v105 = 0;
      a1[11] = a1[10];
      (*(void (**)(float64x2_t **__return_ptr))(**(_QWORD **)&v8[1].f64[0] + 96))(&v127);
      v10 = v127;
      __asm { FMOV            V2.2D, #0.5 }
      v16 = vsubq_f64(vmulq_f64(vaddq_f64(*v10, v10[3]), _Q2), *(float64x2_t *)(a1 + 13));
      v17 = (v10[1].f64[0] + v10[4].f64[0]) * 0.5 - *((double *)a1 + 15);
      v18 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v16, v16).f64[1]), v16.f64[0], v16.f64[0]) + v17 * v17);
      if (fabs(v18) >= 2.22044605e-16)
      {
        v95 = 1.0 / v18;
        v97 = vmulq_n_f64(v16, 1.0 / v18);
        v19 = vnegq_f64(v97);
        v20 = -(v17 * (1.0 / v18));
        v22 = a1[11];
        v21 = (unint64_t)a1[12];
        if ((unint64_t)v22 >= v21)
        {
          v93 = v19;
          v24 = a1[10];
          v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v24) >> 3);
          v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_18D07AFE4();
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v24) >> 3);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x555555555555555)
            v28 = 0xAAAAAAAAAAAAAAALL;
          else
            v28 = v26;
          if (v28)
            v28 = (unint64_t)sub_18D263FF4(v28);
          else
            v29 = 0;
          v30 = v28 + 24 * v25;
          v31 = v28 + 24 * v29;
          *(float64x2_t *)v30 = v93;
          *(double *)(v30 + 16) = v20;
          v23 = (double *)(v30 + 24);
          v33 = (char *)a1[10];
          v32 = a1[11];
          if (v32 != (float64x2_t *)v33)
          {
            do
            {
              v34 = *(__int128 *)((char *)&v32[-2] + 8);
              *(float64_t *)(v30 - 8) = v32[-1].f64[1];
              *(_OWORD *)(v30 - 24) = v34;
              v30 -= 24;
              v32 = (float64x2_t *)((char *)v32 - 24);
            }
            while (v32 != (float64x2_t *)v33);
            v32 = a1[10];
          }
          a1[10] = (float64x2_t *)v30;
          a1[11] = (float64x2_t *)v23;
          a1[12] = (float64x2_t *)v31;
          if (v32)
            operator delete(v32);
        }
        else
        {
          *v22 = v19;
          v22[1].f64[0] = v20;
          v23 = &v22[1].f64[1];
        }
        v92 = v6;
        a1[11] = (float64x2_t *)v23;
        v35 = (__n128)v97;
        if (v7 == (uint64_t *)a1[7])
        {
          v38 = (uint64_t *)(a1 + 6);
LABEL_43:
          v125 = *(float64x2_t *)(a1 + 3);
          *(_QWORD *)v126 = a1[5];
          v59 = *((_QWORD *)v23 - 1);
          *(_OWORD *)&v126[8] = *(_OWORD *)(v23 - 3);
          *(_QWORD *)&v126[24] = v59;
          v119 = v125;
          v120 = *(float64x2_t *)v126;
          v121 = *(float64x2_t *)&v126[16];
          f64 = &f64;
          v123 = &f64;
          v124 = 0;
          if (v38 == v7)
          {
LABEL_49:
            v114 = v125;
            v115 = *(_OWORD *)v126;
            v116 = *(_OWORD *)&v126[16];
            v113[0] = &off_1E25C0DC8;
            v113[1] = a3;
            v117 = 0;
            v118 = 0;
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(a3, v113);
            if (!v118)
            {
              v106 = v119;
              v107 = v120;
              v108 = v121;
              v109 = &v109;
              v110 = &v109;
              v111 = 0;
              v77 = v124;
              if (v124)
              {
                v78 = &v111;
                v80 = f64;
                v79 = v123;
                v81 = *v123;
                *(_QWORD *)(v81 + 8) = f64[1];
                *(_QWORD *)v80[1] = v81;
                v82 = v109;
                v109[1] = v79;
                *v79 = v82;
                v109 = v80;
                v80[1] = &v109;
                v124 = 0;
                v112 = 1;
                v99 = v106;
                v100 = v107;
                v101 = v108;
                v102 = &v102;
                v103 = &v102;
                v83 = v110;
                v84 = *v110;
                *(_QWORD *)(v84 + 8) = v80[1];
                *(_QWORD *)v80[1] = v84;
                v85 = v102;
                v102[1] = v83;
                *v83 = v85;
                v102 = v80;
                v80[1] = &v102;
                v104 = v77;
              }
              else
              {
                v112 = 1;
                v99 = v119;
                v100 = v120;
                v101 = v121;
                v102 = &v102;
                v103 = &v102;
                v78 = &v104;
              }
              *v78 = 0;
              v105 = 1;
              sub_18D1C5494(&v109);
            }
          }
          else
          {
            v60 = v23 - 6;
            while (1)
            {
              v61 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, float64x2_t *, _QWORD))(*(_QWORD *)v38[2] + 104))(v38[2], &v125, 0));
              if (!v62)
                break;
              v63 = v61;
              v64 = v38[1];
              v65 = v61;
              v66 = *(float64x2_t *)&v126[8];
              v67 = v125;
              v68 = *(double *)&v126[24] * v61 + *(double *)v126;
              if ((uint64_t *)v64 != v7)
              {
                v94 = v125;
                v96 = *(float64x2_t *)&v126[8];
                v98 = v61;
                v69 = (*(double (**)(_QWORD))(**(_QWORD **)(v64 + 16) + 56))(*(_QWORD *)(v64 + 16));
                v66 = v96;
                v65 = v98;
                v67 = v94;
                if (v68 > v69)
                  break;
              }
              v70 = *((_QWORD *)v60 + 2);
              v71 = *(_OWORD *)v60;
              v125 = vaddq_f64(vmulq_n_f64(v66, v65), v67);
              *(double *)v126 = v68;
              *(_OWORD *)&v126[8] = v71;
              *(_QWORD *)&v126[24] = v70;
              v72 = *((double *)v38 + 2);
              v73 = (float64x2_t *)operator new(0x50uLL);
              v73[1].f64[0] = v72;
              v73[1].f64[1] = v63;
              v74 = *(float64x2_t *)&v126[16];
              v75 = v125;
              v73[3] = *(float64x2_t *)v126;
              v73[4] = v74;
              v73[2] = v75;
              v76 = f64;
              *(_QWORD *)&v73->f64[0] = f64;
              *(_QWORD *)&v73->f64[1] = &f64;
              v76[1] = v73;
              f64 = (_QWORD *)v73->f64;
              ++v124;
              v38 = (uint64_t *)v38[1];
              v60 -= 3;
              if (v38 == v7)
                goto LABEL_49;
            }
          }
          sub_18D1C5494(&f64);
        }
        else
        {
          v36 = v17 * v95;
          v37 = v97.f64[1];
          v38 = (uint64_t *)(a1 + 6);
          while (1)
          {
            v35.n128_f64[0] = (*(double (**)(_QWORD, __n128))(**(_QWORD **)(*v38 + 16) + 88))(*(_QWORD *)(*v38 + 16), v35);
            v41.f64[1] = v97.f64[1];
            v42 = v37 * v39 + v97.f64[0] * v35.n128_f64[0] + v36 * v40;
            if (v42 > 0.0)
              break;
            v43 = v42 + v42;
            v35.n128_f64[0] = v35.n128_f64[0] * v43;
            v41.f64[0] = v97.f64[0] - v35.n128_f64[0];
            v37 = v37 - v39 * v43;
            v36 = v36 - v40 * v43;
            v97 = v41;
            v44 = -v41.f64[0];
            v45 = -v37;
            v46 = -v36;
            v48 = (double *)a1[11];
            v47 = (unint64_t)a1[12];
            if ((unint64_t)v48 >= v47)
            {
              v49 = a1[10];
              v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v49) >> 3);
              v51 = v50 + 1;
              if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_18D07AFE4();
              v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)v49) >> 3);
              if (2 * v52 > v51)
                v51 = 2 * v52;
              if (v52 >= 0x555555555555555)
                v53 = 0xAAAAAAAAAAAAAAALL;
              else
                v53 = v51;
              if (v53)
                v53 = (unint64_t)sub_18D263FF4(v53);
              else
                v54 = 0;
              v55 = (double *)(v53 + 24 * v50);
              *v55 = v44;
              v55[1] = v45;
              v55[2] = v46;
              v57 = (double *)a1[10];
              v56 = (double *)a1[11];
              v58 = v55;
              if (v56 != v57)
              {
                do
                {
                  v35 = *(__n128 *)(v56 - 3);
                  *(v58 - 1) = *(v56 - 1);
                  *(__n128 *)(v58 - 3) = v35;
                  v58 -= 3;
                  v56 -= 3;
                }
                while (v56 != v57);
                v56 = (double *)a1[10];
              }
              v23 = v55 + 3;
              a1[10] = (float64x2_t *)v58;
              a1[11] = (float64x2_t *)(v55 + 3);
              a1[12] = (float64x2_t *)(v53 + 24 * v54);
              if (v56)
                operator delete(v56);
            }
            else
            {
              *v48 = v44;
              v48[1] = v45;
              v23 = v48 + 3;
              v48[2] = v46;
            }
            a1[11] = (float64x2_t *)v23;
            v38 = (uint64_t *)*v38;
            if (v38 == (uint64_t *)a1[7])
              goto LABEL_43;
          }
        }
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v6 = v92;
      }
      else
      {
        v128 = v127;
        operator delete(v127);
      }
      if (v105)
      {
        v86 = (float64x2_t *)operator new(0x58uLL);
        v86->f64[0] = 0.0;
        v86->f64[1] = 0.0;
        v86[1] = v99;
        v86[2] = v100;
        v86[3] = v101;
        sub_18D263838((float64x2_t *)v86[4].f64, (uint64_t)&v102);
        v87 = *(double *)a1;
        *(_QWORD *)&v86->f64[0] = *a1;
        *(_QWORD *)&v86->f64[1] = a1;
        *(_QWORD *)(*(_QWORD *)&v87 + 8) = v86;
        *a1 = v86;
        a1[2] = (float64x2_t *)((char *)a1[2] + 1);
      }
      v88 = (unint64_t)a1[8];
      if (v88 < *((unsigned int *)a1 + 18))
      {
        for (i = (_QWORD *)(v6 + 40); ; sub_18D26305C(a1, i[2], a3))
        {
          i = (_QWORD *)*i;
          if (!i)
            break;
        }
        v88 = (unint64_t)a1[8];
      }
      v90 = (uint64_t *)a1[6];
      v91 = *v90;
      *(_QWORD *)(v91 + 8) = v90[1];
      *(_QWORD *)v90[1] = v91;
      a1[8] = (float64x2_t *)(v88 - 1);
      operator delete(v90);
      if (v105)
        sub_18D1C5494(&v102);
    }
  }
}

void sub_18D263770(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  sub_18D1C5494(v1);
  v4 = *(void **)(v2 - 200);
  if (v4)
  {
    *(_QWORD *)(v2 - 192) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18D2637F0(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

_QWORD *sub_18D263838(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x50uLL);
      v8 = *(_OWORD *)(v3 + 16);
      v9 = *(_OWORD *)(v3 + 32);
      v10 = *(_OWORD *)(v3 + 64);
      v7[3] = *(_OWORD *)(v3 + 48);
      v7[4] = v10;
      v7[1] = v8;
      v7[2] = v9;
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_18D2638C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_18D1C5494(v1);
  _Unwind_Resume(a1);
}

void sub_18D2638D8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 232) == *((unsigned __int8 *)a2 + 232))
  {
    if (*(_BYTE *)(a1 + 232))
    {
      v4 = *a2;
      v5 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      sub_18D1C5494((_QWORD *)(a1 + 48));
      sub_18D2637F0(a1 + 48, (uint64_t *)(a1 + 48), (_QWORD *)a2 + 6);
      v6 = *(__int128 *)((char *)a2 + 72);
      *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 72) = v6;
      sub_18D053AA8(a1 + 104, (uint64_t)a2 + 104);
      sub_18D053AA8(a1 + 168, (uint64_t)a2 + 168);
    }
  }
  else if (*(_BYTE *)(a1 + 232))
  {
    *(_QWORD *)(a1 + 168) = &unk_1E25C5E70;
    *(_QWORD *)(a1 + 104) = &unk_1E25C5E70;
    sub_18D1C5494((_QWORD *)(a1 + 48));
    *(_BYTE *)(a1 + 232) = 0;
  }
  else
  {
    v7 = *a2;
    v8 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 48) = a1 + 48;
    *(_QWORD *)(a1 + 56) = a1 + 48;
    *(_QWORD *)(a1 + 64) = 0;
    sub_18D2637F0(a1 + 48, (uint64_t *)(a1 + 48), (_QWORD *)a2 + 6);
    v9 = *(__int128 *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
    *(_OWORD *)(a1 + 72) = v9;
    sub_18D263A2C(a1 + 104, (uint64_t)a2 + 104);
    sub_18D263A2C(a1 + 168, (uint64_t)a2 + 168);
    *(_BYTE *)(a1 + 232) = 1;
  }
}

void sub_18D263A00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  *v2 = &unk_1E25C5E70;
  sub_18D1C5494(v1);
  _Unwind_Resume(a1);
}

__n128 sub_18D263A2C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x300000001;
  *(_QWORD *)(a1 + 24) = 0x300000001;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6C20;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 4u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D263B4C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D263B64()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D263B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v9, a2);
  if (sub_18D263D14((double *)&v9, (double *)(a1 + 16)))
  {
    sub_18D263E98(a2, &v9);
    v4 = v9;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) & 1) == 0)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a1);
      if (*(_BYTE *)(a1 + 68))
        break;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 68) = 0;
  }
}

void sub_18D263C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D07C868((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18D263C90(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 112))(a2, a1 + 16, *(unsigned int *)(a1 + 64));
  *(_BYTE *)(a1 + 68) = result;
  return result;
}

uint64_t sub_18D263CCC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 112))(a2, a1 + 16, *(unsigned int *)(a1 + 64));
  *(_BYTE *)(a1 + 68) = result;
  return result;
}

uint64_t sub_18D263D08(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

BOOL sub_18D263D14(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;

  v2 = a2[3];
  v3 = *a2;
  if (*a2 >= a1[3] && v3 <= *a1)
  {
    v4 = a2[1];
    if (v4 >= a1[4] && v4 <= a1[1])
    {
      v5 = a2[2];
      if (v5 >= a1[5] && v5 <= a1[2])
        return 1;
    }
  }
  v6 = 1.0 / v2;
  if (1.0 / v2 >= 0.0)
    v7 = a1[3];
  else
    v7 = *a1;
  if (1.0 / v2 >= 0.0)
    v8 = *a1;
  else
    v8 = a1[3];
  v9 = v6 * (v8 - v3);
  v10 = v6 * (v7 - v3);
  if (v10 < 0.0 && v9 < 0.0)
    return 0;
  v11 = 1.0 / a2[4];
  v12 = a2[1];
  v13 = 1;
  if (v11 >= 0.0)
    v14 = 1;
  else
    v14 = 4;
  if (v11 >= 0.0)
    v13 = 4;
  v15 = a1[v13] - v12;
  v16 = v11 * (a1[v14] - v12);
  v17 = v11 * v15;
  if (v17 < 0.0 && v16 < 0.0)
    return 0;
  if (v10 > v16 || v17 > v9)
    return 0;
  v19 = 1.0 / a2[5];
  if (v17 <= v10)
    v20 = v10;
  else
    v20 = v17;
  if (v16 >= v9)
    v16 = v9;
  v21 = a2[2];
  v22 = 2;
  if (v19 >= 0.0)
    v23 = 2;
  else
    v23 = 5;
  if (v19 >= 0.0)
    v22 = 5;
  v24 = a1[v22] - v21;
  v25 = v19 * (a1[v23] - v21);
  v26 = v19 * v24;
  if (v26 < 0.0 && v25 < 0.0)
    return 0;
  if (v20 > v25 || v26 > v16)
    return 0;
  if (v26 > v20)
    v20 = v26;
  if (v25 < v16)
    v16 = v25;
  return v16 >= 0.0 || v20 >= 0.0;
}

void sub_18D263E98(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v3 = a1 + 16;
  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCF30;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E25C0C20;
  v4[1].__shared_owners_ = v3;
  v4[1].__shared_weak_owners_ = 0;
  *a2 = v4 + 1;
  a2[1] = v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_18D263F48(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_18D263E98(a1 - 8, a2);
}

void sub_18D263F50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D263F60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D263F90(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_18D263FA0()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D263FB4(uint64_t result)
{
  *(_QWORD *)(result + 16) = **(_QWORD **)(result + 8);
  return result;
}

uint64_t sub_18D263FC4(uint64_t result)
{
  *(_QWORD *)(result + 16) += 8;
  return result;
}

BOOL sub_18D263FD4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t sub_18D263FE8(uint64_t a1)
{
  return **(_QWORD **)(a1 + 16);
}

void *sub_18D263FF4(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_18D0788A0();
  return operator new(24 * a1);
}

void *sub_18D264038(unint64_t a1)
{
  if (a1 >> 60)
    sub_18D0788A0();
  return operator new(16 * a1);
}

uint64_t sub_18D26406C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18D2640BC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18D26410C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  sub_18D263838((_QWORD *)(a1 + 48), (uint64_t)(a2 + 3));
  v7 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 128) = 0x300000001;
  *(_QWORD *)(a1 + 104) = &unk_1E25C6C20;
  *(_OWORD *)(a1 + 112) = xmmword_18D314670;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 192) = 0x300000001;
  *(_QWORD *)(a1 + 168) = &unk_1E25C6C20;
  *(_OWORD *)(a1 + 176) = xmmword_18D314670;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  return a1;
}

void sub_18D2641A0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 72;
      v7 = v4 - 72;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18D26422C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 56;
      v7 = v4 - 56;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 56;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_18D2642B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_18D26433C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_18D1C5494(v1);
  _Unwind_Resume(a1);
}

void sub_18D264350(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E25C0F58;
  a1[7] = &off_1E25C0E10;
  sub_18D26495C((uint64_t)(a1 + 10));
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2643B0(uint64_t a1, _QWORD *a2)
{
  double v4;
  double v5;
  BOOL v7;
  double v8[6];

  sub_18D265320(a1);
  if (!*(_BYTE *)(a1 + 48))
  {
    (*(void (**)(double *__return_ptr, _QWORD *))(*a2 + 24))(v8, a2);
    v5 = *(double *)(a1 + 8);
    v4 = *(double *)(a1 + 16);
    v7 = v5 < v8[3] || v5 > v8[0] || v4 < v8[4];
    if (v7 || v4 > v8[1])
      sub_18D26527C((_QWORD *)(a1 + 56));
    else
      sub_18D265580((void **)(a1 + 24), ((uint64_t)(a2[3] - a2[2]) >> 3) + 1);
  }
}

void sub_18D264448(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v3 = *(uint64_t **)(a2 + 16);
  v5 = *v3;
  v4 = v3[1];
  v8 = a1[5];
  v6 = (uint64_t)(a1 + 5);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = (void **)(v6 - 16);
    v12 = *(_QWORD *)(v6 - 16);
    v13 = ((uint64_t)v9 - v12) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_18D07AFE4();
    v15 = v7 - v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)sub_18D16735C(v6, v16);
    else
      v17 = 0;
    v18 = &v17[16 * v13];
    v19 = &v17[16 * v16];
    *(_QWORD *)v18 = v5;
    *((_QWORD *)v18 + 1) = v4;
    v10 = v18 + 16;
    v21 = (char *)a1[3];
    v20 = (char *)a1[4];
    if (v20 != v21)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
        v18 -= 16;
        v20 -= 16;
      }
      while (v20 != v21);
      v20 = (char *)*v11;
    }
    a1[3] = v18;
    a1[4] = v10;
    a1[5] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v9 = v5;
    v9[1] = v4;
    v10 = v9 + 2;
  }
  a1[4] = v10;
}

void sub_18D26453C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v3 = *(uint64_t **)(a2 + 16);
  v5 = *v3;
  v4 = v3[1];
  v8 = a1[5];
  v6 = (uint64_t)(a1 + 5);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = (void **)(v6 - 16);
    v12 = *(_QWORD *)(v6 - 16);
    v13 = ((uint64_t)v9 - v12) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_18D07AFE4();
    v15 = v7 - v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)sub_18D16735C(v6, v16);
    else
      v17 = 0;
    v18 = &v17[16 * v13];
    v19 = &v17[16 * v16];
    *(_QWORD *)v18 = v5;
    *((_QWORD *)v18 + 1) = v4;
    v10 = v18 + 16;
    v21 = (char *)a1[3];
    v20 = (char *)a1[4];
    if (v20 != v21)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
        v18 -= 16;
        v20 -= 16;
      }
      while (v20 != v21);
      v20 = (char *)*v11;
    }
    a1[3] = v18;
    a1[4] = v10;
    a1[5] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v9 = v5;
    v9[1] = v4;
    v10 = v9 + 2;
  }
  a1[4] = v10;
}

uint64_t sub_18D264630(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

_QWORD *sub_18D26463C(_QWORD *a1)
{
  *a1 = &off_1E25C0E10;
  sub_18D26495C((uint64_t)(a1 + 3));
  return a1;
}

void sub_18D26466C(_QWORD *a1)
{
  *a1 = &off_1E25C0E10;
  sub_18D26495C((uint64_t)(a1 + 3));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2646AC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  __n128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;

  a1[2] = a1[1];
  memset(&v9, 0, 48);
  v2 = a1 + 3;
  sub_18D264A9C(a1 + 3, (uint64_t)&v9);
  sub_18D26495C((uint64_t)&v9);
  result = a1[2];
  if (result && a1[9])
  {
    (*(void (**)(__n128 *__return_ptr, uint64_t))(*(_QWORD *)(result + 8) + 16))(&v9, result + 8);
    v4 = sub_18D264D88(v2, &v9);
    v5 = (std::__shared_weak_count *)v9.n128_u64[1];
    if (v9.n128_u64[1])
    {
      v6 = (unint64_t *)(v9.n128_u64[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v4);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(_QWORD *)(*(_QWORD *)(a1[4] + (((unint64_t)(a1[8] + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (*((_BYTE *)a1 + 64) + *((_BYTE *)a1 + 56) - 1));
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 16))(v8, v4);
  }
  return result;
}

void sub_18D264794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D07C868((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18D2647A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;

  v1 = a1[8];
  if (v1)
  {
    while (1)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1[4] + (((unint64_t)(v1 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v1 + *((_BYTE *)a1 + 56) - 1));
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3))
        break;
      sub_18D26527C(a1);
      v1 = a1[8];
      if (!v1)
        return;
    }
    v4 = *(_QWORD *)(*(_QWORD *)(a1[4] + (((unint64_t)(a1[8] + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (*((_BYTE *)a1 + 64) + *((_BYTE *)a1 + 56) - 1));
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    a1[2] = v5;
    v6 = a1[8];
    if (v6 >= a1[9])
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1[4] + (((v6 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v6 + *((_BYTE *)a1 + 56) - 1));
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    }
    else
    {
      (*(void (**)(__n128 *__return_ptr, uint64_t))(*(_QWORD *)(v5 + 8) + 16))(&v13, v5 + 8);
      v7 = sub_18D264D88(a1 + 3, &v13);
      v8 = (std::__shared_weak_count *)v13.n128_u64[1];
      if (v13.n128_u64[1])
      {
        v9 = (unint64_t *)(v13.n128_u64[1] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = *(_QWORD *)(*(_QWORD *)(a1[4] + (((unint64_t)(a1[8] + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((_BYTE *)a1 + 64) + *((_BYTE *)a1 + 56) - 1));
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 16))(v11, v7);
    }
  }
}

void sub_18D264930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D07C868((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_18D264944(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64) == 0;
}

uint64_t sub_18D264954(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_18D26495C(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = sub_18D07C868(v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double sub_18D264A9C(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  if ((void **)v5 == v4)
  {
    v6 = a1 + 5;
    v5 = a1[1];
  }
  else
  {
    v6 = a1 + 5;
    v7 = a1[4];
    v8 = &v4[v7 >> 8];
    v9 = (uint64_t)*v8 + 16 * v7;
    v10 = *(uint64_t *)((char *)v4 + (((a1[5] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a1 + 40) + v7);
    if (v9 != v10)
    {
      do
      {
        v9 = sub_18D07C868(v9) + 16;
        if (v9 - (_QWORD)*v8 == 4096)
        {
          v11 = (uint64_t)v8[1];
          ++v8;
          v9 = v11;
        }
      }
      while (v9 != v10);
      v4 = (void **)a1[1];
      v5 = a1[2];
    }
  }
  *v6 = 0;
  v12 = v5 - (_QWORD)v4;
  if ((unint64_t)(v5 - (_QWORD)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v5 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v12 = v5 - (_QWORD)v4;
    }
    while ((unint64_t)(v5 - (_QWORD)v4) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 128;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_15;
    v14 = 256;
  }
  a1[4] = v14;
LABEL_15:
  if (a1[5])
  {
    if (a1[4] >= 0x100uLL)
    {
      operator delete(*v4);
      a1[1] += 8;
      a1[4] -= 256;
    }
    sub_18D264C64(a1, 0);
  }
  else
  {
    if ((void **)v5 != v4)
    {
      do
      {
        operator delete(*(void **)(v5 - 8));
        v15 = a1[1];
        v5 = a1[2] - 8;
        a1[2] = v5;
      }
      while (v5 != v15);
    }
    a1[4] = 0;
  }
  sub_18D264CCC((void **)a1);
  v17 = a1[1];
  v16 = a1[2];
  if (v16 != v17)
    a1[2] = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_18D264CCC((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 32);
  a1[3] = *(_QWORD *)(a2 + 24);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  a1[4] = v18;
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_18D264C64(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 32 * (v3 - v4) - 1;
  v6 = v5 - (a1[5] + a1[4]);
  if (v6 < 0x100)
    a2 = 1;
  if (v6 > 0x1FF || (a2 & 1) == 0)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

void sub_18D264CCC(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;

  v2 = a1[2];
  v3 = a1[1];
  v4 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  v5 = (v2 - v3) >> 3;
  if (v5 < v4 >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)sub_18D07BF3C(v5);
      v7 = a1[1];
      v2 = a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - v7;
      if (v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = a1[1];
        v13 = a1[2];
        goto LABEL_9;
      }
    }
    v13 = v2;
LABEL_9:
    v14 = v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

__n128 sub_18D264D88(_QWORD *a1, __n128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  __n128 result;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 32 * (v5 - v4) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x100)
    {
      v23 = v6 >> 3;
      v24 = (char *)a1[3];
      v25 = (char *)*a1;
      v26 = (uint64_t)&v24[-*a1];
      if (v6 >> 3 >= (unint64_t)(v26 >> 3))
      {
        v29 = v26 >> 2;
        if (v24 == v25)
          v30 = 1;
        else
          v30 = v29;
        v31 = (char *)sub_18D07BF3C(v30);
        v33 = v32;
        v34 = operator new(0x1000uLL);
        v35 = &v31[8 * v23];
        v36 = &v31[8 * v33];
        if (v23 == v33)
        {
          v37 = 8 * v23;
          if (v6 < 1)
          {
            v73 = v34;
            v74 = v37 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)sub_18D07BF3C(v75);
            v35 = &v76[8 * (v75 >> 2)];
            v36 = &v76[8 * v77];
            if (v31)
              operator delete(v31);
            v31 = v76;
            v34 = v73;
          }
          else
          {
            v38 = v37 >> 3;
            if (v38 >= -1)
              v39 = v38 + 1;
            else
              v39 = v38 + 2;
            v35 -= 8 * (v39 >> 1);
          }
        }
        *(_QWORD *)v35 = v34;
        v78 = v35 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v35 == v31)
          {
            if (v78 >= v36)
            {
              if (v36 == v31)
                v84 = 1;
              else
                v84 = (v36 - v31) >> 2;
              v85 = (char *)sub_18D07BF3C(v84);
              v87 = v85;
              v35 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v31;
              v88 = v78 == v31;
              v78 = v35;
              if (!v88)
              {
                v78 = &v35[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v35;
                v92 = (uint64_t *)v31;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v36 = &v85[8 * v86];
              if (v31)
                operator delete(v31);
              v31 = v87;
            }
            else
            {
              v80 = (v36 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v35 = &v31[8 * (v81 >> 1)];
              v83 = v31;
              if (v78 != v31)
              {
                memmove(v35, v31, v78 - v31);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v35 - 1) = v94;
          v35 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v31;
        a1[1] = v35;
        a1[2] = v78;
        a1[3] = v36;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v5)
      {
        if (v4 == v25)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v24 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)sub_18D07BF3C(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)sub_18D07BF3C(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v27;
      }
    }
    else
    {
      a1[4] = v8 - 256;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1)
            v40 = 1;
          else
            v40 = (uint64_t)&v5[-*a1] >> 2;
          v41 = (char *)sub_18D07BF3C(v40);
          v43 = &v41[8 * (v40 >> 2)];
          v44 = (uint64_t *)a1[1];
          v5 = v43;
          v45 = a1[2] - (_QWORD)v44;
          if (v45)
          {
            v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
            v46 = 8 * (v45 >> 3);
            v47 = &v41[8 * (v40 >> 2)];
            do
            {
              v48 = *v44++;
              *(_QWORD *)v47 = v48;
              v47 += 8;
              v46 -= 8;
            }
            while (v46);
          }
          v49 = (char *)*a1;
          *a1 = v41;
          a1[1] = v43;
          a1[2] = v5;
          a1[3] = &v41[8 * v42];
          if (v49)
          {
            operator delete(v49);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v5 = v11;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v9 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)&v4[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void sub_18D265250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D26527C(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + 3;
  v3 = a1[8] + a1[7] - 1;
  sub_18D07C868(*(_QWORD *)(a1[4] + ((v3 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v3);
  --a1[8];
  sub_18D264C64(v2, 1);
  v4 = a1[8];
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1[4] + (((unint64_t)(v4 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v4 + *((_BYTE *)a1 + 56) - 1));
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    a1[2] = 0;
  }
}

void sub_18D265320(uint64_t a1)
{
  void **v1;
  double *v2;
  double *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  double *v27;
  int v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  char v35;

  v2 = *(double **)(a1 + 24);
  v3 = *(double **)(a1 + 32);
  v1 = (void **)(a1 + 24);
  if (v2 != v3)
  {
    v5 = *v2;
    v6 = *(v3 - 2);
    if (*v2 != v6)
    {
      if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_20;
      }
      v30 = vabdd_f64(v5, v6);
      v31 = fabs(v5);
      v32 = fabs(v6);
      if (v31 >= v32)
        v32 = v31;
      v33 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
      if (v30 > v33)
        goto LABEL_20;
    }
    v7 = v2[1];
    v8 = *(v3 - 1);
    if (v7 != v8)
    {
      if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_20;
      }
      v10 = vabdd_f64(v7, v8);
      v11 = fabs(v7);
      v12 = fabs(v8);
      if (v11 < v12)
        v11 = v12;
      v13 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
      if (v10 > v13)
      {
LABEL_20:
        v15 = *((_QWORD *)v2 + 1);
        v16 = a1 + 40;
        v17 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v3 >= v17)
        {
          v18 = ((char *)v3 - (char *)v2) >> 4;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60)
            sub_18D07AFE4();
          v20 = v17 - (_QWORD)v2;
          if (v20 >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)sub_18D16735C(v16, v21);
          else
            v22 = 0;
          v23 = &v22[16 * v18];
          v24 = &v22[16 * v21];
          *(double *)v23 = v5;
          *((_QWORD *)v23 + 1) = v15;
          v3 = (double *)(v23 + 16);
          v26 = *(char **)(a1 + 24);
          v25 = *(char **)(a1 + 32);
          if (v25 != v26)
          {
            do
            {
              *((_OWORD *)v23 - 1) = *((_OWORD *)v25 - 1);
              v23 -= 16;
              v25 -= 16;
            }
            while (v25 != v26);
            v25 = (char *)*v1;
          }
          *(_QWORD *)(a1 + 24) = v23;
          *(_QWORD *)(a1 + 32) = v3;
          *(_QWORD *)(a1 + 40) = v24;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v3 = v5;
          *((_QWORD *)v3 + 1) = v15;
          v3 += 2;
        }
        *(_QWORD *)(a1 + 32) = v3;
        v2 = *(double **)(a1 + 24);
      }
    }
    if ((unint64_t)((char *)v3 - (char *)v2) < 0x40 || (v34 = 0, v35 = 0, v2 + 2 == v3))
    {
      v29 = -1;
    }
    else
    {
      do
      {
        if (!sub_18D265620((double *)(a1 + 8), v2, v2 + 2, (uint64_t)&v34))
          break;
        v27 = v2 + 4;
        v2 += 2;
      }
      while (v27 != v3);
      if (v34)
        v28 = 1;
      else
        v28 = -1;
      if (v35)
        v29 = 0;
      else
        v29 = v28;
      v2 = (double *)*v1;
    }
    *(_BYTE *)(a1 + 48) = v29 > 0;
    *(_QWORD *)(a1 + 32) = v2;
  }
}

void sub_18D265580(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      sub_18D07AFE4();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_18D16735C(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL sub_18D265620(double *a1, double *a2, double *a3, uint64_t a4)
{
  double v5;
  double v6;
  double v7;
  _BOOL4 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  BOOL v18;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;
  double v34;
  _BOOL8 result;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;

  v5 = *a1;
  v6 = *a2;
  v7 = *a3;
  if (*a2 == *a1)
  {
    v8 = 1;
  }
  else if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v8 = 0;
  }
  else
  {
    v9 = vabdd_f64(v6, v5);
    v10 = fabs(v6);
    v11 = fabs(v5);
    if (v10 < v11)
      v10 = v11;
    if (v10 >= 1.0)
      v12 = v10 * 2.22044605e-16;
    else
      v12 = 2.22044605e-16;
    v8 = v9 <= v12;
  }
  if (v7 == v5)
  {
    v13 = 1;
LABEL_14:
    if (v8 && v13)
    {
      v14 = a1[1];
      v15 = a2[1];
      v16 = a3[1];
      v17 = v15 > v14 || v16 < v14;
      if (!v17 || (v15 >= v14 ? (v18 = v16 > v14) : (v18 = 1), !v18))
        *(_BYTE *)(a4 + 4) = 1;
      return *(_BYTE *)(a4 + 4) == 0;
    }
    if (v8)
      goto LABEL_32;
    if (v13)
    {
      v20 = 1;
      v21 = v6 <= v5;
      v22 = -1;
      goto LABEL_35;
    }
    goto LABEL_53;
  }
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v36 = vabdd_f64(v7, v5);
    v37 = fabs(v7);
    v38 = fabs(v5);
    if (v37 < v38)
      v37 = v38;
    if (v37 >= 1.0)
      v39 = v37 * 2.22044605e-16;
    else
      v39 = 2.22044605e-16;
    v13 = v36 <= v39;
    goto LABEL_14;
  }
  if (v8)
  {
LABEL_32:
    v20 = -1;
    v21 = v7 <= v5;
    v22 = 1;
LABEL_35:
    if (v21)
      v23 = v20;
    else
      v23 = v22;
    if (v8)
      v24 = a2;
    else
      v24 = a3;
    v25 = a1[1];
    v26 = v24[1];
    if (v25 != v26)
    {
      if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_50;
      }
      v27 = vabdd_f64(v25, v26);
      v28 = fabs(v25);
      v29 = fabs(v26);
      if (v28 < v29)
        v28 = v29;
      v30 = v28 >= 1.0 ? v28 * 2.22044605e-16 : 2.22044605e-16;
      if (v27 > v30)
      {
LABEL_50:
        if (v25 >= v26)
          v31 = v23;
        else
          v31 = -v23;
        goto LABEL_81;
      }
    }
    goto LABEL_65;
  }
LABEL_53:
  if (v6 < v5 && v7 > v5)
  {
    v23 = 2;
    goto LABEL_64;
  }
  if (v6 > v5 && v7 < v5)
  {
    v23 = -2;
LABEL_64:
    v41 = 1.0;
    v34 = sub_18D2658DC(a2, a3, a1, &v41);
    if (v34 != 0.0)
    {
      if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v34 > 0.0)
          v31 = 1;
        else
          v31 = -1;
      }
      else
      {
        v40 = fabs(v34);
        if (v34 > 0.0)
          v31 = 1;
        else
          v31 = -1;
        if (v40 <= v41 * 2.22044605e-16)
          goto LABEL_65;
      }
LABEL_81:
      if (v23 * v31 >= 1)
        *(_DWORD *)a4 += v23;
      return *(_BYTE *)(a4 + 4) == 0;
    }
LABEL_65:
    result = 0;
    *(_BYTE *)(a4 + 4) = 1;
    *(_DWORD *)a4 = 0;
    return result;
  }
  return *(_BYTE *)(a4 + 4) == 0;
}

double sub_18D2658DC(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  double v18[2];
  double v19[2];
  double v20[2];
  double v21;
  double v22[2];
  double v23[2];
  double v24[2];
  double v25[2];
  double v26[2];
  double v27[2];

  v4 = a1[1];
  v20[0] = *a1;
  v20[1] = v4;
  v5 = a2[1];
  v19[0] = *a2;
  v19[1] = v5;
  v6 = a3[1];
  v18[0] = *a3;
  v18[1] = v6;
  v7 = v20[0] - v18[0];
  v27[0] = v20[0] - v18[0];
  v8 = v5 - v6;
  v26[0] = v5 - v6;
  v9 = v4 - v6;
  v25[0] = v4 - v6;
  v10 = v19[0] - v18[0];
  v24[0] = v19[0] - v18[0];
  v11 = vabdd_f64(v20[0], v18[0]);
  v12 = vabdd_f64(v5, v6);
  v13 = vabdd_f64(v4, v6);
  v14 = vabdd_f64(v19[0], v18[0]);
  if (v11 < v12)
    v11 = v12;
  if (v11 < v13)
    v11 = v13;
  if (v11 < v14)
    v11 = v14;
  if (v11 < 1.0)
    v11 = 1.0;
  *a4 = v11;
  v15 = v7 * v8;
  v23[0] = v7 * v8;
  v16 = v10 * v9;
  result = v7 * v8 - v10 * v9;
  v21 = fabs(v7 * v8) + fabs(v10 * v9);
  v22[0] = v10 * v9;
  if (vabdd_f64(v7 * v8, v10 * v9) < v21 * 3.33066907e-16 && (v15 <= 0.0 || v16 > 0.0) && (v15 >= 0.0 || v16 < 0.0))
    return sub_18D2659EC(v20, v19, v18, v27, v26, v25, v24, v23, v22, &v21);
  return result;
}

double sub_18D2659EC(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  int v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64[4];
  double v65[8];
  double v66[8];
  double v67[4];

  v14 = 0;
  a8[1] = -(*a8 - *a4 * *a5);
  v15 = *a9;
  v16 = -(*a9 - *a6 * *a7);
  a9[1] = v16;
  v17 = a8[1];
  v18 = v17 - v16;
  v19 = v17 - (v17 - v16) - v16 + v17 - (v17 - v16 + v17 - (v17 - v16));
  v20 = *a8 + v18;
  v21 = v18 - (v20 - *a8) + *a8 - (v20 - (v20 - *a8));
  v67[0] = v19;
  v67[1] = v21 - (v21 - v15) - v15 + v21 - (v21 - v15 + v21 - (v21 - v15));
  v67[2] = v21 - v15 - (v20 + v21 - v15 - v20) + v20 - (v20 + v21 - v15 - (v20 + v21 - v15 - v20));
  v67[3] = v20 + v21 - v15;
  result = 0.0;
  do
    result = result + v67[v14++];
  while (v14 != 4);
  v23 = fabs(result);
  if (v23 < *a10 * 2.22044605e-16)
  {
    a4[1] = *a1 - *a4 - *a3 + *a1 - (*a4 + *a1 - *a4);
    a5[1] = a2[1] - *a5 - a3[1] + a2[1] - (*a5 + a2[1] - *a5);
    a6[1] = a1[1] - *a6 - a3[1] + a1[1] - (*a6 + a1[1] - *a6);
    v24 = *a7;
    v25 = *a2 - *a7 - *a3 + *a2 - (*a7 + *a2 - *a7);
    a7[1] = v25;
    v26 = a4[1];
    v27 = a6[1];
    v28 = a5[1];
    if (v26 != 0.0 || v27 != 0.0 || v28 != 0.0 || v25 != 0.0)
    {
      v29 = v23 * 3.33066907e-16 + *a10 * 1.10933565e-31;
      v30 = v26 * *a5;
      v31 = v24 * v27;
      result = result + v30 + *a4 * v28 - (v24 * v27 + *a6 * v25);
      if (fabs(result) < v29)
      {
        v32 = -(v30 - v26 * *a5);
        v33 = -(v31 - v27 * v24);
        v34 = v32 - v33;
        v35 = v32 - (v32 - v33) - v33 + v32 - (v32 - v33 + v32 - (v32 - v33));
        v36 = v30 + v34;
        v37 = v34 - (v30 + v34 - v30) + v30 - (v30 + v34 - (v30 + v34 - v30));
        v60 = v35;
        v61 = v37 - (v37 - v31) - v31 + v37 - (v37 - v31 + v37 - (v37 - v31));
        v62 = v37 - v31 - (v36 + v37 - v31 - v36) + v36 - (v36 + v37 - v31 - (v36 + v37 - v31 - v36));
        v63 = v36 + v37 - v31;
        v38 = sub_18D265DD0(v67, &v60, v66, 4, 4);
        v39 = a5[1];
        v40 = a4[1];
        v41 = *a4 * v39;
        v42 = -(v41 - v41);
        v43 = a7[1];
        v44 = a6[1];
        v45 = *a6 * v43;
        v46 = -(v45 - v45);
        v47 = v42 - v46;
        v48 = v42 - (v42 - v46) - v46 + v42 - (v42 - v46 + v42 - (v42 - v46));
        v49 = v41 + v47;
        v50 = v47 - (v41 + v47 - v41) + v41 - (v41 + v47 - (v41 + v47 - v41));
        v60 = v48;
        v61 = v50 - (v50 - v45) - v45 + v50 - (v50 - v45 + v50 - (v50 - v45));
        v62 = v50 - v45 - (v49 + v50 - v45 - v49) + v49 - (v49 + v50 - v45 - (v49 + v50 - v45 - v49));
        v63 = v49 + v50 - v45;
        v51 = v39 * v40;
        v52 = -(v39 * v40 - v40 * v39);
        v53 = v43 * v44;
        v54 = -(v43 * v44 - v44 * v43);
        v55 = v52 - v54;
        v56 = v52 - (v52 - v54) - v54 + v52 - (v52 - v54 + v52 - (v52 - v54));
        v57 = v51 + v55;
        v58 = v55 - (v51 + v55 - v51) + v51 - (v51 + v55 - (v51 + v55 - v51));
        v64[0] = v56;
        v64[1] = v58 - (v58 - v53) - v53 + v58 - (v58 - v53 + v58 - (v58 - v53));
        v64[2] = v58 - v53 - (v57 + v58 - v53 - v57) + v57 - (v57 + v58 - v53 - (v57 + v58 - v53 - v57));
        v64[3] = v57 + v58 - v53;
        v59 = sub_18D265DD0(&v60, v64, v65, 4, 4);
        return *(&v60 + (int)sub_18D265DD0(v66, v65, &v60, v38, v59) - 1);
      }
    }
  }
  return result;
}

uint64_t sub_18D265DD0(double *a1, double *a2, double *a3, int a4, int a5)
{
  double v6;
  double v7;
  double v8;
  int v9;
  int v10;
  uint64_t result;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v25;
  double v26;
  BOOL v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double *v38;
  uint64_t v39;
  double v40;
  double v41;
  double *v42;
  uint64_t v43;
  double v44;
  double v45;

  v6 = *a2;
  v7 = fabs(*a2);
  v8 = fabs(*a1);
  v9 = v7 <= v8;
  v10 = v7 > v8;
  if (v7 > v8)
    v6 = *a1;
  if (v10 < a4 && v9 < a5)
  {
    v13 = a2[v7 <= v8];
    v14 = a1[v7 > v8];
    v15 = fabs(v13);
    v16 = fabs(v14);
    if (v7 > v8)
      v17 = 1;
    else
      v17 = 2;
    v18 = v6 + v13;
    v19 = v6 + v13 - v13;
    if (v7 <= v8)
      v20 = 1;
    else
      v20 = 2;
    v21 = v6 + v14;
    v22 = v6 + v14 - v14;
    if (v15 > v16)
    {
      v10 = v20;
    }
    else
    {
      v22 = v19;
      v21 = v18;
      v9 = v17;
    }
    v23 = v6 - v22;
    if (v23 == 0.0)
    {
      result = 0;
    }
    else
    {
      *a3 = v23;
      result = 1;
    }
    v6 = v21;
    if (v9 < a5 && v10 < a4)
    {
      do
      {
        v25 = a2[v9];
        v26 = a1[v10];
        v27 = fabs(v25) <= fabs(v26);
        v28 = v6 + v25;
        v29 = v6 + v25 - v6;
        v30 = v6 + v25 - v29;
        v31 = v25 - v29;
        v32 = v6 + v26;
        v33 = v6 + v26 - v6;
        v34 = v6 + v26 - v33;
        v35 = v26 - v33;
        if (!v27)
        {
          v30 = v34;
          v31 = v35;
        }
        v36 = v6 - v30;
        if (v27)
          v6 = v28;
        else
          v6 = v32;
        if (v27)
          ++v9;
        else
          ++v10;
        v37 = v31 + v36;
        if (v37 != 0.0)
        {
          a3[(int)result] = v37;
          result = (result + 1);
        }
      }
      while (v10 < a4 && v9 < a5);
    }
  }
  else
  {
    result = 0;
  }
  if (v10 < a4)
  {
    v38 = &a1[v10];
    v39 = a4 - (uint64_t)v10;
    do
    {
      v40 = v6;
      v6 = v6 + *v38;
      v41 = *v38 - (v6 - v40) + v40 - (v6 - (v6 - v40));
      if (v41 != 0.0)
      {
        a3[(int)result] = v41;
        result = (result + 1);
      }
      ++v38;
      --v39;
    }
    while (v39);
  }
  if (v9 < a5)
  {
    v42 = &a2[v9];
    v43 = a5 - (uint64_t)v9;
    do
    {
      v44 = v6;
      v6 = v6 + *v42;
      v45 = *v42 - (v6 - v44) + v44 - (v6 - (v6 - v44));
      if (v45 != 0.0)
      {
        a3[(int)result] = v45;
        result = (result + 1);
      }
      ++v42;
      --v43;
    }
    while (v43);
  }
  if (v6 != 0.0 || (_DWORD)result == 0)
  {
    a3[(int)result] = v6;
    return (result + 1);
  }
  return result;
}

double sub_18D265FAC(uint64_t a1)
{
  return **(double **)(a1 + 16);
}

uint64_t *sub_18D265FBC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = *(_OWORD *)(v2 + v5 - 56);
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v7;
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      v8 = (uint64_t *)(v2 + v5 - 16);
      v9 = *v8;
      *(_QWORD *)(v4 + v5 - 16) = *v8;
      v10 = v4 + v5 - 16;
      v11 = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v6 - 8) = v11;
      if (v11)
      {
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v2 + v5 - 24) = v8;
        *v8 = 0;
        *(_QWORD *)(v2 + v5 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v6 - 24) = v10;
      }
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v12 = *result;
  *result = v4;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void *sub_18D266070(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    sub_18D0788A0();
  return operator new(56 * a1);
}

uint64_t sub_18D2660B8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_18D262DA8(i - 24, *(_QWORD **)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_18D26610C(_OWORD *a1)
{
  _QWORD *v2;
  __int128 v3;

  v2 = operator new(0x58uLL);
  *v2 = 0;
  v2[1] = 0;
  v3 = a1[1];
  *((_OWORD *)v2 + 1) = *a1;
  *((_OWORD *)v2 + 2) = v3;
  *((_OWORD *)v2 + 3) = a1[2];
  sub_18D263838(v2 + 8, (uint64_t)(a1 + 3));
  return v2;
}

void sub_18D266158(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D26616C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D26617C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2661AC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_18D2661C0()
{
  JUMPOUT(0x18D78B5D4);
}

double sub_18D2661D4(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t **sub_18D2661DC(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t **v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_21;
  }
  v7 = *a2;
  v8 = *((unsigned __int16 *)a2 + 4);
  v9 = *((unsigned __int16 *)a2 + 5);
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v11 = v5[4];
      if (v7 == v11)
        break;
      if (v7 > v11)
        goto LABEL_18;
LABEL_15:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_21;
    }
    v12 = *((unsigned __int16 *)v10 + 20);
    v13 = *((unsigned __int16 *)v10 + 21);
    if (v8 == v12 && v9 == v13)
      return v10;
    v15 = v8 <= v12;
    if (v9 != v13)
      v15 = v9 <= v13;
    if (v15)
      goto LABEL_15;
    if (v9 == v13)
    {
      if (v12 > v8)
        return v10;
    }
    else if (v13 > v9)
    {
      return v10;
    }
LABEL_18:
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_21:
  v16 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x38uLL);
  *((_OWORD *)v10 + 2) = *a3;
  v10[6] = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v16;
  *v6 = (uint64_t *)v10;
  v17 = (uint64_t *)**a1;
  v18 = (uint64_t *)v10;
  if (v17)
  {
    *a1 = v17;
    v18 = *v6;
  }
  sub_18D083D78(a1[1], v18);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

uint64_t sub_18D2662F8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E25C0C60;
  *(_QWORD *)(a1 + 8) = &unk_1E25C0CA0;
  v3 = (void **)(a1 + 16);
  sub_18D17CF38(&v3);
  return a1;
}

void sub_18D266340(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E25C0C60;
  *(_QWORD *)(a1 + 8) = &unk_1E25C0CA0;
  v1 = (void **)(a1 + 16);
  sub_18D17CF38(&v1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D266398(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

__n128 sub_18D2663B0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t sub_18D2663C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 16);
  for (i = *(uint64_t **)(result + 24);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

void sub_18D26641C(uint64_t a1)
{
  void **v1;

  *(_QWORD *)(a1 - 8) = &off_1E25C0C60;
  *(_QWORD *)a1 = &unk_1E25C0CA0;
  v1 = (void **)(a1 + 8);
  sub_18D17CF38(&v1);
}

void sub_18D266458(uint64_t a1)
{
  void **v1;

  *(_QWORD *)(a1 - 8) = &off_1E25C0C60;
  *(_QWORD *)a1 = &unk_1E25C0CA0;
  v1 = (void **)(a1 + 8);
  sub_18D17CF38(&v1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2664B0(_QWORD *a1)
{
  *a1 = &off_1E25C0E50;
  a1[1] = &unk_1E25C0EE8;
  sub_18D07C868((uint64_t)(a1 + 4));
  sub_18D07C868((uint64_t)(a1 + 2));
  return a1;
}

void sub_18D2664EC(_QWORD *a1)
{
  *a1 = &off_1E25C0E50;
  a1[1] = &unk_1E25C0EE8;
  sub_18D07C868((uint64_t)(a1 + 4));
  sub_18D07C868((uint64_t)(a1 + 2));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D266538(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

double *sub_18D266550@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  *(int64x2_t *)a2 = vdupq_n_s64(0xFFF0000000000000);
  *(_OWORD *)(a2 + 16) = xmmword_18D335D80;
  *(int64x2_t *)(a2 + 32) = vdupq_n_s64(0x7FF0000000000000uLL);
  v4 = a1[6];
  v7 = *(_OWORD *)a1[2];
  v8 = v4;
  sub_18D26708C((double *)a2, (double *)&v7);
  v5 = a1[7];
  v7 = *(_OWORD *)a1[4];
  v8 = v5;
  return sub_18D26708C((double *)a2, (double *)&v7);
}

_QWORD *sub_18D2665D8(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *result;
  uint64_t v35;

  v4 = *a2;
  v5 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  v6 = *((_QWORD *)v5 + 2);
  v7 = *((_DWORD *)v5 + 2);
  *((_DWORD *)v5 + 2) = v7 & 0xFFFFFEFB | 4;
  *(_DWORD *)((char *)a2 + *(_QWORD *)(v4 - 24) + 8) |= 0x400u;
  *(uint64_t *)((char *)a2 + *(_QWORD *)(v4 - 24) + 16) = a3;
  v8 = a3 + 6;
  *(uint64_t *)((char *)a2 + *(_QWORD *)(v4 - 24) + 24) = v8;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = sub_18D076A18(v9, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = v8;
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = sub_18D076A18(v11, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = v8;
  v13 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v13, (uint64_t)" ", 1);
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = v8;
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = sub_18D076A18(v14, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = v8;
  v16 = (_QWORD *)std::ostream::operator<<();
  v17 = sub_18D076A18(v16, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = v8;
  v18 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v18, (uint64_t)" ", 1);
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = v8;
  v19 = (_QWORD *)std::ostream::operator<<();
  v20 = sub_18D076A18(v19, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 24) = v8;
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = sub_18D076A18(v21, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 24) = v8;
  v23 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v23, (uint64_t)" ", 1);
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = v8;
  v24 = (_QWORD *)std::ostream::operator<<();
  v25 = sub_18D076A18(v24, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = v8;
  v26 = (_QWORD *)std::ostream::operator<<();
  v27 = sub_18D076A18(v26, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 24) = v8;
  v28 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v28, (uint64_t)" ", 1);
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 24) = v8;
  v29 = (_QWORD *)std::ostream::operator<<();
  v30 = sub_18D076A18(v29, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 24) = v8;
  v31 = (_QWORD *)std::ostream::operator<<();
  v32 = sub_18D076A18(v31, (uint64_t)" ", 1);
  *(_QWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 24) = v8;
  v33 = (_QWORD *)std::ostream::operator<<();
  result = sub_18D076A18(v33, (uint64_t)"\n", 1);
  v35 = *a2;
  *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = v6;
  *(_DWORD *)((char *)a2 + *(_QWORD *)(v35 - 24) + 8) = v7;
  return result;
}

BOOL sub_18D2668C8(uint64_t a1, double *a2)
{
  double v2;
  double *v4;

  if (*a2 < 0.0)
    return 0;
  v2 = a2[1];
  if (v2 < 0.0 || v2 > *(double *)(a1 + 56) - *(double *)(a1 + 48))
    return 0;
  v4 = *(double **)(a1 + 16);
  return *a2 <= sqrt((*(double *)(*(_QWORD *)(a1 + 32) + 8) - v4[1]) * (*(double *)(*(_QWORD *)(a1 + 32) + 8) - v4[1])+ (**(double **)(a1 + 32) - *v4) * (**(double **)(a1 + 32) - *v4));
}

double sub_18D266928(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

double sub_18D266930(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double sub_18D266938(uint64_t a1)
{
  double *v1;
  double *v2;
  double v3;

  v1 = *(double **)(a1 + 32);
  v2 = *(double **)(a1 + 16);
  v3 = v1[1] - v2[1];
  return (*v1 - *v2) * (1.0 / sqrt(v3 * v3 + (*v1 - *v2) * (*v1 - *v2)));
}

double sub_18D266978()
{
  return 0.0;
}

double sub_18D266988(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

void sub_18D266994(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_18D262624((void **)a2, 4uLL);
  v4 = (_QWORD *)a1[2];
  v5 = *(_QWORD **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v9 = *(_QWORD **)a2;
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a2) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_69;
    if (0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v9) >> 3) > v11)
      v11 = 0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v9) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v9) >> 3) >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)sub_18D263FF4(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 24 * v10);
    v15 = a1[6];
    *v14 = *v4;
    v6 = v12 + 24 * v13;
    v14[1] = v4[1];
    v14[2] = v15;
    v8 = v14 + 3;
    if (v5 != v9)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 3);
        *(v14 - 1) = *(v5 - 1);
        *(_OWORD *)(v14 - 3) = v16;
        v14 -= 3;
        v5 -= 3;
      }
      while (v5 != v9);
      v5 = *(_QWORD **)a2;
    }
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v6;
    if (v5)
      operator delete(v5);
  }
  else
  {
    v7 = a1[6];
    *v5 = *v4;
    v5[1] = v4[1];
    v5[2] = v7;
    v8 = v5 + 3;
  }
  *(_QWORD *)(a2 + 8) = v8;
  v17 = (_QWORD *)a1[4];
  if ((unint64_t)v8 < v6)
  {
    v18 = a1[6];
    *v8 = *v17;
    v8[1] = v17[1];
    v8[2] = v18;
    v19 = v8 + 3;
    goto LABEL_34;
  }
  v20 = *(_QWORD **)a2;
  v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(_QWORD *)a2) >> 3);
  v22 = v21 + 1;
  if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_69;
  if (0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v20) >> 3) > v22)
    v22 = 0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v20) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v20) >> 3) >= 0x555555555555555)
    v23 = 0xAAAAAAAAAAAAAAALL;
  else
    v23 = v22;
  if (v23)
    v23 = (unint64_t)sub_18D263FF4(v23);
  else
    v24 = 0;
  v25 = (_QWORD *)(v23 + 24 * v21);
  v26 = a1[6];
  *v25 = *v17;
  v6 = v23 + 24 * v24;
  v25[1] = v17[1];
  v25[2] = v26;
  v19 = v25 + 3;
  if (v8 == v20)
  {
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 8) = v19;
    *(_QWORD *)(a2 + 16) = v6;
LABEL_33:
    operator delete(v8);
    v6 = *(_QWORD *)(a2 + 16);
    goto LABEL_34;
  }
  do
  {
    v27 = *(_OWORD *)(v8 - 3);
    *(v25 - 1) = *(v8 - 1);
    *(_OWORD *)(v25 - 3) = v27;
    v25 -= 3;
    v8 -= 3;
  }
  while (v8 != v20);
  v8 = *(_QWORD **)a2;
  *(_QWORD *)a2 = v25;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v6;
  if (v8)
    goto LABEL_33;
LABEL_34:
  *(_QWORD *)(a2 + 8) = v19;
  v28 = (_QWORD *)a1[4];
  if ((unint64_t)v19 < v6)
  {
    v29 = a1[7];
    *v19 = *v28;
    v19[1] = v28[1];
    v19[2] = v29;
    v30 = v19 + 3;
    goto LABEL_51;
  }
  v31 = *(_QWORD **)a2;
  v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - *(_QWORD *)a2) >> 3);
  v33 = v32 + 1;
  if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_69;
  if (0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v31) >> 3) > v33)
    v33 = 0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v31) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v31) >> 3) >= 0x555555555555555)
    v34 = 0xAAAAAAAAAAAAAAALL;
  else
    v34 = v33;
  if (v34)
    v34 = (unint64_t)sub_18D263FF4(v34);
  else
    v35 = 0;
  v36 = (_QWORD *)(v34 + 24 * v32);
  v37 = a1[7];
  *v36 = *v28;
  v6 = v34 + 24 * v35;
  v36[1] = v28[1];
  v36[2] = v37;
  v30 = v36 + 3;
  if (v19 == v31)
  {
    *(_QWORD *)a2 = v36;
    *(_QWORD *)(a2 + 8) = v30;
    *(_QWORD *)(a2 + 16) = v6;
LABEL_50:
    operator delete(v19);
    v6 = *(_QWORD *)(a2 + 16);
    goto LABEL_51;
  }
  do
  {
    v38 = *(_OWORD *)(v19 - 3);
    *(v36 - 1) = *(v19 - 1);
    *(_OWORD *)(v36 - 3) = v38;
    v36 -= 3;
    v19 -= 3;
  }
  while (v19 != v31);
  v19 = *(_QWORD **)a2;
  *(_QWORD *)a2 = v36;
  *(_QWORD *)(a2 + 8) = v30;
  *(_QWORD *)(a2 + 16) = v6;
  if (v19)
    goto LABEL_50;
LABEL_51:
  *(_QWORD *)(a2 + 8) = v30;
  v39 = (_QWORD *)a1[2];
  if ((unint64_t)v30 < v6)
  {
    v40 = a1[7];
    *v30 = *v39;
    v30[1] = v39[1];
    v30[2] = v40;
    v41 = v30 + 3;
    goto LABEL_68;
  }
  v42 = *(_QWORD **)a2;
  v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - *(_QWORD *)a2) >> 3);
  v44 = v43 + 1;
  if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_69:
    sub_18D07AFE4();
  if (0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v42) >> 3) > v44)
    v44 = 0x5555555555555556 * ((uint64_t)(v6 - (_QWORD)v42) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v42) >> 3) >= 0x555555555555555)
    v45 = 0xAAAAAAAAAAAAAAALL;
  else
    v45 = v44;
  if (v45)
    v45 = (unint64_t)sub_18D263FF4(v45);
  else
    v46 = 0;
  v47 = (_QWORD *)(v45 + 24 * v43);
  v48 = a1[7];
  *v47 = *v39;
  v49 = v45 + 24 * v46;
  v47[1] = v39[1];
  v47[2] = v48;
  v41 = v47 + 3;
  if (v30 == v42)
  {
    *(_QWORD *)a2 = v47;
    *(_QWORD *)(a2 + 8) = v41;
    *(_QWORD *)(a2 + 16) = v49;
LABEL_67:
    operator delete(v30);
    goto LABEL_68;
  }
  do
  {
    v50 = *(_OWORD *)(v30 - 3);
    *(v47 - 1) = *(v30 - 1);
    *(_OWORD *)(v47 - 3) = v50;
    v47 -= 3;
    v30 -= 3;
  }
  while (v30 != v42);
  v30 = *(_QWORD **)a2;
  *(_QWORD *)a2 = v47;
  *(_QWORD *)(a2 + 8) = v41;
  *(_QWORD *)(a2 + 16) = v49;
  if (v30)
    goto LABEL_67;
LABEL_68:
  *(_QWORD *)(a2 + 8) = v41;
}

void sub_18D266DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_18D266DEC(uint64_t a1, double *a2, int a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  double v25;
  uint64_t v27;
  unint64_t v28;

  v6 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v7 = a2[3];
  v8 = a2[4];
  v10 = v8 * v9 + v7 * v6;
  v11 = a2[5];
  v13 = v10 + v11 * v12;
  if (a3)
  {
    if (a3 == 2)
    {
      if (fabs(v13) < 2.22044605e-16)
        goto LABEL_20;
    }
    else if (a3 == 1 && v13 <= 0.0)
    {
      goto LABEL_20;
    }
  }
  else if (v13 >= 0.0)
  {
    goto LABEL_20;
  }
  v14 = *(double **)(a1 + 16);
  v15 = *(double **)(a1 + 32);
  v16 = v14[1];
  v17 = *v15 - *v14;
  v18 = v15[1] - v16;
  v19 = v7 * v18 - v8 * v17;
  if (fabs(v19) >= 2.22044605e-16)
  {
    v20 = *v14 - *a2;
    v21 = v16 - a2[1];
    v22 = (v20 * v8 - v21 * v7) / v19;
    if (v22 >= 0.0 && v22 <= 1.0)
    {
      v24 = (v17 * -v21 + v20 * v18) / v19;
      if (v24 >= 0.0)
      {
        v25 = a2[2] + v24 * v11;
        if (v25 >= *(double *)(a1 + 48) && v25 <= *(double *)(a1 + 56))
        {
          v28 = *(_QWORD *)&v24 & 0xFFFFFFFFFFFFFF00;
          v27 = LOBYTE(v24);
          return v28 | v27;
        }
      }
    }
  }
LABEL_20:
  v27 = 0;
  v28 = 0;
  return v28 | v27;
}

BOOL sub_18D266F28(uint64_t a1)
{
  char v1;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return v1 != 0;
}

double sub_18D266F4C(uint64_t a1, double *a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  double v10;

  v2 = *(double **)(a1 + 16);
  v3 = *v2;
  v4 = v2[1];
  v5 = *a2 - *v2;
  v6 = a2[1] - v4;
  v7 = *(double **)(a1 + 32);
  v8 = *v7 - v3;
  v9 = v7[1] - v4;
  v10 = 1.0 / sqrt(v9 * v9 + v8 * v8);
  return v6 * (v9 * v10) + v5 * (v8 * v10) + (a2[2] - *(double *)(a1 + 48)) * (v10 * 0.0);
}

_QWORD *sub_18D266FBC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E25CCEC0;
  a1[1] = v2;
  v2[3] = &off_1E25C0B50;
  result = v2 + 3;
  *a1 = result;
  return result;
}

uint64_t sub_18D267004(_QWORD *a1)
{
  *(a1 - 1) = &off_1E25C0E50;
  *a1 = &unk_1E25C0EE8;
  sub_18D07C868((uint64_t)(a1 + 3));
  return sub_18D07C868((uint64_t)(a1 + 1));
}

void sub_18D26703C(uint64_t a1)
{
  sub_18D2664EC((_QWORD *)(a1 - 8));
}

_QWORD *sub_18D267044@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E25CCEC0;
  a1[1] = v2;
  v2[3] = &off_1E25C0B50;
  result = v2 + 3;
  *a1 = result;
  return result;
}

double *sub_18D26708C(double *result, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v2 = result[3];
  if (v2 >= *a2)
    v2 = *a2;
  result[3] = v2;
  v3 = result[4];
  if (v3 >= a2[1])
    v3 = a2[1];
  result[4] = v3;
  v4 = result[5];
  if (v4 >= a2[2])
    v4 = a2[2];
  result[5] = v4;
  v5 = *a2;
  v6 = result[1];
  if (*result > *a2)
    v5 = *result;
  *result = v5;
  v7 = a2[1];
  if (v6 > v7)
    v7 = v6;
  result[1] = v7;
  v8 = result[2];
  if (v8 <= a2[2])
    v8 = a2[2];
  result[2] = v8;
  return result;
}

void sub_18D2671B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D2671C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2671F4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_18D267204()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D267220()
{
  return 1;
}

uint64_t sub_18D267228()
{
  return 0;
}

uint64_t sub_18D267230(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E25C0C60;
  *(_QWORD *)(a1 + 8) = &unk_1E25C0CA0;
  v3 = (void **)(a1 + 16);
  sub_18D17CF38(&v3);
  return a1;
}

void sub_18D267278(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E25C0C60;
  *(_QWORD *)(a1 + 8) = &unk_1E25C0CA0;
  v1 = (void **)(a1 + 16);
  sub_18D17CF38(&v1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2672D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
}

void sub_18D2672E8(uint64_t a1)
{
  void **v1;

  *(_QWORD *)(a1 - 8) = &off_1E25C0C60;
  *(_QWORD *)a1 = &unk_1E25C0CA0;
  v1 = (void **)(a1 + 8);
  sub_18D17CF38(&v1);
}

void sub_18D267324(uint64_t a1)
{
  void **v1;

  *(_QWORD *)(a1 - 8) = &off_1E25C0C60;
  *(_QWORD *)a1 = &unk_1E25C0CA0;
  v1 = (void **)(a1 + 8);
  sub_18D17CF38(&v1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D26737C(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_18D185564(v3, v5);
      operator delete(v5);
    }
  }
}

void sub_18D267440(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_18D262DF0((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

_QWORD *sub_18D267484(_QWORD *a1)
{
  *a1 = &off_1E25C0F10;
  a1[12] = &off_1E25C0E10;
  sub_18D26495C((uint64_t)(a1 + 15));
  return a1;
}

void sub_18D2674C4(_QWORD *a1)
{
  *a1 = &off_1E25C0F10;
  a1[12] = &off_1E25C0E10;
  sub_18D26495C((uint64_t)(a1 + 15));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D267514(uint64_t a1, uint64_t a2)
{
  double v3[6];

  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(v3, a2);
  if (!sub_18D263D14(v3, (double *)(a1 + 16)))
    sub_18D26527C((_QWORD *)(a1 + 96));
}

uint64_t sub_18D267568(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;

  *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, a1 + 16, *(unsigned int *)(a1 + 64)));
  if (v5 && *(double *)(a1 + 72) > *(double *)&result && *(_QWORD *)(a1 + 88) != a2)
  {
    *(double *)(a1 + 72) = *(double *)&result;
    *(_QWORD *)(a1 + 80) = a2;
  }
  return result;
}

uint64_t sub_18D2675C8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;

  *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, a1 + 16, *(unsigned int *)(a1 + 64)));
  if (v5 && *(double *)(a1 + 72) > *(double *)&result && *(_QWORD *)(a1 + 88) != a2)
  {
    *(double *)(a1 + 72) = *(double *)&result;
    *(_QWORD *)(a1 + 80) = a2;
  }
  return result;
}

uint64_t sub_18D267628(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

__n128 sub_18D267634(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x200000002;
  *(_QWORD *)(a1 + 24) = 0x200000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C75B0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 3u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D267750(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D267764(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D267788(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D267794(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[6];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D26785C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D267880(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D26788C(uint64_t a1)
{
  char v1[2];

  sub_18D0894A0(a1, v1);
}

__n128 sub_18D2678AC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x200000001;
  *(_QWORD *)(a1 + 24) = 0x200000001;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6BC0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 3u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D2679CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D2679E0(_QWORD *a1)
{
  if (a1)
  {
    sub_18D2679E0(*a1);
    sub_18D2679E0(a1[1]);
    sub_18D1C5494(a1 + 4);
    operator delete(a1);
  }
}

uint64_t sub_18D267A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a2 + 8); v2 != a1 && i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(i + 16);
    if (v5 != v6)
    {
      if (v5 < v6)
        return 0xFFFFFFFFLL;
      else
        return 1;
    }
    v2 = *(_QWORD *)(v2 + 8);
  }
  if (v2 == a1)
    return (i == a2) - 1;
  else
    return 1;
}

void sub_18D267A78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D267A88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CCFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D267AB8(uint64_t result)
{
  *(_QWORD *)(result + 96) = &unk_1E25C5E70;
  *(_QWORD *)(result + 32) = &unk_1E25C5E70;
  return result;
}

uint64_t raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::PositionEvent *a2)
{
  unsigned int v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  cnprint::CNPrinter *LogLevel;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  unsigned __int8 v63;
  __int16 v64;
  void *v65;
  double v66[44];

  if (!*(_BYTE *)this)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) > 1)
      return 0;
    LOWORD(v65) = 12;
    LOBYTE(v64) = 1;
    v17 = "#gmp,HandleEvent(pos),not configured";
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, (unsigned __int8 *)&v64, v17, v12, v13, v14, v15, v16, SLOBYTE(v60));
    return 0;
  }
  v4 = *((unsigned __int8 *)a2 + 200);
  if (v4 < 0x11 && ((0x13DE9u >> v4) & 1) != 0)
    return 1;
  if (*((_BYTE *)a2 + 201))
  {
    if (!*((_BYTE *)a2 + 202))
    {
      LOWORD(v65) = 12;
      LOBYTE(v64) = 2;
      v5 = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v61 = v6 + (double)v5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, (unsigned __int8 *)&v64, "#gmp,HandleEvent(pos),ignoring 2D Horizontal PositionEvent,t,%.3lf,type,%u", v7, v8, v9, v10, v11, SLOBYTE(v61));
      return 1;
    }
    goto LABEL_10;
  }
  if (!*((_BYTE *)a2 + 280))
  {
    LOWORD(v65) = 12;
    LOBYTE(v64) = 3;
    v34 = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v60 = v35 + (double)v34;
    v17 = "#gmp,HandleEvent(pos),Failed to handle PositionEvent,t,%.3lf,type,%u";
    goto LABEL_21;
  }
LABEL_10:
  v65 = &unk_1E25C21B8;
  memcpy(v66, (char *)a2 + 8, sizeof(v66));
  if (sub_18D20C258((uint64_t)&v65))
  {
    LogLevel = (cnprint::CNPrinter *)sub_18D20C508((uint64_t)&v65);
    if ((LogLevel & 1) != 0)
    {
      v19 = *((_QWORD *)this + 1);
      if (*(_BYTE *)(v19 + 2561))
      {
        v20 = fabs(v66[25]);
        if (v20 <= 1.30899694)
        {
          if (v20 <= 1.04719755)
          {
            if (v20 <= 1.04545222)
            {
              *((_BYTE *)this + 2336) = 1;
              *((_QWORD *)this + 291) = *(_QWORD *)(v19 + 3128);
              if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
              {
                v64 = 12;
                v63 = 0;
                v59 = *((_QWORD *)this + 291);
                *((_BYTE *)this + 2336) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Operate normally,elevation,%.2lf,use_model,%d", v54, v55, v56, v57, v58, v59);
              }
            }
            else if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
            {
              v64 = 12;
              v63 = 0;
              v53 = *((_QWORD *)this + 291);
              *((_BYTE *)this + 2336) = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Maintain current state,elevation,%.2lf,use_model,%d", v48, v49, v50, v51, v52, v53);
            }
          }
          else
          {
            if (v20 <= 1.30725161 && !*((_BYTE *)this + 2336))
            {
              LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
              if (!(_DWORD)LogLevel)
              {
                v64 = 12;
                v63 = 0;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Below cutoff and below hysteresis region; use local model",
                  v36,
                  v37,
                  v38,
                  v39,
                  v40,
                  SLOBYTE(v60));
              }
              *((_BYTE *)this + 2336) = 1;
              v19 = *((_QWORD *)this + 1);
            }
            v41 = *(double *)(v19 + 3128);
            if (v41 < 15.0)
              v41 = 15.0;
            *((double *)this + 291) = v41;
            if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
            {
              v64 = 12;
              v63 = 0;
              v47 = *((_QWORD *)this + 291);
              *((_BYTE *)this + 2336) = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Adjusting elevation threshold,elevation,%.2lf,use_model,%d", v42, v43, v44, v45, v46, v47);
            }
          }
          goto LABEL_17;
        }
        if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
        {
          v64 = 12;
          v63 = 0;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Above cutoff; do not use local model",
            v21,
            v22,
            v23,
            v24,
            v25,
            SLOBYTE(v60));
        }
      }
      *((_BYTE *)this + 2336) = 0;
LABEL_17:
      memcpy((char *)this + 536, v66, 0x160uLL);
      return 1;
    }
  }
  v64 = 12;
  v63 = 4;
  v27 = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
  v62 = v28 + (double)v27;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Could not fill in LLA/ECEF for incoming position,t,%.3lf", v29, v30, v31, v32, v33, SLOBYTE(v62));
  return 0;
}

uint64_t raven::GnssMeasurementPreprocessor::IsConfigured(raven::GnssMeasurementPreprocessor *this)
{
  return *(unsigned __int8 *)this;
}

BOOL raven::GnssMeasurementPreprocessor::CalculateApproximateTimeOfFlight(double *a1, uint64_t a2, uint64_t a3, double *a4)
{
  int v7;
  _BOOL8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  __int16 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  double v31;
  unsigned __int8 v32[24];
  unsigned __int8 v33[24];

  if (*(_BYTE *)a1)
  {
    v22 = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, double *, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)(a3 + 32) + 56))(a3 + 32, a2, &v22, &v29, v33, v32);
    v8 = v7 == 0;
    if (v7)
    {
      *(_WORD *)v33 = 12;
      v32[0] = 3;
      v9 = sub_18D181C54(a3);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v33, v32, "#gmp,Could not position the satellite for approximiate time of flight,SV,%s", v10, v11, v12, v13, v14, v9);
    }
    else
    {
      *a4 = sqrt((v30 - a1[103]) * (v30 - a1[103]) + (v29 - a1[102]) * (v29 - a1[102]) + (v31 - a1[104])
                                                                                       * (v31 - a1[104]))
          / 299792458.0;
    }
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v22 = 12;
      v33[0] = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, v33, "#gmp,CalculateApproximateTimeOfFlight,not configured", v15, v16, v17, v18, v19, v21);
    }
    return 0;
  }
  return v8;
}

uint64_t raven::GnssMeasurementPreprocessor::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  double v11;
  BOOL v12;
  char *v13;
  __int16 *v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unsigned __int8 v20;
  __int16 v21;
  char v22;
  __int16 v23;
  char v24;
  __int16 v25;
  unsigned __int8 v26;
  __int16 v27;

  if (*(_BYTE *)a1)
  {
    v27 = 12;
    v26 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "#gmp,configured more than once", a4, a5, a6, a7, a8, v19);
  }
  *(_BYTE *)a1 = 0;
  v10 = *a2;
  if (!*a2)
  {
    v25 = 12;
    v24 = 4;
    v13 = "#gmp,configured with null raven parameters";
    v14 = &v25;
    v15 = &v24;
LABEL_14:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v14, (unsigned __int8 *)v15, v13, a4, a5, a6, a7, a8, v19);
    return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(v10 + 33))
  {
    v23 = 12;
    v22 = 4;
    v13 = "#gmp,configured with uninitialized raven parameters";
    v14 = &v23;
    v15 = &v22;
    goto LABEL_14;
  }
  v11 = *(double *)(v10 + 3128);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v11 <= 90.0 ? (v12 = v11 < -10.0) : (v12 = 1), v12))
  {
    v21 = 12;
    v20 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v21, &v20, "#gmp,Configure() failed. Invalid local ionosphere model minimum satellite elevation threshold,thresh,%.2lf", a4, a5, a6, a7, a8, SLOBYTE(v11));
    return 0xFFFFFFFFLL;
  }
  *(double *)(a1 + 2328) = v11;
  raven::GnssReceiverBandCorrectionsManager::Configure((raven::GnssReceiverBandCorrectionsManager *)(a1 + 1280), (const raven::RavenParameters *)v10);
  v17 = *a2;
  if (*(_BYTE *)(*a2 + 577))
  {
    if (*(_BYTE *)(a1 + 2600))
    {
      sub_18D04344C(a1 + 2560);
      v17 = *a2;
    }
    *(_QWORD *)(a1 + 2552) = v17;
    *(_OWORD *)(a1 + 2560) = 0u;
    *(_OWORD *)(a1 + 2576) = 0u;
    *(_DWORD *)(a1 + 2592) = 1065353216;
    *(_BYTE *)(a1 + 2600) = 1;
    v17 = *a2;
  }
  v18 = 0;
  switch(*(_DWORD *)(v17 + 552))
  {
    case 0:
      goto LABEL_33;
    case 1:
      v18 = (_QWORD *)qword_1EE0618D0;
      if (!qword_1EE0618D0)
      {
        v18 = (_QWORD *)operator new();
        *v18 = off_1E25C2E68;
        qword_1EE0618D0 = (uint64_t)v18;
      }
      goto LABEL_33;
    case 2:
      v18 = (_QWORD *)qword_1EE0618D8;
      if (!qword_1EE0618D8)
      {
        v18 = (_QWORD *)operator new();
        *v18 = off_1E25C2E98;
        qword_1EE0618D8 = (uint64_t)v18;
      }
      goto LABEL_33;
    case 3:
      v18 = (_QWORD *)qword_1EE061D90;
      if (!qword_1EE061D90)
      {
        v18 = (_QWORD *)operator new();
        *v18 = off_1E25C2EC8;
        qword_1EE061D90 = (uint64_t)v18;
      }
      goto LABEL_33;
    case 4:
      v18 = (_QWORD *)qword_1EE061D68;
      if (!qword_1EE061D68)
      {
        v18 = (_QWORD *)operator new();
        *v18 = off_1E25C2EF8;
        qword_1EE061D68 = (uint64_t)v18;
      }
      goto LABEL_33;
    case 5:
      v18 = (_QWORD *)qword_1EE061D98;
      if (!qword_1EE061D98)
      {
        v18 = (_QWORD *)operator new();
        *v18 = off_1E25C2F28;
        qword_1EE061D98 = (uint64_t)v18;
      }
LABEL_33:
      *(_QWORD *)(a1 + 2608) = v18;
      v17 = *a2;
      *(_QWORD *)(a1 + 8) = *a2;
      if (v17)
        goto LABEL_34;
      goto LABEL_35;
    default:
      *(_QWORD *)(a1 + 8) = v17;
LABEL_34:
      *(_BYTE *)(a1 + 1056) = *(_BYTE *)(v17 + 588);
      *(_BYTE *)(a1 + 1057) = *(_BYTE *)(v17 + 597);
LABEL_35:
      result = 0;
      *(_BYTE *)a1 = 1;
      break;
  }
  return result;
}

uint64_t raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId(cnprint::CNPrinter *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  char v28;
  void *__p[2];
  char v30;
  unsigned __int8 v31;
  __int16 v32;
  unint64_t v33;

  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v33) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v33, "#gmp,GetCNSatIDFromGnssId,not configured", v16, v17, v18, v19, v20, v28);
    }
    return 0;
  }
  v33 = *a2;
  if ((_DWORD)v33 == 2)
  {
    v8 = (int)(v33 >> 16) >> 24;
    v9 = (uint64_t *)*((_QWORD *)a1 + 130);
    if (!v9)
      goto LABEL_13;
    v10 = (_QWORD *)((char *)a1 + 1040);
    v11 = *((_QWORD *)a1 + 130);
    do
    {
      v12 = *(_DWORD *)(v11 + 28);
      v13 = v12 < v8;
      if (v12 >= v8)
        v14 = (uint64_t *)v11;
      else
        v14 = (uint64_t *)(v11 + 8);
      if (!v13)
        v10 = (_QWORD *)v11;
      v11 = *v14;
    }
    while (*v14);
    if (v10 == (_QWORD *)((char *)a1 + 1040) || *((_DWORD *)v10 + 7) > v8)
    {
LABEL_13:
      LOWORD(__p[0]) = 12;
      LOBYTE(v32) = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v32, "#gmp,Slot number for frequency could not be found in active list,freq,%i", a4, a5, a6, a7, a8, v8);
      return 0;
    }
    while (1)
    {
      while (1)
      {
        v15 = *((_DWORD *)v9 + 7);
        if (v15 <= v8)
          break;
        v9 = (uint64_t *)*v9;
        if (!v9)
          goto LABEL_20;
      }
      if (v15 >= v8)
        break;
      v9 = (uint64_t *)v9[1];
      if (!v9)
LABEL_20:
        sub_18D077838("map::at:  key not found");
    }
    BYTE4(v33) = *((_DWORD *)v9 + 8);
  }
  if ((sub_18D180DAC((int *)&v33, a3) & 1) != 0)
    return 1;
  v32 = 12;
  v31 = 4;
  sub_18D17FE1C((uint64_t)&v33, __p);
  if (v30 >= 0)
    v27 = __p;
  else
    LOBYTE(v27) = __p[0];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "#gmp,Could not fill in CN sat ID for SV,SV,%s", v22, v23, v24, v25, v26, (char)v27);
  if (v30 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_18D2683E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::GnssMeasurementPreprocessor::EstimateCoarseReceiverTaiTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  raven::GnssSvDatabase *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int8x16_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  double v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  char v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t v93;
  int8x16_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void **v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  uint64_t v107;
  int8x16_t v108;
  int8x16_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t *v124;
  _BYTE *v125;
  uint64_t *v126;
  char v127;
  int8x16_t *v128;
  int8x16_t v129;
  uint64_t v130;
  double v131;
  int8x16_t v132;
  uint64_t v133;
  int8x16_t v134;
  int8x16_t v135;
  uint64_t v136;
  uint64_t v137;
  char v139;
  int v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unsigned __int8 v145;
  double v146;
  void *__p[2];
  char v148;
  char v149;
  int v150;
  int v151;
  double v152;
  __int128 v153;
  unint64_t v154;
  void *v155;
  uint64_t *v156;
  uint64_t *v157;
  __int16 v158;
  __int128 v159;
  __int128 v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  __int16 v165;
  __int128 v166;
  __int128 v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  __int16 v172;
  __int128 v173;
  __int128 v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179[4];
  void *v180;
  double v181[4];
  int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;

  v172 = 0;
  v173 = 0u;
  v174 = 0u;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v165 = 0;
  v166 = 0u;
  v167 = 0u;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v158 = 0;
  v14 = (raven::GnssSvDatabase *)(a1 + 984);
  v159 = 0u;
  v160 = 0u;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v15 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v172, 0.0, a10, a3, a4, a5, a6, a7, a8);
  v24 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass(v14, (cnnavigation::GNSSUTCParameters *)&v165, v16, v17, v18, v19, v20, v21, v22, v23);
  v31 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGalileo(v14, (cnnavigation::GNSSUTCParameters *)&v158, v25, v26, v27, v28, v29, v30);
  v173 = 0uLL;
  v166 = 0uLL;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v39 = *(_QWORD *)(a2 + 72);
  v38 = *(_QWORD *)(a2 + 80);
  if (v39 == v38)
  {
    v127 = 0;
    goto LABEL_115;
  }
  v141 = v31;
  v143 = a3 + 8;
  v144 = 0;
  v142 = a4;
  v40 = a3;
  do
  {
    v41 = *(unsigned __int8 *)(v39 + 8);
    v42 = v41 > 9;
    v43 = (1 << v41) & 0x2BB;
    if (!v42 && v43 != 0)
    {
      v45 = *(unsigned __int8 *)(v39 + 197);
LABEL_8:
      if (!v45)
        goto LABEL_106;
      goto LABEL_9;
    }
    v45 = *(unsigned __int8 *)(v39 + 197);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 3792))
      v84 = 1;
    else
      v84 = v45 == 0;
    if (v84)
      goto LABEL_8;
    if (*(_BYTE *)(v39 + 196) == 1)
      goto LABEL_106;
LABEL_9:
    LODWORD(v154) = 0;
    WORD2(v154) = 32512;
    v153 = 0uLL;
    v152 = 0.0;
    v151 = 0;
    sub_18D268E30(v39, *(_QWORD *)(a1 + 2304), &v152, &v151);
    if ((*(_DWORD *)v39 == 16 || *(_DWORD *)v39 == 1)
      && *(_BYTE *)(v39 + 8) == 1
      && *(_BYTE *)(v39 + 9)
      && *(_BYTE *)(v39 + 12)
      && sub_18D26FB14((int *)v39)
      && *(double *)(v39 + 40) >= 0.0
      && *(float *)(v39 + 48) > 0.0)
    {
      ++v144;
      if (!*(_BYTE *)(a1 + 2208))
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,GPS week number is not available", v46, v47, v48, v49, v50, v139);
        goto LABEL_106;
      }
      LODWORD(v180) = v151 + *(_DWORD *)(a1 + 2212);
      if ((v15 & 1) == 0)
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,GPS UTC info not available", v46, v47, v48, v49, v50, v139);
        goto LABEL_106;
      }
      v181[0] = v152;
      cnnavigation::TAITime::TAITime(__p, (double *)&v180, (cnnavigation::GNSSUTCParameters *)&v172);
      goto LABEL_40;
    }
    if (*(_DWORD *)v39 == 8
      && *(_BYTE *)(v39 + 8) == 7
      && *(_BYTE *)(v39 + 9)
      && *(_BYTE *)(v39 + 12)
      && sub_18D26FB14((int *)v39)
      && *(double *)(v39 + 40) >= 0.0
      && *(float *)(v39 + 48) > 0.0)
    {
      ++v144;
      if (!*(_BYTE *)(a1 + 2208))
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,Galileo week number is not available", v51, v52, v53, v54, v55, v139);
        goto LABEL_106;
      }
      LODWORD(v180) = *(_DWORD *)(a1 + 2212) + v151 - 1024;
      if ((v141 & 1) == 0)
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,Galileo UTC info not available", v51, v52, v53, v54, v55, v139);
        goto LABEL_106;
      }
      v181[0] = v152;
      cnnavigation::TAITime::TAITime(__p, (double *)&v180, (cnnavigation::GNSSUTCParameters *)&v158);
LABEL_40:
      v153 = *(_OWORD *)__p;
      v61 = *(_DWORD *)v39;
      WORD2(v154) = *(_WORD *)(v39 + 4);
      LODWORD(v154) = v61;
      goto LABEL_41;
    }
    if (*(_DWORD *)v39 == 2
      && *(_BYTE *)(v39 + 8) == 3
      && *(_BYTE *)(v39 + 9)
      && *(_BYTE *)(v39 + 13)
      && sub_18D26FB14((int *)v39)
      && *(double *)(v39 + 40) >= 0.0
      && *(float *)(v39 + 48) > 0.0)
    {
      ++v144;
      v181[0] = 0.0;
      if (!*(_BYTE *)(a1 + 2216))
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,Glonass day number is not available", v56, v57, v58, v59, v60, v139);
        goto LABEL_106;
      }
      LODWORD(v180) = *(_DWORD *)(a1 + 2220);
      if ((v24 & 1) == 0)
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,GLONASS UTC info not available", v56, v57, v58, v59, v60, v139);
        goto LABEL_106;
      }
      v179[0] = 0;
      sub_18D268F44(v39, *(_QWORD *)(a1 + 2304), v181, v179);
      LODWORD(v180) = (_DWORD)v180 + v179[0];
      cnnavigation::TAITime::TAITime(__p, (int *)&v180, (cnnavigation::GNSSUTCParameters *)&v165);
      goto LABEL_40;
    }
LABEL_41:
    if (!sub_18D185074(&v154))
      goto LABEL_106;
    sub_18D0778AC(__p, "");
    v149 = 0;
    v150 = -1;
    if ((raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId((cnprint::CNPrinter *)a1, &v154, (uint64_t)__p, v62, v63, v64, v65, v66) & 1) != 0)
    {
      v67 = *(unsigned __int8 *)(v39 + 8);
      v68 = 1575420000.0;
      if (v67 != 1)
      {
        v68 = 1575420000.0;
        if (v67 != 7)
        {
          if (v67 != 3)
          {
            LOWORD(v179[0]) = 12;
            LOBYTE(v146) = 4;
            sub_18D17FE1C((uint64_t)&v154, &v180);
            v90 = &v180;
            if (v181[1] < 0.0)
              LOBYTE(v90) = (_BYTE)v180;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, (unsigned __int8 *)&v146, "#gmp,EstimateCoarseReceiverTaiTime,unexpected band from SV with decoded time,SV,%s,band,%i", v85, v86, v87, v88, v89, (char)v90);
            goto LABEL_65;
          }
          v69 = *(char *)(v39 + 5);
          if ((v69 - 7) < 0xFFFFFFF2)
          {
            LOWORD(v179[0]) = 12;
            LOBYTE(v146) = 4;
            sub_18D17FE1C((uint64_t)&v154, &v180);
            v75 = &v180;
            if (v181[1] < 0.0)
              LOBYTE(v75) = (_BYTE)v180;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, (unsigned __int8 *)&v146, "#gmp,EstimateCoarseReceiverTaiTime,could not determine GLONASS center frequency,SV,%s", v70, v71, v72, v73, v74, (char)v75);
LABEL_65:
            if (SHIBYTE(v181[1]) < 0)
              operator delete(v180);
            v82 = 0;
            v83 = 0;
            goto LABEL_101;
          }
          v68 = (double)(char)v69 * 562500.0 + 1602000000.0;
        }
      }
      v91 = sub_18D185488(v40, (uint64_t)__p);
      if (v143 == v91)
      {
        LOWORD(v179[0]) = 12;
        LOBYTE(v146) = 3;
        sub_18D17FE1C((uint64_t)&v154, &v180);
        v106 = &v180;
        if (v181[1] < 0.0)
          LOBYTE(v106) = (_BYTE)v180;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, (unsigned __int8 *)&v146, "#gmp,EstimateCoarseReceiverTaiTime,could not use SV due to lack of sat data,SV,%s", v101, v102, v103, v104, v105, (char)v106);
        if (SHIBYTE(v181[1]) < 0)
          operator delete(v180);
        v83 = 0;
LABEL_100:
        v82 = 1;
        goto LABEL_101;
      }
      v92 = *(_QWORD *)(v91 + 64);
      v146 = 0.0;
      LOWORD(v180) = 0;
      memset(v181, 0, sizeof(v181));
      v182 = 0;
      v183 = 0;
      v184 = 0;
      v185 = 0;
      if (!(*(unsigned int (**)(uint64_t, __int128 *, void **, double *, _QWORD, int *, double))(*(_QWORD *)(v92 + 32) + 96))(v92 + 32, &v153, &v180, &v146, 0, v179, v68))
      {
        v140 = v15;
        v107 = v40;
        *(double *)v93.i64 = v146;
        v180 = 0;
        v181[0] = 0.0;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v180, 0, v93, v94);
        v110 = CNTimeSpan::operator-((uint64_t)&v153, &v180, v108, v109);
        v112 = v110;
        v113 = v111;
        v114 = v156;
        if (v156 < v157)
        {
          v83 = 0;
          *v156 = v110;
          v114[1] = v111;
          v156 = v114 + 2;
          v82 = 1;
          v40 = v107;
          v15 = v140;
          goto LABEL_101;
        }
        v115 = ((char *)v156 - (_BYTE *)v155) >> 4;
        v116 = v115 + 1;
        if ((unint64_t)(v115 + 1) >> 60)
          sub_18D07AFE4();
        v117 = (char *)v157 - (_BYTE *)v155;
        if (((char *)v157 - (_BYTE *)v155) >> 3 > v116)
          v116 = v117 >> 3;
        if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF0)
          v118 = 0xFFFFFFFFFFFFFFFLL;
        else
          v118 = v116;
        if (v118)
          v119 = (char *)sub_18D16735C((uint64_t)&v157, v118);
        else
          v119 = 0;
        v120 = (uint64_t *)&v119[16 * v115];
        *v120 = v112;
        v120[1] = v113;
        v122 = (char *)v155;
        v121 = (char *)v156;
        v123 = (char *)v120;
        v40 = v107;
        if (v156 != v155)
        {
          do
          {
            *((_OWORD *)v123 - 1) = *((_OWORD *)v121 - 1);
            v123 -= 16;
            v121 -= 16;
          }
          while (v121 != v122);
          v121 = (char *)v155;
        }
        v15 = v140;
        v124 = v120 + 2;
        v155 = v123;
        v156 = v120 + 2;
        v157 = (uint64_t *)&v119[16 * v118];
        if (v121)
          operator delete(v121);
        v83 = 0;
        v156 = v124;
        goto LABEL_100;
      }
      LOWORD(v179[0]) = 12;
      v145 = 3;
      sub_18D17FE1C((uint64_t)&v154, &v180);
      v100 = &v180;
      if (v181[1] < 0.0)
        LOBYTE(v100) = (_BYTE)v180;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, &v145, "#gmp,EstimateCoarseReceiverTaiTime,could not use SV because clock offset could not be evaluated,SV,%s", v95, v96, v97, v98, v99, (char)v100);
    }
    else
    {
      LOWORD(v179[0]) = 12;
      LOBYTE(v146) = 3;
      sub_18D17FE1C((uint64_t)&v154, &v180);
      v81 = &v180;
      if (v181[1] < 0.0)
        LOBYTE(v81) = (_BYTE)v180;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, (unsigned __int8 *)&v146, "#gmp,EstimateCoarseReceiverTaiTime,could not evaluate CNSatId,SV,%s", v76, v77, v78, v79, v80, (char)v81);
    }
    if (SHIBYTE(v181[1]) < 0)
      operator delete(v180);
    v82 = 0;
    v83 = 1;
LABEL_101:
    if (v148 < 0)
    {
      operator delete(__p[0]);
      if ((v82 & 1) != 0)
        goto LABEL_106;
    }
    else if ((v82 & 1) != 0)
    {
      goto LABEL_106;
    }
    if (!v83)
      goto LABEL_116;
LABEL_106:
    v39 += 200;
  }
  while (v39 != v38);
  v125 = v155;
  v126 = v156;
  v127 = v144;
  if (v155 != v156)
  {
    v180 = 0;
    v181[0] = 0.0;
    v128 = (int8x16_t *)v155;
    do
    {
      v129 = *v128++;
      *(int8x16_t *)__p = v129;
      v130 = CNTimeSpan::operator+((uint64_t)&v180, __p, v129, v37);
      v180 = (void *)v130;
      v181[0] = v131;
    }
    while (v128 != (int8x16_t *)v126);
    v133 = ((char *)v126 - v125) >> 4;
    *(double *)v37.i64 = (double)v133;
    *(double *)v132.i64 = (v131 + (double)(v130 % v133)) / (double)v133;
    __p[0] = 0;
    __p[1] = 0;
    CNTimeSpan::SetTimeSpan((uint64_t *)__p, v130 / v133, v132, v37);
    v134 = *(int8x16_t *)__p;
    *(_OWORD *)v142 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = (void *)0x3FB2F1A9FBE76C8BLL;
    *(_QWORD *)v142 = CNTimeSpan::operator+(v142, __p, v134, v135);
    *(_QWORD *)(v142 + 8) = v136;
    v137 = 1;
    goto LABEL_117;
  }
LABEL_115:
  LOWORD(v180) = 12;
  LOBYTE(__p[0]) = 3;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)__p, "#gmp,EstimateCoarseReceiverTaiTime,could not compute time because no SVs with pertinent information were available,svs-with-time,%i", v32, v33, v34, v35, v36, v127);
LABEL_116:
  v137 = 0;
LABEL_117:
  if (v155)
  {
    v156 = (uint64_t *)v155;
    operator delete(v155);
  }
  return v137;
}

void sub_18D268D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D268E30(uint64_t result, unint64_t a2, double *a3, int *a4)
{
  uint64_t v6;
  double v8;
  BOOL v9;
  double v10;
  double v11;
  int v12;

  v6 = result;
  if (!a2)
  {
    v12 = 0;
    v11 = *(double *)(result + 40) * 0.000000001;
    goto LABEL_15;
  }
  result = sub_18D26FB14((int *)result);
  if ((_DWORD)result
    && (*(_QWORD *)(v6 + 80) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && *(double *)(v6 + 88) > 0.0)
  {
    v8 = *(double *)(v6 + 80) * 0.000000001;
  }
  else
  {
    result = sub_18D26FB14((int *)v6);
    v8 = 0.0;
    if ((_DWORD)result)
    {
      v9 = *(double *)(v6 + 64) > 0.0 && (*(_QWORD *)(v6 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v8 = 0.0;
      if (v9)
        v8 = *(double *)(v6 + 56) * 0.000000001;
    }
  }
  v10 = (*(double *)(v6 + 40) + (double)a2 + (double)a2 * v8) * 0.000000001;
  *a3 = v10;
  *a4 = 0;
  if (v10 >= 604800.0)
  {
    v11 = v10 + -604800.0;
    v12 = 1;
LABEL_15:
    *a3 = v11;
    *a4 = v12;
  }
  return result;
}

uint64_t sub_18D268F44(uint64_t result, unint64_t a2, double *a3, int *a4)
{
  uint64_t v6;
  double v8;
  BOOL v9;
  double v10;
  double v11;
  int v12;

  v6 = result;
  if (!a2)
  {
    v12 = 0;
    v11 = *(double *)(result + 40) * 0.000000001;
    goto LABEL_15;
  }
  result = sub_18D26FB14((int *)result);
  if ((_DWORD)result
    && (*(_QWORD *)(v6 + 80) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && *(double *)(v6 + 88) > 0.0)
  {
    v8 = *(double *)(v6 + 80) * 0.000000001;
  }
  else
  {
    result = sub_18D26FB14((int *)v6);
    v8 = 0.0;
    if ((_DWORD)result)
    {
      v9 = *(double *)(v6 + 64) > 0.0 && (*(_QWORD *)(v6 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v8 = 0.0;
      if (v9)
        v8 = *(double *)(v6 + 56) * 0.000000001;
    }
  }
  v10 = (*(double *)(v6 + 40) + (double)a2 + (double)a2 * v8) * 0.000000001;
  *a3 = v10;
  *a4 = 0;
  if (v10 >= 86400.0)
  {
    v11 = v10 + -86400.0;
    v12 = 1;
LABEL_15:
    *a3 = v11;
    *a4 = v12;
  }
  return result;
}

BOOL raven::GnssMeasurementPreprocessor::DetermineNearestReceiverTaiTimeMillisecond(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  int8x16_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int8x16_t v73;
  int8x16_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  float v88;
  _BOOL4 v89;
  float v90;
  float v91;
  int8x16_t v92;
  int8x16_t v93;
  uint64_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  void *v110;
  int v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _BOOL4 v120;
  int v121;
  int v122;
  uint64_t *v123;
  char *v124;
  __int128 v125;
  unint64_t v126;
  unint64_t v127;
  void *v128;
  __int128 v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char v145;
  unint64_t v146;
  _OWORD *v147;
  char *v148;
  uint64_t v150[2];
  double v151;
  double v152;
  int v153;
  uint64_t v154;
  __int128 v155;
  unint64_t v156;
  void *v157;
  uint64_t *v158;
  unint64_t v159;
  __int16 v160;
  __int128 v161;
  __int128 v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  __int16 v167;
  __int128 v168;
  __int128 v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  __int16 v174;
  __int128 v175;
  __int128 v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181[2];
  _BYTE __p[24];
  __int128 v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  __int128 v188;
  char v189;
  unsigned __int8 v190;
  int v191;
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      *(_WORD *)__p = 12;
      LOBYTE(v174) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v174, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,not configured", v12, v13, v14, v15, v16, v139);
    }
    return 0;
  }
  v11 = *(double *)(a1 + 760) + *(double *)(a1 + 784);
  a10.i64[0] = 0x41E2A05F20000000;
  if (v11 > 2500000000.0)
  {
    *(_WORD *)__p = 12;
    LOBYTE(v174) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v174, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,Position uncertainty is too high,var,%.3lf", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, SLOBYTE(v11));
    return 0;
  }
  v174 = 0;
  v175 = 0u;
  v176 = 0u;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v167 = 0;
  v168 = 0u;
  v169 = 0u;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v160 = 0;
  v161 = 0u;
  v162 = 0u;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v21 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v174, 0.0, a10, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v30 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v167, v22, v23, v24, v25, v26, v27, v28, v29);
  v37 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGalileo((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v160, v31, v32, v33, v34, v35, v36);
  v147 = a4;
  v175 = 0uLL;
  v168 = 0uLL;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v40 = *(_QWORD *)(a2 + 72);
  v39 = *(_QWORD *)(a2 + 80);
  if (v40 != v39)
  {
    v144 = v30;
    v145 = v37;
    v41 = 0;
    v42 = a3;
    v148 = 0;
    v146 = 0;
    while (1)
    {
      v43 = *(unsigned __int8 *)(v40 + 8);
      v44 = v43 > 9;
      v45 = (1 << v43) & 0x2BB;
      if (v44 || v45 == 0)
      {
        v47 = *(unsigned __int8 *)(v40 + 197);
        if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 3792))
          v81 = 1;
        else
          v81 = v47 == 0;
        if (!v81)
        {
          if (*(_BYTE *)(v40 + 196) == 1)
            goto LABEL_141;
          goto LABEL_15;
        }
      }
      else
      {
        v47 = *(unsigned __int8 *)(v40 + 197);
      }
      if (!v47)
        goto LABEL_141;
LABEL_15:
      LODWORD(v156) = 0;
      WORD2(v156) = 32512;
      v155 = 0uLL;
      v48 = *(_DWORD *)(v40 + 192);
      if ((v48 & 0x7FFFFFFFu) > 0x7F7FFFFF)
        goto LABEL_141;
      v154 = 0;
      v153 = 0;
      sub_18D268E30(v40, *(_QWORD *)(a1 + 2304), (double *)&v154, &v153);
      if ((*(_DWORD *)v40 == 16 || *(_DWORD *)v40 == 1)
        && *(_BYTE *)(v40 + 8) == 1
        && *(_BYTE *)(v40 + 9)
        && *(_BYTE *)(v40 + 12)
        && sub_18D26FB14((int *)v40)
        && *(double *)(v40 + 40) >= 0.0
        && (v91 = *(float *)(v40 + 48), v91 > 0.0)
        && v91 < 1955.03421)
      {
        v59 = *(_BYTE *)(v40 + 9) && *(_BYTE *)(v40 + 10) && *(_BYTE *)(v40 + 12) != 0;
        if (!*(_BYTE *)(a1 + 2208))
        {
          LOWORD(v188) = 12;
          LOBYTE(v181[0]) = 3;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v188, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,GPS week number is not available", v49, v50, v51, v52, v53, v139);
          goto LABEL_141;
        }
        *(_DWORD *)__p = v153 + *(_DWORD *)(a1 + 2212);
        if ((v21 & 1) == 0)
        {
          LOWORD(v188) = 12;
          LOBYTE(v181[0]) = 3;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v188, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,GPS UTC info not available", v49, v50, v51, v52, v53, v139);
          goto LABEL_141;
        }
        *(_QWORD *)&__p[8] = v154;
        cnnavigation::TAITime::TAITime(&v188, (double *)__p, (cnnavigation::GNSSUTCParameters *)&v174);
        v155 = v188;
        v111 = *(_DWORD *)v40;
        WORD2(v156) = *(_WORD *)(v40 + 4);
        LODWORD(v156) = v111;
        v60 = 1575420000.0;
      }
      else
      {
        if (*(_DWORD *)v40 == 8 && *(_BYTE *)(v40 + 8) == 7)
        {
          if (*(_BYTE *)(v40 + 9))
          {
            if (*(_BYTE *)(v40 + 12))
            {
              if (sub_18D26FB14((int *)v40) && *(double *)(v40 + 40) >= 0.0)
              {
                v88 = *(float *)(v40 + 48);
                if (v88 > 0.0 && v88 < 1955.03421)
                {
                  if (*(_BYTE *)(v40 + 9))
                  {
                    if (*(_BYTE *)(v40 + 11))
                      v89 = *(_BYTE *)(v40 + 12) != 0;
                    else
                      v89 = 0;
                    if (*(_BYTE *)(v40 + 10))
                    {
                      v120 = *(_BYTE *)(v40 + 12) != 0;
LABEL_113:
                      if (!*(_BYTE *)(a1 + 2208))
                      {
                        LOWORD(v188) = 12;
                        LOBYTE(v181[0]) = 3;
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v188, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,Galileo week number is not available", v54, v55, v56, v57, v58, v139);
LABEL_118:
                        v42 = a3;
                        goto LABEL_141;
                      }
                      *(_DWORD *)__p = *(_DWORD *)(a1 + 2212) + v153 - 1024;
                      if ((v145 & 1) == 0)
                      {
                        LOWORD(v188) = 12;
                        LOBYTE(v181[0]) = 3;
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v188, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,Galileo UTC info not available", v54, v55, v56, v57, v58, v139);
                        goto LABEL_118;
                      }
                      *(_QWORD *)&__p[8] = v154;
                      cnnavigation::TAITime::TAITime(&v188, (double *)__p, (cnnavigation::GNSSUTCParameters *)&v160);
                      v59 = v89 || v120;
                      v155 = v188;
                      v121 = *(_DWORD *)v40;
                      WORD2(v156) = *(_WORD *)(v40 + 4);
                      LODWORD(v156) = v121;
                      v60 = 1575420000.0;
                      v42 = a3;
                      goto LABEL_36;
                    }
                  }
                  else
                  {
                    v89 = 0;
                  }
                  v120 = 0;
                  goto LABEL_113;
                }
              }
            }
          }
        }
        v59 = 0;
        v60 = 0.0;
        if (*(_DWORD *)v40 == 2 && *(_BYTE *)(v40 + 8) == 3)
        {
          if (*(_BYTE *)(v40 + 9) && *(_BYTE *)(v40 + 13) && sub_18D26FB14((int *)v40) && *(double *)(v40 + 40) >= 0.0)
          {
            v59 = 0;
            v90 = *(float *)(v40 + 48);
            if (v90 > 0.0 && v90 < 3913.89432)
            {
              v59 = *(_BYTE *)(v40 + 9) && *(_BYTE *)(v40 + 10) && *(_BYTE *)(v40 + 11) && *(_BYTE *)(v40 + 13) != 0;
              *((_QWORD *)&v188 + 1) = 0;
              if (!*(_BYTE *)(a1 + 2216))
              {
                *(_WORD *)__p = 12;
                LOBYTE(v181[0]) = 3;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,Glonass day number is not available", v61, v62, v63, v64, v65, v139);
                goto LABEL_141;
              }
              LODWORD(v188) = *(_DWORD *)(a1 + 2220);
              if ((v144 & 1) == 0)
              {
                *(_WORD *)__p = 12;
                LOBYTE(v181[0]) = 3;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,GLONASS UTC info not available", v61, v62, v63, v64, v65, v139);
                goto LABEL_141;
              }
              LODWORD(v181[0]) = 0;
              sub_18D268F44(v40, *(_QWORD *)(a1 + 2304), (double *)&v188 + 1, (int *)v181);
              LODWORD(v188) = v188 + LODWORD(v181[0]);
              cnnavigation::TAITime::TAITime(__p, (int *)&v188, (cnnavigation::GNSSUTCParameters *)&v167);
              v155 = *(_OWORD *)__p;
              v103 = *(char *)(v40 + 5);
              if ((v103 - 7) < 0xFFFFFFF2)
              {
                LOWORD(v150[0]) = 12;
                LOBYTE(v152) = 4;
                sub_18D17FE1C(v40, __p);
                v109 = __p;
                if (__p[23] < 0)
                  LOBYTE(v109) = __p[0];
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v150, (unsigned __int8 *)&v152, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,could not determine GLONASS center frequency,SV,%s", v104, v105, v106, v107, v108, (char)v109);
                if ((__p[23] & 0x80000000) == 0)
                  goto LABEL_141;
                v110 = *(void **)__p;
                goto LABEL_140;
              }
              v60 = (double)(char)v103 * 562500.0 + 1602000000.0;
              v122 = *(_DWORD *)v40;
              WORD2(v156) = *(_WORD *)(v40 + 4);
              LODWORD(v156) = v122;
            }
          }
          else
          {
            v59 = 0;
          }
        }
      }
LABEL_36:
      if (!sub_18D185074(&v156))
        goto LABEL_141;
      sub_18D0778AC(&v188, "");
      v190 = 0;
      v191 = -1;
      if ((raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId((cnprint::CNPrinter *)a1, &v156, (uint64_t)&v188, v66, v67, v68, v69, v70) & 1) == 0|| a3 + 8 == sub_18D185488(v42, (uint64_t)&v188))
      {
        goto LABEL_138;
      }
      v71 = *sub_18D271BD4(v42, __p, v190, v191);
      if (!v71)
        sub_18D077838("map::at:  key not found");
      v152 = 0.0;
      if (!raven::GnssMeasurementPreprocessor::CalculateApproximateTimeOfFlight((double *)a1, (uint64_t)&v155, *(_QWORD *)(v71 + 64), &v152))
      {
        LOWORD(v181[0]) = 12;
        LOBYTE(v150[0]) = 3;
        sub_18D17FE1C((uint64_t)&v156, __p);
        v87 = __p;
        if (__p[23] < 0)
          LOBYTE(v87) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v181, (unsigned __int8 *)v150, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,could not calculate time of flight,SV,%s", v82, v83, v84, v85, v86, (char)v87);
        v42 = a3;
        goto LABEL_54;
      }
      v151 = 0.0;
      v72 = *(_QWORD *)(v71 + 64);
      *(_WORD *)__p = 0;
      *(_OWORD *)&__p[8] = 0u;
      v183 = 0u;
      v184 = 0;
      v185 = 0;
      v186 = 0;
      v187 = 0;
      if ((*(unsigned int (**)(uint64_t, __int128 *, _BYTE *, double *, _QWORD, uint64_t *, double))(*(_QWORD *)(v72 + 32) + 96))(v72 + 32, &v155, __p, &v151, 0, v181, v60))
      {
        LOWORD(v181[0]) = 12;
        LOBYTE(v150[0]) = 3;
        sub_18D17FE1C((uint64_t)&v156, __p);
        v42 = a3;
        v80 = __p;
        if (__p[23] < 0)
          LOBYTE(v80) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v181, (unsigned __int8 *)v150, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,could not eval clock offset,SV,%s", v75, v76, v77, v78, v79, (char)v80);
LABEL_54:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_138;
      }
      *(double *)v73.i64 = v151;
      v181[0] = 0;
      v181[1] = 0;
      CNTimeSpan::SetTimeSpan(v181, 0, v73, v74);
      *(_QWORD *)__p = CNTimeSpan::operator-((uint64_t)&v155, v181, v92, v93);
      *(_QWORD *)&__p[8] = v94;
      *(double *)v95.i64 = v152;
      v150[0] = 0;
      v150[1] = 0;
      CNTimeSpan::SetTimeSpan(v150, 0, v95, v96);
      v99 = CNTimeSpan::operator+((uint64_t)__p, v150, v97, v98);
      v42 = a3;
      if (v59)
      {
        v101 = (char *)v158;
        if ((unint64_t)v158 >= v159)
        {
          v141 = v99;
          v142 = v100;
          v112 = (char *)v157;
          v140 = 0xAAAAAAAAAAAAAAABLL * (((char *)v158 - (_BYTE *)v157) >> 3);
          v113 = v140 + 1;
          if (v140 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_18D07AFE4();
          if (0x5555555555555556 * ((uint64_t)(v159 - (_QWORD)v157) >> 3) > v113)
            v113 = 0x5555555555555556 * ((uint64_t)(v159 - (_QWORD)v157) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - (_QWORD)v157) >> 3) >= 0x555555555555555)
            v114 = 0xAAAAAAAAAAAAAAALL;
          else
            v114 = v113;
          if (v114)
            v114 = (unint64_t)sub_18D263FF4(v114);
          else
            v115 = 0;
          v123 = (uint64_t *)(v114 + 24 * v140);
          *v123 = v141;
          v123[1] = v142;
          *((_DWORD *)v123 + 4) = v48;
          v124 = (char *)v123;
          if (v101 != v112)
          {
            do
            {
              v125 = *(_OWORD *)(v101 - 24);
              *((_DWORD *)v124 - 2) = *((_DWORD *)v101 - 2);
              *(_OWORD *)(v124 - 24) = v125;
              v124 -= 24;
              v101 -= 24;
            }
            while (v101 != v112);
            v101 = (char *)v157;
          }
          v102 = v123 + 3;
          v157 = v124;
          v158 = v123 + 3;
          v159 = v114 + 24 * v115;
          if (v101)
            operator delete(v101);
        }
        else
        {
          *v158 = v99;
          *((_QWORD *)v101 + 1) = v100;
          v102 = (uint64_t *)(v101 + 24);
          *((_DWORD *)v101 + 4) = v48;
        }
        v158 = v102;
      }
      else
      {
        if ((unint64_t)v41 < v146)
        {
          *(_QWORD *)v41 = v99;
          *((_QWORD *)v41 + 1) = v100;
          *((_DWORD *)v41 + 4) = v48;
          v41 += 24;
          goto LABEL_138;
        }
        v143 = v100;
        v116 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v148) >> 3) + 1;
        if (v116 > 0xAAAAAAAAAAAAAAALL)
          sub_18D07AFE4();
        v117 = v99;
        if (0x5555555555555556 * ((uint64_t)(v146 - (_QWORD)v148) >> 3) > v116)
          v116 = 0x5555555555555556 * ((uint64_t)(v146 - (_QWORD)v148) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - (_QWORD)v148) >> 3) >= 0x555555555555555)
          v118 = 0xAAAAAAAAAAAAAAALL;
        else
          v118 = v116;
        if (v118)
          v118 = (unint64_t)sub_18D263FF4(v118);
        else
          v119 = 0;
        v126 = v118 + 8 * ((v41 - v148) >> 3);
        *(_QWORD *)v126 = v117;
        *(_QWORD *)(v126 + 8) = v143;
        *(_DWORD *)(v126 + 16) = v48;
        if (v41 == v148)
        {
          v130 = (char *)(v118 + 8 * ((v41 - v148) >> 3));
          v128 = v148;
        }
        else
        {
          v127 = v118 + 8 * ((v41 - v148) >> 3);
          v128 = v148;
          do
          {
            v129 = *(_OWORD *)(v41 - 24);
            v130 = (char *)(v127 - 24);
            *(_DWORD *)(v127 - 8) = *((_DWORD *)v41 - 2);
            *(_OWORD *)(v127 - 24) = v129;
            v41 -= 24;
            v127 -= 24;
          }
          while (v41 != v148);
        }
        v146 = v118 + 24 * v119;
        v41 = (char *)(v126 + 24);
        if (v128)
          operator delete(v128);
        v148 = v130;
      }
      v42 = a3;
LABEL_138:
      if (v189 < 0)
      {
        v110 = (void *)v188;
LABEL_140:
        operator delete(v110);
      }
LABEL_141:
      v40 += 200;
      if (v40 == v39)
        goto LABEL_144;
    }
  }
  v148 = 0;
  v41 = 0;
LABEL_144:
  raven::GnssMeasurementPreprocessor::GetTimeEstimateWithBitSync((uint64_t *)&v157, (uint64_t)__p, v38);
  if ((_BYTE)v183)
  {
    *a5 = __p[16];
    *a4 = *(_OWORD *)__p;
    v17 = 1;
  }
  else
  {
    v17 = v41 != v148;
    if (v41 == v148)
    {
      LOWORD(v181[0]) = 12;
      LOBYTE(v155) = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v181, (unsigned __int8 *)&v155, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,could not compute time", v131, v132, v133, v134, v135, v139);
    }
    else
    {
      v136 = *v148;
      v137 = *(_QWORD *)(v148 + 1);
      *(_QWORD *)((char *)&v188 + 7) = *((_QWORD *)v148 + 1);
      *(_QWORD *)&v188 = v137;
      *a5 = 0;
      *(_BYTE *)v147 = v136;
      *(_QWORD *)((char *)v147 + 1) = v188;
      *((_QWORD *)v147 + 1) = *(_QWORD *)((char *)&v188 + 7);
      LOWORD(v181[0]) = 12;
      LOBYTE(v155) = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v181, (unsigned __int8 *)&v155, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,using receiver time without bit edge confirmation", v131, v132, v133, v134, v135, v139);
    }
  }
  if (v148)
    operator delete(v148);
  if (v157)
    operator delete(v157);
  return v17;
}

void sub_18D269C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;

  if (a70 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a33)
    operator delete(a33);
  _Unwind_Resume(a1);
}

uint64_t *raven::GnssMeasurementPreprocessor::GetTimeEstimateWithBitSync@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, int8x16_t a3@<Q1>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  int v19;
  void **v20;
  _QWORD *v21;
  unint64_t v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD **v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *i;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  void *v38;
  uint64_t *v39;
  int v40;
  char v41;
  unint64_t v42;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  int8x16_t v47;
  int8x16_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  char v52;
  _BYTE *v54;
  uint64_t v55[2];
  unsigned __int8 v56;
  void *__p[2];
  __int128 v58;
  float v59;

  v4 = *result;
  v5 = result[1];
  if (*result == v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return result;
  }
  v6 = result;
  v7 = 0uLL;
  *(_OWORD *)__p = 0u;
  v58 = 0u;
  v59 = 1.0;
  v8 = v4 + 24;
  v9 = v4;
  if (v4 + 24 != v5)
  {
    v9 = v4;
    do
    {
      v7.i32[0] = *(_DWORD *)(v9 + 16);
      a3.i32[0] = *(_DWORD *)(v8 + 16);
      if (*(float *)v7.i32 < *(float *)a3.i32)
        v9 = v8;
      v8 += 24;
    }
    while (v8 != v5);
  }
  v10 = 0;
  do
  {
    v11 = CNTimeSpan::operator-(v4, (_QWORD *)v9, v7, a3);
    *(double *)v7.i64 = (v18 + (double)v11) * 1000.0;
    *(double *)a3.i64 = fabs(*(double *)v7.i64);
    if (*(double *)a3.i64 > 10.0)
      goto LABEL_82;
    v19 = llround(*(double *)v7.i64);
    if (v10)
    {
      *(int8x8_t *)v7.i8 = vcnt_s8((int8x8_t)v10);
      v7.i16[0] = vaddlv_u8(*(uint8x8_t *)v7.i8);
      if (v7.u32[0] > 1uLL)
      {
        v3 = v19;
        if (v10 <= v19)
          v3 = v19 % v10;
      }
      else
      {
        v3 = (v10 - 1) & v19;
      }
      v20 = (void **)*((_QWORD *)__p[0] + v3);
      if (v20)
      {
        v21 = *v20;
        if (*v20)
        {
          do
          {
            v22 = v21[1];
            if (v22 == v19)
            {
              v17 = *((unsigned int *)v21 + 4);
              if ((_DWORD)v17 == v19)
                goto LABEL_81;
            }
            else
            {
              if (v7.u32[0] > 1uLL)
              {
                if (v22 >= v10)
                  v22 %= v10;
              }
              else
              {
                v22 &= v10 - 1;
              }
              if (v22 != v3)
                break;
            }
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
      }
    }
    v21 = operator new(0x20uLL);
    *v21 = 0;
    v21[1] = v19;
    *((_DWORD *)v21 + 4) = v19;
    v21[3] = 0;
    *(float *)v7.i32 = (float)(unint64_t)(*((_QWORD *)&v58 + 1) + 1);
    *(float *)a3.i32 = v59;
    if (!v10 || (float)(v59 * (float)v10) < *(float *)v7.i32)
    {
      v23 = (v10 & (v10 - 1)) != 0;
      v17 = 1;
      if (v10 < 3)
        v23 = 1;
      v24 = v23 | (2 * v10);
      *(float *)v7.i32 = *(float *)v7.i32 / v59;
      v25 = vcvtps_u32_f32(*(float *)v7.i32);
      if (v24 <= v25)
        prime = (int8x8_t)v25;
      else
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v10 = (unint64_t)__p[1];
      }
      if (*(_QWORD *)&prime > v10)
        goto LABEL_37;
      if (*(_QWORD *)&prime < v10)
      {
        *(float *)a3.i32 = v59;
        v31 = vcvtps_u32_f32((float)*((unint64_t *)&v58 + 1) / v59);
        if (v10 < 3
          || (*(int8x8_t *)v7.i8 = vcnt_s8((int8x8_t)v10), v7.i16[0] = vaddlv_u8(*(uint8x8_t *)v7.i8), v7.u32[0] > 1uLL))
        {
          v31 = std::__next_prime(v31);
        }
        else
        {
          v32 = 1 << -(char)__clz(v31 - 1);
          if (v31 >= 2)
            v31 = v32;
        }
        if (*(_QWORD *)&prime <= v31)
          prime = (int8x8_t)v31;
        if (*(_QWORD *)&prime >= v10)
        {
          v10 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_37:
            if (*(_QWORD *)&prime >> 61)
              sub_18D0788A0();
            v27 = operator new(8 * *(_QWORD *)&prime);
            v28 = __p[0];
            __p[0] = v27;
            if (v28)
              operator delete(v28);
            v29 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v29++) = 0;
            while (*(_QWORD *)&prime != v29);
            v30 = (_QWORD **)v58;
            if ((_QWORD)v58)
            {
              v17 = *(_QWORD *)(v58 + 8);
              *(int8x8_t *)v7.i8 = vcnt_s8(prime);
              v7.i16[0] = vaddlv_u8(*(uint8x8_t *)v7.i8);
              if (v7.u32[0] > 1uLL)
              {
                if (v17 >= *(_QWORD *)&prime)
                  v17 %= *(_QWORD *)&prime;
              }
              else
              {
                v17 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v17) = &v58;
              for (i = *v30; i; v17 = v34)
              {
                v34 = i[1];
                if (v7.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v17)
                {
                  if (!*((_QWORD *)__p[0] + v34))
                  {
                    *((_QWORD *)__p[0] + v34) = v30;
                    goto LABEL_62;
                  }
                  *v30 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v34);
                  **((_QWORD **)__p[0] + v34) = i;
                  i = v30;
                }
                v34 = v17;
LABEL_62:
                v30 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v10 = (unint64_t)prime;
            goto LABEL_66;
          }
          v38 = __p[0];
          __p[0] = 0;
          if (v38)
            operator delete(v38);
          v10 = 0;
          __p[1] = 0;
        }
      }
LABEL_66:
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v10 <= v19)
          v3 = v19 % v10;
        else
          v3 = v19;
      }
      else
      {
        v3 = (v10 - 1) & v19;
      }
    }
    v35 = __p[0];
    v36 = (_QWORD *)*((_QWORD *)__p[0] + v3);
    if (v36)
    {
      *v21 = *v36;
    }
    else
    {
      *v21 = v58;
      *(_QWORD *)&v58 = v21;
      v35[v3] = &v58;
      if (!*v21)
        goto LABEL_80;
      v37 = *(_QWORD *)(*v21 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v37 >= v10)
          v37 %= v10;
      }
      else
      {
        v37 &= v10 - 1;
      }
      v36 = (char *)__p[0] + 8 * v37;
    }
    *v36 = v21;
LABEL_80:
    ++*((_QWORD *)&v58 + 1);
LABEL_81:
    ++v21[3];
LABEL_82:
    v4 += 24;
  }
  while (v4 != v5);
  if (!*((_QWORD *)&v58 + 1))
  {
    LOWORD(v55[0]) = 12;
    v56 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v55, &v56, "#gmp,Unexpected empty ms_offset_map", v12, v13, v14, v15, v16, a2);
LABEL_114:
    v52 = 0;
    v50 = v54;
    *v54 = 0;
    goto LABEL_115;
  }
  v39 = (uint64_t *)v58;
  if (!(_QWORD)v58)
  {
    LOWORD(v55[0]) = 12;
    v56 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v55, &v56, "#gmp,Unexpected empty opt_consensus", v12, v13, v14, v15, v16, a2);
    goto LABEL_114;
  }
  v40 = 0;
  v41 = 1;
  do
  {
    if ((v41 & 1) != 0)
    {
      v40 = *((_DWORD *)v39 + 4);
      v17 = v39[3];
    }
    else if (v39[3] > v17)
    {
      v40 = *((_DWORD *)v39 + 4);
      v17 = v39[3];
    }
    v41 = 0;
    v39 = (uint64_t *)*v39;
  }
  while (v39);
  v42 = 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3);
  v44 = v42 > 2 && v17 > 2;
  v45 = 5 * v17 >= 0xAAAAAAAAAAAAAAACLL * ((v6[1] - *v6) >> 3);
  if (v42 >= 5)
    v46 = v45;
  else
    v46 = v44;
  a3.i64[0] = 0x3F50624DD2F1A9FCLL;
  *(double *)v7.i64 = (double)v40 * 0.001;
  v55[0] = 0;
  v55[1] = 0;
  CNTimeSpan::SetTimeSpan(v55, 0, v7, a3);
  v49 = CNTimeSpan::operator+(v9, v55, v47, v48);
  v50 = (_BYTE *)a2;
  *(_QWORD *)a2 = v49;
  *(_QWORD *)(a2 + 8) = v51;
  *(_BYTE *)(a2 + 16) = v46;
  v52 = 1;
LABEL_115:
  v50[24] = v52;
  return (uint64_t *)sub_18D04344C((uint64_t)__p);
}

void sub_18D26A314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18D04344C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t raven::GnssMeasurementPreprocessor::GetTimeEstimateNoBitSync@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  char v3;

  if (*(_QWORD *)(result + 8) == *(_QWORD *)result)
  {
    v3 = 0;
    v2 = a2;
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)*(_QWORD *)result;
    v2 = a2 + 16;
    v3 = 1;
  }
  *v2 = 0;
  a2[24] = v3;
  return result;
}

uint64_t raven::GnssMeasurementPreprocessor::PopulatePseudorangeMeasurementCorrections(uint64_t a1, cnnavigation::TAITime *a2, uint64_t a3, unsigned __int8 *a4, double *a5, uint64_t a6, double *a7, _DWORD *a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  double v22;
  double *v23;
  double v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t IsValid;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  double v52;
  uint64_t v53;
  double v54;
  cnprint::CNPrinter *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  double v63;
  cnprint::CNPrinter *IonosphericDelay;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  char v79;
  unsigned __int8 v80;
  __int16 v81;
  double v82;
  void *__p;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unsigned __int8 v93[8];
  int64x2_t v94;
  double v95;
  char v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;

  v8 = *a4;
  v9 = *(_QWORD *)(a1 + 1296);
  if (!v9)
    goto LABEL_12;
  v17 = a1 + 1296;
  do
  {
    v18 = *(unsigned __int8 *)(v9 + 32);
    v19 = v18 >= v8;
    if (v18 >= v8)
      v20 = (uint64_t *)v9;
    else
      v20 = (uint64_t *)(v9 + 8);
    if (v19)
      v17 = v9;
    v9 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 1296 || *(unsigned __int8 *)(v17 + 32) > v8)
  {
LABEL_12:
    LOWORD(__p) = 12;
    v93[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, v93, "#gmp,No receiver band corrections available,band,%i", (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8, v8);
    return 0;
  }
  if (v8 == 8)
  {
    v23 = (double *)(a1 + 2176);
  }
  else if (v8 == 6)
  {
    v23 = (double *)(a1 + 2184);
  }
  else
  {
    v22 = 0.0;
    if (v8 != 2)
      goto LABEL_21;
    v23 = (double *)(a1 + 2168);
  }
  v22 = *v23;
LABEL_21:
  v24 = *(double *)(v17 + 48);
  *a8 = *(_DWORD *)(v17 + 56);
  v93[0] = 0;
  v94 = vdupq_n_s64(0x7FF8000000000000uLL);
  v95 = NAN;
  v96 = 0;
  if ((raven::GnssSvDatabase::FetchSvBandCorrection(a1 + 984, a6, a4, v93) & 1) == 0)
  {
    LOWORD(v99[0]) = 12;
    LOBYTE(v97[0]) = 3;
    v29 = *a4;
    sub_18D17FE1C(a3, &__p);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v99, (unsigned __int8 *)v97, "#gmp,No transmit band corrections available,band,%i,SV,%s", v30, v31, v32, v33, v34, v29);
    if ((SHIBYTE(v84) & 0x80000000) == 0)
      return 0;
    v35 = __p;
LABEL_41:
    operator delete(v35);
    return 0;
  }
  IsValid = *(_QWORD *)(a1 + 2544);
  if (IsValid && *(_BYTE *)(a1 + 2296))
  {
    IsValid = cnnavigation::SphericalHarmonicsIonosphereModel::IsValid((cnnavigation::SphericalHarmonicsIonosphereModel *)IsValid, (const cnnavigation::TAITime *)(a1 + 2240));
    v28 = IsValid;
  }
  else
  {
    v28 = 0;
  }
  if (*(_BYTE *)(a1 + 2296))
  {
    IsValid = cnnavigation::ThinShellIonosphereModel::IsValid((cnnavigation::ThinShellIonosphereModel *)(a1 + 2344), (const cnnavigation::TAITime *)(a1 + 2240), v25, v26);
    v36 = IsValid;
    if ((v28 & 1) != 0)
      goto LABEL_36;
  }
  else
  {
    v36 = 0;
    if ((v28 & 1) != 0)
      goto LABEL_36;
  }
  v37 = *(unsigned __int8 *)(a1 + 2336);
  if (*(_BYTE *)(a1 + 2336))
    v38 = v36;
  else
    v38 = 0;
  if ((v38 & 1) == 0)
  {
    v52 = *(double *)&v94.i64[1];
    goto LABEL_51;
  }
LABEL_36:
  v91 = *(_OWORD *)(a1 + 816);
  v92 = *(_QWORD *)(a1 + 832);
  LOWORD(__p) = 0;
  v84 = 0u;
  v85 = 0u;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  IsValid = (*(uint64_t (**)(uint64_t, cnnavigation::TAITime *, void **, __int128 *, void **, void **))(*(_QWORD *)(a6 + 32) + 56))(a6 + 32, a2, &__p, &v90, v99, v97);
  if ((_DWORD)IsValid)
  {
    LOWORD(v97[0]) = 12;
    LOBYTE(v82) = 3;
    sub_18D17FE1C(a3, v99);
    v51 = v99;
    if (v100 < 0)
      LOBYTE(v51) = v99[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v97, (unsigned __int8 *)&v82, "#gmp,#iono,#rof,find sat failed,SV,%s", v46, v47, v48, v49, v50, (char)v51);
    if ((v100 & 0x80000000) == 0)
      return 0;
    v35 = v99[0];
    goto LABEL_41;
  }
  v52 = *(double *)&v94.i64[1];
  if ((v28 & 1) != 0)
  {
    LOWORD(__p) = 0;
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&__p, 0.0, v45, v39, v40, v41, v42, v43, v44);
    v53 = cnnavigation::TAITime::ToGPSTime(a2, (const cnnavigation::GNSSUTCParameters *)&__p);
    v82 = 0.0;
    v55 = (cnprint::CNPrinter *)(*(uint64_t (**)(_QWORD, uint64_t, __int128 *, __int128 *, double *, double, double))(**(_QWORD **)(a1 + 2544) + 16))(*(_QWORD *)(a1 + 2544), v53, &v91, &v90, &v82, v54, *a5);
    if ((_DWORD)v55)
      goto LABEL_68;
    v52 = v82 * 1000000000.0;
    if (cnprint::CNPrinter::GetLogLevel(v55))
      goto LABEL_68;
    v81 = 12;
    v80 = 0;
    v56 = v94.i8[8];
    sub_18D17FE1C(a3, v99);
    sub_18D18482C(*a4, (uint64_t)v97);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, &v80, "#gmp,#rof,sphericalharmonicsionospheremodel,vendor_delay_nsec,%.3f,iono_delay_nsec,%.3f,SV,%s,band,%s", v57, v58, v59, v60, v61, v56);
    if (v98 < 0)
      operator delete(v97[0]);
    if ((v100 & 0x80000000) == 0)
      goto LABEL_68;
    v62 = v99[0];
    goto LABEL_59;
  }
  v37 = *(unsigned __int8 *)(a1 + 2336);
LABEL_51:
  if (!v37 || ((v36 ^ 1) & 1) != 0)
  {
    if (v37)
      v71 = v36;
    else
      v71 = 1;
    if ((v71 & 1) == 0)
    {
      v72 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v72 + 641))
      {
        if (*(_BYTE *)(v72 + 2560) && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)IsValid) <= 1)
        {
          LOWORD(__p) = 12;
          LOBYTE(v99[0]) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)v99, "#gmp,#iono,not using thin shell model, not valid or not converged. Using Klobuchar-model-derived ionospheric delay instead", v73, v74, v75, v76, v77, v79);
        }
      }
    }
    goto LABEL_68;
  }
  v97[0] = 0;
  v63 = *a5;
  *(double *)&__p = *(double *)(*(_QWORD *)(a1 + 8) + 3128) * 0.0174532925;
  IonosphericDelay = (cnprint::CNPrinter *)cnnavigation::ThinShellIonosphereModel::GetIonosphericDelay(a1 + 2344, (uint64_t)&v91, &v90, (double *)v97, (double *)&__p, v63);
  if (!(_DWORD)IonosphericDelay)
  {
    v52 = *(double *)v97 * 1000000000.0;
    if (!cnprint::CNPrinter::GetLogLevel(IonosphericDelay))
    {
      LOWORD(v82) = 12;
      LOBYTE(v81) = 0;
      v65 = v94.i8[8];
      sub_18D17FE1C(a3, &__p);
      sub_18D18482C(*a4, (uint64_t)v99);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v82, (unsigned __int8 *)&v81, "#gmp,#iono,thinshellionospheremodel,vendor_delay_nsec,%.3f,iono_delay_nsec,%.3f,SV,%s,band,%s", v66, v67, v68, v69, v70, v65);
      if (v100 < 0)
        operator delete(v99[0]);
      if (SHIBYTE(v84) < 0)
      {
        v62 = __p;
LABEL_59:
        operator delete(v62);
      }
    }
  }
LABEL_68:
  v78 = *(double *)v94.i64 * 0.299792458;
  *a7 = v52 * 0.299792458;
  a7[1] = v22 * 0.299792458;
  a7[2] = v78;
  a7[3] = v24 * 0.299792458;
  a7[4] = v95 * 0.299792458;
  return 1;
}

void sub_18D26A8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 153) < 0)
    operator delete(a38);
  if (*(char *)(v41 - 129) < 0)
    operator delete(a41);
  _Unwind_Resume(exception_object);
}

uint64_t raven::GnssMeasurementPreprocessor::FormPseudorange(cnprint::CNPrinter *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, char a10)
{
  double v19;
  unsigned int LogLevel;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  float v48;
  char v49;
  _BOOL4 v50;
  char v51;
  float v52;
  uint64_t v53;
  char v54;
  _BOOL4 v55;
  char v56;
  float v57;
  double v58;
  float v59;
  char v60;
  float v61;
  char v62;
  _BOOL4 v63;
  char v64;
  float v65;
  char v66;
  _BOOL4 v67;
  char v68;
  float v69;
  _BOOL4 v70;
  char v71;
  float v72;
  double v73;
  float v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int8x16_t v91;
  int8x16_t v92;
  uint64_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  int v105;
  int8x16_t v106;
  int8x16_t v107;
  double v108;
  int8x16_t v109;
  int8x16_t v110;
  uint64_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  double v115;
  double v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  uint64_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  uint64_t v125;
  int8x16_t v126;
  int8x16_t v127;
  uint64_t v128;
  uint64_t v129;
  int8x16_t v130;
  int8x16_t v131;
  cnprint::CNPrinter *v132;
  double v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int8x16_t v140;
  int8x16_t v141;
  uint64_t v142;
  int8x16_t v143;
  int8x16_t v144;
  uint64_t v145;
  double v146;
  double v147;
  unint64_t v148;
  uint64_t v149;
  double v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  uint64_t v201;
  int v202;
  int v203;
  char v204;
  unsigned __int8 v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  float v209;
  double v210;
  _QWORD v211[2];
  double v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  double v216;
  _BYTE __p[24];
  __int128 v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;

  v216 = a9;
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) > 1)
      return 0;
    *(_WORD *)__p = 12;
    LOBYTE(v213) = 1;
    v39 = "#gmp,FormPseudorange,not configured";
LABEL_8:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, v39, v34, v35, v36, v37, v38, v204);
    return 0;
  }
  v19 = *(double *)(a7 + 248);
  LogLevel = cnprint::CNPrinter::GetLogLevel(a1);
  if (v19 > 200.0)
  {
    if (LogLevel <= 1)
    {
      LOWORD(v211[0]) = 12;
      LOBYTE(v208) = 1;
      v26 = *(_QWORD *)(a7 + 248);
      sub_18D17FE1C(a2, __p);
      v32 = *(unsigned __int8 *)(a2 + 8);
      v214 = 0;
      v215 = 0;
      v213 = 0;
      switch(v32)
      {
        case 0:
          HIBYTE(v215) = 4;
          v33 = 543911509;
          goto LABEL_114;
        case 1:
          HIBYTE(v215) = 4;
          v33 = 1094922572;
          goto LABEL_114;
        case 2:
          HIBYTE(v215) = 4;
          v33 = 538981708;
          goto LABEL_114;
        case 3:
          HIBYTE(v215) = 4;
          v33 = 543568204;
          goto LABEL_114;
        case 4:
          HIBYTE(v215) = 4;
          v33 = 541667650;
          goto LABEL_114;
        case 5:
          HIBYTE(v215) = 4;
          v33 = 541274434;
          goto LABEL_114;
        case 6:
          HIBYTE(v215) = 4;
          v33 = 543240770;
          goto LABEL_114;
        case 7:
          HIBYTE(v215) = 4;
          v33 = 538980677;
          goto LABEL_114;
        case 8:
          HIBYTE(v215) = 4;
          v33 = 543241541;
          goto LABEL_114;
        case 9:
          HIBYTE(v215) = 4;
          v33 = 1112748364;
LABEL_114:
          LODWORD(v213) = v33;
          break;
        case 10:
          HIBYTE(v215) = 3;
          qmemcpy(&v213, "NL5", 3);
          break;
        default:
          break;
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, (unsigned __int8 *)&v208, "#gmp,SV approximate range uncertainty from ephemeris,%.1f,meters exceeds threshold,%.1f,dropping,SV,%s,band,%s", v27, v28, v29, v30, v31, v26);
      if (SHIBYTE(v215) < 0)
        operator delete(v213);
      goto LABEL_117;
    }
    return 0;
  }
  if (!LogLevel)
  {
    LOWORD(v213) = 12;
    LOBYTE(v211[0]) = 0;
    sub_18D17FE1C(a2, __p);
    if (__p[23] >= 0)
      v46 = __p;
    else
      LOBYTE(v46) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v213, (unsigned __int8 *)v211, "#gmp,Processing meas,SV,%s,time,%lf", v41, v42, v43, v44, v45, (char)v46);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  v47 = *(_BYTE *)(a2 + 8);
  switch(v47)
  {
    case 1:
      if (!*(_BYTE *)(a2 + 9))
      {
        v49 = 0;
        goto LABEL_139;
      }
      if (!sub_18D26FB14((int *)a2) || *(double *)(a2 + 40) < 0.0 || (v48 = *(float *)(a2 + 48), v48 <= 0.0))
      {
        v49 = *(_BYTE *)(a2 + 9);
        goto LABEL_139;
      }
      v49 = *(_BYTE *)(a2 + 9);
      if (v48 >= 2001.38457)
      {
LABEL_139:
        *(_WORD *)__p = 12;
        LOBYTE(v213) = 2;
        sub_18D26FB14((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid L1 pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%.3lf,", v152, v153, v154, v155, v156, v49);
        return 0;
      }
      if (!*(_BYTE *)(a2 + 9))
      {
        *(_WORD *)__p = 12;
        LOBYTE(v213) = 5;
        v39 = "#gmp,L1 mod value for PR unavailable";
        goto LABEL_8;
      }
LABEL_70:
      if (!*(_BYTE *)(a2 + 10))
      {
LABEL_97:
        v58 = 0.001;
        goto LABEL_98;
      }
      if (*(_BYTE *)(a2 + 12))
        goto LABEL_72;
      v58 = 6.0;
      if (!*(_BYTE *)(a2 + 11))
        goto LABEL_150;
LABEL_98:
      *(_DWORD *)(a8 + 112) = *(_DWORD *)(a2 + 192);
      *(_DWORD *)(a8 + 96) = 1;
      *(_BYTE *)(a8 + 100) = *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a8 + 189) = a3;
      *(double *)(a8 + 104) = a9;
      v91 = (int8x16_t)vdupq_n_s64(0x3E112E0BE826D695uLL);
      v92 = (int8x16_t)vmulq_f64(vcvtq_f64_s64(vsubq_s64(*(int64x2_t *)(a2 + 16), vdupq_n_s64(*((_QWORD *)a1 + 288) + *(_QWORD *)(a2 + 32)))), (float64x2_t)v91);
      *(int8x16_t *)(a8 + 192) = v92;
      v212 = 0.0;
      v213 = 0;
      v214 = 0x3FB2F1A9FBE76C8BLL;
      *(_QWORD *)__p = CNTimeSpan::operator-(a4, &v213, v92, v91);
      *(_QWORD *)&__p[8] = v93;
      if (!raven::GnssMeasurementPreprocessor::CalculateApproximateTimeOfFlight((double *)a1, (uint64_t)__p, a7, &v212))
      {
        *(_WORD *)__p = 12;
        LOBYTE(v213) = 3;
        v39 = "#gmp,Calculation of approximate time of flight failed";
        goto LABEL_8;
      }
      *(double *)v94.i64 = v212;
      *(_QWORD *)__p = 0;
      *(_QWORD *)&__p[8] = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v94, v95);
      v211[0] = CNTimeSpan::operator-(a4, __p, v96, v97);
      v211[1] = v98;
      v210 = 0.0;
      *(_WORD *)__p = 0;
      *(_OWORD *)&__p[8] = 0u;
      v218 = 0u;
      v219 = 0;
      v220 = 0;
      v221 = 0;
      v222 = 0;
      if ((*(unsigned int (**)(uint64_t, _QWORD *, _BYTE *, double *, _QWORD, void **, double))(*(_QWORD *)(a7 + 32) + 96))(a7 + 32, v211, __p, &v210, 0, &v213, a9))
      {
        LOWORD(v213) = 12;
        LOBYTE(v208) = 3;
        sub_18D17FE1C(a2, __p);
        if (__p[23] >= 0)
          v104 = __p;
        else
          LOBYTE(v104) = __p[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v213, (unsigned __int8 *)&v208, "#gmp,Calculation of satellite clock offset failed,SV,%s,time,%.3lf", v99, v100, v101, v102, v103, (char)v104);
LABEL_117:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        return 0;
      }
      v209 = 0.0;
      v105 = raven::GnssMeasurementPreprocessor::PopulatePseudorangeMeasurementCorrections((uint64_t)a1, (cnnavigation::TAITime *)v211, a2, (unsigned __int8 *)(a2 + 8), &v216, a7, (double *)(a8 + 128), &v209);
      result = 0;
      if (v105)
      {
        v108 = v210;
        v107.i64[0] = 0x3E2CA726EB25F9DBLL;
        *(double *)v106.i64 = v210
                            + (-*(double *)(a8 + 128)
                             - *(double *)(a8 + 152)
                             - *(double *)(a8 + 144)
                             - *(double *)(a8 + 160))
                            * 0.00000000333564095;
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v106, v107);
        v213 = (void *)CNTimeSpan::operator-(a6, __p, v109, v110);
        v214 = v111;
        *(double *)v114.i64 = (double)CNTimeSpan::operator-((uint64_t)v211, &v213, v112, v113);
        v116 = v115 + *(double *)v114.i64;
        *(double *)v117.i64 = v58 * (double)(uint64_t)round((v115 + *(double *)v114.i64) / v58);
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v117, v114);
        *(_QWORD *)&v208 = CNTimeSpan::operator+((uint64_t)&v213, __p, v118, v119);
        *((_QWORD *)&v208 + 1) = v120;
        if (*(_BYTE *)(*((_QWORD *)a1 + 1) + 579) && v58 != 0.001)
        {
          *(double *)v122.i64 = (double)(uint64_t)round(v116 / 0.001);
          *(double *)v121.i64 = *(double *)v122.i64 * 0.001;
          v206 = 0;
          v207 = 0;
          CNTimeSpan::SetTimeSpan(&v206, 0, v121, v122);
          *(_QWORD *)__p = CNTimeSpan::operator+((uint64_t)&v213, &v206, v123, v124);
          *(_QWORD *)&__p[8] = v125;
          v128 = CNTimeSpan::operator-((uint64_t)__p, &v208, v126, v127);
          v132 = (cnprint::CNPrinter *)sub_18D26BC14(v128, v129, v130, v131);
          *(double *)v122.i64 = (double)(uint64_t)v132;
          if ((v133 + (double)(uint64_t)v132) * 1000.0 > 0.1)
          {
            v208 = *(_OWORD *)__p;
            if (!cnprint::CNPrinter::GetLogLevel(v132))
            {
              LOWORD(v206) = 12;
              v205 = 0;
              v134 = sub_18D181C54(a7);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v206, &v205, "#gmp,Detected sync error,SV %s,tx_time,%.6f,error_ms,%.3f,mod_value_ms,%.1f", v135, v136, v137, v138, v139, v134);
            }
          }
          v108 = v210;
        }
        v206 = 0;
        v207 = 0;
        *(double *)v121.i64 = v108;
        CNTimeSpan::SetTimeSpan(&v206, 0, v121, v122);
        *(_QWORD *)__p = CNTimeSpan::operator+((uint64_t)&v208, &v206, v140, v141);
        *(_QWORD *)&__p[8] = v142;
        v145 = CNTimeSpan::operator-(a5, __p, v143, v144);
        *(double *)(a8 + 120) = (v146 + (double)v145) * 299792458.0;
        if (!sub_18D26FB14((int *)a2)
          || (*(_QWORD *)(a2 + 80) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v147 = *(double *)(a2 + 88), v147 <= 0.0))
        {
          if (!sub_18D26FB14((int *)a2)
            || (*(_QWORD *)(a2 + 56) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (v147 = *(double *)(a2 + 64), v147 <= 0.0))
          {
            LOWORD(v206) = 12;
            v205 = 3;
            sub_18D17FE1C(a2, __p);
            if (__p[23] >= 0)
              v188 = __p;
            else
              LOBYTE(v188) = __p[0];
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v206, &v205, "#gmp,Frequency offset unavailable, dropping pseudorange formation,SV,%s", v183, v184, v185, v186, v187, (char)v188);
            goto LABEL_117;
          }
        }
        v148 = *((_QWORD *)a1 + 288);
        v149 = *((_QWORD *)a1 + 1);
        v150 = *(double *)(a7 + 248);
        if (*(_BYTE *)(v149 + 589))
        {
          v151 = v150 * 3.33564095 * (v150 * 3.33564095);
        }
        else
        {
          if (v150 <= 5.0)
          {
            if (*(_BYTE *)(a7 + 256) != 4)
            {
              v151 = 0.0;
              if (*(_BYTE *)(a7 + 256))
                goto LABEL_169;
              LOWORD(v206) = 12;
              v205 = 3;
              sub_18D17FE1C(a2, __p);
              if (__p[23] >= 0)
                v194 = __p;
              else
                LOBYTE(v194) = __p[0];
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v206, &v205, "#gmp,SV position source unknown,SV,%s", v189, v190, v191, v192, v193, (char)v194);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v149 = *((_QWORD *)a1 + 1);
            }
            v151 = 11.1265006;
            goto LABEL_169;
          }
          v151 = (v150 * v150 + -25.0) * 11.1265006;
        }
LABEL_169:
        v195 = v147 * 0.000000001;
        v196 = (double)v148 * 0.000000001 * ((double)v148 * 0.000000001 * 4.903325) / 299792458.0 * 1000000000.0;
        v197 = v195 * (double)v148;
        if (*(_BYTE *)(v149 + 590))
          v198 = *(double *)(v149 + 560) * (float)(v209 * v209);
        else
          v198 = 0.0;
        *(_BYTE *)(a8 + 188) = *(_BYTE *)(a2 + 52);
        raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor((unint64_t)a1, a7, a8, (uint64_t)__p);
        v199 = *(float *)(a2 + 48);
        v200 = v197 * v197 + v196 * v196 + v151 + v198;
        v201 = *((_QWORD *)a1 + 1);
        v202 = *(unsigned __int8 *)(v201 + 545);
        v203 = *(unsigned __int8 *)(v201 + 3828);
        *(float *)(a8 + 168) = sub_18D26BD6C(a10, a7, v202, v203, v199, v200, *(float *)__p);
        if (__p[8])
        {
          *(float *)(a8 + 172) = sub_18D26BD6C(a10, a7, v202 != 0, v203 != 0, v199, v200, *(float *)&__p[4]);
          *(_BYTE *)(a8 + 176) = 1;
        }
        if (__p[16])
        {
          *(float *)(a8 + 180) = sub_18D26BD6C(a10, a7, *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 545), *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 3828), v199, v200, *(float *)&__p[12]);
          *(_BYTE *)(a8 + 184) = 1;
        }
        return 1;
      }
      return result;
    case 2:
      if (*(_BYTE *)(a2 + 9))
      {
        if (sub_18D26FB14((int *)a2) && *(double *)(a2 + 40) >= 0.0 && (v59 = *(float *)(a2 + 48), v59 > 0.0))
        {
          v60 = *(_BYTE *)(a2 + 9);
          if (v59 < 2001.38457)
          {
            if (!*(_BYTE *)(a2 + 9))
            {
              *(_WORD *)__p = 12;
              LOBYTE(v213) = 5;
              v39 = "#gmp,L5 mod value for PR unavailable";
              goto LABEL_8;
            }
            if (!*(_BYTE *)(a2 + 10))
              goto LABEL_97;
            if (!*(_BYTE *)(a2 + 12))
            {
              v58 = 6.0;
              if (!*(_BYTE *)(a2 + 11))
                v58 = 0.01;
              goto LABEL_98;
            }
LABEL_72:
            v58 = 604800.0;
            goto LABEL_98;
          }
        }
        else
        {
          v60 = *(_BYTE *)(a2 + 9);
        }
      }
      else
      {
        v60 = 0;
      }
      *(_WORD *)__p = 12;
      LOBYTE(v213) = 2;
      sub_18D26FB14((int *)a2);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Inalid L5 pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%.3lf", v157, v158, v159, v160, v161, v60);
      return 0;
    case 3:
      v50 = sub_18D26FB14((int *)a2);
      v51 = *(_BYTE *)(a2 + 9);
      if (!v50)
        goto LABEL_145;
      if (*(double *)(a2 + 40) < 0.0)
        goto LABEL_145;
      v52 = *(float *)(a2 + 48);
      if (v52 <= 0.0 || !*(_BYTE *)(a2 + 9))
        goto LABEL_145;
      if (v52 >= 2001.38457)
      {
        v51 = 1;
LABEL_145:
        *(_WORD *)__p = 12;
        LOBYTE(v213) = 2;
        sub_18D26FB14((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid L1f pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%lf", v167, v168, v169, v170, v171, v51);
        return 0;
      }
      *(double *)&v53 = COERCE_DOUBLE(sub_18D26BA00((_BYTE *)(a2 + 9)));
      if (v54)
        goto LABEL_64;
      *(_WORD *)__p = 12;
      LOBYTE(v213) = 5;
      v39 = "#gmp,L1f mod value for PR unavailable";
      goto LABEL_8;
    case 4:
      v67 = sub_18D26FB14((int *)a2);
      v68 = *(_BYTE *)(a2 + 9);
      if (v67 && *(double *)(a2 + 40) >= 0.0)
      {
        v69 = *(float *)(a2 + 48);
        if (v69 > 0.0 && *(_BYTE *)(a2 + 9) && v69 < 2001.38457)
          goto LABEL_70;
      }
      *(_WORD *)__p = 12;
      LOBYTE(v213) = 2;
      sub_18D26FB14((int *)a2);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid B1i pseudorange,b1i-code-lock,%i,sv-time-present,%i,tot-unc,%.3f", v81, v82, v83, v84, v85, v68);
      return 0;
    case 5:
      v70 = sub_18D26FB14((int *)a2);
      v71 = *(_BYTE *)(a2 + 9);
      if (!v70
        || *(double *)(a2 + 40) < 0.0
        || (v72 = *(float *)(a2 + 48), v72 <= 0.0)
        || !*(_BYTE *)(a2 + 9)
        || v72 >= 2001.38457)
      {
        *(_WORD *)__p = 12;
        LOBYTE(v213) = 2;
        sub_18D26FB14((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid B1c pseudorange,b1c-code-lock,%i,sv-time-present,%i,tot-unc,%.3f", v86, v87, v88, v89, v90, v71);
        return 0;
      }
      v73 = 0.01;
      if (*(_BYTE *)(a2 + 10))
        v73 = 18.0;
      if (*(_BYTE *)(a2 + 11))
        v58 = 604800.0;
      else
        v58 = v73;
      goto LABEL_98;
    case 6:
      v55 = sub_18D26FB14((int *)a2);
      v56 = *(_BYTE *)(a2 + 9);
      if (!v55
        || *(double *)(a2 + 40) < 0.0
        || (v57 = *(float *)(a2 + 48), v57 <= 0.0)
        || !*(_BYTE *)(a2 + 9)
        || v57 >= 2001.38457)
      {
        *(_WORD *)__p = 12;
        LOBYTE(v213) = 2;
        sub_18D26FB14((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid B2a pseudorange,b2a-code-lock,%i,sv-time-present,%i,tot-unc,%.3lf", v76, v77, v78, v79, v80, v56);
        return 0;
      }
      if (!*(_BYTE *)(a2 + 10))
        goto LABEL_97;
      if (*(_BYTE *)(a2 + 12))
        goto LABEL_72;
      v58 = 3.0;
      if (!*(_BYTE *)(a2 + 11))
        v58 = 0.005;
      goto LABEL_98;
    case 7:
      if (!sub_18D26FB14((int *)a2)
        || *(double *)(a2 + 40) < 0.0
        || (v61 = *(float *)(a2 + 48), v61 <= 0.0)
        || !*(_BYTE *)(a2 + 9)
        || v61 >= 2001.38457)
      {
        *(_WORD *)__p = 12;
        LOBYTE(v213) = 2;
        v172 = *(_BYTE *)(a2 + 10);
        sub_18D26FB14((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid E1 pseudorange,e1c-code-lock,%i,e1bc-code-lock,%i,sv-time-present,%i,tot-unc,%.3lf", v173, v174, v175, v176, v177, v172);
        return 0;
      }
      *(double *)&v53 = COERCE_DOUBLE(sub_18D26BABC((_BYTE *)(a2 + 9)));
      if (v62)
        goto LABEL_64;
      *(_WORD *)__p = 12;
      LOBYTE(v213) = 5;
      v39 = "#gmp,E1 mod value for PR unavailable";
      goto LABEL_8;
    case 8:
      v63 = sub_18D26FB14((int *)a2);
      v64 = *(_BYTE *)(a2 + 9);
      if (!v63)
        goto LABEL_148;
      if (*(double *)(a2 + 40) < 0.0)
        goto LABEL_148;
      v65 = *(float *)(a2 + 48);
      if (v65 <= 0.0 || !*(_BYTE *)(a2 + 9))
        goto LABEL_148;
      if (v65 >= 2001.38457)
      {
        v64 = 1;
LABEL_148:
        *(_WORD *)__p = 12;
        LOBYTE(v213) = 2;
        sub_18D26FB14((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid E5a pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%.3lf", v178, v179, v180, v181, v182, v64);
        return 0;
      }
      *(double *)&v53 = COERCE_DOUBLE(sub_18D26BB5C((_BYTE *)(a2 + 9)));
      if (v66)
      {
LABEL_64:
        v58 = *(double *)&v53;
        goto LABEL_98;
      }
      *(_WORD *)__p = 12;
      LOBYTE(v213) = 5;
      v39 = "#gmp,E5a mod value for PR unavailable";
      goto LABEL_8;
    case 10:
      if (*(_BYTE *)(a2 + 9))
      {
        if (sub_18D26FB14((int *)a2) && *(double *)(a2 + 40) >= 0.0 && (v74 = *(float *)(a2 + 48), v74 > 0.0))
        {
          v75 = *(_BYTE *)(a2 + 9);
          if (v74 < 2001.38457)
          {
            if (!*(_BYTE *)(a2 + 9))
            {
              *(_WORD *)__p = 12;
              LOBYTE(v213) = 5;
              v39 = "#gmp,NL5 mod value for PR unavailable";
              goto LABEL_8;
            }
            if (!*(_BYTE *)(a2 + 10))
              goto LABEL_97;
            if (!*(_BYTE *)(a2 + 12))
            {
              v58 = 12.0;
              if (*(_BYTE *)(a2 + 11))
                goto LABEL_98;
LABEL_150:
              v58 = 0.02;
              goto LABEL_98;
            }
            goto LABEL_72;
          }
        }
        else
        {
          v75 = *(_BYTE *)(a2 + 9);
        }
      }
      else
      {
        v75 = 0;
      }
      *(_WORD *)__p = 12;
      LOBYTE(v213) = 2;
      sub_18D26FB14((int *)a2);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid L5 pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%.3lf,", v162, v163, v164, v165, v166, v75);
      return 0;
    default:
      *(_WORD *)__p = 12;
      LOBYTE(v213) = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Measurement from band not to be used,band,%i", v21, v22, v23, v24, v25, v47);
      return 0;
  }
}

void sub_18D26B9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D26BA00(_BYTE *a1)
{
  uint64_t v1;
  _BOOL4 v2;
  BOOL v3;
  uint64_t v5;

  if (!*a1)
    return 0;
  v1 = 0x3F847AE147AE147BLL;
  v2 = a1[1] != 0;
  if (!a1[1])
    v1 = 0x3F50624DD2F1A9FCLL;
  if (!a1[2])
    v2 = 1;
  if (a1[1])
    v3 = a1[2] == 0;
  else
    v3 = 1;
  if (!v3)
  {
    if (a1[4])
      return 0x40F5180000000000;
    v2 = 0;
    v1 = 0x3F847AE147AE147BLL;
  }
  if (!a1[1])
    v2 = 1;
  v5 = 0x4000000000000000;
  if (!a1[3])
    v5 = 0x3F947AE147AE147BLL;
  if (v2)
    return v1;
  else
    return v5;
}

uint64_t sub_18D26BABC(_BYTE *a1)
{
  BOOL v1;
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  if (!*a1)
    return 0;
  if (a1[2])
    v1 = a1[3] != 0;
  else
    v1 = 0;
  if (a1[1])
    v3 = a1[3] != 0;
  else
    v3 = 0;
  v4 = v1 || v3;
  v5 = 0x3FB999999999999ALL;
  if (!a1[1])
    v5 = 0x3F70624DD2F1A9FCLL;
  v6 = 0x4000000000000000;
  if (!a1[2])
    v6 = v5;
  if (v4)
    return 0x4122750000000000;
  else
    return v6;
}

uint64_t sub_18D26BB5C(_BYTE *a1)
{
  _BOOL4 v1;
  _BOOL4 v3;
  uint64_t v4;

  if (!*a1)
    return 0;
  if (a1[1])
    v1 = a1[4] != 0;
  else
    v1 = 0;
  if (a1[2])
    v3 = a1[4] != 0;
  else
    v3 = 0;
  if (v1 || v3)
    return 0x4122750000000000;
  if (a1[1] && a1[3])
    return 0x4024000000000000;
  v4 = 0x3F947AE147AE147BLL;
  if (!a1[1])
    v4 = 0x3F50624DD2F1A9FCLL;
  if (a1[2])
    return 0x3FB999999999999ALL;
  else
    return v4;
}

uint64_t sub_18D26BC14(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v5[2];

  *(double *)a4.i64 = (double)a1;
  *(double *)a3.i64 = fabs(*(double *)&a2 + (double)a1);
  v5[0] = 0;
  v5[1] = 0;
  CNTimeSpan::SetTimeSpan(v5, 0, a3, a4);
  return v5[0];
}

unint64_t raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  _DWORD *v8;
  uint64_t v9;
  unint64_t UncertaintyScaleFactor;
  unint64_t v11;

  *(_DWORD *)a4 = 1065353216;
  *(_BYTE *)(a4 + 4) = 0;
  *(_BYTE *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  if (!(*(unsigned __int8 *)(*(_QWORD *)(result + 8) + 549) | *(unsigned __int8 *)(a3 + 188)))
  {
    v5 = result;
    result = *(_QWORD *)(result + 2608);
    if (result)
    {
      v8 = (_DWORD *)(a3 + 96);
      v9 = a3 + 100;
      UncertaintyScaleFactor = raven::GNSSUncertaintyScaling::GNSSUncertaintyWrapper::GetUncertaintyScaleFactor(result, (_DWORD *)(a3 + 96), a3 + 100, v5 + 977, v5 + 888, 0, *(float *)(a3 + 112), *(double *)(a2 + 264), *(float *)(a3 + 168));
      if ((UncertaintyScaleFactor & 0xFF00000000) != 0)
        *(_DWORD *)a4 = UncertaintyScaleFactor;
      v11 = raven::GNSSUncertaintyScaling::GNSSUncertaintyWrapper::GetUncertaintyScaleFactor(*(_QWORD *)(v5 + 2608), v8, v9, v5 + 977, v5 + 888, 1, *(float *)(a3 + 112), *(double *)(a2 + 264), *(float *)(a3 + 168));
      *(_DWORD *)(a4 + 4) = v11;
      *(_BYTE *)(a4 + 8) = BYTE4(v11);
      result = raven::GNSSUncertaintyScaling::GNSSUncertaintyWrapper::GetUncertaintyScaleFactor(*(_QWORD *)(v5 + 2608), v8, v9, v5 + 977, v5 + 888, 2, *(float *)(a3 + 112), *(double *)(a2 + 264), *(float *)(a3 + 168));
      *(_DWORD *)(a4 + 12) = result;
      *(_BYTE *)(a4 + 16) = BYTE4(result);
    }
  }
  return result;
}

float sub_18D26BD6C(char a1, uint64_t a2, int a3, int a4, double a5, double a6, float a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v7 = a7;
  if (a3)
    v8 = 1.0;
  else
    v8 = v7;
  if (!a3)
    v7 = 1.0;
  v9 = v7 * a5 * (v7 * a5);
  if (a4)
    a6 = -0.0;
  v10 = v8 * (sqrt(a6 + v9) * 0.299792458);
  if (a1 && (a4 & 1) == 0)
  {
    if (*(_BYTE *)(a2 + 288))
      v11 = *(double *)(a2 + 280);
    else
      v11 = 800.0;
    v12 = fabs(v11);
    return sqrt(v10 * v10 + v12 * 0.004 * (v12 * 0.004));
  }
  return v10;
}

unint64_t raven::GnssMeasurementPreprocessor::FormInstantaneousDoppler@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  char v15;
  int v16;
  float v17;
  char v18;
  int64x2_t v19;
  double v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  char v28;
  float v29;
  char v30;

  if (!*(_BYTE *)(*(_QWORD *)(result + 8) + 610)
    || (v11 = result, result = sub_18D26FB14((int *)a2), !(_DWORD)result)
    || (v12 = *(double *)(a2 + 56), (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || (v13 = *(double *)(a2 + 64), v13 <= 0.0)
    || v13 >= 100.069229)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 208) = 0;
    return result;
  }
  v14 = *(_QWORD *)(v11 + 2304) + *(_QWORD *)(a2 + 32);
  v15 = *(_BYTE *)(a2 + 8);
  v16 = *(_DWORD *)(a2 + 192);
  v17 = v13 * 0.299792458;
  v18 = *(_BYTE *)(a2 + 72);
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = 0x7FF8000000000000;
  *(_DWORD *)(a5 + 96) = 2;
  *(_BYTE *)(a5 + 100) = v15;
  *(double *)(a5 + 104) = a6;
  *(_DWORD *)(a5 + 112) = v16;
  v19 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(double *)(a5 + 120) = v12 / -1000000000.0 * 299792458.0;
  *(int64x2_t *)(a5 + 128) = v19;
  *(int64x2_t *)(a5 + 144) = v19;
  *(_QWORD *)(a5 + 160) = 0x7FF8000000000000;
  *(float *)(a5 + 168) = v17;
  *(_BYTE *)(a5 + 172) = 0;
  *(_BYTE *)(a5 + 176) = 0;
  *(_BYTE *)(a5 + 180) = 0;
  *(_BYTE *)(a5 + 184) = 0;
  *(_BYTE *)(a5 + 188) = v18;
  *(_BYTE *)(a5 + 189) = a3;
  *(_BYTE *)(a5 + 190) = 1;
  *(float64x2_t *)(a5 + 192) = vmulq_f64(vcvtq_f64_s64(vsubq_s64(*(int64x2_t *)(a2 + 16), vdupq_n_s64(v14))), (float64x2_t)vdupq_n_s64(0x3E112E0BE826D695uLL));
  *(_BYTE *)(a5 + 208) = 1;
  result = raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor(v11, a4, a5, (uint64_t)&v26);
  v20 = (double)*(unint64_t *)(v11 + 2304)
      * 0.000000001
      * ((double)*(unint64_t *)(v11 + 2304)
       * 0.000000001
       * 96.1703842);
  v21 = *(_QWORD *)(v11 + 8);
  v22 = v26 * v17;
  if (*(_BYTE *)(v21 + 3828))
  {
    *(float *)(a5 + 168) = v22;
    if (!v28)
      goto LABEL_14;
    v23 = v27 * v17;
  }
  else
  {
    v24 = sqrt(v20 + v22 * v22);
    *(float *)(a5 + 168) = v24;
    if (!v28)
      goto LABEL_14;
    v23 = sqrt(v20 + (float)(v27 * v17) * (float)(v27 * v17));
  }
  *(float *)(a5 + 172) = v23;
  *(_BYTE *)(a5 + 176) = 1;
LABEL_14:
  if (v30)
  {
    v25 = sqrt(v20 + (float)(v29 * v17) * (float)(v29 * v17));
    if (*(_BYTE *)(v21 + 3828))
      v25 = v29 * v17;
    *(float *)(a5 + 180) = v25;
    *(_BYTE *)(a5 + 184) = 1;
  }
  return result;
}

uint64_t raven::GnssMeasurementPreprocessor::FillAveragedDopplerStartEndTimes(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  char v12;
  unsigned __int8 v13;
  __int16 v14;
  unsigned __int8 v15;
  __int16 v16;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 544))
  {
    if (!*(_BYTE *)(a3 + 8))
    {
      v16 = 12;
      v15 = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "#gmp,Average doppler cannot be formed because hw_clock diff is unavailable", a4, a5, a6, a7, a8, v12);
      return 0;
    }
    v8 = *(double *)a3;
    if ((*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v8 < 0.25 || v8 > 1.5)
    {
      v14 = 12;
      v13 = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "#gmp,Duration since last report is unexpected,not forming averaged Doppler,%.3f", a4, a5, a6, a7, a8, SLOBYTE(v8));
      return 0;
    }
    *(double *)(a4 + 192) = -v8;
    *(_QWORD *)(a4 + 200) = 0;
  }
  else
  {
    *(float64x2_t *)(a4 + 192) = vmulq_f64(vcvtq_f64_s64(vsubq_s64(a2[1], vdupq_n_s64(*(_QWORD *)(a1 + 2304) + a2[2].i64[0]))), (float64x2_t)vdupq_n_s64(0x3E112E0BE826D695uLL));
  }
  return 1;
}

unint64_t raven::GnssMeasurementPreprocessor::FormAveragedDoppler@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  char v20;
  int v21;
  uint64_t v22;
  float v23;
  __int128 v24;
  int64x2_t v25;
  int64x2_t v26;
  __int128 v27;
  int64x2_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  float v32[2];
  char v33;
  float v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int64x2_t v44;
  int64x2_t v45;
  __int128 v46;
  __int128 v47;
  int64x2_t v48;
  uint64_t v49;

  if (!*(_BYTE *)(*(_QWORD *)(result + 8) + 609))
    goto LABEL_15;
  v13 = result;
  result = sub_18D26FB14((int *)a2);
  if (!(_DWORD)result)
    goto LABEL_15;
  v18 = *(double *)(a2 + 80);
  if ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_15;
  v19 = *(double *)(a2 + 88);
  if (v19 <= 0.0)
    goto LABEL_15;
  if (v19 >= 100.069229)
    goto LABEL_15;
  v20 = *(_BYTE *)(a2 + 8);
  v21 = *(_DWORD *)(a2 + 192);
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  *(_QWORD *)&v41 = 0;
  *((_QWORD *)&v41 + 1) = 0x7FF8000000000000;
  LODWORD(v42) = 3;
  BYTE4(v42) = v20;
  *((double *)&v42 + 1) = a7;
  LODWORD(v43) = v21;
  *((double *)&v43 + 1) = v18 * -0.299792458;
  v44 = vdupq_n_s64(0x7FF8000000000000uLL);
  v45 = v44;
  *(_QWORD *)&v46 = 0x7FF8000000000000;
  DWORD2(v46) = 2143289344;
  BYTE12(v46) = 0;
  LOBYTE(v47) = 0;
  BYTE4(v47) = 0;
  BYTE8(v47) = 0;
  BYTE13(v47) = a3;
  BYTE14(v47) = 1;
  v48 = v44;
  LOBYTE(v49) = 1;
  result = raven::GnssMeasurementPreprocessor::FillAveragedDopplerStartEndTimes(v13, (int64x2_t *)a2, a4, (uint64_t)&v36, v14, v15, v16, v17);
  if ((result & 1) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(v13 + 8) + 578))
      v22 = a2 + 56;
    else
      v22 = a2 + 80;
    v23 = *(double *)(v22 + 8) * 0.299792458;
    *((float *)&v46 + 2) = v23;
    BYTE12(v47) = *(_BYTE *)(v22 + 16);
    result = raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor(v13, a5, (uint64_t)&v36, (uint64_t)v32);
    *((float *)&v46 + 2) = v32[0] * v23;
    if (v33)
    {
      *((float *)&v46 + 3) = v32[1] * v23;
      LOBYTE(v47) = 1;
    }
    if (v35)
    {
      *((float *)&v47 + 1) = v34 * v23;
      BYTE8(v47) = 1;
    }
    v24 = v47;
    v25 = v48;
    v26 = v45;
    *(_OWORD *)(a6 + 160) = v46;
    *(_OWORD *)(a6 + 176) = v24;
    *(int64x2_t *)(a6 + 192) = v25;
    v27 = v43;
    v28 = v44;
    *(_OWORD *)(a6 + 96) = v42;
    *(_OWORD *)(a6 + 112) = v27;
    *(_QWORD *)(a6 + 208) = v49;
    *(int64x2_t *)(a6 + 128) = v28;
    *(int64x2_t *)(a6 + 144) = v26;
    v29 = v39;
    *(_OWORD *)(a6 + 32) = v38;
    *(_OWORD *)(a6 + 48) = v29;
    v30 = v41;
    *(_OWORD *)(a6 + 64) = v40;
    *(_OWORD *)(a6 + 80) = v30;
    v31 = v37;
    *(_OWORD *)a6 = v36;
    *(_OWORD *)(a6 + 16) = v31;
  }
  else
  {
LABEL_15:
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 208) = 0;
  }
  return result;
}

void raven::GnssMeasurementPreprocessor::FormAveragedDopplerFromPhaseTracking(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  char v22;
  int v23;
  char v24;
  int64x2_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float v39;
  float v40;
  char v41;
  float v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 608))
    goto LABEL_18;
  if (sub_18D26FB14((int *)a2))
  {
    v20 = *(double *)(a2 + 104);
    if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v21 = *(double *)(a2 + 112);
      if (v21 > 0.0 && v21 < 100.069229)
      {
        v22 = *(_BYTE *)(a2 + 8);
        v23 = *(_DWORD *)(a2 + 192);
        v24 = *(_BYTE *)(a2 + 120);
        *(_OWORD *)a7 = 0u;
        *(_OWORD *)(a7 + 16) = 0u;
        *(_OWORD *)(a7 + 32) = 0u;
        *(_OWORD *)(a7 + 48) = 0u;
        *(_OWORD *)(a7 + 64) = 0u;
        *(_QWORD *)(a7 + 80) = 0;
        *(_QWORD *)(a7 + 88) = 0x7FF8000000000000;
        *(_DWORD *)(a7 + 96) = 4;
        *(_BYTE *)(a7 + 100) = v22;
        *(double *)(a7 + 104) = a8;
        *(_DWORD *)(a7 + 112) = v23;
        *(double *)(a7 + 120) = v20 * -0.299792458;
        v25 = vdupq_n_s64(0x7FF8000000000000uLL);
        *(int64x2_t *)(a7 + 128) = v25;
        *(int64x2_t *)(a7 + 144) = v25;
        *(_QWORD *)(a7 + 160) = 0x7FF8000000000000;
        *(_DWORD *)(a7 + 168) = 2143289344;
        *(_BYTE *)(a7 + 172) = 0;
        *(_BYTE *)(a7 + 176) = 0;
        *(_BYTE *)(a7 + 180) = 0;
        *(_BYTE *)(a7 + 184) = 0;
        *(_BYTE *)(a7 + 188) = 0;
        *(_BYTE *)(a7 + 189) = a4;
        *(_BYTE *)(a7 + 190) = v24;
        *(int64x2_t *)(a7 + 192) = v25;
        *(_BYTE *)(a7 + 208) = 1;
        if (raven::GnssMeasurementPreprocessor::FillAveragedDopplerStartEndTimes(a1, (int64x2_t *)a2, a5, a7, v16, v17, v18, v19))
        {
          v26 = *(double *)(a2 + 112) * 0.299792458;
          *(float *)(a7 + 168) = v26;
          *(_BYTE *)(a7 + 188) = *(_BYTE *)(a2 + 121);
          raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor(a1, a6, a7, (uint64_t)&v44);
          *(float *)(a7 + 168) = *(float *)&v44 * v26;
          if (BYTE8(v44))
          {
            *(float *)(a7 + 172) = *((float *)&v44 + 1) * v26;
            *(_BYTE *)(a7 + 176) = 1;
          }
          if ((_BYTE)v45)
          {
            *(float *)(a7 + 180) = *((float *)&v44 + 3) * v26;
            *(_BYTE *)(a7 + 184) = 1;
          }
          return;
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 2600) || !sub_18D26FB14((int *)a2) || !sub_18D22B4D4(a2 + 128))
    goto LABEL_18;
  if (!*(_BYTE *)(a1 + 2600))
    goto LABEL_33;
  raven::GnssPhaseTrackingStore::FormAveragedDoppler(a1 + 2552, a3, a2, *(_QWORD *)(a1 + 2304) + *(_QWORD *)(a2 + 32), (uint64_t)&v44);
  if (!(_BYTE)v57)
  {
LABEL_18:
    *(_BYTE *)a7 = 0;
    *(_BYTE *)(a7 + 208) = 0;
    return;
  }
  *((double *)&v50 + 1) = a8;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 578))
  {
    v27 = *(double *)(a2 + 64) * 0.299792458;
    *((float *)&v54 + 2) = v27;
  }
  else
  {
    v27 = *((float *)&v54 + 2);
  }
  raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor(a1, a6, (uint64_t)&v44, (uint64_t)&v39);
  if (!(_BYTE)v57)
LABEL_33:
    sub_18D164CA0();
  v28 = v27 * v39;
  v29 = 0.01;
  if ((float)(v27 * v39) < 0.01)
    v28 = 0.01;
  *((float *)&v54 + 2) = v28;
  if (v41)
  {
    v30 = v27 * v40;
    if ((float)(v27 * v40) < 0.01)
      v30 = 0.01;
    *((float *)&v54 + 3) = v30;
    LOBYTE(v55) = 1;
  }
  if (v43)
  {
    if ((float)(v27 * v42) >= 0.01)
      v29 = v27 * v42;
    *((float *)&v55 + 1) = v29;
    BYTE8(v55) = 1;
  }
  v31 = v55;
  v32 = v56;
  v33 = v53;
  *(_OWORD *)(a7 + 160) = v54;
  *(_OWORD *)(a7 + 176) = v31;
  *(_OWORD *)(a7 + 192) = v32;
  v34 = v51;
  v35 = v52;
  *(_OWORD *)(a7 + 96) = v50;
  *(_OWORD *)(a7 + 112) = v34;
  *(_QWORD *)(a7 + 208) = v57;
  *(_OWORD *)(a7 + 128) = v35;
  *(_OWORD *)(a7 + 144) = v33;
  v36 = v47;
  *(_OWORD *)(a7 + 32) = v46;
  *(_OWORD *)(a7 + 48) = v36;
  v37 = v49;
  *(_OWORD *)(a7 + 64) = v48;
  *(_OWORD *)(a7 + 80) = v37;
  v38 = v45;
  *(_OWORD *)a7 = v44;
  *(_OWORD *)(a7 + 16) = v38;
}

uint64_t raven::GnssMeasurementPreprocessor::PopulateGnssMeasurements(unint64_t a1, uint64_t *a2, double *a3, uint64_t a4, _OWORD *a5, uint64_t a6, char a7, _OWORD *a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  cnprint::CNPrinter *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  double v95;
  void *v96;
  int8x16_t v97;
  int8x16_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void **v105;
  unsigned int v106;
  float v107;
  uint64_t v108;
  BOOL v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  uint64_t v120;
  uint64_t i;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void **v131;
  char v133;
  int v134;
  int64x2_t v135;
  int v136;
  uint64_t v137;
  char v138;
  char v139;
  int v140;
  _OWORD *v142;
  uint64_t v143;
  uint64_t v144;
  int8x16_t v145;
  void *v146[2];
  char v147;
  void *__p[6];
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  char v155;
  uint64_t v156;
  int v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int v161;
  char v162;
  char v163;
  char v164;
  char v165;
  __int16 v166;
  char v167;
  int64x2_t v168;
  _QWORD v169[2];
  int8x16_t v170;
  int v171;
  double v172;
  void *v173[2];
  char v174;
  char v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  __int16 v179;
  __int128 v180;
  __int128 v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  __int128 v186;

  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) > 1)
      return 0;
    LOWORD(__p[0]) = 12;
    LOBYTE(v146[0]) = 1;
    v34 = "#gmp,PopulateGnssMeasurements,not configured";
LABEL_9:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v146, v34, v29, v30, v31, v32, v33, v133);
    return 0;
  }
  v17 = *(_QWORD *)a3;
  a10.i64[0] = 0x3F50624DD2F1A9FCLL;
  *(double *)a9.i64 = round(a3[1] / 0.001) * 0.001;
  __p[1] = 0;
  __p[0] = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)__p, v17, a9, a10);
  v186 = *(_OWORD *)__p;
  v142 = a8;
  *a8 = *(_OWORD *)__p;
  LOWORD(__p[0]) = 0;
  memset(&__p[1], 0, 36);
  v149 = 0uLL;
  LODWORD(v150) = 0;
  v18 = cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)a3, (const cnnavigation::GNSSUTCParameters *)__p);
  LOWORD(__p[0]) = 0;
  memset(&__p[1], 0, 36);
  v149 = 0uLL;
  LODWORD(v150) = 0;
  v19 = cnnavigation::TAITime::ToGalileoTime((cnnavigation::TAITime *)a3, (const cnnavigation::GNSSUTCParameters *)__p);
  LOWORD(__p[0]) = 0;
  memset(&__p[1], 0, 36);
  v149 = 0uLL;
  LODWORD(v150) = 0;
  v140 = cnnavigation::TAITime::ToBeiDouTime((cnnavigation::TAITime *)a3, (const cnnavigation::GNSSUTCParameters *)__p);
  LOWORD(__p[0]) = 0;
  memset(&__p[1], 0, 36);
  v149 = 0uLL;
  LODWORD(v150) = 0;
  v20 = cnnavigation::TAITime::ToNavicTime((cnnavigation::TAITime *)a3, (const cnnavigation::GNSSUTCParameters *)__p);
  v179 = 0;
  v180 = 0u;
  v181 = 0u;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  v28 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v179, v21, v22, v23, v24, v25, v26, 0.0, v27);
  v177 = 1;
  v178 = 0;
  v139 = v28;
  if (v28)
  {
    v180 = 0uLL;
    if (cnnavigation::TAITime::ToGLONASSTime((uint64_t)a3, (cnnavigation::GNSSUTCParameters *)&v179, (uint64_t)&v177))
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v146[0]) = 4;
      v34 = "#gmp,Cannot convert receiver time to glonass time";
      goto LABEL_9;
    }
  }
  v136 = v19;
  v35 = *(unsigned __int8 *)(a1 + 888);
  v137 = a6;
  v138 = a7;
  if (v35 >= 2)
    *(_BYTE *)(a1 + 976) = v35;
  else
    *(_BYTE *)(a1 + 888) = *(_BYTE *)(a1 + 976);
  v37 = *a2;
  v38 = a2[1];
  v36 = 1;
  if (*a2 != v38)
  {
    v144 = a4 + 8;
    v134 = v18 - 1042;
    v135 = vdupq_n_s64(0x7FF8000000000000uLL);
    v143 = a4;
    while (1)
    {
      v39 = *(unsigned __int8 *)(v37 + 8);
      v109 = v39 > 9;
      v40 = (1 << v39) & 0x2BB;
      if (!v109 && v40 != 0)
        break;
      v42 = *(unsigned __int8 *)(v37 + 197);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 3792))
        v61 = 1;
      else
        v61 = v42 == 0;
      if (v61)
        goto LABEL_19;
      if (*(_BYTE *)(v37 + 196) != 1)
      {
LABEL_20:
        sub_18D0778AC(v173, "");
        v175 = 0;
        v176 = -1;
        if ((raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId((cnprint::CNPrinter *)a1, (unint64_t *)v37, (uint64_t)v173, v43, v44, v45, v46, v47) & 1) != 0)
        {
          if (v175 == 4 && (v176 <= 0x3F && ((1 << v176) & 0xF80000000000003ELL) != 0 || v176 - 1 >= 0x3F))
          {
            LOWORD(v146[0]) = 12;
            v145.i8[0] = 3;
            sub_18D17FE1C(v37, __p);
            if (SHIBYTE(__p[2]) >= 0)
              v53 = __p;
            else
              LOBYTE(v53) = __p[0];
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v146, (unsigned __int8 *)&v145, "#gmp,Not forming measurement based on svid,SV,%s", v48, v49, v50, v51, v52, (char)v53);
          }
          else
          {
            v62 = sub_18D185488(a4, (uint64_t)v173);
            if (v144 != v62)
            {
              v63 = *(_QWORD *)(v62 + 64);
              v172 = 0.0;
              v171 = 0;
              sub_18D268E30(v37, *(_QWORD *)(a1 + 2304), &v172, &v171);
              v64 = sub_18D185488(a1 + 984, (uint64_t)v173);
              if (a1 + 992 == v64)
              {
                LOWORD(v146[0]) = 12;
                v145.i8[0] = 2;
                sub_18D17FE1C(v37, __p);
                if (SHIBYTE(__p[2]) >= 0)
                  v87 = __p;
                else
                  LOBYTE(v87) = __p[0];
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v146, (unsigned __int8 *)&v145, "#gmp,Not forming measurement because svinfo is not in db,SV,%s", v82, v83, v84, v85, v86, (char)v87);
              }
              else
              {
                v65 = *(unsigned __int8 *)(v37 + 8);
                if (v65 <= 9 && ((1 << v65) & 0x2BB) != 0)
                  v66 = (cnprint::CNPrinter *)raven::GnssSvDatabase::AggregateHealthL1((_BYTE *)(v64 + 64));
                else
                  v66 = (cnprint::CNPrinter *)raven::GnssSvDatabase::AggregateHealthL5((_BYTE *)(v64 + 64));
                if ((_DWORD)v66 == 1)
                {
                  switch(v65)
                  {
                    case 1u:
                      *(double *)v72.i64 = v172 + -561548.816;
                      __p[1] = 0;
                      __p[0] = 0;
                      CNTimeSpan::SetTimeSpan((uint64_t *)__p, 604800 * (v134 + v171), v72, v73);
                      v75 = *(int8x16_t *)__p;
                      goto LABEL_75;
                    case 2u:
                      *(double *)v72.i64 = v172 + -561548.816;
                      __p[1] = 0;
                      __p[0] = 0;
                      CNTimeSpan::SetTimeSpan((uint64_t *)__p, 604800 * (v134 + v171), v72, v73);
                      v75 = *(int8x16_t *)__p;
                      goto LABEL_78;
                    case 3u:
                      if ((v139 & 1) != 0)
                      {
                        v94 = *(char *)(v37 + 5);
                        if ((v94 - 7) <= 0xFFFFFFF1)
                        {
                          LOWORD(__p[0]) = 12;
                          LOBYTE(v146[0]) = 4;
                          cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v146, "#gmp,Could not form carrier frequency for GLONASS satellite,freq,%i", v67, v68, v69, v70, v71, v94);
                          goto LABEL_104;
                        }
                        v145.i32[0] = 0;
                        __p[1] = 0;
                        sub_18D268F44(v37, *(_QWORD *)(a1 + 2304), (double *)&__p[1], v145.i32);
                        LODWORD(__p[0]) = v145.i32[0] + v177;
                        cnnavigation::TAITime::TAITime(v146, (int *)__p, (cnnavigation::GNSSUTCParameters *)&v179);
                        v95 = (double)v94 * 562500.0 + 1602000000.0;
                        v75 = *(int8x16_t *)v146;
                        v170 = *(int8x16_t *)v146;
LABEL_79:
                        v146[0] = (void *)1;
                        v146[1] = (void *)0x3FB99999999999A0;
                        __p[0] = (void *)CNTimeSpan::operator-((uint64_t)a3, v146, v75, v74);
                        __p[1] = v96;
                        if (!sub_18D03FE4C((double *)__p, (double *)(v63 + 72)))
                        {
                          v169[0] = 0;
                          v169[1] = 0x3FC999999999999ALL;
                          v145.i64[0] = CNTimeSpan::operator+((uint64_t)a3, v169, v97, v98);
                          v145.i64[1] = v99;
                          if (!sub_18D03F608((double *)v145.i64, (double *)(v63 + 88)))
                          {
                            v106 = *(unsigned __int8 *)(v37 + 8);
                            v107 = 0.0;
                            if (v106 > 0xA)
                            {
                              v108 = (uint64_t)a3;
                            }
                            else
                            {
                              v108 = (uint64_t)a3;
                              if (((1 << v106) & 0x544) != 0)
                                v107 = *(float *)(*(_QWORD *)(a1 + 8) + 584);
                            }
                            v109 = *(float *)(v37 + 192) < v107 && (*(_DWORD *)(v37 + 192) & 0x7FFFFFFFu) < 0x7F800000;
                            if (v109)
                              v110 = 1;
                            else
                              v110 = *(_BYTE *)(v37 + 196);
                            memset(__p, 0, 17);
                            memset(&__p[3], 0, 17);
                            v149 = 0uLL;
                            LOBYTE(v150) = 0;
                            v151 = 0;
                            v152 = 0;
                            v153 = 0x7FF8000000000000;
                            v154 = 0;
                            v155 = 0;
                            v156 = 0x7FF8000000000000;
                            v158 = v135;
                            v159 = v135;
                            v160 = v135;
                            v157 = 2143289344;
                            v161 = 2143289344;
                            v162 = 0;
                            v163 = 0;
                            v164 = 0;
                            v165 = 0;
                            v166 = 0;
                            v167 = 1;
                            v168 = v135;
                            if (raven::GnssMeasurementPreprocessor::FormPseudorange((cnprint::CNPrinter *)a1, v37, v110, v108, (uint64_t)&v186, (uint64_t)&v170, v63, (uint64_t)__p, v95, v138))
                            {
                              raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, (uint64_t)__p, a5, v142, v63, v111, v112, v113);
                            }
                            else
                            {
                              v145.i16[0] = 12;
                              LOBYTE(v169[0]) = 2;
                              sub_18D17FE1C(v37, v146);
                              v119 = v146;
                              if (v147 < 0)
                                LOBYTE(v119) = v146[0];
                              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v145, (unsigned __int8 *)v169, "#gmp,Could not form pseudorange,SV,%s", v114, v115, v116, v117, v118, (char)v119);
                              if (v147 < 0)
                                operator delete(v146[0]);
                            }
                            raven::GnssMeasurementPreprocessor::FormInstantaneousDoppler(a1, v37, v110, v63, (uint64_t)__p, v95);
                            raven::GnssMeasurementPreprocessor::FormAveragedDoppler(a1, v37, v110, v137, v63, (uint64_t)v146, v95);
                            raven::GnssMeasurementPreprocessor::FormAveragedDopplerFromPhaseTracking(a1, v37, (uint64_t)v173, v110, v137, v63, (uint64_t)&v145, v95);
                            raven::GnssMeasurementPreprocessor::SelectAndPopulateDoppler(a1, v37, (uint64_t)__p, (uint64_t)v146, (uint64_t)&v145, a5, v142, v63);
                            v120 = *(_QWORD *)(v63 + 328);
                            for (i = *(_QWORD *)(v63 + 336); v120 != i; v120 += 208)
                            {
                              v122 = a5[1];
                              *(_OWORD *)v120 = *a5;
                              *(_OWORD *)(v120 + 16) = v122;
                              v123 = a5[2];
                              v124 = a5[3];
                              v125 = a5[5];
                              *(_OWORD *)(v120 + 64) = a5[4];
                              *(_OWORD *)(v120 + 80) = v125;
                              *(_OWORD *)(v120 + 32) = v123;
                              *(_OWORD *)(v120 + 48) = v124;
                              *(_OWORD *)(v120 + 48) = *v142;
                              *(_BYTE *)(v120 + 40) = 1;
                            }
                            goto LABEL_104;
                          }
                        }
                        LOWORD(v146[0]) = 12;
                        v145.i8[0] = 3;
                        sub_18D17FE1C(v37, __p);
                        if (SHIBYTE(__p[2]) >= 0)
                          v105 = __p;
                        else
                          LOBYTE(v105) = __p[0];
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v146, (unsigned __int8 *)&v145, "#gmp,Satellite polynomial is outside of time range needed for this measurement,SV,%s,rx_time,%lf,poly_start_delta,%lf,poly_end_delta,%lf", v100, v101, v102, v103, v104, (char)v105);
                      }
                      else
                      {
                        LOWORD(v146[0]) = 12;
                        v145.i8[0] = 3;
                        sub_18D17FE1C(v37, __p);
                        v131 = __p;
                        if (SHIBYTE(__p[2]) < 0)
                          LOBYTE(v131) = __p[0];
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v146, (unsigned __int8 *)&v145, "#gmp,GLONASS UTC information unavailable,cannot form measurement,SV,%s", v126, v127, v128, v129, v130, (char)v131);
                      }
                      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                        goto LABEL_104;
                      break;
                    case 4u:
                      LODWORD(v146[0]) = v171 + v140;
                      v146[1] = *(void **)&v172;
                      v150 = 0;
                      v149 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v145, (const cnnavigation::BeiDouTime *)v146, (const cnnavigation::GNSSUTCParameters *)__p);
                      v75 = v145;
                      v170 = v145;
                      v95 = 1561098000.0;
                      goto LABEL_79;
                    case 5u:
                      LODWORD(v146[0]) = v171 + v140;
                      v146[1] = *(void **)&v172;
                      v150 = 0;
                      v149 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v145, (const cnnavigation::BeiDouTime *)v146, (const cnnavigation::GNSSUTCParameters *)__p);
                      goto LABEL_74;
                    case 6u:
                      LODWORD(v146[0]) = v171 + v140;
                      v146[1] = *(void **)&v172;
                      v150 = 0;
                      v149 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v145, (const cnnavigation::BeiDouTime *)v146, (const cnnavigation::GNSSUTCParameters *)__p);
                      goto LABEL_77;
                    case 7u:
                      LODWORD(v146[0]) = v171 + v136;
                      v146[1] = *(void **)&v172;
                      v150 = 0;
                      v149 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime(&v145, (double *)v146, (cnnavigation::GNSSUTCParameters *)__p);
LABEL_74:
                      v75 = v145;
LABEL_75:
                      v170 = v75;
                      v95 = 1575420000.0;
                      goto LABEL_79;
                    case 8u:
                      LODWORD(v146[0]) = v171 + v136;
                      v146[1] = *(void **)&v172;
                      v150 = 0;
                      v149 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime(&v145, (double *)v146, (cnnavigation::GNSSUTCParameters *)__p);
                      goto LABEL_77;
                    case 0xAu:
                      LODWORD(v146[0]) = v171 + v20;
                      v146[1] = *(void **)&v172;
                      v150 = 0;
                      v149 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v145, (const cnnavigation::NavicTime *)v146, (const cnnavigation::GNSSUTCParameters *)__p);
LABEL_77:
                      v75 = v145;
LABEL_78:
                      v170 = v75;
                      v95 = 1176450000.0;
                      goto LABEL_79;
                    default:
                      goto LABEL_104;
                  }
LABEL_63:
                  operator delete(__p[0]);
LABEL_104:
                  a4 = v143;
LABEL_105:
                  if (v174 < 0)
                    operator delete(v173[0]);
                  goto LABEL_107;
                }
                if (cnprint::CNPrinter::GetLogLevel(v66) > 1)
                  goto LABEL_104;
                LOWORD(v146[0]) = 12;
                v145.i8[0] = 1;
                v88 = *(_BYTE *)(v37 + 8);
                sub_18D17FE1C(v37, __p);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v146, (unsigned __int8 *)&v145, "#gmp,Not forming measurement based on health,%d,%d,SV,%s", v89, v90, v91, v92, v93, v88);
              }
              if (SHIBYTE(__p[2]) < 0)
                goto LABEL_63;
              goto LABEL_104;
            }
            LOWORD(v146[0]) = 12;
            v145.i8[0] = 3;
            sub_18D17FE1C(v37, __p);
            if (SHIBYTE(__p[2]) >= 0)
              v81 = __p;
            else
              LOBYTE(v81) = __p[0];
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v146, (unsigned __int8 *)&v145, "#gmp,Could not find the corresponding SV data for measurement,SV,%s", v76, v77, v78, v79, v80, (char)v81);
          }
        }
        else
        {
          LOWORD(v146[0]) = 12;
          if (*(_DWORD *)v37 == 2)
            v54 = 3;
          else
            v54 = 4;
          v145.i8[0] = v54;
          sub_18D17FE1C(v37, __p);
          if (SHIBYTE(__p[2]) >= 0)
            v60 = __p;
          else
            LOBYTE(v60) = __p[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v146, (unsigned __int8 *)&v145, "#gmp,could not form sat id,SV,%s", v55, v56, v57, v58, v59, (char)v60);
        }
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        goto LABEL_105;
      }
LABEL_107:
      v37 += 200;
      if (v37 == v38)
        return 1;
    }
    v42 = *(unsigned __int8 *)(v37 + 197);
LABEL_19:
    if (v42)
      goto LABEL_20;
    goto LABEL_107;
  }
  return v36;
}

void sub_18D26D2C4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x39F]) < 0)
    operator delete((void *)STACK[0x388]);
  _Unwind_Resume(a1);
}

BOOL raven::GnssMeasurementPreprocessor::IsSvIdPermitted(uint64_t a1)
{
  unsigned int v1;

  if (*(_BYTE *)(a1 + 24) != 4)
    return 1;
  v1 = *(_DWORD *)(a1 + 28) - 1;
  return (v1 >= 0x3F || ((0x7C0000000000001FuLL >> v1) & 1) == 0) && v1 < 0x3F;
}

void raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int CanObservableBeIncluded;
  int v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *__p[2];
  uint64_t v52;
  uint64_t v53;

  v11 = a3[1];
  *(_OWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 16) = v11;
  v12 = a3[2];
  v13 = a3[3];
  v14 = a3[5];
  *(_OWORD *)(a2 + 64) = a3[4];
  *(_OWORD *)(a2 + 80) = v14;
  *(_OWORD *)(a2 + 32) = v12;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 48) = *a4;
  *(_BYTE *)(a2 + 40) = 1;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_18D077798(__p, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v52 = *(_QWORD *)(a5 + 16);
  }
  v53 = *(_QWORD *)(a5 + 24);
  CanObservableBeIncluded = raven::GNSSPreprocessedMeasurementsChecker::CanObservableBeIncluded(a2, (uint64_t)__p, (double *)(a5 + 32), *(_QWORD *)(a1 + 8), a5, a6, a7, a8);
  v16 = CanObservableBeIncluded;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if (!v16)
      return;
  }
  else if (!CanObservableBeIncluded)
  {
    return;
  }
  v18 = *(_OWORD **)(a5 + 336);
  v17 = *(_QWORD *)(a5 + 344);
  if ((unint64_t)v18 >= v17)
  {
    v29 = *(_OWORD **)(a5 + 328);
    v30 = 0x4EC4EC4EC4EC4EC5 * (v18 - v29) + 1;
    if (v30 > 0x13B13B13B13B13BLL)
      sub_18D07AFE4();
    v31 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v17 - (_QWORD)v29) >> 4);
    if (2 * v31 > v30)
      v30 = 2 * v31;
    if (v31 >= 0x9D89D89D89D89DLL)
      v32 = 0x13B13B13B13B13BLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 > 0x13B13B13B13B13BLL)
        sub_18D0788A0();
      v33 = (char *)operator new(208 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = *(_OWORD *)(a2 + 176);
    v35 = &v33[16 * (v18 - v29)];
    *((_OWORD *)v35 + 10) = *(_OWORD *)(a2 + 160);
    *((_OWORD *)v35 + 11) = v34;
    *((_OWORD *)v35 + 12) = *(_OWORD *)(a2 + 192);
    v36 = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v35 + 6) = *(_OWORD *)(a2 + 96);
    *((_OWORD *)v35 + 7) = v36;
    v37 = *(_OWORD *)(a2 + 144);
    *((_OWORD *)v35 + 8) = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v35 + 9) = v37;
    v38 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v35 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v35 + 3) = v38;
    v39 = *(_OWORD *)(a2 + 80);
    *((_OWORD *)v35 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v35 + 5) = v39;
    v41 = *(_OWORD *)a2;
    v40 = *(_OWORD *)(a2 + 16);
    v28 = v35 + 208;
    *(_OWORD *)v35 = v41;
    *((_OWORD *)v35 + 1) = v40;
    if (v18 != v29)
    {
      do
      {
        *((_OWORD *)v35 - 13) = *(v18 - 13);
        v42 = *(v18 - 12);
        v43 = *(v18 - 11);
        v44 = *(v18 - 9);
        *((_OWORD *)v35 - 10) = *(v18 - 10);
        *((_OWORD *)v35 - 9) = v44;
        *((_OWORD *)v35 - 12) = v42;
        *((_OWORD *)v35 - 11) = v43;
        v45 = *(v18 - 8);
        v46 = *(v18 - 7);
        v47 = *(v18 - 5);
        *((_OWORD *)v35 - 6) = *(v18 - 6);
        *((_OWORD *)v35 - 5) = v47;
        *((_OWORD *)v35 - 8) = v45;
        *((_OWORD *)v35 - 7) = v46;
        v48 = *(v18 - 4);
        v49 = *(v18 - 3);
        v50 = *(v18 - 1);
        *((_OWORD *)v35 - 2) = *(v18 - 2);
        *((_OWORD *)v35 - 1) = v50;
        *((_OWORD *)v35 - 4) = v48;
        *((_OWORD *)v35 - 3) = v49;
        v35 -= 208;
        v18 -= 13;
      }
      while (v18 != v29);
      v18 = *(_OWORD **)(a5 + 328);
    }
    *(_QWORD *)(a5 + 328) = v35;
    *(_QWORD *)(a5 + 336) = v28;
    *(_QWORD *)(a5 + 344) = &v33[208 * v32];
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v18 = *(_OWORD *)a2;
    v19 = *(_OWORD *)(a2 + 16);
    v20 = *(_OWORD *)(a2 + 32);
    v21 = *(_OWORD *)(a2 + 64);
    v18[3] = *(_OWORD *)(a2 + 48);
    v18[4] = v21;
    v18[1] = v19;
    v18[2] = v20;
    v22 = *(_OWORD *)(a2 + 80);
    v23 = *(_OWORD *)(a2 + 96);
    v24 = *(_OWORD *)(a2 + 128);
    v18[7] = *(_OWORD *)(a2 + 112);
    v18[8] = v24;
    v18[5] = v22;
    v18[6] = v23;
    v25 = *(_OWORD *)(a2 + 144);
    v26 = *(_OWORD *)(a2 + 160);
    v27 = *(_OWORD *)(a2 + 192);
    v18[11] = *(_OWORD *)(a2 + 176);
    v18[12] = v27;
    v18[9] = v25;
    v18[10] = v26;
    v28 = v18 + 13;
  }
  *(_QWORD *)(a5 + 336) = v28;
}

void sub_18D26D630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::GnssMeasurementPreprocessor::SelectAndPopulateDoppler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, _OWORD *a7, uint64_t a8)
{
  _BYTE *v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  unsigned __int8 v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  _QWORD v38[2];

  v38[0] = a3;
  v38[1] = a2;
  v15 = *(_BYTE **)(a1 + 8);
  if (v15[546] && v15[610])
  {
    if (*(_BYTE *)(a4 + 208))
    {
      v36 = *(_QWORD *)(a2 + 88);
      v37 = 1;
      v17 = sub_18D26D890((cnprint::CNPrinter *)v38, a4, (uint64_t)&v36);
      if ((v17 & 1) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v17) <= 1)
        {
          LOWORD(v36) = 12;
          LOBYTE(v35) = 1;
          v18 = sub_18D181C54(a8);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, (unsigned __int8 *)&v35, "#gmp,Invalidated averaged_doppler due to cross-check,SV,%s", v19, v20, v21, v22, v23, v18);
        }
        if (*(_BYTE *)(a4 + 208))
          *(_BYTE *)(a4 + 208) = 0;
      }
    }
    if (sub_18D26FB14((int *)a2)
      && (*(_QWORD *)(a2 + 104) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *(double *)(a2 + 112) > 0.0)
    {
      v36 = *(_QWORD *)(a2 + 112);
      v24 = 1;
    }
    else
    {
      v24 = 0;
      LOBYTE(v36) = 0;
    }
    v37 = v24;
    if (*(_BYTE *)(a5 + 208))
    {
      v25 = sub_18D26D890((cnprint::CNPrinter *)v38, a5, (uint64_t)&v36);
      if ((v25 & 1) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
        {
          v35 = 12;
          v34 = 1;
          v26 = sub_18D181C54(a8);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "#gmp,Invalidated averaged_doppler_from_phase_tracking due to cross-check,SV,%s", v27, v28, v29, v30, v31, v26);
        }
        if (*(_BYTE *)(a5 + 208))
          *(_BYTE *)(a5 + 208) = 0;
      }
    }
    v15 = *(_BYTE **)(a1 + 8);
  }
  v32 = v15[580];
  if (*(_BYTE *)(a5 + 208))
  {
    raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, a5, a6, a7, a8, (uint64_t)a6, (uint64_t)a7, a8);
    if (!v32)
      return;
    if (*(_BYTE *)(a4 + 208))
      raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, a4, a6, a7, a8, (uint64_t)a6, (uint64_t)a7, a8);
  }
  else if (*(_BYTE *)(a4 + 208))
  {
    raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, a4, a6, a7, a8, (uint64_t)a6, (uint64_t)a7, a8);
    if (v32)
      v33 = *(_BYTE *)(a3 + 208) == 0;
    else
      v33 = 1;
    if (!v33)
      goto LABEL_33;
    return;
  }
  if (*(_BYTE *)(a3 + 208))
LABEL_33:
    raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, a3, a6, a7, a8, (uint64_t)a6, (uint64_t)a7, a8);
}

uint64_t sub_18D26D890(cnprint::CNPrinter *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unsigned __int8 v18;
  __int16 v19;

  v5 = a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 208))
  {
    v6 = *((_QWORD *)a1 + 1);
    a1 = (cnprint::CNPrinter *)sub_18D26FB14((int *)v6);
    if ((_DWORD)a1)
    {
      if ((*(_QWORD *)(v6 + 56) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(v6 + 64) > 0.0)
      {
        v7 = *v5;
        if (!*(_BYTE *)(*v5 + 208))
          sub_18D164CA0();
        if (*(float *)(v7 + 168) < 30.0)
        {
          if (!*(_BYTE *)(a3 + 8))
            goto LABEL_20;
          v8 = *(double *)(v5[1] + 64) * 3.0;
          if (*(double *)a3 == v8)
            v9 = 0;
          else
            v9 = -127;
          if (*(double *)a3 > v8)
            v9 = 1;
          if (*(double *)a3 < v8)
            v9 = -1;
          if (v9 != -127 && (char)v9 <= 0)
          {
LABEL_20:
            if (vabdd_f64(*(double *)(a2 + 120), *(double *)(v7 + 120)) < 5.0)
              return 1;
          }
        }
      }
    }
  }
  if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    v19 = 12;
    v18 = 1;
    v17 = -1.0;
    if (*(_BYTE *)(*v5 + 208))
      v17 = *(double *)(*v5 + 120);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "#gmp,Doppler cross-check failure details,inst_val,%.2f,test_val,%.2f,inst_unc,%.2f,test_unc,%.2f,band,%d,cn0,%.1f", v12, v13, v14, v15, v16, SLOBYTE(v17));
  }
  return 0;
}

BOOL raven::GnssMeasurementPreprocessor::UpdateCurrentDayAndWeek(unsigned __int8 *a1, uint64_t *a2)
{
  int v2;
  _WORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  char v15;
  unsigned __int8 v16;
  __int16 v17;

  v2 = *a1;
  if (*a1)
  {
    if (sub_18D18130C(a2) && (v5 = (_WORD *)*a2, sub_18D184F20(*a2)) && *v5)
    {
      v6 = *(unsigned __int16 *)*a2;
    }
    else
    {
      if (!sub_18D1813B4(a2))
      {
        LOBYTE(v6) = 0;
        goto LABEL_13;
      }
      v6 = *(unsigned __int16 *)a2[3];
      if (!*(_WORD *)a2[3])
      {
LABEL_13:
        a1[2208] = v6;
        if (sub_18D181348(a2)
          && ((v12 = (unsigned __int16 *)a2[1], *v12) && (v13 = v12[1], v13 < 0x5B5)
           || *((_QWORD *)v12 + 1)
           && *v12
           && (*((_QWORD *)v12 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (v13 = v12[1], v13 <= 0x5B4)))
        {
          *((_DWORD *)a1 + 555) = v13 + 1461 * *v12 - 1461;
          a1[2216] = 1;
        }
        else
        {
          a1[2216] = 0;
        }
        return v2 != 0;
      }
      v6 += 1024;
    }
    *((_DWORD *)a1 + 553) = v6;
    LOBYTE(v6) = 1;
    goto LABEL_13;
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    v17 = 12;
    v16 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "#gmp,UpdateCurrentDayAndWeek,not configured", v7, v8, v9, v10, v11, v15);
  }
  return v2 != 0;
}

void raven::GnssMeasurementPreprocessor::UpdateMeasurementPropagationTimeUsingDwellEndTimes(raven::GnssMeasurementPreprocessor *this, const raven::GnssMeasurementDataEvent *a2)
{
  double v4;
  int8x16_t v5;
  int8x16_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  double v29;
  BOOL v30;
  unint64_t v31;
  double v32;
  char v33;
  uint64_t v34[2];
  uint64_t v35[2];
  double v36[2];
  uint64_t v37;
  double v38;
  char v39;
  void *__p;
  void *v41;
  uint64_t v42;
  char v43;

  if (!*(_BYTE *)this
    || (v37 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(_QWORD *)a2 + 16))(a2),
        v38 = v4,
        v7 = CNTimeSpan::operator-((uint64_t)this + 2192, &v37, v5, v6),
        v9 = v8 + (double)v7,
        v9 <= 0.0))
  {
    *((_QWORD *)this + 288) = 0;
    return;
  }
  __p = 0;
  v41 = 0;
  v42 = 0;
  LOBYTE(v37) = 0;
  v38 = 0.0;
  v39 = 1;
  sub_18D2144E4((char **)&__p);
  v43 = 1;
  v15 = *((_QWORD *)a2 + 23);
  v16 = *((_QWORD *)a2 + 24);
  if (v15 == v16)
    goto LABEL_28;
  v17 = -1;
  do
  {
    v18 = *(unsigned __int8 *)(v15 + 8);
    v19 = v18 > 9;
    v20 = (1 << v18) & 0x2BB;
    if (v19 || v20 == 0)
    {
      v22 = *(unsigned __int8 *)(v15 + 197);
      if (*(_BYTE *)(*((_QWORD *)this + 1) + 3792))
        v30 = 1;
      else
        v30 = v22 == 0;
      if (!v30)
      {
        if (*(_BYTE *)(v15 + 196) == 1)
          goto LABEL_24;
        goto LABEL_11;
      }
    }
    else
    {
      v22 = *(unsigned __int8 *)(v15 + 197);
    }
    if (!v22)
      goto LABEL_24;
LABEL_11:
    v23 = *(_QWORD *)(v15 + 24) - *(_QWORD *)(v15 + 32);
    if (v23 >= 0)
    {
      v35[0] = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(_QWORD *)a2 + 16))(a2);
      v35[1] = v24;
      *(double *)v25.i64 = (double)v23 * 0.000000001;
      v34[0] = 0;
      v34[1] = 0;
      CNTimeSpan::SetTimeSpan(v34, 0, v25, v26);
      *(_QWORD *)&v36[0] = CNTimeSpan::operator+((uint64_t)v35, v34, v27, v28);
      v36[1] = v29;
      if (!sub_18D03FE4C((double *)this + 274, v36))
      {
        if (*(_BYTE *)(*((_QWORD *)this + 1) + 841))
        {
          if (v17 <= v23)
            v17 = v23;
        }
        else
        {
          *(double *)v35 = (double)v23;
          sub_18D213F5C((uint64_t)&v37, v35, 1.0);
        }
      }
    }
LABEL_24:
    v15 += 200;
  }
  while (v15 != v16);
  if (v17 > 0)
  {
    v31 = v17 / 0xF4240uLL;
    goto LABEL_33;
  }
LABEL_28:
  if (v38 <= 0.0)
  {
    LOWORD(v36[0]) = 12;
    LOBYTE(v35[0]) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, (unsigned __int8 *)v35, "#gmp,Measurement propagation time offset is not based off dwell end-times", v10, v11, v12, v13, v14, v33);
    v31 = (unint64_t)(v9 * 1000.0);
  }
  else
  {
    sub_18D2145A8((uint64_t)&v37, 50.0);
    if (v32 >= 0.0)
      v31 = (unint64_t)v32 / 0xF4240;
    else
      v31 = 0;
  }
LABEL_33:
  *((_QWORD *)this + 288) = 1000000 * v31;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
}

void sub_18D26DDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::GnssMeasurementDataEvent *a2)
{
  cnprint::CNPrinter *LogLevel;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  cnprint::CNPrinter *v34;
  uint64_t v35;
  double v36;
  int8x16_t v37;
  int8x16_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  int v76;
  BOOL v77;
  int v78;
  uint64_t *v79;
  uint64_t **v80;
  uint64_t **v81;
  unsigned int v82;
  int v83;
  _BOOL4 v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t *v87;
  _BYTE *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  uint64_t v101;
  int8x16_t v102;
  int8x16_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  int8x16_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  int v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char v134;
  char v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  double v143;
  double v144;
  int8x16_t v145;
  int8x16_t v146;
  uint64_t v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int8x16_t v153;
  double v154;
  BOOL v155;
  char *v156;
  char *v157;
  __int128 *v158;
  uint64_t v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int v184;
  char v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  uint64_t v190;
  char v191;
  int8x16_t v192;
  int8x16_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  uint64_t v205;
  _BOOL8 v206;
  int8x16_t v207;
  int8x16_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _BOOL8 v214;
  int8x16_t v215;
  char *v216;
  int8x16_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  double v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  double v235;
  int8x16_t v236;
  int8x16_t v237;
  char v238;
  int8x16_t v239;
  double v240;
  int8x16_t v241;
  cnprint::CNPrinter *v242;
  double v243;
  _BOOL8 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  int v251;
  int v252;
  char v253;
  char v254;
  char v255;
  double v256;
  double v257;
  float v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  double v264;
  __int128 v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  double v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  unint64_t v281;
  int v282;
  uint64_t *v283;
  const raven::GnssMeasurementDataEvent *v284;
  raven::GnssSvDatabase *v285;
  unsigned __int8 v286;
  __int128 v287;
  uint64_t v288;
  char v289;
  _BYTE v290[40];
  int v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  char *v295;
  char *v296;
  uint64_t v297;
  __int128 v298;
  double v299;
  char v300;
  char **v301;
  char *v302[2];
  uint64_t **v303;
  uint64_t *v304;
  uint64_t v305;
  char v306;
  char v307;
  _BYTE v308[100];
  uint64_t v309;
  uint64_t v310;
  int v311;
  __int128 *v312[3];

  LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(this);
  if (LogLevel <= 1)
  {
    *(_WORD *)v308 = 12;
    v290[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v308, v290, "#gmp,HandleEvent(GNSS),Received msmt data", v5, v6, v7, v8, v9, v275);
  }
  if (*(_BYTE *)this)
  {
    if (*((_BYTE *)this + 2296))
    {
      v10 = *((_QWORD *)a2 + 14);
      if (*((_QWORD *)this + 282) == *((_QWORD *)this + 288) + v10)
      {
        *(_WORD *)v308 = 12;
        v290[0] = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v308, v290, "#gmp,HandleEvent(GNSS),dropped due to repeated HW clock %llu", v5, v6, v7, v8, v9, v10);
        return 15;
      }
    }
    *((_BYTE *)this + 16) = 0;
    v310 = 0;
    v309 = 0;
    v311 = 0;
    memset(&v308[8], 0, 92);
    *(_QWORD *)v308 = off_1E25C3EC8;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    v12 = *(_OWORD *)&v308[40];
    v13 = *(_OWORD *)&v308[56];
    v14 = *(_OWORD *)&v308[72];
    *((_QWORD *)this + 14) = *(_QWORD *)&v308[88];
    *((_OWORD *)this + 5) = v13;
    *((_OWORD *)this + 6) = v14;
    *((_OWORD *)this + 4) = v12;
    if ((char *)this + 24 != v308)
      sub_18D189238((uint64_t)this + 120, 0, 0, 0);
    *(_QWORD *)v308 = off_1E25C3EC8;
    *(_QWORD *)v290 = &v308[96];
    sub_18D07C7AC((void ***)v290);
    v24 = *((_QWORD *)a2 + 37);
    if (v24 && *(_BYTE *)(v24 + 80))
    {
      if (!*((_BYTE *)this + 520))
      {
        *((_QWORD *)this + 40) = &off_1E25C30B0;
        *(_OWORD *)((char *)this + 328) = 0u;
        *(_OWORD *)((char *)this + 344) = 0u;
        *(_OWORD *)((char *)this + 360) = 0u;
        *(_OWORD *)((char *)this + 376) = 0u;
        *(_OWORD *)((char *)this + 392) = 0u;
        *((_QWORD *)this + 51) = 0;
        *((_QWORD *)this + 52) = 0x7FF8000000000000;
        *((_QWORD *)this + 53) = 0;
        *((_QWORD *)this + 54) = 0;
        *((_QWORD *)this + 55) = &off_1E25B99F8;
        *((_OWORD *)this + 28) = 0u;
        *((_OWORD *)this + 29) = 0u;
        *((_BYTE *)this + 520) = 1;
        *((_OWORD *)this + 30) = xmmword_18D30B590;
        *((_OWORD *)this + 31) = xmmword_18D30B5A0;
        *((_BYTE *)this + 512) = 0;
      }
      v25 = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)((char *)this + 344) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)this + 328) = v25;
      v26 = *(_OWORD *)((char *)a2 + 40);
      v27 = *(_OWORD *)((char *)a2 + 56);
      v28 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 408) = *(_OWORD *)((char *)a2 + 88);
      *(_OWORD *)((char *)this + 392) = v28;
      *(_OWORD *)((char *)this + 376) = v27;
      *(_OWORD *)((char *)this + 360) = v26;
      v29 = *((_QWORD *)a2 + 37);
      v30 = *(_BYTE *)(v29 + 80);
      v31 = *(_OWORD *)(v29 + 32);
      v32 = *(_OWORD *)(v29 + 48);
      v33 = *(_OWORD *)(v29 + 64);
      *((_OWORD *)this + 28) = *(_OWORD *)(v29 + 16);
      *((_OWORD *)this + 29) = v31;
      *((_OWORD *)this + 30) = v32;
      *((_OWORD *)this + 31) = v33;
      *((_BYTE *)this + 512) = v30;
      v34 = (cnprint::CNPrinter *)sub_18D184FBC((uint64_t)v308, (double)*(unint64_t *)v29 * 0.000000001, v15, v16, v17, v18, v19, v20, v21);
      *(_OWORD *)((char *)this + 424) = *(_OWORD *)v308;
      if (cnprint::CNPrinter::GetLogLevel(v34) <= 1)
      {
        *(_WORD *)v308 = 12;
        v290[0] = 1;
        v35 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 40) + 16))((char *)this + 320);
        *(double *)v37.i64 = v36;
        *(double *)v38.i64 = (double)v35;
        v39 = v36 + (double)v35;
        sub_18D080EA8((int *)this + 106, v37, v38);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v308, v290, "#gmp,t,%.3lf,Klobuchar parameters received and valid,decode_time_s,%.3lf", v40, v41, v42, v43, v44, SLOBYTE(v39));
      }
    }
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 840))
      raven::GnssMeasurementPreprocessor::UpdateMeasurementPropagationTimeUsingDwellEndTimes(this, a2);
    else
      *((_QWORD *)this + 288) = 0;
    v50 = (uint64_t *)((char *)a2 + 256);
    if ((raven::GnssReceiverBandCorrectionsManager::InjectVendorCorrections((uint64_t)this + 1280, (unsigned __int8 **)a2 + 29, (__n128 *)this + 137, (uint64_t *)a2 + 32, (unsigned __int8 *)this + 888, (unsigned __int8 *)this + 977, v20, v21, v22, v23) & 1) == 0)
    {
      *(_WORD *)v308 = 12;
      v290[0] = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v308, v290, "#gmp,Receiver band correction update failed", v51, v52, v53, v54, v55, v275);
      return 3;
    }
    if ((raven::GnssSvDatabase::UpdateTimeConversionInfo((uint64_t)this + 984, (uint64_t *)a2 + 32) & 1) == 0)
    {
      *(_WORD *)v308 = 12;
      v11 = 4;
      v290[0] = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v308, v290, "#gmp,Time conversion information update failed", v56, v57, v58, v59, v60, v275);
      return v11;
    }
    v307 = 0;
    if ((raven::GnssSvDatabase::UpdateSvInfo((uint64_t)this + 984, (uint64_t *)a2 + 26, &v307, v56, v57, v58, v59, v60) & 1) == 0)
    {
      *(_WORD *)v308 = 12;
      v290[0] = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v308, v290, "#gmp,SV info update failed", v61, v62, v63, v64, v65, v275);
      return 5;
    }
    v285 = (raven::GnssMeasurementPreprocessor *)((char *)this + 984);
    *(_QWORD *)&v308[8] = 0;
    *(_QWORD *)&v308[16] = 0;
    *(_QWORD *)v308 = &v308[8];
    v304 = 0;
    v305 = 0;
    v303 = &v304;
    v306 = 1;
    sub_18D271C50(0);
    v284 = a2;
    v70 = (uint64_t *)((char *)a2 + 184);
    v71 = *((_QWORD *)a2 + 23);
    v283 = v70;
    v72 = v70[1];
    if (v71 != v72)
    {
      while (1)
      {
        sub_18D0778AC(v308, "");
        v308[24] = 0;
        *(_DWORD *)&v308[28] = -1;
        v74 = *(unsigned __int8 *)(v71 + 8);
        v75 = v74 > 9;
        v76 = (1 << v74) & 0x2BB;
        v77 = v75 || v76 == 0;
        if (!v77)
          break;
        v78 = *(unsigned __int8 *)(v71 + 197);
        if (*(_BYTE *)(*((_QWORD *)this + 1) + 3792))
          v89 = 1;
        else
          v89 = v78 == 0;
        if (v89)
          goto LABEL_30;
        if (*(_BYTE *)(v71 + 196) != 1)
        {
LABEL_31:
          if (raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId(this, (unint64_t *)v71, (uint64_t)v308, v73, v66, v67, v68, v69))
          {
            v79 = v304;
            v80 = &v304;
            v81 = &v304;
            if (v304)
            {
              while (1)
              {
                while (1)
                {
                  v81 = (uint64_t **)v79;
                  v82 = *((unsigned __int8 *)v79 + 56);
                  v83 = *((_DWORD *)v81 + 15);
                  v84 = v83 < *(_DWORD *)&v308[28];
                  if (v82 != v308[24])
                    v84 = v82 < v308[24];
                  if (!v84)
                    break;
                  v79 = *v81;
                  v80 = v81;
                  if (!*v81)
                    goto LABEL_43;
                }
                v85 = v83 > *(_DWORD *)&v308[28];
                v77 = v82 == v308[24];
                v86 = v82 > v308[24];
                if (v77)
                  v86 = v85;
                if (!v86)
                  break;
                v79 = v81[1];
                if (!v79)
                {
                  v80 = v81 + 1;
                  goto LABEL_43;
                }
              }
            }
            else
            {
LABEL_43:
              v87 = (uint64_t *)operator new(0x40uLL);
              v88 = v87 + 4;
              if ((v308[23] & 0x80000000) != 0)
              {
                sub_18D077798(v88, *(void **)v308, *(unint64_t *)&v308[8]);
              }
              else
              {
                *(_OWORD *)v88 = *(_OWORD *)v308;
                v87[6] = *(_QWORD *)&v308[16];
              }
              v87[7] = *(_QWORD *)&v308[24];
              *v87 = 0;
              v87[1] = 0;
              v87[2] = (uint64_t)v81;
              *v80 = v87;
              if (*v303)
              {
                v303 = (uint64_t **)*v303;
                v87 = *v80;
              }
              sub_18D083D78(v304, v87);
              ++v305;
            }
          }
        }
LABEL_55:
        if ((v308[23] & 0x80000000) != 0)
          operator delete(*(void **)v308);
        v71 += 200;
        if (v71 == v72)
          goto LABEL_58;
      }
      v78 = *(unsigned __int8 *)(v71 + 197);
LABEL_30:
      if (v78)
        goto LABEL_31;
      goto LABEL_55;
    }
LABEL_58:
    if ((raven::GnssSvDatabase::PopulateGnssSvData(v285, (uint64_t)&v303, (char **)this + 15, (uint64_t)this + 248, v66, v67, v68, v69) & 1) == 0)
    {
      *(_WORD *)v308 = 12;
      v290[0] = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v308, v290, "#gmp,Populate Gnss Sv Data failed", v90, v91, v92, v93, v94, v275);
      v11 = 6;
      goto LABEL_77;
    }
    v95 = *(_OWORD *)((char *)v284 + 56);
    *(_OWORD *)&v308[32] = *(_OWORD *)((char *)v284 + 40);
    *(_OWORD *)&v308[48] = v95;
    v96 = *(_OWORD *)((char *)v284 + 88);
    *(_OWORD *)&v308[64] = *(_OWORD *)((char *)v284 + 72);
    *(_OWORD *)&v308[80] = v96;
    v98 = *(int8x16_t *)((char *)v284 + 24);
    *(_OWORD *)v308 = *(_OWORD *)((char *)v284 + 8);
    v97.i64[1] = *(_QWORD *)&v308[8];
    *(int8x16_t *)&v308[16] = v98;
    *(double *)v97.i64 = (double)*((unint64_t *)this + 288) * 0.000000001;
    *(_OWORD *)v290 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)v290, 0, v97, v98);
    *(_QWORD *)v308 = CNTimeSpan::operator+((uint64_t)v308, v290, v99, v100);
    *(_QWORD *)&v308[8] = v101;
    raven::PopulateAllTimeFields((uint64_t)v308, (uint64_t)v284 + 8, v102, v103);
    v109 = *(_OWORD *)&v308[48];
    *(_OWORD *)((char *)this + 184) = *(_OWORD *)&v308[32];
    *(_OWORD *)((char *)this + 200) = v109;
    v110 = *(_OWORD *)&v308[80];
    *(_OWORD *)((char *)this + 216) = *(_OWORD *)&v308[64];
    *(_OWORD *)((char *)this + 232) = v110;
    v111 = *(_OWORD *)&v308[16];
    *(_OWORD *)((char *)this + 152) = *(_OWORD *)v308;
    *(_OWORD *)((char *)this + 168) = v111;
    v302[0] = 0;
    v302[1] = 0;
    v301 = v302;
    v112 = (uint64_t *)*((_QWORD *)this + 15);
    v113 = (uint64_t *)*((_QWORD *)this + 16);
    while (v112 != v113)
    {
      v114 = *v112;
      if (*v112)
      {
        *(_QWORD *)v290 = *v112;
        sub_18D271C98((uint64_t)&v301, *(_BYTE *)(v114 + 24), *(_DWORD *)(v114 + 28), (__int128 **)v290)[8] = v114;
      }
      v112 += 2;
    }
    if (!*((_BYTE *)this + 729) || !*((_BYTE *)this + 730) || !*((_BYTE *)this + 808))
    {
      *(_WORD *)v290 = 12;
      LOBYTE(v287) = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v287, "#gmp,No valid last position", v104, v105, v106, v107, v108, v275);
      v11 = 7;
      goto LABEL_76;
    }
    if (!raven::GnssMeasurementPreprocessor::UpdateCurrentDayAndWeek((unsigned __int8 *)this, v50))
    {
      *(_WORD *)v290 = 12;
      LOBYTE(v287) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v287, "#gmp,Could not update current day and week", v115, v116, v117, v118, v119, v275);
      v11 = 8;
      goto LABEL_76;
    }
    v122 = (uint64_t)v284 + 112;
    LOBYTE(v299) = 0;
    v300 = 0;
    v123 = *((_QWORD *)this + 288) + *((_QWORD *)v284 + 14);
    if (*((_BYTE *)this + 2296))
    {
      v124 = *((_QWORD *)this + 282);
      if (v123 < v124)
      {
        *(_WORD *)v290 = 12;
        LOBYTE(v287) = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v287, "#gmp,HW clock reset detected,last,%llu,current,%llu", v115, v116, v117, v118, v119, v124);
        v125 = 0;
        v126 = 1;
LABEL_84:
        v298 = 0uLL;
        v133 = (char *)this + 2224;
        if ((raven::GnssMeasurementPreprocessor::EstimateCoarseReceiverTaiTime((uint64_t)this, (uint64_t)v284 + 112, (uint64_t)&v301, (uint64_t)&v298, v116, v117, v118, v119, v120, v121) & 1) == 0)
        {
          v134 = *((_BYTE *)this + 2296);
          v135 = v125 ^ 1;
          if (!v134)
            v135 = 1;
          if ((v135 & 1) != 0)
          {
            *(_WORD *)v290 = 12;
            LOBYTE(v287) = 3;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v287, "#gmp,Could not estimate coarse receiver TAI time,last times set,%d,HW clock diff set,%d", v128, v129, v130, v131, v132, v134);
            v11 = 9;
            goto LABEL_76;
          }
          *(_WORD *)v290 = 12;
          LOBYTE(v287) = 2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v287, "#gmp,Fell back to propagation for coarse receiver TAI time", v128, v129, v130, v131, v132, v275);
          if (!*((_BYTE *)this + 2296))
            sub_18D164CA0();
          *(double *)v136.i64 = v299;
          *(_OWORD *)v290 = 0uLL;
          CNTimeSpan::SetTimeSpan((uint64_t *)v290, 0, v136, v137);
          *(_QWORD *)&v298 = CNTimeSpan::operator+((uint64_t)this + 2224, v290, v138, v139);
          *((_QWORD *)&v298 + 1) = v140;
        }
        v282 = v126;
        v281 = v123;
        v141 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(_QWORD *)v284 + 16))(v284);
        v143 = v142;
        v144 = v142;
        *(_OWORD *)v290 = 0x3CuLL;
        v147 = CNTimeSpan::operator+((uint64_t)this + 2312, v290, v145, v146);
        v154 = v148;
        if ((v141 || (*(_QWORD *)&v143 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && (v147 || (*(_QWORD *)&v148 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && v141 != v147)
        {
          v155 = v141 > v147;
        }
        else
        {
          v155 = v144 >= v148;
        }
        if (v155 || v307)
        {
          v295 = 0;
          v296 = 0;
          v297 = 0;
          *(_WORD *)v290 = 0;
          memset(&v290[8], 0, 32);
          v291 = 0;
          v292 = 0;
          v293 = 0;
          v294 = 0;
          LOBYTE(v287) = 0;
          v289 = 0;
          raven::GnssSvDatabase::PopulateGnssSvData(v285, (uint64_t)&v287, &v295, (uint64_t)v290, v149, v150, v151, v152);
          if (v289)
            sub_18D271C50(*((char **)&v287 + 1));
          *((_QWORD *)&v287 + 1) = 0;
          v288 = 0;
          *(_QWORD *)&v287 = (char *)&v287 + 8;
          v156 = v295;
          v157 = v296;
          while (v156 != v157)
          {
            v158 = *(__int128 **)v156;
            if (*(_QWORD *)v156)
            {
              v312[0] = *(__int128 **)v156;
              sub_18D271C98((uint64_t)&v287, *((_BYTE *)v158 + 24), *((_DWORD *)v158 + 7), v312)[8] = v158;
            }
            v156 += 16;
          }
          LOWORD(v312[0]) = 12;
          v286 = 2;
          v159 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(_QWORD *)v284 + 16))(v284);
          v276 = v160 + (double)v159;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, &v286, "#gmp,Recomputing active GLONASS satellites,current-time,%lf,last-time,%lf,re-eval-needed,%i", v161, v162, v163, v164, v165, SLOBYTE(v276));
          v133 = (char *)this + 2224;
          if (raven::GnssSvDatabase::RecomputeActiveGlonassSlots((uint64_t)v285, (uint64_t)this + 528, (uint64_t)&v287, (uint64_t)&v298, v166, v167, v168, v169))
          {
            *((_QWORD *)this + 289) = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(_QWORD *)v284 + 16))(v284);
            *((_QWORD *)this + 290) = v175;
          }
          else
          {
            LOWORD(v312[0]) = 12;
            v286 = 3;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, &v286, "#gmp,Could not compute active GLONASS satellites", v170, v171, v172, v173, v174, v275);
          }
          sub_18D271C50(*((char **)&v287 + 1));
          *(_QWORD *)v290 = &v295;
          sub_18D07C7AC((void ***)v290);
        }
        LOBYTE(v287) = 0;
        v176 = raven::GnssMeasurementPreprocessor::DetermineNearestReceiverTaiTimeMillisecond((uint64_t)this, v122, (uint64_t)&v301, &v298, &v287, v150, v151, v152, v154, v153);
        if ((v176 & 1) != 0)
        {
          if ((_BYTE)v287)
          {
            v184 = v287 ^ 1;
          }
          else
          {
            if (!*((_BYTE *)this + 2296))
              goto LABEL_125;
            v191 = v125 ^ 1;
            if (*((_BYTE *)this + 2280))
              v191 = 1;
            if ((v191 & 1) != 0)
            {
LABEL_125:
              v184 = 1;
            }
            else
            {
              *(double *)v182.i64 = v299;
              *(_OWORD *)v290 = 0uLL;
              CNTimeSpan::SetTimeSpan((uint64_t *)v290, 0, v182, v183);
              v176 = CNTimeSpan::operator+((uint64_t)v133, v290, v192, v193);
              v184 = 0;
              *(_QWORD *)&v298 = v176;
              *((_QWORD *)&v298 + 1) = v194;
            }
          }
        }
        else
        {
          v185 = v125 ^ 1;
          if (!*((_BYTE *)this + 2296))
            v185 = 1;
          if ((v185 & 1) != 0)
          {
            *(_WORD *)v290 = 12;
            LOBYTE(v295) = 3;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v295, "#gmp,Could not determine nearest receiver TAI millisecond", v177, v178, v179, v180, v181, v275);
            v11 = 10;
            goto LABEL_76;
          }
          *(_WORD *)v290 = 12;
          LOBYTE(v295) = 2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v295, "#gmp,DetermineNearestReceiverTaiTimeMillisecond, fell back to propagation", v177, v178, v179, v180, v181, v275);
          if (!*((_BYTE *)this + 2296))
            sub_18D164CA0();
          *(double *)v186.i64 = v299;
          *(_OWORD *)v290 = 0uLL;
          CNTimeSpan::SetTimeSpan((uint64_t *)v290, 0, v186, v187);
          v176 = CNTimeSpan::operator+((uint64_t)v133, v290, v188, v189);
          *(_QWORD *)&v298 = v176;
          *((_QWORD *)&v298 + 1) = v190;
          v184 = *((unsigned __int8 *)this + 2280);
        }
        v195 = *(_DWORD *)(*((_QWORD *)this + 1) + 3824);
        if (v195)
        {
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v176) <= 1)
          {
            *(_WORD *)v290 = 12;
            LOBYTE(v287) = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v287, "#gmp,Introducing artificial GNSS time offset of %d ms", v196, v197, v198, v199, v200, v195);
          }
          v202.i64[0] = 0x3F50624DD2F1A9FCLL;
          *(double *)v201.i64 = (double)v195 * 0.001;
          *(_OWORD *)v290 = 0uLL;
          CNTimeSpan::SetTimeSpan((uint64_t *)v290, 0, v201, v202);
          *(_QWORD *)&v298 = CNTimeSpan::operator+((uint64_t)&v298, v290, v203, v204);
          *((_QWORD *)&v298 + 1) = v205;
        }
        v206 = raven::GnssMeasurementPreprocessor::ComputeSvElevAzimLosSpeed((unsigned __int8 *)this, (uint64_t **)this + 15, (uint64_t)&v298, v184 != 0);
        if (!v206)
        {
          v11 = 12;
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v206) <= 1)
          {
            *(_WORD *)v290 = 12;
            LOBYTE(v287) = 1;
            v220 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(_QWORD *)v284 + 16))(v284);
            v277 = v221 + (double)v220;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v287, "#gmp,Could not derive augmented SV data,t,%.3lf", v222, v223, v224, v225, v226, SLOBYTE(v277));
          }
          goto LABEL_76;
        }
        v287 = 0uLL;
        if ((raven::GnssMeasurementPreprocessor::PopulateGnssMeasurements((unint64_t)this, v283, (double *)&v298, (uint64_t)&v301, v308, (uint64_t)&v299, v184 != 0, &v287, v207, v208) & 1) != 0)
        {
          v214 = raven::GnssMeasurementPreprocessor::OrderGnssMeasurements(this, (uint64_t *)this + 15);
          if (!v214)
          {
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v214) <= 1)
            {
              *(_WORD *)v290 = 12;
              LOBYTE(v295) = 1;
              v227 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(_QWORD *)v284 + 16))(v284);
              v278 = v228 + (double)v227;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v295, "#gmp,Could not order GNSS measurements,t,%.3lf", v229, v230, v231, v232, v233, SLOBYTE(v278));
            }
            v11 = 13;
            goto LABEL_76;
          }
          v216 = v133;
          v217 = *(int8x16_t *)v308;
          *((_OWORD *)this + 2) = *(_OWORD *)v308;
          v219 = (uint64_t *)*((_QWORD *)this + 15);
          v218 = (uint64_t *)*((_QWORD *)this + 16);
          while (v219 != v218)
          {
            if (*v219)
            {
              if ((raven::GNSSPreprocessedMeasurementsChecker::CanSvAndMeasurementDataBeIncluded(*v219, *((_QWORD *)this + 1)) & 1) != 0)++*((_DWORD *)this + 29);
              else
                sub_18D26F5C4(v219);
            }
            v219 += 2;
          }
          if (*((_BYTE *)this + 2296))
          {
            v234 = CNTimeSpan::operator-((uint64_t)v308, (_QWORD *)this + 283, v217, v215);
            if (!*((_BYTE *)this + 88))
              *((_BYTE *)this + 88) = 1;
            *(double *)v236.i64 = v235 + (double)v234;
            *((_QWORD *)this + 10) = v236.i64[0];
            v238 = 1;
            if (v125)
            {
              *(double *)v237.i64 = (double)v234;
              *(double *)v239.i64 = (double)CNTimeSpan::operator-((uint64_t)&v287, (_QWORD *)this + 280, v236, v237);
              *(double *)v241.i64 = v240 + *(double *)v239.i64;
              *((double *)this + 8) = v299;
              *((double *)this + 6) = v240 + *(double *)v239.i64;
              *((_BYTE *)this + 56) = 1;
              *((_BYTE *)this + 72) = v300;
              v242 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v298, v216, v241, v239);
              if (!*((_BYTE *)this + 72))
                sub_18D164CA0();
              if (vabdd_f64(v243 + (double)(uint64_t)v242, *((double *)this + 8)) >= fabs(*((double *)this + 8) * 0.00002))
              {
                if (cnprint::CNPrinter::GetLogLevel(v242) <= 1)
                {
                  *(_WORD *)v290 = 12;
                  LOBYTE(v295) = 1;
                  v268 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(_QWORD *)v284 + 16))(v284);
                  v280 = v269 + (double)v268;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v295, "#gmp,t,%.3lf,hw clock and tai rx time mismatch,hw_clock_diff_sec,%.8lf,full_tai_rx_time_diff_sec,%.8lf,mismatch_sec,%.8lf,threshold_sec,%.8lf", v270, v271, v272, v273, v274, SLOBYTE(v280));
                }
              }
              else
              {
                v238 = 0;
              }
            }
          }
          else
          {
            v238 = 1;
          }
          v244 = sub_18D26F620(v122);
          if (v244 && *((float *)v284 + 30) > 8.44 && *((float *)v284 + 31) > 2.86)
          {
            v250 = (char *)this + 112;
            v251 = *((unsigned __int8 *)this + 112);
            *((_OWORD *)this + 6) = *(_OWORD *)((char *)v284 + 120);
            if (v251)
              goto LABEL_161;
          }
          else
          {
            v250 = (char *)this + 112;
            v252 = *((unsigned __int8 *)this + 112);
            *((_OWORD *)this + 6) = xmmword_18D336360;
            if (v252)
              goto LABEL_161;
          }
          *v250 = 1;
LABEL_161:
          if (v184)
            v253 = 1;
          else
            v253 = v238;
          if ((v253 & 1) == 0)
          {
            if (*((_BYTE *)this + 2296))
            {
              v254 = v282;
              if (*((_BYTE *)this + 2280))
                v254 = 1;
              if ((v254 & 1) == 0)
              {
                v255 = 0;
LABEL_174:
                v256 = *((double *)v284 + 13);
                if (v256 < 0.0 || v256 > 0.2)
                {
                  *(_WORD *)v290 = 12;
                  LOBYTE(v295) = 3;
                  v279 = *((double *)v284 + 2) + (double)*((uint64_t *)v284 + 1);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v295, "#gmp,Throwing away GNSS measurements due to raven time uncertainty,time,%.2f,unc,%.2f", v245, v246, v247, v248, v249, SLOBYTE(v279));
                  v11 = 14;
                }
                else
                {
                  if (*((_BYTE *)this + 2296)
                    && v256 >= 0.0
                    && v256 < 0.2
                    && (v257 = *((double *)this + 286), v257 >= 0.0)
                    && v257 < 0.2)
                  {
                    if ((v255 & 1) == 0)
                    {
                      v258 = (v256 * v256 + v257 * v257) * 9.0e-12 * 1000000000.0 * 1000000000.0;
                      *((float *)this + 27) = *((float *)this + 27) + v258;
                    }
                  }
                  else if ((v255 & 1) == 0)
                  {
                    *((_BYTE *)this + 112) = 0;
                  }
                  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v244) <= 1)
                  {
                    *(_WORD *)v290 = 12;
                    LOBYTE(v295) = 1;
                    v264 = *((double *)this + 5) + (double)*((uint64_t *)this + 4);
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v295, "#gmp,Preprocessed meas avail,t,%.1f,Elapsed millisec since last report,HW,%.2f,Raven,%.2f,TAI,%.2f,continuous clock,%d", v259, v260, v261, v262, v263, SLOBYTE(v264));
                  }
                  v265 = v287;
                  *(_OWORD *)v290 = v298;
                  *(_OWORD *)&v290[16] = v287;
                  v266 = *((_QWORD *)v284 + 13);
                  v267 = *((unsigned __int8 *)this + 2296);
                  *(_OWORD *)v216 = v298;
                  *((_OWORD *)v216 + 1) = v265;
                  *((_QWORD *)this + 282) = v281;
                  *(_OWORD *)((char *)this + 2264) = *(_OWORD *)v308;
                  *((_BYTE *)this + 2280) = v184 != 0;
                  *((_QWORD *)this + 286) = v266;
                  if (!v267)
                    *((_BYTE *)this + 2296) = 1;
                  v11 = 1;
                  *((_BYTE *)this + 16) = 1;
                }
                goto LABEL_76;
              }
            }
            else
            {
              v255 = v282;
              if (!v282)
                goto LABEL_174;
            }
          }
          if (*((_BYTE *)this + 56))
            *((_BYTE *)this + 56) = 0;
          *((_BYTE *)this + 112) = 0;
          v255 = 1;
          goto LABEL_174;
        }
        *(_WORD *)v290 = 12;
        LOBYTE(v295) = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v290, (unsigned __int8 *)&v295, "#gmp,Could not populate GNSS measurements", v209, v210, v211, v212, v213, v275);
        v11 = 11;
LABEL_76:
        sub_18D271C50(v302[0]);
LABEL_77:
        if (v306)
          sub_18D271C50((char *)v304);
        return v11;
      }
      if (v124)
      {
        v126 = 0;
        v120 = (double)(uint64_t)(v123 - v124) * 0.000000001;
        v299 = v120;
        v125 = 1;
        v300 = 1;
        goto LABEL_84;
      }
    }
    v125 = 0;
    v126 = 0;
    goto LABEL_84;
  }
  if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    *(_WORD *)v308 = 12;
    v290[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v308, v290, "#gmp,HandleEvent(GNSS),not configured", v45, v46, v47, v48, v49, v275);
  }
  return 2;
}

void sub_18D26EF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  sub_18D271C50(*(char **)(v47 + 40));
  if (a47)
    sub_18D271C50(*(char **)(v47 + 64));
  _Unwind_Resume(a1);
}

BOOL raven::GnssMeasurementPreprocessor::ComputeSvElevAzimLosSpeed(unsigned __int8 *a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  int v25;
  unsigned __int8 v28;
  _BYTE v29[24];
  _BYTE v30[24];
  __int16 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v25 = *a1;
  if (*a1)
  {
    v4 = *a2;
    v5 = a2[1];
    if (*a2 != v5)
    {
      do
      {
        v7 = *v4;
        if (*v4)
        {
          v31 = 0;
          v32 = 0u;
          v33 = 0u;
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v37 = 0;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, __int16 *, _BYTE *, _BYTE *, __int128 *))(*(_QWORD *)(v7 + 32) + 56))(v7 + 32, a3, &v31, v30, v29, &v39))
          {
            v39 = *((_OWORD *)a1 + 51);
            v40 = *((_QWORD *)a1 + 104);
            if (!cnnavigation::SatElAz((uint64_t)&v39, (uint64_t)v30, 1, (uint64_t)&v38, 0, (uint64_t)&v31))
            {
              *(_OWORD *)(v7 + 264) = v38;
              if (*(_BYTE *)(v7 + 288))
                *(_BYTE *)(v7 + 288) = 0;
              if (a4)
              {
                v8 = 0;
                v9 = 0.0;
                v10 = 0.0;
                do
                {
                  v11 = *(double *)&v30[v8] - *(double *)((char *)&v39 + v8);
                  v10 = v10 + v11 * *(double *)&v29[v8];
                  v9 = v9 + v11 * v11;
                  v8 += 8;
                }
                while (v8 != 24);
                if (fabs(v9) >= 2.22044605e-16)
                {
                  *(double *)(v7 + 280) = v10 / sqrt(v9);
                  *(_BYTE *)(v7 + 288) = 1;
                }
                else
                {
                  v31 = 12;
                  v28 = 4;
                  v12 = sub_18D181C54(v7);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v28, "#gmp,Computation of range to satellite %s unexpectedly resulted in zero", v13, v14, v15, v16, v17, v12);
                }
              }
            }
          }
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    v31 = 12;
    LOBYTE(v39) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, (unsigned __int8 *)&v39, "#gmp,ComputeSvElevAzimLosSpeed,not configured", v18, v19, v20, v21, v22, v24);
  }
  return v25 != 0;
}

BOOL raven::GnssMeasurementPreprocessor::OrderGnssMeasurements(cnprint::CNPrinter *a1, uint64_t *a2)
{
  int v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v44;
  char *v45;
  void *__p;
  uint64_t *v47;
  uint64_t *v48;
  int64x2_t v49;
  char *v50;
  char **v51;

  v2 = *(unsigned __int8 *)a1;
  if (*(_BYTE *)a1)
  {
    sub_18D26FD4C(&__p, (a2[1] - *a2) >> 4);
    v4 = (uint64_t *)__p;
    v5 = v47;
    if (__p != v47)
    {
      v6 = 0;
      v7 = (uint64_t *)__p;
      do
        *v7++ = v6++;
      while (v7 != v5);
    }
    v8 = 126 - 2 * __clz(v5 - v4);
    v48 = a2;
    if (v5 == v4)
      v9 = 0;
    else
      v9 = v8;
    sub_18D26FDC0((uint64_t)v4, v5, &v48, v9, 1);
    v44 = 0uLL;
    v45 = 0;
    v10 = (uint64_t *)__p;
    v11 = v47;
    v12 = (char *)v47 - (_BYTE *)__p;
    if (v47 != __p)
    {
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF9)
        sub_18D07AFE4();
      v51 = &v45;
      v13 = (char *)sub_18D16735C((uint64_t)&v45, v12 >> 3);
      v15 = (_QWORD *)*((_QWORD *)&v44 + 1);
      v16 = (_QWORD *)v44;
      if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      {
        v19 = vdupq_n_s64(*((unint64_t *)&v44 + 1));
        v17 = v13;
      }
      else
      {
        v17 = v13;
        do
        {
          v18 = *((_OWORD *)v15 - 1);
          v15 -= 2;
          *((_OWORD *)v17 - 1) = v18;
          v17 -= 16;
          *v15 = 0;
          v15[1] = 0;
        }
        while (v15 != v16);
        v19 = (int64x2_t)v44;
      }
      *(_QWORD *)&v44 = v17;
      *((_QWORD *)&v44 + 1) = v13;
      v49 = v19;
      v25 = v45;
      v45 = &v13[16 * v14];
      v50 = v25;
      v48 = (uint64_t *)v19.i64[0];
      sub_18D1852F0((uint64_t)&v48);
      v10 = (uint64_t *)__p;
      v11 = v47;
    }
    if (v10 == v11)
    {
      v26 = (char *)*((_QWORD *)&v44 + 1);
    }
    else
    {
      v26 = (char *)*((_QWORD *)&v44 + 1);
      do
      {
        v27 = *a2 + 16 * *v10;
        if (v26 >= v45)
        {
          v28 = (uint64_t)&v26[-v44] >> 4;
          if ((unint64_t)(v28 + 1) >> 60)
            sub_18D07AFE4();
          v29 = (uint64_t)&v45[-v44] >> 3;
          if (v29 <= v28 + 1)
            v29 = v28 + 1;
          if ((unint64_t)&v45[-v44] >= 0x7FFFFFFFFFFFFFF0)
            v30 = 0xFFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          v51 = &v45;
          v31 = (char *)sub_18D16735C((uint64_t)&v45, v30);
          v33 = &v31[16 * v28];
          *(_OWORD *)v33 = *(_OWORD *)v27;
          *(_QWORD *)v27 = 0;
          *(_QWORD *)(v27 + 8) = 0;
          v34 = (_QWORD *)*((_QWORD *)&v44 + 1);
          v35 = (_QWORD *)v44;
          if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
          {
            v38 = vdupq_n_s64(*((unint64_t *)&v44 + 1));
            v36 = &v31[16 * v28];
          }
          else
          {
            v36 = &v31[16 * v28];
            do
            {
              v37 = *((_OWORD *)v34 - 1);
              v34 -= 2;
              *((_OWORD *)v36 - 1) = v37;
              v36 -= 16;
              *v34 = 0;
              v34[1] = 0;
            }
            while (v34 != v35);
            v38 = (int64x2_t)v44;
          }
          v26 = v33 + 16;
          *(_QWORD *)&v44 = v36;
          *((_QWORD *)&v44 + 1) = v33 + 16;
          v49 = v38;
          v39 = v45;
          v45 = &v31[16 * v32];
          v50 = v39;
          v48 = (uint64_t *)v38.i64[0];
          sub_18D1852F0((uint64_t)&v48);
        }
        else
        {
          *(_OWORD *)v26 = *(_OWORD *)v27;
          v26 += 16;
          *(_QWORD *)v27 = 0;
          *(_QWORD *)(v27 + 8) = 0;
        }
        *((_QWORD *)&v44 + 1) = v26;
        ++v10;
      }
      while (v10 != v11);
    }
    v40 = *(_OWORD *)a2;
    v41 = (uint64_t)v45;
    *a2 = v44;
    a2[1] = (uint64_t)v26;
    v44 = v40;
    v42 = a2[2];
    a2[2] = v41;
    v45 = (char *)v42;
    v48 = (uint64_t *)&v44;
    sub_18D07C7AC((void ***)&v48);
    if (__p)
    {
      v47 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    LOWORD(v48) = 12;
    LOBYTE(__p) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, (unsigned __int8 *)&__p, "#gmp,OrderGnssMeasurements,not configured", v20, v21, v22, v23, v24, v44);
  }
  return v2 != 0;
}

void sub_18D26F590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  a15 = &a9;
  sub_18D07C7AC((void ***)&a15);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_18D26F5C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

BOOL sub_18D26F620(uint64_t a1)
{
  return *(_QWORD *)a1 != -1
      && (*(_QWORD *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)(a1 + 32) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_DWORD *)(a1 + 8) & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (*(_DWORD *)(a1 + 12) & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (*(_DWORD *)(a1 + 16) & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (*(_DWORD *)(a1 + 20) & 0x7FFFFFFFu) < 0x7F800000;
}

BOOL raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::ReceiverDifferentialCodeBiasesEvent *a2)
{
  int v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    if (*((_BYTE *)this + 2160))
    {
      memcpy((char *)this + 1336, (char *)a2 + 8, 0x334uLL);
    }
    else
    {
      *((_QWORD *)this + 166) = &unk_1E25C4350;
      memcpy((char *)this + 1336, (char *)a2 + 8, 0x334uLL);
      *((_BYTE *)this + 2160) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v15 = 12;
    v14 = 1;
    v5 = (*(uint64_t (**)(const raven::ReceiverDifferentialCodeBiasesEvent *))(*(_QWORD *)a2 + 16))(a2);
    v13 = v6 + (double)v5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "#gmp,t,%.3lf,GNSS pre-processor not configured, failed to handle ReceiverDifferentialCodeBiasesEvent", v7, v8, v9, v10, v11, SLOBYTE(v13));
  }
  return v3 != 0;
}

BOOL raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::ThinShellIonosphereParametersEvent *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v20;
  unsigned __int8 v21;
  __int16 v22;

  v3 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    v4 = *(_OWORD *)((char *)a2 + 104);
    v5 = *(_OWORD *)((char *)a2 + 120);
    *((_OWORD *)this + 149) = *(_OWORD *)((char *)a2 + 136);
    *((_OWORD *)this + 148) = v5;
    *((_OWORD *)this + 147) = v4;
    v6 = *(_OWORD *)((char *)a2 + 152);
    v7 = *(_OWORD *)((char *)a2 + 168);
    v8 = *(_OWORD *)((char *)a2 + 184);
    *((_OWORD *)this + 153) = *(_OWORD *)((char *)a2 + 200);
    *((_OWORD *)this + 152) = v8;
    *((_OWORD *)this + 151) = v7;
    *((_OWORD *)this + 150) = v6;
    v9 = *(_OWORD *)((char *)a2 + 216);
    v10 = *(_OWORD *)((char *)a2 + 232);
    v11 = *(_OWORD *)((char *)a2 + 248);
    *((_OWORD *)this + 157) = *(_OWORD *)((char *)a2 + 264);
    *((_OWORD *)this + 156) = v11;
    *((_OWORD *)this + 155) = v10;
    *((_OWORD *)this + 154) = v9;
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v22 = 12;
    v21 = 1;
    v12 = (*(uint64_t (**)(const raven::ThinShellIonosphereParametersEvent *))(*(_QWORD *)a2 + 16))(a2);
    v20 = v13 + (double)v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "#gmp,t,%.3lf,GNSS pre-processor not configured, failed to handle ThinShellIonosphereParametersEvent", v14, v15, v16, v17, v18, SLOBYTE(v20));
  }
  return v3 != 0;
}

BOOL raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::SignalEnvironmentEvent *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  v2 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    *((_BYTE *)this + 977) = *((_BYTE *)a2 + 104);
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v11 = 12;
    v10 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "#gmp,HandleEvent(SignalEnvironment),not configured", v3, v4, v5, v6, v7, v9);
  }
  return v2 != 0;
}

uint64_t raven::GnssMeasurementPreprocessor::HandleEvent(cnnavigation::SphericalHarmonicsIonosphereModel **this, const raven::RavenGnssAssistanceFileEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cnnavigation::SphericalHarmonicsIonosphereModel *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const cnnavigation::SphericalHarmonicsIonosphereParameters *v18;
  const cnnavigation::SphericalHarmonicsIonosphereParameters *v19;
  cnnavigation::SphericalHarmonicsIonosphereModel *v20;
  uint64_t v21;
  uint64_t i;
  char *v23;
  char IsValid;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned __int8 v32;
  __int16 v33;
  __int128 v34;

  if (!*(_BYTE *)this)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this) <= 1)
    {
      LOWORD(v34) = 12;
      LOBYTE(v33) = 1;
      v23 = "#gmp,#rof,GNSS pre-processor not configured,failed to handle RavenGnssAssistanceFileEvent";
LABEL_22:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v33, v23, a4, a5, a6, a7, a8, v31);
    }
    return 0;
  }
  v9 = this[318];
  if (!v9)
  {
    if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
    {
      LOWORD(v34) = 12;
      LOBYTE(v33) = 1;
      v23 = "#gmp,#rof,ionosphere model not configured,failed to handle RavenGnssAssistanceFileEvent";
      goto LABEL_22;
    }
    return 0;
  }
  if (*((_QWORD *)a2 + 16) == *((_QWORD *)a2 + 15))
  {
    LOWORD(v34) = 12;
    LOBYTE(v33) = 4;
    v23 = "#gmp,#rof,Handle RavenGnssAssistanceFileEvent,iono parameters empty";
    goto LABEL_22;
  }
  v11 = (*(uint64_t (**)(cnnavigation::SphericalHarmonicsIonosphereModel *))(*(_QWORD *)v9 + 32))(v9);
  v18 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)*((_QWORD *)a2 + 15);
  v19 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)*((_QWORD *)a2 + 16);
  if (v11 && *((_QWORD *)this[318] + 4) != 0x80FE03F80FE03F81 * ((v19 - v18) >> 6))
  {
    LOWORD(v34) = 12;
    LOBYTE(v33) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v33, "#gmp,#rof,Handle RavenGnssAssistanceFileEvent,received number of iono layers %zu mismatch %zu,resetting", v13, v14, v15, v16, v17, -127 * ((v19 - v18) >> 6));
    v20 = this[318];
    if (*((_QWORD *)v20 + 4))
    {
      sub_18D08DA4C((uint64_t)v20 + 8, *((_QWORD **)v20 + 3));
      *((_QWORD *)v20 + 3) = 0;
      v21 = *((_QWORD *)v20 + 2);
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_QWORD *)(*((_QWORD *)v20 + 1) + 8 * i) = 0;
      }
      *((_QWORD *)v20 + 4) = 0;
    }
    v18 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)*((_QWORD *)a2 + 15);
    v19 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)*((_QWORD *)a2 + 16);
  }
  if (v18 != v19)
  {
    while (!cnnavigation::SphericalHarmonicsIonosphereModel::UpdateParameters(this[318], v18, v12, v13, v14, v15, v16, v17))
    {
      v18 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)((char *)v18 + 8256);
      if (v18 == v19)
        goto LABEL_15;
    }
    return 0;
  }
LABEL_15:
  if (*((_BYTE *)this + 2296))
  {
    v34 = *((_OWORD *)this + 139);
  }
  else
  {
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0x7FF8000000000000;
  }
  cnnavigation::SphericalHarmonicsIonosphereModel::GetApplicabilityTime(this[318]);
  v33 = 12;
  v32 = 3;
  IsValid = cnnavigation::SphericalHarmonicsIonosphereModel::IsValid(this[318], (const cnnavigation::TAITime *)&v34);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "#gmp,#rof,Updated SH ionosphere model parameters,is_valid,%d,num_layers,%zu,iono_applicability_time,%.3lf,iono_age_sec,%.3lf,age_thld_sec,%.1f", v26, v27, v28, v29, v30, IsValid);
  return 1;
}

BOOL sub_18D26FB14(int *a1)
{
  _BOOL8 result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;

  result = sub_18D185074(a1);
  if (result)
  {
    v3 = *((unsigned __int8 *)a1 + 8);
    if ((v3 - 1) > 9)
      return 0;
    v4 = *((_QWORD *)a1 + 2);
    if (v4 == -1)
      return 0;
    v5 = *((_QWORD *)a1 + 3);
    if (v5 == -1)
      return 0;
    result = 0;
    if (v4 <= v5 && *((_QWORD *)a1 + 4) != -1)
    {
      if (*((float *)a1 + 48) < 0.0)
        return 0;
      result = 0;
      v6 = *a1;
      if (*a1 > 15)
      {
        switch(v6)
        {
          case 64:
            if (v3 != 10)
              return 0;
            break;
          case 32:
            if (v3 != 9)
              return 0;
            break;
          case 16:
LABEL_17:
            v7 = (v3 - 1);
LABEL_21:
            if (v7 >= 2)
              return 0;
            break;
          default:
            return result;
        }
LABEL_26:
        v8 = (_DWORD *)*((_QWORD *)a1 + 23);
        return !v8 || sub_18D26FC3C(v8);
      }
      else
      {
        switch(v6)
        {
          case 1:
            goto LABEL_17;
          case 2:
            if (v3 == 3)
              goto LABEL_26;
            return 0;
          case 4:
            if ((v3 - 4) < 3)
              goto LABEL_26;
            return 0;
          case 8:
            v7 = (v3 - 7);
            goto LABEL_21;
          default:
            return result;
        }
      }
    }
  }
  return result;
}

BOOL sub_18D26FC3C(_DWORD *a1)
{
  int v1;
  int v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v5;

  if ((a1[1] & 0x7FFFFFFFu) > 0x7F7FFFFF || (a1[8] & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  v1 = a1[10];
  if ((a1[9] & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if ((v1 & 0x7FFFFFFFu) < 0x7F800000)
      return 0;
  }
  else if ((v1 & 0x7FFFFFFFu) >= 0x7F800000)
  {
    return 0;
  }
  if ((a1[11] & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  v2 = a1[13];
  if ((a1[12] & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if ((v2 & 0x7FFFFFFFu) >= 0x7F800000)
      goto LABEL_12;
    return 0;
  }
  if ((v2 & 0x7FFFFFFFu) >= 0x7F800000)
    return 0;
LABEL_12:
  if ((a1[14] & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  v3 = a1[16];
  v4 = (v3 & 0x7FFFFFFFu) > 0x7F7FFFFF;
  v5 = (v3 & 0x7FFFFFFFu) < 0x7F800000;
  if ((a1[15] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    return v5;
  else
    return v4;
}

_QWORD *sub_18D26FD4C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_18D169B48(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_18D26FDA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D26FDC0(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t k;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *m;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  BOOL v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  uint64_t *j;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  BOOL v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  BOOL v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int64_t v139;
  uint64_t *v140;
  int64_t v141;
  int64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  BOOL v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  BOOL v162;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  BOOL v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  int v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  BOOL v206;
  BOOL v207;
  uint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  BOOL v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  BOOL v226;
  BOOL v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  BOOL v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  BOOL v240;
  BOOL v241;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  i = v9;
  while (2)
  {
    v9 = i;
    v12 = (char *)a2 - (char *)i;
    v13 = a2 - i;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v111 = *(a2 - 1);
        v112 = **a3;
        v113 = *i;
        v114 = (uint64_t *)(v112 + 16 * *i);
        v115 = *(_QWORD *)(v112 + 16 * v111);
        if (v115)
        {
          v116 = *(_QWORD *)(v115 + 328);
          v117 = v116 == *(_QWORD *)(v115 + 336) || *(unsigned __int8 *)(v116 + 189) != 1;
        }
        else
        {
          v117 = -1;
        }
        v237 = *v114;
        if (v237)
        {
          v238 = *(_QWORD *)(v237 + 328);
          v239 = v238 == *(_QWORD *)(v237 + 336) || *(unsigned __int8 *)(v238 + 189) != 1;
        }
        else
        {
          v239 = -1;
        }
        v240 = v117 <= v239;
        if (v117 != v239)
          goto LABEL_491;
        if (v115)
          v241 = v237 == 0;
        else
          v241 = 1;
        if (!v241)
        {
          v240 = *(double *)(v115 + 264) <= *(double *)(v237 + 264);
LABEL_491:
          if (!v240)
          {
            *i = v111;
            *(a2 - 1) = v113;
          }
        }
        return result;
      case 3:
        return (uint64_t)sub_18D271398(i, i + 1, a2 - 1, **a3);
      case 4:
        return (uint64_t)sub_18D2719B4(i, i + 1, i + 2, a2 - 1, a3);
      case 5:
        return (uint64_t)sub_18D2710E0(i, i + 1, i + 2, i + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (i == a2)
              return result;
            v118 = i + 1;
            if (i + 1 == a2)
              return result;
            v119 = 0;
            v120 = **a3;
            v121 = i;
            while (1)
            {
              v122 = v121;
              v121 = v118;
              v123 = v122[1];
              v124 = *(_QWORD *)(v120 + 16 * v123);
              if (v124)
              {
                v125 = *(_QWORD *)(v124 + 328);
                v126 = v125 == *(_QWORD *)(v124 + 336) || *(unsigned __int8 *)(v125 + 189) != 1;
              }
              else
              {
                v126 = -1;
              }
              v127 = *(_QWORD *)(v120 + 16 * *v122);
              if (v127)
              {
                v128 = *(_QWORD *)(v127 + 328);
                result = *(_QWORD *)(v127 + 336);
                v129 = v128 == result || *(unsigned __int8 *)(v128 + 189) != 1;
              }
              else
              {
                v129 = -1;
              }
              v130 = v126 <= v129;
              if (v126 == v129)
              {
                if (v124)
                  v131 = v127 == 0;
                else
                  v131 = 1;
                if (v131)
                  goto LABEL_292;
                v130 = *(double *)(v124 + 264) <= *(double *)(v127 + 264);
              }
              if (!v130)
                break;
LABEL_292:
              v118 = v121 + 1;
              v119 += 8;
              if (v121 + 1 == a2)
                return result;
            }
            v122[1] = *v122;
            v132 = i;
            if (v122 == i)
              goto LABEL_291;
            v133 = v119;
            while (1)
            {
              if (v124)
              {
                v134 = *(_QWORD *)(v124 + 328);
                v135 = v134 == *(_QWORD *)(v124 + 336) || *(unsigned __int8 *)(v134 + 189) != 1;
              }
              else
              {
                v135 = -1;
              }
              v136 = *(uint64_t *)((char *)i + v133 - 8);
              result = *(_QWORD *)(v120 + 16 * v136);
              if (result)
              {
                v137 = *(_QWORD *)(result + 328);
                v138 = v137 == *(_QWORD *)(result + 336) || *(unsigned __int8 *)(v137 + 189) != 1;
              }
              else
              {
                v138 = -1;
              }
              if (v135 == v138)
              {
                if (!v124 || !result)
                {
LABEL_290:
                  v132 = v122;
LABEL_291:
                  *v132 = v123;
                  goto LABEL_292;
                }
                if (*(double *)(v124 + 264) <= *(double *)(result + 264))
                {
                  v132 = (uint64_t *)((char *)i + v133);
                  goto LABEL_291;
                }
              }
              else if (v135 <= v138)
              {
                goto LABEL_290;
              }
              --v122;
              *(uint64_t *)((char *)i + v133) = v136;
              v133 -= 8;
              if (!v133)
              {
                v132 = i;
                goto LABEL_291;
              }
            }
          }
          if (i == a2)
            return result;
          v215 = i + 1;
          if (i + 1 == a2)
            return result;
          v216 = **a3;
          while (1)
          {
            v217 = v9;
            v9 = v215;
            v218 = v217[1];
            v219 = *(_QWORD *)(v216 + 16 * v218);
            if (v219)
            {
              v220 = *(_QWORD *)(v219 + 328);
              v221 = v220 == *(_QWORD *)(v219 + 336) || *(unsigned __int8 *)(v220 + 189) != 1;
            }
            else
            {
              v221 = -1;
            }
            v222 = *v217;
            v223 = *(_QWORD *)(v216 + 16 * *v217);
            if (v223)
            {
              v224 = *(_QWORD *)(v223 + 328);
              v225 = v224 == *(_QWORD *)(v223 + 336) || *(unsigned __int8 *)(v224 + 189) != 1;
            }
            else
            {
              v225 = -1;
            }
            v226 = v221 <= v225;
            if (v221 == v225)
            {
              if (v219)
                v227 = v223 == 0;
              else
                v227 = 1;
              if (v227)
                goto LABEL_476;
              v226 = *(double *)(v219 + 264) <= *(double *)(v223 + 264);
            }
            if (!v226)
              break;
LABEL_476:
            v215 = v9 + 1;
            if (v9 + 1 == a2)
              return result;
          }
          while (1)
          {
            v228 = v217;
            v229 = v222;
            v230 = *--v217;
            v222 = v230;
            v217[2] = v229;
            if (v219)
            {
              v231 = *(_QWORD *)(v219 + 328);
              v232 = v231 == *(_QWORD *)(v219 + 336) || *(unsigned __int8 *)(v231 + 189) != 1;
            }
            else
            {
              v232 = -1;
            }
            v233 = *(_QWORD *)(v216 + 16 * v222);
            if (v233)
            {
              v234 = *(_QWORD *)(v233 + 328);
              v235 = v234 == *(_QWORD *)(v233 + 336) || *(unsigned __int8 *)(v234 + 189) != 1;
            }
            else
            {
              v235 = -1;
            }
            v236 = v232 <= v235;
            if (v232 == v235)
            {
              if (!v219 || !v233)
              {
LABEL_475:
                *v228 = v218;
                goto LABEL_476;
              }
              v236 = *(double *)(v219 + 264) <= *(double *)(v233 + 264);
            }
            if (v236)
              goto LABEL_475;
          }
        }
        if (!a4)
        {
          if (i == a2)
            return result;
          v139 = (unint64_t)(v13 - 2) >> 1;
          v140 = *a3;
          v141 = v139;
          while (1)
          {
            v142 = v141;
            if (v139 < v141)
              goto LABEL_373;
            v143 = (2 * v141) | 1;
            v144 = &i[v143];
            v145 = 2 * v141 + 2;
            v146 = *v140;
            if (v145 < v13)
            {
              v147 = *(_QWORD *)(v146 + 16 * *v144);
              if (v147)
              {
                v148 = *(_QWORD *)(v147 + 328);
                v149 = v148 == *(_QWORD *)(v147 + 336) || *(unsigned __int8 *)(v148 + 189) != 1;
              }
              else
              {
                v149 = -1;
              }
              v150 = *(_QWORD *)(v146 + 16 * v144[1]);
              if (v150)
              {
                v151 = *(_QWORD *)(v150 + 328);
                v152 = v151 == *(_QWORD *)(v150 + 336) || *(unsigned __int8 *)(v151 + 189) != 1;
              }
              else
              {
                v152 = -1;
              }
              v153 = v149 <= v152;
              if (v149 == v152)
              {
                if (v147)
                  v154 = v150 == 0;
                else
                  v154 = 1;
                if (v154)
                  goto LABEL_316;
                v153 = *(double *)(v147 + 264) <= *(double *)(v150 + 264);
              }
              if (!v153)
              {
                ++v144;
                v143 = 2 * v142 + 2;
              }
            }
LABEL_316:
            result = *v144;
            v155 = *(_QWORD *)(v146 + 16 * *v144);
            if (v155)
            {
              v156 = *(_QWORD *)(v155 + 328);
              v157 = v156 == *(_QWORD *)(v155 + 336) || *(unsigned __int8 *)(v156 + 189) != 1;
            }
            else
            {
              v157 = -1;
            }
            v158 = i[v142];
            v159 = *(_QWORD *)(v146 + 16 * v158);
            if (v159)
            {
              v160 = *(_QWORD *)(v159 + 328);
              v161 = v160 == *(_QWORD *)(v159 + 336) || *(unsigned __int8 *)(v160 + 189) != 1;
            }
            else
            {
              v161 = -1;
            }
            v162 = v157 <= v161;
            if (v157 != v161)
              goto LABEL_332;
            if (v155)
              v163 = v159 == 0;
            else
              v163 = 1;
            if (!v163)
            {
              v162 = *(double *)(v155 + 264) <= *(double *)(v159 + 264);
LABEL_332:
              if (!v162)
                goto LABEL_373;
            }
            i[v142] = result;
            while (1)
            {
              if (v139 < v143)
                goto LABEL_372;
              result = (uint64_t)v144;
              v164 = 2 * v143;
              v143 = (2 * v143) | 1;
              v144 = &i[v143];
              v165 = v164 + 2;
              if (v165 < v13)
              {
                v166 = *(_QWORD *)(v146 + 16 * *v144);
                if (v166)
                {
                  v167 = *(_QWORD *)(v166 + 328);
                  v168 = v167 == *(_QWORD *)(v166 + 336) || *(unsigned __int8 *)(v167 + 189) != 1;
                }
                else
                {
                  v168 = -1;
                }
                v169 = *(_QWORD *)(v146 + 16 * v144[1]);
                if (v169)
                {
                  v170 = *(_QWORD *)(v169 + 328);
                  v171 = v170 == *(_QWORD *)(v169 + 336) || *(unsigned __int8 *)(v170 + 189) != 1;
                }
                else
                {
                  v171 = -1;
                }
                v172 = v168 <= v171;
                if (v168 == v171)
                {
                  if (v166)
                    v173 = v169 == 0;
                  else
                    v173 = 1;
                  if (v173)
                    goto LABEL_355;
                  v172 = *(double *)(v166 + 264) <= *(double *)(v169 + 264);
                }
                if (!v172)
                {
                  ++v144;
                  v143 = v165;
                }
              }
LABEL_355:
              v174 = *(_QWORD *)(v146 + 16 * *v144);
              if (v174)
              {
                v175 = *(_QWORD *)(v174 + 328);
                if (v175 == *(_QWORD *)(v174 + 336))
                {
                  v176 = 1;
                  if (!v159)
                  {
LABEL_361:
                    v178 = -1;
                    goto LABEL_365;
                  }
                }
                else
                {
                  v176 = *(unsigned __int8 *)(v175 + 189) != 1;
                  if (!v159)
                    goto LABEL_361;
                }
              }
              else
              {
                v176 = -1;
                if (!v159)
                  goto LABEL_361;
              }
              v177 = *(_QWORD *)(v159 + 328);
              v178 = v177 == *(_QWORD *)(v159 + 336) || *(_BYTE *)(v177 + 189) != 1;
LABEL_365:
              v179 = v176 <= v178;
              if (v176 != v178)
                goto LABEL_369;
              if (v159 && v174)
                break;
LABEL_371:
              *(_QWORD *)result = *v144;
            }
            v179 = *(double *)(v174 + 264) <= *(double *)(v159 + 264);
LABEL_369:
            if (v179)
              goto LABEL_371;
            v144 = (uint64_t *)result;
LABEL_372:
            *v144 = v158;
LABEL_373:
            v141 = v142 - 1;
            if (!v142)
            {
              v180 = (unint64_t)v12 >> 3;
              while (1)
              {
                v181 = 0;
                v182 = *i;
                v183 = *a3;
                v184 = i;
                do
                {
                  v185 = v184;
                  v184 += v181 + 1;
                  v186 = 2 * v181;
                  v181 = (2 * v181) | 1;
                  v187 = v186 + 2;
                  if (v187 >= v180)
                    goto LABEL_395;
                  v188 = *(_QWORD *)(*v183 + 16 * *v184);
                  if (v188)
                  {
                    v189 = *(_QWORD *)(v188 + 328);
                    result = v189 == *(_QWORD *)(v188 + 336) || *(unsigned __int8 *)(v189 + 189) != 1;
                  }
                  else
                  {
                    result = 0xFFFFFFFFLL;
                  }
                  v190 = *(_QWORD *)(*v183 + 16 * v184[1]);
                  if (v190)
                  {
                    v191 = *(_QWORD *)(v190 + 328);
                    v192 = v191 == *(_QWORD *)(v190 + 336) || *(unsigned __int8 *)(v191 + 189) != 1;
                  }
                  else
                  {
                    v192 = -1;
                  }
                  v193 = (int)result <= v192;
                  if ((_DWORD)result == v192)
                  {
                    if (v188)
                      v194 = v190 == 0;
                    else
                      v194 = 1;
                    if (v194)
                      goto LABEL_395;
                    v193 = *(double *)(v188 + 264) <= *(double *)(v190 + 264);
                  }
                  if (!v193)
                  {
                    ++v184;
                    v181 = v187;
                  }
LABEL_395:
                  *v185 = *v184;
                }
                while (v181 <= (uint64_t)((unint64_t)(v180 - 2) >> 1));
                if (v184 == --a2)
                {
                  *v184 = v182;
                  goto LABEL_419;
                }
                *v184 = *a2;
                *a2 = v182;
                v195 = (char *)v184 - (char *)i + 8;
                if (v195 >= 9)
                {
                  v196 = ((unint64_t)v195 >> 3) - 2;
                  v197 = v196 >> 1;
                  v198 = &i[v196 >> 1];
                  v199 = *v183;
                  v200 = *(_QWORD *)(v199 + 16 * *v198);
                  if (v200)
                  {
                    v201 = *(_QWORD *)(v200 + 328);
                    result = v201 == *(_QWORD *)(v200 + 336) || *(unsigned __int8 *)(v201 + 189) != 1;
                  }
                  else
                  {
                    result = 0xFFFFFFFFLL;
                  }
                  v202 = *v184;
                  v203 = *(_QWORD *)(v199 + 16 * *v184);
                  if (v203)
                  {
                    v204 = *(_QWORD *)(v203 + 328);
                    v205 = v204 == *(_QWORD *)(v203 + 336) || *(unsigned __int8 *)(v204 + 189) != 1;
                  }
                  else
                  {
                    v205 = -1;
                  }
                  v206 = (int)result <= v205;
                  if ((_DWORD)result == v205)
                  {
                    if (v200)
                      v207 = v203 == 0;
                    else
                      v207 = 1;
                    if (!v207)
                    {
                      v206 = *(double *)(v200 + 264) <= *(double *)(v203 + 264);
                      goto LABEL_415;
                    }
                    goto LABEL_419;
                  }
LABEL_415:
                  if (v206)
                    goto LABEL_419;
                  *v184 = *v198;
                  if (v196 < 2)
                  {
LABEL_417:
                    v208 = v198;
LABEL_418:
                    *v208 = v202;
                    goto LABEL_419;
                  }
                  while (2)
                  {
                    v209 = v197 - 1;
                    v197 = (v197 - 1) >> 1;
                    v208 = &i[v197];
                    v210 = *(_QWORD *)(v199 + 16 * *v208);
                    if (v210)
                    {
                      v211 = *(_QWORD *)(v210 + 328);
                      if (v211 == *(_QWORD *)(v210 + 336))
                      {
                        result = 1;
                        if (v203)
                          goto LABEL_425;
                      }
                      else
                      {
                        result = *(unsigned __int8 *)(v211 + 189) != 1;
                        if (v203)
                        {
LABEL_425:
                          v212 = *(_QWORD *)(v203 + 328);
                          v213 = v212 == *(_QWORD *)(v203 + 336) || *(unsigned __int8 *)(v212 + 189) != 1;
LABEL_432:
                          v214 = (int)result <= v213;
                          if ((_DWORD)result == v213)
                          {
                            if (!v203 || !v210)
                              goto LABEL_417;
                            v214 = *(double *)(v210 + 264) <= *(double *)(v203 + 264);
                          }
                          if (v214)
                            goto LABEL_417;
                          *v198 = *v208;
                          v198 = &i[v197];
                          if (v209 <= 1)
                            goto LABEL_418;
                          continue;
                        }
                      }
                    }
                    else
                    {
                      result = 0xFFFFFFFFLL;
                      if (v203)
                        goto LABEL_425;
                    }
                    break;
                  }
                  v213 = -1;
                  goto LABEL_432;
                }
LABEL_419:
                v36 = v180-- <= 2;
                if (v36)
                  return result;
              }
            }
          }
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &i[(unint64_t)v13 >> 1];
        v16 = **a3;
        if ((unint64_t)v12 < 0x401)
        {
          result = (uint64_t)sub_18D271398(v15, v9, a2 - 1, v16);
        }
        else
        {
          sub_18D271398(v9, v15, a2 - 1, v16);
          sub_18D271398(v9 + 1, v15 - 1, a2 - 2, **a3);
          sub_18D271398(v9 + 2, &v9[v14 + 1], a2 - 3, **a3);
          result = (uint64_t)sub_18D271398(v15 - 1, v15, &v9[v14 + 1], **a3);
          v17 = *v9;
          *v9 = *v15;
          *v15 = v17;
        }
        --a4;
        v18 = *v9;
        v19 = **a3;
        if ((a5 & 1) == 0)
        {
          v21 = *(_QWORD *)(v19 + 16 * *(v9 - 1));
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 328);
            v23 = v22 == *(_QWORD *)(v21 + 336) || *(unsigned __int8 *)(v22 + 189) != 1;
          }
          else
          {
            v23 = -1;
          }
          v20 = *(_QWORD *)(v19 + 16 * v18);
          if (v20)
          {
            v24 = *(_QWORD *)(v20 + 328);
            v25 = v24 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v24 + 189) != 1;
          }
          else
          {
            v25 = -1;
          }
          if (v23 == v25)
          {
            if (v21)
              v26 = v20 == 0;
            else
              v26 = 1;
            if (!v26)
            {
              if (*(double *)(v21 + 264) > *(double *)(v20 + 264))
                goto LABEL_29;
              v27 = *v10;
              v28 = (uint64_t *)(v19 + 16 * *v10);
LABEL_130:
              v68 = *(_QWORD *)(v20 + 328);
              v69 = v68 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v68 + 189) != 1;
              goto LABEL_134;
            }
          }
          else if (v23 > v25)
          {
            goto LABEL_29;
          }
          v27 = *v10;
          v28 = (uint64_t *)(v19 + 16 * *v10);
          if (v20)
            goto LABEL_130;
          v69 = -1;
LABEL_134:
          v70 = *v28;
          if (v70)
          {
            v71 = *(_QWORD *)(v70 + 328);
            v72 = v71 == *(_QWORD *)(v70 + 336) || *(unsigned __int8 *)(v71 + 189) != 1;
          }
          else
          {
            v72 = -1;
          }
          v73 = v69 <= v72;
          if (v69 != v72)
            goto LABEL_145;
          if (v20)
            v74 = v70 == 0;
          else
            v74 = 1;
          if (!v74)
          {
            v73 = *(double *)(v20 + 264) <= *(double *)(v70 + 264);
LABEL_145:
            if (!v73)
            {
              i = v9 + 1;
              if (v20)
              {
LABEL_147:
                v75 = *(_QWORD *)(v20 + 328);
                v76 = v75 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v75 + 189) != 1;
                goto LABEL_150;
              }
              while (1)
              {
                v76 = -1;
LABEL_150:
                v77 = *(_QWORD *)(v19 + 16 * *i);
                if (v77)
                {
                  v78 = *(_QWORD *)(v77 + 328);
                  v79 = v78 == *(_QWORD *)(v77 + 336) || *(unsigned __int8 *)(v78 + 189) != 1;
                }
                else
                {
                  v79 = -1;
                }
                v80 = v76 <= v79;
                if (v76 != v79)
                  goto LABEL_159;
                if (v20 && v77)
                  break;
LABEL_161:
                ++i;
                if (v20)
                  goto LABEL_147;
              }
              v80 = *(double *)(v20 + 264) <= *(double *)(v77 + 264);
LABEL_159:
              if (!v80)
                goto LABEL_182;
              goto LABEL_161;
            }
          }
          for (i = v9 + 1; i < a2; ++i)
          {
            if (v20)
            {
              v81 = *(_QWORD *)(v20 + 328);
              v82 = v81 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v81 + 189) != 1;
            }
            else
            {
              v82 = -1;
            }
            v83 = *(_QWORD *)(v19 + 16 * *i);
            if (v83)
            {
              v84 = *(_QWORD *)(v83 + 328);
              v85 = v84 == *(_QWORD *)(v83 + 336) || *(unsigned __int8 *)(v84 + 189) != 1;
            }
            else
            {
              v85 = -1;
            }
            v86 = v82 <= v85;
            if (v82 == v85)
            {
              if (!v20 || !v83)
                continue;
              v86 = *(double *)(v20 + 264) <= *(double *)(v83 + 264);
            }
            if (!v86)
              break;
          }
LABEL_182:
          j = a2;
          if (i < a2)
          {
            for (j = a2 - 1; !v20; v27 = v94)
            {
              v89 = -1;
LABEL_187:
              v90 = *(_QWORD *)(v19 + 16 * v27);
              if (v90)
              {
                v91 = *(_QWORD *)(v90 + 328);
                v92 = v91 == *(_QWORD *)(v90 + 336) || *(unsigned __int8 *)(v91 + 189) != 1;
              }
              else
              {
                v92 = -1;
              }
              v93 = v89 <= v92;
              if (v89 == v92)
              {
                if (!v20 || !v90)
                  goto LABEL_199;
                v93 = *(double *)(v20 + 264) <= *(double *)(v90 + 264);
              }
              if (v93)
                goto LABEL_199;
              v94 = *--j;
            }
            v88 = *(_QWORD *)(v20 + 328);
            v89 = v88 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v88 + 189) != 1;
            goto LABEL_187;
          }
LABEL_199:
          if (i >= j)
            goto LABEL_236;
          v95 = *i;
          v96 = *j;
          while (2)
          {
            *i++ = v96;
            *j = v95;
            while (2)
            {
              v95 = *i;
              if (v20)
              {
                v97 = *(_QWORD *)(v20 + 328);
                v98 = v97 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v97 + 189) != 1;
              }
              else
              {
                v98 = -1;
              }
              v99 = *(_QWORD *)(v19 + 16 * v95);
              if (v99)
              {
                v100 = *(_QWORD *)(v99 + 328);
                v101 = v100 == *(_QWORD *)(v99 + 336) || *(unsigned __int8 *)(v100 + 189) != 1;
              }
              else
              {
                v101 = -1;
              }
              v102 = v98 <= v101;
              if (v98 == v101)
              {
                if (v20 && v99)
                {
                  v102 = *(double *)(v20 + 264) <= *(double *)(v99 + 264);
                  break;
                }
LABEL_218:
                ++i;
                continue;
              }
              break;
            }
            if (v102)
              goto LABEL_218;
            do
            {
              v103 = *--j;
              v96 = v103;
              if (v20)
              {
                v104 = *(_QWORD *)(v20 + 328);
                v105 = v104 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v104 + 189) != 1;
              }
              else
              {
                v105 = -1;
              }
              v106 = *(_QWORD *)(v19 + 16 * v96);
              if (v106)
              {
                v107 = *(_QWORD *)(v106 + 328);
                v108 = v107 == *(_QWORD *)(v106 + 336) || *(unsigned __int8 *)(v107 + 189) != 1;
              }
              else
              {
                v108 = -1;
              }
              v109 = v105 <= v108;
              if (v105 != v108)
                continue;
              if (!v20 || !v106)
                break;
              v109 = *(double *)(v20 + 264) <= *(double *)(v106 + 264);
            }
            while (!v109);
            if (i < j)
              continue;
            break;
          }
LABEL_236:
          v110 = i - 1;
          if (i - 1 != v9)
            *v9 = *v110;
          a5 = 0;
          *v110 = v18;
          continue;
        }
        v20 = *(_QWORD *)(v19 + 16 * v18);
LABEL_29:
        for (k = 0; ; ++k)
        {
          v30 = v9[k + 1];
          v31 = *(_QWORD *)(v19 + 16 * v30);
          if (v31)
          {
            v32 = *(_QWORD *)(v31 + 328);
            if (v32 == *(_QWORD *)(v31 + 336))
            {
              v33 = 1;
              if (!v20)
              {
LABEL_36:
                v35 = -1;
                goto LABEL_40;
              }
            }
            else
            {
              v33 = *(unsigned __int8 *)(v32 + 189) != 1;
              if (!v20)
                goto LABEL_36;
            }
          }
          else
          {
            v33 = -1;
            if (!v20)
              goto LABEL_36;
          }
          v34 = *(_QWORD *)(v20 + 328);
          v35 = v34 == *(_QWORD *)(v20 + 336) || *(_BYTE *)(v34 + 189) != 1;
LABEL_40:
          v36 = v33 <= v35;
          if (v33 != v35)
            goto LABEL_44;
          if (!v20 || !v31)
            break;
          v36 = *(double *)(v31 + 264) <= *(double *)(v20 + 264);
LABEL_44:
          if (v36)
            break;
        }
        v37 = &v9[k];
        v38 = (unint64_t)&v9[k + 1];
        m = a2 - 1;
        if (k * 8)
        {
          while (1)
          {
            v40 = *(_QWORD *)(v19 + 16 * *m);
            if (v40)
            {
              v41 = *(_QWORD *)(v40 + 328);
              if (v41 == *(_QWORD *)(v40 + 336))
              {
                v42 = 1;
                if (!v20)
                {
LABEL_53:
                  v44 = -1;
                  goto LABEL_57;
                }
              }
              else
              {
                v42 = *(unsigned __int8 *)(v41 + 189) != 1;
                if (!v20)
                  goto LABEL_53;
              }
            }
            else
            {
              v42 = -1;
              if (!v20)
                goto LABEL_53;
            }
            v43 = *(_QWORD *)(v20 + 328);
            v44 = v43 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v43 + 189) != 1;
LABEL_57:
            v45 = v42 <= v44;
            if (v42 == v44)
            {
              if (!v20 || !v40)
                goto LABEL_63;
              v45 = *(double *)(v40 + 264) <= *(double *)(v20 + 264);
            }
            if (!v45)
              goto LABEL_87;
LABEL_63:
            --m;
          }
        }
        m = a2;
        if (v38 < (unint64_t)a2)
        {
          for (m = a2 - 1; ; --m)
          {
            v46 = *(_QWORD *)(v19 + 16 * *m);
            if (v46)
            {
              v47 = *(_QWORD *)(v46 + 328);
              if (v47 == *(_QWORD *)(v46 + 336))
              {
                v48 = 1;
                if (!v20)
                {
LABEL_72:
                  v50 = -1;
                  goto LABEL_76;
                }
              }
              else
              {
                v48 = *(unsigned __int8 *)(v47 + 189) != 1;
                if (!v20)
                  goto LABEL_72;
              }
            }
            else
            {
              v48 = -1;
              if (!v20)
                goto LABEL_72;
            }
            v49 = *(_QWORD *)(v20 + 328);
            v50 = v49 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v49 + 189) != 1;
LABEL_76:
            if (v48 == v50)
            {
              if (v20 && v46)
              {
                if (v38 >= (unint64_t)m || *(double *)(v46 + 264) > *(double *)(v20 + 264))
                  break;
              }
              else if (v38 >= (unint64_t)m)
              {
                break;
              }
            }
            else if (v38 >= (unint64_t)m || v48 > v50)
            {
              break;
            }
          }
        }
LABEL_87:
        if (v38 >= (unint64_t)m)
          goto LABEL_123;
        v51 = *m;
        v52 = (uint64_t *)v38;
        v53 = m;
        while (2)
        {
          *v52++ = v51;
          *v53 = v30;
          while (2)
          {
            v30 = *v52;
            v54 = *(_QWORD *)(v19 + 16 * *v52);
            if (!v54)
            {
              v56 = -1;
              if (v20)
                goto LABEL_93;
              goto LABEL_96;
            }
            v55 = *(_QWORD *)(v54 + 328);
            if (v55 == *(_QWORD *)(v54 + 336))
            {
              v56 = 1;
              if (v20)
                goto LABEL_93;
LABEL_96:
              v58 = -1;
              goto LABEL_100;
            }
            v56 = *(unsigned __int8 *)(v55 + 189) != 1;
            if (!v20)
              goto LABEL_96;
LABEL_93:
            v57 = *(_QWORD *)(v20 + 328);
            v58 = v57 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v57 + 189) != 1;
LABEL_100:
            v59 = v56 <= v58;
            if (v56 != v58)
            {
LABEL_104:
              if (v59)
                goto LABEL_106;
              ++v52;
              continue;
            }
            break;
          }
          if (v20 && v54)
          {
            v59 = *(double *)(v54 + 264) <= *(double *)(v20 + 264);
            goto LABEL_104;
          }
LABEL_106:
          while (2)
          {
            while (2)
            {
              v60 = *--v53;
              v51 = v60;
              v61 = *(_QWORD *)(v19 + 16 * v60);
              if (!v61)
              {
                v63 = -1;
                if (v20)
                  goto LABEL_109;
                goto LABEL_112;
              }
              v62 = *(_QWORD *)(v61 + 328);
              if (v62 == *(_QWORD *)(v61 + 336))
              {
                v63 = 1;
                if (v20)
                  goto LABEL_109;
LABEL_112:
                v65 = -1;
                goto LABEL_116;
              }
              v63 = *(unsigned __int8 *)(v62 + 189) != 1;
              if (!v20)
                goto LABEL_112;
LABEL_109:
              v64 = *(_QWORD *)(v20 + 328);
              v65 = v64 == *(_QWORD *)(v20 + 336) || *(unsigned __int8 *)(v64 + 189) != 1;
LABEL_116:
              v66 = v63 <= v65;
              if (v63 != v65)
                goto LABEL_120;
              if (!v20 || !v61)
                continue;
              break;
            }
            v66 = *(double *)(v61 + 264) <= *(double *)(v20 + 264);
LABEL_120:
            if (v66)
              continue;
            break;
          }
          if (v52 < v53)
            continue;
          break;
        }
        v37 = v52 - 1;
LABEL_123:
        if (v37 != v9)
          *v9 = *v37;
        *v37 = v18;
        if (v38 < (unint64_t)m)
        {
LABEL_128:
          result = sub_18D26FDC0(v9, v37, a3, a4, a5 & 1);
          a5 = 0;
          i = v37 + 1;
          continue;
        }
        v67 = sub_18D27168C(v9, v37, a3);
        i = v37 + 1;
        result = sub_18D27168C(v37 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v67)
            continue;
          goto LABEL_128;
        }
        a2 = v37;
        if (!v67)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_18D2710E0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;

  result = sub_18D2719B4(a1, a2, a3, a4, a6);
  v13 = **a6;
  v14 = *a4;
  v15 = *(_QWORD *)(v13 + 16 * *a5);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 328);
    v17 = v16 == *(_QWORD *)(v15 + 336) || *(unsigned __int8 *)(v16 + 189) != 1;
  }
  else
  {
    v17 = -1;
  }
  v18 = *(_QWORD *)(v13 + 16 * *a4);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 328);
    v20 = v19 == *(_QWORD *)(v18 + 336) || *(unsigned __int8 *)(v19 + 189) != 1;
  }
  else
  {
    v20 = -1;
  }
  v21 = v17 <= v20;
  if (v17 == v20)
  {
    if (v15)
      v22 = v18 == 0;
    else
      v22 = 1;
    if (v22)
      return result;
    v21 = *(double *)(v15 + 264) <= *(double *)(v18 + 264);
  }
  if (v21)
    return result;
  *a4 = *a5;
  *a5 = v14;
  v23 = *a3;
  v24 = *(_QWORD *)(v13 + 16 * *a4);
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 328);
    v26 = v25 == *(_QWORD *)(v24 + 336) || *(unsigned __int8 *)(v25 + 189) != 1;
  }
  else
  {
    v26 = -1;
  }
  v27 = *(_QWORD *)(v13 + 16 * *a3);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 328);
    v29 = v28 == *(_QWORD *)(v27 + 336) || *(unsigned __int8 *)(v28 + 189) != 1;
  }
  else
  {
    v29 = -1;
  }
  v30 = v26 <= v29;
  if (v26 == v29)
  {
    if (v24)
      v31 = v27 == 0;
    else
      v31 = 1;
    if (v31)
      return result;
    v30 = *(double *)(v24 + 264) <= *(double *)(v27 + 264);
  }
  if (v30)
    return result;
  *a3 = *a4;
  *a4 = v23;
  v32 = *a2;
  v33 = *(_QWORD *)(v13 + 16 * *a3);
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 328);
    v35 = v34 == *(_QWORD *)(v33 + 336) || *(unsigned __int8 *)(v34 + 189) != 1;
  }
  else
  {
    v35 = -1;
  }
  v36 = *(_QWORD *)(v13 + 16 * *a2);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 328);
    v38 = v37 == *(_QWORD *)(v36 + 336) || *(unsigned __int8 *)(v37 + 189) != 1;
  }
  else
  {
    v38 = -1;
  }
  v39 = v35 <= v38;
  if (v35 == v38)
  {
    if (!v33 || !v36)
      return result;
    v39 = *(double *)(v33 + 264) <= *(double *)(v36 + 264);
  }
  if (v39)
    return result;
  *a2 = *a3;
  *a3 = v32;
  v40 = *a1;
  v41 = (uint64_t *)(v13 + 16 * *a1);
  v42 = *(_QWORD *)(v13 + 16 * *a2);
  if (v42)
  {
    v43 = *(_QWORD *)(v42 + 328);
    v44 = v43 == *(_QWORD *)(v42 + 336) || *(unsigned __int8 *)(v43 + 189) != 1;
  }
  else
  {
    v44 = -1;
  }
  v45 = *v41;
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 328);
    v47 = v46 == *(_QWORD *)(v45 + 336) || *(unsigned __int8 *)(v46 + 189) != 1;
  }
  else
  {
    v47 = -1;
  }
  v48 = v44 <= v47;
  if (v44 != v47)
    goto LABEL_64;
  if (v42 && v45)
  {
    v48 = *(double *)(v42 + 264) <= *(double *)(v45 + 264);
LABEL_64:
    if (!v48)
    {
      *a1 = *a2;
      *a2 = v40;
    }
  }
  return result;
}

uint64_t *sub_18D271398(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(a4 + 16 * *a2);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 328);
    v8 = v7 == *(_QWORD *)(v6 + 336) || *(unsigned __int8 *)(v7 + 189) != 1;
  }
  else
  {
    v8 = -1;
  }
  v9 = *(_QWORD *)(a4 + 16 * *result);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 328);
    v11 = v10 == *(_QWORD *)(v9 + 336) || *(unsigned __int8 *)(v10 + 189) != 1;
  }
  else
  {
    v11 = -1;
  }
  v12 = v8 <= v11;
  if (v8 == v11)
  {
    if (v6)
      v13 = v9 == 0;
    else
      v13 = 1;
    if (v13)
      goto LABEL_23;
    v12 = *(double *)(v6 + 264) <= *(double *)(v9 + 264);
  }
  if (!v12)
  {
    v14 = *(_QWORD *)(a4 + 16 * *a3);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 328);
      if (v15 != *(_QWORD *)(v14 + 336))
      {
        v16 = *(unsigned __int8 *)(v15 + 189) != 1;
        if (v6)
          goto LABEL_21;
LABEL_44:
        v18 = -1;
        goto LABEL_48;
      }
      v16 = 1;
      if (!v6)
        goto LABEL_44;
    }
    else
    {
      v16 = -1;
      if (!v6)
        goto LABEL_44;
    }
LABEL_21:
    v17 = *(_QWORD *)(v6 + 328);
    v18 = v17 == *(_QWORD *)(v6 + 336) || *(unsigned __int8 *)(v17 + 189) != 1;
LABEL_48:
    v30 = v16 <= v18;
    if (v16 == v18)
    {
      if (v6)
        v31 = v14 == 0;
      else
        v31 = 1;
      if (v31)
        goto LABEL_56;
      v30 = *(double *)(v14 + 264) <= *(double *)(v6 + 264);
    }
    if (!v30)
    {
      *result = *a3;
LABEL_78:
      *a3 = v5;
      return result;
    }
LABEL_56:
    *result = v4;
    *a2 = v5;
    v32 = *(_QWORD *)(a4 + 16 * *a3);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 328);
      if (v33 != *(_QWORD *)(v32 + 336))
      {
        v34 = *(unsigned __int8 *)(v33 + 189) != 1;
        if (v9)
          goto LABEL_59;
LABEL_63:
        v36 = -1;
LABEL_72:
        v40 = v34 <= v36;
        if (v34 != v36)
        {
LABEL_76:
          if (v40)
            return result;
          *a2 = *a3;
          goto LABEL_78;
        }
        if (v9 && v32)
        {
          v40 = *(double *)(v32 + 264) <= *(double *)(v9 + 264);
          goto LABEL_76;
        }
        return result;
      }
      v34 = 1;
      if (!v9)
        goto LABEL_63;
    }
    else
    {
      v34 = -1;
      if (!v9)
        goto LABEL_63;
    }
LABEL_59:
    v35 = *(_QWORD *)(v9 + 328);
    v36 = v35 == *(_QWORD *)(v9 + 336) || *(unsigned __int8 *)(v35 + 189) != 1;
    goto LABEL_72;
  }
LABEL_23:
  v19 = *(_QWORD *)(a4 + 16 * *a3);
  if (!v19)
  {
    v21 = -1;
    if (!v6)
      goto LABEL_26;
LABEL_28:
    v23 = *(_QWORD *)(v6 + 328);
    v22 = v23 == *(_QWORD *)(v6 + 336) || *(unsigned __int8 *)(v23 + 189) != 1;
    goto LABEL_33;
  }
  v20 = *(_QWORD *)(v19 + 328);
  if (v20 == *(_QWORD *)(v19 + 336))
  {
    v21 = 1;
    if (!v6)
      goto LABEL_26;
    goto LABEL_28;
  }
  v21 = *(unsigned __int8 *)(v20 + 189) != 1;
  if (v6)
    goto LABEL_28;
LABEL_26:
  v22 = -1;
LABEL_33:
  v24 = v21 <= v22;
  if (v21 == v22)
  {
    if (v6)
      v25 = v19 == 0;
    else
      v25 = 1;
    if (v25)
      return result;
    v24 = *(double *)(v19 + 264) <= *(double *)(v6 + 264);
  }
  if (v24)
    return result;
  *a2 = *a3;
  *a3 = v4;
  v26 = *result;
  v27 = *(_QWORD *)(a4 + 16 * *a2);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 328);
    v29 = v28 == *(_QWORD *)(v27 + 336) || *(unsigned __int8 *)(v28 + 189) != 1;
  }
  else
  {
    v29 = -1;
  }
  v37 = *(_QWORD *)(a4 + 16 * *result);
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 328);
    v39 = v38 == *(_QWORD *)(v37 + 336) || *(unsigned __int8 *)(v38 + 189) != 1;
  }
  else
  {
    v39 = -1;
  }
  v41 = v29 <= v39;
  if (v29 == v39)
  {
    if (!v27 || !v37)
      return result;
    v41 = *(double *)(v27 + 264) <= *(double *)(v37 + 264);
  }
  if (!v41)
  {
    *result = *a2;
    *a2 = v26;
  }
  return result;
}

BOOL sub_18D27168C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  BOOL v42;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = **a3;
      v10 = *a1;
      v11 = (uint64_t *)(v9 + 16 * *a1);
      v12 = *(_QWORD *)(v9 + 16 * v8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 328);
        v14 = v13 == *(_QWORD *)(v12 + 336) || *(unsigned __int8 *)(v13 + 189) != 1;
      }
      else
      {
        v14 = -1;
      }
      v38 = *v11;
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 328);
        v40 = v39 == *(_QWORD *)(v38 + 336) || *(unsigned __int8 *)(v39 + 189) != 1;
      }
      else
      {
        v40 = -1;
      }
      v41 = v14 <= v40;
      if (v14 != v40)
        goto LABEL_66;
      if (v12)
        v42 = v38 == 0;
      else
        v42 = 1;
      if (!v42)
      {
        v41 = *(double *)(v12 + 264) <= *(double *)(v38 + 264);
LABEL_66:
        if (!v41)
        {
          *a1 = v8;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 3:
      sub_18D271398(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_18D2719B4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_18D2710E0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v15 = a1 + 2;
      sub_18D271398(a1, a1 + 1, a1 + 2, **a3);
      v16 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      v19 = **a3;
      break;
  }
  do
  {
    v20 = *v16;
    v21 = *(_QWORD *)(v19 + 16 * *v16);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 328);
      v23 = v22 == *(_QWORD *)(v21 + 336) || *(unsigned __int8 *)(v22 + 189) != 1;
    }
    else
    {
      v23 = -1;
    }
    v24 = *(_QWORD *)(v19 + 16 * *v15);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 328);
      v26 = v25 == *(_QWORD *)(v24 + 336) || *(unsigned __int8 *)(v25 + 189) != 1;
    }
    else
    {
      v26 = -1;
    }
    v27 = v23 <= v26;
    if (v23 == v26)
    {
      if (v21)
        v28 = v24 == 0;
      else
        v28 = 1;
      if (v28)
        goto LABEL_46;
      v27 = *(double *)(v21 + 264) <= *(double *)(v24 + 264);
    }
    if (v27)
      goto LABEL_46;
    *v16 = *v15;
    v29 = a1;
    if (v15 == a1)
      goto LABEL_45;
    v30 = v17;
    while (1)
    {
      if (v21)
      {
        v31 = *(_QWORD *)(v21 + 328);
        v32 = v31 == *(_QWORD *)(v21 + 336) || *(_BYTE *)(v31 + 189) != 1;
      }
      else
      {
        v32 = -1;
      }
      v33 = *(uint64_t *)((char *)a1 + v30 + 8);
      v34 = *(_QWORD *)(v19 + 16 * v33);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 328);
        v36 = v35 == *(_QWORD *)(v34 + 336) || *(_BYTE *)(v35 + 189) != 1;
      }
      else
      {
        v36 = -1;
      }
      v37 = v32 <= v36;
      if (v32 == v36)
        break;
LABEL_40:
      if (v37)
      {
        v29 = v15;
        goto LABEL_45;
      }
      --v15;
      *(uint64_t *)((char *)a1 + v30 + 16) = v33;
      v30 -= 8;
      if (v30 == -16)
      {
        v29 = a1;
        goto LABEL_45;
      }
    }
    if (v21 && v34)
    {
      v37 = *(double *)(v21 + 264) <= *(double *)(v34 + 264);
      goto LABEL_40;
    }
    v29 = (uint64_t *)((char *)a1 + v30 + 16);
LABEL_45:
    *v29 = v20;
    if (++v18 == 8)
      return v16 + 1 == a2;
LABEL_46:
    v15 = v16;
    v17 += 8;
    ++v16;
  }
  while (v16 != a2);
  return 1;
}

uint64_t *sub_18D2719B4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;

  result = sub_18D271398(a1, a2, a3, **a5);
  v11 = **a5;
  v12 = *a3;
  v13 = *(_QWORD *)(v11 + 16 * *a4);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 328);
    v15 = v14 == *(_QWORD *)(v13 + 336) || *(unsigned __int8 *)(v14 + 189) != 1;
  }
  else
  {
    v15 = -1;
  }
  v16 = *(_QWORD *)(v11 + 16 * *a3);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 328);
    v18 = v17 == *(_QWORD *)(v16 + 336) || *(unsigned __int8 *)(v17 + 189) != 1;
  }
  else
  {
    v18 = -1;
  }
  v19 = v15 <= v18;
  if (v15 == v18)
  {
    if (v13)
      v20 = v16 == 0;
    else
      v20 = 1;
    if (v20)
      return result;
    v19 = *(double *)(v13 + 264) <= *(double *)(v16 + 264);
  }
  if (v19)
    return result;
  *a3 = *a4;
  *a4 = v12;
  v21 = *a2;
  v22 = *(_QWORD *)(v11 + 16 * *a3);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 328);
    v24 = v23 == *(_QWORD *)(v22 + 336) || *(unsigned __int8 *)(v23 + 189) != 1;
  }
  else
  {
    v24 = -1;
  }
  v25 = *(_QWORD *)(v11 + 16 * *a2);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 328);
    v27 = v26 == *(_QWORD *)(v25 + 336) || *(unsigned __int8 *)(v26 + 189) != 1;
  }
  else
  {
    v27 = -1;
  }
  v28 = v24 <= v27;
  if (v24 == v27)
  {
    if (v22)
      v29 = v25 == 0;
    else
      v29 = 1;
    if (v29)
      return result;
    v28 = *(double *)(v22 + 264) <= *(double *)(v25 + 264);
  }
  if (v28)
    return result;
  *a2 = *a3;
  *a3 = v21;
  v30 = *a1;
  v31 = (uint64_t *)(v11 + 16 * *a1);
  v32 = *(_QWORD *)(v11 + 16 * *a2);
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 328);
    v34 = v33 == *(_QWORD *)(v32 + 336) || *(unsigned __int8 *)(v33 + 189) != 1;
  }
  else
  {
    v34 = -1;
  }
  v35 = *v31;
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 328);
    v37 = v36 == *(_QWORD *)(v35 + 336) || *(unsigned __int8 *)(v36 + 189) != 1;
  }
  else
  {
    v37 = -1;
  }
  v38 = v34 <= v37;
  if (v34 != v37)
    goto LABEL_49;
  if (v32 && v35)
  {
    v38 = *(double *)(v32 + 264) <= *(double *)(v35 + 264);
LABEL_49:
    if (!v38)
    {
      *a1 = *a2;
      *a2 = v30;
    }
  }
  return result;
}

uint64_t *sub_18D271BD4(uint64_t a1, _QWORD *a2, unsigned __int8 a3, int a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  BOOL v12;
  _BOOL4 v13;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        v7 = v5;
        v8 = *((unsigned __int8 *)v5 + 56);
        v9 = *((_DWORD *)v7 + 15);
        v10 = v9 < a4;
        if (v8 != a3)
          v10 = v8 < a3;
        if (!v10)
          break;
        v5 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_13;
      }
      v11 = v9 > a4;
      v12 = v8 == a3;
      v13 = v8 > a3;
      if (v12)
        v13 = v11;
      if (!v13)
        break;
      result = v7 + 1;
      v5 = (uint64_t *)v7[1];
    }
    while (v5);
  }
  else
  {
    v7 = result;
  }
LABEL_13:
  *a2 = v7;
  return result;
}

void sub_18D271C50(char *a1)
{
  if (a1)
  {
    sub_18D271C50(*(_QWORD *)a1);
    sub_18D271C50(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

_QWORD *sub_18D271C98(uint64_t a1, unsigned __int8 a2, int a3, __int128 **a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  __int128 *v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;

  v6 = sub_18D271BD4(a1, &v16, a2, a3);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = *a4;
    v7 = operator new(0x48uLL);
    v10 = v7 + 4;
    if (*((char *)v9 + 23) < 0)
    {
      sub_18D077798(v10, *(void **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v11 = *v9;
      v7[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)v10 = v11;
    }
    v7[7] = *((_QWORD *)v9 + 3);
    v7[8] = 0;
    v12 = v16;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v12;
    *v8 = (uint64_t)v7;
    v13 = **(_QWORD **)a1;
    v14 = v7;
    if (v13)
    {
      *(_QWORD *)a1 = v13;
      v14 = (uint64_t *)*v8;
    }
    sub_18D083D78(*(uint64_t **)(a1 + 8), v14);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

void sub_18D271D64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenIntegrityEstimator::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64x2_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t result;
  char v76;
  uint64_t v77;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  *(_BYTE *)a1 = 0;
  v8 = *a2;
  if (*a2 && *(_BYTE *)(v8 + 33))
  {
    *(_QWORD *)(a1 + 8) = v8;
    v10 = operator new();
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_BYTE *)(v10 + 9) = 1;
    *(_QWORD *)v10 = &unk_1E25C3788;
    v11 = *(_QWORD *)(a1 + 1568);
    *(_QWORD *)(a1 + 1568) = v10;
    if (!v11 || ((*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11), (v10 = *(_QWORD *)(a1 + 1568)) != 0))
    {
      v12 = a1 + 16;
      *(_QWORD *)(v10 + 16) = a1 + 16;
      *(_BYTE *)(v10 + 8) = 1;
      v13 = operator new();
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = &unk_1E25C2CF8;
      *(_QWORD *)(v13 + 8) = 0;
      *(_BYTE *)(v13 + 9) = 1;
      v14 = *(_QWORD *)(a1 + 1560);
      *(_QWORD *)(a1 + 1560) = v13;
      if (!v14 || ((*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14), (v13 = *(_QWORD *)(a1 + 1560)) != 0))
      {
        *(_QWORD *)(v13 + 16) = v12;
        *(_BYTE *)(v13 + 8) = 1;
        v15 = *(_QWORD *)(a1 + 8);
        v16 = operator new();
        *(_QWORD *)v16 = &unk_1E25C2D30;
        *(_QWORD *)(v16 + 8) = 0;
        *(_BYTE *)(v16 + 9) = 1;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 24) = 0x7FF0000000000000;
        v17 = *(_QWORD *)(a1 + 1576);
        *(_QWORD *)(a1 + 1576) = v16;
        if (!v17
          || ((*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17), (v16 = *(_QWORD *)(a1 + 1576)) != 0))
        {
          *(_QWORD *)(v16 + 16) = v12;
          *(_QWORD *)(v16 + 24) = *(_QWORD *)(v15 + 2512);
          *(_BYTE *)(v16 + 8) = 1;
          v18 = *(_QWORD *)(a1 + 8);
          v19 = operator new();
          *(_QWORD *)v19 = &unk_1E25C2468;
          *(_QWORD *)(v19 + 8) = 0;
          *(_BYTE *)(v19 + 9) = 1;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v19 + 24) = 0x7FF0000000000000;
          v20 = *(_QWORD *)(a1 + 1584);
          *(_QWORD *)(a1 + 1584) = v19;
          if (!v20
            || ((*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20), (v19 = *(_QWORD *)(a1 + 1584)) != 0))
          {
            *(_QWORD *)(v19 + 16) = v12;
            *(_QWORD *)(v19 + 24) = *(_QWORD *)(v18 + 2512);
            *(_BYTE *)(v19 + 8) = 1;
            v21 = operator new();
            *(_QWORD *)(v21 + 16) = 0;
            *(_QWORD *)v21 = &unk_1E25C2D68;
            *(_QWORD *)(v21 + 8) = 0;
            *(_BYTE *)(v21 + 9) = 1;
            v22 = *(_QWORD *)(a1 + 1592);
            *(_QWORD *)(a1 + 1592) = v21;
            if (!v22
              || ((*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22), (v21 = *(_QWORD *)(a1 + 1592)) != 0))
            {
              *(_QWORD *)(v21 + 16) = v12;
              *(_BYTE *)(v21 + 8) = 1;
              v81 = *(_QWORD *)(a1 + 8);
              v23 = operator new();
              *(_OWORD *)(v23 + 32) = 0u;
              *(_OWORD *)(v23 + 48) = 0u;
              *(_OWORD *)v23 = 0u;
              *(_OWORD *)(v23 + 16) = 0u;
              *(_OWORD *)(v23 + 64) = 0u;
              *(_OWORD *)(v23 + 80) = 0u;
              *(_OWORD *)(v23 + 96) = 0u;
              *(_OWORD *)(v23 + 112) = 0u;
              *(_OWORD *)(v23 + 128) = 0u;
              *(_OWORD *)(v23 + 144) = 0u;
              *(_OWORD *)(v23 + 160) = 0u;
              *(_OWORD *)(v23 + 176) = 0u;
              *(_BYTE *)(v23 + 9) = 1;
              *(_QWORD *)(v23 + 192) = 0;
              *(_QWORD *)v23 = &off_1E25C41F8;
              *(_OWORD *)(v23 + 40) = 0u;
              *(_QWORD *)(v23 + 56) = 0;
              *(_OWORD *)(v23 + 24) = 0u;
              *(_DWORD *)(v23 + 64) = 1065353216;
              *(_QWORD *)(v23 + 88) = 0x3FF0000000000000;
              *(_BYTE *)(v23 + 176) = 0;
              *(_OWORD *)(v23 + 144) = 0u;
              *(_OWORD *)(v23 + 160) = 0u;
              *(_OWORD *)(v23 + 112) = 0u;
              *(_OWORD *)(v23 + 128) = 0u;
              *(_OWORD *)(v23 + 96) = 0u;
              v29 = *(_QWORD *)(a1 + 1600);
              *(_QWORD *)(a1 + 1600) = v23;
              if (!v29
                || ((*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29), (v23 = *(_QWORD *)(a1 + 1600)) != 0))
              {
                if (!raven::GNSSPreprocessedMeasurementsChecker::Configure(v23, &v81, a1 + 16, v24, v25, v26, v27, v28))
                {
                  v80 = *(_QWORD *)(a1 + 8);
                  v30 = operator new();
                  *(_QWORD *)v30 = &unk_1E25C26B0;
                  *(_QWORD *)(v30 + 8) = 0;
                  *(_BYTE *)(v30 + 9) = 1;
                  *(_QWORD *)(v30 + 16) = 0;
                  *(_QWORD *)(v30 + 24) = 0x4024000000000000;
                  v36 = *(_QWORD *)(a1 + 1608);
                  *(_QWORD *)(a1 + 1608) = v30;
                  if (!v36
                    || ((*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36),
                        (v30 = *(_QWORD *)(a1 + 1608)) != 0))
                  {
                    if (!raven::MapVectorChecker::Configure(v30, (uint64_t)&v80, a1 + 16, v31, v32, v33, v34, v35))
                    {
                      v37 = operator new();
                      *(_QWORD *)(v37 + 16) = 0;
                      *(_QWORD *)v37 = &unk_1E25C27E8;
                      *(_QWORD *)(v37 + 8) = 0;
                      *(_BYTE *)(v37 + 9) = 1;
                      v38 = *(_QWORD *)(a1 + 1616);
                      *(_QWORD *)(a1 + 1616) = v37;
                      if (!v38
                        || ((*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38),
                            (v37 = *(_QWORD *)(a1 + 1616)) != 0))
                      {
                        *(_QWORD *)(v37 + 16) = v12;
                        *(_BYTE *)(v37 + 8) = 1;
                        v39 = operator new();
                        *(_QWORD *)(v39 + 16) = 0;
                        *(_QWORD *)v39 = &unk_1E25C2B10;
                        *(_QWORD *)(v39 + 8) = 0;
                        *(_BYTE *)(v39 + 9) = 1;
                        v40 = *(_QWORD *)(a1 + 1624);
                        *(_QWORD *)(a1 + 1624) = v39;
                        if (!v40
                          || ((*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40),
                              (v39 = *(_QWORD *)(a1 + 1624)) != 0))
                        {
                          *(_QWORD *)(v39 + 16) = v12;
                          *(_BYTE *)(v39 + 8) = 1;
                          v41 = *(_QWORD *)(a1 + 8);
                          v42 = operator new();
                          *(_QWORD *)v42 = &unk_1E25C24D0;
                          *(_QWORD *)(v42 + 8) = 0;
                          *(_BYTE *)(v42 + 9) = 1;
                          *(_QWORD *)(v42 + 16) = 0;
                          *(_QWORD *)(v42 + 24) = 0x7FF0000000000000;
                          v43 = *(_QWORD *)(a1 + 1632);
                          *(_QWORD *)(a1 + 1632) = v42;
                          if (!v43
                            || ((*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43),
                                (v42 = *(_QWORD *)(a1 + 1632)) != 0))
                          {
                            *(_QWORD *)(v42 + 16) = v12;
                            *(_QWORD *)(v42 + 24) = *(_QWORD *)(v41 + 2512);
                            *(_BYTE *)(v42 + 8) = 1;
                            v79 = *(_QWORD *)(a1 + 8);
                            v44 = sub_18D272590((uint64_t *)&v78);
                            v45 = v78;
                            v46 = *(_QWORD *)(a1 + 1648);
                            *(_QWORD *)(a1 + 1648) = v78;
                            if (v46)
                            {
                              (*(void (**)(uint64_t, double))(*(_QWORD *)v46 + 24))(v46, v44);
                              v45 = *(double **)(a1 + 1648);
                            }
                            if (v45)
                            {
                              if (!raven::PositionChecker::Configure((uint64_t)v45, &v79, a1 + 16))
                              {
                                v47 = *(_QWORD *)(a1 + 8);
                                v48 = operator new();
                                *(_QWORD *)(v48 + 16) = 0;
                                *(_QWORD *)v48 = &unk_1E25C2DD0;
                                *(_QWORD *)(v48 + 8) = 0;
                                *(_BYTE *)(v48 + 9) = 1;
                                *(int64x2_t *)(v48 + 24) = vdupq_n_s64(0x7FF0000000000000uLL);
                                v49 = *(_QWORD *)(a1 + 1640);
                                *(_QWORD *)(a1 + 1640) = v48;
                                if (!v49
                                  || ((*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49),
                                      (v48 = *(_QWORD *)(a1 + 1640)) != 0))
                                {
                                  *(_QWORD *)(v48 + 16) = v12;
                                  *(_QWORD *)(v48 + 32) = *(_QWORD *)(v47 + 920);
                                  *(_QWORD *)(v48 + 24) = *(_QWORD *)(v47 + 2512);
                                  *(_BYTE *)(v48 + 8) = 1;
                                  v78 = *(double **)(a1 + 8);
                                  v55 = sub_18D272670(&v77);
                                  v56 = v77;
                                  v57 = *(_QWORD *)(a1 + 1656);
                                  *(_QWORD *)(a1 + 1656) = v77;
                                  if (v57)
                                  {
                                    (*(void (**)(uint64_t, int64x2_t))(*(_QWORD *)v57 + 24))(v57, v55);
                                    v56 = *(_QWORD *)(a1 + 1656);
                                  }
                                  if (v56
                                    && !raven::SolutionChecker::Configure(v56, &v78, a1 + 16, v50, v51, v52, v53, v54))
                                  {
                                    v58 = operator new();
                                    *(_OWORD *)v58 = 0u;
                                    *(_OWORD *)(v58 + 16) = 0u;
                                    *(_OWORD *)(v58 + 32) = 0u;
                                    *(_OWORD *)(v58 + 48) = 0u;
                                    *(_OWORD *)(v58 + 64) = 0u;
                                    *(_OWORD *)(v58 + 80) = 0u;
                                    *(_OWORD *)(v58 + 96) = 0u;
                                    *(_OWORD *)(v58 + 112) = 0u;
                                    *(_OWORD *)(v58 + 128) = 0u;
                                    *(_OWORD *)(v58 + 144) = 0u;
                                    *(_OWORD *)(v58 + 160) = 0u;
                                    *(_OWORD *)(v58 + 176) = 0u;
                                    *(_BYTE *)(v58 + 9) = 1;
                                    *(_QWORD *)v58 = &off_1E25C2748;
                                    v59 = *(_QWORD *)(a1 + 1664);
                                    *(_QWORD *)(a1 + 1664) = v58;
                                    if (v59)
                                    {
                                      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
                                      v58 = *(_QWORD *)(a1 + 1664);
                                    }
                                    *(_QWORD *)(v58 + 16) = v12;
                                    if (*(_BYTE *)(v58 + 24))
                                      *(_BYTE *)(v58 + 24) = 0;
                                    *(_BYTE *)(v58 + 8) = 1;
                                    v60 = operator new();
                                    *(_QWORD *)(v60 + 16) = 0;
                                    *(_QWORD *)v60 = &unk_1E25C3CC8;
                                    *(_QWORD *)(v60 + 8) = 0;
                                    *(_BYTE *)(v60 + 9) = 1;
                                    v61 = *(_QWORD *)(a1 + 1688);
                                    *(_QWORD *)(a1 + 1688) = v60;
                                    if (v61)
                                    {
                                      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61);
                                      v60 = *(_QWORD *)(a1 + 1688);
                                    }
                                    *(_QWORD *)(v60 + 16) = v12;
                                    *(_BYTE *)(v60 + 8) = 1;
                                    v62 = operator new();
                                    *(_QWORD *)(v62 + 16) = 0;
                                    *(_QWORD *)v62 = &unk_1E25C3D00;
                                    *(_QWORD *)(v62 + 8) = 0;
                                    *(_BYTE *)(v62 + 9) = 1;
                                    v63 = *(_QWORD *)(a1 + 1696);
                                    *(_QWORD *)(a1 + 1696) = v62;
                                    if (v63)
                                    {
                                      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63);
                                      v62 = *(_QWORD *)(a1 + 1696);
                                    }
                                    *(_QWORD *)(v62 + 16) = v12;
                                    *(_BYTE *)(v62 + 8) = 1;
                                    v77 = *(_QWORD *)(a1 + 8);
                                    v64 = operator new();
                                    *(_QWORD *)(v64 + 16) = 0;
                                    *(_QWORD *)v64 = &unk_1E25C2780;
                                    *(_QWORD *)(v64 + 8) = 0;
                                    *(_BYTE *)(v64 + 9) = 1;
                                    *(int64x2_t *)(v64 + 24) = vdupq_n_s64(0x7FF0000000000000uLL);
                                    v70 = *(_QWORD *)(a1 + 1672);
                                    *(_QWORD *)(a1 + 1672) = v64;
                                    if (v70)
                                    {
                                      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70);
                                      v64 = *(_QWORD *)(a1 + 1672);
                                    }
                                    if (!raven::UserSpeedChecker::Configure(v64, (uint64_t)&v77, a1 + 16, v65, v66, v67, v68, v69))
                                    {
                                      v71 = *(_QWORD **)(a1 + 8);
                                      v72 = operator new();
                                      *(_OWORD *)v72 = 0u;
                                      *(_OWORD *)(v72 + 16) = 0u;
                                      *(_OWORD *)(v72 + 32) = 0u;
                                      *(_BYTE *)(v72 + 9) = 1;
                                      *(_QWORD *)v72 = &unk_1E25C2648;
                                      *(int64x2_t *)(v72 + 24) = vdupq_n_s64(0x7FF0000000000000uLL);
                                      *(_BYTE *)(v72 + 40) = 1;
                                      v73 = *(_QWORD *)(a1 + 1680);
                                      *(_QWORD *)(a1 + 1680) = v72;
                                      if (!v73
                                        || ((*(void (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73),
                                            (v72 = *(_QWORD *)(a1 + 1680)) != 0))
                                      {
                                        *(_QWORD *)(v72 + 16) = v12;
                                        *(_QWORD *)(v72 + 32) = v71[115];
                                        *(_QWORD *)(v72 + 24) = v71[314];
                                        v74 = raven::GNSSMeasurementSelectionParameters::AllMeasurementsExcluded((raven::GNSSMeasurementSelectionParameters *)(v71 + 74));
                                        result = 0;
                                        *(_BYTE *)(v72 + 40) = v74 ^ 1;
                                        *(_BYTE *)(v72 + 8) = 1;
                                        *(_BYTE *)a1 = 1;
                                        return result;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    LOWORD(v81) = 12;
    LOBYTE(v80) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v80, "RavenIntegrityEstimator could not be configured.", a4, a5, a6, a7, a8, v76);
  }
  return 0xFFFFFFFFLL;
}

double sub_18D272590(uint64_t *a1)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_QWORD *)(v2 + 480) = 0;
  *(_BYTE *)(v2 + 9) = 1;
  *(_QWORD *)v2 = &off_1E25C2508;
  *(_WORD *)(v2 + 24) = 257;
  *(_BYTE *)(v2 + 26) = 1;
  *(int64x2_t *)(v2 + 32) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_BYTE *)(v2 + 48) = 1;
  *(_OWORD *)(v2 + 56) = xmmword_18D336370;
  *(_OWORD *)(v2 + 72) = xmmword_18D336380;
  *(_OWORD *)(v2 + 88) = xmmword_18D336390;
  result = 30.0;
  *(_OWORD *)(v2 + 104) = xmmword_18D3363A0;
  *a1 = v2;
  return result;
}

int64x2_t sub_18D272670(uint64_t *a1)
{
  uint64_t v2;
  int64x2_t result;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 9) = 1;
  *(_QWORD *)v2 = &unk_1E25C2610;
  result = vdupq_n_s64(0x7FF0000000000000uLL);
  *(int64x2_t *)(v2 + 24) = result;
  *(int64x2_t *)(v2 + 40) = result;
  *(int64x2_t *)(v2 + 56) = result;
  *(int64x2_t *)(v2 + 72) = result;
  *(int64x2_t *)(v2 + 88) = result;
  *(_QWORD *)(v2 + 104) = 0x7FF0000000000000;
  *a1 = v2;
  return result;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::ARSessionStatusEvent *a2)
{
  raven::RavenIntegrityEstimator *v3;
  char *v4;
  raven::RavenIntegrityEstimator *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  __n128 v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p[2];
  char v42;
  unsigned __int8 v43;
  __int16 v44;

  v3 = this;
  if (!*((_BYTE *)this + 288))
    goto LABEL_28;
  v4 = (char *)this + 296;
  v5 = (raven::RavenIntegrityEstimator *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 37) + 16))((char *)this + 296);
  v7 = v6;
  v8 = v6;
  this = (raven::RavenIntegrityEstimator *)(*(uint64_t (**)(const raven::ARSessionStatusEvent *))(*(_QWORD *)a2 + 16))(a2);
  v10.n128_f64[0] = v9;
  if (v5)
    v11 = 1;
  else
    v11 = (*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (!v11
    || (!this ? (v12 = (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (v12 = 1),
        !v12 || (v13 = (uint64_t)v5 <= (uint64_t)this, v5 == this)))
  {
    v13 = v8 <= v9;
  }
  if (v13)
    goto LABEL_28;
  if (!*((_BYTE *)v3 + 288))
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  if (*((unsigned __int8 *)v3 + 400) == *((unsigned __int8 *)a2 + 104))
  {
    LOWORD(__p[0]) = 12;
    LOBYTE(v44) = 2;
    v14 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v4 + 16))((uint64_t)v3 + 296, v10);
    v16 = v15 + (double)v14;
    (*(void (**)(const raven::ARSessionStatusEvent *))(*(_QWORD *)a2 + 16))(a2);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v44, "RavenIntegrityEstimator: Warning, AR Session Status out of order,t_curr,%.3lf,t_new,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v16));
  }
  else
  {
LABEL_28:
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      v44 = 12;
      v43 = 0;
      v22 = (*(uint64_t (**)(const raven::ARSessionStatusEvent *))(*(_QWORD *)a2 + 16))(a2);
      v24 = v23 + (double)v22;
      sub_18D272950((uint64_t)a2, __p);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, &v43, "RavenIntegrityEstimator: t,%.3lf Latest AR Session Status %s", v25, v26, v27, v28, v29, SLOBYTE(v24));
      if (v42 < 0)
        operator delete(__p[0]);
    }
    if (*((_BYTE *)v3 + 288))
    {
      v30 = *(_OWORD *)((char *)a2 + 8);
      v31 = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)v3 + 20) = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)v3 + 21) = v31;
      *((_OWORD *)v3 + 19) = v30;
      v32 = *(_OWORD *)((char *)a2 + 56);
      v33 = *(_OWORD *)((char *)a2 + 72);
      v34 = *(_OWORD *)((char *)a2 + 88);
      *((_BYTE *)v3 + 400) = *((_BYTE *)a2 + 104);
      *((_OWORD *)v3 + 23) = v33;
      *((_OWORD *)v3 + 24) = v34;
      *((_OWORD *)v3 + 22) = v32;
    }
    else
    {
      *((_QWORD *)v3 + 37) = &unk_1E25C2CC8;
      v35 = *(_OWORD *)((char *)a2 + 8);
      v36 = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)v3 + 20) = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)v3 + 21) = v36;
      *((_OWORD *)v3 + 19) = v35;
      v37 = *(_OWORD *)((char *)a2 + 56);
      v38 = *(_OWORD *)((char *)a2 + 72);
      v39 = *(_OWORD *)((char *)a2 + 88);
      *((_BYTE *)v3 + 400) = *((_BYTE *)a2 + 104);
      *((_OWORD *)v3 + 23) = v38;
      *((_OWORD *)v3 + 24) = v39;
      *((_OWORD *)v3 + 22) = v37;
      *((_BYTE *)v3 + 288) = 1;
    }
  }
  return 0;
}

void sub_18D272934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D272950@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_18D0778AC(a2, off_1E25CD448[*(char *)(a1 + 104)]);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::SignalEnvironmentEvent *a2)
{
  char *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  __n128 v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v34;
  __int16 v35;

  if (!*((_BYTE *)this + 680))
    goto LABEL_19;
  v4 = (char *)this + 688;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 86) + 16))((char *)this + 688);
  v7 = v6;
  v8 = v6;
  v9 = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(_QWORD *)a2 + 16))(a2);
  v11.n128_f64[0] = v10;
  if (v5)
    v12 = 1;
  else
    v12 = (*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (!v12
    || (!v9 ? (v13 = (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (v13 = 1),
        !v13 || (v14 = v5 <= v9, v5 == v9)))
  {
    v14 = v8 <= v10;
  }
  if (v14)
  {
    if (*((_BYTE *)this + 680))
    {
      v23 = *(_OWORD *)((char *)a2 + 8);
      v24 = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 712) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)this + 728) = v24;
      *(_OWORD *)((char *)this + 696) = v23;
      v25 = *(_OWORD *)((char *)a2 + 56);
      v26 = *(_OWORD *)((char *)a2 + 72);
      v27 = *(_OWORD *)((char *)a2 + 88);
      *((_BYTE *)this + 792) = *((_BYTE *)a2 + 104);
      *(_OWORD *)((char *)this + 760) = v26;
      *(_OWORD *)((char *)this + 776) = v27;
      *(_OWORD *)((char *)this + 744) = v25;
      return 0;
    }
LABEL_19:
    *((_QWORD *)this + 86) = &unk_1E25C2FC8;
    v28 = *(_OWORD *)((char *)a2 + 8);
    v29 = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)this + 712) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)this + 728) = v29;
    *(_OWORD *)((char *)this + 696) = v28;
    v30 = *(_OWORD *)((char *)a2 + 56);
    v31 = *(_OWORD *)((char *)a2 + 72);
    v32 = *(_OWORD *)((char *)a2 + 88);
    *((_BYTE *)this + 792) = *((_BYTE *)a2 + 104);
    *(_OWORD *)((char *)this + 760) = v31;
    *(_OWORD *)((char *)this + 776) = v32;
    *(_OWORD *)((char *)this + 744) = v30;
    *((_BYTE *)this + 680) = 1;
    return 0;
  }
  v35 = 12;
  v34 = 4;
  if (!*((_BYTE *)this + 680))
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  v15 = (*(uint64_t (**)(char *, __n128))(*(_QWORD *)v4 + 16))((char *)this + 688, v11);
  v17 = v16 + (double)v15;
  (*(void (**)(const raven::SignalEnvironmentEvent *))(*(_QWORD *)a2 + 16))(a2);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "RavenIntegrityEstimator: signal environment data out of order,t_curr,%.3lf,t_new,%.3lf", v18, v19, v20, v21, v22, SLOBYTE(v17));
  return 0;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::AccessoryVehicleSpeedChecker **this, const raven::AccessoryVehicleSpeedEvent *a2, raven::AccessoryVehicleSpeedEvent *a3)
{
  return raven::AccessoryVehicleSpeedChecker::HandleEvent(this[196], a2, a3);
}

__n128 raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::ActivityStateEvent *a2, raven::ActivityStateEvent *a3)
{
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (!raven::ActivityStateChecker::HandleEvent(*((raven::ActivityStateChecker **)this + 195), a2, a3))
  {
    v6 = *(_OWORD *)((char *)a3 + 104);
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a3 + 120);
    *(_OWORD *)((char *)this + 72) = v6;
    result = *(__n128 *)((char *)a3 + 136);
    v7 = *(_OWORD *)((char *)a3 + 152);
    v8 = *(_OWORD *)((char *)a3 + 168);
    *((_QWORD *)this + 19) = *((_QWORD *)a3 + 23);
    *(_OWORD *)((char *)this + 136) = v8;
    *(_OWORD *)((char *)this + 120) = v7;
    *(__n128 *)((char *)this + 104) = result;
  }
  return result;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::AltitudeChangeChecker **this, const raven::AltitudeChangeEvent *a2, raven::AltitudeChangeEvent *a3)
{
  return raven::AltitudeChangeChecker::HandleEvent(this[197], a2, a3);
}

__n128 raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::AltitudeEvent *a2, raven::AltitudeEvent *a3)
{
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (!raven::AltitudeChecker::HandleEvent(*((raven::AltitudeChecker **)this + 198), a2, a3))
  {
    if (*((_BYTE *)this + 160))
    {
      v6 = *(_OWORD *)((char *)a3 + 8);
      v7 = *(_OWORD *)((char *)a3 + 40);
      *((_OWORD *)this + 12) = *(_OWORD *)((char *)a3 + 24);
      *((_OWORD *)this + 13) = v7;
      *((_OWORD *)this + 11) = v6;
      result = *(__n128 *)((char *)a3 + 56);
      v8 = *(_OWORD *)((char *)a3 + 72);
      v9 = *(_OWORD *)((char *)a3 + 104);
      *((_OWORD *)this + 16) = *(_OWORD *)((char *)a3 + 88);
      *((_OWORD *)this + 17) = v9;
      *((__n128 *)this + 14) = result;
      *((_OWORD *)this + 15) = v8;
    }
    else
    {
      *((_QWORD *)this + 21) = &unk_1E25C2128;
      v10 = *(_OWORD *)((char *)a3 + 8);
      v11 = *(_OWORD *)((char *)a3 + 40);
      *((_OWORD *)this + 12) = *(_OWORD *)((char *)a3 + 24);
      *((_OWORD *)this + 13) = v11;
      *((_OWORD *)this + 11) = v10;
      result = *(__n128 *)((char *)a3 + 56);
      v12 = *(_OWORD *)((char *)a3 + 72);
      v13 = *(_OWORD *)((char *)a3 + 104);
      *((_OWORD *)this + 16) = *(_OWORD *)((char *)a3 + 88);
      *((_OWORD *)this + 17) = v13;
      *((__n128 *)this + 14) = result;
      *((_OWORD *)this + 15) = v12;
      *((_BYTE *)this + 160) = 1;
    }
  }
  return result;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::AttitudeChangeChecker **this, const raven::AttitudeChangeEvent *a2, raven::AttitudeChangeEvent *a3)
{
  return raven::AttitudeChangeChecker::HandleEvent(this[199], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::GNSSPreprocessedMeasurementsChecker **this, const raven::GnssPreprocessedMeasurementsEvent *a2, raven::GnssPreprocessedMeasurementsEvent *a3)
{
  return raven::GNSSPreprocessedMeasurementsChecker::HandleEvent(this[200], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::MapVectorChecker **this, const raven::MapVectorEvent *a2, raven::MapVectorEvent *a3)
{
  return raven::MapVectorChecker::HandleEvent(this[201], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::MountStateChecker **this, const raven::MountStateEvent *a2, raven::MountStateEvent *a3)
{
  return raven::MountStateChecker::HandleEvent(this[202], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::MovingStateChecker **this, const raven::MovingStateEvent *a2, raven::MovingStateEvent *a3)
{
  return raven::MovingStateChecker::HandleEvent(this[203], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::OdometerChecker **this, const raven::OdometerEvent *a2, raven::OdometerEvent *a3)
{
  return raven::OdometerChecker::HandleEvent(this[204], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::PositionChangeChecker **this, const raven::PositionChangeEvent *a2, raven::PositionChangeEvent *a3)
{
  return raven::PositionChangeChecker::HandleEvent(this[205], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::PositionChecker **this, const raven::PositionEvent *a2, raven::PositionEvent *a3)
{
  uint64_t v5;
  unsigned int v7;

  v5 = raven::PositionChecker::HandleEvent(this[206], a2, a3);
  if ((_DWORD)v5)
    return v5;
  v7 = *((unsigned __int8 *)a3 + 200);
  if (v7 <= 0xD)
  {
    if (v7 != 4 && v7 != 11)
      return v5;
    goto LABEL_11;
  }
  if (v7 != 14)
  {
    if (v7 != 16)
      return v5;
LABEL_11:
    if (*((_BYTE *)a3 + 202))
    {
      if (*((_BYTE *)this + 1168))
      {
        memcpy(this + 148, (char *)a3 + 8, 0x160uLL);
      }
      else
      {
        this[147] = (raven::PositionChecker *)&unk_1E25C21B8;
        memcpy(this + 148, (char *)a3 + 8, 0x160uLL);
        *((_BYTE *)this + 1168) = 1;
      }
      if (*((_BYTE *)a3 + 200) == 16)
        return 0xFFFFFFFFLL;
    }
    return v5;
  }
  if (*((_BYTE *)this + 288) && *((_BYTE *)this + 400) == 2)
  {
    if (*((_BYTE *)this + 800))
    {
      memcpy(this + 102, (char *)a3 + 8, 0x160uLL);
    }
    else
    {
      this[101] = (raven::PositionChecker *)&unk_1E25C21B8;
      memcpy(this + 102, (char *)a3 + 8, 0x160uLL);
      *((_BYTE *)this + 800) = 1;
    }
  }
  return v5;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::StepCountChecker **this, const raven::StepCountEvent *a2, raven::StepCountEvent *a3)
{
  return raven::StepCountChecker::HandleEvent(this[208], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::UserSpeedChecker **this, const raven::UserSpeedEvent *a2, raven::UserSpeedEvent *a3)
{
  return raven::UserSpeedChecker::HandleEvent(this[209], a2, a3);
}

__n128 raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::TunnelBridgeNotificationEvent *a2, raven::TunnelBridgeNotificationEvent *a3)
{
  __n128 result;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  double v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int8x16_t v20;
  _QWORD v21[2];

  if (!raven::TunnelBridgeNotificationChecker::HandleEvent(*((raven::TunnelBridgeNotificationChecker **)this + 211), a2, a3))
  {
    v21[0] = (*(uint64_t (**)(raven::TunnelBridgeNotificationEvent *))(*(_QWORD *)a3 + 16))(a3);
    v21[1] = v6;
    v20 = *(int8x16_t *)((char *)this + 456);
    v8 = CNTimeSpan::operator-((uint64_t)v21, &v20, v20, v7);
    if (*((_BYTE *)this + 674) && !*((_BYTE *)a3 + 226) && v9 + (double)v8 <= 600.0)
    {
      v10 = *((unsigned __int8 *)this + 1536);
      *(_OWORD *)((char *)this + 1544) = *(_OWORD *)((char *)a3 + 8);
      if (!v10)
        *((_BYTE *)this + 1536) = 1;
    }
    v11 = *(_OWORD *)((char *)a3 + 24);
    *(_OWORD *)((char *)this + 456) = *(_OWORD *)((char *)a3 + 8);
    *(_OWORD *)((char *)this + 472) = v11;
    v12 = *(_OWORD *)((char *)a3 + 40);
    v13 = *(_OWORD *)((char *)a3 + 56);
    v14 = *(_OWORD *)((char *)a3 + 88);
    *(_OWORD *)((char *)this + 520) = *(_OWORD *)((char *)a3 + 72);
    *(_OWORD *)((char *)this + 536) = v14;
    *(_OWORD *)((char *)this + 488) = v12;
    *(_OWORD *)((char *)this + 504) = v13;
    v15 = *(_OWORD *)((char *)a3 + 104);
    v16 = *(_OWORD *)((char *)a3 + 120);
    v17 = *(_OWORD *)((char *)a3 + 152);
    *(_OWORD *)((char *)this + 584) = *(_OWORD *)((char *)a3 + 136);
    *(_OWORD *)((char *)this + 600) = v17;
    *(_OWORD *)((char *)this + 552) = v15;
    *(_OWORD *)((char *)this + 568) = v16;
    result = *(__n128 *)((char *)a3 + 168);
    v18 = *(_OWORD *)((char *)a3 + 184);
    v19 = *(_OWORD *)((char *)a3 + 200);
    *(_OWORD *)((char *)this + 660) = *(_OWORD *)((char *)a3 + 212);
    *(_OWORD *)((char *)this + 632) = v18;
    *(_OWORD *)((char *)this + 648) = v19;
    *(__n128 *)((char *)this + 616) = result;
  }
  return result;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::TunnelEndPointAssistanceChecker **this, const raven::TunnelEndPointAssistanceEvent *a2, raven::TunnelEndPointAssistanceEvent *a3)
{
  if (raven::TunnelEndPointAssistanceChecker::HandleEvent(this[212], a2, a3))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::VelocityChecker **this, const raven::VelocityEvent *a2, raven::VelocityEvent *a3)
{
  return raven::VelocityChecker::HandleEvent(this[210], a2, a3);
}

__n128 raven::RavenIntegrityEstimator::UpdateCurrentTime(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1] = *a2;
  return result;
}

uint64_t raven::MapVectorChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  unsigned __int8 v14;
  __int16 v15;

  *(_QWORD *)(a1 + 16) = a3;
  v8 = *(_QWORD *)a3;
  v9 = *(double *)(a3 + 8);
  v10 = *(double *)(*(_QWORD *)a2 + 2512);
  *(double *)(a1 + 24) = v10;
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v10 <= 0.0)
  {
    v12 = v9 + (double)v8;
    v15 = 12;
    v14 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "t,%.3lf,Map vector checker, Cannot configure. Invalid estimator_sigma_tolerance: %.2lf", a4, a5, a6, a7, a8, SLOBYTE(v12));
    return 0xFFFFFFFFLL;
  }
  else
  {
    v11 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return v11;
}

BOOL raven::MapVectorChecker::isCoordinateValid(raven::MapVectorChecker *this, double a2, double a3)
{
  _BOOL4 v4;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v4 = a2 <= 90.0 && (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000 && a2 >= -90.0;
  if (a3 > 180.0)
    v4 = 0;
  return a3 >= -180.0 && v4;
}

uint64_t raven::MapVectorChecker::HandleEvent(raven::MapVectorChecker *this, const raven::MapVectorEvent *a2, raven::MapVectorEvent *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t **v10;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  cnprint::CNPrinter *v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __double2 v91;
  double v92;
  double v93;
  cnprint::CNPrinter *v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int8x16_t v105;
  int8x16_t v106;
  uint64_t v107;
  double v108;
  int8x16_t v109;
  int8x16_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  _QWORD *v121;
  uint64_t **v122;
  _BOOL8 v123;
  uint64_t v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  unsigned __int8 v169;
  void *v170;
  __int128 v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  void *v175;
  __int128 v176;
  uint64_t v177;
  double *v178;
  uint64_t v179;
  _QWORD v180[2];
  void (**v181)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v182;
  void *v183;
  __int128 v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  double v188;
  double v189;
  float64x2_t v190;
  uint64_t *v191;
  float64x2_t v192;
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
  {
    LOWORD(v181) = 12;
    LOBYTE(v175) = 4;
    v26 = (*(uint64_t (**)(const raven::MapVectorEvent *, const raven::MapVectorEvent *, raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v154 = v27 + (double)v26;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,MapVectorChecker, not configured", v28, v29, v30, v31, v32, SLOBYTE(v154));
    return 0xFFFFFFFFLL;
  }
  v4 = *((double *)a2 + 25);
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v5 = *((double *)a2 + 26), v5 < -180.0)
    || v5 > 180.0
    || v4 < -90.0
    || v4 > 90.0
    || (*((_QWORD *)a2 + 26) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v181) = 12;
      LOBYTE(v175) = 1;
      v19 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
      v153 = v20 + (double)v19;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,WARNING: Map vector checker, map vector has invalid predicted point coordinates, do not use map vector", v21, v22, v23, v24, v25, SLOBYTE(v153));
    }
    return 0xFFFFFFFFLL;
  }
  v6 = *((double *)a2 + 28);
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v7 = *((double *)a2 + 29), v7 < -180.0)
    || v7 > 180.0
    || v6 < -90.0
    || v6 > 90.0
    || (*((_QWORD *)a2 + 29) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v181) = 12;
      LOBYTE(v175) = 1;
      v34 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
      v155 = v35 + (double)v34;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,WARNING: Map vector checker, map vector has invalid start point coordinates, do not use map vector", v36, v37, v38, v39, v40, SLOBYTE(v155));
    }
    return 0xFFFFFFFFLL;
  }
  v8 = *((double *)a2 + 32);
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v8 < 0.0 || v8 >= 360.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v181) = 12;
      LOBYTE(v175) = 1;
      v41 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
      v156 = v42 + (double)v41;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,WARNING: Map vector checker, map vector course is not set, too large, or negative, do not use map vector", v43, v44, v45, v46, v47, SLOBYTE(v156));
    }
    return 0xFFFFFFFFLL;
  }
  if ((*((_QWORD *)a2 + 33) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 33) < 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v181) = 12;
      LOBYTE(v175) = 1;
      v48 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
      v157 = v49 + (double)v48;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,WARNING: Map vector checker, map vector course uncertainty is not set, or negative, do not use map vector", v50, v51, v52, v53, v54, SLOBYTE(v157));
    }
    return 0xFFFFFFFFLL;
  }
  if ((*((_QWORD *)a2 + 30) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 30) < 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v181) = 12;
      LOBYTE(v175) = 1;
      v55 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
      v158 = v56 + (double)v55;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,WARNING: Map vector checker, road width is not set or negative, do not use map vector", v57, v58, v59, v60, v61, SLOBYTE(v158));
    }
    return 0xFFFFFFFFLL;
  }
  if ((*((_QWORD *)a2 + 31) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 31) < 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v181) = 12;
      LOBYTE(v175) = 1;
      v62 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
      v159 = v63 + (double)v62;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,WARNING: Map vector checker, road length is not set or negative, do not use map vector", v64, v65, v66, v67, v68, SLOBYTE(v159));
    }
    return 0xFFFFFFFFLL;
  }
  memcpy((char *)a3 + 8, (char *)a2 + 8, 0x10CuLL);
  if (*((_BYTE *)this + 9))
  {
    if (!sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3363B0))
    {
      if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
      {
        LOWORD(v181) = 12;
        LOBYTE(v175) = 1;
        v69 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
        v160 = v70 + (double)v69;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,WARNING: Map vector checker, no valid fix, thus cannot conduct further check, to be safe, do not use map vector", v71, v72, v73, v74, v75, SLOBYTE(v160));
      }
      return 0xFFFFFFFFLL;
    }
    v10 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3363B0);
    if (!*((_BYTE *)v10 + 1464))
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v10) <= 1)
      {
        LOWORD(v181) = 12;
        LOBYTE(v175) = 1;
        v76 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
        v161 = v77 + (double)v76;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,WARNING: Map vector checker, no valid raven position fix, cannot conduct further check, to be safe, do not use map vector", v78, v79, v80, v81, v82, SLOBYTE(v161));
      }
      return 0xFFFFFFFFLL;
    }
    v190 = *((float64x2_t *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3363B0)
           + 92);
    v191 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3363B0)[186];
    v11 = (cnprint::CNPrinter *)cnnavigation::ECEFToLLA(&v190, 1, v192.f64, 0, (uint64_t)&v181);
    if ((_DWORD)v11)
    {
      if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
      {
        LOWORD(v181) = 12;
        LOBYTE(v175) = 1;
        v12 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
        v152 = v13 + (double)v12;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v181, (unsigned __int8 *)&v175, "t,%.3lf,WARNING: Map vector checker, cannot derive receiver lla position, do not use map vector", v14, v15, v16, v17, v18, SLOBYTE(v152));
      }
      return 0xFFFFFFFFLL;
    }
    v192 = vmulq_f64(*((float64x2_t *)a2 + 14), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    v182 = 0;
    v185 = 0x300000003;
    v183 = &unk_1E25C78E0;
    v184 = xmmword_18D30BB60;
    v186 = &v187;
    v181 = &off_1E25B9560;
    cnnavigation::ECEFToENU(&v190, 1, 1, &v192, 0, (uint64_t)&v188, (uint64_t)&v181, COERCE_DOUBLE(0x300000003));
    if ((_DWORD)v83)
    {
      if (cnprint::CNPrinter::GetLogLevel(v83) <= 1)
      {
        LOWORD(v175) = 12;
        LOBYTE(v170) = 1;
        v84 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
        v162 = v85 + (double)v84;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v175, (unsigned __int8 *)&v170, "t,%.3lf,WARNING: Map vector checker, cannot derive ENU of user position wrt segment start point, do not use map vector", v86, v87, v88, v89, v90, SLOBYTE(v162));
      }
      return 0xFFFFFFFFLL;
    }
    v91 = __sincos_stret(*((double *)a2 + 32) * 0.0174532925);
    v92 = v189 * v91.__cosval + v188 * v91.__sinval;
    v93 = *((double *)a2 + 31);
    if (v92 > v93 * 1.5 || v92 < v93 * -0.5)
    {
      v102 = *((_QWORD *)this + 2);
      v170 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
      *(_QWORD *)&v171 = v103;
      v180[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v102 + 432) + 16))(v102 + 432);
      v180[1] = v104;
      v107 = CNTimeSpan::operator-((uint64_t)&v170, v180, v105, v106);
      v175 = (void *)v107;
      *(double *)&v176 = v108;
      if (!*(_BYTE *)(v102 + 658))
        goto LABEL_60;
      if (v107 < 0 || (*(double *)v109.i64 = v108, v108 < 0.0))
      {
        v107 = CNTimeSpan::operator-((double *)&v175, v109, v110);
        v109.i64[0] = v111;
      }
      if (*(double *)v109.i64 + (double)v107 > 5.0)
      {
LABEL_60:
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v107) <= 1)
        {
          LOWORD(v170) = 12;
          LOBYTE(v180[0]) = 1;
          v112 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
          v164 = v113 + (double)v112;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v170, (unsigned __int8 *)v180, "t,%.3lf,WARNING: Map vector checker, along road component of current solution is far away from the given road segment, do not use map vector", v114, v115, v116, v117, v118, SLOBYTE(v164));
        }
        return 0xFFFFFFFFLL;
      }
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v107) <= 1)
      {
        LOWORD(v170) = 12;
        LOBYTE(v180[0]) = 1;
        v131 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
        v166 = v132 + (double)v131;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v170, (unsigned __int8 *)v180, "t,%.3lf,WARNING: Map vector checker, along road component of current solution is far away from the given road segment. However, position is currently inside tunnel. So do not fail the map vector.", v133, v134, v135, v136, v137, SLOBYTE(v166));
      }
    }
    v192 = vmulq_f64(*(float64x2_t *)((char *)a2 + 200), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    cnnavigation::ECEFToENU(&v190, 1, 1, &v192, 0, (uint64_t)&v188, (uint64_t)&v181, v192.f64[0]);
    if ((_DWORD)v94)
    {
      if (cnprint::CNPrinter::GetLogLevel(v94) <= 1)
      {
        LOWORD(v175) = 12;
        LOBYTE(v170) = 1;
        v95 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
        v163 = v96 + (double)v95;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v175, (unsigned __int8 *)&v170, "t,%.3lf,WARNING: Map vector checker, cannot derive ENU of user position wrt expected position, do not use map vector", v97, v98, v99, v100, v101, SLOBYTE(v163));
      }
      return 0xFFFFFFFFLL;
    }
    v119 = v188;
    v120 = v189;
    v177 = 0x300000003;
    v175 = &unk_1E25C78E0;
    v176 = xmmword_18D30BB60;
    v178 = (double *)&v179;
    v172 = 0x300000003;
    v170 = &unk_1E25C78E0;
    v171 = xmmword_18D30BB60;
    v121 = (_QWORD *)(*((_QWORD *)this + 2) + 16);
    v173 = &v174;
    v122 = sub_18D045814(v121, (unsigned __int8 *)&unk_18D3363B0);
    if (sub_18D2485E0((uint64_t)(v122 + 146), (uint64_t)&v170))
    {
      v123 = sub_18D04BB5C((uint64_t)&v181, (uint64_t)&v170, (uint64_t)&v175);
      if (!*((_BYTE *)this + 8)
        || fabs(fabs(v91.__sinval * v120 - v119 * v91.__cosval) / sqrt(*v178 + v178[SHIDWORD(v176) + 1])) > *((double *)this + 3))
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v123) <= 1)
        {
          LOWORD(v180[0]) = 12;
          v169 = 1;
          v145 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
          v168 = v146 + (double)v145;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v180, &v169, "t,%.3lf,WARNING: Map vector checker, IsSigmaSane check failed, do not use map vector", v147, v148, v149, v150, v151, SLOBYTE(v168));
        }
        return 0xFFFFFFFFLL;
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v123))
      {
        LOWORD(v180[0]) = 12;
        v169 = 0;
        v124 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
        v165 = v125 + (double)v124;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v180, &v169, "t,%.3lf,Map vector checker, passed", v126, v127, v128, v129, v130, SLOBYTE(v165));
      }
    }
    else
    {
      LOWORD(v180[0]) = 12;
      v169 = 2;
      v138 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(_QWORD *)a2 + 16))(a2);
      v167 = v139 + (double)v138;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v180, &v169, "t,%.3lf,WARNING: Map vector checker, difference with current solution not checked, can't get position covariance", v140, v141, v142, v143, v144, SLOBYTE(v167));
    }
  }
  return 0;
}

uint64_t raven::AltitudeChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a2 + 2512);
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::AltitudeChecker::HandleEvent(raven::AltitudeChecker *this, const raven::AltitudeEvent *a2, raven::AltitudeEvent *a3)
{
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t **v11;
  double v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t **v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  _BYTE v44[112];
  unsigned __int8 v45[112];
  _WORD v46[10];
  int v47;
  uint64_t v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD v58[9];
  _QWORD v59[9];
  double v60[2];
  double v61;
  float64x2_t v62;
  uint64_t *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
  {
    LOWORD(v54) = 12;
    LOBYTE(v49) = 4;
    v23 = (*(uint64_t (**)(const raven::AltitudeEvent *, const raven::AltitudeEvent *, raven::AltitudeEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v42 = v24 + (double)v23;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v49, "t,%.3lf,AltitudeChecker, not configured", v25, v26, v27, v28, v29, SLOBYTE(v42));
    return 0xFFFFFFFFLL;
  }
  if ((*((_QWORD *)a2 + 13) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if ((*((_QWORD *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *((double *)a2 + 14) > 0.0)
  {
    v6 = *(_OWORD *)((char *)a2 + 8);
    v7 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a3 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a3 + 24) = v7;
    *(_OWORD *)((char *)a3 + 8) = v6;
    v8 = *(_OWORD *)((char *)a2 + 56);
    v9 = *(_OWORD *)((char *)a2 + 72);
    v10 = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a3 + 88) = v10;
    *(_OWORD *)((char *)a3 + 72) = v9;
    *(_OWORD *)((char *)a3 + 56) = v8;
    if (*((_BYTE *)this + 9))
    {
      result = (uint64_t)sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D336426);
      if (!result)
        return result;
      v11 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D336426);
      if (!v11)
        goto LABEL_24;
      if (!*((_BYTE *)v11 + 1488))
        return 0;
      v12 = *((double *)a2 + 14);
      v13 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D336426);
      if (!v13
        || (*(_QWORD *)&v62.f64[0] = v13[187],
            (v14 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D336426)) == 0)
        || (*(_QWORD *)&v62.f64[1] = v14[188],
            (v15 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D336426)) == 0))
      {
LABEL_24:
        sub_18D077838("unordered_map::at: key not found");
      }
      v63 = v15[189];
      v60[0] = 0.0;
      v60[1] = 0.0;
      v61 = 0.0;
      if (cnnavigation::ECEFToLLA(&v62, 1, v60, 1, (uint64_t)v59))
      {
        LOWORD(v54) = 12;
        LOBYTE(v49) = 4;
        v16 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(_QWORD *)a2 + 16))(a2);
        v41 = v17 + (double)v16;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v49, "t,%.3lf,WARNING: Altitude checker, conversion of current position from ECEF to LLA failed", v18, v19, v20, v21, v22, SLOBYTE(v41));
        return 0xFFFFFFFFLL;
      }
      v56 = 0x300000003;
      v54 = &unk_1E25C78E0;
      v58[0] = v59[0];
      v58[1] = v59[3];
      v58[6] = v59[2];
      v58[7] = v59[5];
      v58[3] = v59[1];
      v58[2] = v59[6];
      v55 = xmmword_18D30BB60;
      v57 = v58;
      v58[4] = v59[4];
      v58[5] = v59[7];
      v58[8] = v59[8];
      v51 = 0x300000003;
      v49 = &unk_1E25C78E0;
      v50 = xmmword_18D30BB60;
      v30 = (_QWORD *)(*((_QWORD *)this + 2) + 16);
      v52 = &v53;
      v31 = sub_18D045814(v30, (unsigned __int8 *)&unk_18D336426);
      if (sub_18D2485E0((uint64_t)(v31 + 146), (uint64_t)&v49))
      {
        sub_18D166008((uint64_t)&v54, (uint64_t)&v49, (uint64_t)v45);
        sub_18D16606C((uint64_t)&v54, (uint64_t)v44);
        sub_18D166008((uint64_t)v45, (uint64_t)v44, (uint64_t)v46);
        v32 = fabs(sqrt((*((double *)a2 + 13) - v61)* (*((double *)a2 + 13) - v61)/ (v12 * v12 + *(double *)(v48 + 16 * v47 + 16)))) > *((double *)this + 3);
        if (*((_BYTE *)this + 8))
          v33 = v32;
        else
          v33 = 1;
        return (v33 << 31 >> 31);
      }
      v46[0] = 12;
      v45[0] = 2;
      v34 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(_QWORD *)a2 + 16))(a2);
      v43 = v35 + (double)v34;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v46, v45, "t,%.3lf,WARNING: Altitude checker, difference with current solution not checked, can't get position covariance", v36, v37, v38, v39, v40, SLOBYTE(v43));
    }
    return 0;
  }
  return result;
}

double raven::RavenIonosphereEstimatorInitArgs::Fill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, float64_t a19)
{
  float64x2_t v20;
  double result;
  void *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a5;
  *(double *)(a1 + 24) = a6;
  *(double *)(a1 + 32) = a7;
  *(double *)(a1 + 40) = a8;
  *(double *)(a1 + 48) = a9;
  *(double *)(a1 + 56) = a11;
  *(double *)(a1 + 64) = a10;
  *(double *)(a1 + 72) = a12;
  *(_QWORD *)(a1 + 80) = a17;
  *(_QWORD *)(a1 + 88) = a18;
  v24 = 0xA0000000ALL;
  v22 = &unk_1E25C5FC0;
  *(_QWORD *)&v20.f64[1] = 0xA00000064;
  v23 = xmmword_18D319A40;
  v25 = &v26;
  v20.f64[0] = a19;
  sub_18D064EF4(a4, (uint64_t)&v22, v20);
  *(_QWORD *)&result = sub_18D053AA8(a1 + 96, (uint64_t)&v22).n128_u64[0];
  return result;
}

raven::RavenIonosphereEstimator *raven::RavenIonosphereEstimator::RavenIonosphereEstimator(raven::RavenIonosphereEstimator *this)
{
  char *v2;
  cnprint::CNPrinter *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v16;
  __int16 v17;

  *(_QWORD *)this = 0x3FF0000000000000;
  *((_WORD *)this + 4) = 0;
  *((_OWORD *)this + 2) = 0u;
  v2 = (char *)this + 32;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 448) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_BYTE *)this + 64) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 57) = &unk_1E25C2218;
  *((_BYTE *)this + 480) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_BYTE *)this + 504) = 0;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 528) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 69) = 0x7FF8000000000000;
  *((_QWORD *)this + 67) = 0;
  sub_18D0409EC((uint64_t)this + 560);
  *((_QWORD *)this + 376) = 0;
  *((_OWORD *)this + 187) = 0u;
  *((_OWORD *)this + 238) = 0u;
  *((_OWORD *)this + 239) = 0u;
  *((_OWORD *)this + 240) = 0u;
  *((_QWORD *)this + 482) = 0;
  *((_QWORD *)this + 487) = 0x10000000ALL;
  *((_QWORD *)this + 484) = &unk_1E25C6020;
  *((_QWORD *)this + 488) = (char *)this + 3912;
  *((_QWORD *)this + 502) = 0xA0000000ALL;
  *((_QWORD *)this + 499) = &unk_1E25C5FC0;
  *((_QWORD *)this + 503) = (char *)this + 4032;
  *((_QWORD *)this + 607) = 0x10000000ALL;
  *((_QWORD *)this + 604) = &unk_1E25C6020;
  *((_QWORD *)this + 608) = (char *)this + 4872;
  *((_QWORD *)this + 622) = 0x10000000ALL;
  *((_QWORD *)this + 619) = &unk_1E25C6020;
  *((_QWORD *)this + 623) = (char *)this + 4992;
  *((_QWORD *)this + 637) = 0xA0000000ALL;
  *((_QWORD *)this + 634) = &unk_1E25C5FC0;
  *((_QWORD *)this + 638) = (char *)this + 5112;
  *((_QWORD *)this + 742) = 0x10000000ALL;
  *((_QWORD *)this + 739) = &unk_1E25C6020;
  *((_QWORD *)this + 743) = (char *)this + 5952;
  *((int64x2_t *)this + 379) = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  *((_WORD *)this + 3040) = 0;
  *((_QWORD *)this + 761) = 0x3FEE666666666666;
  *((_QWORD *)this + 762) = 0;
  *((_QWORD *)this + 763) = 0;
  *((_QWORD *)this + 764) = 0x4197D78400000000;
  *((_QWORD *)this + 754) = 0;
  *((_BYTE *)this + 6040) = 0;
  *((_QWORD *)this + 485) = 0;
  *((_QWORD *)this + 486) = 0;
  *((_QWORD *)this + 500) = 0;
  *((_QWORD *)this + 501) = 0;
  *((_QWORD *)this + 605) = 0;
  *((_QWORD *)this + 606) = 0;
  *((_QWORD *)this + 621) = 0;
  *((_QWORD *)this + 620) = 0;
  *((_QWORD *)this + 635) = 0;
  *((_QWORD *)this + 636) = 0;
  *((_QWORD *)this + 740) = 0;
  *((_QWORD *)this + 741) = 0;
  *(_OWORD *)((char *)this + 6120) = 0u;
  *(_OWORD *)((char *)this + 6136) = 0u;
  *(_OWORD *)((char *)this + 6152) = 0u;
  *(_OWORD *)((char *)this + 6168) = 0u;
  *(_OWORD *)((char *)this + 6184) = 0u;
  *(_OWORD *)((char *)this + 6200) = 0u;
  *(_OWORD *)((char *)this + 6216) = 0u;
  *(_OWORD *)((char *)this + 6232) = 0u;
  *((_QWORD *)this + 781) = 0;
  *(_OWORD *)((char *)this + 6044) = xmmword_18D3197A0;
  *((_QWORD *)this + 483) = &unk_1E25B9150;
  *((_QWORD *)this + 785) = 0xA0000000ALL;
  *((_QWORD *)this + 782) = &unk_1E25C5FC0;
  *((_QWORD *)this + 786) = (char *)this + 6296;
  *((_QWORD *)this + 890) = 0x10000000ALL;
  *((_QWORD *)this + 887) = &unk_1E25C6020;
  *((_QWORD *)this + 891) = (char *)this + 7136;
  *((_QWORD *)this + 905) = 0xA0000000ALL;
  *((_QWORD *)this + 902) = &unk_1E25C5FC0;
  *((_QWORD *)this + 906) = (char *)this + 7256;
  *((_QWORD *)this + 1007) = 0x100000000;
  *((_DWORD *)this + 2016) = 0x7FFFFFFF;
  *((_QWORD *)this + 1009) = 0x3E45798EE2308C3ALL;
  *((_QWORD *)this + 1010) = 0x3E45798EE2308C3ALL;
  *((_WORD *)this + 4044) = 0;
  *((_QWORD *)this + 1012) = 0x3FEE666666666666;
  *((_QWORD *)this + 1014) = 0;
  *((_QWORD *)this + 1013) = 0;
  *((_QWORD *)this + 1015) = 0x4197D78400000000;
  *((_QWORD *)this + 1017) = 0;
  *((_QWORD *)this + 1016) = 0;
  *((_WORD *)this + 4072) = 1;
  *((_QWORD *)this + 1019) = 0;
  *((_QWORD *)this + 784) = 0;
  *((_QWORD *)this + 783) = 0;
  *((_QWORD *)this + 889) = 0;
  *((_QWORD *)this + 888) = 0;
  *((_QWORD *)this + 904) = 0;
  *((_QWORD *)this + 903) = 0;
  *((_QWORD *)this + 1021) = 0x3FE0000000000000;
  *((_QWORD *)this + 1022) = 0x3FE0000000000000;
  *((_DWORD *)this + 2046) = 0;
  *((_QWORD *)this + 1020) = &unk_1E25B90A0;
  __asm { FMOV            V0.2D, #0.5 }
  *((_OWORD *)this + 512) = _Q0;
  *((_OWORD *)this + 513) = xmmword_18D3197C0;
  *((_QWORD *)this + 1028) = 0x3FE0000000000000;
  *((_WORD *)this + 4116) = 0;
  *((_OWORD *)this + 516) = 0u;
  *((_OWORD *)this + 515) = 0u;
  *((_QWORD *)this + 1034) = (char *)this + 8272;
  *((_QWORD *)this + 1035) = (char *)this + 8272;
  *((_QWORD *)this + 1036) = 0;
  sub_18D27F6C8((uint64_t)this + 8296);
  *((_QWORD *)this + 1221) = 0x100000058;
  *((_QWORD *)this + 1218) = &off_1E25C8600;
  *(_OWORD *)((char *)this + 9752) = xmmword_18D3364A0;
  *((_QWORD *)this + 1222) = (char *)this + 9784;
  *((_QWORD *)this + 1270) = 0x100000058;
  *((_QWORD *)this + 1267) = &off_1E25C85D0;
  *((_OWORD *)this + 634) = xmmword_18D3364A0;
  *((_QWORD *)this + 1271) = (char *)this + 10176;
  sub_18D27F794((uint64_t)this + 10880);
  *((_QWORD *)this + 1369) = 0x100000058;
  *((_QWORD *)this + 1366) = &off_1E25C8600;
  *(_OWORD *)((char *)this + 10936) = xmmword_18D3364A0;
  *((_QWORD *)this + 1370) = (char *)this + 10968;
  sub_18D27F794((uint64_t)this + 11320);
  sub_18D27F794((uint64_t)this + 11368);
  *((_DWORD *)this + 2854) = 0;
  *((_QWORD *)this + 1431) = 0x100000058;
  *((_QWORD *)this + 1428) = &off_1E25C8570;
  *(_OWORD *)((char *)this + 11432) = xmmword_18D3364A0;
  *((_QWORD *)this + 1432) = (char *)this + 11464;
  *((_QWORD *)this + 1524) = 0x100000058;
  *((_QWORD *)this + 1521) = &off_1E25C85A0;
  *((_QWORD *)this + 1525) = (char *)this + 12208;
  *((_OWORD *)this + 761) = xmmword_18D3364A0;
  sub_18D27F824((uint64_t)this + 12912);
  *((_QWORD *)this + 1710) = 0x10000002CLL;
  *((_QWORD *)this + 1707) = &off_1E25C7B50;
  *((_OWORD *)this + 854) = xmmword_18D3364B0;
  *((_QWORD *)this + 1711) = (char *)this + 13696;
  *((_QWORD *)this + 1737) = 0x10000002CLL;
  *((_QWORD *)this + 1734) = &off_1E25C7B20;
  *(_OWORD *)((char *)this + 13880) = xmmword_18D3364B0;
  *((_QWORD *)this + 1738) = (char *)this + 13912;
  sub_18D27F8F0((_QWORD *)this + 1783);
  *((_QWORD *)this + 2055) = 0x10000002CLL;
  *((_QWORD *)this + 2052) = &off_1E25C7B50;
  *(_OWORD *)((char *)this + 16424) = xmmword_18D3364B0;
  *((_QWORD *)this + 2056) = (char *)this + 16456;
  sub_18D27F8F0((_QWORD *)this + 2079);
  sub_18D27F8F0((_QWORD *)this + 2348);
  *((_DWORD *)this + 5234) = 0;
  *((_QWORD *)this + 2621) = 0x10000002CLL;
  *((_QWORD *)this + 2618) = &off_1E25C7AC0;
  *(_OWORD *)((char *)this + 20952) = xmmword_18D3364B0;
  *((_QWORD *)this + 2622) = (char *)this + 20984;
  *((_QWORD *)this + 2670) = 0x10000002CLL;
  *((_QWORD *)this + 2667) = &off_1E25C7AF0;
  *((_OWORD *)this + 1334) = xmmword_18D3364B0;
  *((_QWORD *)this + 2671) = (char *)this + 21376;
  sub_18D04AEC4((uint64_t)this + 8232);
  if (cnprint::CNPrinter::GetLogLevel(v8) <= 1)
  {
    v17 = 12;
    v16 = 1;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)v2, "Resetting from constructor");
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v14) = (_BYTE)this - 24;
    else
      v14 = *((_QWORD *)this + 477);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "%s", v9, v10, v11, v12, v13, v14);
  }
  raven::RavenIonosphereEstimator::Reset(this);
  return this;
}

void sub_18D274468(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  sub_18D2746C0(v4);
  *(_QWORD *)(v1 + 8160) = v6 + 16;
  *(_QWORD *)(v1 + 3864) = v5 + 16;
  *(_QWORD *)(v1 + 7216) = &unk_1E25C5E70;
  *(_QWORD *)(v1 + 7096) = &unk_1E25C5E70;
  *(_QWORD *)(v1 + 6256) = &unk_1E25C5E70;
  sub_18D057070(v3);
  sub_18D178B20(v2);
  if (*(_BYTE *)(v1 + 448))
    *(_QWORD *)(v1 + 248) = &off_1E25C30B0;
  _Unwind_Resume(a1);
}

uint64_t *sub_18D2746C0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0;
  a1[1638] = (uint64_t)&unk_1E25C5DE0;
  a1[1589] = (uint64_t)&unk_1E25C5C00;
  do
  {
    a1[v2 + 1582] = (uint64_t)&unk_1E25C5E70;
    v2 -= 6;
  }
  while (v2 != -264);
  v3 = 0;
  a1[1319] = (uint64_t)&unk_1E25C5960;
  do
  {
    a1[v3 + 1313] = (uint64_t)&unk_1E25C5E70;
    v3 -= 6;
  }
  while (v3 != -264);
  v4 = 0;
  a1[1050] = (uint64_t)&unk_1E25C5960;
  a1[1023] = (uint64_t)&unk_1E25C5EA0;
  do
  {
    a1[v4 + 1017] = (uint64_t)&unk_1E25C5E70;
    v4 -= 6;
  }
  while (v4 != -264);
  a1[754] = (uint64_t)&unk_1E25C5960;
  a1[705] = (uint64_t)&unk_1E25C5E70;
  a1[678] = (uint64_t)&unk_1E25C5EA0;
  a1[585] = (uint64_t)&unk_1E25C58D0;
  a1[492] = (uint64_t)&unk_1E25C5DE0;
  a1[399] = (uint64_t)&unk_1E25C5C00;
  a1[392] = (uint64_t)&unk_1E25C8540;
  sub_18D27ED94(a1 + 397);
  a1[392] = (uint64_t)&unk_1E25C5960;
  a1[386] = (uint64_t)&unk_1E25C8540;
  sub_18D27ED94(a1 + 391);
  a1[386] = (uint64_t)&unk_1E25C5960;
  a1[337] = (uint64_t)&unk_1E25C5EA0;
  a1[331] = (uint64_t)&unk_1E25C8540;
  sub_18D27ED94(a1 + 336);
  a1[331] = (uint64_t)&unk_1E25C5960;
  a1[238] = (uint64_t)&unk_1E25C5E70;
  a1[189] = (uint64_t)&unk_1E25C5EA0;
  a1[8] = (uint64_t)&unk_1E25C58D0;
  sub_18D05DB90(a1 + 5);
  return a1;
}

uint64_t sub_18D27482C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B9150;
  *(_QWORD *)(a1 + 3352) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 3232) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 2392) = &unk_1E25C5E70;
  return sub_18D057070(a1);
}

void raven::RavenIonosphereEstimator::AddToAcceptedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  void *__p[2];
  char v5;

  sub_18D0778AC(__p, "Accepted");
  raven::RavenIonosphereEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 3016, (uint64_t)a1 + 3412);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18D2748BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenIonosphereEstimator::UpdateMeasurementTypeCount(cnprint::CNPrinter *a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v11;
  std::string::size_type *LogLevel;
  uint64_t i;
  unsigned int v14;
  char *v15;
  std::string::size_type size;
  std::string *v17;
  std::string *p_dst;
  const std::string::value_type *p_p;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  char v28;
  std::string *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  uint64_t j;
  unsigned int v39;
  char *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string *v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  char v53;
  std::string *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  cnprint::CNPrinter *v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  void *__p;
  std::string::size_type v68;
  unsigned __int8 v69;
  std::string __dst;
  _QWORD v71[5];

  v71[2] = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      ++*(_DWORD *)(a4 + 4 * *v5);
      v11 = *v5;
      v5 += 8;
      ++*(_DWORD *)(a5 + 4 * v11);
    }
    while (v5 != v6);
    LogLevel = (std::string::size_type *)cnprint::CNPrinter::GetLogLevel(a1);
    if (!(_DWORD)LogLevel)
    {
      v62 = a1;
      if (*(char *)(a2 + 23) < 0)
        LogLevel = (std::string::size_type *)sub_18D077798(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      else
        __dst = *(std::string *)a2;
      for (i = 0; i != 33; ++i)
      {
        v14 = *(_DWORD *)(a4 + 4 * i);
        if (v14)
        {
          v15 = "UnknownMeas";
          if (i <= 0x20u)
            v15 = off_1E25CD468[i];
          sub_18D0778AC(&__p, v15);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            size = __dst.__r_.__value_.__l.__size_;
          sub_18D099E3C((uint64_t)&v64, size + 1);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v64;
          else
            v17 = (std::string *)v64.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            memmove(v17, p_dst, size);
          }
          *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + size) = 44;
          if ((v69 & 0x80u) == 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if ((v69 & 0x80u) == 0)
            v20 = v69;
          else
            v20 = v68;
          v21 = std::string::append(&v64, p_p, v20);
          v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          v23 = std::string::append(&v65, ",", 1uLL);
          v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v63, v14);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v63;
          else
            v25 = (std::string *)v63.__r_.__value_.__r.__words[0];
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          else
            v26 = v63.__r_.__value_.__l.__size_;
          LogLevel = (std::string::size_type *)std::string::append(&v66, (const std::string::value_type *)v25, v26);
          v27 = *LogLevel;
          v71[0] = LogLevel[1];
          *(_QWORD *)((char *)v71 + 7) = *(std::string::size_type *)((char *)LogLevel + 15);
          v28 = *((_BYTE *)LogLevel + 23);
          LogLevel[1] = 0;
          LogLevel[2] = 0;
          *LogLevel = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst.__r_.__value_.__r.__words[0] = v27;
          __dst.__r_.__value_.__l.__size_ = v71[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v71 + 7);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          if ((char)v69 < 0)
            operator delete(__p);
        }
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel))
      {
        LOWORD(__p) = 12;
        v66.__r_.__value_.__s.__data_[0] = 0;
        v29 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v30 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v62 + 3816, (uint64_t)v62 + 32, "count_per_update,%s", (const char *)v29);
        if (*((char *)v62 + 3839) >= 0)
          LOBYTE(v36) = v30;
        else
          v36 = *((_QWORD *)v62 + 477);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v66, "%s", v31, v32, v33, v34, v35, v36);
      }
      v37 = std::string::operator=(&__dst, (const std::string *)a2);
      for (j = 0; j != 33; ++j)
      {
        v39 = *(_DWORD *)(a5 + 4 * j);
        if (v39)
        {
          v40 = "UnknownMeas";
          if (j <= 0x20u)
            v40 = off_1E25CD468[j];
          sub_18D0778AC(&__p, v40);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v41 = __dst.__r_.__value_.__l.__size_;
          sub_18D099E3C((uint64_t)&v64, v41 + 1);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = &v64;
          else
            v42 = (std::string *)v64.__r_.__value_.__r.__words[0];
          if (v41)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43 = &__dst;
            else
              v43 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            memmove(v42, v43, v41);
          }
          *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 44;
          if ((v69 & 0x80u) == 0)
            v44 = (const std::string::value_type *)&__p;
          else
            v44 = (const std::string::value_type *)__p;
          if ((v69 & 0x80u) == 0)
            v45 = v69;
          else
            v45 = v68;
          v46 = std::string::append(&v64, v44, v45);
          v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          v48 = std::string::append(&v65, ",", 1uLL);
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v63, v39);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = &v63;
          else
            v50 = (std::string *)v63.__r_.__value_.__r.__words[0];
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          else
            v51 = v63.__r_.__value_.__l.__size_;
          v37 = std::string::append(&v66, (const std::string::value_type *)v50, v51);
          v52 = v37->__r_.__value_.__r.__words[0];
          v71[0] = v37->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
          v53 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          __dst.__r_.__value_.__r.__words[0] = v52;
          __dst.__r_.__value_.__l.__size_ = v71[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v71 + 7);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v53;
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          if ((char)v69 < 0)
            operator delete(__p);
        }
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v37))
      {
        LOWORD(__p) = 12;
        v66.__r_.__value_.__s.__data_[0] = 0;
        v54 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v54 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v55 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v62 + 3816, (uint64_t)v62 + 32, "count_cumulative,%s", (const char *)v54);
        if (*((char *)v62 + 3839) >= 0)
          LOBYTE(v61) = v55;
        else
          v61 = *((_QWORD *)v62 + 477);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v66, "%s", v56, v57, v58, v59, v60, v61);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
}

void sub_18D274E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  _Unwind_Resume(exception_object);
}

void raven::RavenIonosphereEstimator::AddToRejectedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  void *__p[2];
  char v5;

  sub_18D0778AC(__p, "Rejected");
  raven::RavenIonosphereEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 3148, (uint64_t)a1 + 3544);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18D274F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenIonosphereEstimator::AddToUnusedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  void *__p[2];
  char v5;

  sub_18D0778AC(__p, "Unused");
  raven::RavenIonosphereEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 3280, (uint64_t)a1 + 3676);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18D275000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenIonosphereEstimator::Configure(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int32x4_t v14;
  cnstatistics *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t result;
  double v21;
  BOOL v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  _OWORD *v31;
  double v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE v50[808];

  if (*(_BYTE *)(a1 + 8))
  {
    LOWORD(v46) = 12;
    LOBYTE(v41) = 2;
    v3 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 3816), "Configure() called more than once");
  }
  else
  {
    v10 = *(_OWORD **)a2;
    if (*(_QWORD *)a2)
    {
      if (*((_BYTE *)v10 + 33))
      {
        v11 = *((_QWORD *)v10 + 114);
        v12 = *((_QWORD *)v10 + 115);
        *(_QWORD *)(a1 + 8056) = 0x100000000;
        *(_DWORD *)(a1 + 8064) = 0x7FFFFFFF;
        *(_QWORD *)(a1 + 8072) = 0x3E45798EE2308C3ALL;
        *(_QWORD *)(a1 + 8080) = 0x3E45798EE2308C3ALL;
        *(_WORD *)(a1 + 8088) = 257;
        *(_QWORD *)(a1 + 8096) = v11;
        *(_QWORD *)(a1 + 8112) = 0;
        *(_QWORD *)(a1 + 8104) = 0;
        *(_QWORD *)(a1 + 8120) = v12;
        *(_QWORD *)(a1 + 8136) = 0;
        *(_QWORD *)(a1 + 8128) = 0;
        *(_WORD *)(a1 + 8144) = 1;
        *(_QWORD *)(a1 + 8152) = 0;
        *(_QWORD *)(a1 + 6048) = 0x100000000;
        *(_DWORD *)(a1 + 6056) = 0x7FFFFFFF;
        *(int64x2_t *)(a1 + 6064) = vdupq_n_s64(0x3E45798EE2308C3AuLL);
        *(_WORD *)(a1 + 6080) = 257;
        *(_QWORD *)(a1 + 6088) = v11;
        *(_QWORD *)(a1 + 6104) = 0;
        *(_QWORD *)(a1 + 6096) = 0;
        *(_QWORD *)(a1 + 6112) = v12;
        *(_QWORD *)(a1 + 6120) = 0;
        *(_QWORD *)(a1 + 6128) = 0;
        *(_BYTE *)(a1 + 6040) = 0;
        v43 = 0x10000000ALL;
        v41 = &unk_1E25C6020;
        v44 = &v45;
        v42 = xmmword_18D31CEF0;
        sub_18D04BE88((uint64_t)&v41, 0.0);
        v13 = DWORD2(v42);
        sub_18D064F78((uint64_t)&v46, (uint64_t)&v41);
        v14 = vdupq_lane_s32((int32x2_t)(v13 | 0x100000000), 0);
        v14.i32[1] = 1;
        v47 = (__int128)v14;
        sub_18D053AA8(a1 + 3872, (uint64_t)&v46);
        v48 = 0xA0000000ALL;
        v46 = (uint64_t)&unk_1E25C5FC0;
        v49 = v50;
        LODWORD(v47) = v13;
        DWORD1(v47) = v13;
        DWORD2(v47) = v13 * v13;
        HIDWORD(v47) = v13;
        sub_18D04BE88((uint64_t)&v46, 0.0);
        sub_18D053AA8(a1 + 3992, (uint64_t)&v46);
        v48 = 0x10000000ALL;
        v46 = (uint64_t)&unk_1E25C6020;
        v47 = xmmword_18D31CEF0;
        v49 = v50;
        sub_18D053B2C(a1 + 3992, a1 + 3872, (uint64_t)&v46);
        sub_18D053AA8(a1 + 4832, (uint64_t)&v46);
        sub_18D053AA8(a1 + 4952, a1 + 3872);
        sub_18D053AA8(a1 + 5072, a1 + 3992);
        sub_18D053AA8(a1 + 5912, a1 + 4832);
        *(_QWORD *)(a1 + 6032) = 0x3FF0000000000000;
        *(_BYTE *)(a1 + 6040) = 0;
        *(_DWORD *)(a1 + 6044) = 1;
        v46 = 0x3FE0000000000000;
        v15 = (cnstatistics *)sub_18D04AD78(a1 + 8168, (double *)&v46);
        v16 = *((double *)v10 + 385);
        if (v16 >= 0.0
          && v16 <= 1.0
          && (v17 = *((double *)v10 + 386), v17 >= 0.0)
          && v17 <= 1.0
          && (v18 = *((double *)v10 + 384), v18 >= 0.0))
        {
          *(double *)(a1 + 8208) = v18;
          *(_QWORD *)(a1 + 0x2000) = *((_QWORD *)v10 + 385);
          *(_QWORD *)(a1 + 8200) = *((_QWORD *)v10 + 386);
          v21 = 1.0
              - fabs(cnstatistics::InverseNormal(v15, (1.0 - *((double *)v10 + 114)) * 0.5, 0.0, 1.0))
              / *((double *)v10 + 387);
          v22 = v21 >= 0.0 && v21 <= 1.0;
          if (v22 && (v23 = 1.0 - *((double *)v10 + 114), v23 >= 0.0) && v23 <= 1.0)
          {
            v24 = 0;
            *(double *)(a1 + 8216) = v21;
            *(double *)(a1 + 8224) = v23;
            do
            {
              v25 = *(_QWORD *)((char *)v10 + v24 + 2824);
              v26 = (v25 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
              v27 = ((v25 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
              if (v25 >= 0)
              {
                v27 = 0;
                v26 = 0;
              }
              v28 = v25 & 0x7FFFFFFFFFFFFFFFLL;
              if (!v28)
                v26 = 1;
              v29 = v28 <= 0x7FF0000000000000;
              v30 = v28 == 0x7FF0000000000000 || v26;
              if (!v29)
                v30 = 1;
              if ((v30 | v27) == 1)
              {
                LOWORD(v46) = 12;
                LOBYTE(v41) = 4;
                v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() failed, non-positive correlation time constant specified.");
                goto LABEL_13;
              }
              v24 += 8;
            }
            while (v24 != 80);
            v31 = *(_OWORD **)a2;
            v32 = *(double *)(*(_QWORD *)a2 + 3104);
            if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v32 <= 90.0 && v32 >= -10.0)
            {
              result = 0;
              *(double *)a1 = v32;
              *(_OWORD *)(a1 + 88) = v31[161];
              v34 = v31[162];
              v35 = v31[163];
              v36 = v31[164];
              *(_OWORD *)(a1 + 152) = v31[165];
              *(_OWORD *)(a1 + 136) = v36;
              *(_OWORD *)(a1 + 120) = v35;
              *(_OWORD *)(a1 + 104) = v34;
              v37 = (_OWORD *)(*(_QWORD *)a2 + 2904);
              v38 = *(_OWORD *)(*(_QWORD *)a2 + 2920);
              v39 = *(_OWORD *)(*(_QWORD *)a2 + 2936);
              v40 = *(_OWORD *)(*(_QWORD *)a2 + 2952);
              *(_OWORD *)(a1 + 232) = *(_OWORD *)(*(_QWORD *)a2 + 2968);
              *(_OWORD *)(a1 + 216) = v40;
              *(_OWORD *)(a1 + 200) = v39;
              *(_OWORD *)(a1 + 184) = v38;
              *(_OWORD *)(a1 + 168) = *v37;
              *(_QWORD *)(a1 + 3808) = *(_QWORD *)a2;
              *(_BYTE *)(a1 + 8) = 1;
              return result;
            }
            LOWORD(v46) = 12;
            LOBYTE(v41) = 4;
            v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() failed, invalid satellite elevation mask specified,.%.2lf");
          }
          else
          {
            LOWORD(v46) = 12;
            LOBYTE(v41) = 4;
            v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() failed to set consistency monitor update parameters");
          }
        }
        else
        {
          LOWORD(v46) = 12;
          LOBYTE(v41) = 4;
          v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() failed to set consistency monitor prediction parameters");
        }
      }
      else
      {
        LOWORD(v46) = 12;
        LOBYTE(v41) = 4;
        v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() called with uninitialized raven parameters");
      }
    }
    else
    {
      LOWORD(v46) = 12;
      LOBYTE(v41) = 4;
      v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() called with null raven parameters");
    }
  }
LABEL_13:
  if (*(char *)(a1 + 3839) >= 0)
    LOBYTE(v19) = v3;
  else
    v19 = *(_QWORD *)(a1 + 3816);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, (unsigned __int8 *)&v41, "%s", v4, v5, v6, v7, v8, v19);
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenIonosphereEstimator::IsConfigured(raven::RavenIonosphereEstimator *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t raven::RavenIonosphereEstimator::GetCurrentEstimatorTime(raven::RavenIonosphereEstimator *this)
{
  return *((_QWORD *)this + 4);
}

BOOL raven::RavenIonosphereEstimator::GetEstimatorPredictAndUpdateArguments(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, double a5, int8x16_t a6)
{
  int8x16_t v10;
  uint64_t v11;
  double v12;
  double v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v33;
  __int16 v34;

  v10 = *a3;
  *(int8x16_t *)a4 = *a3;
  v11 = CNTimeSpan::operator-((uint64_t)a3, (_QWORD *)a2, v10, a6);
  v13 = v12 + (double)v11;
  *(double *)(a4 + 16) = v13;
  if (v13 < 0.0)
  {
    v34 = 12;
    v33 = 2;
    v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)a3, "Prediction time is negative,dt,%.2lf,current_estimator_time,%.1lf", v13, *(double *)(a2 + 8) + (double)*(uint64_t *)a2);
    if (*(char *)(a1 + 3839) >= 0)
      LOBYTE(v31) = v25;
    else
      v31 = *(_QWORD *)(a1 + 3816);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "%s", v26, v27, v28, v29, v30, v31);
  }
  else
  {
    v14 = (_OWORD *)(*(_QWORD *)(a1 + 3808) + 2744);
    *(_OWORD *)(a4 + 24) = *v14;
    v15 = v14[1];
    v16 = v14[2];
    v17 = v14[3];
    *(_OWORD *)(a4 + 88) = v14[4];
    *(_OWORD *)(a4 + 72) = v17;
    *(_OWORD *)(a4 + 56) = v16;
    *(_OWORD *)(a4 + 40) = v15;
    v18 = (_OWORD *)(*(_QWORD *)(a1 + 3808) + 2824);
    *(_OWORD *)(a4 + 104) = *v18;
    v19 = v18[1];
    v20 = v18[2];
    v21 = v18[3];
    *(_OWORD *)(a4 + 168) = v18[4];
    *(_OWORD *)(a4 + 152) = v21;
    *(_OWORD *)(a4 + 136) = v20;
    *(_OWORD *)(a4 + 120) = v19;
    v22 = *(_OWORD *)(a1 + 200);
    v23 = *(_OWORD *)(a1 + 216);
    v24 = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a4 + 200) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a4 + 248) = v24;
    *(_OWORD *)(a4 + 232) = v23;
    *(_OWORD *)(a4 + 216) = v22;
    *(_OWORD *)(a4 + 184) = *(_OWORD *)(a1 + 168);
  }
  return v13 >= 0.0;
}

double raven::RavenIonosphereEstimator::GetFailureProbability(raven::RavenIonosphereEstimator *this)
{
  uint64_t v1;

  v1 = 16;
  if (!*((_DWORD *)this + 2046))
    v1 = 8;
  return *(double *)((char *)this + v1 + 8160);
}

uint64_t raven::RavenIonosphereEstimator::HandleEvent(raven::RavenIonosphereEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2, double a3, int8x16_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int8x16_t v16;
  unsigned int v17;
  int v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  double v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  double v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  __int128 v41;
  cnprint::CNPrinter *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  cnprint::CNPrinter *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  char *v101;
  const void **v102;
  int64x2_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  __int16 v108;
  void *v109[2];
  char v110;
  void *v111;
  double v112;
  void *v113;
  char v114;
  __int128 v115;
  void *v116;
  char v117;
  void (**v118)(cnnavigation::GNSSEphemerides *__hidden);
  void *v119;
  char v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE v130[64];
  __int128 v131;
  int64x2_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  int64x2_t v141;
  int64x2_t v142;
  __int128 v143;
  __int128 v144;
  int64x2_t v145;
  void (**v146)(cnnavigation::GNSSEphemerides *__hidden);
  std::string __p;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  void *v162;
  __int128 v163;
  uint64_t v164;
  double *v165;
  uint64_t v166;
  void *v167;
  __int128 v168;
  uint64_t v169;
  double *v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _BYTE v179[64];
  __int128 v180;
  int64x2_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  _BYTE v189[64];
  __int128 v190;
  int64x2_t v191;
  _QWORD v192[2];
  int v193;

  if (*((_BYTE *)this + 8))
  {
    if (*((_BYTE *)this + 9))
    {
      v192[0] = 0;
      v192[1] = 0;
      v193 = 0;
      v6 = (uint64_t *)*((_QWORD *)a2 + 12);
      v5 = (uint64_t *)*((_QWORD *)a2 + 13);
      if (v6 == v5)
        return 0;
      v101 = (char *)this + 8232;
      v102 = (const void **)((char *)this + 3816);
      v104 = vdupq_n_s64(0x7FF8000000000000uLL);
      while (1)
      {
        v7 = *v6;
        if (!*v6)
          goto LABEL_10;
        v8 = *(unsigned __int8 *)(v7 + 24);
        v9 = v8 > 6;
        v10 = (1 << v8) & 0x65;
        if (!v9 && v10 != 0)
          goto LABEL_10;
        v13 = *(_QWORD *)(v7 + 328);
        v12 = *(_QWORD *)(v7 + 336);
        if (v12 == v13)
          goto LABEL_10;
        v14 = 0;
        v15 = 0;
        v182 = 0uLL;
        LOBYTE(v183) = 0;
        *((_QWORD *)&v183 + 1) = 0;
        *(_QWORD *)&v184 = 0;
        BYTE8(v184) = 0;
        v185 = 0uLL;
        LOBYTE(v186) = 0;
        *((_QWORD *)&v186 + 1) = 0;
        *(_QWORD *)&v187 = 0;
        *((_QWORD *)&v187 + 1) = 0x7FF8000000000000;
        LODWORD(v188) = 0;
        BYTE4(v188) = 0;
        *((_QWORD *)&v188 + 1) = 0x7FF8000000000000;
        v16 = (int8x16_t)v104;
        *(int64x2_t *)&v189[8] = v104;
        *(int64x2_t *)&v189[24] = v104;
        *(int64x2_t *)&v189[40] = v104;
        *(_DWORD *)v189 = 2143289344;
        *(_DWORD *)&v189[56] = 2143289344;
        v189[60] = 0;
        LOBYTE(v190) = 0;
        BYTE4(v190) = 0;
        BYTE8(v190) = 0;
        WORD6(v190) = 0;
        BYTE14(v190) = 1;
        v191 = v104;
        v172 = 0uLL;
        LOBYTE(v173) = 0;
        *((_QWORD *)&v173 + 1) = 0;
        *(_QWORD *)&v174 = 0;
        BYTE8(v174) = 0;
        v175 = 0uLL;
        LOBYTE(v176) = 0;
        *((_QWORD *)&v176 + 1) = 0;
        *(_QWORD *)&v177 = 0;
        *((_QWORD *)&v177 + 1) = 0x7FF8000000000000;
        LODWORD(v178) = 0;
        BYTE4(v178) = 0;
        *((_QWORD *)&v178 + 1) = 0x7FF8000000000000;
        *(int64x2_t *)&v179[8] = v104;
        *(int64x2_t *)&v179[24] = v104;
        *(int64x2_t *)&v179[40] = v104;
        *(_DWORD *)v179 = 2143289344;
        *(_DWORD *)&v179[56] = 2143289344;
        v179[60] = 0;
        LOBYTE(v180) = 0;
        BYTE4(v180) = 0;
        BYTE8(v180) = 0;
        WORD6(v180) = 0;
        BYTE14(v180) = 1;
        v181 = v104;
        while (*(_DWORD *)(v13 + 96) != 1)
        {
LABEL_23:
          v13 += 208;
          if (v13 == v12)
            goto LABEL_10;
        }
        v17 = *(unsigned __int8 *)(v13 + 100);
        if (v17 <= 8)
        {
          v18 = 1 << v17;
          if ((v18 & 0xB2) != 0)
          {
            v14 = 1;
            v19 = &v182;
LABEL_20:
            *v19 = *(_OWORD *)v13;
            v20 = *(_OWORD *)(v13 + 16);
            v21 = *(_OWORD *)(v13 + 32);
            v22 = *(_OWORD *)(v13 + 64);
            v19[3] = *(_OWORD *)(v13 + 48);
            v19[4] = v22;
            v19[1] = v20;
            v19[2] = v21;
            v23 = *(_OWORD *)(v13 + 80);
            v24 = *(_OWORD *)(v13 + 96);
            v25 = *(_OWORD *)(v13 + 128);
            v19[7] = *(_OWORD *)(v13 + 112);
            v19[8] = v25;
            v19[5] = v23;
            v19[6] = v24;
            v16 = *(int8x16_t *)(v13 + 144);
            a4 = *(int8x16_t *)(v13 + 160);
            v26 = *(_OWORD *)(v13 + 192);
            v19[11] = *(_OWORD *)(v13 + 176);
            v19[12] = v26;
            v19[9] = (__int128)v16;
            v19[10] = (__int128)a4;
            goto LABEL_21;
          }
          if ((v18 & 0x144) != 0)
          {
            v15 = 1;
            v19 = &v172;
            goto LABEL_20;
          }
        }
LABEL_21:
        if ((v15 & 1) == 0 || (v14 & 1) == 0)
          goto LABEL_23;
        v27 = CNTimeSpan::operator-((uint64_t)&v172, &v182, v16, a4);
        v111 = (void *)v27;
        v112 = v28;
        if (v27 < 0 || (*(double *)v29.i64 = v28, v28 < 0.0))
        {
          v27 = CNTimeSpan::operator-((double *)&v111, v29, v30);
          v29.i64[0] = v31;
        }
        if (fabs(*(double *)v29.i64 + (double)v27) < 2.22044605e-16)
        {
          if (*(double *)(v7 + 264) < *(double *)this * 0.0174532925)
          {
            if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27))
            {
              LOWORD(v121.__r_.__value_.__l.__data_) = 12;
              LOBYTE(v167) = 0;
              v111 = (void *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
              v112 = v32;
              sub_18D181C54(v7);
              v33 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v102, (uint64_t)&v111, "%s,GnssPreprocessedMeasurementsEvent: Sat excluded,low elevation,%.2f deg");
              goto LABEL_33;
            }
            goto LABEL_10;
          }
          v169 = 0x100000001;
          v167 = &unk_1E25C6A40;
          *(_QWORD *)&v41 = 0x100000001;
          *((_QWORD *)&v41 + 1) = 0x100000001;
          v168 = v41;
          v170 = (double *)&v171;
          v164 = 0x100000001;
          v162 = &unk_1E25C6A40;
          v163 = v41;
          v165 = (double *)&v166;
          sub_18D0778AC(&v121, "");
          LOBYTE(v122) = 0;
          HIDWORD(v122) = -1;
          v123 = 0uLL;
          LOBYTE(v124) = 0;
          *((_QWORD *)&v124 + 1) = 0;
          *(_QWORD *)&v125 = 0;
          BYTE8(v125) = 0;
          v126 = 0uLL;
          LOBYTE(v127) = 0;
          *((_QWORD *)&v127 + 1) = 0;
          *(_QWORD *)&v128 = 0;
          *((_QWORD *)&v128 + 1) = 0x7FF8000000000000;
          LODWORD(v129) = 0;
          BYTE4(v129) = 0;
          *((_QWORD *)&v129 + 1) = 0x7FF8000000000000;
          *(int64x2_t *)&v130[8] = v104;
          *(int64x2_t *)&v130[24] = v104;
          *(int64x2_t *)&v130[40] = v104;
          *(_DWORD *)v130 = 2143289344;
          *(_DWORD *)&v130[56] = 2143289344;
          v130[60] = 0;
          LOBYTE(v131) = 0;
          BYTE4(v131) = 0;
          BYTE8(v131) = 0;
          WORD6(v131) = 0;
          BYTE14(v131) = 1;
          v132 = v104;
          v133 = 0uLL;
          LOBYTE(v134) = 0;
          *((_QWORD *)&v134 + 1) = 0;
          *(_QWORD *)&v135 = 0;
          BYTE8(v135) = 0;
          v136 = 0uLL;
          LOBYTE(v137) = 0;
          *((_QWORD *)&v137 + 1) = 0;
          *(_QWORD *)&v138 = 0;
          *((_QWORD *)&v138 + 1) = 0x7FF8000000000000;
          LODWORD(v139) = 0;
          BYTE4(v139) = 0;
          *((_QWORD *)&v139 + 1) = 0x7FF8000000000000;
          LODWORD(v140) = 2143289344;
          v141 = v104;
          v142 = v104;
          *((_QWORD *)&v140 + 1) = 0x7FF8000000000000;
          *(_QWORD *)&v143 = 0x7FF8000000000000;
          DWORD2(v143) = 2143289344;
          BYTE12(v143) = 0;
          LOBYTE(v144) = 0;
          BYTE4(v144) = 0;
          BYTE8(v144) = 0;
          WORD6(v144) = 0;
          BYTE14(v144) = 1;
          v145 = v104;
          v146 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
          v42 = (cnprint::CNPrinter *)sub_18D0778AC(&__p, "");
          LOBYTE(v148) = 0;
          HIDWORD(v148) = -1;
          v149 = 0u;
          v150 = 0u;
          v151 = 0u;
          v152 = 0u;
          v153 = 0u;
          v154 = 0u;
          v155 = 0u;
          v156 = 0u;
          v157 = 0u;
          v158 = 0u;
          v159 = 0u;
          v160 = 0u;
          v161 = 0;
          if ((_DWORD)v188 == (_DWORD)v178)
          {
            if (BYTE4(v188) == BYTE4(v178))
            {
              LOWORD(v111) = 12;
              LOBYTE(v105) = 4;
              cnprint::CNLogFormatter::FormatGeneral(v102, "GetGeometryFreeGNSSObservationArgs, gnss_band_ is identical between the two observables,obs1.gnss_band_,%d,obs2.gnss_band_,%d", BYTE4(v188), BYTE4(v188));
              LOBYTE(v48) = (_BYTE)v102;
              if (*((char *)this + 3839) < 0)
                v48 = *((_QWORD *)this + 477);
              goto LABEL_44;
            }
            v99 = *((_OWORD *)this + 127);
            v57 = *((_QWORD *)this + 256);
            *(_QWORD *)&v58 = 0x100000001;
            *((_QWORD *)&v58 + 1) = 0x100000001;
            v168 = v58;
            v163 = v58;
            *v170 = *(double *)&v179[8]
                  + *(double *)&v179[16]
                  - *(double *)&v179[24]
                  - (*(double *)&v189[8]
                   + *(double *)&v189[16]
                   - *(double *)&v189[24]);
            *v165 = (float)(*(float *)&v179[56] * *(float *)&v179[56])
                  + (float)(*(float *)&v189[56] * *(float *)&v189[56]);
            if (!cnprint::CNPrinter::GetLogLevel(v42))
            {
              LOWORD(v111) = 12;
              LOBYTE(v105) = 0;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, (unsigned __int8 *)&v105, "GetGeometryFreeGNSSObservationArgs,z,%.5lf,R,%.5f", v59, v60, v61, v62, v63, *(_QWORD *)v170);
            }
            v143 = *(_OWORD *)&v179[48];
            v144 = v180;
            v145 = v181;
            v139 = v178;
            v140 = *(_OWORD *)v179;
            v141 = *(int64x2_t *)&v179[16];
            v142 = *(int64x2_t *)&v179[32];
            v135 = v174;
            v136 = v175;
            v137 = v176;
            v138 = v177;
            v133 = v172;
            v134 = v173;
            *(_OWORD *)&v130[48] = *(_OWORD *)&v189[48];
            v131 = v190;
            v132 = v191;
            v129 = v188;
            *(_OWORD *)v130 = *(_OWORD *)v189;
            *(_OWORD *)&v130[16] = *(_OWORD *)&v189[16];
            *(_OWORD *)&v130[32] = *(_OWORD *)&v189[32];
            v125 = v184;
            v126 = v185;
            v127 = v186;
            v128 = v187;
            v123 = v182;
            v124 = v183;
            std::string::operator=(&v121, (const std::string *)v7);
            v122 = *(_QWORD *)(v7 + 24);
            std::string::operator=(&__p, (const std::string *)(v7 + 40));
            v148 = *(_QWORD *)(v7 + 64);
            v64 = *(_OWORD *)(v7 + 72);
            v65 = *(_OWORD *)(v7 + 104);
            v150 = *(_OWORD *)(v7 + 88);
            v151 = v65;
            v149 = v64;
            v66 = *(_OWORD *)(v7 + 120);
            v67 = *(_OWORD *)(v7 + 136);
            v68 = *(_OWORD *)(v7 + 168);
            v154 = *(_OWORD *)(v7 + 152);
            v155 = v68;
            v152 = v66;
            v153 = v67;
            v69 = *(_OWORD *)(v7 + 184);
            v70 = *(_OWORD *)(v7 + 200);
            v71 = *(_OWORD *)(v7 + 232);
            v158 = *(_OWORD *)(v7 + 216);
            v159 = v71;
            v156 = v69;
            v157 = v70;
            v160 = v99;
            v161 = v57;
            sub_18D27F4D4((uint64_t)&v111, (__int128 *)&v121);
            v115 = v182;
            v100 = LOBYTE(v112);
            v72 = (char *)sub_18D181C54(v7);
            sub_18D0778AC(v109, v72);
            sub_18D1A1738((uint64_t)&v111, v100, (__int128 *)v109);
            if (v110 < 0)
              operator delete(v109[0]);
            v73 = (cnprint::CNPrinter *)sub_18D276FBC((uint64_t)v101, (double *)&v182, (uint64_t)&v167, (uint64_t)&v162, (uint64_t)&v111);
            if ((_DWORD)v73)
            {
              v108 = 12;
              v107 = 4;
              v105 = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
              v106 = v74;
              v75 = sub_18D181C54(v7);
              cnprint::CNLogFormatter::FormatGeneral((uint64_t)v102, (uint64_t)&v105, "Could not add measurement - PSR for %s", v75);
              LOBYTE(v81) = (_BYTE)v102;
              if (*((char *)this + 3839) < 0)
                v81 = *((_QWORD *)this + 477);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v108, &v107, "%s", v76, v77, v78, v79, v80, v81);
            }
            else
            {
              if (!cnprint::CNPrinter::GetLogLevel(v73))
              {
                v108 = 12;
                v107 = 0;
                v105 = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
                v106 = v82;
                v83 = sub_18D181C54(v7);
                v84 = "UnknownType";
                if ((v188 - 1) <= 4)
                  v84 = off_1E25CD570[(int)v188 - 1];
                cnprint::CNLogFormatter::FormatGeneral((uint64_t)v102, (uint64_t)&v105, "%s,%s,cno,%.2lf,sigma,%.2lf", v83, v84, *(float *)v189, sqrt(*v165));
                LOBYTE(v90) = (_BYTE)v102;
                if (*((char *)this + 3839) < 0)
                  v90 = *((_QWORD *)this + 477);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v108, &v107, "%s", v85, v86, v87, v88, v89, v90);
              }
              ++*((_DWORD *)v192 + (int)v188);
            }
            v111 = &unk_1E25B8EE0;
            if (v114 < 0)
              operator delete(v113);
            v118 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
            if (v120 < 0)
              operator delete(v119);
            v118 = off_1E25B93B0;
            if (v117 < 0)
              operator delete(v116);
          }
          else
          {
            LOWORD(v111) = 12;
            LOBYTE(v105) = 4;
            cnprint::CNLogFormatter::FormatGeneral(v102, "GetGeometryFreeGNSSObservationArgs, measurement types do not match,obs1.meas_type_,%d,obs2.meas_type_,%d", (_DWORD)v188, (_DWORD)v178);
            LOBYTE(v48) = (_BYTE)v102;
            if (*((char *)this + 3839) < 0)
              v48 = *((_QWORD *)this + 477);
LABEL_44:
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, (unsigned __int8 *)&v105, "%s", v43, v44, v45, v46, v47, v48);
            LOWORD(v105) = 12;
            LOBYTE(v108) = 4;
            v111 = (void *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
            v112 = v49;
            v50 = sub_18D181C54(v7);
            cnprint::CNLogFormatter::FormatGeneral((uint64_t)v102, (uint64_t)&v111, "%s,Type,%d,GetGeometryFreeGNSSObservationArgs() failed", v50, (_DWORD)v188);
            LOBYTE(v56) = (_BYTE)v102;
            if (*((char *)this + 3839) < 0)
              v56 = *((_QWORD *)this + 477);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, (unsigned __int8 *)&v108, "%s", v51, v52, v53, v54, v55, v56);
          }
          v146 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v146 = off_1E25B93B0;
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v121.__r_.__value_.__l.__data_);
          goto LABEL_10;
        }
        LOWORD(v121.__r_.__value_.__l.__data_) = 12;
        LOBYTE(v167) = 4;
        v111 = (void *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
        v112 = v39;
        sub_18D181C54(v7);
        v33 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v102, (uint64_t)&v111, "%s,Type,%d,GnssPreprocessedMeasurementsEvent,timestamp mismatch, cannot form measurement,t1,%.3lf,t2,%.3lf");
LABEL_33:
        if (*((char *)this + 3839) >= 0)
          LOBYTE(v40) = v33;
        else
          v40 = *((_QWORD *)this + 477);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v121, (unsigned __int8 *)&v167, "%s", v34, v35, v36, v37, v38, v40);
LABEL_10:
        v6 += 2;
        if (v6 == v5)
          return 0;
      }
    }
  }
  else
  {
    LOWORD(v111) = 12;
    v121.__r_.__value_.__s.__data_[0] = 2;
    v92 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "GnssPreprocessedMeasurementsEvent received, but estimator is not configured");
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v98) = v92;
    else
      v98 = *((_QWORD *)this + 477);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, (unsigned __int8 *)&v121, "%s", v93, v94, v95, v96, v97, v98);
  }
  return 0xFFFFFFFFLL;
}

void sub_18D276248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,char a48)
{
  sub_18D2773E4((uint64_t)&a48);
  sub_18D277464((uint64_t)&STACK[0x420]);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenIonosphereEstimator::IsInitialized(raven::RavenIonosphereEstimator *this)
{
  return *((unsigned __int8 *)this + 9);
}

uint64_t sub_18D2762C4(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  double v21;
  double v22;
  uint64_t result;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  cnprint::CNPrinter *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  cnprint::CNPrinter *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  cnprint::CNPrinter *LogLevel;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  cnprint::CNPrinter *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  long double v102;
  long double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  double v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __double2 v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double *v154;
  uint64_t v155;
  cnprint::CNPrinter *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  long double __x;
  double __xa;
  long double v185;
  double v186;
  double v187;
  double v188;
  _BYTE v189[24];
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  unsigned __int8 v193;
  int v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  double v203[3];
  double v204[3];
  __int128 v205;
  uint64_t v206;
  __int16 v207;
  __int128 v208;
  __int128 v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  double v214;
  double v215;
  uint64_t v216;
  float64x2_t v217;
  uint64_t v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  if (!lpsrc
    || (v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4A30, 0)) == 0)
  {
    *(_WORD *)v189 = 12;
    LOBYTE(v194) = 4;
    v164 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v194, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v164));
    return 0xFFFFFFFFLL;
  }
  v14 = v13;
  v16 = *(_DWORD *)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15)
    v17 = *(_DWORD *)(a1 + 12);
  else
    v17 = *(_DWORD *)(a1 + 8);
  if (!v16
    || !v15
    || v17 != 10
    || ((v19 = *(_DWORD *)(a2 + 8), v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (v20 = *(_DWORD *)(a2 + 12))
      : (v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    *(_WORD *)v189 = 12;
    LOBYTE(v194) = 4;
    v39 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v194, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v39));
    return 0xFFFFFFFFLL;
  }
  if (!v13[128])
  {
    *(_WORD *)v189 = 12;
    LOBYTE(v194) = 4;
    v47 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v194, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v47));
    *(_WORD *)v189 = 12;
    LOBYTE(v194) = 4;
    v48 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    sub_18D181C54((uint64_t)(v14 + 56));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v194, "t,%.3lf,%s,TAI time invalid", v49, v50, v51, v52, v53, SLOBYTE(v48));
    return 0xFFFFFFFFLL;
  }
  v21 = *((double *)v13 + 24);
  if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v22 = *((double *)v13 + 50), (*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v21 <= 0.0
    || v22 <= 0.0
    || v21 == v22)
  {
    *(_WORD *)v189 = 12;
    LOBYTE(v194) = 4;
    v40 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v194, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v40));
    *(_WORD *)v189 = 12;
    LOBYTE(v194) = 4;
    v41 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v194, "t,%.3lf,obs1,%.31f,obs2,%.31f", v42, v43, v44, v45, v46, SLOBYTE(v41));
    return 0xFFFFFFFFLL;
  }
  v207 = 0;
  v208 = 0u;
  v209 = 0u;
  v210 = 0;
  v212 = 0;
  v211 = 0;
  v213 = 0;
  *(_OWORD *)v189 = *(_OWORD *)(v13 + 136);
  result = sub_18D185D88((uint64_t)(v13 + 504), (double *)v189, (uint64_t)&v207, (double *)&v205, v204, v203);
  if ((_DWORD)result)
    return result;
  v24 = **(_QWORD **)(a1 + 32);
  v194 = 1;
  v195 = v24;
  v196 = 0u;
  v197 = 0u;
  v25 = *((_OWORD *)v14 + 45);
  v198 = 0u;
  v199 = v25;
  v26 = *((_QWORD *)v14 + 92);
  v201 = v205;
  v200 = v26;
  v202 = v206;
  if (cnnavigation::details::IonospherePiercePoint::ComputeIonospherePiercePointCoordinates((cnnavigation::details::IonospherePiercePoint *)&v194))
  {
    sub_18D1C741C((uint64_t)(v14 + 40), (uint64_t)"could not compute expected measurement", (uint64_t)"h_GnssGeometryFreePsr_RavenIonosphere", 1129, v27, v28, v29, v30);
    if (cnprint::CNPrinter::GetLogLevel(v31) <= 1)
    {
      *(_WORD *)v189 = 12;
      LOBYTE(v217.f64[0]) = 1;
      v32 = *((_QWORD *)v14 + 11);
      v33 = *((double *)v14 + 12);
      sub_18D181C54((uint64_t)(v14 + 56));
      v163 = v33 + (double)v32;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v217, "t,%.3lf,%s,h_GnssGeometryFreePsr_RavenIonosphere returned != 0", v34, v35, v36, v37, v38, SLOBYTE(v163));
    }
    return 0xFFFFFFFFLL;
  }
  v217 = *((float64x2_t *)v14 + 45);
  v218 = *((_QWORD *)v14 + 92);
  v214 = 0.0;
  v215 = 0.0;
  v216 = 0;
  v54 = (cnprint::CNPrinter *)cnnavigation::ECEFToLLA(&v217, 1, &v214, 0, (uint64_t)v189);
  if ((_DWORD)v54)
  {
    *(_WORD *)v189 = 12;
    v193 = 4;
    v165 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere, conversion of current position from ECEF to LLA failed", v55, v56, v57, v58, v59, SLOBYTE(v165));
    return 0xFFFFFFFFLL;
  }
  v61 = *((double *)&v197 + 1);
  v60 = *(double *)&v198;
  v63 = v214;
  v62 = v215;
  LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v54);
  if (!(_DWORD)LogLevel)
  {
    *(_WORD *)v189 = 12;
    v193 = 0;
    v70 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,ipp,thin_shell_height_km_,%.5lf,sv_zenith_angle_at_rx_rad_,%.5lf,sv_zenith_angle_at_ipp_rad_,%.5lf,sv_azimuth_at_rx_rad_,%.5lf,latitude_ipp_rad_,%.5lf,longitude_ipp_rad_,%.5lf,receiver_radius_km_,%.5lf,rx_lat,%.5lf,rx_lon,%.5lf", v65, v66, v67, v68, v69, SLOBYTE(v70));
  }
  v71 = v60 - v62;
  if (v71 > 3.14159265 || v71 < -3.14159265)
  {
    v71 = fmod(v71, 6.28318531);
    if (v71 <= 3.14159265)
    {
      if (v71 < -3.14159265)
        v71 = v71 + 6.28318531;
    }
    else
    {
      v71 = v71 + -6.28318531;
    }
  }
  if (*((double *)&v196 + 1) >= 1.57079633 || *((double *)&v196 + 1) < 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
    {
      *(_WORD *)v189 = 12;
      v193 = 1;
      v167 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,WARNING: h_GnssGeometryFreePsr_RavenIonosphere,sv_zenith_angle_at_ipp_rad is invalid. Cannot proceed.", v85, v86, v87, v88, v89, SLOBYTE(v167));
    }
    return 0xFFFFFFFFLL;
  }
  v188 = v63;
  v72 = *(double **)(a1 + 32);
  v74 = v72[1];
  v73 = v72[2];
  v76 = v72[3];
  v75 = v72[4];
  v77 = v72[5];
  v186 = v72[6];
  v84 = cos(*((long double *)&v196 + 1));
  switch(v14[80])
  {
    case 0:
    case 2:
    case 5:
    case 6:
      *(_WORD *)v189 = 12;
      v193 = 4;
      v166 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere, unexpected constellation", v79, v80, v81, v82, v83, SLOBYTE(v166));
      return 0xFFFFFFFFLL;
    case 1:
      v90 = 7;
      break;
    case 3:
      v90 = 8;
      break;
    case 4:
      v90 = 9;
      break;
    default:
      v90 = 0;
      break;
  }
  v91 = v74 + v73 * (v61 - v188) + v76 * v71 + (v61 - v188) * (v75 * 0.5) * (v61 - v188);
  v92 = v61 - v188;
  v93 = v91 + (v61 - v188) * v77 * v71 + v71 * (v186 * 0.5) * v71;
  v94 = (*((double *)v14 + 24) * *((double *)v14 + 24) - *((double *)v14 + 50) * *((double *)v14 + 50))
      * (4.0308193e17
       / (*((double *)v14 + 50)
        * (*((double *)v14 + 24)
         * *((double *)v14 + 24)
         * *((double *)v14 + 50))));
  v95 = v72[v90] * -0.299792458 + v94 * (1.0 / v84 * v93);
  *(_QWORD *)&v96 = 0x100000001;
  *((_QWORD *)&v96 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v96;
  **(double **)(a4 + 32) = v95 + **(double **)(a2 + 32);
  if (!cnprint::CNPrinter::GetLogLevel(v78))
  {
    *(_WORD *)v189 = 12;
    v193 = 0;
    v168 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,z,%.5lf", v97, v98, v99, v100, v101, SLOBYTE(v168));
  }
  if (*((double *)&v196 + 1) >= 1.57079633)
    goto LABEL_66;
  v181 = *((double *)v14 + 91);
  v182 = *((double *)v14 + 90);
  v180 = *((double *)v14 + 92);
  v102 = *((double *)&v197 + 1);
  __x = *(double *)&v197;
  v185 = *((double *)&v196 + 1);
  v103 = *(double *)&v196;
  v187 = sin(*((long double *)&v196 + 1));
  v109 = *(double **)(a1 + 32);
  v110 = *v109 + 6371.009;
  if (fabs(v110) < 2.22044605e-16)
  {
    *(_WORD *)v189 = 12;
    v193 = 4;
    v169 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,Rekm_plus_x_hmax==0,cannot proceed", v104, v105, v106, v107, v108, SLOBYTE(v169));
    return 0xFFFFFFFFLL;
  }
  v111 = 1.0 - v187 * v187;
  v179 = sin(v103);
  v178 = pow(v111, -1.5);
  if (fabs(v111) < 2.22044605e-16)
  {
    *(_WORD *)v189 = 12;
    v193 = 4;
    v170 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,alpha==1.0,cannot proceed", v112, v113, v114, v115, v116, SLOBYTE(v170));
    return 0xFFFFFFFFLL;
  }
  v117 = v103 - v185;
  v176 = sin(v102);
  v177 = cos(v117);
  if (fabs(v176 * v176 + -1.0) < 2.22044605e-16)
  {
    *(_WORD *)v189 = 12;
    v193 = 2;
    v171 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "Warning: t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,beta==1.0,IPP is at one of the poles,cannot proceed", v118, v119, v120, v121, v122, SLOBYTE(v171));
    return 0xFFFFFFFFLL;
  }
  v175 = cos(__x);
  v123 = __sincos_stret(v188);
  v124 = sin(v117);
  v130 = cos(v102);
  if (fabs(v130) < 2.22044605e-16)
  {
    *(_WORD *)v189 = 12;
    v193 = 2;
    v172 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "Warning: t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,cos_theta_pp==0.0,IPP is at one of the poles,cannot proceed", v125, v126, v127, v128, v129, SLOBYTE(v172));
    return 0xFFFFFFFFLL;
  }
  __xa = sin(__x);
  v136 = sin(v71);
  if (fabs(v136 * v136 + -1.0) < 2.22044605e-16)
  {
    *(_WORD *)v189 = 12;
    v193 = 2;
    v173 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,gamma==1.0,cannot proceed", v131, v132, v133, v134, v135, SLOBYTE(v173));
    return 0xFFFFFFFFLL;
  }
  v137 = cos(v185);
  if (fabs(v137) < 2.22044605e-16)
  {
LABEL_66:
    *(_WORD *)v189 = 12;
    v193 = 4;
    v174 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,zenith angle at IPP is too large,cannot proceed", v97, v98, v99, v100, v101, SLOBYTE(v174));
    return 0xFFFFFFFFLL;
  }
  v138 = v179
       * (-sqrt(v181 * 0.001 * (v181 * 0.001) + v182 * 0.001 * (v182 * 0.001) + v180 * 0.001 * (v180 * 0.001))
        / (v110
         * v110));
  v139 = v178 * -0.5 * (v187 * -2.0 * v138);
  v140 = -1.0 / sqrt(1.0 - v187 * v187) * v138;
  v141 = 1.0 / sqrt(1.0 - v176 * v176) * (v175 * (v123.__cosval * v177) * v140 + -(v124 * v123.__sinval) * v140);
  v142 = 1.0 / sqrt(1.0 - v136 * v136) * (__xa * -v124 / (v130 * v130) * -v176 * v141 + __xa * v177 / v130 * v140);
  v143 = v92;
  v144 = 1.0 / v137;
  v145 = v94
       * (v144
        * (v142 * v109[3]
         + v109[2] * v141
         + v109[4] * 0.5 * ((v92 + v92) * v141)
         + v141 * v109[5] * v71
         + v92 * v109[5] * v142
         + v109[6] * 0.5 * ((v71 + v71) * v142))
        + v139 * v93);
  v146 = v94 * v144;
  v147 = v92 * v144;
  v148 = v94 * (v92 * v144);
  v149 = v94 * (v71 * v144);
  v150 = v144 * 0.5;
  v151 = v94 * (v143 * (v143 * v150));
  v152 = v94 * (v71 * v147);
  v153 = v94 * (v71 * (v71 * v150));
  v190 = 0xA00000001;
  *(_QWORD *)v189 = &off_1E25C67A0;
  v191 = &v192;
  *(_OWORD *)&v189[8] = xmmword_18D3364C0;
  sub_18D04BE88((uint64_t)v189, 0.0);
  sub_18D053AA8(a5, (uint64_t)v189);
  v154 = *(double **)(a5 + 32);
  *v154 = v145;
  v155 = *(int *)(a5 + 20);
  v154[v155] = v146;
  v154[2 * v155] = v148;
  v154[3 * (int)v155] = v149;
  v154[4 * v155] = v151;
  v154[5 * (int)v155] = v152;
  v154[6 * (int)v155] = v153;
  v154[(int)(v155 * v90)] = -0.299792458;
  if (!cnprint::CNPrinter::GetLogLevel(v156))
  {
    *(_WORD *)v189 = 12;
    v193 = 0;
    v162 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v193, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,J0,%.5lf,J1,%.5lf,J2,%.5lf,J3,%.5lf,J4,%.10lf,J5,%.5lf,J6,%.5lf,J7,%.5lf,J8,%.5lf,J9,%.5lf", v157, v158, v159, v160, v161, SLOBYTE(v162));
  }
  sub_18D1CC610(1u, 1u, (uint64_t)v189);
  sub_18D053AA8(a6, (uint64_t)v189);
  return 0;
}

uint64_t sub_18D276FBC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  cnprint::CNPrinter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  __n128 v44;
  uint64_t (*v45)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128);
  uint64_t result;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 v65;
  void (*v66[5])(uint64_t);

  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v62 = 0x100000001;
  v57 = &unk_1E25C6A40;
  v63 = &v64;
  v58 = v5;
  v59 = 1;
  v60 = v5;
  v61 = v5;
  v11 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v57, 0.0);
  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 3184) == 88)
  {
    LOWORD(v66[0]) = 2;
    v65 = 2;
    v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  v27 = sub_18D03FE4C(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      v65 = 1;
      v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18D27FAF4((void (**)(int))v66, a5);
  v33 = sub_18D1C7B34((uint64_t *)(a1 + 40), v66);
  sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v66);
  v34 = *(int *)(a1 + 3184);
  v35 = (v34 + 1);
  if (*(_QWORD *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    v65 = 4;
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 3184) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 1520) = v35;
  *(_DWORD *)(a1 + 1524) = 1;
  *(_DWORD *)(a1 + 1528) = v35;
  *(_DWORD *)(a1 + 1532) = v35;
  *(_DWORD *)(a1 + 1912) = v35;
  *(_DWORD *)(a1 + 1916) = 1;
  *(_DWORD *)(a1 + 1920) = v35;
  *(_DWORD *)(a1 + 1924) = v35;
  *(_DWORD *)(a1 + 2656) = v35;
  *(_DWORD *)(a1 + 2660) = 1;
  *(_DWORD *)(a1 + 2664) = v35;
  *(_DWORD *)(a1 + 2668) = v35;
  *(_DWORD *)(a1 + 2704) = v35;
  *(_DWORD *)(a1 + 2708) = 1;
  *(_DWORD *)(a1 + 2712) = v35;
  *(_DWORD *)(a1 + 2716) = v35;
  *(_DWORD *)(a1 + 3096) = v35;
  *(_DWORD *)(a1 + 3100) = 1;
  *(_DWORD *)(a1 + 3104) = v35;
  *(_DWORD *)(a1 + 3108) = v35;
  *(_DWORD *)(a1 + 3144) = v35;
  *(_DWORD *)(a1 + 3148) = 1;
  *(_DWORD *)(a1 + 3152) = v35;
  *(_DWORD *)(a1 + 3156) = v35;
  *(_DWORD *)(a1 + 3200) = v35;
  *(_DWORD *)(a1 + 3204) = 1;
  *(_DWORD *)(a1 + 3208) = v35;
  *(_DWORD *)(a1 + 3212) = v35;
  *(_DWORD *)(a1 + 3944) = v35;
  *(_DWORD *)(a1 + 3948) = 1;
  *(_DWORD *)(a1 + 3952) = v35;
  *(_DWORD *)(a1 + 3956) = v35;
  *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a3 + 8);
  v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37)
    v38 = *(_DWORD *)(a3 + 12);
  else
    v38 = *(_DWORD *)(a3 + 8);
  if (v37)
    v39 = v36 == 0;
  else
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 1544) + 4 * v34) = v40;
  sub_18D053AA8(*(_QWORD *)(a1 + 2680) + 48 * v34, a3);
  if (v58 <= v59)
    v41 = v59;
  else
    v41 = v58;
  if (v59)
    v42 = v58 == 0;
  else
    v42 = 1;
  if (v42)
    v43 = 0;
  else
    v43 = v41;
  *(_DWORD *)(*(_QWORD *)(a1 + 2728) + 4 * v34) = v43;
  sub_18D053AA8(*(_QWORD *)(a1 + 3120) + 48 * v34, (uint64_t)&v57);
  v44 = sub_18D053AA8(*(_QWORD *)(a1 + 3168) + 48 * v34, a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 3224) + 8 * v34) = sub_18D2762C4;
  v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))*v33;
  if (*v33)
    v45 = (uint64_t (*)(uint64_t, _QWORD *, _QWORD, void *, void *, __n128))v45(3, v33, 0, &unk_1E25B4A30, &std::__any_imp::__unique_typeinfo<raven::h_GnssGeometryFreePsrArgs_RavenIonosphere>::__id, v44);
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 3968) + 8 * v34) = v45;
  return result;
}

void sub_18D2773B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_18D076A08(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2773E4(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 504) = &unk_1E25B9850;
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  *(_QWORD *)(a1 + 504) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

uint64_t sub_18D277464(uint64_t a1)
{
  *(_QWORD *)(a1 + 448) = &unk_1E25B9850;
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 448) = off_1E25B93B0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t raven::RavenIonosphereEstimator::HandleEvent(const void **this, const raven::KlobucharParametersEvent *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  unsigned __int8 v19;
  __int16 v20;
  unsigned __int8 v21;
  __int16 v22;

  if (*((_BYTE *)this + 8))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this) <= 1)
    {
      v20 = 12;
      v19 = 1;
      v4 = cnprint::CNLogFormatter::FormatGeneral(this + 477, "KlobucharParametersEvent received");
      if (*((char *)this + 3839) >= 0)
        LOBYTE(v10) = v4;
      else
        v10 = this[477];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v5, v6, v7, v8, v9, (char)v10);
    }
    sub_18D2775A8((uint64_t)(this + 31), (uint64_t)a2);
    return 0;
  }
  else
  {
    v22 = 12;
    v21 = 2;
    v12 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(this + 477), "KlobucharParametersEvent received, but estimator is not configured");
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v18) = v12;
    else
      v18 = this[477];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "%s", v13, v14, v15, v16, v17, (char)v18);
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18D2775A8(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*(_BYTE *)(a1 + 200))
  {
    v3 = *(_OWORD *)(a2 + 8);
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(_OWORD *)(a1 + 8) = v3;
    v5 = *(_OWORD *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 72);
    v7 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 72) = v6;
    *(_OWORD *)(a1 + 56) = v5;
    cnnavigation::KlobucharModelParameters::operator=(a1 + 120, a2 + 120);
  }
  else
  {
    *(_QWORD *)a1 = &off_1E25C30B0;
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 8) = v8;
    v10 = *(_OWORD *)(a2 + 56);
    v11 = *(_OWORD *)(a2 + 72);
    v12 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v12;
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 120) = &off_1E25B99F8;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = 1;
  }
  return a1;
}

uint64_t raven::RavenIonosphereEstimator::UpdateEstimatorParametersViaPolyfitToKlobucharModel(raven::RavenIonosphereEstimator *this)
{
  char *v2;
  cnprint::CNPrinter *v3;
  double v4;
  double v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v24;
  unsigned __int8 v25;
  int v26;
  int v27;
  int v28;
  double v29;
  double v30;
  double *v31;
  double *v32;
  double *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  double *v39;
  double *v40;
  uint64_t v41;
  cnprint::CNPrinter *IonosphericDelay;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  double *v51;
  double *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  double *v58;
  uint64_t v59;
  BOOL v60;
  cnprint::CNPrinter *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned __int8 v90;
  double v91;
  void *v92;
  double *v93;
  double *v94;
  void *__p;
  double *v96;
  double *v97;
  _QWORD v98[2];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103;
  __int128 v104;
  double *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  float64x2_t v112;
  double v113[3];
  double v114[3];
  double v115[3];
  float64x2_t v116;
  uint64_t v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 2024) || !*((_BYTE *)this + 448) || !*((_BYTE *)this + 440))
    return 0xFFFFFFFFLL;
  v104 = 0uLL;
  if (*((_BYTE *)this + 632))
  {
    v2 = (char *)this + 640;
  }
  else
  {
    if (!*((_BYTE *)this + 608))
      goto LABEL_9;
    v2 = (char *)this + 616;
  }
  v104 = *(_OWORD *)v2;
LABEL_9:
  LOWORD(v105) = 0;
  v106 = 0u;
  v107 = 0u;
  LODWORD(v108) = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v3 = (cnprint::CNPrinter *)cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)&v104, (const cnnavigation::GNSSUTCParameters *)&v105);
  v5 = v4;
  if (!cnprint::CNPrinter::GetLogLevel(v3))
  {
    LOWORD(v105) = 12;
    LOBYTE(v98[0]) = 0;
    v6 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),gps_week, gps_secofweek,%d,%.3lf", (_DWORD)v3, v5);
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v12) = (_BYTE)v6;
    else
      v12 = *v6;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, (unsigned __int8 *)v98, "%s", v7, v8, v9, v10, v11, v12);
  }
  v98[0] = &off_1E25B99C0;
  v98[1] = &off_1E25B99F8;
  v13 = *(_OWORD *)((char *)this + 392);
  v99 = *(_OWORD *)((char *)this + 376);
  v100 = v13;
  v14 = *(_OWORD *)((char *)this + 424);
  v101 = *(_OWORD *)((char *)this + 408);
  v102 = v14;
  v103 = *((_BYTE *)this + 440);
  v116 = *((float64x2_t *)this + 127);
  v117 = *((_QWORD *)this + 256);
  if (cnnavigation::ECEFToLLA(&v116, 1, v115, 0, (uint64_t)&v105))
  {
    LOWORD(v105) = 12;
    LOBYTE(__p) = 4;
    v15 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),conversion of receiver position from ECEF to LLA failed");
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v21) = (_BYTE)v15;
    else
      v21 = *v15;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, (unsigned __int8 *)&__p, "%s", v16, v17, v18, v19, v20, v21);
    return 0xFFFFFFFFLL;
  }
  __p = 0;
  v96 = 0;
  v97 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v24 = atomic_load((unsigned __int8 *)&qword_1ECF24208);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24208))
  {
    dword_1ECF24200 = 7;
    __cxa_guard_release(&qword_1ECF24208);
  }
  v25 = atomic_load((unsigned __int8 *)&qword_1ECF24210);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24210))
  {
    v89 = dword_1ECF24200;
    if (dword_1ECF24200 >= 1)
      v89 = dword_1ECF24200 - 1;
    dword_1ECF24204 = v89 >> 1;
    __cxa_guard_release(&qword_1ECF24210);
  }
  v26 = dword_1ECF24204;
  if (dword_1ECF24204 < 0)
  {
LABEL_69:
    sub_18D23A458(&v105, 6uLL);
    raven::RavenIonosphereEstimator::FitAnchorPointsToPoly();
    if (cnprint::CNPrinter::GetLogLevel(v61) <= 1)
    {
      LOWORD(v114[0]) = 12;
      LOBYTE(v113[0]) = 1;
      v62 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator,poly[0],%.3lf,poly[1],%.3lf,poly[2],%.3lf,poly[3],%.3lf,poly[4],%.3lf,poly[5],%.3lf", *v105, v105[1], v105[2], v105[3], v105[4], v105[5]);
      if (*((char *)this + 3839) >= 0)
        LOBYTE(v68) = v62;
      else
        v68 = *((_QWORD *)this + 477);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v114, (unsigned __int8 *)v113, "%s", v63, v64, v65, v66, v67, v68);
    }
    v69 = v105;
    *((double *)this + 12) = *v105;
    *((double *)this + 13) = v69[1];
    *((double *)this + 14) = v69[2];
    *((double *)this + 15) = v69[3];
    *((double *)this + 16) = v69[4];
    *((double *)this + 17) = v69[5];
    *((double *)this + 22) = *v69;
    *((double *)this + 23) = v69[1];
    *((double *)this + 24) = v69[2];
    *((double *)this + 25) = v69[3];
    *((double *)this + 26) = v69[4];
    *((double *)this + 27) = v69[5];
    v70 = *((unsigned __int8 *)this + 80);
    *((_OWORD *)this + 4) = *((_OWORD *)this + 29);
    if (!v70)
      *((_BYTE *)this + 80) = 1;
    *(_QWORD *)&v106 = v69;
    operator delete(v69);
    v22 = 0;
  }
  else
  {
    v27 = -dword_1ECF24204;
    while (v26 < 0)
    {
LABEL_68:
      v60 = v27++ < v26;
      if (!v60)
        goto LABEL_69;
    }
    v28 = -v26;
    while (1)
    {
      v29 = (double)v27 * 0.261799388 / (double)v26;
      v30 = (double)v28 * 0.261799388 / (double)v26;
      v114[0] = v29 + v115[0];
      v114[1] = v30 + v115[1];
      v114[2] = v115[2];
      v31 = v96;
      if (v96 >= v97)
      {
        v33 = (double *)__p;
        v34 = ((char *)v96 - (_BYTE *)__p) >> 4;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60)
          sub_18D07AFE4();
        v36 = (char *)v97 - (_BYTE *)__p;
        if (((char *)v97 - (_BYTE *)__p) >> 3 > v35)
          v35 = v36 >> 3;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
          v37 = 0xFFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)sub_18D16735C((uint64_t)&v97, v37);
          v33 = (double *)__p;
          v31 = v96;
        }
        else
        {
          v38 = 0;
        }
        v39 = (double *)&v38[16 * v34];
        *v39 = v29;
        v39[1] = v30;
        v40 = v39;
        if (v31 != v33)
        {
          do
          {
            *((_OWORD *)v40 - 1) = *((_OWORD *)v31 - 1);
            v40 -= 2;
            v31 -= 2;
          }
          while (v31 != v33);
          v33 = (double *)__p;
        }
        v32 = v39 + 2;
        __p = v40;
        v96 = v39 + 2;
        v97 = (double *)&v38[16 * v37];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v96 = v29;
        v31[1] = v30;
        v32 = v31 + 2;
      }
      v96 = v32;
      if (cnnavigation::LLAToECEF(v114, 1, v113, 0, (uint64_t)&v105))
      {
        LOWORD(v105) = 12;
        LOBYTE(v112.f64[0]) = 4;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),LLAToECEF failed");
        if (*((char *)this + 3839) >= 0)
          LOBYTE(v76) = (_BYTE)this - 24;
        else
          v76 = *((_QWORD *)this + 477);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, (unsigned __int8 *)&v112, "%s", v71, v72, v73, v74, v75, v76);
        goto LABEL_90;
      }
      LOBYTE(v106) = 0;
      v108 = 0x300000003;
      *((_QWORD *)&v106 + 1) = &unk_1E25C78E0;
      v107 = xmmword_18D30BB60;
      v109 = &v110;
      v105 = (double *)&off_1E25B9588;
      if (cnnavigation::ENUToECEF(xmmword_18D336670, 1, 0, (uint64_t)v113, 0, &v112, (uint64_t)&v105))
      {
        LOWORD(v105) = 12;
        LOBYTE(v91) = 4;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),ENUToECEF failed");
        if (*((char *)this + 3839) >= 0)
          LOBYTE(v82) = (_BYTE)this - 24;
        else
          v82 = *((_QWORD *)this + 477);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, (unsigned __int8 *)&v91, "%s", v77, v78, v79, v80, v81, v82);
        goto LABEL_90;
      }
      v91 = 0.0;
      IonosphericDelay = (cnprint::CNPrinter *)cnnavigation::KlobucharIonosphereModel::GetIonosphericDelay((uint64_t)v98, v5, 1575420000.0, v41, (uint64_t)v113, (uint64_t)&v112, &v91, 0, (uint64_t)&v105);
      if ((_DWORD)IonosphericDelay)
        break;
      v43 = v91 * 1845950630.0;
      if (cnprint::CNPrinter::GetLogLevel(IonosphericDelay) <= 1)
      {
        LOWORD(v105) = 12;
        v90 = 1;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator, delta_lat_rad,%.3lf,delta_on_rad,%.3lf,vtec_tecu_anchor,%.3lf", v29, v30, v43);
        if (*((char *)this + 3839) >= 0)
          LOBYTE(v49) = (_BYTE)this - 24;
        else
          v49 = *((_QWORD *)this + 477);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, &v90, "%s", v44, v45, v46, v47, v48, v49);
      }
      v50 = v93;
      if (v93 >= v94)
      {
        v52 = (double *)v92;
        v53 = ((char *)v93 - (_BYTE *)v92) >> 3;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
          sub_18D07AFE4();
        v55 = (char *)v94 - (_BYTE *)v92;
        if (((char *)v94 - (_BYTE *)v92) >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          v57 = (char *)sub_18D0788C8((uint64_t)&v94, v56);
          v52 = (double *)v92;
          v50 = v93;
        }
        else
        {
          v57 = 0;
        }
        v58 = (double *)&v57[8 * v53];
        *v58 = v43;
        v51 = v58 + 1;
        while (v50 != v52)
        {
          v59 = *((_QWORD *)v50-- - 1);
          *((_QWORD *)v58-- - 1) = v59;
        }
        v92 = v58;
        v93 = v51;
        v94 = (double *)&v57[8 * v56];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *v93 = v43;
        v51 = v50 + 1;
      }
      v93 = v51;
      v26 = dword_1ECF24204;
      v60 = v28++ < dword_1ECF24204;
      if (!v60)
        goto LABEL_68;
    }
    LOWORD(v105) = 12;
    v90 = 4;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),GetIonosphericDelay failed");
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v88) = (_BYTE)this - 24;
    else
      v88 = *((_QWORD *)this + 477);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, &v90, "%s", v83, v84, v85, v86, v87, v88);
    if (*((_BYTE *)this + 448))
    {
      *((_QWORD *)this + 31) = &off_1E25C30B0;
      *((_BYTE *)this + 448) = 0;
    }
LABEL_90:
    v22 = 0xFFFFFFFFLL;
  }
  if (v92)
  {
    v93 = (double *)v92;
    operator delete(v92);
  }
  if (__p)
  {
    v96 = (double *)__p;
    operator delete(__p);
  }
  return v22;
}

void sub_18D277ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void raven::RavenIonosphereEstimator::FitAnchorPointsToPoly()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double *v16;
  double v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  int v24;
  int v25;
  int i;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE v34[48];
  void *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (**v45)();
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD v52[294];
  uint64_t (**v53)();
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE v73[192];

  MEMORY[0x1E0C80A78]();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = (unint64_t)(v2[1] - *v2) >> 3;
  v66 = 0x100000031;
  v61 = &unk_1E25C7C70;
  v67 = &v68;
  v62 = v6;
  v63 = 1;
  v64 = v6;
  v65 = v6;
  sub_18D04BE88((uint64_t)&v61, 0.0);
  v58 = 0x600000031;
  v53 = &off_1E25C7D00;
  v59 = &v60;
  v54 = v6;
  v55 = 6;
  v56 = 6 * v6;
  v57 = v6;
  sub_18D04BE88((uint64_t)&v53, 0.0);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *v3;
    v9 = v67;
    v10 = v59;
    v11 = v57;
    v12 = 2 * v57;
    v13 = 3 * v57;
    v14 = 4 * v57;
    v15 = 5 * v57;
    v16 = (double *)(*v5 + 8);
    do
    {
      v9[(int)v7] = *(_QWORD *)(v8 + 8 * v7);
      v10[(int)v7] = 0x3FF0000000000000;
      v10[v11 + (int)v7] = *((_QWORD *)v16 - 1);
      v10[v12 + (int)v7] = *(_QWORD *)v16;
      *(double *)&v10[v13 + (int)v7] = *(v16 - 1) * *(v16 - 1);
      *(double *)&v10[v14 + (int)v7] = *(v16 - 1) * 0.5 * *v16;
      v17 = *v16;
      v16 += 2;
      *(double *)&v10[v15 + (int)v7++] = v17 * v17;
    }
    while ((_DWORD)v6 != (_DWORD)v7);
  }
  v18 = v55;
  v19 = v54;
  v50 = 0x3100000006;
  v45 = &off_1E25C8180;
  v51 = v52;
  v46 = v55;
  v47 = v54;
  v48 = v54 * v55;
  v49 = v55;
  if (v55)
  {
    v20 = 0;
    v21 = 0;
    v22 = v57;
    v23 = v59;
    do
    {
      v24 = v20;
      v25 = v21;
      for (i = v19; i; --i)
      {
        v52[v25] = v23[v24];
        v25 += v18;
        ++v24;
      }
      ++v21;
      v20 += v22;
    }
    while (v21 != v18);
  }
  v37 = 0x600000006;
  v35 = &unk_1E25C81B0;
  v36 = xmmword_18D314680;
  v38 = &v39;
  sub_18D053B2C((uint64_t)&v45, (uint64_t)&v53, (uint64_t)&v35);
  v42 = 0x600000006;
  v40 = &unk_1E25C81B0;
  v41 = xmmword_18D314680;
  v43 = &v44;
  v32 = 0x100000006;
  v30 = &unk_1E25C8150;
  v31 = xmmword_18D319950;
  v33 = v34;
  v71 = 0x100000018;
  v69 = &unk_1E25C7010;
  v70 = xmmword_18D319B80;
  v72 = v73;
  sub_18D04F504((uint64_t)&v35, (uint64_t)&v30, (uint64_t)&v69, (uint64_t)&v40);
  v32 = 0x100000006;
  v30 = &unk_1E25C8120;
  v31 = xmmword_18D319950;
  v33 = v34;
  sub_18D053B2C((uint64_t)&v45, (uint64_t)&v61, (uint64_t)&v30);
  v71 = 0x100000006;
  v69 = &unk_1E25C8120;
  v70 = xmmword_18D319950;
  v72 = v73;
  sub_18D053B2C((uint64_t)&v40, (uint64_t)&v30, (uint64_t)&v69);
  v1[1] = *v1;
  sub_18D213F2C((uint64_t)v1, 6uLL);
  v27 = 0;
  v28 = v72;
  v29 = *v1;
  do
  {
    *(_QWORD *)(v29 + v27) = *(_QWORD *)&v28[v27];
    v27 += 8;
  }
  while (v27 != 48);
}

uint64_t raven::RavenIonosphereEstimator::Initialize(__n128 *a1, __n128 *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int32x4_t v18;
  uint64_t result;
  uint64_t v20;
  int32x4_t v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _WORD v27[420];
  void *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t v34;

  if (!a1->n128_u8[8])
    return 0xFFFFFFFFLL;
  if (a1->n128_u8[9])
  {
    v27[0] = 12;
    LOBYTE(v33) = 4;
    v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&a1[238].n128_i64[1], (uint64_t)&a1[2], "Attempting to initialize an already initialized estimator");
    if (a1[239].n128_i8[15] >= 0)
      LOBYTE(v10) = v4;
    else
      v10 = a1[238].n128_u64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v27, (unsigned __int8 *)&v33, "%s", v5, v6, v7, v8, v9, v10);
  }
  a1[1] = *a2;
  a1[2] = *a2;
  a1[3] = *a2;
  sub_18D04AEC4((uint64_t)&a1[514].n128_i64[1]);
  sub_18D05DB3C((uint64_t)&a1[514].n128_i64[1], a2, v11, v12, v13, v14, v15, v16);
  bzero(&a1[187], 0x330uLL);
  v30 = 0x10000000ALL;
  v28 = &unk_1E25C6020;
  v31 = &v32;
  v29 = xmmword_18D31CEF0;
  sub_18D04BE88((uint64_t)&v28, 0.0);
  v17 = v31;
  *v31 = a2[1].n128_i64[0];
  v17[1] = a2[1].n128_i64[1];
  v17[2] = a2[2].n128_i64[0];
  v17[3] = a2[2].n128_i64[1];
  v17[4] = a2[3].n128_i64[0];
  v17[5] = a2[4].n128_i64[0];
  v17[6] = a2[3].n128_i64[1];
  v17[7] = a2[4].n128_i64[1];
  v17[8] = a2[5].n128_i64[0];
  v17[9] = a2[5].n128_i64[1];
  sub_18D27FD68((uint64_t)v27, (uint64_t)&a2[6]);
  v24 = 0x10000000ALL;
  v22 = &unk_1E25C6020;
  v23 = xmmword_18D31CEF0;
  v25 = &v26;
  sub_18D053B2C((uint64_t)v27, (uint64_t)&v28, (uint64_t)&v22);
  v20 = DWORD2(v29) | 0x100000000;
  sub_18D064F78((uint64_t)&v33, (uint64_t)&v28);
  v18 = vdupq_lane_s32((int32x2_t)v20, 0);
  v18.i32[1] = 1;
  v21 = v18;
  v34 = v18;
  sub_18D053AA8((uint64_t)&a1[242], (uint64_t)&v33);
  sub_18D053AA8((uint64_t)&a1[249].n128_i64[1], (uint64_t)v27);
  sub_18D064F78((uint64_t)&v33, (uint64_t)&v22);
  v34 = v21;
  sub_18D053AA8((uint64_t)&a1[302], (uint64_t)&v33);
  sub_18D053AA8((uint64_t)&a1[309].n128_i64[1], (uint64_t)&a1[242]);
  sub_18D053AA8((uint64_t)&a1[317], (uint64_t)&a1[249].n128_i64[1]);
  sub_18D053AA8((uint64_t)&a1[369].n128_i64[1], (uint64_t)&a1[302]);
  a1[377].n128_u8[8] = 0;
  a1[377].n128_u64[0] = 0x3FF0000000000000;
  a1[377].n128_u32[3] = 1;
  v33 = 0x3FE0000000000000;
  result = sub_18D04AD78((uint64_t)&a1[510].n128_i64[1], (double *)&v33);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  a1->n128_u8[9] = 1;
  return result;
}

double raven::RavenIonosphereEstimator::ResetMeasurementCounts(raven::RavenIonosphereEstimator *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 3396) = 0u;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *(_OWORD *)((char *)this + 3336) = 0u;
  *(_OWORD *)((char *)this + 3352) = 0u;
  *(_OWORD *)((char *)this + 3304) = 0u;
  *(_OWORD *)((char *)this + 3320) = 0u;
  *(_OWORD *)((char *)this + 3272) = 0u;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *(_OWORD *)((char *)this + 3240) = 0u;
  *(_OWORD *)((char *)this + 3256) = 0u;
  *(_OWORD *)((char *)this + 3208) = 0u;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *(_OWORD *)((char *)this + 3176) = 0u;
  *(_OWORD *)((char *)this + 3192) = 0u;
  *(_OWORD *)((char *)this + 3144) = 0u;
  *(_OWORD *)((char *)this + 3160) = 0u;
  *(_OWORD *)((char *)this + 3112) = 0u;
  *(_OWORD *)((char *)this + 3128) = 0u;
  *(_OWORD *)((char *)this + 3080) = 0u;
  *(_OWORD *)((char *)this + 3096) = 0u;
  *(_OWORD *)((char *)this + 3048) = 0u;
  *(_OWORD *)((char *)this + 3064) = 0u;
  *(_OWORD *)((char *)this + 3016) = 0u;
  *(_OWORD *)((char *)this + 3032) = 0u;
  return result;
}

uint64_t raven::RavenIonosphereEstimator::PredictAndUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  cnprint::CNPrinter *v20;
  unsigned __int8 *v21;
  int8x16_t v22;
  uint64_t v23;
  double v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _OWORD *v29;
  double v30;
  double v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  _BYTE *v46;
  uint64_t *v47;
  int v48;
  _QWORD *v49;
  _BYTE *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  cnprint::CNPrinter *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  unint64_t v110;
  unsigned int *v111;
  unint64_t v112;
  cnprint::CNPrinter *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  BOOL v121;
  unsigned int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  char v147;
  char v148;
  double v149;
  unsigned int *v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  __int128 v155;
  unsigned __int8 v156;
  unsigned int ***v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int **v160;
  unsigned int *v161;
  uint64_t v162;
  unsigned int *v163;
  unsigned int *v164;
  uint64_t v165;
  double v166;
  uint64_t (**v167)();
  __int128 v168;
  uint64_t v169;
  double **v170;
  double *v171;
  double v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t (**v183)();
  __int128 v184;
  uint64_t v185;
  uint64_t (**v186)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t (*v187)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void *v188;
  __int128 v189;
  uint64_t v190;
  int *v191;
  int v192;
  uint64_t (**v193)();
  __int128 v194;
  uint64_t v195;
  uint64_t ***v196;
  uint64_t **v197;
  double v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t (**v209)();
  __int128 v210;
  uint64_t v211;
  uint64_t (**v212)(uint64_t, uint64_t, double *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v213)(uint64_t, uint64_t, double *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v214;
  __int128 v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  _BYTE v219[24];
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  __n128 v223[2];

  if (!*(_BYTE *)(a1 + 9))
    return 32;
  v4 = a1 + 8232;
  v223[0] = *(__n128 *)a2;
  v5 = *(double *)(a2 + 16);
  if (v5 < 0.0)
  {
    v6 = (__n128 *)(a1 + 32);
    sub_18D27D9B8(a1 + 8232, (__n128 *)(a1 + 32));
    *(_BYTE *)v4 = 0;
    sub_18D05DB3C(v4, v6, v7, v8, v9, v10, v11, v12);
    return 64;
  }
  if (v5 <= 0.0)
    return 0;
  if (sub_18D05B574(v223[0].n128_f64, (double *)(a1 + 8240)))
  {
    *(_WORD *)v219 = 2;
    LOBYTE(v198) = 4;
    v20 = (cnprint::CNPrinter *)v219;
    v21 = (unsigned __int8 *)&v198;
    goto LABEL_56;
  }
  v22 = (int8x16_t)v223[0];
  *(__n128 *)(a1 + 8256) = v223[0];
  v23 = CNTimeSpan::operator-(a1 + 8256, (_QWORD *)(a1 + 8240), v22, v19);
  v26 = *(unsigned int *)(a1 + 11416);
  if ((int)v26 < 1)
  {
LABEL_13:
    *(_DWORD *)(v4 + 12704) = 44;
    *(_OWORD *)(v4 + 4688) = xmmword_18D3364B0;
    *(_OWORD *)(a1 + 13664) = xmmword_18D3364B0;
    *(_OWORD *)(v4 + 5648) = xmmword_18D3364B0;
    *(_OWORD *)(a1 + 14272) = xmmword_18D3364B0;
    *(_OWORD *)(v4 + 0x2000) = xmmword_18D3364B0;
    *(_OWORD *)(a1 + 16640) = xmmword_18D3364B0;
    *(_OWORD *)(v4 + 10560) = xmmword_18D3364B0;
    *(_OWORD *)(v4 + 12720) = xmmword_18D3364B0;
    *(_OWORD *)(a1 + 21344) = xmmword_18D3364B0;
    *(_QWORD *)&v219[16] = 0;
    *(_QWORD *)&v219[8] = 0;
    *(_QWORD *)v219 = &v219[8];
    if ((int)v26 < 1)
    {
      v33 = 0;
      goto LABEL_65;
    }
    v32 = 0;
    v151 = 0;
    v153 = 0;
    v33 = 0;
    while (1)
    {
      if (*(double *)(*(_QWORD *)(a1 + 10168) + 8 * v32) <= 1.0)
      {
        ++v151;
        v34 = *(_DWORD *)(*(_QWORD *)(a1 + 9776) + 4 * v32);
        v35 = v34 + v153;
        if (v33 > 43 || v35 >= 45)
        {
          v46 = *(_BYTE **)v219;
          if (*(_BYTE **)v219 == &v219[8])
            goto LABEL_80;
          v47 = 0;
          v48 = -1;
          do
          {
            if (*((_DWORD *)v46 + 10) > v48)
            {
              v47 = (uint64_t *)*((_QWORD *)v46 + 4);
              v48 = *((_DWORD *)v46 + 10);
            }
            v49 = (_QWORD *)*((_QWORD *)v46 + 1);
            if (v49)
            {
              do
              {
                v50 = v49;
                v49 = (_QWORD *)*v49;
              }
              while (v49);
            }
            else
            {
              do
              {
                v50 = (_BYTE *)*((_QWORD *)v46 + 2);
                v51 = *(_QWORD *)v50 == (_QWORD)v46;
                v46 = v50;
              }
              while (!v51);
            }
            v46 = v50;
          }
          while (v50 != &v219[8]);
          v198 = *(double *)&v47;
          if (!v47)
          {
LABEL_80:
            LOWORD(v172) = 2;
            LOBYTE(v214) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v172, (unsigned __int8 *)&v214, "MeasurementAccumulator.LockAccumulator() most_common_measurement_type == nullptr", v14, v15, v16, v17, v18, v148);
            goto LABEL_63;
          }
          if (*(uint64_t **)(*(_QWORD *)(a1 + 11456) + 8 * v32) == v47)
            goto LABEL_49;
          v36 = v33 - 1;
          if (v33 < 1)
          {
LABEL_62:
            LOWORD(v172) = 2;
            LOBYTE(v214) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v172, (unsigned __int8 *)&v214, "MeasurementAccumulator.LockAccumulator() found_idx == false", v14, v15, v16, v17, v18, v148);
LABEL_63:
            sub_18D05B5E4(*(_QWORD **)&v219[8]);
            goto LABEL_57;
          }
          LODWORD(v52) = v33;
          while (1)
          {
            v52 = (v52 - 1);
            if (*(uint64_t **)(*(_QWORD *)(a1 + 20976) + 8 * v52) == v47)
              break;
            if ((int)v52 <= 0)
              goto LABEL_62;
          }
          if (v35 - *(_DWORD *)(*(_QWORD *)(a1 + 13688) + 4 * v52) > 44)
            goto LABEL_49;
          v53 = sub_18D1D73A0((uint64_t **)v219, (unint64_t)v47, (uint64_t **)&v198);
          --*((_DWORD *)v53 + 10);
          v153 -= *(_DWORD *)(*(_QWORD *)(a1 + 13688) + 4 * v52);
          v33 = v52;
        }
        else
        {
          v36 = v33;
        }
        *(_OWORD *)(*(_QWORD *)(a1 + 12944) + 16 * v33) = *(_OWORD *)(*(_QWORD *)(a1 + 8328) + 16 * v32);
        *(_DWORD *)(*(_QWORD *)(a1 + 13688) + 4 * v33) = v34;
        *(_QWORD *)(*(_QWORD *)(a1 + 13904) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(a1 + 10168) + 8 * v32);
        sub_18D053AA8(*(_QWORD *)(a1 + 14296) + 48 * v33, *(_QWORD *)(a1 + 10912) + 48 * v32);
        *(_DWORD *)(*(_QWORD *)(a1 + 16448) + 4 * v33) = *(_DWORD *)(*(_QWORD *)(a1 + 10960) + 4 * v32);
        sub_18D053AA8(*(_QWORD *)(a1 + 16664) + 48 * v33, *(_QWORD *)(a1 + 11352) + 48 * v32);
        sub_18D053AA8(*(_QWORD *)(a1 + 18816) + 48 * v33, *(_QWORD *)(a1 + 11400) + 48 * v32);
        *(_QWORD *)(*(_QWORD *)(a1 + 20976) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(a1 + 11456) + 8 * v32);
        *(_QWORD *)(*(_QWORD *)(a1 + 21368) + 8 * v33) = *(_QWORD *)(*(_QWORD *)(a1 + 12200) + 8 * v32);
        v37 = (uint64_t **)(*(_QWORD *)(a1 + 11456) + 8 * v32);
        v38 = *(_QWORD *)&v219[8];
        v39 = *v37;
        if (!*(_QWORD *)&v219[8])
          goto LABEL_29;
        v40 = (uint64_t *)&v219[8];
        do
        {
          v41 = (uint64_t *)v38;
          v42 = v40;
          v43 = *(_QWORD *)(v38 + 32);
          v44 = (uint64_t *)(v38 + 8);
          if (v43 >= (unint64_t)v39)
          {
            v44 = v41;
            v40 = v41;
          }
          v38 = *v44;
        }
        while (v38);
        if (v40 != (uint64_t *)&v219[8]
          && (v43 >= (unint64_t)v39 ? (v45 = v41) : (v45 = v42), (unint64_t)v39 >= v45[4]))
        {
          if (v43 < (unint64_t)v39)
            v41 = v42;
          ++*((_DWORD *)v41 + 10);
        }
        else
        {
LABEL_29:
          *((_DWORD *)sub_18D1D73A0((uint64_t **)v219, (unint64_t)v39, v37) + 10) = 1;
        }
        v33 = v36 + 1;
        v153 += v34;
        LODWORD(v26) = *(_DWORD *)(a1 + 11416);
      }
LABEL_49:
      if (++v32 >= (int)v26)
      {
        if (v151 > v33)
        {
          LOWORD(v198) = 2;
          LOBYTE(v172) = 2;
          v149 = v223[0].n128_f64[1] + (double)v223[0].n128_i64[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v198, (unsigned __int8 *)&v172, "t,%.3lf,WARNING: MeasurementAccumulator.LockAccumulator() truncating measurements,nh,%d,eligible,%d,num_truncated,%d", v14, v15, v16, v17, v18, SLOBYTE(v149));
        }
LABEL_65:
        *(_DWORD *)(v4 + 12704) = v33;
        *(_DWORD *)(a1 + 12920) = v33;
        *(_DWORD *)(a1 + 12924) = 1;
        *(_DWORD *)(a1 + 12928) = v33;
        *(_DWORD *)(a1 + 12932) = v33;
        *(_DWORD *)(a1 + 13664) = v33;
        *(_DWORD *)(a1 + 13668) = 1;
        *(_DWORD *)(a1 + 13672) = v33;
        *(_DWORD *)(a1 + 13676) = v33;
        *(_DWORD *)(a1 + 13880) = v33;
        *(_DWORD *)(a1 + 13884) = 1;
        *(_DWORD *)(a1 + 13888) = v33;
        *(_DWORD *)(a1 + 13892) = v33;
        *(_DWORD *)(a1 + 14272) = v33;
        *(_DWORD *)(a1 + 14276) = 1;
        *(_DWORD *)(a1 + 14280) = v33;
        *(_DWORD *)(a1 + 14284) = v33;
        *(_DWORD *)(v4 + 0x2000) = v33;
        *(_DWORD *)(v4 + 8196) = 1;
        *(_DWORD *)(v4 + 8200) = v33;
        *(_DWORD *)(v4 + 8204) = v33;
        *(_DWORD *)(v4 + 8408) = v33;
        *(_DWORD *)(v4 + 8412) = 1;
        *(_DWORD *)(v4 + 8416) = v33;
        *(_DWORD *)(v4 + 8420) = v33;
        *(_DWORD *)(v4 + 10560) = v33;
        *(_DWORD *)(v4 + 10564) = 1;
        *(_DWORD *)(v4 + 10568) = v33;
        *(_DWORD *)(v4 + 10572) = v33;
        *(_DWORD *)(v4 + 12720) = v33;
        *(_DWORD *)(v4 + 12724) = 1;
        *(_DWORD *)(v4 + 12728) = v33;
        *(_DWORD *)(v4 + 12732) = v33;
        *(_DWORD *)(v4 + 13112) = v33;
        *(_DWORD *)(v4 + 13116) = 1;
        *(_DWORD *)(v4 + 13120) = v33;
        *(_DWORD *)(v4 + 13124) = v33;
        *(_BYTE *)(v4 + 1) = 1;
        sub_18D05B5E4(*(_QWORD **)&v219[8]);
        if (!cnprint::CNPrinter::GetLogLevel(v69))
        {
          *(_WORD *)v219 = 12;
          LOBYTE(v198) = 0;
          v77 = v223[0].n128_f64[1] + (double)v223[0].n128_i64[0];
          v78 = sub_18D27A5F4(v4, v70, v71, v72, v73, v74, v75, v76);
          cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Predict,%.2lf,dt,%.3lf,meas_types,%d", v77, v5, v78);
          if (*(char *)(a1 + 3839) >= 0)
            LOBYTE(v84) = a1 - 24;
          else
            v84 = *(_QWORD *)(a1 + 3816);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v219, (unsigned __int8 *)&v198, "%s", v79, v80, v81, v82, v83, v84);
        }
        v220 = 0xA0000000ALL;
        *(_QWORD *)v219 = &unk_1E25C5FC0;
        v221 = &v222;
        *(_OWORD *)&v219[8] = xmmword_18D319A40;
        sub_18D04BE88((uint64_t)v219, 0.0);
        if (sub_18D27A640())
        {
          sub_18D27D9B8(v4, (__n128 *)(a1 + 32));
          *(_BYTE *)v4 = 0;
          *(_QWORD *)&v98 = sub_18D05DB3C(v4, (__n128 *)(a1 + 32), v92, v93, v94, v95, v96, v97).n128_u64[0];
          LOWORD(v198) = 12;
          LOBYTE(v172) = 4;
          v99 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "GetProcessNoiseInformationMatrix(),failed", v98);
          if (*(char *)(a1 + 3839) >= 0)
            LOBYTE(v105) = v99;
          else
            v105 = *(_QWORD *)(a1 + 3816);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v198, (unsigned __int8 *)&v172, "%s", v100, v101, v102, v103, v104, v105);
          return 256;
        }
        v216 = 0x200000001;
        v214 = &unk_1E25C6BF0;
        v215 = xmmword_18D319920;
        v217 = &v218;
        v218 = 0xA0000000ALL;
        v211 = 0x100000001;
        v209 = &off_1E25C6980;
        *(_QWORD *)&v106 = 0x100000001;
        *((_QWORD *)&v106 + 1) = 0x100000001;
        v210 = v106;
        v212 = &v213;
        v213 = sub_18D27AA04;
        v198 = v5;
        v205 = *(_OWORD *)(a2 + 120);
        v206 = *(_OWORD *)(a2 + 136);
        v207 = *(_OWORD *)(a2 + 152);
        v208 = *(_OWORD *)(a2 + 168);
        v204 = *(_OWORD *)(a2 + 104);
        v200 = *(_OWORD *)(a2 + 200);
        v201 = *(_OWORD *)(a2 + 216);
        v202 = *(_OWORD *)(a2 + 232);
        v203 = *(_OWORD *)(a2 + 248);
        v199 = *(_OWORD *)(a2 + 184);
        v195 = 0x100000001;
        v193 = &off_1E25C6A10;
        v194 = v106;
        v196 = &v197;
        v197 = (uint64_t **)&v198;
        v190 = 0x100000001;
        v188 = &unk_1E25C6A70;
        v189 = v106;
        v191 = &v192;
        v192 = 10;
        v185 = 0x100000001;
        v183 = &off_1E25C69B0;
        v184 = v106;
        v186 = &v187;
        v187 = sub_18D27AE14;
        v172 = v5;
        v179 = *(_OWORD *)(a2 + 120);
        v180 = *(_OWORD *)(a2 + 136);
        v181 = *(_OWORD *)(a2 + 152);
        v182 = *(_OWORD *)(a2 + 168);
        v178 = *(_OWORD *)(a2 + 104);
        v174 = *(_OWORD *)(a2 + 200);
        v175 = *(_OWORD *)(a2 + 216);
        v176 = *(_OWORD *)(a2 + 232);
        v177 = *(_OWORD *)(a2 + 248);
        v173 = *(_OWORD *)(a2 + 184);
        v169 = 0x100000001;
        v167 = &off_1E25C6A10;
        v168 = v106;
        v170 = &v171;
        v171 = &v172;
        v166 = v5;
        if (!*(_BYTE *)(v4 + 1))
        {
          sub_18D27A5C4((_BYTE *)v4, (__n128 *)(a1 + 32));
          return 512;
        }
        v154 = sub_18D27A5F4(v4, v85, v86, v87, v88, v89, v90, v91);
        if (v154)
        {
          v107 = sub_18D27B050(a1 + 3864, (uint64_t)v219, a1 + 13872, a1 + 14264, a1 + 18784, (uint64_t)&v214, (uint64_t)&v209, (uint64_t)&v193, a1 + 20944, a1 + 21336, (uint64_t)&v188, (uint64_t)&v183, (uint64_t)&v167);
          v13 = 10;
        }
        else
        {
          v107 = sub_18D27B598();
          v13 = 2;
        }
        v163 = 0;
        v164 = 0;
        v165 = 0;
        sub_18D1E7E30(&v163, *(_QWORD *)(a1 + 6160), *(_QWORD *)(a1 + 6168), (uint64_t)(*(_QWORD *)(a1 + 6168) - *(_QWORD *)(a1 + 6160)) >> 5);
        v160 = 0;
        v161 = 0;
        v162 = 0;
        sub_18D1E7E30(&v160, *(_QWORD *)(a1 + 6136), *(_QWORD *)(a1 + 6144), (uint64_t)(*(_QWORD *)(a1 + 6144) - *(_QWORD *)(a1 + 6136)) >> 5);
        v157 = 0;
        v158 = 0;
        v159 = 0;
        sub_18D1E7E30(&v157, *(_QWORD *)(a1 + 6184), *(_QWORD *)(a1 + 6192), (uint64_t)(*(_QWORD *)(a1 + 6192) - *(_QWORD *)(a1 + 6184)) >> 5);
        v109 = v163;
        v108 = v164;
        v110 = ((char *)v164 - (char *)v163) >> 5;
        v111 = (unsigned int *)v160;
        v150 = v161;
        v112 = ((char *)v161 - (char *)v160) >> 5;
        v152 = (v158 - (uint64_t)v157) >> 5;
        if (v154)
        {
          *(_QWORD *)(a1 + 2992) += v110;
          raven::RavenIonosphereEstimator::AddToAcceptedMeasurementTypeCount((cnprint::CNPrinter *)a1, &v163);
          *(_QWORD *)(a1 + 3000) += v112;
          raven::RavenIonosphereEstimator::AddToRejectedMeasurementTypeCount((cnprint::CNPrinter *)a1, (unsigned int **)&v160);
          *(_QWORD *)(a1 + 3008) += v152;
          raven::RavenIonosphereEstimator::AddToUnusedMeasurementTypeCount((cnprint::CNPrinter *)a1, (unsigned int **)&v157);
        }
        if (v107 > 0x16)
          goto LABEL_105;
        if (((1 << v107) & 0x440408) == 0)
        {
          if (((1 << v107) & 0x301) != 0)
          {
            v113 = (cnprint::CNPrinter *)sub_18D05D3A8(a1 + 8160, &v166);
            if (v154)
            {
              if (v108 != v109)
              {
                v120 = 1;
                do
                {
                  v113 = (cnprint::CNPrinter *)sub_18D1E7EB4(a1 + 8160);
                  v121 = v110 > v120++;
                }
                while (v121);
              }
              if (v150 != v111)
              {
                v122 = 1;
                do
                {
                  v113 = (cnprint::CNPrinter *)sub_18D1D1D04(a1 + 8160);
                  v121 = v112 > v122++;
                }
                while (v121);
              }
              if (v110 <= v112)
              {
                if (cnprint::CNPrinter::GetLogLevel(v113) <= 1)
                {
                  LOWORD(v155) = 12;
                  v156 = 1;
                  v147 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)v223, "accepted_meas,%zu,rejected_meas,%zu,unused_meas,%zu", v110, v112, v152);
                  if (*(char *)(a1 + 3839) >= 0)
                    LOBYTE(v129) = v147;
                  else
                    v129 = *(_QWORD *)(a1 + 3816);
LABEL_118:
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v155, &v156, "%s", v124, v125, v126, v127, v128, v129);
                }
              }
              else if (!cnprint::CNPrinter::GetLogLevel(v113))
              {
                LOWORD(v155) = 12;
                v156 = 0;
                v123 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)v223, "accepted_meas,%zu,rejected_meas,%zu,unused_meas,%zu", v110, v112, v152);
                if (*(char *)(a1 + 3839) >= 0)
                  LOBYTE(v129) = v123;
                else
                  v129 = *(_QWORD *)(a1 + 3816);
                goto LABEL_118;
              }
            }
            *(__n128 *)(a1 + 32) = v223[0];
            v155 = 0uLL;
            if (!sub_18D27D8F4(v4, &v155, v114, v115, v116, v117, v118, v119))
              *(_OWORD *)(a1 + 48) = v155;
LABEL_121:
            sub_18D27A5C4((_BYTE *)v4, v223);
            *(_QWORD *)&v155 = &v157;
            sub_18D1C59AC((void ***)&v155);
            v157 = &v160;
            sub_18D1C59AC((void ***)&v157);
            v160 = &v163;
            sub_18D1C59AC((void ***)&v160);
            return v13;
          }
          if (((1 << v107) & 0x300000) != 0)
          {
            LOWORD(v155) = 12;
            v156 = 4;
            v130 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)v223, "Resetting due to prediction error code %d", v107);
            if (*(char *)(a1 + 3839) >= 0)
              LOBYTE(v136) = v130;
            else
              v136 = *(_QWORD *)(a1 + 3816);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v155, &v156, "%s", v131, v132, v133, v134, v135, v136);
            v13 |= 6uLL;
            goto LABEL_121;
          }
LABEL_105:
          v13 |= 1uLL;
        }
        LOWORD(v155) = 12;
        v156 = 4;
        v137 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)v223, "Unexpected predict and update return code %d", v107);
        if (*(char *)(a1 + 3839) >= 0)
          LOBYTE(v143) = v137;
        else
          v143 = *(_QWORD *)(a1 + 3816);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v155, &v156, "%s", v138, v139, v140, v141, v142, v143);
        if ((v13 & 8) != 0)
        {
          sub_18D27D9B8(v4, v223);
          v144 = raven::RavenIonosphereEstimator::PredictAndUpdate(a1, a2);
          if (v112 + v110 + v152)
          {
            v145 = a1 + 8160;
            v146 = 1;
            do
            {
              sub_18D1D1D04(v145);
              v121 = v112 + v110 + v152 > v146++;
            }
            while (v121);
          }
          v13 |= v144 | 0x18;
        }
        goto LABEL_121;
      }
    }
  }
  v27 = 0;
  *(double *)v25.i64 = (double)v23;
  v28 = v24 + (double)v23;
  v29 = *(_OWORD **)(a1 + 8328);
  while (1)
  {
    *(_OWORD *)v219 = *v29;
    *(double *)v25.i64 = (double)CNTimeSpan::operator-((uint64_t)v219, (_QWORD *)(a1 + 8240), *(int8x16_t *)v219, v25);
    v31 = (v30 + *(double *)v25.i64) / v28;
    if (v31 < 0.0)
      break;
    *(double *)(*(_QWORD *)(a1 + 10168) + v27) = v31;
    v27 += 8;
    ++v29;
    if (8 * v26 == v27)
      goto LABEL_13;
  }
  LOWORD(v198) = 2;
  LOBYTE(v172) = 2;
  v20 = (cnprint::CNPrinter *)&v198;
  v21 = (unsigned __int8 *)&v172;
LABEL_56:
  cnprint::CNPrinter::Print(v20, v21, "WARNING: MeasurementAccumulator.LockAccumulator() called with bad t_end.", v14, v15, v16, v17, v18, v148);
LABEL_57:
  sub_18D27D9B8(v4, (__n128 *)(a1 + 32));
  *(_BYTE *)v4 = 0;
  *(_QWORD *)&v60 = sub_18D05DB3C(v4, (__n128 *)(a1 + 32), v54, v55, v56, v57, v58, v59).n128_u64[0];
  *(_WORD *)v219 = 12;
  LOBYTE(v198) = 4;
  v61 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "PredictAndUpdate(), could not lock accumulator", v60);
  if (*(char *)(a1 + 3839) >= 0)
    LOBYTE(v67) = v61;
  else
    v67 = *(_QWORD *)(a1 + 3816);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v219, (unsigned __int8 *)&v198, "%s", v62, v63, v64, v65, v66, v67);
  return 128;
}

void sub_18D279350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void ****a18, uint64_t a19, uint64_t a20,void ***a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,char a27)
{
  a18 = &a21;
  sub_18D1C59AC((void ***)&a18);
  a21 = &a24;
  sub_18D1C59AC((void ***)&a21);
  a24 = (void **)&a27;
  sub_18D1C59AC(&a24);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenIonosphereEstimator::PopulateEvent(raven::RavenIonosphereEstimator *this, raven::ThinShellIonosphereParametersEvent *a2)
{
  char IsConsistent;
  char v5;
  BOOL v6;
  char IsSane;
  __int128 *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  cnprint::CNPrinter *v19;
  cnprint::CNPrinter *LogLevel;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unsigned __int8 __src[559];
  unsigned __int8 v40;
  int8x16_t v41;
  int v42;
  _QWORD *v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int8x16_t v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  IsConsistent = raven::RavenIonosphereEstimator::IsConsistent(this);
  if (!*((_BYTE *)this + 9))
  {
    raven::RavenIonosphereEstimator::IsSane(this);
    v41.i16[0] = 12;
    __src[0] = 2;
    v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), Estimator initialized,%d");
LABEL_30:
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v38) = v9;
    else
      v38 = *((_QWORD *)this + 477);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, __src, "%s", v10, v11, v12, v13, v14, v38);
    return 0xFFFFFFFFLL;
  }
  v5 = IsConsistent;
  v6 = sub_18D27A34C((uint64_t)this + 3864);
  IsSane = raven::RavenIonosphereEstimator::IsSane(this);
  if (!v6)
  {
    v41.i16[0] = 12;
    __src[0] = 2;
    v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), Estimator observable,%d");
    goto LABEL_30;
  }
  if ((v5 & 1) == 0)
  {
    v41.i16[0] = 12;
    __src[0] = 2;
    v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), Estimator consistent,%d");
    goto LABEL_30;
  }
  if ((IsSane & 1) == 0)
  {
    v41.i16[0] = 12;
    __src[0] = 2;
    v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), Estimator sane,%d");
    goto LABEL_30;
  }
  v51 = 0u;
  v52 = 0u;
  v49[1] = 0u;
  v50 = 0u;
  v53 = 0;
  v54 = 0x7FF8000000000000;
  v49[0] = *((int8x16_t *)this + 2);
  raven::PopulateAllTimeFields((uint64_t)v49, (uint64_t)this + 568, (int8x16_t)0, v49[0]);
  if ((_BYTE)v52)
  {
    v8 = (__int128 *)((char *)&v52 + 8);
  }
  else
  {
    if (!BYTE8(v50))
    {
      v41.i16[0] = 12;
      __src[0] = 3;
      v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), cannot set applicable_time");
      goto LABEL_30;
    }
    v8 = &v51;
  }
  *(_OWORD *)((char *)a2 + 152) = *v8;
  *((_BYTE *)a2 + 104) = 1;
  *((_BYTE *)a2 + 105) = raven::RavenIonosphereEstimator::IsConverged((double **)this);
  v41 = *((int8x16_t *)this + 2);
  *((_QWORD *)a2 + 14) = CNTimeSpan::operator-((uint64_t)&v41, (_QWORD *)this + 2, v41, v15);
  *((_QWORD *)a2 + 15) = v16;
  if (!*((_BYTE *)this + 2024))
  {
    v41.i16[0] = 12;
    __src[0] = 2;
    v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt),device position invalid");
    goto LABEL_30;
  }
  *((_OWORD *)a2 + 8) = *((_OWORD *)this + 127);
  *((_QWORD *)a2 + 18) = *((_QWORD *)this + 256);
  v46 = 0x10000000ALL;
  v44 = &unk_1E25C6020;
  v45 = xmmword_18D31CEF0;
  v47 = &v48;
  if (*((_DWORD *)this + 1511))
    v17 = (char *)this + 4952;
  else
    v17 = (char *)this + 3872;
  sub_18D053AA8((uint64_t)&v44, (uint64_t)v17);
  sub_18D279BE8((uint64_t)this + 3864, (uint64_t)&v41);
  v18 = v47;
  *((_QWORD *)a2 + 21) = *v47;
  *((_QWORD *)a2 + 22) = v18[1];
  *((_QWORD *)a2 + 23) = v18[2];
  *((_QWORD *)a2 + 24) = v18[3];
  *((_QWORD *)a2 + 25) = v18[4];
  *((_QWORD *)a2 + 26) = v18[5];
  *((_QWORD *)a2 + 27) = v18[6];
  LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v19);
  if (LogLevel <= 1)
  {
    *(_WORD *)__src = 12;
    v40 = 1;
    v21 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,hmax,%.3lf,vtec0,%.3lf,dvtec_dtheta,%.3lf,dvtec_dphi,%.3lf,d2vtec_dtheta2,%.3lf,d2vtec_dthetadphi,%.3lf,d2vtec_dphi2,%.3lf,converged,%d", *((double *)a2 + 21), *((double *)a2 + 22), *((double *)a2 + 23), *((double *)a2 + 24), *((double *)a2 + 25), *((double *)a2 + 26), *((double *)a2 + 27), *((unsigned __int8 *)a2 + 105));
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v27) = v21;
    else
      v27 = *((_QWORD *)this + 477);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, &v40, "%s", v22, v23, v24, v25, v26, v27);
  }
  v28 = v43;
  *((_QWORD *)a2 + 28) = *v43;
  v29 = v42;
  *((_QWORD *)a2 + 29) = v28[v42 + 1];
  *((_QWORD *)a2 + 30) = v28[2 * v29 + 2];
  *((_QWORD *)a2 + 31) = v28[3 * v29 + 3];
  *((_QWORD *)a2 + 32) = v28[4 * v29 + 4];
  *((_QWORD *)a2 + 33) = v28[5 * v29 + 5];
  *((_QWORD *)a2 + 34) = v28[6 * v29 + 6];
  if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
  {
    *(_WORD *)__src = 12;
    v40 = 0;
    v30 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,phmax_hmax,%.3lf,pvtec0_vtec0,%.3lf,pdvtec_dtheta_dvtec_dtheta,%.3lf,pdvtec_dphi_dvtec_dphi,%.3lf,pd2vtec_dtheta2_d2vtec_dtheta2,%.3lf,pd2vtec_dthetadphi_d2vtec_dthetadphi,%.3lf,pd2vtec_dphi2_d2vtec_dphi2,%.3lf", *((double *)a2 + 28), *((double *)a2 + 29), *((double *)a2 + 30), *((double *)a2 + 31), *((double *)a2 + 32), *((double *)a2 + 33), *((double *)a2 + 34));
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v36) = v30;
    else
      v36 = *((_QWORD *)this + 477);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, &v40, "%s", v31, v32, v33, v34, v35, v36);
  }
  raven::RavenIonosphereEstimator::GetEstimatorStatus(this, (uint64_t)__src);
  memcpy((char *)a2 + 280, __src, 0x224uLL);
  return 0;
}

uint64_t raven::RavenIonosphereEstimator::IsConsistent(raven::RavenIonosphereEstimator *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int16 v14;

  if (!*((_BYTE *)this + 9))
    return 1;
  v2 = (char *)this + 8160;
  v3 = 16;
  if (!*((_DWORD *)this + 2046))
    v3 = 8;
  if (*(double *)&v2[v3] < *(double *)(*((_QWORD *)this + 476) + 3064))
    return 1;
  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v14 = 12;
    v13 = 1;
    v5 = 16;
    if (!*((_DWORD *)this + 2046))
      v5 = 8;
    v6 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 32, "consistency failure,%.1lf > %.1lf", *(double *)&v2[v5], *(double *)(*((_QWORD *)this + 476) + 3064));
    if (*((char *)this + 3839) >= 0)
      LOBYTE(v12) = v6;
    else
      v12 = *((_QWORD *)this + 477);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v7, v8, v9, v10, v11, v12);
  }
  return 0;
}

BOOL raven::RavenIonosphereEstimator::IsObservable(raven::RavenIonosphereEstimator *this)
{
  return *((_BYTE *)this + 9) && sub_18D27A34C((uint64_t)this + 3864);
}

uint64_t raven::RavenIonosphereEstimator::IsSane(raven::RavenIonosphereEstimator *this)
{
  char *v2;
  cnprint::CNPrinter *v3;
  double v4;
  double v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;

  if (*((_BYTE *)this + 9))
  {
    v19 = 0x10000000ALL;
    v17 = &unk_1E25C6020;
    v18 = xmmword_18D31CEF0;
    v20 = (double *)&v21;
    if (*((_DWORD *)this + 1511))
      v2 = (char *)this + 4952;
    else
      v2 = (char *)this + 3872;
    sub_18D053AA8((uint64_t)&v17, (uint64_t)v2);
    v4 = *v20;
    v5 = v20[1];
    v6 = *((_QWORD *)this + 476);
    if (*v20 >= *(double *)(v6 + 3112) && v4 <= *(double *)(v6 + 3120) && v5 >= 0.0)
      return 1;
    if (cnprint::CNPrinter::GetLogLevel(v3) <= 1)
    {
      v16 = 12;
      v15 = 1;
      v8 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 32, "Sanity failure,thin-shell height,%.1lf,vtec0,%.1lf", v4, v5);
      if (*((char *)this + 3839) >= 0)
        LOBYTE(v14) = v8;
      else
        v14 = *((_QWORD *)this + 477);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "%s", v9, v10, v11, v12, v13, v14);
    }
  }
  return 0;
}

uint64_t raven::RavenIonosphereEstimator::IsConverged(double **this)
{
  uint64_t result;
  double *v3;
  _BYTE v4[20];
  int v5;
  double *v6;

  if (*((_BYTE *)this + 9))
  {
    result = raven::RavenIonosphereEstimator::IsSane((raven::RavenIonosphereEstimator *)this);
    if (!(_DWORD)result)
      return result;
    if (*((_BYTE *)this + 9))
    {
      result = sub_18D27A34C((uint64_t)(this + 483));
      if (!(_DWORD)result)
        return result;
      sub_18D279BE8((uint64_t)(this + 483), (uint64_t)v4);
      v3 = this[476];
      if (*v6 <= v3[373] * v3[373]
        && v6[v5 + 1] <= v3[374] * v3[374]
        && v6[2 * v5 + 2] <= v3[375] * v3[375]
        && v6[3 * v5 + 3] <= v3[376] * v3[376]
        && v6[4 * v5 + 4] <= v3[377] * v3[377]
        && v6[5 * v5 + 5] <= v3[378] * v3[378]
        && v6[6 * v5 + 6] <= v3[379] * v3[379]
        && v6[7 * v5 + 7] <= v3[380] * v3[380]
        && v6[8 * v5 + 8] <= v3[381] * v3[381])
      {
        return v6[9 * v5 + 9] <= v3[382] * v3[382];
      }
    }
  }
  return 0;
}

double sub_18D279B9C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x10000000ALL;
  *(_QWORD *)a2 = &unk_1E25C6020;
  *(_OWORD *)(a2 + 8) = xmmword_18D31CEF0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 2180))
    v2 = a1 + 1088;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

__n128 sub_18D279BE8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  int i;
  __n128 result;
  void *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[69];
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v21 = 0xA0000000ALL;
  v19 = &unk_1E25C5FC0;
  v20 = xmmword_18D319A40;
  v22 = &v23;
  if (*(_DWORD *)(a1 + 2180))
    v3 = a1 + 1208;
  else
    v3 = a1 + 128;
  v16 = 0xA0000000ALL;
  v14 = &unk_1E25C5FC0;
  v15 = xmmword_18D319A40;
  v17 = v18;
  v31 = 0x10000000ALL;
  v29 = &unk_1E25C6050;
  v30 = xmmword_18D31CEF0;
  v32 = &v33;
  v26 = 0x100000028;
  v24 = &unk_1E25C79D0;
  v25 = xmmword_18D3364D0;
  v27 = &v28;
  sub_18D04F504(v3, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v14);
  sub_18D053AA8((uint64_t)&v19, (uint64_t)&v14);
  v4 = DWORD1(v20);
  v5 = v20;
  v16 = 0xA0000000ALL;
  v14 = &unk_1E25C5FC0;
  v17 = v18;
  *(_QWORD *)&v15 = __PAIR64__(v20, DWORD1(v20));
  DWORD2(v15) = v20 * DWORD1(v20);
  HIDWORD(v15) = DWORD1(v20);
  if (DWORD1(v20))
  {
    v6 = 0;
    v7 = 0;
    v8 = HIDWORD(v20);
    v9 = v22;
    do
    {
      v10 = v6;
      v11 = v7;
      for (i = v5; i; --i)
      {
        v18[v11] = v9[v10];
        v11 += v4;
        ++v10;
      }
      ++v7;
      v6 += v8;
    }
    while (v7 != v4);
  }
  *(_QWORD *)(a2 + 24) = 0xA0000000ALL;
  *(_QWORD *)a2 = &unk_1E25C5FC0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319A40;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  sub_18D053B2C((uint64_t)&v19, (uint64_t)&v14, a2);
  return result;
}

void sub_18D279DA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

__n128 raven::RavenIonosphereEstimator::GetEstimatorStatus@<Q0>(raven::RavenIonosphereEstimator *this@<X0>, uint64_t a2@<X8>)
{
  int8x16_t v4;
  _BOOL4 v5;
  __int128 v6;
  __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  __n128 result;
  int IsSane;
  cnprint::CNPrinter *IsConsistent;
  int8x16_t v13;
  int v14;
  char v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int8x16_t v37;
  unsigned __int8 v38;

  *(_BYTE *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  if (*((_BYTE *)this + 9))
  {
    *(_OWORD *)(a2 + 48) = 0uLL;
    *(_OWORD *)(a2 + 64) = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_OWORD *)(a2 + 32) = 0uLL;
    v4 = *((int8x16_t *)this + 2);
    *(int8x16_t *)a2 = v4;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0x7FF8000000000000;
    raven::PopulateAllTimeFields(a2, (uint64_t)this + 464, (int8x16_t)0, v4);
    if (*((_BYTE *)this + 9))
      v5 = sub_18D27A34C((uint64_t)this + 3864);
    else
      v5 = 0;
    IsSane = raven::RavenIonosphereEstimator::IsSane(this);
    IsConsistent = (cnprint::CNPrinter *)raven::RavenIonosphereEstimator::IsConsistent(this);
    v14 = (int)IsConsistent;
    if (v5 && IsSane && (IsConsistent & 1) != 0)
    {
      v15 = 2;
    }
    else
    {
      v15 = 1;
      if (cnprint::CNPrinter::GetLogLevel(IsConsistent) <= 1)
      {
        v37.i16[0] = 12;
        v38 = 1;
        v16 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 477, "Estimator unhealthy,observable,%d,sane,%d,consistent,%d", v5, IsSane, v14);
        if (*((char *)this + 3839) >= 0)
          LOBYTE(v22) = v16;
        else
          v22 = *((_QWORD *)this + 477);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v38, "%s", v17, v18, v19, v20, v21, v22);
      }
    }
    *(_BYTE *)(a2 + 96) = v15;
    v23 = 16;
    if (!*((_DWORD *)this + 2046))
      v23 = 8;
    v13.i64[0] = 1.0;
    *(double *)(a2 + 104) = 1.0 - *(double *)((char *)this + v23 + 8160);
    v37 = *((int8x16_t *)this + 2);
    v24 = CNTimeSpan::operator-((uint64_t)&v37, (_QWORD *)this + 2, v37, v13);
    v25 = *(_OWORD *)((char *)this + 3508);
    *(_OWORD *)(a2 + 264) = *(_OWORD *)((char *)this + 3524);
    *(_OWORD *)(a2 + 128) = *((_OWORD *)this + 187);
    v26 = *(_OWORD *)((char *)this + 3476);
    *(_OWORD *)(a2 + 232) = *(_OWORD *)((char *)this + 3492);
    *(_OWORD *)(a2 + 248) = v25;
    v27 = *(_OWORD *)((char *)this + 3412);
    *(_OWORD *)(a2 + 168) = *(_OWORD *)((char *)this + 3428);
    v28 = *(_OWORD *)((char *)this + 3460);
    *(_OWORD *)(a2 + 184) = *(_OWORD *)((char *)this + 3444);
    *(_OWORD *)(a2 + 200) = v28;
    *(_QWORD *)(a2 + 112) = v24;
    *(_QWORD *)(a2 + 120) = v29;
    *(_QWORD *)(a2 + 144) = *((_QWORD *)this + 376);
    *(_DWORD *)(a2 + 280) = *((_DWORD *)this + 885);
    *(_OWORD *)(a2 + 216) = v26;
    *(_OWORD *)(a2 + 152) = v27;
    v30 = *(_OWORD *)((char *)this + 3656);
    *(_OWORD *)(a2 + 380) = *(_OWORD *)((char *)this + 3640);
    *(_OWORD *)(a2 + 396) = v30;
    *(_DWORD *)(a2 + 412) = *((_DWORD *)this + 918);
    v31 = *(_OWORD *)((char *)this + 3592);
    *(_OWORD *)(a2 + 316) = *(_OWORD *)((char *)this + 3576);
    *(_OWORD *)(a2 + 332) = v31;
    v32 = *(_OWORD *)((char *)this + 3624);
    *(_OWORD *)(a2 + 348) = *(_OWORD *)((char *)this + 3608);
    *(_OWORD *)(a2 + 364) = v32;
    v33 = *(_OWORD *)((char *)this + 3560);
    *(_OWORD *)(a2 + 284) = *(_OWORD *)((char *)this + 3544);
    *(_OWORD *)(a2 + 300) = v33;
    v34 = *(_OWORD *)((char *)this + 3788);
    *(_OWORD *)(a2 + 512) = *(_OWORD *)((char *)this + 3772);
    *(_OWORD *)(a2 + 528) = v34;
    *(_DWORD *)(a2 + 544) = *((_DWORD *)this + 951);
    v35 = *(_OWORD *)((char *)this + 3724);
    *(_OWORD *)(a2 + 448) = *(_OWORD *)((char *)this + 3708);
    *(_OWORD *)(a2 + 464) = v35;
    v36 = *(_OWORD *)((char *)this + 3756);
    *(_OWORD *)(a2 + 480) = *(_OWORD *)((char *)this + 3740);
    *(_OWORD *)(a2 + 496) = v36;
    result = *(__n128 *)((char *)this + 3692);
    *(_OWORD *)(a2 + 416) = *(_OWORD *)((char *)this + 3676);
    *(__n128 *)(a2 + 432) = result;
  }
  else
  {
    v6 = *((_OWORD *)this + 32);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 31);
    *(_OWORD *)(a2 + 48) = v6;
    v7 = *((_OWORD *)this + 34);
    *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 33);
    *(_OWORD *)(a2 + 80) = v7;
    v8 = *((int8x16_t *)this + 29);
    v9 = *((int8x16_t *)this + 30);
    *(int8x16_t *)a2 = v8;
    *(int8x16_t *)(a2 + 16) = v9;
    raven::PopulateAllTimeFields(a2, (uint64_t)this + 464, v8, v9);
  }
  return result;
}

uint64_t raven::RavenIonosphereEstimator::PopulateEvent(int8x16_t *this, int8x16_t *a2)
{
  char IsConsistent;
  char v5;
  BOOL v6;
  char IsSane;
  int8x16_t *v8;
  int8x16_t v9;
  cnprint::CNPrinter *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 __src[559];
  unsigned __int8 v30;
  _WORD v31[10];
  int v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  IsConsistent = raven::RavenIonosphereEstimator::IsConsistent((raven::RavenIonosphereEstimator *)this);
  if (!this->i8[9])
  {
    raven::RavenIonosphereEstimator::IsSane((raven::RavenIonosphereEstimator *)this);
    v31[0] = 12;
    __src[0] = 2;
    v22 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&this[238].u64[1], "RavenIonosphereEstimator::PopulateEvent(ReceiverDifferentialCodeBiasesEvent& evt), Estimator initialized,%d");
LABEL_18:
    if (this[239].i8[15] >= 0)
      LOBYTE(v28) = v22;
    else
      v28 = this[238].i64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v31, __src, "%s", v23, v24, v25, v26, v27, v28);
    return 0xFFFFFFFFLL;
  }
  v5 = IsConsistent;
  v6 = sub_18D27A34C((uint64_t)&this[241].i64[1]);
  IsSane = raven::RavenIonosphereEstimator::IsSane((raven::RavenIonosphereEstimator *)this);
  if (!v6)
  {
    v31[0] = 12;
    __src[0] = 2;
    v22 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&this[238].u64[1], "RavenIonosphereEstimator::PopulateEvent(ReceiverDifferentialCodeBiasesEvent& evt), Estimator observable,%d");
    goto LABEL_18;
  }
  if ((v5 & 1) == 0)
  {
    v31[0] = 12;
    __src[0] = 2;
    v22 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&this[238].u64[1], "RavenIonosphereEstimator::PopulateEvent(ReceiverDifferentialCodeBiasesEvent& evt), Estimator consistent,%d");
    goto LABEL_18;
  }
  if ((IsSane & 1) == 0)
  {
    v31[0] = 12;
    __src[0] = 2;
    v22 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&this[238].u64[1], "RavenIonosphereEstimator::PopulateEvent(ReceiverDifferentialCodeBiasesEvent& evt), Estimator sane,%d");
    goto LABEL_18;
  }
  v36 = 0x10000000ALL;
  v34 = &unk_1E25C6020;
  v35 = xmmword_18D31CEF0;
  v37 = &v38;
  if (this[377].i32[3])
    v8 = (int8x16_t *)((char *)this + 4952);
  else
    v8 = this + 242;
  sub_18D053AA8((uint64_t)&v34, (uint64_t)v8);
  sub_18D279BE8((uint64_t)&this[241].i64[1], (uint64_t)v31);
  a2[6].i8[8] = 1;
  a2[6].i8[9] = raven::RavenIonosphereEstimator::IsConverged((double **)this);
  v9 = this[2];
  a2[7] = v9;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[12].i64[0] = 0;
  a2[12].i64[1] = 0x7FF8000000000000;
  v10 = (cnprint::CNPrinter *)raven::PopulateAllTimeFields((uint64_t)a2[7].i64, (uint64_t)this[29].i64, v9, (int8x16_t)0);
  v11 = v37;
  a2[13].i64[0] = v37[7];
  a2[14].i64[0] = v11[9];
  a2[13].i64[1] = v11[8];
  LODWORD(v11) = v32;
  v12 = 8 * v32;
  v13 = v33;
  a2[14].i64[1] = *(_QWORD *)(v33 + 8 * (7 * v32 + 7));
  a2[15].i64[0] = *(_QWORD *)(v13 + 8 * ((8 * (int)v11) | 7));
  LODWORD(v11) = 9 * (_DWORD)v11;
  a2[15].i64[1] = *(_QWORD *)(v13 + 8 * ((int)v11 + 7));
  a2[16].i64[0] = *(_QWORD *)(v13 + 8 * (v12 + 8));
  a2[16].i64[1] = *(_QWORD *)(v13 + 8 * ((int)v11 + 8));
  a2[17].i64[0] = *(_QWORD *)(v13 + 8 * ((int)v11 + 9));
  if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
  {
    *(_WORD *)__src = 12;
    v30 = 1;
    v14 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&this[238].i64[1], (uint64_t)this[29].i64, "#iono,DCBs,gps,%.2lf,gal,%.2lf,bds,%.2lf,gps_var,%.2lf,gal_var,%.2lf,bds_var,%.2lf", *(double *)a2[13].i64, *(double *)&a2[13].i64[1], *(double *)a2[14].i64, *(double *)&a2[14].i64[1], *(double *)a2[16].i64, *(double *)a2[17].i64);
    if (this[239].i8[15] >= 0)
      LOBYTE(v20) = v14;
    else
      v20 = this[238].i64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, &v30, "%s", v15, v16, v17, v18, v19, v20);
  }
  raven::RavenIonosphereEstimator::GetEstimatorStatus((raven::RavenIonosphereEstimator *)this, (uint64_t)__src);
  memcpy(&a2[17].u64[1], __src, 0x224uLL);
  return 0;
}

void sub_18D27A2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x10000000ALL;
  *(_QWORD *)a1 = &unk_1E25C6020;
  *(_OWORD *)(a1 + 8) = xmmword_18D31CEF0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D27A338(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

BOOL sub_18D27A34C(uint64_t a1)
{
  int v1;
  double v3;
  uint64_t v4;
  BOOL v5;
  double v6;
  char v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[105];
  void *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v1 = *(unsigned __int8 *)(a1 + 2176);
  if (v1 == 2)
    return 1;
  if (v1 == 1)
    return 0;
  if (*(_BYTE *)(a1 + 2176))
  {
    LOWORD(v37) = 2;
    LOBYTE(v32) = 5;
    v8 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2344), "LeastSquaresEstimator::IsObservable called with unexpected observability state %hhu", v1);
    if (*(char *)(a1 + 2367) >= 0)
      LOBYTE(v14) = v8;
    else
      v14 = *(_QWORD *)(a1 + 2344);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, (unsigned __int8 *)&v32, "%s", v9, v10, v11, v12, v13, v14);
    return 0;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(v16, a1);
  v39 = 0xA0000000ALL;
  v37 = &unk_1E25C5FC0;
  v38 = xmmword_18D319A40;
  v40 = &v41;
  v34 = 0xA0000000ALL;
  v32 = &unk_1E25C5FC0;
  v33 = xmmword_18D319A40;
  v35 = &v36;
  v29 = 0x10000000ALL;
  v27 = &unk_1E25C6050;
  v28 = xmmword_18D31CEF0;
  v30 = &v31;
  v24 = 0x100000884;
  v22 = &off_1E25C6EF0;
  v26 = 0;
  v25 = 0;
  v23 = xmmword_18D3364E0;
  sub_18D280208((uint64_t)&v22);
  v25 = v26;
  v19 = 0x10000000ALL;
  v17 = &unk_1E25C6020;
  v18 = xmmword_18D31CEF0;
  v20 = &v21;
  v3 = sub_18D186C18(v16, (uint64_t)&v37, (uint64_t)&v32, (uint64_t)&v27, (uint64_t)&v22, (uint64_t)&v17, "2");
  v4 = v26;
  v22 = &off_1E25C6EF0;
  v26 = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  v5 = 0;
  v6 = *(double *)(a1 + 2248);
  v7 = 1;
  if (v6 >= 1.0 && v3 > 0.0)
  {
    v5 = v3 <= v6;
    if (v3 > v6)
      v7 = 1;
    else
      v7 = 2;
  }
  *(_BYTE *)(a1 + 2176) = v7;
  return v5;
}

void sub_18D27A584(_Unwind_Exception *a1)
{
  unint64_t v1;
  unint64_t v3;

  v3 = STACK[0x408];
  STACK[0x3E0] = v1;
  STACK[0x408] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

double sub_18D27A5C4(_BYTE *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  sub_18D27D9B8((uint64_t)a1, a2);
  *a1 = 0;
  *(_QWORD *)&result = sub_18D05DB3C((uint64_t)a1, a2, v4, v5, v6, v7, v8, v9).n128_u64[0];
  return result;
}

uint64_t sub_18D27A5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  if (*(_BYTE *)(a1 + 1))
    return *(unsigned int *)(a1 + 12704);
  v11 = 2;
  v10 = 2;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "WARNING: MeasurementAccumulator.NumberLocked() called on unlocked accumulator.", a4, a5, a6, a7, a8, v9);
  return 0;
}

uint64_t sub_18D27A640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  double v17;
  long double v18;
  double v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t *v25;
  int v26;
  int v27;
  int j;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD v54[100];
  void *v55;
  __int128 v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE v59[800];
  void *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  void *v65;
  __int128 v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE v69[800];
  void *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;

  v0 = MEMORY[0x1E0C80A78]();
  v3 = v2;
  v4 = v1;
  v5 = v0;
  for (i = 0; i != 80; i += 8)
  {
    v7 = *(_QWORD *)(v1 + 104 + i);
    v8 = (v7 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
    v9 = ((v7 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    if (v7 >= 0)
    {
      v9 = 0;
      v8 = 0;
    }
    v10 = v7 & 0x7FFFFFFFFFFFFFFFLL;
    if (!v10)
      v8 = 1;
    v11 = v10 <= 0x7FF0000000000000;
    v12 = v10 == 0x7FF0000000000000 || v8;
    if (!v11)
      v12 = 1;
    if ((v12 | v9) == 1)
    {
      LOWORD(v65) = 12;
      LOBYTE(v60) = 4;
      v30 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v0 + 3816), "GetProcessNoiseInformationMatrix,non-positive correlation time constant specified");
      if (*(char *)(v5 + 3839) >= 0)
        LOBYTE(v36) = v30;
      else
        v36 = *(_QWORD *)(v5 + 3816);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, (unsigned __int8 *)&v60, "%s", v31, v32, v33, v34, v35, v36);
      return 0xFFFFFFFFLL;
    }
  }
  v62 = 0xA0000000ALL;
  v60 = &unk_1E25C5FC0;
  v63 = &v64;
  v61 = xmmword_18D319A40;
  sub_18D04BE88((uint64_t)&v60, 0.0);
  v13 = 0;
  v14 = 0;
  v15 = HIDWORD(v61) + 1;
  v16 = v63;
  do
  {
    v17 = *(double *)(v4 + 16) / *(double *)(v4 + v14 + 104);
    v18 = exp(-v17);
    v19 = 1.0 - v18 * v18;
    if (v17 <= 0.00000001)
      v19 = v17 + v17;
    *(double *)&v16[v13] = *(double *)(v4 + v14 + 24) * *(double *)(v4 + v14 + 24) * v19;
    v14 += 8;
    v13 += v15;
  }
  while (v14 != 80);
  v39 = 0xA0000000ALL;
  v37 = &unk_1E25C5FC0;
  v38 = xmmword_18D319A40;
  v40 = &v41;
  LOBYTE(v65) = 0;
  sub_18D05C654((uint64_t)&v60, (uint64_t)&v37, (BOOL *)&v65);
  v44 = 0xA0000000ALL;
  v42 = &unk_1E25C5FC0;
  v43 = xmmword_18D319A40;
  v45 = &v46;
  v57 = 0x10000000ALL;
  v55 = &unk_1E25C6050;
  v56 = xmmword_18D31CEF0;
  v58 = v59;
  v67 = 0x100000028;
  v65 = &unk_1E25C79D0;
  v66 = xmmword_18D3364D0;
  v68 = v69;
  sub_18D04F504((uint64_t)&v37, (uint64_t)&v55, (uint64_t)&v65, (uint64_t)&v42);
  v20 = DWORD1(v43);
  v21 = v43;
  v52 = 0xA0000000ALL;
  v47 = &unk_1E25C5FC0;
  v53 = v54;
  v48 = DWORD1(v43);
  v49 = v43;
  v50 = v43 * DWORD1(v43);
  v51 = DWORD1(v43);
  if (DWORD1(v43))
  {
    v22 = 0;
    v23 = 0;
    v24 = HIDWORD(v43);
    v25 = v45;
    do
    {
      v26 = v22;
      v27 = v23;
      for (j = v21; j; --j)
      {
        v54[v27] = v25[v26];
        v27 += v20;
        ++v26;
      }
      ++v23;
      v22 += v24;
    }
    while (v23 != v20);
  }
  v72 = 0x10000000ALL;
  v70 = &unk_1E25C6020;
  v71 = xmmword_18D31CEF0;
  v73 = &v74;
  v67 = 0xA0000000ALL;
  v65 = &unk_1E25C5FC0;
  v66 = xmmword_18D319A40;
  v68 = v69;
  v57 = 0xA0000000ALL;
  v55 = &unk_1E25C5FC0;
  v56 = xmmword_18D319A40;
  v58 = v59;
  sub_18D05C770((uint64_t)&v47, (uint64_t)&v70, (uint64_t)&v65, (uint64_t)&v55);
  sub_18D053AA8(v3, (uint64_t)&v55);
  return 0;
}

uint64_t sub_18D27AA04(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  char *v19;
  uint64_t v25;
  double v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  double v46;
  double v47;
  int v48;
  int v49;
  uint64_t v50;
  _BYTE *v51;
  char v52;
  void *v54;
  __int128 v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE v58[800];
  void *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9)
    v10 = *(_DWORD *)(a1 + 12);
  else
    v10 = *(_DWORD *)(a1 + 8);
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11 && v10 == 10;
  if (v12
    && ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 10) : (v18 = 0),
        v18))
  {
    v25 = 0;
    v26 = *a3;
    do
    {
      v27 = *(_QWORD *)&a3[v25 + 11];
      v28 = (v27 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
      v29 = ((v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
      if (v27 >= 0)
      {
        v29 = 0;
        v28 = 0;
      }
      v30 = v27 & 0x7FFFFFFFFFFFFFFFLL;
      if (!v30)
        v28 = 1;
      v31 = v30 <= 0x7FF0000000000000;
      v32 = v30 == 0x7FF0000000000000 || v28;
      if (!v31)
        v32 = 1;
      if ((v32 | v29) == 1)
      {
        LOWORD(v84) = 12;
        LOBYTE(v79) = 4;
        v19 = "f_TenStateGaussMarkov, non-positive time constant specified";
        goto LABEL_23;
      }
      ++v25;
    }
    while (v25 != 10);
    v86 = 0xA0000000ALL;
    v84 = &unk_1E25C5FC0;
    v87 = &v88;
    v85 = xmmword_18D319A40;
    sub_18D04BE88((uint64_t)&v84, 0.0);
    v33 = 0;
    v34 = HIDWORD(v85) + 1;
    v35 = 10;
    v36 = v87;
    do
    {
      v36[v33] = 0x3FF0000000000000;
      v33 += v34;
      --v35;
    }
    while (v35);
    v81 = 0xA0000000ALL;
    v79 = &unk_1E25C5FC0;
    v82 = &v83;
    v80 = xmmword_18D319A40;
    sub_18D04BE88((uint64_t)&v79, 0.0);
    v37 = 0;
    v38 = HIDWORD(v80) + 1;
    v39 = 10;
    v40 = v82;
    do
    {
      v40[v37] = 0x3FF0000000000000;
      v37 += v38;
      --v39;
    }
    while (v39);
    v76 = 0x10000000ALL;
    v74 = &unk_1E25C6020;
    v77 = &v78;
    v75 = xmmword_18D31CEF0;
    sub_18D04BE88((uint64_t)&v74, 0.0);
    v41 = 0;
    v42 = 0;
    v43 = HIDWORD(v85) + 1;
    v44 = v87;
    v45 = v77;
    do
    {
      v46 = v26 / a3[v42 + 11];
      if (v46 <= 1.0e-12)
        v47 = 1.0 - v46;
      else
        v47 = exp(-v46);
      *(double *)&v44[v41] = v47;
      v45[v42] = *(_QWORD *)&a3[v42 + 1];
      ++v42;
      v41 += v43;
    }
    while (v42 != 10);
    v61 = 0x10000000ALL;
    v59 = &unk_1E25C6020;
    v60 = xmmword_18D31CEF0;
    v62 = &v63;
    sub_18D0540FC(a1, (uint64_t)&v74, (uint64_t)&v59);
    v66 = 0x10000000ALL;
    v64 = &unk_1E25C6020;
    v65 = xmmword_18D31CEF0;
    v67 = &v68;
    sub_18D053B2C((uint64_t)&v84, (uint64_t)&v59, (uint64_t)&v64);
    v71 = 0x10000000ALL;
    v69 = &unk_1E25C6020;
    v70 = xmmword_18D31CEF0;
    v72 = &v73;
    sub_18D053FA4((uint64_t)&v74, (uint64_t)&v64, (uint64_t)&v69);
    v56 = 0x10000000ALL;
    v54 = &unk_1E25C6020;
    v55 = xmmword_18D31CEF0;
    v57 = v58;
    sub_18D053FA4((uint64_t)&v69, a2, (uint64_t)&v54);
    sub_18D053AA8(a4, (uint64_t)&v54);
    sub_18D053AA8(a5, (uint64_t)&v84);
    v56 = 0xA0000000ALL;
    v54 = &unk_1E25C5FC0;
    v57 = v58;
    v55 = xmmword_18D319A40;
    sub_18D04BE88((uint64_t)&v54, 0.0);
    v48 = 0;
    v49 = HIDWORD(v55) + 1;
    v50 = 10;
    v51 = v57;
    do
    {
      *(_QWORD *)&v51[8 * v48] = 0x3FF0000000000000;
      v48 += v49;
      --v50;
    }
    while (v50);
    sub_18D053AA8(a6, (uint64_t)&v54);
    return 0;
  }
  else
  {
    LOWORD(v84) = 12;
    LOBYTE(v79) = 4;
    v19 = "f_TenStateGaussMarkov called with inadequate matrices";
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v84, (unsigned __int8 *)&v79, v19, a4, a5, a6, a7, a8, v52);
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18D27AE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  double v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10)
    v11 = *(_DWORD *)(a1 + 12);
  else
    v11 = *(_DWORD *)(a1 + 8);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12 && v11 == 10;
  if (!v13
    || ((v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (v16 = *(_DWORD *)(a2 + 12))
      : (v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (v17 = v15 == 0) : (v17 = 1),
        !v17 ? (v18 = v16 == 10) : (v18 = 0),
        !v18))
  {
    LOWORD(v37) = 12;
    LOBYTE(v32) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, (unsigned __int8 *)&v32, "in_TenStateGaussMarkov called with inadequate matrices", a4, a5, a6, a7, a8, v26);
    return 0xFFFFFFFFLL;
  }
  v52 = *(double *)a3 * a9;
  v59 = *(_OWORD *)(a3 + 104);
  v60 = *(_OWORD *)(a3 + 120);
  v61 = *(_OWORD *)(a3 + 136);
  v62 = *(_OWORD *)(a3 + 152);
  v58 = *(_OWORD *)(a3 + 88);
  v54 = *(_OWORD *)(a3 + 24);
  v55 = *(_OWORD *)(a3 + 40);
  v56 = *(_OWORD *)(a3 + 56);
  v57 = *(_OWORD *)(a3 + 72);
  v53 = *(_OWORD *)(a3 + 8);
  v49 = 0x10000000ALL;
  v47 = &unk_1E25C6020;
  v50 = &v51;
  v48 = xmmword_18D31CEF0;
  sub_18D04BE88((uint64_t)&v47, 0.0);
  v44 = 0x10000000ALL;
  v42 = &unk_1E25C6020;
  v43 = xmmword_18D31CEF0;
  v45 = &v46;
  v39 = 0xA0000000ALL;
  v37 = &unk_1E25C5FC0;
  v38 = xmmword_18D319A40;
  v40 = &v41;
  v34 = 0xA0000000ALL;
  v32 = &unk_1E25C5FC0;
  v33 = xmmword_18D319A40;
  v35 = &v36;
  if (sub_18D27AA04(a1, (uint64_t)&v47, &v52, (uint64_t)&v42, (uint64_t)&v37, (uint64_t)&v32, v24, v25))
    return 0xFFFFFFFFLL;
  sub_18D053AA8(a4, (uint64_t)&v42);
  sub_18D053AA8(a5, (uint64_t)&v37);
  v29 = 0xA0000000ALL;
  v27 = &unk_1E25C5FC0;
  v30 = &v31;
  v28 = xmmword_18D319A40;
  sub_18D04BE88((uint64_t)&v27, 0.0);
  sub_18D053AA8(a6, (uint64_t)&v27);
  return 0;
}

uint64_t sub_18D27B050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  int32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  __int32 v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t (***v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  BOOL v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  BOOL v60;
  int v61;
  uint64_t result;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  int32x4_t v69;
  void *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t (**v78)();
  int32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[2041];
  uint64_t (**v83)();
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t (**v91)();
  int32x4_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  void *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  void *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  void *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  void *v114;
  __int128 v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;

  v13 = MEMORY[0x1E0C80A78]();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = v13;
  v116 = 0x10000000ALL;
  v114 = &unk_1E25C6020;
  v115 = xmmword_18D31CEF0;
  v117 = &v118;
  v111 = 0xA0000000ALL;
  v109 = &unk_1E25C5FC0;
  v110 = xmmword_18D319A40;
  v112 = &v113;
  v106 = 0x10000000ALL;
  v104 = &unk_1E25C6020;
  v105 = xmmword_18D31CEF0;
  v107 = &v108;
  if (*(_DWORD *)(v13 + 2180))
  {
    sub_18D053AA8((uint64_t)&v114, v13 + 1088);
    sub_18D053AA8((uint64_t)&v109, v28 + 1208);
    v29 = v28 + 2048;
  }
  else
  {
    sub_18D053AA8((uint64_t)&v114, v13 + 8);
    sub_18D053AA8((uint64_t)&v109, v28 + 128);
    v29 = v28 + 968;
  }
  sub_18D053AA8((uint64_t)&v104, v29);
  if (v115 <= DWORD1(v115))
    v30 = DWORD1(v115);
  else
    v30 = v115;
  if (DWORD1(v115))
    v31 = (_DWORD)v115 == 0;
  else
    v31 = 1;
  if (v31)
    v32 = 0;
  else
    v32 = v30;
  v33 = *(unsigned int *)(v27 + 8);
  if ((v33 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  v66 = v32;
  v67 = v15;
  v68 = v17;
  v101 = 0x10000000ALL;
  v96 = &unk_1E25C6020;
  v102 = &v103;
  v97 = v33;
  v98 = 1;
  v99 = v33;
  v100 = v33;
  sub_18D04BE88((uint64_t)&v96, 0.0);
  v34 = *(_DWORD *)(a9 + 8);
  v35 = *(_DWORD *)(a9 + 12);
  if (v34 <= v35)
    v36 = *(_DWORD *)(a9 + 12);
  else
    v36 = *(_DWORD *)(a9 + 8);
  if (v35)
    v37 = v34 == 0;
  else
    v37 = 1;
  if (v37)
    v38 = 0;
  else
    v38 = v36;
  v93 = 0x10000002CLL;
  v91 = &off_1E25C7B50;
  if ((v38 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v65 = v27;
  v39 = vdupq_lane_s32((int32x2_t)(v38 | 0x100000000), 0);
  v39.i32[1] = 1;
  v69 = v39;
  v92 = v39;
  v94 = &v95;
  if (v38)
  {
    v40 = 0;
    v41 = 0;
    do
    {
      sub_18D27E618((uint64_t)&v78, *(_QWORD *)(v23 + 32) + v41);
      if (v79.i32[0] <= (unsigned __int32)v79.i32[1])
        v42 = v79.i32[1];
      else
        v42 = v79.i32[0];
      if (v79.i32[1])
        v43 = v79.i32[0] == 0;
      else
        v43 = 1;
      if (v43)
        v44 = 0;
      else
        v44 = v42;
      *(_DWORD *)((char *)v94 + v40) = v44;
      v41 += 48;
      v40 += 4;
    }
    while (48 * v38 != v41);
  }
  v64 = v19;
  v45 = 0;
  v88 = 0x10000002CLL;
  v83 = &off_1E25C7B50;
  v84 = v38;
  v85 = 1;
  v86 = v38;
  v87 = v38;
  v89 = &v90;
  v80 = 0x10000002CLL;
  v78 = &off_1E25C7A60;
  v81 = 0;
  *(_QWORD *)&v46 = 0x100000001;
  *((_QWORD *)&v46 + 1) = 0x100000001;
  do
  {
    v47 = &(&v78)[v45];
    v47[8] = (uint64_t (**)())0x100000001;
    v47[5] = (uint64_t (**)())&unk_1E25C6A40;
    *((_OWORD *)v47 + 3) = v46;
    v47[9] = (uint64_t (**)())&v82[v45 * 8];
    v45 += 6;
  }
  while (v45 != 264);
  v79 = v69;
  ((void (*)(uint64_t))v78[2])((uint64_t)&v78);
  if ((int)v38 >= 1)
  {
    v48 = 0;
    v49 = 0;
    do
    {
      sub_18D27E618((uint64_t)&v70, *(_QWORD *)(v21 + 32) + v48);
      v50 = v89;
      *(_DWORD *)((char *)v89 + v49) = v71;
      v51 = *(_DWORD *)((char *)v50 + v49);
      if (v51 < 0)
        __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
      v75 = 0x100000001;
      v70 = &unk_1E25C6A40;
      v76 = &v77;
      v71 = v51;
      v72 = 1;
      v73 = v51;
      v74 = v51;
      sub_18D04BE88((uint64_t)&v70, 0.0);
      sub_18D053AA8(v81 + v48, (uint64_t)&v70);
      v49 += 4;
      v48 += 48;
    }
    while (4 * v38 != v49);
  }
  v52 = *(_DWORD *)(v68 + 8);
  v53 = *(_DWORD *)(v68 + 12);
  if (v52 <= v53)
    v54 = *(_DWORD *)(v68 + 12);
  else
    v54 = *(_DWORD *)(v68 + 8);
  if (v53)
    v55 = v52 == 0;
  else
    v55 = 1;
  if (v55)
    v56 = 0;
  else
    v56 = v54;
  v57 = *(_DWORD *)(a12 + 8);
  v58 = *(_DWORD *)(a12 + 12);
  if (v57 <= v58)
    v59 = *(_DWORD *)(a12 + 12);
  else
    v59 = *(_DWORD *)(a12 + 8);
  if (v58)
    v60 = v57 == 0;
  else
    v60 = 1;
  if (v60)
    v61 = 0;
  else
    v61 = v59;
  result = sub_18D28050C(v28, v66, (uint64_t)&v114, (uint64_t)&v109, (uint64_t)&v104, v33, (uint64_t)&v96, v65, (uint64_t)&v91, v25, v23, (uint64_t)&v83, (uint64_t)&v78, v21, v56, v64, v68, v67, v38,
             a9,
             a10,
             v61,
             a11,
             a12,
             a13,
             v28 + 4192);
  for (i = 263; i != -1; i -= 6)
    (&v78)[i] = (uint64_t (**)())&unk_1E25C5E70;
  return result;
}

void sub_18D27B544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t i;

  for (i = 2104; i != -8; i -= 48)
    *(_QWORD *)(&a47 + i) = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D27B598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int32x2_t v30;
  int32x4_t v31;
  unsigned int v32;
  int32x4_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int *v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int *v61;
  _DWORD *v62;
  int v63;
  unsigned int (*v64)(uint64_t (***)(), void **, _QWORD, void **, uint64_t (***)(), uint64_t (***)());
  uint64_t v65;
  int *v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  _BYTE *v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  int v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int *v104;
  _DWORD *v105;
  int v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int *v117;
  _DWORD *v118;
  int v119;
  void **v120;
  void **v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int *v131;
  _DWORD *v132;
  int v133;
  uint64_t v134;
  char v135;
  __int128 v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  int *v144;
  _DWORD *v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  int *v150;
  int v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  void **v156;
  void **v157;
  uint64_t v158;
  int32x4_t v159;
  uint64_t v160;
  void **v161;
  uint64_t v162;
  int *v163;
  uint64_t *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  __int128 v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  int i;
  int v175;
  char v176;
  __int128 v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  int j;
  int v183;
  uint64_t result;
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  int v211;
  int v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t (**v218)();
  __int128 v219;
  uint64_t v220;
  _DWORD *v221;
  _DWORD v222[800];
  void *v223;
  __int128 v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  void *v228;
  __int128 v229;
  uint64_t v230;
  _BYTE *v231;
  _BYTE v232[800];
  void *v233;
  __int128 v234;
  uint64_t v235;
  _DWORD *v236;
  _DWORD v237[200];
  uint64_t (**v238)();
  __int128 v239;
  uint64_t v240;
  _BYTE *v241;
  _BYTE v242[800];
  uint64_t (**v243)();
  __int128 v244;
  uint64_t v245;
  _BYTE *v246;
  _BYTE v247[800];
  uint64_t (**v248)();
  __int128 v249;
  uint64_t v250;
  _DWORD *v251;
  _DWORD v252[200];
  uint64_t (**v253)();
  __int128 v254;
  uint64_t v255;
  _DWORD *v256;
  _DWORD v257[800];
  void *v258;
  __int128 v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  void *v263;
  __int128 v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  void *v268;
  __int128 v269;
  uint64_t v270;
  _BYTE *v271;
  _BYTE v272[800];
  void *v273;
  __int128 v274;
  uint64_t v275;
  _BYTE *v276;
  _BYTE v277[800];
  void *v278;
  __int128 v279;
  uint64_t v280;
  double *v281;
  _BYTE v282[800];
  _BYTE v283[120];
  void *v284;
  __int128 v285;
  uint64_t v286;
  _BYTE *v287;
  _BYTE v288[800];
  _BYTE v289[120];
  void *v290;
  __int128 v291;
  uint64_t v292;
  int *v293;
  uint64_t v294;
  void *v295;
  __int128 v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD v299[6];
  int v300;
  int v301;
  int v302;
  int v303;
  uint64_t v304;
  void **v305;
  void *v306;
  __int128 v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD v310[101];
  int v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  void **v316;
  void *v317;
  __int128 v318;
  uint64_t v319;
  _QWORD *v320;
  _QWORD v321[101];
  int32x4_t v322;
  uint64_t v323;
  void **v324;
  void *v325;
  __int128 v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t (**v330)();
  _BYTE v331[24];
  _DWORD *v332;
  _DWORD v333[802];

  v0 = MEMORY[0x1E0C80A78]();
  v204 = v2;
  v205 = v1;
  v209 = v3;
  v5 = v4;
  v6 = v0;
  if (!*(_DWORD *)(v0 + 2180))
  {
    sub_18D053AA8(v0 + 1088, v0 + 8);
    sub_18D053AA8(v6 + 1208, v6 + 128);
    sub_18D053AA8(v6 + 2048, v6 + 968);
  }
  if ((*(_DWORD *)(v5 + 8) & 0x80000000) != 0)
    goto LABEL_229;
  v7 = *(_DWORD *)(v6 + 1096);
  v8 = *(unsigned int *)(v5 + 8);
  v9 = *(_DWORD *)(v6 + 1100);
  if (v7 <= v9)
    v10 = *(_DWORD *)(v6 + 1100);
  else
    v10 = *(_DWORD *)(v6 + 1096);
  if (v9)
    v11 = v7 == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = v10;
  v207 = v6 + 1088;
  v215 = 0x10000000ALL;
  v210 = &unk_1E25C6020;
  v216 = &v217;
  v211 = v8;
  v212 = 1;
  v213 = v8;
  v200 = v8;
  v214 = v8;
  sub_18D04BE88((uint64_t)&v210, 0.0);
  v13 = *(_DWORD *)(v205 + 8);
  v14 = *(_DWORD *)(v205 + 12);
  if (v13 <= v14)
    v15 = *(_DWORD *)(v205 + 12);
  else
    v15 = *(_DWORD *)(v205 + 8);
  if (v14)
    v16 = v13 == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = v15;
  v208 = v17;
  v18 = *(double *)(v6 + 4256);
  v203 = *(unsigned __int8 *)(v6 + 4281);
  sub_18D285700((uint64_t)&v253, v209, 1);
  *(_DWORD *)&v331[20] = 1;
  v332 = v333;
  v19 = DWORD1(v254);
  *(_DWORD *)v331 = 1;
  *(_DWORD *)&v331[4] = DWORD1(v254);
  *(_DWORD *)&v331[8] = DWORD1(v254);
  *(_QWORD *)&v331[12] = 0x100000001;
  if (DWORD1(v254))
  {
    v20 = 0;
    v21 = v256;
    v22 = v254;
    v23 = v254 - 1;
    v24 = 1;
    do
    {
      v25 = v21[v22 * v20];
      v26 = v24;
      v27 = v23;
      if (v22 >= 2)
      {
        do
        {
          v25 += v21[v26++];
          --v27;
        }
        while (v27);
      }
      v333[v20++] = v25;
      v24 += v22;
    }
    while (v20 != v19);
  }
  if (!*(_DWORD *)(v6 + 1096) || !*(_DWORD *)(v6 + 1100))
  {
    if ((v12 & 0x80000000) == 0)
    {
      *(_QWORD *)&v331[16] = 0x10000000ALL;
      v330 = (uint64_t (**)())&unk_1E25C6020;
      v332 = v333;
      *(_DWORD *)v331 = v12;
      *(_DWORD *)&v331[4] = 1;
      *(_DWORD *)&v331[8] = v12;
      *(_DWORD *)&v331[12] = v12;
      sub_18D04BE88((uint64_t)&v330, 0.0);
      sub_18D053AA8(v207, (uint64_t)&v330);
      goto LABEL_31;
    }
LABEL_229:
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
LABEL_31:
  if (!*(_DWORD *)(v6 + 1216) || !*(_DWORD *)(v6 + 1220))
  {
    if ((v12 & 0x80000000) != 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
    *(_QWORD *)&v331[16] = 0xA0000000ALL;
    v330 = (uint64_t (**)())&unk_1E25C5FC0;
    v332 = v333;
    *(_DWORD *)v331 = v12;
    *(_DWORD *)&v331[4] = v12;
    *(_DWORD *)&v331[8] = v12 * v12;
    *(_DWORD *)&v331[12] = v12;
    sub_18D04BE88((uint64_t)&v330, 0.0);
    sub_18D053AA8(v6 + 1208, (uint64_t)&v330);
  }
  if (!*(_DWORD *)(v6 + 2056) || !*(_DWORD *)(v6 + 2060))
  {
    *(_QWORD *)&v331[16] = 0x10000000ALL;
    v330 = (uint64_t (**)())&unk_1E25C6020;
    *(_OWORD *)v331 = xmmword_18D31CEF0;
    v332 = v333;
    sub_18D053B2C(v6 + 1208, v207, (uint64_t)&v330);
    sub_18D053AA8(v6 + 2048, (uint64_t)&v330);
  }
  if ((v12 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  v196 = v6 + 2048;
  v197 = v6 + 1208;
  *(_QWORD *)&v331[16] = 0xA0000000ALL;
  v330 = (uint64_t (**)())&unk_1E25C5FC0;
  v332 = v333;
  *(_DWORD *)v331 = v200;
  *(_DWORD *)&v331[4] = v12;
  *(_DWORD *)&v331[8] = v12 * v200;
  *(_DWORD *)&v331[12] = v200;
  sub_18D04BE88((uint64_t)&v330, 0.0);
  v195 = v6 + 2392;
  sub_18D053AA8(v6 + 2392, (uint64_t)&v330);
  *(_QWORD *)&v331[16] = 0x10000000ALL;
  v330 = (uint64_t (**)())&unk_1E25C6020;
  v332 = v333;
  v28 = 1;
  *(_DWORD *)v331 = v200;
  *(_DWORD *)&v331[4] = 1;
  *(_DWORD *)&v331[8] = v200;
  *(_DWORD *)&v331[12] = v200;
  v29 = v5;
  sub_18D04BE88((uint64_t)&v330, 0.0);
  v194 = v6 + 3232;
  sub_18D053AA8(v6 + 3232, (uint64_t)&v330);
  v193 = v6 + 3352;
  sub_18D053AA8(v6 + 3352, v5);
  *(_DWORD *)(v6 + 2180) = 1;
  v30.i32[1] = 1;
  v31 = vdupq_lane_s32((int32x2_t)(v12 | 0x100000000), 0);
  v31.i32[1] = 1;
  *(int32x4_t *)(v6 + 16) = v31;
  v323 = 0x100000001;
  v322 = 0uLL;
  v321[100] = &off_1E25C6890;
  v327 = 0x10000000ALL;
  v324 = 0;
  v325 = &unk_1E25C6020;
  v326 = xmmword_18D31CEF0;
  v328 = &v329;
  v32 = v208;
  if ((v208 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v30.i32[0] = v208;
  v33 = vdupq_lane_s32(v30, 0);
  v33.i32[1] = 1;
  v322 = v33;
  v201 = v6 + 8;
  v324 = &v325;
  v315 = 0x100000001;
  v310[100] = &off_1E25C6860;
  v319 = 0xA0000000ALL;
  v318 = xmmword_18D319A40;
  v320 = v321;
  v311 = v208;
  v312 = 1;
  v313 = v208;
  v314 = v208;
  v317 = &unk_1E25C5FC0;
  v316 = &v317;
  v304 = 0x100000001;
  v299[5] = &off_1E25C6860;
  v308 = 0xA0000000ALL;
  v307 = xmmword_18D319A40;
  v309 = v310;
  v300 = v208;
  v301 = 1;
  v302 = v208;
  v303 = v208;
  v306 = &unk_1E25C5FC0;
  v305 = &v306;
  v297 = 0x10000000ALL;
  v295 = &unk_1E25C6050;
  v296 = xmmword_18D31CEF0;
  v298 = v299;
  v292 = 0x10000000ALL;
  v290 = &unk_1E25C6050;
  v291 = xmmword_18D31CEF0;
  v293 = (int *)&v294;
  v199 = v5;
  v192 = v6;
  if ((_DWORD)v208)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = *(_QWORD *)(v209 + 32);
    do
    {
      v38 = *(unsigned int *)(v37 + 4 * v34);
      v220 = 0xA00000001;
      v218 = &off_1E25C67D0;
      v221 = v222;
      if ((_DWORD)v38 == 1)
      {
        v39 = 0;
        *(_QWORD *)&v40 = 0x100000001;
        *((_QWORD *)&v40 + 1) = 0x100000001;
        v219 = v40;
        v222[0] = 0;
        v41 = 1;
        LODWORD(v38) = 1;
      }
      else if ((int)v38 <= 0)
      {
        v41 = 0;
        LODWORD(v38) = 0;
        v219 = 0uLL;
        v39 = 1;
      }
      else
      {
        v42 = 0;
        LODWORD(v219) = 1;
        DWORD1(v219) = v38;
        *((_QWORD *)&v219 + 1) = v38 | 0x100000000;
        do
        {
          v222[v42] = v42;
          ++v42;
        }
        while (v38 != v42);
        v39 = 0;
        v41 = 1;
      }
      v255 = 0x10000000ALL;
      v253 = (uint64_t (**)())&unk_1E25C6050;
      v256 = v257;
      *(_QWORD *)&v254 = __PAIR64__(v41, v38);
      DWORD2(v254) = v38 * v41;
      HIDWORD(v254) = v38;
      if ((_DWORD)v38)
      {
        v43 = 0;
        v44 = 0;
        do
        {
          if ((v39 & 1) == 0)
          {
            v45 = 0;
            do
            {
              v257[v44 + HIDWORD(v254) * v45] = v222[v43 + v45];
              ++v45;
            }
            while (v41 != v45);
          }
          ++v44;
          v43 += v41;
        }
        while (v44 != (_DWORD)v38);
        v46 = v254;
        v41 = DWORD1(v254);
      }
      else
      {
        v46 = 0;
      }
      *(_QWORD *)&v331[16] = 0x10000000ALL;
      v330 = (uint64_t (**)())&unk_1E25C6050;
      v332 = v333;
      *(_DWORD *)v331 = v46;
      *(_DWORD *)&v331[4] = v41;
      v47 = (v46 * v41);
      *(_DWORD *)&v331[8] = v47;
      *(_DWORD *)&v331[12] = v46;
      if ((int)v47 >= 1)
      {
        v48 = v257;
        v49 = v333;
        do
        {
          v50 = *v48++;
          *v49++ = v50 + v36;
          --v47;
        }
        while (v47);
      }
      sub_18D053D7C((uint64_t)&v295, (uint64_t)&v330);
      v51 = *(unsigned int *)(*(_QWORD *)(v209 + 32) + 4 * (*(_DWORD *)(v209 + 20) + (int)v34));
      v220 = 0xA00000001;
      v218 = &off_1E25C67D0;
      v221 = v222;
      if ((_DWORD)v51 == 1)
      {
        v52 = 0;
        *(_QWORD *)&v53 = 0x100000001;
        *((_QWORD *)&v53 + 1) = 0x100000001;
        v219 = v53;
        v222[0] = 0;
        v54 = 1;
        LODWORD(v51) = 1;
      }
      else if ((int)v51 <= 0)
      {
        v54 = 0;
        LODWORD(v51) = 0;
        v219 = 0uLL;
        v52 = 1;
      }
      else
      {
        v55 = 0;
        LODWORD(v219) = 1;
        DWORD1(v219) = v51;
        *((_QWORD *)&v219 + 1) = v51 | 0x100000000;
        do
        {
          v222[v55] = v55;
          ++v55;
        }
        while (v51 != v55);
        v52 = 0;
        v54 = 1;
      }
      v255 = 0x10000000ALL;
      v253 = (uint64_t (**)())&unk_1E25C6050;
      v256 = v257;
      *(_QWORD *)&v254 = __PAIR64__(v54, v51);
      DWORD2(v254) = v51 * v54;
      HIDWORD(v254) = v51;
      if ((_DWORD)v51)
      {
        v56 = 0;
        v57 = 0;
        do
        {
          if ((v52 & 1) == 0)
          {
            v58 = 0;
            do
            {
              v257[v57 + HIDWORD(v254) * v58] = v222[v56 + v58];
              ++v58;
            }
            while (v54 != v58);
          }
          ++v57;
          v56 += v54;
        }
        while (v57 != (_DWORD)v51);
        v59 = v254;
        v54 = DWORD1(v254);
      }
      else
      {
        v59 = 0;
      }
      *(_QWORD *)&v331[16] = 0x10000000ALL;
      v330 = (uint64_t (**)())&unk_1E25C6050;
      v332 = v333;
      *(_DWORD *)v331 = v59;
      *(_DWORD *)&v331[4] = v54;
      v60 = (v59 * v54);
      *(_DWORD *)&v331[8] = v60;
      *(_DWORD *)&v331[12] = v59;
      if ((int)v60 >= 1)
      {
        v61 = v257;
        v62 = v333;
        do
        {
          v63 = *v61++;
          *v62++ = v63 + v35;
          --v60;
        }
        while (v60);
      }
      sub_18D053D7C((uint64_t)&v290, (uint64_t)&v330);
      v280 = 0x10000000ALL;
      v278 = &unk_1E25C6020;
      v279 = xmmword_18D31CEF0;
      v281 = (double *)v282;
      *(_QWORD *)&v331[16] = 0xA0000000ALL;
      v330 = (uint64_t (**)())&unk_1E25C5FC0;
      *(_OWORD *)v331 = xmmword_18D319A40;
      v332 = v333;
      v255 = 0xA0000000ALL;
      v253 = (uint64_t (**)())&unk_1E25C5FC0;
      v254 = xmmword_18D319A40;
      v256 = v257;
      v64 = *(unsigned int (**)(uint64_t (***)(), void **, _QWORD, void **, uint64_t (***)(), uint64_t (***)()))(*(_QWORD *)(v205 + 32) + 8 * v34);
      sub_18D286D24((uint64_t)&v218, v207, (uint64_t)&v295);
      v65 = (DWORD1(v291) * v291);
      v286 = 0x10000000ALL;
      v284 = &unk_1E25C6020;
      *(_QWORD *)&v285 = v291;
      *((_QWORD *)&v285 + 1) = __PAIR64__(v291, v65);
      v287 = v288;
      if ((_DWORD)v65)
      {
        v66 = v293;
        v67 = v216;
        v68 = v288;
        do
        {
          v69 = *v66++;
          *v68++ = v67[v69];
          --v65;
        }
        while (v65);
      }
      if (v64(&v218, &v284, *(_QWORD *)(*(_QWORD *)(v204 + 32) + 8 * v34), &v278, &v330, &v253))
      {
        *(_BYTE *)(v192 + 2176) = 0;
        return 20;
      }
      sub_18D286D24((uint64_t)&v218, v201, (uint64_t)&v295);
      sub_18D285790((uint64_t)&v218, SDWORD2(v279), v281);
      sub_18D053AA8((uint64_t)&v324[15 * v34], (uint64_t)&v278);
      v220 = 0xA0000000ALL;
      v218 = (uint64_t (**)())&unk_1E25C5FC0;
      v219 = xmmword_18D319A40;
      v221 = v222;
      v275 = 0x10000000ALL;
      v273 = &unk_1E25C6050;
      v274 = xmmword_18D31CEF0;
      v276 = v277;
      v270 = 0x10000000ALL;
      v268 = &unk_1E25C6050;
      v269 = xmmword_18D31CEF0;
      v271 = v272;
      v286 = 0x100000028;
      v284 = &unk_1E25C79D0;
      v285 = xmmword_18D3364D0;
      v287 = v288;
      v70 = sub_18D054568((uint64_t)&v330, (uint64_t)&v273, (uint64_t)&v268, (uint64_t)&v284, (uint64_t)&v218);
      sub_18D053AA8((uint64_t)&v316[105 * v34], (uint64_t)&v218);
      *(_QWORD *)&v71 = sub_18D053AA8((uint64_t)&v305[105 * v34], (uint64_t)&v253).n128_u64[0];
      v28 &= v70 <= v18;
      v37 = *(_QWORD *)(v209 + 32);
      v36 += *(_DWORD *)(v37 + 4 * v34);
      v35 += *(_DWORD *)(v37 + 4 * (*(_DWORD *)(v209 + 20) + (int)v34++));
      v32 = v208;
    }
    while (v34 != v208);
    v6 = v192;
    v29 = v5;
    if ((v28 & 1) != 0)
      goto LABEL_84;
    LOWORD(v330) = 2;
    LOBYTE(v253) = 2;
    v185 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v192 + 2344), "Predict state Jacobian matrix is not invertible.", v71);
    if (*(char *)(v192 + 2367) >= 0)
      LOBYTE(v191) = v185;
    else
      v191 = *(_QWORD *)(v192 + 2344);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v330, (unsigned __int8 *)&v253, "%s", v186, v187, v188, v189, v190, v191);
    sub_18D053AA8(v192 + 128, v197);
    *(_QWORD *)&v331[16] = 0x10000000ALL;
    v330 = (uint64_t (**)())&unk_1E25C6020;
    *(_OWORD *)v331 = xmmword_18D31CEF0;
    v332 = v333;
    sub_18D053B2C(v192 + 128, v201, (uint64_t)&v330);
    sub_18D053AA8(v192 + 968, (uint64_t)&v330);
    *(_QWORD *)&v331[16] = 0xA0000000ALL;
    v330 = (uint64_t (**)())&unk_1E25C5FC0;
    v332 = v333;
    *(_DWORD *)v331 = v200;
    *(_DWORD *)&v331[4] = v12;
    *(_DWORD *)&v331[8] = v12 * v200;
    *(_DWORD *)&v331[12] = v200;
    sub_18D04BE88((uint64_t)&v330, 0.0);
    sub_18D053AA8(v195, (uint64_t)&v330);
    *(_QWORD *)&v331[16] = 0x10000000ALL;
    v330 = (uint64_t (**)())&unk_1E25C6020;
    v332 = v333;
    *(_DWORD *)v331 = v200;
    *(_DWORD *)&v331[4] = 1;
    *(_DWORD *)&v331[8] = v200;
    *(_DWORD *)&v331[12] = v200;
    sub_18D04BE88((uint64_t)&v330, 0.0);
    sub_18D053AA8(v194, (uint64_t)&v330);
    sub_18D053AA8(v193, v5);
    *(_DWORD *)(v192 + 2180) = 0;
    *(_BYTE *)(v192 + 2176) = 0;
    return 21;
  }
  else
  {
LABEL_84:
    if (v203)
      v72 = v32;
    else
      v72 = 1;
    v198 = v72;
    sub_18D064F78((uint64_t)v289, v207);
    sub_18D27FD68((uint64_t)&v284, v197);
    v73 = v12;
    sub_18D064F78((uint64_t)v283, v196);
    *(_QWORD *)(v6 + 2408) = 0;
    *(_QWORD *)(v6 + 2400) = 0;
    *(_QWORD *)(v6 + 3248) = 0;
    *(_QWORD *)(v6 + 3240) = 0;
    *(_QWORD *)(v6 + 3368) = 0;
    *(_QWORD *)(v6 + 3360) = 0;
    v280 = 0xA0000000ALL;
    v278 = &unk_1E25C5FC0;
    v279 = xmmword_18D319A40;
    v281 = (double *)v282;
    v275 = 0xA0000000ALL;
    v273 = &unk_1E25C5FC0;
    v276 = v277;
    LODWORD(v274) = v12;
    DWORD1(v274) = v12;
    DWORD2(v274) = v274 * v274;
    HIDWORD(v274) = v12;
    sub_18D04BE88((uint64_t)&v273, 0.0);
    if ((_DWORD)v12)
    {
      v74 = 0;
      v75 = HIDWORD(v274) + 1;
      v76 = v276;
      v77 = v12;
      do
      {
        *(_QWORD *)&v76[8 * v74] = 0x3FF0000000000000;
        v74 += v75;
        --v77;
      }
      while (v77);
    }
    v270 = 0xA0000000ALL;
    v268 = &unk_1E25C5FC0;
    v269 = xmmword_18D319A40;
    v271 = v272;
    v265 = 0x10000000ALL;
    v263 = &unk_1E25C6020;
    v264 = xmmword_18D31CEF0;
    v266 = &v267;
    v260 = 0x10000000ALL;
    v258 = &unk_1E25C6020;
    v259 = xmmword_18D31CEF0;
    v261 = &v262;
    if ((int)v198 >= 1)
    {
      v78 = 0;
      v79 = 0;
      v206 = 0;
      v80 = v12;
      do
      {
        if (v203)
        {
          v81 = v206;
          if (v206)
          {
            if ((v80 & 0x80000000) != 0)
              __assert_rtn("Eye", "cnmatrix.h", 2094, "n >= 0");
            v82 = v29;
            v255 = 0xA0000000ALL;
            v253 = (uint64_t (**)())&unk_1E25C5FC0;
            v256 = v257;
            LODWORD(v254) = v80;
            DWORD1(v254) = v80;
            DWORD2(v254) = v80 * v80;
            HIDWORD(v254) = v80;
            v83 = v80;
            sub_18D04BE88((uint64_t)&v253, 0.0);
            if (v83)
            {
              v84 = 0;
              v85 = HIDWORD(v254) + 1;
              v86 = v256;
              v87 = v83;
              do
              {
                *(_QWORD *)&v86[2 * v84] = 0x3FF0000000000000;
                v84 += v85;
                --v87;
              }
              while (v87);
            }
            sub_18D286E0C((uint64_t)&v330, (uint64_t)&v273, (uint64_t)&v295, (uint64_t)&v295);
            sub_18D285800((uint64_t)&v330, (uint64_t)&v253);
            v29 = v82;
            v81 = v206;
          }
          v88 = *(unsigned int *)(*(_QWORD *)(v209 + 32) + 4 * v81);
          v220 = 0xA00000001;
          v218 = &off_1E25C67D0;
          v221 = v222;
          if ((_DWORD)v88 == 1)
          {
            v89 = 0;
            *(_QWORD *)&v90 = 0x100000001;
            *((_QWORD *)&v90 + 1) = 0x100000001;
            v219 = v90;
            v222[0] = 0;
            v91 = 1;
            LODWORD(v88) = 1;
          }
          else if ((int)v88 <= 0)
          {
            v91 = 0;
            LODWORD(v88) = 0;
            v219 = 0uLL;
            v89 = 1;
          }
          else
          {
            v125 = 0;
            LODWORD(v219) = 1;
            DWORD1(v219) = v88;
            *((_QWORD *)&v219 + 1) = v88 | 0x100000000;
            do
            {
              v222[v125] = v125;
              ++v125;
            }
            while (v88 != v125);
            v89 = 0;
            v91 = 1;
          }
          v255 = 0x10000000ALL;
          v253 = (uint64_t (**)())&unk_1E25C6050;
          v256 = v257;
          *(_QWORD *)&v254 = __PAIR64__(v91, v88);
          DWORD2(v254) = v88 * v91;
          HIDWORD(v254) = v88;
          if ((_DWORD)v88)
          {
            v126 = 0;
            v127 = 0;
            do
            {
              if ((v89 & 1) == 0)
              {
                v128 = 0;
                do
                {
                  v257[v127 + HIDWORD(v254) * v128] = v222[v126 + v128];
                  ++v128;
                }
                while (v91 != v128);
              }
              ++v127;
              v126 += v91;
            }
            while (v127 != (_DWORD)v88);
            v129 = v254;
            v91 = DWORD1(v254);
          }
          else
          {
            v129 = 0;
          }
          *(_QWORD *)&v331[16] = 0x10000000ALL;
          v330 = (uint64_t (**)())&unk_1E25C6050;
          v332 = v333;
          *(_DWORD *)v331 = v129;
          *(_DWORD *)&v331[4] = v91;
          v130 = (v129 * v91);
          *(_DWORD *)&v331[8] = v130;
          *(_DWORD *)&v331[12] = v129;
          if ((int)v130 >= 1)
          {
            v131 = v257;
            v132 = v333;
            do
            {
              v133 = *v131++;
              *v132++ = v133 + v79;
              --v130;
            }
            while (v130);
          }
          sub_18D053D7C((uint64_t)&v295, (uint64_t)&v330);
          v134 = *(unsigned int *)(*(_QWORD *)(v209 + 32) + 4 * (*(_DWORD *)(v209 + 20) + (int)v81));
          v220 = 0xA00000001;
          v218 = &off_1E25C67D0;
          v221 = v222;
          if ((_DWORD)v134 == 1)
          {
            v135 = 0;
            *(_QWORD *)&v136 = 0x100000001;
            *((_QWORD *)&v136 + 1) = 0x100000001;
            v219 = v136;
            v222[0] = 0;
            v137 = 1;
            LODWORD(v134) = 1;
          }
          else if ((int)v134 <= 0)
          {
            v137 = 0;
            LODWORD(v134) = 0;
            v219 = 0uLL;
            v135 = 1;
          }
          else
          {
            v138 = 0;
            LODWORD(v219) = 1;
            DWORD1(v219) = v134;
            *((_QWORD *)&v219 + 1) = v134 | 0x100000000;
            do
            {
              v222[v138] = v138;
              ++v138;
            }
            while (v134 != v138);
            v135 = 0;
            v137 = 1;
          }
          v255 = 0x10000000ALL;
          v253 = (uint64_t (**)())&unk_1E25C6050;
          v256 = v257;
          *(_QWORD *)&v254 = __PAIR64__(v137, v134);
          DWORD2(v254) = v134 * v137;
          HIDWORD(v254) = v134;
          if ((_DWORD)v134)
          {
            v139 = 0;
            v140 = 0;
            do
            {
              if ((v135 & 1) == 0)
              {
                v141 = 0;
                do
                {
                  v257[v140 + HIDWORD(v254) * v141] = v222[v139 + v141];
                  ++v141;
                }
                while (v137 != v141);
              }
              ++v140;
              v139 += v137;
            }
            while (v140 != (_DWORD)v134);
            v142 = v254;
            v137 = DWORD1(v254);
          }
          else
          {
            v142 = 0;
          }
          *(_QWORD *)&v331[16] = 0x10000000ALL;
          v330 = (uint64_t (**)())&unk_1E25C6050;
          v332 = v333;
          *(_DWORD *)v331 = v142;
          *(_DWORD *)&v331[4] = v137;
          v143 = (v142 * v137);
          *(_DWORD *)&v331[8] = v143;
          *(_DWORD *)&v331[12] = v142;
          if ((int)v143 >= 1)
          {
            v144 = v257;
            v145 = v333;
            do
            {
              v146 = *v144++;
              *v145++ = v146 + v78;
              --v143;
            }
            while (v143);
          }
          sub_18D053D7C((uint64_t)&v290, (uint64_t)&v330);
          v147 = *(_DWORD *)(v29 + 20);
          v148 = *(_QWORD *)(v29 + 32);
          v149 = DWORD2(v291);
          v150 = v293;
          *(_QWORD *)&v331[16] = 0xA0000000ALL;
          v330 = (uint64_t (**)())&unk_1E25C5FC0;
          *(_DWORD *)v331 = DWORD2(v291);
          *(_DWORD *)&v331[4] = DWORD2(v291);
          *(_DWORD *)&v331[8] = *(_DWORD *)v331 * *(_DWORD *)v331;
          *(_DWORD *)&v331[12] = DWORD2(v291);
          v332 = v333;
          if (DWORD2(v291))
          {
            v151 = 0;
            v152 = 0;
            do
            {
              v153 = 0;
              v154 = v150[v152] * v147;
              do
              {
                *(_QWORD *)&v333[2 * (v151 + v153)] = *(_QWORD *)(v148 + 8 * (v150[v153] + v154));
                ++v153;
              }
              while (v149 != v153);
              ++v152;
              v151 += v149;
            }
            while (v152 != v149);
          }
          sub_18D053AA8((uint64_t)&v278, (uint64_t)&v330);
          v155 = *(_QWORD *)(v209 + 32);
          v124 = *(_DWORD *)(v155 + 4 * (*(_DWORD *)(v209 + 20) + (int)v81));
          v202 = *(_DWORD *)(v155 + 4 * v81);
          v156 = v316;
          sub_18D286E0C((uint64_t)&v330, (uint64_t)&v273, (uint64_t)&v295, (uint64_t)&v295);
          sub_18D285800((uint64_t)&v330, (uint64_t)&v156[105 * v206]);
          if ((v124 & 0x80000000) != 0)
            __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
          *(_QWORD *)&v331[16] = 0xA0000000ALL;
          v330 = (uint64_t (**)())&unk_1E25C5FC0;
          v332 = v333;
          *(_DWORD *)v331 = v12;
          *(_DWORD *)&v331[4] = v124;
          *(_DWORD *)&v331[8] = v124 * v12;
          *(_DWORD *)&v331[12] = v12;
          sub_18D04BE88((uint64_t)&v330, 0.0);
          sub_18D053AA8((uint64_t)&v268, (uint64_t)&v330);
          v157 = v305;
          v158 = DWORD1(v269);
          v255 = 0x10000000ALL;
          v253 = (uint64_t (**)())&unk_1E25C6050;
          if ((DWORD1(v269) & 0x80000000) != 0)
            __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
          v159 = vdupq_lane_s32((int32x2_t)(DWORD1(v269) | 0x100000000), 0);
          v159.i32[1] = 1;
          v254 = (__int128)v159;
          v256 = v257;
          if (DWORD1(v269))
          {
            v160 = 0;
            do
            {
              v257[v160] = v160;
              ++v160;
            }
            while (v158 != v160);
          }
          sub_18D286E0C((uint64_t)&v330, (uint64_t)&v268, (uint64_t)&v295, (uint64_t)&v253);
          sub_18D285800((uint64_t)&v330, (uint64_t)&v157[105 * v206]);
          sub_18D053AA8((uint64_t)&v263, (uint64_t)v289);
          v161 = v324;
          sub_18D286D24((uint64_t)&v330, (uint64_t)&v263, (uint64_t)&v295);
          sub_18D285790((uint64_t)&v330, (int)v161[15 * v206 + 2], (double *)v161[15 * v206 + 4]);
          v162 = (DWORD1(v291) * v291);
          *(_QWORD *)&v331[16] = 0x10000000ALL;
          v330 = (uint64_t (**)())&unk_1E25C6020;
          *(_QWORD *)v331 = v291;
          *(_DWORD *)&v331[8] = DWORD1(v291) * v291;
          *(_DWORD *)&v331[12] = v291;
          v332 = v333;
          if ((_DWORD)v162)
          {
            v163 = v293;
            v164 = v216;
            v165 = v333;
            do
            {
              v166 = *v163++;
              *v165++ = v164[v166];
              --v162;
            }
            while (v162);
          }
          sub_18D053AA8((uint64_t)&v258, (uint64_t)&v330);
          v167 = *(_QWORD *)(v209 + 32);
          v79 += *(_DWORD *)(v167 + 4 * v206);
          v78 += *(_DWORD *)(v167 + 4 * (*(_DWORD *)(v209 + 20) + (int)v206));
          v122 = v12;
          v123 = v124 * v12;
        }
        else
        {
          sub_18D053AA8((uint64_t)&v278, v29);
          *(_QWORD *)&v331[16] = 0xA0000000ALL;
          v330 = (uint64_t (**)())&unk_1E25C5FC0;
          v332 = v333;
          *(_DWORD *)v331 = v73;
          *(_DWORD *)&v331[4] = v200;
          *(_DWORD *)&v331[8] = v12 * v200;
          *(_DWORD *)&v331[12] = v73;
          sub_18D04BE88((uint64_t)&v330, 0.0);
          sub_18D053AA8((uint64_t)&v268, (uint64_t)&v330);
          sub_18D053AA8((uint64_t)&v263, v201);
          sub_18D053AA8((uint64_t)&v258, (uint64_t)&v210);
          if ((int)v208 < 1)
          {
            v122 = v73;
            v123 = v12 * v200;
            v124 = v200;
          }
          else
          {
            v92 = 0;
            v93 = *(_QWORD *)(v209 + 32);
            do
            {
              v94 = *(unsigned int *)(v93 + 4 * v92);
              v220 = 0xA00000001;
              v218 = &off_1E25C67D0;
              v221 = v222;
              if ((_DWORD)v94 == 1)
              {
                v95 = 0;
                *(_QWORD *)&v96 = 0x100000001;
                *((_QWORD *)&v96 + 1) = 0x100000001;
                v219 = v96;
                v222[0] = 0;
                v97 = 1;
                LODWORD(v94) = 1;
              }
              else if ((int)v94 <= 0)
              {
                v97 = 0;
                LODWORD(v94) = 0;
                v219 = 0uLL;
                v95 = 1;
              }
              else
              {
                v98 = 0;
                LODWORD(v219) = 1;
                DWORD1(v219) = v94;
                *((_QWORD *)&v219 + 1) = v94 | 0x100000000;
                do
                {
                  v222[v98] = v98;
                  ++v98;
                }
                while (v94 != v98);
                v95 = 0;
                v97 = 1;
              }
              v255 = 0x10000000ALL;
              v253 = (uint64_t (**)())&unk_1E25C6050;
              v256 = v257;
              *(_QWORD *)&v254 = __PAIR64__(v97, v94);
              DWORD2(v254) = v94 * v97;
              HIDWORD(v254) = v94;
              if ((_DWORD)v94)
              {
                v99 = 0;
                v100 = 0;
                do
                {
                  if ((v95 & 1) == 0)
                  {
                    v101 = 0;
                    do
                    {
                      v257[v100 + HIDWORD(v254) * v101] = v222[v99 + v101];
                      ++v101;
                    }
                    while (v97 != v101);
                  }
                  ++v100;
                  v99 += v97;
                }
                while (v100 != (_DWORD)v94);
                v102 = v254;
                v97 = DWORD1(v254);
              }
              else
              {
                v102 = 0;
              }
              *(_QWORD *)&v331[16] = 0x10000000ALL;
              v330 = (uint64_t (**)())&unk_1E25C6050;
              v332 = v333;
              *(_DWORD *)v331 = v102;
              *(_DWORD *)&v331[4] = v97;
              v103 = (v102 * v97);
              *(_DWORD *)&v331[8] = v103;
              *(_DWORD *)&v331[12] = v102;
              if ((int)v103 >= 1)
              {
                v104 = v257;
                v105 = v333;
                do
                {
                  v106 = *v104++;
                  *v105++ = v106 + v79;
                  --v103;
                }
                while (v103);
              }
              sub_18D053D7C((uint64_t)&v295, (uint64_t)&v330);
              v107 = *(unsigned int *)(*(_QWORD *)(v209 + 32) + 4 * (*(_DWORD *)(v209 + 20) + (int)v92));
              v220 = 0xA00000001;
              v218 = &off_1E25C67D0;
              v221 = v222;
              if ((_DWORD)v107 == 1)
              {
                v108 = 0;
                *(_QWORD *)&v109 = 0x100000001;
                *((_QWORD *)&v109 + 1) = 0x100000001;
                v219 = v109;
                v222[0] = 0;
                v110 = 1;
                LODWORD(v107) = 1;
              }
              else if ((int)v107 <= 0)
              {
                v110 = 0;
                LODWORD(v107) = 0;
                v219 = 0uLL;
                v108 = 1;
              }
              else
              {
                v111 = 0;
                LODWORD(v219) = 1;
                DWORD1(v219) = v107;
                *((_QWORD *)&v219 + 1) = v107 | 0x100000000;
                do
                {
                  v222[v111] = v111;
                  ++v111;
                }
                while (v107 != v111);
                v108 = 0;
                v110 = 1;
              }
              v255 = 0x10000000ALL;
              v253 = (uint64_t (**)())&unk_1E25C6050;
              v256 = v257;
              *(_QWORD *)&v254 = __PAIR64__(v110, v107);
              DWORD2(v254) = v107 * v110;
              HIDWORD(v254) = v107;
              if ((_DWORD)v107)
              {
                v112 = 0;
                v113 = 0;
                do
                {
                  if ((v108 & 1) == 0)
                  {
                    v114 = 0;
                    do
                    {
                      v257[v113 + HIDWORD(v254) * v114] = v222[v112 + v114];
                      ++v114;
                    }
                    while (v110 != v114);
                  }
                  ++v113;
                  v112 += v110;
                }
                while (v113 != (_DWORD)v107);
                v115 = v254;
                v110 = DWORD1(v254);
              }
              else
              {
                v115 = 0;
              }
              *(_QWORD *)&v331[16] = 0x10000000ALL;
              v330 = (uint64_t (**)())&unk_1E25C6050;
              v332 = v333;
              *(_DWORD *)v331 = v115;
              *(_DWORD *)&v331[4] = v110;
              v116 = (v115 * v110);
              *(_DWORD *)&v331[8] = v116;
              *(_DWORD *)&v331[12] = v115;
              if ((int)v116 >= 1)
              {
                v117 = v257;
                v118 = v333;
                do
                {
                  v119 = *v117++;
                  *v118++ = v119 + v78;
                  --v116;
                }
                while (v116);
              }
              sub_18D053D7C((uint64_t)&v290, (uint64_t)&v330);
              v120 = v316;
              sub_18D286E0C((uint64_t)&v330, (uint64_t)&v273, (uint64_t)&v295, (uint64_t)&v295);
              sub_18D285800((uint64_t)&v330, (uint64_t)&v120[105 * v92]);
              v121 = v305;
              sub_18D286E0C((uint64_t)&v330, (uint64_t)&v268, (uint64_t)&v295, (uint64_t)&v290);
              sub_18D285800((uint64_t)&v330, (uint64_t)&v121[105 * v92]);
              v93 = *(_QWORD *)(v209 + 32);
              v79 += *(_DWORD *)(v93 + 4 * v92);
              v78 += *(_DWORD *)(v93 + 4 * (*(_DWORD *)(v209 + 20) + (int)v92++));
              v122 = v12;
            }
            while (v92 != v208);
            v123 = v12 * v200;
            v124 = v200;
          }
          v202 = v122;
        }
        v250 = 0xA0000000ALL;
        v248 = (uint64_t (**)())&unk_1E25C5FC0;
        v251 = v252;
        *(_QWORD *)&v249 = __PAIR64__(v122, v124);
        *((_QWORD *)&v249 + 1) = __PAIR64__(v124, v123);
        sub_18D04BE88((uint64_t)&v248, 0.0);
        *(_QWORD *)&v331[16] = 0x140000000ALL;
        v330 = &off_1E25C6080;
        *(_OWORD *)v331 = xmmword_18D3364F0;
        v332 = v333;
        sub_18D05449C((uint64_t)&v278, (uint64_t)&v248, (uint64_t)&v330);
        v240 = 0xA0000000ALL;
        v238 = (uint64_t (**)())&unk_1E25C5FC0;
        v239 = xmmword_18D319A40;
        v241 = v242;
        sub_18D054E78((uint64_t)&v284, (uint64_t)&v238);
        v235 = 0xA0000000ALL;
        v233 = &unk_1E25C5FC0;
        v234 = xmmword_18D319A40;
        v236 = v237;
        sub_18D053B2C((uint64_t)&v273, (uint64_t)&v268, (uint64_t)&v233);
        v245 = 0xA0000000ALL;
        v243 = (uint64_t (**)())&unk_1E25C5FC0;
        v244 = xmmword_18D319A40;
        v246 = v247;
        sub_18D053B2C((uint64_t)&v238, (uint64_t)&v233, (uint64_t)&v243);
        v230 = 0xA0000000ALL;
        v228 = &unk_1E25C5FC0;
        v229 = xmmword_18D319A40;
        v231 = v232;
        sub_18D053B2C((uint64_t)&v284, (uint64_t)&v273, (uint64_t)&v228);
        v220 = 0x140000000ALL;
        v218 = &off_1E25C6080;
        v219 = xmmword_18D3364F0;
        v221 = v222;
        sub_18D05449C((uint64_t)&v243, (uint64_t)&v228, (uint64_t)&v218);
        v255 = 0x1400000014;
        v253 = &off_1E25C6EC0;
        v254 = xmmword_18D336500;
        v256 = v257;
        sub_18D0543E8((uint64_t)&v330, (uint64_t)&v218, (uint64_t)&v253);
        *(_QWORD *)&v331[16] = 0x10000000ALL;
        v330 = (uint64_t (**)())&unk_1E25C6020;
        *(_OWORD *)v331 = xmmword_18D31CEF0;
        v332 = v333;
        sub_18D053B2C((uint64_t)&v278, (uint64_t)&v258, (uint64_t)&v330);
        v225 = 0x10000000ALL;
        v223 = &unk_1E25C6020;
        v224 = xmmword_18D31CEF0;
        v226 = &v227;
        sub_18D053B2C((uint64_t)&v268, (uint64_t)&v258, (uint64_t)&v223);
        v230 = 0x10000000ALL;
        v228 = &unk_1E25C6020;
        v229 = xmmword_18D31CEF0;
        v231 = v232;
        sub_18D0540FC((uint64_t)&v263, (uint64_t)&v223, (uint64_t)&v228);
        v235 = 0x10000000ALL;
        v233 = &unk_1E25C6020;
        v234 = xmmword_18D31CEF0;
        v236 = v237;
        sub_18D053B2C((uint64_t)&v273, (uint64_t)&v228, (uint64_t)&v233);
        v240 = 0x10000000ALL;
        v238 = (uint64_t (**)())&unk_1E25C6020;
        v239 = xmmword_18D31CEF0;
        v241 = v242;
        sub_18D0540FC((uint64_t)&v233, (uint64_t)v289, (uint64_t)&v238);
        v250 = 0x10000000ALL;
        v248 = (uint64_t (**)())&unk_1E25C6020;
        v249 = xmmword_18D31CEF0;
        v251 = v252;
        sub_18D053B2C((uint64_t)&v284, (uint64_t)&v238, (uint64_t)&v248);
        v220 = 0x10000000ALL;
        v218 = (uint64_t (**)())&unk_1E25C6020;
        v219 = xmmword_18D31CEF0;
        v221 = v222;
        sub_18D053FA4((uint64_t)&v248, (uint64_t)v283, (uint64_t)&v218);
        v245 = 0x100000014;
        v243 = &off_1E25C6E60;
        v244 = xmmword_18D336510;
        v246 = v247;
        sub_18D0543E8((uint64_t)&v330, (uint64_t)&v218, (uint64_t)&v243);
        v220 = 0x1400000014;
        v218 = &off_1E25C6EC0;
        v219 = xmmword_18D336500;
        v221 = v222;
        v240 = 0x100000014;
        v238 = &off_1E25C6E60;
        v239 = xmmword_18D336510;
        v241 = v242;
        v250 = 0x100000014;
        v248 = &off_1E25C6E60;
        v249 = xmmword_18D336510;
        v251 = v252;
        *(_QWORD *)&v331[16] = 0x1400000014;
        v330 = &off_1E25C6EC0;
        *(_OWORD *)v331 = xmmword_18D336500;
        v332 = v333;
        sub_18D054C20((uint64_t)&v253, (uint64_t)&v243, (uint64_t)&v248, (uint64_t)&v330, (uint64_t)&v238, (uint64_t)&v218);
        *(_QWORD *)&v331[16] = 0xA00000001;
        v330 = &off_1E25C67D0;
        v332 = v333;
        v73 = v12;
        v29 = v199;
        if ((_DWORD)v12 == 1)
        {
          v168 = 0;
          *(_QWORD *)&v169 = 0x100000001;
          *((_QWORD *)&v169 + 1) = 0x100000001;
          *(_OWORD *)v331 = v169;
          v333[0] = v124;
          v170 = 1;
          v171 = 1;
        }
        else if ((int)v12 <= 0)
        {
          v170 = 0;
          v171 = 0;
          *(_QWORD *)v331 = 0;
          *(_QWORD *)&v331[8] = 0;
          v168 = 1;
        }
        else
        {
          v172 = 0;
          *(_DWORD *)v331 = 1;
          *(_DWORD *)&v331[4] = v12;
          *(_DWORD *)&v331[8] = v12;
          *(_DWORD *)&v331[12] = 1;
          do
          {
            v333[v172] = v124 + v172;
            ++v172;
          }
          while (v12 != v172);
          v168 = 0;
          v170 = 1;
          v171 = v12;
        }
        v250 = 0x10000000ALL;
        v248 = (uint64_t (**)())&unk_1E25C6050;
        v251 = v252;
        *(_QWORD *)&v249 = __PAIR64__(v170, v171);
        DWORD2(v249) = v171 * v170;
        HIDWORD(v249) = v171;
        if (v171)
        {
          v173 = 0;
          for (i = 0; i != v171; ++i)
          {
            if ((v168 & 1) == 0)
            {
              v175 = 0;
              do
              {
                v252[i + HIDWORD(v249) * v175] = v333[v173 + v175];
                ++v175;
              }
              while (v170 != v175);
            }
            v173 += v170;
          }
        }
        sub_18D053AA8((uint64_t)v289, (uint64_t)&v263);
        sub_18D286E0C((uint64_t)&v330, (uint64_t)&v218, (uint64_t)&v248, (uint64_t)&v248);
        sub_18D053AA8((uint64_t)&v284, (uint64_t)&v330);
        sub_18D286D24((uint64_t)&v330, (uint64_t)&v238, (uint64_t)&v248);
        sub_18D053AA8((uint64_t)v283, (uint64_t)&v330);
        if (!v203)
        {
          *(_QWORD *)&v331[16] = 0xA00000001;
          v330 = &off_1E25C67D0;
          v332 = v333;
          if ((_DWORD)v200 == 1)
          {
            v176 = 0;
            *(_QWORD *)&v177 = 0x100000001;
            *((_QWORD *)&v177 + 1) = 0x100000001;
            *(_OWORD *)v331 = v177;
            v333[0] = 0;
            v178 = 1;
            v179 = 1;
          }
          else if ((int)v200 <= 0)
          {
            v178 = 0;
            v179 = 0;
            *(_QWORD *)v331 = 0;
            *(_QWORD *)&v331[8] = 0;
            v176 = 1;
          }
          else
          {
            v180 = 0;
            *(_DWORD *)v331 = 1;
            *(_DWORD *)&v331[4] = v200;
            *(_DWORD *)&v331[8] = v200;
            *(_DWORD *)&v331[12] = 1;
            do
            {
              v333[v180] = v180;
              ++v180;
            }
            while (v200 != v180);
            v179 = v200;
            v176 = 0;
            v178 = 1;
          }
          v235 = 0x10000000ALL;
          v233 = &unk_1E25C6050;
          v236 = v237;
          *(_QWORD *)&v234 = __PAIR64__(v178, v179);
          DWORD2(v234) = v179 * v178;
          HIDWORD(v234) = v179;
          if (v179)
          {
            v181 = 0;
            for (j = 0; j != v179; ++j)
            {
              if ((v176 & 1) == 0)
              {
                v183 = 0;
                do
                {
                  v237[j + HIDWORD(v234) * v183] = v333[v181 + v183];
                  ++v183;
                }
                while (v178 != v183);
              }
              v181 += v178;
            }
          }
          sub_18D286E0C((uint64_t)&v330, (uint64_t)&v218, (uint64_t)&v233, (uint64_t)&v248);
          sub_18D053AA8(v195, (uint64_t)&v330);
          sub_18D286D24((uint64_t)&v330, (uint64_t)&v238, (uint64_t)&v233);
          sub_18D053AA8(v194, (uint64_t)&v330);
          sub_18D286E0C((uint64_t)&v330, (uint64_t)&v218, (uint64_t)&v233, (uint64_t)&v233);
          sub_18D053AA8(v193, (uint64_t)&v330);
        }
        ++v206;
        v80 = v202;
      }
      while (v206 != v198);
    }
    sub_18D053AA8(v192 + 128, (uint64_t)&v284);
    sub_18D053AA8(v192 + 968, (uint64_t)v283);
    result = 0;
    *(_DWORD *)(v192 + 2180) = 0;
  }
  return result;
}

uint64_t sub_18D27D8F4(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  _WORD v11[16];
  _OWORD *v12;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 1))
  {
    if (*(_DWORD *)(a1 + 12704))
    {
      v9 = a1 + 4680;
      sub_18D27F824((uint64_t)v11);
      v15 = 0x10000002CLL;
      v13 = &off_1E25C7B80;
      v14 = xmmword_18D3364B0;
      v16 = &v17;
      sub_18D1E7F0C(v9, (uint64_t)v11, (uint64_t)&v13);
      result = 0;
      *a2 = *v12;
      return result;
    }
  }
  else
  {
    LOBYTE(v13) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v11, (unsigned __int8 *)&v13, "WARNING: MeasurementAccumulator.LatestLockedMeasurementTime() called on unlocked accumulator.", a4, a5, a6, a7, a8, 2);
  }
  return 0xFFFFFFFFLL;
}

void sub_18D27D9B8(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unsigned int v5;
  int32x4_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int32x4_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  _BYTE v64[24];
  uint64_t v65;
  _QWORD *v66;
  _QWORD v67[2];
  void *v68;
  uint64_t v69;
  uint64_t (**v70)();
  __int128 v71;
  uint64_t v72;
  int *v73;
  _QWORD v74[83];
  uint64_t (**v75)();
  __int128 v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t (**v80)();
  int32x4_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)(a1 + 1))
      *(_BYTE *)(a1 + 1) = 0;
    if (*(_DWORD *)(a1 + 3184))
    {
      if (!sub_18D05B574(a2->n128_f64, (double *)(a1 + 8)))
      {
        v4 = *(unsigned int *)(a1 + 3184);
        v82 = 0x100000058;
        v80 = &off_1E25C8600;
        if ((v4 & 0x80000000) != 0)
          __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
        v5 = 0;
        v6 = vdupq_lane_s32((int32x2_t)(v4 | 0x100000000), 0);
        v6.i32[1] = 1;
        v81 = v6;
        v83 = &v84;
        if ((_DWORD)v4)
        {
          v7 = *(_QWORD **)(a1 + 48);
          if (v7 != (_QWORD *)(a1 + 40))
          {
            v8 = 0;
            v5 = 0;
            v9 = 1;
            do
            {
              if (sub_18D03F608((double *)(*(_QWORD *)(a1 + 96) + v8), a2->n128_f64))
              {
                *((_DWORD *)v83 + (int)v5) = v9 - 1;
                v7 = (_QWORD *)v7[1];
                ++v5;
              }
              else
              {
                v10 = (_QWORD *)*v7;
                v11 = (_QWORD *)v7[1];
                v10[1] = v11;
                *(_QWORD *)v7[1] = v10;
                --*(_QWORD *)(a1 + 56);
                sub_18D1C4904((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v7 + 2);
                operator delete(v7);
                v7 = v11;
              }
              if (v9 >= v4)
                break;
              ++v9;
              v8 += 16;
            }
            while (v7 != (_QWORD *)(a1 + 40));
          }
        }
        v12 = vdupq_lane_s32((int32x2_t)(v5 | 0x100000000), 0);
        v12.i32[1] = 1;
        v81 = v12;
        if (v5 <= 1)
          v13 = 1;
        else
          v13 = v5;
        if (!v5)
          v13 = 0;
        *(_DWORD *)(a1 + 3184) = v13;
        sub_18D27F6C8((uint64_t)v64);
        *(_QWORD *)v64 = &off_1E25C5750;
        v74[82] = a1 + 64;
        v77 = 0x100000058;
        v75 = &off_1E25C8600;
        v76 = xmmword_18D3364A0;
        v78 = &v79;
        sub_18D053D7C((uint64_t)&v75, (uint64_t)&v80);
        *(_QWORD *)&v64[8] = v76;
        *(_DWORD *)&v64[16] = DWORD1(v76) * v76;
        *(_DWORD *)&v64[20] = v76;
        if (DWORD1(v76) * (int)v76 >= 1)
        {
          v14 = 0;
          v15 = 0;
          v16 = 4 * (DWORD1(v76) * v76);
          do
          {
            *(_OWORD *)&v66[v14] = *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * *(int *)((char *)v78 + v15));
            v15 += 4;
            v14 += 2;
          }
          while (v16 != v15);
        }
        sub_18D1E84D8(a1 + 64, (uint64_t)v64);
        sub_18D289304((uint64_t)v64, a1 + 1512, (uint64_t)&v80);
        sub_18D053D7C(a1 + 1512, (uint64_t)v64);
        v65 = 0x100000058;
        *(_OWORD *)&v64[8] = xmmword_18D3364A0;
        *(_QWORD *)v64 = &off_1E25C5810;
        v66 = v67;
        v69 = a1 + 1904;
        v72 = 0x100000058;
        v70 = &off_1E25C8600;
        v71 = xmmword_18D3364A0;
        v73 = (int *)v74;
        sub_18D053D7C((uint64_t)&v70, (uint64_t)&v80);
        *(_QWORD *)&v64[8] = v71;
        v17 = (DWORD1(v71) * v71);
        *(_DWORD *)&v64[16] = v17;
        *(_DWORD *)&v64[20] = v71;
        if ((int)v17 >= 1)
        {
          v18 = *(_QWORD *)(a1 + 1936);
          v19 = v73;
          v20 = v66;
          do
          {
            v21 = *v19++;
            *v20++ = *(_QWORD *)(v18 + 8 * v21);
            --v17;
          }
          while (v17);
        }
        sub_18D053AA8(a1 + 1904, (uint64_t)v64);
        sub_18D289420((uint64_t)v64, a1 + 2648, (uint64_t)&v80);
        sub_18D2895D8(a1 + 2648, (uint64_t)v64);
        v68 = &unk_1E25C5EA0;
        v22 = v67[0];
        *(_QWORD *)v64 = &unk_1E25C8540;
        v67[0] = 0;
        if (v22)
        {
          v23 = v22 - 16;
          v24 = *(_QWORD *)(v22 - 8);
          if (v24)
          {
            v25 = 48 * v24;
            v26 = v22 - 48;
            do
            {
              *(_QWORD *)(v26 + v25) = &unk_1E25C5E70;
              v25 -= 48;
            }
            while (v25);
          }
          MEMORY[0x18D78B5BC](v23, 0x1081C80E86CE3EELL);
        }
        sub_18D289304((uint64_t)v64, a1 + 2696, (uint64_t)&v80);
        sub_18D053D7C(a1 + 2696, (uint64_t)v64);
        sub_18D289420((uint64_t)v64, a1 + 3088, (uint64_t)&v80);
        sub_18D2895D8(a1 + 3088, (uint64_t)v64);
        v68 = &unk_1E25C5EA0;
        v27 = v67[0];
        *(_QWORD *)v64 = &unk_1E25C8540;
        v67[0] = 0;
        if (v27)
        {
          v28 = v27 - 16;
          v29 = *(_QWORD *)(v27 - 8);
          if (v29)
          {
            v30 = 48 * v29;
            v31 = v27 - 48;
            do
            {
              *(_QWORD *)(v31 + v30) = &unk_1E25C5E70;
              v30 -= 48;
            }
            while (v30);
          }
          MEMORY[0x18D78B5BC](v28, 0x1081C80E86CE3EELL);
        }
        sub_18D289420((uint64_t)v64, a1 + 3136, (uint64_t)&v80);
        sub_18D2895D8(a1 + 3136, (uint64_t)v64);
        v68 = &unk_1E25C5EA0;
        v32 = v67[0];
        *(_QWORD *)v64 = &unk_1E25C8540;
        v67[0] = 0;
        if (v32)
        {
          v33 = v32 - 16;
          v34 = *(_QWORD *)(v32 - 8);
          if (v34)
          {
            v35 = 48 * v34;
            v36 = v32 - 48;
            do
            {
              *(_QWORD *)(v36 + v35) = &unk_1E25C5E70;
              v35 -= 48;
            }
            while (v35);
          }
          MEMORY[0x18D78B5BC](v33, 0x1081C80E86CE3EELL);
        }
        v65 = 0x100000058;
        *(_OWORD *)&v64[8] = xmmword_18D3364A0;
        *(_QWORD *)v64 = &off_1E25C57B0;
        v66 = v67;
        v69 = a1 + 3192;
        v72 = 0x100000058;
        v70 = &off_1E25C8600;
        v71 = xmmword_18D3364A0;
        v73 = (int *)v74;
        sub_18D053D7C((uint64_t)&v70, (uint64_t)&v80);
        v37 = v71;
        v38 = DWORD1(v71);
        *(_QWORD *)&v64[8] = v71;
        v39 = (DWORD1(v71) * v71);
        *(_DWORD *)&v64[16] = v39;
        *(_DWORD *)&v64[20] = v71;
        v40 = (v39 - 1);
        if ((int)v39 >= 1)
        {
          for (i = 0; i != v39; ++i)
            v66[i] = *(_QWORD *)(*(_QWORD *)(a1 + 3224) + 8 * v73[i]);
        }
        if ((_BYTE *)(a1 + 3192) != v64)
        {
          *(_DWORD *)(a1 + 3200) = v37;
          *(_DWORD *)(a1 + 3204) = v38;
          *(_DWORD *)(a1 + 3208) = v39;
          *(_DWORD *)(a1 + 3212) = v37;
          if ((int)v39 > 3)
          {
            v56 = *(_QWORD **)(a1 + 3224);
            v57 = v66;
            v58 = v66;
            v59 = v56;
            v60 = v40;
            do
            {
              v61 = *v58++;
              *v59++ = v61;
              --v60;
            }
            while (v60);
            v56[v40] = v57[v40];
          }
          else if ((int)v39 >= 1)
          {
            v42 = 0;
            v43 = 8 * v39;
            do
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 3224) + v42) = v66[v42 / 8];
              v42 += 8;
            }
            while (v43 != v42);
          }
        }
        v65 = 0x100000058;
        *(_OWORD *)&v64[8] = xmmword_18D3364A0;
        *(_QWORD *)v64 = &off_1E25C57E0;
        v66 = v67;
        v69 = a1 + 3936;
        v72 = 0x100000058;
        v70 = &off_1E25C8600;
        v71 = xmmword_18D3364A0;
        v73 = (int *)v74;
        sub_18D053D7C((uint64_t)&v70, (uint64_t)&v80);
        *(_QWORD *)&v64[8] = v71;
        v62 = (DWORD1(v71) * v71);
        *(_DWORD *)&v64[16] = v62;
        *(_DWORD *)&v64[20] = v71;
        if ((int)v62 >= 1)
        {
          for (j = 0; j != v62; ++j)
            v66[j] = *(_QWORD *)(*(_QWORD *)(a1 + 3968) + 8 * v73[j]);
        }
        sub_18D1E8DC8(a1 + 3936, (uint64_t)v64);
      }
    }
    else
    {
      *(_OWORD *)v64 = *(_OWORD *)(a1 + 8);
      sub_18D04AEC4(a1);
      sub_18D05DB3C(a1, a2, v44, v45, v46, v47, v48, v49);
      *(_BYTE *)a1 = 0;
      sub_18D05DB3C(a1, (__n128 *)v64, v50, v51, v52, v53, v54, v55);
    }
  }
}

_QWORD *sub_18D27E054(_QWORD *result)
{
  *result = &unk_1E25C5E10;
  return result;
}

_QWORD *sub_18D27E068(_QWORD *result)
{
  *result = off_1E25C5C60;
  return result;
}

_QWORD *sub_18D27E078(_QWORD *result)
{
  *result = off_1E25C5C30;
  return result;
}

std::string *raven::RavenIonosphereEstimator::SetLogPrefix(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 3840), a2);
  return std::string::operator=((std::string *)(a1 + 6232), a2);
}

_QWORD *sub_18D27E0BC(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D27E0D0(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D27E0E4(_QWORD *result)
{
  *result = &unk_1E25C5DE0;
  return result;
}

_QWORD *sub_18D27E0F8(_QWORD *result)
{
  *result = &unk_1E25C5C00;
  return result;
}

_QWORD *sub_18D27E10C(_QWORD *result)
{
  uint64_t i;

  for (i = 263; i != -1; i -= 6)
    result[i] = &unk_1E25C5E70;
  *result = &unk_1E25C5960;
  return result;
}

_QWORD *sub_18D27E140(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D27E154(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D27E168(_QWORD *result)
{
  *result = &unk_1E25C58D0;
  return result;
}

_QWORD *sub_18D27E17C(_QWORD *result)
{
  *result = &unk_1E25C5DE0;
  return result;
}

_QWORD *sub_18D27E190(_QWORD *result)
{
  *result = &unk_1E25C5C00;
  return result;
}

_QWORD *sub_18D27E1A4(_QWORD *a1)
{
  *a1 = &unk_1E25C8540;
  sub_18D27ED94(a1 + 5);
  *a1 = &unk_1E25C5960;
  return a1;
}

_QWORD *sub_18D27E1EC(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D27E200(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D27E214(_QWORD *result)
{
  *result = &unk_1E25C58D0;
  return result;
}

void sub_18D27E228(_QWORD *a1)
{
  *a1 = &unk_1E25C5DE0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27E24C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27E258(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[44];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D27E350(_QWORD *a1)
{
  *a1 = &unk_1E25C5C00;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27E374(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27E380(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[44];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D27E480(_QWORD *a1)
{
  uint64_t i;

  for (i = 263; i != -1; i -= 6)
    a1[i] = &unk_1E25C5E70;
  *a1 = &unk_1E25C5960;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27E4C4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27E4D0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  _BYTE v11[48];
  _BYTE v12[52];
  _BYTE v13[44];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = v3 + v1 - v5;
        v7 = (v4 - 1);
        v8 = 1;
        do
        {
          sub_18D27E618((uint64_t)v12, *(_QWORD *)(a1 + 32) + 48 * v8);
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = v8;
            do
            {
              v10 = v10 * v6 % (int)v7;
              sub_18D27E618((uint64_t)v11, *(_QWORD *)(a1 + 32) + 48 * v10);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + 48 * v10, (uint64_t)v12);
              *v9 = 1;
              sub_18D053AA8((uint64_t)v12, (uint64_t)v11);
              v9 = &v13[v10];
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v7);
      }
    }
  }
}

__n128 sub_18D27E618(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x100000001;
  *(_QWORD *)(a1 + 24) = 0x100000001;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6A40;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D27E734(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D27E748(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27E76C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27E778(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[44];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D27E86C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27E890(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27E89C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[44];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D27E990(_QWORD *a1)
{
  *a1 = &unk_1E25C58D0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27E9B4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27E9C0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[44];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v12 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = v7;
            do
            {
              v9 = (int)(v9 * (v3 + v1 - v5)) % (int)v6;
              v10 = *(_QWORD *)(a1 + 32);
              v11 = *(_OWORD *)(v10 + 16 * v9);
              *(_OWORD *)(v10 + 16 * v9) = v12;
              *v8 = 1;
              v12 = v11;
              v8 = &v13[v9];
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D27EAC0(_QWORD *a1)
{
  *a1 = &unk_1E25C5DE0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27EAE4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27EAF0(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[88];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D27EBE8(_QWORD *a1)
{
  *a1 = &unk_1E25C5C00;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27EC0C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27EC18(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[88];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D27ED10(_QWORD *a1)
{
  *a1 = &unk_1E25C8540;
  sub_18D27ED94(a1 + 5);
  *a1 = &unk_1E25C5960;
  JUMPOUT(0x18D78B5D4);
}

uint64_t *sub_18D27ED68(uint64_t a1)
{
  uint64_t *result;

  result = sub_18D27EDE8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t *sub_18D27ED94(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = 48 * v2;
      v4 = v1 - 48;
      do
      {
        *(_QWORD *)(v4 + v3) = &unk_1E25C5E70;
        v3 -= 48;
      }
      while (v3);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

uint64_t *sub_18D27EDE8(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __int128 v6;

  v2 = (_OWORD *)operator new[]();
  v3 = (uint64_t)(v2 + 1);
  *v2 = xmmword_18D336520;
  v4 = (char *)v2 + 56;
  v5 = 4224;
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  do
  {
    *((_QWORD *)v4 - 2) = 0x100000001;
    *((_QWORD *)v4 - 5) = &unk_1E25C6A40;
    *((_OWORD *)v4 - 2) = v6;
    *((_QWORD *)v4 - 1) = v4;
    v4 += 48;
    v5 -= 48;
  }
  while (v5);
  return sub_18D27EE64((uint64_t *)(a1 + 40), v3);
}

uint64_t *sub_18D27EE64(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 48 * v3;
      v5 = v2 - 48;
      do
      {
        *(_QWORD *)(v5 + v4) = &unk_1E25C5E70;
        v4 -= 48;
      }
      while (v4);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

void sub_18D27EEB8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new[]();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  sub_18D27EF48(a1, (char *)v2);
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D27EF24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5BC](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18D27EF48(uint64_t a1, char *a2)
{
  unsigned int v2;
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  _BYTE v13[48];
  _BYTE v14[48];

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        v8 = v4 + v2 - v6;
        v9 = (v7 - 1);
        v10 = 1;
        do
        {
          sub_18D27E618((uint64_t)v14, *(_QWORD *)(a1 + 32) + 48 * v10);
          v11 = &a2[v10];
          if (!a2[v10])
          {
            v12 = v10;
            do
            {
              v12 = v12 * v8 % (int)v9;
              sub_18D27E618((uint64_t)v13, *(_QWORD *)(a1 + 32) + 48 * v12);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + 48 * v12, (uint64_t)v14);
              *v11 = 1;
              sub_18D053AA8((uint64_t)v14, (uint64_t)v13);
              v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

void sub_18D27F054(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27F078(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27F084(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[88];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D27F178(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27F19C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27F1A8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[88];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D27F29C(_QWORD *a1)
{
  *a1 = &unk_1E25C58D0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27F2C0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27F2CC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[88];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v12 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = v7;
            do
            {
              v9 = (int)(v9 * (v3 + v1 - v5)) % (int)v6;
              v10 = *(_QWORD *)(a1 + 32);
              v11 = *(_OWORD *)(v10 + 16 * v9);
              *(_OWORD *)(v10 + 16 * v9) = v12;
              *v8 = 1;
              v12 = v11;
              v8 = &v13[v9];
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18D27F3CC(_QWORD *a1)
{
  *a1 = &unk_1E25B9150;
  a1[419] = &unk_1E25C5E70;
  a1[404] = &unk_1E25C5E70;
  a1[299] = &unk_1E25C5E70;
  sub_18D057070((uint64_t)a1);
  JUMPOUT(0x18D78B5D4);
}

double sub_18D27F418@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x10000000ALL;
  *(_QWORD *)a2 = &unk_1E25C6020;
  *(_OWORD *)(a2 + 8) = xmmword_18D31CEF0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 2180))
    v2 = a1 + 2048;
  else
    v2 = a1 + 968;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

double sub_18D27F464@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0xA0000000ALL;
  *(_QWORD *)a2 = &unk_1E25C5FC0;
  *(_OWORD *)(a2 + 8) = xmmword_18D319A40;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 2180))
    v2 = a1 + 1208;
  else
    v2 = a1 + 128;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

void sub_18D27F4B0(uint64_t a1)
{
  sub_18D057070(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27F4D4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    sub_18D077798((_BYTE *)(a1 + 56), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v4;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 3);
  memcpy((void *)(a1 + 88), a2 + 2, 0x1A0uLL);
  *(_QWORD *)(a1 + 504) = &unk_1E25B9850;
  v5 = (_BYTE *)(a1 + 512);
  if (*((char *)a2 + 479) < 0)
  {
    sub_18D077798(v5, *((void **)a2 + 57), *((_QWORD *)a2 + 58));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 456);
    *(_QWORD *)(a1 + 528) = *((_QWORD *)a2 + 59);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a1 + 536) = *((_QWORD *)a2 + 60);
  v7 = *(__int128 *)((char *)a2 + 488);
  v8 = *(__int128 *)((char *)a2 + 520);
  *(_OWORD *)(a1 + 560) = *(__int128 *)((char *)a2 + 504);
  *(_OWORD *)(a1 + 576) = v8;
  *(_OWORD *)(a1 + 544) = v7;
  v9 = *(__int128 *)((char *)a2 + 536);
  v10 = *(__int128 *)((char *)a2 + 552);
  v11 = *(__int128 *)((char *)a2 + 584);
  *(_OWORD *)(a1 + 624) = *(__int128 *)((char *)a2 + 568);
  *(_OWORD *)(a1 + 640) = v11;
  *(_OWORD *)(a1 + 592) = v9;
  *(_OWORD *)(a1 + 608) = v10;
  v12 = *(__int128 *)((char *)a2 + 600);
  v13 = *(__int128 *)((char *)a2 + 616);
  v14 = *(__int128 *)((char *)a2 + 648);
  *(_OWORD *)(a1 + 688) = *(__int128 *)((char *)a2 + 632);
  *(_OWORD *)(a1 + 704) = v14;
  *(_OWORD *)(a1 + 656) = v12;
  *(_OWORD *)(a1 + 672) = v13;
  v15 = *(__int128 *)((char *)a2 + 664);
  *(_QWORD *)(a1 + 736) = *((_QWORD *)a2 + 85);
  *(_OWORD *)(a1 + 720) = v15;
  sub_18D1C7988((_QWORD *)a1, 32);
  *(_QWORD *)a1 = off_1E25C4948;
  return a1;
}

void sub_18D27F5FC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 504) = off_1E25B93B0;
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18D27F638(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E25B8EE0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 504) = &unk_1E25B9850;
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  *(_QWORD *)(a1 + 504) = off_1E25B93B0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27F6C8(uint64_t a1)
{
  uint64_t i;
  _QWORD *v3;
  const char *v5;
  int v6;

  *(_QWORD *)(a1 + 24) = 0x100000058;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C8510;
  for (i = 40; i != 1448; i += 16)
  {
    v3 = (_QWORD *)(a1 + i);
    *v3 = 0;
    v3[1] = 0;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    v5 = "this->max_num_rows_ > 0";
    v6 = 394;
    goto LABEL_8;
  }
  if (!*(_DWORD *)(a1 + 28))
  {
    v5 = "this->max_num_cols_ > 0";
    v6 = 395;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v6, v5);
  }
  *(_OWORD *)(a1 + 8) = xmmword_18D3364A0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_18D27F780(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C58D0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D27F794(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x100000058;
  *(_QWORD *)a1 = &unk_1E25C8540;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D3364A0;
  sub_18D27EDE8(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D27F7FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  sub_18D27ED94(v2);
  *v1 = &unk_1E25C5960;
  _Unwind_Resume(a1);
}

uint64_t sub_18D27F824(uint64_t a1)
{
  uint64_t i;
  _QWORD *v3;
  const char *v5;
  int v6;

  *(_QWORD *)(a1 + 24) = 0x10000002CLL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C7A30;
  for (i = 40; i != 744; i += 16)
  {
    v3 = (_QWORD *)(a1 + i);
    *v3 = 0;
    v3[1] = 0;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    v5 = "this->max_num_rows_ > 0";
    v6 = 394;
    goto LABEL_8;
  }
  if (!*(_DWORD *)(a1 + 28))
  {
    v5 = "this->max_num_cols_ > 0";
    v6 = 395;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v6, v5);
  }
  *(_OWORD *)(a1 + 8) = xmmword_18D3364B0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return a1;
}

void sub_18D27F8DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C58D0;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D27F8F0(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v2 = 0;
  a1[3] = 0x10000002CLL;
  a1[4] = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E25C7A60;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  do
  {
    v4 = &a1[v2];
    v4[8] = 0x100000001;
    v4[5] = &unk_1E25C6A40;
    *((_OWORD *)v4 + 3) = v3;
    v4[9] = &a1[v2 + 10];
    v2 += 6;
  }
  while (v2 != 264);
  *(_OWORD *)(a1 + 1) = xmmword_18D3364B0;
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  return a1;
}

void sub_18D27F988(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t i;

  for (i = 263; i != -1; i -= 6)
    v1[i] = &unk_1E25C5E70;
  *v1 = &unk_1E25C5960;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D27F9BC(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D27F9D0(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27F9F4(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27FA00(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[10];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

__n128 sub_18D27FAF4(void (**a1)(int a1), uint64_t a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  __n128 result;

  v4 = (char *)operator new(0x2E8uLL);
  v5 = v4;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18D077798(v4 + 56, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v4 + 9) = *(_QWORD *)(a2 + 72);
  }
  *((_QWORD *)v5 + 10) = *(_QWORD *)(a2 + 80);
  memcpy(v5 + 88, (const void *)(a2 + 88), 0x1A0uLL);
  *((_QWORD *)v5 + 63) = &unk_1E25B9850;
  v6 = v5 + 512;
  if (*(char *)(a2 + 535) < 0)
  {
    sub_18D077798(v6, *(void **)(a2 + 512), *(_QWORD *)(a2 + 520));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)(a2 + 512);
    *((_QWORD *)v5 + 66) = *(_QWORD *)(a2 + 528);
  }
  *((_QWORD *)v5 + 67) = *(_QWORD *)(a2 + 536);
  v7 = *(_OWORD *)(a2 + 688);
  *((_OWORD *)v5 + 42) = *(_OWORD *)(a2 + 672);
  *((_OWORD *)v5 + 43) = v7;
  v8 = *(_OWORD *)(a2 + 624);
  *((_OWORD *)v5 + 38) = *(_OWORD *)(a2 + 608);
  *((_OWORD *)v5 + 39) = v8;
  v9 = *(_OWORD *)(a2 + 656);
  *((_OWORD *)v5 + 40) = *(_OWORD *)(a2 + 640);
  *((_OWORD *)v5 + 41) = v9;
  v10 = *(_OWORD *)(a2 + 560);
  *((_OWORD *)v5 + 34) = *(_OWORD *)(a2 + 544);
  *((_OWORD *)v5 + 35) = v10;
  v11 = *(_OWORD *)(a2 + 592);
  *((_OWORD *)v5 + 36) = *(_OWORD *)(a2 + 576);
  *((_OWORD *)v5 + 37) = v11;
  v12 = *(_OWORD *)(a2 + 720);
  *((_OWORD *)v5 + 44) = *(_OWORD *)(a2 + 704);
  *((_OWORD *)v5 + 45) = v12;
  *((_QWORD *)v5 + 92) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)v5 = &unk_1E25B8EE0;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a2 + 8);
  v13 = v5 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18D077798(v13, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v5 + 4) = *(_QWORD *)(a2 + 32);
  }
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v5 + 40) = result;
  *(_QWORD *)v5 = off_1E25C4948;
  *a1 = sub_18D27FCA0;
  a1[1] = (void (*)(int))v5;
  return result;
}

void sub_18D27FC54(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_18D277464(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D27FCA0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18D27FCD4()
{
  _QWORD *v0;
  void (***v1)(_QWORD);
  uint64_t result;

  v1 = (void (***)(_QWORD))v0[1];
  (**v1)(v1);
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_18D27FD68(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0xA0000000ALL;
  *(_QWORD *)(a1 + 24) = 0xA0000000ALL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C5FC0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0xAu)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 0xBu)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D27FE84(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D27FE98(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0xA0000000ALL;
  *(_QWORD *)a1 = &unk_1E25C5FC0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D073454(a2, a1);
}

void sub_18D27FEF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D27FF04(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D27FF18(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

void sub_18D27FF2C(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27FF50(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27FF5C(uint64_t a1)
{
  char v1[10];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D159878(a1, v1);
}

void sub_18D27FFA8(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D27FFCC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D27FFD8(uint64_t a1)
{
  char v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

_QWORD *sub_18D280024(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C6EF0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

void sub_18D280080(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C6EF0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2800EC(uint64_t a1)
{
  uint64_t result;

  result = sub_18D280208(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D280114(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x884uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D280208(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x4420uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D280270(_QWORD *a1)
{
  *a1 = off_1E25C5C30;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D280290(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D28029C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v9, v4);
      if (v4 >= 3)
      {
        v6 = v9;
        v7 = 8;
        v8 = v3 + v1 - v5;
        do
        {
          if (!v6)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v8 % (v4 - 1))) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v7);
            v6 = 1;
          }
          v8 += v3 + v1 - v5;
          v7 += 8;
        }
        while (8 * (v4 - 1) != v7);
      }
    }
  }
}

void sub_18D280350(_QWORD *a1)
{
  *a1 = &unk_1E25C5E10;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D280374(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D280380(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v9, v4);
      if (v4 >= 3)
      {
        v6 = v9;
        v7 = 8;
        v8 = v3 + v1 - v5;
        do
        {
          if (!v6)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v8 % (v4 - 1))) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v7);
            v6 = 1;
          }
          v8 += v3 + v1 - v5;
          v7 += 8;
        }
        while (8 * (v4 - 1) != v7);
      }
    }
  }
}

void sub_18D28042C(_QWORD *a1)
{
  *a1 = off_1E25C5C60;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D28044C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D280458(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v9, v4);
      if (v4 >= 3)
      {
        v6 = v9;
        v7 = 8;
        v8 = v3 + v1 - v5;
        do
        {
          if (!v6)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v8 % (v4 - 1))) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v7);
            v6 = 1;
          }
          v8 += v3 + v1 - v5;
          v7 += 8;
        }
        while (8 * (v4 - 1) != v7);
      }
    }
  }
}

uint64_t sub_18D28050C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  __int128 v51;
  cnprint::CNPrinter *LogLevel;
  double v53;
  double v54;
  uint64_t v55;
  cnprint::CNLogFormatter *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  cnprint::CNPrinter *v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL4 v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (***v104)();
  uint64_t v105;
  uint64_t (***v106)();
  int v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  double v124;
  double v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  char v133;
  __int128 v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  int *v142;
  _DWORD *v143;
  int v144;
  uint64_t v145;
  char v146;
  __int128 v147;
  int v148;
  uint64_t v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  int *v155;
  _DWORD *v156;
  int v157;
  unsigned int (*v158)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  double v159;
  double v160;
  uint64_t v161;
  int v162;
  int v163;
  __int128 v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  _DWORD *v173;
  int v174;
  int v175;
  int v176;
  int v177;
  unsigned int (*v178)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double);
  unsigned int (*v179)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128);
  __n128 v180;
  int v181;
  int v182;
  __int128 v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  double *v187;
  int v188;
  int v189;
  int v190;
  int v191;
  __int128 v192;
  int v193;
  int v194;
  __int128 v195;
  int v196;
  int v197;
  int v198;
  _DWORD *v199;
  int v200;
  int v201;
  int i;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  double *v208;
  uint64_t v209;
  int v210;
  double v211;
  int v212;
  uint64_t v213;
  double v214;
  __int128 v215;
  __int128 v216;
  signed int v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  double v221;
  _BOOL4 v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  __int128 v230;
  std::string *v231;
  std::string::size_type v232;
  unint64_t v233;
  uint64_t v234;
  unsigned int v235;
  unsigned __int8 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BOOL4 v243;
  uint64_t v244;
  unint64_t v245;
  double v246;
  int v247;
  double *v248;
  uint64_t v249;
  unint64_t v250;
  double v251;
  _BOOL4 v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  double v263;
  double *v264;
  double *v265;
  uint64_t v266;
  double v267;
  int v268;
  uint64_t v269;
  int v270;
  double *v271;
  uint64_t v272;
  _QWORD *v273;
  int v274;
  uint64_t v275;
  double *v276;
  double *v277;
  double *v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  _QWORD *v282;
  double *v283;
  uint64_t v284;
  uint64_t v285;
  double *v286;
  double *v287;
  uint64_t v288;
  double *v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  double v293;
  int v294;
  double v295;
  double *v296;
  uint64_t v297;
  double v298;
  int v299;
  double v300;
  double *v301;
  uint64_t v302;
  double v303;
  int v304;
  double v305;
  double *v306;
  uint64_t v307;
  double v308;
  int v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  double *v314;
  uint64_t v315;
  _DWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  double *v320;
  uint64_t v321;
  double v322;
  double *v323;
  double *v324;
  uint64_t v325;
  double v326;
  _QWORD *v327;
  uint64_t v328;
  double *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  double v334;
  int v335;
  double v336;
  uint64_t v337;
  double *v338;
  double v339;
  double v340;
  double v341;
  int v342;
  uint64_t v343;
  double *v344;
  double v345;
  _QWORD *v346;
  double v347;
  int v348;
  uint64_t v349;
  double *v350;
  double v351;
  uint64_t v352;
  uint64_t v353;
  __int128 v354;
  int v355;
  int v356;
  double *v357;
  unsigned int v358;
  int v359;
  int v360;
  int j;
  int v362;
  cnstatistics *v363;
  uint64_t v364;
  double v365;
  double *v366;
  __int128 v367;
  double v368;
  __int128 v369;
  __int128 v370;
  float64x2_t v371;
  __n128 v372;
  int v373;
  _BOOL4 v374;
  cnprint::CNPrinter *v375;
  double v376;
  double v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  cnstatistics *v384;
  double v385;
  double v386;
  unsigned __int8 v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  _QWORD *v400;
  unint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  unint64_t v408;
  __n128 v409;
  double v410;
  const void **v411;
  cnprint::CNPrinter *v412;
  unint64_t v413;
  unint64_t v414;
  unsigned int v415;
  int v416;
  double *v417;
  double v418;
  unint64_t v419;
  double v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int32x4_t v427;
  cnprint::CNPrinter *v428;
  double *v429;
  uint64_t v430;
  int *v431;
  int v432;
  __n128 v433;
  double v434;
  cnstatistics *v435;
  cnprint::CNPrinter *v436;
  double v437;
  uint64_t v438;
  double v439;
  unint64_t *v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  char v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int v458;
  char v459;
  __int128 v460;
  int v461;
  uint64_t v462;
  int v463;
  int k;
  int v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  __int128 v469;
  int v470;
  int v471;
  uint64_t *v472;
  unsigned int v473;
  int v474;
  int m;
  int v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  double v483;
  unsigned int v484;
  uint64_t v485;
  double v486;
  uint64_t v487;
  uint64_t v488;
  unsigned int v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  double v493;
  unsigned int v494;
  uint64_t v495;
  double v496;
  uint64_t v497;
  uint64_t v498;
  unsigned int v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  double v503;
  unsigned int v504;
  uint64_t v505;
  double v506;
  uint64_t v507;
  uint64_t v508;
  unsigned int v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  double v513;
  unsigned int v514;
  uint64_t v515;
  double v516;
  uint64_t v517;
  __n128 v518;
  int v519;
  uint64_t v520;
  int v521;
  double v522;
  __int128 v523;
  uint64_t v524;
  int32x4_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  int v532;
  _QWORD *v533;
  uint64_t *v534;
  uint64_t *v535;
  double *v536;
  int v537;
  int *v538;
  int v539;
  uint64_t v540;
  int v541;
  uint64_t *v542;
  double *v543;
  uint64_t v544;
  double *v545;
  uint64_t v546;
  double *v547;
  uint64_t *v548;
  __int128 v549;
  unsigned int v550;
  unsigned int v551;
  uint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  int *v555;
  double *v556;
  uint64_t v557;
  _QWORD *v558;
  double *v559;
  uint64_t v560;
  double *v561;
  uint64_t v562;
  double *v563;
  _OWORD *v564;
  __int128 v565;
  __int128 v566;
  int v567;
  uint64_t v568;
  _DWORD *v569;
  unsigned int v570;
  __int128 v571;
  int v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  _QWORD *v578;
  const char *v580;
  int v581;
  const char *v582;
  int v583;
  const char *v584;
  int v585;
  uint64_t *v586;
  _BOOL4 v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  uint64_t v592;
  uint64_t v593;
  unsigned int (*v594)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128);
  uint64_t (*v595)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  int v600;
  unsigned int v601;
  unsigned int v602;
  int v603;
  double v604;
  uint64_t v605;
  char v606;
  uint64_t v607;
  uint64_t v608;
  double v609;
  uint64_t v610;
  int v611;
  double *v612;
  uint64_t v613;
  uint64_t (**v614)();
  __int128 v615;
  uint64_t v616;
  double *v617;
  _DWORD v618[800];
  uint64_t (**v619)();
  int v620;
  int v621;
  int v622;
  int v623;
  uint64_t v624;
  uint64_t *v625;
  uint64_t v626;
  uint64_t (**v627)();
  __int128 v628;
  uint64_t v629;
  _QWORD *v630;
  _QWORD v631[10];
  uint64_t (**v632)();
  __int128 v633;
  uint64_t v634;
  _QWORD *v635;
  _QWORD v636[10];
  uint64_t (**v637)();
  __int128 v638;
  uint64_t v639;
  _BYTE *v640;
  _BYTE v641[800];
  uint64_t (**v642)();
  __int128 v643;
  uint64_t v644;
  _QWORD *v645;
  _QWORD v646[22];
  void *v647;
  __int128 v648;
  uint64_t v649;
  _BYTE *v650;
  _BYTE v651[80];
  uint64_t (**v652)();
  __int128 v653;
  uint64_t v654;
  int *v655;
  _DWORD v656[44];
  uint64_t (**v657)();
  __int128 v658;
  uint64_t v659;
  uint64_t *v660;
  uint64_t v661[440];
  double v662;
  char v663;
  uint64_t (**v664)();
  __int128 v665;
  uint64_t v666;
  _DWORD *v667;
  _DWORD v668[44];
  uint64_t (**v669)();
  __int128 v670;
  uint64_t v671;
  double *v672;
  _BYTE v673[352];
  uint64_t (**v674)();
  __int128 v675;
  uint64_t v676;
  double *v677;
  _BYTE v678[512];
  _QWORD v679[5];
  uint64_t v680;
  uint64_t (**v681)();
  __int128 v682;
  uint64_t v683;
  double *v684;
  double v685[21];
  uint64_t (**v686)();
  __int128 v687;
  uint64_t v688;
  int *v689;
  _QWORD v690[375];
  uint64_t (**v691)();
  __int128 v692;
  uint64_t v693;
  uint64_t *v694;
  uint64_t v695;
  uint64_t (**v696)();
  __int128 v697;
  uint64_t v698;
  uint64_t *v699;
  uint64_t v700;
  uint64_t (**v701)();
  unsigned int v702;
  int v703;
  unsigned int v704;
  unsigned int v705;
  uint64_t v706;
  _QWORD *v707;
  _QWORD v708[64];
  uint64_t (**v709)();
  unint64_t v710;
  uint64_t v711;
  uint64_t v712;
  _QWORD *v713;
  _QWORD *v714;
  uint64_t (**v715)();
  __int128 v716;
  uint64_t v717;
  _QWORD *v718;
  _QWORD v719[100];
  uint64_t (**v720)();
  __int128 v721;
  uint64_t v722;
  _DWORD *v723;
  _DWORD v724[200];
  std::string __p;
  uint64_t v726;
  _DWORD *v727;
  _DWORD v728[880];
  uint64_t (**v729)();
  std::string v730;
  int *v731;
  _DWORD v732[880];
  uint64_t (**v733)();
  int v734;
  int v735;
  int v736;
  int v737;
  uint64_t v738;
  uint64_t *v739;
  uint64_t v740;
  uint64_t (**v741)();
  int v742;
  int v743;
  int v744;
  int v745;
  uint64_t v746;
  uint64_t *v747;
  uint64_t v748;
  void *v749;
  __int128 v750;
  uint64_t v751;
  uint64_t *v752;
  uint64_t v753;
  void *v754;
  __int128 v755;
  uint64_t v756;
  uint64_t *v757;
  uint64_t v758;
  void *v759;
  unsigned int v760;
  unsigned int v761;
  int v762;
  signed int v763;
  uint64_t v764;
  double *v765;
  uint64_t v766;
  void *v767;
  unsigned int v768;
  unsigned int v769;
  int v770;
  unsigned int v771;
  uint64_t v772;
  uint64_t *v773;
  uint64_t v774;
  void *v775;
  unsigned int v776;
  unsigned int v777;
  int v778;
  unsigned int v779;
  uint64_t v780;
  uint64_t *v781;
  uint64_t v782;
  void *v783;
  unsigned int v784;
  int v785;
  unsigned int v786;
  unsigned int v787;
  uint64_t v788;
  double *v789;
  uint64_t v790;
  _BYTE v791[32];
  double *v792;
  _QWORD v793[15];
  _BYTE v794[32];
  double *v795;

  v26 = MEMORY[0x1E0C80A78]();
  v598 = v28;
  v599 = v27;
  v605 = v29;
  v31 = v30;
  v610 = v32;
  v608 = v33;
  v601 = v34;
  v35 = v26;
  v36 = a16;
  if (a19 >= 1)
  {
    v37 = 0;
    do
    {
      sub_18D27E618((uint64_t)&v729, *(_QWORD *)(a11 + 32) + v37);
      v37 += 48;
    }
    while (48 * a19 != v37);
    v38 = 0;
    v36 = a16;
    do
    {
      sub_18D27E618((uint64_t)&v729, *(_QWORD *)(a13 + 32) + v38);
      sub_18D27E618((uint64_t)&v729, *(_QWORD *)(a14 + 32) + v38);
      sub_18D27E618((uint64_t)&v729, *(_QWORD *)(a14 + 32) + v38);
      v38 += 48;
    }
    while (48 * a19 != v38);
  }
  v39 = *(_DWORD *)(v36 + 8);
  v730.__r_.__value_.__r.__words[2] = 0x100000001;
  v729 = (uint64_t (**)())&unk_1E25C6A70;
  v730.__r_.__value_.__r.__words[0] = v39 | 0x100000000;
  LODWORD(v730.__r_.__value_.__r.__words[1]) = v39;
  HIDWORD(v730.__r_.__value_.__r.__words[1]) = v39;
  v731 = v732;
  if (v39)
  {
    v40 = 0;
    v41 = *(_QWORD *)(v36 + 32);
    do
    {
      v732[v40] = *(_DWORD *)(v41 + 4 * (int)v40);
      ++v40;
    }
    while (v39 != (_DWORD)v40);
  }
  sub_18D285700((uint64_t)&__p, v36, 1);
  HIDWORD(v730.__r_.__value_.__r.__words[2]) = 1;
  v731 = v732;
  v42 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  LODWORD(v730.__r_.__value_.__l.__data_) = 1;
  HIDWORD(v730.__r_.__value_.__r.__words[0]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  LODWORD(v730.__r_.__value_.__r.__words[1]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  *(std::string::size_type *)((char *)&v730.__r_.__value_.__r.__words[1] + 4) = 0x100000001;
  if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
  {
    v43 = 0;
    v44 = v727;
    v45 = __p.__r_.__value_.__r.__words[1];
    v46 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
    v47 = 1;
    do
    {
      v48 = v44[v45 * v43];
      v49 = v47;
      v50 = v46;
      if (v45 >= 2)
      {
        do
        {
          v48 += v44[v49++];
          --v50;
        }
        while (v50);
      }
      v732[v43++] = v48;
      v47 += v45;
    }
    while (v43 != v42);
  }
  v602 = v31;
  v607 = v35;
  v730.__r_.__value_.__r.__words[2] = 0x100000001;
  v729 = (uint64_t (**)())&unk_1E25C6A70;
  *(_QWORD *)&v51 = 0x100000001;
  *((_QWORD *)&v51 + 1) = 0x100000001;
  *(_OWORD *)&v730.__r_.__value_.__l.__data_ = v51;
  v731 = v732;
  LogLevel = (cnprint::CNPrinter *)sub_18D1CE424(a23, 1, (uint64_t)&v729);
  v53 = *(double *)(a26 + 64);
  v611 = *(unsigned __int8 *)(a26 + 32);
  v597 = *(unsigned __int8 *)(a26 + 33);
  v54 = *(double *)(a26 + 40);
  v591 = *(unsigned __int8 *)(a26 + 88);
  v594 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128))(a26 + 72);
  v595 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a26 + 96);
  v592 = *(_QWORD *)(a26 + 56);
  v593 = *(_QWORD *)(a26 + 80);
  if (a19 >= 1)
  {
    v55 = 0;
    v56 = (cnprint::CNLogFormatter *)(v35 + 2344);
    do
    {
      v57 = *(_DWORD *)(*(_QWORD *)(a9 + 32) + 4 * v55);
      v58 = *(_DWORD *)(*(_QWORD *)(a12 + 32) + 4 * v55);
      if (v57 <= v58)
      {
        ++v55;
      }
      else
      {
        LOWORD(v729) = 2;
        __p.__r_.__value_.__s.__data_[0] = 2;
        cnprint::CNLogFormatter::FormatWarning(v56, "%d measurements > %d noise sources in measurement function %d.", v57, v58, ++v55);
        if (*(char *)(v607 + 2367) >= 0)
          LOBYTE(v64) = (_BYTE)v56;
        else
          v64 = *(_QWORD *)(v607 + 2344);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v729, (unsigned __int8 *)&__p, "%s", v59, v60, v61, v62, v63, v64);
      }
    }
    while (v55 != a19);
  }
  if (*(_DWORD *)a26)
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (LogLevel <= 1)
    {
      LOWORD(v729) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v65 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v607 + 2344), "PredictAndUpdate is only compatible with NewtonRaphson solver.");
      if (*(char *)(v607 + 2367) >= 0)
        LOBYTE(v71) = v65;
      else
        v71 = *(_QWORD *)(v607 + 2344);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v729, (unsigned __int8 *)&__p, "%s", v66, v67, v68, v69, v70, v71);
    }
  }
  if (*(int *)(a26 + 4) >= 2 && cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v729) = 2;
    __p.__r_.__value_.__s.__data_[0] = 1;
    v72 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v607 + 2344), "PredictAndUpdate is only compatible with single-iteration least squares solutions.");
    if (*(char *)(v607 + 2367) >= 0)
      LOBYTE(v78) = v72;
    else
      v78 = *(_QWORD *)(v607 + 2344);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v729, (unsigned __int8 *)&__p, "%s", v73, v74, v75, v76, v77, v78);
  }
  v79 = *(_DWORD *)(a26 + 8);
  v730.__r_.__value_.__r.__words[2] = 0x10000002CLL;
  v729 = &off_1E25C7B50;
  *(_OWORD *)&v730.__r_.__value_.__l.__data_ = xmmword_18D3364B0;
  v731 = v732;
  v80 = (cnprint::CNPrinter *)sub_18D1CE424(a9, 1, (uint64_t)&v729);
  if (v79 < *v731)
  {
    v80 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v80);
    if (v80 <= 1)
    {
      LOWORD(v729) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v81 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v607 + 2344), "PredictAndUpdate is only compatible with QR factorizations of unconstrained size.");
      if (*(char *)(v607 + 2367) >= 0)
        LOBYTE(v87) = v81;
      else
        v87 = *(_QWORD *)(v607 + 2344);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v729, (unsigned __int8 *)&__p, "%s", v82, v83, v84, v85, v86, v87);
    }
  }
  if (*(_BYTE *)(a26 + 89))
  {
    v80 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v80);
    if (v80 <= 1)
    {
      LOWORD(v729) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      v88 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v607 + 2344), "PredictAndUpdate is only compatible with dense prediction.");
      if (*(char *)(v607 + 2367) >= 0)
        LOBYTE(v94) = v88;
      else
        v94 = *(_QWORD *)(v607 + 2344);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v729, (unsigned __int8 *)&__p, "%s", v89, v90, v91, v92, v93, v94);
    }
  }
  v95 = v611 != 0;
  if (!v611)
  {
    if (v597)
    {
      v95 = 1;
      if (cnprint::CNPrinter::GetLogLevel(v80) <= 1)
      {
        LOWORD(v729) = 2;
        __p.__r_.__value_.__s.__data_[0] = 1;
        v96 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v607 + 2344), "Local hypothesis testing implies global hypothesis testing.  Global hypothesis testing will be enabled.");
        if (*(char *)(v607 + 2367) >= 0)
          LOBYTE(v102) = v96;
        else
          v102 = *(_QWORD *)(v607 + 2344);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v729, (unsigned __int8 *)&__p, "%s", v97, v98, v99, v100, v101, v102);
      }
    }
  }
  if (*(_DWORD *)(v608 + 8) && *(_DWORD *)(v608 + 12))
  {
    v103 = v607 + 8;
    v104 = (uint64_t (***)())v608;
  }
  else
  {
    if ((v601 & 0x80000000) != 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
    v730.__r_.__value_.__r.__words[2] = 0x10000000ALL;
    v729 = (uint64_t (**)())&unk_1E25C6020;
    v731 = v732;
    v730.__r_.__value_.__r.__words[0] = v601 | 0x100000000;
    LODWORD(v730.__r_.__value_.__r.__words[1]) = v601;
    HIDWORD(v730.__r_.__value_.__r.__words[1]) = v601;
    sub_18D04BE88((uint64_t)&v729, 0.0);
    v103 = v607 + 8;
    v104 = &v729;
  }
  sub_18D053AA8(v103, (uint64_t)v104);
  if (*(_DWORD *)(v599 + 8) && *(_DWORD *)(v599 + 12))
  {
    v105 = v607 + 128;
    v106 = (uint64_t (***)())v599;
  }
  else
  {
    if ((v601 & 0x80000000) != 0)
      __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
    v730.__r_.__value_.__r.__words[2] = 0xA0000000ALL;
    v729 = (uint64_t (**)())&unk_1E25C5FC0;
    v731 = v732;
    LODWORD(v730.__r_.__value_.__l.__data_) = v601;
    HIDWORD(v730.__r_.__value_.__r.__words[0]) = v601;
    LODWORD(v730.__r_.__value_.__r.__words[1]) = v601 * v601;
    HIDWORD(v730.__r_.__value_.__r.__words[1]) = v601;
    sub_18D04BE88((uint64_t)&v729, 0.0);
    v105 = v607 + 128;
    v106 = &v729;
  }
  sub_18D053AA8(v105, (uint64_t)v106);
  if (!*(_DWORD *)(v610 + 8) || !*(_DWORD *)(v610 + 12))
  {
    v730.__r_.__value_.__r.__words[2] = 0x10000000ALL;
    v729 = (uint64_t (**)())&unk_1E25C6020;
    *(_OWORD *)&v730.__r_.__value_.__l.__data_ = xmmword_18D31CEF0;
    v731 = v732;
    sub_18D053B2C(v607 + 128, v607 + 8, (uint64_t)&v729);
    sub_18D053AA8(v607 + 968, (uint64_t)&v729);
  }
  if ((v601 & 0x80000000) != 0)
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  v730.__r_.__value_.__r.__words[2] = 0xA0000000ALL;
  v729 = (uint64_t (**)())&unk_1E25C5FC0;
  v731 = v732;
  v730.__r_.__value_.__r.__words[0] = __PAIR64__(v601, v602);
  LODWORD(v730.__r_.__value_.__r.__words[1]) = v602 * v601;
  HIDWORD(v730.__r_.__value_.__r.__words[1]) = v602;
  sub_18D04BE88((uint64_t)&v729, 0.0);
  sub_18D053AA8(v607 + 2392, (uint64_t)&v729);
  v730.__r_.__value_.__r.__words[2] = 0x10000000ALL;
  v729 = (uint64_t (**)())&unk_1E25C6020;
  v731 = v732;
  v730.__r_.__value_.__r.__words[0] = v602 | 0x100000000;
  LODWORD(v730.__r_.__value_.__r.__words[1]) = v602;
  HIDWORD(v730.__r_.__value_.__r.__words[1]) = v602;
  sub_18D04BE88((uint64_t)&v729, 0.0);
  sub_18D053AA8(v607 + 3232, (uint64_t)&v729);
  sub_18D053AA8(v607 + 3352, v598);
  *(_DWORD *)(v607 + 2180) = 0;
  *(_BYTE *)(v607 + 2176) = 0;
  v730.__r_.__value_.__r.__words[2] = 0x10000002CLL;
  v729 = &off_1E25C7B50;
  *(_OWORD *)&v730.__r_.__value_.__l.__data_ = xmmword_18D3364B0;
  v731 = v732;
  sub_18D1CE424(a9, 1, (uint64_t)&v729);
  v107 = *v731;
  if (*v731 >= 0x2D)
  {
    v108 = 2;
    LOWORD(v729) = 2;
    __p.__r_.__value_.__s.__data_[0] = 5;
    v109 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v607 + 2344), "SquareRootInformationFilter::PredictAndUpdate called with %u measurements vs. maximum %u", v107, 44);
    if (*(char *)(v607 + 2367) >= 0)
      LOBYTE(v115) = v109;
    else
      v115 = *(_QWORD *)(v607 + 2344);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v729, (unsigned __int8 *)&__p, "%s", v110, v111, v112, v113, v114, v115);
    return v108;
  }
  v587 = v95;
  v596 = *v731;
  v589 = v607 + 3352;
  v590 = v607 + 2392;
  v588 = v607 + 3232;
  v117 = *(_DWORD *)(a21 + 8);
  v116 = *(_DWORD *)(a21 + 12);
  if (v117 <= v116)
    v118 = *(_DWORD *)(a21 + 12);
  else
    v118 = *(_DWORD *)(a21 + 8);
  if (v117 && v116 && v118)
  {
    v120 = *(_DWORD *)(a9 + 8);
    v119 = *(_DWORD *)(a9 + 12);
    v121 = v120 <= v119 ? *(_DWORD *)(a9 + 12) : *(_DWORD *)(a9 + 8);
    if (!v120 || !v119 || v121 <= v118)
    {
      v730.__r_.__value_.__r.__words[2] = 0x10000002CLL;
      v729 = &off_1E25C7B50;
      *(_OWORD *)&v730.__r_.__value_.__l.__data_ = xmmword_18D3364B0;
      v731 = v732;
      sub_18D1CE424(a9, 1, (uint64_t)&v729);
      sub_18D1C59EC((uint64_t *)(v607 + 2320));
      v223 = *(_DWORD *)(a9 + 8);
      if (v223)
      {
        v224 = *(_DWORD *)(a9 + 12);
        if (v224)
        {
          if (v224 | v223)
          {
            v225 = 0;
            v226 = *(_QWORD *)(a9 + 32);
            do
            {
              v227 = v225;
              if (*(int *)(v226 + 4 * v225) >= 1)
              {
                v228 = 0;
                do
                {
                  v229 = *(_QWORD *)(*(_QWORD *)(a21 + 32) + 8 * v227);
                  LODWORD(v729) = *(_DWORD *)(v229 + 8);
                  if (*(char *)(v229 + 39) < 0)
                  {
                    sub_18D077798(&v730, *(void **)(v229 + 16), *(_QWORD *)(v229 + 24));
                    v226 = *(_QWORD *)(a9 + 32);
                  }
                  else
                  {
                    v230 = *(_OWORD *)(v229 + 16);
                    v730.__r_.__value_.__r.__words[2] = *(_QWORD *)(v229 + 32);
                    *(_OWORD *)&v730.__r_.__value_.__l.__data_ = v230;
                  }
                  if (*(int *)(v226 + 4 * v227) >= 2)
                  {
                    std::to_string(&__p, v228);
                    v231 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                         ? &__p
                         : (std::string *)__p.__r_.__value_.__r.__words[0];
                    v232 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                         : __p.__r_.__value_.__l.__size_;
                    std::string::append(&v730, (const std::string::value_type *)v231, v232);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  v233 = *(_QWORD *)(v607 + 2328);
                  if (v233 >= *(_QWORD *)(v607 + 2336))
                  {
                    v234 = sub_18D1E09D4((uint64_t *)(v607 + 2320), (uint64_t)&v729);
                  }
                  else
                  {
                    sub_18D1E096C(v607 + 2320, (uint64_t)&v729);
                    v234 = v233 + 32;
                  }
                  *(_QWORD *)(v607 + 2328) = v234;
                  if (SHIBYTE(v730.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v730.__r_.__value_.__l.__data_);
                  ++v228;
                  v226 = *(_QWORD *)(a9 + 32);
                }
                while (v228 < *(_DWORD *)(v226 + 4 * v227));
                v223 = *(_DWORD *)(a9 + 8);
                v224 = *(_DWORD *)(a9 + 12);
              }
              if (v223 <= v224)
                v235 = v224;
              else
                v235 = v223;
              if (!v223)
                break;
              if (!v224)
                break;
              v225 = v227 + 1;
            }
            while (v235 > (int)v227 + 1);
          }
        }
      }
    }
  }
  v586 = (uint64_t *)(v607 + 2296);
  sub_18D1C59EC((uint64_t *)(v607 + 2296));
  sub_18D1C59EC((uint64_t *)(v607 + 2272));
  sub_18D064F78((uint64_t)v794, v608);
  sub_18D064F78((uint64_t)v793, v610);
  sub_18D064F78((uint64_t)v791, v605);
  v788 = 0x10000000ALL;
  v783 = &unk_1E25C6020;
  v784 = v601;
  v785 = 1;
  v786 = v601;
  v787 = v601;
  v789 = (double *)&v790;
  v780 = 0xA0000000ALL;
  v775 = &unk_1E25C5FC0;
  v122 = v786 * v786;
  v781 = &v782;
  v776 = v601;
  v777 = v601;
  v778 = v786 * v786;
  v779 = v601;
  sub_18D04BE88((uint64_t)&v775, 0.0);
  v772 = 0xA0000000ALL;
  v767 = &unk_1E25C5FC0;
  v773 = &v774;
  v768 = v601;
  v769 = v601;
  v770 = v122;
  v771 = v601;
  sub_18D04BE88((uint64_t)&v767, 0.0);
  v764 = 0xA0000000ALL;
  v759 = &unk_1E25C5FC0;
  v765 = (double *)&v766;
  v123 = v602;
  v760 = v601;
  v761 = v602;
  v762 = v602 * v601;
  v763 = v601;
  sub_18D04BE88((uint64_t)&v759, 0.0);
  v756 = 0x10000000ALL;
  v754 = &unk_1E25C6050;
  v755 = xmmword_18D31CEF0;
  v757 = &v758;
  v751 = 0x10000000ALL;
  v749 = &unk_1E25C6050;
  v750 = xmmword_18D31CEF0;
  v752 = &v753;
  v124 = 1.0;
  v125 = 1.0;
  if (a15 < 1)
  {
LABEL_126:
    v746 = 0x10000002CLL;
    v741 = &off_1E25C7B20;
    v742 = v596;
    v743 = 1;
    v744 = v596;
    v745 = v596;
    v747 = &v748;
    v738 = 0x10000002CLL;
    v733 = &off_1E25C7B20;
    v734 = v596;
    v735 = 1;
    v736 = v596;
    v737 = v596;
    v739 = &v740;
    v730.__r_.__value_.__r.__words[2] = 0xA0000002CLL;
    v729 = &off_1E25C7A00;
    v730.__r_.__value_.__r.__words[0] = __PAIR64__(v601, v596);
    LODWORD(v730.__r_.__value_.__r.__words[1]) = v596 * v601;
    HIDWORD(v730.__r_.__value_.__r.__words[1]) = v596;
    v731 = v732;
    v726 = 0xA0000002CLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E25C7A00;
    __p.__r_.__value_.__l.__size_ = __PAIR64__(v123, v596);
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v596 * v123;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v596;
    v727 = v728;
    if (a19 >= 1)
    {
      v161 = 0;
      v600 = 0;
      v162 = a22;
      while (1)
      {
        v706 = 0x10000000ALL;
        v701 = (uint64_t (**)())&unk_1E25C6020;
        v707 = v708;
        v702 = v601;
        v703 = 1;
        v704 = v601;
        v705 = v601;
        v163 = v162;
        sub_18D04BE88((uint64_t)&v701, 0.0);
        v659 = 0xA0000000ALL;
        v657 = (uint64_t (**)())&unk_1E25C5FC0;
        v660 = v661;
        LODWORD(v658) = v601;
        *(_QWORD *)((char *)&v658 + 4) = __PAIR64__(v122, v601);
        HIDWORD(v658) = v601;
        sub_18D04BE88((uint64_t)&v657, 0.0);
        v616 = 0xA0000000ALL;
        v614 = (uint64_t (**)())&unk_1E25C5FC0;
        v617 = (double *)v618;
        LODWORD(v615) = v601;
        *(_QWORD *)((char *)&v615 + 4) = __PAIR64__(v122, v601);
        HIDWORD(v615) = v601;
        sub_18D04BE88((uint64_t)&v614, 0.0);
        *(_QWORD *)&v164 = 0x100000001;
        *((_QWORD *)&v164 + 1) = 0x100000001;
        if (v163 >= 1)
          break;
LABEL_145:
        v671 = 0x100000001;
        v669 = (uint64_t (**)())&unk_1E25C6A40;
        v670 = v164;
        v672 = (double *)v673;
        v717 = 0xA00000001;
        v715 = &off_1E25C67A0;
        v716 = xmmword_18D3364C0;
        v718 = v719;
        v666 = 0x100000001;
        v664 = (uint64_t (**)())&unk_1E25C6A40;
        v665 = v164;
        v667 = v668;
        v179 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)(a20 + 32) + 8 * v161);
        v180 = sub_18D27E618((uint64_t)&v681, *(_QWORD *)(a13 + 32) + 48 * v161);
        if (v179(&v701, &v681, *(_QWORD *)(*(_QWORD *)(a21 + 32) + 8 * v161), &v669, &v715, &v664, v180))
          return 3;
        v722 = 0xA0000000ALL;
        v720 = (uint64_t (**)())&unk_1E25C5FC0;
        v721 = xmmword_18D319A40;
        v723 = v724;
        sub_18D053B2C((uint64_t)&v614, (uint64_t)&v775, (uint64_t)&v720);
        v683 = 0xA0000000ALL;
        v681 = (uint64_t (**)())&unk_1E25C5FC0;
        v682 = xmmword_18D319A40;
        v684 = v685;
        sub_18D053FA4((uint64_t)&v657, (uint64_t)&v720, (uint64_t)&v681);
        v639 = 0xA00000001;
        v637 = &off_1E25C67A0;
        v638 = xmmword_18D3364C0;
        v640 = v641;
        sub_18D053B2C((uint64_t)&v715, (uint64_t)&v681, (uint64_t)&v637);
        v683 = 0xA0000000ALL;
        v681 = (uint64_t (**)())&unk_1E25C5FC0;
        v682 = xmmword_18D319A40;
        v684 = v685;
        sub_18D053B2C((uint64_t)&v614, (uint64_t)&v759, (uint64_t)&v681);
        v722 = 0xA00000001;
        v720 = &off_1E25C67A0;
        v721 = xmmword_18D3364C0;
        v723 = v724;
        sub_18D053B2C((uint64_t)&v715, (uint64_t)&v681, (uint64_t)&v720);
        v181 = v600 + *(_DWORD *)(*(_QWORD *)(a9 + 32) + 4 * v161) - 1;
        v683 = 0x100000001;
        v681 = (uint64_t (**)())&unk_1E25C6A70;
        v684 = v685;
        v182 = v181 - v600;
        *(_QWORD *)&v183 = 0x100000001;
        *((_QWORD *)&v183 + 1) = 0x100000001;
        if (v182)
        {
          if (v182 < 0)
          {
            v185 = 0;
            LODWORD(v186) = 0;
            v682 = 0uLL;
            LOBYTE(v184) = 1;
          }
          else
          {
            v186 = (v182 + 1);
            LODWORD(v682) = 1;
            DWORD1(v682) = v186;
            *((_QWORD *)&v682 + 1) = v186 | 0x100000000;
            v187 = v685;
            v184 = v186;
            v188 = v600;
            do
            {
              *(_DWORD *)v187 = v188;
              v187 = (double *)((char *)v187 + 4);
              ++v188;
              --v184;
            }
            while (v184);
            v185 = 1;
          }
        }
        else
        {
          LOBYTE(v184) = 0;
          v682 = v183;
          LODWORD(v685[0]) = v600;
          v185 = 1;
          LODWORD(v186) = 1;
        }
        v654 = 0x100000001;
        v652 = (uint64_t (**)())&unk_1E25C6A70;
        v655 = v656;
        *(_QWORD *)&v653 = __PAIR64__(v185, v186);
        DWORD2(v653) = v186 * v185;
        HIDWORD(v653) = v186;
        if ((_DWORD)v186)
        {
          v189 = 0;
          v190 = 0;
          do
          {
            if ((v184 & 1) == 0)
            {
              v191 = 0;
              do
              {
                v656[v190 + HIDWORD(v653) * v191] = *((_DWORD *)v685 + v189 + v191);
                ++v191;
              }
              while (v185 != v191);
            }
            ++v190;
            v189 += v185;
          }
          while (v190 != (_DWORD)v186);
        }
        sub_18D27E618((uint64_t)&v619, *(_QWORD *)(a14 + 32) + 48 * v161);
        v629 = 0x100000001;
        v627 = (uint64_t (**)())&unk_1E25C6A40;
        *(_QWORD *)&v192 = 0x100000001;
        *((_QWORD *)&v192 + 1) = 0x100000001;
        v628 = v192;
        v630 = v631;
        sub_18D053B2C((uint64_t)&v664, (uint64_t)&v619, (uint64_t)&v627);
        v193 = DWORD1(v665);
        v194 = v665;
        v712 = 0x100000001;
        v709 = (uint64_t (**)())&unk_1E25C6A40;
        v713 = &v714;
        v710 = __PAIR64__(v665, DWORD1(v665));
        LODWORD(v711) = v665 * DWORD1(v665);
        HIDWORD(v711) = DWORD1(v665);
        *(_QWORD *)&v195 = 0x100000001;
        *((_QWORD *)&v195 + 1) = 0x100000001;
        if (DWORD1(v665))
        {
          v196 = 0;
          v197 = 0;
          v198 = HIDWORD(v665);
          v199 = v667;
          do
          {
            v200 = v196;
            v201 = v197;
            for (i = v194; i; --i)
            {
              (&v714)[v201] = *(_QWORD **)&v199[2 * v200];
              v201 += v193;
              ++v200;
            }
            ++v197;
            v196 += v198;
          }
          while (v197 != v193);
        }
        v634 = 0x100000001;
        v632 = (uint64_t (**)())&unk_1E25C6A40;
        v633 = v195;
        v635 = v636;
        sub_18D053B2C((uint64_t)&v627, (uint64_t)&v709, (uint64_t)&v632);
        v649 = 0x100000001;
        v647 = &unk_1E25C6A40;
        *(_QWORD *)&v203 = 0x100000001;
        *((_QWORD *)&v203 + 1) = 0x100000001;
        v648 = v203;
        v650 = v651;
        LOBYTE(v681) = 0;
        sub_18D05C654((uint64_t)&v632, (uint64_t)&v647, (BOOL *)&v681);
        v644 = 0x100000001;
        v642 = (uint64_t (**)())&unk_1E25C6A40;
        *(_QWORD *)&v204 = 0x100000001;
        *((_QWORD *)&v204 + 1) = 0x100000001;
        v643 = v204;
        v645 = v646;
        v676 = 0x100000001;
        v674 = (uint64_t (**)())&unk_1E25C6A70;
        v675 = v204;
        v677 = (double *)v678;
        v683 = 0x100000004;
        v681 = (uint64_t (**)())&unk_1E25C7E50;
        v682 = xmmword_18D313090;
        v684 = v685;
        sub_18D04F504((uint64_t)&v647, (uint64_t)&v674, (uint64_t)&v681, (uint64_t)&v642);
        v676 = 0x200000002;
        v674 = (uint64_t (**)())&unk_1E25C75B0;
        v675 = xmmword_18D319340;
        v677 = (double *)v678;
        sub_18D1D4A98((uint64_t)&v642, 0, (uint64_t)&v674);
        v205 = DWORD1(v675);
        if (DWORD1(v675))
        {
          v206 = 0;
          v207 = v675;
          v208 = v677;
          v209 = v675 - 1;
          v210 = 1;
          do
          {
            v211 = v208[v207 * v206];
            v212 = v210;
            v213 = v209;
            if (v207 >= 2)
            {
              do
              {
                v211 = v211 * v208[v212++];
                --v213;
              }
              while (v213);
            }
            v685[v206++] = v211;
            v210 += v207;
          }
          while (v206 != v205);
        }
        v214 = v685[0];
        sub_18D27E618((uint64_t)&v647, *(_QWORD *)(a11 + 32) + 48 * v161);
        v676 = 0x100000001;
        v674 = (uint64_t (**)())&unk_1E25C6A40;
        *(_QWORD *)&v215 = 0x100000001;
        *((_QWORD *)&v215 + 1) = 0x100000001;
        v675 = v215;
        v677 = (double *)v678;
        sub_18D053B2C((uint64_t)&v642, (uint64_t)&v647, (uint64_t)&v674);
        sub_18D2870A4((uint64_t)&v681, (uint64_t)&v741, (uint64_t)&v652);
        sub_18D285A20((uint64_t)&v681, SDWORD2(v675), v677);
        v676 = 0x100000001;
        v674 = (uint64_t (**)())&unk_1E25C6A40;
        *(_QWORD *)&v216 = 0x100000001;
        *((_QWORD *)&v216 + 1) = 0x100000001;
        v675 = v216;
        v677 = (double *)v678;
        sub_18D053B2C((uint64_t)&v642, (uint64_t)&v669, (uint64_t)&v674);
        sub_18D2870A4((uint64_t)&v681, (uint64_t)&v733, (uint64_t)&v652);
        sub_18D285A20((uint64_t)&v681, SDWORD2(v675), v677);
        v676 = 0xA00000001;
        v674 = &off_1E25C67A0;
        v675 = xmmword_18D3364C0;
        v677 = (double *)v678;
        sub_18D053B2C((uint64_t)&v642, (uint64_t)&v637, (uint64_t)&v674);
        sub_18D285AB4((uint64_t)&v681, (uint64_t)&v729, (uint64_t)&v652);
        sub_18D285C6C((uint64_t)&v681, (uint64_t)&v674);
        v676 = 0xA00000001;
        v674 = &off_1E25C67A0;
        v675 = xmmword_18D3364C0;
        v677 = (double *)v678;
        sub_18D053B2C((uint64_t)&v642, (uint64_t)&v720, (uint64_t)&v674);
        sub_18D285AB4((uint64_t)&v681, (uint64_t)&__p, (uint64_t)&v652);
        sub_18D285C6C((uint64_t)&v681, (uint64_t)&v674);
        v124 = v124 * v214;
        v600 += *(_DWORD *)(*(_QWORD *)(a9 + 32) + 4 * v161++);
        v162 = a22;
        if (v161 == a19)
          goto LABEL_170;
      }
      v165 = 0;
      v166 = 0;
      v167 = *(_QWORD *)(a23 + 32);
      while (1)
      {
        v168 = v166 + *(_DWORD *)(v167 + 4 * v165) - 1;
        v722 = 0xA00000001;
        v720 = &off_1E25C67D0;
        v723 = v724;
        v169 = v168 - v166;
        if (v169)
        {
          if (v169 < 0)
          {
            v171 = 0;
            LODWORD(v172) = 0;
            v721 = 0uLL;
            LOBYTE(v170) = 1;
          }
          else
          {
            v172 = (v169 + 1);
            LODWORD(v721) = 1;
            DWORD1(v721) = v172;
            *((_QWORD *)&v721 + 1) = v172 | 0x100000000;
            v173 = v724;
            v170 = v172;
            v174 = v166;
            do
            {
              *v173++ = v174++;
              --v170;
            }
            while (v170);
            v171 = 1;
          }
        }
        else
        {
          LOBYTE(v170) = 0;
          v721 = v164;
          v724[0] = v166;
          v171 = 1;
          LODWORD(v172) = 1;
        }
        v683 = 0x10000000ALL;
        v681 = (uint64_t (**)())&unk_1E25C6050;
        v684 = v685;
        *(_QWORD *)&v682 = __PAIR64__(v171, v172);
        DWORD2(v682) = v172 * v171;
        HIDWORD(v682) = v172;
        if ((_DWORD)v172)
        {
          v175 = 0;
          v176 = 0;
          do
          {
            if ((v170 & 1) == 0)
            {
              v177 = 0;
              do
              {
                *((_DWORD *)v685 + v176 + HIDWORD(v682) * v177) = v724[v175 + v177];
                ++v177;
              }
              while (v171 != v177);
            }
            ++v176;
            v175 += v171;
          }
          while (v176 != (_DWORD)v172);
        }
        sub_18D053D7C((uint64_t)&v754, (uint64_t)&v681);
        v676 = 0x10000000ALL;
        v674 = (uint64_t (**)())&unk_1E25C6020;
        v675 = xmmword_18D31CEF0;
        v677 = (double *)v678;
        v722 = 0xA0000000ALL;
        v720 = (uint64_t (**)())&unk_1E25C5FC0;
        v721 = xmmword_18D319A40;
        v723 = v724;
        v717 = 0xA0000000ALL;
        v715 = (uint64_t (**)())&unk_1E25C5FC0;
        v716 = xmmword_18D319A40;
        v718 = v719;
        v178 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)(a24 + 32) + 8 * v165);
        sub_18D286D24((uint64_t)&v681, (uint64_t)v794, (uint64_t)&v754);
        sub_18D286D24((uint64_t)&v637, (uint64_t)&v783, (uint64_t)&v754);
        if (v178(&v681, &v637, *(_QWORD *)(*(_QWORD *)(a25 + 32) + 8 * v165), &v674, &v720, &v715, *(double *)(*(_QWORD *)(a10 + 32) + 8 * v161)))
        {
          return 22;
        }
        sub_18D286D24((uint64_t)&v681, (uint64_t)&v701, (uint64_t)&v754);
        sub_18D285790((uint64_t)&v681, SDWORD2(v675), v677);
        sub_18D286E0C((uint64_t)&v681, (uint64_t)&v657, (uint64_t)&v754, (uint64_t)&v754);
        sub_18D285800((uint64_t)&v681, (uint64_t)&v720);
        sub_18D286E0C((uint64_t)&v681, (uint64_t)&v614, (uint64_t)&v754, (uint64_t)&v754);
        sub_18D285800((uint64_t)&v681, (uint64_t)&v715);
        v167 = *(_QWORD *)(a23 + 32);
        v166 += *(_DWORD *)(v167 + 4 * v165++);
        *(_QWORD *)&v164 = 0x100000001;
        *((_QWORD *)&v164 + 1) = 0x100000001;
        if (v165 == a22)
          goto LABEL_145;
      }
    }
LABEL_170:
    v217 = v602 + v601;
    v712 = 0x1400000040;
    v711 = 0;
    v710 = 0;
    v709 = &off_1E25C80F0;
    v714 = 0;
    v713 = 0;
    if ((int)(v596 + v602 + v601) < 0)
    {
      v580 = "nr >= 0";
      v581 = 419;
    }
    else
    {
      if ((v217 & 0x80000000) == 0)
      {
        LODWORD(v710) = v596 + v602 + v601;
        HIDWORD(v710) = v602 + v601;
        LODWORD(v711) = v710 * v217;
        HIDWORD(v711) = v710;
        sub_18D287344((uint64_t)&v709);
        v218 = v714;
        v713 = v714;
        v706 = 0x100000040;
        v701 = &off_1E25C8090;
        v702 = v596 + v602 + v601;
        v703 = 1;
        v704 = v702;
        v705 = v702;
        v707 = v708;
        v613 = v602 + v601;
        if ((int)v601 < 1)
        {
          v222 = 0;
          v243 = 0;
        }
        else
        {
          if (fabs(*v795) >= 2.22044605e-16)
          {
            v222 = 1;
          }
          else
          {
            v219 = 1;
            do
            {
              v220 = v219;
              if (v601 == v219)
                break;
              v221 = fabs(v795[v219++]);
            }
            while (v221 < 2.22044605e-16);
            v222 = v220 < v601;
          }
          if (fabs(*v789) >= 2.22044605e-16)
          {
            v243 = 1;
          }
          else
          {
            v244 = 1;
            do
            {
              v245 = v244;
              if (v601 == v244)
                break;
              v246 = fabs(v789[v244++]);
            }
            while (v246 < 2.22044605e-16);
            v243 = v245 < v601;
          }
        }
        v247 = v602;
        if ((int)v602 < 1)
        {
          v252 = 0;
        }
        else
        {
          v248 = v792;
          if (fabs(*v792) >= 2.22044605e-16)
          {
            v252 = 1;
          }
          else
          {
            v249 = 1;
            do
            {
              v250 = v249;
              if (v602 == v249)
                break;
              v251 = fabs(v792[v249++]);
            }
            while (v251 < 2.22044605e-16);
            v252 = v250 < v602;
          }
          v253 = 0;
          v254 = *(_QWORD **)(v598 + 32);
          v255 = 8 * SHIDWORD(v711);
          v256 = 8 * *(int *)(v598 + 20);
          v257 = 8 * SHIDWORD(v711) * (unint64_t)v602;
          do
          {
            v258 = v254;
            v259 = v218;
            v260 = v602;
            do
            {
              *v259 = *v258;
              v259 = (_QWORD *)((char *)v259 + v255);
              v258 = (_QWORD *)((char *)v258 + v256);
              --v260;
            }
            while (v260);
            v261 = v257;
            v262 = v602;
            if ((int)v601 >= 1)
            {
              do
              {
                *(_QWORD *)((char *)v218 + v261) = 0;
                ++v262;
                v261 += v255;
              }
              while (v262 < v217);
            }
            v263 = 0.0;
            if (v252)
            {
              v264 = (double *)v254;
              v265 = v248;
              v266 = v602;
              do
              {
                v267 = *v265++;
                v263 = v263 + *v264 * v267;
                v264 = (double *)((char *)v264 + v256);
                --v266;
              }
              while (v266);
            }
            *(double *)&v708[v253++] = v263;
            ++v218;
            ++v254;
          }
          while (v253 != v602);
        }
        v683 = 0xA0000000ALL;
        v681 = (uint64_t (**)())&unk_1E25C5FC0;
        v682 = xmmword_18D319A40;
        v684 = v685;
        sub_18D053B2C(v599, (uint64_t)&v767, (uint64_t)&v681);
        v603 = v596 + v602 + v601;
        v659 = 0xA0000000ALL;
        v657 = (uint64_t (**)())&unk_1E25C5FC0;
        v658 = xmmword_18D319A40;
        v660 = v661;
        sub_18D053B2C((uint64_t)&v681, (uint64_t)&v759, (uint64_t)&v657);
        if ((int)v601 >= 1)
        {
          v268 = HIDWORD(v658);
          v269 = (uint64_t)v660;
          v270 = HIDWORD(v682);
          v271 = v684;
          v272 = v793[4];
          v273 = v707;
          v274 = *(_DWORD *)(v599 + 20);
          v275 = *(_QWORD *)(v599 + 32);
          v276 = v795;
          v277 = v789;
          v278 = (double *)&v713[v602];
          v279 = 8 * SHIDWORD(v711);
          v280 = &v660[-v602];
          v281 = 8 * SHIDWORD(v658);
          v612 = v792;
          v282 = &v713[v602 * (uint64_t)SHIDWORD(v711) + v602];
          v283 = &v684[-v602];
          v284 = 8 * SHIDWORD(v682);
          v285 = v602;
          do
          {
            if ((int)v602 >= 1)
            {
              v286 = (double *)&v280[(int)v285];
              v287 = v278;
              v288 = v602;
              do
              {
                *v287 = -*v286;
                v287 = (double *)((char *)v287 + v279);
                v286 = (double *)((char *)v286 + v281);
                --v288;
              }
              while (v288);
            }
            v289 = &v283[(int)v285];
            v290 = v282;
            v291 = v602;
            do
            {
              *v290 = *(_QWORD *)v289;
              ++v291;
              v290 = (_QWORD *)((char *)v290 + v279);
              v289 = (double *)((char *)v289 + v284);
            }
            while (v291 < (int)v613);
            v292 = v285 - v602;
            v293 = *(double *)(v272 + 8 * v292);
            *(double *)&v273[v285] = v293;
            if (v222)
            {
              v294 = 0;
              v295 = 0.0;
              v296 = v276;
              v297 = v601;
              do
              {
                v298 = *v296++;
                v295 = v295 - *(double *)(v275 + 8 * (v292 + v294)) * v298;
                v294 += v274;
                --v297;
              }
              while (v297);
              v293 = v293 + v295;
              *(double *)&v273[v285] = v293;
              if (!v243)
              {
LABEL_252:
                if (v252)
                  goto LABEL_258;
                goto LABEL_264;
              }
            }
            else if (!v243)
            {
              goto LABEL_252;
            }
            v299 = 0;
            v300 = 0.0;
            v301 = v277;
            v302 = v601;
            do
            {
              v303 = *v301++;
              v300 = v300 + v271[v292 + v299] * v303;
              v299 += v270;
              --v302;
            }
            while (v302);
            v293 = v293 + v300;
            *(double *)&v273[v285] = v293;
            if (v252)
            {
LABEL_258:
              if ((int)v602 < 1)
              {
                v305 = 0.0;
              }
              else
              {
                v304 = 0;
                v305 = 0.0;
                v306 = v612;
                v307 = v602;
                do
                {
                  v308 = *v306++;
                  v305 = v305 - *(double *)(v269 + 8 * (v292 + v304)) * v308;
                  v304 += v268;
                  --v307;
                }
                while (v307);
              }
              *(double *)&v273[v285] = v293 + v305;
            }
LABEL_264:
            ++v285;
            ++v278;
            ++v282;
          }
          while (v285 < (int)v613);
        }
        v683 = 0xA0000002CLL;
        v681 = &off_1E25C7A00;
        v682 = xmmword_18D336530;
        v684 = v685;
        sub_18D053B2C((uint64_t)&v729, (uint64_t)&v767, (uint64_t)&v681);
        v309 = v601;
        if ((int)v596 >= 1)
        {
          v310 = 0;
          v311 = (int)v613;
          do
          {
            v312 = v310;
            if ((int)v602 >= 1)
            {
              v313 = 0;
              v314 = v765;
              v315 = SHIDWORD(__p.__r_.__value_.__r.__words[2]);
              v316 = v727;
              v317 = SHIDWORD(v711);
              v318 = v713;
              v319 = 8 * v763;
              v320 = &v684[v312];
              v321 = 8 * SHIDWORD(v682);
              do
              {
                v322 = 0.0;
                if (v309 >= 1)
                {
                  v323 = v320;
                  v324 = v314;
                  v325 = v601;
                  do
                  {
                    v326 = *v324++;
                    v322 = v322 + *v323 * v326;
                    v323 = (double *)((char *)v323 + v321);
                    --v325;
                  }
                  while (v325);
                }
                *(double *)&v318[v311 + v313 * v317] = *(double *)&v316[2 * ((int)v311 - (int)v613) + 2 * v313 * v315]
                                                     - v322;
                ++v313;
                v314 = (double *)((char *)v314 + v319);
              }
              while (v313 != v602);
            }
            if (v309 >= 1)
            {
              v327 = &v713[v311 + v602 * (uint64_t)SHIDWORD(v711)];
              v328 = 8 * SHIDWORD(v711);
              v329 = &v684[v312];
              v330 = 8 * SHIDWORD(v682);
              v331 = v602;
              do
              {
                *v327 = *(_QWORD *)v329;
                ++v331;
                v327 = (_QWORD *)((char *)v327 + v328);
                v329 = (double *)((char *)v329 + v330);
              }
              while (v331 < (int)v613);
            }
            v332 = v311 - (int)v613;
            v333 = v707;
            v334 = *(double *)&v747[v332] - *(double *)&v739[v332];
            *(double *)&v707[v311] = v334;
            if (v243)
            {
              if ((int)v601 < 1)
              {
                v336 = 0.0;
              }
              else
              {
                v335 = 0;
                v336 = 0.0;
                v337 = v601;
                v338 = v789;
                do
                {
                  v339 = *v338++;
                  v336 = v336 + v684[v332 + v335] * v339;
                  v335 += HIDWORD(v682);
                  --v337;
                }
                while (v337);
              }
              *(double *)&v333[v311] = v334 + v336;
            }
            if (v252)
            {
              v659 = 0x10000000ALL;
              v657 = (uint64_t (**)())&unk_1E25C6020;
              v658 = xmmword_18D31CEF0;
              v660 = v661;
              sub_18D053B2C((uint64_t)&v759, (uint64_t)v791, (uint64_t)&v657);
              v340 = 0.0;
              v341 = 0.0;
              if ((int)v601 >= 1)
              {
                v342 = 0;
                v343 = v601;
                v344 = (double *)v660;
                do
                {
                  v345 = *v344++;
                  v341 = v341 + v684[v332 + v342] * v345;
                  v342 += HIDWORD(v682);
                  --v343;
                }
                while (v343);
              }
              v346 = v707;
              v347 = v341 + *(double *)&v707[v311];
              *(double *)&v707[v311] = v347;
              if ((int)v602 >= 1)
              {
                v348 = 0;
                v340 = 0.0;
                v349 = v602;
                v350 = v792;
                do
                {
                  v351 = *v350++;
                  v340 = v340 + *(double *)&v727[2 * v332 + 2 * v348] * v351;
                  v348 += HIDWORD(__p.__r_.__value_.__r.__words[2]);
                  --v349;
                }
                while (v349);
              }
              *(double *)&v346[v311] = v347 + v340;
            }
            ++v311;
            ++v310;
            v309 = v601;
          }
          while (v311 < v603);
        }
        sub_18D2874D0((uint64_t)v679);
        v676 = 0x100000040;
        v674 = &off_1E25C8090;
        v675 = xmmword_18D336540;
        v677 = (double *)v678;
        v659 = 0x100000040;
        v657 = &off_1E25C8090;
        v658 = xmmword_18D336540;
        v660 = v661;
        v683 = 0x1400000014;
        v681 = &off_1E25C6EC0;
        v682 = xmmword_18D336500;
        v684 = v685;
        sub_18D054C20((uint64_t)&v709, (uint64_t)&v701, (uint64_t)&v657, (uint64_t)&v681, (uint64_t)&v674, (uint64_t)v679);
        v352 = v607 + 2392;
        v671 = 0x10000002CLL;
        v669 = &off_1E25C7B20;
        v670 = xmmword_18D3364B0;
        v672 = (double *)v673;
        v683 = 0x2C00000001;
        v681 = &off_1E25C6C80;
        v684 = v685;
        if (v603 - 1 == (_DWORD)v613)
        {
          LOBYTE(v353) = 0;
          *(_QWORD *)&v354 = 0x100000001;
          *((_QWORD *)&v354 + 1) = 0x100000001;
          v682 = v354;
          LODWORD(v685[0]) = v602 + v601;
          v355 = 1;
          v356 = 1;
        }
        else if (v603 - 1 - (int)v613 < 0)
        {
          v355 = 0;
          v356 = 0;
          v682 = 0uLL;
          LOBYTE(v353) = 1;
        }
        else
        {
          v356 = v603 - v613;
          LODWORD(v682) = 1;
          DWORD1(v682) = v603 - v613;
          DWORD2(v682) = v603 - v613;
          HIDWORD(v682) = 1;
          v357 = v685;
          v353 = (v603 - v613);
          v358 = v602 + v601;
          do
          {
            *(_DWORD *)v357 = v358;
            v357 = (double *)((char *)v357 + 4);
            ++v358;
            --v353;
          }
          while (v353);
          v355 = 1;
        }
        v359 = v596;
        v666 = 0x10000002CLL;
        v664 = &off_1E25C7B50;
        v667 = v668;
        *(_QWORD *)&v665 = __PAIR64__(v355, v356);
        DWORD2(v665) = v356 * v355;
        HIDWORD(v665) = v356;
        if (v356)
        {
          v360 = 0;
          for (j = 0; j != v356; ++j)
          {
            if ((v353 & 1) == 0)
            {
              v362 = 0;
              do
              {
                v668[j + HIDWORD(v665) * v362] = *((_DWORD *)v685 + v360 + v362);
                ++v362;
              }
              while (v355 != v362);
            }
            v360 += v355;
          }
        }
        sub_18D287684((uint64_t)&v681, (uint64_t)&v674, (uint64_t)&v664);
        sub_18D053AA8((uint64_t)&v669, (uint64_t)&v681);
        v364 = DWORD2(v670);
        v365 = 0.0;
        if (SDWORD2(v670) < 1)
        {
          v367 = xmmword_18D319A40;
        }
        else
        {
          v366 = v672;
          v367 = xmmword_18D319A40;
          do
          {
            v368 = *v366++;
            v365 = v365 + v368 * v368;
            --v364;
          }
          while (v364);
        }
        v663 = 1;
        if (!v587)
        {
          v108 = 0;
          goto LABEL_402;
        }
        if (v595)
        {
          v683 = 0x10000002CLL;
          v681 = &off_1E25C7B50;
          *(_QWORD *)&v369 = 0x100000001;
          *((_QWORD *)&v369 + 1) = 0x100000001;
          v682 = v369;
          v684 = v685;
          LODWORD(v685[0]) = v596;
          v659 = 0x10000002CLL;
          v657 = &off_1E25C7A90;
          v661[0] = 0;
          v660 = 0;
          v658 = xmmword_18D3364B0;
          sub_18D2887F0((uint64_t)&v657);
          v660 = (uint64_t *)v661[0];
          v722 = 0x100000001;
          v720 = (uint64_t (**)())&unk_1E25C6A40;
          v723 = v724;
          *(_QWORD *)&v370 = 0x100000001;
          *((_QWORD *)&v370 + 1) = 0x100000001;
          v721 = v370;
          sub_18D04BE88((uint64_t)&v720, 1.0);
          v616 = 0x100000001;
          v614 = (uint64_t (**)())&unk_1E25C6A40;
          *(_QWORD *)&v371.f64[0] = 0x100000001;
          *(_QWORD *)&v371.f64[1] = 0x100000001;
          v615 = (__int128)v371;
          v617 = (double *)v618;
          v371.f64[0] = (double)(int)v596;
          sub_18D064EF4((uint64_t)&v720, (uint64_t)&v614, v371);
          v372 = sub_18D053AA8((uint64_t)v660, (uint64_t)&v614);
          v373 = v595(1, &v681, &v657, v596, &v741, &v733, &v729, &__p, v372, v601, v599, v592, &v663, &v674, v679);
          v374 = v663 == 0;
          v657 = &off_1E25C7A90;
          sub_18D28879C(v661);
          if (v373)
          {
            v108 = 10;
LABEL_521:
            v577 = v680;
            v679[0] = &off_1E25C80F0;
            v680 = 0;
            if (v577)
              MEMORY[0x18D78B5BC](v577, 0x1000C8000313F17);
            v578 = v714;
            v709 = &off_1E25C80F0;
            v714 = 0;
            if (v578)
              MEMORY[0x18D78B5BC](v578, 0x1000C8000313F17);
            return v108;
          }
          v108 = (8 * v374);
          v359 = v596;
          goto LABEL_401;
        }
        cnstatistics::InverseChi2(v363, v54, (double)(int)v596);
        v377 = v376;
        if (v365 <= v376)
        {
          v108 = 0;
          v663 = 1;
          goto LABEL_401;
        }
        if (!v597)
        {
          if (cnprint::CNPrinter::GetLogLevel(v375) <= 1)
          {
            LOWORD(v681) = 2;
            LOBYTE(v657) = 1;
            v387 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v607 + 2344), "SRIF Global test rejected %d-dof measurement with Chi2 statistic %lg vs. bound %lg; no further testing (dolocaltest = %d)",
                                      v596,
                                      v365,
                                      v377,
                                      0);
            if (*(char *)(v607 + 2367) >= 0)
              LOBYTE(v393) = v387;
            else
              v393 = *(_QWORD *)(v607 + 2344);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v681, (unsigned __int8 *)&v657, "%s", v388, v389, v390, v391, v392, v393);
          }
          v663 = 0;
          sub_18D1E2AB8((uint64_t *)(v607 + 2272), *(_DWORD **)(v607 + 2320), *(_DWORD **)(v607 + 2328), (uint64_t)(*(_QWORD *)(v607 + 2328) - *(_QWORD *)(v607 + 2320)) >> 5);
          sub_18D1C59EC((uint64_t *)(v607 + 2320));
          v108 = 8;
          goto LABEL_401;
        }
        LOWORD(v681) = 2;
        LOBYTE(v657) = 2;
        cnprint::CNLogFormatter::FormatGeneral((const void **)(v607 + 2344), "SRIF Global test rejected %d-dof measurement with Chi2 statistic %lg vs. bound %lg; begin local testing",
          v596,
          v365,
          v376);
        if (*(char *)(v607 + 2367) >= 0)
          LOBYTE(v383) = v607 + 40;
        else
          v383 = *(_QWORD *)(v607 + 2344);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v681, (unsigned __int8 *)&v657, "%s", v378, v379, v380, v381, v382, v383);
        cnstatistics::InverseChi2(v384, v54, 1.0);
        v386 = v385;
        v662 = INFINITY;
        sub_18D285910((uint64_t)&v681, v607 + 128, &v662);
        sub_18D27FE98((uint64_t)&v614, (uint64_t)&v681);
        if (v662 > v53)
        {
          v108 = 0;
LABEL_401:
          v367 = xmmword_18D319A40;
LABEL_402:
          v722 = 0xA0000000ALL;
          v720 = (uint64_t (**)())&unk_1E25C5FC0;
          v721 = v367;
          v723 = v724;
          v717 = 0xA0000000ALL;
          v715 = (uint64_t (**)())&unk_1E25C5FC0;
          v716 = v367;
          v718 = v719;
          v639 = 0xA0000000ALL;
          v637 = (uint64_t (**)())&unk_1E25C5FC0;
          v638 = v367;
          v640 = v641;
          v649 = 0x10000000ALL;
          v647 = &unk_1E25C6020;
          v648 = xmmword_18D31CEF0;
          v650 = v651;
          v634 = 0x10000000ALL;
          v632 = (uint64_t (**)())&unk_1E25C6020;
          v633 = xmmword_18D31CEF0;
          v635 = v636;
          v629 = 0x10000000ALL;
          v627 = (uint64_t (**)())&unk_1E25C6020;
          v628 = xmmword_18D31CEF0;
          v630 = v631;
          v659 = 0xA00000001;
          v657 = &off_1E25C67D0;
          v660 = v661;
          v458 = v602;
          if (v602 == 1)
          {
            v459 = 0;
            *(_QWORD *)&v460 = 0x100000001;
            *((_QWORD *)&v460 + 1) = 0x100000001;
            v658 = v460;
            LODWORD(v661[0]) = 0;
            v461 = 1;
          }
          else if ((int)v602 <= 0)
          {
            v461 = 0;
            v458 = 0;
            v658 = 0uLL;
            v459 = 1;
          }
          else
          {
            v462 = 0;
            LODWORD(v658) = 1;
            DWORD1(v658) = v602;
            *((_QWORD *)&v658 + 1) = v602 | 0x100000000;
            do
            {
              *((_DWORD *)v661 + v462) = v462;
              ++v462;
            }
            while (v602 != v462);
            v459 = 0;
            v461 = 1;
            v458 = v602;
          }
          v683 = 0x10000000ALL;
          v681 = (uint64_t (**)())&unk_1E25C6050;
          v684 = v685;
          *(_QWORD *)&v682 = __PAIR64__(v461, v458);
          DWORD2(v682) = v458 * v461;
          HIDWORD(v682) = v458;
          if (v458)
          {
            v463 = 0;
            for (k = 0; k != v458; ++k)
            {
              if ((v459 & 1) == 0)
              {
                v465 = 0;
                do
                {
                  *((_DWORD *)v685 + k + HIDWORD(v682) * v465) = *((_DWORD *)v661 + v463 + v465);
                  ++v465;
                }
                while (v461 != v465);
              }
              v463 += v461;
            }
          }
          v466 = v352;
          sub_18D053D7C((uint64_t)&v749, (uint64_t)&v681);
          v467 = v613 - 1;
          v659 = 0xA00000001;
          v657 = &off_1E25C67D0;
          v660 = v661;
          if ((_DWORD)v613 - 1 == v602)
          {
            LOBYTE(v468) = 0;
            *(_QWORD *)&v469 = 0x100000001;
            *((_QWORD *)&v469 + 1) = 0x100000001;
            v658 = v469;
            LODWORD(v661[0]) = v602;
            v470 = 1;
            v471 = 1;
          }
          else if ((int)(v467 - v602) < 0)
          {
            v470 = 0;
            v471 = 0;
            v658 = 0uLL;
            LOBYTE(v468) = 1;
          }
          else
          {
            v471 = v601;
            LODWORD(v658) = 1;
            DWORD1(v658) = v601;
            *((_QWORD *)&v658 + 1) = v601 | 0x100000000;
            v472 = v661;
            v468 = v601;
            v473 = v602;
            do
            {
              *(_DWORD *)v472 = v473;
              v472 = (uint64_t *)((char *)v472 + 4);
              ++v473;
              --v468;
            }
            while (v468);
            v470 = 1;
          }
          v683 = 0x10000000ALL;
          v681 = (uint64_t (**)())&unk_1E25C6050;
          v684 = v685;
          *(_QWORD *)&v682 = __PAIR64__(v470, v471);
          DWORD2(v682) = v471 * v470;
          HIDWORD(v682) = v471;
          if (v471)
          {
            v474 = 0;
            for (m = 0; m != v471; ++m)
            {
              if ((v468 & 1) == 0)
              {
                v476 = 0;
                do
                {
                  *((_DWORD *)v685 + m + HIDWORD(v682) * v476) = *((_DWORD *)v661 + v474 + v476);
                  ++v476;
                }
                while (v470 != v476);
              }
              v474 += v470;
            }
          }
          sub_18D053D7C((uint64_t)&v754, (uint64_t)&v681);
          sub_18D286E0C((uint64_t)&v681, (uint64_t)v679, (uint64_t)&v754, (uint64_t)&v754);
          sub_18D053AA8((uint64_t)&v720, (uint64_t)&v681);
          sub_18D286E0C((uint64_t)&v681, (uint64_t)v679, (uint64_t)&v749, (uint64_t)&v749);
          sub_18D053AA8((uint64_t)&v715, (uint64_t)&v681);
          sub_18D286E0C((uint64_t)&v681, (uint64_t)v679, (uint64_t)&v749, (uint64_t)&v754);
          sub_18D053AA8((uint64_t)&v637, (uint64_t)&v681);
          sub_18D286D24((uint64_t)&v681, (uint64_t)&v674, (uint64_t)&v749);
          sub_18D053AA8((uint64_t)&v647, (uint64_t)&v681);
          sub_18D286D24((uint64_t)&v681, (uint64_t)&v674, (uint64_t)&v754);
          sub_18D053AA8((uint64_t)&v632, (uint64_t)&v681);
          v609 = pow(6.28318531, (double)v359 * -0.5);
          v604 = exp(v365 * -0.5);
          v659 = 0x1400000014;
          v657 = &off_1E25C6EC0;
          v658 = xmmword_18D336500;
          v660 = v661;
          sub_18D1D4A98(v599, 0, (uint64_t)&v657);
          v477 = DWORD1(v658);
          if (DWORD1(v658))
          {
            v478 = 0;
            v479 = v658;
            v480 = (uint64_t)v660;
            v481 = v658 - 1;
            v482 = 1;
            do
            {
              v483 = *(double *)(v480 + 8 * v479 * v478);
              v484 = v482;
              v485 = v481;
              if (v479 >= 2)
              {
                do
                {
                  v483 = v483 * *(double *)(v480 + 8 * v484++);
                  --v485;
                }
                while (v485);
              }
              v685[v478++] = v483;
              v482 += v479;
            }
            while (v478 != v477);
          }
          v486 = v685[0];
          v659 = 0x1400000014;
          v657 = &off_1E25C6EC0;
          v658 = xmmword_18D336500;
          v660 = v661;
          sub_18D1D4A98((uint64_t)&v720, 0, (uint64_t)&v657);
          v487 = DWORD1(v658);
          if (DWORD1(v658))
          {
            v488 = 0;
            v489 = v658;
            v490 = (uint64_t)v660;
            v491 = v658 - 1;
            v492 = 1;
            do
            {
              v493 = *(double *)(v490 + 8 * v489 * v488);
              v494 = v492;
              v495 = v491;
              if (v489 >= 2)
              {
                do
                {
                  v493 = v493 * *(double *)(v490 + 8 * v494++);
                  --v495;
                }
                while (v495);
              }
              v685[v488++] = v493;
              v492 += v489;
            }
            while (v488 != v487);
          }
          v496 = v685[0];
          v659 = 0x1400000014;
          v657 = &off_1E25C6EC0;
          v658 = xmmword_18D336500;
          v660 = v661;
          sub_18D1D4A98(v598, 0, (uint64_t)&v657);
          v497 = DWORD1(v658);
          if (DWORD1(v658))
          {
            v498 = 0;
            v499 = v658;
            v500 = (uint64_t)v660;
            v501 = v658 - 1;
            v502 = 1;
            do
            {
              v503 = *(double *)(v500 + 8 * v499 * v498);
              v504 = v502;
              v505 = v501;
              if (v499 >= 2)
              {
                do
                {
                  v503 = v503 * *(double *)(v500 + 8 * v504++);
                  --v505;
                }
                while (v505);
              }
              v685[v498++] = v503;
              v502 += v499;
            }
            while (v498 != v497);
          }
          v506 = v685[0];
          v659 = 0x1400000014;
          v657 = &off_1E25C6EC0;
          v658 = xmmword_18D336500;
          v660 = v661;
          sub_18D1D4A98((uint64_t)&v715, 0, (uint64_t)&v657);
          v507 = DWORD1(v658);
          if (DWORD1(v658))
          {
            v508 = 0;
            v509 = v658;
            v510 = (uint64_t)v660;
            v511 = v658 - 1;
            v512 = 1;
            do
            {
              v513 = *(double *)(v510 + 8 * v509 * v508);
              v514 = v512;
              v515 = v511;
              if (v509 >= 2)
              {
                do
                {
                  v513 = v513 * *(double *)(v510 + 8 * v514++);
                  --v515;
                }
                while (v515);
              }
              v685[v508++] = v513;
              v512 += v509;
            }
            while (v508 != v507);
          }
          v516 = v604 * (v609 * fabs(v124 * (v486 * v506) / (v125 * v496 * v685[0])));
          if (v663)
          {
            if (v594)
            {
              v659 = 0x10000000ALL;
              v657 = (uint64_t (**)())&unk_1E25C6020;
              v658 = xmmword_18D31CEF0;
              v660 = v661;
              sub_18D053B2C((uint64_t)&v720, (uint64_t)&v783, (uint64_t)&v657);
              v517 = v607;
              v683 = 0x10000000ALL;
              v681 = (uint64_t (**)())&unk_1E25C6020;
              v682 = xmmword_18D31CEF0;
              v684 = v685;
              v518 = (__n128)sub_18D0540FC((uint64_t)&v632, (uint64_t)&v657, (uint64_t)&v681);
              LOBYTE(v657) = 0;
              if (v594(v601, v794, &v681, &v720, v593, &v657, &v627, &v632, v518))
              {
                v108 = 18;
                goto LABEL_521;
              }
              if (!(_BYTE)v657)
              {
                sub_18D053AA8(v607 + 1088, (uint64_t)&v783);
                sub_18D053AA8(v607 + 2048, (uint64_t)&v632);
                sub_18D053AA8(v607 + 1208, (uint64_t)&v720);
                sub_18D053AA8(v466, (uint64_t)&v637);
                sub_18D053AA8(v588, (uint64_t)&v647);
                sub_18D053AA8(v589, (uint64_t)&v715);
                v108 = 0;
                *(double *)(v607 + 2168) = v516;
                goto LABEL_520;
              }
            }
            else
            {
              v683 = 0xA0000000ALL;
              v681 = (uint64_t (**)())&unk_1E25C5FC0;
              v682 = xmmword_18D319A40;
              v684 = v685;
              v659 = 0xA0000000ALL;
              v657 = (uint64_t (**)())&unk_1E25C5FC0;
              v658 = xmmword_18D319A40;
              v660 = v661;
              v654 = 0x10000000ALL;
              v652 = (uint64_t (**)())&unk_1E25C6050;
              v653 = xmmword_18D31CEF0;
              v655 = v656;
              v644 = 0x10000000ALL;
              v642 = (uint64_t (**)())&unk_1E25C6050;
              v643 = xmmword_18D31CEF0;
              v645 = v646;
              v616 = 0x100000028;
              v614 = (uint64_t (**)())&unk_1E25C79D0;
              v615 = xmmword_18D3364D0;
              v617 = (double *)v618;
              v517 = v607;
              v522 = sub_18D054568((uint64_t)&v720, (uint64_t)&v652, (uint64_t)&v642, (uint64_t)&v614, (uint64_t)&v657);
              sub_18D053AA8((uint64_t)&v681, (uint64_t)&v657);
              if (v522 > v53)
              {
                sub_18D053AA8(v607 + 1088, (uint64_t)&v783);
                sub_18D053AA8(v607 + 2048, (uint64_t)&v632);
                sub_18D053AA8(v607 + 1208, (uint64_t)&v720);
                sub_18D053AA8(v466, (uint64_t)&v637);
                sub_18D053AA8(v588, (uint64_t)&v647);
                sub_18D053AA8(v589, (uint64_t)&v715);
                v108 = 0;
                *(double *)(v607 + 2168) = v516;
                *(_BYTE *)(v607 + 2176) = 1;
LABEL_520:
                *(_DWORD *)(v517 + 2180) = 1;
                goto LABEL_521;
              }
              sub_18D27A2DC((uint64_t)&v657, (uint64_t)&v681, (uint64_t)&v632);
              sub_18D053AA8((uint64_t)&v627, (uint64_t)&v657);
              *(_BYTE *)(v607 + 2176) = 2;
            }
LABEL_514:
            sub_18D053AA8(v517 + 1088, (uint64_t)&v627);
            sub_18D053AA8(v517 + 1208, (uint64_t)&v720);
            sub_18D053AA8(v517 + 2048, (uint64_t)&v632);
            sub_18D053AA8(v466, (uint64_t)&v637);
            sub_18D053AA8(v588, (uint64_t)&v647);
            sub_18D053AA8(v589, (uint64_t)&v715);
            *(double *)(v517 + 2168) = v516;
            if ((_DWORD)v108 == 9 || !(_DWORD)v108)
            {
              sub_18D1E4000(v586, ((uint64_t)(*(_QWORD *)(v517 + 2328) - *(_QWORD *)(v517 + 2320)) >> 5)+ ((uint64_t)(*(_QWORD *)(v517 + 2304) - *(_QWORD *)(v517 + 2296)) >> 5));
              v575 = *(_QWORD *)(v517 + 2320);
              v576 = *(_QWORD *)(v517 + 2328);
              while (v575 != v576)
              {
                sub_18D1E4090(v586, v575);
                v575 += 32;
              }
              sub_18D1C59EC((uint64_t *)(v517 + 2320));
            }
            goto LABEL_520;
          }
          if (!v591)
          {
            sub_18D053AA8(v607 + 1088, (uint64_t)&v783);
            sub_18D053AA8(v607 + 1208, v599);
            sub_18D27A2DC((uint64_t)&v681, v607 + 1208, (uint64_t)&v783);
            sub_18D053AA8(v607 + 2048, (uint64_t)&v681);
            v683 = 0xA0000000ALL;
            v681 = (uint64_t (**)())&unk_1E25C5FC0;
            v684 = v685;
            *(_QWORD *)&v682 = __PAIR64__(v601, v602);
            DWORD2(v682) = v602 * v601;
            HIDWORD(v682) = v602;
            sub_18D04BE88((uint64_t)&v681, 0.0);
            sub_18D053AA8(v466, (uint64_t)&v681);
            sub_18D27A2DC((uint64_t)&v657, v598, (uint64_t)v791);
            sub_18D27A2DC((uint64_t)&v614, v466, (uint64_t)&v783);
            v683 = 0x10000000ALL;
            v681 = (uint64_t (**)())&unk_1E25C6020;
            v682 = xmmword_18D31CEF0;
            v684 = v685;
            sub_18D053FA4((uint64_t)&v657, (uint64_t)&v614, (uint64_t)&v681);
            sub_18D053AA8(v588, (uint64_t)&v681);
            sub_18D053AA8(v589, v598);
            *(double *)(v607 + 2168) = v516;
            *(_DWORD *)(v607 + 2180) = 1;
            goto LABEL_521;
          }
          v683 = 0x1400000001;
          v681 = &off_1E25C6AD0;
          v684 = v685;
          if ((_DWORD)v613 == 1)
          {
            *(_QWORD *)&v523 = 0x100000001;
            *((_QWORD *)&v523 + 1) = 0x100000001;
            v682 = v523;
            LODWORD(v685[0]) = 0;
            v521 = 1;
            v519 = 1;
          }
          else
          {
            v519 = v602 + v601;
            if ((int)v613 <= 0)
            {
              v521 = 0;
              v519 = 0;
              v682 = 0uLL;
            }
            else
            {
              v520 = 0;
              LODWORD(v682) = 1;
              DWORD1(v682) = v602 + v601;
              *((_QWORD *)&v682 + 1) = v613 | 0x100000000;
              do
              {
                *((_DWORD *)v685 + v520) = v520;
                ++v520;
              }
              while (v613 != v520);
              v521 = 1;
            }
          }
          v624 = 0x100000014;
          v619 = &off_1E25C6E90;
          v620 = v519;
          v621 = v521;
          v622 = v521 * v519;
          v623 = v519;
          v625 = &v626;
          sub_18D163160((uint64_t)&v681, (uint64_t)&v619);
          v524 = HIDWORD(v710);
          v616 = 0x100000014;
          v614 = &off_1E25C6E90;
          if ((v710 & 0x8000000000000000) != 0)
            __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
          v525 = vdupq_lane_s32((int32x2_t)(HIDWORD(v710) | 0x100000000), 0);
          v525.i32[1] = 1;
          v615 = (__int128)v525;
          v617 = (double *)v618;
          if (HIDWORD(v710))
          {
            v526 = 0;
            do
            {
              v618[v526] = v526;
              ++v526;
            }
            while (v524 != v526);
          }
          v683 = 0x1400000014;
          v682 = xmmword_18D336500;
          v681 = &off_1E25C4D90;
          v684 = v685;
          v690[374] = &v709;
          v693 = 0x100000014;
          v691 = &off_1E25C6E90;
          v692 = xmmword_18D336510;
          v694 = &v695;
          v698 = 0x100000014;
          v696 = &off_1E25C6E90;
          v697 = xmmword_18D336510;
          v699 = &v700;
          sub_18D053D7C((uint64_t)&v691, (uint64_t)&v619);
          sub_18D053D7C((uint64_t)&v696, (uint64_t)&v614);
          v527 = DWORD2(v692);
          v528 = DWORD2(v697);
          *(_QWORD *)&v682 = __PAIR64__(DWORD2(v697), DWORD2(v692));
          v529 = (DWORD2(v697) * DWORD2(v692));
          DWORD2(v682) = DWORD2(v697) * DWORD2(v692);
          HIDWORD(v682) = DWORD2(v692);
          if (DWORD2(v697))
          {
            v530 = 0;
            v531 = 0;
            v532 = HIDWORD(v711);
            v533 = v713;
            v534 = v699;
            v535 = v694;
            v536 = v684;
            do
            {
              if ((_DWORD)v527)
              {
                v537 = *((_DWORD *)v534 + v531) * v532;
                v538 = (int *)v535;
                v539 = v530;
                v540 = v527;
                do
                {
                  v541 = *v538++;
                  v536[v539++] = *(double *)&v533[v541 + v537];
                  --v540;
                }
                while (v540);
              }
              ++v531;
              v530 += v527;
            }
            while (v531 != v528);
          }
          v659 = 0x1400000014;
          v657 = &off_1E25C6EC0;
          *(_QWORD *)&v658 = __PAIR64__(v528, v527);
          *((_QWORD *)&v658 + 1) = __PAIR64__(v527, v529);
          v542 = v661;
          v660 = v661;
          if (v527 > 0x14)
          {
            v582 = "this->max_num_rows_ >= A.num_rows_";
            v583 = 616;
          }
          else
          {
            if (v528 < 0x15)
            {
              if ((int)v529 > 3)
              {
                v545 = v684;
                v546 = (v529 - 1) >> 1;
                v547 = v684;
                v548 = v661;
                do
                {
                  v549 = *(_OWORD *)v547;
                  v547 += 2;
                  *(_OWORD *)v548 = v549;
                  v548 += 2;
                  --v546;
                }
                while (v546);
                *(_OWORD *)&v661[(v529 - 2)] = *(_OWORD *)&v545[(v529 - 2)];
              }
              else if ((int)v529 >= 1)
              {
                v543 = v684;
                do
                {
                  v544 = *(_QWORD *)v543++;
                  *v542++ = v544;
                  --v529;
                }
                while (v529);
              }
              v683 = 0x100000014;
              v682 = xmmword_18D336510;
              v681 = &off_1E25C5510;
              v684 = v685;
              *(_QWORD *)&v685[20] = &v701;
              v688 = 0x100000014;
              v686 = &off_1E25C6E90;
              v687 = xmmword_18D336510;
              v689 = (int *)v690;
              sub_18D053D7C((uint64_t)&v686, (uint64_t)&v619);
              v550 = v687;
              v551 = DWORD1(v687);
              *(_QWORD *)&v682 = v687;
              v552 = (DWORD1(v687) * v687);
              *((_QWORD *)&v682 + 1) = __PAIR64__(v687, v552);
              if ((int)v552 >= 1)
              {
                v553 = v707;
                v554 = (DWORD1(v687) * v687);
                v555 = v689;
                v556 = v684;
                do
                {
                  v557 = *v555++;
                  *v556++ = *(double *)&v553[v557];
                  --v554;
                }
                while (v554);
              }
              v644 = 0x100000014;
              v642 = &off_1E25C6E60;
              *(_QWORD *)&v643 = __PAIR64__(v551, v550);
              *((_QWORD *)&v643 + 1) = __PAIR64__(v550, v552);
              v558 = v646;
              v645 = v646;
              if (v550 > 0x14)
              {
                v584 = "this->max_num_rows_ >= A.num_rows_";
                v585 = 616;
              }
              else
              {
                if (v551 < 2)
                {
                  if ((int)v552 > 3)
                  {
                    v561 = v684;
                    v562 = (v552 - 1) >> 1;
                    v563 = v684;
                    v564 = v646;
                    do
                    {
                      v565 = *(_OWORD *)v563;
                      v563 += 2;
                      *v564++ = v565;
                      --v562;
                    }
                    while (v562);
                    *(_OWORD *)&v646[(v552 - 2)] = *(_OWORD *)&v561[(v552 - 2)];
                  }
                  else if ((int)v552 >= 1)
                  {
                    v559 = v684;
                    do
                    {
                      v560 = *(_QWORD *)v559++;
                      *v558++ = v560;
                      --v552;
                    }
                    while (v552);
                  }
                  v616 = 0x1400000014;
                  v614 = &off_1E25C6EC0;
                  v615 = xmmword_18D336500;
                  v617 = (double *)v618;
                  v654 = 0x100000014;
                  v652 = &off_1E25C6E60;
                  v653 = xmmword_18D336510;
                  v655 = v656;
                  v683 = 0x1400000014;
                  v681 = &off_1E25C6EC0;
                  v682 = xmmword_18D336500;
                  v684 = v685;
                  sub_18D054C20((uint64_t)&v657, (uint64_t)&v642, (uint64_t)&v652, (uint64_t)&v681, (uint64_t)&v674, (uint64_t)&v614);
                  v654 = 0xA00000001;
                  v652 = &off_1E25C67D0;
                  v655 = v656;
                  if (v602 == 1)
                  {
                    *(_QWORD *)&v566 = 0x100000001;
                    *((_QWORD *)&v566 + 1) = 0x100000001;
                    v653 = v566;
                    v656[0] = 0;
                    v567 = 1;
                    v247 = 1;
                  }
                  else if ((int)v602 <= 0)
                  {
                    v567 = 0;
                    v247 = 0;
                    v653 = 0uLL;
                  }
                  else
                  {
                    v568 = 0;
                    LODWORD(v653) = 1;
                    DWORD1(v653) = v602;
                    *((_QWORD *)&v653 + 1) = v602 | 0x100000000;
                    do
                    {
                      v656[v568] = v568;
                      ++v568;
                    }
                    while (v602 != v568);
                    v567 = 1;
                  }
                  v683 = 0x10000000ALL;
                  v681 = (uint64_t (**)())&unk_1E25C6050;
                  *(_QWORD *)&v682 = __PAIR64__(v567, v247);
                  DWORD2(v682) = v567 * v247;
                  HIDWORD(v682) = v247;
                  v684 = v685;
                  sub_18D163160((uint64_t)&v652, (uint64_t)&v681);
                  sub_18D053D7C((uint64_t)&v749, (uint64_t)&v681);
                  v654 = 0xA00000001;
                  v652 = &off_1E25C67D0;
                  v569 = v656;
                  v655 = v656;
                  v570 = v602;
                  if (v467 == v602)
                  {
                    *(_QWORD *)&v571 = 0x100000001;
                    *((_QWORD *)&v571 + 1) = 0x100000001;
                    v653 = v571;
                    v656[0] = v602;
                    v572 = 1;
                    v573 = 1;
                    v517 = v607;
                  }
                  else
                  {
                    v517 = v607;
                    if ((int)(v467 - v602) < 0)
                    {
                      v572 = 0;
                      v573 = 0;
                      v653 = 0uLL;
                    }
                    else
                    {
                      v573 = v601;
                      LODWORD(v653) = 1;
                      DWORD1(v653) = v601;
                      *((_QWORD *)&v653 + 1) = v601 | 0x100000000;
                      v574 = v601;
                      do
                      {
                        *v569++ = v570++;
                        --v574;
                      }
                      while (v574);
                      v572 = 1;
                    }
                  }
                  v683 = 0x10000000ALL;
                  v681 = (uint64_t (**)())&unk_1E25C6050;
                  *(_QWORD *)&v682 = __PAIR64__(v572, v573);
                  DWORD2(v682) = v572 * v573;
                  HIDWORD(v682) = v573;
                  v684 = v685;
                  sub_18D163160((uint64_t)&v652, (uint64_t)&v681);
                  sub_18D053D7C((uint64_t)&v754, (uint64_t)&v681);
                  sub_18D286E0C((uint64_t)&v681, (uint64_t)&v614, (uint64_t)&v754, (uint64_t)&v754);
                  sub_18D053AA8((uint64_t)&v720, (uint64_t)&v681);
                  sub_18D286E0C((uint64_t)&v681, (uint64_t)&v614, (uint64_t)&v749, (uint64_t)&v749);
                  sub_18D053AA8((uint64_t)&v715, (uint64_t)&v681);
                  sub_18D286E0C((uint64_t)&v681, (uint64_t)&v614, (uint64_t)&v749, (uint64_t)&v754);
                  sub_18D053AA8((uint64_t)&v637, (uint64_t)&v681);
                  sub_18D286D24((uint64_t)&v681, (uint64_t)&v674, (uint64_t)&v749);
                  sub_18D053AA8((uint64_t)&v647, (uint64_t)&v681);
                  sub_18D286D24((uint64_t)&v681, (uint64_t)&v674, (uint64_t)&v754);
                  sub_18D053AA8((uint64_t)&v632, (uint64_t)&v681);
                  sub_18D053AA8((uint64_t)&v627, (uint64_t)&v783);
                  goto LABEL_514;
                }
                v584 = "this->max_num_cols_ >= A.num_cols_";
                v585 = 617;
              }
              __assert_rtn("CNMatrix", "cnmatrix.h", v585, v584);
            }
            v582 = "this->max_num_cols_ >= A.num_cols_";
            v583 = 617;
          }
          __assert_rtn("CNMatrix", "cnmatrix.h", v583, v582);
        }
        sub_18D287778((uint64_t)&v632, v596 + v601, v596);
        sub_18D285F34((uint64_t)&v681, (uint64_t)&v729);
        sub_18D285FA0((uint64_t)&v657, (uint64_t)&v614, (uint64_t)&v681);
        if ((int)v601 >= 1)
        {
          v394 = 0;
          v395 = (uint64_t)v660;
          v396 = v635;
          v397 = 8 * SHIDWORD(v633);
          v398 = 8 * SHIDWORD(v658);
          do
          {
            v399 = (_QWORD *)v395;
            v400 = v396;
            v401 = v596;
            if ((int)v596 >= 1)
            {
              do
              {
                *v400 = *v399;
                v400 = (_QWORD *)((char *)v400 + v397);
                v399 = (_QWORD *)((char *)v399 + v398);
                --v401;
              }
              while (v401);
            }
            ++v394;
            ++v396;
            v395 += 8;
          }
          while (v394 != v601);
        }
        if ((int)v596 >= 1)
        {
          v402 = SHIDWORD(v633);
          v403 = v635;
          v404 = &v635[v601];
          v405 = 8 * SHIDWORD(v633);
          v406 = v601;
          do
          {
            v407 = v404;
            v408 = v596;
            do
            {
              *v407 = 0;
              v407 = (_QWORD *)((char *)v407 + v405);
              --v408;
            }
            while (v408);
            v403[v406 + (v406 - v601) * v402] = 0x3FF0000000000000;
            ++v406;
            ++v404;
          }
          while (v406 < (int)(v596 + v601));
        }
        sub_18D286020((uint64_t)&v627, (uint64_t)&v632);
        sub_18D285E90((uint64_t)&v681, 0, v596 - 1);
        sub_18D285E24((uint64_t)&v637, (uint64_t)&v681);
        sub_18D286290((uint64_t)&v681, (uint64_t)&v627, (uint64_t)&v637, (uint64_t)&v637);
        sub_18D286174((uint64_t)&v619, (uint64_t)&v681, &v662);
        v410 = v685[0];
        v681 = &off_1E25C7BB0;
        v685[0] = 0.0;
        if (v410 != 0.0)
          MEMORY[0x18D78B5BC](*(_QWORD *)&v410, 0x1000C8000313F17);
        v409.n128_f64[0] = v662;
        if (v662 > v53)
        {
          v108 = 0;
LABEL_395:
          v455 = v626;
          v619 = &off_1E25C7BB0;
          v626 = 0;
          if (v455)
            MEMORY[0x18D78B5BC](v455, 0x1000C8000313F17, v409);
          v456 = v631[0];
          v627 = &off_1E25C8030;
          v631[0] = 0;
          if (v456)
            MEMORY[0x18D78B5BC](v456, 0x1000C8000313F17, v409);
          v457 = v636[0];
          v632 = &off_1E25C8030;
          v636[0] = 0;
          if (v457)
            MEMORY[0x18D78B5BC](v457, 0x1000C8000313F17, v409);
          goto LABEL_401;
        }
        v659 = 0x10000002CLL;
        v657 = &off_1E25C7B20;
        v658 = xmmword_18D3364B0;
        v660 = v661;
        sub_18D0540FC((uint64_t)&v741, (uint64_t)&v733, (uint64_t)&v657);
        sub_18D286400((uint64_t)&v715, (uint64_t)&v619);
        sub_18D286394((uint64_t)&v681, (uint64_t)&v715, (uint64_t)&v657);
        v411 = (const void **)(v607 + 2344);
        sub_18D286394((uint64_t)&v720, (uint64_t)&v619, (uint64_t)&v681);
        v681 = (uint64_t (**)())&unk_1E25C5E70;
        v412 = (cnprint::CNPrinter *)v719[0];
        v715 = &off_1E25C7BB0;
        v719[0] = 0;
        if (v412)
          v412 = (cnprint::CNPrinter *)MEMORY[0x18D78B5BC](v412, 0x1000C8000313F17);
        v654 = 0x10000002CLL;
        v652 = &off_1E25C7B50;
        *(_QWORD *)&v653 = v596 | 0x100000000;
        DWORD2(v653) = v596;
        HIDWORD(v653) = v596;
        v655 = v656;
        if ((int)v596 < 1)
        {
          v416 = 0;
          v415 = 0;
        }
        else
        {
          v413 = 0;
          v414 = 0;
          v415 = 0;
          v416 = 0;
          do
          {
            v417 = (double *)((char *)&v625[v413 / 8] + v413 * v623);
            v418 = 0.0;
            v419 = v414;
            do
            {
              v418 = v418 + *v417 * *v417;
              ++v419;
              v417 += v623;
            }
            while (v419 < v596);
            v420 = *(double *)&v723[2 * v414] * (*(double *)&v723[2 * v414] / v418);
            if (v420 <= v386)
            {
              v655[v415++] = v414;
              ++v416;
            }
            else
            {
              if (cnprint::CNPrinter::GetLogLevel(v412) <= 1)
              {
                LOWORD(v681) = 2;
                LOBYTE(v715) = 1;
                cnprint::CNLogFormatter::FormatGeneral(v411, "SRIF Local test rejected measurement with Chi2 statistic %lg vs. bound %lg.", v420, v386);
                if (*(char *)(v607 + 2367) >= 0)
                  LOBYTE(v426) = v607 + 40;
                else
                  v426 = *(_QWORD *)(v607 + 2344);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v681, (unsigned __int8 *)&v715, "%s", v421, v422, v423, v424, v425, v426);
              }
              sub_18D286480(v607, v414);
            }
            ++v414;
            v413 += 8;
          }
          while (v414 != v596);
        }
        v427 = vdupq_lane_s32((int32x2_t)(v415 | 0x100000000), 0);
        v427.i32[1] = 1;
        v653 = (__int128)v427;
        sub_18D286580(v607, (uint64_t)&v652);
        v352 = v607 + 2392;
        v359 = v596;
        if ((int)v596 > v416 && v416 >= 1)
        {
          sub_18D286714((uint64_t)&v647, v613 - 1);
          sub_18D2866A8((uint64_t)&v642, (uint64_t)&v647);
          v683 = 0x10000002CLL;
          v681 = &off_1E25C7B50;
          v429 = v685;
          v684 = v685;
          *(_QWORD *)&v682 = v653;
          v430 = (DWORD1(v653) * v653);
          *((_QWORD *)&v682 + 1) = __PAIR64__(v653, v430);
          if ((int)v430 >= 1)
          {
            v431 = v655;
            do
            {
              v432 = *v431++;
              *(_DWORD *)v429 = v432 + v613;
              v429 = (double *)((char *)v429 + 4);
              --v430;
            }
            while (v430);
          }
          v717 = 0x100000040;
          v715 = &off_1E25C80C0;
          v716 = xmmword_18D336540;
          v718 = v719;
          sub_18D1CD0EC((uint64_t)&v642, (uint64_t)&v681, (uint64_t)&v715);
          sub_18D2867A8((uint64_t)&v681, (uint64_t)&v709, (uint64_t)&v715);
          v433 = sub_18D053AA8((uint64_t)&v709, (uint64_t)&v681);
          v690[13] = &unk_1E25C5EA0;
          *(_QWORD *)&v685[2] = &unk_1E25C5EA0;
          v434 = v685[0];
          v681 = &off_1E25C80F0;
          v685[0] = 0.0;
          if (v434 != 0.0)
            MEMORY[0x18D78B5BC](*(_QWORD *)&v434, 0x1000C8000313F17, v433);
          sub_18D2884C0((uint64_t)&v681, (uint64_t)&v701, (uint64_t)&v715);
          sub_18D053AA8((uint64_t)&v701, (uint64_t)&v681);
          sub_18D285D90((uint64_t)&v709, (uint64_t)&v701, (uint64_t)&v674, (uint64_t)v679);
          sub_18D285E90((uint64_t)&v642, v613, v415 + v613 - 1);
          sub_18D285E24((uint64_t)&v681, (uint64_t)&v642);
          sub_18D053D7C((uint64_t)&v664, (uint64_t)&v681);
          sub_18D287684((uint64_t)&v681, (uint64_t)&v674, (uint64_t)&v664);
          sub_18D053AA8((uint64_t)&v669, (uint64_t)&v681);
          cnstatistics::InverseChi2(v435, v54, (double)v416);
          v437 = v409.n128_f64[0];
          v438 = DWORD2(v670);
          v439 = 0.0;
          if (SDWORD2(v670) < 1)
          {
            v359 = v596;
          }
          else
          {
            v440 = (unint64_t *)v672;
            v359 = v596;
            do
            {
              v441 = *v440++;
              v409.n128_u64[0] = v441;
              v439 = v439 + v409.n128_f64[0] * v409.n128_f64[0];
              --v438;
            }
            while (v438);
          }
          if (v439 <= v437)
          {
            v108 = 9;
            v454 = 1;
          }
          else
          {
            if (cnprint::CNPrinter::GetLogLevel(v436) <= 1)
            {
              LOWORD(v681) = 2;
              LOBYTE(v642) = 1;
              cnprint::CNLogFormatter::FormatGeneral(v411, "SRIF Global test rejected %d-dof measurement with Chi2 statistic %lg vs. bound %lg after measurement set changed", v416, v439, v437);
              if (*(char *)(v607 + 2367) >= 0)
                LOBYTE(v453) = v607 + 40;
              else
                v453 = *(_QWORD *)(v607 + 2344);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v681, (unsigned __int8 *)&v642, "%s", v448, v449, v450, v451, v452, v453);
            }
            v454 = 0;
            v108 = 8;
          }
          v663 = v454;
          goto LABEL_395;
        }
        if ((_DWORD)v596 == v416)
        {
          if (cnprint::CNPrinter::GetLogLevel(v428) <= 1)
          {
            LOWORD(v681) = 2;
            LOBYTE(v715) = 1;
            cnprint::CNLogFormatter::FormatGeneral(v411, "Measurement set unchanged after local test.");
            if (*(char *)(v607 + 2367) >= 0)
              LOBYTE(v447) = v607 + 40;
            else
              v447 = *(_QWORD *)(v607 + 2344);
LABEL_383:
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v681, (unsigned __int8 *)&v715, "%s", v442, v443, v444, v445, v446, v447);
          }
        }
        else if (cnprint::CNPrinter::GetLogLevel(v428) <= 1)
        {
          LOWORD(v681) = 2;
          LOBYTE(v715) = 1;
          cnprint::CNLogFormatter::FormatGeneral(v411, "Measurement set eliminated after local test.");
          if (*(char *)(v607 + 2367) >= 0)
            LOBYTE(v447) = v607 + 40;
          else
            v447 = *(_QWORD *)(v607 + 2344);
          goto LABEL_383;
        }
        v663 = 0;
        v108 = 8;
        goto LABEL_395;
      }
      v580 = "nc >= 0";
      v581 = 420;
    }
    __assert_rtn("CNMatrix", "cnmatrix.h", v581, v580);
  }
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = a16;
  v130 = *(_QWORD *)(a16 + 32);
  v131 = 1;
  do
  {
    v132 = *(unsigned int *)(v130 + 4 * v126);
    v683 = 0xA00000001;
    v681 = &off_1E25C67D0;
    v684 = v685;
    v606 = v131;
    if ((_DWORD)v132 == 1)
    {
      v133 = 0;
      *(_QWORD *)&v134 = 0x100000001;
      *((_QWORD *)&v134 + 1) = 0x100000001;
      v682 = v134;
      LODWORD(v685[0]) = 0;
      v135 = 1;
      LODWORD(v132) = 1;
    }
    else if ((int)v132 <= 0)
    {
      v135 = 0;
      LODWORD(v132) = 0;
      v682 = 0uLL;
      v133 = 1;
    }
    else
    {
      v136 = 0;
      LODWORD(v682) = 1;
      DWORD1(v682) = v132;
      *((_QWORD *)&v682 + 1) = v132 | 0x100000000;
      do
      {
        *((_DWORD *)v685 + v136) = v136;
        ++v136;
      }
      while (v132 != v136);
      v133 = 0;
      v135 = 1;
    }
    v726 = 0x10000000ALL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6050;
    v727 = v728;
    __p.__r_.__value_.__l.__size_ = __PAIR64__(v135, v132);
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v132 * v135;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v132;
    if ((_DWORD)v132)
    {
      v137 = 0;
      v138 = 0;
      do
      {
        if ((v133 & 1) == 0)
        {
          v139 = 0;
          do
          {
            v728[v138 + HIDWORD(__p.__r_.__value_.__r.__words[2]) * v139] = *((_DWORD *)v685 + v137 + v139);
            ++v139;
          }
          while (v135 != v139);
        }
        ++v138;
        v137 += v135;
      }
      while (v138 != (_DWORD)v132);
      v140 = __p.__r_.__value_.__r.__words[1];
      v135 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    }
    else
    {
      v140 = 0;
    }
    v730.__r_.__value_.__r.__words[2] = 0x10000000ALL;
    v729 = (uint64_t (**)())&unk_1E25C6050;
    v731 = v732;
    v730.__r_.__value_.__r.__words[0] = __PAIR64__(v135, v140);
    v141 = v135 * v140;
    v730.__r_.__value_.__l.__size_ = __PAIR64__(v140, v141);
    if ((int)v141 >= 1)
    {
      v142 = v728;
      v143 = v732;
      do
      {
        v144 = *v142++;
        *v143++ = v144 + v128;
        --v141;
      }
      while (v141);
    }
    sub_18D053D7C((uint64_t)&v754, (uint64_t)&v729);
    v145 = *(unsigned int *)(*(_QWORD *)(v129 + 32) + 4 * (*(_DWORD *)(v129 + 20) + (int)v126));
    v683 = 0xA00000001;
    v681 = &off_1E25C67D0;
    v684 = v685;
    if ((_DWORD)v145 == 1)
    {
      v146 = 0;
      *(_QWORD *)&v147 = 0x100000001;
      *((_QWORD *)&v147 + 1) = 0x100000001;
      v682 = v147;
      LODWORD(v685[0]) = 0;
      v148 = 1;
      LODWORD(v145) = 1;
    }
    else if ((int)v145 <= 0)
    {
      v148 = 0;
      LODWORD(v145) = 0;
      v682 = 0uLL;
      v146 = 1;
    }
    else
    {
      v149 = 0;
      LODWORD(v682) = 1;
      DWORD1(v682) = v145;
      *((_QWORD *)&v682 + 1) = v145 | 0x100000000;
      do
      {
        *((_DWORD *)v685 + v149) = v149;
        ++v149;
      }
      while (v145 != v149);
      v146 = 0;
      v148 = 1;
    }
    v726 = 0x10000000ALL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6050;
    v727 = v728;
    __p.__r_.__value_.__l.__size_ = __PAIR64__(v148, v145);
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v145 * v148;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v145;
    if ((_DWORD)v145)
    {
      v150 = 0;
      v151 = 0;
      do
      {
        if ((v146 & 1) == 0)
        {
          v152 = 0;
          do
          {
            v728[v151 + HIDWORD(__p.__r_.__value_.__r.__words[2]) * v152] = *((_DWORD *)v685 + v150 + v152);
            ++v152;
          }
          while (v148 != v152);
        }
        ++v151;
        v150 += v148;
      }
      while (v151 != (_DWORD)v145);
      v153 = __p.__r_.__value_.__r.__words[1];
      v148 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    }
    else
    {
      v153 = 0;
    }
    v730.__r_.__value_.__r.__words[2] = 0x10000000ALL;
    v729 = (uint64_t (**)())&unk_1E25C6050;
    v731 = v732;
    v730.__r_.__value_.__r.__words[0] = __PAIR64__(v148, v153);
    v154 = v148 * v153;
    v730.__r_.__value_.__l.__size_ = __PAIR64__(v153, v154);
    if ((int)v154 >= 1)
    {
      v155 = v728;
      v156 = v732;
      do
      {
        v157 = *v155++;
        *v156++ = v157 + v127;
        --v154;
      }
      while (v154);
    }
    sub_18D053D7C((uint64_t)&v749, (uint64_t)&v729);
    v616 = 0x10000000ALL;
    v614 = (uint64_t (**)())&unk_1E25C6020;
    v615 = xmmword_18D31CEF0;
    v617 = (double *)v618;
    v726 = 0xA0000000ALL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C5FC0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D319A40;
    v727 = v728;
    v683 = 0xA0000000ALL;
    v681 = (uint64_t (**)())&unk_1E25C5FC0;
    v682 = xmmword_18D319A40;
    v684 = v685;
    v158 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a17 + 32)
                                                                                         + 8 * v126);
    sub_18D286D24((uint64_t)&v729, (uint64_t)v794, (uint64_t)&v754);
    sub_18D286D24((uint64_t)&v657, (uint64_t)v791, (uint64_t)&v749);
    if (v158(&v729, &v657, *(_QWORD *)(*(_QWORD *)(a18 + 32) + 8 * v126), &v614, &__p, &v681))
      return 20;
    sub_18D286D24((uint64_t)&v729, (uint64_t)&v783, (uint64_t)&v754);
    sub_18D285790((uint64_t)&v729, SDWORD2(v615), v617);
    sub_18D286E0C((uint64_t)&v729, (uint64_t)&v775, (uint64_t)&v754, (uint64_t)&v754);
    sub_18D285800((uint64_t)&v729, (uint64_t)&__p);
    v659 = 0x10000000ALL;
    v657 = (uint64_t (**)())&unk_1E25C6050;
    v658 = xmmword_18D31CEF0;
    v660 = v661;
    v730.__r_.__value_.__r.__words[2] = 0xA0000000ALL;
    v729 = (uint64_t (**)())&unk_1E25C5FC0;
    *(_OWORD *)&v730.__r_.__value_.__l.__data_ = xmmword_18D319A40;
    v731 = v732;
    v159 = sub_18D159938((uint64_t)&__p, (uint64_t)&v657, (uint64_t)&v729);
    v659 = 0xA0000000ALL;
    v657 = (uint64_t (**)())&unk_1E25C5FC0;
    v658 = xmmword_18D319A40;
    v660 = v661;
    v722 = 0x10000000ALL;
    v720 = (uint64_t (**)())&unk_1E25C6050;
    v721 = xmmword_18D31CEF0;
    v723 = v724;
    v717 = 0x10000000ALL;
    v715 = (uint64_t (**)())&unk_1E25C6050;
    v716 = xmmword_18D31CEF0;
    v718 = v719;
    v730.__r_.__value_.__r.__words[2] = 0x100000028;
    v729 = (uint64_t (**)())&unk_1E25C79D0;
    *(_OWORD *)&v730.__r_.__value_.__l.__data_ = xmmword_18D3364D0;
    v731 = v732;
    v160 = sub_18D054568((uint64_t)&__p, (uint64_t)&v720, (uint64_t)&v715, (uint64_t)&v729, (uint64_t)&v657);
    sub_18D286E0C((uint64_t)&v729, (uint64_t)&v767, (uint64_t)&v754, (uint64_t)&v754);
    sub_18D285800((uint64_t)&v729, (uint64_t)&v657);
    v129 = a16;
    sub_18D286E0C((uint64_t)&v729, (uint64_t)&v759, (uint64_t)&v754, (uint64_t)&v749);
    sub_18D285800((uint64_t)&v729, (uint64_t)&v681);
    v125 = v125 * v159;
    v131 = (v160 <= v53) & v606;
    v130 = *(_QWORD *)(a16 + 32);
    v128 += *(_DWORD *)(v130 + 4 * v126);
    v127 += *(_DWORD *)(v130 + 4 * (*(_DWORD *)(a16 + 20) + (int)v126++));
  }
  while (v126 != a15);
  v123 = v602;
  v124 = 1.0;
  if (((v160 <= v53) & v606) != 0)
    goto LABEL_126;
  LOWORD(v729) = 2;
  __p.__r_.__value_.__s.__data_[0] = 2;
  v236 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v607 + 2344), "PredictAndUpdate state Jacobian matrix is not invertible.");
  if (*(char *)(v607 + 2367) >= 0)
    LOBYTE(v242) = v236;
  else
    v242 = *(_QWORD *)(v607 + 2344);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v729, (unsigned __int8 *)&__p, "%s", v237, v238, v239, v240, v241, v242);
  sub_18D053AA8(v607 + 1088, (uint64_t)&v783);
  sub_18D053AA8(v607 + 1208, v599);
  v730.__r_.__value_.__r.__words[2] = 0x10000000ALL;
  v729 = (uint64_t (**)())&unk_1E25C6020;
  *(_OWORD *)&v730.__r_.__value_.__l.__data_ = xmmword_18D31CEF0;
  v731 = v732;
  sub_18D053B2C(v607 + 1208, (uint64_t)&v783, (uint64_t)&v729);
  sub_18D053AA8(v607 + 2048, (uint64_t)&v729);
  v730.__r_.__value_.__r.__words[2] = 0xA0000000ALL;
  v729 = (uint64_t (**)())&unk_1E25C5FC0;
  v731 = v732;
  v730.__r_.__value_.__r.__words[0] = __PAIR64__(v601, v602);
  LODWORD(v730.__r_.__value_.__r.__words[1]) = v602 * v601;
  HIDWORD(v730.__r_.__value_.__r.__words[1]) = v602;
  sub_18D04BE88((uint64_t)&v729, 0.0);
  sub_18D053AA8(v590, (uint64_t)&v729);
  v726 = 0x10000000ALL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6020;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18D31CEF0;
  v727 = v728;
  sub_18D053B2C(v598, (uint64_t)v791, (uint64_t)&__p);
  v683 = 0x10000000ALL;
  v681 = (uint64_t (**)())&unk_1E25C6020;
  v682 = xmmword_18D31CEF0;
  v684 = v685;
  sub_18D053B2C(v590, (uint64_t)&v783, (uint64_t)&v681);
  v730.__r_.__value_.__r.__words[2] = 0x10000000ALL;
  v729 = (uint64_t (**)())&unk_1E25C6020;
  *(_OWORD *)&v730.__r_.__value_.__l.__data_ = xmmword_18D31CEF0;
  v731 = v732;
  sub_18D053FA4((uint64_t)&__p, (uint64_t)&v681, (uint64_t)&v729);
  sub_18D053AA8(v588, (uint64_t)&v729);
  sub_18D053AA8(v589, v598);
  *(_DWORD *)(v607 + 2180) = 1;
  return 21;
}

void sub_18D2853F8(_Unwind_Exception *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = STACK[0xF80];
  STACK[0xF58] = (unint64_t)&off_1E25C7BB0;
  STACK[0xF80] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  v3 = STACK[0xFF8];
  STACK[0xFD0] = (unint64_t)&off_1E25C8030;
  STACK[0xFF8] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  v4 = STACK[0x1070];
  STACK[0x1048] = (unint64_t)&off_1E25C8030;
  STACK[0x1070] = 0;
  if (v4)
    MEMORY[0x18D78B5BC](v4, 0x1000C8000313F17);
  v5 = STACK[0x28D8];
  STACK[0x28B0] = (unint64_t)&off_1E25C80F0;
  STACK[0x28D8] = 0;
  if (v5)
    MEMORY[0x18D78B5BC](v5, 0x1000C8000313F17);
  v6 = STACK[0x3918];
  STACK[0x38F0] = (unint64_t)&off_1E25C80F0;
  STACK[0x3918] = 0;
  if (v6)
    MEMORY[0x18D78B5BC](v6, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_18D285700(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;

  v3 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = 0x100000001;
  *(_QWORD *)result = &unk_1E25C6A70;
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = 1;
  *(_DWORD *)(result + 16) = v3;
  *(_DWORD *)(result + 20) = v3;
  v4 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (v3)
  {
    v5 = *(_DWORD *)(a2 + 20) * a3;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      *v4++ = *(_DWORD *)(v6 + 4 * v5++);
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_18D285758(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D28576C(_QWORD *result)
{
  result[16] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

double sub_18D285790(uint64_t a1, int a2, double *a3)
{
  int *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double result;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 16) != a2)
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if (a2 >= 1)
  {
    v3 = *(int **)(a1 + 160);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32);
    v5 = *(double **)(a1 + 32);
    v6 = a2;
    do
    {
      v7 = *a3++;
      result = v7;
      v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_18D285800(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 840);
        v8 = *(int **)(result + 880);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 960) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D2858E8(_QWORD *result)
{
  result[116] = &unk_1E25C5EA0;
  result[106] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D285910(uint64_t a1, uint64_t a2, double *a3)
{
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  *(_QWORD *)(a1 + 24) = 0xA0000000ALL;
  *(_QWORD *)a1 = &unk_1E25C5FC0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A40;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v15 = 0x10000000ALL;
  v13 = &unk_1E25C6050;
  v14 = xmmword_18D31CEF0;
  v16 = &v17;
  v10 = 0x10000000ALL;
  v8 = &unk_1E25C6050;
  v9 = xmmword_18D31CEF0;
  v11 = &v12;
  v5 = 0x100000028;
  v3 = &unk_1E25C79D0;
  v4 = xmmword_18D3364D0;
  v6 = &v7;
  *a3 = sub_18D054568(a2, (uint64_t)&v13, (uint64_t)&v8, (uint64_t)&v3, a1);
}

void sub_18D285A0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D285A20(uint64_t a1, int a2, double *a3)
{
  int *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double result;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 16) != a2)
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  if (a2 >= 1)
  {
    v3 = *(int **)(a1 + 88);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
    v5 = *(double **)(a1 + 32);
    v6 = a2;
    do
    {
      v7 = *a3++;
      result = v7;
      v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *sub_18D285A90(_QWORD *result)
{
  result[7] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D285AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  int32x4_t v7;
  uint64_t i;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  void *v21;
  int32x4_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD v25[10];

  v3 = *(unsigned int *)(a2 + 12);
  v23 = 0x10000000ALL;
  v21 = &unk_1E25C6050;
  if ((v3 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  v7 = vdupq_lane_s32((int32x2_t)(v3 | 0x100000000), 0);
  v7.i32[1] = 1;
  v22 = v7;
  v24 = v25;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      v25[i] = i;
  }
  *(_QWORD *)(a1 + 24) = 0xA00000001;
  *(_OWORD *)(a1 + 8) = xmmword_18D3364C0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C4CA0;
  *(_QWORD *)(a1 + 120) = a2;
  *(_QWORD *)(a1 + 152) = 0x100000001;
  *(_QWORD *)(a1 + 128) = &unk_1E25C6A70;
  *(_OWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 176) = &unk_1E25C6050;
  *(_QWORD *)(a1 + 200) = 0x10000000ALL;
  *(_OWORD *)(a1 + 184) = xmmword_18D31CEF0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  sub_18D053D7C(a1 + 128, a3);
  result = sub_18D053D7C(a1 + 176, (uint64_t)&v21);
  v10 = *(unsigned int *)(a1 + 144);
  v11 = *(unsigned int *)(a1 + 192);
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 12) = v11;
  *(_DWORD *)(a1 + 16) = v11 * v10;
  *(_DWORD *)(a1 + 20) = v10;
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = *(_DWORD *)(a2 + 20);
    v15 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v10)
      {
        v16 = *(int **)(a1 + 160);
        v17 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v13) * v14;
        v18 = *(_QWORD *)(a1 + 32);
        v19 = v12;
        result = v10;
        do
        {
          v20 = *v16++;
          *(_QWORD *)(v18 + 8 * v19++) = *(_QWORD *)(v15 + 8 * (v20 + v17));
          --result;
        }
        while (result);
      }
      ++v13;
      v12 += v10;
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t sub_18D285C6C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 12))
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v2)
      {
        v7 = *(_QWORD *)(result + 120);
        v8 = *(int **)(result + 160);
        v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(_QWORD *)(result + 208) + 4 * v5);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(result + 32);
        v12 = *(_DWORD *)(result + 20) * v5;
        v13 = v4;
        v14 = v2;
        do
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          v16 = *v8++;
          *(_QWORD *)(v10 + 8 * (v16 + v9)) = v15;
          *(_QWORD *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

_QWORD *sub_18D285D54(_QWORD *result)
{
  result[22] = &unk_1E25C5EA0;
  result[16] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D285D7C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D285D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (**v5)();
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v12 = 0x100000040;
  v10 = &off_1E25C8090;
  v11 = xmmword_18D336540;
  v13 = &v14;
  v7 = 0x1400000014;
  v5 = &off_1E25C6EC0;
  v6 = xmmword_18D336500;
  v8 = &v9;
  return sub_18D054C20(a1, a2, (uint64_t)&v10, (uint64_t)&v5, a3, a4);
}

uint64_t sub_18D285E24(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x10000002CLL;
  *(_QWORD *)a1 = &off_1E25C7B50;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D285E7C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D285E90(uint64_t result, int a2, int a3)
{
  _OWORD *v3;
  _DWORD *v4;
  __int128 v5;
  uint64_t v6;

  v3 = (_OWORD *)(result + 8);
  *(_QWORD *)(result + 24) = 0x2C00000001;
  *(_QWORD *)result = &off_1E25C6C80;
  v4 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (a3 == a2)
  {
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    *v3 = v5;
    *v4 = a2;
  }
  else if (a3 - a2 < 0)
  {
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    v6 = (a3 - a2 + 1);
    *(_DWORD *)(result + 8) = 1;
    *(_DWORD *)(result + 12) = v6;
    *(_DWORD *)(result + 16) = v6;
    *(_DWORD *)(result + 20) = 1;
    do
    {
      *v4++ = a2++;
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *sub_18D285EFC(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D285F10(_QWORD *result)
{
  result[50] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D285F34(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x2C0000000ALL;
  *(_QWORD *)a1 = &off_1E25C60B0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D073454(a2, a1);
}

void sub_18D285F8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D285FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x2C0000000ALL;
  *(_QWORD *)a1 = &off_1E25C60B0;
  *(_OWORD *)(a1 + 8) = xmmword_18D336550;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D285FF8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D28600C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t sub_18D286020(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = 0x100000036;
  v7 = &off_1E25C8000;
  v8 = xmmword_18D336560;
  v10 = &v11;
  sub_18D287C8C((uint64_t)v5);
  *(_QWORD *)(a1 + 24) = 0x2C00000036;
  *(_QWORD *)a1 = &off_1E25C8030;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D336570;
  sub_18D2879C0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  sub_18D05C770(a2, (uint64_t)&v7, (uint64_t)v5, a1);
  result = v6;
  v5[0] = &off_1E25C7BB0;
  v6 = 0;
  if (result)
    return MEMORY[0x18D78B5BC](result, 0x1000C8000313F17);
  return result;
}

void sub_18D286100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  *v15 = v16;
  v18 = v15[5];
  v15[5] = 0;
  if (v18)
    MEMORY[0x18D78B5BC](v18, 0x1000C8000313F17);
  *v15 = &unk_1E25C5E70;
  if (a15)
    MEMORY[0x18D78B5BC](a15, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_18D286174(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t (**v6)();
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  sub_18D287C8C(a1);
  v18 = 0x10000002CLL;
  v16 = &off_1E25C7B50;
  v17 = xmmword_18D3364B0;
  v19 = &v20;
  v13 = 0x10000002CLL;
  v11 = &off_1E25C7B50;
  v12 = xmmword_18D3364B0;
  v14 = &v15;
  v8 = 0x1000000B0;
  v6 = &off_1E25C6530;
  v7 = xmmword_18D336580;
  v9 = &v10;
  *a3 = sub_18D054568(a2, (uint64_t)&v16, (uint64_t)&v11, (uint64_t)&v6, a1);
}

void sub_18D286248(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &off_1E25C7BB0;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D286290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  uint64_t result;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v7 = *(_DWORD *)(a3 + 16);
  v8 = *(_DWORD *)(a4 + 16);
  result = sub_18D288048(a1, v7, v8);
  if (v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(a3 + 32);
    v13 = *(_QWORD *)(a4 + 32);
    v14 = *(_QWORD *)(result + 32);
    do
    {
      if (v7)
      {
        v15 = 0;
        v16 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(v13 + 4 * v11);
        v17 = *(_QWORD *)(a2 + 32);
        do
        {
          *(_QWORD *)(v14 + 8 * (v10 + v15)) = *(_QWORD *)(v17
                                                                         + 8
                                                                         * (*(_DWORD *)(v12 + 4 * v15)
                                                                                        + v16));
          ++v15;
        }
        while (v7 != v15);
      }
      ++v11;
      v10 += v7;
    }
    while (v11 != v8);
  }
  return result;
}

_QWORD *sub_18D286338(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7BB0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

void sub_18D286394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x10000002CLL;
  *(_QWORD *)a1 = &off_1E25C7B20;
  *(_OWORD *)(a1 + 8) = xmmword_18D3364B0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D2863EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D286400(uint64_t a1, uint64_t a2)
{
  sub_18D288048(a1, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 8));
  return sub_18D073454(a2, a1);
}

void sub_18D286438(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &off_1E25C7BB0;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D286480(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  cnprint::CNPrinter *v8;
  uint64_t v9;
  const char *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  __int16 v19;

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 2320);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 2328) - v3) >> 5))
  {
    v5 = (uint64_t *)(a1 + 2272);
    v6 = *(_QWORD *)(a1 + 2280);
    v7 = v3 + 32 * a2;
    if (v6 >= *(_QWORD *)(a1 + 2288))
    {
      v8 = (cnprint::CNPrinter *)sub_18D1E09D4(v5, v7);
    }
    else
    {
      sub_18D1E096C((uint64_t)v5, v7);
      v8 = (cnprint::CNPrinter *)(v6 + 32);
    }
    *(_QWORD *)(a1 + 2280) = v8;
    if (cnprint::CNPrinter::GetLogLevel(v8) <= 1)
    {
      v19 = 2;
      v18 = 1;
      v9 = v3 + 32 * v2;
      v10 = (const char *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const char **)v10;
      v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2344), "Rejected measurement of type,%d,%s,totalRejected,%d", *(_DWORD *)(v3 + 32 * v2), v10, (*(_QWORD *)(a1 + 2280) - *(_QWORD *)(a1 + 2272)) >> 5);
      if (*(char *)(a1 + 2367) >= 0)
        LOBYTE(v17) = v11;
      else
        v17 = *(_QWORD *)(a1 + 2344);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "%s", v12, v13, v14, v15, v16, v17);
    }
  }
}

void sub_18D286580(uint64_t a1, uint64_t a2)
{
  char *v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char *v17;
  char *v18;
  unint64_t v19;
  char **v20;

  v3 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 12);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6 || (v5 | v4) == 0)
  {
LABEL_9:
    if ((char **)(a1 + 2320) != &v17)
      sub_18D1E2AB8((uint64_t *)(a1 + 2320), v17, v3, (v3 - v17) >> 5);
  }
  else
  {
    v3 = 0;
    v9 = 1;
    while (1)
    {
      v10 = *(int *)(*(_QWORD *)(a2 + 32) + 4 * (int)(v9 - 1));
      v11 = *(_QWORD *)(a1 + 2320);
      if (v10 >= (*(_QWORD *)(a1 + 2328) - v11) >> 5)
        break;
      v12 = v11 + 32 * v10;
      if ((unint64_t)v3 >= v19)
      {
        v3 = (char *)sub_18D1E09D4((uint64_t *)&v17, v12);
      }
      else
      {
        sub_18D1E096C((uint64_t)&v17, v12);
        v3 += 32;
      }
      v18 = v3;
      v14 = *(_DWORD *)(a2 + 8);
      v13 = *(_DWORD *)(a2 + 12);
      if (v14 <= v13)
        v15 = *(_DWORD *)(a2 + 12);
      else
        v15 = *(_DWORD *)(a2 + 8);
      if (v14)
      {
        if (v13)
        {
          if (v15 > v9++)
            continue;
        }
      }
      goto LABEL_9;
    }
  }
  v20 = &v17;
  sub_18D1C59AC((void ***)&v20);
}

void sub_18D286688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_18D1C59AC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2866A8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x100000014;
  *(_QWORD *)a1 = &off_1E25C6E90;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D163160(a2, a1);
}

void sub_18D286700(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5EA0;
  _Unwind_Resume(a1);
}

uint64_t sub_18D286714(uint64_t result, int a2)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = (_QWORD *)(result + 8);
  *(_QWORD *)(result + 24) = 0x1400000001;
  *(_QWORD *)result = &off_1E25C6AD0;
  v3 = (_DWORD *)(result + 40);
  *(_QWORD *)(result + 32) = result + 40;
  if (a2)
  {
    if (a2 < 0)
    {
      *v2 = 0;
      *(_QWORD *)(result + 16) = 0;
    }
    else
    {
      v4 = 0;
      v5 = (a2 + 1);
      *(_DWORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = v5;
      *(_DWORD *)(result + 16) = v5;
      *(_DWORD *)(result + 20) = 1;
      do
      {
        v3[v4] = v4;
        ++v4;
      }
      while (v5 != v4);
    }
  }
  else
  {
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    *(_OWORD *)v2 = v6;
    *v3 = 0;
  }
  return result;
}

_QWORD *sub_18D286780(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D286794(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

uint64_t sub_18D2867A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int32x4_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t (**v22)();
  int32x4_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD v26[20];

  v3 = *(unsigned int *)(a2 + 12);
  v24 = 0x100000014;
  v22 = &off_1E25C6E90;
  if ((v3 & 0x80000000) != 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  v7 = vdupq_lane_s32((int32x2_t)(v3 | 0x100000000), 0);
  v7.i32[1] = 1;
  v23 = v7;
  v25 = v26;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      v26[i] = i;
  }
  v9 = sub_18D2874D0(a1);
  *(_QWORD *)a1 = &off_1E25C51B0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 80) = 0x100000040;
  *(_QWORD *)(v9 + 56) = &off_1E25C80C0;
  *(_OWORD *)(a1 + 64) = xmmword_18D336540;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 376) = 0x100000014;
  *(_QWORD *)(a1 + 352) = &off_1E25C6E90;
  *(_OWORD *)(a1 + 360) = xmmword_18D336510;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  sub_18D053D7C(v9 + 56, a3);
  result = sub_18D053D7C(a1 + 352, (uint64_t)&v22);
  v11 = *(unsigned int *)(a1 + 72);
  v12 = *(unsigned int *)(a1 + 368);
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v12;
  *(_DWORD *)(a1 + 16) = v12 * v11;
  *(_DWORD *)(a1 + 20) = v11;
  if (!*(_QWORD *)(a1 + 40))
    __assert_rtn("CNSubMatrix", "cnsubmatrix.h", 160, "this->allocated_data_ != NULL");
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = *(_DWORD *)(a2 + 20);
    v16 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v11)
      {
        v17 = *(int **)(a1 + 88);
        v18 = *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v14) * v15;
        v19 = *(_QWORD *)(a1 + 32);
        v20 = v13;
        result = v11;
        do
        {
          v21 = *v17++;
          *(_QWORD *)(v19 + 8 * v20++) = *(_QWORD *)(v16 + 8 * (v21 + v18));
          --result;
        }
        while (result);
      }
      ++v14;
      v13 += v11;
    }
    while (v14 != v12);
  }
  return result;
}

void sub_18D286980(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v1[44] = &unk_1E25C5EA0;
  v1[7] = &unk_1E25C5EA0;
  *v1 = &off_1E25C80F0;
  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D2869DC(_QWORD *a1)
{
  uint64_t v2;

  a1[44] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C80F0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D286A4C(_QWORD *result)
{
  result[70] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D286A70(_QWORD *result)
{
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D286A84(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8030;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D286AE0(_QWORD *a1)
{
  *a1 = &off_1E25C7A90;
  sub_18D28879C(a1 + 5);
  *a1 = off_1E25C5A80;
  return a1;
}

_QWORD *sub_18D286B1C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D286B30(_QWORD *result)
{
  result[421] = &unk_1E25C5EA0;
  result[406] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D286B58(_QWORD *result)
{
  result[26] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D286B7C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D286B90(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D286BA4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C80F0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

void sub_18D286C00(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D286C24(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D286C30(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[10];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D286D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 24) = 0x10000000ALL;
  *(_OWORD *)(a1 + 8) = xmmword_18D31CEF0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C52A0;
  *(_QWORD *)(a1 + 120) = a2;
  *(_QWORD *)(a1 + 152) = 0x10000000ALL;
  *(_QWORD *)(a1 + 128) = &unk_1E25C6050;
  *(_OWORD *)(a1 + 136) = xmmword_18D31CEF0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  sub_18D053D7C(a1 + 128, a3);
  v6 = *(_DWORD *)(a1 + 136);
  v5 = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    v8 = *(int **)(a1 + 160);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD **)(a1 + 32);
    do
    {
      v11 = *v8++;
      *v10++ = *(_QWORD *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18D286DD8(_QWORD *a1)
{
  a1[16] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D286E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)(a1 + 24) = 0xA0000000ALL;
  *(_OWORD *)(a1 + 8) = xmmword_18D319A40;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C4C10;
  *(_QWORD *)(a1 + 840) = a2;
  *(_QWORD *)(a1 + 872) = 0x10000000ALL;
  *(_QWORD *)(a1 + 848) = &unk_1E25C6050;
  *(_OWORD *)(a1 + 856) = xmmword_18D31CEF0;
  *(_QWORD *)(a1 + 880) = a1 + 888;
  *(_QWORD *)(a1 + 952) = 0x10000000ALL;
  *(_QWORD *)(a1 + 928) = &unk_1E25C6050;
  *(_OWORD *)(a1 + 936) = xmmword_18D31CEF0;
  *(_QWORD *)(a1 + 960) = a1 + 968;
  sub_18D053D7C(a1 + 848, a3);
  sub_18D053D7C(a1 + 928, a4);
  v7 = *(unsigned int *)(a1 + 864);
  v8 = *(unsigned int *)(a1 + 944);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_DWORD *)(a2 + 20);
    v12 = *(_QWORD *)(a2 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        v13 = *(int **)(a1 + 880);
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 960) + 4 * v10) * v11;
        v15 = *(_QWORD *)(a1 + 32);
        v16 = v9;
        v17 = v7;
        do
        {
          v18 = *v13++;
          *(_QWORD *)(v15 + 8 * v16++) = *(_QWORD *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18D286F40(_QWORD *a1)
{
  a1[116] = &unk_1E25C5EA0;
  a1[106] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D286F78(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D286F9C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D286FA8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[440];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D2870A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 24) = 0x100000001;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C54E0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 80) = 0x100000001;
  *(_QWORD *)(a1 + 56) = &unk_1E25C6A70;
  *(_OWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  sub_18D053D7C(a1 + 56, a3);
  v7 = *(_DWORD *)(a1 + 64);
  v6 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v6;
  v8 = (v6 * v7);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v7;
  if ((int)v8 >= 1)
  {
    v9 = *(int **)(a1 + 88);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD **)(a1 + 32);
    do
    {
      v12 = *v9++;
      *v11++ = *(_QWORD *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18D287150(_QWORD *a1)
{
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D287184(_QWORD *a1)
{
  a1[22] = &unk_1E25C5EA0;
  a1[16] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2871BC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C80F0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D287228(uint64_t a1)
{
  uint64_t result;

  result = sub_18D287344(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D287250(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x500uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D287344(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x2800uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D2873AC(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2873D0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2873DC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D2874D0(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x1400000040;
  *(_QWORD *)a1 = &off_1E25C80F0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D336590;
  sub_18D287344(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D287524(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D287560(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D287584(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D287590(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[44];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D287684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 24) = 0x10000002CLL;
  *(_OWORD *)(a1 + 8) = xmmword_18D3364B0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5660;
  v5 = a1 + 400;
  *(_QWORD *)(a1 + 424) = 0x10000002CLL;
  *(_QWORD *)(a1 + 392) = a2;
  *(_QWORD *)(a1 + 400) = &off_1E25C7B50;
  *(_OWORD *)(a1 + 408) = xmmword_18D3364B0;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  sub_18D053D7C(a1 + 400, a3);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = *(_DWORD *)(a1 + 412);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    v9 = *(int **)(a1 + 432);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD **)(a1 + 32);
    do
    {
      v12 = *v9++;
      *v11++ = *(_QWORD *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18D287744(_QWORD *a1)
{
  a1[50] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D287778(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x2C00000036;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C8030;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (a2 < 0)
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D2879C0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D2877FC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D287838(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C8030;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2878A4(uint64_t a1)
{
  uint64_t result;

  result = sub_18D2879C0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D2878CC(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x948uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D2879C0(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x4A40uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

void sub_18D287A28(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D287A4C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D287A58(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[440];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

_QWORD *sub_18D287B54(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D287B68(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D287B8C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D287B98(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[54];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D287C8C(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x2C0000002CLL;
  *(_QWORD *)a1 = &off_1E25C7BB0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D3365A0;
  sub_18D287EA0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D287CDC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D287D18(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7BB0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D287D84(uint64_t a1)
{
  uint64_t result;

  result = sub_18D287EA0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D287DAC(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x790uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D287EA0(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x3C80uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

_QWORD *sub_18D287F08(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D287F1C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D287F40(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D287F4C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[176];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D288048(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)(a1 + 24) = 0x2C0000002CLL;
  *(_QWORD *)a1 = &off_1E25C7BB0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18D287EA0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D288098(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D2880D4(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2880F8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D288104(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D2881F8(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D28821C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D288228(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[20];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D28831C(_QWORD *a1)
{
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D288340(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D28834C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[20];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D288440(_QWORD *a1)
{
  uint64_t v2;

  a1[44] = &unk_1E25C5EA0;
  a1[7] = &unk_1E25C5EA0;
  *a1 = &off_1E25C80F0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2884C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 24) = 0x100000040;
  *(_OWORD *)(a1 + 8) = xmmword_18D336540;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C56C0;
  *(_QWORD *)(a1 + 552) = a2;
  v5 = a1 + 560;
  *(_QWORD *)(a1 + 584) = 0x100000040;
  *(_QWORD *)(a1 + 560) = &off_1E25C80C0;
  *(_OWORD *)(a1 + 568) = xmmword_18D336540;
  *(_QWORD *)(a1 + 592) = a1 + 600;
  sub_18D053D7C(a1 + 560, a3);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = *(_DWORD *)(a1 + 572);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    v9 = *(int **)(a1 + 592);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD **)(a1 + 32);
    do
    {
      v12 = *v9++;
      *v11++ = *(_QWORD *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18D288584(_QWORD *a1)
{
  a1[70] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2885B8(_QWORD *a1)
{
  *a1 = &off_1E25C7A90;
  sub_18D28879C(a1 + 5);
  *a1 = off_1E25C5A80;
  JUMPOUT(0x18D78B5D4);
}

char *sub_18D288604(uint64_t a1)
{
  char *result;

  result = sub_18D2887F0(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D28862C(uint64_t a1)
{
  _OWORD *v2;
  _OWORD *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  _BYTE v13[392];
  _BYTE v14[400];

  v2 = (_OWORD *)operator new[]();
  v3 = v2;
  *v2 = 0u;
  v2[1] = 0u;
  *(_OWORD *)((char *)v2 + 28) = 0u;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= 2)
  {
    v5 = *(_DWORD *)(a1 + 12);
    if (v5 >= 2)
    {
      v6 = *(_DWORD *)(a1 + 16);
      v7 = *(_DWORD *)(a1 + 20);
      bzero(v2, v6);
      if (v6 >= 3)
      {
        v8 = v5 + v4 - v7;
        v9 = (v6 - 1);
        v10 = 1;
        do
        {
          sub_18D2888C4((uint64_t)v14, *(_QWORD *)(a1 + 32) + 392 * v10);
          v11 = (char *)v3 + v10;
          if (!*((_BYTE *)v3 + v10))
          {
            v12 = v10;
            do
            {
              v12 = v12 * v8 % (int)v9;
              sub_18D2888C4((uint64_t)v13, *(_QWORD *)(a1 + 32) + 392 * v12);
              sub_18D053AA8(*(_QWORD *)(a1 + 32) + 392 * v12, (uint64_t)v14);
              *v11 = 1;
              sub_18D053AA8((uint64_t)v14, (uint64_t)v13);
              v11 = (char *)v3 + v12;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

void sub_18D28876C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5BC](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t *sub_18D28879C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
    {
      v3 = 392 * v2;
      v4 = v1 - 392;
      do
      {
        *(_QWORD *)(v4 + v3) = &unk_1E25C5E70;
        v3 -= 392;
      }
      while (v3);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

char *sub_18D2887F0(uint64_t a1)
{
  _OWORD *v2;
  _OWORD *v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_OWORD *)operator new[]();
  v3 = v2 + 1;
  *v2 = xmmword_18D3365B0;
  result = (char *)v2 + 56;
  v5 = 17248;
  do
  {
    *((_QWORD *)result - 2) = 0x10000002CLL;
    *((_QWORD *)result - 5) = &off_1E25C7B20;
    *((_OWORD *)result - 2) = xmmword_18D3364B0;
    *((_QWORD *)result - 1) = result;
    result += 392;
    v5 -= 392;
  }
  while (v5);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 - 8);
    if (v7)
    {
      v8 = 392 * v7;
      v9 = v6 - 392;
      do
      {
        *(_QWORD *)(v9 + v8) = &unk_1E25C5E70;
        v8 -= 392;
      }
      while (v8);
    }
    JUMPOUT(0x18D78B5BCLL);
  }
  return result;
}

__n128 sub_18D2888C4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x10000002CLL;
  *(_QWORD *)(a1 + 24) = 0x10000002CLL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E25C7B20;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x2Cu)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D2889E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D2889F4(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D288A18(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D288A24(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[400];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D288B20(_QWORD *a1)
{
  a1[421] = &unk_1E25C5EA0;
  a1[406] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D288B58(_QWORD *a1)
{
  a1[26] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D288B8C(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D288B98(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[20];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D288C8C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D288CB0(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D288CC4(_QWORD *result)
{
  result[5] = &unk_1E25C5E70;
  *result = off_1E25C5900;
  return result;
}

_QWORD *sub_18D288CE4(_QWORD *result)
{
  result[5] = &unk_1E25C5E70;
  *result = off_1E25C5930;
  return result;
}

void sub_18D288D04(_QWORD *a1)
{
  a1[5] = &unk_1E25C5E70;
  *a1 = off_1E25C5930;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D288D34(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D288D40(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned __int8 v11;
  _BYTE v12[120];
  _BYTE v13[120];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v11, v4);
      if (v4 >= 3)
      {
        v6 = v3 + v1 - v5;
        v7 = v4 - 1;
        v8 = v11;
        v9 = 120;
        v10 = v6;
        do
        {
          sub_18D064F78((uint64_t)v13, *(_QWORD *)(a1 + 32) + v9);
          if (!v8)
          {
            sub_18D064F78((uint64_t)v12, *(_QWORD *)(a1 + 32) + 120 * (v10 % v7));
            sub_18D053AA8(*(_QWORD *)(a1 + 32) + 120 * (v10 % v7), (uint64_t)v13);
            sub_18D053AA8((uint64_t)v13, (uint64_t)v12);
            v8 = 1;
          }
          v10 += v6;
          v9 += 120;
        }
        while (120 * v7 != v9);
      }
    }
  }
}

void sub_18D288E38(_QWORD *a1)
{
  a1[5] = &unk_1E25C5E70;
  *a1 = off_1E25C5900;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D288E68(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D288E74(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned __int8 v11;
  _BYTE v12[840];
  _BYTE v13[840];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v11, v4);
      if (v4 >= 3)
      {
        v6 = v3 + v1 - v5;
        v7 = v4 - 1;
        v8 = v11;
        v9 = 840;
        v10 = v6;
        do
        {
          sub_18D27FD68((uint64_t)v13, *(_QWORD *)(a1 + 32) + v9);
          if (!v8)
          {
            sub_18D27FD68((uint64_t)v12, *(_QWORD *)(a1 + 32) + 840 * (v10 % v7));
            sub_18D053AA8(*(_QWORD *)(a1 + 32) + 840 * (v10 % v7), (uint64_t)v13);
            sub_18D053AA8((uint64_t)v13, (uint64_t)v12);
            v8 = 1;
          }
          v10 += v6;
          v9 += 840;
        }
        while (840 * v7 != v9);
      }
    }
  }
}

void sub_18D288F6C(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D288F90(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D288F9C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[200];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

_QWORD *sub_18D289098(_QWORD *result)
{
  *result = &unk_1E25C5ED0;
  return result;
}

void sub_18D2890AC(_QWORD *a1)
{
  *a1 = &unk_1E25C5ED0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2890D0(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2890DC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE v13[44];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

_QWORD *sub_18D2891D0(_QWORD *result)
{
  result[182] = &unk_1E25C5EA0;
  *result = &unk_1E25C58D0;
  return result;
}

_QWORD *sub_18D2891F4(_QWORD *result)
{
  result[50] = &unk_1E25C5EA0;
  *result = &unk_1E25C5EA0;
  return result;
}

_QWORD *sub_18D28920C(_QWORD *result)
{
  result[94] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D289230(_QWORD *a1)
{
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C8540;
  sub_18D27ED94(a1 + 5);
  *a1 = &unk_1E25C5960;
  return a1;
}

_QWORD *sub_18D289288(_QWORD *result)
{
  result[94] = &unk_1E25C5EA0;
  *result = &unk_1E25C5C00;
  return result;
}

_QWORD *sub_18D2892AC(_QWORD *result)
{
  result[94] = &unk_1E25C5EA0;
  *result = &unk_1E25C5DE0;
  return result;
}

void sub_18D2892D0(_QWORD *a1)
{
  a1[182] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C58D0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D289304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 24) = 0x100000058;
  *(_OWORD *)(a1 + 8) = xmmword_18D3364A0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_1E25C5840;
  v5 = a1 + 400;
  *(_QWORD *)(a1 + 424) = 0x100000058;
  *(_QWORD *)(a1 + 392) = a2;
  *(_QWORD *)(a1 + 400) = &off_1E25C8600;
  *(_OWORD *)(a1 + 408) = xmmword_18D3364A0;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  sub_18D053D7C(a1 + 400, a3);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = *(_DWORD *)(a1 + 412);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    v9 = *(int **)(a1 + 432);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_DWORD **)(a1 + 32);
    do
    {
      v12 = *v9++;
      *v11++ = *(_DWORD *)(v10 + 4 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18D2893C4(_QWORD *a1)
{
  a1[50] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5EA0;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2893EC(_QWORD *a1)
{
  a1[94] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D289420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (_QWORD *)sub_18D27F794(a1);
  *v6 = &off_1E25C5780;
  v6[6] = a2;
  v6[7] = &off_1E25C8600;
  *(_QWORD *)(a1 + 80) = 0x100000058;
  *(_OWORD *)(a1 + 64) = xmmword_18D3364A0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  sub_18D053D7C((uint64_t)(v6 + 7), a3);
  v7 = *(_DWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = v9 * v7;
  *(_DWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 20) = v7;
  if (!v8)
    __assert_rtn("CNSubVector", "cnsubvector.h", 151, "this->allocated_data_ != NULL");
  if (v10 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 4 * v10;
    do
    {
      sub_18D053AA8(*(_QWORD *)(a1 + 32) + v11, *(_QWORD *)(a2 + 32) + 48 * *(int *)(*(_QWORD *)(a1 + 88) + v12));
      v12 += 4;
      v11 += 48;
    }
    while (v13 != v12);
  }
  return a1;
}

void sub_18D289528(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  v1[7] = &unk_1E25C5EA0;
  *v1 = &unk_1E25C8540;
  sub_18D27ED94(v2);
  *v1 = &unk_1E25C5960;
  _Unwind_Resume(a1);
}

void sub_18D289570(_QWORD *a1)
{
  a1[7] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C8540;
  sub_18D27ED94(a1 + 5);
  *a1 = &unk_1E25C5960;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2895D8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v4;
    v6 = v4 * v5;
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v5;
    v7 = *(_DWORD *)(a2 + 16);
    if (v7 > 3)
    {
      v10 = v7 - 1;
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a2 + 32);
      v13 = v11 + 48 * (v7 - 1);
      v14 = v12;
      v15 = (v7 - 1);
      do
      {
        sub_18D053AA8(v11, v14);
        v11 += 48;
        v14 += 48;
        --v15;
      }
      while (v15);
      sub_18D053AA8(v13, v12 + 48 * v10);
    }
    else if (v6 >= 1)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        sub_18D053AA8(*(_QWORD *)(a1 + 32) + v8, *(_QWORD *)(a2 + 32) + v8);
        ++v9;
        v8 += 48;
      }
      while (v9 < *(int *)(a1 + 16));
    }
  }
  return a1;
}

void sub_18D2896BC(_QWORD *a1)
{
  a1[94] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5C00;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2896F0(_QWORD *a1)
{
  a1[94] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5DE0;
  JUMPOUT(0x18D78B5D4);
}

void sub_18D289724(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D289748(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D289754(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[294];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18D289850(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D289874(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D289880(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[294];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t raven::GnssReceiverBandCorrectionsFilter::TickFilterAndOverwriteCorrections(uint64_t *a1, uint64_t **a2, __n128 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  int8x8_t prime;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  char *v18;
  cnprint::CNPrinter *v19;
  unsigned __int8 *v20;
  uint64_t *v22;
  uint64_t *v23;
  double *v24;
  BOOL v25;
  double v26;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  void **v31;
  unsigned __int8 *v32;
  unint64_t v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint8x8_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  double v52;
  _BYTE *v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  void *v62;
  uint64_t v63;
  double v64;
  double v65;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t *v71;
  float v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  BOOL v76;
  uint64_t *v77;
  BOOL v78;
  int v79;
  unsigned int v80;
  float v81;
  float *v82;
  uint64_t **v83;
  double v84;
  _QWORD *v87;
  char v89;
  __int16 v90;
  __int128 v91;

  v13 = a1[5];
  v14 = *(double *)(v13 + 568);
  a10.i64[0] = *(_QWORD *)(v13 + 792);
  v15 = fabs(*(double *)a10.i64);
  v16 = 0.0;
  if (fabs(v14) >= 2.22044605e-16 && v15 >= 2.22044605e-16)
    v16 = 1.0 / ((1.0 / *(double *)a10.i64 / v14 - 1.0 / *(double *)a10.i64) * 6.28318531);
  if (fabs(v16) < 2.22044605e-16)
  {
    LOWORD(v91) = 12;
    LOBYTE(v90) = 4;
    LOBYTE(v84) = LOBYTE(v14);
    v18 = "#rxbc,Invalid receiver band correction LPF parameters,alpha,%.4f,sampling_freq,%.2f";
LABEL_8:
    v19 = (cnprint::CNPrinter *)&v91;
    v20 = (unsigned __int8 *)&v90;
LABEL_9:
    cnprint::CNPrinter::Print(v19, v20, v18, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, SLOBYTE(v84));
    return 0;
  }
  v22 = (uint64_t *)(a2 + 1);
  v23 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    v87 = a1 + 2;
    while (1)
    {
      if (*((_BYTE *)v23 + 40))
      {
        v24 = (double *)(v23 + 6);
        if ((v23[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          a10.i32[0] = *((_DWORD *)v23 + 14);
          v25 = (a10.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF && *(float *)a10.i32 < 20.0;
          if (v25)
          {
            v26 = fabs(*((double *)v23 + 6));
            v25 = *(float *)a10.i32 > 0.0;
            a10.i64[0] = 0x3CB0000000000000;
            if (v25 && v26 >= 2.22044605e-16)
              break;
          }
        }
      }
LABEL_123:
      v60 = (uint64_t *)v23[1];
      if (v60)
      {
        do
        {
          v61 = v60;
          v60 = (uint64_t *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v61 = (uint64_t *)v23[2];
          v78 = *v61 == (_QWORD)v23;
          v23 = v61;
        }
        while (!v78);
      }
      v23 = v61;
      if (v61 == v22)
        goto LABEL_139;
    }
    v28 = *((unsigned __int8 *)v23 + 32);
    v29 = a1[1];
    if (v29)
    {
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.u32[0] > 1uLL)
      {
        prime = (int8x8_t)*((unsigned __int8 *)v23 + 32);
        if (v29 <= v28)
          prime = (int8x8_t)(v28 % v29);
      }
      else
      {
        prime = (int8x8_t)(((_DWORD)v29 - 1) & v28);
      }
      v31 = *(void ***)(*a1 + 8 * *(_QWORD *)&prime);
      if (v31)
      {
        v32 = (unsigned __int8 *)*v31;
        if (*v31)
        {
          do
          {
            v33 = *((_QWORD *)v32 + 1);
            if (v33 == v28)
            {
              if (v32[16] == (_DWORD)v28)
                goto LABEL_95;
            }
            else
            {
              if (v30.u32[0] > 1uLL)
              {
                if (v33 >= v29)
                  v33 %= v29;
              }
              else
              {
                v33 &= v29 - 1;
              }
              if (v33 != *(_QWORD *)&prime)
                break;
            }
            v32 = *(unsigned __int8 **)v32;
          }
          while (v32);
        }
      }
    }
    v32 = (unsigned __int8 *)operator new(0xF8uLL);
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = v28;
    v32[16] = *((_BYTE *)v23 + 32);
    *(_OWORD *)(v32 + 232) = 0u;
    *(_OWORD *)(v32 + 216) = 0u;
    *(_OWORD *)(v32 + 200) = 0u;
    *(_OWORD *)(v32 + 184) = 0u;
    *(_OWORD *)(v32 + 168) = 0u;
    *(_OWORD *)(v32 + 152) = 0u;
    *(_OWORD *)(v32 + 136) = 0u;
    *(_OWORD *)(v32 + 120) = 0u;
    *(_OWORD *)(v32 + 104) = 0u;
    *(_OWORD *)(v32 + 88) = 0u;
    *(_OWORD *)(v32 + 72) = 0u;
    *(_OWORD *)(v32 + 56) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *(_OWORD *)(v32 + 24) = 0u;
    *((_QWORD *)v32 + 29) = 0x7FF8000000000000;
    v34 = (float)(unint64_t)(a1[3] + 1);
    a10.i32[0] = *((_DWORD *)a1 + 8);
    if (v29 && (float)(*(float *)a10.i32 * (float)v29) >= v34)
    {
      v28 = (unint64_t)prime;
      goto LABEL_85;
    }
    v35 = (v29 & (v29 - 1)) != 0;
    if (v29 < 3)
      v35 = 1;
    v36 = v35 | (2 * v29);
    v37 = vcvtps_u32_f32(v34 / *(float *)a10.i32);
    if (v36 <= v37)
      prime = (int8x8_t)v37;
    else
      prime = (int8x8_t)v36;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v29 = a1[1];
    }
    if (*(_QWORD *)&prime <= v29)
    {
      if (*(_QWORD *)&prime >= v29)
        goto LABEL_81;
      a10.i32[0] = *((_DWORD *)a1 + 8);
      v44 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *(float *)a10.i32);
      if (v29 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (*(_QWORD *)&prime <= v44)
        prime = (int8x8_t)v44;
      if (*(_QWORD *)&prime >= v29)
      {
        v29 = a1[1];
        goto LABEL_81;
      }
      if (!*(_QWORD *)&prime)
      {
        v62 = (void *)*a1;
        *a1 = 0;
        if (v62)
          operator delete(v62);
        v29 = 0;
        a1[1] = 0;
        goto LABEL_81;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      sub_18D0788A0();
    v38 = operator new(8 * *(_QWORD *)&prime);
    v39 = (void *)*a1;
    *a1 = (uint64_t)v38;
    if (v39)
      operator delete(v39);
    v40 = 0;
    a1[1] = (uint64_t)prime;
    do
      *(_QWORD *)(*a1 + 8 * v40++) = 0;
    while (*(_QWORD *)&prime != v40);
    v41 = (_QWORD *)*v87;
    if (*v87)
    {
      v42 = v41[1];
      v43 = (uint8x8_t)vcnt_s8(prime);
      v43.i16[0] = vaddlv_u8(v43);
      if (v43.u32[0] > 1uLL)
      {
        if (v42 >= *(_QWORD *)&prime)
          v42 %= *(_QWORD *)&prime;
      }
      else
      {
        v42 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*a1 + 8 * v42) = v87;
      v47 = (_QWORD *)*v41;
      if (*v41)
      {
        do
        {
          v48 = v47[1];
          if (v43.u32[0] > 1uLL)
          {
            if (v48 >= *(_QWORD *)&prime)
              v48 %= *(_QWORD *)&prime;
          }
          else
          {
            v48 &= *(_QWORD *)&prime - 1;
          }
          if (v48 != v42)
          {
            if (!*(_QWORD *)(*a1 + 8 * v48))
            {
              *(_QWORD *)(*a1 + 8 * v48) = v41;
              goto LABEL_77;
            }
            *v41 = *v47;
            *v47 = **(_QWORD **)(*a1 + 8 * v48);
            **(_QWORD **)(*a1 + 8 * v48) = v47;
            v47 = v41;
          }
          v48 = v42;
LABEL_77:
          v41 = v47;
          v47 = (_QWORD *)*v47;
          v42 = v48;
        }
        while (v47);
      }
    }
    v29 = (unint64_t)prime;
LABEL_81:
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v29 <= v28)
        v28 %= v29;
    }
    else
    {
      v28 = ((_DWORD)v29 - 1) & v28;
    }
LABEL_85:
    v49 = *a1;
    v50 = *(_QWORD **)(*a1 + 8 * v28);
    if (v50)
    {
      *(_QWORD *)v32 = *v50;
    }
    else
    {
      *(_QWORD *)v32 = *v87;
      *v87 = v32;
      *(_QWORD *)(v49 + 8 * v28) = v87;
      if (!*(_QWORD *)v32)
      {
LABEL_94:
        ++a1[3];
LABEL_95:
        if (*((_DWORD *)v32 + 54) <= 0xBB7u)
        {
          v52 = 1.0 / (float)(*((float *)v23 + 14) * *((float *)v23 + 14));
          if (sub_18D1648E4((uint64_t)(v32 + 24), (double *)v23 + 6, v52))
          {
            sub_18D28A4A0(a1, *((_BYTE *)v23 + 32));
            LOWORD(v91) = 12;
            LOBYTE(v90) = 4;
            LOBYTE(v84) = LOBYTE(v52);
            v18 = "#rxbc,Could not add receiver band correction to weighted average filter,weight,%.4f,corr_value,%.4f";
            goto LABEL_8;
          }
          *(double *)&v91 = *((float *)v23 + 14);
          if (sub_18D1648E4((uint64_t)(v32 + 72), (double *)&v91, 1.0))
          {
            sub_18D28A4A0(a1, *((_BYTE *)v23 + 32));
            LOWORD(v91) = 12;
            LOBYTE(v90) = 4;
            v84 = *((float *)v23 + 14);
            v18 = "#rxbc,Could not add receiver band correction uncertainty to weighted average filter,uncertainty,%.4f";
            goto LABEL_8;
          }
          goto LABEL_120;
        }
        v53 = v32 + 120;
        prime = (int8x8_t)(v32 + 168);
        if (v32[240])
        {
          if (!*v53)
          {
            sub_18D28A4A0(a1, *((_BYTE *)v23 + 32));
            LOWORD(v91) = 12;
            LOBYTE(v90) = 4;
            v84 = *((double *)v23 + 6);
            v18 = "#rxbc,Could not add sample to receiver band correction LPF,sample_value,%.4f";
            goto LABEL_8;
          }
          if (!v32[144])
          {
            v32[144] = 1;
            v54 = *v24;
LABEL_115:
            *((double *)v32 + 20) = v54;
            if (!**(_BYTE **)&prime)
            {
              sub_18D28A4A0(a1, *((_BYTE *)v23 + 32));
              LOWORD(v91) = 12;
              LOBYTE(v90) = 4;
              v84 = *((float *)v23 + 14);
              v18 = "#rxbc,Could not add sample to receiver band correction uncertainty LPF,sample_value,%.4f";
              goto LABEL_8;
            }
            v58 = *((float *)v23 + 14);
            if (v32[192])
            {
              a10.i64[0] = *((_QWORD *)v32 + 25);
              v58 = (1.0 - *(double *)a10.i64) * *((double *)v32 + 26) + *(double *)a10.i64 * v58;
            }
            else
            {
              v32[192] = 1;
            }
            *((double *)v32 + 26) = v58;
LABEL_120:
            v59 = *((_DWORD *)v32 + 54);
            if (v59 != -1)
              *((_DWORD *)v32 + 54) = v59 + 1;
            a9 = *(int8x16_t *)a3;
            *((__n128 *)v32 + 14) = *a3;
            goto LABEL_123;
          }
LABEL_114:
          a10.i64[0] = *((_QWORD *)v32 + 19);
          v54 = (1.0 - *(double *)a10.i64) * *((double *)v32 + 20) + *(double *)a10.i64 * *v24;
          goto LABEL_115;
        }
        v55 = *(_QWORD *)(a1[5] + 792);
        *(double *)&v91 = v16;
        *((_QWORD *)&v91 + 1) = v55;
        if (sub_18D28A40C((uint64_t)v53, &v91) || sub_18D28A40C((uint64_t)(v32 + 168), &v91))
        {
          sub_18D28A4A0(a1, *((_BYTE *)v23 + 32));
          v90 = 12;
          v89 = 4;
          LOBYTE(v84) = v91;
          v18 = "#rxbc,Error in configuring receiver band correction LPF,lpf_cutoff_frequency,%.4f,signal_sample_frequency,%.4f";
        }
        else if (v32[120])
        {
          v56 = *((double *)v32 + 6);
          if (v32[144])
            v56 = (1.0 - *((double *)v32 + 19)) * *((double *)v32 + 20) + *((double *)v32 + 19) * v56;
          else
            v32[144] = 1;
          *((double *)v32 + 20) = v56;
          if (v32[168])
          {
            v57 = *((double *)v32 + 12);
            if (v32[192])
            {
              *((double *)v32 + 26) = (1.0 - *((double *)v32 + 25)) * *((double *)v32 + 26)
                                    + *((double *)v32 + 25) * v57;
            }
            else
            {
              v32[192] = 1;
              *((double *)v32 + 26) = v57;
            }
            v32[240] = 1;
            goto LABEL_114;
          }
          sub_18D28A4A0(a1, *((_BYTE *)v23 + 32));
          v90 = 12;
          v89 = 4;
          v84 = *((double *)v32 + 12);
          v18 = "#rxbc,Could not initialize receiver band correction uncertainty LPF,sample_value,%.4f";
        }
        else
        {
          sub_18D28A4A0(a1, *((_BYTE *)v23 + 32));
          v90 = 12;
          v89 = 4;
          v84 = *((double *)v32 + 6);
          v18 = "#rxbc,Could not initialize receiver band correction LPF,sample_value,%.4f";
        }
        v19 = (cnprint::CNPrinter *)&v90;
        v20 = (unsigned __int8 *)&v89;
        goto LABEL_9;
      }
      v51 = *(_QWORD *)(*(_QWORD *)v32 + 8);
      if ((v29 & (v29 - 1)) != 0)
      {
        if (v51 >= v29)
          v51 %= v29;
      }
      else
      {
        v51 &= v29 - 1;
      }
      v50 = (_QWORD *)(*a1 + 8 * v51);
    }
    *v50 = v32;
    goto LABEL_94;
  }
LABEL_139:
  v63 = a1[2];
  if (v63)
  {
    a9.i64[0] = 0x3F847AE147AE147BLL;
    v64 = 0.01 / v16;
    do
    {
      while (1)
      {
        *(double *)a10.i64 = (double)CNTimeSpan::operator-((uint64_t)a3, (_QWORD *)(v63 + 224), a9, a10);
        *(double *)a9.i64 = v65 + *(double *)a10.i64;
        if (v65 + *(double *)a10.i64 < 0.0 || *(double *)a9.i64 > 10.0)
          break;
        v67 = *(_DWORD *)(v63 + 216);
        if (v67 <= 9)
          break;
        if (*(_BYTE *)(v63 + 240))
          v68 = 208;
        else
          v68 = 96;
        if (*(_BYTE *)(v63 + 240))
          v69 = 160;
        else
          v69 = 48;
        v70 = *(unsigned __int8 *)(v63 + 16);
        v71 = *(uint64_t **)(v63 + v69);
        a9.i64[0] = *(_QWORD *)(v63 + v68);
        v72 = *(double *)a9.i64;
        v73 = *v22;
        if (*v22)
        {
          v74 = v22;
          do
          {
            v75 = *(unsigned __int8 *)(v73 + 32);
            v76 = v75 >= v70;
            if (v75 >= v70)
              v77 = (uint64_t *)v73;
            else
              v77 = (uint64_t *)(v73 + 8);
            if (v76)
              v74 = (uint64_t *)v73;
            v73 = *v77;
          }
          while (*v77);
          if (v74 != v22 && v70 >= *((unsigned __int8 *)v74 + 32))
          {
            a9.i32[0] = *((_DWORD *)v74 + 14);
            if (*(float *)a9.i32 > 20.0)
            {
              if (v67 < 0x64)
                goto LABEL_188;
              v78 = *(float *)a9.i32 < v72 || v70 == 0;
              if (v78)
                goto LABEL_188;
LABEL_176:
              if (((unint64_t)v71 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
                || (LODWORD(v72) & 0x7FFFFFFFu) > 0x7F7FFFFF)
              {
                goto LABEL_188;
              }
              if (*(_BYTE *)(a1[5] + 550))
              {
                v79 = *a5;
                if ((v79 - 3) >= 2)
                {
                  v81 = 1.0;
                  if (v79 == 2)
                  {
                    v80 = *a4;
                    if (v80 < 0xA)
                    {
                      v82 = (float *)&unk_18D3373CC;
LABEL_185:
                      v81 = v82[(char)v80];
                    }
                  }
                }
                else
                {
                  v80 = *a4;
                  v81 = 0.5;
                  if (v80 <= 9)
                  {
                    v82 = (float *)&unk_18D3373F4;
                    goto LABEL_185;
                  }
                }
                v72 = v81 * v72;
              }
              *(_QWORD *)&v91 = v63 + 16;
              v83 = sub_18D22D49C(a2, (unsigned __int8 *)(v63 + 16), (uint64_t)&std::piecewise_construct, (_BYTE **)&v91);
              *((_BYTE *)v83 + 40) = v70;
              *(_DWORD *)((char *)v83 + 41) = v91;
              *((_DWORD *)v83 + 11) = *(_DWORD *)((char *)&v91 + 3);
              v83[6] = v71;
              *((float *)v83 + 14) = v72;
              goto LABEL_188;
            }
          }
        }
        if (*(_BYTE *)(v63 + 16))
          goto LABEL_176;
LABEL_188:
        v63 = *(_QWORD *)v63;
        if (!v63)
          return 1;
      }
      if (*(double *)a9.i64 <= v64)
        goto LABEL_188;
      v63 = sub_18D28A550(a1, (uint64_t *)v63);
    }
    while (v63);
  }
  return 1;
}

void sub_18D28A3F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D28A40C(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = 0xFFFFFFFFLL;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)a2 > 0.0)
  {
    v2 = 0xFFFFFFFFLL;
    if ((*((_QWORD *)a2 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *((double *)a2 + 1) > 0.0)
    {
      v2 = 0;
      *(_BYTE *)a1 = 0;
      v3 = *a2;
      *(_BYTE *)a1 = 1;
      *(_OWORD *)(a1 + 8) = v3;
      *(double *)(a1 + 32) = 1.0
                           / *(double *)(a1 + 16)
                           / (1.0 / (*(double *)(a1 + 8) * 6.28318531) + 1.0 / *(double *)(a1 + 16));
      *(_BYTE *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
  return v2;
}

_QWORD *sub_18D28A4A0(_QWORD *result, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t i;
  unint64_t v8;

  v2 = result[1];
  if (v2)
  {
    v3 = a2;
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v2 <= a2)
        v5 = a2 % v2;
    }
    else
    {
      v5 = ((_DWORD)v2 - 1) & a2;
    }
    v6 = *(uint64_t **)(*result + 8 * v5);
    if (v6)
    {
      for (i = *v6; i; i = *(_QWORD *)i)
      {
        v8 = *(_QWORD *)(i + 8);
        if (v8 == v3)
        {
          if (*(unsigned __int8 *)(i + 16) == (_DWORD)v3)
            return (_QWORD *)sub_18D28A550(result, (uint64_t *)i);
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v2)
              v8 %= v2;
          }
          else
          {
            v8 &= v2 - 1;
          }
          if (v8 != v5)
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_18D28A550(_QWORD *a1, uint64_t *__p)
{
  int8x8_t v2;
  unint64_t v3;
  uint64_t v4;
  uint8x8_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  v4 = *__p;
  v3 = __p[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(uint64_t **)(*a1 + 8 * v3);
  do
  {
    v7 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    v9 = *__p;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v4)
    goto LABEL_19;
  v10 = *(_QWORD *)(v4 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  v9 = *__p;
  if (v10 != v3)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v3) = 0;
    v9 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  v11 = *(_QWORD *)(v9 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v2)
      v11 %= *(_QWORD *)&v2;
  }
  else
  {
    v11 &= *(_QWORD *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(_QWORD *)(*a1 + 8 * v11) = v7;
    v9 = *__p;
  }
LABEL_27:
  *v7 = v9;
  *__p = 0;
  --a1[3];
  operator delete(__p);
  return v4;
}

void raven::AccelerometerEvent::~AccelerometerEvent(raven::AccelerometerEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::AccelerometerMeasurement::~AccelerometerMeasurement(raven::AccelerometerMeasurement *this)
{
  *(_QWORD *)this = &unk_1E25B8DE8;
}

{
  *(_QWORD *)this = &unk_1E25B8DE8;
}

{
  *(_QWORD *)this = &unk_1E25B8DE8;
  JUMPOUT(0x18D78B5D4);
}

void raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent(raven::AccessoryVehicleSpeedEvent *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E25C3460;
  v2 = (void *)*((_QWORD *)this + 29);
  if (v2)
  {
    *((_QWORD *)this + 30) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 27) = v3;
    operator delete(v3);
  }
}

{
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::ActivityInputEvent::~ActivityInputEvent(raven::ActivityInputEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::ActivityStateEvent::~ActivityStateEvent(raven::ActivityStateEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::AltitudeChangeEvent::~AltitudeChangeEvent(raven::AltitudeChangeEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::AltitudeEvent::~AltitudeEvent(raven::AltitudeEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::ARSessionStatusEvent::~ARSessionStatusEvent(raven::ARSessionStatusEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::AttitudeChangeEvent::~AttitudeChangeEvent(raven::AttitudeChangeEvent *this)
{
  *(_QWORD *)this = &off_1E25C2BA8;
  *((_QWORD *)this + 29) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = &off_1E25C2BA8;
  *((_QWORD *)this + 29) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = &off_1E25C2BA8;
  *((_QWORD *)this + 29) = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void raven::AttitudeEvent::~AttitudeEvent(raven::AttitudeEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::BarometerEvent::~BarometerEvent(raven::BarometerEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::BodyMetricsEvent::~BodyMetricsEvent(raven::BodyMetricsEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::DecomposedAccelerationEvent::~DecomposedAccelerationEvent(raven::DecomposedAccelerationEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::EstimatorErrorRecoveryEvent::~EstimatorErrorRecoveryEvent(raven::EstimatorErrorRecoveryEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::FitnessSessionEvent::~FitnessSessionEvent(raven::FitnessSessionEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::GEOMapBuildingDataEvent::~GEOMapBuildingDataEvent(raven::GEOMapBuildingDataEvent *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E25C3020;
  sub_18D03D9B4((uint64_t)this + 144, *((_QWORD **)this + 19));
  v2 = (void **)((char *)this + 104);
  sub_18D226440(&v2);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E25C3020;
  sub_18D03D9B4((uint64_t)this + 144, *((_QWORD **)this + 19));
  v2 = (void **)((char *)this + 104);
  sub_18D226440(&v2);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E25C3020;
  sub_18D03D9B4((uint64_t)this + 144, *((_QWORD **)this + 19));
  v2 = (void **)((char *)this + 104);
  sub_18D226440(&v2);
  JUMPOUT(0x18D78B5D4);
}

void raven::GnssAvailabilityEvent::~GnssAvailabilityEvent(raven::GnssAvailabilityEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::GnssMeasurementDataEvent::~GnssMeasurementDataEvent(raven::GnssMeasurementDataEvent *this)
{
  *(_QWORD *)this = &off_1E25C3080;
  sub_18D03D0CC((uint64_t)this + 112);
}

{
  *(_QWORD *)this = &off_1E25C3080;
  sub_18D03D0CC((uint64_t)this + 112);
}

{
  *(_QWORD *)this = &off_1E25C3080;
  sub_18D03D0CC((uint64_t)this + 112);
  JUMPOUT(0x18D78B5D4);
}

void raven::GnssPreprocessedMeasurementsEvent::~GnssPreprocessedMeasurementsEvent(raven::GnssPreprocessedMeasurementsEvent *this)
{
  void **v1;

  *(_QWORD *)this = off_1E25C3EC8;
  v1 = (void **)((char *)this + 96);
  sub_18D07C7AC(&v1);
}

{
  void **v1;

  *(_QWORD *)this = off_1E25C3EC8;
  v1 = (void **)((char *)this + 96);
  sub_18D07C7AC(&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1E25C3EC8;
  v2 = (void **)((char *)this + 96);
  sub_18D07C7AC(&v2);
  MEMORY[0x18D78B5D4](this, 0x10A1C40DFD4140ELL);
}

void raven::GNSSUTCParametersEvent::~GNSSUTCParametersEvent(raven::GNSSUTCParametersEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::HorizontalDOTInIMUFrameEvent::~HorizontalDOTInIMUFrameEvent(raven::HorizontalDOTInIMUFrameEvent *this)
{
  *((_QWORD *)this + 27) = &unk_1E25C5E70;
  *(_QWORD *)this = &off_1E25C37C0;
  *((_QWORD *)this + 1) = &unk_1E25C5E70;
}

{
  *((_QWORD *)this + 27) = &unk_1E25C5E70;
  *(_QWORD *)this = &off_1E25C37C0;
  *((_QWORD *)this + 1) = &unk_1E25C5E70;
}

{
  *((_QWORD *)this + 27) = &unk_1E25C5E70;
  *(_QWORD *)this = &off_1E25C37C0;
  *((_QWORD *)this + 1) = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void raven::KlobucharParametersEvent::~KlobucharParametersEvent(raven::KlobucharParametersEvent *this)
{
  *(_QWORD *)this = &off_1E25C30B0;
}

{
  *(_QWORD *)this = &off_1E25C30B0;
}

{
  *(_QWORD *)this = &off_1E25C30B0;
  JUMPOUT(0x18D78B5D4);
}

void raven::MapsRouteHintEvent::~MapsRouteHintEvent(raven::MapsRouteHintEvent *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E25C2AE0;
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E25C2AE0;
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E25C2AE0;
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x18D78B5D4);
}

void raven::MapVectorEvent::~MapVectorEvent(raven::MapVectorEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::MountStateEvent::~MountStateEvent(raven::MountStateEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::MovingStateEvent::~MovingStateEvent(raven::MovingStateEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::NonHolonomicVelocityConstraintEvent::~NonHolonomicVelocityConstraintEvent(raven::NonHolonomicVelocityConstraintEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::OdometerEvent::~OdometerEvent(raven::OdometerEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::PositionChangeEvent::~PositionChangeEvent(raven::PositionChangeEvent *this)
{
  *(_QWORD *)this = &off_1E25C2C08;
  *((_QWORD *)this + 33) = &unk_1E25C5E70;
  *((_QWORD *)this + 25) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = &off_1E25C2C08;
  *((_QWORD *)this + 33) = &unk_1E25C5E70;
  *((_QWORD *)this + 25) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = &off_1E25C2C08;
  *((_QWORD *)this + 33) = &unk_1E25C5E70;
  *((_QWORD *)this + 25) = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void raven::PositionContextStateEvent::~PositionContextStateEvent(raven::PositionContextStateEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::PositionEvent::~PositionEvent(raven::PositionEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::PrefilteredBarometerEvent::~PrefilteredBarometerEvent(raven::PrefilteredBarometerEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::PrefilteredPressureResetEvent::~PrefilteredPressureResetEvent(raven::PrefilteredPressureResetEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::RateGyroEvent::~RateGyroEvent(raven::RateGyroEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::RateGyroMeasurement::~RateGyroMeasurement(raven::RateGyroMeasurement *this)
{
  *(_QWORD *)this = &unk_1E25B8DB8;
}

{
  *(_QWORD *)this = &unk_1E25B8DB8;
}

{
  *(_QWORD *)this = &unk_1E25B8DB8;
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenGnssAssistanceFileEvent::~RavenGnssAssistanceFileEvent(raven::RavenGnssAssistanceFileEvent *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E25C37F0;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E25C37F0;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E25C37F0;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenSolutionEvent::~RavenSolutionEvent(raven::RavenSolutionEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenSystemEvent::~RavenSystemEvent(raven::RavenSystemEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::RayTracingTileEvent::~RayTracingTileEvent(void **this)
{
  *this = off_1E25C2C68;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
}

{
  *this = off_1E25C2C68;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
}

{
  *this = off_1E25C2C68;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  JUMPOUT(0x18D78B5D4);
}

void raven::ReceiverDifferentialCodeBiasesEvent::~ReceiverDifferentialCodeBiasesEvent(raven::ReceiverDifferentialCodeBiasesEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::SignalEnvironmentEvent::~SignalEnvironmentEvent(raven::SignalEnvironmentEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::SignalPeriodicityAnalysisEvent::~SignalPeriodicityAnalysisEvent(raven::SignalPeriodicityAnalysisEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::StepCountEvent::~StepCountEvent(raven::StepCountEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::ThinShellIonosphereParametersEvent::~ThinShellIonosphereParametersEvent(raven::ThinShellIonosphereParametersEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::TimeMarkEvent::~TimeMarkEvent(raven::TimeMarkEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::TimerEvent::~TimerEvent(raven::TimerEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::TunnelBridgeNotificationEvent::~TunnelBridgeNotificationEvent(raven::TunnelBridgeNotificationEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::TunnelEndPointAssistanceEvent::~TunnelEndPointAssistanceEvent(raven::TunnelEndPointAssistanceEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::TurnStateEvent::~TurnStateEvent(raven::TurnStateEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::UserGaitEvent::~UserGaitEvent(raven::UserGaitEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::UserSpeedEvent::~UserSpeedEvent(raven::UserSpeedEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::VelocityEvent::~VelocityEvent(raven::VelocityEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void raven::VIOEstimateEvent::~VIOEstimateEvent(raven::VIOEstimateEvent *this)
{
  *(_QWORD *)this = &off_1E25C27B8;
  *((_QWORD *)this + 133) = &unk_1E25C5E70;
  *((_QWORD *)this + 119) = &unk_1E25C5E70;
  *((_QWORD *)this + 105) = &unk_1E25C5E70;
  *((_QWORD *)this + 97) = &unk_1E25C5E70;
  *((_QWORD *)this + 78) = &unk_1E25C5E70;
  *((_QWORD *)this + 64) = &unk_1E25C5E70;
  *((_QWORD *)this + 50) = &unk_1E25C5E70;
  *((_QWORD *)this + 42) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = &off_1E25C27B8;
  *((_QWORD *)this + 133) = &unk_1E25C5E70;
  *((_QWORD *)this + 119) = &unk_1E25C5E70;
  *((_QWORD *)this + 105) = &unk_1E25C5E70;
  *((_QWORD *)this + 97) = &unk_1E25C5E70;
  *((_QWORD *)this + 78) = &unk_1E25C5E70;
  *((_QWORD *)this + 64) = &unk_1E25C5E70;
  *((_QWORD *)this + 50) = &unk_1E25C5E70;
  *((_QWORD *)this + 42) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = &off_1E25C27B8;
  *((_QWORD *)this + 133) = &unk_1E25C5E70;
  *((_QWORD *)this + 119) = &unk_1E25C5E70;
  *((_QWORD *)this + 105) = &unk_1E25C5E70;
  *((_QWORD *)this + 97) = &unk_1E25C5E70;
  *((_QWORD *)this + 78) = &unk_1E25C5E70;
  *((_QWORD *)this + 64) = &unk_1E25C5E70;
  *((_QWORD *)this + 50) = &unk_1E25C5E70;
  *((_QWORD *)this + 42) = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void raven::VLLocalizationEvent::~VLLocalizationEvent(raven::VLLocalizationEvent *this)
{
  *(_QWORD *)this = &off_1E25C2C98;
  *((_QWORD *)this + 120) = &unk_1E25C5E70;
  *((_QWORD *)this + 106) = &unk_1E25C5E70;
  *((_QWORD *)this + 92) = &unk_1E25C5E70;
  *((_QWORD *)this + 84) = &unk_1E25C5E70;
  *((_QWORD *)this + 65) = &unk_1E25C5E70;
  *((_QWORD *)this + 51) = &unk_1E25C5E70;
  *((_QWORD *)this + 37) = &unk_1E25C5E70;
  *((_QWORD *)this + 29) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = &off_1E25C2C98;
  *((_QWORD *)this + 120) = &unk_1E25C5E70;
  *((_QWORD *)this + 106) = &unk_1E25C5E70;
  *((_QWORD *)this + 92) = &unk_1E25C5E70;
  *((_QWORD *)this + 84) = &unk_1E25C5E70;
  *((_QWORD *)this + 65) = &unk_1E25C5E70;
  *((_QWORD *)this + 51) = &unk_1E25C5E70;
  *((_QWORD *)this + 37) = &unk_1E25C5E70;
  *((_QWORD *)this + 29) = &unk_1E25C5E70;
}

{
  *(_QWORD *)this = &off_1E25C2C98;
  *((_QWORD *)this + 120) = &unk_1E25C5E70;
  *((_QWORD *)this + 106) = &unk_1E25C5E70;
  *((_QWORD *)this + 92) = &unk_1E25C5E70;
  *((_QWORD *)this + 84) = &unk_1E25C5E70;
  *((_QWORD *)this + 65) = &unk_1E25C5E70;
  *((_QWORD *)this + 51) = &unk_1E25C5E70;
  *((_QWORD *)this + 37) = &unk_1E25C5E70;
  *((_QWORD *)this + 29) = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenCoarseOdometerActiveObject::~RavenCoarseOdometerActiveObject(raven::RavenCoarseOdometerActiveObject *this)
{
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenDeltaAltitudeActiveObject::~RavenDeltaAltitudeActiveObject(raven::RavenDeltaAltitudeActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C3988;
  sub_18D28C4F8((uint64_t)this + 536);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C3988;
  sub_18D28C4F8((uint64_t)this + 536);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C3988;
  sub_18D28C4F8((uint64_t)this + 536);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenGnssPreprocessorActiveObject::~RavenGnssPreprocessorActiveObject(raven::RavenGnssPreprocessorActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C3F68;
  sub_18D074B58((uint64_t)this + 488);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C3F68;
  sub_18D074B58((uint64_t)this + 488);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C3F68;
  sub_18D074B58((uint64_t)this + 488);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenIntegrityEstimatorActiveObject::~RavenIntegrityEstimatorActiveObject(raven::RavenIntegrityEstimatorActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C4260;
  sub_18D03CAB8((uint64_t)this + 496);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C4260;
  sub_18D03CAB8((uint64_t)this + 496);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C4260;
  sub_18D03CAB8((uint64_t)this + 496);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenMountStateEstimatorActiveObject::~RavenMountStateEstimatorActiveObject(raven::RavenMountStateEstimatorActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C4468;
  sub_18D20B0C4((_QWORD *)this + 62);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C4468;
  sub_18D20B0C4((_QWORD *)this + 62);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C4468;
  sub_18D20B0C4((_QWORD *)this + 62);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenPassThroughEstimatorActiveObject::~RavenPassThroughEstimatorActiveObject(raven::RavenPassThroughEstimatorActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C45F8;
  *((_QWORD *)this + 68) = off_1E25C3320;
  sub_18D04A18C((uint64_t)this + 544);
  sub_18D0745E0((void **)this);
}

{
  *(_QWORD *)this = &off_1E25C45F8;
  *((_QWORD *)this + 68) = off_1E25C3320;
  sub_18D04A18C((uint64_t)this + 544);
  sub_18D0745E0((void **)this);
}

{
  *(_QWORD *)this = &off_1E25C45F8;
  *((_QWORD *)this + 68) = off_1E25C3320;
  sub_18D04A18C((uint64_t)this + 544);
  sub_18D0745E0((void **)this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenPeriodicityTrackerActiveObject::~RavenPeriodicityTrackerActiveObject(raven::RavenPeriodicityTrackerActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C4808;
  sub_18D07BDF4((_QWORD *)this + 80);
  sub_18D07BD60((_QWORD *)this + 74);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  raven::RavenPeriodicityTrackerActiveObject::~RavenPeriodicityTrackerActiveObject(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenPNTEstimatorActiveObject::~RavenPNTEstimatorActiveObject(void **this)
{
  *this = &off_1E25C3850;
  sub_18D03CCEC((uint64_t)(this + 68));
  sub_18D074680(this);
}

{
  *this = &off_1E25C3850;
  sub_18D03CCEC((uint64_t)(this + 68));
  sub_18D074680(this);
}

{
  *this = &off_1E25C3850;
  sub_18D03CCEC((uint64_t)(this + 68));
  sub_18D074680(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenUserSpeedActiveObject::~RavenUserSpeedActiveObject(raven::RavenUserSpeedActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C3500;
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C3500;
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C3500;
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
  JUMPOUT(0x18D78B5D4);
}

void raven::RavenRayTracingActiveObject::~RavenRayTracingActiveObject(raven::RavenRayTracingActiveObject *this)
{
  *(_QWORD *)this = &off_1E25C36C8;
  sub_18D28C418((uint64_t)this + 496);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C36C8;
  sub_18D28C418((uint64_t)this + 496);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

{
  *(_QWORD *)this = &off_1E25C36C8;
  sub_18D28C418((uint64_t)this + 496);
  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D28BB3C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BB48@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "PositionEvent");
}

uint64_t sub_18D28BB58(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18D28BB64(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _QWORD v23[2];
  _QWORD v24[2];

  v24[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v24[1] = v8;
  v23[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  v23[1] = v9;
  v12 = CNTimeSpan::operator-((uint64_t)a2, v24, v10, v11);
  *(double *)v14.i64 = v13;
  *(double *)v15.i64 = (double)v12;
  v16 = v13 + (double)v12;
  v17 = CNTimeSpan::operator-((uint64_t)v23, v24, v14, v15);
  v19 = v18 + (double)v17;
  v20 = fabs(v19);
  v21 = v16 / v19;
  if (v20 < 2.22044605e-16)
    v21 = 0.0;
  *(_OWORD *)(a1 + 8) = *a2;
  *(float64x2_t *)(a1 + 24) = vmlaq_n_f64(*(float64x2_t *)(a3 + 24), vsubq_f64(*(float64x2_t *)(a4 + 24), *(float64x2_t *)(a3 + 24)), v21);
  *(double *)(a1 + 40) = *(double *)(a3 + 40) + (*(double *)(a4 + 40) - *(double *)(a3 + 40)) * v21;
  return 0;
}

uint64_t sub_18D28BC4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18D28BC58(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _QWORD v23[2];
  _QWORD v24[2];

  v24[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v24[1] = v8;
  v23[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  v23[1] = v9;
  v12 = CNTimeSpan::operator-((uint64_t)a2, v24, v10, v11);
  *(double *)v14.i64 = v13;
  *(double *)v15.i64 = (double)v12;
  v16 = v13 + (double)v12;
  v17 = CNTimeSpan::operator-((uint64_t)v23, v24, v14, v15);
  v19 = v18 + (double)v17;
  v20 = fabs(v19);
  v21 = v16 / v19;
  if (v20 < 2.22044605e-16)
    v21 = 0.0;
  *(_OWORD *)(a1 + 8) = *a2;
  *(float64x2_t *)(a1 + 24) = vmlaq_n_f64(*(float64x2_t *)(a3 + 24), vsubq_f64(*(float64x2_t *)(a4 + 24), *(float64x2_t *)(a3 + 24)), v21);
  *(double *)(a1 + 40) = *(double *)(a3 + 40) + (*(double *)(a4 + 40) - *(double *)(a3 + 40)) * v21;
  return 0;
}

uint64_t sub_18D28BD40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BD4C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "DecomposedAccelerationEvent");
}

_QWORD *sub_18D28BD5C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenPeriodicityTrackerActiveObject");
}

void sub_18D28BD6C(cnframework::ActiveObjectBase *a1)
{
  cnframework::ActiveObjectBase::ResetCurrentTime(a1);
  cnframework::ActiveObjectBase::ResetEventQueue(a1);
}

uint64_t sub_18D28BD90(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BD9C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "OdometerEvent");
}

std::string *sub_18D28BDAC(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 520), a2);
  std::string::operator=((std::string *)(a1 + 5512), a2);
  return std::string::operator=((std::string *)(a1 + 7368), a2);
}

uint64_t sub_18D28BDF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BDFC@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "AltitudeChangeEvent");
}

_QWORD *sub_18D28BE0C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "ReceiverDifferentialCodeBiasesEvent");
}

_QWORD *sub_18D28BE1C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "GnssPreprocessedMeasurementsEvent");
}

uint64_t sub_18D28BE2C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BE38@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "TunnelBridgeNotificationEvent");
}

uint64_t sub_18D28BE48(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BE54@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "AccessoryVehicleSpeedEvent");
}

uint64_t sub_18D28BE64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BE70@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "AltitudeEvent");
}

uint64_t sub_18D28BE80(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BE8C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "AttitudeChangeEvent");
}

uint64_t sub_18D28BE9C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BEA8@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "MapVectorEvent");
}

uint64_t sub_18D28BEB8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BEC4@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "PositionChangeEvent");
}

uint64_t sub_18D28BED4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BEE0@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "StepCountEvent");
}

uint64_t sub_18D28BEF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BEFC@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "UserSpeedEvent");
}

uint64_t sub_18D28BF0C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BF18@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "TunnelEndPointAssistanceEvent");
}

uint64_t sub_18D28BF28(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BF34@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "VelocityEvent");
}

std::string *sub_18D28BF44(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 520), a2);
  return std::string::operator=((std::string *)(a1 + 3056), a2);
}

uint64_t sub_18D28BF74(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28BF80@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "SignalPeriodicityAnalysisEvent");
}

_QWORD *sub_18D28BF90@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenPeriodicityTrackerActiveObject");
}

void sub_18D28BFA0(cnprint::CNPrinter *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__p[2];
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    v11 = 12;
    v10 = 1;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v9 >= 0)
      v7 = __p;
    else
      LOBYTE(v7) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "Resetting %s", v2, v3, v4, v5, v6, (char)v7);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(a1);
  cnframework::ActiveObjectBase::ResetEventQueue(a1);
}

void sub_18D28C040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D28C060(uint64_t a1, __int128 *a2)
{
  unint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void (**v7)(raven::SignalPeriodicityAnalysisEvent *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  char v15;
  uint64_t v16;
  char v17;
  int v18;

  if (*(_BYTE *)(a1 + 496))
  {
    LODWORD(v2) = vcvtpd_u64_f64(*(double *)(a1 + 512) / *(double *)(a1 + 504));
    if (v2 <= 1)
      v2 = 1;
    else
      v2 = v2;
    if (*(_QWORD *)(a1 + 632) >= v2 && *(_BYTE *)(a1 + 569))
    {
      if (*(_BYTE *)(a1 + 568))
      {
        v7 = &off_1E25C3B90;
        v3 = a2[3];
        v10 = a2[2];
        v11 = v3;
        v4 = a2[5];
        v12 = a2[4];
        v13 = v4;
        v5 = a2[1];
        v8 = *a2;
        v9 = v5;
        v6 = *(_QWORD *)(a1 + 488);
        v14 = 1.0 / *(double *)(v6 + 648);
        v15 = 1;
        v16 = *(_QWORD *)(a1 + 576);
        v17 = 1;
        v18 = *(_DWORD *)(v6 + 424);
        sub_18D23BE40(a1, (uint64_t)&v7);
      }
    }
  }
}

std::string *sub_18D28C10C(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 520), a2);
  std::string::operator=((std::string *)(a1 + 3056), a2);
  return std::string::operator=((std::string *)(a1 + 16872), a2);
}

uint64_t sub_18D28C14C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C158@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "AccelerometerEvent");
}

uint64_t sub_18D28C168(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C174@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "ActivityInputEvent");
}

uint64_t sub_18D28C184(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C190@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "ARSessionStatusEvent");
}

uint64_t sub_18D28C1A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C1AC@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "AttitudeEvent");
}

uint64_t sub_18D28C1BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C1C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "BarometerEvent");
}

uint64_t sub_18D28C1D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C1E4@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "BodyMetricsEvent");
}

uint64_t sub_18D28C1F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C200@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "FitnessSessionEvent");
}

uint64_t sub_18D28C210(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C21C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "GEOMapBuildingDataEvent");
}

uint64_t sub_18D28C22C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C238@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "GnssMeasurementDataEvent");
}

uint64_t sub_18D28C248(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

_QWORD *sub_18D28C254@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "HorizontalDOTInIMUFrameEvent");
}

uint64_t sub_18D28C264(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C270@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "MapsRouteHintEvent");
}

uint64_t sub_18D28C280(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C28C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "NonHolonomicVelocityConstraintEvent");
}

uint64_t sub_18D28C29C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C2A8@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "PositionContextStateEvent");
}

_QWORD *sub_18D28C2B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "PrefilteredBarometerEvent");
}

uint64_t sub_18D28C2C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C2D4@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "PrefilteredPressureResetEvent");
}

uint64_t sub_18D28C2E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C2F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RateGyroEvent");
}

uint64_t sub_18D28C300(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C30C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenGnssAssistanceFileEvent");
}

uint64_t sub_18D28C31C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C328@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RavenSystemEvent");
}

uint64_t sub_18D28C338(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C344@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "RayTracingTileEvent");
}

uint64_t sub_18D28C354(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C360@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "SignalEnvironmentEvent");
}

_QWORD *sub_18D28C370@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "ThinShellIonosphereParametersEvent");
}

uint64_t sub_18D28C380(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C38C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "TurnStateEvent");
}

uint64_t sub_18D28C39C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C3A8@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "UserGaitEvent");
}

uint64_t sub_18D28C3B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C3C4@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "VIOEstimateEvent");
}

uint64_t sub_18D28C3D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *sub_18D28C3E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "VLLocalizationEvent");
}

void sub_18D28C3F4(raven::RavenPeriodicityTrackerActiveObject *a1)
{
  raven::RavenPeriodicityTrackerActiveObject::~RavenPeriodicityTrackerActiveObject(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D28C418(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;

  v2 = a1 + 3056;
  sub_18D03D9B4(a1 + 3216, *(_QWORD **)(a1 + 3224));
  v5 = (void **)(a1 + 3184);
  sub_18D17CF38(&v5);
  sub_18D03D9B4(a1 + 3128, *(_QWORD **)(a1 + 3136));
  v5 = (void **)(a1 + 3104);
  sub_18D17CFB4(&v5);
  v5 = (void **)(a1 + 3080);
  sub_18D17CF38(&v5);
  sub_18D03D9B4(v2, *(_QWORD **)(a1 + 3064));
  v5 = (void **)(a1 + 3032);
  sub_18D262D30(&v5);
  sub_18D07C868(a1 + 224);
  if (*(_BYTE *)(a1 + 200))
  {
    *(_QWORD *)(a1 + 72) = off_1E25B9B80;
    *(_QWORD *)(a1 + 88) = &unk_1E25C5E70;
  }
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_18D07C868(a1 + 16);
  return a1;
}

uint64_t sub_18D28C4F8(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x1C];
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x1C] + 144 * ((*(_QWORD *)(a1 + 40) + v5) % 0x1C);
    if ((char *)*v6 + 144 * (v5 % 0x1C) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 144 * (v5 % 0x1C));
      do
      {
        v9 = *v8;
        v8 += 18;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 4032)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 14;
    goto LABEL_15;
  }
  if (v12 == 2)
  {
    v13 = 28;
LABEL_15:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t raven::RavenPressurePrefilterActiveObject::Configure(_BYTE *a1, uint64_t *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  unsigned int v36;
  double v37;
  int v38;
  int v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v55;
  unint64_t v56;
  double **v57;
  double *v58;
  double *v59;
  uint64_t v60;
  double *v61;
  cnprint::CNPrinter *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  void *__p[2];
  char v70;
  unsigned __int8 v71;
  __int16 v72;

  if (a1[480])
  {
    v72 = 12;
    v71 = 2;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v70 >= 0)
      v11 = __p;
    else
      LOBYTE(v11) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, &v71, "WARNING: %s configured more than once", v6, v7, v8, v9, v10, (char)v11);
    if (v70 < 0)
      operator delete(__p[0]);
  }
  a1[480] = 0;
  v12 = *a2;
  if (!v12 || !*(_BYTE *)(v12 + 33))
  {
    v72 = 12;
    v71 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v70 >= 0)
      v22 = __p;
    else
      LOBYTE(v22) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, &v71, "%s could not be configured - invalid RavenParameters", v17, v18, v19, v20, v21, (char)v22);
    goto LABEL_47;
  }
  if ((*(_QWORD *)(v12 + 1320) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(v12 + 1320) <= 0.0)
  {
    v72 = 12;
    v71 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v70 >= 0)
      v28 = __p;
    else
      LOBYTE(v28) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, &v71, "%s could not be configured - invalid kernal halfwidth sigma,%.3lf", v23, v24, v25, v26, v27, (char)v28);
    goto LABEL_47;
  }
  a3.i64[0] = *(_QWORD *)(v12 + 1328);
  if ((a3.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)a3.i64 <= 0.0)
  {
    v72 = 12;
    v71 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v70 >= 0)
      v34 = __p;
    else
      LOBYTE(v34) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, &v71, "%s could not be configured - invalid maximum pressure age,%.3lf", v29, v30, v31, v32, v33, (char)v34);
    goto LABEL_47;
  }
  *((_QWORD *)a1 + 62) = 0;
  *((_QWORD *)a1 + 63) = 0;
  *((_QWORD *)a1 + 61) = v12;
  v13 = (void **)*((_QWORD *)a1 + 65);
  v14 = *((_QWORD *)a1 + 66);
  *((_QWORD *)a1 + 69) = 0;
  v15 = v14 - (_QWORD)v13;
  if (v15 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v13 = (void **)(*((_QWORD *)a1 + 65) + 8);
      *((_QWORD *)a1 + 65) = v13;
      v15 = *((_QWORD *)a1 + 66) - (_QWORD)v13;
    }
    while (v15 > 0x10);
  }
  if (v15 >> 3 == 1)
  {
    v16 = 256;
  }
  else
  {
    if (v15 >> 3 != 2)
      goto LABEL_32;
    v16 = 512;
  }
  *((_QWORD *)a1 + 68) = v16;
LABEL_32:
  v35 = *((_QWORD *)a1 + 61);
  v36 = *(_DWORD *)(v35 + 1312);
  if ((v36 & 0x80000000) != 0)
  {
    v40 = 0.0;
  }
  else
  {
    v37 = (double)v36 / *(double *)(v35 + 1320) * ((double)v36 / *(double *)(v35 + 1320));
    v38 = -v36;
    v39 = (2 * v36) | 1;
    v40 = 0.0;
    do
    {
      __p[0] = COERCE_VOID_(exp((double)v38 * -0.5 * (double)v38 / v37));
      v40 = v40 + *(double *)__p;
      *(double *)a3.i64 = sub_18D077D00((_QWORD *)a1 + 64, (double *)__p);
      ++v38;
      --v39;
    }
    while (v39);
  }
  v41 = *((_QWORD *)a1 + 69);
  if (v41 != ((2 * v36) | 1))
  {
    v72 = 12;
    v71 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *, int8x16_t))(*(_QWORD *)a1 + 16))(__p, a1, a3);
    if (v70 >= 0)
      v53 = __p;
    else
      LOBYTE(v53) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, &v71, "%s could not be configured - incorrect barometer kernel size,%zu", v48, v49, v50, v51, v52, (char)v53);
    goto LABEL_47;
  }
  a4.i64[0] = 0x3CB0000000000000;
  if (fabs(v40) < 2.22044605e-16)
  {
    v72 = 12;
    v71 = 4;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v70 >= 0)
      v47 = __p;
    else
      LOBYTE(v47) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, &v71, "%s could not be configured - kernel norm is zero", v42, v43, v44, v45, v46, (char)v47);
LABEL_47:
    if (v70 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  v55 = *((_QWORD *)a1 + 65);
  if (*((_QWORD *)a1 + 66) != v55)
  {
    v56 = *((_QWORD *)a1 + 68);
    v57 = (double **)(v55 + 8 * (v56 >> 9));
    v58 = *v57;
    v59 = &(*v57)[v56 & 0x1FF];
    v60 = *(_QWORD *)(v55 + (((v56 + v41) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v56 + v41) & 0x1FF);
    while (v59 != (double *)v60)
    {
      *v59 = *v59 / v40;
      if ((char *)++v59 - (char *)v58 == 4096)
      {
        v61 = v57[1];
        ++v57;
        v58 = v61;
        v59 = v61;
      }
    }
  }
  a3.i64[0] = *(_QWORD *)(*((_QWORD *)a1 + 61) + 1328);
  __p[0] = 0;
  __p[1] = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, a3, a4);
  *((_OWORD *)a1 + 31) = *(_OWORD *)__p;
  cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, 0.0);
  a1[480] = 1;
  v62 = (cnprint::CNPrinter *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
  if (cnprint::CNPrinter::GetLogLevel(v62) < 2)
  {
    v72 = 12;
    v71 = 1;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v70 >= 0)
      v68 = __p;
    else
      LOBYTE(v68) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, &v71, "%s configured successfully", v63, v64, v65, v66, v67, (char)v68);
    if (v70 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D28CB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenPressurePrefilterActiveObject::HandleEvent(raven::RavenPressurePrefilterActiveObject *this, const raven::BarometerEvent *a2)
{
  BOOL v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **p_p;
  void **v35;
  void **v36;
  unint64_t v37;
  void **v38;
  unint64_t v39;
  void (***v40)(void);
  void (**v41)(void);
  void (***v42)(void);
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void *v71;
  void **v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  __n128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  double *v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  double *v135;
  unint64_t v136;
  void (***v137)(_QWORD, __n128);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t *v142;
  uint64_t v143;
  void **v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t (**v150)(void **);
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  double v160;
  double v161;
  void *__p;
  __int128 v163;
  __int128 v164;
  __n128 v165;
  __int128 v166;
  __int128 v167;
  _BYTE v168[42];
  unint64_t v169;
  unsigned __int8 v170;
  __int16 v171;
  char *v172;
  double v173;
  __int128 v174;
  uint64_t v175;

  if (!*((_BYTE *)this + 480))
    return;
  if (*((_BYTE *)a2 + 128))
    v3 = *((_BYTE *)a2 + 129) == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(__p) = 12;
      LOBYTE(v174) = 1;
      v4 = (*(uint64_t (**)(const raven::BarometerEvent *))(*(_QWORD *)a2 + 16))(a2);
      v160 = v5 + (double)v4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v174, "t,%.3lf,Invalid barometer state,valid,%d,state,%d", v6, v7, v8, v9, v10, SLOBYTE(v160));
    }
    return;
  }
  v11 = *((double *)a2 + 13);
  if (v11 < 30.0 || v11 > 110.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(__p) = 12;
      LOBYTE(v174) = 1;
      v20 = (*(uint64_t (**)(const raven::BarometerEvent *))(*(_QWORD *)a2 + 16))(a2);
      v161 = v21 + (double)v20;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v174, "t,%.3lf,Invalid barometer data,%.6lf", v22, v23, v24, v25, v26, SLOBYTE(v161));
    }
    return;
  }
  if (!*((_QWORD *)this + 75))
    goto LABEL_42;
  __p = (void *)(*(uint64_t (**)(const raven::BarometerEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v163 = v13;
  v14 = *(_QWORD *)(*((_QWORD *)this + 71) + 8 * (*((_QWORD *)this + 74) / 0x1EuLL))
      + 136 * (*((_QWORD *)this + 74) % 0x1EuLL);
  *(_QWORD *)&v174 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v14 + 16))(v14);
  *((_QWORD *)&v174 + 1) = v15;
  v18 = CNTimeSpan::operator-((uint64_t)&__p, &v174, v16, v17);
  v172 = (char *)v18;
  v173 = v19;
  if (v18)
  {
    if (v18 < 0)
      goto LABEL_19;
LABEL_18:
    v18 = sub_18D03F608((double *)&v172, (double *)this + 62);
    if (!(_DWORD)v18)
      goto LABEL_42;
    goto LABEL_19;
  }
  if (v19 >= 0.0)
    goto LABEL_18;
LABEL_19:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
  {
    v171 = 12;
    v170 = 1;
    (*(void (**)(void **__return_ptr, raven::RavenPressurePrefilterActiveObject *))(*(_QWORD *)this + 16))(&__p, this);
    v27 = SHIBYTE(v163);
    v28 = (char)__p;
    (*(void (**)(__int128 *__return_ptr, const raven::BarometerEvent *))(*(_QWORD *)a2 + 24))(&v174, a2);
    if (v27 >= 0)
      p_p = &__p;
    else
      LOBYTE(p_p) = v28;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v171, &v170, "WARNING: %s emptying event history of type %s", v29, v30, v31, v32, v33, (char)p_p);
    if (SHIBYTE(v175) < 0)
      operator delete((void *)v174);
    if (SHIBYTE(v163) < 0)
      operator delete(__p);
  }
  v35 = (void **)*((_QWORD *)this + 71);
  v36 = (void **)*((_QWORD *)this + 72);
  if (v36 == v35)
  {
    v36 = (void **)*((_QWORD *)this + 71);
  }
  else
  {
    v37 = *((_QWORD *)this + 74);
    v38 = &v35[v37 / 0x1E];
    v39 = (unint64_t)v35[(*((_QWORD *)this + 75) + v37) / 0x1E] + 136 * ((*((_QWORD *)this + 75) + v37) % 0x1E);
    if ((char *)*v38 + 136 * (v37 % 0x1E) != (void *)v39)
    {
      v40 = (void (***)(void))((char *)*v38 + 136 * (v37 % 0x1E));
      do
      {
        v41 = *v40;
        v40 += 17;
        (*v41)();
        if ((char *)v40 - (_BYTE *)*v38 == 4080)
        {
          v42 = (void (***)(void))v38[1];
          ++v38;
          v40 = v42;
        }
      }
      while (v40 != (void (***)(void))v39);
      v36 = (void **)*((_QWORD *)this + 72);
      v35 = (void **)*((_QWORD *)this + 71);
    }
  }
  *((_QWORD *)this + 75) = 0;
  v43 = (char *)v36 - (char *)v35;
  if (v43 >= 0x11)
  {
    do
    {
      operator delete(*v35);
      v35 = (void **)(*((_QWORD *)this + 71) + 8);
      *((_QWORD *)this + 71) = v35;
      v43 = *((_QWORD *)this + 72) - (_QWORD)v35;
    }
    while (v43 > 0x10);
  }
  if (v43 >> 3 == 1)
  {
    v44 = 15;
  }
  else
  {
    if (v43 >> 3 != 2)
      goto LABEL_42;
    v44 = 30;
  }
  *((_QWORD *)this + 74) = v44;
LABEL_42:
  v45 = *((_QWORD *)this + 74);
  if (!v45)
  {
    v46 = (char *)*((_QWORD *)this + 72);
    v47 = (char *)*((_QWORD *)this + 71);
    v48 = (v46 - v47) >> 3;
    v49 = 30 * v48 - 1;
    if (v46 == v47)
      v49 = 0;
    if ((unint64_t)(v49 - *((_QWORD *)this + 75)) < 0x1E)
    {
      v50 = (char *)*((_QWORD *)this + 73);
      v51 = (char *)*((_QWORD *)this + 70);
      if (v48 >= (v50 - v51) >> 3)
      {
        if (v50 == v51)
          v55 = 1;
        else
          v55 = (v50 - v51) >> 2;
        v56 = (char *)sub_18D07BF3C(v55);
        v58 = v57;
        v59 = operator new(0xFF0uLL);
        if (v58)
        {
          v60 = &v56[8 * v58];
          v61 = v56;
        }
        else
        {
          v61 = (char *)operator new(8uLL);
          v60 = v61 + 8;
          if (v56)
            operator delete(v56);
        }
        *(_QWORD *)v61 = v59;
        v74 = v61 + 8;
        v75 = (uint64_t *)*((_QWORD *)this + 71);
        if (v75 == *((uint64_t **)this + 72))
        {
          v78 = v61;
          v76 = v61;
          v92 = v61 + 8;
        }
        else
        {
          v76 = v61;
          do
          {
            if (v74 == v60)
            {
              if (v61 <= v76)
              {
                if (v74 == v76)
                  v83 = 1;
                else
                  v83 = (v74 - v76) >> 2;
                v84 = (char *)sub_18D07BF3C(v83);
                v86 = v84;
                v78 = &v84[8 * (v83 >> 2)];
                v77 = v78;
                v87 = v74 - v61;
                if (v74 != v61)
                {
                  v77 = &v78[v87 & 0xFFFFFFFFFFFFFFF8];
                  v88 = 8 * (v87 >> 3);
                  v89 = v78;
                  do
                  {
                    v90 = *(_QWORD *)v61;
                    v61 += 8;
                    *(_QWORD *)v89 = v90;
                    v89 += 8;
                    v88 -= 8;
                  }
                  while (v88);
                }
                v74 = &v84[8 * v85];
                if (v76)
                  operator delete(v76);
                v76 = v86;
              }
              else
              {
                v79 = (v61 - v76) >> 3;
                if (v79 >= -1)
                  v80 = v79 + 1;
                else
                  v80 = v79 + 2;
                v81 = v74;
                if (v74 != v61)
                {
                  memmove(&v61[-8 * (v80 >> 1)], v61, v74 - v61);
                  v81 = v61;
                }
                v82 = -(v80 >> 1);
                v77 = &v74[-8 * (v80 >> 1)];
                v78 = &v81[8 * v82];
              }
            }
            else
            {
              v77 = v74;
              v78 = v61;
              v74 = v60;
            }
            v60 = v74;
            v91 = *v75++;
            *(_QWORD *)v77 = v91;
            v92 = v77 + 8;
            v74 = v92;
            v61 = v78;
          }
          while (v75 != *((uint64_t **)this + 72));
        }
        v93 = (void *)*((_QWORD *)this + 70);
        *((_QWORD *)this + 70) = v76;
        *((_QWORD *)this + 71) = v78;
        *((_QWORD *)this + 72) = v92;
        *((_QWORD *)this + 73) = v60;
        if (v92 - v78 == 8)
          v94 = 15;
        else
          v94 = *((_QWORD *)this + 74) + 30;
        *((_QWORD *)this + 74) = v94;
        if (v93)
          operator delete(v93);
      }
      else
      {
        v52 = operator new(0xFF0uLL);
        v53 = v52;
        if (v47 == v51)
        {
          if (v46 == v50)
          {
            if (v46 == v47)
              v62 = 1;
            else
              v62 = (v46 - v51) >> 2;
            v63 = (char *)sub_18D07BF3C(v62);
            v65 = &v63[8 * (v62 >> 2)];
            v66 = (uint64_t *)*((_QWORD *)this + 71);
            v46 = v65;
            v67 = *((_QWORD *)this + 72) - (_QWORD)v66;
            if (v67)
            {
              v46 = &v65[v67 & 0xFFFFFFFFFFFFFFF8];
              v68 = 8 * (v67 >> 3);
              v69 = v65;
              do
              {
                v70 = *v66++;
                *(_QWORD *)v69 = v70;
                v69 += 8;
                v68 -= 8;
              }
              while (v68);
            }
            v71 = (void *)*((_QWORD *)this + 70);
            *((_QWORD *)this + 70) = v63;
            *((_QWORD *)this + 71) = v65;
            *((_QWORD *)this + 72) = v46;
            *((_QWORD *)this + 73) = &v63[8 * v64];
            if (v71)
            {
              operator delete(v71);
              v46 = (char *)*((_QWORD *)this + 72);
            }
          }
          *(_QWORD *)v46 = v53;
          v72 = (void **)*((_QWORD *)this + 72);
          *((_QWORD *)this + 72) = v72 + 1;
          __p = *v72;
          *((_QWORD *)this + 72) = v72;
          sub_18D188F3C((uint64_t)this + 560, &__p);
          v54 = *((_QWORD *)this + 71);
        }
        else
        {
          *((_QWORD *)v47 - 1) = v52;
          v54 = *((_QWORD *)this + 71) - 8;
          *((_QWORD *)this + 71) = v54;
        }
        if (*((_QWORD *)this + 72) - v54 == 8)
          v73 = 15;
        else
          v73 = *((_QWORD *)this + 74) + 30;
        *((_QWORD *)this + 74) = v73;
      }
    }
    else
    {
      *((_QWORD *)this + 74) = 30;
      __p = (void *)*((_QWORD *)v46 - 1);
      *((_QWORD *)this + 72) = v46 - 8;
      sub_18D188F3C((uint64_t)this + 560, &__p);
    }
    v45 = *((_QWORD *)this + 74);
  }
  v95 = *((_QWORD *)this + 71);
  v96 = (_QWORD *)(v95 + 8 * (v45 / 0x1E));
  v97 = *v96 + 136 * (v45 % 0x1E);
  if (*((_QWORD *)this + 72) == v95)
    v97 = 0;
  if (v97 == *v96)
    v97 = *(v96 - 1) + 4080;
  *(_QWORD *)(v97 - 136) = &unk_1E25C22A8;
  v98 = *(_OWORD *)((char *)a2 + 8);
  v99 = *(_OWORD *)((char *)a2 + 24);
  v100 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)(v97 - 96) = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)(v97 - 80) = v100;
  *(_OWORD *)(v97 - 128) = v98;
  *(_OWORD *)(v97 - 112) = v99;
  v101 = *(_OWORD *)((char *)a2 + 72);
  v102 = *(_OWORD *)((char *)a2 + 88);
  v103 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)(v97 - 22) = *(_OWORD *)((char *)a2 + 114);
  *(_OWORD *)(v97 - 48) = v102;
  *(_OWORD *)(v97 - 32) = v103;
  *(_OWORD *)(v97 - 64) = v101;
  v104 = *((_QWORD *)this + 74);
  v105 = v104 - 1;
  *((_QWORD *)this + 74) = v104 - 1;
  v106 = *((_QWORD *)this + 75);
  v107 = v106 + 1;
  *((_QWORD *)this + 75) = v106 + 1;
  if (v106 + 1 == *((_QWORD *)this + 69))
  {
    v108 = *(unsigned int *)(*((_QWORD *)this + 61) + 1312);
    if (v107 <= v108)
      sub_18D077838("deque");
    v109 = v105 + v108;
    v110 = *((_QWORD *)this + 71);
    v111 = *(_QWORD *)(v110 + 8 * (v109 / 0x1E));
    v112 = v109 % 0x1E;
    LOBYTE(v164) = 0;
    *((_QWORD *)&v164 + 1) = 0;
    v165.n128_u64[0] = 0;
    v165.n128_u8[8] = 0;
    v166 = 0uLL;
    LOBYTE(v167) = 0;
    *((_QWORD *)&v167 + 1) = 0;
    *(_QWORD *)v168 = 0;
    v113 = (__n128)vdupq_n_s64(0x7FF8000000000000uLL);
    *(__n128 *)&v168[8] = v113;
    v168[24] = 0;
    *(_QWORD *)&v168[32] = 0x7FF8000000000000;
    *(_WORD *)&v168[40] = 0;
    __p = &unk_1E25C3160;
    v163 = 0uLL;
    if (&__p != (void **)(v111 + 136 * v112))
    {
      v114 = v111 + 136 * v112;
      v115 = *(_OWORD *)(v114 + 24);
      v163 = *(_OWORD *)(v114 + 8);
      v164 = v115;
      v113 = *(__n128 *)(v114 + 40);
      v116 = *(_OWORD *)(v114 + 56);
      v117 = *(_OWORD *)(v114 + 88);
      v167 = *(_OWORD *)(v114 + 72);
      *(_OWORD *)v168 = v117;
      v165 = v113;
      v166 = v116;
      *(_QWORD *)&v168[16] = *(_QWORD *)(v114 + 104);
      v168[24] = *(_BYTE *)(v114 + 112);
      *(_QWORD *)&v168[32] = *(_QWORD *)(v114 + 120);
      *(_WORD *)&v168[40] = *(_WORD *)(v114 + 128);
    }
    v169 = 0;
    v118 = *((_QWORD *)this + 65);
    v119 = *((_QWORD *)this + 68);
    v120 = (_QWORD *)(v118 + 8 * (v119 >> 9));
    v121 = *((_QWORD *)this + 66);
    if (v121 == v118)
      v122 = 0;
    else
      v122 = (double *)(*v120 + 8 * (*((_QWORD *)this + 68) & 0x1FFLL));
    v123 = (_QWORD *)(v110 + 8 * (v105 / 0x1E));
    v124 = *((_QWORD *)this + 72);
    if (v124 == v110)
      v125 = 0;
    else
      v125 = *v123 + 136 * (v105 % 0x1E);
    v126 = v119 + v107;
    v127 = v126 >> 9;
    v128 = v126 & 0x1FF;
    v129 = v104 + v106;
    v130 = (v104 + v106) / 0x1EuLL;
    v113.n128_u64[0] = 0;
LABEL_115:
    v131 = v125 - 4080;
    while (1)
    {
      v132 = v121 == v118 ? 0 : *(_QWORD *)(v118 + 8 * v127) + 8 * v128;
      if (v122 == (double *)v132)
        break;
      v133 = v124 == v110 ? 0 : *(_QWORD *)(v110 + 8 * v130) + 136 * (v129 - 30 * v130);
      if (v125 == v133)
        break;
      v134 = *v122++;
      v113.n128_f64[0] = v113.n128_f64[0] + v134 * *(double *)(v125 + 104);
      v169 = v113.n128_u64[0];
      if ((double *)((char *)v122 - *v120) == (double *)4096)
      {
        v135 = (double *)v120[1];
        ++v120;
        v122 = v135;
      }
      v131 += 136;
      v125 += 136;
      if (*v123 == v131)
      {
        v136 = v123[1];
        ++v123;
        v125 = v136;
        goto LABEL_115;
      }
    }
    v137 = (void (***)(_QWORD, __n128))(*(_QWORD *)(v110 + 8 * ((v105 + v106) / 0x1E))
                                                 + 136 * ((v105 + v106) % 0x1E));
    (**v137)(v137, v113);
    v138 = *((_QWORD *)this + 72);
    v139 = 30 * ((v138 - *((_QWORD *)this + 71)) >> 3) - 1;
    v140 = *((_QWORD *)this + 75);
    if (v138 == *((_QWORD *)this + 71))
      v139 = 0;
    *((_QWORD *)this + 75) = v140 - 1;
    if ((unint64_t)(v139 - (v140 + *((_QWORD *)this + 74)) - 59) <= 0xFFFFFFFFFFFFFFC3)
    {
      operator delete(*(void **)(v138 - 8));
      *((_QWORD *)this + 72) -= 8;
    }
    v141 = (char *)operator new(0x60uLL);
    *((_QWORD *)v141 + 1) = 0;
    v142 = (unint64_t *)(v141 + 8);
    *((_QWORD *)v141 + 2) = 0;
    *(_QWORD *)v141 = &unk_1E25CCE50;
    *((_QWORD *)v141 + 3) = &unk_1E25B8C58;
    v143 = MEMORY[0x1E0DE4F20];
    v141[32] = 0;
    *((_QWORD *)v141 + 5) = 0;
    *((_QWORD *)v141 + 6) = v143;
    v144 = (void **)(v141 + 72);
    *((_QWORD *)v141 + 7) = 0;
    *((_QWORD *)v141 + 8) = 0;
    sub_18D0778AC((_QWORD *)v141 + 9, "");
    v141[32] = 1;
    v145 = operator new();
    v146 = *(_OWORD *)v168;
    *(_OWORD *)(v145 + 80) = v167;
    *(_OWORD *)(v145 + 96) = v146;
    *(_OWORD *)(v145 + 112) = *(_OWORD *)&v168[16];
    *(_OWORD *)(v145 + 122) = *(_OWORD *)&v168[26];
    v147 = v164;
    *(_OWORD *)(v145 + 16) = v163;
    *(_OWORD *)(v145 + 32) = v147;
    v148 = v166;
    *(__n128 *)(v145 + 48) = v165;
    *(_OWORD *)(v145 + 64) = v148;
    *(_QWORD *)v145 = &off_1E25C1BD0;
    *(_QWORD *)(v145 + 8) = &unk_1E25C3160;
    *(_QWORD *)(v145 + 144) = v169;
    v149 = *((_QWORD *)v141 + 5);
    *((_QWORD *)v141 + 5) = v145;
    if (v149)
      (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
    v150 = (uint64_t (**)(void **))__p;
    *((_QWORD *)v141 + 6) = *((_QWORD *)__p - 1);
    *((_QWORD *)v141 + 7) = v150[2](&__p);
    *((_QWORD *)v141 + 8) = v151;
    (*((void (**)(__int128 *__return_ptr, void **))__p + 3))(&v174, &__p);
    if (v141[95] < 0)
      operator delete(*v144);
    *(_OWORD *)v144 = v174;
    *((_QWORD *)v141 + 11) = v175;
    v172 = v141 + 24;
    v173 = *(double *)&v141;
    v152 = *((_QWORD *)this + 43);
    *(_QWORD *)&v174 = v141 + 24;
    *((_QWORD *)&v174 + 1) = v141;
    do
      v153 = __ldxr(v142);
    while (__stxr(v153 + 1, v142));
    (*(void (**)(uint64_t, __int128 *, raven::RavenPressurePrefilterActiveObject *))(*(_QWORD *)v152 + 16))(v152, &v174, this);
    v154 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
    if (*((_QWORD *)&v174 + 1))
    {
      v155 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
    v157 = *(std::__shared_weak_count **)&v173;
    if (v173 != 0.0)
    {
      v158 = (unint64_t *)(*(_QWORD *)&v173 + 8);
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
  }
}

void sub_18D28D720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  operator delete(v18);
  if (v17)
    operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_18D28D7D4()
{
  JUMPOUT(0x18D28D7CCLL);
}

void sub_18D28D7DC(cnframework::ActiveObjectBase *a1)
{
  *(_QWORD *)a1 = &off_1E25C4070;
  sub_18D20B6C8((_QWORD *)a1 + 70);
  sub_18D07BD60((_QWORD *)a1 + 64);
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D28D830()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D28D844()
{
}

double sub_18D28D850(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double result;

  v2 = operator new();
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 122) = *(_OWORD *)(a1 + 122);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v5;
  *(_QWORD *)v2 = &off_1E25C1BD0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C3160;
  result = *(double *)(a1 + 144);
  *(double *)(v2 + 144) = result;
  return result;
}

uint64_t raven::TunnelEndPointAssistanceChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::TunnelEndPointAssistanceChecker::HandleEvent(raven::TunnelEndPointAssistanceChecker *this, const raven::TunnelEndPointAssistanceEvent *a2, raven::TunnelEndPointAssistanceEvent *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  double v16;
  double v17;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  unsigned __int8 v75;
  __int16 v76;

  if (*((_BYTE *)this + 8))
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    v5 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a3 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a3 + 24) = v5;
    *(_OWORD *)((char *)a3 + 8) = v4;
    v6 = *(_OWORD *)((char *)a2 + 56);
    v7 = *(_OWORD *)((char *)a2 + 72);
    v8 = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a3 + 88) = v8;
    *(_OWORD *)((char *)a3 + 72) = v7;
    *(_OWORD *)((char *)a3 + 56) = v6;
    v9 = *(_OWORD *)((char *)a2 + 120);
    v10 = *(_OWORD *)((char *)a2 + 136);
    v11 = *(_OWORD *)((char *)a2 + 152);
    *(_OWORD *)((char *)a3 + 168) = *(_OWORD *)((char *)a2 + 168);
    *(_OWORD *)((char *)a3 + 152) = v11;
    *(_OWORD *)((char *)a3 + 136) = v10;
    *(_OWORD *)((char *)a3 + 120) = v9;
    v12 = *(_OWORD *)((char *)a2 + 184);
    v13 = *(_OWORD *)((char *)a2 + 200);
    v14 = *(_OWORD *)((char *)a2 + 216);
    *(_OWORD *)((char *)a3 + 225) = *(_OWORD *)((char *)a2 + 225);
    *(_OWORD *)((char *)a3 + 216) = v14;
    *(_OWORD *)((char *)a3 + 200) = v13;
    *(_OWORD *)((char *)a3 + 184) = v12;
    if (*((_BYTE *)a2 + 240) == 1)
    {
      v15 = *((double *)a2 + 25);
      if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v15 > 90.0 || v15 < -90.0)
      {
        if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
        {
          v76 = 12;
          v75 = 1;
          v33 = (*(uint64_t (**)(const raven::TunnelEndPointAssistanceEvent *))(*(_QWORD *)a2 + 16))(a2);
          v70 = v34 + (double)v33;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v75, "t,%.3lf,TunnelEndPointAssistanceChecker: Assistance rejected due to invalid latitude, %.3lf", v35, v36, v37, v38, v39, SLOBYTE(v70));
        }
      }
      else
      {
        v16 = *((double *)a2 + 26);
        if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v16 > 180.0 || v16 <= -180.0)
        {
          if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
          {
            v76 = 12;
            v75 = 1;
            v40 = (*(uint64_t (**)(const raven::TunnelEndPointAssistanceEvent *))(*(_QWORD *)a2 + 16))(a2);
            v71 = v41 + (double)v40;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v75, "t,%.3lf,TunnelEndPointAssistanceChecker: Assistance rejected due to invalid longitude, %.3lf", v42, v43, v44, v45, v46, SLOBYTE(v71));
          }
        }
        else if ((*((_QWORD *)a2 + 27) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 27) <= 0.0)
        {
          if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
          {
            v76 = 12;
            v75 = 1;
            v47 = (*(uint64_t (**)(const raven::TunnelEndPointAssistanceEvent *))(*(_QWORD *)a2 + 16))(a2);
            v72 = v48 + (double)v47;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v75, "t,%.3lf,TunnelEndPointAssistanceChecker: Assistance rejected due to invalid horizontal uncertainty, %.3lf", v49, v50, v51, v52, v53, SLOBYTE(v72));
          }
        }
        else
        {
          v17 = *((double *)a2 + 28);
          if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v17 < -423.0 || v17 > 8848.0)
          {
            if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
            {
              v76 = 12;
              v75 = 1;
              v54 = (*(uint64_t (**)(const raven::TunnelEndPointAssistanceEvent *))(*(_QWORD *)a2 + 16))(a2);
              v73 = v55 + (double)v54;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v75, "t,%.3lf,TunnelEndPointAssistanceChecker: Assistance rejected due to invalid altitude, %.3lf", v56, v57, v58, v59, v60, SLOBYTE(v73));
            }
          }
          else
          {
            if ((*((_QWORD *)a2 + 29) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *((double *)a2 + 29) > 0.0)
              return 0;
            if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
            {
              v76 = 12;
              v75 = 1;
              v61 = (*(uint64_t (**)(const raven::TunnelEndPointAssistanceEvent *))(*(_QWORD *)a2 + 16))(a2);
              v74 = v62 + (double)v61;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v75, "t,%.3lf,TunnelEndPointAssistanceChecker: Assistance rejected due to invalid vertical uncertainty, %.3lf", v63, v64, v65, v66, v67, SLOBYTE(v74));
            }
          }
        }
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      v76 = 12;
      v75 = 1;
      v26 = (*(uint64_t (**)(const raven::TunnelEndPointAssistanceEvent *))(*(_QWORD *)a2 + 16))(a2);
      v69 = v27 + (double)v26;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v75, "t,%.3lf,TunnelEndPointAssistanceChecker: Assistance rejected due to invalid reference frame, %u", v28, v29, v30, v31, v32, SLOBYTE(v69));
    }
  }
  else
  {
    v76 = 12;
    v75 = 4;
    v19 = (*(uint64_t (**)(const raven::TunnelEndPointAssistanceEvent *, const raven::TunnelEndPointAssistanceEvent *, raven::TunnelEndPointAssistanceEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v68 = v20 + (double)v19;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v75, "t,%.3lf,TunnelEndPointAssistanceChecker, not configured", v21, v22, v23, v24, v25, SLOBYTE(v68));
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::ActivityStateChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

BOOL raven::RavenDeviceAttitudeActiveObject::AttitudeViaTwoVectors()
{
  double v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  cnprint::CNPrinter *v17;
  float64x2_t v18;
  cnprint::CNPrinter *v19;
  double v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  cnprint::CNPrinter *v30;
  float64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  cnprint::CNPrinter *v63;
  float64x2_t v64;
  _BOOL8 v65;
  cnprint::CNPrinter *v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  double v73;
  double *v74;
  double *v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  double *v80;
  double *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  float64x2_t v88;
  float64x2_t v89;
  __int128 v90;
  cnprint::CNPrinter *v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int LogLevel;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  double v119;
  uint64_t v120;
  double v121;
  double v122;
  _BYTE v123[112];
  _BYTE v124[112];
  _BYTE v125[112];
  _BYTE v126[112];
  _BYTE v127[112];
  _BYTE v128[112];
  _BYTE v129[112];
  _BYTE v130[112];
  unsigned __int8 v131[112];
  _WORD v132[56];
  _BYTE v133[112];
  _BYTE v134[112];
  _OWORD v135[7];
  _BYTE v136[112];
  void *v137;
  __int128 v138;
  uint64_t v139;
  _BYTE *v140;
  _BYTE v141[72];
  void *v142;
  __int128 v143;
  uint64_t v144;
  _BYTE *v145;
  _BYTE v146[72];
  _QWORD v147[2];
  int v148;
  int v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD v152[3];
  void *v153;
  __int128 v154;
  uint64_t v155;
  double *v156;
  uint64_t v157;
  void *v158;
  __int128 v159;
  uint64_t v160;
  double *v161;
  uint64_t v162;
  _QWORD v163[2];
  int v164;
  int v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD v168[3];
  void *v169;
  __int128 v170;
  uint64_t v171;
  double *v172;
  uint64_t v173;
  void *v174;
  __int128 v175;
  uint64_t v176;
  double *v177;
  uint64_t v178;
  void *v179;
  __int128 v180;
  uint64_t v181;
  _BYTE *v182;
  _BYTE v183[2480];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v0;
  v13 = v12;
  v15 = v14;
  v16 = atomic_load((unsigned __int8 *)&qword_1ECF24220);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24220))
  {
    qword_1ECF24218 = 0x3FDFFFFFFFFFFFFFLL;
    __cxa_guard_release(&qword_1ECF24220);
  }
  v144 = 0x100000003;
  v142 = &unk_1E25C7790;
  v143 = xmmword_18D313070;
  v145 = v146;
  v181 = 0x100000134;
  v179 = &unk_1E25C7640;
  v180 = xmmword_18D3130C0;
  v182 = v183;
  v139 = 0x100000003;
  v137 = &unk_1E25C7790;
  v138 = xmmword_18D313070;
  v140 = v141;
  sub_18D159EE0(v15, (uint64_t)&v142, (uint64_t)&v179, (uint64_t)&v137, "2");
  if (v18.f64[0] < v11 || fabs(v18.f64[0]) <= 0.000000015)
  {
    if (cnprint::CNPrinter::GetLogLevel(v17) <= 1)
    {
      LOWORD(v179) = 12;
      LOBYTE(v142) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v179, (unsigned __int8 *)&v142, "DevAtt,Uncertainty of first vector is too large,unc,%.3lf,norm,%.3lf", v38, v39, v40, v41, v42, SLOBYTE(v11));
    }
    return 0;
  }
  v176 = 0x100000003;
  v174 = &unk_1E25C7790;
  v175 = xmmword_18D313070;
  v177 = (double *)&v178;
  v18.f64[0] = 1.0 / v18.f64[0];
  sub_18D064EF4(v15, (uint64_t)&v174, v18);
  v144 = 0x100000003;
  v142 = &unk_1E25C7790;
  v143 = xmmword_18D313070;
  v145 = v146;
  v181 = 0x100000134;
  v179 = &unk_1E25C7640;
  v180 = xmmword_18D3130C0;
  v182 = v183;
  v139 = 0x100000003;
  v137 = &unk_1E25C7790;
  v138 = xmmword_18D313070;
  v140 = v141;
  sub_18D159EE0(v10, (uint64_t)&v142, (uint64_t)&v179, (uint64_t)&v137, "2");
  if (fabs(v20) <= 0.000000015 || v20 < v6)
  {
    if (cnprint::CNPrinter::GetLogLevel(v19) <= 1)
    {
      LOWORD(v179) = 12;
      LOBYTE(v142) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v179, (unsigned __int8 *)&v142, "DevAtt,Uncertainty of second vector is too large,unc,%.3lf,norm,%.3lf", v43, v44, v45, v46, v47, SLOBYTE(v6));
    }
    return 0;
  }
  v120 = v2;
  v171 = 0x100000003;
  v169 = &unk_1E25C7790;
  *(_QWORD *)&v21.f64[1] = 0x300000003;
  v170 = xmmword_18D313070;
  v172 = (double *)&v173;
  v21.f64[0] = 1.0 / v20;
  sub_18D064EF4(v10, (uint64_t)&v169, v21);
  v166 = 0x100000003;
  v163[0] = &unk_1E25C7790;
  v167 = v168;
  v163[1] = v175;
  v164 = DWORD1(v175) * v175;
  v165 = v175;
  v22 = *v177;
  v23 = v177[1];
  v24 = v177[2];
  v25 = *v172;
  v26 = v172[1];
  v27 = v172[2];
  v28 = v23 * v27 - v24 * v26;
  v29 = v24 * *v172 - *v177 * v27;
  *(double *)v168 = v28;
  *(double *)&v168[1] = v29;
  *(double *)&v168[2] = v22 * v26 - v23 * v25;
  v144 = 0x100000003;
  v142 = &unk_1E25C7790;
  v143 = xmmword_18D313070;
  v145 = v146;
  v181 = 0x100000134;
  v179 = &unk_1E25C7640;
  v180 = xmmword_18D3130C0;
  v182 = v183;
  v139 = 0x100000003;
  v137 = &unk_1E25C7790;
  v138 = xmmword_18D313070;
  v140 = v141;
  sub_18D159EE0((uint64_t)v163, (uint64_t)&v142, (uint64_t)&v179, (uint64_t)&v137, "2");
  if (v31.f64[0] < *(double *)&qword_1ECF24218)
  {
    if (cnprint::CNPrinter::GetLogLevel(v30) <= 1)
    {
      LOWORD(v179) = 12;
      LOBYTE(v142) = 1;
      v37 = "DevAtt,Vector 1 and 2 are too close < 30deg";
LABEL_20:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v179, (unsigned __int8 *)&v142, v37, v32, v33, v34, v35, v36, v118);
      return 0;
    }
    return 0;
  }
  v181 = 0x100000003;
  v179 = &unk_1E25C7790;
  v180 = xmmword_18D313070;
  v182 = v183;
  v31.f64[0] = 1.0 / v31.f64[0];
  sub_18D064EF4((uint64_t)v163, (uint64_t)&v179, v31);
  sub_18D053AA8((uint64_t)v163, (uint64_t)&v179);
  v144 = 0x100000003;
  v142 = &unk_1E25C7790;
  v143 = xmmword_18D313070;
  v145 = v146;
  v181 = 0x100000134;
  v179 = &unk_1E25C7640;
  v180 = xmmword_18D3130C0;
  v182 = v183;
  v139 = 0x100000003;
  v137 = &unk_1E25C7790;
  v138 = xmmword_18D313070;
  v140 = v141;
  sub_18D159EE0(v13, (uint64_t)&v142, (uint64_t)&v179, (uint64_t)&v137, "2");
  if (fabs(v53.f64[0]) <= 0.000000015)
  {
    LOWORD(v179) = 12;
    LOBYTE(v142) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v179, (unsigned __int8 *)&v142, "DevAtt,Error,Reference vector 1 is zero vector,norm,%.3lf", v48, v49, v50, v51, v52, SLOBYTE(v53.f64[0]));
    return 0;
  }
  v160 = 0x100000003;
  v158 = &unk_1E25C7790;
  v159 = xmmword_18D313070;
  v161 = (double *)&v162;
  v53.f64[0] = 1.0 / v53.f64[0];
  sub_18D064EF4(v13, (uint64_t)&v158, v53);
  v144 = 0x100000003;
  v142 = &unk_1E25C7790;
  v143 = xmmword_18D313070;
  v145 = v146;
  v181 = 0x100000134;
  v179 = &unk_1E25C7640;
  v180 = xmmword_18D3130C0;
  v182 = v183;
  v139 = 0x100000003;
  v137 = &unk_1E25C7790;
  v138 = xmmword_18D313070;
  v140 = v141;
  sub_18D159EE0(v8, (uint64_t)&v142, (uint64_t)&v179, (uint64_t)&v137, "2");
  if (fabs(v54.f64[0]) <= 0.000000015)
  {
    LOWORD(v179) = 12;
    LOBYTE(v142) = 4;
    v118 = LOBYTE(v54.f64[0]);
    v37 = "DevAtt,Error,Reference vector 2 is zero vector,norm,%.3lf";
    goto LABEL_20;
  }
  v155 = 0x100000003;
  v153 = &unk_1E25C7790;
  v154 = xmmword_18D313070;
  v156 = (double *)&v157;
  v54.f64[0] = 1.0 / v54.f64[0];
  sub_18D064EF4(v8, (uint64_t)&v153, v54);
  v150 = 0x100000003;
  v147[0] = &unk_1E25C7790;
  v151 = v152;
  v147[1] = v159;
  v148 = DWORD1(v159) * v159;
  v149 = v159;
  v55 = *v161;
  v56 = v161[1];
  v57 = v161[2];
  v58 = *v156;
  v59 = v156[1];
  v60 = v156[2];
  v61 = v56 * v60 - v57 * v59;
  v62 = v57 * *v156 - *v161 * v60;
  *(double *)v152 = v61;
  *(double *)&v152[1] = v62;
  *(double *)&v152[2] = v55 * v59 - v56 * v58;
  v144 = 0x100000003;
  v142 = &unk_1E25C7790;
  v143 = xmmword_18D313070;
  v145 = v146;
  v181 = 0x100000134;
  v179 = &unk_1E25C7640;
  v180 = xmmword_18D3130C0;
  v182 = v183;
  v139 = 0x100000003;
  v137 = &unk_1E25C7790;
  v138 = xmmword_18D313070;
  v140 = v141;
  sub_18D159EE0((uint64_t)v147, (uint64_t)&v142, (uint64_t)&v179, (uint64_t)&v137, "2");
  if (v64.f64[0] < *(double *)&qword_1ECF24218)
  {
    if (cnprint::CNPrinter::GetLogLevel(v63) <= 1)
    {
      LOWORD(v179) = 12;
      LOBYTE(v142) = 1;
      v37 = "DevAtt,Reference Vector 1 and 2 are too close < 30deg";
      goto LABEL_20;
    }
    return 0;
  }
  v64.f64[0] = 1.0 / v64.f64[0];
  sub_18D1B27A8((uint64_t)v147, (uint64_t)&v179, v64);
  sub_18D053AA8((uint64_t)v147, (uint64_t)&v179);
  if (fabs(v11) <= 0.000000015)
  {
    if (cnprint::CNPrinter::GetLogLevel(v67) <= 1)
    {
      LOWORD(v179) = 12;
      LOBYTE(v142) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v179, (unsigned __int8 *)&v142, "DevAtt,angular/direction uncertainty of first vector is zero,%.3lf", v97, v98, v99, v100, v101, SLOBYTE(v11));
    }
    return 0;
  }
  if (fabs(v6) <= 0.000000015)
  {
    if (cnprint::CNPrinter::GetLogLevel(v67) <= 1)
    {
      LOWORD(v179) = 12;
      LOBYTE(v142) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v179, (unsigned __int8 *)&v142, "DevAtt,angular/direction uncertainty of second vector is zero,%.3lf", v102, v103, v104, v105, v106, SLOBYTE(v6));
    }
    return 0;
  }
  v68 = 1.0 / v11 / v11;
  v69 = 1.0 / v6 / v6;
  v70 = v68 + v69;
  if (fabs(v68 + v69) <= 0.000000015)
  {
    if (cnprint::CNPrinter::GetLogLevel(v67) <= 1)
    {
      LOWORD(v179) = 12;
      LOBYTE(v142) = 1;
      v119 = v68 + v69;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v179, (unsigned __int8 *)&v142, "DevAtt,Sum of two weight is zero,%.3lf", v107, v108, v109, v110, v111, SLOBYTE(v119));
    }
    return 0;
  }
  v71 = DWORD2(v175);
  v72 = 0.0;
  v73 = 0.0;
  if (SDWORD2(v175) >= 1)
  {
    v74 = v177;
    v75 = v172;
    do
    {
      v76 = *v74++;
      v77 = v76;
      v78 = *v75++;
      v73 = v73 + v77 * v78;
      --v71;
    }
    while (v71);
  }
  v79 = DWORD2(v159);
  if (SDWORD2(v159) >= 1)
  {
    v80 = v161;
    v72 = 0.0;
    v81 = v156;
    do
    {
      v82 = *v80++;
      v83 = v82;
      v84 = *v81++;
      v72 = v72 + v83 * v84;
      --v79;
    }
    while (v79);
  }
  sub_18D28E7FC((uint64_t)&v179, (uint64_t)&v174, (uint64_t)&v169);
  sub_18D192CE4((uint64_t)&v179);
  v122 = v85;
  sub_18D28E7FC((uint64_t)&v142, (uint64_t)&v158, (uint64_t)&v153);
  sub_18D192CE4((uint64_t)&v142);
  v121 = v86;
  sub_18D186BA8((uint64_t)&v158, (uint64_t)&v142);
  sub_18D1D4A34((uint64_t)&v174, (uint64_t)&v142, (uint64_t)&v179);
  sub_18D186BA8((uint64_t)&v153, (uint64_t)&v137);
  sub_18D1D4A34((uint64_t)&v169, (uint64_t)&v137, (uint64_t)&v142);
  sub_18D186BA8((uint64_t)v147, (uint64_t)v136);
  sub_18D1D4A34((uint64_t)v163, (uint64_t)v136, (uint64_t)&v137);
  sub_18D28E8D8((uint64_t)v130, *v177, v177[1], v177[2]);
  sub_18D166008((uint64_t)v130, (uint64_t)&v137, (uint64_t)v131);
  sub_18D28E8D8((uint64_t)v129, *v161, v161[1], v161[2]);
  sub_18D166008((uint64_t)v131, (uint64_t)v129, (uint64_t)v132);
  sub_18D28E86C((uint64_t)v133, (uint64_t)&v179, (uint64_t)v132);
  v87 = sqrt(v69 / v70 * (v69 / v70)+ v68 / v70 * (v68 / v70)+ v69 / v70 * (v68 / v70 + v68 / v70) * (v122 * v121 + v73 * v72));
  v88.f64[0] = v68 / v70 / v87;
  sub_18D1A3CF0((uint64_t)v133, (uint64_t)v134, v88);
  sub_18D28E8D8((uint64_t)v124, *v172, v172[1], v172[2]);
  sub_18D166008((uint64_t)v124, (uint64_t)&v137, (uint64_t)v125);
  sub_18D28E8D8((uint64_t)v123, *v156, v156[1], v156[2]);
  sub_18D166008((uint64_t)v125, (uint64_t)v123, (uint64_t)v126);
  sub_18D28E86C((uint64_t)v127, (uint64_t)&v142, (uint64_t)v126);
  v89.f64[0] = v69 / v70 / v87;
  sub_18D1A3CF0((uint64_t)v127, (uint64_t)v128, v89);
  sub_18D1BE894((uint64_t)v134, (uint64_t)v128, (uint64_t)v135);
  sub_18D1BE894((uint64_t)v135, (uint64_t)&v137, (uint64_t)v136);
  sub_18D159244((uint64_t)v135, (uint64_t)v136);
  if (v135 != v4)
  {
    v90 = v135[1];
    *v4 = v135[0];
    v4[1] = v90;
  }
  sub_18D186BA8((uint64_t)&v174, (uint64_t)v134);
  sub_18D1D4A34((uint64_t)&v174, (uint64_t)v134, (uint64_t)v135);
  sub_18D186BA8((uint64_t)&v169, (uint64_t)v133);
  sub_18D1D4A34((uint64_t)&v169, (uint64_t)v133, (uint64_t)v134);
  sub_18D186BA8((uint64_t)v163, (uint64_t)v132);
  sub_18D1D4A34((uint64_t)v163, (uint64_t)v132, (uint64_t)v133);
  sub_18D192CE4((uint64_t)v163);
  v92 = v93.f64[0];
  v93.f64[0] = fabs(v93.f64[0]);
  v65 = v93.f64[0] > 0.000000015;
  if (v93.f64[0] > 0.000000015)
  {
    v93.f64[0] = v6 * v6;
    sub_18D1A3CF0((uint64_t)v135, (uint64_t)v129, v93);
    v94.f64[0] = v11 * v11;
    sub_18D1A3CF0((uint64_t)v134, (uint64_t)v128, v94);
    sub_18D1BE894((uint64_t)v129, (uint64_t)v128, (uint64_t)v130);
    v95.f64[0] = 1.0 / v70;
    sub_18D1A3CF0((uint64_t)v133, (uint64_t)v127, v95);
    sub_18D1BE894((uint64_t)v130, (uint64_t)v127, (uint64_t)v131);
    v96.f64[0] = 1.0 / v92 / v92;
    sub_18D1A3CF0((uint64_t)v131, (uint64_t)v132, v96);
    sub_18D053AA8(v120, (uint64_t)v132);
  }
  else
  {
    LogLevel = cnprint::CNPrinter::GetLogLevel(v91);
    if (LogLevel <= 1)
    {
      v132[0] = 12;
      v131[0] = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v132, v131, "DevAtt,Cross product of two input body vectors is zero,%.3lf", v113, v114, v115, v116, v117, SLOBYTE(v92));
    }
  }
  return v65;
}

double sub_18D28E7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D1CB7D0(a2, a3, a1);
}

void sub_18D28E858(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D28E86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)a1 = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D0540FC(a2, a3, a1);
  return result;
}

void sub_18D28E8C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D28E8D8(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double result;

  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)a1 = &unk_1E25C78E0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D30BB60;
  sub_18D04BE88(a1, 0.0);
  v8 = *(_QWORD *)(a1 + 32);
  *(double *)(v8 + 8) = a4;
  *(double *)(v8 + 16) = -a3;
  v9 = *(int *)(a1 + 20);
  v10 = (double *)(v8 + 8 * v9);
  v10[2] = a2;
  *v10 = -*(double *)(v8 + 8);
  *(double *)(v8 + 16 * v9) = -*(double *)(v8 + 16);
  result = -v10[2];
  *(double *)(v8 + 8 * (int)((2 * v9) | 1)) = result;
  return result;
}

void raven::RavenDeviceAttitudeActiveObject::biermanObservationalUpdate3X3(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  char v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  char v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  __int16 v47;
  void *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  double v53[3];
  double v54[4];

  v54[3] = *(double *)MEMORY[0x1E0C80C00];
  v50 = 0x100000003;
  v48 = &unk_1E25C7790;
  v51 = &v52;
  v49 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v48, 0.0);
  v10 = 0;
  v11 = *(int *)(a2 + 20);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a1 + 812) + 1;
  v14 = *(double **)(a1 + 824);
  v15 = *(_QWORD *)(a3 + 32);
  v16 = *(_QWORD *)(a4 + 32);
  v17 = v51;
  v18 = (double *)(v12 - 8 * v11);
LABEL_2:
  v19 = 0;
  v20 = 0;
  v21 = -1;
  v22 = v18;
  do
  {
    v23 = *(double *)(v12 + 8 * (v10 + v20 * v11));
    if (v20)
    {
      v24 = v22;
      v25 = v21;
      do
      {
        v23 = v23 + *v24 * *(double *)(*(_QWORD *)(a1 + 1080) + v19 * *(int *)(a1 + 1068) + 8 * v25);
        v26 = v25-- + 1;
        v24 -= v11;
      }
      while (v26 > 1);
    }
    v54[v20] = v23;
    v53[v20] = v23 * v14[v13 * (int)v20];
    ++v20;
    ++v21;
    v19 += 8;
    v22 += v11;
  }
  while (v20 != 3);
  v27 = *(double *)(v15 + 8 * v10);
  v28 = v27 + v54[0] * v53[0];
  if (v28 <= 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v54) > 1)
      goto LABEL_19;
  }
  else
  {
    v29 = 0;
    v30 = 1.0 / v28;
    *v14 = v27 * (1.0 / v28) * *v14;
    v31 = 1;
    while (1)
    {
      v32 = v54[v31];
      v33 = v28 + v32 * v53[v31];
      if (v33 <= 0.0)
        break;
      v34 = v29;
      v35 = 0;
      v36 = -(v32 * v30);
      v30 = 1.0 / v33;
      v14[v13 * (int)v31] = v28 * (1.0 / v33) * v14[v13 * (int)v31];
      v37 = *(_QWORD *)(a1 + 1080) + 8 * *(_DWORD *)(a1 + 1068) * (int)v31;
      do
      {
        v38 = *(double *)(v37 + v35 * 8);
        v39 = v53[v35];
        *(double *)(v37 + v35 * 8) = v38 + v39 * v36;
        v53[v35++] = v39 + v53[v31] * v38;
      }
      while (v31 != v35);
      v29 = 1;
      v31 = 2;
      v28 = v33;
      if ((v34 & 1) != 0)
      {
        for (i = 0; i != 3; ++i)
          *(double *)&v17[i] = *(double *)&v17[i] + v30 * *(double *)(v16 + 8 * v10) * v53[i];
        ++v10;
        ++v18;
        if (v10 == 3)
        {
          sub_18D04DA0C(a5, (uint64_t)&v48);
          return;
        }
        goto LABEL_2;
      }
    }
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v54) > 1)
      goto LABEL_19;
  }
  v47 = 12;
  v46 = 1;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v47, &v46, "DevAtt,%uz: alpha <= 0, matrix ! positive definite", v41, v42, v43, v44, v45, v10);
LABEL_19:
  *(_QWORD *)(a5 + 24) = 0x100000003;
  *(_QWORD *)a5 = &unk_1E25C7790;
  *(_QWORD *)(a5 + 32) = a5 + 40;
  *(_OWORD *)(a5 + 8) = xmmword_18D313070;
  sub_18D04BE88(a5, 0.0);
}

double raven::RavenDeviceAttitudeActiveObject::ComputeMeanStdVector(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  char v5[4];
  __int128 v6;
  _BYTE v7[28];

  v5[0] = 0;
  v6 = 0u;
  memset(v7, 0, sizeof(v7));
  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0.0;
  do
    sub_18D1648E4((uint64_t)v5, v2++, 1.0);
  while (v2 != v3);
  return *(double *)&v7[4];
}

void raven::RavenDeviceAttitudeActiveObject::ComputePCABasedHorizontalDirectionOfTravelInIMUFrame(raven::RavenDeviceAttitudeActiveObject *this, const raven::TimeMarkEvent *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  cnprint::CNPrinter *v24;
  double v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  double v41;
  int8x16_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  int8x16_t v73;
  uint64_t v74;
  long double *v75;
  double v76;
  double *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  double v84;
  long double v85;
  __double2 *v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  int v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  int v102;
  double v103;
  uint64_t v104;
  _QWORD *v105;
  char v106;
  _BYTE v107[112];
  _BYTE v108[112];
  _BYTE v109[32];
  uint64_t *v110;
  uint64_t v111;
  int v112;
  void *v113;
  __int128 v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  void *v118;
  __int128 v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  _BYTE v123[64];
  _BYTE v124[64];
  _QWORD v125[14];
  double v126[4];
  void (**v127)(raven::HorizontalDOTInIMUFrameEvent *__hidden);
  double v128;
  __int128 v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  __int128 v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[32];
  long double *v149;
  double v150;
  double v151;
  double v152;
  double v153;
  _QWORD v154[4];
  char v155[16];
  int v156;
  long double *v157;
  void *v158;
  __int128 v159;
  uint64_t v160;
  __int128 *v161;
  __int128 v162;
  uint64_t v163;
  double v164[4];
  __int128 v165;
  __int128 v166;
  _QWORD v167[3];
  char v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int64x2_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int64x2_t v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  double v202;
  double v203;
  void *v204;
  __int128 v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  _BYTE v209[16];
  uint64_t v210;
  void *v211;
  __int128 v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  double v216;
  void *v217;
  __int128 v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;

  if (*((_BYTE *)this + 7328) && *((unsigned __int8 *)this + 7288) - 1 <= 1)
  {
    *((_OWORD *)this + 474) = xmmword_18D31CEA0;
    return;
  }
  if (*((_QWORD *)this + 989))
  {
    v6 = *((_QWORD *)this + 1042);
    if (v6)
    {
      v7 = *((_QWORD *)this + 1041) + v6;
      v8 = *((_QWORD *)this + 1038);
      v9 = (_QWORD *)(v8 + 8 * (v7 / 0x14));
      v10 = *v9 + 200 * (v7 % 0x14);
      if (*((_QWORD *)this + 1039) == v8)
        v11 = 0;
      else
        v11 = v10;
      if (v11 == *v9)
        v11 = *(v9 - 1) + 4000;
      v12 = CNTimeSpan::operator-((uint64_t)this + 7456, (_QWORD *)this + 917, a3, a4);
      *(double *)v14.i64 = v13;
      *(double *)v15.i64 = (double)v12;
      v16 = v13 + (double)v12;
      v17 = CNTimeSpan::operator-((uint64_t)this + 7456, (_QWORD *)this + 934, v14, v15);
      if (v16 >= (v18 + (double)v17) * 0.5)
      {
        v19 = v11 - 200;
        v127 = (void (**)(raven::HorizontalDOTInIMUFrameEvent *__hidden))(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
        v128 = v20;
        v184 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 200) + 16))(v11 - 200);
        v185 = v21;
        v24 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v127, &v184, v22, v23);
        if (v25 + (double)(uint64_t)v24 <= *(double *)(*((_QWORD *)this + 61) + 832))
        {
          v104 = v11;
          v105 = (_QWORD *)((char *)this + 7456);
          v26 = *((_QWORD *)this + 985);
          v27 = (_QWORD *)(v26 + 8 * (*((_QWORD *)this + 988) >> 4));
          v28 = *((_QWORD *)this + 986);
          if (v28 == v26)
            v29 = 0;
          else
            v29 = *v27 + 2432 * (*((_QWORD *)this + 988) & 0xFLL);
          v106 = 0;
          v30 = 1.79769313e308;
          v31 = v29;
          while (1)
          {
            v32 = v29;
            if (v28 == v26)
            {
              v34 = 0;
            }
            else
            {
              v33 = *((_QWORD *)this + 989) + *((_QWORD *)this + 988);
              v34 = *(_QWORD *)(v26 + ((v33 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 2432 * (v33 & 0xF);
            }
            if (v29 == v34)
              break;
            v29 += 2432;
            if (v32 + 2432 - *v27 == 38912)
            {
              v35 = v27[1];
              ++v27;
              v29 = v35;
            }
            v127 = (void (**)(raven::HorizontalDOTInIMUFrameEvent *__hidden))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
            v128 = v36;
            v184 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
            v185 = v37;
            v24 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v127, &v184, v38, v39);
            *(double *)v42.i64 = v41 + (double)(uint64_t)v24;
            if (*(double *)v42.i64 >= 0.0
              && *(_BYTE *)(v32 + 209) == 2
              && *(_BYTE *)(v32 + 1464)
              && *(_BYTE *)(v32 + 1624)
              && *(_BYTE *)(v32 + 1824)
              && *(_BYTE *)(v32 + 1345)
              && *(_BYTE *)(v32 + 1904))
            {
              *(double *)v40.i64 = (double)(uint64_t)v24;
              v24 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v105, (_QWORD *)(v32 + 1168), v42, v40);
              v44 = v43 + (double)(uint64_t)v24;
              v45 = fabs(v30);
              if (v45 < fabs(v44) && (v45 < 1.0 || v30 >= v44))
                break;
              v106 = 1;
            }
            else
            {
              v32 = v31;
              v44 = v30;
            }
            v26 = *((_QWORD *)this + 985);
            v28 = *((_QWORD *)this + 986);
            v31 = v32;
            v30 = v44;
          }
          if ((v106 & 1) != 0)
          {
            v219 = 0x100000003;
            v216 = 0.0;
            v217 = &unk_1E25C7790;
            v218 = xmmword_18D313070;
            v220 = &v221;
            v213 = 0x100000003;
            v211 = &unk_1E25C7790;
            v212 = xmmword_18D313070;
            v214 = &v215;
            if (raven::RavenDeviceAttitudeActiveObject::PCAForHorizontalDOTInIMUFrame())
            {
              sub_18D16AF50((uint64_t)v209, *(float64_t *)(v31 + 1272), *(float64_t *)(v31 + 1280), *(double *)(v31 + 1288));
              if (v209[8])
              {
                v206 = 0x300000003;
                v204 = &unk_1E25C78E0;
                v205 = xmmword_18D30BB60;
                v207 = &v208;
                sub_18D053AA8((uint64_t)&v204, (uint64_t)&v210);
                v186 = 0;
                v184 = &unk_1E25C35E8;
                v185 = 0;
                v187 = 0;
                v189 = 0;
                v188 = 0;
                v190 = 0;
                v192 = 0;
                v191 = 0;
                v193 = 0;
                v195 = 0;
                v194 = 0;
                v196 = vdupq_n_s64(0x7FF8000000000000uLL);
                v197 = v196;
                v198 = v196;
                v199 = 0x7FF8000000000000;
                v202 = 0.0;
                v201 = 0u;
                v200 = 0u;
                v203 = 1.0;
                v167[2] = 0;
                v167[0] = &unk_1E25C35E8;
                v167[1] = 0;
                v168 = 0;
                v170 = 0;
                v169 = 0;
                v171 = 0;
                v173 = 0;
                v172 = 0;
                v174 = 0;
                v176 = 0;
                v175 = 0;
                v177 = v196;
                v178 = v196;
                v179 = v196;
                v180 = 0x7FF8000000000000;
                *(_QWORD *)&v183 = 0;
                v182 = 0u;
                v181 = 0u;
                *((_QWORD *)&v183 + 1) = 0x3FF0000000000000;
                if (raven::RavenDeviceAttitudeActiveObject::GetDAEFromQueueForInputTime(this, (_QWORD *)(v31 + 1168), (uint64_t)&v184))
                {
                  if (raven::RavenDeviceAttitudeActiveObject::GetDAEFromQueueForInputTime(this, v105, (uint64_t)v167))
                  {
                    v165 = v182;
                    v166 = v183;
                    v46 = sqrt(*((double *)&v201 + 1) * *((double *)&v201 + 1)+ *(double *)&v201 * *(double *)&v201+ v202 * v202+ v203 * v203);
                    v47 = 1.0;
                    v48 = 0.0;
                    v49 = 0.0;
                    v50 = 0.0;
                    v51 = 0.0;
                    v52 = 1.0;
                    if (fabs(v46) >= 2.22044605e-16)
                    {
                      v49 = -*(double *)&v201 / v46;
                      v50 = -*((double *)&v201 + 1) / v46;
                      v51 = -v202 / v46;
                      v52 = v203 / v46;
                    }
                    v127 = *(void (***)(raven::HorizontalDOTInIMUFrameEvent *__hidden))&v49;
                    v128 = v50;
                    *(double *)&v129 = v51;
                    *((double *)&v129 + 1) = v52;
                    cnrotation::Cat((double *)&v165, (const cnrotation::CNRotation *)&v127, v164);
                    v160 = 0x100000003;
                    v158 = &unk_1E25C7790;
                    v159 = xmmword_18D313070;
                    v161 = &v162;
                    v162 = *(_OWORD *)(v31 + 1360);
                    v163 = *(_QWORD *)(v31 + 1376);
                    sub_18D192C7C((uint64_t)&v204, (uint64_t)&v158, (uint64_t)v155);
                    v53 = *(double *)(v31 + 1632);
                    v54 = *(double *)(v31 + 1640);
                    v55 = *(double *)(v31 + 1648);
                    v56 = *(double *)(v31 + 1656);
                    v57 = sqrt(v54 * v54 + v53 * v53 + v55 * v55 + v56 * v56);
                    v58 = 0.0;
                    v59 = 0.0;
                    if (fabs(v57) >= 2.22044605e-16)
                    {
                      v48 = v53 / v57;
                      v58 = v54 / v57;
                      v59 = v55 / v57;
                      v47 = v56 / v57;
                    }
                    *(double *)v154 = v48;
                    *(double *)&v154[1] = v58;
                    *(double *)&v154[2] = v59;
                    *(double *)&v154[3] = v47;
                    cnrotation::Cat(v164, (const cnrotation::CNRotation *)v154, &v150);
                    v60 = sqrt(v151 * v151 + v150 * v150 + v152 * v152 + v153 * v153);
                    if (fabs(v60) >= 2.22044605e-16)
                    {
                      v62 = -v150 / v60;
                      v63 = -v151 / v60;
                      v64 = -v152 / v60;
                      v61 = v153 / v60;
                    }
                    else
                    {
                      v61 = 1.0;
                      v62 = 0.0;
                      v63 = 0.0;
                      v64 = 0.0;
                    }
                    *(double *)v125 = v62;
                    *(double *)&v125[1] = v63;
                    *(double *)&v125[2] = v64;
                    *(double *)&v125[3] = v61;
                    sub_18D162AB8((cnrotation::CNRotation *)v125, (uint64_t)&v217, (uint64_t)v109);
                    sub_18D166008((uint64_t)&v204, (uint64_t)v109, (uint64_t)&v127);
                    sub_18D1636E4((uint64_t)v148, (uint64_t)&v127);
                    v74 = v156;
                    if (v156 >= 1)
                    {
                      v75 = v157;
                      v76 = 0.0;
                      v77 = v149;
                      do
                      {
                        v78 = *v75++;
                        v79 = v78;
                        v80 = *v77++;
                        v76 = v76 + v79 * v80;
                        --v74;
                      }
                      while (v74);
                      if (v76 < 0.0)
                      {
                        sub_18D290E78((uint64_t)&v127, (uint64_t)&v217);
                        sub_18D053AA8((uint64_t)&v217, (uint64_t)&v127);
                        sub_18D290E78((uint64_t)&v127, (uint64_t)v148);
                        v72 = sub_18D053AA8((uint64_t)v148, (uint64_t)&v127);
                      }
                    }
                    v72.n128_f64[0] = v216;
                    v73.i64[0] = 1.0;
                    v81 = 1.0 - v216;
                    v82 = *(_QWORD *)(v31 + 224);
                    if (v82 < 0 || (v72.n128_u64[0] = *(_QWORD *)(v31 + 232), v72.n128_f64[0] < 0.0))
                      v82 = CNTimeSpan::operator-((double *)(v31 + 224), (int8x16_t)v72, v73);
                    else
                      v83 = *(double *)(v31 + 232);
                    v84 = v81 * 40.0 + 10.0;
                    if ((double)v82 + v83 <= 30.0)
                      goto LABEL_64;
                    v85 = atan2(*v157, v157[1]) * 57.2957795;
                    v86 = (__double2 *)v149;
                    v87 = atan2(*v149, v149[1]) * 57.2957795;
                    v88 = v87 - v85 - round((v87 - v85) / 360.0) * 360.0;
                    if (fabs(v88) > 45.0 || v84 <= 0.0)
                      return;
                    v89 = *((double *)this + 949);
                    v90 = v89 / (v84 * v84 + v89);
                    v91 = fmod(*((double *)this + 948) + v90 * (v88 - *((double *)this + 948)), 360.0);
                    *((double *)this + 948) = v91;
                    v92 = v89 * (1.0 - v90);
                    *((double *)this + 949) = v92;
                    if (v92 <= 30.0)
                    {
                      *((_QWORD *)this + 949) = 0x403E000000000000;
                      *v86 = __sincos_stret((v87 - v91) * 0.0174532925);
                      sub_18D16606C((uint64_t)&v204, (uint64_t)v109);
                      sub_18D192C7C((uint64_t)v109, (uint64_t)v148, (uint64_t)v125);
                      sub_18D162AB8((cnrotation::CNRotation *)&v150, (uint64_t)v125, (uint64_t)&v127);
                      sub_18D053AA8((uint64_t)&v217, (uint64_t)&v127);
                      v93 = 1;
                    }
                    else
                    {
LABEL_64:
                      v93 = 0;
                    }
                    *(_OWORD *)((char *)this + 7336) = *(_OWORD *)v105;
                    v130 = 0x300000003;
                    v127 = &off_1E25C37C0;
                    v128 = COERCE_DOUBLE(&unk_1E25C78E0);
                    v129 = xmmword_18D30BB60;
                    v134 = 0;
                    v131 = &v132;
                    v133 = 0;
                    LOBYTE(v135) = 0;
                    *(_QWORD *)&v136 = 0;
                    *((_QWORD *)&v135 + 1) = 0;
                    BYTE8(v136) = 0;
                    v137 = 0uLL;
                    LOBYTE(v138) = 0;
                    v139 = 0;
                    *((_QWORD *)&v138 + 1) = 0;
                    v143 = 0x100000003;
                    v140 = 0x7FF8000000000000;
                    v141 = &unk_1E25C7790;
                    v142 = xmmword_18D313070;
                    v146 = 0uLL;
                    *(_QWORD *)&v147 = 0;
                    v144 = &v145;
                    *((_QWORD *)&v147 + 1) = 0x3FF0000000000000;
                    v94 = sqrt(*((double *)&v165 + 1) * *((double *)&v165 + 1)+ *(double *)&v165 * *(double *)&v165+ *(double *)&v166 * *(double *)&v166+ *((double *)&v166 + 1) * *((double *)&v166 + 1));
                    if (fabs(v94) >= 2.22044605e-16)
                    {
                      v96 = -*(double *)&v165 / v94;
                      v97 = -*((double *)&v165 + 1) / v94;
                      v98 = -*(double *)&v166 / v94;
                      v95 = *((double *)&v166 + 1) / v94;
                    }
                    else
                    {
                      v95 = 1.0;
                      v96 = 0.0;
                      v97 = 0.0;
                      v98 = 0.0;
                    }
                    *(double *)v109 = v96;
                    *(double *)&v109[8] = v97;
                    *(double *)&v109[16] = v98;
                    *(double *)&v109[24] = v95;
                    cnrotation::Cat((double *)(v104 - 32), (const cnrotation::CNRotation *)v109, v126);
                    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
                    v138 = 0u;
                    v137 = 0u;
                    v136 = 0u;
                    v135 = 0u;
                    v133 = v99;
                    v134 = v100;
                    v139 = 0;
                    v140 = 0x7FF8000000000000;
                    sub_18D162AB8((cnrotation::CNRotation *)v126, (uint64_t)&v217, (uint64_t)v109);
                    sub_18D053AA8((uint64_t)&v141, (uint64_t)v109);
                    sub_18D162AB8((cnrotation::CNRotation *)v126, (uint64_t)&v211, (uint64_t)v125);
                    cnrotation::Cat(v126, (const cnrotation::CNRotation *)&v150, (double *)v109);
                    v146 = *(_OWORD *)v109;
                    v147 = *(_OWORD *)&v109[16];
                    if (!v93)
                      v84 = v84 + 40.0;
                    sub_18D290EE4((uint64_t)v109, (uint64_t)v125);
                    sub_18D1636E4((uint64_t)v124, (uint64_t)v109);
                    sub_18D28E7FC((uint64_t)v123, (uint64_t)v124, (uint64_t)&v141);
                    v120 = 0x300000003;
                    v118 = &unk_1E25C78E0;
                    v121 = &v122;
                    v119 = xmmword_18D30BB60;
                    sub_18D04BE88((uint64_t)&v118, 0.0);
                    v101 = v121;
                    *v121 = 0x4028000000000000;
                    v102 = HIDWORD(v119);
                    v101[2 * HIDWORD(v119) + 2] = 0x4028000000000000;
                    *(double *)&v101[v102 + 1] = v84 * 0.0174532925 * (v84 * 0.0174532925);
                    LOBYTE(v101) = atomic_load((unsigned __int8 *)&qword_1ECF24228);
                    if ((v101 & 1) == 0)
                    {
                      if (__cxa_guard_acquire(&qword_1ECF24228))
                      {
                        *(_QWORD *)&v109[24] = 0x300000001;
                        *(_QWORD *)v109 = &unk_1E25C6C50;
                        v110 = &v111;
                        *(_OWORD *)&v109[8] = xmmword_18D314670;
                        v111 = 0x100000000;
                        v112 = 2;
                        sub_18D16169C((uint64_t)v109, (uint64_t)&unk_1ECF24278);
                        __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF24278, &dword_18D038000);
                        __cxa_guard_release(&qword_1ECF24228);
                      }
                    }
                    v115 = 0x300000003;
                    v113 = &unk_1E25C78E0;
                    v114 = xmmword_18D30BB60;
                    v116 = &v117;
                    sub_18D186BA8((uint64_t)&v141, (uint64_t)v108);
                    sub_18D290F4C((uint64_t)v109, (uint64_t)&v113, 0);
                    sub_18D16193C((uint64_t)v109, (uint64_t)v108);
                    sub_18D186BA8((uint64_t)v123, (uint64_t)v108);
                    sub_18D290F4C((uint64_t)v109, (uint64_t)&v113, 1);
                    sub_18D16193C((uint64_t)v109, (uint64_t)v108);
                    sub_18D186BA8((uint64_t)v124, (uint64_t)v108);
                    sub_18D290F4C((uint64_t)v109, (uint64_t)&v113, 2);
                    sub_18D16193C((uint64_t)v109, (uint64_t)v108);
                    sub_18D166008((uint64_t)&v113, (uint64_t)&v118, (uint64_t)v108);
                    sub_18D16606C((uint64_t)&v113, (uint64_t)v107);
                    sub_18D166008((uint64_t)v108, (uint64_t)v107, (uint64_t)v109);
                    sub_18D053AA8((uint64_t)&v128, (uint64_t)v109);
                    sub_18D290FA4((uint64_t)this, (uint64_t)&v127);
                  }
                }
              }
            }
          }
          else if (!cnprint::CNPrinter::GetLogLevel(v24))
          {
            LOWORD(v127) = 12;
            LOBYTE(v184) = 0;
            v65 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
            v103 = v66 + (double)v65;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v127, (unsigned __int8 *)&v184, "t,%.3lf No applicable PNT solution found for PCA HDOT", v67, v68, v69, v70, v71, SLOBYTE(v103));
          }
        }
      }
    }
  }
}

void sub_18D28FA0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF24228);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenDeviceAttitudeActiveObject::PCAForHorizontalDOTInIMUFrame()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  _QWORD *v13;
  int DAEFromQueueForInputTime;
  uint64_t result;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  __n128 v35;
  int8x16_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float64x2_t v50;
  uint64_t v51;
  double *v52;
  double *v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  float64x2_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t *v64;
  int v65;
  int v66;
  int i;
  unint64_t v68;
  double v69;
  uint64_t v70;
  double v71;
  float64x2_t v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  uint64_t v78;
  double *v79;
  double v80;
  double *v81;
  double v82;
  double v83;
  double v84;
  void **v85;
  double *v86;
  _QWORD *v87;
  double *v88;
  void *v89;
  __int128 v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE v93[72];
  void *v94;
  __int128 v95;
  uint64_t v96;
  float64x2_t *v97;
  float64x2_t v98;
  double v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  __int128 *v103;
  __int128 v104;
  uint64_t v105;
  void *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  void *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD v118[3];
  void *v119;
  __int128 v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE v123[72];
  void *v124;
  __int128 v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  double v129;
  double v130;
  double v131;
  double v132;
  void *v133;
  __int128 v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE v137[72];
  void *v138;
  __int128 v139;
  uint64_t v140;
  double *v141;
  uint64_t v142;
  double v143[4];
  void *v144;
  __int128 v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  _BYTE v149[65];
  void *v150;
  __int128 v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  double v155[4];
  _QWORD v156[3];
  char v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  double v172;
  double v173;
  _QWORD v174[4];
  void *v175;
  __int128 v176;
  uint64_t v177;
  double *v178;
  uint64_t v179;
  _OWORD v180[2];
  _QWORD v181[3];
  char v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  int64x2_t v191;
  int64x2_t v192;
  int64x2_t v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  double v198;
  __int128 v199;
  uint64_t v200;
  double *v201;
  _BYTE v202[3888];
  double v203;
  __int128 v204;
  uint64_t v205;
  _BYTE *v206;
  _BYTE v207[72];
  void *v208;
  __int128 v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v0;
  v181[2] = 0;
  v181[0] = &unk_1E25C35E8;
  v181[1] = 0;
  v182 = 0;
  v184 = 0;
  v183 = 0;
  v185 = 0;
  v187 = 0;
  v186 = 0;
  v188 = 0;
  v190 = 0;
  v189 = 0;
  v191 = vdupq_n_s64(0x7FF8000000000000uLL);
  v192 = v191;
  v193 = v191;
  v194 = 0x7FF8000000000000;
  *(_QWORD *)&v197 = 0;
  v196 = 0u;
  v195 = 0u;
  *((_QWORD *)&v197 + 1) = 0x3FF0000000000000;
  DAEFromQueueForInputTime = raven::RavenDeviceAttitudeActiveObject::GetDAEFromQueueForInputTime(v0, v9, (uint64_t)v181);
  result = 0;
  if (!DAEFromQueueForInputTime)
    return result;
  v180[0] = v196;
  v180[1] = v197;
  v177 = 0x100000003;
  v175 = &unk_1E25C7790;
  v176 = xmmword_18D313070;
  v178 = (double *)&v179;
  v16 = *(double *)(v8 + 464);
  v17 = *(double *)(v8 + 472);
  v18 = *(double *)(v8 + 480);
  v19 = *(double *)(v8 + 488);
  v20 = sqrt(v17 * v17 + v16 * v16 + v18 * v18 + v19 * v19);
  if (fabs(v20) >= 2.22044605e-16)
  {
    v22 = v16 / v20;
    v23 = v17 / v20;
    v24 = v18 / v20;
    v21 = v19 / v20;
  }
  else
  {
    v21 = 1.0;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
  }
  *(double *)v174 = v22;
  *(double *)&v174[1] = v23;
  *(double *)&v174[2] = v24;
  *(double *)&v174[3] = v21;
  v156[2] = 0;
  v156[0] = &unk_1E25C35E8;
  v156[1] = 0;
  v157 = 0;
  v159 = 0;
  v158 = 0;
  v160 = 0;
  v162 = 0;
  v161 = 0;
  v163 = 0;
  v165 = 0;
  v164 = 0;
  v166 = vdupq_n_s64(0x7FF8000000000000uLL);
  v167 = v166;
  v168 = v166;
  v169 = 0x7FF8000000000000;
  v172 = 0.0;
  v171 = 0u;
  v170 = 0u;
  v173 = 1.0;
  v25 = raven::RavenDeviceAttitudeActiveObject::GetDAEFromQueueForInputTime(v13, (_QWORD *)v8, (uint64_t)v156);
  result = 0;
  if (!v25)
    return result;
  v26 = sqrt(*((double *)&v171 + 1) * *((double *)&v171 + 1)+ *(double *)&v171 * *(double *)&v171+ v172 * v172+ v173 * v173);
  if (fabs(v26) >= 2.22044605e-16)
  {
    v28 = -*(double *)&v171 / v26;
    v29 = -*((double *)&v171 + 1) / v26;
    v30 = -v172 / v26;
    v27 = v173 / v26;
  }
  else
  {
    v27 = 1.0;
    v28 = 0.0;
    v29 = 0.0;
    v30 = 0.0;
  }
  v198 = v28;
  *(double *)&v199 = v29;
  *((double *)&v199 + 1) = v30;
  v200 = *(_QWORD *)&v27;
  cnrotation::Cat((double *)v180, (const cnrotation::CNRotation *)&v198, v155);
  v152 = 0x100000003;
  v150 = &unk_1E25C7790;
  v153 = &v154;
  v151 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v150, 0.0);
  v153[2] = 0xC0239D013A92A305;
  sub_18D04DDF4((uint64_t)v149, *(float64_t *)(v8 + 104), *(float64_t *)(v8 + 112), *(double *)(v8 + 120));
  if (!v149[8])
    return 0;
  v88 = v12;
  v146 = 0x100000003;
  v144 = &unk_1E25C7790;
  v145 = xmmword_18D313070;
  v147 = &v148;
  sub_18D294698((uint64_t)v149, (uint64_t)&v150, (uint64_t)&v144);
  cnrotation::Cat(v155, (const cnrotation::CNRotation *)v174, v143);
  sub_18D162AB8((cnrotation::CNRotation *)v143, (uint64_t)&v144, (uint64_t)&v198);
  sub_18D053AA8((uint64_t)&v175, (uint64_t)&v198);
  v205 = 0x100000003;
  v203 = COERCE_DOUBLE(&unk_1E25C7790);
  v204 = xmmword_18D313070;
  v206 = v207;
  v200 = 0x100000134;
  v198 = COERCE_DOUBLE(&unk_1E25C7640);
  v199 = xmmword_18D3130C0;
  v201 = (double *)v202;
  v135 = 0x100000003;
  v133 = &unk_1E25C7790;
  v134 = xmmword_18D313070;
  v136 = v137;
  sub_18D159EE0((uint64_t)&v175, (uint64_t)&v203, (uint64_t)&v198, (uint64_t)&v133, "2");
  if (v31 <= 0.000000015)
    return 0;
  v86 = v4;
  v32 = 1.0 / v31;
  v33 = v178;
  v34 = *(double **)(v2 + 32);
  *v34 = v32 * *v178;
  v34[1] = v32 * v33[1];
  v34[2] = v32 * v33[2];
  v140 = 0x100000003;
  v138 = &unk_1E25C7790;
  v141 = (double *)&v142;
  v139 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v138, 0.0);
  v135 = 0x300000003;
  v133 = &unk_1E25C78E0;
  v136 = v137;
  v134 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v133, 0.0);
  v37 = v13[1038];
  v87 = v13;
  if (v13[1039] == v37
    || (v38 = v13[1041],
        v39 = *(_QWORD *)(v37 + 8 * (v38 / 0x14)) + 200 * (v38 % 0x14),
        v40 = *(_QWORD *)(v37 + 8 * ((v13[1042] + v38) / 0x14)) + 200 * ((v13[1042] + v38) % 0x14),
        v39 == v40))
  {
    v41 = 0;
  }
  else
  {
    v41 = 0;
    v42 = (_QWORD *)(v37 + 8 * (v38 / 0x14));
    do
    {
      v198 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t))(*(_QWORD *)v39 + 16))(v39));
      *(_QWORD *)&v199 = v43;
      if (!sub_18D03FE4C(&v198, v88))
      {
        v198 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t))(*(_QWORD *)v39 + 16))(v39));
        *(_QWORD *)&v199 = v44;
        if (sub_18D03F608(&v198, v10))
          break;
        v102 = 0x100000003;
        v100 = &unk_1E25C7790;
        v101 = xmmword_18D313070;
        v103 = &v104;
        v104 = *(_OWORD *)(v39 + 128);
        v105 = *(_QWORD *)(v39 + 144);
        cnrotation::Inv((float64x2_t *)(v39 + 168), (float64x2_t *)&v198);
        cnrotation::Cat((double *)v180, (const cnrotation::CNRotation *)&v198, &v129);
        v96 = 0x100000003;
        v94 = &unk_1E25C7790;
        v95 = xmmword_18D313070;
        v97 = &v98;
        v98 = vmlaq_f64(vnegq_f64(*(float64x2_t *)(v8 + 664)), vaddq_f64(*(float64x2_t *)(v39 + 128), *(float64x2_t *)(v39 + 104)), *(float64x2_t *)(v8 + 744));
        v99 = -(*(double *)(v8 + 680) - *(double *)(v8 + 760) * (*(double *)(v39 + 144) + *(double *)(v39 + 120)));
        v45 = sqrt(v130 * v130 + v129 * v129 + v131 * v131 + v132 * v132);
        if (fabs(v45) >= 2.22044605e-16)
        {
          v47 = -v129 / v45;
          v48 = -v130 / v45;
          v49 = -v131 / v45;
          v46 = v132 / v45;
        }
        else
        {
          v46 = 1.0;
          v47 = 0.0;
          v48 = 0.0;
          v49 = 0.0;
        }
        v203 = v47;
        *(double *)&v204 = v48;
        *((double *)&v204 + 1) = v49;
        v205 = *(_QWORD *)&v46;
        sub_18D162AB8((cnrotation::CNRotation *)&v203, v2, (uint64_t)&v198);
        v51 = DWORD2(v95);
        if (SDWORD2(v95) < 1)
        {
          v50.f64[0] = 0.0;
        }
        else
        {
          v52 = (double *)v97;
          v50.f64[0] = 0.0;
          v53 = v201;
          do
          {
            v54 = *v52++;
            v55 = v54;
            v56 = *v53++;
            v50.f64[0] = v50.f64[0] + v55 * v56;
            --v51;
          }
          while (v51);
        }
        v205 = 0x300000003;
        v203 = COERCE_DOUBLE(&unk_1E25C78E0);
        v204 = xmmword_18D30BB60;
        v206 = v207;
        sub_18D064EF4((uint64_t)&v198, (uint64_t)&v203, v50);
        v91 = 0x100000003;
        v89 = &unk_1E25C7790;
        v90 = xmmword_18D313070;
        v92 = v93;
        sub_18D0540FC((uint64_t)&v94, (uint64_t)&v203, (uint64_t)&v89);
        sub_18D162AB8((cnrotation::CNRotation *)&v129, (uint64_t)&v89, (uint64_t)&v203);
        sub_18D1636E4((uint64_t)&v208, (uint64_t)&v203);
        v126 = 0x100000003;
        v124 = &unk_1E25C7790;
        v125 = xmmword_18D313070;
        v127 = &v128;
        v58 = sub_18D0540FC(v57, (uint64_t)&v138, (uint64_t)&v124);
        ++v41;
        v121 = 0x100000003;
        v119 = &unk_1E25C7790;
        v58.f64[0] = 1.0 / (double)v41;
        v120 = xmmword_18D313070;
        v122 = v123;
        sub_18D064EF4((uint64_t)&v124, (uint64_t)&v119, v58);
        v205 = 0x100000003;
        v203 = COERCE_DOUBLE(&unk_1E25C7790);
        v204 = xmmword_18D313070;
        v206 = v207;
        sub_18D053FA4((uint64_t)&v138, (uint64_t)&v119, (uint64_t)&v203);
        sub_18D053AA8((uint64_t)&v138, (uint64_t)&v203);
        v108 = 0x100000003;
        v106 = &unk_1E25C7790;
        v107 = xmmword_18D313070;
        v109 = &v110;
        sub_18D0540FC((uint64_t)&v208, (uint64_t)&v138, (uint64_t)&v106);
        v59 = DWORD1(v107);
        v60 = v107;
        v116 = 0x300000001;
        v111 = &unk_1E25C6C20;
        v117 = v118;
        v112 = DWORD1(v107);
        v113 = v107;
        v114 = v107 * DWORD1(v107);
        v115 = DWORD1(v107);
        if (DWORD1(v107))
        {
          v61 = 0;
          v62 = 0;
          v63 = HIDWORD(v107);
          v64 = v109;
          do
          {
            v65 = v61;
            v66 = v62;
            for (i = v60; i; --i)
            {
              v118[v66] = v64[v65];
              v66 += v59;
              ++v65;
            }
            ++v62;
            v61 += v63;
          }
          while (v62 != v59);
        }
        v121 = 0x300000003;
        v119 = &unk_1E25C78E0;
        v120 = xmmword_18D30BB60;
        v122 = v123;
        sub_18D053B2C((uint64_t)&v124, (uint64_t)&v111, (uint64_t)&v119);
        v205 = 0x300000003;
        v203 = COERCE_DOUBLE(&unk_1E25C78E0);
        v204 = xmmword_18D30BB60;
        v206 = v207;
        sub_18D053FA4((uint64_t)&v133, (uint64_t)&v119, (uint64_t)&v203);
        v35 = sub_18D053AA8((uint64_t)&v133, (uint64_t)&v203);
      }
      v39 += 200;
      if (v39 - *v42 == 4000)
      {
        v68 = v42[1];
        ++v42;
        v39 = v68;
      }
    }
    while (v39 != v40);
  }
  v69 = (double)v41;
  v70 = CNTimeSpan::operator-((uint64_t)(v87 + 932), v87 + 934, (int8x16_t)v35, v36);
  v72.f64[0] = (v71 + (double)v70) * 0.7 / *(double *)(v87[61] + 648);
  if (v72.f64[0] < 4.0)
    v72.f64[0] = 4.0;
  if (v72.f64[0] > v69)
    return 0;
  v121 = 0x300000003;
  v119 = &unk_1E25C78E0;
  v120 = xmmword_18D30BB60;
  v122 = v123;
  v72.f64[0] = 1.0 / (v69 + -1.0);
  sub_18D064EF4((uint64_t)&v133, (uint64_t)&v119, v72);
  v102 = 0x300000003;
  v100 = &unk_1E25C78E0;
  v101 = xmmword_18D30BB60;
  v103 = &v104;
  v96 = 0x300000003;
  v94 = &unk_1E25C78E0;
  v97 = &v98;
  v95 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v94, 0.0);
  v91 = 0x300000003;
  v89 = &unk_1E25C78E0;
  v90 = xmmword_18D30BB60;
  v92 = v93;
  v205 = 0x300000003;
  v203 = COERCE_DOUBLE(&unk_1E25C78E0);
  *(_QWORD *)&v204 = v120;
  DWORD2(v204) = DWORD1(v120) * v120;
  HIDWORD(v204) = v120;
  v206 = v207;
  v200 = 0x1000001E6;
  v198 = COERCE_DOUBLE(&unk_1E25C7C10);
  v199 = xmmword_18D319190;
  v201 = (double *)v202;
  sub_18D29A7A8((uint64_t)&v119, (uint64_t)&v203, (uint64_t)&v198, (uint64_t)&v100, (uint64_t)&v94, (uint64_t)&v89);
  v73 = v97->f64[0];
  v74 = v97->f64[SHIDWORD(v95) + 1];
  v205 = 0x100000003;
  v203 = COERCE_DOUBLE(&unk_1E25C7790);
  v204 = xmmword_18D313070;
  v206 = v207;
  v200 = 0x100000134;
  v198 = COERCE_DOUBLE(&unk_1E25C7640);
  v199 = xmmword_18D3130C0;
  v201 = (double *)v202;
  v210 = 0x100000003;
  v208 = &unk_1E25C7790;
  v209 = xmmword_18D313070;
  v211 = &v212;
  sub_18D159EE0((uint64_t)&v138, (uint64_t)&v203, (uint64_t)&v198, (uint64_t)&v208, "2");
  v75 = v87[61];
  if (v76 >= *(double *)(v75 + 992))
  {
    if (fabs(v73) < 2.22044605e-16)
      return 0;
  }
  else
  {
    result = 0;
    if (sqrt(v73) < *(double *)(v75 + 1000) || fabs(v73) < 2.22044605e-16)
      return result;
  }
  v77 = v73 / (v73 + v74);
  *v86 = v77;
  if (v77 < 0.7)
    return 0;
  sub_18D1AFFC0(":", (uint64_t)&v89, 0, (uint64_t)&v198);
  v78 = DWORD2(v139);
  if (*(uint64_t *)((char *)&v139 + 4) <= 0)
    goto LABEL_51;
  v79 = v141;
  v80 = 0.0;
  v81 = v201;
  do
  {
    v82 = *v79++;
    v83 = v82;
    v84 = *v81++;
    v80 = v80 + v83 * v84;
    --v78;
  }
  while (v78);
  if (v80 >= 0.0)
  {
LABEL_51:
    sub_18D1AFFC0(":", (uint64_t)&v89, 0, (uint64_t)&v198);
    v85 = (void **)&v198;
  }
  else
  {
    sub_18D1AFFC0(":", (uint64_t)&v89, 0, (uint64_t)&v198);
    sub_18D290E78((uint64_t)&v203, (uint64_t)&v198);
    v85 = (void **)&v203;
  }
  sub_18D053AA8(v6, (uint64_t)v85);
  return 1;
}

uint64_t raven::RavenDeviceAttitudeActiveObject::GetDAEFromQueueForInputTime(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  double v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  double v46;
  int8x16_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  double v55;
  int8x16_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v70;
  uint64_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  double v75;
  int8x16_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  double v83;
  int8x16_t v84;
  BOOL v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;

  v6 = a1[1041] + a1[1042];
  v7 = a1[1038];
  v8 = (uint64_t *)(v7 + 8 * (v6 / 0x14));
  v9 = *v8;
  v10 = *v8 + 200 * (v6 % 0x14);
  if (a1[1039] == v7)
    v10 = 0;
  v11 = v10 - v9;
  v12 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v10 - v9) >> 3);
  if (v11 < 201)
  {
    v16 = 20 - v12;
    v14 = &v8[-(v16 / 0x14)];
    v15 = *v14 + 200 * (20 * (v16 / 0x14) - v16) + 3800;
  }
  else
  {
    v13 = v12 - 1;
    v14 = &v8[v13 / 0x14];
    v15 = *v14 + 200 * (v13 % 0x14);
  }
  v98 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 16))(v15);
  v99 = v17;
  v20 = CNTimeSpan::operator-((uint64_t)&v98, a2, v18, v19);
  v22 = llround((v21 + (double)v20) / *(double *)(a1[61] + 648));
  if ((v22 & 0x80000000) != 0 || (signed int)v22 >= *((_DWORD *)a1 + 2084))
    return 0;
  v93 = a3;
  if (v22)
  {
    v23 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v15 - *v14) >> 3) - v22;
    if ((uint64_t)v23 < 1)
    {
      v25 = 19 - v23;
      v14 -= v25 / 0x14;
      v15 = *v14 + 200 * (20 * (v25 / 0x14) - v25) + 3800;
    }
    else
    {
      v14 += v23 / 0x14;
      v15 = *v14 + 200 * (v23 % 0x14);
    }
  }
  v26 = 0;
  while (1)
  {
    v27 = v26;
    v28 = v15;
    v29 = v14;
    v30 = a1[1038];
    v31 = a1[1041];
    v32 = (uint64_t *)(v30 + 8 * (v31 / 0x14));
    v33 = *v32;
    v34 = *v32 + 200 * (v31 % 0x14);
    v35 = a1[1039] == v30 ? 0 : v34;
    v36 = v35 - v33;
    v37 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v35 - v33) >> 3);
    if (v36 < -199)
    {
      v41 = 18 - v37;
      v39 = &v32[-(v41 / 0x14)];
      v40 = *v39 + 200 * (20 * (v41 / 0x14) - v41) + 3800;
    }
    else
    {
      v38 = v37 + 1;
      v39 = &v32[v38 / 0x14];
      v40 = *v39 + 200 * (v38 % 0x14);
    }
    if (v39 >= v14 && (v39 != v14 || v40 >= v15))
      break;
    if (*v14 == v15)
    {
      --v14;
      v15 = *(v29 - 1) + 4000;
    }
    v96 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 16))(v28);
    v97 = v42;
    *(double *)v45.i64 = (double)CNTimeSpan::operator-((uint64_t)&v96, a2, v43, v44);
    *(double *)v47.i64 = fabs(v46 + *(double *)v45.i64);
    v98 = 0;
    v99 = 0.0;
    CNTimeSpan::SetTimeSpan(&v98, 0, v47, v45);
    v48 = v98;
    v49 = v99;
    v50 = *(_QWORD *)(v15 - 200);
    v15 -= 200;
    v94 = (*(uint64_t (**)(unint64_t))(v50 + 16))(v15);
    v95 = v51;
    *(double *)v54.i64 = (double)CNTimeSpan::operator-((uint64_t)&v94, a2, v52, v53);
    *(double *)v56.i64 = fabs(v55 + *(double *)v54.i64);
    v98 = 0;
    v99 = 0.0;
    CNTimeSpan::SetTimeSpan(&v98, 0, v56, v54);
    if (v48 || (*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if ((v98 || (*(_QWORD *)&v99 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v48 != v98)
      {
        v26 = 1;
        if (v48 <= v98)
          break;
      }
      else
      {
        v26 = 1;
        if (v49 <= v99)
          break;
      }
    }
    else
    {
      v26 = 1;
      if (v49 <= v99)
        break;
    }
  }
  if ((v27 & 1) != 0)
  {
    v57 = v28;
  }
  else
  {
    do
    {
      v57 = v28;
      v58 = a1[1041] + a1[1042];
      v59 = a1[1038];
      v60 = (uint64_t *)(v59 + 8 * (v58 / 0x14));
      v61 = *v60;
      v62 = *v60 + 200 * (v58 % 0x14);
      if (a1[1039] == v59)
        v62 = 0;
      v63 = v62 - v61;
      v64 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v62 - v61) >> 3);
      if (v63 < 201)
      {
        v68 = 20 - v64;
        v66 = &v60[-(v68 / 0x14)];
        v67 = *v66 + 200 * (20 * (v68 / 0x14) - v68) + 3800;
      }
      else
      {
        v65 = v64 - 1;
        v66 = &v60[v65 / 0x14];
        v67 = *v66 + 200 * (v65 % 0x14);
      }
      if (v29 >= v66 && (v29 != v66 || v28 >= v67))
        break;
      v28 += 200;
      if (v57 + 200 - *v29 == 4000)
      {
        v70 = v29[1];
        ++v29;
        v28 = v70;
      }
      v96 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v57 + 16))(v57);
      v97 = v71;
      *(double *)v74.i64 = (double)CNTimeSpan::operator-((uint64_t)&v96, a2, v72, v73);
      *(double *)v76.i64 = fabs(v75 + *(double *)v74.i64);
      v98 = 0;
      v99 = 0.0;
      CNTimeSpan::SetTimeSpan(&v98, 0, v76, v74);
      v77 = v98;
      v78 = v99;
      v94 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 16))(v28);
      v95 = v79;
      *(double *)v82.i64 = (double)CNTimeSpan::operator-((uint64_t)&v94, a2, v80, v81);
      *(double *)v84.i64 = fabs(v83 + *(double *)v82.i64);
      v98 = 0;
      v99 = 0.0;
      CNTimeSpan::SetTimeSpan(&v98, 0, v84, v82);
      if ((v77 || (*(_QWORD *)&v78 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        && (v98 || (*(_QWORD *)&v99 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
      {
        v85 = v77 <= v98;
        if (v77 != v98)
          continue;
      }
      v85 = v78 <= v99;
    }
    while (!v85);
  }
  v86 = *(_OWORD *)(v57 + 8);
  *(_OWORD *)(v93 + 24) = *(_OWORD *)(v57 + 24);
  *(_OWORD *)(v93 + 8) = v86;
  v87 = *(_OWORD *)(v57 + 40);
  v88 = *(_OWORD *)(v57 + 56);
  v89 = *(_OWORD *)(v57 + 72);
  *(_OWORD *)(v93 + 88) = *(_OWORD *)(v57 + 88);
  *(_OWORD *)(v93 + 72) = v89;
  *(_OWORD *)(v93 + 56) = v88;
  *(_OWORD *)(v93 + 40) = v87;
  v90 = *(_OWORD *)(v57 + 104);
  v91 = *(_OWORD *)(v57 + 120);
  v92 = *(_OWORD *)(v57 + 136);
  *(_OWORD *)(v93 + 152) = *(_OWORD *)(v57 + 152);
  *(_OWORD *)(v93 + 136) = v92;
  *(_OWORD *)(v93 + 120) = v91;
  *(_OWORD *)(v93 + 104) = v90;
  if (v57 != v93)
  {
    *(_OWORD *)(v93 + 168) = *(_OWORD *)(v57 + 168);
    *(_OWORD *)(v93 + 184) = *(_OWORD *)(v57 + 184);
  }
  return 1;
}

double sub_18D290E78(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D054E78(a2, a1);
  return result;
}

void sub_18D290ED0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D290EE4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)a1 = &unk_1E25C78E0;
  *(_OWORD *)(a1 + 8) = xmmword_18D30BB60;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D054E78(a2, a1);
  return result;
}

void sub_18D290F38(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D290F4C(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v3;
  void *v5;
  __int128 v6;
  uint64_t v7;
  int *v8;
  int v9;

  v7 = 0x100000001;
  v5 = &unk_1E25C6A70;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v6 = v3;
  v8 = &v9;
  v9 = a3;
  return sub_18D1633C8(a1, a2, (uint64_t)&v5, (uint64_t)&unk_1ECF24278);
}

void sub_18D290FA4(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  char *v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  uint64_t v25;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v6 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v6;
  v7 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v8 = operator new();
  sub_18D29A61C(v8, a2);
  v9 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t))(v10 + 16))(a2);
  *((_QWORD *)v4 + 8) = v11;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v24, a2);
  if (v4[95] < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v24;
  *((_QWORD *)v4 + 11) = v25;
  v22 = v4 + 24;
  v23 = (std::__shared_weak_count *)v4;
  v12 = *(_QWORD *)(a1 + 344);
  v20 = v4 + 24;
  v21 = (std::__shared_weak_count *)v4;
  do
    v13 = __ldxr(v5);
  while (__stxr(v13 + 1, v5));
  (*(void (**)(uint64_t, char **, uint64_t))(*(_QWORD *)v12 + 16))(v12, &v20, a1);
  v14 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_18D29117C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenDeviceAttitudeActiveObject::convertRvVarToQuaternionVar(uint64_t a1, const cnquaternion::CNQuaternion *a2, uint64_t a3, uint64_t a4)
{
  cnprint::CNPrinter *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int i;
  float64x2_t v29;
  int v30;
  uint64_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int j;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _BYTE *v48;
  int v49;
  int v50;
  int k;
  char v52;
  void *v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD v57[12];
  void *v58;
  __int128 v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE v62[96];
  void *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD v70[3];
  void *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  void *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD v93[3];
  void *v94;
  __int128 v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE v98[96];
  _BYTE v99[8];
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  void *v104;
  __int128 v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE v108[2464];

  raven::RavenDeviceAttitudeActiveObject::RotationVectorFromQuaternion(a2, (uint64_t)v99);
  v96 = 0x100000003;
  v94 = &unk_1E25C7790;
  v95 = xmmword_18D313070;
  v97 = v98;
  v106 = 0x100000134;
  v104 = &unk_1E25C7640;
  v105 = xmmword_18D3130C0;
  v107 = v108;
  v60 = 0x100000003;
  v58 = &unk_1E25C7790;
  v59 = xmmword_18D313070;
  v61 = v62;
  sub_18D159EE0((uint64_t)v99, (uint64_t)&v94, (uint64_t)&v104, (uint64_t)&v58, "2");
  v8 = v7;
  v9 = v7 * 0.5;
  if (fabs(v7 * 0.5) == INFINITY)
  {
    v10 = NAN;
    v11 = NAN;
  }
  else if (v9 > 0.01 || v9 < -0.01)
  {
    v12 = __sincos_stret(v7 * 0.5);
    v10 = v12.__sinval / v9;
    v11 = (v12.__cosval - v12.__sinval / v9) / v9;
  }
  else
  {
    v10 = v9 * v9 / -6.0 + 1.0;
    v11 = v9 / -3.0;
  }
  if (fabs(v8) == INFINITY)
  {
    if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
    {
      LOWORD(v104) = 12;
      LOBYTE(v94) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v94, "DevAtt,Invalid Quaternion Variance", v13, v14, v15, v16, v17, v52);
    }
    return 0;
  }
  else
  {
    if (v8 >= 0.05)
      v19 = v11 * 0.25 / v8;
    else
      v19 = -0.0416666667;
    v20 = v101;
    v21 = v100;
    v91 = 0x300000001;
    v86 = &unk_1E25C6C20;
    v92 = v93;
    v87 = v101;
    v88 = v100;
    v89 = v100 * v101;
    v90 = v101;
    if (v101)
    {
      v22 = 0;
      v23 = 0;
      v24 = v102;
      v25 = v103;
      do
      {
        v26 = v22;
        v27 = v23;
        for (i = v21; i; --i)
        {
          v93[v27] = *(_QWORD *)(v25 + 8 * v26);
          v27 += v20;
          ++v26;
        }
        ++v23;
        v22 += v24;
      }
      while (v23 != v20);
    }
    v55 = 0x300000003;
    v53 = &unk_1E25C78E0;
    v54 = xmmword_18D30BB60;
    v56 = v57;
    sub_18D053B2C((uint64_t)v99, (uint64_t)&v86, (uint64_t)&v53);
    v60 = 0x300000003;
    v58 = &unk_1E25C78E0;
    *(_QWORD *)&v29.f64[1] = 0x300000009;
    v59 = xmmword_18D30BB60;
    v61 = v62;
    v29.f64[0] = v19;
    sub_18D064EF4((uint64_t)&v53, (uint64_t)&v58, v29);
    v78 = 0x300000003;
    v76 = &unk_1E25C78E0;
    v79 = &v80;
    v77 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v76, 0.0);
    v30 = HIDWORD(v77) + 1;
    v31 = v79;
    *v79 = 0x3FF0000000000000;
    v31[v30] = 0x3FF0000000000000;
    v31[2 * v30] = 0x3FF0000000000000;
    v32.f64[0] = v10 * 0.5;
    v83 = 0x300000003;
    v81 = &unk_1E25C78E0;
    v82 = xmmword_18D30BB60;
    v84 = &v85;
    sub_18D064EF4((uint64_t)&v76, (uint64_t)&v81, v32);
    v106 = 0x300000003;
    v104 = &unk_1E25C78E0;
    v105 = xmmword_18D30BB60;
    v107 = v108;
    v33 = sub_18D053FA4((uint64_t)&v58, (uint64_t)&v81, (uint64_t)&v104);
    v34 = v101;
    v35 = v100;
    v68 = 0x300000001;
    v63 = &unk_1E25C6C20;
    v69 = v70;
    v64 = v101;
    v65 = v100;
    v66 = v100 * v101;
    v67 = v101;
    if (v101)
    {
      v36 = 0;
      v37 = 0;
      v38 = v102;
      v39 = v103;
      do
      {
        v40 = v36;
        v41 = v37;
        for (j = v35; j; --j)
        {
          v70[v41] = *(_QWORD *)(v39 + 8 * v40);
          v41 += v34;
          ++v40;
        }
        ++v37;
        v36 += v38;
      }
      while (v37 != v34);
    }
    v33.f64[0] = v10 * -0.25;
    v73 = 0x300000001;
    v71 = &unk_1E25C6C20;
    v72 = xmmword_18D314670;
    v74 = &v75;
    sub_18D064EF4((uint64_t)&v63, (uint64_t)&v71, v33);
    v96 = 0x300000004;
    v94 = &unk_1E25C7F70;
    v95 = xmmword_18D3130A0;
    v97 = v98;
    sub_18D0543E8((uint64_t)&v104, (uint64_t)&v71, (uint64_t)&v94);
    v60 = 0x300000004;
    v58 = &unk_1E25C7F70;
    v59 = xmmword_18D3130A0;
    v61 = v62;
    sub_18D053B2C((uint64_t)&v94, a3, (uint64_t)&v58);
    v43 = DWORD1(v95);
    v44 = v95;
    v55 = 0x400000003;
    v53 = &unk_1E25C7940;
    v56 = v57;
    *(_QWORD *)&v54 = __PAIR64__(v95, DWORD1(v95));
    DWORD2(v54) = v95 * DWORD1(v95);
    HIDWORD(v54) = DWORD1(v95);
    if (DWORD1(v95))
    {
      v45 = 0;
      v46 = 0;
      v47 = HIDWORD(v95);
      v48 = v97;
      do
      {
        v49 = v45;
        v50 = v46;
        for (k = v44; k; --k)
        {
          v57[v50] = *(_QWORD *)&v48[8 * v49];
          v50 += v43;
          ++v49;
        }
        ++v46;
        v45 += v47;
      }
      while (v46 != v43);
    }
    v106 = 0x400000004;
    v104 = &unk_1E25C7FA0;
    v105 = xmmword_18D313080;
    v107 = v108;
    sub_18D053B2C((uint64_t)&v58, (uint64_t)&v53, (uint64_t)&v104);
    sub_18D053AA8(a4, (uint64_t)&v104);
    return 1;
  }
}

void raven::RavenDeviceAttitudeActiveObject::RotationVectorFromQuaternion(const cnquaternion::CNQuaternion *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v5;
  double v6;
  float64x2_t v7;
  long double v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v11 = 0x100000003;
  v9 = &unk_1E25C7790;
  v12 = &v13;
  v10 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v9, 0.0);
  v5 = v12;
  *v12 = *(_QWORD *)a1;
  v5[1] = *((_QWORD *)a1 + 1);
  v5[2] = *((_QWORD *)a1 + 2);
  v26 = 0x100000003;
  v24 = &unk_1E25C7790;
  v25 = xmmword_18D313070;
  v27 = &v28;
  v21 = 0x100000134;
  v19 = &unk_1E25C7640;
  v20 = xmmword_18D3130C0;
  v22 = &v23;
  v16 = 0x100000003;
  v14 = &unk_1E25C7790;
  v15 = xmmword_18D313070;
  v17 = &v18;
  sub_18D159EE0((uint64_t)&v9, (uint64_t)&v24, (uint64_t)&v19, (uint64_t)&v14, "2");
  v6 = v7.f64[0];
  v7.f64[0] = 2.0;
  if (v6 > 0.01)
  {
    v8 = atan(v6 / *((double *)a1 + 3));
    v7.f64[0] = 1.0 / (sin(v8) / v8 * 0.5);
  }
  *(_QWORD *)(a2 + 24) = 0x100000003;
  *(_QWORD *)a2 = &unk_1E25C7790;
  *(_OWORD *)(a2 + 8) = xmmword_18D313070;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  sub_18D064EF4((uint64_t)&v9, a2, v7);
}

void sub_18D291950(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t raven::RavenDeviceAttitudeActiveObject::DeriveGravityVectorInEcefAndBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  double *v13;
  double v14;
  void *v16;
  __int128 v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE v20[24];
  void *v21;
  __int128 v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE v25[2464];
  void *v26;
  __int128 v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE v30[40];
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 8400))
    return 0;
  v28 = 0x100000003;
  v10 = a1 + 8080;
  v26 = &unk_1E25C7790;
  v27 = xmmword_18D313070;
  v29 = v30;
  v23 = 0x100000134;
  v21 = &unk_1E25C7640;
  v22 = xmmword_18D3130C0;
  v24 = v25;
  v18 = 0x100000003;
  v16 = &unk_1E25C7790;
  v17 = xmmword_18D313070;
  v19 = v20;
  sub_18D159EE0(a1 + 8080, (uint64_t)&v26, (uint64_t)&v21, (uint64_t)&v16, "2");
  if (fabs(v11) <= 0.000000015)
    return 0;
  v12 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)&v30[24] = *(_OWORD *)v12;
  v31 = *(_QWORD *)(v12 + 16);
  v26 = 0;
  if (sub_18D1C5E2C())
    return 0;
  v13 = *(double **)(a3 + 32);
  *v13 = -v32;
  v13[1] = -v33;
  v13[2] = -v34;
  v28 = 0x100000003;
  v26 = &unk_1E25C7790;
  v27 = xmmword_18D313070;
  v29 = v30;
  v23 = 0x100000134;
  v21 = &unk_1E25C7640;
  v22 = xmmword_18D3130C0;
  v24 = v25;
  v18 = 0x100000003;
  v16 = &unk_1E25C7790;
  v17 = xmmword_18D313070;
  v19 = v20;
  sub_18D159EE0(a3, (uint64_t)&v26, (uint64_t)&v21, (uint64_t)&v16, "2");
  if (fabs(v14) <= 0.000000015)
    return 0;
  sub_18D053AA8(a4, v10);
  *a5 = sqrt(*(double *)(a1 + 552) * *(double *)(a1 + 552)+ *(double *)(a1 + 544) * *(double *)(a1 + 544)+ *(double *)(a1 + 560) * *(double *)(a1 + 560))/ 9.80665;
  return 1;
}

void raven::RavenDeviceAttitudeActiveObject::DetectStationaryStatus(raven::RavenDeviceAttitudeActiveObject *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  double v20;
  int8x16_t v21;
  int8x16_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  double v26;
  BOOL v27;
  BOOL v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  BOOL v74;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  BOOL v122;
  BOOL v124;
  void **v126;
  void **v127;
  unint64_t v128;
  void **v129;
  unint64_t v130;
  void (***v131)(void);
  void (**v132)(void);
  void (***v133)(void);
  unint64_t v134;
  uint64_t v135;
  void **v136;
  void **v137;
  unint64_t v138;
  void **v139;
  unint64_t v140;
  void (***v141)(void);
  void (**v142)(void);
  void (***v143)(void);
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  unsigned __int8 v155;
  cnprint::CNPrinter *v156;
  double v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  double v168;
  double v169;
  double v170;
  unint64_t v171;
  double v172;
  uint64_t v173;
  char *v174;
  BOOL v175;
  void *__p;
  __int128 v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  BOOL v181[8];
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  _QWORD v194[2];
  _QWORD v195[3];

  v181[0] = 0;
  v182 = xmmword_18D3383E0;
  v183 = xmmword_18D3383E0;
  v184 = xmmword_18D3383E0;
  v185 = xmmword_18D3383E0;
  v186 = xmmword_18D3383E0;
  v187 = xmmword_18D3383E0;
  if (*((_QWORD *)this + 1001) && *((_QWORD *)this + 995))
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 997) + 8 * (*((_QWORD *)this + 1000) / 0x1AuLL))
       + 152 * (*((_QWORD *)this + 1000) % 0x1AuLL);
    v195[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 16))(v2);
    v195[1] = v3;
    v4 = *((_QWORD *)this + 1001) + *((_QWORD *)this + 1000) - 1;
    v5 = *(_QWORD *)(*((_QWORD *)this + 997) + 8 * (v4 / 0x1A)) + 152 * (v4 % 0x1A);
    v6 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    v8 = v7;
    v9 = v7;
    v10 = *(_QWORD *)(*((_QWORD *)this + 991) + 8 * (*((_QWORD *)this + 994) / 0x1AuLL))
        + 152 * (*((_QWORD *)this + 994) % 0x1AuLL);
    v194[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 16))(v10);
    v194[1] = v11;
    v12 = *((_QWORD *)this + 995) + *((_QWORD *)this + 994) - 1;
    v13 = *(_QWORD *)(*((_QWORD *)this + 991) + 8 * (v12 / 0x1A)) + 152 * (v12 % 0x1A);
    v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v13 + 16))(v13);
    v16 = v15;
    __p = (void *)1;
    *(_QWORD *)&v177 = 0;
    v19 = CNTimeSpan::operator+((uint64_t)v195, &__p, v17, v18);
    *(double *)v22.i64 = v20;
    if (v6)
      v23 = 1;
    else
      v23 = (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (!v23
      || !v19 && (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v24 = v6 <= v19, v6 == v19))
    {
      v24 = v9 <= v20;
    }
    if (!v24)
    {
      v191 = 1;
      v192 = 0;
      v25 = CNTimeSpan::operator+((uint64_t)v194, &v191, v22, v21);
      if (v14)
        v27 = 1;
      else
        v27 = (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (!v27
        || !v25 && (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
        || (v28 = v14 <= v25, v14 == v25))
      {
        v28 = v16 <= v26;
      }
      if (!v28)
      {
        __p = 0;
        v177 = 0uLL;
        sub_18D22D9C0(&__p, *((_QWORD *)this + 995));
        v191 = 0;
        v192 = 0;
        v193 = 0;
        sub_18D22D9C0((void **)&v191, *((_QWORD *)this + 995));
        v188 = 0;
        v189 = 0;
        v190 = 0;
        sub_18D22D9C0((void **)&v188, *((_QWORD *)this + 995));
        v30 = *((_QWORD *)this + 991);
        if (*((_QWORD *)this + 992) != v30)
        {
          v31 = *((_QWORD *)this + 994);
          v32 = (_QWORD *)(*(_QWORD *)(v30 + 8 * (v31 / 0x1A)) + 152 * (v31 % 0x1A));
          v33 = *(_QWORD *)(v30 + 8 * ((*((_QWORD *)this + 995) + v31) / 0x1A))
              + 152 * ((*((_QWORD *)this + 995) + v31) % 0x1A);
          if (v32 != (_QWORD *)v33)
          {
            v34 = (_QWORD *)(v30 + 8 * (v31 / 0x1A));
            do
            {
              v35 = (char *)v177;
              if ((unint64_t)v177 >= *((_QWORD *)&v177 + 1))
              {
                v29 = (char *)__p;
                v37 = (uint64_t)(v177 - (_QWORD)__p) >> 3;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 61)
                  goto LABEL_214;
                v39 = *((_QWORD *)&v177 + 1) - (_QWORD)__p;
                if ((uint64_t)(*((_QWORD *)&v177 + 1) - (_QWORD)__p) >> 2 > v38)
                  v38 = v39 >> 2;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                  v40 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v41 = (char *)sub_18D0788C8((uint64_t)&v177 + 8, v40);
                  v29 = (char *)__p;
                  v35 = (char *)v177;
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[8 * v37];
                *(_QWORD *)v42 = v32[13];
                v36 = v42 + 8;
                while (v35 != v29)
                {
                  v43 = *((_QWORD *)v35 - 1);
                  v35 -= 8;
                  *((_QWORD *)v42 - 1) = v43;
                  v42 -= 8;
                }
                __p = v42;
                *(_QWORD *)&v177 = v36;
                *((_QWORD *)&v177 + 1) = &v41[8 * v40];
                if (v29)
                  operator delete(v29);
              }
              else
              {
                *(_QWORD *)v177 = v32[13];
                v36 = v35 + 8;
              }
              *(_QWORD *)&v177 = v36;
              v44 = v192;
              if (v192 >= v193)
              {
                v29 = (char *)v191;
                v46 = (uint64_t)&v192[-v191] >> 3;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61)
                  goto LABEL_214;
                v48 = (uint64_t)&v193[-v191];
                if ((uint64_t)&v193[-v191] >> 2 > v47)
                  v47 = v48 >> 2;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  v50 = (char *)sub_18D0788C8((uint64_t)&v193, v49);
                  v29 = (char *)v191;
                  v44 = v192;
                }
                else
                {
                  v50 = 0;
                }
                v51 = &v50[8 * v46];
                *(_QWORD *)v51 = v32[14];
                v45 = v51 + 8;
                while (v44 != v29)
                {
                  v52 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  *((_QWORD *)v51 - 1) = v52;
                  v51 -= 8;
                }
                v191 = (uint64_t)v51;
                v192 = v45;
                v193 = &v50[8 * v49];
                if (v29)
                  operator delete(v29);
              }
              else
              {
                *(_QWORD *)v192 = v32[14];
                v45 = v44 + 8;
              }
              v192 = v45;
              v53 = v189;
              if (v189 >= v190)
              {
                v29 = v188;
                v55 = (v189 - v188) >> 3;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 61)
LABEL_214:
                  sub_18D07AFE4();
                v57 = v190 - v188;
                if ((v190 - v188) >> 2 > v56)
                  v56 = v57 >> 2;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
                  v58 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v58 = v56;
                if (v58)
                {
                  v59 = (char *)sub_18D0788C8((uint64_t)&v190, v58);
                  v29 = v188;
                  v53 = v189;
                }
                else
                {
                  v59 = 0;
                }
                v60 = &v59[8 * v55];
                *(_QWORD *)v60 = v32[15];
                v54 = v60 + 8;
                while (v53 != v29)
                {
                  v61 = *((_QWORD *)v53 - 1);
                  v53 -= 8;
                  *((_QWORD *)v60 - 1) = v61;
                  v60 -= 8;
                }
                v188 = v60;
                v189 = v54;
                v190 = &v59[8 * v58];
                if (v29)
                  operator delete(v29);
              }
              else
              {
                *(_QWORD *)v189 = v32[15];
                v54 = v53 + 8;
              }
              v189 = v54;
              v32 += 19;
              if ((_QWORD *)((char *)v32 - *v34) == (_QWORD *)3952)
              {
                v62 = (_QWORD *)v34[1];
                ++v34;
                v32 = v62;
              }
            }
            while (v32 != (_QWORD *)v33);
          }
        }
        v63 = raven::RavenDeviceAttitudeActiveObject::ComputeMeanStdVector((uint64_t)v29, (double **)&__p);
        v65 = v64;
        *(double *)&v182 = v63;
        *((_QWORD *)&v182 + 1) = v64;
        v67 = raven::RavenDeviceAttitudeActiveObject::ComputeMeanStdVector(v66, (double **)&v191);
        v69 = v68;
        *(double *)&v183 = v67;
        *((_QWORD *)&v183 + 1) = v68;
        v71 = raven::RavenDeviceAttitudeActiveObject::ComputeMeanStdVector(v70, (double **)&v188);
        v74 = (*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
           && (v65 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
          || (v69 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          v74 = 0;
        }
        *(double *)&v184 = v71;
        *((_QWORD *)&v184 + 1) = v72;
        if ((*(_QWORD *)&v71 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
          || (v72 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          v74 = 0;
        }
        v175 = v74;
        v181[0] = v74;
        *(_QWORD *)&v177 = __p;
        sub_18D22D9C0(&__p, *((_QWORD *)this + 1001));
        v192 = (char *)v191;
        sub_18D22D9C0((void **)&v191, *((_QWORD *)this + 1001));
        v189 = v188;
        sub_18D22D9C0((void **)&v188, *((_QWORD *)this + 1001));
        v78 = *((_QWORD *)this + 997);
        if (*((_QWORD *)this + 998) != v78)
        {
          v79 = *((_QWORD *)this + 1000);
          v80 = (_QWORD *)(*(_QWORD *)(v78 + 8 * (v79 / 0x1A)) + 152 * (v79 % 0x1A));
          v81 = *(_QWORD *)(v78 + 8 * ((*((_QWORD *)this + 1001) + v79) / 0x1A))
              + 152 * ((*((_QWORD *)this + 1001) + v79) % 0x1A);
          if (v80 != (_QWORD *)v81)
          {
            v82 = (_QWORD *)(v78 + 8 * (v79 / 0x1A));
            do
            {
              v83 = (char *)v177;
              if ((unint64_t)v177 >= *((_QWORD *)&v177 + 1))
              {
                v77 = (char *)__p;
                v85 = (uint64_t)(v177 - (_QWORD)__p) >> 3;
                v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 61)
                  goto LABEL_215;
                v87 = *((_QWORD *)&v177 + 1) - (_QWORD)__p;
                if ((uint64_t)(*((_QWORD *)&v177 + 1) - (_QWORD)__p) >> 2 > v86)
                  v86 = v87 >> 2;
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
                  v88 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v88 = v86;
                if (v88)
                {
                  v89 = (char *)sub_18D0788C8((uint64_t)&v177 + 8, v88);
                  v77 = (char *)__p;
                  v83 = (char *)v177;
                }
                else
                {
                  v89 = 0;
                }
                v90 = &v89[8 * v85];
                *(_QWORD *)v90 = v80[13];
                v84 = v90 + 8;
                while (v83 != v77)
                {
                  v91 = *((_QWORD *)v83 - 1);
                  v83 -= 8;
                  *((_QWORD *)v90 - 1) = v91;
                  v90 -= 8;
                }
                __p = v90;
                *(_QWORD *)&v177 = v84;
                *((_QWORD *)&v177 + 1) = &v89[8 * v88];
                if (v77)
                  operator delete(v77);
              }
              else
              {
                *(_QWORD *)v177 = v80[13];
                v84 = v83 + 8;
              }
              *(_QWORD *)&v177 = v84;
              v92 = v192;
              if (v192 >= v193)
              {
                v77 = (char *)v191;
                v94 = (uint64_t)&v192[-v191] >> 3;
                v95 = v94 + 1;
                if ((unint64_t)(v94 + 1) >> 61)
                  goto LABEL_215;
                v96 = (uint64_t)&v193[-v191];
                if ((uint64_t)&v193[-v191] >> 2 > v95)
                  v95 = v96 >> 2;
                if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
                  v97 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v97 = v95;
                if (v97)
                {
                  v98 = (char *)sub_18D0788C8((uint64_t)&v193, v97);
                  v77 = (char *)v191;
                  v92 = v192;
                }
                else
                {
                  v98 = 0;
                }
                v99 = &v98[8 * v94];
                *(_QWORD *)v99 = v80[14];
                v93 = v99 + 8;
                while (v92 != v77)
                {
                  v100 = *((_QWORD *)v92 - 1);
                  v92 -= 8;
                  *((_QWORD *)v99 - 1) = v100;
                  v99 -= 8;
                }
                v191 = (uint64_t)v99;
                v192 = v93;
                v193 = &v98[8 * v97];
                if (v77)
                  operator delete(v77);
              }
              else
              {
                *(_QWORD *)v192 = v80[14];
                v93 = v92 + 8;
              }
              v192 = v93;
              v101 = v189;
              if (v189 >= v190)
              {
                v77 = v188;
                v103 = (v189 - v188) >> 3;
                v104 = v103 + 1;
                if ((unint64_t)(v103 + 1) >> 61)
LABEL_215:
                  sub_18D07AFE4();
                v105 = v190 - v188;
                if ((v190 - v188) >> 2 > v104)
                  v104 = v105 >> 2;
                if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
                  v106 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v106 = v104;
                if (v106)
                {
                  v107 = (char *)sub_18D0788C8((uint64_t)&v190, v106);
                  v77 = v188;
                  v101 = v189;
                }
                else
                {
                  v107 = 0;
                }
                v108 = &v107[8 * v103];
                *(_QWORD *)v108 = v80[15];
                v102 = v108 + 8;
                while (v101 != v77)
                {
                  v109 = *((_QWORD *)v101 - 1);
                  v101 -= 8;
                  *((_QWORD *)v108 - 1) = v109;
                  v108 -= 8;
                }
                v188 = v108;
                v189 = v102;
                v190 = &v107[8 * v106];
                if (v77)
                  operator delete(v77);
              }
              else
              {
                *(_QWORD *)v189 = v80[15];
                v102 = v101 + 8;
              }
              v189 = v102;
              v80 += 19;
              if ((_QWORD *)((char *)v80 - *v82) == (_QWORD *)3952)
              {
                v110 = (_QWORD *)v82[1];
                ++v82;
                v80 = v110;
              }
            }
            while (v80 != (_QWORD *)v81);
          }
        }
        v111 = raven::RavenDeviceAttitudeActiveObject::ComputeMeanStdVector((uint64_t)v77, (double **)&__p);
        v113 = v112;
        *(double *)&v185 = v111;
        *((_QWORD *)&v185 + 1) = v112;
        v115 = raven::RavenDeviceAttitudeActiveObject::ComputeMeanStdVector(v114, (double **)&v191);
        v117 = v116;
        *(double *)&v186 = v115;
        *((_QWORD *)&v186 + 1) = v116;
        v119 = raven::RavenDeviceAttitudeActiveObject::ComputeMeanStdVector(v118, (double **)&v188);
        v122 = (*(_QWORD *)&v111 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
            && (v113 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        v124 = (*(_QWORD *)&v115 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
            && (v117 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
            && v122;
        *(double *)&v187 = v119;
        *((_QWORD *)&v187 + 1) = v120;
        if ((*(_QWORD *)&v119 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
          || (v120 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          v124 = 0;
        }
        v181[0] = v124 && v175;
        v126 = (void **)*((_QWORD *)this + 997);
        v127 = (void **)*((_QWORD *)this + 998);
        if (v127 == v126)
        {
          v127 = (void **)*((_QWORD *)this + 997);
        }
        else
        {
          v128 = *((_QWORD *)this + 1000);
          v129 = &v126[v128 / 0x1A];
          v130 = (unint64_t)v126[(*((_QWORD *)this + 1001) + v128) / 0x1A]
               + 152 * ((*((_QWORD *)this + 1001) + v128) % 0x1A);
          if ((char *)*v129 + 152 * (v128 % 0x1A) != (void *)v130)
          {
            v131 = (void (***)(void))((char *)*v129 + 152 * (v128 % 0x1A));
            do
            {
              v132 = *v131;
              v131 += 19;
              (*v132)();
              if ((char *)v131 - (_BYTE *)*v129 == 3952)
              {
                v133 = (void (***)(void))v129[1];
                ++v129;
                v131 = v133;
              }
            }
            while (v131 != (void (***)(void))v130);
            v127 = (void **)*((_QWORD *)this + 998);
            v126 = (void **)*((_QWORD *)this + 997);
          }
        }
        *((_QWORD *)this + 1001) = 0;
        v134 = (char *)v127 - (char *)v126;
        if (v134 >= 0x11)
        {
          do
          {
            operator delete(*v126);
            v126 = (void **)(*((_QWORD *)this + 997) + 8);
            *((_QWORD *)this + 997) = v126;
            v134 = *((_QWORD *)this + 998) - (_QWORD)v126;
          }
          while (v134 > 0x10);
        }
        if (v134 >> 3 == 1)
        {
          v135 = 13;
        }
        else
        {
          if (v134 >> 3 != 2)
            goto LABEL_179;
          v135 = 26;
        }
        *((_QWORD *)this + 1000) = v135;
LABEL_179:
        v136 = (void **)*((_QWORD *)this + 991);
        v137 = (void **)*((_QWORD *)this + 992);
        if (v137 == v136)
        {
          v137 = (void **)*((_QWORD *)this + 991);
        }
        else
        {
          v138 = *((_QWORD *)this + 994);
          v139 = &v136[v138 / 0x1A];
          v140 = (unint64_t)v136[(*((_QWORD *)this + 995) + v138) / 0x1A]
               + 152 * ((*((_QWORD *)this + 995) + v138) % 0x1A);
          if ((char *)*v139 + 152 * (v138 % 0x1A) != (void *)v140)
          {
            v141 = (void (***)(void))((char *)*v139 + 152 * (v138 % 0x1A));
            do
            {
              v142 = *v141;
              v141 += 19;
              (*v142)();
              if ((char *)v141 - (_BYTE *)*v139 == 3952)
              {
                v143 = (void (***)(void))v139[1];
                ++v139;
                v141 = v143;
              }
            }
            while (v141 != (void (***)(void))v140);
            v137 = (void **)*((_QWORD *)this + 992);
            v136 = (void **)*((_QWORD *)this + 991);
          }
        }
        *((_QWORD *)this + 995) = 0;
        v144 = (char *)v137 - (char *)v136;
        if (v144 >= 0x11)
        {
          do
          {
            operator delete(*v136);
            v136 = (void **)(*((_QWORD *)this + 991) + 8);
            *((_QWORD *)this + 991) = v136;
            v144 = *((_QWORD *)this + 992) - (_QWORD)v136;
          }
          while (v144 > 0x10);
        }
        if (v144 >> 3 == 1)
        {
          v145 = 13;
        }
        else
        {
          if (v144 >> 3 != 2)
          {
LABEL_194:
            if (v188)
            {
              v189 = v188;
              operator delete(v188);
            }
            if (v191)
            {
              v192 = (char *)v191;
              operator delete((void *)v191);
            }
            if (__p)
            {
              *(_QWORD *)&v177 = __p;
              operator delete(__p);
            }
            if (v181[0])
            {
              v146 = *((_QWORD *)this + 983);
              if (v146)
              {
                if (*((double *)&v182 + 1) < *((double *)this + 68)
                  && *((double *)&v183 + 1) < *((double *)this + 69)
                  && *((double *)&v184 + 1) < *((double *)this + 70)
                  && *((double *)&v185 + 1) < *((double *)this + 869)
                  && *((double *)&v186 + 1) < *((double *)this + 870)
                  && *((double *)&v187 + 1) < *((double *)this + 871))
                {
                  v147 = (_QWORD *)*((_QWORD *)this + 1014);
                  v148 = v183;
                  *v147 = v182;
                  v147[1] = v148;
                  v149 = v185;
                  v147[2] = v184;
                  v150 = (_QWORD *)*((_QWORD *)this + 1006);
                  v151 = v186;
                  v152 = v187;
                  *v150 = v149;
                  v150[1] = v151;
                  v150[2] = v152;
                  v153 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 979)
                                              + (((unint64_t)(v146 + *((_QWORD *)this + 982) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                                  + 2432 * (((_DWORD)v146 + *((_DWORD *)this + 1964) - 1) & 0xF));
                  v154 = (_QWORD *)*((_QWORD *)this + 1022);
                  *v154 = v153[184];
                  v154[1] = v153[185];
                  v154[2] = v153[186];
                  *((_BYTE *)this + 8400) = 1;
                  raven::RavenDeviceAttitudeActiveObject::UpdateSensorStaticNoise((uint64_t)this, (uint64_t)v181);
                  v155 = atomic_load((unsigned __int8 *)&qword_1ECF24230);
                  if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24230))
                  {
                    qword_1ECF242B0 = (uint64_t)&unk_1E25C7790;
                    qword_1ECF242C8 = 0x100000003;
                    unk_1ECF242B8 = xmmword_18D313070;
                    qword_1ECF242D0 = (uint64_t)&unk_1ECF242D8;
                    __cxa_atexit((void (*)(void *))sub_18D157E04, &qword_1ECF242B0, &dword_18D038000);
                    __cxa_guard_release(&qword_1ECF24230);
                  }
                  sub_18D187338((uint64_t)this + 8144, (uint64_t)&qword_1ECF242B0, (uint64_t)&__p);
                  sub_18D192CE4((uint64_t)&__p);
                  if (v157 > 30.0)
                  {
                    if (!cnprint::CNPrinter::GetLogLevel(v156))
                    {
                      LOWORD(__p) = 12;
                      LOBYTE(v191) = 0;
                      v158 = *((_QWORD *)this + 983) + *((_QWORD *)this + 982) - 1;
                      v159 = *(_QWORD *)(*((_QWORD *)this + 979) + ((v158 >> 1) & 0x7FFFFFFFFFFFFFF8))
                           + 2432 * (v158 & 0xF);
                      v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 16))(v159);
                      v162 = v161 + (double)v160;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v191, "DevAtt,NewBodyStaionaryGravity,t,%lf,posx,%.3lf,posy,%.3lf,posz,%.3lf,ax,%.3lf,ay,%.3lf,az,%.3lf,gx,%.3lf,gy,%.3lf,gz,%.3lf", v163, v164, v165, v166, v167, SLOBYTE(v162));
                    }
                    sub_18D053AA8((uint64_t)&qword_1ECF242B0, (uint64_t)this + 8144);
                    v178 = 0x100000003;
                    __p = &unk_1E25C7790;
                    v179 = &v180;
                    v177 = xmmword_18D313070;
                    sub_18D04BE88((uint64_t)&__p, 0.0);
                    v179[2] = 0x3FF0000000000000;
                    v168 = *(double *)(*((_QWORD *)this + 61) + 1160);
                    v169 = *((double *)this + 68);
                    v170 = *((double *)this + 69);
                    v171 = *((_QWORD *)this + 983) + *((_QWORD *)this + 982) - 1;
                    v172 = *((double *)this + 70);
                    v173 = *(_QWORD *)(*((_QWORD *)this + 979) + ((v171 >> 1) & 0x7FFFFFFFFFFFFFF8))
                         + 2432 * (v171 & 0xF);
                    v191 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 16))(v173);
                    v192 = v174;
                    raven::RavenDeviceAttitudeActiveObject::UpdateDeviceVehicleAttitude((uint64_t)this, (uint64_t)this + 8080, (uint64_t)&__p, (uint64_t)&v191, sqrt((v170 * v170 + v169 * v169 + v172 * v172) / 9.80665 / 9.80665+ v168 * 0.0174532925 * (v168 * 0.0174532925)));
                  }
                }
              }
            }
            return;
          }
          v145 = 26;
        }
        *((_QWORD *)this + 994) = v145;
        goto LABEL_194;
      }
    }
  }
}

void sub_18D292A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  void *v24;
  void *v25;

  v24 = *(void **)(v22 - 200);
  if (v24)
  {
    *(_QWORD *)(v22 - 192) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(v22 - 176);
  if (v25)
  {
    *(_QWORD *)(v22 - 168) = v25;
    operator delete(v25);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double raven::RavenDeviceAttitudeActiveObject::UpdateSensorStaticNoise(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double result;

  if (*(_BYTE *)a2)
  {
    v2 = *(float64x2_t *)(a2 + 16);
    v3 = *(float64x2_t *)(a1 + 544);
    v2.f64[1] = *(float64_t *)(a2 + 32);
    __asm { FMOV            V3.2D, #3.0 }
    v9 = vmlaq_f64(vnegq_f64(v3), _Q3, v2);
    v10 = (float64x2_t)vdupq_n_s64(0x3FE3333333333333uLL);
    *(float64x2_t *)(a1 + 544) = vmlaq_f64(v3, v10, v9);
    *(double *)(a1 + 560) = *(double *)(a1 + 560) + -(*(double *)(a1 + 560) - *(double *)(a2 + 48) * 3.0) * 0.6;
    v11 = *(float64x2_t *)(a2 + 64);
    v11.f64[1] = *(float64_t *)(a2 + 80);
    *(float64x2_t *)(a1 + 6952) = vmlaq_f64(*(float64x2_t *)(a1 + 6952), v10, vmlaq_f64(vnegq_f64(*(float64x2_t *)(a1 + 6952)), _Q3, v11));
    result = *(double *)(a1 + 6968) + -(*(double *)(a1 + 6968) - *(double *)(a2 + 96) * 3.0) * 0.6;
    *(double *)(a1 + 6968) = result;
  }
  return result;
}

BOOL raven::RavenDeviceAttitudeActiveObject::UpdateDeviceVehicleAttitude(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  double v10;
  float64x2_t v11;
  uint64_t v12;
  _BYTE *v13;
  double v14;
  int8x16_t v15;
  int8x16_t v16;
  double *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  double v21;
  float64x2_t v22;
  uint64_t v23;
  cnprint::CNPrinter *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  _BOOL8 v31;
  double v32;
  uint64_t v33;
  double v34;
  float64x2_t v35;
  int v36;
  _QWORD *v37;
  _BOOL8 v38;
  unsigned int v39;
  unsigned int v40;
  double v41;
  float64x2_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double *v46;
  double *v47;
  double v48;
  double v49;
  double v50;
  cnprint::CNPrinter *v51;
  double v52;
  uint64_t v53;
  int v54;
  double v55;
  float64x2_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  cnprint::CNPrinter *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  cnprint::CNPrinter *LogLevel;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  _OWORD v97[7];
  _BYTE v98[64];
  _BYTE v99[64];
  void *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  __int128 v106;
  uint64_t v107;
  double *v108;
  uint64_t v109;
  _BYTE v110[32];
  double *v111;
  float64x2_t v112[2];
  void *v113;
  __int128 v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE v117[72];
  double v118;
  __int128 v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE v122[72];
  void *v123;
  __int128 v124;
  uint64_t v125;
  _QWORD *v126;
  _BYTE v127[72];
  void *v128;
  __int128 v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  void *v133;
  __int128 v134;
  uint64_t v135;
  double *v136;
  uint64_t v137;
  _BYTE v138[16];
  int v139;
  uint64_t *v140;
  void *v141;
  __int128 v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE v145[2480];

  v8 = atomic_load((unsigned __int8 *)&qword_1ECF24258);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24258))
  {
    qword_1ECF24250 = 0x3FE6A09E667F3BCDLL;
    __cxa_guard_release(&qword_1ECF24258);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_1ECF24260);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24260))
  {
    qword_1ECF24308 = 0x100000003;
    qword_1ECF242F0 = (uint64_t)&unk_1E25C7790;
    qword_1ECF24310 = (uint64_t)&unk_1ECF24318;
    unk_1ECF242F8 = xmmword_18D313070;
    sub_18D04BE88((uint64_t)&qword_1ECF242F0, 1.0);
    __cxa_atexit((void (*)(void *))sub_18D157E04, &qword_1ECF242F0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24260);
  }
  v125 = 0x100000003;
  v123 = &unk_1E25C7790;
  v124 = xmmword_18D313070;
  v126 = v127;
  v143 = 0x100000134;
  v141 = &unk_1E25C7640;
  v142 = xmmword_18D3130C0;
  v144 = v145;
  v120 = 0x100000003;
  v118 = COERCE_DOUBLE(&unk_1E25C7790);
  v119 = xmmword_18D313070;
  v121 = v122;
  sub_18D159EE0(a2, (uint64_t)&v123, (uint64_t)&v141, (uint64_t)&v118, "2");
  if (fabs(v10) <= 0.000000015)
    return 0;
  sub_18D04DA0C((uint64_t)v138, a3);
  v125 = 0x100000003;
  v123 = &unk_1E25C7790;
  v124 = xmmword_18D313070;
  v126 = v127;
  v143 = 0x100000134;
  v141 = &unk_1E25C7640;
  v142 = xmmword_18D3130C0;
  v144 = v145;
  v120 = 0x100000003;
  v118 = COERCE_DOUBLE(&unk_1E25C7790);
  v119 = xmmword_18D313070;
  v121 = v122;
  sub_18D159EE0((uint64_t)v138, (uint64_t)&v123, (uint64_t)&v141, (uint64_t)&v118, "2");
  if (fabs(v11.f64[0]) <= 0.000000015)
    return 0;
  v12 = a1;
  v13 = (_BYTE *)(a1 + 6977);
  v143 = 0x100000003;
  v141 = &unk_1E25C7790;
  v142 = xmmword_18D313070;
  v144 = v145;
  v11.f64[0] = 1.0 / v11.f64[0];
  sub_18D064EF4((uint64_t)v138, (uint64_t)&v141, v11);
  sub_18D053AA8((uint64_t)v138, (uint64_t)&v141);
  v135 = 0x100000003;
  v133 = &unk_1E25C7790;
  v136 = (double *)&v137;
  v134 = xmmword_18D313070;
  v14 = 0.0;
  sub_18D04BE88((uint64_t)&v133, 0.0);
  v17 = v136;
  v136[2] = 1.0;
  v18 = v139;
  if (v139 >= 1)
  {
    v19 = v140;
    do
    {
      v20 = *v19++;
      v15.i64[0] = v20;
      v21 = *v17++;
      *(double *)v16.i64 = v21;
      v14 = v14 + *(double *)v15.i64 * v21;
      --v18;
    }
    while (v18);
  }
  if (!*v13)
  {
    *(double *)v15.i64 = fabs(v14);
    v16.i64[0] = qword_1ECF24250;
    if (*(double *)v15.i64 < *(double *)&qword_1ECF24250)
    {
      v115 = 0x100000003;
      v113 = &unk_1E25C7790;
      v116 = v117;
      v114 = xmmword_18D313070;
      sub_18D04BE88((uint64_t)&v113, 0.0);
      if (v13[1423])
      {
        sub_18D053AA8((uint64_t)&v113, v12 + 8080);
        v125 = 0x100000003;
        v123 = &unk_1E25C7790;
        v124 = xmmword_18D313070;
        v126 = v127;
        v143 = 0x100000134;
        v141 = &unk_1E25C7640;
        v142 = xmmword_18D3130C0;
        v144 = v145;
        v120 = 0x100000003;
        v118 = COERCE_DOUBLE(&unk_1E25C7790);
        v119 = xmmword_18D313070;
        v121 = v122;
        sub_18D159EE0((uint64_t)&v113, (uint64_t)&v123, (uint64_t)&v141, (uint64_t)&v118, "2");
        if (fabs(v22.f64[0]) > 0.000000015)
        {
          v143 = 0x100000003;
          v141 = &unk_1E25C7790;
          v142 = xmmword_18D313070;
          v144 = v145;
          v22.f64[0] = 1.0 / v22.f64[0];
          sub_18D064EF4((uint64_t)&v113, (uint64_t)&v141, v22);
          sub_18D053AA8((uint64_t)&v113, (uint64_t)&v141);
          if (raven::RavenDeviceAttitudeActiveObject::AttitudeViaTwoVectors())
          {
            v143 = 0x300000003;
            v141 = &unk_1E25C78E0;
            v144 = v145;
            v142 = xmmword_18D30BB60;
            sub_18D04BE88((uint64_t)&v141, 0.0);
            sub_18D053AA8(v12 + 1048, (uint64_t)&v141);
            v143 = 0x300000003;
            v141 = &unk_1E25C78E0;
            v144 = v145;
            v142 = xmmword_18D30BB60;
            sub_18D04BE88((uint64_t)&v141, 0.0);
            sub_18D053AA8(v12 + 792, (uint64_t)&v141);
            raven::RavenDeviceAttitudeActiveObject::UDFactor3x3(v23, v12 + 904, v12 + 1048, v12 + 792);
            *(_OWORD *)(v12 + 1160) = *(_OWORD *)a4;
            *v13 = 1;
            *(_DWORD *)(v12 + 7576) = 0;
            cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)(v12 + 1016), (uint64_t)&v141);
            if (cnprint::CNPrinter::GetLogLevel(v24) <= 1)
            {
              LOWORD(v123) = 12;
              LOBYTE(v118) = 1;
              v30 = *(double *)(a4 + 8) + (double)*(uint64_t *)a4;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v123, (unsigned __int8 *)&v118, "DevAtt,Device-Vehicle Attitude Initialization,t,%lf,type,%hu,Rb2v,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,Pb2v,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,aVx,%.3lf,aVy,%.3lf,aVz,%.3lf,aBx,%.3lf,aBy,%.3lf,aBz,%.3lf,aUnc,%.3lf,rVx,%.3lf,rVy,%.3lf,rVz,%.3lf,rBx,%.3lf,rBy,%.3lf,rBz,%.3lf,rUnc,%.3lf", v25, v26, v27, v28, v29, SLOBYTE(v30));
            }
            return 1;
          }
        }
      }
      return 0;
    }
  }
  if (!*v13)
    return 0;
  v32 = *(double *)(*(_QWORD *)(v12 + 488) + 1168);
  v33 = CNTimeSpan::operator-(a4, (_QWORD *)(v12 + 1160), v15, v16);
  v35.f64[0] = v32 * v32 * 0.0174532925 * 0.0174532925 * (v34 + (double)v33);
  v130 = 0x100000003;
  v128 = &unk_1E25C7790;
  v129 = xmmword_18D313070;
  v131 = &v132;
  sub_18D064EF4((uint64_t)&qword_1ECF242F0, (uint64_t)&v128, v35);
  v125 = 0x300000003;
  v123 = &unk_1E25C78E0;
  v126 = v127;
  v124 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v123, 0.0);
  v36 = HIDWORD(v124) + 1;
  v37 = v126;
  *v126 = 0x3FF0000000000000;
  v37[v36] = 0x3FF0000000000000;
  v37[2 * v36] = 0x3FF0000000000000;
  v38 = raven::RavenDeviceAttitudeActiveObject::ThorntonTemporalUpdate(v12, (uint64_t)&v123, (uint64_t)&v128);
  if (!v38)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v38) <= 1)
    {
      LOWORD(v141) = 12;
      LOBYTE(v118) = 1;
      v80 = *(double *)(a4 + 8) + (double)*(uint64_t *)a4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v118, "DevAtt, reset Device-Vehicle filter for invalid propagation,time,%lf,type,%hu", v75, v76, v77, v78, v79, SLOBYTE(v80));
    }
    v31 = 0;
    goto LABEL_39;
  }
  v120 = 0x300000003;
  v118 = COERCE_DOUBLE(&unk_1E25C78E0);
  v119 = xmmword_18D30BB60;
  v121 = v122;
  sub_18D053B2C(v12 + 1048, v12 + 792, (uint64_t)&v118);
  v39 = *(_DWORD *)(v12 + 1060);
  v40 = *(_DWORD *)(v12 + 1056);
  v115 = 0x300000003;
  v113 = &unk_1E25C78E0;
  *(_QWORD *)&v114 = __PAIR64__(v40, v39);
  DWORD2(v114) = v40 * v39;
  HIDWORD(v114) = v39;
  v116 = v117;
  v94 = v12 + 1048;
  sub_18D073454(v12 + 1048, (uint64_t)&v113);
  v143 = 0x300000003;
  v141 = &unk_1E25C78E0;
  v142 = xmmword_18D30BB60;
  v144 = v145;
  sub_18D053B2C((uint64_t)&v118, (uint64_t)&v113, (uint64_t)&v141);
  sub_18D053AA8(v12 + 904, (uint64_t)&v141);
  *(_OWORD *)(v12 + 1160) = *(_OWORD *)a4;
  cnrotation::Inv((float64x2_t *)(v12 + 1016), v112);
  sub_18D162AB8((cnrotation::CNRotation *)v112, a3, (uint64_t)&v141);
  sub_18D1636E4((uint64_t)v110, (uint64_t)&v141);
  v120 = 0x100000003;
  v118 = COERCE_DOUBLE(&unk_1E25C7790);
  v119 = xmmword_18D313070;
  v121 = v122;
  v143 = 0x100000134;
  v141 = &unk_1E25C7640;
  v142 = xmmword_18D3130C0;
  v144 = v145;
  v115 = 0x100000003;
  v113 = &unk_1E25C7790;
  v114 = xmmword_18D313070;
  v116 = v117;
  sub_18D159EE0(a2, (uint64_t)&v118, (uint64_t)&v141, (uint64_t)&v113, "2");
  v107 = 0x100000003;
  v105 = &unk_1E25C7790;
  v106 = xmmword_18D313070;
  v108 = (double *)&v109;
  v42.f64[0] = 1.0 / v41;
  sub_18D064EF4(a2, (uint64_t)&v105, v42);
  v102 = 0x100000003;
  v100 = &unk_1E25C7790;
  v101 = xmmword_18D313070;
  v103 = &v104;
  sub_18D0540FC((uint64_t)&v105, (uint64_t)v110, (uint64_t)&v100);
  v43 = DWORD2(v106);
  v44 = 0.0;
  v45 = 0.0;
  if (SDWORD2(v106) >= 1)
  {
    v46 = v108;
    v47 = v111;
    do
    {
      v48 = *v46++;
      v49 = v48;
      v50 = *v47++;
      v45 = v45 + v49 * v50;
      --v43;
    }
    while (v43);
  }
  v52 = fabs(acos(v45));
  v53 = *(unsigned int *)(v12 + 912);
  if ((int)v53 >= 1)
  {
    v54 = 0;
    v44 = 0.0;
    do
    {
      v44 = v44 + *(double *)(*(_QWORD *)(v12 + 936) + 8 * v54);
      v54 += *(_DWORD *)(v12 + 924) + 1;
      --v53;
    }
    while (v53);
  }
  v55 = sqrt(v44) * *(double *)(*(_QWORD *)(v12 + 488) + 1184);
  if (v55 > 0.523598776)
    v55 = 0.523598776;
  v31 = v52 <= v55;
  if (v52 <= v55)
  {
    *(_DWORD *)(v12 + 7576) = 0;
    sub_18D28E8D8((uint64_t)&v141, *v111, v111[1], v111[2]);
    v56.f64[0] = a5 * a5;
    sub_18D1B27A8((uint64_t)&qword_1ECF242F0, (uint64_t)v99, v56);
    raven::RavenDeviceAttitudeActiveObject::biermanObservationalUpdate3X3(v12, (uint64_t)&v141, (uint64_t)v99, (uint64_t)&v100, (uint64_t)v98);
    raven::RavenDeviceAttitudeActiveObject::QuaternionFromRotationVector((uint64_t)v98, (float64x2_t *)&v113);
    v97[0] = v112[0];
    v97[1] = v112[1];
    cnquaternion::CNQuaternion::operator*((double *)&v113, (double *)v97, &v118);
    v57 = sqrt(*(double *)&v119 * *(double *)&v119+ v118 * v118+ *((double *)&v119 + 1) * *((double *)&v119 + 1)+ *(double *)&v120 * *(double *)&v120);
    v58 = 1.0;
    v59 = 0.0;
    v60 = 0.0;
    v61 = 0.0;
    v62 = 0.0;
    v63 = 1.0;
    if (fabs(v57) >= 2.22044605e-16)
    {
      v60 = v118 / v57;
      v61 = *(double *)&v119 / v57;
      v62 = *((double *)&v119 + 1) / v57;
      v63 = *(double *)&v120 / v57;
    }
    v64 = sqrt(v61 * v61 + v60 * v60 + v62 * v62 + v63 * v63);
    v65 = 0.0;
    v66 = 0.0;
    if (fabs(v64) >= 2.22044605e-16)
    {
      v59 = -v60 / v64;
      v65 = -v61 / v64;
      v66 = -v62 / v64;
      v58 = v63 / v64;
    }
    *(double *)(v12 + 1016) = v59;
    *(double *)(v12 + 1024) = v65;
    *(double *)(v12 + 1032) = v66;
    *(double *)(v12 + 1040) = v58;
    sub_18D166008(v94, v12 + 792, (uint64_t)&v113);
    sub_18D16606C(v94, (uint64_t)v97);
    sub_18D166008((uint64_t)&v113, (uint64_t)v97, (uint64_t)&v118);
    sub_18D053AA8(v12 + 904, (uint64_t)&v118);
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)(v12 + 1016), (uint64_t)&v118);
    if (cnprint::CNPrinter::GetLogLevel(v67) <= 1)
    {
      LOWORD(v113) = 12;
      LOBYTE(v97[0]) = 1;
      v73 = *(double *)(a4 + 8) + (double)*(uint64_t *)a4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)v97, "DevAtt,Device-Vehicle Attitude Updated,t,%lf,type,%hu,Rb2v,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,Pb2v,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,aVx,%.3lf,aVy,%.3lf,aVz,%.3lf,aBx,%.3lf,aBy,%.3lf,aBz,%.3lf,aUnc,%.3lf", v68, v69, v70, v71, v72, SLOBYTE(v73));
    }
  }
  else
  {
    ++*(_DWORD *)(v12 + 7576);
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v51);
    if (LogLevel <= 1)
    {
      LOWORD(v141) = 12;
      LOBYTE(v118) = 1;
      v87 = *(double *)(a4 + 8) + (double)*(uint64_t *)a4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v118, "DevAtt, Too large Estimated-Observed Attitude Innovation,time,%lf,type,%hu,outRangeCount,%u", v82, v83, v84, v85, v86, SLOBYTE(v87));
    }
    if (*(_DWORD *)(v12 + 7576) >= *(_DWORD *)(*(_QWORD *)(v12 + 488) + 1192))
    {
      if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
      {
        LOWORD(v141) = 12;
        LOBYTE(v118) = 1;
        v93 = *(double *)(a4 + 8) + (double)*(uint64_t *)a4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v118, "DevAtt,t,%lf,reset Device-Vehicle filter for consecutive %u out of range measurements", v88, v89, v90, v91, v92, SLOBYTE(v93));
      }
LABEL_39:
      *(_DWORD *)(v12 + 7576) = 0;
      *v13 = 0;
    }
  }
  return v31;
}

void sub_18D293988(uint64_t a1)
{
  void (***v2)(_QWORD);
  int64x2_t v3;

  v2 = (void (***)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (*(_QWORD *)(a1 + 32) / 0x1AuLL))
                                     + 152 * (*(_QWORD *)(a1 + 32) % 0x1AuLL));
  (**v2)(v2);
  v3 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_18D30B1A0);
  *(int64x2_t *)(a1 + 32) = v3;
  if (v3.i64[0] >= 0x34uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 26;
  }
}

__n128 sub_18D293A28(void **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __n128 result;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void *v87;
  void *__p;
  void *__src;
  __int128 v90;
  _QWORD *v91;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 26 * v6 - 1;
  v8 = (unint64_t)a1[4];
  v9 = (unint64_t)a1[5] + v8;
  if (v7 == v9)
  {
    v10 = v8 - 26;
    if (v8 < 0x1A)
    {
      v26 = (char *)a1[3];
      v27 = v26 - (_BYTE *)*a1;
      if (v6 >= v27 >> 3)
      {
        if (v26 == *a1)
          v28 = 1;
        else
          v28 = v27 >> 2;
        v91 = a1 + 3;
        __p = sub_18D0788C8((uint64_t)(a1 + 3), v28);
        __src = (char *)__p + 8 * v6;
        *(_QWORD *)&v90 = __src;
        *((_QWORD *)&v90 + 1) = (char *)__p + 8 * v29;
        v87 = operator new(0xF70uLL);
        sub_18D078674(&__p, &v87);
        v30 = (char *)a1[2];
        v31 = (char *)__src;
        if (v30 == a1[1])
        {
          v47 = (char *)a1[2];
        }
        else
        {
          do
          {
            if (v31 == __p)
            {
              if ((unint64_t)v90 >= *((_QWORD *)&v90 + 1))
              {
                if (*((char **)&v90 + 1) == v31)
                  v36 = 1;
                else
                  v36 = (uint64_t)(*((_QWORD *)&v90 + 1) - (_QWORD)v31) >> 2;
                v37 = (char *)sub_18D0788C8((uint64_t)v91, v36);
                v32 = &v37[(2 * v36 + 6) & 0xFFFFFFFFFFFFFFF8];
                v39 = (uint64_t *)__src;
                v40 = v32;
                v41 = v90 - (_QWORD)__src;
                if ((void *)v90 != __src)
                {
                  v40 = &v32[v41 & 0xFFFFFFFFFFFFFFF8];
                  v42 = 8 * (v41 >> 3);
                  v43 = v32;
                  do
                  {
                    v44 = *v39++;
                    *(_QWORD *)v43 = v44;
                    v43 += 8;
                    v42 -= 8;
                  }
                  while (v42);
                }
                v45 = __p;
                __p = v37;
                __src = v32;
                *(_QWORD *)&v90 = v40;
                *((_QWORD *)&v90 + 1) = &v37[8 * v38];
                if (v45)
                {
                  operator delete(v45);
                  v32 = (char *)__src;
                }
              }
              else
              {
                v33 = (uint64_t)(*((_QWORD *)&v90 + 1) - v90) >> 3;
                if (v33 >= -1)
                  v34 = v33 + 1;
                else
                  v34 = v33 + 2;
                v35 = v34 >> 1;
                v32 = &v31[8 * (v34 >> 1)];
                if ((char *)v90 != v31)
                {
                  memmove(&v31[8 * (v34 >> 1)], v31, v90 - (_QWORD)v31);
                  v31 = (char *)v90;
                }
                __src = v32;
                *(_QWORD *)&v90 = &v31[8 * v35];
              }
            }
            else
            {
              v32 = v31;
            }
            v46 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v32 - 1) = v46;
            v31 = (char *)__src - 8;
            __src = (char *)__src - 8;
          }
          while (v30 != a1[1]);
          v47 = (char *)a1[2];
        }
        v62 = *a1;
        *a1 = __p;
        a1[1] = v31;
        __p = v62;
        __src = v30;
        v63 = a1[3];
        *((_OWORD *)a1 + 1) = v90;
        *(_QWORD *)&v90 = v47;
        *((_QWORD *)&v90 + 1) = v63;
        if (v47 != v30)
          *(_QWORD *)&v90 = &v47[(v30 - v47 + 7) & 0xFFFFFFFFFFFFFFF8];
        if (v62)
          operator delete(v62);
        goto LABEL_56;
      }
      if (v26 != v5)
      {
        __p = operator new(0xF70uLL);
        sub_18D078444(a1, &__p);
LABEL_56:
        v4 = (char *)a1[1];
        v9 = (unint64_t)a1[4] + (_QWORD)a1[5];
        goto LABEL_57;
      }
      __p = operator new(0xF70uLL);
      sub_18D078558((uint64_t)a1, &__p);
      v59 = a1[1];
      v5 = (char *)a1[2];
      v61 = *v59;
      v60 = (char *)(v59 + 1);
      v14 = v61;
      a1[1] = v60;
      if (v5 == a1[3])
      {
        v72 = v60 - (_BYTE *)*a1;
        if (v60 > *a1)
        {
          v73 = v72 >> 3;
          v18 = v72 >> 3 < -1;
          v74 = (v72 >> 3) + 2;
          if (v18)
            v75 = v74;
          else
            v75 = v73 + 1;
          v76 = -(v75 >> 1);
          v77 = v75 >> 1;
          v78 = &v60[-8 * v77];
          v79 = v5 - v60;
          if (v5 != v60)
          {
            memmove(&v60[-8 * v77], v60, v5 - v60);
            v60 = (char *)a1[1];
          }
          v5 = &v78[v79];
          v25 = &v60[8 * v76];
          goto LABEL_14;
        }
        if (v5 == *a1)
          v80 = 1;
        else
          v80 = (v5 - (_BYTE *)*a1) >> 2;
        v49 = (char *)sub_18D0788C8((uint64_t)(a1 + 3), v80);
        v50 = &v49[8 * (v80 >> 2)];
        v52 = &v49[8 * v81];
        v82 = (uint64_t *)a1[1];
        v5 = v50;
        v83 = (_BYTE *)a1[2] - (_BYTE *)v82;
        if (v83)
        {
          v5 = &v50[v83 & 0xFFFFFFFFFFFFFFF8];
          v84 = 8 * (v83 >> 3);
          v85 = &v49[8 * (v80 >> 2)];
          do
          {
            v86 = *v82++;
            *(_QWORD *)v85 = v86;
            v85 += 8;
            v84 -= 8;
          }
          while (v84);
        }
LABEL_47:
        v58 = *a1;
        *a1 = v49;
        a1[1] = v50;
        a1[2] = v5;
        a1[3] = v52;
        if (v58)
        {
          operator delete(v58);
          v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      v11 = (uint64_t)(a1 + 3);
      v12 = (char *)a1[3];
      a1[4] = (void *)v10;
      v15 = *(_QWORD *)v4;
      v13 = v4 + 8;
      v14 = v15;
      a1[1] = v13;
      if (v5 == v12)
      {
        v16 = v13 - (_BYTE *)*a1;
        if (v13 > *a1)
        {
          v17 = v16 >> 3;
          v18 = v16 >> 3 < -1;
          v19 = (v16 >> 3) + 2;
          if (v18)
            v20 = v19;
          else
            v20 = v17 + 1;
          v21 = -(v20 >> 1);
          v22 = v20 >> 1;
          v23 = &v13[-8 * v22];
          v24 = v5 - v13;
          if (v5 != v13)
          {
            memmove(&v13[-8 * v22], v13, v5 - v13);
            v5 = (char *)a1[1];
          }
          v25 = &v5[8 * v21];
          v5 = &v23[v24];
LABEL_14:
          a1[1] = v25;
          a1[2] = v5;
          goto LABEL_50;
        }
        if (v5 == *a1)
          v48 = 1;
        else
          v48 = (v5 - (_BYTE *)*a1) >> 2;
        v49 = (char *)sub_18D0788C8(v11, v48);
        v50 = &v49[8 * (v48 >> 2)];
        v52 = &v49[8 * v51];
        v53 = (uint64_t *)a1[1];
        v5 = v50;
        v54 = (_BYTE *)a1[2] - (_BYTE *)v53;
        if (v54)
        {
          v5 = &v50[v54 & 0xFFFFFFFFFFFFFFF8];
          v55 = 8 * (v54 >> 3);
          v56 = &v49[8 * (v48 >> 2)];
          do
          {
            v57 = *v53++;
            *(_QWORD *)v56 = v57;
            v56 += 8;
            v55 -= 8;
          }
          while (v55);
        }
        goto LABEL_47;
      }
    }
LABEL_50:
    *(_QWORD *)v5 = v14;
    a1[2] = (char *)a1[2] + 8;
    goto LABEL_56;
  }
LABEL_57:
  v64 = *(_QWORD *)&v4[8 * (v9 / 0x1A)] + 152 * (v9 % 0x1A);
  *(_QWORD *)v64 = &unk_1E25C21E8;
  v65 = *(_OWORD *)(a2 + 40);
  v66 = *(_OWORD *)(a2 + 56);
  v67 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v64 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v64 + 72) = v67;
  *(_OWORD *)(v64 + 56) = v66;
  *(_OWORD *)(v64 + 40) = v65;
  v68 = *(_OWORD *)(a2 + 104);
  v69 = *(_OWORD *)(a2 + 120);
  v70 = *(_OWORD *)(a2 + 130);
  *(_OWORD *)(v64 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v64 + 130) = v70;
  *(_OWORD *)(v64 + 120) = v69;
  *(_OWORD *)(v64 + 104) = v68;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v64 + 8) = result;
  a1[5] = (char *)a1[5] + 1;
  return result;
}

void sub_18D293EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL raven::RavenDeviceAttitudeActiveObject::DualDirSmooth(uint64_t a1, char **a2, double a3)
{
  char *v3;
  char *v4;
  BOOL v5;
  _BOOL8 v7;
  double v8;
  double v10;
  double v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char *v17;
  uint64_t v18;
  const void **v19;
  _BYTE *v20;
  char *v21;
  const void **v22;
  uint64_t v23;
  char v24;
  double v25;
  unint64_t v26;
  double *v27;
  double *v28;
  uint64_t v30;
  uint64_t v31;
  const void **i;
  const void *v33;
  size_t v34;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    return 0;
  v5 = a3 < 0.0 || ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
  if (v5 && (unint64_t)(*(_QWORD *)&a3 - 1) > 0xFFFFFFFFFFFFELL)
    return 0;
  v7 = 0;
  v8 = 1.0 / *(double *)(*(_QWORD *)(a1 + 488) + 1144);
  if (COERCE__INT64(fabs(v8)) <= 0x7FEFFFFFFFFFFFFFLL && v8 > 0.0)
  {
    v10 = 1.0 / v8 / (1.0 / (a3 * 6.28318531) + 1.0 / v8);
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    v11 = 1.0 - v10;
    v12 = 1;
    v13 = 0.0;
    do
    {
      v14 = *((double *)v4 - 1);
      v4 -= 8;
      v15 = v14;
      v16 = v11 * v13 + v10 * v14;
      if ((v12 & 1) != 0)
        v13 = v15;
      else
        v13 = v16;
      v35 = v13;
      sub_18D07AB44((uint64_t)&v36, &v35);
      v12 = 0;
    }
    while (v4 != v3);
    v17 = *a2;
    v18 = (a2[1] - *a2) >> 3;
    v7 = v18 == *((_QWORD *)&v38 + 1);
    if (v18 != *((_QWORD *)&v38 + 1))
      goto LABEL_39;
    v19 = (const void **)(*((_QWORD *)&v36 + 1) + 8 * ((unint64_t)v38 >> 9));
    if ((_QWORD)v37 == *((_QWORD *)&v36 + 1))
    {
      v21 = 0;
      v23 = 0;
      v22 = (const void **)(*((_QWORD *)&v36 + 1) + 8 * (((_QWORD)v38 + *((_QWORD *)&v38 + 1)) >> 9));
    }
    else
    {
      v20 = *v19;
      v21 = (char *)*v19 + 8 * (v38 & 0x1FF);
      v22 = (const void **)(*((_QWORD *)&v36 + 1) + 8 * (((_QWORD)v38 + *((_QWORD *)&v38 + 1)) >> 9));
      v23 = (uint64_t)*v22 + 8 * ((v38 + *((_QWORD *)&v38 + 1)) & 0x1FF);
      if (v21 != (char *)v23)
      {
        v24 = 1;
        v25 = 0.0;
        v26 = *((_QWORD *)&v36 + 1) + 8 * ((unint64_t)v38 >> 9);
        v27 = (double *)((char *)*v19 + 8 * (v38 & 0x1FF));
        do
        {
          v25 = v11 * v25 + v10 * *v27;
          if ((v24 & 1) != 0)
            v25 = *v27;
          *v27++ = v25;
          if ((char *)v27 - v20 == 4096)
          {
            v28 = *(double **)(v26 + 8);
            v26 += 8;
            v20 = v28;
            v27 = v28;
          }
          v24 = 0;
        }
        while (v27 != (double *)v23);
      }
    }
    if (v19 == v22)
    {
      v34 = v23 - (_QWORD)v21;
      if ((char *)v23 == v21)
      {
LABEL_39:
        sub_18D07BD60(&v36);
        return v7;
      }
    }
    else
    {
      v30 = (uint64_t)*v19 + 4096;
      v31 = v30 - (_QWORD)v21;
      if ((char *)v30 != v21)
        memmove(v17, v21, v30 - (_QWORD)v21);
      v17 += v31;
      for (i = v19 + 1; i != v22; ++i)
      {
        v33 = *i;
        memmove(v17, v33, 0x1000uLL);
        v17 += 4096;
      }
      v21 = (char *)*v22;
      if (*v22 == (const void *)v23)
        goto LABEL_39;
      v34 = v23 - (_QWORD)v21;
    }
    memmove(v17, v21, v34);
    goto LABEL_39;
  }
  return v7;
}

void sub_18D294184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18D07BD60((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL raven::RavenDeviceAttitudeActiveObject::IsDecelerationToStop(raven::RavenDeviceAttitudeActiveObject *this)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  double *v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  double v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  double **v33;
  double *v34;
  double *v35;
  uint64_t v36;
  double v37;
  double v38;
  double *v39;
  _QWORD v40[2];
  _QWORD v41[2];
  char v42[8];
  double v43[304];

  v1 = *((_QWORD *)this + 983);
  if (v1 < 2)
    return 0;
  v3 = v1 + *((_QWORD *)this + 982) - 1;
  v4 = *(_QWORD *)(*((_QWORD *)this + 979) + ((v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
  v5 = v3 & 0xF;
  v6 = (double *)(v4 + 2432 * v5);
  v7 = sqrt(v6[195] * v6[195] + v6[194] * v6[194] + v6[196] * v6[196]);
  if (v7 > 1.0)
    return 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 2432 * v5) + 16))(v4 + 2432 * v5);
  v10 = v9;
  v11 = v9;
  sub_18D0409EC((uint64_t)v42);
  v12 = *((_QWORD *)this + 982) + *((_QWORD *)this + 983);
  v13 = *((_QWORD *)this + 979);
  v14 = (_QWORD *)(v13 + 8 * (v12 >> 4));
  v15 = *((_QWORD *)this + 980);
  v16 = v15 == v13 ? 0 : *v14 + 2432 * (v12 & 0xF);
  v17 = v8 || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  v18 = v17;
  while (1)
  {
    v19 = v15 == v13
        ? 0
        : *(_QWORD *)(v13 + ((*((_QWORD *)this + 982) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 2432 * (*((_QWORD *)this + 982) & 0xFLL);
    if (v19 == v16)
      break;
    v20 = v16 - *v14;
    v21 = 0x86BCA1AF286BCA1BLL * (v20 >> 7);
    if (v20 < 2433)
      v22 = v14[-((16 - v21) >> 4)] + 2432 * (~(16 - (_BYTE)v21) & 0xF);
    else
      v22 = *(_QWORD *)((char *)v14 + (((v21 - 1) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 2432 * (((_DWORD)v21 - 1) & 0xF);
    v41[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    v41[1] = v23;
    v40[0] = 0;
    v40[1] = 0x3FECCCCCCCCCCCCDLL;
    v26 = CNTimeSpan::operator+((uint64_t)v41, v40, v24, v25);
    if (!v18
      || !v26 && (*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || (v28 = v8 <= v26, v8 == v26))
    {
      v28 = v11 <= v27;
    }
    if (!v28)
    {
      if (*v14 == v16)
        v16 = *(v14 - 1) + 38912;
      memcpy(v43, (const void *)(v16 - 2424), 0x971uLL);
      break;
    }
    if (*v14 == v16)
    {
      v29 = *--v14;
      v16 = v29 + 38912;
    }
    v16 -= 2432;
    v13 = *((_QWORD *)this + 979);
    v15 = *((_QWORD *)this + 980);
  }
  if (!LOBYTE(v43[192]) || sqrt(v43[194] * v43[194] + v43[193] * v43[193] + v43[195] * v43[195]) > 1.0)
    return 0;
  v31 = *((_QWORD *)this + 979);
  if (*((_QWORD *)this + 980) == v31
    || (v32 = *((_QWORD *)this + 982),
        v33 = (double **)(v31 + 8 * (v32 >> 4)),
        v34 = *v33,
        v35 = &(*v33)[304 * (v32 & 0xF)],
        v36 = *(_QWORD *)(v31 + (((*((_QWORD *)this + 983) + v32) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 2432 * ((*((_DWORD *)this + 1966) + (_DWORD)v32) & 0xF),
        v35 == (double *)v36))
  {
    v37 = -INFINITY;
  }
  else
  {
    v37 = -INFINITY;
    do
    {
      v38 = sqrt(v35[195] * v35[195] + v35[194] * v35[194] + v35[196] * v35[196]);
      if (v37 < v38)
        v37 = v38;
      v35 += 304;
      if ((char *)v35 - (char *)v34 == 38912)
      {
        v39 = v33[1];
        ++v33;
        v34 = v39;
        v35 = v39;
      }
    }
    while (v35 != (double *)v36);
  }
  return vabdd_f64(v37, v7) >= *(double *)(*((_QWORD *)this + 61) + 1056);
}

BOOL raven::RavenDeviceAttitudeActiveObject::IsMovementStraight(raven::RavenDeviceAttitudeActiveObject *this)
{
  uint64_t v2;
  double v3;
  unint64_t v4;
  _QWORD *v5;
  double *v6;
  unint64_t v7;
  double v8;
  double v9;
  double *v10;
  uint64_t v11;
  double v12;
  BOOL v14;
  double v15;
  _BYTE v17[4];
  __int128 v18;
  _BYTE v19[28];
  _BYTE v20[4];
  __int128 v21;
  _BYTE v22[28];
  _BYTE v23[4];
  __int128 v24;
  _BYTE v25[28];

  v23[0] = 0;
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v20[0] = 0;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  v17[0] = 0;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  v2 = *((_QWORD *)this + 864);
  v3 = 0.0;
  if (*((_QWORD *)this + 865) == v2)
  {
    v8 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v4 = *((_QWORD *)this + 867);
    v5 = (_QWORD *)(v2 + 8 * (v4 / 0x1A));
    v6 = (double *)(*v5 + 152 * (v4 % 0x1A));
    v7 = *(_QWORD *)(v2 + 8 * ((*((_QWORD *)this + 868) + v4) / 0x1A)) + 152 * ((*((_QWORD *)this + 868) + v4) % 0x1A);
    v8 = 0.0;
    v9 = 0.0;
    if (v6 != (double *)v7)
    {
      do
      {
        sub_18D1648E4((uint64_t)v23, v6 + 13, 1.0);
        sub_18D1648E4((uint64_t)v20, v6 + 14, 1.0);
        sub_18D1648E4((uint64_t)v17, v6 + 15, 1.0);
        v6 += 19;
        if ((double *)((char *)v6 - *v5) == (double *)3952)
        {
          v10 = (double *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (double *)v7);
      v9 = *(double *)&v25[20];
      v8 = *(double *)&v22[20];
      v3 = *(double *)&v19[20];
    }
  }
  v11 = *((_QWORD *)this + 61);
  v12 = *(double *)(v11 + 1104) * 0.0174532925 * 0.0174532925;
  v14 = v9 < v12 && v8 < v12 && v3 < v12;
  if (v14
    && (v15 = *(double *)(v11 + 1096) * 0.0174532925, fabs(*(double *)&v25[4]) < v15)
    && fabs(*(double *)&v22[4]) < v15)
  {
    return fabs(*(double *)&v19[4]) < v15;
  }
  else
  {
    return 0;
  }
}

double sub_18D294698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  __int128 *v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  double v10[3];
  __int128 v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 8))
    v3 = *(_DWORD *)(a2 + 8) == 3;
  else
    v3 = 0;
  if (v3 && *(_DWORD *)(a2 + 12) == 1)
  {
    v6 = *(__int128 **)(a2 + 32);
    v11 = *v6;
    v12 = *((_QWORD *)v6 + 2);
    if (sub_18D056ECC(a1, (double *)&v11, v10))
    {
      v8 = 0;
      *(_OWORD *)(a3 + 8) = xmmword_18D313070;
      v9 = *(_QWORD *)(a3 + 32);
      do
      {
        result = v10[v8];
        *(double *)(v9 + v8 * 8) = result;
        ++v8;
      }
      while (v8 != 3);
    }
  }
  return result;
}

uint64_t sub_18D29472C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v17 = 0x300000003;
  v12 = &unk_1E25C78E0;
  v13 = v4;
  v14 = v5;
  v15 = v5 * v4;
  v16 = v4;
  v18 = &v19;
  v9 = 0x1000001E6;
  v7 = &unk_1E25C7C10;
  v8 = xmmword_18D319190;
  v10 = &v11;
  return sub_18D29A7A8(a1, (uint64_t)&v12, (uint64_t)&v7, a2, a3, a4);
}

void raven::RavenDeviceAttitudeActiveObject::QuaternionFromRotationVector(uint64_t a1@<X1>, float64x2_t *a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  float64x2_t *v7;
  double v8;
  long double v9;
  double v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v23 = 0x100000003;
  v21 = &unk_1E25C7790;
  v22 = xmmword_18D313070;
  v24 = &v25;
  v18 = 0x100000134;
  v16 = &unk_1E25C7640;
  v17 = xmmword_18D3130C0;
  v19 = &v20;
  v13 = 0x100000003;
  v11 = &unk_1E25C7790;
  v12 = xmmword_18D313070;
  v14 = &v15;
  sub_18D159EE0(a1, (uint64_t)&v21, (uint64_t)&v16, (uint64_t)&v11, "2");
  v5 = v4 * 0.5;
  if (fabs(v4 * 0.5) == INFINITY)
  {
    v6 = NAN;
  }
  else if (v5 > 0.01 || v5 < -0.01)
  {
    v6 = sin(v5) / v5;
  }
  else
  {
    v6 = v5 * v5 / -6.0 + 1.0;
  }
  v10 = v6 * 0.5;
  v7 = *(float64x2_t **)(a1 + 32);
  v8 = v6 * 0.5 * v7[1].f64[0];
  v9 = cos(v5);
  *a2 = vmulq_n_f64(*v7, v10);
  a2[1].f64[0] = v8;
  a2[1].f64[1] = v9;
}

double raven::RavenDeviceAttitudeActiveObject::RaiseExternalAttitudeEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::TimeMarkEvent *a2)
{
  cnprint::CNPrinter *v3;
  double result;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unsigned __int8 v13;
  __int16 v14;

  if (*(_BYTE *)(*((_QWORD *)this + 61) + 3790) && *((_BYTE *)this + 1432) && *((_BYTE *)this + 1424))
  {
    sub_18D21C0EC((uint64_t)this, (uint64_t)this + 1208);
    if (!cnprint::CNPrinter::GetLogLevel(v3))
    {
      v14 = 12;
      v13 = 0;
      v5 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      v12 = v6 + (double)v5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "t,%.3lf, Attitude Event by Device Motion", v7, v8, v9, v10, v11, SLOBYTE(v12));
    }
  }
  return result;
}

void raven::RavenDeviceAttitudeActiveObject::RaiseNonHolonomicEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::TimeMarkEvent *a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  void *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;

  if (*((_BYTE *)this + 6977) && *((_BYTE *)this + 6979))
  {
    v4 = (char *)this + 1048;
    v16 = 0x300000003;
    v14 = &unk_1E25C78E0;
    v15 = xmmword_18D30BB60;
    v17 = &v18;
    sub_18D053B2C((uint64_t)this + 1048, (uint64_t)this + 792, (uint64_t)&v14);
    v5 = *((_DWORD *)this + 265);
    v6 = *((_DWORD *)this + 264);
    v51 = 0x300000003;
    v46 = &unk_1E25C78E0;
    v47 = v5;
    v48 = v6;
    v49 = v6 * v5;
    v50 = v5;
    v52 = &v53;
    sub_18D073454((uint64_t)v4, (uint64_t)&v46);
    v32 = 0x300000003;
    v30 = &unk_1E25C78E0;
    v31 = xmmword_18D30BB60;
    v33 = &v34;
    sub_18D053B2C((uint64_t)&v14, (uint64_t)&v46, (uint64_t)&v30);
    v7 = v31;
    if ((int)v31 < 1)
    {
      v9 = 0.0;
    }
    else
    {
      v8 = 0;
      v9 = 0.0;
      do
      {
        v9 = v9 + *(double *)&v33[v8];
        v8 += HIDWORD(v31) + 1;
        --v7;
      }
      while (v7);
    }
    v10 = cnrotation::CNRotation::RotationMatrix((raven::RavenDeviceAttitudeActiveObject *)((char *)this + 1016), (uint64_t)&v46);
    v30 = &unk_1E25C4230;
    LOBYTE(v32) = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0x7FF8000000000000;
    *(_QWORD *)&v31 = (*(uint64_t (**)(const raven::TimeMarkEvent *, double))(*(_QWORD *)a2 + 16))(a2, v10);
    *((_QWORD *)&v31 + 1) = v11;
    v42 = *v52;
    v43 = v52[v50];
    v12 = sqrt(v9);
    v44 = v52[2 * v50];
    v45 = v12;
    sub_18D21D624((uint64_t)this, (uint64_t)&v30);
    v14 = &unk_1E25C4230;
    LOBYTE(v16) = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0x7FF8000000000000;
    *(_QWORD *)&v15 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
    *((_QWORD *)&v15 + 1) = v13;
    v26 = v52[2];
    v27 = v52[v50 + 2];
    v28 = v52[2 * v50 + 2];
    v29 = v12;
    sub_18D21D624((uint64_t)this, (uint64_t)&v14);
  }
}

BOOL raven::RavenDeviceAttitudeActiveObject::ThorntonTemporalUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  uint64_t v11;
  double *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  int v20;
  int v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  double v33;
  void **v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t j;
  unsigned __int8 v47;
  __int16 v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE v53[24];
  void *v54;
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD v58[9];

  v3 = 0;
  v4 = 0;
  v56 = 0x300000003;
  v54 = &unk_1E25C78E0;
  v55 = xmmword_18D30BB60;
  v57 = v58;
  do
  {
    v5 = 0;
    v6 = *(int *)(a2 + 20);
    v7 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v5)
      {
        v8 = 0;
        v9 = v4 + v6 * v5;
        v10 = *(double *)(v7 + 8 * v9);
        v11 = *(_QWORD *)(a1 + 1080) + 8 * *(_DWORD *)(a1 + 1068) * (int)v5;
        v12 = (double *)(v7 + v3);
        do
        {
          v10 = v10 + *v12 * *(double *)(v11 + 8 * v8);
          *(double *)(v7 + 8 * v9) = v10;
          ++v8;
          v12 += v6;
        }
        while (v5 != v8);
      }
      v58[3 * v5++ + v4] = 0;
    }
    while (v5 != 3);
    v58[4 * v4++] = 0x3FF0000000000000;
    v3 += 8;
  }
  while (v4 != 3);
  v51 = 0x100000003;
  v49 = &unk_1E25C7790;
  v50 = xmmword_18D313070;
  v52 = v53;
  v13 = *(_DWORD *)(a1 + 812) + 1;
  v14 = *(_QWORD *)(a1 + 824);
  v15 = *(_QWORD *)(a3 + 32);
  v16 = *(int *)(a2 + 20);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = 2;
  for (i = 7; ; --i)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)&v53[8 * v18] = 0;
    v23 = 0.0;
    v24 = i * 8;
    do
    {
      v25 = v23 + *(double *)(v7 + 8 * (v18 + v20)) * *(double *)(v7 + 8 * (v18 + v20)) * *(double *)(v14 + 8 * v21);
      *(double *)&v53[8 * v18] = v25;
      v23 = v25 + *(double *)((char *)&v54 + v24) * *(double *)((char *)&v54 + v24) * *(double *)(v15 + v22);
      *(double *)&v53[8 * v18] = v23;
      v24 += 24;
      v22 += 8;
      v21 += v13;
      v20 += v6;
    }
    while (v22 != 24);
    if (v23 <= 0.0)
      break;
    if (!v18)
    {
      v44 = 0;
      for (j = 0; j != 24; j += 8)
      {
        *(_QWORD *)(v14 + 8 * v44) = *(_QWORD *)&v53[j];
        v44 += v13;
      }
      return v23 > 0.0;
    }
    v26 = 0;
    v27 = v18 * *(int *)(a1 + 1068);
    v28 = *(_QWORD *)(a1 + 1080);
    v29 = 5;
    do
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0.0;
      v34 = &v54;
      do
      {
        v33 = v33
            + *(double *)(v17 + 8 * (v26 + v30)) * *(double *)(v14 + 8 * v31) * *(double *)(v17 + 8 * (v18 + v30))
            + *(double *)&v34[v29] * *(double *)(v15 + v32) * *(double *)&v34[i];
        v34 += 3;
        v32 += 8;
        v31 += v13;
        v30 += v16;
      }
      while (v32 != 24);
      v35 = v26 + v27;
      *(double *)(v28 + 8 * (v26 + v27)) = v33 / *(double *)&v53[8 * v18];
      v36 = &v54;
      v37 = v17;
      v38 = 3;
      do
      {
        *(double *)(v37 + v29 * 8 - 40) = *(double *)(v37 + v29 * 8 - 40)
                                        - *(double *)(v28 + 8 * v35) * *(double *)(v37 + i * 8 - 40);
        *(double *)&v36[v29] = *(double *)&v36[v29] - *(double *)(v28 + 8 * v35) * *(double *)&v36[i];
        v36 += 3;
        v37 += 8 * v16;
        --v38;
      }
      while (v38);
      ++v26;
      ++v29;
    }
    while (v26 != v18);
    --v18;
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    v48 = 12;
    v47 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "D(%d) <= 0, matrix ! positive definite", v39, v40, v41, v42, v43, v18);
  }
  return v23 > 0.0;
}

uint64_t raven::RavenDeviceAttitudeActiveObject::UDFactor3x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  double *v18;
  uint64_t v19;
  int64_t v20;
  double v21;
  double *v22;
  int v23;
  uint64_t v24;

  v4 = 0;
  v5 = *(int *)(a2 + 20);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = 3;
  v8 = 2;
  do
  {
    v9 = 0;
    v10 = v8;
    v11 = v8 * v5;
    v12 = *(int *)(a3 + 20);
    v13 = *(_QWORD *)(a3 + 32);
    v14 = *(_DWORD *)(a4 + 20) + 1;
    v15 = *(_QWORD *)(a4 + 32);
    v16 = v14 * (int)v10;
    v17 = v12 * v10;
    v18 = (double *)(v13 + 8 * (v10 + v7 * v12));
    v19 = 8 * v12;
    v20 = v10;
    do
    {
      v21 = *(double *)(v6 + 8 * (v11 + v20));
      v22 = v18;
      v23 = v7 * v14;
      v24 = v4;
      v8 = v10 - 1;
      if (v10 <= 1)
      {
        do
        {
          v21 = v21 + -(v22[v9] * *(double *)(v15 + 8 * v23)) * *v22;
          v23 += v14;
          v22 = (double *)((char *)v22 + v19);
          --v24;
        }
        while (v24);
      }
      if (v10 == v20)
      {
        *(double *)(v15 + 8 * v16) = v21;
        *(_QWORD *)(v13 + 8 * ((int)v10 + v17)) = 0x3FF0000000000000;
      }
      else
      {
        *(double *)(v13 + 8 * (v17 + (int)v20)) = v21 / *(double *)(v15 + 8 * v16);
      }
      --v9;
    }
    while (v20-- > 0);
    --v7;
    ++v4;
  }
  while (v10);
  return 1;
}

void raven::RavenDeviceAttitudeActiveObject::UpdateDeviceAttitudeByLinearAcceleration(raven::RavenDeviceAttitudeActiveObject *this, const raven::TimeMarkEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BOOL8 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  double v19;
  uint64_t *v20;
  double v21;
  double v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  double *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  double v44;
  int8x16_t v45;
  double *v46;
  double v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  double *v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double *v58;
  double *v59;
  double v60;
  int v61;
  double v62;
  double v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  uint64_t v73;
  double *v74;
  double v75;
  double *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  float64x2_t v82;
  float64x2_t v83;
  uint64_t v84;
  double *v85;
  double v86;
  double *v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  cnprint::CNPrinter *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t *v101;
  cnprint::CNPrinter *v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  double v112;
  double v113;
  _BYTE *v114;
  unint64_t v115;
  unsigned __int8 v116;
  __int16 v117;
  _BYTE v118[24];
  uint64_t v119;
  uint64_t *v120;
  _BYTE v121[136];
  void *v122;
  __n128 v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  void *v127;
  __int128 v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE v131[72];
  __int128 v132;
  __int128 v133;
  char v134[16];
  int v135;
  double *v136;
  char v137[32];
  double *v138;
  char v139[16];
  int v140;
  double *v141;
  char v142[32];
  double *v143;
  void *v144;
  __int128 v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  double v149;
  void *v150;
  __int128 v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  void *v155;
  __int128 v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  void *v160;
  __int128 v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  void *v165;
  __int128 v166;
  uint64_t v167;
  double *v168;
  uint64_t v169;
  void *v170;
  __n128 v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD v174[3];
  char v175[4];
  __int128 v176;
  _DWORD v177[7];
  char v178[4];
  __int128 v179;
  _DWORD v180[7];
  char v181[4];
  __int128 v182;
  _DWORD v183[7];
  void *v184;
  __int128 v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  __int128 v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD v195[3];
  _BYTE v196[40];
  _BYTE v197[48];
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  char v213;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = (_BYTE *)(v2 + 6976);
  if (*(_BYTE *)(v2 + 8400))
  {
    v5 = v3;
    v6 = v2;
    v7 = (_QWORD *)(v2 + 6904);
    v8 = sub_18D295E20(v2, (_QWORD *)(v2 + 6904), 0.0);
    if (v8 && (v8 = sub_18D295E20(v6, (_QWORD *)(v6 + 496), 0.0)) && (v8 = sub_18D295F90(v6, (_QWORD *)(v6 + 7824))))
    {
      if (raven::RavenDeviceAttitudeActiveObject::IsMovementStraight((raven::RavenDeviceAttitudeActiveObject *)v6)
        && raven::RavenDeviceAttitudeActiveObject::IsDecelerationToStop((raven::RavenDeviceAttitudeActiveObject *)v6))
      {
        v193 = 0x100000003;
        v191 = &unk_1E25C7790;
        v11 = (__n128)xmmword_18D313070;
        v192 = xmmword_18D313070;
        v194 = v195;
        v12 = *(_QWORD *)(v6 + 528);
        v13 = v12 + *(_QWORD *)(v6 + 536);
        v14 = *(_QWORD *)(v6 + 504);
        v15 = *(_QWORD *)(v6 + 512);
        v16 = (_QWORD *)(*(_QWORD *)(v14 + 8 * ((v13 - 1) / 0x1A)) + 152 * ((v13 - 1) % 0x1A));
        v195[0] = v16[13];
        v195[1] = v16[14];
        v195[2] = v16[15];
        v189 = 0;
        v190 = 0;
        v186 = 0x100000003;
        v184 = &unk_1E25C7790;
        v185 = xmmword_18D313070;
        v187 = &v188;
        v114 = v4;
        if (v15 == v14
          || (v17 = (_QWORD *)(*(_QWORD *)(v14 + 8 * (v12 / 0x1A)) + 152 * (v12 % 0x1A)),
              v115 = *(_QWORD *)(v14 + 8 * (v13 / 0x1A)) + 152 * (v13 % 0x1A),
              v17 == (_QWORD *)v115))
        {
          v19 = -INFINITY;
        }
        else
        {
          v18 = (_QWORD *)(v14 + 8 * (v12 / 0x1A));
          v19 = -INFINITY;
          do
          {
            v20 = v187;
            *v187 = v17[13];
            v20[1] = v17[14];
            v20[2] = v17[15];
            v124 = 0x100000003;
            v122 = &unk_1E25C7790;
            v123 = v11;
            v125 = &v126;
            sub_18D0540FC((uint64_t)&v184, (uint64_t)&v191, (uint64_t)&v122);
            v119 = 0x100000003;
            *(_QWORD *)v118 = &unk_1E25C7790;
            *(_OWORD *)&v118[8] = xmmword_18D313070;
            v120 = (uint64_t *)v121;
            *(_QWORD *)&v196[24] = 0x100000134;
            *(_QWORD *)v196 = &unk_1E25C7640;
            *(_OWORD *)&v196[8] = xmmword_18D3130C0;
            *(_QWORD *)&v196[32] = v197;
            v129 = 0x100000003;
            v127 = &unk_1E25C7790;
            v128 = xmmword_18D313070;
            v130 = v131;
            sub_18D159EE0((uint64_t)&v122, (uint64_t)v118, (uint64_t)v196, (uint64_t)&v127, "2");
            v22 = v21;
            if (v21 > v19)
            {
              v189 = (*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
              v190 = v23;
              v19 = v22;
            }
            v17 += 19;
            if ((_QWORD *)((char *)v17 - *v18) == (_QWORD *)3952)
            {
              v24 = (_QWORD *)v18[1];
              ++v18;
              v17 = v24;
            }
            v11 = (__n128)xmmword_18D313070;
          }
          while (v17 != (_QWORD *)v115);
        }
        if (v19 >= *(double *)(*(_QWORD *)(v6 + 488) + 1064))
        {
          v33 = atomic_load((unsigned __int8 *)&qword_1ECF24238);
          if ((v33 & 1) == 0)
          {
            v111 = __cxa_guard_acquire(&qword_1ECF24238);
            v11 = (__n128)xmmword_18D313070;
            if (v111)
            {
              qword_1ECF24268 = 1;
              unk_1ECF24270 = 0;
              __cxa_guard_release(&qword_1ECF24238);
              v11 = (__n128)xmmword_18D313070;
            }
          }
          v181[0] = 0;
          v182 = 0u;
          memset(v183, 0, sizeof(v183));
          v178[0] = 0;
          v179 = 0u;
          memset(v180, 0, sizeof(v180));
          v175[0] = 0;
          v176 = 0u;
          memset(v177, 0, sizeof(v177));
          v34 = 0uLL;
          v35 = *(_QWORD *)(v6 + 504);
          if (*(_QWORD *)(v6 + 512) == v35)
          {
            v9.n128_u64[0] = 0;
            v10.n128_u64[0] = 0;
          }
          else
          {
            v36 = *(_QWORD *)(v6 + 528);
            v37 = (double *)(*(_QWORD *)(v35 + 8 * (v36 / 0x1A)) + 152 * (v36 % 0x1A));
            v38 = *(_QWORD *)(v35 + 8 * ((*(_QWORD *)(v6 + 536) + v36) / 0x1A))
                + 152 * ((*(_QWORD *)(v6 + 536) + v36) % 0x1A);
            v9.n128_u64[0] = 0;
            v10.n128_u64[0] = 0;
            if (v37 != (double *)v38)
            {
              v39 = (_QWORD *)(v35 + 8 * (v36 / 0x1A));
              do
              {
                v127 = (void *)(*(uint64_t (**)(double *, __n128, __n128, __n128, __n128))(*(_QWORD *)v37 + 16))(v37, v34, v9, v10, v11);
                *(_QWORD *)&v128 = v40;
                *(double *)v43.i64 = (double)CNTimeSpan::operator-((uint64_t)&v127, &v189, v41, v42);
                *(double *)v45.i64 = fabs(v44 + *(double *)v43.i64);
                *(_QWORD *)v196 = 0;
                *(_QWORD *)&v196[8] = 0;
                CNTimeSpan::SetTimeSpan((uint64_t *)v196, 0, v45, v43);
                *(_OWORD *)v118 = *(_OWORD *)v196;
                if (sub_18D03FE4C((double *)v118, (double *)&qword_1ECF24268))
                {
                  sub_18D1648E4((uint64_t)v181, v37 + 13, 1.0);
                  sub_18D1648E4((uint64_t)v178, v37 + 14, 1.0);
                  sub_18D1648E4((uint64_t)v175, v37 + 15, 1.0);
                }
                v37 += 19;
                if ((double *)((char *)v37 - *v39) == (double *)3952)
                {
                  v46 = (double *)v39[1];
                  ++v39;
                  v37 = v46;
                }
                v11 = (__n128)xmmword_18D313070;
              }
              while (v37 != (double *)v38);
              v10.n128_u64[0] = *(_QWORD *)&v183[1];
              v9.n128_u64[0] = *(_QWORD *)&v180[1];
              v34.n128_u64[0] = *(_QWORD *)&v177[1];
            }
          }
          v172 = 0x100000003;
          v170 = &unk_1E25C7790;
          v171 = v11;
          v173 = v174;
          v174[0] = v10.n128_u64[0];
          v174[1] = v9.n128_u64[0];
          v174[2] = v34.n128_u64[0];
          sub_18D187338((uint64_t)&v170, (uint64_t)&v191, (uint64_t)v196);
          sub_18D053AA8((uint64_t)&v170, (uint64_t)v196);
          sub_18D192CE4((uint64_t)&v170);
          v48 = v47;
          if (fabs(v47) > 0.000000015)
          {
            v167 = 0x100000003;
            v165 = &unk_1E25C7790;
            v166 = xmmword_18D313070;
            v168 = (double *)&v169;
            v49 = *(_QWORD *)(v6 + 7832);
            if (*(_QWORD *)(v6 + 7840) == v49
              || (v50 = *(_QWORD *)(v6 + 7856),
                  v51 = (_QWORD *)(v49 + 8 * (v50 >> 4)),
                  v52 = (double *)(*v51 + 2432 * (v50 & 0xF)),
                  v53 = *(_QWORD *)(v49 + (((*(_QWORD *)(v6 + 7864) + v50) >> 1) & 0x7FFFFFFFFFFFFFF8))
                      + 2432 * ((*(_DWORD *)(v6 + 7864) + (_DWORD)v50) & 0xF),
                  v52 == (double *)v53))
            {
              v54 = 0.0;
            }
            else
            {
              v54 = 0.0;
              v55 = -INFINITY;
              do
              {
                v56 = v52[194];
                v57 = v52[195] * v52[195] + v56 * v56 + v52[196] * v52[196];
                if (v55 < v57)
                {
                  v58 = v168;
                  *v168 = -v56;
                  v58[1] = -v52[195];
                  v58[2] = -v52[196];
                  LOBYTE(v58) = atomic_load((unsigned __int8 *)&qword_1ECF24248);
                  if ((v58 & 1) == 0)
                  {
                    v60 = v57;
                    v61 = __cxa_guard_acquire(&qword_1ECF24248);
                    v57 = v60;
                    if (v61)
                    {
                      *(double *)&qword_1ECF24240 = *(double *)(*(_QWORD *)(v6 + 488) + 1176)
                                                  * 0.0174532925
                                                  * (*(double *)(*(_QWORD *)(v6 + 488) + 1176)
                                                   * 0.0174532925);
                      __cxa_guard_release(&qword_1ECF24248);
                      v57 = v60;
                    }
                  }
                  if (*(double *)&qword_1ECF24240 >= (v52[197] + v52[200] + v52[202]) / v57)
                    v54 = (v52[197] + v52[200] + v52[202]) / v57;
                  else
                    v54 = *(double *)&qword_1ECF24240;
                  v55 = v57;
                }
                v52 += 304;
                if ((double *)((char *)v52 - *v51) == (double *)38912)
                {
                  v59 = (double *)v51[1];
                  ++v51;
                  v52 = v59;
                }
              }
              while (v52 != (double *)v53);
            }
            sub_18D192CE4((uint64_t)&v165);
            v63 = v62;
            if (fabs(v62) > 0.000000015)
            {
              v162 = 0x100000003;
              v160 = &unk_1E25C7790;
              v163 = &v164;
              v161 = xmmword_18D313070;
              sub_18D04BE88((uint64_t)&v160, 0.0);
              v163[1] = 0xBFF0000000000000;
              v157 = 0x100000003;
              v155 = &unk_1E25C7790;
              v158 = &v159;
              v156 = xmmword_18D313070;
              sub_18D04BE88((uint64_t)&v155, 0.0);
              v152 = 0x100000003;
              v150 = &unk_1E25C7790;
              v153 = &v154;
              v151 = xmmword_18D313070;
              sub_18D04BE88((uint64_t)&v150, 0.0);
              v149 = -1.0;
              v146 = 0x100000003;
              v144 = &unk_1E25C7790;
              v147 = &v148;
              v145 = xmmword_18D313070;
              sub_18D04BE88((uint64_t)&v144, 0.0);
              v64 = *(_QWORD *)(v6 + 7864) + *(_QWORD *)(v6 + 7856) - 1;
              v65 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 7832) + ((v64 >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 2432 * (v64 & 0xF));
              v66 = v147;
              *v147 = v65[184];
              v66[1] = v65[185];
              v66[2] = v65[186];
              if (raven::RavenDeviceAttitudeActiveObject::DeriveGravityVectorInEcefAndBody(v6, (uint64_t)&v144, (uint64_t)&v155, (uint64_t)&v150, &v149))
              {
                v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
                v69 = v68;
                sub_18D192CE4((uint64_t)&v155);
                v71.f64[0] = 1.0 / v70;
                sub_18D1B27A8((uint64_t)&v155, (uint64_t)v142, v71);
                v72.f64[0] = 1.0 / v63;
                sub_18D1B27A8((uint64_t)&v165, (uint64_t)v139, v72);
                v73 = v140;
                if (v140 < 1)
                {
                  v75 = 0.0;
                }
                else
                {
                  v74 = v141;
                  v75 = 0.0;
                  v76 = v143;
                  do
                  {
                    v77 = *v74++;
                    v78 = v77;
                    v79 = *v76++;
                    v75 = v75 + v78 * v79;
                    --v73;
                  }
                  while (v73);
                }
                v80 = acos(v75);
                sub_18D192CE4((uint64_t)&v150);
                v82.f64[0] = 1.0 / v81;
                sub_18D1B27A8((uint64_t)&v150, (uint64_t)v137, v82);
                v83.f64[0] = 1.0 / v48;
                sub_18D1B27A8((uint64_t)&v170, (uint64_t)v134, v83);
                v84 = v135;
                if (v135 < 1)
                {
                  v86 = 0.0;
                }
                else
                {
                  v85 = v136;
                  v86 = 0.0;
                  v87 = v138;
                  do
                  {
                    v88 = *v85++;
                    v89 = v88;
                    v90 = *v87++;
                    v86 = v86 + v89 * v90;
                    --v84;
                  }
                  while (v84);
                }
                v91 = vabdd_f64(v80, acos(v86));
                v92 = sqrt(v54 + v91 * 0.5 * (v91 * 0.5));
                v132 = 0uLL;
                *(_QWORD *)&v133 = 0;
                *((_QWORD *)&v133 + 1) = 0x3FF0000000000000;
                v129 = 0x300000003;
                v127 = &unk_1E25C78E0;
                v128 = xmmword_18D30BB60;
                v130 = v131;
                if (raven::RavenDeviceAttitudeActiveObject::AttitudeViaTwoVectors())
                {
                  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v132, (uint64_t)&v122);
                  if (cnprint::CNPrinter::GetLogLevel(v93) <= 1)
                  {
                    *(_WORD *)v196 = 12;
                    v118[0] = 1;
                    v112 = v69 + (double)v67;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v196, v118, "DevAtt,deviceEcefAttitude,t,%lf,type,%hu,Rb2e,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,Pb2e,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,%.6lf,aEcefX,%.3lf,aEcefY,%.3lf,aEcefZ,%.3lf,aBodyX,%.3lf,aBodyY,%.3lf,aBodyZ,%.3lf,aUnc,%.3lf,gEcefX,%.3lf,gEcefY,%.3lf,gEcefZ,%.3lf,gBodyX,%.3lf,gBodyY,%.3lf,gBodyZ,%.3lf,gUnc,%.3lf", v94, v95, v96, v97, v98, SLOBYTE(v112));
                  }
                  *v114 = 1;
                  if ((__int128 *)(v6 + 568) != &v132)
                  {
                    v99 = v133;
                    *(_OWORD *)(v6 + 568) = v132;
                    *(_OWORD *)(v6 + 584) = v99;
                  }
                  sub_18D053AA8(v6 + 600, (uint64_t)&v127);
                  sub_18D053AA8(v6 + 712, (uint64_t)&v144);
                  *(_QWORD *)(v6 + 776) = v67;
                  *(double *)(v6 + 784) = v69;
                  v119 = 0x400000004;
                  *(_QWORD *)v118 = &unk_1E25C7FA0;
                  *(_OWORD *)&v118[8] = xmmword_18D313080;
                  v120 = (uint64_t *)v121;
                  *(_OWORD *)v196 = v132;
                  *(_OWORD *)&v196[16] = v133;
                  if (raven::RavenDeviceAttitudeActiveObject::convertRvVarToQuaternionVar(v100, (const cnquaternion::CNQuaternion *)v196, (uint64_t)&v127, (uint64_t)v118))
                  {
                    *(_OWORD *)&v196[24] = 0u;
                    memset(v197, 0, sizeof(v197));
                    v200 = v132;
                    v212 = 1;
                    *(_QWORD *)v196 = &unk_1E25C2158;
                    *(_QWORD *)&v196[8] = v67;
                    *(double *)&v196[16] = v69;
                    v198 = 0;
                    v199 = 0x7FF8000000000000;
                    v201 = v133;
                    v202 = *v120;
                    v203 = v120[*(int *)&v118[20]];
                    v204 = v120[2 * *(int *)&v118[20]];
                    v205 = v120[3 * *(_DWORD *)&v118[20]];
                    v206 = v120[*(_DWORD *)&v118[20] + 1];
                    v101 = &v120[2 * *(_DWORD *)&v118[20]];
                    v207 = v101[1];
                    v208 = v120[3 * *(_DWORD *)&v118[20] + 1];
                    v209 = v101[2];
                    v210 = v120[3 * *(_DWORD *)&v118[20] + 2];
                    v211 = v120[3 * *(_DWORD *)&v118[20] + 3];
                    v213 = 1;
                    sub_18D21C0EC(v6, (uint64_t)v196);
                    if (!cnprint::CNPrinter::GetLogLevel(v102))
                    {
                      v117 = 12;
                      v116 = 0;
                      v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
                      v113 = v104 + (double)v103;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v117, &v116, "t,%.3f, Attitude Event by Linear Acceleration", v105, v106, v107, v108, v109, SLOBYTE(v113));
                    }
                  }
                }
                *(_QWORD *)v196 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
                *(_QWORD *)&v196[8] = v110;
                raven::RavenDeviceAttitudeActiveObject::UpdateDeviceVehicleAttitude(v6, (uint64_t)&v170, (uint64_t)&v160, (uint64_t)v196, v92);
              }
              sub_18D2960D0((_QWORD *)(v6 + 496));
            }
          }
        }
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v8) <= 1)
    {
      *(_WORD *)v196 = 12;
      v118[0] = 1;
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v27 = v26 + (double)v25;
      sub_18D295E20(v6, v7, 0.0);
      sub_18D295E20(v6, (_QWORD *)(v6 + 496), 0.0);
      sub_18D295F90(v6, (_QWORD *)(v6 + 7824));
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v196, v118, "DevAtt,IsManeuverDetectionBufferFull,t,%lf,%d,%d,%d", v28, v29, v30, v31, v32, SLOBYTE(v27));
    }
  }
}

BOOL sub_18D295E20(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  double v24;
  BOOL v25;
  uint64_t v27[2];
  uint64_t v28[2];
  _QWORD v29[2];
  _QWORD v30[2];

  v3 = a2[5];
  if (!v3)
    return 0;
  v7 = *(_QWORD *)(a2[1] + 8 * ((v3 + a2[4] - 1) / 0x1AuLL)) + 152 * ((v3 + a2[4] - 1) % 0x1AuLL);
  v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 16))(v7);
  v10 = v9;
  v11 = v9;
  v12 = *(_QWORD *)(a2[1] + 8 * (a2[4] / 0x1AuLL)) + 152 * (a2[4] % 0x1AuLL);
  v30[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 16))(v12);
  v30[1] = v13;
  v14.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 488) + 1048);
  v28[0] = 0;
  v28[1] = 0;
  CNTimeSpan::SetTimeSpan(v28, 0, v14, v15);
  v29[0] = CNTimeSpan::operator+((uint64_t)v30, v28, v16, v17);
  v29[1] = v18;
  v27[0] = 0;
  v27[1] = 0;
  *(double *)v19.i64 = a3;
  CNTimeSpan::SetTimeSpan(v27, 0, v19, v20);
  v23 = CNTimeSpan::operator+((uint64_t)v29, v27, v21, v22);
  if (v8)
    v25 = 1;
  else
    v25 = (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (!v25 || !v23 && (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return v11 > v24;
  if (v8 == v23)
    return v11 > v24;
  return v8 > v23;
}

BOOL sub_18D295F90(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  double v20;
  BOOL v21;
  _QWORD v23[2];
  uint64_t v24[2];
  _QWORD v25[2];
  _QWORD v26[2];

  v2 = a2[5];
  if (!v2)
    return 0;
  v5 = *(_QWORD *)(a2[1] + (((unint64_t)(v2 + a2[4] - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
     + 2432 * (((_DWORD)v2 + *((_DWORD *)a2 + 8) - 1) & 0xF);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v8 = v7;
  v9 = v7;
  v10 = *(_QWORD *)(a2[1] + ((a2[4] >> 1) & 0x7FFFFFFFFFFFFFF8)) + 2432 * (a2[4] & 0xFLL);
  v26[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  v26[1] = v11;
  v12.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 488) + 1048);
  v24[0] = 0;
  v24[1] = 0;
  CNTimeSpan::SetTimeSpan(v24, 0, v12, v13);
  v25[0] = CNTimeSpan::operator+((uint64_t)v26, v24, v14, v15);
  v25[1] = v16;
  v23[0] = 0;
  v23[1] = 0;
  v19 = CNTimeSpan::operator+((uint64_t)v25, v23, v17, v18);
  if (v6)
    v21 = 1;
  else
    v21 = (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (!v21 || !v19 && (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return v9 > v20;
  if (v6 == v19)
    return v9 > v20;
  return v6 > v19;
}

void sub_18D2960D0(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x1A];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x1A] + 152 * ((a1[5] + v5) % 0x1A);
    if ((char *)*v6 + 152 * (v5 % 0x1A) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 152 * (v5 % 0x1A));
      do
      {
        v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 3952)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v12 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = v12 - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v13 = 13;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 26;
  }
  a1[4] = v13;
}

void raven::RavenDeviceAttitudeActiveObject::UpdateDeviceAttitudeByWahbaSolution(raven::RavenDeviceAttitudeActiveObject *this, const raven::TimeMarkEvent *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int8x16_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int64_t v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  _QWORD *i;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  double *v147;
  _QWORD *v148;
  int v149;
  double v150;
  double v151;
  cnstatistics *v152;
  unsigned int v153;
  double *v154;
  double v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  __int128 *v159;
  uint64_t v160;
  float64x2_t v161;
  double v162;
  double v163;
  float64x2_t *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  double v168;
  _QWORD *v169;
  float64x2_t v170;
  float64x2_t v171;
  uint64_t v172;
  double *v173;
  double *v174;
  double v175;
  double v176;
  double v177;
  float64x2_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  uint64_t *v184;
  int v185;
  int v186;
  int j;
  unint64_t v188;
  double v189;
  double v190;
  _BOOL4 v191;
  double *v192;
  double v193;
  uint64_t v194;
  double *v195;
  double v196;
  double *v197;
  double v198;
  double v199;
  double v200;
  float64x2_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  double v209;
  double v210;
  int8x16_t v211;
  double v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  double v216;
  double v217;
  uint64_t v218;
  double v219;
  double v220;
  double v221;
  uint64_t v222;
  unint64_t v223;
  double v224;
  uint64_t v225;
  double v226;
  double v227;
  cnstatistics *v228;
  double v229;
  double v230;
  cnstatistics *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  float64x2_t v243;
  __n128 v244;
  int v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  cnprint::CNPrinter *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  _BOOL4 v266;
  int v267;
  char **v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  unint64_t v272;
  unsigned __int8 *v273;
  unsigned int v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  __int128 v279;
  uint64_t v280;
  _BYTE *v281;
  _BYTE v282[72];
  void *v283;
  __int128 v284;
  uint64_t v285;
  double *v286;
  _OWORD v287[4];
  void *v288;
  __int128 v289;
  uint64_t v290;
  double *v291;
  __int128 v292;
  uint64_t v293;
  void *v294;
  __int128 v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  void *v299;
  int v300;
  int v301;
  int v302;
  int v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD v306[3];
  void *v307;
  __int128 v308;
  uint64_t v309;
  _BYTE *v310;
  _BYTE v311[72];
  void *v312;
  __int128 v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  double v317[4];
  void *v318;
  __int128 v319;
  uint64_t v320;
  double *v321;
  uint64_t v322;
  void *v323;
  __int128 v324;
  uint64_t v325;
  float64x2_t *v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  void *v330;
  __int128 v331;
  uint64_t v332;
  _BYTE *v333;
  _BYTE v334[24];
  void *v335;
  __int128 v336;
  uint64_t v337;
  double *v338;
  _QWORD v339[3];
  void *v340;
  __int128 v341;
  uint64_t v342;
  double *v343;
  double v344[3];
  void *v345;
  __int128 v346;
  uint64_t v347;
  void **v348;
  void *v349;
  __int128 v350;
  double v351[2];
  __int128 v352;
  _BYTE v353[24];
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  double v359;
  double v360;
  double v361;
  double v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unsigned __int8 v373;
  char v374;
  void *v375;
  __int128 v376;
  uint64_t v377;
  _BYTE *v378;
  _BYTE v379[72];
  _BYTE v380[24];
  uint64_t v381;
  _QWORD *v382;
  _QWORD v383[13];

  v383[10] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 983);
  if (v2)
  {
    v4 = v2 + *((_QWORD *)this + 982) - 1;
    v5 = *(_QWORD *)(*((_QWORD *)this + 979) + ((v4 >> 1) & 0x7FFFFFFFFFFFFFF8));
    v6 = v4 & 0xF;
    if (*(_BYTE *)(v5 + 2432 * v6 + 209) == 2
      && *(_BYTE *)(v5 + 2432 * v6 + 1464)
      && *(_BYTE *)(v5 + 2432 * v6 + 1544))
    {
      v8 = (unsigned __int8 *)this + 7088;
      *((_WORD *)this + 4172) = 1;
      *(_QWORD *)&v352 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      *((_QWORD *)&v352 + 1) = v9;
      v10 = *((_QWORD *)this + 983) + *((_QWORD *)this + 982) - 1;
      v11 = *(_QWORD *)(*((_QWORD *)this + 979) + ((v10 >> 1) & 0x7FFFFFFFFFFFFFF8));
      v12 = v10 & 0xF;
      v15 = CNTimeSpan::operator-((uint64_t)&v352, (_QWORD *)this + 938, v13, v14);
      v17 = v16;
      v274 = v12;
      v276 = v11;
      v18 = (double *)(v11 + 2432 * v12);
      v19 = v18[194];
      v20 = v18[195];
      v21 = v18[196];
      *(double *)&v22 = v18[197] + v18[200];
      v23 = *(double *)&v22 + v18[202];
      v24 = *((_QWORD *)this + 61);
      LODWORD(v22) = *(_DWORD *)(v24 + 984);
      v25 = vcvtpd_u64_f64(*(double *)(v24 + 648) * (double)v22) + 1;
      v26 = *((_QWORD *)this + 1049);
      if (v26 >= v25)
      {
        v27 = *((_QWORD *)this + 1048);
        do
        {
          *((_QWORD *)this + 1049) = --v26;
          *((_QWORD *)this + 1048) = ++v27;
          if (v27 >= 0x100)
          {
            operator delete(**((void ***)this + 1045));
            *((_QWORD *)this + 1045) += 8;
            v27 = *((_QWORD *)this + 1048) - 128;
            *((_QWORD *)this + 1048) = v27;
            v26 = *((_QWORD *)this + 1049);
          }
        }
        while (v26 >= v25);
      }
      *(_QWORD *)&v351[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
      v351[1] = v29;
      if (v23 > 0.0)
      {
        v30 = *((_QWORD *)this + 1049);
        if (!v30
          || sub_18D03F608(v351, (double *)(*(_QWORD *)(*((_QWORD *)this + 1045)+ (((unint64_t)(v30 + *((_QWORD *)this + 1048) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * ((v30 + *((_QWORD *)this + 1048) - 1) & 0x7F))))
        {
          v271 = v17;
          v277 = v15;
          v31 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(_QWORD *)a2 + 16))(a2);
          v269 = v32;
          v270 = v31;
          v8 = (unsigned __int8 *)this + 7088;
          v268 = (char **)((char *)this + 8360);
          v33 = (char *)*((_QWORD *)this + 1046);
          v34 = (char *)*((_QWORD *)this + 1045);
          v35 = v33 - v34;
          if (v33 == v34)
            v36 = 0;
          else
            v36 = 16 * (v33 - v34) - 1;
          v37 = *((_QWORD *)this + 1048);
          v38 = *((_QWORD *)this + 1049);
          v39 = v38 + v37;
          if (v36 == v38 + v37)
          {
            if (v37 < 0x80)
            {
              v54 = v35 >> 3;
              v55 = (char *)*((_QWORD *)this + 1047);
              v56 = (char *)*((_QWORD *)this + 1044);
              if (v35 >> 3 >= (unint64_t)((v55 - v56) >> 3))
              {
                if (v55 == v56)
                  v59 = 1;
                else
                  v59 = (v55 - v56) >> 2;
                v60 = (char *)sub_18D07BF3C(v59);
                v62 = v61;
                v63 = operator new(0x1000uLL);
                v64 = &v60[8 * v54];
                v65 = v62;
                v66 = &v60[8 * v62];
                if (v54 == v65)
                {
                  v67 = 8 * v54;
                  if (v35 < 1)
                  {
                    v105 = v63;
                    v106 = v67 >> 2;
                    if (v33 == v34)
                      v107 = 1;
                    else
                      v107 = v106;
                    v108 = (char *)sub_18D07BF3C(v107);
                    v64 = &v108[8 * (v107 >> 2)];
                    v66 = &v108[8 * v109];
                    if (v60)
                      operator delete(v60);
                    v60 = v108;
                    v63 = v105;
                  }
                  else
                  {
                    v68 = v67 >> 3;
                    if (v68 >= -1)
                      v69 = v68 + 1;
                    else
                      v69 = v68 + 2;
                    v64 -= 8 * (v69 >> 1);
                  }
                }
                *(_QWORD *)v64 = v63;
                v110 = v64 + 8;
                v111 = *((_QWORD *)this + 1046);
                for (i = (_QWORD *)((char *)this + 8360); v111 != *i; v64 -= 8)
                {
                  if (v64 == v60)
                  {
                    if (v110 >= v66)
                    {
                      if (v66 == v60)
                        v117 = 1;
                      else
                        v117 = (v66 - v60) >> 2;
                      v118 = (char *)sub_18D07BF3C(v117);
                      v120 = v118;
                      v64 = &v118[(2 * v117 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v121 = v110 - v60;
                      v70 = v110 == v60;
                      v110 = v64;
                      if (!v70)
                      {
                        v110 = &v64[v121 & 0xFFFFFFFFFFFFFFF8];
                        v122 = 8 * (v121 >> 3);
                        v123 = &v118[(2 * v117 + 6) & 0xFFFFFFFFFFFFFFF8];
                        v124 = (uint64_t *)v60;
                        do
                        {
                          v125 = *v124++;
                          *(_QWORD *)v123 = v125;
                          v123 += 8;
                          v122 -= 8;
                        }
                        while (v122);
                      }
                      v66 = &v118[8 * v119];
                      if (v60)
                        operator delete(v60);
                      v60 = v120;
                      i = (_QWORD *)((char *)this + 8360);
                    }
                    else
                    {
                      v113 = (v66 - v110) >> 3;
                      if (v113 >= -1)
                        v114 = v113 + 1;
                      else
                        v114 = v113 + 2;
                      v115 = v114 >> 1;
                      v64 = &v60[8 * (v114 >> 1)];
                      v116 = v60;
                      if (v110 != v60)
                      {
                        memmove(v64, v60, v110 - v60);
                        v116 = v110;
                      }
                      v110 = &v116[8 * v115];
                    }
                  }
                  v126 = *(_QWORD *)(v111 - 8);
                  v111 -= 8;
                  *((_QWORD *)v64 - 1) = v126;
                }
                v127 = (void *)*((_QWORD *)this + 1044);
                *((_QWORD *)this + 1044) = v60;
                *((_QWORD *)this + 1045) = v64;
                *((_QWORD *)this + 1046) = v110;
                *((_QWORD *)this + 1047) = v66;
                v8 = (unsigned __int8 *)this + 7088;
                v15 = v277;
                v17 = v271;
                if (v127)
                  operator delete(v127);
              }
              else
              {
                v57 = operator new(0x1000uLL);
                v58 = v57;
                if (v55 == v33)
                {
                  if (v34 == v56)
                  {
                    if (v33 == v34)
                      v83 = 1;
                    else
                      v83 = (v55 - v34) >> 2;
                    v84 = (char *)sub_18D07BF3C(v83);
                    v34 = &v84[8 * ((v83 + 3) >> 2)];
                    v86 = (uint64_t *)*((_QWORD *)this + 1045);
                    v87 = v34;
                    v88 = *((_QWORD *)this + 1046) - (_QWORD)v86;
                    if (v88)
                    {
                      v87 = &v34[v88 & 0xFFFFFFFFFFFFFFF8];
                      v89 = 8 * (v88 >> 3);
                      v90 = &v84[8 * ((v83 + 3) >> 2)];
                      do
                      {
                        v91 = *v86++;
                        *(_QWORD *)v90 = v91;
                        v90 += 8;
                        v89 -= 8;
                      }
                      while (v89);
                    }
                    v92 = (void *)*((_QWORD *)this + 1044);
                    *((_QWORD *)this + 1044) = v84;
                    *((_QWORD *)this + 1045) = v34;
                    *((_QWORD *)this + 1046) = v87;
                    *((_QWORD *)this + 1047) = &v84[8 * v85];
                    if (v92)
                    {
                      operator delete(v92);
                      v34 = *v268;
                    }
                  }
                  *((_QWORD *)v34 - 1) = v58;
                  v93 = (char *)*((_QWORD *)this + 1045);
                  *((_QWORD *)this + 1045) = v93 - 8;
                  v94 = *((_QWORD *)v93 - 1);
                  *((_QWORD *)this + 1045) = v93;
                  v95 = (char *)*((_QWORD *)this + 1046);
                  if (v95 == *((char **)this + 1047))
                  {
                    v96 = *((_QWORD *)this + 1044);
                    v97 = (uint64_t)&v93[-v96];
                    if ((unint64_t)v93 <= v96)
                    {
                      v128 = (uint64_t)&v95[-v96];
                      v70 = v128 == 0;
                      v129 = v128 >> 2;
                      if (v70)
                        v130 = 1;
                      else
                        v130 = v129;
                      v131 = (char *)sub_18D07BF3C(v130);
                      v133 = &v131[8 * (v130 >> 2)];
                      v134 = (uint64_t *)*((_QWORD *)this + 1045);
                      v95 = v133;
                      v135 = *((_QWORD *)this + 1046) - (_QWORD)v134;
                      if (v135)
                      {
                        v95 = &v133[v135 & 0xFFFFFFFFFFFFFFF8];
                        v136 = 8 * (v135 >> 3);
                        v137 = &v131[8 * (v130 >> 2)];
                        do
                        {
                          v138 = *v134++;
                          *(_QWORD *)v137 = v138;
                          v137 += 8;
                          v136 -= 8;
                        }
                        while (v136);
                      }
                      v139 = (void *)*((_QWORD *)this + 1044);
                      *((_QWORD *)this + 1044) = v131;
                      *((_QWORD *)this + 1045) = v133;
                      *((_QWORD *)this + 1046) = v95;
                      *((_QWORD *)this + 1047) = &v131[8 * v132];
                      if (v139)
                      {
                        operator delete(v139);
                        v95 = (char *)*((_QWORD *)this + 1046);
                      }
                    }
                    else
                    {
                      v98 = v97 >> 3;
                      v46 = v97 >> 3 < -1;
                      v99 = (v97 >> 3) + 2;
                      if (v46)
                        v100 = v99;
                      else
                        v100 = v98 + 1;
                      v101 = -(v100 >> 1);
                      v102 = v100 >> 1;
                      v103 = &v93[-8 * v102];
                      v104 = v95 - v93;
                      if (v95 != v93)
                      {
                        memmove(&v93[-8 * v102], v93, v95 - v93);
                        v93 = *v268;
                      }
                      v95 = &v103[v104];
                      *((_QWORD *)this + 1046) = &v103[v104];
                      *((_QWORD *)this + 1045) = &v93[8 * v101];
                    }
                  }
                  *(_QWORD *)v95 = v94;
                }
                else
                {
                  *(_QWORD *)v33 = v57;
                }
                *((_QWORD *)this + 1046) += 8;
                v8 = (unsigned __int8 *)this + 7088;
                v15 = v277;
                v17 = v271;
              }
            }
            else
            {
              *((_QWORD *)this + 1048) = v37 - 128;
              v42 = *(_QWORD *)v34;
              v41 = v34 + 8;
              v40 = v42;
              *((_QWORD *)this + 1045) = v41;
              v15 = v277;
              if (v33 == *((char **)this + 1047))
              {
                v43 = *((_QWORD *)this + 1044);
                v44 = (uint64_t)&v41[-v43];
                if ((unint64_t)v41 <= v43)
                {
                  v71 = (uint64_t)&v33[-v43];
                  v70 = v71 == 0;
                  v72 = v71 >> 2;
                  if (v70)
                    v73 = 1;
                  else
                    v73 = v72;
                  v74 = (char *)sub_18D07BF3C(v73);
                  v76 = &v74[8 * (v73 >> 2)];
                  v77 = (uint64_t *)*((_QWORD *)this + 1045);
                  v33 = v76;
                  v78 = *((_QWORD *)this + 1046) - (_QWORD)v77;
                  if (v78)
                  {
                    v33 = &v76[v78 & 0xFFFFFFFFFFFFFFF8];
                    v79 = 8 * (v78 >> 3);
                    v80 = &v74[8 * (v73 >> 2)];
                    do
                    {
                      v81 = *v77++;
                      *(_QWORD *)v80 = v81;
                      v80 += 8;
                      v79 -= 8;
                    }
                    while (v79);
                  }
                  v82 = (void *)*((_QWORD *)this + 1044);
                  *((_QWORD *)this + 1044) = v74;
                  *((_QWORD *)this + 1045) = v76;
                  *((_QWORD *)this + 1046) = v33;
                  *((_QWORD *)this + 1047) = &v74[8 * v75];
                  v8 = (unsigned __int8 *)this + 7088;
                  v15 = v277;
                  if (v82)
                  {
                    operator delete(v82);
                    v33 = (char *)*((_QWORD *)this + 1046);
                  }
                }
                else
                {
                  v45 = v44 >> 3;
                  v46 = v44 >> 3 < -1;
                  v47 = (v44 >> 3) + 2;
                  if (v46)
                    v48 = v47;
                  else
                    v48 = v45 + 1;
                  v49 = -(v48 >> 1);
                  v50 = v48 >> 1;
                  v51 = &v41[-8 * v50];
                  v52 = v33 - v41;
                  if (v33 != v41)
                  {
                    memmove(&v41[-8 * v50], v41, v33 - v41);
                    v33 = *v268;
                  }
                  v53 = &v33[8 * v49];
                  v33 = &v51[v52];
                  *((_QWORD *)this + 1046) = &v51[v52];
                  *((_QWORD *)this + 1045) = v53;
                  v8 = (unsigned __int8 *)this + 7088;
                  v15 = v277;
                  v17 = v271;
                }
              }
              *(_QWORD *)v33 = v40;
              *((_QWORD *)this + 1046) += 8;
            }
            v34 = (char *)*((_QWORD *)this + 1045);
            v38 = *((_QWORD *)this + 1049);
            v39 = v38 + *((_QWORD *)this + 1048);
          }
          else
          {
            v15 = v277;
          }
          v140 = *(_QWORD *)&v34[(v39 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v39 & 0x7F);
          *(_QWORD *)v140 = v270;
          *(_QWORD *)(v140 + 8) = v269;
          *(double *)(v140 + 16) = sqrt(v20 * v20 + v19 * v19 + v21 * v21);
          *(double *)(v140 + 24) = v23;
          *((_QWORD *)this + 1049) = v38 + 1;
        }
      }
      v28.i64[0] = 0x3FEE666666666666;
      if (v17 + (double)v15 >= 0.95)
      {
        v141 = *((_QWORD *)this + 61);
        if (*((_QWORD *)this + 1042) >= (unint64_t)*(unsigned int *)(v141 + 984))
        {
          v142 = 1.0;
          v273 = v8;
          if (v8[88]
            && ((v143 = *((_QWORD *)this + 1049), v144 = *v8, v144 > 7) || v144 == 5)
            && v143 >= 3)
          {
            v202 = *((_QWORD *)this + 1048);
            v203 = *((_QWORD *)this + 1045);
            v204 = *(_QWORD *)(v203 + ((v202 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v202 & 0x7F);
            *(_OWORD *)v353 = *(_OWORD *)v204;
            v205 = *(double *)(v204 + 16);
            v206 = *(_QWORD *)(v203 + (((v202 + 1) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v202 + 1) & 0x7F);
            v207 = CNTimeSpan::operator-(v206, (_QWORD *)v204, *(int8x16_t *)v353, v28);
            v209 = v208 + (double)v207;
            v210 = (*(double *)(v206 + 16) - v205) / v209;
            *(double *)v211.i64 = *(double *)(v206 + 24) + *(double *)(v204 + 24);
            v212 = *(double *)v211.i64 / (v209 * v209);
            v213 = v143 - 2;
            v214 = v202 + 2;
            do
            {
              v215 = *(_QWORD *)(v203 + ((v214 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v214 & 0x7F);
              *(_OWORD *)v380 = *(_OWORD *)v215;
              v216 = *(double *)(v215 + 16);
              v217 = *(double *)(v215 + 24);
              v218 = CNTimeSpan::operator-((uint64_t)v380, v353, *(int8x16_t *)v380, v211);
              v220 = v219 + (double)v218;
              *(double *)v211.i64 = v216 - (v205 + v220 * v210);
              v221 = v212 * v220 / (v217 + v212 * v220 * v220);
              v210 = v210 + v221 * *(double *)v211.i64;
              v212 = v212 + -(v221 * v220) * v212;
              ++v214;
              --v213;
            }
            while (v213);
            v222 = v143 - 1;
            v223 = v202 + 1;
            v224 = 0.0;
            do
            {
              v225 = *(_QWORD *)(v203 + ((v223 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v223 & 0x7F);
              *(_OWORD *)v380 = *(_OWORD *)v225;
              v226 = *(double *)(v225 + 16);
              v227 = *(double *)(v225 + 24);
              v228 = (cnstatistics *)CNTimeSpan::operator-((uint64_t)v380, v353, *(int8x16_t *)v380, v211);
              *(double *)v211.i64 = (double)(uint64_t)v228;
              v230 = v226 - (v205 + (v229 + (double)(uint64_t)v228) * v210);
              v224 = v224 + v230 * v230 / v227;
              ++v223;
              --v222;
            }
            while (v222);
            cnstatistics::InverseChi2(v228, *(double *)(v141 + 912), (double)(v143 - 2));
            if (v224 <= v237)
            {
              if ((*(_QWORD *)&v210 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                || (*(_QWORD *)&v212 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                || v212 <= 0.0)
              {
                *(_WORD *)v380 = 12;
                LOBYTE(v375) = 4;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v380, (unsigned __int8 *)&v375, "GNSS-derived acceleration,x,%.3lf,P,%.3lf", v232, v233, v234, v235, v236, SLOBYTE(v210));
                v142 = 1.0;
              }
              else
              {
                v255 = 0.0;
                if (v210 < 0.0)
                  v255 = -1.0;
                if (v210 > 0.0)
                  v255 = 1.0;
                v142 = v255;
                v273[1256] = fabs(v210 / sqrt(v212)) > cnstatistics::InverseNormal(v231, (1.0 - *(double *)(*((_QWORD *)this + 61) + 912)) * -0.5+ 1.0, 0.0, 1.0);
                if (!cnprint::CNPrinter::GetLogLevel(v256))
                {
                  *(_WORD *)v380 = 12;
                  LOBYTE(v375) = 0;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v380, (unsigned __int8 *)&v375, "GNSS-derived acceleration result,reliable,%d,x,%.3lf,std,%.3lf,thresh,%.3lf", v257, v258, v259, v260, v261, v273[1256]);
                }
              }
            }
            else
            {
              v142 = 1.0;
              if (cnprint::CNPrinter::GetLogLevel(v231) <= 1)
              {
                *(_WORD *)v380 = 12;
                LOBYTE(v375) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v380, (unsigned __int8 *)&v375, "Failed SOS test when estimating slope,sos,%.3lf,threshold,%.3lf,dof,%u", v238, v239, v240, v241, v242, SLOBYTE(v224));
              }
            }
            v267 = 1;
          }
          else
          {
            v267 = 0;
          }
          v347 = 0x100000003;
          v345 = &unk_1E25C7790;
          v346 = xmmword_18D313070;
          v348 = &v349;
          v145 = v276 + 2432 * v274;
          *(_OWORD *)v380 = *(_OWORD *)(v145 + 1472);
          *(_QWORD *)&v380[16] = *(_QWORD *)(v145 + 1488);
          v307 = 0;
          v275 = sub_18D1C5E2C();
          v349 = v375;
          v350 = v376;
          v342 = 0x100000003;
          v340 = &unk_1E25C7790;
          v341 = xmmword_18D313070;
          v343 = v344;
          v146 = *((_QWORD *)this + 1042) + *((_QWORD *)this + 1041) - 1;
          v147 = (double *)(*(_QWORD *)(*((_QWORD *)this + 1038) + 8 * (v146 / 0x14)) + 200 * (v146 % 0x14));
          v344[0] = -v147[13];
          v344[1] = -v147[14];
          v344[2] = -v147[15];
          v337 = 0x100000003;
          v335 = &unk_1E25C7790;
          v336 = xmmword_18D313070;
          v338 = (double *)v339;
          v381 = 0x300000003;
          *(_QWORD *)v380 = &unk_1E25C78E0;
          v382 = v383;
          *(_OWORD *)&v380[8] = xmmword_18D30BB60;
          sub_18D04BE88((uint64_t)v380, 0.0);
          *(double *)v339 = v18[194];
          *(double *)&v339[1] = v18[195];
          *(double *)&v339[2] = v18[196];
          v148 = v382;
          *v382 = *((_QWORD *)v18 + 197);
          v149 = *(_DWORD *)&v380[20];
          v148[*(_DWORD *)&v380[20] + 1] = *((_QWORD *)v18 + 200);
          v148[2 * v149 + 2] = *((_QWORD *)v18 + 202);
          v377 = 0x100000003;
          v375 = &unk_1E25C7790;
          v376 = xmmword_18D313070;
          v378 = v379;
          *(_QWORD *)&v354 = 0x100000134;
          *(_QWORD *)v353 = &unk_1E25C7640;
          *(_OWORD *)&v353[8] = xmmword_18D3130C0;
          *((_QWORD *)&v354 + 1) = &v355;
          v309 = 0x100000003;
          v307 = &unk_1E25C7790;
          v308 = xmmword_18D313070;
          v310 = v311;
          sub_18D159EE0((uint64_t)&v335, (uint64_t)&v375, (uint64_t)v353, (uint64_t)&v307, "2");
          if (v275 || (v151 = v150, fabs(v150) <= 0.000000015))
          {
            v332 = 0x100000003;
            v330 = &unk_1E25C7790;
            v331 = xmmword_18D313070;
            v333 = v334;
          }
          else
          {
            *(_QWORD *)&v354 = 0x300000001;
            *(_QWORD *)v353 = &unk_1E25C6C20;
            *(_OWORD *)&v353[8] = xmmword_18D314670;
            *((_QWORD *)&v354 + 1) = &v355;
            *(double *)&v355 = *v338 / v150;
            *((double *)&v355 + 1) = v338[1] / v150;
            *(double *)&v356 = v338[2] / v150;
            sub_18D186B40((uint64_t)v353, (uint64_t)v380, (uint64_t)&v375);
            sub_18D297AD0((uint64_t)&v307, (uint64_t)v353);
            sub_18D186AE0((uint64_t)&v375, (uint64_t)&v307, (uint64_t)&v288);
            if (v273[88] && (v153 = *v273, v153 <= 7) && ((1 << v153) & 0xCE) != 0)
              v154 = (double *)(*((_QWORD *)this + 61) + 936);
            else
              v154 = (double *)(*((_QWORD *)this + 61) + 928);
            v155 = cnstatistics::InverseNormal(v152, 1.0 - *v154, 0.0, sqrt(*v291));
            v332 = 0x100000003;
            v330 = &unk_1E25C7790;
            v331 = xmmword_18D313070;
            v333 = v334;
            if (v151 >= v155)
            {
              v156 = *((_QWORD *)this + 1042) + *((_QWORD *)this + 1041) - 1;
              v157 = *(_QWORD *)(*((_QWORD *)this + 1038) + 8 * (v156 / 0x14));
              v158 = v156 % 0x14;
              v159 = (__int128 *)(v157 + 200 * (v156 % 0x14) + 168);
              v328 = 0u;
              v329 = 0u;
              if (&v328 != v159)
              {
                v328 = *v159;
                v329 = v159[1];
              }
              v325 = 0x100000003;
              v323 = &unk_1E25C7790;
              v326 = (float64x2_t *)&v327;
              v324 = xmmword_18D313070;
              sub_18D04BE88((uint64_t)&v323, 0.0);
              v160 = v157 + 200 * v158;
              v161 = *(float64x2_t *)(v160 + 104);
              v162 = *(double *)(v160 + 120);
              v163 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v161, v161).f64[1]), v161.f64[0], v161.f64[0])+ v162 * v162);
              v266 = v163 > 0.000000015;
              if (v163 > 0.000000015)
              {
                v164 = v326;
                *v326 = vdivq_f64(vnegq_f64(v161), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v163, 0));
                v164[1].f64[0] = -v162 / v163;
              }
              v320 = 0x100000003;
              v318 = &unk_1E25C7790;
              v321 = (double *)&v322;
              v319 = xmmword_18D313070;
              sub_18D04BE88((uint64_t)&v318, 0.0);
              v377 = 0x300000003;
              v375 = &unk_1E25C78E0;
              v378 = v379;
              v376 = xmmword_18D30BB60;
              sub_18D04BE88((uint64_t)&v375, 0.0);
              v165 = *((_QWORD *)this + 1038);
              if (*((_QWORD *)this + 1039) != v165)
              {
                v166 = *((_QWORD *)this + 1041);
                v167 = *(_QWORD *)(v165 + 8 * (v166 / 0x14)) + 200 * (v166 % 0x14);
                v272 = *(_QWORD *)(v165 + 8 * ((*((_QWORD *)this + 1042) + v166) / 0x14))
                     + 200 * ((*((_QWORD *)this + 1042) + v166) % 0x14);
                if (v167 != v272)
                {
                  v168 = 0.0;
                  v169 = (_QWORD *)(v165 + 8 * (v166 / 0x14));
                  v170 = (float64x2_t)xmmword_18D313070;
                  do
                  {
                    v290 = 0x100000003;
                    v288 = &unk_1E25C7790;
                    v289 = (__int128)v170;
                    v291 = (double *)&v292;
                    v292 = *(_OWORD *)(v167 + 128);
                    v293 = *(_QWORD *)(v167 + 144);
                    cnrotation::Inv((float64x2_t *)(v167 + 168), (float64x2_t *)v353);
                    cnrotation::Cat((double *)&v328, (const cnrotation::CNRotation *)v353, v317);
                    sub_18D162AB8((cnrotation::CNRotation *)v317, (uint64_t)&v288, (uint64_t)v353);
                    sub_18D1636E4((uint64_t)&v283, (uint64_t)v353);
                    v172 = DWORD2(v284);
                    if (SDWORD2(v284) < 1)
                    {
                      v171.f64[0] = 0.0;
                    }
                    else
                    {
                      v173 = v286;
                      v171.f64[0] = 0.0;
                      v174 = (double *)v326;
                      do
                      {
                        v175 = *v173++;
                        v176 = v175;
                        v177 = *v174++;
                        v171.f64[0] = v171.f64[0] + v176 * v177;
                        --v172;
                      }
                      while (v172);
                    }
                    *(_QWORD *)&v354 = 0x100000003;
                    *(_QWORD *)v353 = &unk_1E25C7790;
                    *(_OWORD *)&v353[8] = xmmword_18D313070;
                    *((_QWORD *)&v354 + 1) = &v355;
                    sub_18D064EF4((uint64_t)&v323, (uint64_t)v353, v171);
                    v280 = 0x100000003;
                    v278 = &unk_1E25C7790;
                    v279 = xmmword_18D313070;
                    v281 = v282;
                    sub_18D0540FC((uint64_t)&v283, (uint64_t)v353, (uint64_t)&v278);
                    v314 = 0x100000003;
                    v312 = &unk_1E25C7790;
                    v313 = xmmword_18D313070;
                    v315 = &v316;
                    sub_18D0540FC((uint64_t)&v278, (uint64_t)&v318, (uint64_t)&v312);
                    v168 = v168 + 1.0;
                    v309 = 0x100000003;
                    v307 = &unk_1E25C7790;
                    *(_QWORD *)&v178.f64[1] = 0x300000003;
                    v308 = xmmword_18D313070;
                    v310 = v311;
                    v178.f64[0] = 1.0 / v168;
                    sub_18D064EF4((uint64_t)&v312, (uint64_t)&v307, v178);
                    *(_QWORD *)&v354 = 0x100000003;
                    *(_QWORD *)v353 = &unk_1E25C7790;
                    *(_OWORD *)&v353[8] = xmmword_18D313070;
                    *((_QWORD *)&v354 + 1) = &v355;
                    sub_18D053FA4((uint64_t)&v318, (uint64_t)&v307, (uint64_t)v353);
                    sub_18D053AA8((uint64_t)&v318, (uint64_t)v353);
                    v296 = 0x100000003;
                    v294 = &unk_1E25C7790;
                    v295 = xmmword_18D313070;
                    v297 = &v298;
                    sub_18D0540FC((uint64_t)&v278, (uint64_t)&v318, (uint64_t)&v294);
                    v179 = DWORD1(v295);
                    v180 = v295;
                    v304 = 0x300000001;
                    v299 = &unk_1E25C6C20;
                    v305 = v306;
                    v300 = DWORD1(v295);
                    v301 = v295;
                    v302 = v295 * DWORD1(v295);
                    v303 = DWORD1(v295);
                    if (DWORD1(v295))
                    {
                      v181 = 0;
                      v182 = 0;
                      v183 = HIDWORD(v295);
                      v184 = v297;
                      do
                      {
                        v185 = v181;
                        v186 = v182;
                        for (j = v180; j; --j)
                        {
                          v306[v186] = v184[v185];
                          v186 += v179;
                          ++v185;
                        }
                        ++v182;
                        v181 += v183;
                      }
                      while (v182 != v179);
                    }
                    v309 = 0x300000003;
                    v307 = &unk_1E25C78E0;
                    v308 = xmmword_18D30BB60;
                    v310 = v311;
                    sub_18D053B2C((uint64_t)&v312, (uint64_t)&v299, (uint64_t)&v307);
                    *(_QWORD *)&v354 = 0x300000003;
                    *(_QWORD *)v353 = &unk_1E25C78E0;
                    *(_OWORD *)&v353[8] = xmmword_18D30BB60;
                    *((_QWORD *)&v354 + 1) = &v355;
                    sub_18D053FA4((uint64_t)&v375, (uint64_t)&v307, (uint64_t)v353);
                    sub_18D053AA8((uint64_t)&v375, (uint64_t)v353);
                    v167 += 200;
                    if (v167 - *v169 == 4000)
                    {
                      v188 = v169[1];
                      ++v169;
                      v167 = v188;
                    }
                    v170 = (float64x2_t)xmmword_18D313070;
                  }
                  while (v167 != v272);
                  if (v168 >= 4.0)
                  {
                    v170.f64[0] = 1.0 / (v168 + -1.0);
                    sub_18D1A3CF0((uint64_t)&v375, (uint64_t)&v307, v170);
                    v290 = 0x300000003;
                    v288 = &unk_1E25C78E0;
                    v289 = xmmword_18D30BB60;
                    v291 = (double *)&v292;
                    v285 = 0x300000003;
                    v283 = &unk_1E25C78E0;
                    v286 = (double *)v287;
                    v284 = xmmword_18D30BB60;
                    sub_18D04BE88((uint64_t)&v283, 0.0);
                    v280 = 0x300000003;
                    v278 = &unk_1E25C78E0;
                    v279 = xmmword_18D30BB60;
                    v281 = v282;
                    sub_18D29472C((uint64_t)&v307, (uint64_t)&v288, (uint64_t)&v283, (uint64_t)&v278);
                    v189 = *v286;
                    v190 = v286[SHIDWORD(v284) + 1];
                    sub_18D192CE4((uint64_t)&v318);
                    v191 = v266;
                    v192 = (double *)*((_QWORD *)this + 61);
                    if (v193 < v192[124] && sqrt(v189) < v192[125])
                      v191 = 0;
                    if (fabs(v189) < 2.22044605e-16 && fabs(v190) < 2.22044605e-16 || v189 / (v189 + v190) < v192[126])
                      v191 = 0;
                    sub_18D1AFFC0(":", (uint64_t)&v278, 0, (uint64_t)v353);
                    v194 = DWORD2(v319);
                    if (*(uint64_t *)((char *)&v319 + 4) <= 0)
                      goto LABEL_160;
                    v195 = v321;
                    v196 = 0.0;
                    v197 = (double *)*((_QWORD *)&v354 + 1);
                    do
                    {
                      v198 = *v195++;
                      v199 = v198;
                      v200 = *v197++;
                      v196 = v196 + v199 * v200;
                      --v194;
                    }
                    while (v194);
                    if (v196 >= 0.0)
                    {
LABEL_160:
                      sub_18D1AFFC0(":", (uint64_t)&v278, 0, (uint64_t)v353);
                      v243.f64[0] = v151;
                      sub_18D297B40((uint64_t)&v312, (uint64_t)v353, v243);
                    }
                    else
                    {
                      sub_18D1AFFC0(":", (uint64_t)&v278, 0, (uint64_t)v353);
                      v201.f64[0] = -v151;
                      sub_18D297B40((uint64_t)&v312, (uint64_t)v353, v201);
                    }
                    v244 = sub_18D053AA8((uint64_t)&v330, (uint64_t)&v312);
                    v245 = v267;
                    if (v142 == 0.0)
                      v245 = 0;
                    if (v245 == 1)
                    {
                      v244.n128_f64[0] = v142;
                      sub_18D1B27A8((uint64_t)&v330, (uint64_t)v353, (float64x2_t)v244);
                      sub_18D053AA8((uint64_t)&v330, (uint64_t)v353);
                    }
                    if (v191)
                    {
                      v377 = 0x200000003;
                      v375 = &unk_1E25C78B0;
                      v376 = xmmword_18D319B50;
                      v378 = v379;
                      v309 = 0x200000003;
                      v307 = &unk_1E25C78B0;
                      v308 = xmmword_18D319B50;
                      v310 = v311;
                      sub_18D1D41F0((uint64_t)v353, (uint64_t)&v375, 0);
                      sub_18D16182C((uint64_t)v353, (uint64_t)&v345);
                      sub_18D1D41F0((uint64_t)v353, (uint64_t)&v375, 1);
                      sub_18D16182C((uint64_t)v353, (uint64_t)&v335);
                      sub_18D1D41F0((uint64_t)v353, (uint64_t)&v307, 0);
                      sub_18D16182C((uint64_t)v353, (uint64_t)&v340);
                      sub_18D1D41F0((uint64_t)v353, (uint64_t)&v307, 1);
                      sub_18D16182C((uint64_t)v353, (uint64_t)&v330);
                      v285 = 0x100000002;
                      v283 = &unk_1E25C7520;
                      v284 = xmmword_18D319330;
                      v286 = (double *)v287;
                      v287[0] = *(_OWORD *)(*((_QWORD *)this + 61) + 1200);
                      if (!sub_18D29AA0C((uint64_t)this + 8208, DWORD1(v376)))
                      {
                        v273[1257] = 1;
                        *((_OWORD *)this + 469) = v352;
                        sub_18D1EBD1C((uint64_t)&v288, (uint64_t)this + 8216);
                        *(_QWORD *)v353 = &unk_1E25C2158;
                        v246 = *v291;
                        v247 = v291[1];
                        v248 = v291[2];
                        v249 = v291[3];
                        v250 = sqrt(v247 * v247 + v246 * v246 + v248 * v248 + v249 * v249);
                        if (fabs(v250) >= 2.22044605e-16)
                        {
                          v252 = v246 / v250;
                          v253 = v247 / v250;
                          v254 = v248 / v250;
                          v251 = v249 / v250;
                        }
                        else
                        {
                          v251 = 1.0;
                          v252 = 0.0;
                          v253 = 0.0;
                          v254 = 0.0;
                        }
                        v359 = v252;
                        v360 = v253;
                        v361 = v254;
                        v362 = v251;
                        v262 = *(_OWORD *)((char *)a2 + 56);
                        v355 = *(_OWORD *)((char *)a2 + 40);
                        v356 = v262;
                        v263 = *(_OWORD *)((char *)a2 + 88);
                        v357 = *(_OWORD *)((char *)a2 + 72);
                        v358 = v263;
                        v264 = *(_OWORD *)((char *)a2 + 24);
                        *(_OWORD *)&v353[8] = *(_OWORD *)((char *)a2 + 8);
                        v354 = v264;
                        v265 = *(_QWORD *)(*((_QWORD *)this + 61) + 944);
                        v365 = 0;
                        v366 = 0;
                        v364 = 0;
                        v363 = v265;
                        v367 = v265;
                        v368 = 0;
                        v369 = 0;
                        v370 = v265;
                        v371 = 0;
                        v372 = v265;
                        v373 = v273[1256];
                        v374 = 1;
                        sub_18D21C0EC((uint64_t)this, (uint64_t)v353);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_18D297A10(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D297AD0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D073454(a2, a1);
}

void sub_18D297B2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

double sub_18D297B40(uint64_t a1, uint64_t a2, float64x2_t a3)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_OWORD *)(a1 + 8) = xmmword_18D313070;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)&result = *(_OWORD *)&sub_18D064EF4(a2, a1, a3);
  return result;
}

void sub_18D297B98(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void raven::RavenDeviceAttitudeActiveObject::UpdateDeviceVehicleAttitudeWithRotation(raven::RavenDeviceAttitudeActiveObject *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double *v5;
  unint64_t v6;
  _QWORD *v7;
  double *v8;
  double v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  double *v17;
  uint64_t v18;
  double *v19;
  double v20;
  double *v21;
  double *v22;
  double *v23;
  double v24;
  double *v25;
  double v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  double *v67;
  double *v68;
  double *v69;
  double *v70;
  double *v71;
  double *v72;
  double *v73;
  double *v74;
  double *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  double *v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  double v100;
  double v101;
  double *v102;
  unint64_t v103;
  double v105;
  double v106;
  double *v107;
  uint64_t v108;
  float64x2_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  double v114;
  double *v115;
  unint64_t v116;
  float64x2_t v117;
  double v119;
  double *v120;
  uint64_t v121;
  double *v122;
  double v123;
  double *v124;
  double v125;
  double v126;
  double v127;
  double *v128;
  long double v129;
  cnprint::CNPrinter *v130;
  int8x16_t v131;
  int8x16_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  double v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int8x16_t v145;
  int8x16_t v146;
  uint64_t v147;
  double v148;
  double v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  double v154;
  double v155;
  int8x16_t v156;
  uint64_t v157;
  double v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  BOOL v164;
  char v165;
  BOOL v166;
  char v167;
  uint64_t v168;
  double v169;
  BOOL v170;
  BOOL v171;
  uint64_t v172;
  double *v173;
  float64x2_t v174;
  long double v175;
  uint64_t v176;
  double *v177;
  double v178;
  double *v179;
  double v180;
  double v181;
  double v182;
  double *v183;
  float64x2_t v184;
  cnprint::CNPrinter *v185;
  uint64_t v186;
  double v187;
  double v188;
  __n128 v189;
  uint64_t v190;
  double v191;
  BOOL v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  uint64_t v200;
  double v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  double v208;
  double v209;
  unint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215[8];
  unsigned __int8 v216;
  __int128 v217;
  _QWORD v218[15];
  double v219;
  _QWORD v220[303];
  double v221;
  _BYTE v222[2417];
  void *v223;
  __int128 v224;
  uint64_t v225;
  double *v226;
  uint64_t v227;
  void *v228;
  __int128 v229;
  uint64_t v230;
  double *v231;
  uint64_t v232;
  void *v233;
  __int128 v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  void *v238;
  __int128 v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  void *v243;
  __int128 v244;
  uint64_t v245;
  double *v246;
  uint64_t v247;
  char v248[8];
  uint64_t v249;
  char v250;
  void *__p;
  void *v252;
  uint64_t v253;
  char v254;
  void *v255;
  __int128 v256;
  uint64_t v257;
  float64x2_t *v258;
  _QWORD v259[3];
  char v260[4];
  __int128 v261;
  _DWORD v262[7];
  char v263[4];
  __int128 v264;
  _DWORD v265[7];
  char v266[4];
  __int128 v267;
  _DWORD v268[7];
  _QWORD v269[2];
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  double *v279;
  double *v280;
  double *v281;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  if (sub_18D295E20(v2, (_QWORD *)(v2 + 6904), 0.0) && sub_18D295F90(v2, (_QWORD *)(v2 + 7824)))
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
    sub_18D22D9C0((void **)&v279, *(_QWORD *)(v2 + 6944));
    v3 = *(_QWORD *)(v2 + 6912);
    if (*(_QWORD *)(v2 + 6920) == v3
      || (v4 = *(_QWORD *)(v2 + 6936),
          v5 = (double *)(*(_QWORD *)(v3 + 8 * (v4 / 0x1A)) + 152 * (v4 % 0x1A)),
          v6 = *(_QWORD *)(v3 + 8 * ((*(_QWORD *)(v2 + 6944) + v4) / 0x1A))
             + 152 * ((*(_QWORD *)(v2 + 6944) + v4) % 0x1A),
          v5 == (double *)v6))
    {
      v8 = v280;
    }
    else
    {
      v7 = (_QWORD *)(v3 + 8 * (v4 / 0x1A));
      v8 = v280;
      do
      {
        v9 = sqrt(v5[14] * v5[14] + v5[13] * v5[13] + v5[15] * v5[15]);
        if (v8 >= v281)
        {
          v10 = v279;
          v11 = v8 - v279;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            sub_18D07AFE4();
          v13 = (char *)v281 - (char *)v279;
          if (((char *)v281 - (char *)v279) >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_18D0788C8((uint64_t)&v281, v14);
            v10 = v279;
            v8 = v280;
          }
          else
          {
            v15 = 0;
          }
          v16 = (double *)&v15[8 * v11];
          *v16 = v9;
          v17 = v16 + 1;
          while (v8 != v10)
          {
            v18 = *((_QWORD *)v8-- - 1);
            *((_QWORD *)v16-- - 1) = v18;
          }
          v279 = v16;
          v280 = v17;
          v281 = (double *)&v15[8 * v14];
          if (v10)
            operator delete(v10);
          v8 = v17;
        }
        else
        {
          *v8++ = v9;
        }
        v280 = v8;
        v5 += 19;
        if ((double *)((char *)v5 - *v7) == (double *)3952)
        {
          v19 = (double *)v7[1];
          ++v7;
          v5 = v19;
        }
      }
      while (v5 != (double *)v6);
    }
    v20 = *(double *)(*(_QWORD *)(v2 + 488) + 1072) * 0.0174532925;
    v21 = v279;
    if (v279 == v8)
    {
      v23 = v279;
    }
    else
    {
      v22 = v279 + 1;
      v23 = v279;
      if (v279 + 1 != v8)
      {
        v24 = *v279;
        v23 = v279;
        v25 = v279 + 1;
        do
        {
          v26 = *v25++;
          v27 = v26;
          if (v24 < v26)
          {
            v24 = v27;
            v23 = v22;
          }
          v22 = v25;
        }
        while (v25 != v8);
      }
    }
    if (*v23 > v20)
    {
      v28 = v23 - v279;
      v29 = *(_QWORD *)(v2 + 6944);
      if (v28 < (uint64_t)(3 * v29 / 5) && v28 > (uint64_t)(2 * v29 / 5))
      {
        v210 = 2 * v29 / 5;
        v213 = v23 - v279;
        v276 = 0;
        v277 = 0;
        v278 = 0;
        sub_18D22D9C0((void **)&v276, v29);
        v273 = 0;
        v274 = 0;
        v275 = 0;
        sub_18D22D9C0((void **)&v273, *(_QWORD *)(v2 + 6944));
        v270 = 0;
        v271 = 0;
        v272 = 0;
        sub_18D22D9C0((void **)&v270, *(_QWORD *)(v2 + 6944));
        v31 = *(_QWORD *)(v2 + 6912);
        if (*(_QWORD *)(v2 + 6920) != v31)
        {
          v32 = *(_QWORD *)(v2 + 6936);
          v33 = (_QWORD *)(*(_QWORD *)(v31 + 8 * (v32 / 0x1A)) + 152 * (v32 % 0x1A));
          v34 = *(_QWORD *)(v31 + 8 * ((*(_QWORD *)(v2 + 6944) + v32) / 0x1A))
              + 152 * ((*(_QWORD *)(v2 + 6944) + v32) % 0x1A);
          if (v33 != (_QWORD *)v34)
          {
            v35 = (_QWORD *)(v31 + 8 * (v32 / 0x1A));
            do
            {
              v36 = v277;
              if (v277 >= v278)
              {
                v38 = v276;
                v39 = (v277 - v276) >> 3;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 61)
                  goto LABEL_242;
                v41 = v278 - v276;
                if ((v278 - v276) >> 2 > v40)
                  v40 = v41 >> 2;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                  v42 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v42 = v40;
                if (v42)
                {
                  v43 = (char *)sub_18D0788C8((uint64_t)&v278, v42);
                  v38 = v276;
                  v36 = v277;
                }
                else
                {
                  v43 = 0;
                }
                v44 = &v43[8 * v39];
                *(_QWORD *)v44 = v33[13];
                v37 = v44 + 8;
                while (v36 != v38)
                {
                  v45 = *((_QWORD *)v36 - 1);
                  v36 -= 8;
                  *((_QWORD *)v44 - 1) = v45;
                  v44 -= 8;
                }
                v276 = v44;
                v277 = v37;
                v278 = &v43[8 * v42];
                if (v38)
                  operator delete(v38);
              }
              else
              {
                *(_QWORD *)v277 = v33[13];
                v37 = v36 + 8;
              }
              v277 = v37;
              v46 = v274;
              if (v274 >= v275)
              {
                v48 = v273;
                v49 = (v274 - v273) >> 3;
                v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 61)
                  goto LABEL_242;
                v51 = v275 - v273;
                if ((v275 - v273) >> 2 > v50)
                  v50 = v51 >> 2;
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                  v52 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v52 = v50;
                if (v52)
                {
                  v53 = (char *)sub_18D0788C8((uint64_t)&v275, v52);
                  v48 = v273;
                  v46 = v274;
                }
                else
                {
                  v53 = 0;
                }
                v54 = &v53[8 * v49];
                *(_QWORD *)v54 = v33[14];
                v47 = v54 + 8;
                while (v46 != v48)
                {
                  v55 = *((_QWORD *)v46 - 1);
                  v46 -= 8;
                  *((_QWORD *)v54 - 1) = v55;
                  v54 -= 8;
                }
                v273 = v54;
                v274 = v47;
                v275 = &v53[8 * v52];
                if (v48)
                  operator delete(v48);
              }
              else
              {
                *(_QWORD *)v274 = v33[14];
                v47 = v46 + 8;
              }
              v274 = v47;
              v56 = v271;
              if (v271 >= v272)
              {
                v58 = v270;
                v59 = (v271 - v270) >> 3;
                v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 61)
LABEL_242:
                  sub_18D07AFE4();
                v61 = v272 - v270;
                if ((v272 - v270) >> 2 > v60)
                  v60 = v61 >> 2;
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                  v62 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v62 = v60;
                if (v62)
                {
                  v63 = (char *)sub_18D0788C8((uint64_t)&v272, v62);
                  v58 = v270;
                  v56 = v271;
                }
                else
                {
                  v63 = 0;
                }
                v64 = &v63[8 * v59];
                *(_QWORD *)v64 = v33[15];
                v57 = v64 + 8;
                while (v56 != v58)
                {
                  v65 = *((_QWORD *)v56 - 1);
                  v56 -= 8;
                  *((_QWORD *)v64 - 1) = v65;
                  v64 -= 8;
                }
                v270 = v64;
                v271 = v57;
                v272 = &v63[8 * v62];
                if (v58)
                  operator delete(v58);
              }
              else
              {
                *(_QWORD *)v271 = v33[15];
                v57 = v56 + 8;
              }
              v271 = v57;
              v33 += 19;
              if ((_QWORD *)((char *)v33 - *v35) == (_QWORD *)3952)
              {
                v66 = (_QWORD *)v35[1];
                ++v35;
                v33 = v66;
              }
            }
            while (v33 != (_QWORD *)v34);
          }
        }
        if (raven::RavenDeviceAttitudeActiveObject::DualDirSmooth(v2, &v276, *(double *)(*(_QWORD *)(v2 + 488) + 1112))&& raven::RavenDeviceAttitudeActiveObject::DualDirSmooth(v2, &v273, *(double *)(*(_QWORD *)(v2 + 488) + 1112))&& raven::RavenDeviceAttitudeActiveObject::DualDirSmooth(v2, &v270, *(double *)(*(_QWORD *)(v2 + 488) + 1112)))
        {
          v67 = (double *)v276;
          v68 = (double *)v277;
          if (v276 != v277)
          {
            v69 = (double *)v276;
            do
            {
              *v69 = *v69 * *v69;
              ++v69;
            }
            while (v69 != v68);
          }
          v70 = (double *)v273;
          v71 = (double *)v274;
          while (v70 != v71)
          {
            *v70 = *v70 * *v70;
            ++v70;
          }
          v72 = (double *)v270;
          v73 = (double *)v271;
          while (v72 != v73)
          {
            *v72 = *v72 * *v72;
            ++v72;
          }
          if (v67 != v68)
            memmove(v279, v67, (char *)v68 - (char *)v67);
          v74 = v279;
          v75 = v280;
          if (v279 != v280)
          {
            v76 = 0;
            v77 = v273;
            do
            {
              v74[v76] = v74[v76] + *(double *)&v77[v76 * 8];
              ++v76;
            }
            while (&v74[v76] != v75);
            v78 = 0;
            v79 = v270;
            do
            {
              v74[v78] = v74[v78] + *(double *)&v79[v78 * 8];
              ++v78;
            }
            while (&v74[v78] != v75);
            v80 = v74 + 1;
            if (v74 + 1 != v75)
            {
              v81 = *v74;
              v82 = v74 + 1;
              do
              {
                v83 = *v82++;
                v84 = v83;
                if (v81 < v83)
                {
                  v81 = v84;
                  v74 = v80;
                }
                v80 = v82;
              }
              while (v82 != v75);
            }
          }
          v85 = *(_QWORD *)(v2 + 6912);
          v86 = *(_QWORD *)(v2 + 6936);
          v87 = (_QWORD *)(v85 + 8 * (v86 / 0x1A));
          v88 = *(_QWORD *)(v2 + 6920) == v85 ? 0 : *v87 + 152 * (v86 % 0x1A);
          v89 = *v74;
          v221 = *(double *)&v87;
          *(_QWORD *)v222 = v88;
          sub_18D29C05C(&v221, v213);
          v269[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v222 + 16))(*(_QWORD *)v222);
          v269[1] = v90;
          if (sqrt(v89) > v20)
          {
            v91 = v213 - v210;
            v92 = v210 + v213;
            v93 = *(double *)(v2 + 6960) * *(double *)(v2 + 6960) + *(double *)(v2 + 6952) * *(double *)(v2 + 6952);
            v94 = *(double *)(v2 + 6968);
            v266[0] = 0;
            v267 = 0u;
            memset(v268, 0, sizeof(v268));
            v263[0] = 0;
            v264 = 0u;
            memset(v265, 0, sizeof(v265));
            v260[0] = 0;
            v261 = 0u;
            memset(v262, 0, sizeof(v262));
            v95 = *(_QWORD *)(v2 + 6912);
            v96 = *(_QWORD *)(v2 + 6936);
            v97 = *(_QWORD *)(v2 + 6920);
            v98 = v97 == v95 ? 0 : *(_QWORD *)(v95 + 8 * (v96 / 0x1A)) + 152 * (v96 % 0x1A);
            v99 = v20 * 0.25;
            v100 = v93 + v94 * v94;
            *(_QWORD *)&v221 = v95 + 8 * (v96 / 0x1A);
            *(_QWORD *)v222 = v98;
            v211 = v213 - v210;
            sub_18D29C05C(&v221, v91);
            v101 = v221;
            v102 = *(double **)v222;
            while (1)
            {
              v103 = v97 == v95 ? 0 : *(_QWORD *)(v95 + 8 * (v96 / 0x1A)) + 152 * (v96 % 0x1A);
              *(_QWORD *)&v221 = v95 + 8 * (v96 / 0x1A);
              *(_QWORD *)v222 = v103;
              sub_18D29C05C(&v221, v92);
              if (*(_QWORD *)&v101 >= *(_QWORD *)&v221
                && (*(_QWORD *)&v101 != *(_QWORD *)&v221 || (unint64_t)v102 >= *(_QWORD *)v222))
              {
                break;
              }
              v105 = v102[13];
              v106 = sqrt(v102[14] * v102[14] + v105 * v105 + v102[15] * v102[15]);
              if (v106 > v99)
              {
                v221 = v105 / v106;
                sub_18D1648E4((uint64_t)v266, &v221, v106 * v106 / v100);
                v221 = v102[14] / v106;
                sub_18D1648E4((uint64_t)v263, &v221, v106 * v106 / v100);
                v221 = v102[15] / v106;
                sub_18D1648E4((uint64_t)v260, &v221, v106 * v106 / v100);
              }
              v102 += 19;
              if ((double *)((char *)v102 - **(_QWORD **)&v101) == (double *)3952)
              {
                v107 = *(double **)(*(_QWORD *)&v101 + 8);
                *(_QWORD *)&v101 += 8;
                v102 = v107;
              }
              v95 = *(_QWORD *)(v2 + 6912);
              v96 = *(_QWORD *)(v2 + 6936);
              v97 = *(_QWORD *)(v2 + 6920);
            }
            v257 = 0x100000003;
            v255 = &unk_1E25C7790;
            v256 = xmmword_18D313070;
            v258 = (float64x2_t *)v259;
            v259[0] = *(_QWORD *)&v268[1];
            v259[1] = *(_QWORD *)&v265[1];
            v259[2] = *(_QWORD *)&v262[1];
            sub_18D192CE4((uint64_t)&v255);
            if (fabs(*(double *)&v108) > 0.000000015)
            {
              v109 = v258;
              *v258 = vdivq_f64(*v258, (float64x2_t)vdupq_lane_s64(v108, 0));
              v109[1].f64[0] = v109[1].f64[0] / *(double *)&v108;
              v252 = 0;
              v253 = 0;
              v248[0] = 0;
              __p = 0;
              v249 = 0;
              v250 = 1;
              sub_18D2144E4((char **)&__p);
              v254 = 1;
              v245 = 0x100000003;
              v243 = &unk_1E25C7790;
              v244 = xmmword_18D313070;
              v246 = (double *)&v247;
              v110 = *(_QWORD *)(v2 + 6912);
              v111 = *(_QWORD *)(v2 + 6936);
              v112 = *(_QWORD *)(v2 + 6920);
              if (v112 == v110)
                v113 = 0;
              else
                v113 = *(_QWORD *)(v110 + 8 * (v111 / 0x1A)) + 152 * (v111 % 0x1A);
              *(_QWORD *)&v221 = v110 + 8 * (v111 / 0x1A);
              *(_QWORD *)v222 = v113;
              sub_18D29C05C(&v221, v211);
              v114 = v221;
              v115 = *(double **)v222;
              while (1)
              {
                v116 = v112 == v110 ? 0 : *(_QWORD *)(v110 + 8 * (v111 / 0x1A)) + 152 * (v111 % 0x1A);
                *(_QWORD *)&v221 = v110 + 8 * (v111 / 0x1A);
                *(_QWORD *)v222 = v116;
                sub_18D29C05C(&v221, v92);
                if (*(_QWORD *)&v114 >= *(_QWORD *)&v221
                  && (*(_QWORD *)&v114 != *(_QWORD *)&v221 || (unint64_t)v115 >= *(_QWORD *)v222))
                {
                  break;
                }
                v119 = v115[13];
                v117.f64[0] = sqrt(v115[14] * v115[14] + v119 * v119 + v115[15] * v115[15]);
                if (v117.f64[0] > v99)
                {
                  v120 = v246;
                  *v246 = v119;
                  v120[1] = v115[14];
                  v120[2] = v115[15];
                  *(_QWORD *)&v222[16] = 0x100000003;
                  v221 = COERCE_DOUBLE(&unk_1E25C7790);
                  v117.f64[0] = 1.0 / v117.f64[0];
                  *(_OWORD *)v222 = xmmword_18D313070;
                  *(_QWORD *)&v222[24] = &v222[32];
                  sub_18D064EF4((uint64_t)&v243, (uint64_t)&v221, v117);
                  v121 = *(unsigned int *)&v222[8];
                  if (*(int *)&v222[8] < 1)
                  {
                    v123 = 0.0;
                  }
                  else
                  {
                    v122 = *(double **)&v222[24];
                    v123 = 0.0;
                    v124 = (double *)v258;
                    do
                    {
                      v125 = *v122++;
                      v126 = v125;
                      v127 = *v124++;
                      v123 = v123 + v126 * v127;
                      --v121;
                    }
                    while (v121);
                  }
                  v219 = v123;
                  sub_18D213F5C((uint64_t)v248, (uint64_t *)&v219, 1.0);
                }
                v115 += 19;
                if ((double *)((char *)v115 - **(_QWORD **)&v114) == (double *)3952)
                {
                  v128 = *(double **)(*(_QWORD *)&v114 + 8);
                  *(_QWORD *)&v114 += 8;
                  v115 = v128;
                }
                v110 = *(_QWORD *)(v2 + 6912);
                v111 = *(_QWORD *)(v2 + 6936);
                v112 = *(_QWORD *)(v2 + 6920);
              }
              sub_18D2145A8((uint64_t)v248, 50.0);
              v209 = acos(v129);
              v240 = 0x100000003;
              v238 = &unk_1E25C7790;
              v241 = &v242;
              v239 = xmmword_18D313070;
              v130 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v238, 0.0);
              v241[2] = 0x3FF0000000000000;
              if (cnprint::CNPrinter::GetLogLevel(v130) <= 1)
              {
                LOWORD(v221) = 12;
                LOBYTE(v219) = 1;
                v133 = *(_QWORD *)(*(_QWORD *)(v2 + 7832) + ((*(_QWORD *)(v2 + 7856) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 2432 * (*(_QWORD *)(v2 + 7856) & 0xFLL);
                v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 16))(v133);
                v136 = v135;
                v137 = *(_QWORD *)(v2 + 7864) + *(_QWORD *)(v2 + 7856) - 1;
                v138 = *(_QWORD *)(*(_QWORD *)(v2 + 7832) + ((v137 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 2432 * (v137 & 0xF);
                (*(void (**)(uint64_t))(*(_QWORD *)v138 + 16))(v138);
                v208 = v136 + (double)v134;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v221, (unsigned __int8 *)&v219, "DevAtt,Rotation,first solution time,%lf,last solution time,%lf,maxRateTime,%lf,rotVectNorm,%lf", v139, v140, v141, v142, v143, SLOBYTE(v208));
              }
              v144 = *(_QWORD *)(*(_QWORD *)(v2 + 488) + 1120);
              *(_QWORD *)v222 = 0;
              v221 = 0.0;
              v131.i64[0] = v144;
              CNTimeSpan::SetTimeSpan((uint64_t *)&v221, 0, v131, v132);
              v147 = CNTimeSpan::operator-((uint64_t)v269, &v221, v145, v146);
              v149 = v148;
              *(_QWORD *)v222 = 0;
              v221 = 0.0;
              v150.i64[0] = v144;
              CNTimeSpan::SetTimeSpan((uint64_t *)&v221, 0, v150, v151);
              v214 = CNTimeSpan::operator+((uint64_t)v269, &v221, v152, v153);
              v155 = v154;
              v235 = 0x300000003;
              v233 = &unk_1E25C78E0;
              v234 = xmmword_18D30BB60;
              v236 = &v237;
              v230 = 0x100000003;
              v228 = &unk_1E25C7790;
              v229 = xmmword_18D313070;
              v231 = (double *)&v232;
              v225 = 0x100000003;
              v223 = &unk_1E25C7790;
              v224 = xmmword_18D313070;
              v226 = (double *)&v227;
              sub_18D0409EC((uint64_t)&v221);
              sub_18D0409EC((uint64_t)&v219);
              v157 = *(_QWORD *)(v2 + 7832);
              v158 = 0.0;
              if (*(_QWORD *)(v2 + 7840) != v157)
              {
                v159 = *(_QWORD *)(v2 + 7856);
                v160 = (_QWORD *)(v157 + 8 * (v159 >> 4));
                v161 = *v160 + 2432 * (v159 & 0xF);
                v162 = *(_QWORD *)(v157 + (((*(_QWORD *)(v2 + 7864) + v159) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 2432 * ((*(_DWORD *)(v2 + 7864) + (_DWORD)v159) & 0xF);
                if (v161 != v162)
                {
                  v163 = v149;
                  if (v147)
                    v164 = 1;
                  else
                    v164 = (*(_QWORD *)&v149 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                  v165 = v164;
                  if (v214)
                    v166 = 1;
                  else
                    v166 = (*(_QWORD *)&v155 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                  v167 = v166;
                  v212 = v167;
                  do
                  {
                    v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v161 + 16))(v161);
                    if ((v165 & 1) == 0
                      || (!v168
                        ? (v170 = (*(_QWORD *)&v169 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                        : (v170 = 1),
                          !v170 || (v171 = v147 <= v168, v147 == v168)))
                    {
                      v171 = v163 <= v169;
                    }
                    if (v171)
                    {
                      v172 = *(_QWORD *)(v161 + 1552);
                      if (v222[1536])
                      {
                        v173 = v226;
                        *(_QWORD *)v226 = v172;
                        v173[1] = *(double *)(v161 + 1560);
                        v173[2] = *(double *)(v161 + 1568);
                        sub_18D192CE4((uint64_t)&v223);
                        *(double *)v156.i64 = fabs(v174.f64[0]);
                        if (*(double *)v156.i64 > 0.000000015)
                        {
                          v174.f64[0] = 1.0 / v174.f64[0];
                          sub_18D1B27A8((uint64_t)&v223, (uint64_t)&v217, v174);
                          sub_18D053AA8((uint64_t)&v223, (uint64_t)&v217);
                          sub_18D192C7C((uint64_t)&v233, (uint64_t)&v223, (uint64_t)&v217);
                          sub_18D053AA8((uint64_t)&v223, (uint64_t)&v217);
                          sub_18D28E7FC((uint64_t)&v217, (uint64_t)&v228, (uint64_t)&v223);
                          sub_18D28E7FC((uint64_t)v215, (uint64_t)&v228, (uint64_t)&v223);
                          sub_18D192CE4((uint64_t)v215);
                          v176 = DWORD2(v229);
                          if (SDWORD2(v229) < 1)
                          {
                            v178 = 0.0;
                          }
                          else
                          {
                            v177 = v231;
                            v178 = 0.0;
                            v179 = v226;
                            do
                            {
                              v180 = *v177++;
                              v181 = v180;
                              v182 = *v179++;
                              v178 = v178 + v181 * v182;
                              --v176;
                            }
                            while (v176);
                          }
                          v186 = v218[2];
                          v187 = atan2(v175, v178);
                          if (*(double *)(v186 + 16) <= 0.0)
                            v188 = -1.0;
                          else
                            v188 = 1.0;
                          memcpy(v220, (const void *)(v161 + 8), 0x971uLL);
                          v189 = sub_18D053AA8((uint64_t)&v228, (uint64_t)&v223);
                          v190 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v161 + 16))(v161, v189);
                          v158 = v158 + v187 * v188;
                          if (v190)
                            v192 = 1;
                          else
                            v192 = (*(_QWORD *)&v191 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                          if (!v192 || (v212 & 1) == 0 || (v193 = v190 <= v214, v190 == v214))
                            v193 = v191 <= v155;
                          if (!v193)
                            break;
                        }
                      }
                      else
                      {
                        v183 = v231;
                        *(_QWORD *)v231 = v172;
                        v183[1] = *(double *)(v161 + 1560);
                        v183[2] = *(double *)(v161 + 1568);
                        sub_18D192CE4((uint64_t)&v228);
                        *(double *)v156.i64 = fabs(v184.f64[0]);
                        if (*(double *)v156.i64 > 0.000000015)
                        {
                          v184.f64[0] = 1.0 / v184.f64[0];
                          sub_18D1B27A8((uint64_t)&v228, (uint64_t)&v217, v184);
                          sub_18D053AA8((uint64_t)&v228, (uint64_t)&v217);
                          v185 = (cnprint::CNPrinter *)sub_18D16AF50((uint64_t)&v217, *(float64_t *)(v161 + 1472), *(float64_t *)(v161 + 1480), *(double *)(v161 + 1488));
                          if (!BYTE8(v217))
                          {
                            if (cnprint::CNPrinter::GetLogLevel(v185) <= 1)
                            {
                              LOWORD(v215[0]) = 12;
                              v216 = 1;
                              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v215, &v216, "DevAtt,Rotation,cannot derive ecef to enu Jacobian", v202, v203, v204, v205, v206, v207);
                            }
                            goto LABEL_227;
                          }
                          sub_18D053AA8((uint64_t)&v233, (uint64_t)v218);
                          sub_18D192C7C((uint64_t)&v233, (uint64_t)&v228, (uint64_t)v215);
                          sub_18D053AA8((uint64_t)&v228, (uint64_t)v215);
                          memcpy(v222, (const void *)(v161 + 8), sizeof(v222));
                        }
                      }
                    }
                    v161 += 2432;
                    if (v161 - *v160 == 38912)
                    {
                      v194 = v160[1];
                      ++v160;
                      v161 = v194;
                    }
                  }
                  while (v161 != v162);
                }
              }
              v195 = v220[0];
              v196 = *(double *)&v220[1];
              v197.i64[1] = *(_QWORD *)&v222[8];
              v217 = *(_OWORD *)v222;
              v197.i64[0] = *(_QWORD *)(*(_QWORD *)(v2 + 488) + 1128);
              v215[0] = 0;
              v215[1] = 0;
              CNTimeSpan::SetTimeSpan(v215, 0, v197, v156);
              v200 = CNTimeSpan::operator+((uint64_t)&v217, v215, v198, v199);
              if ((v195 || (*(_QWORD *)&v196 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                && (v200 || (*(_QWORD *)&v201 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                && v195 != v200)
              {
                if (v195 < v200)
                  goto LABEL_227;
              }
              else if (v196 < v201)
              {
                goto LABEL_227;
              }
              if (v158 < 0.0)
                v241[2] = 0xBFF0000000000000;
              raven::RavenDeviceAttitudeActiveObject::UpdateDeviceVehicleAttitude(v2, (uint64_t)&v255, (uint64_t)&v238, (uint64_t)v269, v209);
              sub_18D2960D0((_QWORD *)(v2 + 6904));
LABEL_227:
              if (__p)
              {
                v252 = __p;
                operator delete(__p);
              }
            }
          }
        }
        if (v270)
        {
          v271 = v270;
          operator delete(v270);
        }
        if (v273)
        {
          v274 = v273;
          operator delete(v273);
        }
        if (v276)
        {
          v277 = v276;
          operator delete(v276);
        }
        v21 = v279;
      }
    }
    if (v21)
    {
      v280 = v21;
      operator delete(v21);
    }
  }
}

void sub_18D298E6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = (void *)STACK[0x15D0];
  if (STACK[0x15D0])
  {
    STACK[0x15D8] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 256);
  if (v4)
  {
    *(_QWORD *)(v1 - 248) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 232);
  if (v5)
  {
    *(_QWORD *)(v1 - 224) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v1 - 208);
  if (v6)
  {
    *(_QWORD *)(v1 - 200) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v1 - 184);
  if (v7)
  {
    *(_QWORD *)(v1 - 176) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t raven::RavenDeviceAttitudeActiveObject::Configure(uint64x2_t *a1, uint64_t *a2, double a3, int8x16_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  double v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  BOOL v28;
  BOOL v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int32 v39;
  cnprint::CNPrinter *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  char v47;
  void *__p[2];
  char v49;
  unsigned __int8 v50;
  __int16 v51;

  if (a1[30].i8[0])
  {
    v51 = 12;
    v50 = 3;
    (*(void (**)(void **__return_ptr, uint64x2_t *))(a1->i64[0] + 16))(__p, a1);
    if (v49 >= 0)
      v11 = __p;
    else
      LOBYTE(v11) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, &v50, "Warning: %s configured more than once.", v6, v7, v8, v9, v10, (char)v11);
    if (v49 < 0)
      operator delete(__p[0]);
  }
  a1[30].i8[0] = 0;
  v12 = *a2;
  if (!v12 || !*(_BYTE *)(v12 + 33))
  {
    v51 = 12;
    v50 = 4;
    (*(void (**)(void **__return_ptr, uint64x2_t *))(a1->i64[0] + 16))(__p, a1);
    if (v49 >= 0)
      v26 = __p;
    else
      LOBYTE(v26) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, &v50, "Error: %s could not be configured.", v21, v22, v23, v24, v25, (char)v26);
    goto LABEL_21;
  }
  a1[30].i64[1] = v12;
  v13 = *(double *)(v12 + 648);
  v14 = v13 > 0.000000015 && (*(_QWORD *)(v12 + 648) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  if (!v14
    || ((a4.i64[0] = *(_QWORD *)(v12 + 656), *(double *)a4.i64 > 0.000000015)
      ? (v28 = (*(_QWORD *)(v12 + 656) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      : (v28 = 0),
        !v28
     || (*(double *)(v12 + 792) > 0.000000015
       ? (v29 = (*(_QWORD *)(v12 + 792) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
       : (v29 = 0),
         !v29)))
  {
    v51 = 12;
    v50 = 4;
    (*(void (**)(void **__return_ptr, uint64x2_t *))(a1->i64[0] + 16))(__p, a1);
    if (v49 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, &v50, "Error: %s could not be configured because of invalid sensor sample period or input solution rate, accel sample period, %.3lf, gyro sample period, %.3lf, solution output rate, %.3lf", v15, v16, v17, v18, v19, (char)v20);
LABEL_21:
    if (v49 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  a1[470] = vcvtq_u64_f64(vmulq_n_f64((float64x2_t)xmmword_18D3383F0, 1.0 / v13));
  v30 = (int8x16_t)vcvtq_u64_f64(vmulq_n_f64((float64x2_t)xmmword_18D3383F0, 1.0 / *(double *)a4.i64));
  a1[471] = (uint64x2_t)v30;
  a4.i64[0] = 3.0;
  *(double *)v30.i64 = *(double *)(v12 + 1048) * 3.0;
  __p[0] = 0;
  __p[1] = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v30, a4);
  a1[472] = *(uint64x2_t *)__p;
  a1[473].i64[0] = 3
                 * (unint64_t)(*(double *)(v12 + 792) * (*(double *)&a1[472].i64[1] + (double)a1[472].i64[0]));
  if (*(_BYTE *)(v12 + 3656))
  {
    v36 = (char *)(v12 + 3664);
    if (*(char *)(v12 + 3687) < 0)
      v36 = *(char **)v36;
    if (sub_18D18FD1C((uint64_t)a1[90].i64, v36))
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v51) = 4;
      v37 = "Error: RavenDeviceAttitudeActiveObject::Configure() failed to load gravity parameters.";
LABEL_46:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v51, v37, v31, v32, v33, v34, v35, v47);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (*(_DWORD *)(v12 + 3652))
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v51) = 4;
      v37 = "Error: RavenDeviceAttitudeActiveObject::Configure() failed to load gravity parameters becasue of invalid model type.";
      goto LABEL_46;
    }
    if (sub_18D18FDF4((uint64_t)a1[90].i64, (uint64_t)&unk_18D338420, (uint64_t)&unk_18D33851C, (uint64_t)&unk_18D338618, (uint64_t)&unk_18D338810, (uint64_t)&unk_18D338A08, (uint64_t)&unk_18D338C00))
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v51) = 4;
      v37 = "Error: RavenDeviceAttitudeActiveObject::Configure() failed to load EGM96 gravity parameters.";
      goto LABEL_46;
    }
  }
  a1[250].i32[0] = 1;
  v38 = a1[30].i64[1];
  if (*(_DWORD *)(v38 + 3652))
  {
    LOWORD(__p[0]) = 12;
    LOBYTE(v51) = 4;
    v37 = "Error: RavenDeviceAttitudeActiveObject::Configure() failed to set EGM96 model constants.";
    goto LABEL_46;
  }
  a1[91] = (uint64x2_t)xmmword_18D3197D0;
  a1[92].i64[0] = 0x40E86A0000000000;
  v39 = *(_DWORD *)(v38 + 3688);
  if ((v39 - 11) <= 0xFFFFFFF6)
    __assert_rtn("SetTruncationDegree", "sphericalharmonicsgravitymodel.h", 471, "trunc >= 2 && trunc <= max_degree");
  a1[260].i32[0] = v39;
  if (!a1[90].i8[8])
  {
    LOWORD(__p[0]) = 12;
    LOBYTE(v51) = 4;
    v37 = "Error: RavenDeviceAttitudeActiveObject::Configure() gravity parameters are invalid.";
    goto LABEL_46;
  }
  sub_18D1C978C((uint64_t)a1[261].i64, (uint64_t)a1[90].i64);
  a1[521].i16[4] = 1;
  cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, 0.0);
  a1[30].i8[0] = 1;
  v40 = (cnprint::CNPrinter *)(*(uint64_t (**)(uint64x2_t *))(a1->i64[0] + 48))(a1);
  if (cnprint::CNPrinter::GetLogLevel(v40) <= 1)
  {
    v51 = 12;
    v50 = 1;
    (*(void (**)(void **__return_ptr, uint64x2_t *))(a1->i64[0] + 16))(__p, a1);
    if (v49 >= 0)
      v46 = __p;
    else
      LOBYTE(v46) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, &v50, "%s configured successfully.", v41, v42, v43, v44, v45, (char)v46);
    if (v49 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D2993C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenDeviceAttitudeActiveObject::IsConfigured(raven::RavenDeviceAttitudeActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void raven::RavenDeviceAttitudeActiveObject::RemoveStaleSolutions(_QWORD *a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  BOOL v17;
  uint64_t v18[2];

  *(double *)a3.i64 = *(double *)(a1[61] + 1048) + *(double *)(a1[61] + 1048);
  v18[0] = 0;
  v18[1] = 0;
  CNTimeSpan::SetTimeSpan(v18, 0, a3, a4);
  v8 = CNTimeSpan::operator-(a2, v18, v6, v7);
  if (a1[983])
  {
    v10 = v8;
    v11 = v9;
    if (v8)
      v12 = 1;
    else
      v12 = (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    v13 = v12;
    do
    {
      v14 = *(_QWORD *)(a1[979] + ((a1[982] >> 1) & 0x7FFFFFFFFFFFFFF8)) + 2432 * (a1[982] & 0xFLL);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      if (v15)
        v17 = 1;
      else
        v17 = (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v17 && (v13 & 1) != 0 && v15 != v10)
      {
        if (v15 > v10)
          return;
      }
      else if (v16 >= v11)
      {
        return;
      }
      sub_18D05D168((uint64_t)(a1 + 978));
    }
    while (a1[983]);
  }
}

void raven::RavenDeviceAttitudeActiveObject::HandleEvent(int64x2_t *this, const raven::AccelerometerEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  void **v23;
  uint64_t *v24;
  unint64_t v25;
  void (***v26)(void);
  void (**v27)(void);
  void (***v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **p_p;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  void *__p;
  uint64_t v41;
  char v42;
  unsigned __int8 v43;
  __int16 v44;

  if (this[30].i8[0])
  {
    __p = (void *)2;
    v41 = 0;
    v4 = sub_18D29978C(this + 495, (uint64_t)a2, (double *)&__p, this[470].u64[0]);
    if ((v4 & 1) == 0 && !cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v4))
    {
      LOWORD(__p) = 12;
      LOBYTE(v44) = 0;
      v5 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
      v38 = v6 + (double)v5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v44, "DevAtt,Accelerometer stationary detection queue overflowed at %.3lf", v7, v8, v9, v10, v11, SLOBYTE(v38));
    }
    __p = (void *)3;
    v41 = 0x3FE0000000000000;
    v12 = sub_18D29978C(this + 483, (uint64_t)a2, (double *)&__p, this[470].u64[1]);
    if ((v12 & 1) == 0)
    {
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v12))
      {
        LOWORD(__p) = 12;
        LOBYTE(v44) = 0;
        v13 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(_QWORD *)a2 + 16))(a2);
        v39 = v14 + (double)v13;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v44, "DevAtt,Accelerometer down sampling queue overflowed at %.3lf", v15, v16, v17, v18, v19, SLOBYTE(v39));
      }
      v20 = (void **)this[31].i64[1];
      v21 = (void **)this[32].i64[0];
      if (v21 == v20)
      {
        v24 = &this[33].i64[1];
        v21 = (void **)this[31].i64[1];
      }
      else
      {
        v22 = this[33].u64[0];
        v23 = &v20[v22 / 0x1A];
        v24 = &this[33].i64[1];
        v25 = (unint64_t)v20[(this[33].i64[1] + v22) / 0x1A] + 152 * ((this[33].i64[1] + v22) % 0x1A);
        if ((char *)*v23 + 152 * (v22 % 0x1A) != (void *)v25)
        {
          v26 = (void (***)(void))((char *)*v23 + 152 * (v22 % 0x1A));
          do
          {
            v27 = *v26;
            v26 += 19;
            (*v27)();
            if ((char *)v26 - (_BYTE *)*v23 == 3952)
            {
              v28 = (void (***)(void))v23[1];
              ++v23;
              v26 = v28;
            }
          }
          while (v26 != (void (***)(void))v25);
          v20 = (void **)this[31].i64[1];
          v21 = (void **)this[32].i64[0];
        }
      }
      *v24 = 0;
      v35 = (char *)v21 - (char *)v20;
      if (v35 >= 0x11)
      {
        do
        {
          operator delete(*v20);
          v36 = this[32].i64[0];
          v20 = (void **)(this[31].i64[1] + 8);
          this[31].i64[1] = (uint64_t)v20;
          v35 = v36 - (_QWORD)v20;
        }
        while (v35 > 0x10);
      }
      if (v35 >> 3 == 1)
      {
        v37 = 13;
      }
      else
      {
        if (v35 >> 3 != 2)
          return;
        v37 = 26;
      }
      this[33].i64[0] = v37;
    }
  }
  else
  {
    v44 = 12;
    v43 = 3;
    (*(void (**)(void **__return_ptr, int64x2_t *, const raven::AccelerometerEvent *))(this->i64[0] + 16))(&__p, this, a2);
    if (v42 >= 0)
      p_p = &__p;
    else
      LOBYTE(p_p) = (_BYTE)__p;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, &v43, "Warning: %s is not configured yet.", v29, v30, v31, v32, v33, (char)p_p);
    if (v42 < 0)
      operator delete(__p);
  }
}

void sub_18D299770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D29978C(int64x2_t *a1, uint64_t a2, double *a3, unint64_t a4)
{
  __n128 v8;
  char i;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  double v15;
  char v16;
  _QWORD v18[2];
  _QWORD v19[2];
  double v20[2];

  v8 = sub_18D20D3B8(a1, a2);
  if (a1[2].i64[1])
  {
    for (i = 1; ; i = 0)
    {
      v19[0] = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a2 + 16))(a2, v8);
      v19[1] = v10;
      v11 = *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x1AuLL)) + 152 * (a1[2].i64[0] % 0x1AuLL);
      v18[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 16))(v11);
      v18[1] = v12;
      *(_QWORD *)&v20[0] = CNTimeSpan::operator-((uint64_t)v19, v18, v13, v14);
      v20[1] = v15;
      if (!sub_18D03F608(v20, a3) && a1[2].i64[1] <= a4)
        break;
      sub_18D20D7C8(a1);
      v16 = 0;
      if (!a1[2].i64[1])
        return v16 & 1;
    }
    v16 = i;
  }
  else
  {
    v16 = 1;
  }
  return v16 & 1;
}

double raven::RavenDeviceAttitudeActiveObject::HandleEvent(__n128 *this, const raven::AttitudeEvent *a2, __n128 a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **p_p;
  const raven::AttitudeEvent *v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  char v46;
  void *__p;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  double v54;
  double v55;
  double v56;
  double v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char v64;
  _BYTE v65[32];
  __int128 v66;
  __int128 v67;
  __int16 v68;
  char v69;
  uint64_t v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;

  if (this[30].n128_u8[0])
  {
    if (*((_BYTE *)a2 + 217) == 2)
    {
      v5 = this[491].n128_u64[1];
      if (v5)
      {
        v6 = v5 + this[491].n128_u64[0] - 1;
        v7 = *(_QWORD *)(this[489].n128_u64[1] + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8));
        v8 = v6 & 0xF;
        if (*(_BYTE *)(v7 + 2432 * v8 + 209) == 2
          && *(_BYTE *)(v7 + 2432 * v8 + 1464)
          && *(_BYTE *)(v7 + 2432 * v8 + 1544)
          && *((_BYTE *)a2 + 216))
        {
          v73 = 0x300000003;
          v71 = &unk_1E25C78E0;
          v72 = xmmword_18D30BB60;
          v74 = &v75;
          sub_18D16AF50((uint64_t)&v68, *(float64_t *)(v7 + 2432 * v8 + 1472), *(float64_t *)(v7 + 2432 * v8 + 1480), *(double *)(v7 + 2432 * v8 + 1488));
          if (v69)
          {
            sub_18D053AA8((uint64_t)&v71, (uint64_t)&v70);
            v66 = 0u;
            v67 = 0u;
            if (&v66 != (__int128 *)((char *)a2 + 104))
            {
              v14 = *(_OWORD *)((char *)a2 + 120);
              v66 = *(_OWORD *)((char *)a2 + 104);
              v67 = v14;
            }
            this[436].n128_u8[2] = 1;
            sub_18D159244((uint64_t)v65, (uint64_t)&v71);
            cnrotation::Cat((double *)&v66, (const cnrotation::CNRotation *)v65, (double *)&__p);
            v15 = __p;
            if (&this[73].n128_i8[8] == (__int8 *)&__p)
            {
              v16 = this[74].n128_f64[0];
              v17 = this[74].n128_f64[1];
              v18 = this[75].n128_f64[0];
            }
            else
            {
              this[73].n128_f64[1] = *(double *)&__p;
              v17 = *((double *)&v48 + 1);
              v16 = *(double *)&v48;
              this[74].n128_u64[0] = v48;
              this[74].n128_f64[1] = v17;
              v18 = *(double *)&v49;
              this[75].n128_u64[0] = v49;
            }
            *(double *)&__p = COERCE_DOUBLE(&unk_1E25C2158);
            v50 = *(_OWORD *)((char *)a2 + 40);
            v51 = *(_OWORD *)((char *)a2 + 56);
            v52 = *(_OWORD *)((char *)a2 + 72);
            v53 = *(_OWORD *)((char *)a2 + 88);
            v48 = *(_OWORD *)((char *)a2 + 8);
            v49 = *(_OWORD *)((char *)a2 + 24);
            v40 = sqrt(v16 * v16 + *(double *)&v15 * *(double *)&v15 + v17 * v17 + v18 * v18);
            if (fabs(v40) >= 2.22044605e-16)
            {
              v42 = *(double *)&v15 / v40;
              v43 = v16 / v40;
              v44 = v17 / v40;
              v41 = v18 / v40;
            }
            else
            {
              v41 = 1.0;
              v42 = 0.0;
              v43 = 0.0;
              v44 = 0.0;
            }
            v54 = v42;
            v55 = v43;
            v56 = v44;
            v57 = v41;
            v58 = *(_OWORD *)((char *)a2 + 136);
            v59 = *(_OWORD *)((char *)a2 + 152);
            v60 = *(_OWORD *)((char *)a2 + 168);
            v61 = *(_OWORD *)((char *)a2 + 184);
            v62 = *(_OWORD *)((char *)a2 + 200);
            v63 = *((_BYTE *)a2 + 216);
            v64 = 1;
            a3.n128_u64[0] = sub_18D299CE8((uint64_t)&this[75].n128_i64[1], (uint64_t)&__p).n128_u64[0];
          }
          else
          {
            LOWORD(__p) = 12;
            LOBYTE(v66) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v66, "DevAtt, Rotation, cannot derive ecef to enu Jacobian", v9, v10, v11, v12, v13, v46);
          }
        }
      }
    }
    else
    {
      v25 = (const raven::AttitudeEvent *)&this[75].n128_i8[8];
      if (this[89].n128_u8[8])
      {
        v26 = *(__n128 *)((char *)a2 + 8);
        this[77] = *(__n128 *)((char *)a2 + 24);
        this[76] = v26;
        v27 = *(__n128 *)((char *)a2 + 40);
        v28 = *(__n128 *)((char *)a2 + 56);
        v29 = *(__n128 *)((char *)a2 + 72);
        this[81] = *(__n128 *)((char *)a2 + 88);
        this[80] = v29;
        this[79] = v28;
        this[78] = v27;
        if (v25 != a2)
        {
          this[82] = *(__n128 *)((char *)a2 + 104);
          this[83] = *(__n128 *)((char *)a2 + 120);
        }
        v30 = *(__n128 *)((char *)a2 + 136);
        this[85] = *(__n128 *)((char *)a2 + 152);
        this[84] = v30;
        a3 = *(__n128 *)((char *)a2 + 168);
        v31 = *(__n128 *)((char *)a2 + 184);
        v32 = *(__n128 *)((char *)a2 + 200);
        this[89].n128_u16[0] = *((_WORD *)a2 + 108);
        this[88] = v32;
        this[87] = v31;
        this[86] = a3;
      }
      else
      {
        this[75].n128_u64[1] = (unint64_t)&unk_1E25C2158;
        v33 = *(__n128 *)((char *)a2 + 8);
        this[77] = *(__n128 *)((char *)a2 + 24);
        this[76] = v33;
        v34 = *(__n128 *)((char *)a2 + 40);
        v35 = *(__n128 *)((char *)a2 + 56);
        v36 = *(__n128 *)((char *)a2 + 72);
        this[81] = *(__n128 *)((char *)a2 + 88);
        this[80] = v36;
        this[79] = v35;
        this[78] = v34;
        this[82] = 0u;
        this[83] = 0u;
        if (v25 != a2)
        {
          this[82] = *(__n128 *)((char *)a2 + 104);
          this[83] = *(__n128 *)((char *)a2 + 120);
        }
        v37 = *(__n128 *)((char *)a2 + 136);
        this[85] = *(__n128 *)((char *)a2 + 152);
        this[84] = v37;
        a3 = *(__n128 *)((char *)a2 + 168);
        v38 = *(__n128 *)((char *)a2 + 184);
        v39 = *(__n128 *)((char *)a2 + 200);
        this[89].n128_u16[0] = *((_WORD *)a2 + 108);
        this[88] = v39;
        this[87] = v38;
        this[86] = a3;
        this[89].n128_u8[8] = 1;
      }
    }
  }
  else
  {
    v68 = 12;
    LOBYTE(v71) = 3;
    (*(void (**)(void **__return_ptr, __n128 *, const raven::AttitudeEvent *))(this->n128_u64[0] + 16))(&__p, this, a2);
    if (v48 >= 0)
      p_p = &__p;
    else
      LOBYTE(p_p) = (_BYTE)__p;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v71, "Warning: %s is not configured yet.", v19, v20, v21, v22, v23, (char)p_p);
    if (SHIBYTE(v48) < 0)
      operator delete(__p);
  }
  return a3.n128_f64[0];
}

void sub_18D299CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

__n128 sub_18D299CE8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (*(_BYTE *)(a1 + 224))
  {
    v2 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v2;
    v3 = *(_OWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v5;
    *(_OWORD *)(a1 + 56) = v4;
    *(_OWORD *)(a1 + 40) = v3;
    if (a1 != a2)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    }
    v6 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v6;
    result = *(__n128 *)(a2 + 168);
    v8 = *(_OWORD *)(a2 + 184);
    v9 = *(_OWORD *)(a2 + 200);
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v9;
    *(_OWORD *)(a1 + 184) = v8;
    *(__n128 *)(a1 + 168) = result;
  }
  else
  {
    *(_QWORD *)a1 = &unk_1E25C2158;
    v10 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v10;
    v11 = *(_OWORD *)(a2 + 40);
    v12 = *(_OWORD *)(a2 + 56);
    v13 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v13;
    *(_OWORD *)(a1 + 56) = v12;
    *(_OWORD *)(a1 + 40) = v11;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    if (a1 != a2)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    }
    v14 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v14;
    result = *(__n128 *)(a2 + 168);
    v15 = *(_OWORD *)(a2 + 184);
    v16 = *(_OWORD *)(a2 + 200);
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v16;
    *(_OWORD *)(a1 + 184) = v15;
    *(__n128 *)(a1 + 168) = result;
    *(_BYTE *)(a1 + 224) = 1;
  }
  return result;
}

void raven::RavenDeviceAttitudeActiveObject::HandleEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::DecomposedAccelerationEvent *a2, int8x16_t a3, int8x16_t a4)
{
  int64x2_t *v6;
  uint64_t v7;
  double v8;

  if (*((_BYTE *)this + 480))
  {
    v6 = (int64x2_t *)((char *)this + 8296);
    if (*((_QWORD *)this + 1042))
    {
      v7 = CNTimeSpan::operator-(*(_QWORD *)(*((_QWORD *)this + 1038) + 8 * (*((_QWORD *)this + 1041) / 0x14uLL))+ 200 * (*((_QWORD *)this + 1041) % 0x14uLL)+ 152, (_QWORD *)a2 + 19, a3, a4);
      if (fabs(v8 + (double)v7) >= 2.22044605e-16)
        raven::RavenDeviceAttitudeActiveObject::ResetWahbaSolver(this);
    }
    sub_18D22108C(v6, (uint64_t)a2);
    if (*((_QWORD *)this + 1042) > (unint64_t)*(unsigned int *)(*((_QWORD *)this + 61) + 984))
      sub_18D2211B8(v6);
  }
}

void raven::RavenDeviceAttitudeActiveObject::HandleEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::RateGyroEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  void **v23;
  _QWORD *v24;
  unint64_t v25;
  void (***v26)(void);
  void (**v27)(void);
  void (***v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **p_p;
  unint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  void *__p;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  __int16 v43;

  if (*((_BYTE *)this + 480))
  {
    __p = (void *)2;
    v40 = 0;
    v4 = sub_18D29A188((uint64_t)this + 7968, (uint64_t)a2, (double *)&__p, *((_QWORD *)this + 942));
    if ((v4 & 1) == 0 && !cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v4))
    {
      LOWORD(__p) = 12;
      LOBYTE(v43) = 0;
      v5 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
      v37 = v6 + (double)v5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v43, "DevAtt,Gyro stationary detection queue overflowed at %.3lf", v7, v8, v9, v10, v11, SLOBYTE(v37));
    }
    __p = (void *)3;
    v40 = 0x3FE0000000000000;
    v12 = sub_18D29A188((uint64_t)this + 7776, (uint64_t)a2, (double *)&__p, *((_QWORD *)this + 943));
    if ((v12 & 1) == 0)
    {
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v12))
      {
        LOWORD(__p) = 12;
        LOBYTE(v43) = 0;
        v13 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(_QWORD *)a2 + 16))(a2);
        v38 = v14 + (double)v13;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v43, "DevAtt,Gyro down sampling queue overflowed at %.3lf", v15, v16, v17, v18, v19, SLOBYTE(v38));
      }
      v20 = (void **)*((_QWORD *)this + 864);
      v21 = (void **)*((_QWORD *)this + 865);
      if (v21 == v20)
      {
        v24 = (_QWORD *)((char *)this + 6944);
        v21 = (void **)*((_QWORD *)this + 864);
      }
      else
      {
        v22 = *((_QWORD *)this + 867);
        v23 = &v20[v22 / 0x1A];
        v24 = (_QWORD *)((char *)this + 6944);
        v25 = (unint64_t)v20[(*((_QWORD *)this + 868) + v22) / 0x1A]
            + 152 * ((*((_QWORD *)this + 868) + v22) % 0x1A);
        if ((char *)*v23 + 152 * (v22 % 0x1A) != (void *)v25)
        {
          v26 = (void (***)(void))((char *)*v23 + 152 * (v22 % 0x1A));
          do
          {
            v27 = *v26;
            v26 += 19;
            (*v27)();
            if ((char *)v26 - (_BYTE *)*v23 == 3952)
            {
              v28 = (void (***)(void))v23[1];
              ++v23;
              v26 = v28;
            }
          }
          while (v26 != (void (***)(void))v25);
          v21 = (void **)*((_QWORD *)this + 865);
          v20 = (void **)*((_QWORD *)this + 864);
        }
      }
      *v24 = 0;
      v35 = (char *)v21 - (char *)v20;
      if (v35 >= 0x11)
      {
        do
        {
          operator delete(*v20);
          v20 = (void **)(*((_QWORD *)this + 864) + 8);
          *((_QWORD *)this + 864) = v20;
          v35 = *((_QWORD *)this + 865) - (_QWORD)v20;
        }
        while (v35 > 0x10);
      }
      if (v35 >> 3 == 1)
      {
        v36 = 13;
      }
      else
      {
        if (v35 >> 3 != 2)
          return;
        v36 = 26;
      }
      *((_QWORD *)this + 867) = v36;
    }
  }
  else
  {
    v43 = 12;
    v42 = 3;
    (*(void (**)(void **__return_ptr, raven::RavenDeviceAttitudeActiveObject *, const raven::RateGyroEvent *))(*(_QWORD *)this + 16))(&__p, this, a2);
    if (v41 >= 0)
      p_p = &__p;
    else
      LOBYTE(p_p) = (_BYTE)__p;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, &v42, "Warning: %s is not configured yet.", v29, v30, v31, v32, v33, (char)p_p);
    if (v41 < 0)
      operator delete(__p);
  }
}

void sub_18D29A16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D29A188(uint64_t a1, uint64_t a2, double *a3, unint64_t a4)
{
  __n128 v8;
  char i;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  double v15;
  char v16;
  _QWORD v18[2];
  _QWORD v19[2];
  double v20[2];

  v8 = sub_18D293A28((void **)a1, a2);
  if (*(_QWORD *)(a1 + 40))
  {
    for (i = 1; ; i = 0)
    {
      v19[0] = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a2 + 16))(a2, v8);
      v19[1] = v10;
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (*(_QWORD *)(a1 + 32) / 0x1AuLL))
          + 152 * (*(_QWORD *)(a1 + 32) % 0x1AuLL);
      v18[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v11 + 16))(v11);
      v18[1] = v12;
      *(_QWORD *)&v20[0] = CNTimeSpan::operator-((uint64_t)v19, v18, v13, v14);
      v20[1] = v15;
      if (!sub_18D03F608(v20, a3) && *(_QWORD *)(a1 + 40) <= a4)
        break;
      sub_18D293988(a1);
      v16 = 0;
      if (!*(_QWORD *)(a1 + 40))
        return v16 & 1;
    }
    v16 = i;
  }
  else
  {
    v16 = 1;
  }
  return v16 & 1;
}

__n128 raven::RavenDeviceAttitudeActiveObject::HandleEvent(raven::RavenDeviceAttitudeActiveObject *this, const raven::UserGaitEvent *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *__p[2];
  char v20;
  unsigned __int8 v21;
  __int16 v22;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)this + 7496))
    {
      *((_OWORD *)this + 460) = *(_OWORD *)((char *)a2 + 8);
      v2 = *(_OWORD *)((char *)a2 + 24);
      v3 = *(_OWORD *)((char *)a2 + 40);
      v4 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 464) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 463) = v4;
      *((_OWORD *)this + 462) = v3;
      *((_OWORD *)this + 461) = v2;
      result = *(__n128 *)((char *)a2 + 88);
      v6 = *(_OWORD *)((char *)a2 + 104);
      v7 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 936) = *((_QWORD *)a2 + 17);
      *((_OWORD *)this + 467) = v7;
      *((_OWORD *)this + 466) = v6;
      *((__n128 *)this + 465) = result;
    }
    else
    {
      *((_QWORD *)this + 919) = &unk_1E25C2248;
      *((_OWORD *)this + 460) = *(_OWORD *)((char *)a2 + 8);
      v14 = *(_OWORD *)((char *)a2 + 24);
      v15 = *(_OWORD *)((char *)a2 + 40);
      v16 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 464) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 463) = v16;
      *((_OWORD *)this + 462) = v15;
      *((_OWORD *)this + 461) = v14;
      result = *(__n128 *)((char *)a2 + 88);
      v17 = *(_OWORD *)((char *)a2 + 104);
      v18 = *(_OWORD *)((char *)a2 + 120);
      *((_QWORD *)this + 936) = *((_QWORD *)a2 + 17);
      *((_OWORD *)this + 467) = v18;
      *((_OWORD *)this + 466) = v17;
      *((__n128 *)this + 465) = result;
      *((_BYTE *)this + 7496) = 1;
    }
  }
  else
  {
    v22 = 12;
    v21 = 3;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 16))(__p);
    if (v20 >= 0)
      v13 = __p;
    else
      LOBYTE(v13) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "Warning: %s is not configured yet.", v8, v9, v10, v11, v12, (char)v13);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  return result;
}

void sub_18D29A3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D29A3F0(cnframework::ActiveObjectBase *a1)
{
  *(_QWORD *)a1 = &off_1E25C3C58;
  sub_18D20B884((_QWORD *)a1 + 1044);
  sub_18D20B0C4((_QWORD *)a1 + 1037);
  *((_QWORD *)a1 + 1026) = &unk_1E25B8D98;
  *((_QWORD *)a1 + 1027) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 1018) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 1010) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 1002) = &unk_1E25C5E70;
  sub_18D16C7E0((_QWORD *)a1 + 996);
  sub_18D16C7E0((_QWORD *)a1 + 990);
  sub_18D20AEC4((_QWORD *)a1 + 984);
  sub_18D20AEC4((_QWORD *)a1 + 978);
  sub_18D16C7E0((_QWORD *)a1 + 972);
  sub_18D16C7E0((_QWORD *)a1 + 966);
  sub_18D16C7E0((_QWORD *)a1 + 863);
  *((_QWORD *)a1 + 522) = &unk_1E25B9B60;
  *((_QWORD *)a1 + 843) = &unk_1E25B9250;
  *((_QWORD *)a1 + 521) = &unk_1E25B9250;
  *((_QWORD *)a1 + 180) = &unk_1E25B9B60;
  *((_QWORD *)a1 + 501) = &unk_1E25B9250;
  *((_QWORD *)a1 + 131) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 113) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 99) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 89) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 75) = &unk_1E25C5E70;
  sub_18D16C7E0((_QWORD *)a1 + 62);
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
}

void sub_18D29A4FC(cnframework::ActiveObjectBase *a1)
{
  *(_QWORD *)a1 = &off_1E25C3C58;
  sub_18D20B884((_QWORD *)a1 + 1044);
  sub_18D20B0C4((_QWORD *)a1 + 1037);
  *((_QWORD *)a1 + 1026) = &unk_1E25B8D98;
  *((_QWORD *)a1 + 1027) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 1018) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 1010) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 1002) = &unk_1E25C5E70;
  sub_18D16C7E0((_QWORD *)a1 + 996);
  sub_18D16C7E0((_QWORD *)a1 + 990);
  sub_18D20AEC4((_QWORD *)a1 + 984);
  sub_18D20AEC4((_QWORD *)a1 + 978);
  sub_18D16C7E0((_QWORD *)a1 + 972);
  sub_18D16C7E0((_QWORD *)a1 + 966);
  sub_18D16C7E0((_QWORD *)a1 + 863);
  *((_QWORD *)a1 + 522) = &unk_1E25B9B60;
  *((_QWORD *)a1 + 843) = &unk_1E25B9250;
  *((_QWORD *)a1 + 521) = &unk_1E25B9250;
  *((_QWORD *)a1 + 180) = &unk_1E25B9B60;
  *((_QWORD *)a1 + 501) = &unk_1E25B9250;
  *((_QWORD *)a1 + 131) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 113) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 99) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 89) = &unk_1E25C5E70;
  *((_QWORD *)a1 + 75) = &unk_1E25C5E70;
  sub_18D16C7E0((_QWORD *)a1 + 62);
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D29A61C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = &off_1E25C1C90;
  *(_QWORD *)(a1 + 8) = &off_1E25C37C0;
  sub_18D159B20(a1 + 16, a2 + 8);
  v4 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 144) = v4;
  v5 = *(_OWORD *)(a2 + 152);
  v6 = *(_OWORD *)(a2 + 168);
  v7 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 208) = v7;
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 176) = v6;
  sub_18D04DA0C(a1 + 224, a2 + 216);
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  if (a1 + 288 != a2 + 280)
  {
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 296);
  }
  return a1;
}

void sub_18D29A6C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D29A6DC(_QWORD *result)
{
  result[28] = &unk_1E25C5E70;
  result[1] = &off_1E25C37C0;
  result[2] = &unk_1E25C5E70;
  return result;
}

void sub_18D29A700(_QWORD *a1)
{
  a1[28] = &unk_1E25C5E70;
  a1[1] = &off_1E25C37C0;
  a1[2] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D29A734()
{
}

uint64_t sub_18D29A740(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_18D29A61C(v2, a1 + 8);
  return v2;
}

void sub_18D29A784(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1081C40374DCE79);
  _Unwind_Resume(a1);
}

uint64_t sub_18D29A7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  __CLPK_integer v15;
  __CLPK_integer v16;
  __CLPK_doublereal *v17;
  __CLPK_doublereal *v18;
  __CLPK_doublereal *v19;
  __CLPK_doublereal *v20;
  __CLPK_doublereal *v21;
  cnprint::CNPrinter *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int i;
  int v47;
  unsigned int v48;
  uint64_t result;
  int v50;
  int v51;
  __CLPK_integer v52;
  __CLPK_integer __lwork;
  __CLPK_integer __ldvt;
  __CLPK_integer __ldu;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  char __jobvt;
  char __jobu;

  v12 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  if (v11 >= v12)
    v13 = *(_DWORD *)(a1 + 8);
  else
    v13 = *(_DWORD *)(a1 + 12);
  v14 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  sub_18D053AA8(a2, a1);
  v15 = *(_DWORD *)(a2 + 8);
  v16 = *(_DWORD *)(a2 + 12);
  v17 = *(__CLPK_doublereal **)(a2 + 32);
  v18 = *(__CLPK_doublereal **)(a5 + 32);
  v19 = *(__CLPK_doublereal **)(a4 + 32);
  v20 = *(__CLPK_doublereal **)(a6 + 32);
  v21 = *(__CLPK_doublereal **)(a3 + 32);
  __jobu = 65;
  __jobvt = 65;
  __n = v16;
  __m = v15;
  __ldu = v15;
  __lda = v15;
  __lwork = v14;
  __ldvt = v16;
  v52 = 0;
  v22 = (cnprint::CNPrinter *)dgesvd_(&__jobu, &__jobvt, &__m, &__n, v17, &__lda, v18, v19, &__ldu, v20, &__ldvt, v21, &__lwork, &v52);
  if (v52)
  {
    LOWORD(__m) = 4;
    if (v52 < 0)
    {
      LOBYTE(__n) = 5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Svd: input argument %d invalid in gesvd.", v23, v24, v25, v26, v27, -(char)v52);
    }
    else
    {
      LOBYTE(__n) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Svd: gesvd failed to converge on %d superdiagonals.", v23, v24, v25, v26, v27, v52);
    }
  }
  v28 = **(double **)(a3 + 32);
  if (v14 < v28 && cnprint::CNPrinter::GetLogLevel(v22) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Warning: Svd optimal workspace size %u is greater than provided workspace size %u; performance may suffer.",
      v29,
      v30,
      v31,
      v32,
      v33,
      v28);
  }
  v34 = *(_DWORD *)(a3 + 24);
  v35 = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 8) = v34;
  *(_DWORD *)(a3 + 12) = v35;
  *(_DWORD *)(a3 + 16) = v35 * v34;
  *(_DWORD *)(a3 + 20) = v34;
  *(_DWORD *)(a4 + 8) = v12;
  *(_DWORD *)(a4 + 12) = v12;
  *(_DWORD *)(a4 + 16) = v12 * v12;
  *(_DWORD *)(a4 + 20) = v12;
  *(_DWORD *)(a5 + 8) = v12;
  *(_DWORD *)(a5 + 12) = v11;
  *(_DWORD *)(a5 + 16) = v11 * v12;
  *(_DWORD *)(a5 + 20) = v12;
  if (v13)
  {
    v36 = 0;
    v37 = *(uint64_t **)(a5 + 32);
    v38 = v37;
    do
    {
      v39 = *v38++;
      v37[v36] = v39;
      v36 += v12 + 1;
      --v13;
    }
    while (v13);
  }
  if (v11)
  {
    v40 = 0;
    v41 = 0;
    v42 = *(_QWORD *)(a5 + 32);
    v43 = v12 - 1;
    v44 = 1;
    do
    {
      if (v12 >= v41)
        v45 = v41;
      else
        v45 = v12;
      for (i = v40; v45; --v45)
        *(_QWORD *)(v42 + 8 * i++) = 0;
      ++v41;
      v47 = v44;
      v48 = v43;
      if (v41 < v12)
      {
        do
        {
          *(_QWORD *)(v42 + 8 * v47++) = 0;
          --v48;
        }
        while (v48);
      }
      v40 += v12;
      --v43;
      v44 += v12 + 1;
    }
    while (v41 != v11);
  }
  *(_DWORD *)(a6 + 8) = v11;
  *(_DWORD *)(a6 + 12) = v11;
  *(_DWORD *)(a6 + 16) = v11 * v11;
  *(_DWORD *)(a6 + 20) = v11;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 24))(a6);
  v51 = *(_DWORD *)(a6 + 8);
  v50 = *(_DWORD *)(a6 + 12);
  *(_DWORD *)(a6 + 8) = v50;
  *(_DWORD *)(a6 + 12) = v51;
  *(_DWORD *)(a6 + 16) = v51 * v50;
  *(_DWORD *)(a6 + 20) = v50;
  return result;
}

uint64_t sub_18D29AA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  _BOOL4 v14;
  uint64_t v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int v30;
  __CLPK_doublereal *v31;
  float64x2_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  double *v38;
  int v39;
  int v40;
  int i;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  double *v47;
  int v48;
  int v49;
  int j;
  __int128 v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int k;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t *v65;
  int v66;
  int m;
  __int128 v68;
  float64x2_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  __CLPK_doublereal *v75;
  uint64_t *v76;
  uint64_t *v77;
  __CLPK_doublereal *v78;
  int v79;
  int *v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  __CLPK_doublereal *v86;
  uint64_t *v87;
  uint64_t *v88;
  void **v89;
  __CLPK_doublereal *v90;
  int v91;
  __CLPK_doublereal *v92;
  int v93;
  int *v94;
  int v95;
  __CLPK_doublereal v96;
  int v97;
  uint64_t v99;
  cnprint::CNPrinter *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int32x4_t v107;
  unsigned int v108;
  __CLPK_doublereal *v109;
  __CLPK_doublereal *v110;
  _DWORD *v111;
  int v112;
  int v113;
  uint64_t v114;
  __CLPK_doublereal v115;
  __CLPK_doublereal *v116;
  int v117;
  __CLPK_doublereal *v118;
  __CLPK_doublereal *v119;
  int v120;
  int v121;
  int v122;
  __int128 v123;
  int v124;
  int v125;
  int v126;
  __int128 v127;
  float64x2_t v128;
  int v129;
  const char *v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  void *v136;
  __int128 v137;
  uint64_t v138;
  __CLPK_doublereal *v139;
  _BYTE v140[128];
  void *v141;
  __int128 v142;
  uint64_t v143;
  __CLPK_doublereal *__wr;
  _DWORD v145[32];
  __CLPK_integer __ldvr[2];
  int v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD v153[3];
  void *v154;
  __int128 v155;
  uint64_t v156;
  __CLPK_doublereal *__scale;
  _BYTE v158[72];
  __CLPK_integer __ldvl[2];
  int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD v166[3];
  void *v167;
  __int128 v168;
  uint64_t v169;
  __CLPK_doublereal *__rconde;
  _BYTE v171[72];
  __CLPK_integer __lda;
  unsigned int v173;
  unsigned int v174;
  int v175;
  uint64_t v176;
  __CLPK_integer __n;
  uint64_t v178;
  int v179;
  int v180;
  double *v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  double *v186;
  void *v187;
  __int128 v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  int v192;
  void *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t (**v198)();
  __int128 v199;
  uint64_t v200;
  __CLPK_doublereal *__work;
  _QWORD v202[3];
  void **v203;
  void *v204;
  __int128 v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  void *v209;
  __int128 v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  void *v214;
  __int128 v215;
  uint64_t v216;
  _DWORD *v217;
  _DWORD v218[32];
  void *v219;
  __int128 v220;
  uint64_t v221;
  __CLPK_doublereal *__wi;
  _QWORD v223[16];
  void *v224;
  __int128 v225;
  uint64_t v226;
  __CLPK_doublereal *__a;
  _DWORD v228[33];
  __CLPK_integer v229;
  __CLPK_integer v230;
  __CLPK_integer __ihi[2];
  char __sense[12];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v132 = v3;
  v133 = v5;
  v134 = v4;
  v7 = v6;
  v8 = v2;
  v195 = 0x400000004;
  v193 = &unk_1E25C7FA0;
  v196 = &v197;
  v194 = xmmword_18D313080;
  sub_18D04BE88((uint64_t)&v193, 0.0);
  v202[0] = 0x100000000;
  v189 = 0x100000003;
  v187 = &unk_1E25C77C0;
  v188 = xmmword_18D313070;
  v192 = 2;
  v190 = &v191;
  v191 = 0x100000000;
  if (v7 < 1)
    return 25;
  v9 = 0;
  v10 = 0;
  do
  {
    sub_18D29BD20((uint64_t)&v182, v134, v9);
    v226 = 0x100000003;
    v224 = &unk_1E25C7790;
    v225 = xmmword_18D313070;
    __a = (__CLPK_doublereal *)v228;
    v200 = 0x100000134;
    v198 = (uint64_t (**)())&unk_1E25C7640;
    v199 = xmmword_18D3130C0;
    __work = (__CLPK_doublereal *)v202;
    v221 = 0x100000003;
    v219 = &unk_1E25C7790;
    v220 = xmmword_18D313070;
    __wi = (__CLPK_doublereal *)v223;
    sub_18D159EE0((uint64_t)&v182, (uint64_t)&v224, (uint64_t)&v198, (uint64_t)&v219, "2");
    v12 = fabs(v11.f64[0]);
    if (v12 >= 2.22044605e-16)
    {
      v200 = 0x100000003;
      v198 = (uint64_t (**)())&unk_1E25C7790;
      v199 = xmmword_18D313070;
      __work = (__CLPK_doublereal *)v202;
      v11.f64[0] = 1.0 / v11.f64[0];
      sub_18D064EF4((uint64_t)&v182, (uint64_t)&v198, v11);
      sub_18D053AA8((uint64_t)&v182, (uint64_t)&v198);
    }
    sub_18D29BD20((uint64_t)&__n, v133, v9);
    v226 = 0x100000003;
    v224 = &unk_1E25C7790;
    v225 = xmmword_18D313070;
    __a = (__CLPK_doublereal *)v228;
    v200 = 0x100000134;
    v198 = (uint64_t (**)())&unk_1E25C7640;
    v199 = xmmword_18D3130C0;
    __work = (__CLPK_doublereal *)v202;
    v221 = 0x100000003;
    v219 = &unk_1E25C7790;
    v220 = xmmword_18D313070;
    __wi = (__CLPK_doublereal *)v223;
    sub_18D159EE0((uint64_t)&__n, (uint64_t)&v224, (uint64_t)&v198, (uint64_t)&v219, "2");
    if (fabs(v13.f64[0]) < 2.22044605e-16)
    {
      v14 = 0;
    }
    else
    {
      v200 = 0x100000003;
      v198 = (uint64_t (**)())&unk_1E25C7790;
      v199 = xmmword_18D313070;
      __work = (__CLPK_doublereal *)v202;
      v13.f64[0] = 1.0 / v13.f64[0];
      sub_18D064EF4((uint64_t)&__n, (uint64_t)&v198, v13);
      sub_18D053AA8((uint64_t)&__n, (uint64_t)&v198);
      v14 = v12 >= 2.22044605e-16;
    }
    v15 = v179;
    v135 = v14;
    v16 = 0.0;
    if (v179 >= 1)
    {
      v17 = v181;
      v18 = v186;
      do
      {
        v19 = *v17++;
        v20 = v19;
        v21 = *v18++;
        v16 = v16 + v20 * v21;
        --v15;
      }
      while (v15);
    }
    v200 = 0x100000003;
    v198 = (uint64_t (**)())&unk_1E25C7790;
    __work = (__CLPK_doublereal *)v202;
    *(_QWORD *)&v199 = v178;
    DWORD2(v199) = HIDWORD(v178) * v178;
    HIDWORD(v199) = v178;
    v22 = *v181;
    v23 = v181[1];
    v24 = v181[2];
    v25 = *v186;
    v26 = v186[1];
    v27 = v186[2];
    v28 = v23 * v27 - v24 * v26;
    v29 = v24 * *v186 - *v181 * v27;
    *(double *)v202 = v28;
    *(double *)&v202[1] = v29;
    *(double *)&v202[2] = v22 * v26 - v23 * v25;
    sub_18D290E78((uint64_t)&__lda, (uint64_t)&v198);
    v226 = 0x400000004;
    v224 = &unk_1E25C7FA0;
    v225 = xmmword_18D313080;
    __a = (__CLPK_doublereal *)v228;
    v138 = 0x300000003;
    v136 = &unk_1E25C78E0;
    v139 = (__CLPK_doublereal *)v140;
    v137 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v136, 0.0);
    v30 = HIDWORD(v137) + 1;
    v31 = v139;
    *v139 = 1.0;
    v31[v30] = 1.0;
    v31[2 * v30] = 1.0;
    v143 = 0x300000003;
    v141 = &unk_1E25C78E0;
    *(_QWORD *)&v32.f64[1] = 0x300000009;
    v142 = xmmword_18D30BB60;
    __wr = (__CLPK_doublereal *)v145;
    v32.f64[0] = v16;
    sub_18D064EF4((uint64_t)&v136, (uint64_t)&v141, v32);
    v33 = HIDWORD(v178);
    v34 = v178;
    v164 = 0x300000001;
    *(_QWORD *)__ldvl = &unk_1E25C6C20;
    v165 = v166;
    v160 = HIDWORD(v178);
    v161 = v178;
    v162 = v178 * HIDWORD(v178);
    v163 = HIDWORD(v178);
    if (HIDWORD(v178))
    {
      v35 = 0;
      v36 = 0;
      v37 = v180;
      v38 = v181;
      do
      {
        v39 = v35;
        v40 = v36;
        for (i = v34; i; --i)
        {
          v166[v40] = *(_QWORD *)&v38[v39];
          v40 += v33;
          ++v39;
        }
        ++v36;
        v35 += v37;
      }
      while (v36 != v33);
    }
    v169 = 0x300000003;
    v167 = &unk_1E25C78E0;
    v168 = xmmword_18D30BB60;
    __rconde = (__CLPK_doublereal *)v171;
    sub_18D053B2C((uint64_t)&v182, (uint64_t)__ldvl, (uint64_t)&v167);
    v216 = 0x300000003;
    v214 = &unk_1E25C78E0;
    v215 = xmmword_18D30BB60;
    v217 = v218;
    sub_18D0540FC((uint64_t)&v141, (uint64_t)&v167, (uint64_t)&v214);
    v42 = v184;
    v43 = v183;
    v151 = 0x300000001;
    *(_QWORD *)__ldvr = &unk_1E25C6C20;
    v152 = v153;
    v147 = v184;
    v148 = v183;
    v149 = v183 * v184;
    v150 = v184;
    if (v184)
    {
      v44 = 0;
      v45 = 0;
      v46 = v185;
      v47 = v186;
      do
      {
        v48 = v44;
        v49 = v45;
        for (j = v43; j; --j)
        {
          v153[v49] = *(_QWORD *)&v47[v48];
          v49 += v42;
          ++v48;
        }
        ++v45;
        v44 += v46;
      }
      while (v45 != v42);
    }
    v156 = 0x300000003;
    v154 = &unk_1E25C78E0;
    v155 = xmmword_18D30BB60;
    __scale = (__CLPK_doublereal *)v158;
    sub_18D053B2C((uint64_t)&__n, (uint64_t)__ldvr, (uint64_t)&v154);
    v221 = 0x300000003;
    v219 = &unk_1E25C78E0;
    v220 = xmmword_18D30BB60;
    __wi = (__CLPK_doublereal *)v223;
    sub_18D0540FC((uint64_t)&v214, (uint64_t)&v154, (uint64_t)&v219);
    sub_18D04F764((uint64_t)&v198, (uint64_t)&v224, (uint64_t)&v187, (uint64_t)&v187);
    sub_18D16171C((uint64_t)&v198, (uint64_t)&v219);
    v221 = 0x100000001;
    v219 = &unk_1E25C6A70;
    *(_QWORD *)&v51 = 0x100000001;
    *((_QWORD *)&v51 + 1) = 0x100000001;
    v220 = v51;
    __wi = (__CLPK_doublereal *)v223;
    LODWORD(v223[0]) = 3;
    sub_18D163258((uint64_t)&v198, (uint64_t)&v224, (uint64_t)&v187, (uint64_t)&v219);
    sub_18D16182C((uint64_t)&v198, (uint64_t)&__lda);
    v52 = v174;
    v53 = v173;
    v221 = 0x300000001;
    v219 = &unk_1E25C6C20;
    __wi = (__CLPK_doublereal *)v223;
    *(_QWORD *)&v220 = __PAIR64__(v173, v174);
    DWORD2(v220) = v173 * v174;
    HIDWORD(v220) = v174;
    if (v174)
    {
      v54 = 0;
      v55 = 0;
      v56 = v175;
      v57 = v176;
      do
      {
        v58 = v54;
        v59 = v55;
        for (k = v53; k; --k)
        {
          v223[v59] = *(_QWORD *)(v57 + 8 * v58);
          v59 += v52;
          ++v58;
        }
        ++v55;
        v54 += v56;
      }
      while (v55 != v52);
    }
    v61 = DWORD1(v188);
    v62 = v188;
    v216 = 0x300000001;
    v214 = &unk_1E25C6C50;
    v217 = v218;
    *(_QWORD *)&v215 = __PAIR64__(v188, DWORD1(v188));
    DWORD2(v215) = v188 * DWORD1(v188);
    HIDWORD(v215) = DWORD1(v188);
    if (DWORD1(v188))
    {
      v63 = 0;
      v64 = 0;
      v65 = v190;
      v66 = HIDWORD(v188);
      do
      {
        if (v62)
        {
          for (m = 0; m != v62; ++m)
            v218[v64 + HIDWORD(v215) * m] = *((_DWORD *)v65 + v63 + m);
        }
        ++v64;
        v63 += v66;
      }
      while (v64 != v61);
    }
    v143 = 0x100000001;
    v141 = &unk_1E25C6A70;
    *(_QWORD *)&v68 = 0x100000001;
    *((_QWORD *)&v68 + 1) = 0x100000001;
    v142 = v68;
    __wr = (__CLPK_doublereal *)v145;
    v145[0] = 3;
    v200 = 0x300000001;
    v199 = xmmword_18D314670;
    v198 = &off_1E25C4CD0;
    __work = (__CLPK_doublereal *)v202;
    v203 = &v224;
    v206 = 0x100000001;
    v204 = &unk_1E25C6A70;
    v205 = v68;
    v211 = 0x300000001;
    v207 = &v208;
    v209 = &unk_1E25C6C50;
    v210 = xmmword_18D314670;
    v212 = &v213;
    sub_18D053D7C((uint64_t)&v204, (uint64_t)&v141);
    sub_18D053D7C((uint64_t)&v209, (uint64_t)&v214);
    v70 = DWORD2(v205);
    v71 = DWORD2(v210);
    *(_QWORD *)&v199 = __PAIR64__(DWORD2(v210), DWORD2(v205));
    DWORD2(v199) = DWORD2(v210) * DWORD2(v205);
    HIDWORD(v199) = DWORD2(v205);
    if (DWORD2(v210))
    {
      v72 = 0;
      v73 = 0;
      v74 = HIDWORD(v225);
      v75 = __a;
      v76 = v212;
      v77 = v207;
      v78 = __work;
      do
      {
        if ((_DWORD)v70)
        {
          v79 = *((_DWORD *)v76 + v73) * v74;
          v80 = (int *)v77;
          v81 = v72;
          v82 = v70;
          do
          {
            v83 = *v80++;
            v78[v81++] = v75[v83 + v79];
            --v82;
          }
          while (v82);
        }
        ++v73;
        v72 += v70;
      }
      while (v73 != v71);
    }
    if ((_DWORD)v70 != (_DWORD)v220)
    {
      v129 = 376;
      v130 = "this->num_rows_ == A.num_rows_";
      goto LABEL_84;
    }
    if ((_DWORD)v71 != DWORD1(v220))
    {
      v129 = 377;
      v130 = "this->num_cols_ == A.num_cols_";
LABEL_84:
      __assert_rtn("operator=", "cnsubmatrix.h", v129, v130);
    }
    if ((_DWORD)v71)
    {
      v84 = 0;
      v85 = 0;
      v86 = __wi;
      v87 = v207;
      v88 = v212;
      v89 = v203;
      v90 = __work;
      do
      {
        if ((_DWORD)v70)
        {
          v91 = *((_DWORD *)v89 + 5) * *((_DWORD *)v88 + v85);
          v92 = (__CLPK_doublereal *)v89[4];
          v93 = v84;
          v94 = (int *)v87;
          v95 = v70;
          do
          {
            v96 = v86[v93];
            v97 = *v94++;
            v92[v97 + v91] = v96;
            v90[v93++] = v96;
            --v95;
          }
          while (v95);
        }
        ++v85;
        v84 += v70;
      }
      while (v85 != v71);
    }
    __a[3 * SHIDWORD(v225) + 3] = -v16;
    v69.f64[0] = *(float64_t *)(*(_QWORD *)(v132 + 32) + 8 * v9);
    v221 = 0x400000004;
    v219 = &unk_1E25C7FA0;
    v69.f64[0] = 2.0 / (v69.f64[0] * v69.f64[0]);
    v220 = xmmword_18D313080;
    __wi = (__CLPK_doublereal *)v223;
    sub_18D064EF4((uint64_t)&v224, (uint64_t)&v219, v69);
    v200 = 0x400000004;
    v198 = (uint64_t (**)())&unk_1E25C7FA0;
    v199 = xmmword_18D313080;
    __work = (__CLPK_doublereal *)v202;
    sub_18D053FA4((uint64_t)&v193, (uint64_t)&v219, (uint64_t)&v198);
    v10 += v135;
    sub_18D053AA8((uint64_t)&v193, (uint64_t)&v198);
    ++v9;
  }
  while (v9 != v7);
  if (v10 < 2)
    return 25;
  v143 = 0x400000004;
  v141 = &unk_1E25C7FA0;
  v142 = xmmword_18D313080;
  __wr = (__CLPK_doublereal *)v145;
  v138 = 0x400000004;
  v136 = &unk_1E25C7FA0;
  v137 = xmmword_18D313080;
  v139 = (__CLPK_doublereal *)v140;
  v226 = 0x400000004;
  v224 = &unk_1E25C7FA0;
  v225 = xmmword_18D313080;
  __a = (__CLPK_doublereal *)v228;
  v221 = 0x400000004;
  v219 = &unk_1E25C7FA0;
  v220 = xmmword_18D313080;
  __wi = (__CLPK_doublereal *)v223;
  v216 = 0x400000004;
  v214 = &unk_1E25C7FA0;
  v215 = xmmword_18D313080;
  v217 = v218;
  v156 = 0x100000004;
  v154 = &unk_1E25C7E50;
  v155 = xmmword_18D313090;
  __scale = (__CLPK_doublereal *)v158;
  v169 = 0x200000004;
  v167 = &unk_1E25C7EE0;
  v168 = xmmword_18D31CD60;
  __rconde = (__CLPK_doublereal *)v171;
  v200 = 0x100000170;
  v198 = &off_1E25C76D0;
  v199 = xmmword_18D338400;
  __work = (__CLPK_doublereal *)v202;
  v99 = (int)v194;
  sub_18D053AA8((uint64_t)&v224, (uint64_t)&v193);
  LODWORD(v142) = v99;
  DWORD1(v142) = v99;
  DWORD2(v142) = v99 * v99;
  HIDWORD(v142) = v99;
  sub_18D04BE88((uint64_t)&v141, 0.0);
  LODWORD(v220) = v99;
  DWORD1(v220) = v99;
  DWORD2(v220) = v99 * v99;
  HIDWORD(v220) = v99;
  sub_18D04BE88((uint64_t)&v219, 0.0);
  LODWORD(v137) = v99;
  DWORD1(v137) = v99;
  DWORD2(v137) = v99 * v99;
  HIDWORD(v137) = v99;
  sub_18D04BE88((uint64_t)&v136, 0.0);
  LODWORD(v215) = v99;
  DWORD1(v215) = v99;
  DWORD2(v215) = v99 * v99;
  HIDWORD(v215) = v99;
  sub_18D04BE88((uint64_t)&v214, 0.0);
  v182 = 0;
  qmemcpy(__sense, "NVNB", 4);
  __n = v99;
  __lda = v225;
  __ldvl[0] = 1;
  __ldvr[0] = v137;
  *(_QWORD *)__ihi = 0;
  v229 = 0;
  v230 = 368;
  v100 = (cnprint::CNPrinter *)dgeevx_(&__sense[3], &__sense[2], &__sense[1], __sense, &__n, __a, &__lda, __wr, __wi, 0, __ldvl, v139, __ldvr, &__ihi[1], __ihi, __scale, (__CLPK_doublereal *)&v182, __rconde, &__rconde[v99],
                                 __work,
                                 &v230,
                                 0,
                                 &v229);
  if (v229)
  {
    LOWORD(__n) = 4;
    if (v229 < 0)
    {
      LOBYTE(__lda) = 5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__n, (unsigned __int8 *)&__lda, "Error using Eig: input argument %d invalid in geevx.", v101, v102, v103, v104, v105, -(char)v229);
    }
    else
    {
      LOBYTE(__lda) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__n, (unsigned __int8 *)&__lda, "Error using Eig: geevx failed to converge for some eigenvalues.", v101, v102, v103, v104, v105, v131);
    }
  }
  v106 = *__work;
  if (v106 >= 0x171 && cnprint::CNPrinter::GetLogLevel(v100) <= 1)
  {
    LOWORD(__n) = 4;
    LOBYTE(__lda) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__n, (unsigned __int8 *)&__lda, "Warning: Eig optimal workspace size %u is greater than provided workspace size %u; performance may suffer.",
      v101,
      v102,
      v103,
      v104,
      v105,
      v106);
  }
  *(_QWORD *)&v199 = v200;
  DWORD2(v199) = HIDWORD(v200) * v200;
  HIDWORD(v199) = v200;
  *(_QWORD *)&v168 = v99 | 0x200000000;
  DWORD2(v168) = 2 * v99;
  HIDWORD(v168) = v99;
  v107 = vdupq_lane_s32((int32x2_t)(v99 | 0x100000000), 0);
  v107.i32[1] = 1;
  v155 = (__int128)v107;
  if ((_DWORD)v99)
  {
    v108 = 0;
    v109 = __wi;
    v110 = v139;
    v111 = v217;
    do
    {
      if (v109[v108] != 0.0)
      {
        v112 = v108 * v99;
        v113 = v99 + v108;
        v114 = v99;
        do
        {
          *(__CLPK_doublereal *)&v111[2 * v112] = v110[v113];
          *(__CLPK_doublereal *)&v111[2 * v113] = -v110[v113];
          v115 = v110[v112++];
          v110[v113++] = v115;
          --v114;
        }
        while (v114);
        ++v108;
      }
      ++v108;
    }
    while (v108 < v99);
    if (v99 >= 2)
    {
      v116 = __wr;
      v117 = v99 - 1;
      v118 = v109 + 1;
      v119 = __wr + 1;
      v120 = v99 + 1;
      do
      {
        v116[v120] = *v119;
        v109[v120] = *v118;
        *v119++ = 0.0;
        *v118++ = 0.0;
        v120 += v99 + 1;
        --v117;
      }
      while (v117);
    }
  }
  if (DWORD2(v220))
  {
    v121 = 0;
    while (__wi[v121] == 0.0)
    {
      if (DWORD2(v220) == ++v121)
        goto LABEL_71;
    }
    LOWORD(v182) = 4;
    LOBYTE(__n) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v182, (unsigned __int8 *)&__n, "Warning: Imaginary parts of complex eigenvalues are being ignored.", v101, v102, v103, v104, v105, v131);
  }
LABEL_71:
  if (DWORD2(v215))
  {
    v122 = 0;
    while (*(double *)&v217[2 * v122] == 0.0)
    {
      if (DWORD2(v215) == ++v122)
        goto LABEL_76;
    }
    LOWORD(v182) = 4;
    LOBYTE(__n) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v182, (unsigned __int8 *)&__n, "Warning: Imaginary parts of complex eigenvectors are being ignored.", v101, v102, v103, v104, v105, v131);
  }
LABEL_76:
  v169 = 0x100000001;
  v167 = &unk_1E25C6AA0;
  *(_QWORD *)&v123 = 0x100000001;
  *((_QWORD *)&v123 + 1) = 0x100000001;
  v168 = v123;
  __rconde = (__CLPK_doublereal *)v171;
  v156 = 0x100000001;
  v154 = &unk_1E25C6A40;
  v155 = v123;
  __scale = (__CLPK_doublereal *)v158;
  v200 = 0x800000008;
  v198 = (uint64_t (**)())&unk_1E25C87E0;
  v199 = xmmword_18D319930;
  __work = (__CLPK_doublereal *)v202;
  sub_18D1D4A98((uint64_t)&v141, 0, (uint64_t)&v198);
  sub_18D1C2074((uint64_t)&v198, (uint64_t)&v154, (uint64_t)&v167);
  v124 = *(_DWORD *)__rconde;
  v125 = v137;
  v226 = 0x100000004;
  v224 = &unk_1E25C7E80;
  *(_QWORD *)&v225 = v137 | 0x100000000;
  DWORD2(v225) = v137;
  HIDWORD(v225) = v137;
  __a = (__CLPK_doublereal *)v228;
  if ((_DWORD)v137)
  {
    v126 = 0;
    do
    {
      v228[v126] = v126;
      ++v126;
    }
    while (v125 != v126);
  }
  v221 = 0x100000001;
  v219 = &unk_1E25C6A70;
  *(_QWORD *)&v127 = 0x100000001;
  *((_QWORD *)&v127 + 1) = 0x100000001;
  v220 = v127;
  __wi = (__CLPK_doublereal *)v223;
  LODWORD(v223[0]) = v124;
  sub_18D1C9370((uint64_t)&v198, (uint64_t)&v136, (uint64_t)&v224, (uint64_t)&v219);
  sub_18D1EBD1C((uint64_t)&v214, (uint64_t)&v198);
  v226 = 0x100000004;
  v224 = &unk_1E25C7E50;
  v225 = xmmword_18D313090;
  __a = (__CLPK_doublereal *)v228;
  v200 = 0x10000018BLL;
  v198 = &off_1E25C7700;
  v199 = xmmword_18D338410;
  __work = (__CLPK_doublereal *)v202;
  v221 = 0x100000004;
  v219 = &unk_1E25C7E50;
  v220 = xmmword_18D313090;
  __wi = (__CLPK_doublereal *)v223;
  sub_18D159EE0((uint64_t)&v214, (uint64_t)&v224, (uint64_t)&v198, (uint64_t)&v219, "2");
  if (fabs(v128.f64[0]) < 2.22044605e-16)
    return 26;
  v200 = 0x100000004;
  v198 = (uint64_t (**)())&unk_1E25C7E50;
  v199 = xmmword_18D313090;
  __work = (__CLPK_doublereal *)v202;
  v128.f64[0] = 1.0 / v128.f64[0];
  sub_18D064EF4((uint64_t)&v214, (uint64_t)&v198, v128);
  sub_18D053AA8((uint64_t)&v214, (uint64_t)&v198);
  sub_18D053AA8(v8 + 8, (uint64_t)&v214);
  return 0;
}

double sub_18D29BD20(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  double result;
  double *v5;
  int v6;
  uint64_t v7;

  v3 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)&result = 0x100000003;
  *(_QWORD *)(a1 + 24) = 0x100000003;
  *(_QWORD *)a1 = &unk_1E25C7790;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 20) = v3;
  v5 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (v3)
  {
    v6 = *(_DWORD *)(a2 + 20) * a3;
    v7 = *(_QWORD *)(a2 + 32);
    do
    {
      result = *(double *)(v7 + 8 * v6);
      *v5++ = result;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_18D29BD7C(_QWORD *result)
{
  result[15] = &unk_1E25C5EA0;
  result[9] = &unk_1E25C5EA0;
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D29BDA4(_QWORD *a1)
{
  a1[15] = &unk_1E25C5EA0;
  a1[9] = &unk_1E25C5EA0;
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D29BDDC(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D29BDF0(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D29BE14(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D29BE20(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[368];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

_QWORD *sub_18D29BF1C(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

void sub_18D29BF30(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D29BF54(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D29BF60(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[395];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

_QWORD *sub_18D29C05C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x79435E50D79435E5 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 25 - v3;
      v6 = &v2[-(v5 / 0x1A)];
      *result = v6;
      v4 = *v6 + 152 * (26 * (v5 / 0x1A) - v5) + 3800;
    }
    else
    {
      *result = &v2[v3 / 0x1A];
      v4 = v2[v3 / 0x1A] + 152 * (v3 % 0x1A);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t raven::RavenActivityStateEstimatorActiveObject::Configure(cnframework::ActiveObjectBase *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void *__p[2];
  char v25;
  unsigned __int8 v26;
  __int16 v27;

  if (*((_BYTE *)this + 480))
  {
    v27 = 12;
    v26 = 3;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v25 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "Warning: %s configured more than once", v4, v5, v6, v7, v8, (char)v9);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  *((_BYTE *)this + 480) = 0;
  v10 = *a2;
  if (*a2 && *(_BYTE *)(v10 + 33))
  {
    *((_QWORD *)this + 61) = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay(this, 0.0);
    *((_BYTE *)this + 480) = 1;
    (*(void (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)this + 48))(this);
    v27 = 12;
    v26 = 3;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v25 >= 0)
      v16 = __p;
    else
      LOBYTE(v16) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s configured successfully", v11, v12, v13, v14, v15, (char)v16);
    if (v25 < 0)
      operator delete(__p[0]);
    return 0;
  }
  else
  {
    v27 = 12;
    v26 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v25 >= 0)
      v23 = __p;
    else
      LOBYTE(v23) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s could not be configured", v18, v19, v20, v21, v22, (char)v23);
    if (v25 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D29C2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenActivityStateEstimatorActiveObject::IsConfigured(raven::RavenActivityStateEstimatorActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

__n128 raven::RavenActivityStateEstimatorActiveObject::HandleEvent(raven::RavenActivityStateEstimatorActiveObject *this, const raven::ActivityInputEvent *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*((_BYTE *)this + 608))
  {
    v2 = *(_OWORD *)((char *)a2 + 8);
    v3 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)this + 536) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)this + 520) = v3;
    *(_OWORD *)((char *)this + 504) = v2;
    result = *(__n128 *)((char *)a2 + 56);
    v5 = *(_OWORD *)((char *)a2 + 72);
    v6 = *(_OWORD *)((char *)a2 + 88);
    *((_WORD *)this + 300) = *((_WORD *)a2 + 52);
    *(_OWORD *)((char *)this + 584) = v6;
    *(_OWORD *)((char *)this + 568) = v5;
    *(__n128 *)((char *)this + 552) = result;
  }
  else
  {
    *((_QWORD *)this + 62) = &unk_1E25C2A80;
    v7 = *(_OWORD *)((char *)a2 + 8);
    v8 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)this + 536) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)this + 520) = v8;
    *(_OWORD *)((char *)this + 504) = v7;
    result = *(__n128 *)((char *)a2 + 56);
    v9 = *(_OWORD *)((char *)a2 + 72);
    v10 = *(_OWORD *)((char *)a2 + 88);
    *((_WORD *)this + 300) = *((_WORD *)a2 + 52);
    *(_OWORD *)((char *)this + 584) = v10;
    *(_OWORD *)((char *)this + 568) = v9;
    *(__n128 *)((char *)this + 552) = result;
    *((_BYTE *)this + 608) = 1;
  }
  return result;
}

__n128 raven::RavenActivityStateEstimatorActiveObject::HandleEvent(raven::RavenActivityStateEstimatorActiveObject *this, const raven::FitnessSessionEvent *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*((_BYTE *)this + 824))
  {
    *((_OWORD *)this + 39) = *(_OWORD *)((char *)a2 + 8);
    v2 = *(_OWORD *)((char *)a2 + 24);
    v3 = *(_OWORD *)((char *)a2 + 40);
    v4 = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 42) = *(_OWORD *)((char *)a2 + 56);
    *((_OWORD *)this + 43) = v4;
    *((_OWORD *)this + 40) = v2;
    *((_OWORD *)this + 41) = v3;
    v5 = *(_OWORD *)((char *)a2 + 88);
    v6 = *(_OWORD *)((char *)a2 + 104);
    v7 = *(_OWORD *)((char *)a2 + 136);
    *((_OWORD *)this + 46) = *(_OWORD *)((char *)a2 + 120);
    *((_OWORD *)this + 47) = v7;
    *((_OWORD *)this + 44) = v5;
    *((_OWORD *)this + 45) = v6;
    result = *(__n128 *)((char *)a2 + 152);
    v9 = *(_OWORD *)((char *)a2 + 168);
    v10 = *(_OWORD *)((char *)a2 + 184);
    *((_QWORD *)this + 102) = *((_QWORD *)a2 + 25);
    *((_OWORD *)this + 49) = v9;
    *((_OWORD *)this + 50) = v10;
    *((__n128 *)this + 48) = result;
  }
  else
  {
    *((_QWORD *)this + 77) = &unk_1E25C2BD8;
    *((_OWORD *)this + 39) = *(_OWORD *)((char *)a2 + 8);
    v11 = *(_OWORD *)((char *)a2 + 24);
    v12 = *(_OWORD *)((char *)a2 + 40);
    v13 = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 42) = *(_OWORD *)((char *)a2 + 56);
    *((_OWORD *)this + 43) = v13;
    *((_OWORD *)this + 40) = v11;
    *((_OWORD *)this + 41) = v12;
    v14 = *(_OWORD *)((char *)a2 + 88);
    v15 = *(_OWORD *)((char *)a2 + 104);
    v16 = *(_OWORD *)((char *)a2 + 136);
    *((_OWORD *)this + 46) = *(_OWORD *)((char *)a2 + 120);
    *((_OWORD *)this + 47) = v16;
    *((_OWORD *)this + 44) = v14;
    *((_OWORD *)this + 45) = v15;
    result = *(__n128 *)((char *)a2 + 152);
    v17 = *(_OWORD *)((char *)a2 + 168);
    v18 = *(_OWORD *)((char *)a2 + 184);
    *((_QWORD *)this + 102) = *((_QWORD *)a2 + 25);
    *((_OWORD *)this + 49) = v17;
    *((_OWORD *)this + 50) = v18;
    *((__n128 *)this + 48) = result;
    *((_BYTE *)this + 824) = 1;
  }
  return result;
}

uint64_t raven::RavenActivityStateEstimatorActiveObject::HandleEvent(raven::RavenActivityStateEstimatorActiveObject *this, const raven::MapsRouteHintEvent *a2)
{
  return sub_18D29C454((uint64_t)this + 832, (uint64_t)a2);
}

uint64_t sub_18D29C454(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v3 = *(_OWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
    *(_OWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 24) = v3;
    v6 = *(_OWORD *)(a2 + 88);
    v7 = *(_OWORD *)(a2 + 104);
    v8 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v8;
    *(_OWORD *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 88) = v6;
    v9 = *(_OWORD *)(a2 + 152);
    v10 = *(_OWORD *)(a2 + 168);
    v11 = *(_OWORD *)(a2 + 184);
    *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v11;
    *(_OWORD *)(a1 + 168) = v10;
    *(_OWORD *)(a1 + 152) = v9;
    if (a1 != a2)
      sub_18D29C7EC((char *)(a1 + 208), *(char **)(a2 + 208), *(_QWORD *)(a2 + 216), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3));
  }
  else
  {
    *(_QWORD *)a1 = &off_1E25C2AE0;
    v12 = *(_OWORD *)(a2 + 152);
    v13 = *(_OWORD *)(a2 + 168);
    v14 = *(_OWORD *)(a2 + 184);
    v15 = *(_WORD *)(a2 + 200);
    v16 = *(_OWORD *)(a2 + 88);
    v17 = *(_OWORD *)(a2 + 104);
    v18 = *(_OWORD *)(a2 + 120);
    v19 = *(_OWORD *)(a2 + 136);
    v20 = *(_OWORD *)(a2 + 24);
    v21 = *(_OWORD *)(a2 + 40);
    v22 = *(_OWORD *)(a2 + 56);
    v23 = *(_OWORD *)(a2 + 72);
    v24 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 208) = 0;
    *(_OWORD *)(a1 + 8) = v24;
    *(_OWORD *)(a1 + 72) = v23;
    *(_OWORD *)(a1 + 56) = v22;
    *(_OWORD *)(a1 + 40) = v21;
    *(_OWORD *)(a1 + 24) = v20;
    *(_OWORD *)(a1 + 136) = v19;
    *(_OWORD *)(a1 + 120) = v18;
    *(_OWORD *)(a1 + 104) = v17;
    *(_OWORD *)(a1 + 88) = v16;
    *(_WORD *)(a1 + 200) = v15;
    *(_OWORD *)(a1 + 184) = v14;
    *(_OWORD *)(a1 + 168) = v13;
    *(_OWORD *)(a1 + 152) = v12;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    sub_18D20EC90((_QWORD *)(a1 + 208), *(const void **)(a2 + 208), *(_QWORD *)(a2 + 216), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3));
    *(_BYTE *)(a1 + 232) = 1;
  }
  return a1;
}

uint64_t raven::RavenActivityStateEstimatorActiveObject::HandleEvent(uint64_t this, const raven::RavenSystemEvent *a2)
{
  if (!*((_DWORD *)a2 + 26))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 48))(this);
  return this;
}

__n128 raven::RavenActivityStateEstimatorActiveObject::HandleEvent(raven::RavenActivityStateEstimatorActiveObject *this, const raven::StepCountEvent *a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *((unsigned __int8 *)this + 1232);
  if (*((_BYTE *)this + 1232) && *((_DWORD *)a2 + 38) == *((_DWORD *)this + 306) + 1)
  {
    if (*((unsigned __int8 *)this + 1400) == v2)
    {
      *((_QWORD *)this + 174) = *((_QWORD *)this + 153);
      *((_OWORD *)this + 84) = *(_OWORD *)((char *)this + 1176);
      *((_OWORD *)this + 85) = *(_OWORD *)((char *)this + 1192);
      *((_OWORD *)this + 86) = *(_OWORD *)((char *)this + 1208);
      *((_OWORD *)this + 80) = *(_OWORD *)((char *)this + 1112);
      *((_OWORD *)this + 81) = *(_OWORD *)((char *)this + 1128);
      *((_OWORD *)this + 82) = *(_OWORD *)((char *)this + 1144);
      *((_OWORD *)this + 83) = *(_OWORD *)((char *)this + 1160);
      *((_OWORD *)this + 78) = *(_OWORD *)((char *)this + 1080);
      *((_OWORD *)this + 79) = *(_OWORD *)((char *)this + 1096);
    }
    else if (*((_BYTE *)this + 1400))
    {
      *((_BYTE *)this + 1400) = 0;
    }
    else
    {
      *((_QWORD *)this + 155) = &unk_1E25C23D8;
      *((_QWORD *)this + 174) = *((_QWORD *)this + 153);
      *((_OWORD *)this + 84) = *(_OWORD *)((char *)this + 1176);
      *((_OWORD *)this + 85) = *(_OWORD *)((char *)this + 1192);
      *((_OWORD *)this + 86) = *(_OWORD *)((char *)this + 1208);
      *((_OWORD *)this + 80) = *(_OWORD *)((char *)this + 1112);
      *((_OWORD *)this + 81) = *(_OWORD *)((char *)this + 1128);
      *((_OWORD *)this + 82) = *(_OWORD *)((char *)this + 1144);
      *((_OWORD *)this + 83) = *(_OWORD *)((char *)this + 1160);
      *((_OWORD *)this + 78) = *(_OWORD *)((char *)this + 1080);
      *((_OWORD *)this + 79) = *(_OWORD *)((char *)this + 1096);
      *((_BYTE *)this + 1400) = 1;
    }
LABEL_8:
    v3 = *(_OWORD *)((char *)a2 + 8);
    *(_OWORD *)((char *)this + 1096) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)this + 1080) = v3;
    v4 = *(_OWORD *)((char *)a2 + 40);
    v5 = *(_OWORD *)((char *)a2 + 56);
    v6 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 1160) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)this + 1144) = v6;
    *(_OWORD *)((char *)this + 1128) = v5;
    *(_OWORD *)((char *)this + 1112) = v4;
    result = *(__n128 *)((char *)a2 + 104);
    v8 = *(_OWORD *)((char *)a2 + 120);
    v9 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 153) = *((_QWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 1208) = v9;
    *(_OWORD *)((char *)this + 1192) = v8;
    *(__n128 *)((char *)this + 1176) = result;
    return result;
  }
  if (*((_BYTE *)this + 1400))
    *((_BYTE *)this + 1400) = 0;
  if (v2)
    goto LABEL_8;
  *((_QWORD *)this + 134) = &unk_1E25C23D8;
  v10 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 1096) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 1080) = v10;
  v11 = *(_OWORD *)((char *)a2 + 40);
  v12 = *(_OWORD *)((char *)a2 + 56);
  v13 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 1160) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 1144) = v13;
  *(_OWORD *)((char *)this + 1128) = v12;
  *(_OWORD *)((char *)this + 1112) = v11;
  result = *(__n128 *)((char *)a2 + 104);
  v14 = *(_OWORD *)((char *)a2 + 120);
  v15 = *(_OWORD *)((char *)a2 + 136);
  *((_QWORD *)this + 153) = *((_QWORD *)a2 + 19);
  *(_OWORD *)((char *)this + 1208) = v15;
  *(_OWORD *)((char *)this + 1192) = v14;
  *(__n128 *)((char *)this + 1176) = result;
  *((_BYTE *)this + 1232) = 1;
  return result;
}

_QWORD *sub_18D29C7B0(_QWORD *a1, char a2)
{
  return sub_18D0778AC(a1, off_1E25CD598[a2]);
}

void sub_18D29C7C8(cnframework::ActiveObjectBase *a1)
{
  sub_18D073760(a1);
  JUMPOUT(0x18D78B5D4);
}

char *sub_18D29C7EC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666)
      sub_18D07AFE4();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    result = sub_18D184CE0(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::CheckForAndHandleGrossClockOffsetError(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  __int16 v20;

  raven::RavenSequentialGNSSMeasurementSelector::ComputeAndStoreAprioriPseudorangeInnovationStatistics(a1, a2);
  if (!*(_BYTE *)(a1 + 32))
    return 0;
  v3 = *(double *)(a1 + 24);
  v4 = *(double *)(a1 + 8);
  if (vabdd_f64(v3, v4) <= 0.000000015)
    return 0;
  v5 = v3 - v4;
  v6 = *(double *)(a1 + 16);
  v7 = *(double *)(*(_QWORD *)(a1 + 392) + 48 * *(int *)(a1 + 380) + 48);
  v8 = sqrt((v3 - v6 + v5 * 0.2413) * (v3 - v6 + v5 * 0.2413) + v7 * 89875.5179);
  if (v6 >= 0.0)
  {
    if (v6 + v8 * -5.0 <= 0.0)
      return 1;
  }
  else if (v6 + v8 * 5.0 >= 0.0)
  {
    return 1;
  }
  v11 = v6 * 0.00333564095;
  *(double *)(a1 + 72) = v6 * 0.00333564095;
  v9 = 1;
  *(_BYTE *)(a1 + 80) = 1;
  *(double *)(*(_QWORD *)(a1 + 944) + 48) = v6 * 0.00333564095 + *(double *)(*(_QWORD *)(a1 + 944) + 48);
  raven::RavenSequentialGNSSMeasurementSelector::LogClockOffsetCorrection((_QWORD *)a1, v6 * 0.00333564095);
  v20 = 12;
  v19 = 3;
  v12 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR gross clock error detected,%.3lf us,sigma,%.3lf us", v11, sqrt(v7));
  if (*(char *)(a1 + 231) >= 0)
    LOBYTE(v18) = v12;
  else
    v18 = *(_QWORD *)(a1 + 208);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v13, v14, v15, v16, v17, v18);
  return v9;
}

void raven::RavenSequentialGNSSMeasurementSelector::ComputeAndStoreAprioriPseudorangeInnovationStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  double v22;
  char v23[8];
  uint64_t v24;
  char v25;
  void *__p;
  _BYTE *v27;
  uint64_t v28;
  char v29;

  if (*(_BYTE *)(a1 + 1))
  {
    if (*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 0;
    __p = 0;
    v27 = 0;
    v28 = 0;
    v23[0] = 0;
    v24 = 0;
    v25 = 1;
    sub_18D2144E4((char **)&__p);
    v29 = 1;
    v4 = *(_QWORD *)(a2 + 8);
    if (v4 == a2)
    {
LABEL_9:
      if (v23[0])
      {
        v6 = __p;
        if ((unint64_t)(v27 - (_BYTE *)__p) < 0x30)
          goto LABEL_22;
        sub_18D2145A8((uint64_t)v23, 25.0);
        v8 = v7;
        sub_18D2145A8((uint64_t)v23, 50.0);
        v10 = v9;
        sub_18D2145A8((uint64_t)v23, 75.0);
        v12 = v11;
        if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          v23[0] = 0;
          v24 = 0;
          v25 = 1;
          v27 = __p;
          sub_18D2144E4((char **)&__p);
          v29 = 1;
          LOWORD(v22) = 12;
          v21 = 4;
          v14 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR pseudorange innovation quartiles invalid,%.1lf,%.1lf,%.1lf", v8, v10, v12);
          if (*(char *)(a1 + 231) >= 0)
            LOBYTE(v20) = v14;
          else
            v20 = *(_QWORD *)(a1 + 208);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "%s", v15, v16, v17, v18, v19, v20);
        }
        else
        {
          v13 = *(unsigned __int8 *)(a1 + 32);
          *(double *)(a1 + 8) = v8;
          *(double *)(a1 + 16) = v10;
          *(double *)(a1 + 24) = v11;
          if (!v13)
            *(_BYTE *)(a1 + 32) = 1;
        }
      }
    }
    else
    {
      while (1)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (*(_DWORD *)(v5 + 96) == 1)
        {
          if (*(_BYTE *)(v4 + 160))
          {
            v22 = *(double *)(v5 + 120) - *(double *)(v4 + 48);
            if (sub_18D213F5C((uint64_t)v23, (uint64_t *)&v22, 1.0 / (*(float *)(v5 + 168) * *(float *)(v5 + 168))))break;
          }
        }
        v4 = *(_QWORD *)(v4 + 8);
        if (v4 == a2)
          goto LABEL_9;
      }
      v23[0] = 0;
      v24 = 0;
      v25 = 1;
      v27 = __p;
      sub_18D2144E4((char **)&__p);
      v29 = 1;
    }
    v6 = __p;
LABEL_22:
    if (v6)
    {
      v27 = v6;
      operator delete(v6);
    }
  }
}

void sub_18D29CCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *raven::RavenSequentialGNSSMeasurementSelector::LogClockOffsetCorrection(_QWORD *this, double a2)
{
  _QWORD *v2;

  if (*((_BYTE *)this + 1))
  {
    if (*((_BYTE *)this + 1506))
    {
      sub_18D076A18(this + 189, (uint64_t)"NOTE: Clock offset corrected by ", 32);
      v2 = (_QWORD *)std::ostream::operator<<();
      return sub_18D076A18(v2, (uint64_t)" meters\n\n", 9);
    }
  }
  return this;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(uint64_t a1, double *a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v16;
  __int16 v17;

  if (*a2 >= 0.0)
  {
    v17 = 12;
    v16 = 4;
    v8 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR negative rejection threshold invalid,%.3f");
  }
  else
  {
    v4 = a2[1];
    if (v4 >= 0.0)
    {
      v17 = 12;
      v16 = 4;
      v8 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR negative re-weight threshold invalid,%.3f");
    }
    else
    {
      v5 = a2[2];
      if (v5 <= 0.0)
      {
        v17 = 12;
        v16 = 4;
        v8 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR positive re-weight threshold invalid,%.3f");
      }
      else
      {
        v6 = a2[3];
        if (v6 <= 0.0)
        {
          v17 = 12;
          v16 = 4;
          v8 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR positive rejection threshold invalid,%.3f");
        }
        else
        {
          v7 = fabs(v4);
          if (fabs(*a2) >= v7)
          {
            if (v7 >= a3)
            {
              if (v6 >= v5)
              {
                if (v5 >= a3)
                  return 1;
                v17 = 12;
                v16 = 4;
                v8 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR positive re-weight threshold should be outside target sigma count,reweight,%.3f,target,%.3lf");
              }
              else
              {
                v17 = 12;
                v16 = 4;
                v8 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR positive rejection threshold should be outside negative re-weight threshold,reject,%.3lf,reweight,%.3lf");
              }
            }
            else
            {
              v17 = 12;
              v16 = 4;
              v8 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR negative re-weight threshold should be outside target sigma count,reweight_abs,%.3f,target,%.3lf");
            }
          }
          else
          {
            v17 = 12;
            v16 = 4;
            v8 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR negative rejection threshold should be outside negative re-weight threshold,reject,%.3lf,reweight,%.3lf");
          }
        }
      }
    }
  }
  if (*(char *)(a1 + 231) >= 0)
    LOBYTE(v14) = v8;
  else
    v14 = *(_QWORD *)(a1 + 208);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "%s", v9, v10, v11, v12, v13, v14);
  return 0;
}

void raven::RavenSequentialGNSSMeasurementSelector::ComputeHorizontalPositionMisclosureAndHDOP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  long double v7;
  double v8;
  __double2 v9;
  double v10;
  double v11;
  __int128 v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  double v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  double v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD v38[2];
  void *v39;
  __int128 v40;
  uint64_t v41;
  double *v42;
  _BYTE v43[128];
  void *v44;
  __int128 v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _BYTE v55[8];
  uint64_t v56;
  char v57;
  void *__p;
  _BYTE *v59;
  uint64_t v60;
  char v61;
  _BYTE v62[128];
  double v63;
  __int128 v64;
  uint64_t v65;
  double *v66;
  double v67[17];

  if (*(_QWORD *)(a2 + 16))
  {
    sub_18D16AF50((uint64_t)v62, **(float64_t **)(a1 + 288), *(float64_t *)(*(_QWORD *)(a1 + 288) + 8), *(double *)(*(_QWORD *)(a1 + 288) + 16));
    v59 = 0;
    __p = 0;
    v60 = 0;
    v55[0] = 0;
    v56 = 0;
    v57 = 1;
    sub_18D2144E4((char **)&__p);
    v61 = 1;
    v52 = 0x400000004;
    v50 = &unk_1E25C7FA0;
    v53 = &v54;
    v51 = xmmword_18D313080;
    sub_18D04BE88((uint64_t)&v50, 0.0);
    v4 = *(_QWORD *)(a2 + 8);
    if (v4 == a2)
    {
      v5 = 0;
    }
    else
    {
      v5 = 0;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)(v4 + 24) + 96) == 1 && (*(_DWORD *)(v4 + 192) & 0xFFFFFFFE) == 4)
        {
          v6 = *(_QWORD *)(v4 + 16);
          v7 = *(double *)(v6 + 264);
          v8 = cos(v7);
          if (*(_BYTE *)(a1 + 2424))
          {
            v46 = 0x400000001;
            v44 = &unk_1E25C6CE0;
            v45 = xmmword_18D319840;
            v47 = &v48;
            v9 = __sincos_stret(*(double *)(v6 + 272));
            *(double *)&v48 = -(v8 * v9.__sinval);
            *((double *)&v48 + 1) = -(v8 * v9.__cosval);
            *(double *)&v49 = -sin(v7);
            *((_QWORD *)&v49 + 1) = 0x3FF0000000000000;
            v36 = 0x100000004;
            v34 = &unk_1E25C7E50;
            v37 = v38;
            v35 = xmmword_18D313090;
            v38[0] = v48;
            v38[1] = v49;
            v41 = 0x400000004;
            v39 = &unk_1E25C7FA0;
            v40 = xmmword_18D313080;
            v42 = (double *)v43;
            sub_18D053B2C((uint64_t)&v34, (uint64_t)&v44, (uint64_t)&v39);
            v65 = 0x400000004;
            v63 = COERCE_DOUBLE(&unk_1E25C7FA0);
            v64 = xmmword_18D313080;
            v66 = v67;
            sub_18D053FA4((uint64_t)&v50, (uint64_t)&v39, (uint64_t)&v63);
            sub_18D053AA8((uint64_t)&v50, (uint64_t)&v63);
            v7 = *(double *)(*(_QWORD *)(v4 + 16) + 264);
          }
          ++v5;
          if (v7 <= 1.3962634 && v7 >= 0.34906585)
          {
            v10 = *(double *)(*(_QWORD *)(v4 + 24) + 120);
            v11 = *(double *)(v4 + 48);
            v41 = 0x100000001;
            v39 = &unk_1E25C6A40;
            *(_QWORD *)&v12 = 0x100000001;
            *((_QWORD *)&v12 + 1) = 0x100000001;
            v40 = v12;
            v42 = (double *)v43;
            sub_18D053B2C(v4 + 56, a1 + 912, (uint64_t)&v39);
            v13 = (DWORD1(v40) * v40);
            if ((int)v13 >= 1)
            {
              v14 = v42;
              v15 = v67;
              do
              {
                v16 = *v14++;
                *v15++ = v10 - v11 - v16;
                --v13;
              }
              while (v13);
            }
            v63 = fabs(v67[0]) / v8;
            sub_18D213F5C((uint64_t)v55, (uint64_t *)&v63, 1.0);
          }
        }
        v4 = *(_QWORD *)(v4 + 8);
      }
      while (v4 != a2);
    }
    v17 = *(_DWORD *)(a1 + 2440);
    if (v5 - v17 < 4)
      goto LABEL_39;
    if (v55[0])
      v18 = (unint64_t)(v59 - (_BYTE *)__p) >> 4;
    else
      v18 = 0;
    if (v18 - v17 < 4)
    {
LABEL_31:
      if (*(_BYTE *)(a1 + 2424))
      {
        v41 = 0x400000004;
        v39 = &unk_1E25C7FA0;
        v40 = xmmword_18D313080;
        v42 = (double *)v43;
        v46 = 0x100000004;
        v44 = &unk_1E25C7E80;
        v45 = xmmword_18D313090;
        v47 = &v48;
        v36 = 0x100000004;
        v34 = &unk_1E25C7E80;
        v35 = xmmword_18D313090;
        v37 = v38;
        v65 = 0x100000010;
        v63 = COERCE_DOUBLE(&unk_1E25C6350);
        v64 = xmmword_18D319180;
        v66 = v67;
        v25 = sub_18D054568((uint64_t)&v50, (uint64_t)&v44, (uint64_t)&v34, (uint64_t)&v63, (uint64_t)&v39);
        if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v25 >= *(double *)(*(_QWORD *)(a1 + 192) + 920))
        {
          LOWORD(v63) = 12;
          LOBYTE(v44) = 4;
          v26 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "t,%.3lf, pseudoinverse of design matrix is poorly conditioned, condition number, %.3lf", *(double *)(a1 + 104) + (double)*(uint64_t *)(a1 + 96), v25);
          if (*(char *)(a1 + 231) >= 0)
            LOBYTE(v32) = v26;
          else
            v32 = *(_QWORD *)(a1 + 208);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, (unsigned __int8 *)&v44, "%s", v27, v28, v29, v30, v31, v32);
        }
        else
        {
          *(double *)(a1 + 2448) = sqrt(*v42 + v42[SHIDWORD(v40) + 1]);
        }
      }
LABEL_39:
      if (__p)
      {
        v59 = __p;
        operator delete(__p);
      }
      return;
    }
    v19 = *(unsigned __int8 *)(a1 + 1024);
    if (v19 > 9)
      goto LABEL_28;
    v20 = 1 << v19;
    if ((v20 & 0x393) != 0)
    {
      v21 = 75.0;
LABEL_30:
      sub_18D2145A8((uint64_t)v55, v21);
      *(_QWORD *)(a1 + 2432) = v24;
      goto LABEL_31;
    }
    if ((v20 & 0x4C) != 0)
    {
      v22 = *(char *)(a1 + 1016);
      if (v22 <= 6)
      {
        v21 = dbl_18D339058[v22];
        goto LABEL_30;
      }
    }
    else
    {
LABEL_28:
      v23 = *(unsigned __int8 *)(a1 + 1016);
      if ((v23 - 3) >= 2)
      {
        v33 = v23 == 6 || v23 == 0;
        v21 = 35.0;
        if (v33)
          v21 = 75.0;
        goto LABEL_30;
      }
    }
    v21 = 50.0;
    goto LABEL_30;
  }
}

void sub_18D29D4C0(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void raven::RavenSequentialGNSSMeasurementSelector::ComputeInnovationData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  double v8;
  double v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  double v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  double *v22;
  _BYTE v23[64];
  void *v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v28[8];
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 16) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(int64x2_t *)a4 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_BYTE *)(a4 + 16) = 1;
    v7 = a3 + 8;
    v8 = *(double *)a3;
    v9 = *(double *)(a2 + 120);
    v21 = 0x100000001;
    v19 = &unk_1E25C6A40;
    *(_QWORD *)&v10 = 0x100000001;
    *((_QWORD *)&v10 + 1) = 0x100000001;
    v20 = v10;
    v22 = (double *)v23;
    sub_18D053B2C(a3 + 8, a1 + 912, (uint64_t)&v19);
    v12 = (DWORD1(v20) * v20);
    if ((int)v12 >= 1)
    {
      v13 = v22;
      v14 = (double *)v28;
      do
      {
        v15 = *v13++;
        *v14++ = v9 - v8 - v15;
        --v12;
      }
      while (v12);
      v11 = v28[0];
    }
    *(_QWORD *)a4 = v11;
    v26 = 0x800000001;
    v24 = &unk_1E25C6E00;
    v25 = xmmword_18D331E20;
    v27 = v28;
    sub_18D053B2C(v7, a1 + 360, (uint64_t)&v24);
    v17 = *(_DWORD *)(a3 + 16);
    v16 = *(_DWORD *)(a3 + 20);
    v21 = 0x100000008;
    v19 = &unk_1E25C86C0;
    *(_QWORD *)&v20 = __PAIR64__(v17, v16);
    DWORD2(v20) = v17 * v16;
    HIDWORD(v20) = v16;
    v22 = (double *)v23;
    sub_18D073454(v7, (uint64_t)&v19);
    v31 = 0x100000001;
    v29 = &unk_1E25C6A40;
    *(_QWORD *)&v18 = 0x100000001;
    *((_QWORD *)&v18 + 1) = 0x100000001;
    v30 = v18;
    v32 = &v33;
    sub_18D053B2C((uint64_t)&v24, (uint64_t)&v19, (uint64_t)&v29);
    *(_QWORD *)(a4 + 8) = *v32;
  }
}

void raven::RavenSequentialGNSSMeasurementSelector::ComputeMeasurementFunctionOutput(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  const char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  double *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  double v45;
  unint64_t v46;
  int8x16_t v49;
  int8x16_t v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  double v60;
  int v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  int8x16_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  cnprint::CNPrinter *v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int8x16_t v99;
  char *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  uint64_t v105;
  double v106;
  int8x16_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  cnprint::CNPrinter *v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  const char *v123;
  unsigned int v124;
  const char *v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  double v134;
  double v135;
  const char *v136;
  unsigned int v137;
  const char *v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  unsigned int v147;
  const char *v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *p_shared_owners;
  unint64_t v158;
  uint64_t v159;
  double v160;
  uint64_t v161;
  double v162;
  double v163;
  uint64_t v164;
  double v165;
  double v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  double v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  uint64_t v195;
  int8x16_t v196;
  int8x16_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  double *v204;
  double *v205;
  uint64_t v206;
  int v207;
  double *v208;
  int v209;
  double v210;
  __int128 v211;
  double *v212;
  uint64_t v213;
  __int128 v214;
  cnprint::CNPrinter *v215;
  uint64_t v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  __int128 v224;
  double v225;
  double *v226;
  uint64_t v227;
  double v228;
  double v229;
  double *v230;
  uint64_t v231;
  double v232;
  uint64_t *v233;
  uint64_t *v234;
  __int128 v235;
  cnprint::CNPrinter *v236;
  uint64_t v237;
  double v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  void *v247;
  cnprint::CNPrinter *v248;
  uint64_t v249;
  double v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  double v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  uint64_t v278;
  void *__p[2];
  char v280;
  float64x2_t src;
  void *v282[2];
  _OWORD v283[2];
  __int128 v284;
  void (**v285)(cnnavigation::GNSSEphemerides *__hidden);
  void *v286;
  char v287;
  void *v288[2];
  char v289;
  void *v290[2];
  char v291;
  std::string v292;
  uint64_t v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  _BYTE v301[64];
  __int128 v302;
  __int128 v303;
  void (**v304)(cnnavigation::GNSSEphemerides *__hidden);
  std::string v305;
  uint64_t v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  void *v318;
  __int128 v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  void *v323;
  __int128 v324;
  uint64_t v325;
  double *v326;
  _QWORD v327[9];
  __int128 v328;
  uint64_t v329;
  double *v330;
  _QWORD v331[2];
  __int128 v332;
  uint64_t v333;
  double *v334;
  _QWORD v335[2];
  __int128 v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340[13];
  uint64_t v341[13];
  _BYTE v342[24];
  uint64_t v343;
  _BYTE *v344;
  _BYTE v345[72];
  _BYTE v346[24];
  uint64_t v347;
  double *v348;
  uint64_t v349;
  _BYTE v350[24];
  uint64_t v351;
  double *v352;
  uint64_t v353;
  _QWORD v354[2];
  void *v355;
  __int128 v356;
  __int128 v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  float64x2_t v362;
  __int128 v363;
  __int128 v364;
  double v365;
  _QWORD v366[2];
  uint64_t v367;
  _BYTE v368[24];
  uint64_t v369;
  _BYTE v370[24];
  __int128 v371;
  __int128 v372;
  __int128 v373;
  void (**v374)(cnnavigation::GNSSEphemerides *__hidden);
  void *v375;
  char v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  float64x2_t v379;
  __int128 v380;
  __int128 v381;
  double v382;
  _QWORD v383[4];

  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 112) = 0;
  v337 = 0x100000001;
  v335[1] = &unk_1E25C6A40;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  v336 = v8;
  v338 = &v339;
  v333 = 0x100000001;
  v331[1] = &unk_1E25C6A40;
  v332 = v8;
  v334 = (double *)v335;
  v329 = 0x100000001;
  v327[8] = &unk_1E25C6A40;
  v328 = v8;
  v330 = (double *)v331;
  v325 = 0x800000001;
  v323 = &unk_1E25C6E00;
  v324 = xmmword_18D331E20;
  v326 = (double *)v327;
  v320 = 0x100000001;
  v318 = &unk_1E25C6A40;
  v319 = v8;
  v321 = &v322;
  v9 = atomic_load((unsigned __int8 *)&qword_1ECF24330);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24330))
  {
    qword_1ECF24360 = 0x100000001;
    qword_1ECF24348 = (uint64_t)&unk_1E25C6A40;
    qword_1ECF24368 = (uint64_t)&unk_1ECF24370;
    *(_QWORD *)&v265 = 0x100000001;
    *((_QWORD *)&v265 + 1) = 0x100000001;
    xmmword_1ECF24350 = v265;
    sub_18D04BE88((uint64_t)&qword_1ECF24348, 0.0);
    __cxa_atexit((void (*)(void *))sub_18D164C8C, &qword_1ECF24348, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24330);
  }
  sub_18D0778AC(&v292, "");
  LOBYTE(v293) = 0;
  HIDWORD(v293) = -1;
  v294 = 0uLL;
  LOBYTE(v295) = 0;
  *(_QWORD *)&v296 = 0;
  *((_QWORD *)&v295 + 1) = 0;
  BYTE8(v296) = 0;
  v297 = 0uLL;
  LOBYTE(v298) = 0;
  *(_QWORD *)&v299 = 0;
  *((_QWORD *)&v298 + 1) = 0;
  *((_QWORD *)&v299 + 1) = 0x7FF8000000000000;
  LODWORD(v300) = 0;
  BYTE4(v300) = 0;
  *((_QWORD *)&v300 + 1) = 0x7FF8000000000000;
  *(int64x2_t *)&v301[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v301[24] = *(_OWORD *)&v301[8];
  *(_OWORD *)&v301[40] = *(_OWORD *)&v301[8];
  *(_DWORD *)v301 = 2143289344;
  *(_DWORD *)&v301[56] = 2143289344;
  v301[60] = 0;
  LOBYTE(v302) = 0;
  BYTE4(v302) = 0;
  BYTE8(v302) = 0;
  WORD6(v302) = 0;
  BYTE14(v302) = 1;
  v303 = *(_OWORD *)&v301[8];
  v304 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
  sub_18D0778AC(&v305, "");
  LOBYTE(v306) = 0;
  v307 = 0u;
  HIDWORD(v306) = -1;
  v308 = 0u;
  v309 = 0u;
  v310 = 0u;
  v311 = 0u;
  v312 = 0u;
  v313 = 0u;
  v314 = 0u;
  v315 = 0u;
  v316 = 0u;
  v317 = 0u;
  *(_QWORD *)&v10 = 0x100000001;
  *((_QWORD *)&v10 + 1) = 0x100000001;
  v336 = v10;
  v332 = v10;
  *v338 = *((_QWORD *)a3 + 15);
  *v334 = (float)(*((float *)a3 + 42) * *((float *)a3 + 42));
  v11 = a3[3];
  v296 = a3[2];
  v297 = v11;
  v12 = a3[1];
  v294 = *a3;
  v295 = v12;
  v13 = a3[7];
  v300 = a3[6];
  *(_OWORD *)v301 = v13;
  v14 = a3[5];
  v298 = a3[4];
  v299 = v14;
  v15 = a3[12];
  v16 = a3[10];
  v302 = a3[11];
  v303 = v15;
  v17 = a3[9];
  *(_OWORD *)&v301[16] = a3[8];
  *(_OWORD *)&v301[32] = v17;
  *(_OWORD *)&v301[48] = v16;
  std::string::operator=(&v292, (const std::string *)a2);
  v293 = *(_QWORD *)(a2 + 24);
  std::string::operator=(&v305, (const std::string *)(a2 + 40));
  v306 = *(_QWORD *)(a2 + 64);
  v18 = *(_OWORD *)(a2 + 184);
  v19 = *(_OWORD *)(a2 + 216);
  v315 = *(_OWORD *)(a2 + 200);
  v316 = v19;
  v317 = *(_OWORD *)(a2 + 232);
  v20 = *(_OWORD *)(a2 + 120);
  v21 = *(_OWORD *)(a2 + 152);
  v311 = *(_OWORD *)(a2 + 136);
  v312 = v21;
  v313 = *(_OWORD *)(a2 + 168);
  v314 = v18;
  v22 = *(_OWORD *)(a2 + 88);
  v307 = *(_OWORD *)(a2 + 72);
  v308 = v22;
  v309 = *(_OWORD *)(a2 + 104);
  v310 = v20;
  switch(*((_DWORD *)a3 + 24))
  {
    case 0:
    case 5:
      LOWORD(v367) = 12;
      LOBYTE(v355) = 4;
      v23 = sub_18D181C54(a2);
      v24 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR %s unexpected meas type %d", v23, *((_DWORD *)a3 + 24));
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v30) = v24;
      else
        v30 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v367, (unsigned __int8 *)&v355, "%s", v25, v26, v27, v28, v29, v30);
      goto LABEL_158;
    case 1:
      sub_18D24B36C((uint64_t)&v367, (__int128 *)&v292);
      *(_OWORD *)v370 = *(_OWORD *)(a1 + 96);
      v61 = v368[0];
      v62 = (char *)sub_18D181C54((uint64_t)&v292);
      sub_18D0778AC(v290, v62);
      sub_18D1A1738((uint64_t)&v367, v61, (__int128 *)v290);
      if (v291 < 0)
        operator delete(v290[0]);
      sub_18D1893E8(&v377, (uint64_t *)(a2 + 312));
      v63 = (char *)__dynamic_cast(&v367, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B44F0, 0);
      if (!v63)
      {
        LOWORD(v355) = 12;
        LOBYTE(src.f64[0]) = 4;
        v270 = MEMORY[0x30] + (double)MEMORY[0x28];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "time,%.3lf,h-function failure on line %d: %s() %s", v64, v65, v66, v67, v68, SLOBYTE(v270));
        goto LABEL_97;
      }
      v69 = v63;
      v70 = *(_DWORD *)(a1 + 264);
      v71 = *(_DWORD *)(a1 + 268);
      if (v70 <= v71)
        v72 = *(_DWORD *)(a1 + 268);
      else
        v72 = *(_DWORD *)(a1 + 264);
      if (!v70
        || !v71
        || v72 != 8
        || (xmmword_1ECF24350 <= DWORD1(xmmword_1ECF24350)
          ? (v73 = DWORD1(xmmword_1ECF24350))
          : (v73 = xmmword_1ECF24350),
            !(_DWORD)xmmword_1ECF24350 || !DWORD1(xmmword_1ECF24350) || v73 != 1))
      {
        LOWORD(v355) = 12;
        LOBYTE(src.f64[0]) = 4;
        v134 = *((double *)v63 + 6) + (double)*((uint64_t *)v63 + 5);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "time,%.3lf,h-function failure on line %d: %s() %s", v64, v65, v66, v67, v68, SLOBYTE(v134));
LABEL_97:
        LOWORD(v355) = 12;
        LOBYTE(src.f64[0]) = 4;
        v146 = sub_18D181C54(a2);
        v147 = *((_DWORD *)a3 + 24) - 1;
        if (v147 > 4)
          v148 = "UnknownType";
        else
          v148 = off_1E25CD780[v147];
        v149 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR %s %s h-function failed", v146, v148);
        if (*(char *)(a1 + 231) >= 0)
          LOBYTE(v155) = v149;
        else
          v155 = *(_QWORD *)(a1 + 208);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "%s", v150, v151, v152, v153, v154, v155);
        v367 = (uint64_t)&unk_1E25C3BC0;
        v156 = v378;
        if (v378)
        {
          p_shared_owners = (unint64_t *)&v378->__shared_owners_;
          do
            v158 = __ldaxr(p_shared_owners);
          while (__stlxr(v158 - 1, p_shared_owners));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        v367 = (uint64_t)&unk_1E25B8EE0;
        if (SHIBYTE(v369) < 0)
          operator delete(*(void **)&v368[8]);
        goto LABEL_110;
      }
      if (!v63[128])
      {
        LOWORD(v355) = 12;
        LOBYTE(src.f64[0]) = 4;
        v166 = *((double *)v63 + 6) + (double)*((uint64_t *)v63 + 5);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "time,%.3lf,h-function failure on line %d: %s() %s", v64, v65, v66, v67, v68, SLOBYTE(v166));
        LOWORD(v355) = 12;
        LOBYTE(src.f64[0]) = 4;
        v167 = *((_QWORD *)v69 + 11);
        v168 = *((double *)v69 + 12);
        sub_18D181C54((uint64_t)(v69 + 56));
        v271 = v168 + (double)v167;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "t,%.3lf,%s,TAI time invalid", v169, v170, v171, v172, v173, SLOBYTE(v271));
        goto LABEL_97;
      }
      v74 = *(_QWORD *)(a1 + 288);
      *(_OWORD *)v350 = *(_OWORD *)v74;
      *(_QWORD *)&v350[16] = *(_QWORD *)(v74 + 16);
      *(_QWORD *)v342 = &unk_1E25B97E0;
      v341[0] = (uint64_t)&unk_1E25B9818;
      v340[0] = 0;
      *(double *)&v75 = *(double *)(v74 + 48) * 0.000001;
      *(_OWORD *)v282 = 0u;
      v283[0] = 0u;
      src = 0u;
      *(_OWORD *)v346 = *(_OWORD *)(v63 + 136);
      v76.i64[1] = *(_QWORD *)&v346[8];
      v76.i64[0] = *((_QWORD *)v63 + 24);
      LOWORD(v355) = 0;
      v356 = 0u;
      v357 = 0u;
      v358 = 0;
      v360 = 0;
      v359 = 0;
      v361 = 0;
      if (cnnavigation::GNSSPseudorange((uint64_t)v346, (uint64_t)&v355, (uint64_t)v350, (uint64_t)(v63 + 296), (uint64_t *)v342, v341, (double *)v340, 1, v76, (int8x16_t)v75, &src))
      {
        LOWORD(v355) = 12;
        v346[0] = 4;
        v82 = *((double *)v69 + 6) + (double)*((uint64_t *)v69 + 5);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, v346, "time,%.3lf,h-function failure on line %d: %s() %s", v77, v78, v79, v80, v81, SLOBYTE(v82));
        if (cnprint::CNPrinter::GetLogLevel(v83) <= 1)
        {
          LOWORD(v355) = 12;
          v346[0] = 1;
          v84 = *((_QWORD *)v69 + 11);
          v85 = *((double *)v69 + 12);
          sub_18D181C54((uint64_t)(v69 + 56));
          v266 = v85 + (double)v84;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, v346, "t,%.3lf,%s,GNSSPseudorange returned != 0", v86, v87, v88, v89, v90, SLOBYTE(v266));
        }
        goto LABEL_97;
      }
      *(_QWORD *)&v202 = 0x100000001;
      *((_QWORD *)&v202 + 1) = 0x100000001;
      v328 = v202;
      *(_QWORD *)&v357 = 0x800000001;
      v355 = &unk_1E25C6E00;
      *((_QWORD *)&v357 + 1) = &v358;
      v356 = xmmword_18D331E20;
      sub_18D04BE88((uint64_t)&v355, 0.0);
      sub_18D053AA8((uint64_t)&v323, (uint64_t)&v355);
      v203 = *((_QWORD *)v69 + 64);
      if (v203)
      {
        *v330 = *(double *)v340 + *(double *)v203 + *(double *)qword_1ECF24368;
        v204 = *(double **)(v203 + 40);
        v205 = v326;
        *v326 = *v204;
        v206 = *(int *)(v203 + 28);
        v207 = HIDWORD(v324);
        v205[SHIDWORD(v324)] = v204[v206];
        v208 = &v204[2 * v206];
        v209 = v207;
      }
      else
      {
        *v330 = *(double *)v340 + *(double *)qword_1ECF24368;
        v205 = v326;
        *v326 = *(double *)v282;
        v209 = HIDWORD(v324);
        v205[SHIDWORD(v324)] = *(double *)&v282[1];
        v208 = (double *)v283;
      }
      v205[2 * v209] = *v208;
      v205[6 * v209] = *((double *)v283 + 1) * 0.000001;
      *(_QWORD *)&v357 = 0x100000001;
      v355 = &unk_1E25C6A40;
      *((_QWORD *)&v357 + 1) = &v358;
      *(_QWORD *)&v235 = 0x100000001;
      *((_QWORD *)&v235 + 1) = 0x100000001;
      v356 = v235;
      sub_18D04BE88((uint64_t)&v355, 0.0);
      **((_QWORD **)&v357 + 1) = 0x3FF0000000000000;
      sub_18D053AA8((uint64_t)&v318, (uint64_t)&v355);
      if (!cnprint::CNPrinter::GetLogLevel(v236))
      {
        LOWORD(v355) = 12;
        v346[0] = 0;
        v237 = *((_QWORD *)v69 + 11);
        v238 = *((double *)v69 + 12);
        sub_18D181C54((uint64_t)(v69 + 56));
        v276 = v238 + (double)v237;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, v346, "t,%.3lf,%s,using PSR,predicted,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v239, v240, v241, v242, v243, SLOBYTE(v276));
      }
      v367 = (uint64_t)&unk_1E25C3BC0;
      v244 = v378;
      if (v378)
      {
        v245 = (unint64_t *)&v378->__shared_owners_;
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
LABEL_135:
      v367 = (uint64_t)&unk_1E25B8EE0;
      if (SHIBYTE(v369) < 0)
        operator delete(*(void **)&v368[8]);
      v374 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
      if (v376 < 0)
        operator delete(v375);
      v374 = off_1E25B93B0;
      if (SHIBYTE(v371) < 0)
      {
        v247 = *(void **)&v370[16];
LABEL_141:
        operator delete(v247);
      }
LABEL_150:
      v256 = *v330;
      if ((*(_QWORD *)v330 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        LOWORD(v367) = 12;
        LOBYTE(v355) = 4;
        v257 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR predicted measurement invalid,%.3lf,type,%d", v256, *((_DWORD *)a3 + 24));
        if (*(char *)(a1 + 231) >= 0)
          LOBYTE(v263) = v257;
        else
          v263 = *(_QWORD *)(a1 + 208);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v367, (unsigned __int8 *)&v355, "%s", v258, v259, v260, v261, v262, v263);
      }
      v373 = 0u;
      v372 = 0u;
      v371 = 0u;
      *(_OWORD *)&v370[8] = 0u;
      v369 = 0x800000001;
      v367 = 0x7FF8000000000000;
      *(_QWORD *)v368 = &unk_1E25C6E00;
      *(_OWORD *)&v368[8] = xmmword_18D331E20;
      *(_QWORD *)v370 = &v370[8];
      if (*(_BYTE *)(a4 + 112))
      {
        *(_QWORD *)(a4 + 8) = &unk_1E25C5E70;
        *(_BYTE *)(a4 + 112) = 0;
      }
      *(_QWORD *)a4 = 0x7FF8000000000000;
      sub_18D2A970C(a4 + 8, (uint64_t)v368);
      *(_BYTE *)(a4 + 112) = 1;
      *(double *)a4 = *v330;
      sub_18D053AA8(v264, (uint64_t)&v323);
LABEL_158:
      v304 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
      if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v305.__r_.__value_.__l.__data_);
      v304 = off_1E25B93B0;
      if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v292.__r_.__value_.__l.__data_);
      return;
    case 2:
      sub_18D24B5B0((uint64_t)&v367, (__int128 *)&v292);
      *(_OWORD *)v370 = *(_OWORD *)(a1 + 96);
      v91 = v368[0];
      v92 = (char *)sub_18D181C54((uint64_t)&v292);
      sub_18D0778AC(v288, v92);
      sub_18D1A1738((uint64_t)&v367, v91, (__int128 *)v288);
      if (v289 < 0)
        operator delete(v288[0]);
      v93 = (char *)__dynamic_cast(&v367, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B4708, 0);
      if (v93)
      {
        v100 = v93;
        v101 = *(_DWORD *)(a1 + 264);
        v102 = *(_DWORD *)(a1 + 268);
        if (v101 <= v102)
          v103 = *(_DWORD *)(a1 + 268);
        else
          v103 = *(_DWORD *)(a1 + 264);
        if (v101
          && v102
          && v103 == 8
          && (xmmword_1ECF24350 <= DWORD1(xmmword_1ECF24350)
            ? (v104 = DWORD1(xmmword_1ECF24350))
            : (v104 = xmmword_1ECF24350),
              (_DWORD)xmmword_1ECF24350 && DWORD1(xmmword_1ECF24350) && v104 == 1))
        {
          if (v93[128])
          {
            v105 = *(_QWORD *)(a1 + 288);
            *(_OWORD *)v350 = *(_OWORD *)v105;
            *(_QWORD *)&v350[16] = *(_QWORD *)(v105 + 16);
            *(_OWORD *)v346 = *(_OWORD *)(v105 + 24);
            *(_QWORD *)&v346[16] = *(_QWORD *)(v105 + 40);
            v341[0] = (uint64_t)&unk_1E25B97E0;
            v340[0] = (uint64_t)&unk_1E25B9818;
            v379.f64[0] = 0.0;
            v284 = 0u;
            *(_OWORD *)v282 = 0u;
            memset(v283, 0, sizeof(v283));
            v106 = *(double *)(v105 + 56);
            *(double *)v99.i64 = *(double *)(v105 + 48) / 1000000.0;
            src = 0u;
            *(_OWORD *)v342 = *(_OWORD *)(v93 + 136);
            v107.i64[1] = *(_QWORD *)&v342[8];
            v107.i64[0] = *((_QWORD *)v93 + 24);
            LOWORD(v355) = 0;
            v356 = 0u;
            v357 = 0u;
            v358 = 0;
            v360 = 0;
            v359 = 0;
            v361 = 0;
            if (!cnnavigation::GNSSDopplerShift((uint64_t)v342, (const cnnavigation::GNSSUTCParameters *)&v355, (uint64_t)v350, (double *)v346, (uint64_t)(v93 + 296), v341, v340, 1, v107, v99, v106 / 1000000.0, v379.f64, 1u, (uint64_t)&src))
            {
              v210 = 299792458.0 / *((double *)v100 + 24);
              *(_QWORD *)&v211 = 0x100000001;
              *((_QWORD *)&v211 + 1) = 0x100000001;
              v328 = v211;
              *v330 = *(double *)qword_1ECF24368 - v210 * v379.f64[0];
              *(_QWORD *)&v357 = 0x800000001;
              v355 = &unk_1E25C6E00;
              *((_QWORD *)&v357 + 1) = &v358;
              v356 = xmmword_18D331E20;
              sub_18D04BE88((uint64_t)&v355, 0.0);
              sub_18D053AA8((uint64_t)&v323, (uint64_t)&v355);
              v212 = v326;
              *v326 = -(*(double *)v282 * v210);
              v213 = SHIDWORD(v324);
              v212[SHIDWORD(v324)] = -(*(double *)&v282[1] * v210);
              v212[2 * v213] = -(*(double *)v283 * v210);
              v212[3 * (int)v213] = -(*((double *)v283 + 1) * v210);
              v212[4 * v213] = -(*(double *)&v283[1] * v210);
              v212[5 * (int)v213] = -(*((double *)&v283[1] + 1) * v210);
              v212[6 * (int)v213] = -(*(double *)&v284 * v210) / 1000000.0;
              v212[7 * (int)v213] = -(*((double *)&v284 + 1) * v210) / 1000000.0;
              *(_QWORD *)&v357 = 0x100000001;
              v355 = &unk_1E25C6A40;
              *((_QWORD *)&v357 + 1) = &v358;
              *(_QWORD *)&v214 = 0x100000001;
              *((_QWORD *)&v214 + 1) = 0x100000001;
              v356 = v214;
              sub_18D04BE88((uint64_t)&v355, 0.0);
              **((_QWORD **)&v357 + 1) = 0x3FF0000000000000;
              sub_18D053AA8((uint64_t)&v318, (uint64_t)&v355);
              if (!cnprint::CNPrinter::GetLogLevel(v215))
              {
                LOWORD(v355) = 12;
                v342[0] = 0;
                v216 = *((_QWORD *)v100 + 11);
                v217 = *((double *)v100 + 12);
                sub_18D181C54((uint64_t)(v100 + 56));
                v275 = v217 + (double)v216;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, v342, "t,%.3lf,%s,using Doppler,predicted,%.3lf,obs,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,clockDriftMps,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v218, v219, v220, v221, v222, SLOBYTE(v275));
              }
              goto LABEL_135;
            }
            LOWORD(v355) = 12;
            v342[0] = 4;
            v113 = *((double *)v100 + 6) + (double)*((uint64_t *)v100 + 5);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, v342, "time,%.3lf,h-function failure on line %d: %s() %s", v108, v109, v110, v111, v112, SLOBYTE(v113));
            if (cnprint::CNPrinter::GetLogLevel(v114) <= 1)
            {
              LOWORD(v355) = 12;
              v342[0] = 1;
              v115 = *((_QWORD *)v100 + 11);
              v116 = *((double *)v100 + 12);
              sub_18D181C54((uint64_t)(v100 + 56));
              v267 = v116 + (double)v115;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, v342, "t,%.3lf,%s,GNSSDopplerShift returned != 0", v117, v118, v119, v120, v121, SLOBYTE(v267));
            }
          }
          else
          {
            LOWORD(v355) = 12;
            LOBYTE(src.f64[0]) = 4;
            v174 = *((double *)v93 + 6) + (double)*((uint64_t *)v93 + 5);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "time,%.3lf,h-function failure on line %d: %s() %s", v94, v95, v96, v97, v98, SLOBYTE(v174));
            LOWORD(v355) = 12;
            LOBYTE(src.f64[0]) = 4;
            v175 = *((_QWORD *)v100 + 11);
            v176 = *((double *)v100 + 12);
            sub_18D181C54((uint64_t)(v100 + 56));
            v272 = v176 + (double)v175;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "t,%.3lf,%s,TAI time invalid", v177, v178, v179, v180, v181, SLOBYTE(v272));
          }
        }
        else
        {
          LOWORD(v355) = 12;
          LOBYTE(src.f64[0]) = 4;
          v135 = *((double *)v93 + 6) + (double)*((uint64_t *)v93 + 5);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "time,%.3lf,h-function failure on line %d: %s() %s", v94, v95, v96, v97, v98, SLOBYTE(v135));
        }
      }
      else
      {
        LOWORD(v355) = 12;
        LOBYTE(src.f64[0]) = 4;
        v269 = MEMORY[0x30] + (double)MEMORY[0x28];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "time,%.3lf,h-function failure on line %d: %s() %s", v94, v95, v96, v97, v98, SLOBYTE(v269));
      }
      LOWORD(v355) = 12;
      LOBYTE(src.f64[0]) = 4;
      v136 = sub_18D181C54(a2);
      v137 = *((_DWORD *)a3 + 24) - 1;
      if (v137 > 4)
        v138 = "UnknownType";
      else
        v138 = off_1E25CD780[v137];
      v139 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR %s %s h-function failed", v136, v138);
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v145) = v139;
      else
        v145 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, (unsigned __int8 *)&src, "%s", v140, v141, v142, v143, v144, v145);
      v367 = (uint64_t)&unk_1E25B8EE0;
      if (SHIBYTE(v369) < 0)
        operator delete(*(void **)&v368[8]);
LABEL_110:
      v374 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
      if (v376 < 0)
        operator delete(v375);
      v374 = off_1E25B93B0;
      if (SHIBYTE(v371) < 0)
      {
        v133 = *(void **)&v370[16];
        goto LABEL_114;
      }
      goto LABEL_158;
    case 3:
    case 4:
      sub_18D24B7D4((uint64_t)&src, (__int128 *)&v292);
      *(_OWORD *)((char *)v283 + 8) = *(_OWORD *)(a1 + 96);
      v31 = LOBYTE(src.f64[1]);
      v32 = (char *)sub_18D181C54((uint64_t)&v292);
      sub_18D0778AC(__p, v32);
      sub_18D1A1738((uint64_t)&src, v31, (__int128 *)__p);
      if (v280 < 0)
        operator delete(__p[0]);
      v33 = (double *)__dynamic_cast(&src, (const struct __class_type_info *)&unk_1E25B1470, (const struct __class_type_info *)&unk_1E25B49F8, 0);
      if (v33)
      {
        v40 = v33;
        v41 = *(_DWORD *)(a1 + 264);
        v42 = *(_DWORD *)(a1 + 268);
        if (v41 <= v42)
          v43 = *(_DWORD *)(a1 + 268);
        else
          v43 = *(_DWORD *)(a1 + 264);
        if (v41
          && v42
          && v43 == 8
          && (xmmword_1ECF24350 <= DWORD1(xmmword_1ECF24350)
            ? (v44 = DWORD1(xmmword_1ECF24350))
            : (v44 = xmmword_1ECF24350),
              (_DWORD)xmmword_1ECF24350 && DWORD1(xmmword_1ECF24350) && v44 == 1))
        {
          if (*((_BYTE *)v33 + 128))
          {
            v278 = (uint64_t)(v33 + 7);
            v39.i64[0] = (uint64_t)v33[35];
            v45 = v33[36] - *(double *)v39.i64;
            v46 = (unint64_t)(COERCE__INT64(fabs(v45)) - 0x10000000000000) >> 53;
            if ((*(uint64_t *)&v45 <= -1 || v46 >= 0x3FF)
              && (unint64_t)(*(_QWORD *)&v45 - 1) >= 0xFFFFFFFFFFFFFLL)
            {
              LOWORD(v367) = 12;
              LOBYTE(v355) = 4;
              v163 = v33[6] + (double)*((uint64_t *)v33 + 5);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v367, (unsigned __int8 *)&v355, "time,%.3lf,h-function failure on line %d: %s() %s", v34, v35, v36, v37, v38, SLOBYTE(v163));
              LOWORD(v367) = 12;
              LOBYTE(v355) = 4;
              v164 = *((_QWORD *)v40 + 11);
              v165 = v40[12];
              sub_18D181C54(v278);
              v274 = v165 + (double)v164;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v367, (unsigned __int8 *)&v355, "t,%.3lf,%s,%s,Invalid time interval,%.2lf", v187, v188, v189, v190, v191, SLOBYTE(v274));
            }
            else
            {
              v383[0] = a1 + 256;
              v383[1] = v33;
              v382 = 0.0;
              v380 = 0u;
              v381 = 0u;
              v379 = 0u;
              *(_QWORD *)&v368[16] = 0x800000008;
              v367 = (uint64_t)&unk_1E25C87E0;
              *(_OWORD *)v368 = xmmword_18D319930;
              v369 = (uint64_t)v370;
              *(_QWORD *)&v356 = 0;
              v355 = 0;
              CNTimeSpan::SetTimeSpan((uint64_t *)&v355, 0, v39, (int8x16_t)xmmword_18D319930);
              v366[0] = CNTimeSpan::operator+((uint64_t)(v40 + 11), &v355, v49, v50);
              v366[1] = v51;
              if (sub_18D2A98B8(v383, (uint64_t)v366, &v382, &v379, (uint64_t)&v367, v52, v53))
              {
                LOWORD(v355) = 12;
                v350[0] = 4;
                v60 = v40[6] + (double)*((uint64_t *)v40 + 5);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v355, v350, "time,%.3lf,h-function failure on line %d: %s() %s", v54, v55, v56, v57, v58, SLOBYTE(v60));
              }
              else
              {
                v365 = 0.0;
                v363 = 0u;
                v364 = 0u;
                v362 = 0u;
                *(_QWORD *)&v357 = 0x800000008;
                v355 = &unk_1E25C87E0;
                v192.i64[1] = 0x800000040;
                v356 = xmmword_18D319930;
                *((_QWORD *)&v357 + 1) = &v358;
                v192.i64[0] = (uint64_t)v40[36];
                *(_QWORD *)&v350[8] = 0;
                *(_QWORD *)v350 = 0;
                CNTimeSpan::SetTimeSpan((uint64_t *)v350, 0, v192, v59);
                v354[0] = CNTimeSpan::operator+((uint64_t)(v40 + 11), v350, v193, v194);
                v354[1] = v195;
                if (!sub_18D2A98B8(v383, (uint64_t)v354, &v365, &v362, (uint64_t)&v355, v196, v197))
                {
                  v223 = 1.0 / v45 * (299792458.0 / v40[24]);
                  *(_QWORD *)&v224 = 0x100000001;
                  *((_QWORD *)&v224 + 1) = 0x100000001;
                  v328 = v224;
                  *v330 = *(double *)qword_1ECF24368 + (v365 - v382) * v223;
                  v351 = 0x800000001;
                  *(_QWORD *)v350 = &unk_1E25C6E00;
                  v352 = (double *)&v353;
                  *(_OWORD *)&v350[8] = xmmword_18D331E20;
                  sub_18D04BE88((uint64_t)v350, 0.0);
                  v225 = *((double *)&v363 + 1);
                  v226 = v352;
                  *v352 = v223 * *(double *)&v363;
                  v227 = *(int *)&v350[20];
                  v226[*(int *)&v350[20]] = v223 * v225;
                  v228 = *((double *)&v364 + 1);
                  v226[2 * v227] = v223 * *(double *)&v364;
                  v226[6 * (int)v227] = v223 * v228 * 0.000001;
                  v347 = 0x800000001;
                  *(_QWORD *)v346 = &unk_1E25C6E00;
                  v348 = (double *)&v349;
                  *(_OWORD *)&v346[8] = xmmword_18D331E20;
                  sub_18D04BE88((uint64_t)v346, 0.0);
                  v229 = *((double *)&v380 + 1);
                  v230 = v348;
                  *v348 = v223 * *(double *)&v380;
                  v231 = *(int *)&v346[20];
                  v230[*(int *)&v346[20]] = v223 * v229;
                  v232 = *((double *)&v381 + 1);
                  v230[2 * v231] = v223 * *(double *)&v381;
                  v230[6 * (int)v231] = v223 * v232 * 0.000001;
                  v343 = 0x800000001;
                  *(_QWORD *)v342 = &unk_1E25C6E00;
                  v344 = v345;
                  *(_OWORD *)&v342[8] = xmmword_18D331E20;
                  sub_18D04BE88((uint64_t)v342, 0.0);
                  sub_18D053AA8((uint64_t)&v323, (uint64_t)v342);
                  if (fabs(v40[36]) <= 0.001)
                  {
                    sub_18D24D0C4((uint64_t)v346, (uint64_t)&v367, (uint64_t)v341);
                    v343 = 0x800000001;
                    *(_QWORD *)v342 = &unk_1E25C6E00;
                    *(_OWORD *)&v342[8] = xmmword_18D331E20;
                    v344 = v345;
                    v233 = (uint64_t *)v350;
                    v234 = v341;
                  }
                  else
                  {
                    sub_18D24D0C4((uint64_t)v350, (uint64_t)&v355, (uint64_t)v341);
                    sub_18D24D0C4((uint64_t)v346, (uint64_t)&v367, (uint64_t)v340);
                    v343 = 0x800000001;
                    *(_QWORD *)v342 = &unk_1E25C6E00;
                    *(_OWORD *)&v342[8] = xmmword_18D331E20;
                    v344 = v345;
                    v233 = v341;
                    v234 = v340;
                  }
                  sub_18D0540FC((uint64_t)v233, (uint64_t)v234, (uint64_t)v342);
                  sub_18D053AA8((uint64_t)&v323, (uint64_t)v342);
                  v326[7 * SHIDWORD(v324)] = v326[7 * SHIDWORD(v324)] + v223 * (v365 - v382) * 0.000001;
                  sub_18D1CC610(1u, 1u, (uint64_t)v342);
                  sub_18D053AA8((uint64_t)&v318, (uint64_t)v342);
                  if (!cnprint::CNPrinter::GetLogLevel(v248))
                  {
                    *(_WORD *)v342 = 12;
                    LOBYTE(v341[0]) = 0;
                    v249 = *((_QWORD *)v40 + 11);
                    v250 = v40[12];
                    sub_18D181C54(v278);
                    v277 = v250 + (double)v249;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v342, (unsigned __int8 *)v341, "t,%.3lf,%s,using average Doppler,predictedCrnt,%.3lf,predictedPrev,%.3lf,diff,%.3lf,std,%.4lf,multipath,%hhu,cno,%.1lf", v251, v252, v253, v254, v255, SLOBYTE(v277));
                  }
                  *(_QWORD *)&src.f64[0] = &unk_1E25B8EE0;
                  if (SBYTE7(v283[0]) < 0)
                    operator delete(v282[0]);
                  v285 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
                  if (v287 < 0)
                    operator delete(v286);
                  v285 = off_1E25B93B0;
                  if (SHIBYTE(v284) < 0)
                  {
                    v247 = (void *)*((_QWORD *)&v283[1] + 1);
                    goto LABEL_141;
                  }
                  goto LABEL_150;
                }
                sub_18D1C741C((uint64_t)(v40 + 5), (uint64_t)"could not compute expected carrier phase at end", (uint64_t)"h_GnssAverageDoppler_RavenConvergence", 836, v198, v199, v200, v201);
              }
            }
          }
          else
          {
            v159 = (uint64_t)(v33 + 7);
            LOWORD(v367) = 12;
            LOBYTE(v355) = 4;
            v160 = v33[6] + (double)*((uint64_t *)v33 + 5);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v367, (unsigned __int8 *)&v355, "time,%.3lf,h-function failure on line %d: %s() %s", v34, v35, v36, v37, v38, SLOBYTE(v160));
            LOWORD(v367) = 12;
            LOBYTE(v355) = 4;
            v161 = *((_QWORD *)v40 + 11);
            v162 = v40[12];
            sub_18D181C54(v159);
            v273 = v162 + (double)v161;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v367, (unsigned __int8 *)&v355, "t,%.3lf,%s,%s,TAI time invalid", v182, v183, v184, v185, v186, SLOBYTE(v273));
          }
        }
        else
        {
          LOWORD(v367) = 12;
          LOBYTE(v355) = 4;
          v122 = v33[6] + (double)*((uint64_t *)v33 + 5);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v367, (unsigned __int8 *)&v355, "time,%.3lf,h-function failure on line %d: %s() %s", v34, v35, v36, v37, v38, SLOBYTE(v122));
        }
      }
      else
      {
        LOWORD(v367) = 12;
        LOBYTE(v355) = 4;
        v268 = MEMORY[0x30] + (double)MEMORY[0x28];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v367, (unsigned __int8 *)&v355, "time,%.3lf,h-function failure on line %d: %s() %s", v34, v35, v36, v37, v38, SLOBYTE(v268));
      }
      LOWORD(v367) = 12;
      LOBYTE(v355) = 4;
      v123 = sub_18D181C54(a2);
      v124 = *((_DWORD *)a3 + 24) - 1;
      if (v124 > 4)
        v125 = "UnknownType";
      else
        v125 = off_1E25CD780[v124];
      v126 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR %s %s h-function failed", v123, v125);
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v132) = v126;
      else
        v132 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v367, (unsigned __int8 *)&v355, "%s", v127, v128, v129, v130, v131, v132);
      *(_QWORD *)&src.f64[0] = &unk_1E25B8EE0;
      if (SBYTE7(v283[0]) < 0)
        operator delete(v282[0]);
      v285 = (void (**)(cnnavigation::GNSSEphemerides *__hidden))&unk_1E25B9850;
      if (v287 < 0)
        operator delete(v286);
      v285 = off_1E25B93B0;
      if (SHIBYTE(v284) < 0)
      {
        v133 = (void *)*((_QWORD *)&v283[1] + 1);
LABEL_114:
        operator delete(v133);
      }
      goto LABEL_158;
    default:
      goto LABEL_150;
  }
}

void sub_18D29F1D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  sub_18D243100((uint64_t)&STACK[0xA58]);
  sub_18D1A3798((uint64_t)&STACK[0x2D0]);
  if (*(_BYTE *)(v1 + 112))
    *(_QWORD *)(v1 + 8) = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void raven::RavenSequentialGNSSMeasurementSelector::ComputeMeasurementFunctionOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  cnprint::CNPrinter *v7;
  const char *v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _BYTE v19[112];

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v5 = a1 + 208;
    v6 = a1 + 96;
    do
    {
      raven::RavenSequentialGNSSMeasurementSelector::ComputeMeasurementFunctionOutput(a1, *(_QWORD *)(v2 + 16), *(__int128 **)(v2 + 24), (uint64_t)&v18);
      if (*(unsigned __int8 *)(v2 + 160) == v19[104])
      {
        if (!*(_BYTE *)(v2 + 160))
          goto LABEL_9;
        *(_QWORD *)(v2 + 48) = v18;
        sub_18D053AA8(v2 + 56, (uint64_t)v19);
        if (!*(_BYTE *)(v2 + 160))
          goto LABEL_9;
      }
      else
      {
        if (*(_BYTE *)(v2 + 160))
        {
          *(_QWORD *)(v2 + 56) = &unk_1E25C5E70;
          *(_BYTE *)(v2 + 160) = 0;
LABEL_9:
          if (!cnprint::CNPrinter::GetLogLevel(v7))
          {
            LOWORD(v18) = 12;
            v17 = 0;
            v8 = sub_18D181C54(*(_QWORD *)(v2 + 16));
            v9 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 96) - 1;
            v10 = "UnknownType";
            if (v9 <= 4)
              v10 = off_1E25CD780[v9];
            cnprint::CNLogFormatter::FormatGeneral(v5, v6, "#MSR %s %s could not get h-function output", v8, v10);
            if (*(char *)(a1 + 231) >= 0)
              LOBYTE(v16) = v5;
            else
              v16 = *(_QWORD *)(a1 + 208);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "%s", v11, v12, v13, v14, v15, v16);
          }
          goto LABEL_17;
        }
        *(_QWORD *)(v2 + 48) = v18;
        sub_18D2A970C(v2 + 56, (uint64_t)v19);
        *(_BYTE *)(v2 + 160) = 1;
      }
LABEL_17:
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

double raven::RavenSequentialGNSSMeasurementSelector::ComputeReweightedMeasurementVariance(uint64_t a1, uint64_t a2)
{
  double TargetSigmaCount;
  double v5;
  char v6;
  double result;
  uint64_t v8;
  int v9;
  double *v10;
  double v11;
  double v12;

  TargetSigmaCount = raven::RavenSequentialGNSSMeasurementSelector::GetTargetSigmaCount(a1, a2);
  v5 = COERCE_DOUBLE(raven::RavenSequentialGNSSMeasurementSelector::ComputeReweightedMeasurementVariance(a1, a2, TargetSigmaCount));
  if (!*(_BYTE *)(a2 + 184))
    return result;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)(v8 + 96);
  if ((v9 - 2) < 2)
  {
    v10 = (double *)(*(_QWORD *)(a1 + 192) + 2456);
LABEL_6:
    v11 = *v10;
    goto LABEL_7;
  }
  v11 = 0.0;
  if (v9 == 1)
  {
    v10 = (double *)(*(_QWORD *)(a1 + 192) + 2464);
    goto LABEL_6;
  }
LABEL_7:
  v12 = fabs(*(double *)(a2 + 152));
  if (v11 <= v12)
    v11 = v12;
  if (v11 <= *(float *)(v8 + 168))
    v11 = *(float *)(v8 + 168);
  result = v11 * v11;
  if (v6)
  {
    if (result <= v5)
      return v5;
  }
  return result;
}

double raven::RavenSequentialGNSSMeasurementSelector::GetTargetSigmaCount(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  BOOL v4;
  double result;
  uint64_t v8;
  double v9;
  double v10;
  unsigned int v11;
  int v12;
  uint64_t i;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  __int16 v22;

  v2 = *(double **)(a1 + 192);
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v3 + 188))
    v4 = 1;
  else
    v4 = *(_BYTE *)(a2 + 184) == 0;
  if (v4)
    return v2[205];
  v8 = *(_QWORD *)a2;
  result = *(double *)(*(_QWORD *)a2 + 264);
  if (result < v2[309] * 0.0174532925)
  {
    v9 = v2[205];
    v10 = 0.2;
    return v9 * v10;
  }
  v11 = *(_DWORD *)(v3 + 96);
  if (v11 <= 5)
  {
    v12 = 1 << v11;
    if ((v12 & 0x31) == 0)
    {
      if ((v12 & 0xC) != 0)
      {
        v9 = v2[294];
LABEL_13:
        v10 = v2[205];
        return v9 * v10;
      }
      for (i = 0; i != 4; ++i)
      {
        if (*(_BYTE *)(v8 + 304) && *(double *)(v8 + 296) > v2[i + 295])
        {
          v9 = v2[i + 300];
          goto LABEL_13;
        }
      }
      v22 = 12;
      v21 = 4;
      v14 = sub_18D181C54(v8);
      if (!*(_BYTE *)(*(_QWORD *)a2 + 304))
        sub_18D164CA0();
      cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR no PSR target sigma scale factor found for %s with P(LOS),%.3lf", v14, *(double *)(*(_QWORD *)a2 + 296));
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v20) = a1 - 48;
      else
        v20 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "%s", v15, v16, v17, v18, v19, v20);
    }
    return v2[205];
  }
  return result;
}

unint64_t raven::RavenSequentialGNSSMeasurementSelector::ComputeReweightedMeasurementVariance(uint64_t a1, uint64_t a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v18;
  __int16 v19;

  v3 = a3 * a3;
  v4 = *(double *)(a2 + 160);
  v5 = *(double *)(a2 + 152) * *(double *)(a2 + 152);
  v6 = v5 / v3 - v4;
  if (v6 <= 0.0)
  {
    if (!*(_BYTE *)(a2 + 184))
    {
      v19 = 12;
      v18 = 4;
      v10 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR computed variance,%.3lf,is not positive,dz2,%.3lf,var_pred,%.3lf,TargetSigmaCountSqr,%.3lf", v5 / v3 - v4, v5, v4, v3);
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v16) = v10;
      else
        v16 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "%s", v11, v12, v13, v14, v15, v16);
    }
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = *(_QWORD *)&v6 & 0xFFFFFFFFFFFFFF00;
    v8 = COERCE_UNSIGNED_INT64(v5 / v3 - v4);
  }
  return v7 | v8;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::Configure(uint64_t a1, uint64_t a2, const std::string *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  const void **v26;
  uint64_t v27;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t i;
  double v34;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  cnstatistics *v41;
  double v42;
  _BOOL4 v43;
  _BOOL4 v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  unsigned __int8 v57;
  __int16 v58;

  if (*(_BYTE *)a1)
  {
    v58 = 12;
    v57 = 2;
    v6 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 208), "#MSR configured called more than once");
    if (*(char *)(a1 + 231) >= 0)
      LOBYTE(v12) = v6;
    else
      v12 = *(_QWORD *)(a1 + 208);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "%s", v7, v8, v9, v10, v11, v12);
    *(_BYTE *)a1 = 0;
  }
  if (!a2)
  {
    v58 = 12;
    v57 = 4;
    v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not configured; called with null pointer",
                             v56);
    goto LABEL_32;
  }
  if (!*(_BYTE *)(a2 + 33))
  {
    v58 = 12;
    v57 = 4;
    v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not configured; called with uninitialized parameters",
                             v56);
    goto LABEL_32;
  }
  v13 = *(double *)(a2 + 1640);
  if (v13 <= 0.0)
  {
    v58 = 12;
    v57 = 4;
    v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not configured; invalid target sigma count for re-weighted measurements",
                             v56);
    goto LABEL_32;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1656), *(double *)(a2 + 1640)) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v25 = (const void **)(a1 + 208);
LABEL_29:
    v19 = cnprint::CNLogFormatter::FormatGeneral(v25, "#MSR not configured; invalid pseudorange thresholds,line,%d");
    goto LABEL_32;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1688), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v26 = (const void **)(a1 + 208);
LABEL_31:
    v19 = cnprint::CNLogFormatter::FormatGeneral(v26, "#MSR not configured; invalid Doppler thresholds,line,%d");
    goto LABEL_32;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1720), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v25 = (const void **)(a1 + 208);
    goto LABEL_29;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1752), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v26 = (const void **)(a1 + 208);
    goto LABEL_31;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1784), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v25 = (const void **)(a1 + 208);
    goto LABEL_29;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1816), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v26 = (const void **)(a1 + 208);
    goto LABEL_31;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1848), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v25 = (const void **)(a1 + 208);
    goto LABEL_29;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1880), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v26 = (const void **)(a1 + 208);
    goto LABEL_31;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1912), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v25 = (const void **)(a1 + 208);
    goto LABEL_29;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1944), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v26 = (const void **)(a1 + 208);
    goto LABEL_31;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 1976), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v25 = (const void **)(a1 + 208);
    goto LABEL_29;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 2008), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v26 = (const void **)(a1 + 208);
    goto LABEL_31;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 2040), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v25 = (const void **)(a1 + 208);
    goto LABEL_29;
  }
  if ((raven::RavenSequentialGNSSMeasurementSelector::CheckGnssInnovationThresholds(a1, (double *)(a2 + 2072), v13) & 1) == 0)
  {
    v58 = 12;
    v57 = 4;
    v26 = (const void **)(a1 + 208);
    goto LABEL_31;
  }
  if (*(double *)(a2 + 2112) < 0.0)
  {
    v58 = 12;
    v57 = 4;
    v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not configured; invalid pseudorange L1 vs L5 difference outlier threshold, %0.3f");
LABEL_32:
    if (*(char *)(a1 + 231) >= 0)
      LOBYTE(v27) = v19;
    else
      v27 = *(_QWORD *)(a1 + 208);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "%s", v20, v21, v22, v23, v24, v27);
    return 0;
  }
  if (*(double *)(a2 + 2120) < 0.0)
  {
    v58 = 12;
    v57 = 4;
    v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not configured; invalid doppler L1 vs L5 innovation difference outlier threshold, %0.3f");
    goto LABEL_32;
  }
  v29 = *(double *)(a2 + 2128);
  if (v29 < 0.0 || v29 > 1.0)
  {
    v58 = 12;
    v57 = 4;
    v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not configured; invalid L1 vs L5 innovation difference inlier threshold fraction, %0.3f");
    goto LABEL_32;
  }
  if (*(double *)(a2 + 2176) < 1.0)
  {
    v58 = 12;
    v57 = 4;
    v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not configured; invalid L1 vs L5 choice 'if uncertainty worse by' default factor, %0.3f");
    goto LABEL_32;
  }
  if (*(double *)(a2 + 2184) < 1.0)
  {
    v58 = 12;
    v57 = 4;
    v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not configured; invalid L1 vs L5 choice 'if uncertainty worse by' periodic motion factor, %0.3f");
    goto LABEL_32;
  }
  v30 = *(double *)(a2 + 2240);
  if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v30 < 0.0 || v30 > 1.0)
  {
    v58 = 12;
    v57 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "#MSR not configured; invalid minimum P(LOS) value for classifying satellite as having high-P(LOS),%.3lf",
      v14,
      v15,
      v16,
      v17,
      v18,
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 2240));
    return 0;
  }
  v31 = *(double *)(a2 + 2272);
  if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v31 <= v30)
  {
    v58 = 12;
    v57 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "#MSR not configured; invalid minimum best probability los for reliability,%.3lf",
      v14,
      v15,
      v16,
      v17,
      v18,
      SLOBYTE(v31));
    return 0;
  }
  v32 = *(double *)(a2 + 2352);
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v32 <= 0.0 || v32 > 1.0)
  {
    v58 = 12;
    v57 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "#MSR not configured; invalid Doppler target sigma count scale factor for low-P(LOS) measurements,%.3lf",
      v14,
      v15,
      v16,
      v17,
      v18,
      SLOBYTE(v32));
    return 0;
  }
  for (i = 0; i != 32; i += 8)
  {
    v34 = *(double *)(a2 + 2400 + i);
    if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v34 > 0.0 && v34 <= 1.0)
      continue;
    v58 = 12;
    v57 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "#MSR not configured; invalid PSR target sigma count scale fact,%.3lf",
      v14,
      v15,
      v16,
      v17,
      v18,
      SLOBYTE(v34));
    return 0;
  }
  v36 = *(double *)(a2 + 2472);
  if ((*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v36 < 0.0 || v36 > 90.0)
  {
    v58 = 12;
    v57 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "#MSR not configured; invalid minimum satellite elevation threshold for using low-P(LOS) measurement,%.3lf deg",
      v14,
      v15,
      v16,
      v17,
      v18,
      SLOBYTE(v36));
    return 0;
  }
  v37 = 0;
  v38 = a2 + 2360;
  do
  {
    v39 = *(double *)(v38 + 8 * v37);
    if (v39 < 0.0 || v39 >= v30)
    {
      v58 = 12;
      v57 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "#MSR not configured; invalid lower bound of %dth low-P(LOS) bin,%.1lf",
        v14,
        v15,
        v16,
        v17,
        v18,
        v37);
      return 0;
    }
    if (v37 && *(double *)(v38 + 8 * (v37 - 1)) <= v39)
    {
      v58 = 12;
      v57 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "#MSR not configured; non-descending order of lower bounds of low-P(LOS) bins between %dth and %dth bin,(%.1lf < %.1lf)",
        v14,
        v15,
        v16,
        v17,
        v18,
        v37 - 1);
      return 0;
    }
    ++v37;
  }
  while (v37 != 4);
  raven::GNSSMeasurementSelectionParameters::GetExpectedConstellations((_BYTE *)(a2 + 592), (unint64_t *)(a1 + 48));
  v42 = *(double *)(a2 + 928);
  v43 = (*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  v44 = v42 < 0.0 && ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (v42 >= 0.0)
    v43 = 0;
  v45 = (*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v43;
  if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
    v45 = 1;
  v46 = v45 | v44;
  if (v42 > 1.0)
    v47 = 1;
  else
    v47 = v46;
  if (v47 == 1)
  {
    v58 = 12;
    v57 = 4;
    v48 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not configured; invalid nonstationary false positive probability,%.3lf",
                             v42);
    if (*(char *)(a1 + 231) >= 0)
      LOBYTE(v54) = v48;
    else
      v54 = *(_QWORD *)(a1 + 208);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "%s", v49, v50, v51, v52, v53, v54);
  }
  else
  {
    v55 = cnstatistics::InverseNormal(v41, 1.0 - v42, 0.0, 1.0);
    *(double *)(a1 + 200) = v55 * v55;
    *(_QWORD *)(a1 + 192) = a2;
    std::string::operator=((std::string *)(a1 + 232), a3);
    *(_BYTE *)a1 = 1;
  }
  return v47 ^ 1u;
}

void raven::RavenSequentialGNSSMeasurementSelector::EnableLoggingToFile(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  cnprint::CNPrinter *v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  __int16 v24;
  unsigned __int8 v25;
  __int16 v26;

  if (*(_QWORD *)(a1 + 1640))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v26 = 12;
      v25 = 1;
      v3 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 208), "#MSR logging file already open; no action taken");
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v9) = v3;
      else
        v9 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "%s", v4, v5, v6, v7, v8, v9);
    }
  }
  else
  {
    v11 = (uint64_t *)(a1 + 1512);
    v12 = (cnprint::CNPrinter *)std::ofstream::open();
    v13 = *v11;
    v14 = (char *)v11 + *(_QWORD *)(*v11 - 24);
    if ((v14[32] & 5) != 0)
    {
      if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
      {
        v24 = 12;
        v23 = 1;
        if (*(char *)(a2 + 23) >= 0)
          v15 = (const char *)a2;
        else
          v15 = *(const char **)a2;
        v16 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 208), "#MSR could not open logging file '%s'", v15);
        if (*(char *)(a1 + 231) >= 0)
          LOBYTE(v22) = v16;
        else
          v22 = *(_QWORD *)(a1 + 208);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s", v17, v18, v19, v20, v21, v22);
      }
      *(_BYTE *)(a1 + 1506) = 0;
    }
    else
    {
      *((_DWORD *)v14 + 2) = *((_DWORD *)v14 + 2) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v11 + *(_QWORD *)(v13 - 24) + 8) |= 0x400u;
      *(_BYTE *)(a1 + 1506) = 1;
    }
  }
}

void raven::RavenSequentialGNSSMeasurementSelector::EnsureFirstPseudorangeAprioriInnovationIsAnInlier(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  double v16;
  cnprint::CNPrinter *v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  __int16 v28;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *a2;
    v4 = a2[1];
    if (*a2 != v4)
    {
      v6 = 0;
      v7 = 0;
      v8 = *(double *)(a1 + 24);
      v9 = *(double *)(a1 + 8);
      v10 = v8 - v9;
      v11 = v9 - (v8 - v9);
      v12 = v8 + v10;
      while (2)
      {
        v13 = *v3;
        for (i = *(_QWORD *)(*v3 + 8); i != v13; i = *(_QWORD *)(i + 8))
        {
          v15 = *(_QWORD *)(i + 24);
          if (*(_DWORD *)(v15 + 96) == 1)
          {
            if (*(_BYTE *)(i + 160))
            {
              v16 = *(double *)(v15 + 120) - *(double *)(i + 48);
              if (v16 >= v11 && v16 <= v12)
              {
                if (v6)
                {
                  sub_18D2A0224(v7, v2, v13, (uint64_t *)i);
                  v18 = (cnprint::CNPrinter *)raven::RavenSequentialGNSSMeasurementSelector::LogChangePseudorangeReordering((_QWORD *)a1, *(_QWORD *)(i + 16), v2[2]);
                  if (cnprint::CNPrinter::GetLogLevel(v18) <= 1)
                  {
                    v28 = 12;
                    v27 = 1;
                    v19 = sub_18D181C54(v2[2]);
                    v20 = sub_18D181C54(*(_QWORD *)(i + 16));
                    cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR replacing %s with %s as first pseudorange", v19, v20);
                    if (*(char *)(a1 + 231) >= 0)
                      LOBYTE(v26) = a1 - 48;
                    else
                      v26 = *(_QWORD *)(a1 + 208);
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v21, v22, v23, v24, v25, v26);
                  }
                }
                return;
              }
            }
            if (!v6)
            {
              v7 = *v3;
              v2 = (uint64_t *)i;
            }
            v6 = 1;
          }
        }
        if (++v3 != v4)
          continue;
        break;
      }
    }
  }
}

uint64_t sub_18D2A0224(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a4)
  {
    v4 = (uint64_t *)a4[1];
    if (v4 != a2)
    {
      v5 = *a4;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)a4[1] = v5;
      v6 = *a2;
      *(_QWORD *)(v6 + 8) = a4;
      *a4 = v6;
      *a2 = (uint64_t)a4;
      a4[1] = (uint64_t)a2;
      --*(_QWORD *)(a3 + 16);
      ++*(_QWORD *)(result + 16);
    }
  }
  return result;
}

_QWORD *raven::RavenSequentialGNSSMeasurementSelector::LogChangePseudorangeReordering(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;

  if (*((_BYTE *)result + 1))
  {
    if (*((_BYTE *)result + 1506))
    {
      v5 = sub_18D076A18(result + 189, (uint64_t)"NOTE: Pseudorange from SV ", 26);
      v6 = sub_18D181C54(a2);
      v7 = strlen(v6);
      v8 = sub_18D076A18(v5, (uint64_t)v6, v7);
      v9 = sub_18D076A18(v8, (uint64_t)" moved before that of SV ", 25);
      v10 = sub_18D181C54(a3);
      v11 = strlen(v10);
      v12 = sub_18D076A18(v9, (uint64_t)v10, v11);
      return sub_18D076A18(v12, (uint64_t)"\n\n", 2);
    }
  }
  return result;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::GetUnprocessedMSRData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  sub_18D1C5494(a3);
  v5 = *(uint64_t **)(a2 + 96);
  v6 = *(uint64_t **)(a2 + 104);
  while (v5 != v6)
  {
    v7 = *v5;
    if (*v5)
    {
      v8 = *(_QWORD *)(v7 + 328);
      v9 = *(_QWORD *)(v7 + 336);
      while (v8 != v9)
      {
        sub_18D2A9E80((uint64_t)a3, 0, 0, *v5, v8);
        v10 = *a3;
        *v11 = *a3;
        v11[1] = (uint64_t)a3;
        *(_QWORD *)(v10 + 8) = v11;
        *a3 = (uint64_t)v11;
        ++a3[2];
        v8 += 208;
      }
    }
    v5 += 2;
  }
  return 1;
}

void raven::RavenSequentialGNSSMeasurementSelector::GetFinalGnssObservable(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  char v5;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  const char *v22;
  unsigned int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  __int16 v32;

  v4 = *(_DWORD *)(a2 + 176);
  if ((v4 - 1) >= 3)
  {
    if (!v4)
    {
      v7 = *(__int128 **)(a2 + 8);
      v8 = v7[11];
      *(_OWORD *)(a3 + 160) = v7[10];
      *(_OWORD *)(a3 + 176) = v8;
      *(_OWORD *)(a3 + 192) = v7[12];
      v9 = v7[7];
      *(_OWORD *)(a3 + 96) = v7[6];
      *(_OWORD *)(a3 + 112) = v9;
      v10 = v7[9];
      *(_OWORD *)(a3 + 128) = v7[8];
      *(_OWORD *)(a3 + 144) = v10;
      v11 = v7[3];
      *(_OWORD *)(a3 + 32) = v7[2];
      *(_OWORD *)(a3 + 48) = v11;
      v12 = v7[5];
      *(_OWORD *)(a3 + 64) = v7[4];
      *(_OWORD *)(a3 + 80) = v12;
      v14 = *v7;
      v13 = v7[1];
      v5 = 1;
      *(_OWORD *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v13;
      goto LABEL_7;
    }
    if (*(_BYTE *)(a2 + 200))
    {
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(_OWORD *)(v15 + 144);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(v15 + 128);
      *(_OWORD *)(a3 + 144) = v16;
      *(_QWORD *)(a3 + 160) = *(_QWORD *)(v15 + 160);
      v17 = *(_OWORD *)(v15 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(v15 + 64);
      *(_OWORD *)(a3 + 80) = v17;
      v18 = *(_OWORD *)(v15 + 112);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(v15 + 96);
      *(_OWORD *)(a3 + 112) = v18;
      v19 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)a3 = *(_OWORD *)v15;
      *(_OWORD *)(a3 + 16) = v19;
      v20 = *(_OWORD *)(v15 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v15 + 32);
      *(_OWORD *)(a3 + 48) = v20;
      *(_OWORD *)(a3 + 172) = *(_OWORD *)(v15 + 172);
      *(_OWORD *)(a3 + 188) = *(_OWORD *)(v15 + 188);
      *(_DWORD *)(a3 + 204) = *(_DWORD *)(v15 + 204);
      *(float *)&v20 = sqrt(*(double *)(a2 + 192));
      *(_DWORD *)(a3 + 168) = v20;
      v5 = 1;
      goto LABEL_7;
    }
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      v32 = 12;
      v31 = 1;
      v22 = sub_18D181C54(*(_QWORD *)a2);
      v23 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96) - 1;
      if (v23 > 4)
        v24 = "UnknownType";
      else
        v24 = off_1E25CD780[v23];
      cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR %s %s no recommended variance", v22, v24);
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v30) = a1 - 48;
      else
        v30 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "%s", v25, v26, v27, v28, v29, v30);
    }
  }
  v5 = 0;
  *(_BYTE *)a3 = 0;
LABEL_7:
  *(_BYTE *)(a3 + 208) = v5;
}

uint64_t *raven::RavenSequentialGNSSMeasurementSelector::GetITRCount(uint64_t a1, _QWORD *a2, int *a3, int *a4)
{
  uint64_t *result;

  result = sub_18D2A9F10(a2, a3);
  if (result)
  {
    result = sub_18D2A9F10(result + 3, a4);
    if (result)
      return (uint64_t *)*((unsigned int *)result + 5);
  }
  return result;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::DetermineAndSetInnovationTestResult(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t result;
  int v7;
  double *v8;
  uint64_t v9;
  int v10;
  double v11;
  double v12;

  v11 = a4;
  v12 = a3;
  result = raven::RavenSequentialGNSSMeasurementSelector::TestInnovation(a1, a2, &v12, &v11);
  if (*(_BYTE *)(a2 + 184))
  {
    if ((result - 1) < 2)
    {
      *(_DWORD *)(a2 + 176) = result;
      return result;
    }
    if ((result - 4) >= 2)
    {
      if ((_DWORD)result != 3)
        return result;
      v9 = 0x500000002;
      goto LABEL_17;
    }
    v7 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96);
    if ((v7 - 2) >= 2)
    {
      if (v7 != 1)
        goto LABEL_18;
      v8 = (double *)(*(_QWORD *)(a1 + 192) + 2440);
    }
    else
    {
      v8 = (double *)(*(_QWORD *)(a1 + 192) + 2432);
    }
    if (fabs(*(double *)(a2 + 152)) > *v8)
    {
      v9 = 0x400000002;
LABEL_17:
      *(_QWORD *)(a2 + 176) = v9;
      return result;
    }
LABEL_18:
    *(_DWORD *)(a2 + 176) = 4;
    if ((_DWORD)result == 5)
    {
      v10 = 9;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  *(_DWORD *)(a2 + 176) = result;
  if ((_DWORD)result == 3)
  {
    v10 = 6;
LABEL_21:
    *(_DWORD *)(a2 + 180) = v10;
    return result;
  }
  if ((_DWORD)result == 4)
  {
LABEL_20:
    v10 = 8;
    goto LABEL_21;
  }
  return result;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::TestInnovation(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  double v6;
  double v7;
  const char *v9;
  unsigned int v10;
  const char *v11;
  const char *v12;
  unsigned int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  __int16 v28;
  unsigned __int8 v29;
  __int16 v30;

  if (!*(_BYTE *)(a2 + 168))
  {
    v30 = 12;
    v29 = 4;
    v12 = sub_18D181C54(*(_QWORD *)a2);
    v13 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96) - 1;
    if (v13 > 4)
      v14 = "UnknownType";
    else
      v14 = off_1E25CD780[v13];
    cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR %s %s innovation data missing during testing", v12, v14);
    if (*(char *)(a1 + 231) >= 0)
      LOBYTE(v26) = a1 - 48;
    else
      v26 = *(_QWORD *)(a1 + 208);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v21, v22, v23, v24, v25, v26);
    return 1;
  }
  if ((*(_QWORD *)(a2 + 152) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v6 = *(double *)(a2 + 160), (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v6 <= 0.0)
  {
    v28 = 12;
    v27 = 4;
    v9 = sub_18D181C54(*(_QWORD *)a2);
    v10 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96) - 1;
    if (v10 > 4)
      v11 = "UnknownType";
    else
      v11 = off_1E25CD780[v10];
    cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR %s %s innovation data invalid during testing", v9, v11);
    if (*(char *)(a1 + 231) >= 0)
      LOBYTE(v20) = a1 - 48;
    else
      v20 = *(_QWORD *)(a1 + 208);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v15, v16, v17, v18, v19, v20);
    return 1;
  }
  v7 = fabs(*(double *)(a2 + 152))
     / sqrt(v6 + (float)(*(float *)(*(_QWORD *)(a2 + 8) + 168) * *(float *)(*(_QWORD *)(a2 + 8) + 168)));
  if (v7 > fabs(*a3))
    return 3;
  if (v7 <= fabs(*a4))
    return 5;
  return 4;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::GetMSRThresholdType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v5;
  int v6;
  int v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  BOOL v27;
  uint64_t result;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  double *v47;
  _BYTE v48[64];
  void *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;

  if (!*(_BYTE *)(a2 + 144) || !*(_BYTE *)(a2 + 168))
    return 0;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = *(double *)(a2 + 160) + (float)(*(float *)(v3 + 168) * *(float *)(v3 + 168));
  switch(*(_DWORD *)(v3 + 96))
  {
    case 0:
    case 5:
      LOWORD(v49) = 12;
      LOBYTE(v44) = 4;
      v29 = sub_18D181C54(*(_QWORD *)a2);
      cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR %s unexpected measurement type when selecting thresholds, %d", v29, *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96));
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v35) = a1 - 48;
      else
        v35 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v49, (unsigned __int8 *)&v44, "%s", v30, v31, v32, v33, v34, v35);
      return 0;
    case 1:
      if (*(double *)(a2 + 152) / sqrt(v5) >= 0.0)
        result = 1;
      else
        result = 2;
      break;
    case 2:
    case 3:
    case 4:
      v7 = *(_DWORD *)(a2 + 48);
      v6 = *(_DWORD *)(a2 + 52);
      v41 = 0x100000008;
      v36 = &unk_1E25C86C0;
      v37 = v6;
      v38 = v7;
      v39 = v7 * v6;
      v40 = v6;
      v42 = &v43;
      sub_18D073454(a2 + 40, (uint64_t)&v36);
      v46 = 0x100000008;
      v44 = &unk_1E25C86C0;
      v45 = xmmword_18D319940;
      v47 = (double *)v48;
      sub_18D053B2C(a1 + 360, (uint64_t)&v36, (uint64_t)&v44);
      v51 = 0x100000008;
      v49 = &unk_1E25C86C0;
      v50 = xmmword_18D319940;
      v52 = &v53;
      v8.f64[0] = 1.0 / v5;
      v9 = sub_18D1C94E0((uint64_t)&v44, (uint64_t)&v49, v8);
      v9.f64[0] = *(float64_t *)(a2 + 152);
      v46 = 0x100000008;
      v44 = &unk_1E25C86C0;
      v45 = xmmword_18D319940;
      v47 = (double *)v48;
      sub_18D1C94E0((uint64_t)&v49, (uint64_t)&v44, v9);
      v10 = v47[3];
      v11 = v47[4];
      v12 = v47[5];
      v13 = *(double **)(a1 + 288);
      v14 = v13[3];
      v15 = v13[4];
      v16 = v13[5];
      v17 = v15 * v15 + v14 * v14 + v16 * v16;
      LODWORD(v13) = *(_DWORD *)(a1 + 380);
      v18 = *(_QWORD *)(a1 + 392);
      v19 = *(double *)(v18 + 8 * (3 * (int)v13 + 3));
      v20 = 4 * (_DWORD)v13;
      v21 = *(double *)(v18 + 8 * ((4 * (int)v13) | 3));
      LODWORD(v13) = 5 * (_DWORD)v13;
      v22 = *(double *)(v18 + 8 * ((int)v13 + 3));
      v23 = *(double *)(v18 + 8 * (v20 + 4));
      v24 = *(double *)(v18 + 8 * ((int)v13 + 4));
      v25 = *(double *)(v18 + 8 * ((int)v13 + 5));
      v26 = ((v14 + v14) * v15 * v21
           + v14 * v14 * v19
           + (v14 + v14) * v16 * v22
           + v15 * v15 * v23
           + (v15 + v15) * v16 * v24
           + v16 * v16 * v25)
          / v17;
      if (v17 < 0.000000015)
        v26 = v19 + v21 * 2.0 + v22 * 2.0 + v23 + v24 * 2.0 + v25;
      v27 = v17 < v26 * *(double *)(a1 + 200) || v17 < v11 * v11 + v10 * v10 + v12 * v12;
      if (v27 || v11 * v15 + v14 * v10 + v16 * v12 >= 0.0)
        result = 1;
      else
        result = 2;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::GetUsableLowPLOSMeasurements@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = result;
    v7 = *(double *)(*(_QWORD *)(result + 192) + 2472) * 0.0174532925;
    while (1)
    {
      v9 = *(_QWORD *)(v3 + 8);
      v8 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v5 + 192);
      if (*(_BYTE *)(v8 + 304) && *(double *)(v8 + 296) >= *(double *)(v10 + 2240))
        goto LABEL_13;
      if (!*(_BYTE *)(v5 + 88))
        break;
      if (*(double *)(v8 + 264) >= v7)
      {
        if ((*(_BYTE *)(v10 + 2394) || *(_DWORD *)(*(_QWORD *)(v3 + 24) + 96) != 1)
          && (*(_BYTE *)(v10 + 2393) || (*(_DWORD *)(*(_QWORD *)(v3 + 24) + 96) - 2) > 2))
        {
          break;
        }
        *(_BYTE *)(v3 + 200) = 0;
        *(_QWORD *)(v3 + 192) = 0x100000002;
      }
LABEL_13:
      v3 = v9;
      if (v9 == a2)
        return result;
    }
    *(_BYTE *)(v3 + 200) = 1;
    *(_QWORD *)(v3 + 192) = 0;
    result = sub_18D2A0224((uint64_t)a3, a3, a2, (uint64_t *)v3);
    goto LABEL_13;
  }
  return result;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::LogEpochFooter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_BYTE *)(result + 1))
  {
    v3 = result;
    if (*(_BYTE *)(result + 1506))
    {
      raven::RavenSequentialGNSSMeasurementSelector::LogPVT(result, 1, a3);
      if (*(_BYTE *)(*(_QWORD *)(v3 + 192) + 3754))
        raven::RavenSequentialGNSSMeasurementSelector::LogPLOSBasedUsableMeasurementCount(v3, a2);
      sub_18D076A18((_QWORD *)(v3 + 1512), (uint64_t)"\n", 1);
      return std::ostream::flush();
    }
  }
  return result;
}

void raven::RavenSequentialGNSSMeasurementSelector::LogPVT(uint64_t a1, int a2, uint64_t a3)
{
  float64x2_t *v6;
  float64x2_t *v7;
  float64x2_t *v8;
  float64x2_t *v9;
  unsigned __int8 v10;
  float64x2_t *v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  void *p_p;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  uint64_t v82;
  int8x16_t v83;
  int8x16_t v84;
  double *v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  double v97;
  double v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  double v118;
  __int128 v119;
  uint64_t v120;
  int64x2_t v121;
  uint64_t v122;
  int64x2_t v123;
  uint64_t v124;
  _BYTE v125[24];
  uint64_t v126;
  _BYTE *v127;
  _BYTE v128[72];
  int64x2_t v129;
  uint64_t v130;
  int64x2_t v131;
  uint64_t v132;
  int64x2_t v133;
  uint64_t v134;
  _BYTE v135[128];
  void *__p;
  uint64_t v137;
  unsigned __int8 v138;
  _BYTE v139[24];
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  int v143;
  float64x2_t v144;
  double v145;

  sub_18D0778AC(&__p, "\n");
  if (*(_BYTE *)(a1 + 1))
  {
    if (*(_BYTE *)(a1 + 1506))
    {
      sub_18D16AF50((uint64_t)v135, **(float64_t **)(a1 + 288), *(float64_t *)(*(_QWORD *)(a1 + 288) + 8), *(double *)(*(_QWORD *)(a1 + 288) + 16));
      if (v135[8])
      {
        v133 = vdupq_n_s64(0x7FF8000000000000uLL);
        v134 = 0x7FF8000000000000;
        v131 = v133;
        v132 = 0x7FF8000000000000;
        v129 = v133;
        v130 = 0x7FF8000000000000;
        if (*(_BYTE *)(a1 + 2304))
        {
          memset(v139, 0, sizeof(v139));
          v6 = *(float64x2_t **)(a1 + 288);
          v7 = *(float64x2_t **)(a1 + 2232);
          *(float64x2_t *)v139 = vsubq_f64(*v6, *v7);
          *(double *)&v139[16] = v6[1].f64[0] - v7[1].f64[0];
          sub_18D056ECC((uint64_t)v135, (double *)v139, (double *)v133.i64);
        }
        if (*(_BYTE *)(a1 + 2416))
        {
          memset(v139, 0, sizeof(v139));
          v8 = *(float64x2_t **)(a1 + 288);
          v9 = *(float64x2_t **)(a1 + 2344);
          *(float64x2_t *)v139 = vsubq_f64(*v8, *v9);
          *(double *)&v139[16] = v8[1].f64[0] - v9[1].f64[0];
          sub_18D056ECC((uint64_t)v135, (double *)v139, (double *)v131.i64);
        }
        v10 = atomic_load((unsigned __int8 *)&qword_1ECF24338);
        if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24338))
        {
          v140 = 0x300000001;
          *(_QWORD *)v139 = &unk_1E25C6C50;
          v141 = &v142;
          *(_OWORD *)&v139[8] = xmmword_18D314670;
          v142 = 0x100000000;
          v143 = 2;
          sub_18D16169C((uint64_t)v139, (uint64_t)&unk_1ECF24378);
          __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF24378, &dword_18D038000);
          __cxa_guard_release(&qword_1ECF24338);
        }
        sub_18D161D4C(a1 + 360, (uint64_t)&unk_1ECF24378, (uint64_t)&unk_1ECF24378, (uint64_t)v139);
        v126 = 0x300000003;
        *(_QWORD *)v125 = &unk_1E25C78E0;
        *(_OWORD *)&v125[8] = xmmword_18D30BB60;
        v127 = v128;
        sub_18D04BB5C((uint64_t)v135, (uint64_t)v139, (uint64_t)v125);
        v144 = 0uLL;
        v145 = 0.0;
        v11 = *(float64x2_t **)(a1 + 944);
        v144 = *v11;
        v145 = v11[1].f64[0];
        sub_18D056ECC((uint64_t)v135, v144.f64, (double *)v129.i64);
        v123 = vdupq_n_s64(0x7FF8000000000000uLL);
        v124 = 0x7FF8000000000000;
        v121 = v123;
        v122 = 0x7FF8000000000000;
        v12 = *(_QWORD *)(a1 + 288);
        v144 = *(float64x2_t *)(v12 + 24);
        v145 = *(double *)(v12 + 40);
        sub_18D056ECC((uint64_t)v135, v144.f64, (double *)v123.i64);
        if (fabs(*(double *)v123.i64) > 0.0005 || fabs(*(double *)&v123.i64[1]) > 0.0005)
        {
          v14 = atan2(*(long double *)v123.i64, *(long double *)&v123.i64[1]);
          if (v14 >= 0.0)
            v13 = v14;
          else
            v13 = v14 + 6.28318531;
          v118 = v13 * 57.2957795;
        }
        else
        {
          v13 = NAN;
          v118 = NAN;
        }
        if (*(_BYTE *)(a1 + 2416))
        {
          v15 = *(_QWORD *)(a1 + 2344);
          *(_OWORD *)v139 = *(_OWORD *)(v15 + 24);
          *(_QWORD *)&v139[16] = *(_QWORD *)(v15 + 40);
          sub_18D056ECC((uint64_t)v135, (double *)v139, (double *)v125);
          if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (fabs(*(double *)v123.i64) > 0.0005 || fabs(*(double *)&v123.i64[1]) > 0.0005))
          {
            v16 = (v13 - atan2(*(long double *)v125, *(long double *)&v125[8])) * 57.2957795;
            if (fabs(v16) > 180.0)
              fmod(v16 + dbl_18D318D20[v16 >= 0.0], 360.0);
          }
        }
        v17 = atomic_load((unsigned __int8 *)&qword_1ECF24340);
        if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24340))
        {
          v140 = 0x300000001;
          *(_QWORD *)v139 = &unk_1E25C6C50;
          v141 = &v142;
          *(_OWORD *)&v139[8] = xmmword_18D314670;
          v142 = 0x400000003;
          v143 = 5;
          sub_18D16169C((uint64_t)v139, (uint64_t)&unk_1ECF243B0);
          __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF243B0, &dword_18D038000);
          __cxa_guard_release(&qword_1ECF24340);
        }
        sub_18D161D4C(a1 + 360, (uint64_t)&unk_1ECF243B0, (uint64_t)&unk_1ECF243B0, (uint64_t)v139);
        v126 = 0x300000003;
        *(_QWORD *)v125 = &unk_1E25C78E0;
        *(_OWORD *)&v125[8] = xmmword_18D30BB60;
        v127 = v128;
        sub_18D04BB5C((uint64_t)v135, (uint64_t)v139, (uint64_t)v125);
        v18 = *(_QWORD *)(a1 + 944);
        v119 = *(_OWORD *)(v18 + 24);
        v120 = *(_QWORD *)(v18 + 40);
        sub_18D056ECC((uint64_t)v135, (double *)&v119, (double *)v121.i64);
        v19 = (uint64_t *)(a1 + 1512);
        v20 = *(_QWORD *)(a1 + 1512);
        *(uint64_t *)((char *)v19 + *(_QWORD *)(v20 - 24) + 16) = 3;
        *(uint64_t *)((char *)v19 + *(_QWORD *)(v20 - 24) + 24) = 11;
        v21 = sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)"PVT ENU", 7);
        *(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 24) = 2;
        if (a2)
          v22 = "+";
        else
          v22 = "-";
        v23 = sub_18D076A18(v21, (uint64_t)v22, 1);
        *(_QWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 24) = 14;
        v24 = sub_18D076A18(v23, (uint64_t)"[m or m/s] : ", 13);
        *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 13;
        v25 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 13;
        v26 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v26 + *(_QWORD *)(*v26 - 24) + 24) = 13;
        v27 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 24) = 13;
        v28 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 24) = 13;
        v29 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v29 + *(_QWORD *)(*v29 - 24) + 24) = 13;
        v30 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 24) = 13;
        v31 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v31 + *(_QWORD *)(*v31 - 24) + 24) = 13;
        v32 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 24) = 13;
        v33 = (uint64_t *)std::ostream::operator<<();
        v34 = *v33;
        *(uint64_t *)((char *)v33 + *(_QWORD *)(*v33 - 24) + 16) = 2;
        *(uint64_t *)((char *)v33 + *(_QWORD *)(v34 - 24) + 24) = 13;
        v35 = (_QWORD *)std::ostream::operator<<();
        if ((v138 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v138 & 0x80u) == 0)
          v37 = v138;
        else
          v37 = v137;
        sub_18D076A18(v35, (uint64_t)p_p, v37);
        v38 = *v19;
        *(uint64_t *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 16) = 3;
        *(uint64_t *)((char *)v19 + *(_QWORD *)(v38 - 24) + 24) = 11;
        v39 = sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)"PVT ENU Unc", 11);
        *(_QWORD *)((char *)v39 + *(_QWORD *)(*v39 - 24) + 24) = 2;
        v40 = sub_18D076A18(v39, (uint64_t)v22, 1);
        *(_QWORD *)((char *)v40 + *(_QWORD *)(*v40 - 24) + 24) = 14;
        v41 = sub_18D076A18(v40, (uint64_t)"[m or m/s] : ", 13);
        *(_QWORD *)((char *)v41 + *(_QWORD *)(*v41 - 24) + 24) = 13;
        v42 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v42 + *(_QWORD *)(*v42 - 24) + 24) = 13;
        v43 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v43 + *(_QWORD *)(*v43 - 24) + 24) = 13;
        v44 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v44 + *(_QWORD *)(*v44 - 24) + 24) = 13;
        v45 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v45 + *(_QWORD *)(*v45 - 24) + 24) = 13;
        v46 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v46 + *(_QWORD *)(*v46 - 24) + 24) = 13;
        v47 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v47 + *(_QWORD *)(*v47 - 24) + 24) = 13;
        v48 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v48 + *(_QWORD *)(*v48 - 24) + 24) = 13;
        v49 = (_QWORD *)std::ostream::operator<<();
        if ((v138 & 0x80u) == 0)
          v50 = &__p;
        else
          v50 = __p;
        if ((v138 & 0x80u) == 0)
          v51 = v138;
        else
          v51 = v137;
        sub_18D076A18(v49, (uint64_t)v50, v51);
        if (a2)
        {
          v52 = *v19;
          *(uint64_t *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 16) = 3;
          *(uint64_t *)((char *)v19 + *(_QWORD *)(v52 - 24) + 24) = 11;
          v53 = sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)"Cum dx ENU", 10);
          *(_QWORD *)((char *)v53 + *(_QWORD *)(*v53 - 24) + 24) = 2;
          v54 = sub_18D076A18(v53, (uint64_t)"+", 1);
          *(_QWORD *)((char *)v54 + *(_QWORD *)(*v54 - 24) + 24) = 14;
          v55 = sub_18D076A18(v54, (uint64_t)"[m or m/s] : ", 13);
          *(_QWORD *)((char *)v55 + *(_QWORD *)(*v55 - 24) + 24) = 13;
          v56 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v56 + *(_QWORD *)(*v56 - 24) + 24) = 13;
          v57 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v57 + *(_QWORD *)(*v57 - 24) + 24) = 13;
          v58 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v58 + *(_QWORD *)(*v58 - 24) + 24) = 13;
          v59 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v59 + *(_QWORD *)(*v59 - 24) + 24) = 13;
          v60 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v60 + *(_QWORD *)(*v60 - 24) + 24) = 13;
          v61 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v61 + *(_QWORD *)(*v61 - 24) + 24) = 13;
          v62 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v62 + *(_QWORD *)(*v62 - 24) + 24) = 13;
          v63 = (_QWORD *)std::ostream::operator<<();
          if ((v138 & 0x80u) == 0)
            v64 = &__p;
          else
            v64 = __p;
          if ((v138 & 0x80u) == 0)
            v65 = v138;
          else
            v65 = v137;
          sub_18D076A18(v63, (uint64_t)v64, v65);
        }
        v66 = *v19;
        *(uint64_t *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 16) = 3;
        *(uint64_t *)((char *)v19 + *(_QWORD *)(v66 - 24) + 24) = 11;
        v67 = sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)"dPVT ENU", 8);
        *(_QWORD *)((char *)v67 + *(_QWORD *)(*v67 - 24) + 24) = 2;
        v68 = sub_18D076A18(v67, (uint64_t)v22, 1);
        *(_QWORD *)((char *)v68 + *(_QWORD *)(*v68 - 24) + 24) = 14;
        v69 = sub_18D076A18(v68, (uint64_t)"[m or m/s] : ", 13);
        *(_QWORD *)((char *)v69 + *(_QWORD *)(*v69 - 24) + 24) = 13;
        v70 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v70 + *(_QWORD *)(*v70 - 24) + 24) = 13;
        v71 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v71 + *(_QWORD *)(*v71 - 24) + 24) = 13;
        v72 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v72 + *(_QWORD *)(*v72 - 24) + 24) = 13;
        v73 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v73 + *(_QWORD *)(*v73 - 24) + 24) = 13;
        v74 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v74 + *(_QWORD *)(*v74 - 24) + 24) = 13;
        v75 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v75 + *(_QWORD *)(*v75 - 24) + 24) = 13;
        v76 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v76 + *(_QWORD *)(*v76 - 24) + 24) = 13;
        v77 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v77 + *(_QWORD *)(*v77 - 24) + 24) = 13;
        v78 = (uint64_t *)std::ostream::operator<<();
        v79 = *v78;
        *(uint64_t *)((char *)v78 + *(_QWORD *)(*v78 - 24) + 16) = 2;
        *(uint64_t *)((char *)v78 + *(_QWORD *)(v79 - 24) + 24) = 13;
        v80 = (_QWORD *)std::ostream::operator<<();
        if ((v138 & 0x80u) == 0)
          v81 = &__p;
        else
          v81 = __p;
        if ((v138 & 0x80u) == 0)
          v82 = v138;
        else
          v82 = v137;
        sub_18D076A18(v80, (uint64_t)v81, v82);
        if (a3)
        {
          v85 = *(double **)(a1 + 288);
          v86 = *v85;
          v87 = v85[1];
          v88 = v85[2];
          v89 = CNTimeSpan::operator-(a1 + 96, (_QWORD *)a3, v83, v84);
          v91 = v90 + (double)v89;
          v92 = *(double *)(a3 + 56);
          v93 = *(double *)(a3 + 64);
          v94 = v87 - (v93 + *(double *)(a3 + 128) * v91);
          v144.f64[0] = v86 - (v92 + *(double *)(a3 + 120) * v91);
          v144.f64[1] = v94;
          v95 = *(double *)(a3 + 72);
          v145 = v88 - (v95 + *(double *)(a3 + 136) * v91);
          *(int64x2_t *)v125 = vdupq_n_s64(0x7FF8000000000000uLL);
          *(_QWORD *)&v125[16] = 0x7FF8000000000000;
          sub_18D16AF50((uint64_t)v139, v92, v93, v95);
          if (v139[8])
            sub_18D056ECC((uint64_t)v139, v144.f64, (double *)v125);
          v96 = *(_QWORD *)(a1 + 288);
          v97 = *(double *)(v96 + 40);
          v144 = vsubq_f64(*(float64x2_t *)(v96 + 24), *(float64x2_t *)(a3 + 120));
          v145 = v97 - *(double *)(a3 + 136);
          *(int64x2_t *)v125 = vdupq_n_s64(0x7FF8000000000000uLL);
          *(_QWORD *)&v125[16] = 0x7FF8000000000000;
          sub_18D16AF50((uint64_t)v139, *(float64_t *)(a3 + 56), *(float64_t *)(a3 + 64), *(double *)(a3 + 72));
          if (v139[8])
            sub_18D056ECC((uint64_t)v139, v144.f64, (double *)v125);
          v98 = *(double *)(a3 + 40);
          if (vabdd_f64(v118, v98) > 180.0)
            fmod(v118 - v98 + dbl_18D318D20[v118 - v98 >= 0.0], 360.0);
          v99 = *(_QWORD *)(a1 + 1512);
          *(uint64_t *)((char *)v19 + *(_QWORD *)(v99 - 24) + 16) = 3;
          *(uint64_t *)((char *)v19 + *(_QWORD *)(v99 - 24) + 24) = 11;
          v100 = sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)"PVT ENU Err", 11);
          *(_QWORD *)((char *)v100 + *(_QWORD *)(*v100 - 24) + 24) = 2;
          v101 = sub_18D076A18(v100, (uint64_t)v22, 1);
          *(_QWORD *)((char *)v101 + *(_QWORD *)(*v101 - 24) + 24) = 14;
          v102 = sub_18D076A18(v101, (uint64_t)"[m or m/s] : ", 13);
          *(_QWORD *)((char *)v102 + *(_QWORD *)(*v102 - 24) + 24) = 13;
          v103 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v103 + *(_QWORD *)(*v103 - 24) + 24) = 13;
          v104 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v104 + *(_QWORD *)(*v104 - 24) + 24) = 13;
          v105 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v105 + *(_QWORD *)(*v105 - 24) + 24) = 13;
          v106 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v106 + *(_QWORD *)(*v106 - 24) + 24) = 13;
          v107 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v107 + *(_QWORD *)(*v107 - 24) + 24) = 13;
          v108 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v108 + *(_QWORD *)(*v108 - 24) + 24) = 13;
          v109 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v109 + *(_QWORD *)(*v109 - 24) + 24) = 13;
          v110 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v110 + *(_QWORD *)(*v110 - 24) + 24) = 13;
          v111 = (uint64_t *)std::ostream::operator<<();
          v112 = *v111;
          *(uint64_t *)((char *)v111 + *(_QWORD *)(*v111 - 24) + 16) = 2;
          *(uint64_t *)((char *)v111 + *(_QWORD *)(v112 - 24) + 24) = 13;
          v113 = (_QWORD *)std::ostream::operator<<();
          if ((v138 & 0x80u) == 0)
            v114 = &__p;
          else
            v114 = __p;
          if ((v138 & 0x80u) == 0)
            v115 = v138;
          else
            v115 = v137;
          sub_18D076A18(v113, (uint64_t)v114, v115);
        }
        if ((v138 & 0x80u) == 0)
          v116 = &__p;
        else
          v116 = __p;
        if ((v138 & 0x80u) == 0)
          v117 = v138;
        else
          v117 = v137;
        sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)v116, v117);
      }
    }
  }
  if ((char)v138 < 0)
    operator delete(__p);
}

void sub_18D2A1E04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF24340);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  _Unwind_Resume(a1);
}

_QWORD *raven::RavenSequentialGNSSMeasurementSelector::LogPLOSBasedUsableMeasurementCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(v2 + 24);
      v20 = (*(unsigned __int8 *)(v19 + 100) > 9uLL) | (0x144u >> *(_BYTE *)(v19 + 100));
      v21 = *(_DWORD *)(v2 + 192);
      if ((v21 - 4) >= 2)
      {
        if (v21 == 3)
        {
          v23 = *(_DWORD *)(v19 + 96);
          if (*(_BYTE *)(v2 + 200))
          {
            if (v23 == 1)
            {
              if ((v20 & 1) != 0)
                ++v12;
              else
                ++v11;
            }
            else if ((v20 & 1) != 0)
            {
              ++v10;
            }
            else
            {
              ++v9;
            }
          }
          else if (v23 == 1)
          {
            if ((v20 & 1) != 0)
              ++v8;
            else
              ++v7;
          }
          else if ((v20 & 1) != 0)
          {
            ++v6;
          }
          else
          {
            ++v5;
          }
        }
      }
      else
      {
        v22 = *(_DWORD *)(v19 + 96);
        if (*(_BYTE *)(v2 + 200))
        {
          if (v22 == 1)
          {
            if ((v20 & 1) != 0)
              ++v3;
            else
              ++v4;
          }
          else if ((v20 & 1) != 0)
          {
            ++v18;
          }
          else
          {
            ++v17;
          }
        }
        else if (v22 == 1)
        {
          if ((v20 & 1) != 0)
            ++v16;
          else
            ++v15;
        }
        else if ((v20 & 1) != 0)
        {
          ++v14;
        }
        else
        {
          ++v13;
        }
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
  v24 = (_QWORD *)(a1 + 1512);
  v25 = sub_18D076A18((_QWORD *)(a1 + 1512), (uint64_t)"Num H/L-P(LOS) Meas accepts: ", 29);
  sub_18D076A18(v25, (uint64_t)"  L5PSR (", 9);
  v26 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v26, (uint64_t)", ", 2);
  v27 = (_QWORD *)std::ostream::operator<<();
  v28 = sub_18D076A18(v27, (uint64_t)")", 1);
  sub_18D076A18(v28, (uint64_t)"  L1PSR (", 9);
  v29 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v29, (uint64_t)", ", 2);
  v30 = (_QWORD *)std::ostream::operator<<();
  v31 = sub_18D076A18(v30, (uint64_t)")", 1);
  sub_18D076A18(v31, (uint64_t)"  L5Dop (", 9);
  v32 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v32, (uint64_t)", ", 2);
  v33 = (_QWORD *)std::ostream::operator<<();
  v34 = sub_18D076A18(v33, (uint64_t)")", 1);
  sub_18D076A18(v34, (uint64_t)"  L1Dop (", 9);
  v35 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v35, (uint64_t)", ", 2);
  v36 = (_QWORD *)std::ostream::operator<<();
  v37 = sub_18D076A18(v36, (uint64_t)")", 1);
  sub_18D076A18(v37, (uint64_t)"\n", 1);
  v38 = sub_18D076A18(v24, (uint64_t)"Num H/L-P(LOS) Meas rejects: ", 29);
  sub_18D076A18(v38, (uint64_t)"  L5PSR (", 9);
  v39 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v39, (uint64_t)", ", 2);
  v40 = (_QWORD *)std::ostream::operator<<();
  v41 = sub_18D076A18(v40, (uint64_t)")", 1);
  sub_18D076A18(v41, (uint64_t)"  L1PSR (", 9);
  v42 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v42, (uint64_t)", ", 2);
  v43 = (_QWORD *)std::ostream::operator<<();
  v44 = sub_18D076A18(v43, (uint64_t)")", 1);
  sub_18D076A18(v44, (uint64_t)"  L5Dop (", 9);
  v45 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v45, (uint64_t)", ", 2);
  v46 = (_QWORD *)std::ostream::operator<<();
  v47 = sub_18D076A18(v46, (uint64_t)")", 1);
  sub_18D076A18(v47, (uint64_t)"  L1Dop (", 9);
  v48 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v48, (uint64_t)", ", 2);
  v49 = (_QWORD *)std::ostream::operator<<();
  v50 = sub_18D076A18(v49, (uint64_t)")", 1);
  return sub_18D076A18(v50, (uint64_t)"\n", 1);
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::LogEpochHeader(uint64_t result)
{
  uint64_t v1;
  int v2;
  _BOOL4 v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int8x16_t v23;
  int8x16_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  void *v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  if (*(_BYTE *)(result + 1))
  {
    v1 = result;
    if (*(_BYTE *)(result + 1506))
    {
      sub_18D0778AC(&v44, "\n");
      v3 = 0;
      if (*(_BYTE *)(v1 + 112))
      {
        *(_OWORD *)v42 = *(_OWORD *)(v1 + 120);
        if (!cnnavigation::iOSTimeToJulianTime((uint64_t)v42, (uint64_t)v40))
        {
          cnnavigation::JulianTimeToGregorianTime((uint64_t)v40, (uint64_t)&v45);
          if (!v2)
            v3 = 1;
        }
      }
      if (*(_BYTE *)(v1 + 160))
      {
        *(_OWORD *)v42 = *(_OWORD *)(v1 + 168);
        LOWORD(v45) = 0;
        v46 = 0u;
        v47 = 0u;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)v42, (const cnnavigation::GNSSUTCParameters *)&v45);
      }
      else if (*(_BYTE *)(v1 + 136))
      {
        *(_OWORD *)v42 = *(_OWORD *)(v1 + 144);
        LOWORD(v45) = 0;
        v46 = 0u;
        v47 = 0u;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)v42, (const cnnavigation::GNSSUTCParameters *)&v45);
      }
      v4 = (_QWORD *)(v1 + 1512);
      v5 = sub_18D076A18((_QWORD *)(v1 + 1512), (uint64_t)"====================================================================================================\n\n", 102);
      *(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 16) = 3;
      v6 = sub_18D076A18(v5, (uint64_t)"Time: ", 6);
      *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 13;
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = sub_18D076A18(v7, (uint64_t)"   ", 3);
      *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 13;
      std::ostream::operator<<();
      *(_QWORD *)(v1 + 1512 + *(_QWORD *)(*(_QWORD *)(v1 + 1512) - 24) + 24) = 13;
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = sub_18D076A18(v9, (uint64_t)"  ", 2);
      *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 4;
      std::ostream::operator<<();
      sub_18D076A18((_QWORD *)(v1 + 1512), (uint64_t)"   ", 3);
      if (v3)
      {
        sub_18D2A2B5C((_QWORD *)(v1 + 1512), 48);
        *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 4;
        v11 = (_QWORD *)std::ostream::operator<<();
        v12 = sub_18D076A18(v11, (uint64_t)"/", 1);
        *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 2;
        v13 = (_QWORD *)std::ostream::operator<<();
        v14 = sub_18D076A18(v13, (uint64_t)"/", 1);
        *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 2;
        v15 = (_QWORD *)std::ostream::operator<<();
        v16 = sub_18D076A18(v15, (uint64_t)" ", 1);
        *(_QWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 24) = 2;
        v17 = (_QWORD *)std::ostream::operator<<();
        v18 = sub_18D076A18(v17, (uint64_t)":", 1);
        *(_QWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 24) = 2;
        v19 = (_QWORD *)std::ostream::operator<<();
        v20 = sub_18D076A18(v19, (uint64_t)":", 1);
        *(_QWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 24) = 6;
        v21 = (_QWORD *)std::ostream::operator<<();
        sub_18D2A2B5C(v21, 32);
      }
      else
      {
        *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 13;
        std::ostream::operator<<();
      }
      v22 = sub_18D076A18((_QWORD *)(v1 + 1512), (uint64_t)"   EstAge: ", 11);
      *(_QWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 24) = 13;
      if (*(_BYTE *)(v1 + 2192))
      {
        CNTimeSpan::operator-(v1 + 96, (_QWORD *)(v1 + 2096), v23, v24);
        std::ostream::operator<<();
        v25 = sub_18D076A18((_QWORD *)(v1 + 1512), (uint64_t)"   SE: ", 7);
        sub_18D0778AC(&v45, off_1E25CD5E8[*(char *)(v1 + 1016)]);
        if (v46 >= 0)
          v26 = &v45;
        else
          v26 = v45;
        if (v46 >= 0)
          v27 = HIBYTE(v46);
        else
          v27 = v46;
        v28 = sub_18D076A18(v25, (uint64_t)v26, v27);
        v29 = sub_18D076A18(v28, (uint64_t)"   Act: ", 8);
        sub_18D0778AC(v42, off_1E25CD620[*(char *)(v1 + 1024)]);
        if ((v43 & 0x80u) == 0)
          v30 = v42;
        else
          v30 = (void **)v42[0];
        if ((v43 & 0x80u) == 0)
          v31 = v43;
        else
          v31 = (uint64_t)v42[1];
        v32 = sub_18D076A18(v29, (uint64_t)v30, v31);
        v33 = sub_18D076A18(v32, (uint64_t)" ", 1);
        *(_QWORD *)((char *)v33 + *(_QWORD *)(*v33 - 24) + 16) = 2;
        sub_18D066D48((double *)(v1 + 1024));
        v34 = (_QWORD *)std::ostream::operator<<();
        v35 = sub_18D076A18(v34, (uint64_t)"   Mnt: ", 8);
        sub_18D0778AC(v40, off_1E25CD670[*(char *)(v1 + 1112)]);
        if ((v41 & 0x80u) == 0)
          v36 = v40;
        else
          v36 = (void **)v40[0];
        if ((v41 & 0x80u) == 0)
          v37 = v41;
        else
          v37 = (uint64_t)v40[1];
        v38 = sub_18D076A18(v35, (uint64_t)v36, v37);
        v39 = sub_18D076A18(v38, (uint64_t)" ", 1);
        *(_QWORD *)((char *)v39 + *(_QWORD *)(*v39 - 24) + 16) = 2;
        __asm { BR              X10 }
      }
      sub_18D164CA0();
    }
  }
  return result;
}

void sub_18D2A2A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D2A2B5C(_QWORD *a1, char a2)
{
  char *v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v4 + 36) = v6;
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

void sub_18D2A2BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void raven::RavenSequentialGNSSMeasurementSelector::LogMSRData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  int data;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 v29;
  float v30;
  uint64_t **v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t *v38;
  size_t v39;
  char *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string::size_type size;
  std::string *p_b;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  int v59;
  std::string::size_type v60;
  char *v61;
  __int128 v62;
  std::string *v63;
  std::string *v64;
  std::string::size_type v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t j;
  const char *v71;
  std::string *v72;
  __int128 v73;
  std::string::size_type v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string *v80;
  std::string::size_type v81;
  char v82;
  size_t v83;
  uint64_t k;
  std::string::value_type v85;
  std::string *v86;
  __int128 v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  std::string *v94;
  std::string::size_type v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t m;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  const char *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  void *v121;
  uint64_t v122;
  _QWORD *v123;
  void *v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  __int128 *v130;
  __int128 v131;
  std::string *v132;
  std::string::size_type v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  double v141;
  double v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  _QWORD *v148;
  unsigned int v149;
  BOOL v150;
  uint64_t *v151;
  _QWORD *v152;
  uint64_t **v153;
  char *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  unint64_t v160;
  int v161;
  double v162;
  double v163;
  __int128 v164;
  uint64_t v165;
  double v166;
  uint64_t v167;
  double *v168;
  double *v169;
  double v170;
  double v171;
  double v172;
  void **v173;
  std::string::size_type v174;
  std::string *v175;
  __int128 v176;
  int v177;
  std::string *v178;
  int v179;
  std::string *v180;
  std::string::value_type v181;
  std::string *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  std::string *v193;
  std::string::size_type v194;
  _QWORD *v195;
  int v196;
  int v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  void *v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  int v221;
  char *v222;
  int *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  double v229;
  int *v230;
  double v231;
  unsigned __int8 *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  int v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  unsigned __int8 *v244;
  unint64_t __len;
  uint64_t v246;
  void *v247[2];
  unsigned __int8 v248;
  std::string v249;
  uint64_t v250;
  double *v251;
  uint64_t v252;
  std::string __b;
  double v254;
  std::string __dst;
  uint64_t v256;
  std::string v257;
  std::string v258;
  std::string v259;
  std::string v260;
  std::string v261;
  uint64_t v262[4];
  int v263;
  _BYTE v264[32];
  int v265;
  void *__p;
  char *v267;
  char *v268;
  void *v269;
  uint64_t v270;
  unsigned __int8 v271;
  void *v272;
  __int128 v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;

  if (!*(_BYTE *)(a1 + 1) || !*(_BYTE *)(a1 + 1506))
    return;
  v274 = 0x100000008;
  v272 = &unk_1E25C86C0;
  v273 = xmmword_18D319940;
  v275 = &v276;
  v233 = a1 + 912;
  sub_18D0540FC(a1 + 256, a1 + 912, (uint64_t)&v272);
  sub_18D0778AC(&v269, "\n");
  v267 = 0;
  __p = 0;
  v268 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= 2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_18D07AFE4();
    __p = sub_18D164CD4((uint64_t)&v268, v4 >> 1);
    v267 = (char *)__p;
    v268 = (char *)__p + 4 * v5;
  }
  v234 = a1;
  memset(v264, 0, sizeof(v264));
  v265 = 1065353216;
  memset(v262, 0, sizeof(v262));
  v263 = 1065353216;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    data = *(_DWORD *)(*(_QWORD *)(i + 16) + 28) + 1000 * *(unsigned __int8 *)(*(_QWORD *)(i + 16) + 24);
    LODWORD(__b.__r_.__value_.__l.__data_) = data;
    v8 = (char *)__p;
    v9 = v267;
    v10 = (char *)__p;
    if (__p != v267)
    {
      v10 = (char *)__p;
      while (*(_DWORD *)v10 != data)
      {
        v10 += 4;
        if (v10 == v267)
          goto LABEL_13;
      }
    }
    if (v10 == v267)
    {
LABEL_13:
      if (v267 >= v268)
      {
        v12 = (v267 - (_BYTE *)__p) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          sub_18D07AFE4();
        v14 = v268 - (_BYTE *)__p;
        if ((v268 - (_BYTE *)__p) >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)sub_18D164CD4((uint64_t)&v268, v15);
          v9 = v267;
          v8 = (char *)__p;
        }
        else
        {
          v16 = 0;
        }
        v17 = (int *)&v16[4 * v12];
        *v17 = data;
        v11 = (char *)(v17 + 1);
        while (v9 != v8)
        {
          v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *--v17 = v18;
        }
        __p = v17;
        v267 = v11;
        v268 = &v16[4 * v15];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_DWORD *)v267 = data;
        v11 = v9 + 4;
      }
      v267 = v11;
      data = (int)__b.__r_.__value_.__l.__data_;
    }
    v19 = sub_18D2AA07C((uint64_t)v264, data, &__b);
    v20 = (uint64_t *)operator new(0xF0uLL);
    v21 = v20;
    *v20 = 0;
    v20[1] = 0;
    v22 = *(_OWORD *)(i + 32);
    *((_OWORD *)v20 + 1) = *(_OWORD *)(i + 16);
    *((_OWORD *)v20 + 2) = v22;
    *((_BYTE *)v20 + 48) = 0;
    *((_BYTE *)v20 + 160) = 0;
    if (*(_BYTE *)(i + 160))
    {
      v20[6] = *(_QWORD *)(i + 48);
      sub_18D2A970C((uint64_t)(v20 + 7), i + 56);
      *((_BYTE *)v21 + 160) = 1;
    }
    *(_OWORD *)(v21 + 21) = *(_OWORD *)(i + 168);
    v23 = *(_OWORD *)(i + 184);
    v24 = *(_OWORD *)(i + 200);
    v25 = *(_OWORD *)(i + 216);
    v21[29] = *(_QWORD *)(i + 232);
    *(_OWORD *)(v21 + 27) = v25;
    *(_OWORD *)(v21 + 25) = v24;
    *(_OWORD *)(v21 + 23) = v23;
    v21[1] = (uint64_t)(v19 + 3);
    v26 = v19[3];
    *v21 = v26;
    *(_QWORD *)(v26 + 8) = v21;
    v19[3] = (uint64_t)v21;
    ++v19[5];
    v27 = *(_QWORD *)(i + 24);
    v28 = *(char *)(v27 + 100);
    if (v28 > 0xA)
      v29 = 1;
    else
      v29 = byte_18D339090[v28];
    v249.__r_.__value_.__s.__data_[0] = v29;
    v30 = *(float *)(v27 + 112);
    v31 = (uint64_t **)sub_18D2AA4DC(v262, data, &__b);
    *((_DWORD *)sub_18D2AA920(v31 + 3, v29, &v249) + 8) = llroundf(v30);
  }
  v32 = *(unsigned __int8 **)(v234 + 192);
  v33 = v32[3754];
  if (v32[3754])
    v34 = 86;
  else
    v34 = 52;
  __len = v34;
  v35 = v32[641];
  v221 = v32[2562];
  v222 = (char *)operator new(1uLL);
  *v222 = 1;
  v36 = v222 + 1;
  v236 = v35;
  if (v35)
  {
    v37 = (char *)operator new(2uLL);
    *(_WORD *)v37 = 513;
    v36 = v37 + 2;
    operator delete(v222);
    v222 = v37;
  }
  v240 = v33;
  v38 = (uint64_t *)(v234 + 1512);
  *(_QWORD *)(v234 + 1512 + *(_QWORD *)(*(_QWORD *)(v234 + 1512) - 24) + 24) = 25;
  sub_18D076A18((_QWORD *)(v234 + 1512), (uint64_t)" ", 1);
  v232 = (unsigned __int8 *)v36;
  if (v222 != v36)
  {
    v39 = (2 * __len + 5);
    v40 = v222;
    do
    {
      sub_18D0778AC(&__dst, off_1E25CD6B0[*v40]);
      v41 = std::string::insert(&__dst, 0, " ", 1uLL);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v249.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = std::string::append(&v249, " Band ", 6uLL);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v261.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      size = HIBYTE(v261.__r_.__value_.__r.__words[2]);
      if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v261.__r_.__value_.__l.__size_;
      if (size + 2 >= v39)
      {
        __b = v261;
        memset(&v261, 0, sizeof(v261));
      }
      else
      {
        sub_18D076CB8(&__b, v39, 45);
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_b = &__b;
        else
          p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
        p_b->__r_.__value_.__s.__data_[0] = 124;
        v47 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &__b;
        else
          v48 = (std::string *)__b.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v47 = __b.__r_.__value_.__l.__size_;
        v48->__r_.__value_.__s.__data_[v47 - 1] = 124;
        if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = HIBYTE(v261.__r_.__value_.__r.__words[2]);
        else
          v49 = v261.__r_.__value_.__l.__size_;
        if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v261;
        else
          v50 = (std::string *)v261.__r_.__value_.__r.__words[0];
        std::string::replace(&__b, (v39 - v49) >> 1, v49, (const std::string::value_type *)v50, v49);
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &__b;
      else
        v51 = (std::string *)__b.__r_.__value_.__r.__words[0];
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      else
        v52 = __b.__r_.__value_.__l.__size_;
      sub_18D076A18(v38, (uint64_t)v51, v52);
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__b.__r_.__value_.__l.__data_);
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v249.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      ++v40;
    }
    while (v40 != v36);
  }
  if (v35)
  {
    v53 = sub_18D076A18(v38, (uint64_t)" ", 1);
    sub_18D0778AC(&v260, " (L5-L1) ");
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    else
      v54 = v260.__r_.__value_.__l.__size_;
    if (v54 + 2 >= 0x14)
    {
      __b = v260;
      memset(&v260, 0, sizeof(v260));
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = 20;
      strcpy((char *)&__b, "|------------------|");
      if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v260;
      else
        v55 = (std::string *)v260.__r_.__value_.__r.__words[0];
      std::string::replace(&__b, (20 - v54) >> 1, v54, (const std::string::value_type *)v55, v54);
    }
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &__b;
    else
      v56 = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    else
      v57 = __b.__r_.__value_.__l.__size_;
    sub_18D076A18(v53, (uint64_t)v56, v57);
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__b.__r_.__value_.__l.__data_);
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v260.__r_.__value_.__l.__data_);
    v58 = sub_18D076A18(v38, (uint64_t)" ", 1);
    sub_18D0778AC(&v259, " Use ");
    v59 = SHIBYTE(v259.__r_.__value_.__r.__words[2]);
    if ((v259.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = HIBYTE(v259.__r_.__value_.__r.__words[2]);
    else
      v60 = v259.__r_.__value_.__l.__size_;
    if (v60 + 2 >= 0x28)
    {
      __b = v259;
      memset(&v259, 0, sizeof(v259));
    }
    else
    {
      v61 = (char *)operator new(0x30uLL);
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
      *(_OWORD *)&__b.__r_.__value_.__r.__words[1] = xmmword_18D338FE0;
      *(_QWORD *)&v62 = 0x2D2D2D2D2D2D2D2DLL;
      *((_QWORD *)&v62 + 1) = 0x2D2D2D2D2D2D2D2DLL;
      *(_OWORD *)(v61 + 1) = v62;
      *(_OWORD *)(v61 + 17) = v62;
      strcpy(v61 + 31, "--------|");
      *v61 = 124;
      if (v59 >= 0)
        v63 = &v259;
      else
        v63 = (std::string *)v259.__r_.__value_.__r.__words[0];
      std::string::replace(&__b, (40 - v60) >> 1, v60, (const std::string::value_type *)v63, v60);
    }
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &__b;
    else
      v64 = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    else
      v65 = __b.__r_.__value_.__l.__size_;
    sub_18D076A18(v58, (uint64_t)v64, v65);
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__b.__r_.__value_.__l.__data_);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v259.__r_.__value_.__l.__data_);
  }
  if ((v271 & 0x80u) == 0)
    v66 = &v269;
  else
    v66 = v269;
  if ((v271 & 0x80u) == 0)
    v67 = v271;
  else
    v67 = v270;
  sub_18D076A18(v38, (uint64_t)v66, v67);
  *(uint64_t *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 24) = 25;
  sub_18D076A18(v38, (uint64_t)" ", 1);
  v246 = v234 + 1536;
  v237 = v232 - (unsigned __int8 *)v222;
  if (v232 != (unsigned __int8 *)v222)
  {
    v68 = 0;
    v69 = v232 - (unsigned __int8 *)v222;
    if (v237 <= 1)
      v69 = 1;
    v241 = v69;
    do
    {
      *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 5;
      sub_18D076A18(v38, (uint64_t)" ", 1);
      for (j = 0; j != 2; ++j)
      {
        memset(&__b, 0, sizeof(__b));
        switch(dword_18D339048[j])
        {
          case 0:
            *((_BYTE *)&__b.__r_.__value_.__s + 23) = 7;
            qmemcpy(&__b, "Unknown", 7);
            break;
          case 1:
            *((_BYTE *)&__b.__r_.__value_.__s + 23) = 11;
            *(_DWORD *)((char *)__b.__r_.__value_.__r.__words + 7) = 1701277281;
            v71 = "Pseudorange";
            goto LABEL_132;
          case 2:
            *((_BYTE *)&__b.__r_.__value_.__s + 23) = 11;
            *(_DWORD *)((char *)__b.__r_.__value_.__r.__words + 7) = 1380204847;
            v71 = "Doppler/ADR";
LABEL_132:
            __b.__r_.__value_.__r.__words[0] = *(_QWORD *)v71;
            break;
          case 3:
            *((_BYTE *)&__b.__r_.__value_.__s + 23) = 5;
            qmemcpy(&__b, "Other", 5);
            break;
          default:
            break;
        }
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = __len;
        std::operator+<char>();
        v72 = std::string::append(&__dst, " ", 1uLL);
        v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        v258.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        v74 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
        if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v74 = v258.__r_.__value_.__l.__size_;
        if (v74 + 2 >= __len)
        {
          v249 = v258;
          memset(&v258, 0, sizeof(v258));
        }
        else
        {
          sub_18D076CB8(&v249, __len, 45);
          if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v249;
          else
            v75 = (std::string *)v249.__r_.__value_.__r.__words[0];
          v75->__r_.__value_.__s.__data_[0] = 124;
          v76 = HIBYTE(v249.__r_.__value_.__r.__words[2]);
          if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = &v249;
          else
            v77 = (std::string *)v249.__r_.__value_.__r.__words[0];
          if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v76 = v249.__r_.__value_.__l.__size_;
          v77->__r_.__value_.__s.__data_[v76 - 1] = 124;
          if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
          else
            v78 = v258.__r_.__value_.__l.__size_;
          if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &v258;
          else
            v79 = (std::string *)v258.__r_.__value_.__r.__words[0];
          std::string::replace(&v249, (__len - v78) >> 1, v78, (const std::string::value_type *)v79, v78);
        }
        if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &v249;
        else
          v80 = (std::string *)v249.__r_.__value_.__r.__words[0];
        if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = HIBYTE(v249.__r_.__value_.__r.__words[2]);
        else
          v81 = v249.__r_.__value_.__l.__size_;
        sub_18D076A18(v38, (uint64_t)v80, v81);
        if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v249.__r_.__value_.__l.__data_);
        if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v258.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__b.__r_.__value_.__l.__data_);
      }
      ++v68;
    }
    while (v68 != v241);
  }
  if (v35)
  {
    v82 = 0;
    v83 = 10;
    do
    {
      v242 = v82;
      sub_18D076A18(v38, (uint64_t)" ", 1);
      for (k = 0; k != 2; ++k)
      {
        memset(&__b, 0, sizeof(__b));
        switch(dword_18D339048[k])
        {
          case 0:
            *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
            LOWORD(__b.__r_.__value_.__l.__data_) = 28245;
            v85 = 107;
            goto LABEL_175;
          case 1:
            *((_BYTE *)&__b.__r_.__value_.__s + 23) = 2;
            LOWORD(__b.__r_.__value_.__l.__data_) = 21072;
            break;
          case 2:
            *((_BYTE *)&__b.__r_.__value_.__s + 23) = 4;
            LODWORD(__b.__r_.__value_.__l.__data_) = 1380200260;
            break;
          case 3:
            *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
            LOWORD(__b.__r_.__value_.__l.__data_) = 29775;
            v85 = 104;
LABEL_175:
            __b.__r_.__value_.__s.__data_[2] = v85;
            break;
          default:
            break;
        }
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = v83;
        std::operator+<char>();
        v86 = std::string::append(&__dst, " ", 1uLL);
        v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v257.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        v88 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v88 = v257.__r_.__value_.__l.__size_;
        if (v88 + 2 >= v83)
        {
          v249 = v257;
          memset(&v257, 0, sizeof(v257));
        }
        else
        {
          sub_18D076CB8(&v249, v83, 45);
          if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v89 = &v249;
          else
            v89 = (std::string *)v249.__r_.__value_.__r.__words[0];
          v89->__r_.__value_.__s.__data_[0] = 124;
          v90 = HIBYTE(v249.__r_.__value_.__r.__words[2]);
          if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v91 = &v249;
          else
            v91 = (std::string *)v249.__r_.__value_.__r.__words[0];
          if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v90 = v249.__r_.__value_.__l.__size_;
          v91->__r_.__value_.__s.__data_[v90 - 1] = 124;
          if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v92 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
          else
            v92 = v257.__r_.__value_.__l.__size_;
          if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &v257;
          else
            v93 = (std::string *)v257.__r_.__value_.__r.__words[0];
          std::string::replace(&v249, (v83 - v92) >> 1, v92, (const std::string::value_type *)v93, v92);
        }
        if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v94 = &v249;
        else
          v94 = (std::string *)v249.__r_.__value_.__r.__words[0];
        if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = HIBYTE(v249.__r_.__value_.__r.__words[2]);
        else
          v95 = v249.__r_.__value_.__l.__size_;
        sub_18D076A18(v38, (uint64_t)v94, v95);
        if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v249.__r_.__value_.__l.__data_);
        if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v257.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__b.__r_.__value_.__l.__data_);
      }
      v82 = 1;
      v83 = 20;
    }
    while ((v242 & 1) == 0);
  }
  if ((v271 & 0x80u) == 0)
    v96 = &v269;
  else
    v96 = v269;
  if ((v271 & 0x80u) == 0)
    v97 = v271;
  else
    v97 = v270;
  sub_18D076A18(v38, (uint64_t)v96, v97);
  v98 = v234 + 1536;
  *(uint64_t *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 24) = 7;
  v99 = sub_18D076A18(v38, (uint64_t)"SVID", 4);
  *(_QWORD *)((char *)v99 + *(_QWORD *)(*v99 - 24) + 24) = 4;
  v100 = sub_18D076A18(v99, (uint64_t)"Az", 2);
  *(_QWORD *)((char *)v100 + *(_QWORD *)(*v100 - 24) + 24) = 3;
  v101 = sub_18D076A18(v100, (uint64_t)"El", 2);
  *(_QWORD *)((char *)v101 + *(_QWORD *)(*v101 - 24) + 24) = 5;
  v102 = sub_18D076A18(v101, (uint64_t)"LOS", 3);
  *(_QWORD *)((char *)v102 + *(_QWORD *)(*v102 - 24) + 24) = 6;
  sub_18D076A18(v102, (uint64_t)"RT", 2);
  if (v222 != (char *)v232)
  {
    v103 = 0;
    v104 = v232 - (unsigned __int8 *)v222;
    if (v237 <= 1)
      v104 = 1;
    v238 = v104;
    do
    {
      v243 = v103;
      *(_QWORD *)(v98 + *(_QWORD *)(*v38 - 24)) = 5;
      sub_18D076A18(v38, (uint64_t)"CN0", 3);
      for (m = 0; m != 2; ++m)
      {
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 6;
        sub_18D076A18(v38, (uint64_t)"err", 3);
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 10;
        sub_18D076A18(v38, (uint64_t)"dz_pre", 6);
        if (v240)
        {
          *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 10;
          v106 = sub_18D076A18(v38, (uint64_t)"M_innov", 7);
          *(_QWORD *)((char *)v106 + *(_QWORD *)(*v106 - 24) + 24) = 9;
          v107 = sub_18D076A18(v106, (uint64_t)"P-sigma", 7);
          *(_QWORD *)((char *)v107 + *(_QWORD *)(*v107 - 24) + 24) = 9;
          sub_18D076A18(v107, (uint64_t)"M-sigma", 7);
        }
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 9;
        v108 = sub_18D076A18(v38, (uint64_t)"R-sigma", 7);
        *(_QWORD *)((char *)v108 + *(_QWORD *)(*v108 - 24) + 24) = 9;
        v109 = sub_18D076A18(v108, (uint64_t)"I-sigma", 7);
        *(_QWORD *)((char *)v109 + *(_QWORD *)(*v109 - 24) + 24) = 5;
        v110 = sub_18D076A18(v109, (uint64_t)"Res", 3);
        *(_QWORD *)((char *)v110 + *(_QWORD *)(*v110 - 24) + 24) = 10;
        v111 = sub_18D076A18(v110, (uint64_t)"dz_post", 7);
        *(_QWORD *)((char *)v111 + *(_QWORD *)(*v111 - 24) + 24) = 3;
        if (dword_18D339048[m] == 1)
          v112 = "M";
        else
          v112 = "D";
        sub_18D076A18(v111, (uint64_t)v112, 1);
        if (v240)
        {
          *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 3;
          sub_18D076A18(v38, (uint64_t)"G", 1);
          *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 3;
          sub_18D076A18(v38, (uint64_t)"Or", 2);
        }
      }
      v103 = v243 + 1;
      v98 = v234 + 1536;
    }
    while (v243 + 1 != v238);
  }
  if (v35)
  {
    v113 = sub_18D076A18(v38, (uint64_t)" ", 1);
    *(_QWORD *)((char *)v113 + *(_QWORD *)(*v113 - 24) + 24) = 10;
    v114 = sub_18D076A18(v113, (uint64_t)"PR_err", 6);
    *(_QWORD *)((char *)v114 + *(_QWORD *)(*v114 - 24) + 24) = 10;
    sub_18D076A18(v114, (uint64_t)"Dopp_err", 8);
    v115 = sub_18D076A18(v38, (uint64_t)" ", 1);
    *(_QWORD *)((char *)v115 + *(_QWORD *)(*v115 - 24) + 24) = 10;
    v116 = sub_18D076A18(v115, (uint64_t)"dz_pre", 6);
    *(_QWORD *)((char *)v116 + *(_QWORD *)(*v116 - 24) + 24) = 10;
    sub_18D076A18(v116, (uint64_t)"dz_pre", 6);
    v117 = sub_18D076A18(v38, (uint64_t)" ", 1);
    *(_QWORD *)((char *)v117 + *(_QWORD *)(*v117 - 24) + 24) = 10;
    v118 = sub_18D076A18(v117, (uint64_t)"dz_post", 7);
    *(_QWORD *)((char *)v118 + *(_QWORD *)(*v118 - 24) + 24) = 10;
    v119 = sub_18D076A18(v118, (uint64_t)"R-sigma", 7);
    *(_QWORD *)((char *)v119 + *(_QWORD *)(*v119 - 24) + 24) = 10;
    v120 = sub_18D076A18(v119, (uint64_t)"dz_post", 7);
    *(_QWORD *)((char *)v120 + *(_QWORD *)(*v120 - 24) + 24) = 10;
    sub_18D076A18(v120, (uint64_t)"R-sigma", 7);
  }
  if (v240)
  {
    *(uint64_t *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 24) = 6;
    sub_18D076A18(v38, (uint64_t)"URE", 3);
    *(uint64_t *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 24) = 6;
    sub_18D076A18(v38, (uint64_t)"Iono", 4);
    *(uint64_t *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 24) = 6;
    sub_18D076A18(v38, (uint64_t)"Trop", 4);
    *(uint64_t *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 24) = 6;
    sub_18D076A18(v38, (uint64_t)"TXGD", 4);
    *(uint64_t *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 24) = 8;
    sub_18D076A18(v38, (uint64_t)"RFTB", 4);
    if (v221)
    {
      *(uint64_t *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 24) = 6;
      sub_18D076A18(v38, (uint64_t)"DCBC", 4);
    }
  }
  if ((v271 & 0x80u) == 0)
    v121 = &v269;
  else
    v121 = v269;
  if ((v271 & 0x80u) == 0)
    v122 = v271;
  else
    v122 = v270;
  v123 = sub_18D076A18(v38, (uint64_t)v121, v122);
  if ((v271 & 0x80u) == 0)
    v124 = &v269;
  else
    v124 = v269;
  if ((v271 & 0x80u) == 0)
    v125 = v271;
  else
    v125 = v270;
  sub_18D076A18(v123, (uint64_t)v124, v125);
  v126 = (int *)__p;
  v223 = (int *)v267;
  if (__p == v267)
    goto LABEL_406;
  v127 = v234 + 1528;
  v128 = 0x404CA5DC1A63C1F8;
  v235 = v234 + 1528;
  do
  {
    v129 = sub_18D2AA07C((uint64_t)v264, *v126, v126);
    if (!v129[5])
      goto LABEL_405;
    v239 = v129;
    v224 = v129[4];
    v130 = *(__int128 **)(v224 + 16);
    if (*((char *)v130 + 23) < 0)
    {
      sub_18D077798(&__dst, *(void **)v130, *((_QWORD *)v130 + 1));
    }
    else
    {
      v131 = *v130;
      __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v130 + 2);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v131;
    }
    v256 = *((_QWORD *)v130 + 3);
    *(_QWORD *)(v98 + *(_QWORD *)(*v38 - 24)) = 3;
    sub_18D0778AC(&__b, off_1E25CD748[*(char *)(*(_QWORD *)(v224 + 16) + 24)]);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v132 = &__b;
    else
      v132 = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v133 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    else
      v133 = __b.__r_.__value_.__l.__size_;
    v134 = sub_18D076A18(v38, (uint64_t)v132, v133);
    *(_QWORD *)((char *)v134 + *(_QWORD *)(*v134 - 24) + 24) = 4;
    v135 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v135 + *(_QWORD *)(*v135 - 24) + 24) = 4;
    v136 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v136 + *(_QWORD *)(*v136 - 24) + 24) = 3;
    std::ostream::operator<<();
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__b.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(*(_QWORD *)(v224 + 16) + 304))
    {
      *(_QWORD *)(v98 + *(_QWORD *)(*v38 - 24)) = 5;
      std::ostream::operator<<();
    }
    else
    {
      *(_QWORD *)(v98 + *(_QWORD *)(*v38 - 24)) = 5;
      sub_18D076A18(v38, (uint64_t)"-", 1);
    }
    v137 = *(_QWORD *)(*(_QWORD *)(v224 + 16) + 312);
    v138 = *v38;
    *(_QWORD *)(v98 + *(_QWORD *)(*v38 - 24)) = 6;
    if (v137)
    {
      *(_QWORD *)(v127 + *(_QWORD *)(v138 - 24)) = 1;
      std::ostream::operator<<();
    }
    else
    {
      sub_18D076A18(v38, (uint64_t)"-", 1);
    }
    v139 = v239;
    if (v222 == (char *)v232)
    {
      v231 = NAN;
      v141 = NAN;
      v225 = 0x7FF8000000000000;
      v226 = 0x7FF8000000000000;
      v227 = 0x7FF8000000000000;
      v228 = 0x7FF8000000000000;
      goto LABEL_379;
    }
    v140 = v239 + 3;
    v226 = 0x7FF8000000000000;
    v227 = 0x7FF8000000000000;
    v225 = 0x7FF8000000000000;
    v141 = NAN;
    v231 = NAN;
    v142 = NAN;
    v228 = 0x7FF8000000000000;
    v229 = NAN;
    v244 = (unsigned __int8 *)v222;
    v230 = v126;
    do
    {
      v143 = sub_18D2AA4DC(v262, *v126, v126);
      v146 = v143[4];
      v144 = v143 + 4;
      v145 = v146;
      if (!v146)
        goto LABEL_282;
      v147 = *v244;
      v148 = v144;
      do
      {
        v149 = *(unsigned __int8 *)(v145 + 28);
        v150 = v149 >= v147;
        if (v149 >= v147)
          v151 = (uint64_t *)v145;
        else
          v151 = (uint64_t *)(v145 + 8);
        if (v150)
          v148 = (_QWORD *)v145;
        v145 = *v151;
      }
      while (*v151);
      if (v148 == v144 || v147 < *((unsigned __int8 *)v148 + 28))
LABEL_282:
        v148 = v144;
      v152 = sub_18D2AA4DC(v262, *v126, v126);
      *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 5;
      if (v148 == v152 + 4)
      {
        sub_18D076A18(v38, (uint64_t)" ", 1);
      }
      else
      {
        v153 = (uint64_t **)sub_18D2AA4DC(v262, *v126, v126);
        sub_18D2AA920(v153 + 3, *v244, v244);
        std::ostream::operator<<();
      }
      v154 = (char *)dword_18D339048;
      do
      {
        v155 = v139[4];
        if ((uint64_t *)v155 == v140)
          goto LABEL_298;
        v156 = *(_DWORD *)v154;
        while (1)
        {
          v157 = *(_QWORD *)(v155 + 24);
          v158 = *(_DWORD *)(v157 + 96) - 1;
          v159 = v158 > 3 ? 0 : dword_18D338FF0[v158];
          if (v159 == v156)
          {
            v160 = *(char *)(v157 + 100);
            v161 = v160 > 0xA ? 1 : byte_18D339090[v160];
            if (v161 == *v244)
              break;
          }
          v155 = *(_QWORD *)(v155 + 8);
          if ((uint64_t *)v155 == v140)
            goto LABEL_298;
        }
        if ((uint64_t *)v155 == v140)
        {
LABEL_298:
          *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = __len;
          sub_18D076A18(v38, (uint64_t)" ", 1);
          goto LABEL_299;
        }
        v162 = *(double *)(v157 + 120);
        v163 = *(double *)(v155 + 48);
        v250 = 0x100000001;
        v249.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E25C6A40;
        *(_QWORD *)&v164 = 0x100000001;
        *((_QWORD *)&v164 + 1) = 0x100000001;
        *(_OWORD *)&v249.__r_.__value_.__r.__words[1] = v164;
        v251 = (double *)&v252;
        sub_18D053B2C(v155 + 56, v233, (uint64_t)&v249);
        v165 = v128;
        v166 = v162 - v163;
        v167 = (HIDWORD(v249.__r_.__value_.__r.__words[1]) * LODWORD(v249.__r_.__value_.__r.__words[1]));
        if ((int)v167 >= 1)
        {
          v168 = v251;
          v169 = &v254;
          do
          {
            v170 = *v168++;
            *v169++ = v166 - v170;
            --v167;
          }
          while (v167);
        }
        v171 = v254;
        if (*(_BYTE *)(v155 + 216))
          v172 = sqrt(*(double *)(v155 + 208));
        else
          v172 = NAN;
        sub_18D0778AC(&v249, off_1E25CD6C8[*(int *)(v155 + 192)]);
        sub_18D0778AC(v247, *((char **)&off_1E25CD6F8 + *(int *)(v155 + 196)));
        if ((v248 & 0x80u) == 0)
          v173 = v247;
        else
          v173 = (void **)v247[0];
        if ((v248 & 0x80u) == 0)
          v174 = v248;
        else
          v174 = (std::string::size_type)v247[1];
        v175 = std::string::append(&v249, (const std::string::value_type *)v173, v174);
        v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
        __b.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v176;
        v175->__r_.__value_.__l.__size_ = 0;
        v175->__r_.__value_.__r.__words[2] = 0;
        v175->__r_.__value_.__r.__words[0] = 0;
        if ((char)v248 < 0)
          operator delete(v247[0]);
        if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v249.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(*(_QWORD *)(v155 + 24) + 188))
        {
          if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
          {
            v178 = (std::string *)__b.__r_.__value_.__r.__words[0];
            v177 = *__b.__r_.__value_.__l.__data_;
            if (v177 != 42)
            {
LABEL_324:
              if ((v177 & 0x80) != 0)
                v179 = __maskrune((char)v177, 0x8000uLL);
              else
                v179 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v177 + 60) & 0x8000;
              if (v179)
              {
                v180 = &__b;
                if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v180 = (std::string *)__b.__r_.__value_.__r.__words[0];
                v181 = __tolower(v180->__r_.__value_.__s.__data_[0]);
                v182 = &__b;
                if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v182 = (std::string *)__b.__r_.__value_.__r.__words[0];
                v182->__r_.__value_.__s.__data_[0] = v181;
              }
              goto LABEL_333;
            }
          }
          else
          {
            LOBYTE(v177) = __b.__r_.__value_.__s.__data_[0];
            if (__b.__r_.__value_.__s.__data_[0] != 42)
              goto LABEL_324;
            v178 = &__b;
          }
          v178->__r_.__value_.__s.__data_[0] = 126;
        }
LABEL_333:
        if (v156 == 1)
          LOBYTE(v183) = 1;
        else
          LOBYTE(v183) = 2;
        v184 = *v38;
        v185 = *(_QWORD *)(*v38 - 24);
        if (*(_QWORD *)(v155 + 232))
        {
          v183 = v183;
          v186 = v235;
          *(_QWORD *)(v235 + v185) = v183;
          v187 = v246;
          *(_QWORD *)(v246 + *(_QWORD *)(v184 - 24)) = 6;
          std::ostream::operator<<();
        }
        else
        {
          *(_QWORD *)(v246 + v185) = 6;
          sub_18D076A18(v38, (uint64_t)"-", 1);
          v183 = v183;
          v187 = v246;
          v186 = v235;
        }
        v188 = *v38;
        *(_QWORD *)(v186 + *(_QWORD *)(*v38 - 24)) = v183;
        *(_QWORD *)(v187 + *(_QWORD *)(v188 - 24)) = 10;
        std::ostream::operator<<();
        if (v240)
        {
          *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 10;
          v189 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v189 + *(_QWORD *)(*v189 - 24) + 24) = 9;
          v190 = (_QWORD *)std::ostream::operator<<();
          *(_QWORD *)((char *)v190 + *(_QWORD *)(*v190 - 24) + 24) = 9;
          std::ostream::operator<<();
        }
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 9;
        v191 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v191 + *(_QWORD *)(*v191 - 24) + 24) = 9;
        v192 = (_QWORD *)std::ostream::operator<<();
        *(_QWORD *)((char *)v192 + *(_QWORD *)(*v192 - 24) + 24) = 5;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v193 = &__b;
        else
          v193 = (std::string *)__b.__r_.__value_.__r.__words[0];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v194 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        else
          v194 = __b.__r_.__value_.__l.__size_;
        v195 = sub_18D076A18(v192, (uint64_t)v193, v194);
        *(_QWORD *)((char *)v195 + *(_QWORD *)(*v195 - 24) + 24) = 10;
        std::ostream::operator<<();
        v139 = v239;
        switch(*(_DWORD *)(*(_QWORD *)(v155 + 24) + 96))
        {
          case 1:
          case 2:
          case 3:
          case 4:
            break;
          default:
            v139 = v239;
            break;
        }
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 3;
        std::ostream::operator<<();
        if (v240)
        {
          *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 3;
          std::ostream::operator<<();
          *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 3;
          std::ostream::operator<<();
        }
        if (v236)
        {
          if (v156 == 2)
          {
            v197 = *v244;
            if (v197 == 1)
            {
              v227 = *(_QWORD *)&v166;
            }
            else if (v197 == 2)
            {
              v226 = *(_QWORD *)&v166;
            }
          }
          else if (v156 == 1)
          {
            v196 = *v244;
            if (v196 == 1)
            {
              v228 = *(_QWORD *)&v166;
            }
            else if (v196 == 2)
            {
              v225 = *(_QWORD *)&v166;
            }
          }
          v128 = v165;
          if ((*(_DWORD *)(v155 + 192) & 0xFFFFFFFE) == 4)
          {
            if (v156 == 2)
            {
              if ((*(_QWORD *)&v231 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                || (*(_QWORD *)&v229 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              {
                v229 = v172;
                v231 = v171;
              }
              else
              {
                v202 = 1.0 / (v229 * v229);
                v203 = 1.0 / (v172 * v172);
                v204 = v171 * v203 + v202 * v231;
                v205 = 1.0 / (v202 + v203);
                v231 = v204 * v205;
                v229 = sqrt(v205);
              }
            }
            else if (v156 == 1)
            {
              if ((*(_QWORD *)&v141 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                || (*(_QWORD *)&v142 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              {
                v142 = v172;
                v141 = v171;
              }
              else
              {
                v198 = 1.0 / (v142 * v142);
                v199 = 1.0 / (v172 * v172);
                v200 = v171 * v199 + v198 * v141;
                v201 = 1.0 / (v198 + v199);
                v141 = v200 * v201;
                v142 = sqrt(v201);
              }
            }
          }
        }
        else
        {
          v128 = v165;
        }
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__b.__r_.__value_.__l.__data_);
LABEL_299:
        v154 += 4;
      }
      while (v154 != &byte_18D339050);
      ++v244;
      v126 = v230;
    }
    while (v244 != v232);
LABEL_379:
    v98 = v246;
    v127 = v235;
    if (v236)
    {
      v206 = sub_18D076A18(v38, (uint64_t)" ", 1);
      *(_QWORD *)((char *)v206 + *(_QWORD *)(*v206 - 24) + 16) = 1;
      if ((v228 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (v225 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 10;
        sub_18D076A18(v38, (uint64_t)" ", 1);
      }
      else
      {
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 10;
        std::ostream::operator<<();
      }
      v207 = *v38;
      *(_QWORD *)(v235 + *(_QWORD *)(*v38 - 24)) = 2;
      if ((v227 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (v226 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_QWORD *)(v246 + *(_QWORD *)(v207 - 24)) = 10;
        sub_18D076A18(v38, (uint64_t)" ", 1);
      }
      else
      {
        *(_QWORD *)(v246 + *(_QWORD *)(v207 - 24)) = 10;
        std::ostream::operator<<();
      }
      v208 = sub_18D076A18(v38, (uint64_t)" ", 1);
      *(_QWORD *)((char *)v208 + *(_QWORD *)(*v208 - 24) + 16) = 1;
      v209 = *(_QWORD *)(*v38 - 24);
      if ((*(_QWORD *)&v141 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_QWORD *)(v246 + v209) = 20;
        sub_18D076A18(v38, (uint64_t)" ", 1);
      }
      else
      {
        *(_QWORD *)(v246 + v209) = 10;
        std::ostream::operator<<();
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 10;
        std::ostream::operator<<();
      }
      v210 = *v38;
      *(_QWORD *)(v235 + *(_QWORD *)(*v38 - 24)) = 2;
      v211 = *(_QWORD *)(v210 - 24);
      if ((*(_QWORD *)&v231 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        *(_QWORD *)(v246 + v211) = 20;
        sub_18D076A18(v38, (uint64_t)" ", 1);
      }
      else
      {
        *(_QWORD *)(v246 + v211) = 10;
        std::ostream::operator<<();
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 10;
        std::ostream::operator<<();
      }
    }
    if (v240)
    {
      v212 = *v38;
      *(_QWORD *)(v235 + *(_QWORD *)(*v38 - 24)) = 1;
      *(_QWORD *)(v246 + *(_QWORD *)(v212 - 24)) = 6;
      v213 = (_QWORD *)std::ostream::operator<<();
      *(_QWORD *)((char *)v213 + *(_QWORD *)(*v213 - 24) + 24) = 6;
      v214 = (_QWORD *)std::ostream::operator<<();
      *(_QWORD *)((char *)v214 + *(_QWORD *)(*v214 - 24) + 24) = 6;
      v215 = (_QWORD *)std::ostream::operator<<();
      *(_QWORD *)((char *)v215 + *(_QWORD *)(*v215 - 24) + 24) = 6;
      v216 = (_QWORD *)std::ostream::operator<<();
      *(_QWORD *)((char *)v216 + *(_QWORD *)(*v216 - 24) + 24) = 8;
      std::ostream::operator<<();
      if (v221)
      {
        *(_QWORD *)(v246 + *(_QWORD *)(*v38 - 24)) = 6;
        std::ostream::operator<<();
      }
    }
    if ((v271 & 0x80u) == 0)
      v217 = &v269;
    else
      v217 = v269;
    if ((v271 & 0x80u) == 0)
      v218 = v271;
    else
      v218 = v270;
    sub_18D076A18(v38, (uint64_t)v217, v218);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_405:
    ++v126;
  }
  while (v126 != v223);
LABEL_406:
  if ((v271 & 0x80u) == 0)
    v219 = &v269;
  else
    v219 = v269;
  if ((v271 & 0x80u) == 0)
    v220 = v271;
  else
    v220 = v270;
  sub_18D076A18(v38, (uint64_t)v219, v220);
  operator delete(v222);
  sub_18D2AA020((uint64_t)v262);
  sub_18D2A9FC4((uint64_t)v264);
  if (__p)
  {
    v267 = (char *)__p;
    operator delete(__p);
  }
  if ((char)v271 < 0)
    operator delete(v269);
}

void sub_18D2A4CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  char a72;
  void *v73;

  if (a46 < 0)
    operator delete(__p);
  if (a67 < 0)
    operator delete(a62);
  operator delete(a10);
  sub_18D2AA020((uint64_t)&a72);
  sub_18D2A9FC4((uint64_t)&STACK[0x210]);
  v73 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v73;
    operator delete(v73);
  }
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::PrefilterGNSSMeasurementsAsUseOrNotUse(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unsigned int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  _QWORD *i;
  cnprint::CNPrinter *v56;
  unsigned __int8 *v57;
  unsigned __int8 *j;
  _QWORD *v59;
  void **v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  const char *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v75;
  int v76;
  uint64_t *v77;
  BOOL v79;
  BOOL v80;
  uint64_t v81;
  int v82;
  _QWORD v83[2];
  unsigned __int8 v84;
  __int16 v85;
  void *__p[2];
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  char v92;
  void *v93;
  char v94;
  _BYTE v95[64];
  uint64_t v96;
  char v97;
  char v98;
  char v99;
  int v100;
  uint64_t v101;
  float v102[11];

  v5 = a4;
  v7 = a2;
  v8 = a1;
  v9 = a1[24];
  v82 = *(unsigned __int8 *)(v9 + 3818);
  memset(v102, 0, 32);
  v102[8] = 1.0;
  v10 = *(uint64_t **)(a2 + 96);
  v77 = *(uint64_t **)(a2 + 104);
  if (v10 != v77)
  {
    v75 = 0;
    v76 = 0;
    v81 = (uint64_t)(a1 + 12);
    v12 = 0.0;
    while (1)
    {
      v13 = *v10;
      if (*v10)
        break;
LABEL_54:
      v10 += 2;
      if (v10 == v77)
      {
        v9 = v8[24];
        v7 = a2;
        v42 = v75;
        v5 = a4;
        v43 = v76;
        goto LABEL_57;
      }
    }
    if (*(_BYTE *)(v13 + 304))
    {
      v14 = *(double *)(v13 + 296);
      v15 = *(double *)(v8[24] + 2240);
      v16 = *(_QWORD *)(v13 + 312);
      v79 = v16 == 0;
      v80 = v14 < v15;
      if (v14 < v15 && v16 == 0)
      {
        a1 = sub_18D2A5824(v102, *(_BYTE *)(v13 + 24));
        ++*((_DWORD *)a1 + 1);
        ++v75;
        v79 = 1;
        v80 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      v79 = *(_QWORD *)(v13 + 312) == 0;
      v80 = 0;
    }
    a1 = sub_18D2A5824(v102, *(_BYTE *)(v13 + 24));
    ++*(_DWORD *)a1;
    ++v76;
LABEL_13:
    if (*(_BYTE *)(v13 + 304))
    {
      v18 = *(double *)(v13 + 296);
      if (v18 <= v12)
        v18 = v12;
      v12 = v18;
    }
    v20 = *(_QWORD *)(v13 + 328);
    v19 = *(_QWORD *)(v13 + 336);
    while (v20 != v19)
    {
      v21 = *(double *)(v20 + 200) - *(double *)(v20 + 192);
      v22 = (unint64_t)(COERCE__INT64(fabs(v21)) - 0x10000000000000) >> 53;
      if ((*(uint64_t *)&v21 <= -1 || v22 >= 0x3FF) && (unint64_t)(*(_QWORD *)&v21 - 1) >= 0xFFFFFFFFFFFFFLL)
      {
        LOWORD(v88) = 12;
        LOBYTE(__p[0]) = 4;
        v29 = sub_18D181C54(v13);
        v30 = *(_DWORD *)(v20 + 96) - 1;
        v31 = "UnknownType";
        if (v30 <= 4)
          v31 = off_1E25CD780[v30];
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)(v8 + 26), v81, "#MSR %s %s invalid meas interval,%3.lf", v29, v31, *(double *)(v20 + 200) - *(double *)(v20 + 192));
        if (*((char *)v8 + 231) >= 0)
          LOBYTE(v37) = (_BYTE)v8 - 48;
        else
          v37 = v8[26];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, (unsigned __int8 *)__p, "%s", v32, v33, v34, v35, v36, v37);
      }
      else
      {
        v88 = v13;
        v89 = v20;
        v25 = (uint64_t)(*(double *)(v20 + 104) + 0.5);
        v90 = *(_DWORD *)(v13 + 28) + 1000 * *(unsigned __int8 *)(v13 + 24);
        v91 = v25;
        v92 = 0;
        v95[32] = 0;
        v95[40] = 0;
        v95[56] = 0;
        v98 = 0;
        v99 = 0;
        v100 = 0;
        v101 = 0;
        v97 = 0;
        v96 = 0;
        if (a5)
        {
          v26 = *(_QWORD *)(a5 + 16);
          v27 = *(_QWORD *)(a5 + 24);
          if (v26 == v27)
          {
LABEL_33:
            v26 = 0;
          }
          else
          {
            while (*(unsigned __int8 *)(v26 + 48) != *(unsigned __int8 *)(v13 + 24)
                 || *(_DWORD *)(v26 + 52) != *(_DWORD *)(v13 + 28)
                 || *(unsigned __int8 *)(v26 + 8) != *(unsigned __int8 *)(v20 + 100)
                 || *(_DWORD *)(v26 + 16) != *(_DWORD *)(v20 + 96))
            {
              v26 += 56;
              if (v26 == v27)
                goto LABEL_33;
            }
          }
          v101 = v26;
        }
        if (v82 && *(_BYTE *)(v20 + 188))
        {
          a1 = sub_18D2AA9F0((uint64_t)&v88);
          a1[1] = a3;
          v28 = *a3;
          *a1 = *a3;
          *(_QWORD *)(v28 + 8) = a1;
          *a3 = (uint64_t)a1;
          ++a3[2];
        }
        else if (v80)
        {
          if (v79 || *(_DWORD *)(v20 + 96) != 1)
          {
            v96 = 0x100000002;
            a1 = sub_18D2AA9F0((uint64_t)&v88);
            a1[1] = a4;
            v41 = *a4;
            *a1 = *a4;
            *(_QWORD *)(v41 + 8) = a1;
            *a4 = a1;
            ++a4[2];
          }
          else
          {
            a1 = sub_18D2AA9F0((uint64_t)&v88);
            a1[1] = a3;
            v38 = *a3;
            *a1 = *a3;
            *(_QWORD *)(v38 + 8) = a1;
            *a3 = (uint64_t)a1;
            ++a3[2];
            ++*((_DWORD *)v8 + 520);
            ++*((_DWORD *)v8 + 522);
          }
        }
        else
        {
          a1 = sub_18D2AA9F0((uint64_t)&v88);
          a1[1] = a3;
          v39 = *a3;
          *a1 = *a3;
          *(_QWORD *)(v39 + 8) = a1;
          *a3 = (uint64_t)a1;
          ++a3[2];
          v40 = *(_DWORD *)(v89 + 96);
          if (v40 == 1)
          {
            ++*((_DWORD *)v8 + 520);
          }
          else if ((v40 - 2) <= 2)
          {
            ++*((_DWORD *)v8 + 521);
          }
        }
      }
      v20 += 208;
    }
    goto LABEL_54;
  }
  v43 = 0;
  v42 = 0;
  v12 = 0.0;
LABEL_57:
  if (v12 >= *(double *)(v9 + 2272))
  {
    v44 = *(_DWORD *)(v9 + 2280);
    *((_BYTE *)v8 + 88) = v43 >= v44;
    if (v43 >= v44)
      goto LABEL_74;
  }
  else
  {
    *((_BYTE *)v8 + 88) = 0;
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    LOWORD(v88) = 12;
    LOBYTE(__p[0]) = 1;
    v45 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)(v8 + 26), (uint64_t)(v8 + 12), "#MSR LOS HMM unreliable, adding back low-P(LOS) measurements, best P(LOS) %5.3f, high-P(LOS) count %2d,  low-P(LOS) count %2d", v12, v43, v42);
    if (*((char *)v8 + 231) >= 0)
      LOBYTE(v51) = v45;
    else
      v51 = v8[26];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, (unsigned __int8 *)__p, "%s", v46, v47, v48, v49, v50, v51);
  }
  v52 = (unsigned __int8 *)v8[6];
  v53 = (unsigned __int8 *)v8[7];
  while (v52 != v53)
  {
    v54 = sub_18D2A5824(v102, *v52);
    *(_QWORD *)v54 = (*(_DWORD *)v54 + *((_DWORD *)v54 + 1));
    ++v52;
  }
  if (!*((_BYTE *)v8 + 1272) || !*(_BYTE *)(v8[24] + 2392))
  {
    for (i = (_QWORD *)v5[1]; i != v5; i = (_QWORD *)i[1])
      i[24] = 0;
    sub_18D2637F0((uint64_t)a3, a3, v5);
  }
LABEL_74:
  LOBYTE(v88) = 1;
  if (cnprint::CNPrinter::WillPrint((cnprint::CNPrinter *)&v88))
  {
    sub_18D099F88((uint64_t)&v88);
    v56 = (cnprint::CNPrinter *)sub_18D076A18(&v88, (uint64_t)"#MSR LOS HMM satellite counts (accept,reject)", 45);
    v57 = (unsigned __int8 *)v8[6];
    for (j = (unsigned __int8 *)v8[7]; v57 != j; ++v57)
    {
      sub_18D2A5824(v102, *v57);
      v59 = sub_18D076A18(&v88, (uint64_t)",", 1);
      sub_18D0778AC(__p, off_1E25CD748[(char)*v57]);
      if ((v87 & 0x80u) == 0)
        v60 = __p;
      else
        v60 = (void **)__p[0];
      if ((v87 & 0x80u) == 0)
        v61 = v87;
      else
        v61 = (uint64_t)__p[1];
      v62 = sub_18D076A18(v59, (uint64_t)v60, v61);
      sub_18D076A18(v62, (uint64_t)",", 1);
      v63 = (_QWORD *)std::ostream::operator<<();
      sub_18D076A18(v63, (uint64_t)",", 1);
      v56 = (cnprint::CNPrinter *)std::ostream::operator<<();
      if ((char)v87 < 0)
        operator delete(__p[0]);
    }
    if (cnprint::CNPrinter::GetLogLevel(v56) <= 1)
    {
      v85 = 12;
      v84 = 1;
      v83[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      v83[1] = v64;
      sub_18D076DE8((uint64_t)&v89, __p);
      v65 = (v87 & 0x80u) == 0 ? (const char *)__p : (const char *)__p[0];
      v66 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)(v8 + 26), (uint64_t)v83, "%s", v65);
      if (*((char *)v8 + 231) >= 0)
        LOBYTE(v72) = v66;
      else
        v72 = v8[26];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v85, &v84, "%s", v67, v68, v69, v70, v71, v72);
      if ((char)v87 < 0)
        operator delete(__p[0]);
    }
    v88 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v88 + *(_QWORD *)(v88 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v89 = MEMORY[0x1E0DE4FB8] + 16;
    if (v94 < 0)
      operator delete(v93);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D78B550](v95);
  }
  return sub_18D04344C((uint64_t)v102);
}

void sub_18D2A57B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  sub_18D09A074((uint64_t)&a29);
  sub_18D04344C(v29 - 176);
  _Unwind_Resume(a1);
}

char *sub_18D2A5824(float *a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  void **v7;
  _QWORD *v8;
  unint64_t v9;
  float v10;
  float v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t prime;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v31;

  v4 = a2;
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v5 <= a2)
        v2 = a2 % v5;
    }
    else
    {
      v2 = ((_DWORD)v5 - 1) & a2;
    }
    v7 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v7)
    {
      v8 = *v7;
      if (*v7)
      {
        do
        {
          v9 = v8[1];
          if (v9 == a2)
          {
            if (*((unsigned __int8 *)v8 + 16) == a2)
              return (char *)v8 + 20;
          }
          else
          {
            if (v6.u32[0] > 1uLL)
            {
              if (v9 >= v5)
                v9 %= v5;
            }
            else
            {
              v9 &= v5 - 1;
            }
            if (v9 != v2)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
  v8 = operator new(0x20uLL);
  *v8 = 0;
  v8[1] = v4;
  *((_BYTE *)v8 + 16) = v4;
  *(_QWORD *)((char *)v8 + 20) = 0;
  v10 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v11 = a1[8];
  if (!v5 || (float)(v11 * (float)v5) < v10)
  {
    v12 = (v5 & (v5 - 1)) == 0;
    if (v5 < 3)
      v12 = 0;
    v13 = (2 * v5) | !v12;
    v14 = vcvtps_u32_f32(v10 / v11);
    if (v13 <= v14)
      prime = (int8x8_t)v14;
    else
      prime = (int8x8_t)v13;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v5)
    {
      v22 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v5 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (*(_QWORD *)&prime <= v22)
        prime = (int8x8_t)v22;
      if (*(_QWORD *)&prime >= v5)
      {
        v5 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_18D0788A0();
          v16 = operator new(8 * *(_QWORD *)&prime);
          v17 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v16;
          if (v17)
            operator delete(v17);
          v18 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18++) = 0;
          while (*(_QWORD *)&prime != v18);
          v19 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v19)
          {
            v20 = v19[1];
            v21 = (uint8x8_t)vcnt_s8(prime);
            v21.i16[0] = vaddlv_u8(v21);
            if (v21.u32[0] > 1uLL)
            {
              if (v20 >= *(_QWORD *)&prime)
                v20 %= *(_QWORD *)&prime;
            }
            else
            {
              v20 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = a1 + 4;
            v25 = (_QWORD *)*v19;
            if (*v19)
            {
              do
              {
                v26 = v25[1];
                if (v21.u32[0] > 1uLL)
                {
                  if (v26 >= *(_QWORD *)&prime)
                    v26 %= *(_QWORD *)&prime;
                }
                else
                {
                  v26 &= *(_QWORD *)&prime - 1;
                }
                if (v26 != v20)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v26))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v19;
                    goto LABEL_55;
                  }
                  *v19 = *v25;
                  *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v26);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v26) = v25;
                  v25 = v19;
                }
                v26 = v20;
LABEL_55:
                v19 = v25;
                v25 = (_QWORD *)*v25;
                v20 = v26;
              }
              while (v25);
            }
          }
          v5 = (unint64_t)prime;
          goto LABEL_59;
        }
        v31 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v31)
          operator delete(v31);
        v5 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v5 <= v4)
        v2 = v4 % v5;
      else
        v2 = v4;
    }
    else
    {
      v2 = ((_DWORD)v5 - 1) & v4;
    }
  }
  v27 = *(_QWORD **)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v28)
  {
    *v8 = *v28;
LABEL_72:
    *v28 = v8;
    goto LABEL_73;
  }
  *v8 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v8;
  v27[v2] = a1 + 4;
  if (*v8)
  {
    v29 = *(_QWORD *)(*v8 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v29 >= v5)
        v29 %= v5;
    }
    else
    {
      v29 &= v5 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return (char *)v8 + 20;
}

void sub_18D2A5BF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *raven::RavenSequentialGNSSMeasurementSelector::ProcessMSRDataContainer(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5[3];
  char v6;

  result = raven::RavenSequentialGNSSMeasurementSelector::TestInnovationsAndUpdateEstimator(a1, a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 192) + 2104), v5);
  if (v6)
  {
    result = (_QWORD *)raven::RavenSequentialGNSSMeasurementSelector::ReTestInnovationsAndUpdateEstimator(a1, v5, a2);
    if (v6)
      return sub_18D1C5494(v5);
  }
  return result;
}

void sub_18D2A5C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
    sub_18D1C5494(&a9);
  _Unwind_Resume(exception_object);
}

_QWORD *raven::RavenSequentialGNSSMeasurementSelector::TestInnovationsAndUpdateEstimator@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  __int16 v17;
  _BOOL8 ShouldMeasurementBeUsedToUpdateEstimator;
  char v19;
  uint64_t *updated;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  cnprint::CNPrinter *MSRThresholdType;
  double v26;
  double v27;
  const char *v28;
  unsigned int v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  unsigned int v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  unsigned int v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  unsigned int v56;
  const char *v57;
  const char *v58;
  int v59;
  const char *v60;
  const char *v61;
  unsigned int v62;
  const char *v63;
  const char *v64;
  unsigned int v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  unsigned int v78;
  const char *v79;
  int v80;
  int v81;
  uint64_t **v82;
  uint64_t v83;
  const char *v84;
  unsigned int v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  unsigned int v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  unsigned int v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  unsigned int v97;
  const char *v98;
  uint64_t **v99;
  uint64_t **v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  const char *v104;
  unsigned int v105;
  const char *v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  unsigned int v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  cnprint::CNPrinter *v119;
  char v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  const char *v124;
  unsigned int v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  unsigned int v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t **v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  char v148;
  double *v150;
  double *v151;
  double *v152;
  double *v153;
  double *v154;
  double *v155;
  double *v156;
  double *v157;
  void *__p[5];
  uint64_t v159;
  unsigned __int8 v160;
  __int16 v161;
  uint64_t *v162;
  uint64_t **v163;
  uint64_t v164;

  v162 = (uint64_t *)&v162;
  v163 = &v162;
  v164 = 0;
  v9 = (uint64_t *)a2[1];
  if (v9 == a2)
    goto LABEL_144;
  v13 = a1 + 96;
  v14 = a1 + 208;
  v152 = (double *)(a1 + 1288);
  v153 = (double *)(a1 + 1280);
  v150 = (double *)(a1 + 1304);
  v151 = (double *)(a1 + 1296);
  v156 = (double *)(a1 + 1320);
  v157 = (double *)(a1 + 1312);
  v154 = (double *)(a1 + 1336);
  v155 = (double *)(a1 + 1328);
  do
  {
    v15 = (uint64_t *)v9[1];
    v16 = v9 + 2;
    if (!*((_BYTE *)v9 + 160))
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v161) = 4;
      v37 = sub_18D181C54(*v16);
      v38 = *(_DWORD *)(v9[3] + 96) - 1;
      v39 = "UnknownType";
      if (v38 <= 4)
        v39 = off_1E25CD780[v38];
      cnprint::CNLogFormatter::FormatGeneral(v14, v13, "#MSR no measurement function data for %s %s", v37, v39);
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v45) = v14;
      else
        v45 = *(_QWORD *)(a1 + 208);
      goto LABEL_122;
    }
    if ((v9[24] & 0xFFFFFFFE) == 2)
      goto LABEL_123;
    v17 = *(_WORD *)(a1 + 1504) + 1;
    *(_WORD *)(a1 + 1504) = v17;
    *((_WORD *)v9 + 113) = v17;
    ShouldMeasurementBeUsedToUpdateEstimator = raven::RavenSequentialGNSSMeasurementSelector::ShouldMeasurementBeUsedToUpdateEstimator(a1, (uint64_t)(v9 + 2));
    if (ShouldMeasurementBeUsedToUpdateEstimator)
    {
      raven::RavenSequentialGNSSMeasurementSelector::ComputeInnovationData(a1, v9[3], (uint64_t)(v9 + 6), (uint64_t)__p);
      *(_OWORD *)(v9 + 21) = *(_OWORD *)__p;
      v19 = (char)__p[2];
      *((_BYTE *)v9 + 184) = __p[2];
      if (v19)
      {
        updated = raven::RavenSequentialGNSSMeasurementSelector::UpdateTIVsForMeasurement((uint64_t *)a1, (uint64_t)(v9 + 2));
        v22 = v156;
        v21 = v157;
        v24 = v154;
        v23 = v155;
        switch(*(_DWORD *)(v9[3] + 96))
        {
          case 0:
          case 5:
            if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)updated))
            {
              LOWORD(__p[0]) = 12;
              LOBYTE(v161) = 0;
              v58 = sub_18D181C54(*v16);
              v59 = *(_DWORD *)(v9[3] + 96);
              v60 = "UnknownType";
              if ((v59 - 1) <= 4)
                v60 = off_1E25CD780[v59 - 1];
              cnprint::CNLogFormatter::FormatGeneral(v14, v13, "#MSR %s %s invalid measurement type, %d", v58, v60, v59);
              if (*(char *)(a1 + 231) >= 0)
                LOBYTE(v45) = v14;
              else
                v45 = *(_QWORD *)(a1 + 208);
              break;
            }
            goto LABEL_123;
          case 1:
            goto LABEL_9;
          case 2:
          case 3:
          case 4:
            v22 = v152;
            v21 = v153;
            v24 = v150;
            v23 = v151;
LABEL_9:
            v4 = *v21;
            v5 = *v22;
            v6 = *v23;
            v7 = *v24;
            goto LABEL_10;
          default:
LABEL_10:
            MSRThresholdType = (cnprint::CNPrinter *)raven::RavenSequentialGNSSMeasurementSelector::GetMSRThresholdType(a1, (uint64_t)(v9 + 2));
            if ((_DWORD)MSRThresholdType)
            {
              if ((_DWORD)MSRThresholdType == 1)
              {
                MSRThresholdType = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(MSRThresholdType);
                v26 = v6;
                v27 = v7;
                if (!(_DWORD)MSRThresholdType)
                {
                  LOWORD(__p[0]) = 12;
                  LOBYTE(v161) = 0;
                  v64 = sub_18D181C54(*v16);
                  v65 = *(_DWORD *)(v9[3] + 96) - 1;
                  v66 = "UnknownType";
                  if (v65 <= 4)
                    v66 = off_1E25CD780[v65];
                  cnprint::CNLogFormatter::FormatGeneral(v14, v13, "#MSR %s %s using positive-side thresholds,reweight,%.3lf,reject,%.3lf", v64, v66, v6, v7);
                  if (*(char *)(a1 + 231) >= 0)
                    LOBYTE(v72) = v14;
                  else
                    v72 = *(_QWORD *)(a1 + 208);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v161, "%s", v67, v68, v69, v70, v71, v72);
                  v26 = v6;
                  v27 = v7;
                }
              }
              else
              {
                v26 = 0.0;
                v27 = 0.0;
                if ((_DWORD)MSRThresholdType == 2)
                {
                  MSRThresholdType = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(MSRThresholdType);
                  v26 = v5;
                  v27 = v4;
                  if (!(_DWORD)MSRThresholdType)
                  {
                    LOWORD(__p[0]) = 12;
                    LOBYTE(v161) = 0;
                    v28 = sub_18D181C54(*v16);
                    v29 = *(_DWORD *)(v9[3] + 96) - 1;
                    v30 = "UnknownType";
                    if (v29 <= 4)
                      v30 = off_1E25CD780[v29];
                    cnprint::CNLogFormatter::FormatGeneral(v14, v13, "#MSR %s %s using negative-side thresholds,reweight,%.3lf,reject,%.3lf", v28, v30, v5, v4);
                    if (*(char *)(a1 + 231) >= 0)
                      LOBYTE(v36) = v14;
                    else
                      v36 = *(_QWORD *)(a1 + 208);
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v161, "%s", v31, v32, v33, v34, v35, v36);
                    v26 = v5;
                    v27 = v4;
                  }
                }
              }
              if (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 3812) && *(_BYTE *)(v9[3] + 188))
              {
                *((_DWORD *)v9 + 48) = 5;
                if (!cnprint::CNPrinter::GetLogLevel(MSRThresholdType))
                {
                  v73 = a3;
                  v74 = a4;
                  v161 = 12;
                  v160 = 0;
                  v75 = v9[3];
                  v76 = sub_18D181C54(v9[2]);
                  v77 = v9[3];
                  v78 = *(_DWORD *)(v77 + 96) - 1;
                  v79 = "UnknownType";
                  if (v78 <= 4)
                    v79 = off_1E25CD780[v78];
                  v80 = *(unsigned __int8 *)(v77 + 100);
                  memset(__p, 0, 24);
                  switch(v80)
                  {
                    case 0:
                      HIBYTE(__p[2]) = 4;
                      v81 = 543911509;
                      goto LABEL_134;
                    case 1:
                      HIBYTE(__p[2]) = 4;
                      v81 = 1094922572;
                      goto LABEL_134;
                    case 2:
                      HIBYTE(__p[2]) = 4;
                      v81 = 538981708;
                      goto LABEL_134;
                    case 3:
                      HIBYTE(__p[2]) = 4;
                      v81 = 543568204;
                      goto LABEL_134;
                    case 4:
                      HIBYTE(__p[2]) = 4;
                      v81 = 541667650;
                      goto LABEL_134;
                    case 5:
                      HIBYTE(__p[2]) = 4;
                      v81 = 541274434;
                      goto LABEL_134;
                    case 6:
                      HIBYTE(__p[2]) = 4;
                      v81 = 543240770;
                      goto LABEL_134;
                    case 7:
                      HIBYTE(__p[2]) = 4;
                      v81 = 538980677;
                      goto LABEL_134;
                    case 8:
                      HIBYTE(__p[2]) = 4;
                      v81 = 543241541;
                      goto LABEL_134;
                    case 9:
                      HIBYTE(__p[2]) = 4;
                      v81 = 1112748364;
LABEL_134:
                      LODWORD(__p[0]) = v81;
                      break;
                    case 10:
                      HIBYTE(__p[2]) = 3;
                      qmemcpy(__p, "NL5", 3);
                      break;
                    default:
                      break;
                  }
                  cnprint::CNLogFormatter::FormatGeneral(v14, v75, "#MSR Skip Innovation Testing for %s %s %s with externally set uncertainty %.2f", v76, v79, (const char *)__p, *(float *)(v77 + 168));
                  if (*(char *)(a1 + 231) >= 0)
                    LOBYTE(v142) = v14;
                  else
                    v142 = *(_QWORD *)(a1 + 208);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, &v160, "%s", v137, v138, v139, v140, v141, v142);
                  a4 = v74;
                  if (SHIBYTE(__p[2]) < 0)
                    operator delete(__p[0]);
                  a3 = v73;
                }
              }
              else
              {
                raven::RavenSequentialGNSSMeasurementSelector::DetermineAndSetInnovationTestResult(a1, (uint64_t)(v9 + 2), v27, v26);
              }
              v82 = raven::RavenSequentialGNSSMeasurementSelector::UpdateITRsForMeasurement((uint64_t **)a1, (uint64_t)(v9 + 2));
              switch(*((_DWORD *)v9 + 48))
              {
                case 0:
                  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v82))
                    goto LABEL_123;
                  LOWORD(__p[0]) = 12;
                  LOBYTE(v161) = 0;
                  v83 = v9[3];
                  v84 = sub_18D181C54(v9[2]);
                  v85 = *(_DWORD *)(v9[3] + 96) - 1;
                  v86 = "UnknownType";
                  if (v85 <= 4)
                    v86 = off_1E25CD780[v85];
                  cnprint::CNLogFormatter::FormatGeneral(v14, v83, "#MSR no decision for %s %s", v84, v86);
                  if (*(char *)(a1 + 231) >= 0)
                    LOBYTE(v45) = v14;
                  else
                    v45 = *(_QWORD *)(a1 + 208);
                  goto LABEL_122;
                case 1:
                  LOWORD(__p[0]) = 12;
                  LOBYTE(v161) = 4;
                  v87 = v9[3];
                  v88 = sub_18D181C54(v9[2]);
                  v89 = *(_DWORD *)(v9[3] + 96) - 1;
                  v90 = "UnknownType";
                  if (v89 <= 4)
                    v90 = off_1E25CD780[v89];
                  cnprint::CNLogFormatter::FormatGeneral(v14, v87, "#MSR error for %s %s", v88, v90);
                  if (*(char *)(a1 + 231) >= 0)
                    LOBYTE(v45) = v14;
                  else
                    v45 = *(_QWORD *)(a1 + 208);
                  goto LABEL_122;
                case 2:
                  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v82))
                    goto LABEL_123;
                  LOWORD(__p[0]) = 12;
                  LOBYTE(v161) = 0;
                  v91 = v9[3];
                  v92 = sub_18D181C54(v9[2]);
                  v93 = *(_DWORD *)(v9[3] + 96) - 1;
                  v94 = "UnknownType";
                  if (v93 <= 4)
                    v94 = off_1E25CD780[v93];
                  cnprint::CNLogFormatter::FormatGeneral(v14, v91, "#MSR ignoring %s %s", v92, v94);
                  if (*(char *)(a1 + 231) >= 0)
                    LOBYTE(v45) = v14;
                  else
                    v45 = *(_QWORD *)(a1 + 208);
                  goto LABEL_122;
                case 3:
                  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v82))
                    goto LABEL_123;
                  LOWORD(__p[0]) = 12;
                  LOBYTE(v161) = 0;
                  v95 = v9[3];
                  v96 = sub_18D181C54(v9[2]);
                  v97 = *(_DWORD *)(v9[3] + 96) - 1;
                  v98 = "UnknownType";
                  if (v97 <= 4)
                    v98 = off_1E25CD780[v97];
                  cnprint::CNLogFormatter::FormatGeneral(v14, v95, "#MSR rejecting %s %s", v96, v98);
                  if (*(char *)(a1 + 231) >= 0)
                    LOBYTE(v45) = v14;
                  else
                    v45 = *(_QWORD *)(a1 + 208);
                  goto LABEL_122;
                case 4:
                  if ((_DWORD)a3)
                  {
                    if (*((_BYTE *)v9 + 184))
                      *((_BYTE *)v9 + 184) = 0;
                    *((_DWORD *)v9 + 48) = 0;
                    v99 = raven::RavenSequentialGNSSMeasurementSelector::UpdateITRsForMeasurement((uint64_t **)a1, (uint64_t)(v9 + 2));
                    if (&v162 != (uint64_t **)v9)
                    {
                      v100 = (uint64_t **)v9[1];
                      if (v100 != &v162)
                      {
                        v101 = *v9;
                        *(_QWORD *)(v101 + 8) = v100;
                        *(_QWORD *)v9[1] = v101;
                        v102 = v162;
                        v162[1] = (uint64_t)v9;
                        *v9 = (uint64_t)v102;
                        v9[1] = (uint64_t)&v162;
                        --a2[2];
                        v162 = v9;
                        ++v164;
                      }
                    }
                    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v99))
                    {
                      LOWORD(__p[0]) = 12;
                      LOBYTE(v161) = 0;
                      v103 = v9[3];
                      v104 = sub_18D181C54(v9[2]);
                      v105 = *(_DWORD *)(v9[3] + 96) - 1;
                      v106 = "UnknownType";
                      if (v105 <= 4)
                        v106 = off_1E25CD780[v105];
                      cnprint::CNLogFormatter::FormatGeneral(v14, v103, "#MSR %s %s delaying evaluation", v104, v106);
                      if (*(char *)(a1 + 231) >= 0)
                        LOBYTE(v45) = v14;
                      else
                        v45 = *(_QWORD *)(a1 + 208);
                      goto LABEL_122;
                    }
                  }
                  else
                  {
                    raven::RavenSequentialGNSSMeasurementSelector::ComputeReweightedMeasurementVariance(a1, (uint64_t)(v9 + 2));
                    v9[26] = (uint64_t)v119;
                    *((_BYTE *)v9 + 216) = v120;
                    if (!v120)
                    {
                      LOWORD(__p[0]) = 12;
                      LOBYTE(v161) = 4;
                      v133 = v9[3];
                      v134 = sub_18D181C54(v9[2]);
                      v135 = *(_DWORD *)(v9[3] + 96) - 1;
                      v136 = "UnknownType";
                      if (v135 <= 4)
                        v136 = off_1E25CD780[v135];
                      cnprint::CNLogFormatter::FormatGeneral(v14, v133, "#MSR %s %s could not be re-weighted", v134, v136);
                      if (*(char *)(a1 + 231) >= 0)
                        LOBYTE(v45) = v14;
                      else
                        v45 = *(_QWORD *)(a1 + 208);
                      goto LABEL_122;
                    }
                    if (!cnprint::CNPrinter::GetLogLevel(v119))
                    {
                      v121 = a3;
                      v122 = a4;
                      LOWORD(__p[0]) = 12;
                      LOBYTE(v161) = 0;
                      v123 = v9[3];
                      v124 = sub_18D181C54(v9[2]);
                      v125 = *(_DWORD *)(v9[3] + 96) - 1;
                      v126 = "UnknownType";
                      if (v125 <= 4)
                        v126 = off_1E25CD780[v125];
                      cnprint::CNLogFormatter::FormatGeneral(v14, v123, "#MSR Re-weighting %s measurement from %s", v124, v126);
                      if (*(char *)(a1 + 231) >= 0)
                        LOBYTE(v132) = v14;
                      else
                        v132 = *(_QWORD *)(a1 + 208);
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v161, "%s", v127, v128, v129, v130, v131, v132);
                      a4 = v122;
                      a3 = v121;
                    }
LABEL_101:
                    __p[3] = (void *)0x100000008;
                    __p[0] = &unk_1E25C86C0;
                    *(_OWORD *)&__p[1] = xmmword_18D319940;
                    __p[4] = &v159;
                    v108 = raven::RavenSequentialGNSSMeasurementSelector::UpdateEstimator(a1, (uint64_t)(v9 + 2));
                    if ((v108 & 1) == 0
                      && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v108) <= 1)
                    {
                      v161 = 12;
                      v160 = 1;
                      v109 = v9[3];
                      v110 = sub_18D181C54(v9[2]);
                      v111 = *(_DWORD *)(v9[3] + 96) - 1;
                      v112 = "UnknownType";
                      if (v111 <= 4)
                        v112 = off_1E25CD780[v111];
                      cnprint::CNLogFormatter::FormatGeneral(v14, v109, "#MSR %s %s could not be used to update estimator", v110, v112);
                      if (*(char *)(a1 + 231) >= 0)
                        LOBYTE(v118) = v14;
                      else
                        v118 = *(_QWORD *)(a1 + 208);
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, &v160, "%s", v113, v114, v115, v116, v117, v118);
                    }
                  }
                  break;
                case 5:
                  v107 = *(float *)(v9[3] + 168);
                  *((double *)v9 + 26) = v107 * v107;
                  *((_BYTE *)v9 + 216) = 1;
                  goto LABEL_101;
                default:
                  goto LABEL_101;
              }
              goto LABEL_123;
            }
            LOWORD(__p[0]) = 12;
            LOBYTE(v161) = 4;
            v61 = sub_18D181C54(*v16);
            v62 = *(_DWORD *)(v9[3] + 96) - 1;
            v63 = "UnknownType";
            if (v62 <= 4)
              v63 = off_1E25CD780[v62];
            cnprint::CNLogFormatter::FormatGeneral(v14, v13, "#MSR %s %s could not determine MSR threshold", v61, v63);
            if (*(char *)(a1 + 231) >= 0)
              LOBYTE(v45) = v14;
            else
              v45 = *(_QWORD *)(a1 + 208);
            break;
        }
      }
      else
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v161) = 4;
        v55 = sub_18D181C54(*v16);
        v56 = *(_DWORD *)(v9[3] + 96) - 1;
        v57 = "UnknownType";
        if (v56 <= 4)
          v57 = off_1E25CD780[v56];
        cnprint::CNLogFormatter::FormatGeneral(v14, v13, "#MSR could not compute innovations from %s %s", v55, v57);
        if (*(char *)(a1 + 231) >= 0)
          LOBYTE(v45) = v14;
        else
          v45 = *(_QWORD *)(a1 + 208);
      }
LABEL_122:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v161, "%s", v40, v41, v42, v43, v44, v45);
      goto LABEL_123;
    }
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)ShouldMeasurementBeUsedToUpdateEstimator))
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v161) = 0;
      v46 = sub_18D181C54(*v16);
      v47 = *(_DWORD *)(v9[3] + 96) - 1;
      v48 = "UnknownType";
      if (v47 <= 4)
        v48 = off_1E25CD780[v47];
      cnprint::CNLogFormatter::FormatGeneral(v14, v13, "#MSR should not use %s %s", v46, v48);
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v54) = v14;
      else
        v54 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v161, "%s", v49, v50, v51, v52, v53, v54);
    }
    v9[24] = 0x200000002;
LABEL_123:
    v9 = v15;
  }
  while (v15 != a2);
  v143 = v164;
  if (!v164)
  {
LABEL_144:
    v148 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_145;
  }
  *a4 = (uint64_t)a4;
  a4[1] = (uint64_t)a4;
  v145 = v162;
  v144 = v163;
  v146 = *v163;
  v146[1] = v162[1];
  *(_QWORD *)v145[1] = v146;
  v147 = (uint64_t *)*a4;
  v147[1] = (uint64_t)v144;
  *v144 = v147;
  *a4 = (uint64_t)v145;
  v145[1] = (uint64_t)a4;
  a4[2] = v143;
  v164 = 0;
  v148 = 1;
LABEL_145:
  *((_BYTE *)a4 + 24) = v148;
  return sub_18D1C5494(&v162);
}

void sub_18D2A6A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  sub_18D1C5494((_QWORD *)(v32 - 160));
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::ReTestInnovationsAndUpdateEstimator(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6[3];
  char v7;

  raven::RavenSequentialGNSSMeasurementSelector::TestInnovationsAndUpdateEstimator(a1, a2, 0, v6);
  if (v7)
    sub_18D1C5494(v6);
  return sub_18D2637F0((uint64_t)a3, a3, a2);
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::SelectMeasurements(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  double v19;
  double *v22;
  uint64_t v23;
  double *v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t *v108[3];
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;

  sub_18D1C5494(a3);
  if (*(_BYTE *)(a4 + 8))
    *(_BYTE *)(a4 + 8) = 0;
  if (!*(_BYTE *)a1)
  {
    LOWORD(v127) = 12;
    LOBYTE(v124) = 4;
    v34 = a1 - 48;
    v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v131 = v35;
    cnprint::CNLogFormatter::FormatGeneral(a1 + 208, (uint64_t)&v130, "#MSR selector not configured");
LABEL_36:
    if (*(char *)(a1 + 231) >= 0)
      LOBYTE(v42) = v34;
    else
      v42 = *(_QWORD *)(a1 + 208);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v127, (unsigned __int8 *)&v124, "%s", v36, v37, v38, v39, v40, v42);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 1))
  {
    LOWORD(v127) = 12;
    LOBYTE(v124) = 4;
    v34 = a1 - 48;
    v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v131 = v41;
    cnprint::CNLogFormatter::FormatGeneral(a1 + 208, (uint64_t)&v130, "#MSR selector uninitialized");
    goto LABEL_36;
  }
  v8 = *(_QWORD *)(a1 + 192);
  v9 = *(unsigned __int8 *)(v8 + 3753);
  v10 = *(uint64_t **)(v8 + 64);
  v107 = a4;
  if (!v10)
    goto LABEL_42;
  v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v128 = *(uint64_t **)&v11;
  *(double *)v17.i64 = v11;
  *(double *)v18.i64 = v11 + (double)v127;
  v19 = fabs(*(double *)v18.i64);
  if ((unint64_t)(*(_QWORD *)&v19 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(_QWORD *)&v19 - 1) >= 0xFFFFFFFFFFFFFLL
    && COERCE__INT64(v11 + (double)v127) != 0)
  {
    LOWORD(v130) = 12;
    LOBYTE(v124) = 4;
    v44 = "Cannot find GMAT data capture: Invalid desired time supplied";
LABEL_41:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v130, (unsigned __int8 *)&v124, v44, v12, v13, v14, v15, v16, v106);
    goto LABEL_42;
  }
  v23 = *v10;
  v22 = (double *)v10[1];
  if ((double *)*v10 == v22)
  {
    LOWORD(v130) = 12;
    LOBYTE(v124) = 4;
    v44 = "Cannot find GMAT data capture: GMAT data capture container is empty";
    goto LABEL_41;
  }
  v24 = (double *)v10[3];
  if (v24 != v22)
  {
    v25 = sub_18D03F608(v24, (double *)&v127);
    v26 = 3;
    if (v25)
      v26 = 0;
    v23 = v10[v26];
    v22 = (double *)v10[1];
  }
  if ((double *)v23 != v22)
  {
    for (i = v23; ; i += 144)
    {
      v28 = CNTimeSpan::operator-(v23, &v127, v18, v17);
      v30 = v28;
      v130 = v28;
      v131 = *(uint64_t **)&v29;
      v31 = v29;
      if (v28 < 0 || (*(double *)v18.i64 = v29, v29 < 0.0))
      {
        v28 = CNTimeSpan::operator-((double *)&v130, v18, v17);
        v18.i64[0] = v32;
        if (v28)
        {
LABEL_24:
          if (v28 < 0)
            goto LABEL_93;
          goto LABEL_28;
        }
      }
      else if (v28)
      {
        goto LABEL_24;
      }
      if (*(double *)v18.i64 <= 0.5)
      {
LABEL_93:
        v10[3] = i;
        v33 = v23;
        goto LABEL_43;
      }
LABEL_28:
      v23 += 144;
      v33 = 0;
      if (v30)
      {
        if (v30 > 0)
          goto LABEL_43;
      }
      else if (v31 > 0.5)
      {
        goto LABEL_43;
      }
      if ((double *)v23 == v22)
        goto LABEL_43;
    }
  }
LABEL_42:
  v33 = 0;
LABEL_43:
  raven::RavenSequentialGNSSMeasurementSelector::LogEpochHeader(a1);
  v130 = (uint64_t)&v130;
  v131 = &v130;
  v132 = 0;
  v127 = (uint64_t)&v127;
  v128 = &v127;
  v129 = 0;
  raven::RavenSequentialGNSSMeasurementSelector::PrefilterGNSSMeasurementsAsUseOrNotUse((_QWORD *)a1, a2, &v130, &v127, v33);
  raven::RavenSequentialGNSSMeasurementSelector::ComputeMeasurementFunctionOutput(a1, (uint64_t)&v130);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 192) + 3818)
    && v129
    && raven::RavenSequentialGNSSMeasurementSelector::ShouldLowPLOSMeasurementsBeConsideredInEstimator(a1, (uint64_t)&v130))
  {
    raven::RavenSequentialGNSSMeasurementSelector::GetUsableLowPLOSMeasurements(a1, (uint64_t)&v127, (uint64_t *)&v124);
    if (v126)
    {
      raven::RavenSequentialGNSSMeasurementSelector::ComputeMeasurementFunctionOutput(a1, (uint64_t)&v124);
      v45 = v126;
      if (v126)
      {
        v47 = (uint64_t)v124;
        v46 = v125;
        v48 = *v125;
        *(_QWORD *)(v48 + 8) = v124[1];
        **(_QWORD **)(v47 + 8) = v48;
        v49 = v130;
        *(_QWORD *)(v130 + 8) = v46;
        *v46 = v49;
        *(_QWORD *)(v47 + 8) = &v130;
        v130 = v47;
        v132 += v45;
        v126 = 0;
      }
    }
    sub_18D1C5494(&v124);
  }
  if (v9)
    raven::RavenSequentialGNSSMeasurementSelector::ComputeMeasurementFunctionOutput(a1, (uint64_t)&v127);
  raven::RavenSequentialGNSSMeasurementSelector::CheckForAndHandleGrossClockOffsetError(a1, (uint64_t)&v130);
  v124 = &v124;
  v125 = (uint64_t *)&v124;
  v126 = 0;
  v121 = &v121;
  v122 = (uint64_t *)&v121;
  v123 = 0;
  v118 = &v118;
  v119 = (uint64_t *)&v118;
  v120 = 0;
  v115 = &v115;
  v116 = (uint64_t *)&v115;
  v117 = 0;
  v112 = &v112;
  v113 = (uint64_t *)&v112;
  v114 = 0;
  v109 = &v109;
  v110 = (uint64_t *)&v109;
  v111 = 0;
  v50 = v131;
  if (v131 != &v130)
  {
    while (1)
    {
      v51 = (uint64_t)(v50 + 2);
      v52 = v50[3];
      v53 = *(unsigned __int8 *)(v52 + 189);
      v54 = *(unsigned __int8 *)(v52 + 100);
      if (v54 > 9 || ((1 << v54) & 0x2BB) == 0)
        break;
      if (!*((_BYTE *)v50 + 200))
      {
        if (v53 != 1 && (v54 != 5 || !*(_BYTE *)(*(_QWORD *)(a1 + 192) + 640)))
        {
          *((_WORD *)v50 + 112) = 2;
          v63 = sub_18D2AA9F0(v51);
          v64 = (uint64_t)v118;
          *v63 = v118;
          v63[1] = &v118;
          *(_QWORD *)(v64 + 8) = v63;
          v118 = v63;
          v58 = &v120;
          goto LABEL_66;
        }
LABEL_62:
        *((_WORD *)v50 + 112) = 4;
        v59 = sub_18D2AA9F0(v51);
        v60 = (uint64_t)v115;
        *v59 = v115;
        v59[1] = &v115;
        *(_QWORD *)(v60 + 8) = v59;
        v115 = v59;
        v58 = &v117;
        goto LABEL_66;
      }
      *((_WORD *)v50 + 112) = 6;
      v56 = sub_18D2AA9F0(v51);
      v57 = (uint64_t)v109;
      *v56 = v109;
      v56[1] = &v109;
      *(_QWORD *)(v57 + 8) = v56;
      v109 = v56;
      v58 = &v111;
LABEL_66:
      ++*v58;
      v50 = (uint64_t *)v50[1];
      if (v50 == &v130)
        goto LABEL_72;
    }
    if (*((_BYTE *)v50 + 200))
    {
      *((_WORD *)v50 + 112) = 5;
      v61 = sub_18D2AA9F0(v51);
      v62 = (uint64_t)v112;
      *v61 = v112;
      v61[1] = &v112;
      *(_QWORD *)(v62 + 8) = v61;
      v112 = v61;
      v58 = &v114;
      goto LABEL_66;
    }
    if (v54 != 10)
    {
      if (v53 == 1)
      {
        *((_WORD *)v50 + 112) = 3;
        v65 = sub_18D2AA9F0(v51);
        v66 = (uint64_t)v121;
        *v65 = v121;
        v65[1] = &v121;
        *(_QWORD *)(v66 + 8) = v65;
        v121 = v65;
        v58 = &v123;
      }
      else
      {
        *((_WORD *)v50 + 112) = 1;
        v67 = sub_18D2AA9F0(v51);
        v68 = (uint64_t)v124;
        *v67 = v124;
        v67[1] = &v124;
        *(_QWORD *)(v68 + 8) = v67;
        v124 = v67;
        v58 = &v126;
      }
      goto LABEL_66;
    }
    goto LABEL_62;
  }
LABEL_72:
  v69 = (uint64_t *)operator new(0x20uLL);
  v108[1] = v69 + 4;
  v108[2] = v69 + 4;
  *v69 = (uint64_t)&v124;
  v69[1] = (uint64_t)&v118;
  v69[2] = (uint64_t)&v121;
  v69[3] = (uint64_t)&v115;
  v108[0] = v69;
  raven::RavenSequentialGNSSMeasurementSelector::EnsureFirstPseudorangeAprioriInnovationIsAnInlier(a1, v108);
  operator delete(v69);
  raven::RavenSequentialGNSSMeasurementSelector::ProcessMSRDataContainer(a1, (uint64_t *)&v124);
  raven::RavenSequentialGNSSMeasurementSelector::ProcessMSRDataContainer(a1, (uint64_t *)&v118);
  raven::RavenSequentialGNSSMeasurementSelector::ProcessMSRDataContainer(a1, (uint64_t *)&v121);
  raven::RavenSequentialGNSSMeasurementSelector::ProcessMSRDataContainer(a1, (uint64_t *)&v115);
  raven::RavenSequentialGNSSMeasurementSelector::ProcessMSRDataContainer(a1, (uint64_t *)&v112);
  raven::RavenSequentialGNSSMeasurementSelector::ProcessMSRDataContainer(a1, (uint64_t *)&v109);
  v70 = v126;
  if (v126)
  {
    v72 = (uint64_t)v124;
    v71 = v125;
    v73 = *v125;
    *(_QWORD *)(v73 + 8) = v124[1];
    **(_QWORD **)(v72 + 8) = v73;
    v74 = *a3;
    *(_QWORD *)(v74 + 8) = v71;
    *v71 = v74;
    *a3 = v72;
    *(_QWORD *)(v72 + 8) = a3;
    a3[2] += v70;
    v126 = 0;
  }
  v75 = v120;
  if (v120)
  {
    v77 = (uint64_t)v118;
    v76 = v119;
    v78 = *v119;
    *(_QWORD *)(v78 + 8) = v118[1];
    **(_QWORD **)(v77 + 8) = v78;
    v79 = *a3;
    *(_QWORD *)(v79 + 8) = v76;
    *v76 = v79;
    *a3 = v77;
    *(_QWORD *)(v77 + 8) = a3;
    a3[2] += v75;
    v120 = 0;
  }
  v80 = v123;
  if (v123)
  {
    v82 = (uint64_t)v121;
    v81 = v122;
    v83 = *v122;
    *(_QWORD *)(v83 + 8) = v121[1];
    **(_QWORD **)(v82 + 8) = v83;
    v84 = *a3;
    *(_QWORD *)(v84 + 8) = v81;
    *v81 = v84;
    *a3 = v82;
    *(_QWORD *)(v82 + 8) = a3;
    a3[2] += v80;
    v123 = 0;
  }
  v85 = v117;
  if (v117)
  {
    v87 = (uint64_t)v115;
    v86 = v116;
    v88 = *v116;
    *(_QWORD *)(v88 + 8) = v115[1];
    **(_QWORD **)(v87 + 8) = v88;
    v89 = *a3;
    *(_QWORD *)(v89 + 8) = v86;
    *v86 = v89;
    *a3 = v87;
    *(_QWORD *)(v87 + 8) = a3;
    a3[2] += v85;
    v117 = 0;
  }
  v90 = v114;
  if (v114)
  {
    v92 = (uint64_t)v112;
    v91 = v113;
    v93 = *v113;
    *(_QWORD *)(v93 + 8) = v112[1];
    **(_QWORD **)(v92 + 8) = v93;
    v94 = *a3;
    *(_QWORD *)(v94 + 8) = v91;
    *v91 = v94;
    *a3 = v92;
    *(_QWORD *)(v92 + 8) = a3;
    a3[2] += v90;
    v114 = 0;
  }
  v95 = v111;
  if (v111)
  {
    v97 = (uint64_t)v109;
    v96 = v110;
    v98 = *v110;
    *(_QWORD *)(v98 + 8) = v109[1];
    **(_QWORD **)(v97 + 8) = v98;
    v99 = *a3;
    *(_QWORD *)(v99 + 8) = v96;
    *v96 = v99;
    *a3 = v97;
    *(_QWORD *)(v97 + 8) = a3;
    a3[2] += v95;
    v111 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 641))
  {
    v100 = raven::RavenSequentialGNSSMeasurementSelector::Count_L1_L5_PseudorangesWithSimilarITRAndPostFilter_L1_vs_L5_Measurements((uint64_t **)a1, (uint64_t)a3);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 641))
      raven::RavenSequentialGNSSMeasurementSelector::ReduceNumberOfLowPLOSMeasurementsForL5SupportingHardware((uint64_t)v100, (uint64_t)a3);
  }
  if (v9)
  {
    v101 = v129;
    if (v129)
    {
      v103 = v127;
      v102 = v128;
      v104 = *v128;
      *(_QWORD *)(v104 + 8) = *(_QWORD *)(v127 + 8);
      **(_QWORD **)(v103 + 8) = v104;
      v105 = *a3;
      *(_QWORD *)(v105 + 8) = v102;
      *v102 = v105;
      *a3 = v103;
      *(_QWORD *)(v103 + 8) = a3;
      a3[2] += v101;
      v129 = 0;
    }
  }
  raven::RavenSequentialGNSSMeasurementSelector::ComputeHorizontalPositionMisclosureAndHDOP(a1, (uint64_t)a3);
  raven::RavenSequentialGNSSMeasurementSelector::UpdateITRCounts((cnprint::CNPrinter *)a1, (uint64_t)a3);
  if (*(_BYTE *)(a1 + 80))
  {
    *(double *)v107 = *(double *)(a1 + 72) * 0.000001;
    *(_BYTE *)(v107 + 8) = 1;
  }
  raven::RavenSequentialGNSSMeasurementSelector::LogMSRData(a1, (uint64_t)a3);
  raven::RavenSequentialGNSSMeasurementSelector::LogEpochFooter(a1, (uint64_t)a3, v33);
  sub_18D1C5494(&v109);
  sub_18D1C5494(&v112);
  sub_18D1C5494(&v115);
  sub_18D1C5494(&v118);
  sub_18D1C5494(&v121);
  sub_18D1C5494(&v124);
  sub_18D1C5494(&v127);
  sub_18D1C5494(&v130);
  return 1;
}

void sub_18D2A73B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D1C5494((_QWORD *)(v1 - 176));
  sub_18D1C5494((_QWORD *)(v1 - 152));
  sub_18D1C5494((_QWORD *)(v1 - 128));
  _Unwind_Resume(a1);
}

BOOL raven::RavenSequentialGNSSMeasurementSelector::ShouldLowPLOSMeasurementsBeConsideredInEstimator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 result;
  double v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 192);
  if (!*(_BYTE *)(v2 + 2392) || !*(_BYTE *)(a1 + 1272))
    return 0;
  if (!*(_BYTE *)(a1 + 88))
    return 1;
  if (*(_DWORD *)(a1 + 2088))
    return 0;
  v4 = *(_DWORD *)(a1 + 2080);
  if (v4 > 0x14)
    return 0;
  v5 = *(_DWORD *)(a1 + 2084);
  if (v5 > 0x14)
    return 0;
  result = 1;
  if (v4 >= 4 && v5 >= 4)
  {
    v7 = COERCE_DOUBLE(sub_18D2A8140(a2, *(double *)(v2 + 2240)));
    return v8 && *(double *)(*(_QWORD *)(a1 + 192) + 2448) <= v7;
  }
  return result;
}

uint64_t **raven::RavenSequentialGNSSMeasurementSelector::Count_L1_L5_PseudorangesWithSimilarITRAndPostFilter_L1_vs_L5_Measurements(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v32;
  double v33;
  double v34;

  result[305] = 0;
  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v4 = result;
    while (1)
    {
      v5 = v2;
      v6 = v2 + 16;
      v7 = *(_QWORD *)(v2 + 16);
      v2 = *(_QWORD *)(v2 + 8);
      v8 = *(unsigned __int8 *)(v7 + 24);
      if ((v8 - 3) < 4 || v8 == 1)
      {
        v10 = *(_DWORD *)(v5 + 192);
        if (v10 >= 3)
        {
          if (v10 == 3)
          {
            v11 = *(_QWORD *)(v5 + 24);
            if (*(_DWORD *)(v11 + 96) != 1)
              goto LABEL_45;
            v12 = 1;
          }
          else
          {
            v11 = *(_QWORD *)(v5 + 24);
            v12 = *(_DWORD *)(v11 + 96);
          }
          v13 = *(unsigned __int8 *)(v11 + 100) - 2;
          v14 = v13 > 8 ? 2 : byte_18D33909B[(char)v13];
          if (v2 != a2)
            break;
        }
      }
LABEL_45:
      if (v2 == a2)
        return result;
    }
    v15 = v12 - 2;
    if ((v12 - 2) < 3)
      v12 = 2;
    v16 = v2;
    while (1)
    {
      v17 = *(_DWORD *)(v16 + 192);
      if (v17 < 3 || v17 == 3 && *(_DWORD *)(*(_QWORD *)(v16 + 24) + 96) != 1)
        goto LABEL_44;
      v18 = *(_QWORD *)(v16 + 16);
      if (*(unsigned __int8 *)(v18 + 24) != v8 || *(_DWORD *)(v18 + 28) != *(_DWORD *)(v7 + 28))
        goto LABEL_44;
      v19 = *(_QWORD *)(v16 + 24);
      v20 = *(_DWORD *)(v19 + 96);
      result = (uint64_t **)(v20 - 2);
      if (result < 3)
        v20 = 2;
      if (v20 != v12)
        goto LABEL_44;
      result = (uint64_t **)*(unsigned __int8 *)(v19 + 100);
      v21 = 1;
      if (result <= 0xA)
      {
        if (((1 << (char)result) & 0x544) != 0)
        {
          v21 = 2;
        }
        else if (!*(_BYTE *)(v19 + 100))
        {
          goto LABEL_44;
        }
      }
      if (v21 == v14)
      {
        if (v10 == 3 || v17 == 3)
        {
          if (v10 == 3 && v17 == 3)
            ++*((_DWORD *)v4 + 611);
        }
        else if ((*(_QWORD *)(v11 + 120) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
               && *(_BYTE *)(v5 + 160)
               && (*(_QWORD *)(v19 + 120) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
               && *(_BYTE *)(v16 + 160))
        {
          v22 = v4[24];
          if (v15 >= 3)
            v23 = 264;
          else
            v23 = 265;
          if (*((_BYTE *)v22 + 3793)
            && (v24 = *(double *)(v11 + 120) - *(double *)(v5 + 48),
                v25 = *(double *)(v19 + 120) - *(double *)(v16 + 48),
                v26 = *(double *)&v22[v23],
                vabdd_f64(v25, v24) > v26))
          {
            v27 = v26 * *((double *)v22 + 266);
            v28 = fabs(v25);
            v29 = fabs(v24);
            if (v28 <= v27 && v29 > v26)
            {
              *(_QWORD *)(v5 + 192) = 0x700000003;
              goto LABEL_69;
            }
            if (v28 <= v26 || v29 > v27)
            {
              *(_QWORD *)(v5 + 192) = 0x700000003;
              *(_QWORD *)(v16 + 192) = 0x700000003;
              raven::RavenSequentialGNSSMeasurementSelector::UpdateITRsForMeasurement(v4, v6);
            }
            else
            {
              *(_QWORD *)(v16 + 192) = 0x700000003;
            }
LABEL_68:
            v6 = v16 + 16;
LABEL_69:
            result = raven::RavenSequentialGNSSMeasurementSelector::UpdateITRsForMeasurement(v4, v6);
            v11 = *(_QWORD *)(v5 + 24);
          }
          else if (*((_BYTE *)v22 + 3794) && *(_BYTE *)(v5 + 216) && *(_BYTE *)(v16 + 216))
          {
            v32 = *(double *)(v16 + 208);
            v33 = *((double *)v4 + 149);
            v34 = *(double *)(v5 + 208);
            if (v32 > v33 * v34)
            {
              *(_QWORD *)(v16 + 192) = 0x300000002;
              goto LABEL_68;
            }
            if (v34 > v32 * v33)
            {
              *(_QWORD *)(v5 + 192) = 0x300000002;
              goto LABEL_69;
            }
          }
          if (*(_DWORD *)(v11 + 96) == 1
            && (*(_DWORD *)(v5 + 192) & 0xFFFFFFFE) == 4
            && (*(_DWORD *)(v16 + 192) & 0xFFFFFFFE) == 4)
          {
            ++*((_DWORD *)v4 + 610);
          }
          goto LABEL_45;
        }
      }
LABEL_44:
      v16 = *(_QWORD *)(v16 + 8);
      if (v16 == a2)
        goto LABEL_45;
    }
  }
  return result;
}

void raven::RavenSequentialGNSSMeasurementSelector::ReduceNumberOfLowPLOSMeasurementsForL5SupportingHardware(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 8);
      if ((*(_DWORD *)(v7 + 192) & 0xFFFFFFFE) == 4)
      {
        v8 = *(_QWORD *)(v7 + 24);
        v9 = *(_DWORD *)(v8 + 96);
        if (*(_BYTE *)(v7 + 200))
        {
          if (v9 == 4)
            ++v5;
          v10 = *(_QWORD *)(v7 + 16);
          v11 = *(unsigned __int8 *)(v10 + 24);
          if ((v11 - 3) < 4 || v11 == 1)
          {
            v13 = *(unsigned __int8 *)(v8 + 100);
            v14 = v13 - 2 > 8 ? 2 : byte_18D33909B[(char)(v13 - 2)];
            if (v6 != a2)
            {
              if ((v9 - 2) >= 3)
                v15 = v9;
              else
                v15 = 2;
              if (v9 == 4)
                v16 = -1;
              else
                v16 = 0;
              v17 = v6;
              do
              {
                v18 = *(_QWORD *)(v17 + 16);
                if (*(unsigned __int8 *)(v18 + 24) == v11
                  && *(_DWORD *)(v18 + 28) == *(_DWORD *)(v10 + 28)
                  && *(_BYTE *)(v17 + 200)
                  && (*(_DWORD *)(v17 + 192) & 0xFFFFFFFE) == 4)
                {
                  v19 = *(_QWORD *)(v17 + 24);
                  v20 = *(unsigned __int8 *)(v19 + 100);
                  v21 = 1;
                  if (v20 > 0xA)
                    goto LABEL_33;
                  if (((1 << v20) & 0x544) != 0)
                  {
                    v21 = 2;
LABEL_33:
                    if (v21 == v14)
                    {
                      v22 = *(_DWORD *)(v19 + 96);
                      if ((v22 - 2) < 3)
                        v22 = 2;
                      if (v22 == v15)
                      {
                        if (*(_BYTE *)(v7 + 200) && (v13 > 9 || ((1 << v13) & 0x2BB) == 0))
                        {
                          *(_QWORD *)(v17 + 192) = 0x100000002;
                          *(_BYTE *)(v17 + 200) = 0;
                        }
                        else
                        {
                          v23 = v20 > 9;
                          v24 = (1 << v20) & 0x2BB;
                          if (v23 || v24 == 0)
                          {
                            *(_QWORD *)(v7 + 192) = 0x100000002;
                            *(_BYTE *)(v7 + 200) = 0;
                            v5 += v16;
                          }
                        }
                      }
                    }
                    goto LABEL_47;
                  }
                  if (*(_BYTE *)(v19 + 100))
                    goto LABEL_33;
                }
LABEL_47:
                v17 = *(_QWORD *)(v17 + 8);
              }
              while (v17 != a2);
            }
          }
        }
        else if (v9 == 1)
        {
          ++v3;
        }
        else
        {
          ++v4;
        }
      }
    }
    while (v6 != a2);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    do
    {
      if (!*(_BYTE *)(v2 + 200) || (*(_DWORD *)(v2 + 192) & 0xFFFFFFFE) != 4)
        goto LABEL_66;
      v29 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 96);
      if ((v29 - 2) < 2)
      {
        if ((++v27 + v5) <= 4 && (v27 + v5 + v4) < 0xB)
          goto LABEL_66;
LABEL_65:
        *(_QWORD *)(v2 + 192) = 0x100000002;
        *(_BYTE *)(v2 + 200) = 0;
        goto LABEL_66;
      }
      if (v29 == 4)
      {
        if (++v26 > 4)
          goto LABEL_65;
        v30 = v26 + v4;
      }
      else
      {
        if (v29 != 1)
          goto LABEL_66;
        if (++v28 > 4)
          goto LABEL_65;
        v30 = v28 + v3;
      }
      if (v30 > 0xA)
        goto LABEL_65;
LABEL_66:
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void raven::RavenSequentialGNSSMeasurementSelector::UpdateITRCounts(cnprint::CNPrinter *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t *v38;
  int v39;
  _QWORD *v40;
  uint64_t *v41;
  void *v42;
  const char *v44;
  uint64_t v45;
  unsigned int v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  cnprint::CNPrinter *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  unsigned __int8 v59;
  _QWORD v60[2];
  char v61;

  v54 = a1;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == a2)
    return;
  v55 = (uint64_t)a1 + 1424;
  v56 = (_DWORD *)((char *)a1 + 1384);
  v57 = (uint64_t)a1 + 1464;
  v58 = (_DWORD *)((char *)a1 + 1344);
  do
  {
    v5 = *(_QWORD *)(v3 + 24);
    v6 = *(unsigned __int8 *)(v5 + 100);
    v7 = v58;
    if (v6 <= 0xA)
    {
      if (((1 << v6) & 0x544) != 0)
      {
        v7 = v56;
      }
      else
      {
        v7 = v58;
        if (!*(_BYTE *)(v5 + 100))
        {
          if (!cnprint::CNPrinter::GetLogLevel(a1))
          {
            LOWORD(v60[0]) = 12;
            v59 = 0;
            v44 = sub_18D181C54(*(_QWORD *)(v3 + 16));
            v45 = *(_QWORD *)(v3 + 24);
            v46 = *(_DWORD *)(v45 + 96) - 1;
            if (v46 > 4)
              v47 = "UnknownType";
            else
              v47 = off_1E25CD780[v46];
            cnprint::CNLogFormatter::FormatGeneral((uint64_t)v54 + 208, (uint64_t)v54 + 96, "#MSR %s %s unsupported band family, %d", v44, v47, *(unsigned __int8 *)(v45 + 100));
            if (*((char *)v54 + 231) >= 0)
              LOBYTE(v53) = (_BYTE)v54 - 48;
            else
              v53 = *((_QWORD *)v54 + 26);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v60, &v59, "%s", v48, v49, v50, v51, v52, v53);
          }
          return;
        }
      }
    }
    if (*(_QWORD *)(*(_QWORD *)(v3 + 16) + 312))
    {
      v8 = sub_18D2AAAB4(v55, *(_DWORD *)(v5 + 96), (_DWORD *)(v5 + 96)) + 3;
      v2 = *(unsigned int *)(v3 + 192);
      if (sub_18D2AAF1C(v8, *(_DWORD *)(v3 + 192)))
      {
        v9 = sub_18D2AB3D8((uint64_t)v8, v2, (_DWORD *)(v3 + 192));
        ++*((_DWORD *)v9 + 5);
      }
      else
      {
        sub_18D2AAFD0((uint64_t)v8, v2, v2, 1);
      }
    }
    v10 = *(_QWORD *)(v3 + 16);
    v11 = *(unsigned __int8 *)(v10 + 24);
    v12 = *((_QWORD *)v7 + 1);
    if (v12)
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v2 = *(unsigned __int8 *)(v10 + 24);
        if (v12 <= v11)
          v2 = v11 % v12;
      }
      else
      {
        v2 = ((_DWORD)v12 - 1) & v11;
      }
      v14 = *(uint64_t ***)(*(_QWORD *)v7 + 8 * v2);
      if (v14)
      {
        for (i = *v14; i; i = (uint64_t *)*i)
        {
          v16 = i[1];
          if (v16 == v11)
          {
            if (*((unsigned __int8 *)i + 16) == (_DWORD)v11)
              goto LABEL_84;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12)
                v16 %= v12;
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v2)
              break;
          }
        }
      }
    }
    v17 = v7 + 4;
    v18 = (char *)operator new(0x40uLL);
    v60[0] = v18;
    v60[1] = v7 + 4;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = v11;
    v18[16] = *(_BYTE *)(v10 + 24);
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *((_DWORD *)v18 + 14) = 1065353216;
    v61 = 1;
    v19 = (float)(unint64_t)(*((_QWORD *)v7 + 3) + 1);
    v20 = *((float *)v7 + 8);
    if (v12 && (float)(v20 * (float)v12) >= v19)
    {
      v11 = v2;
      goto LABEL_74;
    }
    v21 = (v12 & (v12 - 1)) != 0;
    if (v12 < 3)
      v21 = 1;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v12 = *((_QWORD *)v7 + 1);
    }
    if (*(_QWORD *)&prime <= v12)
    {
      if (*(_QWORD *)&prime >= v12)
        goto LABEL_70;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)v7 + 3) / *((float *)v7 + 8));
      if (v12 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v12)
      {
        v12 = *((_QWORD *)v7 + 1);
        goto LABEL_70;
      }
      if (!*(_QWORD *)&prime)
      {
        v42 = *(void **)v7;
        *(_QWORD *)v7 = 0;
        if (v42)
          operator delete(v42);
        v12 = 0;
        *((_QWORD *)v7 + 1) = 0;
        goto LABEL_70;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      sub_18D0788A0();
    v25 = operator new(8 * *(_QWORD *)&prime);
    v26 = *(void **)v7;
    *(_QWORD *)v7 = v25;
    if (v26)
      operator delete(v26);
    v27 = 0;
    *((int8x8_t *)v7 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)v7 + 8 * v27++) = 0;
    while (*(_QWORD *)&prime != v27);
    v28 = (_QWORD *)*v17;
    if (*v17)
    {
      v29 = v28[1];
      v30 = (uint8x8_t)vcnt_s8(prime);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.u32[0] > 1uLL)
      {
        if (v29 >= *(_QWORD *)&prime)
          v29 %= *(_QWORD *)&prime;
      }
      else
      {
        v29 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)v7 + 8 * v29) = v17;
      v34 = (_QWORD *)*v28;
      if (*v28)
      {
        do
        {
          v35 = v34[1];
          if (v30.u32[0] > 1uLL)
          {
            if (v35 >= *(_QWORD *)&prime)
              v35 %= *(_QWORD *)&prime;
          }
          else
          {
            v35 &= *(_QWORD *)&prime - 1;
          }
          if (v35 != v29)
          {
            if (!*(_QWORD *)(*(_QWORD *)v7 + 8 * v35))
            {
              *(_QWORD *)(*(_QWORD *)v7 + 8 * v35) = v28;
              goto LABEL_66;
            }
            *v28 = *v34;
            *v34 = **(_QWORD **)(*(_QWORD *)v7 + 8 * v35);
            **(_QWORD **)(*(_QWORD *)v7 + 8 * v35) = v34;
            v34 = v28;
          }
          v35 = v29;
LABEL_66:
          v28 = v34;
          v34 = (_QWORD *)*v34;
          v29 = v35;
        }
        while (v34);
      }
    }
    v12 = (unint64_t)prime;
LABEL_70:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v11)
        v11 %= v12;
    }
    else
    {
      v11 = ((_DWORD)v12 - 1) & v11;
    }
LABEL_74:
    v36 = *(_QWORD **)(*(_QWORD *)v7 + 8 * v11);
    i = (uint64_t *)v60[0];
    if (v36)
    {
      *(_QWORD *)v60[0] = *v36;
LABEL_82:
      *v36 = i;
      goto LABEL_83;
    }
    *(_QWORD *)v60[0] = *((_QWORD *)v7 + 2);
    *((_QWORD *)v7 + 2) = i;
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v11) = v17;
    if (*i)
    {
      v37 = *(_QWORD *)(*i + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v37 >= v12)
          v37 %= v12;
      }
      else
      {
        v37 &= v12 - 1;
      }
      v36 = (_QWORD *)(*(_QWORD *)v7 + 8 * v37);
      goto LABEL_82;
    }
LABEL_83:
    v60[0] = 0;
    ++*((_QWORD *)v7 + 3);
    sub_18D2AB5E4((uint64_t)v60);
LABEL_84:
    v38 = sub_18D2AAAB4((uint64_t)(i + 3), *(_DWORD *)(*(_QWORD *)(v3 + 24) + 96), (_DWORD *)(*(_QWORD *)(v3 + 24) + 96))+ 3;
    v39 = *(_DWORD *)(v3 + 192);
    if (sub_18D2AAF1C(v38, v39))
    {
      v40 = sub_18D2AB3D8((uint64_t)v38, v39, (_DWORD *)(v3 + 192));
      ++*((_DWORD *)v40 + 5);
    }
    else
    {
      sub_18D2AAFD0((uint64_t)v38, v39, v39, 1);
    }
    v41 = sub_18D2AAAB4(v57, *(_DWORD *)(*(_QWORD *)(v3 + 24) + 96), (_DWORD *)(*(_QWORD *)(v3 + 24) + 96)) + 3;
    v2 = *(unsigned int *)(v3 + 192);
    if (sub_18D2AAF1C(v41, *(_DWORD *)(v3 + 192)))
    {
      a1 = (cnprint::CNPrinter *)sub_18D2AB3D8((uint64_t)v41, v2, (_DWORD *)(v3 + 192));
      ++*((_DWORD *)a1 + 5);
    }
    else
    {
      sub_18D2AAFD0((uint64_t)v41, v2, v2, 1);
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != a2);
}

void sub_18D2A80C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_18D2AB5E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **raven::RavenSequentialGNSSMeasurementSelector::UpdateITRsForMeasurement(uint64_t **result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t **v6;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96);
  if ((v2 - 2) >= 3)
  {
    if (v2 != 1)
      return result;
    v4 = a2 + 16;
    v3 = *(_DWORD *)(a2 + 16);
    v5 = *(_DWORD *)(v4 + 160);
    v6 = result + 153;
  }
  else
  {
    v4 = a2 + 16;
    v3 = *(_DWORD *)(a2 + 16);
    v5 = *(_DWORD *)(v4 + 160);
    v6 = result + 150;
  }
  result = sub_18D2AB628(v6, v3, *(uint64_t **)(v4 + 8), (_OWORD *)v4);
  *((_DWORD *)result + 12) = v5;
  return result;
}

unint64_t sub_18D2A8140(uint64_t a1, double a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unsigned __int8 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v19;
  double v20;
  _BYTE v21[8];
  uint64_t v22;
  char v23;
  void *__p;
  void *v25;
  uint64_t v26;
  char v27;
  _BYTE v28[8];
  uint64_t v29;
  char v30;
  void *v31;
  void *v32;
  uint64_t v33;
  char v34;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  v28[0] = 0;
  v29 = 0;
  v30 = 1;
  sub_18D2144E4((char **)&v31);
  v34 = 1;
  __p = 0;
  v25 = 0;
  v26 = 0;
  v21[0] = 0;
  v22 = 0;
  v23 = 1;
  sub_18D2144E4((char **)&__p);
  v27 = 1;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == a1)
  {
LABEL_22:
    v17 = 0;
    v16 = 0;
    goto LABEL_24;
  }
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(v4 + 24);
    if (*(_DWORD *)(v6 + 96) == 1)
    {
      v7 = *(_QWORD *)(v4 + 16);
      if (*(_BYTE *)(v7 + 304))
      {
        v8 = *(double *)(v7 + 296);
        if (v8 == a2)
          v9 = 0;
        else
          v9 = -127;
        if (v8 > a2)
          v9 = 1;
        if (v8 < a2)
          v9 = -1;
      }
      else
      {
        v9 = -1;
      }
      if ((v9 == 129 || (v9 & 0x80) == 0) && (*(_DWORD *)(v4 + 192) & 0xFFFFFFFE) != 2)
      {
        v20 = *(double *)(v6 + 120) - *(double *)(v4 + 48);
        sub_18D213F5C((uint64_t)v28, (uint64_t *)&v20, 1.0);
        v19 = fabs(v20);
        sub_18D213F5C((uint64_t)v21, (uint64_t *)&v19, 1.0);
        if (++v5 > 9)
          break;
      }
    }
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4 != a1);
  if (v5)
  {
    if (v5 == 1
      || (sub_18D2145A8((uint64_t)v28, 75.0),
          v11 = v10,
          sub_18D2145A8((uint64_t)v28, 25.0),
          v13 = v12,
          sub_18D2145A8((uint64_t)v28, 50.0),
          v11 - v13 > v14 * 0.3))
    {
      sub_18D2145A8((uint64_t)v21, 50.0);
      v16 = v15 & 0xFFFFFFFFFFFFFF00;
      v17 = v15;
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  v17 = 0;
  v16 = 0;
LABEL_24:
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  return v16 | v17;
}

void sub_18D2A8344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

BOOL raven::RavenSequentialGNSSMeasurementSelector::ShouldMeasurementBeUsedToUpdateEstimator(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  unsigned __int8 v21;
  __int16 v22;

  v4 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96);
  if ((v4 - 2) >= 3)
  {
    v11 = v4 == 5 || v4 == 0;
    if (v11 && !cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1))
    {
      v22 = 12;
      v21 = 0;
      v12 = sub_18D181C54(*(_QWORD *)a2);
      cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a1 + 96, "#MSR %s unexpected measurement type %d", v12, *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96));
      if (*(char *)(a1 + 231) >= 0)
        LOBYTE(v18) = a1 - 48;
      else
        v18 = *(_QWORD *)(a1 + 208);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "%s", v13, v14, v15, v16, v17, v18);
    }
    return 1;
  }
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = sub_18D2A9840(a1 + 1200, v5, v6);
  if (a1 + 1208 != v7 && (*(_DWORD *)(v7 + 48) & 0xFFFFFFFE) == 4)
    return 0;
  if (!*(_BYTE *)(a1 + 40))
    return 1;
  v8 = sub_18D2A9840(a1 + 1224, v5, v6);
  if (a1 + 1232 == v8)
    return 0;
  v9 = *(_DWORD *)(v8 + 48);
  if (v9 < 4)
    return 0;
  if (v9 != 4)
    return 1;
  v19 = sub_18D2A9840(a1 + 1248, v5, v6);
  if (a1 + 1256 == v19)
    v20 = 999.0;
  else
    v20 = fabs(*(double *)(v19 + 48));
  return v20 < *(double *)(*(_QWORD *)(a1 + 192) + 1648);
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::StringOfMeasurementCountsByConstellationForFrequency@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *i;
  unint64_t v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *ITRCount;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v40;
  void *__p[2];
  unsigned __int8 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  _QWORD v55[10];
  char v56;
  uint64_t v57;

  sub_18D099F88((uint64_t)&v54);
  v5 = sub_18D076A18(&v54, (uint64_t)"#MSR GNSS measurement counts by constellation,", 46);
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = a1;
  else
    v7 = *(_QWORD *)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = sub_18D076A18(v5, v7, v8);
  v10 = (uint64_t)sub_18D076A18(v9, (uint64_t)",(type,used,rejected)", 21);
  v11 = &byte_18D339050;
  v40 = a2;
  do
  {
    v12 = (int8x8_t)a2[1];
    v13 = *v11;
    if (v12)
    {
      v14 = (uint8x8_t)vcnt_s8(v12);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v15 = *v11;
        if (*(_QWORD *)&v12 <= v13)
          v15 = v13 % *(_QWORD *)&v12;
      }
      else
      {
        v15 = (v12.i32[0] - 1) & v13;
      }
      v16 = *(uint64_t ***)(*a2 + 8 * v15);
      if (v16)
      {
        for (i = *v16; i; i = (uint64_t *)*i)
        {
          v18 = i[1];
          if (v18 == v13)
          {
            if (*((unsigned __int8 *)i + 16) == (_DWORD)v13)
            {
              v26 = i + 3;
              LODWORD(__p[0]) = 3;
              v53 = 5;
              ITRCount = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount(v10, i + 3, (int *)__p, &v53);
              v51 = 4;
              v52 = 3;
              v28 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)ITRCount, v26, &v52, &v51);
              v49 = 5;
              v50 = 2;
              v29 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v28, v26, &v50, &v49);
              v48 = 2;
              v47 = 4;
              v30 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v29, v26, &v48, &v47);
              v45 = 5;
              v46 = 4;
              v31 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v30, v26, &v46, &v45);
              v43 = 4;
              v44 = 4;
              v32 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v31, v26, &v44, &v43);
              LODWORD(__p[0]) = 3;
              v53 = 3;
              v33 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v32, v26, (int *)__p, &v53);
              v51 = 3;
              v52 = 2;
              v34 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v33, v26, &v52, &v51);
              v49 = 3;
              v50 = 4;
              v35 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v34, v26, &v50, &v49);
              LODWORD(__p[0]) = 1;
              v53 = 5;
              v36 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v35, v26, (int *)__p, &v53);
              v51 = 4;
              v52 = 1;
              v37 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v36, v26, &v52, &v51);
              LODWORD(__p[0]) = 1;
              v53 = 3;
              raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v37, v26, (int *)__p, &v53);
              a2 = v40;
              break;
            }
          }
          else
          {
            if (v14.u32[0] > 1uLL)
            {
              if (v18 >= *(_QWORD *)&v12)
                v18 %= *(_QWORD *)&v12;
            }
            else
            {
              v18 &= *(_QWORD *)&v12 - 1;
            }
            if (v18 != v15)
              break;
          }
        }
      }
    }
    v19 = sub_18D076A18(&v54, (uint64_t)",", 1);
    sub_18D0778AC(__p, off_1E25CD748[(char)v13]);
    if ((v42 & 0x80u) == 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    if ((v42 & 0x80u) == 0)
      v21 = v42;
    else
      v21 = (uint64_t)__p[1];
    v22 = sub_18D076A18(v19, (uint64_t)v20, v21);
    sub_18D076A18(v22, (uint64_t)",pr,", 4);
    v23 = (_QWORD *)std::ostream::operator<<();
    sub_18D076A18(v23, (uint64_t)",", 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    sub_18D076A18(v24, (uint64_t)",dop,", 5);
    v25 = (_QWORD *)std::ostream::operator<<();
    sub_18D076A18(v25, (uint64_t)",", 1);
    v10 = std::ostream::operator<<();
    if ((char)v42 < 0)
      operator delete(__p[0]);
    ++v11;
  }
  while (v11 != (char *)&unk_18D339055);
  sub_18D076DE8((uint64_t)v55, a3);
  v54 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v55[-1] + *(_QWORD *)(v54 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v55[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v56 < 0)
    operator delete((void *)v55[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D78B550](&v57);
}

void sub_18D2A8964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_18D09A074((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void raven::RavenSequentialGNSSMeasurementSelector::StringOfL1MeasurementCountsByConstellation(raven::RavenSequentialGNSSMeasurementSelector *this@<X0>, _QWORD *a2@<X8>)
{
  void *__p[2];
  char v5;

  sub_18D0778AC(__p, "L1");
  raven::RavenSequentialGNSSMeasurementSelector::StringOfMeasurementCountsByConstellationForFrequency((uint64_t)__p, (_QWORD *)this + 168, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18D2A8A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *raven::RavenSequentialGNSSMeasurementSelector::GetITRCountForAllBandsAllConstellations(uint64_t a1, int *a2, int *a3)
{
  return raven::RavenSequentialGNSSMeasurementSelector::GetITRCount(a1, (_QWORD *)(a1 + 1464), a2, a3);
}

void raven::RavenSequentialGNSSMeasurementSelector::StringOfL5MeasurementCountsByConstellation(raven::RavenSequentialGNSSMeasurementSelector *this@<X0>, _QWORD *a2@<X8>)
{
  void *__p[2];
  char v5;

  sub_18D0778AC(__p, "L5");
  raven::RavenSequentialGNSSMeasurementSelector::StringOfMeasurementCountsByConstellationForFrequency((uint64_t)__p, (_QWORD *)this + 173, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18D2A8AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCountsForRayTracedMeasurements@<X0>(raven::RavenSequentialGNSSMeasurementSelector *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *ITRCount;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD v28[10];
  char v29;
  uint64_t v30;

  sub_18D099F88((uint64_t)&v27);
  sub_18D076A18(&v27, (uint64_t)"#MSR ray traced GNSS measurement counts (accept,reject,reweight)", 64);
  v26 = 1;
  v4 = sub_18D076A18(&v27, (uint64_t)",psr,", 5);
  this = (raven::RavenSequentialGNSSMeasurementSelector *)((char *)this + 1424);
  v25 = 5;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v4, this, &v26, &v25);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = sub_18D076A18(v5, (uint64_t)",", 1);
  v24 = 3;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v6, this, &v26, &v24);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = sub_18D076A18(v7, (uint64_t)",", 1);
  v23 = 4;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v8, this, &v26, &v23);
  v9 = std::ostream::operator<<();
  v25 = 5;
  v26 = 3;
  ITRCount = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount(v9, this, &v26, &v25);
  v23 = 5;
  v24 = 4;
  v11 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)ITRCount, this, &v24, &v23);
  v25 = 3;
  v26 = 3;
  v12 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v11, this, &v26, &v25);
  v23 = 3;
  v24 = 4;
  v13 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v12, this, &v24, &v23);
  v25 = 4;
  v26 = 3;
  v14 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v13, this, &v26, &v25);
  v23 = 4;
  v24 = 4;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v14, this, &v24, &v23);
  sub_18D076A18(&v27, (uint64_t)",avg_doppler,", 13);
  v15 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v15, (uint64_t)",", 1);
  v16 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v16, (uint64_t)",", 1);
  std::ostream::operator<<();
  v26 = 2;
  v17 = sub_18D076A18(&v27, (uint64_t)",inst_doppler,", 14);
  v25 = 5;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v17, this, &v26, &v25);
  v18 = (_QWORD *)std::ostream::operator<<();
  v19 = sub_18D076A18(v18, (uint64_t)",", 1);
  v24 = 3;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v19, this, &v26, &v24);
  v20 = (_QWORD *)std::ostream::operator<<();
  v21 = sub_18D076A18(v20, (uint64_t)",", 1);
  v23 = 4;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v21, this, &v26, &v23);
  std::ostream::operator<<();
  sub_18D076DE8((uint64_t)v28, a2);
  v27 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v28[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v29 < 0)
    operator delete((void *)v28[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D78B550](&v30);
}

void sub_18D2A8DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18D09A074((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCounts@<X0>(raven::RavenSequentialGNSSMeasurementSelector *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *ITRCount;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD v28[10];
  char v29;
  uint64_t v30;

  sub_18D099F88((uint64_t)&v27);
  sub_18D076A18(&v27, (uint64_t)"#MSR Overall GNSS measurement counts (accept,reject,reweight)", 61);
  v26 = 1;
  v4 = sub_18D076A18(&v27, (uint64_t)",psr,", 5);
  this = (raven::RavenSequentialGNSSMeasurementSelector *)((char *)this + 1464);
  v25 = 5;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v4, this, &v26, &v25);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = sub_18D076A18(v5, (uint64_t)",", 1);
  v24 = 3;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v6, this, &v26, &v24);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = sub_18D076A18(v7, (uint64_t)",", 1);
  v23 = 4;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v8, this, &v26, &v23);
  v9 = std::ostream::operator<<();
  v25 = 5;
  v26 = 3;
  ITRCount = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount(v9, this, &v26, &v25);
  v23 = 5;
  v24 = 4;
  v11 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)ITRCount, this, &v24, &v23);
  v25 = 3;
  v26 = 3;
  v12 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v11, this, &v26, &v25);
  v23 = 3;
  v24 = 4;
  v13 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v12, this, &v24, &v23);
  v25 = 4;
  v26 = 3;
  v14 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v13, this, &v26, &v25);
  v23 = 4;
  v24 = 4;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v14, this, &v24, &v23);
  sub_18D076A18(&v27, (uint64_t)",avg_doppler,", 13);
  v15 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v15, (uint64_t)",", 1);
  v16 = (_QWORD *)std::ostream::operator<<();
  sub_18D076A18(v16, (uint64_t)",", 1);
  std::ostream::operator<<();
  v26 = 2;
  v17 = sub_18D076A18(&v27, (uint64_t)",inst_doppler,", 14);
  v25 = 5;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v17, this, &v26, &v25);
  v18 = (_QWORD *)std::ostream::operator<<();
  v19 = sub_18D076A18(v18, (uint64_t)",", 1);
  v24 = 3;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v19, this, &v26, &v24);
  v20 = (_QWORD *)std::ostream::operator<<();
  v21 = sub_18D076A18(v20, (uint64_t)",", 1);
  v23 = 4;
  raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v21, this, &v26, &v23);
  std::ostream::operator<<();
  sub_18D076DE8((uint64_t)v28, a2);
  v27 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v28[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v29 < 0)
    operator delete((void *)v28[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D78B550](&v30);
}

void sub_18D2A9188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18D09A074((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *raven::RavenSequentialGNSSMeasurementSelector::UpdateTIVsForMeasurement(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  _OWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  _BOOL4 v11;
  uint64_t **v12;
  _BOOL4 v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  if (*(_BYTE *)(a2 + 168) && *(_DWORD *)(*(_QWORD *)(a2 + 8) + 96) == 1)
  {
    v2 = result;
    v4 = (_OWORD *)(a2 + 16);
    v3 = *(_DWORD *)(a2 + 16);
    v5 = *(uint64_t **)(a2 + 152);
    v6 = (uint64_t *)result[157];
    if (v6)
    {
      v7 = *(uint64_t **)(a2 + 24);
      while (1)
      {
        while (1)
        {
          v8 = (uint64_t **)v6;
          v9 = *((_DWORD *)v6 + 8);
          v10 = v8[5];
          v11 = (uint64_t)v10 > (uint64_t)v7;
          if (v9 != v3)
            v11 = v9 > v3;
          if (!v11)
            break;
          v6 = *v8;
          v12 = v8;
          if (!*v8)
            goto LABEL_16;
        }
        v13 = (uint64_t)v10 < (uint64_t)v7;
        v14 = v9 == v3;
        v15 = v9 < v3;
        if (v14)
          v15 = v13;
        if (!v15)
          break;
        v6 = v8[1];
        if (!v6)
        {
          v12 = v8 + 1;
          goto LABEL_16;
        }
      }
    }
    else
    {
      v12 = (uint64_t **)(result + 157);
      v8 = (uint64_t **)(result + 157);
LABEL_16:
      v16 = (uint64_t *)v8;
      v8 = (uint64_t **)operator new(0x38uLL);
      *((_OWORD *)v8 + 2) = *v4;
      v8[6] = 0;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = v16;
      *v12 = (uint64_t *)v8;
      v17 = *(_QWORD *)v2[156];
      v18 = (uint64_t *)v8;
      if (v17)
      {
        v2[156] = v17;
        v18 = *v12;
      }
      result = sub_18D083D78((uint64_t *)v2[157], v18);
      ++v2[158];
    }
    v8[6] = v5;
  }
  return result;
}

uint64_t raven::RavenSequentialGNSSMeasurementSelector::UpdateEstimator(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  unsigned int v6;
  unsigned int v7;
  float64x2_t v8;
  float64x2_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  int v16;
  int v17;
  int i;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v38[8];
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE v48[512];
  void *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;

  if (!*(_BYTE *)(a2 + 144))
  {
    LOWORD(v44) = 12;
    LOBYTE(v39) = 4;
    v21 = a1 + 208;
    v22 = a1 + 96;
    sub_18D181C54(*(_QWORD *)a2);
    cnprint::CNLogFormatter::FormatGeneral(v21, v22, "#MSR %s %s h-function data missing at update");
LABEL_13:
    if (*(char *)(a1 + 231) >= 0)
      LOBYTE(v30) = v21;
    else
      v30 = *(_QWORD *)(a1 + 208);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, (unsigned __int8 *)&v39, "%s", v24, v25, v26, v27, v28, v30);
    return 0;
  }
  if (!*(_BYTE *)(a2 + 168))
  {
    LOWORD(v44) = 12;
    LOBYTE(v39) = 4;
    v21 = a1 + 208;
    v23 = a1 + 96;
    sub_18D181C54(*(_QWORD *)a2);
    cnprint::CNLogFormatter::FormatGeneral(v21, v23, "#MSR %s %s innovation data missing at update");
    goto LABEL_13;
  }
  if (!*(_BYTE *)(a2 + 200))
  {
    LOWORD(v44) = 12;
    LOBYTE(v39) = 4;
    v21 = a1 + 208;
    v29 = a1 + 96;
    sub_18D181C54(*(_QWORD *)a2);
    cnprint::CNLogFormatter::FormatGeneral(v21, v29, "#MSR %s %s recommended variance missing at update");
    goto LABEL_13;
  }
  v4 = *(double *)(a2 + 160);
  v5 = *(double *)(a2 + 192);
  v7 = *(_DWORD *)(a2 + 48);
  v6 = *(_DWORD *)(a2 + 52);
  v46 = 0x100000008;
  v44 = &unk_1E25C86C0;
  *(_QWORD *)&v45 = __PAIR64__(v7, v6);
  DWORD2(v45) = v7 * v6;
  HIDWORD(v45) = v6;
  v47 = v48;
  sub_18D073454(a2 + 40, (uint64_t)&v44);
  v61 = 0x100000008;
  v59 = &unk_1E25C86C0;
  v60 = xmmword_18D319940;
  v62 = &v63;
  sub_18D053B2C(a1 + 360, (uint64_t)&v44, (uint64_t)&v59);
  v56 = 0x100000008;
  v54 = &unk_1E25C86C0;
  v55 = xmmword_18D319940;
  v57 = &v58;
  v8.f64[0] = 1.0 / (v4 + v5);
  v9 = sub_18D1C94E0((uint64_t)&v59, (uint64_t)&v54, v8);
  v9.f64[0] = *(float64_t *)(a2 + 152);
  v51 = 0x100000008;
  v49 = &unk_1E25C86C0;
  v50 = xmmword_18D319940;
  v52 = &v53;
  sub_18D1C94E0((uint64_t)&v54, (uint64_t)&v49, v9);
  v46 = 0x100000008;
  v44 = &unk_1E25C86C0;
  v45 = xmmword_18D319940;
  v47 = v48;
  sub_18D053FA4(a1 + 256, (uint64_t)&v49, (uint64_t)&v44);
  sub_18D053AA8(a1 + 256, (uint64_t)&v44);
  v11 = v60;
  v10 = DWORD1(v60);
  v36 = 0x800000001;
  v31 = &unk_1E25C6E00;
  v37 = v38;
  v32 = DWORD1(v60);
  v33 = v60;
  v34 = v60 * DWORD1(v60);
  v35 = DWORD1(v60);
  if (DWORD1(v60))
  {
    v12 = 0;
    v13 = 0;
    v14 = HIDWORD(v60);
    v15 = v62;
    do
    {
      v16 = v12;
      v17 = v13;
      for (i = v11; i; --i)
      {
        v38[v17] = v15[v16];
        v17 += v10;
        ++v16;
      }
      ++v13;
      v12 += v14;
    }
    while (v13 != v10);
  }
  v41 = 0x800000008;
  v39 = &unk_1E25C87E0;
  v40 = xmmword_18D319930;
  v42 = &v43;
  sub_18D053B2C((uint64_t)&v54, (uint64_t)&v31, (uint64_t)&v39);
  v46 = 0x800000008;
  v44 = &unk_1E25C87E0;
  v45 = xmmword_18D319930;
  v47 = v48;
  sub_18D0540FC(a1 + 360, (uint64_t)&v39, (uint64_t)&v44);
  sub_18D053AA8(a1 + 360, (uint64_t)&v44);
  v19 = a1 + 912;
  v46 = 0x100000008;
  v44 = &unk_1E25C86C0;
  v45 = xmmword_18D319940;
  v47 = v48;
  sub_18D053FA4(v19, (uint64_t)&v49, (uint64_t)&v44);
  sub_18D053AA8(v19, (uint64_t)&v44);
  return 1;
}

__n128 sub_18D2A970C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x800000001;
  *(_QWORD *)(a1 + 24) = 0x800000001;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6E00;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 9u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D2A982C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D2A9840(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t *v10;
  int v11;
  _BOOL4 v12;

  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return v3;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v9 = v7 == a2;
    v8 = v7 < a2;
    if (v9)
      v8 = *(_QWORD *)(v4 + 40) < a3;
    v9 = !v8;
    if (v8)
      v10 = (uint64_t *)(v4 + 8);
    else
      v10 = (uint64_t *)v4;
    if (v9)
      v6 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v6 == v3)
    return v3;
  v11 = *(_DWORD *)(v6 + 32);
  v9 = v11 == a2;
  v12 = v11 > a2;
  if (v9)
    v12 = *(_QWORD *)(v6 + 40) > a3;
  if (v12)
    return v3;
  return v6;
}

uint64_t sub_18D2A98B8(_QWORD *a1, uint64_t a2, double *a3, float64x2_t *a4, uint64_t a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  __int128 *v14;
  double v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  cnprint::CNPrinter *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  cnprint::CNPrinter *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t result;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  void *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  unsigned __int8 v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  void *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  uint64_t v102;
  int *v103;
  __int128 v104;
  uint64_t v105;
  double v106;
  void *v107;
  __int128 v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  void *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  void *v117;
  __int128 v118;
  uint64_t v119;
  double *v120;
  uint64_t v121;
  void *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  void *v127;
  __int128 v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  double v132;
  __int128 v133;
  uint64_t v134;

  v10 = a1[1];
  v11 = CNTimeSpan::operator-(a2, (_QWORD *)(v10 + 88), a6, a7);
  v13 = v12;
  v14 = *(__int128 **)(*a1 + 32);
  v133 = *v14;
  v134 = *((_QWORD *)v14 + 2);
  v15 = *((double *)v14 + 6);
  *(_QWORD *)&v75 = 0x800000008;
  v73 = &unk_1E25C87E0;
  *((_QWORD *)&v75 + 1) = &v76;
  v74 = xmmword_18D319930;
  sub_18D04BE88((uint64_t)&v73, 0.0);
  v16 = 0;
  v17 = HIDWORD(v74) + 1;
  v18 = 8;
  v19 = *((_QWORD *)&v75 + 1);
  do
  {
    *(_QWORD *)(v19 + 8 * v16) = 0x3FF0000000000000;
    v16 += v17;
    --v18;
  }
  while (v18);
  v20 = sub_18D053AA8(a5, (uint64_t)&v73);
  v21.i64[0] = 0x3F50624DD2F1A9FCLL;
  if (fabs(v13 + (double)v11) > 0.001)
  {
    v132 = v13 + (double)v11;
    *(_QWORD *)&v76 = 0x700000006;
    v129 = 0x100000008;
    v127 = &unk_1E25C86F0;
    v128 = xmmword_18D319330;
    v130 = &v131;
    v131 = 0x700000006;
    v124 = 0x100000008;
    v122 = &unk_1E25C86C0;
    v125 = &v126;
    v123 = xmmword_18D319330;
    sub_18D04BE88((uint64_t)&v122, 0.0);
    v119 = 0x100000008;
    v117 = &unk_1E25C86C0;
    v118 = xmmword_18D319940;
    v120 = (double *)&v121;
    v114 = 0x800000008;
    v112 = &unk_1E25C87E0;
    v113 = xmmword_18D319930;
    v115 = &v116;
    v109 = 0x800000008;
    v107 = &unk_1E25C87E0;
    v108 = xmmword_18D319930;
    v110 = &v111;
    v24 = *a1;
    v25 = (DWORD1(v128) * v128);
    *(_QWORD *)&v75 = 0x100000008;
    v73 = &unk_1E25C86C0;
    *(_QWORD *)&v74 = v128;
    *((_QWORD *)&v74 + 1) = __PAIR64__(v128, v25);
    v26 = &v76;
    *((_QWORD *)&v75 + 1) = &v76;
    if ((_DWORD)v25)
    {
      v27 = v130;
      v28 = *(_QWORD *)(v24 + 32);
      do
      {
        v29 = *(int *)v27;
        v27 = (uint64_t *)((char *)v27 + 4);
        *(_QWORD *)v26 = *(_QWORD *)(v28 + 8 * v29);
        v26 = (__int128 *)((char *)v26 + 8);
        --v25;
      }
      while (v25);
    }
    v30 = (cnprint::CNPrinter *)sub_18D055218((uint64_t)&v73, (uint64_t)&v122, (uint64_t *)&v132, (uint64_t)&v117, (uint64_t)&v112, (uint64_t)&v107, v22, v23);
    if ((_DWORD)v30)
    {
      if (cnprint::CNPrinter::GetLogLevel(v30) <= 1)
      {
        LOWORD(v73) = 12;
        LOBYTE(v85) = 1;
        v32 = *(_QWORD *)(v10 + 88);
        v31 = *(double *)(v10 + 96);
        sub_18D181C54(a1[1] + 56);
        v70 = v31 + (double)v32;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, (unsigned __int8 *)&v85, "t,%.3lf,%s,f_TwoStateOscillator failed", v33, v34, v35, v36, v37, SLOBYTE(v70));
      }
      return 0xFFFFFFFFLL;
    }
    v38 = 0;
    v106 = v13 + (double)v11;
    do
    {
      *((_DWORD *)&v76 + v38) = v38;
      ++v38;
    }
    while (v38 != 6);
    v102 = 0x100000008;
    v100 = &unk_1E25C86F0;
    v101 = xmmword_18D319950;
    v104 = v76;
    v103 = (int *)&v104;
    v105 = v77;
    v97 = 0x100000008;
    v95 = &unk_1E25C86C0;
    v98 = &v99;
    v96 = xmmword_18D319950;
    sub_18D04BE88((uint64_t)&v95, 0.0);
    v92 = 0x100000008;
    v90 = &unk_1E25C86C0;
    v91 = xmmword_18D319940;
    v93 = &v94;
    v87 = 0x800000008;
    v85 = &unk_1E25C87E0;
    v86 = xmmword_18D319930;
    v88 = &v89;
    v82 = 0x800000008;
    v80 = &unk_1E25C87E0;
    v81 = xmmword_18D319930;
    v83 = &v84;
    v41 = *a1;
    v42 = (DWORD1(v101) * v101);
    *(_QWORD *)&v75 = 0x100000008;
    v73 = &unk_1E25C86C0;
    *(_QWORD *)&v74 = v101;
    *((_QWORD *)&v74 + 1) = __PAIR64__(v101, v42);
    v43 = &v76;
    *((_QWORD *)&v75 + 1) = &v76;
    if ((_DWORD)v42)
    {
      v44 = v103;
      v45 = *(_QWORD *)(v41 + 32);
      do
      {
        v46 = *v44++;
        *(_QWORD *)v43 = *(_QWORD *)(v45 + 8 * v46);
        v43 = (__int128 *)((char *)v43 + 8);
        --v42;
      }
      while (v42);
    }
    v47 = (cnprint::CNPrinter *)sub_18D054EFC((uint64_t)&v73, (uint64_t)&v95, (uint64_t *)&v106, (uint64_t)&v90, (uint64_t)&v85, (uint64_t)&v80, v39, v40);
    if ((_DWORD)v47)
    {
      if (cnprint::CNPrinter::GetLogLevel(v47) <= 1)
      {
        LOWORD(v73) = 12;
        v79 = 1;
        v49 = *(_QWORD *)(v10 + 88);
        v48 = *(double *)(v10 + 96);
        sub_18D181C54(a1[1] + 56);
        v71 = v48 + (double)v49;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, &v79, "t,%.3lf,%s,f_SixStateNearlyConstantVelocity failed", v50, v51, v52, v53, v54, SLOBYTE(v71));
      }
      return 0xFFFFFFFFLL;
    }
    v55 = v93[2];
    v133 = *(_OWORD *)v93;
    v134 = v55;
    v15 = *v120;
    sub_18D053C48((uint64_t)&v73, a5, (uint64_t)&v100, (uint64_t)&v100);
    sub_18D053EBC((uint64_t)&v73, (uint64_t)&v85);
    sub_18D053C48((uint64_t)&v73, a5, (uint64_t)&v127, (uint64_t)&v127);
    sub_18D053EBC((uint64_t)&v73, (uint64_t)&v112);
  }
  v56 = a1[1];
  v73 = 0;
  *(_QWORD *)&v74 = 0;
  v20.n128_f64[0] = v13 + (double)v11;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v73, 0, (int8x16_t)v20, v21);
  v112 = (void *)CNTimeSpan::operator+(v56 + 136, &v73, v57, v58);
  *(_QWORD *)&v113 = v59;
  v60.i64[0] = *(_QWORD *)(v56 + 192);
  *(double *)v61.i64 = v15 * 0.000001;
  v107 = &unk_1E25B97E0;
  v85 = &unk_1E25B9818;
  LOWORD(v73) = 0;
  v74 = 0u;
  v75 = 0u;
  LODWORD(v76) = 0;
  *((_QWORD *)&v76 + 1) = 0;
  v77 = 0;
  v78 = 0;
  result = cnnavigation::GNSSCarrierPhase((uint64_t)&v112, (uint64_t)&v73, (uint64_t)&v133, v56 + 296, (uint64_t *)&v107, (uint64_t *)&v85, a3, 1, v60, v61, 0.0, a4);
  if (!(_DWORD)result)
    return result;
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
  {
    LOWORD(v73) = 12;
    LOBYTE(v107) = 1;
    v63 = a1[1];
    v64 = *(double *)(v63 + 96) + (double)*(uint64_t *)(v63 + 88);
    sub_18D181C54(v63 + 56);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, (unsigned __int8 *)&v107, "t,%.3lf,%s,GNSSCarrierPhase,start,returned != 0", v65, v66, v67, v68, v69, SLOBYTE(v64));
  }
  return 0xFFFFFFFFLL;
}

double sub_18D2A9E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  double result;

  v9 = operator new(0xF0uLL);
  *v9 = a2;
  v9[1] = a3;
  result = *(double *)(a5 + 104) + 0.5;
  v9[2] = a4;
  v9[3] = a5;
  *((_DWORD *)v9 + 8) = *(_DWORD *)(a4 + 28) + 1000 * *(unsigned __int8 *)(a4 + 24);
  v9[5] = (uint64_t)result;
  *((_BYTE *)v9 + 48) = 0;
  *((_BYTE *)v9 + 160) = 0;
  *((_BYTE *)v9 + 168) = 0;
  *((_BYTE *)v9 + 184) = 0;
  *((_BYTE *)v9 + 208) = 0;
  *((_BYTE *)v9 + 216) = 0;
  *((_DWORD *)v9 + 56) = 0;
  v9[29] = 0;
  v9[24] = 0;
  *((_BYTE *)v9 + 200) = 0;
  return result;
}

uint64_t *sub_18D2A9F10(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t sub_18D2A9FC4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_18D1C5494(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_18D2AA020(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      sub_18D05B5E4(v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *sub_18D2AA07C(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x30uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  v13[3] = v13 + 3;
  v13[4] = v13 + 3;
  v13[5] = 0;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_18D0788A0();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_18D2AA498((uint64_t)v35);
  return i;
}

void sub_18D2AA484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D2AA498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18D2AA498(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_18D1C5494(v1 + 3);
    operator delete(v1);
  }
}

_QWORD *sub_18D2AA4DC(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[5] = 0;
  v10[4] = 0;
  v10[3] = v10 + 4;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_18D0788A0();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_18D2AA8C4(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_18D2AA8DC(1, v1);
  _Unwind_Resume(a1);
}

void sub_18D2AA8DC(char a1, _QWORD **a2)
{
  if (a1)
  {
    sub_18D05B5E4(a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *sub_18D2AA920(uint64_t **a1, unsigned __int8 a2, _BYTE *a3)
{
  unsigned __int8 *v5;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (unsigned __int8 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[28];
        if (v8 <= a2)
          break;
        v5 = (unsigned __int8 *)*v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (unsigned __int8 *)v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = v7;
    v7 = operator new(0x28uLL);
    *((_BYTE *)v7 + 28) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = v7;
    v10 = (uint64_t *)**a1;
    v11 = v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_18D083D78(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_QWORD *sub_18D2AA9F0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  __int128 v4;

  v2 = operator new(0xF0uLL);
  v3 = v2;
  *v2 = 0;
  v2[1] = 0;
  v4 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v2 + 1) = *(_OWORD *)a1;
  *((_OWORD *)v2 + 2) = v4;
  *((_BYTE *)v2 + 48) = 0;
  *((_BYTE *)v2 + 160) = 0;
  if (*(_BYTE *)(a1 + 144))
  {
    v2[6] = *(_QWORD *)(a1 + 32);
    sub_18D2A970C((uint64_t)(v2 + 7), a1 + 40);
    *((_BYTE *)v3 + 160) = 1;
  }
  *(_OWORD *)(v3 + 23) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v3 + 25) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v3 + 27) = *(_OWORD *)(a1 + 200);
  v3[29] = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(v3 + 21) = *(_OWORD *)(a1 + 152);
  return v3;
}

void sub_18D2AAA88(_Unwind_Exception *a1)
{
  _BYTE *v1;
  _QWORD *v2;

  if (v1[160])
    *v2 = &unk_1E25C5E70;
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_18D2AAAB4(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_18D0788A0();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_18D2AAED8((uint64_t)v35);
  return i;
}

void sub_18D2AAEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D2AAED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18D2AAED8(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_18D04344C((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

uint64_t *sub_18D2AAF1C(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void sub_18D2AAFD0(uint64_t a1, int a2, int a3, int a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  *((_DWORD *)v14 + 4) = a3;
  *((_DWORD *)v14 + 5) = a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_18D2AB1E0(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v23 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_18D2AB1CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D2AB1E0(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_18D0788A0();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

_QWORD *sub_18D2AB3D8(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_18D2AB1E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_18D2AB5D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18D2AB5E4(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_18D04B08C((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

uint64_t **sub_18D2AB628(uint64_t **a1, int a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = *((_DWORD *)v6 + 8);
        v10 = v8[5];
        v11 = (uint64_t)v10 > (uint64_t)a3;
        if (v9 != a2)
          v11 = v9 > a2;
        if (!v11)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_13;
      }
      v12 = (uint64_t)v10 < (uint64_t)a3;
      v13 = v9 == a2;
      v14 = v9 < a2;
      if (v13)
        v14 = v12;
      if (!v14)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_13:
    v15 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v8 + 2) = *a4;
    *((_DWORD *)v8 + 12) = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v15;
    *v7 = (uint64_t *)v8;
    v16 = (uint64_t *)**a1;
    v17 = (uint64_t *)v8;
    if (v16)
    {
      *a1 = v16;
      v17 = *v7;
    }
    sub_18D083D78(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

uint64_t raven::RavenLineOfSightEstimator::GetCurrentTime(raven::RavenLineOfSightEstimator *this)
{
  return *((_QWORD *)this + 23);
}

double raven::RavenLineOfSightEstimator::GetHMMProbabilitySumThreshold(raven::RavenLineOfSightEstimator *this)
{
  return *((double *)this + 18);
}

double raven::RavenLineOfSightEstimator::GetProbabilityLOS(raven::RavenLineOfSightEstimator *this)
{
  char *v1;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  if (!*(_BYTE *)this)
    return NAN;
  v5 = 0x100000002;
  v3 = &unk_1E25C7520;
  v4 = xmmword_18D319330;
  v6 = &v7;
  if (*((_DWORD *)this + 34))
    v1 = (char *)this + 80;
  else
    v1 = (char *)this + 24;
  sub_18D053AA8((uint64_t)&v3, (uint64_t)v1);
  return *(double *)v6;
}

uint64_t raven::RavenLineOfSightEstimator::IsInitialized(raven::RavenLineOfSightEstimator *this)
{
  return *(unsigned __int8 *)this;
}

char *raven::RavenLineOfSightEstimator::GetSatelliteID@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;

  v2 = this;
  if (this[175] < 0)
  {
    this = (char *)sub_18D077798((_BYTE *)a2, *((void **)this + 19), *((_QWORD *)this + 20));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(this + 152);
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 21);
  }
  *(_QWORD *)(a2 + 24) = *((_QWORD *)v2 + 22);
  return this;
}

uint64_t raven::RavenLineOfSightEstimator::Initialize(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v33;
  std::string *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned __int8 v53;
  __int16 v54;

  if (*(_BYTE *)a1)
  {
    v54 = 12;
    v53 = 2;
    v4 = sub_18D181C54((uint64_t)(a2 + 3));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "WARNING: LOSEstimator being re-initialized,svid,%s", v5, v6, v7, v8, v9, v4);
    *(_BYTE *)a1 = 0;
  }
  v10 = *(double *)a2;
  if (!*a2)
  {
    v54 = 12;
    v53 = 4;
    v52 = sub_18D181C54((uint64_t)(a2 + 3));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "LOSEstimator,invalid pointer to RavenParameters,%s", v19, v20, v21, v22, v23, v52);
    return 0xFFFFFFFFLL;
  }
  v11 = *(double *)(*(_QWORD *)&v10 + 2256);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v11 >= 0.0 ? (v12 = v11 <= 1.0) : (v12 = 0), !v12))
  {
    v54 = 12;
    v53 = 4;
    v13 = sub_18D181C54((uint64_t)(a2 + 3));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "LOSEstimator,invalid P(LOS|LOS),%s,%.3lf", v14, v15, v16, v17, v18, v13);
    return 0xFFFFFFFFLL;
  }
  v24 = *(double *)(*(_QWORD *)&v10 + 2264);
  if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v24 >= 0.0 ? (v25 = v24 <= 1.0) : (v25 = 0), !v25))
  {
    v54 = 12;
    v53 = 4;
    v26 = sub_18D181C54((uint64_t)(a2 + 3));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "LOSEstimator,invalid P(NLOS|NLOS),%s,%.3lf", v27, v28, v29, v30, v31, v26);
    return 0xFFFFFFFFLL;
  }
  if ((*(_QWORD *)(*(_QWORD *)&v10 + 2248) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *(double *)(*(_QWORD *)&v10 + 2248) <= 0.0)
  {
    v54 = 12;
    v53 = 4;
    v41 = sub_18D181C54((uint64_t)(a2 + 3));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "LOSEstimator,invalid transition probability time interval,%s,%.3lf", v42, v43, v44, v45, v46, v41);
    return 0xFFFFFFFFLL;
  }
  v33 = *((double *)a2 + 2) + (double)a2[1];
  if (COERCE__INT64(fabs(v33)) > 0x7FEFFFFFFFFFFFFFLL || v33 < 0.0)
  {
    v54 = 12;
    v53 = 4;
    sub_18D181C54((uint64_t)(a2 + 3));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "LOSEstimator,invalid input time,%.3lf,%s", v47, v48, v49, v50, v51, SLOBYTE(v33));
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 144) = 0x3DDB7CDFD9D7BDBBLL;
  sub_18D2ABAC8(a1 + 16);
  *(_QWORD *)(a1 + 8) = *a2;
  v34 = std::string::operator=((std::string *)(a1 + 152), (const std::string *)a2 + 1);
  *(_QWORD *)(a1 + 176) = a2[6];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 1);
  *(_BYTE *)a1 = 1;
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v34) <= 1)
  {
    v54 = 12;
    v53 = 1;
    v35 = *((double *)a2 + 2) + (double)a2[1];
    sub_18D181C54((uint64_t)(a2 + 3));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "LOSEstimator initialized,time,%.3lf,svid,%s", v36, v37, v38, v39, v40, SLOBYTE(v35));
  }
  return 0;
}

void sub_18D2ABAC8(uint64_t a1)
{
  double v1;
  float64x2_t v3;
  cnprint::CNPrinter *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28[8];
  float64x2_t v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  double *v33;
  double v34[2];

  v32 = 0x100000002;
  v30 = &unk_1E25C7520;
  v33 = v34;
  v22 = xmmword_18D319330;
  v31 = xmmword_18D319330;
  sub_18D04BE88((uint64_t)&v30, 1.0);
  v25 = 0x100000002;
  v23 = &unk_1E25C7520;
  *(_QWORD *)&v3.f64[1] = 0x200000002;
  v24 = xmmword_18D319330;
  v26 = &v27;
  v3.f64[0] = 0.5;
  sub_18D064EF4((uint64_t)&v30, (uint64_t)&v23, v3);
  v5 = *(double *)(a1 + 128);
  v6 = DWORD1(v24);
  if (DWORD1(v24))
  {
    v7 = 0;
    v8 = v24;
    v9 = v26;
    v10 = v24 - 1;
    v11 = 1;
    do
    {
      v12 = *(double *)&v9[v8 * v7];
      v13 = v11;
      v14 = v10;
      if (v8 >= 2)
      {
        do
        {
          v12 = v12 + *(double *)&v9[v13++];
          --v14;
        }
        while (v14);
      }
      v34[v7++] = v12;
      v11 += v8;
    }
    while (v7 != v6);
    v1 = v34[0];
  }
  v15 = DWORD2(v24);
  if (fabs(v1 + -1.0) > v5 && cnprint::CNPrinter::GetLogLevel(v4) <= 1)
  {
    LOWORD(v30) = 2;
    v28[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, v28, "WARNING: HMM initialized with non-normalized probability vector.", v16, v17, v18, v19, v20, 2);
  }
  sub_18D064724((uint64_t)v28, (uint64_t)&v23);
  v21 = (float64x2_t)vdupq_lane_s32((int32x2_t)(v15 | 0x100000000), 0);
  HIDWORD(v21.f64[0]) = 1;
  v29 = v21;
  v32 = 0x100000002;
  v30 = &unk_1E25C7520;
  *(_QWORD *)&v21.f64[1] = 0x200000002;
  v31 = v22;
  v33 = v34;
  v21.f64[0] = 1.0 / v1;
  sub_18D064EF4((uint64_t)v28, (uint64_t)&v30, v21);
  sub_18D053AA8(a1 + 8, (uint64_t)&v30);
  sub_18D053AA8(a1 + 64, a1 + 8);
  *(_DWORD *)(a1 + 120) = 1;
}

uint64_t raven::RavenLineOfSightEstimator::Predict(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  float64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  cnprint::CNPrinter *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  cnprint::CNPrinter *v43;
  unint64_t v44;
  BOOL v45;
  double v46;
  double *v47;
  unint64_t v48;
  double v49;
  BOOL v50;
  double v51;
  float64x2_t v52;
  uint64_t result;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  long double v100;
  long double v101;
  char v102;
  double v103;
  double v104;
  __int128 v105;
  double v106;
  __int128 v107;
  double v108;
  void *v109;
  __int128 v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  void *v114;
  __int128 v115;
  uint64_t v116;
  double *v117;
  double v118[2];
  double v119;
  double v120;
  _BYTE v121[24];
  uint64_t v122;
  double *v123;
  _BYTE v124[40];

  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      *(_WORD *)v121 = 12;
      LOBYTE(v114) = 1;
      v103 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v121, (unsigned __int8 *)&v114, "WARNING:LOSEstimator,time,%.3lf,predicting uninitialized", v22, v23, v24, v25, v26, SLOBYTE(v103));
    }
    return 0xFFFFFFFFLL;
  }
  a4.i64[0] = *(_QWORD *)(a2 + 8);
  if (COERCE__INT64(fabs(*(double *)a4.i64 + (double)*(uint64_t *)a2)) <= 0x7FEFFFFFFFFFFFFFLL
    && *(double *)a4.i64 + (double)*(uint64_t *)a2 >= 0.0)
  {
    v105 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)v121 = *(_OWORD *)(a1 + 184);
    v12 = CNTimeSpan::operator-(a2, v121, *(int8x16_t *)v121, a4);
    v106 = v13 + (double)v12;
    v14 = *(_QWORD *)(a1 + 8);
    v107 = *(_OWORD *)(v14 + 2256);
    v108 = *(double *)(v14 + 2248);
    if (!*(_DWORD *)(a1 + 136))
      sub_18D053AA8(a1 + 80, a1 + 24);
    v15 = *(_DWORD *)(a1 + 88);
    v16 = *(_DWORD *)(a1 + 92);
    if (v15)
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v17;
    if (v15 <= v16)
      v19 = *(_DWORD *)(a1 + 92);
    else
      v19 = *(_DWORD *)(a1 + 88);
    if (v18)
      v20 = 0;
    else
      v20 = v19;
    if (v18 == 1)
    {
      v116 = 0x100000002;
      v114 = &unk_1E25C7520;
      v117 = v118;
      v115 = xmmword_18D314820;
      sub_18D04BE88((uint64_t)&v114, 1.0);
      v122 = 0x100000002;
      *(_QWORD *)v121 = &unk_1E25C7520;
      *(_QWORD *)&v21.f64[1] = 0x200000002;
      *(_OWORD *)&v121[8] = xmmword_18D319330;
      v123 = (double *)v124;
      v21.f64[0] = INFINITY;
LABEL_28:
      sub_18D064EF4((uint64_t)&v114, (uint64_t)v121, v21);
LABEL_31:
      sub_18D053AA8(a1 + 80, (uint64_t)v121);
      *(_DWORD *)(a1 + 136) = 1;
      v116 = 0x200000002;
      v114 = &unk_1E25C75B0;
      v115 = xmmword_18D319340;
      v42 = v118;
      v117 = v118;
      if ((*(_QWORD *)&v106 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v106 < 0.0)
      {
        *(_WORD *)v121 = 12;
        LOBYTE(v109) = 4;
        v54 = *((double *)&v105 + 1) + (double)(uint64_t)v105;
      }
      else if (((unint64_t)v107 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
             || *(double *)&v107 < 0.0
             || *(double *)&v107 > 1.0)
      {
        *(_WORD *)v121 = 12;
        LOBYTE(v109) = 4;
        v54 = *((double *)&v105 + 1) + (double)(uint64_t)v105;
      }
      else
      {
        if ((*((_QWORD *)&v107 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && *((double *)&v107 + 1) >= 0.0
          && *((double *)&v107 + 1) <= 1.0)
        {
          if ((*(_QWORD *)&v108 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v108 < 0.0)
          {
            v66 = "invalid transition time";
            v67 = 234;
          }
          else
          {
            if (fabs(v106) < 2.22044605e-16)
            {
              sub_18D2ACF44((uint64_t)v121);
              sub_18D053AA8((uint64_t)&v114, (uint64_t)v121);
              v42 = v117;
              if ((_DWORD)v20)
              {
LABEL_43:
                v44 = 0;
                v45 = 0;
LABEL_44:
                v46 = 0.0;
                v47 = v42;
                v48 = v20;
                while (1)
                {
                  v49 = *v47;
                  v50 = *v47 >= 0.0 && v49 <= 1.0;
                  if (!v50)
                    break;
                  v46 = v46 + v49;
                  ++v47;
                  if (!--v48)
                  {
                    if (fabs(v46 + -1.0) <= *(double *)(a1 + 144))
                    {
                      ++v44;
                      v42 += SHIDWORD(v115);
                      v45 = v44 >= v20;
                      if (v44 != v20)
                        goto LABEL_44;
                    }
                    break;
                  }
                }
                if (v45)
                  goto LABEL_54;
                if (cnprint::CNPrinter::GetLogLevel(v43) <= 1)
                {
                  *(_WORD *)v121 = 2;
                  LOBYTE(v109) = 1;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v121, (unsigned __int8 *)&v109, "ERROR: HMM transition probability matrix is invalid.", v89, v90, v91, v92, v93, v102);
                }
                goto LABEL_59;
              }
LABEL_54:
              v122 = 0x100000002;
              *(_QWORD *)v121 = &unk_1E25C7520;
              *(_OWORD *)&v121[8] = xmmword_18D319330;
              v123 = (double *)v124;
              sub_18D053B2C((uint64_t)&v114, a1 + 80, (uint64_t)v121);
              sub_18D053AA8(a1 + 24, (uint64_t)v121);
              v111 = 0x100000002;
              v109 = &unk_1E25C7520;
              v110 = xmmword_18D319330;
              v112 = (double *)&v113;
              sub_18D06403C(a1 + 24, 1, (uint64_t)&v109);
              v51 = *v112;
              v122 = 0x100000002;
              *(_QWORD *)v121 = &unk_1E25C7520;
              v52.f64[0] = 1.0 / v51;
              *(_OWORD *)&v121[8] = xmmword_18D319330;
              v123 = (double *)v124;
              sub_18D064EF4(a1 + 24, (uint64_t)v121, v52);
              sub_18D053AA8(a1 + 24, (uint64_t)v121);
              result = 0;
              *(_DWORD *)(a1 + 136) = 0;
              *(_OWORD *)(a1 + 184) = *(_OWORD *)a2;
              return result;
            }
            v68 = 1.0 - *((double *)&v107 + 1);
            v69 = 1.0 - *(double *)&v107;
            v70 = sqrt((*(double *)&v107 * *((double *)&v107 + 1)- (1.0 - *((double *)&v107 + 1)) * (1.0 - *(double *)&v107))* -4.0+ (*(double *)&v107 + *((double *)&v107 + 1)) * (*(double *)&v107 + *((double *)&v107 + 1)));
            v71 = (*(double *)&v107 + *((double *)&v107 + 1) + v70) * 0.5;
            v72 = (*(double *)&v107 + *((double *)&v107 + 1) - v70) * 0.5;
            v73 = *(double *)&v107 + 1.0 - *((double *)&v107 + 1);
            v74 = 1.0 - *(double *)&v107 + *((double *)&v107 + 1);
            v75 = (1.0 - *(double *)&v107) / (v71 - *((double *)&v107 + 1));
            v76 = (v71 - *((double *)&v107 + 1)) / (1.0 - *(double *)&v107);
            if (1.0 - *(double *)&v107 <= vabdd_f64(v71, *((double *)&v107 + 1)))
              v76 = 1.0;
            else
              v75 = 1.0;
            v50 = v69 <= vabdd_f64(v72, *((double *)&v107 + 1));
            v77 = v69 / (v72 - *((double *)&v107 + 1));
            v78 = (v72 - *((double *)&v107 + 1)) / v69;
            if (v50)
              v78 = 1.0;
            else
              v77 = 1.0;
            v79 = v68 / (v71 - *(double *)&v107);
            v80 = (v71 - *(double *)&v107) / v68;
            if (v68 > vabdd_f64(v71, *(double *)&v107))
              v79 = 1.0;
            else
              v80 = 1.0;
            v50 = v68 <= vabdd_f64(v72, *(double *)&v107);
            v81 = v68 / (v72 - *(double *)&v107);
            v82 = (v72 - *(double *)&v107) / v68;
            if (v50)
            {
              v82 = 1.0;
              v83 = v81;
            }
            else
            {
              v83 = 1.0;
            }
            if (v73 > v74)
              v84 = v80;
            else
              v84 = v75;
            if (v73 > v74)
              v85 = v79;
            else
              v85 = v76;
            if (v73 <= v74)
            {
              v86 = v78;
            }
            else
            {
              v77 = v82;
              v86 = v83;
            }
            v87 = sqrt(v84 * v84 + v85 * v85);
            if (fabs(v87) >= 2.22044605e-16)
            {
              v88 = sqrt(v77 * v77 + v86 * v86);
              if (fabs(v88) >= 2.22044605e-16)
              {
                v94 = v85 / v87;
                v95 = v84 / v87;
                v96 = v86 / v88;
                v97 = v77 / v88;
                v98 = v85 / v87 * (v77 / v88) - v84 / v87 * (v86 / v88);
                if (fabs(v98) >= 2.22044605e-16)
                {
                  v99 = pow(v71, v106 / v108);
                  v100 = pow(v72, v106 / v108);
                  *(_QWORD *)((char *)&v115 + 4) = 0x400000002;
                  HIDWORD(v115) = 2;
                  v101 = v100 * v96;
                  v118[0] = (v99 * v94 * v97 - v101 * v95) / v98;
                  v118[1] = 1.0 - v118[0];
                  v119 = (v94 * v101 + -(v99 * v94) * v96) / v98;
                  v120 = 1.0 - v119;
                  if ((_DWORD)v20)
                    goto LABEL_43;
                  goto LABEL_54;
                }
                v66 = "singular matrix";
                v67 = 351;
              }
              else
              {
                v66 = "eigenvector 2 has zero norm";
                v67 = 341;
              }
            }
            else
            {
              v66 = "eigenvector 1 has zero norm";
              v67 = 332;
            }
          }
          sub_18D2ACEF0((uint64_t)&v105, (uint64_t)v66, (uint64_t)"t_LineOfSight", v67, v38, v39, v40, v41);
LABEL_58:
          *(_WORD *)v121 = 2;
          LOBYTE(v109) = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v121, (unsigned __int8 *)&v109, "ERROR: HMM transition probability function failed.", v55, v56, v57, v58, v59, v102);
LABEL_59:
          *(_WORD *)v121 = 12;
          LOBYTE(v114) = 4;
          v60 = *(double *)(a1 + 192) + (double)*(uint64_t *)(a1 + 184);
          sub_18D181C54(a1 + 152);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v121, (unsigned __int8 *)&v114, "LOSEstimator,time,%.3lf,failed to predict,%s,code,%d", v61, v62, v63, v64, v65, SLOBYTE(v60));
          return 0xFFFFFFFFLL;
        }
        *(_WORD *)v121 = 12;
        LOBYTE(v109) = 4;
        v54 = *((double *)&v105 + 1) + (double)(uint64_t)v105;
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v121, (unsigned __int8 *)&v109, "time,%.3lf,t-function failure on line %d: %s() %s", v37, v38, v39, v40, v41, SLOBYTE(v54));
      goto LABEL_58;
    }
    v27 = *(double *)(a1 + 144);
    v122 = 0x100000002;
    *(_QWORD *)v121 = &unk_1E25C7520;
    *(_OWORD *)&v121[8] = xmmword_18D319330;
    v123 = (double *)v124;
    v28 = (cnprint::CNPrinter *)sub_18D06403C(a1 + 80, 1, (uint64_t)v121);
    v29 = *v123;
    if (fabs(*v123 + -1.0) <= v27)
    {
      if ((v19 & 0x80000000) == 0)
      {
        sub_18D064724((uint64_t)v121, a1 + 80);
        v36 = vdupq_lane_s32((int32x2_t)(v19 | 0x100000000), 0);
        v36.i32[1] = 1;
        *(int32x4_t *)&v121[8] = v36;
        goto LABEL_31;
      }
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v28) <= 1)
      {
        *(_WORD *)v121 = 2;
        LOBYTE(v114) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v121, (unsigned __int8 *)&v114, "WARNING: HMM prediction passed a non-normalized probability vector.", v30, v31, v32, v33, v34, v102);
      }
      if ((v19 & 0x80000000) == 0)
      {
        sub_18D064724((uint64_t)&v114, a1 + 80);
        v35 = vdupq_lane_s32((int32x2_t)(v19 | 0x100000000), 0);
        v35.i32[1] = 1;
        v115 = (__int128)v35;
        v122 = 0x100000002;
        *(_QWORD *)v121 = &unk_1E25C7520;
        *(_QWORD *)&v21.f64[1] = 0x200000002;
        *(_OWORD *)&v121[8] = xmmword_18D319330;
        v123 = (double *)v124;
        v21.f64[0] = 1.0 / v29;
        goto LABEL_28;
      }
    }
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  *(_WORD *)v121 = 12;
  LOBYTE(v114) = 4;
  v104 = *(double *)(a1 + 192) + (double)*(uint64_t *)(a1 + 184);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v121, (unsigned __int8 *)&v114, "LOSEstimator,time,%.3lf,invalid prediction time,%.3lf", a6, a7, a8, a9, a10, SLOBYTE(v104));
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenLineOfSightEstimator::Reset(uint64_t this)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 184) = 0;
  *(_QWORD *)(this + 192) = 0x7FF8000000000000;
  return this;
}

uint64_t raven::RavenLineOfSightEstimator::Update(uint64_t a1, double *a2)
{
  __int128 v4;
  uint64_t result;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unsigned __int8 v18;
  __int16 v19;
  _OWORD v20[2];

  if (!*(_BYTE *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v20[0]) = 12;
      LOBYTE(v19) = 1;
      v17 = a2[3] + (double)*((uint64_t *)a2 + 2);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v20, (unsigned __int8 *)&v19, "WARNING:LOSEstimator,time,%.3lf,trying to update uninitialized estimator", v12, v13, v14, v15, v16, SLOBYTE(v17));
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(_OWORD *)a2;
  v20[0] = *((_OWORD *)a2 + 1);
  v20[1] = v4;
  result = sub_18D2AC7A4((_DWORD *)(a1 + 16), (uint64_t)sub_18D2AC674, (uint64_t)v20);
  if ((_DWORD)result)
  {
    v19 = 12;
    v18 = 4;
    v6 = *(double *)(a1 + 192) + (double)*(uint64_t *)(a1 + 184);
    sub_18D181C54(a1 + 152);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "LOSEstimator,time,%.3lf,failed updating with the given signal characteristic evidences,%s,code,%d", v7, v8, v9, v10, v11, SLOBYTE(v6));
    return 0xFFFFFFFFLL;
  }
  *(_OWORD *)(a1 + 184) = *((_OWORD *)a2 + 1);
  return result;
}

uint64_t sub_18D2AC674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  BOOL v9;
  double v10;
  uint64_t v12;
  uint64_t v14;
  double v15;
  double v16;
  unsigned __int8 v17;
  __int16 v18;
  unsigned __int8 v19;
  __int16 v20;

  v8 = *(double *)(a1 + 16);
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && (v8 >= 0.0 ? (v9 = v8 <= 1.0) : (v9 = 0), v9))
  {
    v10 = *(double *)(a1 + 24);
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v10 >= 0.0 && v10 <= 1.0)
    {
      v12 = 0;
      *(_OWORD *)(a2 + 8) = xmmword_18D319330;
      v14 = *(_QWORD *)(a2 + 32);
      *(double *)v14 = v8;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(a1 + 24);
      return v12;
    }
    v20 = 12;
    v19 = 4;
    v16 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v16));
  }
  else
  {
    v18 = 12;
    v17 = 4;
    v15 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v15));
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D2AC7A4(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  _BYTE v13[48];
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  if (a1[30] == 1)
    sub_18D053AA8((uint64_t)(a1 + 2), (uint64_t)(a1 + 16));
  v21 = 0x100000001;
  v19 = &unk_1E25C6920;
  *(_QWORD *)&v6 = 0x100000001;
  *((_QWORD *)&v6 + 1) = 0x100000001;
  v20 = v6;
  v22 = &v23;
  v23 = a2;
  v16 = 0x100000002;
  v14 = &unk_1E25C74C0;
  v15 = v6;
  v17 = &v18;
  v18 = a3;
  v7 = a1[4];
  v8 = a1[5];
  sub_18D04DB40((uint64_t)v13, (uint64_t)&v14);
  if (v7 <= v8)
    v9 = v8;
  else
    v9 = v7;
  if (v8)
    v10 = v7 == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = v9;
  return sub_18D2AD000((uint64_t)a1, v11, (uint64_t)(a1 + 2), 1, (uint64_t)&v19, (uint64_t)v13);
}

uint64_t raven::RavenLineOfSightEstimator::Update(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unsigned __int8 v17;
  __int16 v18;
  unsigned __int8 v19;
  __int16 v20;

  if (*(_BYTE *)a1)
  {
    result = sub_18D2AC7A4((_DWORD *)(a1 + 16), (uint64_t)sub_18D2AC960, a2);
    if (!(_DWORD)result)
      return result;
    v18 = 12;
    v17 = 4;
    v5 = *(double *)(a1 + 192) + (double)*(uint64_t *)(a1 + 184);
    sub_18D181C54(a1 + 152);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "LOSEstimator,time,%.3lf,failed WiFi cross-check,%s,code,%d", v6, v7, v8, v9, v10, SLOBYTE(v5));
  }
  else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    v20 = 12;
    v19 = 1;
    v16 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "WARNING:LOSEstimator,time,%.3lf,trying to update uninitialized estimator", v11, v12, v13, v14, v15, SLOBYTE(v16));
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D2AC960(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  double v11;
  uint64_t result;
  double v13;
  int8x16_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  cnstatistics *v25;
  cnstatistics *v26;
  double v27;
  double v28;
  uint64_t v30;
  _BYTE v31[72];
  _BYTE v32[72];
  _BYTE v33[32];
  double *v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[24];
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  double v47;
  float64x2_t v48;
  __int128 v49;
  __int128 v50;
  double v51;
  void *v52;
  void *v53;
  __int128 v54;
  uint64_t v55;

  if (*(_DWORD *)(a1 + 112) != 1)
  {
    LOWORD(v35) = 12;
    v42[0] = 4;
    v11 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    goto LABEL_13;
  }
  if (!*(_BYTE *)(a1 + 56))
  {
    LOWORD(v35) = 12;
    v42[0] = 4;
    v11 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    goto LABEL_13;
  }
  if ((*(_QWORD *)(a1 + 136) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v35) = 12;
    v42[0] = 4;
    v11 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    goto LABEL_13;
  }
  if ((*(_DWORD *)(a1 + 184) & 0x7FFFFFFFu) > 0x7F7FFFFF || *(float *)(a1 + 184) <= 0.0)
  {
    LOWORD(v35) = 12;
    v42[0] = 4;
    v11 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    goto LABEL_13;
  }
  v10 = *(unsigned __int8 *)(a1 + 640);
  if (v10 <= 0xF && ((1 << v10) & 0xF7EF) != 0)
  {
    LOWORD(v35) = 12;
    v42[0] = 4;
    v11 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
LABEL_13:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, v42, "time,%.3lf,e-function failure on line %d: %s() %s", a6, a7, a8, a9, a10, SLOBYTE(v11));
    return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(a1 + 720))
  {
    v15 = "invalid wifi position";
    v16 = 310;
    goto LABEL_31;
  }
  a4.i64[0] = *(_QWORD *)(a1 + 800);
  if ((a4.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v15 = "invalid clock offset";
    v16 = 317;
    goto LABEL_31;
  }
  if ((*(_QWORD *)(a1 + 808) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(a1 + 808) <= 0.0)
  {
    v15 = "invalid clock offset uncertainty";
    v16 = 324;
    goto LABEL_31;
  }
  if ((*(_QWORD *)(a1 + 816) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(a1 + 816) < 0.0)
  {
    v15 = "invalid minimum NLOS path delay";
    v16 = 331;
    goto LABEL_31;
  }
  v13 = *(double *)(a1 + 824);
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 < 0.0 || v13 > 1.0)
  {
    v15 = "invalid minimum emission probability";
    v16 = 338;
    goto LABEL_31;
  }
  v54 = *(_OWORD *)(a1 + 728);
  v55 = *(_QWORD *)(a1 + 744);
  v53 = &unk_1E25B97E0;
  v51 = 0.0;
  v52 = &unk_1E25B9818;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  *(_OWORD *)v42 = *(_OWORD *)(a1 + 64);
  v14.i64[1] = *(_QWORD *)&v42[8];
  v14.i64[0] = *(_QWORD *)(a1 + 120);
  *(double *)a4.i64 = *(double *)a4.i64 * 0.000001;
  v30 = a1;
  LOWORD(v35) = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (cnnavigation::GNSSPseudorange((uint64_t)v42, (uint64_t)&v35, (uint64_t)&v54, a1 + 224, (uint64_t *)&v53, (uint64_t *)&v52, &v51, 1, v14, a4, &v48))
  {
    v15 = "could not predict pseudorange";
    a1 = v30;
    v16 = 369;
LABEL_31:
    sub_18D2ACFAC(a1, (uint64_t)v15, (uint64_t)"e_LineOfSight_CrosscheckPseudorangeAndWiFiPosition", v16, a7, a8, a9, a10);
    return 0xFFFFFFFFLL;
  }
  v43 = 0x400000001;
  *(_OWORD *)&v42[8] = xmmword_18D319840;
  v45 = v49;
  *(_QWORD *)v42 = &unk_1E25C6CE0;
  v44 = &v45;
  v46 = v50;
  v47 = *((double *)&v50 + 1) * 0.000001;
  *(_QWORD *)&v37 = 0x400000004;
  v35 = &unk_1E25C7FA0;
  *((_QWORD *)&v37 + 1) = &v38;
  v36 = xmmword_18D313080;
  sub_18D04BE88((uint64_t)&v35, 0.0);
  v17 = *((_QWORD *)&v37 + 1);
  **((_QWORD **)&v37 + 1) = *(_QWORD *)(v30 + 752);
  v18 = SHIDWORD(v36);
  *(_QWORD *)(v17 + 8 * SHIDWORD(v36)) = *(_QWORD *)(v30 + 760);
  *(_QWORD *)(v17 + 16 * v18) = *(_QWORD *)(v30 + 768);
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(v17 + 8 * v18);
  *(_QWORD *)(v17 + 8 * ((int)v18 + 1)) = *(_QWORD *)(v30 + 776);
  v19 = *(_QWORD *)(v30 + 784);
  v20 = v17 + 16 * (_DWORD)v18;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v17 + 16 * v18);
  *(_QWORD *)(v17 + 8 * ((int)v18 + 2)) = v19;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v30 + 792);
  *(double *)(v17 + 8 * (3 * (int)v18 + 3)) = *(double *)(v30 + 808) * *(double *)(v30 + 808);
  sub_18D2AD574((uint64_t)v32, (uint64_t)v42, (uint64_t)&v35);
  sub_18D2AD5E4((uint64_t)v31, (uint64_t)v42);
  sub_18D2AD50C((uint64_t)v33, (uint64_t)v32, (uint64_t)v31);
  v21 = *(double *)(v30 + 136);
  v22 = v51;
  v23 = v21 - v51;
  v24 = sqrt(*v34 + (float)(*(float *)(v30 + 184) * *(float *)(v30 + 184)));
  *(_OWORD *)(a2 + 8) = xmmword_18D319330;
  v27 = cnstatistics::NormalCDF(v25, -vabdd_f64(v21, v22), 0.0, v24);
  if (v27 <= *(double *)(v30 + 824))
    v27 = *(double *)(v30 + 824);
  **(double **)(a2 + 32) = v27 + v27;
  v28 = cnstatistics::NormalCDF(v26, v23, *(double *)(v30 + 816), v24);
  result = 0;
  if (v28 <= *(double *)(v30 + 824))
    v28 = *(double *)(v30 + 824);
  *(double *)(*(_QWORD *)(a2 + 32) + 8) = v28;
  return result;
}

double sub_18D2ACEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double result;
  unsigned __int8 v10;
  __int16 v11;

  v11 = 12;
  v10 = 4;
  v8 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "time,%.3lf,t-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v8));
  return result;
}

uint64_t sub_18D2ACF44(uint64_t a1)
{
  uint64_t result;
  int v3;
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0x200000002;
  *(_QWORD *)a1 = &unk_1E25C75B0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18D319340;
  result = sub_18D04BE88(a1, 0.0);
  v3 = *(_DWORD *)(a1 + 20) + 1;
  v4 = *(_QWORD **)(a1 + 32);
  *v4 = 0x3FF0000000000000;
  v4[v3] = 0x3FF0000000000000;
  return result;
}

double sub_18D2ACFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double result;
  unsigned __int8 v10;
  __int16 v11;

  v11 = 12;
  v10 = 4;
  v8 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v8));
  return result;
}

uint64_t sub_18D2AD000(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  double v9;
  BOOL v10;
  double v11;
  float64x2_t v12;
  cnprint::CNPrinter *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t (*v25)(_QWORD, void **);
  cnprint::CNPrinter *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  double v33;
  double *v34;
  double *v35;
  uint64_t v36;
  double v37;
  double *v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  double *v45;
  uint64_t v46;
  int v47;
  double v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  double *v59;
  uint64_t v60;
  int v61;
  double v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t result;
  char *v66;
  uint64_t v67;
  void *v69;
  __int128 v70;
  uint64_t v71;
  double *v72;
  double v73[2];
  unsigned __int8 v74;
  void *v75;
  __int128 v76;
  uint64_t v77;
  double *v78;
  _BYTE v79[16];
  void *v80;
  __int128 v81;
  uint64_t v82;
  double *v83;
  _BYTE v84[24];

  v67 = a5;
  v9 = *(double *)(a1 + 128);
  if (*(_DWORD *)(a3 + 8))
    v10 = *(_DWORD *)(a3 + 12) == 0;
  else
    v10 = 1;
  if (v10)
  {
    if ((a2 & 0x80000000) != 0)
      __assert_rtn("Ones", "cnmatrix.h", 2317, "nr >= 0");
    v11 = 1.0 / (double)(int)a2;
    v77 = 0x100000002;
    v75 = &unk_1E25C7520;
    v78 = (double *)v79;
    *(_QWORD *)&v76 = a2 | 0x100000000;
    DWORD2(v76) = a2;
    HIDWORD(v76) = a2;
    sub_18D04BE88((uint64_t)&v75, 1.0);
    v82 = 0x100000002;
    v80 = &unk_1E25C7520;
    v12 = (float64x2_t)xmmword_18D319330;
    goto LABEL_13;
  }
  v82 = 0x100000002;
  v80 = &unk_1E25C7520;
  v81 = xmmword_18D319330;
  v83 = (double *)v84;
  v14 = (cnprint::CNPrinter *)sub_18D06403C(a3, 1, (uint64_t)&v80);
  v15 = *v83;
  if (fabs(*v83 + -1.0) <= v9)
  {
    if ((a2 & 0x80000000) == 0)
    {
      sub_18D064724((uint64_t)&v80, a3);
      v22 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
      v22.i32[1] = 1;
      v81 = (__int128)v22;
      goto LABEL_16;
    }
LABEL_52:
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  if (cnprint::CNPrinter::GetLogLevel(v14) <= 1)
  {
    LOWORD(v80) = 2;
    LOBYTE(v75) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v80, (unsigned __int8 *)&v75, "WARNING: HMM update passed a non-normalized probability vector.", v16, v17, v18, v19, v20, v67);
  }
  if ((a2 & 0x80000000) != 0)
    goto LABEL_52;
  v11 = 1.0 / v15;
  sub_18D064724((uint64_t)&v75, a3);
  v21 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
  v21.i32[1] = 1;
  v76 = (__int128)v21;
  v82 = 0x100000002;
  v80 = &unk_1E25C7520;
  v12 = (float64x2_t)xmmword_18D319330;
LABEL_13:
  v81 = (__int128)v12;
  v83 = (double *)v84;
  v12.f64[0] = v11;
  sub_18D064EF4((uint64_t)&v75, (uint64_t)&v80, v12);
LABEL_16:
  sub_18D053AA8(a1 + 8, (uint64_t)&v80);
  sub_18D064724((uint64_t)&v80, a1 + 8);
  if (a4 < 1)
  {
LABEL_47:
    sub_18D053AA8(a1 + 64, (uint64_t)&v80);
    result = 0;
    *(_DWORD *)(a1 + 120) = 1;
    return result;
  }
  v23 = 0;
  v24 = xmmword_18D319330;
  while (1)
  {
    v25 = *(uint64_t (**)(_QWORD, void **))(*(_QWORD *)(v67 + 32) + 8 * v23);
    v77 = 0x100000002;
    v75 = &unk_1E25C7520;
    v76 = v24;
    v78 = (double *)v79;
    v26 = (cnprint::CNPrinter *)v25(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8 * v23), &v75);
    if ((_DWORD)v26)
    {
      LOWORD(v69) = 2;
      v74 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v69, &v74, "ERROR: HMM emission function failed.", v27, v28, v29, v30, v31, v67);
      return 29;
    }
    if (a2)
      break;
    if (v9 >= 0.0)
      goto LABEL_50;
LABEL_32:
    v42 = DWORD1(v81);
    if (DWORD1(v81))
    {
      v43 = 0;
      v44 = v81;
      v45 = v83;
      v46 = v81 - 1;
      v47 = 1;
      do
      {
        v48 = v45[v44 * v43];
        v49 = v47;
        v50 = v46;
        if (v44 >= 2)
        {
          do
          {
            v48 = v48 + v45[v49++];
            --v50;
          }
          while (v50);
        }
        v73[v43++] = v48;
        v47 += v44;
      }
      while (v43 != v42);
    }
    v32.n128_f64[0] = v73[0];
    if (fabs(v73[0]) < 2.22044605e-16)
    {
      if (cnprint::CNPrinter::GetLogLevel(v26) <= 1)
      {
        LOWORD(v69) = 2;
        v74 = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v69, &v74, "HMM state is null vector after update; revert to input state",
          v51,
          v52,
          v53,
          v54,
          v55,
          v67);
      }
      v32 = sub_18D053AA8((uint64_t)&v80, a1 + 8);
      v56 = DWORD1(v81);
      if (DWORD1(v81))
      {
        v57 = 0;
        v58 = v81;
        v59 = v83;
        v60 = v81 - 1;
        v61 = 1;
        do
        {
          v62 = v59[v58 * v57];
          v63 = v61;
          v64 = v60;
          if (v58 >= 2)
          {
            do
            {
              v62 = v62 + v59[v63++];
              --v64;
            }
            while (v64);
          }
          v73[v57++] = v62;
          v61 += v58;
        }
        while (v57 != v56);
      }
      v32.n128_f64[0] = v73[0];
    }
    v71 = 0x100000002;
    v69 = &unk_1E25C7520;
    v70 = xmmword_18D319330;
    v72 = v73;
    v32.n128_f64[0] = 1.0 / v32.n128_f64[0];
    sub_18D064EF4((uint64_t)&v80, (uint64_t)&v69, (float64x2_t)v32);
    sub_18D053AA8((uint64_t)&v80, (uint64_t)&v69);
    v24 = xmmword_18D319330;
    if (++v23 == a4)
      goto LABEL_47;
  }
  v33 = 0.0;
  v34 = v78;
  v35 = v78;
  v36 = a2;
  do
  {
    v37 = *v35;
    if (*v35 < 0.0 || v37 > 1.0)
    {
      LOWORD(v69) = 2;
      v74 = 4;
      v66 = "ERROR: HMM emission probability matrix is invalid.";
      goto LABEL_48;
    }
    v33 = v33 + v37;
    ++v35;
    --v36;
  }
  while (v36);
  if (fabs(v33) > v9)
  {
    v39 = v83;
    v40 = a2;
    do
    {
      v41 = *v34++;
      *v39 = v41 * *v39;
      ++v39;
      --v40;
    }
    while (v40);
    goto LABEL_32;
  }
LABEL_50:
  LOWORD(v69) = 2;
  v74 = 4;
  v66 = "ERROR: HMM emission probability matrix is null matrix";
LABEL_48:
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v69, &v74, v66, v27, v28, v29, v30, v31, v67);
  return 30;
}

__n128 sub_18D2AD50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)(a1 + 24) = 0x100000001;
  *(_QWORD *)a1 = &unk_1E25C6A40;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
  return result;
}

void sub_18D2AD560(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D2AD574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = 0x400000001;
  *(_QWORD *)a1 = &unk_1E25C6CE0;
  *(_OWORD *)(a1 + 8) = xmmword_18D319840;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  sub_18D053B2C(a2, a3, a1);
}

void sub_18D2AD5D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

uint64_t sub_18D2AD5E4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v3 = *(_DWORD *)(a2 + 8);
  v2 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = 0x100000004;
  *(_QWORD *)a1 = &unk_1E25C7E50;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  return sub_18D073454(a2, a1);
}

uint64_t raven::GNSSPreprocessedMeasurementsChecker::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  char *v18;
  char v20;
  unsigned __int8 v21;
  __int16 v22;

  v8 = *a2;
  if (!*a2 || !*(_BYTE *)(v8 + 33))
  {
    v22 = 12;
    v21 = 4;
    v18 = "Error: GNSSPreprocessedMeasurementsChecker could not be configured. Raven parameters are not initialized.";
LABEL_28:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, v18, a4, a5, a6, a7, a8, v20);
    return 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 168) = v8;
  v9 = *(double *)(v8 + 616);
  if (v9 < -90.0 || v9 > 90.0)
  {
    v22 = 12;
    v21 = 4;
    v18 = "Error: GNSSPreprocessedMeasurementsChecker could not be configured. Invalid gnss_minimum_elevation";
    goto LABEL_28;
  }
  v10 = *(double *)(v8 + 2232);
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v10 < 0.0)
  {
    v22 = 12;
    v21 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "Error: GNSSPreprocessedMeasurementsChecker invalid minimum expected NLOS path delay,%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v10));
    return 0xFFFFFFFFLL;
  }
  v11 = *(double *)(v8 + 2224);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 < 0.0)
  {
    v22 = 12;
    v21 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "Error: GNSSPreprocessedMeasurementsChecker invalid distance travelled for WiFi crosschecks,%.3lfm", a4, a5, a6, a7, a8, SLOBYTE(v11));
    return 0xFFFFFFFFLL;
  }
  v12 = *(double *)(v8 + 2288);
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v12 < 0.0)
  {
    v22 = 12;
    v21 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "Error: GNSSPreprocessedMeasurementsChecker invalid duration for WiFi crosschecks (non-pedestrian),%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v12));
    return 0xFFFFFFFFLL;
  }
  v13 = *(double *)(v8 + 2296);
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 < 0.0)
  {
    v22 = 12;
    v21 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "Error: GNSSPreprocessedMeasurementsChecker invalid duration for WiFi crosschecks (pedestrian),%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v13));
    return 0xFFFFFFFFLL;
  }
  v14 = *(double *)(v8 + 1568);
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < 0.0)
  {
    v22 = 12;
    v21 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "Error: GNSSPreprocessedMeasurementsChecker invalid maximum non-ADR dwell time,%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v14));
    return 0xFFFFFFFFLL;
  }
  v15 = *(double *)(v8 + 1544);
  if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v15 < 0.0 || v15 > 1.0)
  {
    v22 = 12;
    v21 = 4;
    v20 = LOBYTE(v15);
    v18 = "Error: GNSSPreprocessedMeasurementsChecker invalid fraction of sensor cache allowed for back-propagation,%.3lf";
    goto LABEL_28;
  }
  v16 = *(double *)(v8 + 2216);
  if (v16 <= 0.0)
  {
    v22 = 12;
    v21 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "GNSSPreprocessedMeasurementsChecker: Invalid maximum allowed duration since last LOS HMM  WiFi cross-check update,%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v16));
    return 0xFFFFFFFFLL;
  }
  v17 = 0;
  *(double *)(a1 + 24) = v9 * 0.0174532925;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(v8 + 2305);
  *(_BYTE *)(a1 + 80) = 5;
  *(_BYTE *)(a1 + 8) = 1;
  return v17;
}

uint64_t raven::GNSSPreprocessedMeasurementsChecker::CanSvAndMeasurementDataBeIncluded(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  unsigned __int8 v15;
  __int16 v16;

  if (*(_BYTE *)(a1 + 24))
    v2 = *(_DWORD *)(a1 + 28) == -1;
  else
    v2 = 1;
  if (v2)
    return 0;
  switch(*(_BYTE *)(a1 + 24))
  {
    case 1:
      if (!*(_BYTE *)(a2 + 595))
        return 0;
      break;
    case 2:
      if (!*(_BYTE *)(a2 + 594))
        return 0;
      break;
    case 3:
      if (!*(_BYTE *)(a2 + 593))
        return 0;
      break;
    case 4:
      if (!*(_BYTE *)(a2 + 592))
        return 0;
      break;
    case 5:
      if (!*(_BYTE *)(a2 + 596))
        return 0;
      break;
    default:
      break;
  }
  v4 = *(_QWORD *)(a1 + 328);
  if (*(_QWORD *)(a1 + 336) == v4)
    return 0;
  v5 = *(double *)(a1 + 264);
  result = 1;
  if (fabs(v5) <= 1.57079633 && v5 < *(double *)(a2 + 616) * 0.0174532925)
  {
    v7 = *(_QWORD *)v4;
    v8 = *(double *)(v4 + 8);
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)1) <= 1)
    {
      v16 = 12;
      v15 = 1;
      sub_18D181C54(a1);
      v14 = v8 + (double)v7;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "t,%.3lf,%s,GnssPreprocessedMeasurementChecker: Sat excluded,low elevation,%.2f rad, mask,%.2f rad", v9, v10, v11, v12, v13, SLOBYTE(v14));
    }
    return 0;
  }
  return result;
}

uint64_t raven::GNSSPreprocessedMeasurementsChecker::CanObservableBeIncluded(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  double v10;
  float v11;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t result;
  double v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  __int16 v41;

  v8 = *(_DWORD *)(a1 + 96);
  if (!v8)
    return 0;
  v10 = *(double *)(a1 + 104);
  if (v10 <= 0.0)
    return 0;
  v11 = *(float *)(a1 + 168);
  if (v11 <= 0.0 || *(_BYTE *)(a1 + 40) == 0)
    return 0;
  if (*(float *)(a1 + 112) < *(float *)(a4 + 612))
    return 0;
  v13 = *(double *)(a1 + 120);
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (LODWORD(v11) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  switch(*(_BYTE *)(a1 + 100))
  {
    case 1:
      if (!*(_BYTE *)(a4 + 602) && *(_BYTE *)(a2 + 24) == 1)
        return 0;
      if (*(_BYTE *)(a4 + 604))
        goto LABEL_30;
      goto LABEL_21;
    case 2:
      if (!*(_BYTE *)(a4 + 603) && *(_BYTE *)(a2 + 24) == 1)
        return 0;
      if (*(_BYTE *)(a4 + 605))
        goto LABEL_30;
LABEL_21:
      if (*(_BYTE *)(a2 + 24) == 5)
        return 0;
LABEL_30:
      if ((v8 - 2) >= 3)
      {
        if (v8 != 1)
        {
          if (v8 == 5)
            return 0;
          goto LABEL_51;
        }
        if (*(_BYTE *)(a4 + 607))
        {
          switch(*(_BYTE *)(a2 + 24))
          {
            case 0:
              v41 = 12;
              v40 = 4;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "GNSSPreprocessedMeasurementsChecker invalid constellation,%d", a4, a5, a6, a7, a8, 0);
              return 0;
            case 1:
            case 2:
            case 3:
              if (v13 < 15000000.0)
                goto LABEL_65;
              v15 = 30000000.0;
              goto LABEL_50;
            case 4:
              v27 = *(_DWORD *)(a2 + 28);
              if (v27 <= 0x3F && ((1 << v27) & 0xF80000000000003ELL) != 0
                || a3[11] * a3[11] + a3[15] * a3[15] + a3[19] * a3[19] > 9.0e14)
              {
                if (v13 >= 30000000.0 && v13 <= 45000000.0)
                  goto LABEL_51;
                if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
                {
                  v41 = 12;
                  v40 = 1;
                  v28 = sub_18D181C54(a2);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Satellite %s invalid GEO/IGSO range %f", v29, v30, v31, v32, v33, v28);
                }
              }
              else
              {
                if (v13 >= 15000000.0 && v13 <= 30000000.0)
                  goto LABEL_51;
                if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
                {
                  v41 = 12;
                  v40 = 1;
                  v34 = sub_18D181C54(a2);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Satellite %s invalid MEO range %f", v35, v36, v37, v38, v39, v34);
                }
              }
              break;
            case 5:
            case 6:
              if (v13 < 30000000.0)
                goto LABEL_65;
              v15 = 45000000.0;
LABEL_50:
              if (v13 <= v15)
                goto LABEL_51;
LABEL_65:
              if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
              {
                v41 = 12;
                v40 = 1;
                v21 = sub_18D181C54(a2);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Satellite %s invalid range %f", v22, v23, v24, v25, v26, v21);
              }
              return 0;
            default:
              goto LABEL_51;
          }
        }
        return 0;
      }
      if (!*(_BYTE *)(a4 + 606))
        return 0;
      if (v8 == 3)
      {
        if (!*(_BYTE *)(a4 + 609))
          return 0;
      }
      else if (v8 == 4)
      {
        if (!*(_BYTE *)(a4 + 608))
          return 0;
      }
      else if (!*(_BYTE *)(a4 + 610))
      {
        return 0;
      }
      if (fabs(v13 / (299792458.0 / v10)) > 15000.0)
        return 0;
LABEL_51:
      v16 = *(double *)(a4 + 1568);
      v17 = *(double *)(a4 + 648) * 350.0;
      if (v17 >= *(double *)(a4 + 656) * 350.0)
        v17 = *(double *)(a4 + 656) * 350.0;
      if ((v8 - 1) < 2)
        return *(double *)(a1 + 200) - *(double *)(a1 + 192) <= v16;
      if ((v8 - 3) >= 2)
        return v8 != 5;
      v18 = -(v17 * *(double *)(a4 + 1544));
      if (*(_BYTE *)(a4 + 544))
        return *(double *)(a1 + 192) >= v18;
      result = 0;
      v20 = *(double *)(a1 + 192);
      if (*(double *)(a1 + 200) - v20 <= v16 && v20 >= v18)
        return 1;
      return result;
    case 4:
    case 5:
      if (!*(_BYTE *)(a4 + 598))
        return 0;
      goto LABEL_30;
    case 6:
      if (!*(_BYTE *)(a4 + 599))
        return 0;
      goto LABEL_30;
    case 7:
      if (!*(_BYTE *)(a4 + 600))
        return 0;
      goto LABEL_30;
    case 8:
      if (!*(_BYTE *)(a4 + 601))
        return 0;
      goto LABEL_30;
    case 0xA:
      if (!*(_BYTE *)(a4 + 597))
        return 0;
      goto LABEL_30;
    default:
      goto LABEL_30;
  }
}

uint64_t raven::GNSSPreprocessedMeasurementsChecker::HandleEvent(raven::GNSSPreprocessedMeasurementsChecker *this, const raven::GnssPreprocessedMeasurementsEvent *a2, raven::GnssPreprocessedMeasurementsEvent *a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  double v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _QWORD v28[2];
  unsigned __int8 v29;

  if (!*((_BYTE *)this + 8))
  {
    LOWORD(v28[0]) = 12;
    v29 = 4;
    v20 = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *, const raven::GnssPreprocessedMeasurementsEvent *, raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v27 = v21 + (double)v20;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v28, &v29, "t,%.3lf,GNSSPreprocessedMeasurementsChecker, not configured", v22, v23, v24, v25, v26, SLOBYTE(v27));
    return 0xFFFFFFFFLL;
  }
  if ((raven::GNSSMeasurementSelectionParameters::AllMeasurementsExcluded((raven::GNSSMeasurementSelectionParameters *)(*((_QWORD *)this + 21) + 592)) & 1) != 0)
    return 0xFFFFFFFFLL;
  v6 = *((unsigned __int8 *)this + 9);
  v7 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)a3 + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a3 + 8) = v7;
  v8 = *(_OWORD *)((char *)a2 + 40);
  v9 = *(_OWORD *)((char *)a2 + 56);
  v10 = *(_OWORD *)((char *)a2 + 72);
  *((_QWORD *)a3 + 11) = *((_QWORD *)a2 + 11);
  *(_OWORD *)((char *)a3 + 72) = v10;
  *(_OWORD *)((char *)a3 + 56) = v9;
  *(_OWORD *)((char *)a3 + 40) = v8;
  if (v6)
  {
    if (a3 != a2)
      sub_18D189238((uint64_t)a3 + 96, *((uint64_t **)a2 + 12), *((uint64_t **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 4);
    raven::GNSSPreprocessedMeasurementsChecker::UpdateAndPopulateProbabilityLOS(this, (uint64_t **)a3);
    v28[0] = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v28[1] = v11;
    raven::GNSSPreprocessedMeasurementsChecker::RemoveOldLOSEstimators(this, (uint64_t)v28, v12, v13);
    v15 = *((_QWORD *)a3 + 12);
    v14 = *((_QWORD *)a3 + 13);
    if (v15 != v14)
    {
      v16 = v15 + 16;
      do
      {
        v17 = *(_QWORD *)(v16 - 16);
        if (v17)
          v18 = 1;
        else
          v18 = v16 == v14;
        v16 += 16;
      }
      while (!v18);
      if (v17)
        return 0;
      else
        return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  if (a3 != a2)
    sub_18D189238((uint64_t)a3 + 96, *((uint64_t **)a2 + 12), *((uint64_t **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 4);
  return 0;
}

void raven::GNSSPreprocessedMeasurementsChecker::UpdateAndPopulateProbabilityLOS(raven::GNSSPreprocessedMeasurementsChecker *this, uint64_t **a2)
{
  unsigned __int8 *v4;
  _BOOL4 v5;
  unsigned __int8 *v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  double v24;
  int8x16_t v25;
  int8x16_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  void **v52;
  char *v53;
  unint64_t v54;
  float v55;
  float v56;
  _BOOL8 v57;
  unint64_t v58;
  unint64_t v59;
  int8x8_t prime;
  void *v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint8x8_t v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  float64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  int8x16_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::string *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  int v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  char v137;
  uint64_t v138;
  cnprint::CNPrinter *CN0Likelihoods;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  cnprint::CNPrinter *MPFSetLikelihoods;
  uint64_t v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  float64x2_t v170;
  uint64_t *v171;
  uint64_t *v172;
  char *v173;
  _QWORD *v174;
  int v175;
  uint64_t v176;
  int64x2_t v177;
  _BOOL4 v178;
  raven::RavenLineOfSightEstimator *v179;
  float64x2_t v180;
  void *__p[2];
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _BYTE v188[64];
  __int128 v189;
  int64x2_t v190;
  void *v191;
  void *v192;
  char v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  void *v206;
  _OWORD v207[22];
  __int128 v208;
  __int128 v209;
  unsigned __int8 v210;
  uint64_t v211;
  double v212;
  double v213;
  double v214;
  void *v215;
  _QWORD v216[44];
  uint64_t v217;
  double v218;

  if (!*(_BYTE *)(*((_QWORD *)this + 21) + 3816))
    return;
  v4 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if (v4[664])
    v5 = v4[776] - 3 < 2;
  else
    v5 = 0;
  v7 = v4[56];
  v6 = v4 + 56;
  if (v7 >= 2)
  {
    v8 = *((_OWORD *)v6 + 1);
    *((_OWORD *)this + 5) = *(_OWORD *)v6;
    *((_OWORD *)this + 6) = v8;
    v9 = *((_OWORD *)v6 + 2);
    v10 = *((_OWORD *)v6 + 3);
    v11 = *((_OWORD *)v6 + 4);
    *((_QWORD *)this + 20) = *((_QWORD *)v6 + 10);
    *((_OWORD *)this + 8) = v10;
    *((_OWORD *)this + 9) = v11;
    *((_OWORD *)this + 7) = v9;
  }
  v12 = *((unsigned __int8 *)this + 80);
  v178 = 0;
  v217 = ((uint64_t (*)(uint64_t **))(*a2)[2])(a2);
  v218 = v13;
  v20 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  *(int8x16_t *)&v216[25] = v20;
  *(int8x16_t *)&v216[27] = v20;
  *(int8x16_t *)&v216[29] = v20;
  *(int8x16_t *)&v216[31] = v20;
  *(int8x16_t *)&v216[35] = v20;
  *(int8x16_t *)&v216[37] = v20;
  *(int8x16_t *)&v216[39] = v20;
  *(int8x16_t *)&v216[41] = v20;
  v215 = &unk_1E25C21B8;
  memset(v216, 0, 17);
  memset(&v216[3], 0, 17);
  memset(&v216[6], 0, 17);
  v216[10] = 0;
  v216[9] = 0;
  v216[11] = 0x7FF8000000000000;
  memset(&v216[12], 0, 17);
  memset(&v216[15], 0, 17);
  memset(&v216[18], 0, 17);
  v216[21] = 0;
  v216[22] = 0;
  v216[23] = 0x7FF8000000000000;
  LOWORD(v216[24]) = 0;
  BYTE2(v216[24]) = 0;
  v216[33] = 0x7FF8000000000000;
  v216[43] = 0x7FF8000000000000;
  v214 = NAN;
  v213 = NAN;
  if (*(_BYTE *)(*((_QWORD *)this + 21) + 3817))
    v21 = v5;
  else
    v21 = 0;
  LOBYTE(v216[34]) = 0;
  if (v21)
  {
    if (raven::GNSSPreprocessedMeasurementsChecker::GetWiFiPositionForCrossCheck((uint64_t)this, (uint64_t)&v217, (double *)&v215, v14, v15, v16, v17, v18, *(double *)v20.i64, v19))v178 = raven::GNSSPreprocessedMeasurementsChecker::GetClockOffsetForCrossCheck(this, (const raven::GnssPreprocessedMeasurementsEvent *)a2, &v214, &v213);
    else
      v178 = 0;
  }
  v22 = *((unsigned __int8 *)this + 192);
  v173 = (char *)this + 80;
  if (*((_BYTE *)this + 192))
  {
    v23 = CNTimeSpan::operator-((uint64_t)&v217, (_QWORD *)this + 22, v20, v19);
    *(_QWORD *)&v180.f64[0] = v23;
    v180.f64[1] = v24;
    if (v23 < 0 || v24 < 0.0)
    {
      v28 = CNTimeSpan::operator-(v180.f64, v25, v26);
      v27 = v29;
    }
    else
    {
      v27 = v24;
      v28 = v23;
    }
    v25.i64[0] = *(_QWORD *)(*((_QWORD *)this + 21) + 2216);
    v212 = 0.0;
    v211 = 0;
    v30 = CNTimeSpan::SetTimeSpan(&v211, 0, v25, v26);
    if (v28 || (*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if (!v211)
      {
        v31 = v212;
        if ((*(_QWORD *)&v212 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
LABEL_25:
          if (v31 < v27)
          {
LABEL_26:
            if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v30))
            {
              LOWORD(v211) = 12;
              v210 = 0;
              v164 = v218 + (double)v217;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v211, &v210, "GNSSPreprocessedMeasurementsChecker, gating the usage of LOS Estimator other evidence as no wifi cross-check seen recently,t,%.3lf, time_since,%.3lf", v32, v33, v34, v35, v36, SLOBYTE(v164));
            }
            v22 = 0;
            goto LABEL_31;
          }
LABEL_30:
          v22 = 1;
          goto LABEL_31;
        }
      }
      if (v28 != v211)
      {
        if (v28 >= v211)
          goto LABEL_26;
        goto LABEL_30;
      }
    }
    v31 = v212;
    goto LABEL_25;
  }
LABEL_31:
  v37 = (v12 < 0xA) & (0xCu >> v12);
  v38 = *((_QWORD *)this + 21);
  if (*(_BYTE *)(v38 + 2192))
  {
    if (*((_BYTE *)this + 72))
      v39 = v22;
    else
      v39 = 0;
    HIDWORD(v176) = v37 & v39 & v5;
  }
  else
  {
    HIDWORD(v176) = 0;
  }
  if (*(_BYTE *)(v38 + 2193))
  {
    if (!*((_BYTE *)this + 72))
      v22 = 0;
    LODWORD(v176) = v37 & v22 & v5;
  }
  else
  {
    LODWORD(v176) = 0;
  }
  v40 = a2[12];
  v41 = a2[13];
  if (v40 != v41)
  {
    v42 = (uint64_t)__p;
    v174 = (_QWORD *)((char *)this + 48);
    v177 = vdupq_n_s64(0x7FF8000000000000uLL);
    __asm { FMOV            V0.2D, #1.0 }
    v170 = _Q0;
    v171 = v41;
    while (1)
    {
      v47 = *v40;
      if (!*v40)
        goto LABEL_167;
      v48 = *(int *)(v47 + 28);
      v49 = v48 + 1000 * *(unsigned __int8 *)(v47 + 24);
      v50 = *((_QWORD *)this + 5);
      if (v50)
      {
        v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
        v51.i16[0] = vaddlv_u8(v51);
        if (v51.u32[0] > 1uLL)
        {
          v42 = v48 + 1000 * *(unsigned __int8 *)(v47 + 24);
          if (v50 <= v49)
            v42 = v49 % v50;
        }
        else
        {
          v42 = (v50 - 1) & v49;
        }
        v52 = *(void ***)(*((_QWORD *)this + 4) + 8 * v42);
        if (v52)
        {
          v53 = (char *)*v52;
          if (*v52)
          {
            do
            {
              v54 = *((_QWORD *)v53 + 1);
              if (v54 == v49)
              {
                if (*((_DWORD *)v53 + 4) == (_DWORD)v49)
                  goto LABEL_118;
              }
              else
              {
                if (v51.u32[0] > 1uLL)
                {
                  if (v54 >= v50)
                    v54 %= v50;
                }
                else
                {
                  v54 &= v50 - 1;
                }
                if (v54 != v42)
                  break;
              }
              v53 = *(char **)v53;
            }
            while (v53);
          }
        }
      }
      v53 = (char *)operator new(0xE0uLL);
      *(_QWORD *)v53 = 0;
      *((_QWORD *)v53 + 1) = v49;
      *((_DWORD *)v53 + 4) = v49;
      *(_OWORD *)(v53 + 40) = 0u;
      *(_OWORD *)(v53 + 72) = 0u;
      *(_OWORD *)(v53 + 120) = 0u;
      *(_OWORD *)(v53 + 24) = 0u;
      *(_OWORD *)(v53 + 56) = 0u;
      *(_OWORD *)(v53 + 104) = 0u;
      *(_OWORD *)(v53 + 136) = 0u;
      *(_OWORD *)(v53 + 152) = 0u;
      *(_OWORD *)(v53 + 168) = 0u;
      *(_OWORD *)(v53 + 184) = 0u;
      *(_OWORD *)(v53 + 200) = 0u;
      *((_QWORD *)v53 + 27) = 0;
      *(_OWORD *)(v53 + 88) = 0u;
      *((_QWORD *)v53 + 9) = 0x100000002;
      *((_QWORD *)v53 + 5) = &off_1E25B8E68;
      *((_QWORD *)v53 + 6) = &unk_1E25C7520;
      *((_QWORD *)v53 + 10) = v53 + 88;
      *((_QWORD *)v53 + 16) = 0x100000002;
      *((_QWORD *)v53 + 17) = v53 + 144;
      *((_QWORD *)v53 + 21) = 0x3DDB7CDFD9D7BDBBLL;
      *((_QWORD *)v53 + 7) = 0;
      *((_QWORD *)v53 + 8) = 0;
      *((_QWORD *)v53 + 13) = &unk_1E25C7520;
      *((_QWORD *)v53 + 14) = 0;
      *((_QWORD *)v53 + 15) = 0;
      *((_DWORD *)v53 + 40) = 1;
      sub_18D0778AC((_QWORD *)v53 + 22, "");
      v53[200] = 0;
      *((_DWORD *)v53 + 51) = -1;
      *((_QWORD *)v53 + 26) = 0;
      *((_QWORD *)v53 + 27) = 0x7FF8000000000000;
      v55 = (float)(unint64_t)(*((_QWORD *)this + 7) + 1);
      v56 = *((float *)this + 16);
      if (!v50 || (float)(v56 * (float)v50) < v55)
        break;
LABEL_108:
      v73 = *((_QWORD *)this + 4);
      v74 = *(_QWORD **)(v73 + 8 * v42);
      if (v74)
      {
        *(_QWORD *)v53 = *v74;
      }
      else
      {
        *(_QWORD *)v53 = *v174;
        *v174 = v53;
        *(_QWORD *)(v73 + 8 * v42) = v174;
        if (!*(_QWORD *)v53)
          goto LABEL_117;
        v75 = *(_QWORD *)(*(_QWORD *)v53 + 8);
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v75 >= v50)
            v75 %= v50;
        }
        else
        {
          v75 &= v50 - 1;
        }
        v74 = (_QWORD *)(*((_QWORD *)this + 4) + 8 * v75);
      }
      *v74 = v53;
LABEL_117:
      ++*((_QWORD *)this + 7);
LABEL_118:
      v179 = (raven::RavenLineOfSightEstimator *)(v53 + 24);
      if (!v53[24])
      {
        v180 = 0uLL;
        __p[0] = (void *)0x7FF8000000000000;
        sub_18D0778AC(&__p[1], "");
        LOBYTE(v183) = 0;
        DWORD1(v183) = -1;
        v180.f64[0] = *((float64_t *)this + 21);
        *(_QWORD *)&v180.f64[1] = sub_18D25F658(v47);
        __p[0] = v93;
        std::string::operator=((std::string *)&__p[1], (const std::string *)v47);
        *(_QWORD *)&v183 = *(_QWORD *)(v47 + 24);
        if (raven::RavenLineOfSightEstimator::Initialize((uint64_t)v179, (uint64_t *)&v180))
        {
          LOWORD(v211) = 12;
          v210 = 4;
          v94 = sub_18D181C54(v47);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v211, &v210, "GNSSPreprocessedMeasurementsChecker could not initialize LOS estimator,svid,%s", v95, v96, v97, v98, v99, v94);
          if (SHIBYTE(v182) < 0)
            operator delete(__p[1]);
          goto LABEL_167;
        }
        if (SHIBYTE(v182) < 0)
          operator delete(__p[1]);
LABEL_126:
        v172 = v40;
        v100 = *(_QWORD *)(v47 + 328);
        v42 = *(_QWORD *)(v47 + 336);
        if (v100 == v42)
        {
LABEL_166:
          *(double *)(v47 + 296) = raven::RavenLineOfSightEstimator::GetProbabilityLOS(v179);
          *(_BYTE *)(v47 + 304) = 1;
          v41 = v171;
          v40 = v172;
          goto LABEL_167;
        }
        v175 = (int)(*(double *)(v47 + 264) * 57.2957795 + 0.5);
        while (2)
        {
          v101 = *(_DWORD *)(v100 + 96);
          if (v101)
            _ZF = v101 == 5;
          else
            _ZF = 1;
          if (_ZF)
          {
            LOWORD(v180.f64[0]) = 12;
            LOBYTE(v211) = 4;
            v104 = *(_QWORD *)v100;
            v103 = *(double *)(v100 + 8);
            sub_18D181C54(v47);
            v165 = v103 + (double)v104;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v211, "GNSSPreprocessedMeasurementsChecker,t,%.3lf,invalid measurement type,svid,%s,type,%d", v105, v106, v107, v108, v109, SLOBYTE(v165));
          }
          else if (v101 == 1)
          {
            if (v178)
            {
              v180.f64[0] = 0.0;
              v180.f64[1] = NAN;
              __p[0] = 0;
              __p[1] = 0;
              LOBYTE(v182) = 0;
              *((_QWORD *)&v182 + 1) = 0;
              *(_QWORD *)&v183 = 0;
              BYTE8(v183) = 0;
              v184 = 0uLL;
              LOBYTE(v185) = 0;
              *((_QWORD *)&v185 + 1) = 0;
              *(_QWORD *)&v186 = 0;
              *((_QWORD *)&v186 + 1) = 0x7FF8000000000000;
              LODWORD(v187) = 0;
              BYTE4(v187) = 0;
              *((_QWORD *)&v187 + 1) = 0x7FF8000000000000;
              *(int64x2_t *)&v188[8] = v177;
              *(int64x2_t *)&v188[24] = v177;
              *(int64x2_t *)&v188[40] = v177;
              *(_DWORD *)v188 = 2143289344;
              *(_DWORD *)&v188[56] = 2143289344;
              v188[60] = 0;
              LOBYTE(v189) = 0;
              BYTE4(v189) = 0;
              BYTE8(v189) = 0;
              WORD6(v189) = 0;
              BYTE14(v189) = 1;
              v190 = v177;
              v191 = &unk_1E25B9850;
              v110 = (std::string *)sub_18D0778AC(&v192, "");
              LOBYTE(v194) = 0;
              HIDWORD(v194) = -1;
              v195 = 0u;
              v196 = 0u;
              v197 = 0u;
              v198 = 0u;
              v199 = 0u;
              v200 = 0u;
              v201 = 0u;
              v202 = 0u;
              v203 = 0u;
              v204 = 0u;
              v205 = 0u;
              memset(v207, 0, 17);
              *((_QWORD *)&v207[1] + 1) = 0;
              *(_QWORD *)&v207[2] = 0;
              BYTE8(v207[2]) = 0;
              memset(&v207[3], 0, 17);
              *((_QWORD *)&v207[4] + 1) = 0;
              *(_QWORD *)&v207[5] = 0;
              v206 = &unk_1E25C21B8;
              *((_QWORD *)&v207[5] + 1) = 0x7FF8000000000000;
              memset(&v207[6], 0, 17);
              *((_QWORD *)&v207[7] + 1) = 0;
              *(_QWORD *)&v207[8] = 0;
              BYTE8(v207[8]) = 0;
              memset(&v207[9], 0, 17);
              *((_QWORD *)&v207[10] + 1) = 0;
              *(_QWORD *)&v207[11] = 0;
              *((_QWORD *)&v207[11] + 1) = 0x7FF8000000000000;
              LOWORD(v207[12]) = 0;
              BYTE2(v207[12]) = 0;
              *((_QWORD *)&v207[12] + 1) = 0x7FF8000000000000;
              v207[13] = v177;
              v207[14] = v177;
              v207[15] = v177;
              v207[16] = v177;
              LOBYTE(v207[17]) = 0;
              *((_QWORD *)&v207[17] + 1) = 0x7FF8000000000000;
              v207[18] = v177;
              v207[19] = v177;
              v207[20] = v177;
              v207[21] = v177;
              v208 = 0u;
              v209 = 0u;
              v180 = *((float64x2_t *)v53 + 13);
              v111 = *(_OWORD *)(v100 + 144);
              v112 = *(_OWORD *)(v100 + 160);
              v113 = *(_OWORD *)(v100 + 176);
              v190 = *(int64x2_t *)(v100 + 192);
              *(_OWORD *)__p = *(_OWORD *)v100;
              v114 = *(_OWORD *)(v100 + 16);
              v115 = *(_OWORD *)(v100 + 32);
              v116 = *(_OWORD *)(v100 + 64);
              v184 = *(_OWORD *)(v100 + 48);
              v185 = v116;
              v182 = v114;
              v183 = v115;
              v117 = *(_OWORD *)(v100 + 80);
              v118 = *(_OWORD *)(v100 + 96);
              v119 = *(_OWORD *)(v100 + 128);
              *(_OWORD *)v188 = *(_OWORD *)(v100 + 112);
              *(_OWORD *)&v188[16] = v119;
              v186 = v117;
              v187 = v118;
              *(_OWORD *)&v188[48] = v112;
              v189 = v113;
              *(_OWORD *)&v188[32] = v111;
              std::string::operator=(v110, (const std::string *)(v47 + 40));
              v194 = *(_QWORD *)(v47 + 64);
              v120 = *(_OWORD *)(v47 + 72);
              v121 = *(_OWORD *)(v47 + 104);
              v196 = *(_OWORD *)(v47 + 88);
              v197 = v121;
              v195 = v120;
              v122 = *(_OWORD *)(v47 + 120);
              v123 = *(_OWORD *)(v47 + 136);
              v124 = *(_OWORD *)(v47 + 168);
              v200 = *(_OWORD *)(v47 + 152);
              v201 = v124;
              v198 = v122;
              v199 = v123;
              v125 = *(_OWORD *)(v47 + 184);
              v126 = *(_OWORD *)(v47 + 200);
              v127 = *(_OWORD *)(v47 + 232);
              v204 = *(_OWORD *)(v47 + 216);
              v205 = v127;
              v202 = v125;
              v203 = v126;
              memcpy(v207, v216, sizeof(v207));
              *(double *)&v208 = v214;
              *((double *)&v208 + 1) = v213;
              *(_QWORD *)&v209 = *(_QWORD *)(*((_QWORD *)this + 21) + 2232);
              *((_QWORD *)&v209 + 1) = *((_QWORD *)v53 + 21);
              v128 = raven::RavenLineOfSightEstimator::Update((uint64_t)v179, (uint64_t)&v180);
              if (v128)
              {
                LOWORD(v211) = 12;
                v210 = 4;
                v129 = *(_QWORD *)v100;
                v130 = *(double *)(v100 + 8);
                sub_18D181C54(v47);
                v166 = v130 + (double)v129;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v211, &v210, "GNSSPreprocessedMeasurementsChecker,t,%.3lf,could not update LOS estimator using WiFi cross-check,svid,%s", v131, v132, v133, v134, v135, SLOBYTE(v166));
              }
              else
              {
                v136 = *((unsigned __int8 *)this + 192);
                *((_OWORD *)this + 11) = *((_OWORD *)v53 + 13);
                if (!v136)
                  *((_BYTE *)this + 192) = 1;
              }
              v191 = &unk_1E25B9850;
              if (v193 < 0)
                operator delete(v192);
              v137 = BYTE4(v176) | v176;
              if (v128)
                v137 = 0;
              if ((v137 & 1) != 0)
              {
LABEL_147:
                v180 = 0uLL;
                *(_OWORD *)__p = *((_OWORD *)v53 + 13);
                v138 = *((_QWORD *)this + 21) + 2304;
                if (HIDWORD(v176))
                {
                  CN0Likelihoods = (cnprint::CNPrinter *)raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::GetCN0Likelihoods(*((_QWORD *)this + 21) + 2304, (char *)(v100 + 100), v175, *(float *)(v100 + 112), (uint64_t)v173, v180.f64, &v180.f64[1], v85, v86);
                  if ((_DWORD)CN0Likelihoods
                    || (CN0Likelihoods = (cnprint::CNPrinter *)raven::RavenLineOfSightEstimator::Update((uint64_t)v179, v180.f64), (_DWORD)CN0Likelihoods))
                  {
                    if (cnprint::CNPrinter::GetLogLevel(CN0Likelihoods) <= 1)
                    {
                      LOWORD(v211) = 12;
                      v210 = 1;
                      v140 = *(_QWORD *)v100;
                      v141 = *(double *)(v100 + 8);
                      sub_18D181C54(v47);
                      v167 = v141 + (double)v140;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v211, &v210, "GNSSPreprocessedMeasurementsChecker,t,%.3lf,could not update LOS estimator using C/N0 likelihoods,svid,%s,lookuptableReturnCode,%d", v142, v143, v144, v145, v146, SLOBYTE(v167));
                    }
                  }
                }
                if ((_DWORD)v176)
                {
                  v147 = *(unsigned __int8 *)(v100 + 100);
                  if (v147 > 0xA)
                  {
LABEL_156:
                    MPFSetLikelihoods = (cnprint::CNPrinter *)raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::GetMPFSetLikelihoods(v138, (char *)(v100 + 100), v175, (uint64_t)v173, v180.f64, &v180.f64[1], v85, v86);
                    if ((_DWORD)MPFSetLikelihoods)
                    {
                      if (cnprint::CNPrinter::GetLogLevel(MPFSetLikelihoods) <= 1)
                      {
                        LOWORD(v211) = 12;
                        v210 = 1;
                        v149 = *(_QWORD *)v100;
                        v150 = *(double *)(v100 + 8);
                        sub_18D181C54(v47);
                        v168 = v150 + (double)v149;
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v211, &v210, "GNSSPreprocessedMeasurementsChecker,t,%.3lf,LOS estimator could not get MPF Set likelihoods from lookup tables,svid,%s,lookuptableReturnCode,%d", v151, v152, v153, v154, v155, SLOBYTE(v168));
                      }
                    }
                    else
                    {
                      if (*(_BYTE *)(v100 + 189) != 1)
                        v180 = vsubq_f64(v170, v180);
                      if (raven::RavenLineOfSightEstimator::Update((uint64_t)v179, v180.f64))
                      {
                        LOWORD(v211) = 12;
                        v210 = 4;
                        v156 = *(_QWORD *)v100;
                        v157 = *(double *)(v100 + 8);
                        sub_18D181C54(v47);
                        v169 = v157 + (double)v156;
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v211, &v210, "GNSSPreprocessedMeasurementsChecker,t,%.3lf,could not update LOS estimator using MPF Set likelihoods,svid,%s", v158, v159, v160, v161, v162, SLOBYTE(v169));
                      }
                    }
                  }
                  else if (((1 << v147) & 0x544) != 0)
                  {
                    if (*(float *)(v100 + 112) > *(float *)(*((_QWORD *)this + 21) + 2208))
                      goto LABEL_156;
                  }
                  else if (*(_BYTE *)(v100 + 100))
                  {
                    goto LABEL_156;
                  }
                }
              }
            }
            else if (v176)
            {
              goto LABEL_147;
            }
          }
          v100 += 208;
          if (v100 == v42)
            goto LABEL_166;
          continue;
        }
      }
      v180.f64[0] = 0.0;
      v180.f64[1] = NAN;
      *(_QWORD *)&v180.f64[0] = sub_18D25F658(v47);
      v180.f64[1] = v76;
      if (!raven::RavenLineOfSightEstimator::Predict((uint64_t)v179, (uint64_t)&v180, v83, v84, v77, v78, v79, v80, v81, v82))goto LABEL_126;
      LOWORD(v211) = 12;
      v210 = 4;
      v87 = sub_18D181C54(v47);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v211, &v210, "GNSSPreprocessedMeasurementsChecker could not predict LOS estimator,svid,%s", v88, v89, v90, v91, v92, v87);
      v53[24] = 0;
      *((_QWORD *)v53 + 26) = 0;
      *((_QWORD *)v53 + 27) = 0x7FF8000000000000;
LABEL_167:
      v40 += 2;
      if (v40 == v41)
        return;
    }
    v57 = v50 < 3 || (v50 & (v50 - 1)) != 0;
    v58 = v57 | (2 * v50);
    v59 = vcvtps_u32_f32(v55 / v56);
    if (v58 <= v59)
      prime = (int8x8_t)v59;
    else
      prime = (int8x8_t)v58;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v50 = *((_QWORD *)this + 5);
    if (*(_QWORD *)&prime > v50)
      goto LABEL_74;
    if (*(_QWORD *)&prime < v50)
    {
      v67 = vcvtps_u32_f32((float)*((unint64_t *)this + 7) / *((float *)this + 16));
      if (v50 < 3 || (v68 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
      {
        v67 = std::__next_prime(v67);
      }
      else
      {
        v69 = 1 << -(char)__clz(v67 - 1);
        if (v67 >= 2)
          v67 = v69;
      }
      if (*(_QWORD *)&prime <= v67)
        prime = (int8x8_t)v67;
      if (*(_QWORD *)&prime >= v50)
      {
        v50 = *((_QWORD *)this + 5);
      }
      else
      {
        if (prime)
        {
LABEL_74:
          if (*(_QWORD *)&prime >> 61)
            sub_18D0788A0();
          v61 = operator new(8 * *(_QWORD *)&prime);
          v62 = (void *)*((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v61;
          if (v62)
            operator delete(v62);
          v63 = 0;
          *((int8x8_t *)this + 5) = prime;
          do
            *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v63++) = 0;
          while (*(_QWORD *)&prime != v63);
          v64 = (_QWORD *)*v174;
          if (*v174)
          {
            v65 = v64[1];
            v66 = (uint8x8_t)vcnt_s8(prime);
            v66.i16[0] = vaddlv_u8(v66);
            if (v66.u32[0] > 1uLL)
            {
              if (v65 >= *(_QWORD *)&prime)
                v65 %= *(_QWORD *)&prime;
            }
            else
            {
              v65 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v65) = v174;
            v70 = (_QWORD *)*v64;
            if (*v64)
            {
              do
              {
                v71 = v70[1];
                if (v66.u32[0] > 1uLL)
                {
                  if (v71 >= *(_QWORD *)&prime)
                    v71 %= *(_QWORD *)&prime;
                }
                else
                {
                  v71 &= *(_QWORD *)&prime - 1;
                }
                if (v71 != v65)
                {
                  v72 = *((_QWORD *)this + 4);
                  if (!*(_QWORD *)(v72 + 8 * v71))
                  {
                    *(_QWORD *)(v72 + 8 * v71) = v64;
                    goto LABEL_99;
                  }
                  *v64 = *v70;
                  *v70 = **(_QWORD **)(*((_QWORD *)this + 4) + 8 * v71);
                  **(_QWORD **)(*((_QWORD *)this + 4) + 8 * v71) = v70;
                  v70 = v64;
                }
                v71 = v65;
LABEL_99:
                v64 = v70;
                v70 = (_QWORD *)*v70;
                v65 = v71;
              }
              while (v70);
            }
          }
          v50 = (unint64_t)prime;
          goto LABEL_103;
        }
        v163 = (void *)*((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = 0;
        if (v163)
          operator delete(v163);
        v50 = 0;
        *((_QWORD *)this + 5) = 0;
      }
    }
LABEL_103:
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v50 <= v49)
        v42 = v49 % v50;
      else
        v42 = v49;
    }
    else
    {
      v42 = (v50 - 1) & v49;
    }
    goto LABEL_108;
  }
}

void sub_18D2AEED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void raven::GNSSPreprocessedMeasurementsChecker::RemoveOldLOSEstimators(_QWORD *a1, uint64_t a2, double a3, int8x16_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  cnprint::CNPrinter *v8;
  double v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  void *__p[2];
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int16 v33;

  v5 = a1 + 6;
  v4 = (_QWORD *)a1[6];
  if (v4)
  {
    while (1)
    {
      *(_OWORD *)__p = *((_OWORD *)v4 + 13);
      v8 = (cnprint::CNPrinter *)CNTimeSpan::operator-(a2, __p, *(int8x16_t *)__p, a4);
      *(double *)a4.i64 = (double)(uint64_t)v8;
      if (v9 + (double)(uint64_t)v8 > *(double *)(a1[21] + 2200))
        break;
      v12 = (_QWORD *)*v4;
LABEL_38:
      v4 = v12;
      if (!v12)
        return;
    }
    if (cnprint::CNPrinter::GetLogLevel(v8) <= 1)
    {
      v33 = 12;
      v32 = 1;
      v10 = *(_QWORD *)a2;
      v11 = *(double *)(a2 + 8);
      if (*((char *)v4 + 199) < 0)
      {
        sub_18D077798(__p, (void *)v4[22], v4[23]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v4 + 11);
        v30 = v4[24];
      }
      v31 = v4[25];
      sub_18D181C54((uint64_t)__p);
      v28 = v11 + (double)v10;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "GNSSPreprocessedMeasurementsChecker,t,%.3lf,removing LOS estimator,%s,age,%.2lf,max_age,%.2lf", v13, v14, v15, v16, v17, SLOBYTE(v28));
      if (SHIBYTE(v30) < 0)
        operator delete(__p[0]);
    }
    v18 = (int8x8_t)a1[5];
    v12 = (_QWORD *)*v4;
    v19 = v4[1];
    v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(_QWORD *)&v18)
        v19 %= *(_QWORD *)&v18;
    }
    else
    {
      v19 &= *(_QWORD *)&v18 - 1;
    }
    v21 = a1[4];
    v22 = *(_QWORD **)(v21 + 8 * v19);
    do
    {
      v23 = v22;
      v22 = (_QWORD *)*v22;
    }
    while (v22 != v4);
    if (v23 == v5)
      goto LABEL_41;
    v24 = v23[1];
    if (v20.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&v18)
        v24 %= *(_QWORD *)&v18;
    }
    else
    {
      v24 &= *(_QWORD *)&v18 - 1;
    }
    v25 = (_QWORD *)*v4;
    if (v24 != v19)
    {
LABEL_41:
      if (v12)
      {
        v26 = v12[1];
        if (v20.u32[0] > 1uLL)
        {
          v27 = v12[1];
          if (v26 >= *(_QWORD *)&v18)
            v27 = v26 % *(_QWORD *)&v18;
        }
        else
        {
          v27 = v26 & (*(_QWORD *)&v18 - 1);
        }
        v25 = (_QWORD *)*v4;
        if (v27 == v19)
          goto LABEL_31;
      }
      *(_QWORD *)(v21 + 8 * v19) = 0;
      v25 = (_QWORD *)*v4;
    }
    if (!v25)
    {
LABEL_37:
      *v23 = v25;
      *v4 = 0;
      --a1[7];
      sub_18D2AFA78(1, (void **)v4);
      goto LABEL_38;
    }
    v26 = v25[1];
LABEL_31:
    if (v20.u32[0] > 1uLL)
    {
      if (v26 >= *(_QWORD *)&v18)
        v26 %= *(_QWORD *)&v18;
    }
    else
    {
      v26 &= *(_QWORD *)&v18 - 1;
    }
    if (v26 != v19)
    {
      *(_QWORD *)(a1[4] + 8 * v26) = v23;
      v25 = (_QWORD *)*v4;
    }
    goto LABEL_37;
  }
}

void sub_18D2AF1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL raven::GNSSPreprocessedMeasurementsChecker::GetClockOffsetForCrossCheck(raven::GNSSPreprocessedMeasurementsChecker *this, const raven::GnssPreprocessedMeasurementsEvent *a2, double *a3, double *a4)
{
  cnprint::CNPrinter *v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t **v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t **v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  double v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  double v44;
  _BOOL8 v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  unsigned __int8 v57;
  uint64_t v58[2];
  uint64_t v59;
  double v60;
  double v61[2];
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];

  if (!*((_BYTE *)this + 8))
    return 0;
  v8 = (cnprint::CNPrinter *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (uint64_t)v8;
  v64[0] = v8;
  *(double *)&v64[1] = v10;
  v11 = v10;
  if (!*((_BYTE *)a2 + 48) || !*((_BYTE *)a2 + 32) || !*((_BYTE *)a2 + 64))
  {
    if (cnprint::CNPrinter::GetLogLevel(v8) <= 1)
    {
      LOWORD(v62) = 12;
      LOBYTE(v61[0]) = 1;
      v53 = v11 + (double)v9;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)v61, "GNSSPreprocessedMeasurementsChecker,t,%.3lf,cannot determine the time of previous GNSS measurement", v24, v25, v26, v27, v28, SLOBYTE(v53));
    }
    return 0;
  }
  v12 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3390E6);
  if (!v12 || (v15 = v12, !*((_BYTE *)v12 + 2008)))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v12) <= 1)
    {
      LOWORD(v62) = 12;
      LOBYTE(v61[0]) = 1;
      v54 = v11 + (double)v9;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)v61, "GNSSPreprocessedMeasurementsChecker,no clock bias estimate available,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v54));
    }
    return 0;
  }
  v13.i64[0] = *(_QWORD *)(*((_QWORD *)this + 21) + 3472);
  v62 = 0;
  v63 = 0;
  CNTimeSpan::SetTimeSpan(&v62, 0, v13, v14);
  v18 = CNTimeSpan::operator-((uint64_t)v64, v15 + 149, v16, v17);
  v22 = v18;
  *(_QWORD *)&v61[0] = v18;
  v61[1] = v19;
  v23 = v19;
  if (v18 < 0 || v19 < 0.0)
  {
    v18 = CNTimeSpan::operator-(v61, v20, v21);
    v20.i64[0] = v35;
    if (v18)
      goto LABEL_18;
  }
  else
  {
    *(double *)v20.i64 = v19;
    if (v18)
      goto LABEL_18;
  }
  if ((v20.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    goto LABEL_21;
LABEL_18:
  if (!v62)
  {
    v21.i64[0] = v63;
    if ((v63 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_22;
  }
  v36 = v18 <= v62;
  if (v18 == v62)
  {
LABEL_21:
    v21.i64[0] = v63;
LABEL_22:
    v36 = *(double *)v20.i64 <= *(double *)v21.i64;
  }
  if (!v36)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
    {
      LOWORD(v59) = 12;
      LOBYTE(v58[0]) = 1;
      v55 = v11 + (double)v9;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)v58, "GNSSPreprocessedMeasurementsChecker,time difference too large for clock bias prediction,t_gps,%.3lf,t_wifi,%.3lf", v37, v38, v39, v40, v41, SLOBYTE(v55));
    }
    return 0;
  }
  if (!*((_BYTE *)a2 + 64))
    goto LABEL_34;
  v20.i64[0] = *((_QWORD *)a2 + 7);
  v58[0] = 0;
  v58[1] = 0;
  CNTimeSpan::SetTimeSpan(v58, 0, v20, v21);
  v59 = CNTimeSpan::operator-((uint64_t)v64, v58, v42, v43);
  v60 = v44;
  v45 = sub_18D03FE4C((double *)v15 + 149, (double *)&v59);
  v46 = v45;
  if (v45)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v45) <= 1)
    {
      LOWORD(v58[0]) = 12;
      v57 = 1;
      v56 = v60 + (double)v59;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v58, &v57, "GNSSPreprocessedMeasurementsChecker,stale solution,t_last_gps,%.3lf,t_wifi,%.3lf", v47, v48, v49, v50, v51, SLOBYTE(v56));
    }
    return !v46;
  }
  if (!*((_BYTE *)a2 + 32) || !*((_BYTE *)a2 + 48))
LABEL_34:
    sub_18D164CA0();
  v52 = v23 + (double)v22;
  *a3 = (*((double *)a2 + 3) - *((double *)a2 + 5) + *((double *)v15 + 252) + *((double *)v15 + 253) * v52) * 1000000.0;
  *a4 = sqrt(*((double *)v15 + 254) + (v52 * *((double *)v15 + 256) + *((double *)v15 + 255) * 2.0) * v52) * 1000000.0;
  return !v46;
}

uint64_t raven::GNSSPreprocessedMeasurementsChecker::GetWiFiPositionForCrossCheck(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  double v11;
  _BYTE *v13;
  unsigned int v14;
  char *v16;
  int8x16_t *v17;
  unsigned __int8 *v18;
  unsigned __int8 v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t **v34;
  cnprint::CNPrinter *v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  char v40;
  __int16 v41;
  _QWORD v42[2];
  int8x16_t v43;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  a10.i64[0] = *(_QWORD *)(a2 + 8);
  v11 = *(double *)a10.i64 + (double)*(uint64_t *)a2;
  if (COERCE__INT64(fabs(v11)) > 0x7FEFFFFFFFFFFFFFLL || v11 < 0.0)
  {
    v43.i16[0] = 12;
    LOBYTE(v42[0]) = 4;
    LOBYTE(v39) = LOBYTE(v11);
    v16 = "GNSSPreprocessedMeasurementsChecker,invalid time,%.3lf";
    goto LABEL_14;
  }
  v13 = *(_BYTE **)(a1 + 16);
  if (!v13[1152] || !v13[1440])
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) > 1)
      return 0;
    v43.i16[0] = 12;
    LOBYTE(v42[0]) = 1;
    v39 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
    v16 = "GNSSPreprocessedMeasurementsChecker,no wifi solution to cross-check,%.3lf";
    goto LABEL_14;
  }
  v14 = v13[1360];
  if (v14 <= 0xF && ((1 << v14) & 0xF7EF) != 0)
  {
    v43.i16[0] = 12;
    LOBYTE(v42[0]) = 4;
    LOBYTE(v39) = LOBYTE(v11);
    v16 = "GNSSPreprocessedMeasurementsChecker,wifi solution has non-wifi source,time,%.3lf,source,%d";
LABEL_14:
    v17 = &v43;
    v18 = (unsigned __int8 *)v42;
LABEL_15:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v17, v18, v16, a4, a5, a6, a7, a8, SLOBYTE(v39));
    return 0;
  }
  v21 = atomic_load((unsigned __int8 *)qword_1ECF243F0);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(qword_1ECF243F0))
  {
    qword_1ECF24420 = 0;
    xmmword_1ECF24400 = 0u;
    xmmword_1ECF24410 = 0u;
    __cxa_guard_release(qword_1ECF243F0);
  }
  v22 = *(int8x16_t **)(a1 + 16);
  if (!v22[72].i8[0])
    goto LABEL_50;
  v43 = v22[79];
  *(double *)v24.i64 = (double)CNTimeSpan::operator-((uint64_t)&xmmword_1ECF24400, &v43, v43, a10);
  if (v25 + *(double *)v24.i64 != 0.0)
  {
    qword_1ECF24420 = 0;
    xmmword_1ECF24400 = 0u;
    xmmword_1ECF24410 = 0u;
    v26 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v26 + 1152))
      goto LABEL_50;
    xmmword_1ECF24400 = *(_OWORD *)(v26 + 1264);
    v23.i64[1] = *((_QWORD *)&xmmword_1ECF24400 + 1);
    xmmword_1ECF24410 = xmmword_1ECF24400;
    v22 = *(int8x16_t **)(a1 + 16);
  }
  v27 = 2288;
  if ((*(_BYTE *)(a1 + 80) & 0xFE) == 2)
    v27 = 2296;
  v23.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 168) + v27);
  v43 = 0uLL;
  CNTimeSpan::SetTimeSpan(v43.i64, 0, v23, v24);
  if (!v22[72].i8[0])
LABEL_50:
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  v30 = v22[79].i64[1];
  v42[0] = v22[79].i64[0];
  v42[1] = v30;
  v31 = CNTimeSpan::operator-(a2, v42, v28, v29);
  if (v31)
  {
    if (v31 < 0)
      goto LABEL_43;
  }
  else
  {
    if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v32 < 0.0)
        goto LABEL_43;
LABEL_36:
      v33 = *(double *)&v43.i64[1];
      goto LABEL_37;
    }
    if (v32 < 0.0)
      goto LABEL_43;
  }
  if (v43.i64[0] || (v33 = *(double *)&v43.i64[1], (v43.i64[1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
  {
    if (v31 != v43.i64[0])
    {
      if (v31 <= v43.i64[0])
        goto LABEL_38;
LABEL_43:
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v31))
        return 0;
      v41 = 12;
      v40 = 0;
      v39 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
      v16 = "GNSSPreprocessedMeasurementsChecker,time misalignment too large for WiFi cross-check,t_gps,%.3lf,t_wifi,%.3lf";
      goto LABEL_47;
    }
    goto LABEL_36;
  }
LABEL_37:
  if (v33 < v32)
    goto LABEL_43;
LABEL_38:
  v34 = sub_18D041348((int8x16_t *)v22[1].i64, (unsigned __int8 *)&unk_18D3390E6);
  if (!v34 || !*((_BYTE *)v34 + 1368))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v34) > 1)
      return 0;
    v41 = 12;
    v40 = 1;
    v39 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
    v16 = "GNSSPreprocessedMeasurementsChecker,no user speed to account for time misalignment,t_gps,%.3lf,t_wifi,%.3lf";
LABEL_47:
    v17 = (int8x16_t *)&v41;
    v18 = (unsigned __int8 *)&v40;
    goto LABEL_15;
  }
  v35 = (cnprint::CNPrinter *)sub_18D2AF944((double *)a2, *((double *)v34 + 172));
  v36 = *(double *)&qword_1ECF24420;
  if (*(double *)&qword_1ECF24420 > *(double *)(*(_QWORD *)(a1 + 168) + 2224))
  {
    if (cnprint::CNPrinter::GetLogLevel(v35))
      return 0;
    v41 = 12;
    v40 = 0;
    v39 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
    v16 = "GNSSPreprocessedMeasurementsChecker,distance travelled too large for WiFi cross-check,t_gps,%.3lf,dist_travelled,%.3lf";
    goto LABEL_47;
  }
  v37 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v37 + 1152))
    __assert_rtn("get", "optional.hpp", 1211, "this->is_initialized()");
  memcpy(a3 + 1, (const void *)(v37 + 1168), 0x160uLL);
  v38 = v36 * v36 * 0.333333333;
  a3[39] = v38 + a3[39];
  a3[42] = v38 + a3[42];
  a3[44] = v38 + a3[44];
  return 1;
}

uint64_t sub_18D2AF944(double *a1, double a2)
{
  uint64_t result;
  int8x16_t v5;
  int8x16_t v6;
  double v7;

  result = sub_18D03F608(a1, (double *)&xmmword_1ECF24410);
  if ((_DWORD)result)
  {
    result = CNTimeSpan::operator-((uint64_t)a1, &xmmword_1ECF24410, v5, v6);
    *(double *)&qword_1ECF24420 = *(double *)&qword_1ECF24420 + a2 * (v7 + (double)result);
    xmmword_1ECF24410 = *(_OWORD *)a1;
  }
  return result;
}

_QWORD *sub_18D2AF9AC(_QWORD *a1)
{
  *a1 = &off_1E25C41F8;
  sub_18D072BFC((uint64_t)(a1 + 4));
  return a1;
}

_QWORD *sub_18D2AF9DC(_QWORD *result)
{
  result[8] = &unk_1E25C5E70;
  *result = &off_1E25B8E68;
  result[1] = &unk_1E25C5E70;
  return result;
}

void sub_18D2AF9FC(_QWORD *a1)
{
  a1[8] = &unk_1E25C5E70;
  *a1 = &off_1E25B8E68;
  a1[1] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

double sub_18D2AFA2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x100000002;
  *(_QWORD *)a2 = &unk_1E25C7520;
  *(_OWORD *)(a2 + 8) = xmmword_18D319330;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 120))
    v2 = a1 + 64;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

void sub_18D2AFA78(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 199) < 0)
      operator delete(__p[22]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF *raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF::CN0StandardNormalCDF(raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF *this)
{
  unint64_t i;
  float v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  for (i = 0; i != 99; ++i)
  {
    v3 = (float)((float)((float)i * 10.0) / 99.0) + -5.0;
    *((double *)this + i + 50) = cnstatistics::NormalCDF(this, v3, 0.0, 1.0);
    *((float *)this + i) = v3;
  }
  v7 = 0x4014000000000000;
  v6 = xmmword_18D319B10;
  sub_18D15A7C8((double *)&v6, (double *)&v7);
  *((_QWORD *)this + 149) = v4;
  *((_DWORD *)this + 99) = 1084227584;
  return this;
}

double raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF::GetCDFValue(raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF *this, float a2)
{
  unint64_t v2;
  float v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (a2 <= -5.0)
    return *((double *)this + 50);
  if (a2 >= 5.0)
    return *((double *)this + 149);
  v2 = (unint64_t)((float)((float)(a2 + 5.0) * 10.0) + 0.5);
  if (v2 >= 0x64)
    return *((double *)this + 149);
  v4 = vabds_f32(a2, *((float *)this + v2));
  if (v2 == 99)
    goto LABEL_9;
  v5 = v2 + 1;
  if (v4 <= vabds_f32(a2, *((float *)this + v2 + 1)))
  {
    if (v2)
    {
LABEL_9:
      v5 = (unint64_t)((float)((float)(a2 + 5.0) * 10.0) + 0.5);
      if (v4 > vabds_f32(a2, *((float *)this + v2 - 1)))
        v5 = v2 - 1;
      goto LABEL_12;
    }
    v5 = 0;
  }
LABEL_12:
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = 98;
  if (v5 < 0x62)
    v7 = v5;
  return (*((double *)this + v6 + 50) + *((double *)this + v5 + 50) + *((double *)this + v7 + 51)) * 0.333333333;
}

BOOL raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::Initialize(raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor *this, const raven::RavenPlatformInfo *a2)
{
  cnprint::CNPrinter *GnssChipset;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL8 result;
  char v21;
  __int128 v22;
  unsigned __int8 v23;

  *((_BYTE *)this + 1) = 1;
  GnssChipset = (cnprint::CNPrinter *)CNPlatformInfo::GetGnssChipset(a2);
  switch((int)GnssChipset)
  {
    case 4:
      v8 = qword_1ECF24428;
      if (!qword_1ECF24428)
      {
        v8 = operator new[]();
        *(_OWORD *)v8 = xmmword_18D3391F8;
        *(_QWORD *)(v8 + 16) = 0x41F03D7141F0147BLL;
        *(_DWORD *)(v8 + 24) = 1084227584;
        *(_OWORD *)(v8 + 28) = xmmword_18D339210;
        *(_QWORD *)(v8 + 44) = 0x3C2C32233D29E6EFLL;
        *(_BYTE *)(v8 + 52) = 1;
        *(_OWORD *)(v8 + 56) = xmmword_18D339228;
        *(_QWORD *)(v8 + 72) = 0x41D7AE1441D5D70ALL;
        *(_DWORD *)(v8 + 80) = 1084227584;
        *(_QWORD *)(v8 + 100) = 0x3C0DB8BB3D191149;
        *(_OWORD *)(v8 + 84) = xmmword_18D339240;
        *(_BYTE *)(v8 + 108) = 1;
        *(_OWORD *)(v8 + 112) = xmmword_18D339258;
        *(_QWORD *)(v8 + 128) = 0x41E31EB841E1D70ALL;
        *(_DWORD *)(v8 + 136) = 1084227584;
        *(_OWORD *)(v8 + 140) = xmmword_18D339270;
        *(_QWORD *)(v8 + 156) = 0x3C10FF973CCD35A8;
        *(_BYTE *)(v8 + 164) = 1;
        *(_QWORD *)(v8 + 184) = 0x41D4E14841DE0000;
        *(_OWORD *)(v8 + 168) = xmmword_18D339288;
        *(_DWORD *)(v8 + 192) = 1084227584;
        *(_QWORD *)(v8 + 212) = 0x3B49320E3CAFB7E9;
        *(_OWORD *)(v8 + 196) = xmmword_18D3392A0;
        *(_BYTE *)(v8 + 220) = 1;
        *(_QWORD *)(v8 + 240) = 0x41D7851F41D1D70ALL;
        *(_OWORD *)(v8 + 224) = xmmword_18D3392B8;
        *(_DWORD *)(v8 + 248) = 1084227584;
        *(_QWORD *)(v8 + 268) = 0x3B60C9DA3C0198F2;
        *(_OWORD *)(v8 + 252) = xmmword_18D3392D0;
        *(_BYTE *)(v8 + 276) = 1;
        *(_OWORD *)(v8 + 280) = xmmword_18D3392E8;
        *(_QWORD *)(v8 + 296) = 0x41C2F5C341C6A3D7;
        *(_DWORD *)(v8 + 304) = 1084227584;
        *(_QWORD *)(v8 + 324) = 0x3B232F453C097636;
        *(_OWORD *)(v8 + 308) = xmmword_18D339300;
        *(_BYTE *)(v8 + 332) = 1;
        *(_QWORD *)(v8 + 352) = 0x41CB70A441C71EB8;
        *(_OWORD *)(v8 + 336) = xmmword_18D339318;
        *(_DWORD *)(v8 + 360) = 1084227584;
        *(_QWORD *)(v8 + 380) = 0x3BAAB8A63C01ECD5;
        *(_OWORD *)(v8 + 364) = xmmword_18D339330;
        *(_BYTE *)(v8 + 388) = 1;
        qword_1ECF24428 = v8;
      }
      *((_QWORD *)this + 4) = v8;
      v6 = qword_1ECF24430;
      if (!qword_1ECF24430)
      {
        v6 = operator new[]();
        *(_OWORD *)v6 = xmmword_18D339348;
        *(_QWORD *)(v6 + 16) = 0x41C1C28F41C1999ALL;
        *(_DWORD *)(v6 + 24) = 1084227584;
        *(_OWORD *)(v6 + 28) = xmmword_18D339360;
        *(_QWORD *)(v6 + 44) = 0x3E0CDF263EAA0126;
        *(_BYTE *)(v6 + 52) = 1;
        *(_OWORD *)(v6 + 56) = xmmword_18D339378;
        *(_QWORD *)(v6 + 72) = 0x41AE000041A86666;
        *(_DWORD *)(v6 + 80) = 1084227584;
        *(_QWORD *)(v6 + 100) = 0x3DB0110A3E86BF87;
        *(_OWORD *)(v6 + 84) = xmmword_18D339390;
        *(_BYTE *)(v6 + 108) = 1;
        *(_OWORD *)(v6 + 112) = xmmword_18D3393A8;
        *(_QWORD *)(v6 + 128) = 0x41BC51EC41BA6666;
        *(_DWORD *)(v6 + 136) = 1084227584;
        *(_OWORD *)(v6 + 140) = xmmword_18D3393C0;
        *(_QWORD *)(v6 + 156) = 0x3D952D233E632767;
        *(_BYTE *)(v6 + 164) = 1;
        *(_QWORD *)(v6 + 184) = 0x41B4B85241BAF5C3;
        *(_OWORD *)(v6 + 168) = xmmword_18D3393D8;
        *(_DWORD *)(v6 + 192) = 1084227584;
        *(_QWORD *)(v6 + 212) = 0x3D11F0C33E1CA42BLL;
        *(_OWORD *)(v6 + 196) = xmmword_18D3393F0;
        *(_BYTE *)(v6 + 220) = 1;
        *(_QWORD *)(v6 + 240) = 0x41A9EB85419FEB85;
        *(_OWORD *)(v6 + 224) = xmmword_18D339408;
        *(_DWORD *)(v6 + 248) = 1084227584;
        *(_QWORD *)(v6 + 268) = 0x3D1DFB943DDF266CLL;
        *(_OWORD *)(v6 + 252) = xmmword_18D339420;
        *(_BYTE *)(v6 + 276) = 1;
        *(_OWORD *)(v6 + 280) = xmmword_18D339438;
        *(_QWORD *)(v6 + 296) = 0x419F851F41988F5CLL;
        *(_DWORD *)(v6 + 304) = 1084227584;
        *(_QWORD *)(v6 + 324) = 0x3CD1A21F3DC5E0B5;
        *(_OWORD *)(v6 + 308) = xmmword_18D339450;
        *(_BYTE *)(v6 + 332) = 1;
        *(_QWORD *)(v6 + 352) = 0x41A23D71419B3333;
        *(_OWORD *)(v6 + 336) = xmmword_18D339468;
        *(_DWORD *)(v6 + 360) = 1084227584;
        *(_QWORD *)(v6 + 380) = 0x3D21EA363DED288DLL;
        *(_OWORD *)(v6 + 364) = xmmword_18D339480;
        *(_BYTE *)(v6 + 388) = 1;
        qword_1ECF24430 = v6;
      }
      goto LABEL_25;
    case 6:
      v14 = qword_1ECF24438;
      if (!qword_1ECF24438)
      {
        v14 = operator new[]();
        *(_OWORD *)v14 = xmmword_18D339498;
        *(_QWORD *)(v14 + 16) = 0x41E3C28F41E3851FLL;
        *(_DWORD *)(v14 + 24) = 1085066445;
        *(_OWORD *)(v14 + 28) = xmmword_18D3394B0;
        *(_QWORD *)(v14 + 44) = 0x3C55F99C3DB2378BLL;
        *(_BYTE *)(v14 + 52) = 1;
        *(_OWORD *)(v14 + 56) = xmmword_18D3394C8;
        *(_QWORD *)(v14 + 72) = 0x41CE000041C947AELL;
        *(_DWORD *)(v14 + 80) = 1084437299;
        *(_QWORD *)(v14 + 100) = 0x3BDA3C213D672325;
        *(_OWORD *)(v14 + 84) = xmmword_18D3394E0;
        *(_BYTE *)(v14 + 108) = 1;
        *(_OWORD *)(v14 + 112) = xmmword_18D3394F8;
        *(_QWORD *)(v14 + 128) = 0x41D6666641D4E148;
        *(_DWORD *)(v14 + 136) = 1085276160;
        *(_OWORD *)(v14 + 140) = xmmword_18D339510;
        *(_QWORD *)(v14 + 156) = 0x3BBF09963D30A915;
        *(_BYTE *)(v14 + 164) = 1;
        *(_QWORD *)(v14 + 184) = 0x41DAB85241DA147BLL;
        *(_OWORD *)(v14 + 168) = xmmword_18D339528;
        *(_DWORD *)(v14 + 192) = 1085066445;
        *(_QWORD *)(v14 + 212) = 0x3AFF97243C4E1C58;
        *(_OWORD *)(v14 + 196) = xmmword_18D339540;
        *(_BYTE *)(v14 + 220) = 1;
        *(_QWORD *)(v14 + 240) = 0x41D4A3D741D828F6;
        *(_OWORD *)(v14 + 224) = xmmword_18D339558;
        *(_DWORD *)(v14 + 248) = 1085066445;
        *(_QWORD *)(v14 + 268) = 0x3D1EADD63D313166;
        *(_OWORD *)(v14 + 252) = xmmword_18D339570;
        *(_BYTE *)(v14 + 276) = 1;
        *(_OWORD *)(v14 + 280) = xmmword_18D339588;
        *(_QWORD *)(v14 + 296) = 0x41C570A441BF5C29;
        *(_DWORD *)(v14 + 304) = 1084017869;
        *(_QWORD *)(v14 + 324) = 0x3D78572A3DF352A8;
        *(_OWORD *)(v14 + 308) = xmmword_18D3395A0;
        *(_BYTE *)(v14 + 332) = 1;
        *(_QWORD *)(v14 + 352) = 0x41C4666641C851ECLL;
        *(_OWORD *)(v14 + 336) = xmmword_18D3395B8;
        *(_DWORD *)(v14 + 360) = 1084647014;
        *(_QWORD *)(v14 + 380) = 0x3D81ADEB3D95CA6DLL;
        *(_OWORD *)(v14 + 364) = xmmword_18D3395D0;
        *(_BYTE *)(v14 + 388) = 1;
        qword_1ECF24438 = v14;
      }
      *((_QWORD *)this + 4) = v14;
      v6 = qword_1ECF24440;
      if (!qword_1ECF24440)
      {
        v6 = operator new[]();
        *(_OWORD *)v6 = xmmword_18D3395E8;
        *(_QWORD *)(v6 + 16) = 0x41C5333341C13333;
        *(_DWORD *)(v6 + 24) = 1082969293;
        *(_OWORD *)(v6 + 28) = xmmword_18D339600;
        *(_QWORD *)(v6 + 44) = 0x3DA464993E891149;
        *(_BYTE *)(v6 + 52) = 1;
        *(_OWORD *)(v6 + 56) = xmmword_18D339618;
        *(_QWORD *)(v6 + 72) = 0x41AFD70A41AB1EB8;
        *(_DWORD *)(v6 + 80) = 1082759578;
        *(_QWORD *)(v6 + 100) = 0x3D5052933E5743E9;
        *(_OWORD *)(v6 + 84) = xmmword_18D339630;
        *(_BYTE *)(v6 + 108) = 1;
        *(_OWORD *)(v6 + 112) = xmmword_18D339648;
        *(_QWORD *)(v6 + 128) = 0x41B6000041AE6666;
        *(_DWORD *)(v6 + 136) = 1083179008;
        *(_OWORD *)(v6 + 140) = xmmword_18D339660;
        *(_QWORD *)(v6 + 156) = 0x3D344E513E536502;
        *(_BYTE *)(v6 + 164) = 1;
        *(_QWORD *)(v6 + 184) = 0x41C1333341BC28F6;
        *(_OWORD *)(v6 + 168) = xmmword_18D339678;
        *(_DWORD *)(v6 + 192) = 1082969293;
        *(_QWORD *)(v6 + 212) = 0x3C91537A3DC970F8;
        *(_OWORD *)(v6 + 196) = xmmword_18D339690;
        *(_BYTE *)(v6 + 220) = 1;
        *(_QWORD *)(v6 + 240) = 0x41AB999A41A947AELL;
        *(_OWORD *)(v6 + 224) = xmmword_18D3396A8;
        *(_DWORD *)(v6 + 248) = 1083598438;
        *(_QWORD *)(v6 + 268) = 0x3E5CDDD73EA4E65CLL;
        *(_OWORD *)(v6 + 252) = xmmword_18D3396C0;
        *(_BYTE *)(v6 + 276) = 1;
        *(_OWORD *)(v6 + 280) = xmmword_18D3396D8;
        *(_QWORD *)(v6 + 296) = 0x41A8B85241A2B852;
        *(_DWORD *)(v6 + 304) = 1082759578;
        *(_QWORD *)(v6 + 324) = 0x3E67357E3EB984A1;
        *(_OWORD *)(v6 + 308) = xmmword_18D3396F0;
        *(_BYTE *)(v6 + 332) = 1;
        *(_QWORD *)(v6 + 352) = 0x41ABC28F41A47AE1;
        *(_OWORD *)(v6 + 336) = xmmword_18D339708;
        *(_DWORD *)(v6 + 360) = 1083179008;
        *(_QWORD *)(v6 + 380) = 0x3E537C9A3EAC985FLL;
        *(_OWORD *)(v6 + 364) = xmmword_18D339720;
        *(_BYTE *)(v6 + 388) = 1;
        qword_1ECF24440 = v6;
      }
      goto LABEL_25;
    case 7:
    case 8:
      v5 = qword_1ECF24448;
      if (!qword_1ECF24448)
      {
        v5 = operator new[]();
        *(_OWORD *)v5 = xmmword_18D339738;
        *(_QWORD *)(v5 + 16) = 0x41E370A441D9851FLL;
        *(_DWORD *)(v5 + 24) = 1084227584;
        *(_OWORD *)(v5 + 28) = xmmword_18D339750;
        *(_QWORD *)(v5 + 44) = 0x3C077EE53DB5A31ALL;
        *(_BYTE *)(v5 + 52) = 1;
        *(_OWORD *)(v5 + 56) = xmmword_18D339768;
        *(_QWORD *)(v5 + 72) = 0x41C9C28F41C55C29;
        *(_DWORD *)(v5 + 80) = 1084227584;
        *(_QWORD *)(v5 + 100) = 0x3BD10F523CD29DC7;
        *(_OWORD *)(v5 + 84) = xmmword_18D339780;
        *(_BYTE *)(v5 + 108) = 1;
        *(_OWORD *)(v5 + 112) = xmmword_18D339798;
        *(_QWORD *)(v5 + 128) = 0x41CF47AE41D628F6;
        *(_DWORD *)(v5 + 136) = 1084647014;
        *(_OWORD *)(v5 + 140) = xmmword_18D3397B0;
        *(_QWORD *)(v5 + 156) = 0x3B8DE2AC3D01C2E3;
        *(_BYTE *)(v5 + 164) = 1;
        *(_QWORD *)(v5 + 184) = 0x41D4666641D48F5CLL;
        *(_OWORD *)(v5 + 168) = xmmword_18D3397C8;
        *(_DWORD *)(v5 + 192) = 1084017869;
        *(_QWORD *)(v5 + 212) = 0x39F12C283BB48D3BLL;
        *(_OWORD *)(v5 + 196) = xmmword_18D3397E0;
        *(_BYTE *)(v5 + 220) = 1;
        *(_QWORD *)(v5 + 240) = 0x41E147AE41DC51ECLL;
        *(_OWORD *)(v5 + 224) = xmmword_18D3397F8;
        *(_DWORD *)(v5 + 248) = 1085276160;
        *(_QWORD *)(v5 + 268) = 0x3CAE147B3CEC6BCFLL;
        *(_OWORD *)(v5 + 252) = xmmword_18D339810;
        *(_BYTE *)(v5 + 276) = 1;
        *(_OWORD *)(v5 + 280) = xmmword_18D339828;
        *(_QWORD *)(v5 + 296) = 0x41D0A3D741C47AE1;
        *(_DWORD *)(v5 + 304) = 1084437299;
        *(_QWORD *)(v5 + 324) = 0x3D3E61D03DB0DD83;
        *(_OWORD *)(v5 + 308) = xmmword_18D339840;
        *(_BYTE *)(v5 + 332) = 1;
        *(_QWORD *)(v5 + 352) = 0x41CF1EB841D651ECLL;
        *(_OWORD *)(v5 + 336) = xmmword_18D339858;
        *(_DWORD *)(v5 + 360) = 1084647014;
        *(_QWORD *)(v5 + 380) = 0x3D8EFDCA3D8A771DLL;
        *(_OWORD *)(v5 + 364) = xmmword_18D339870;
        *(_BYTE *)(v5 + 388) = 1;
        qword_1ECF24448 = v5;
      }
      *((_QWORD *)this + 4) = v5;
      v6 = qword_1ECF24450;
      if (!qword_1ECF24450)
      {
        v6 = operator new[]();
        *(_OWORD *)v6 = xmmword_18D339888;
        *(_QWORD *)(v6 + 16) = 0x41BD5C2941B93333;
        *(_DWORD *)(v6 + 24) = 1082549862;
        *(_OWORD *)(v6 + 28) = xmmword_18D3398A0;
        *(_QWORD *)(v6 + 44) = 0x3DA0F3CB3E755715;
        *(_BYTE *)(v6 + 52) = 1;
        *(_OWORD *)(v6 + 56) = xmmword_18D3398B8;
        *(_QWORD *)(v6 + 72) = 0x41AAA3D741A3851FLL;
        *(_DWORD *)(v6 + 80) = 1082340147;
        *(_QWORD *)(v6 + 100) = 0x3D6A7EFA3E3273D6;
        *(_OWORD *)(v6 + 84) = xmmword_18D3398D0;
        *(_BYTE *)(v6 + 108) = 1;
        *(_OWORD *)(v6 + 112) = xmmword_18D3398E8;
        *(_QWORD *)(v6 + 128) = 0x41AFAE1441AB70A4;
        *(_DWORD *)(v6 + 136) = 1082759578;
        *(_OWORD *)(v6 + 140) = xmmword_18D339900;
        *(_QWORD *)(v6 + 156) = 0x3CFB7E913E09BA5ELL;
        *(_BYTE *)(v6 + 164) = 1;
        *(_QWORD *)(v6 + 184) = 0x41BE000041B2B852;
        *(_OWORD *)(v6 + 168) = xmmword_18D339918;
        *(_DWORD *)(v6 + 192) = 1082549862;
        *(_QWORD *)(v6 + 212) = 0x3C50678C3DB074A7;
        *(_OWORD *)(v6 + 196) = xmmword_18D339930;
        *(_BYTE *)(v6 + 220) = 1;
        *(_QWORD *)(v6 + 240) = 0x41B0E14841A828F6;
        *(_OWORD *)(v6 + 224) = xmmword_18D339948;
        *(_DWORD *)(v6 + 248) = 1083388723;
        *(_QWORD *)(v6 + 268) = 0x3E2B7AA23E9F62B7;
        *(_OWORD *)(v6 + 252) = xmmword_18D339960;
        *(_BYTE *)(v6 + 276) = 1;
        *(_OWORD *)(v6 + 280) = xmmword_18D339978;
        *(_QWORD *)(v6 + 296) = 0x41ACB85241A55C29;
        *(_DWORD *)(v6 + 304) = 1082759578;
        *(_QWORD *)(v6 + 324) = 0x3E6191153EA5B6C3;
        *(_OWORD *)(v6 + 308) = xmmword_18D339990;
        *(_BYTE *)(v6 + 332) = 1;
        *(_QWORD *)(v6 + 352) = 0x41AF5C2941A75C29;
        *(_OWORD *)(v6 + 336) = xmmword_18D3399A8;
        *(_DWORD *)(v6 + 360) = 1083388723;
        *(_QWORD *)(v6 + 380) = 0x3E69A2C63E9CA03CLL;
        *(_OWORD *)(v6 + 364) = xmmword_18D3399C0;
        *(_BYTE *)(v6 + 388) = 1;
        qword_1ECF24450 = v6;
      }
      goto LABEL_25;
    case 9:
    case 10:
      v7 = qword_1ECF24458;
      if (!qword_1ECF24458)
      {
        v7 = operator new[]();
        *(_OWORD *)v7 = xmmword_18D3399D8;
        *(_QWORD *)(v7 + 16) = 0x41D51EB841D53333;
        *(_DWORD *)(v7 + 24) = 1083179008;
        *(_OWORD *)(v7 + 28) = xmmword_18D3399F0;
        *(_QWORD *)(v7 + 44) = 0x3D0BAC713D98A86DLL;
        *(_BYTE *)(v7 + 52) = 1;
        *(_OWORD *)(v7 + 56) = xmmword_18D339A08;
        *(_QWORD *)(v7 + 72) = 0x41C547AE41BE3D71;
        *(_DWORD *)(v7 + 80) = 1083808154;
        *(_QWORD *)(v7 + 100) = 0x3DD2934B3E0AEFB3;
        *(_OWORD *)(v7 + 84) = xmmword_18D339A20;
        *(_BYTE *)(v7 + 108) = 1;
        *(_OWORD *)(v7 + 112) = xmmword_18D339A38;
        *(_QWORD *)(v7 + 128) = 0x41CF999A41C95C29;
        *(_DWORD *)(v7 + 136) = 1084227584;
        *(_OWORD *)(v7 + 140) = xmmword_18D339A50;
        *(_QWORD *)(v7 + 156) = 0x3D6A35933DD9018ELL;
        *(_BYTE *)(v7 + 164) = 1;
        *(_QWORD *)(v7 + 184) = 0x41C828F641C75C29;
        *(_OWORD *)(v7 + 168) = xmmword_18D339A68;
        *(_DWORD *)(v7 + 192) = 1083179008;
        *(_QWORD *)(v7 + 212) = 0x3D02C9083D0AA64CLL;
        *(_OWORD *)(v7 + 196) = xmmword_18D339A80;
        *(_BYTE *)(v7 + 220) = 1;
        qword_1ECF24458 = v7;
      }
      *((_QWORD *)this + 4) = v7;
      v6 = qword_1ECF24460;
      if (!qword_1ECF24460)
      {
        v6 = operator new[]();
        *(_OWORD *)v6 = xmmword_18D339A98;
        *(_QWORD *)(v6 + 16) = 0x41A3AE1441A43D71;
        *(_DWORD *)(v6 + 24) = 1083179008;
        *(_OWORD *)(v6 + 28) = xmmword_18D339AB0;
        *(_QWORD *)(v6 + 44) = 0x3E34562E3E7C9C4ELL;
        *(_BYTE *)(v6 + 52) = 1;
        *(_OWORD *)(v6 + 56) = xmmword_18D339AC8;
        *(_QWORD *)(v6 + 72) = 0x41887AE14184CCCDLL;
        *(_DWORD *)(v6 + 80) = 1083808154;
        *(_QWORD *)(v6 + 100) = 0x3F112B803F2147AELL;
        *(_OWORD *)(v6 + 84) = xmmword_18D339AE0;
        *(_BYTE *)(v6 + 108) = 1;
        *(_OWORD *)(v6 + 112) = xmmword_18D339AF8;
        *(_QWORD *)(v6 + 128) = 0x41910A3D4191999ALL;
        *(_DWORD *)(v6 + 136) = 1084227584;
        *(_OWORD *)(v6 + 140) = xmmword_18D339B10;
        *(_QWORD *)(v6 + 156) = 0x3EEAA64C3EFDD1A2;
        *(_BYTE *)(v6 + 164) = 1;
        *(_QWORD *)(v6 + 184) = 0x419DD70A419E147BLL;
        *(_OWORD *)(v6 + 168) = xmmword_18D339B28;
        *(_DWORD *)(v6 + 192) = 1083179008;
        *(_QWORD *)(v6 + 212) = 0x3DDF6A943DE7EF9ELL;
        *(_OWORD *)(v6 + 196) = xmmword_18D339B40;
        *(_BYTE *)(v6 + 220) = 1;
        qword_1ECF24460 = v6;
      }
      goto LABEL_25;
    case 11:
      v15 = qword_1ECF24468;
      if (!qword_1ECF24468)
      {
        v15 = operator new[]();
        *(_OWORD *)v15 = xmmword_18D339B58;
        *(_QWORD *)(v15 + 16) = 0x41E2000041DBC28FLL;
        *(_DWORD *)(v15 + 24) = 1084856730;
        *(_OWORD *)(v15 + 28) = xmmword_18D339B70;
        *(_QWORD *)(v15 + 44) = 0x3D6F00693E0C1D2ALL;
        *(_BYTE *)(v15 + 52) = 1;
        *(_OWORD *)(v15 + 56) = xmmword_18D339B88;
        *(_QWORD *)(v15 + 72) = 0x41D9999A41D370A4;
        *(_DWORD *)(v15 + 80) = 1083388723;
        *(_QWORD *)(v15 + 100) = 0x3D9EFC7A3E07FF58;
        *(_OWORD *)(v15 + 84) = xmmword_18D339BA0;
        *(_BYTE *)(v15 + 108) = 1;
        *(_OWORD *)(v15 + 112) = xmmword_18D339BB8;
        *(_QWORD *)(v15 + 128) = 0x41DD5C2941DBD70ALL;
        *(_DWORD *)(v15 + 136) = 1084017869;
        *(_OWORD *)(v15 + 140) = xmmword_18D339BD0;
        *(_QWORD *)(v15 + 156) = 0x3D2DA1233D8EA4A9;
        *(_BYTE *)(v15 + 164) = 1;
        *(_QWORD *)(v15 + 184) = 0x41D5333341C7851FLL;
        *(_OWORD *)(v15 + 168) = xmmword_18D339BE8;
        *(_DWORD *)(v15 + 192) = 1084647014;
        *(_QWORD *)(v15 + 212) = 0x3CF3E0373D31465FLL;
        *(_OWORD *)(v15 + 196) = xmmword_18D339C00;
        *(_BYTE *)(v15 + 220) = 1;
        *(_QWORD *)(v15 + 240) = 0x41EC147B41EC6666;
        *(_OWORD *)(v15 + 224) = xmmword_18D339C18;
        *(_DWORD *)(v15 + 248) = 1084647014;
        *(_QWORD *)(v15 + 268) = 0x3B855DA23BCAD57CLL;
        *(_OWORD *)(v15 + 252) = xmmword_18D339C30;
        *(_BYTE *)(v15 + 276) = 1;
        *(_OWORD *)(v15 + 280) = xmmword_18D339C48;
        *(_QWORD *)(v15 + 296) = 0x41DC28F641D55C29;
        *(_DWORD *)(v15 + 304) = 1084017869;
        *(_QWORD *)(v15 + 324) = 0x3B2137F43B32E9CDLL;
        *(_OWORD *)(v15 + 308) = xmmword_18D339C60;
        *(_BYTE *)(v15 + 332) = 1;
        *(_QWORD *)(v15 + 352) = 0x41DC000041DAE148;
        *(_OWORD *)(v15 + 336) = xmmword_18D339C78;
        *(_DWORD *)(v15 + 360) = 1084227584;
        *(_QWORD *)(v15 + 380) = 0x3B2EFB2B3B564D7FLL;
        *(_OWORD *)(v15 + 364) = xmmword_18D339C90;
        *(_BYTE *)(v15 + 388) = 1;
        qword_1ECF24468 = v15;
      }
      *((_QWORD *)this + 4) = v15;
      v6 = qword_1ECF24470;
      if (!qword_1ECF24470)
      {
        v6 = operator new[]();
        *(_OWORD *)v6 = xmmword_18D339CA8;
        *(_QWORD *)(v6 + 16) = 0x41B347AE41B1C28FLL;
        *(_DWORD *)(v6 + 24) = 1083179008;
        *(_OWORD *)(v6 + 28) = xmmword_18D339CC0;
        *(_QWORD *)(v6 + 44) = 0x3E5977853E9443D4;
        *(_BYTE *)(v6 + 52) = 1;
        *(_OWORD *)(v6 + 56) = xmmword_18D339CD8;
        *(_QWORD *)(v6 + 72) = 0x41B47AE141B30A3DLL;
        *(_DWORD *)(v6 + 80) = 1083388723;
        *(_QWORD *)(v6 + 100) = 0x3E8445243E99613DLL;
        *(_OWORD *)(v6 + 84) = xmmword_18D339CF0;
        *(_BYTE *)(v6 + 108) = 1;
        *(_OWORD *)(v6 + 112) = xmmword_18D339D08;
        *(_QWORD *)(v6 + 128) = 0x41B7333341B63D71;
        *(_DWORD *)(v6 + 136) = 1083808154;
        *(_OWORD *)(v6 + 140) = xmmword_18D339D20;
        *(_QWORD *)(v6 + 156) = 0x3E4198F23E692F6FLL;
        *(_BYTE *)(v6 + 164) = 1;
        *(_QWORD *)(v6 + 184) = 0x41AC3D7141AD47AELL;
        *(_OWORD *)(v6 + 168) = xmmword_18D339D38;
        *(_DWORD *)(v6 + 192) = 1083388723;
        *(_QWORD *)(v6 + 212) = 0x3D9FCE313DA7EF9ELL;
        *(_OWORD *)(v6 + 196) = xmmword_18D339D50;
        *(_BYTE *)(v6 + 220) = 1;
        *(_QWORD *)(v6 + 240) = 0x41C50A3D41C75C29;
        *(_OWORD *)(v6 + 224) = xmmword_18D339D68;
        *(_DWORD *)(v6 + 248) = 1084647014;
        *(_QWORD *)(v6 + 268) = 0x3C47E2823C34B72CLL;
        *(_OWORD *)(v6 + 252) = xmmword_18D339D80;
        *(_BYTE *)(v6 + 276) = 1;
        *(_OWORD *)(v6 + 280) = xmmword_18D339D98;
        *(_QWORD *)(v6 + 296) = 0x41B7AE1441B75C29;
        *(_DWORD *)(v6 + 304) = 1083598438;
        *(_QWORD *)(v6 + 324) = 0x3C0AEFB33BEEE0F4;
        *(_OWORD *)(v6 + 308) = xmmword_18D339DB0;
        *(_BYTE *)(v6 + 332) = 1;
        *(_QWORD *)(v6 + 352) = 0x41BACCCD41B970A4;
        *(_OWORD *)(v6 + 336) = xmmword_18D339DC8;
        *(_DWORD *)(v6 + 360) = 1083598438;
        *(_QWORD *)(v6 + 380) = 0x3C1906CD3C1BCFD5;
        *(_OWORD *)(v6 + 364) = xmmword_18D339DE0;
        *(_BYTE *)(v6 + 388) = 1;
        qword_1ECF24470 = v6;
      }
LABEL_25:
      *((_QWORD *)this + 5) = v6;
      if (!*((_BYTE *)this + 1))
        goto LABEL_32;
      v16 = operator new(0x4C8uLL);
      v16[1] = 0;
      v16[2] = 0;
      *v16 = &off_1E25CD048;
      *(_QWORD *)&v22 = raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF::CN0StandardNormalCDF((raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF *)(v16 + 3));
      *((_QWORD *)&v22 + 1) = v16;
      sub_18D07CBBC((uint64_t)this + 16, &v22);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *((_QWORD *)this + 1) = a2;
      result = 1;
      *(_BYTE *)this = 1;
      break;
    default:
      if (cnprint::CNPrinter::GetLogLevel(GnssChipset) <= 1)
      {
        LOWORD(v22) = 12;
        v23 = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v23, "LOS Estimator C/N0 and/or MPF lookup tables not supported for this HW/platform type", v9, v10, v11, v12, v13, v21);
      }
      *((_BYTE *)this + 1) = 0;
LABEL_32:
      result = *(_BYTE *)this != 0;
      break;
  }
  return result;
}

void sub_18D2B0EB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::GetCN0Likelihoods(uint64_t a1, char *a2, int a3, float a4, uint64_t a5, double *a6, double *a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  BOOL v20;
  float v21;
  float v22;
  float v23;
  raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF *v24;
  double CDFValue;
  double v26;
  uint64_t v28;
  float v29;
  float v30;
  BOOL v32;
  float v33;
  double v34;
  double v35;
  uint64_t v37;
  uint64_t v38;

  *a6 = INFINITY;
  *a7 = INFINITY;
  if (!*(_BYTE *)(a1 + 1))
    return 4294967294;
  if (!*(_QWORD *)(a1 + 16))
    return 4294967291;
  v37 = 0;
  v38 = 0;
  if (raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::GetGnssBandElevBandIndices(a1, a2, a3, &v37, (uint64_t)a6, (uint64_t)a7, a8, a9))return 0xFFFFFFFFLL;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = v37;
  v16 = v38;
  v17 = *(float *)(v14 + 56 * v37 + 4 * v38);
  v18 = *(float *)(v14 + 24);
  result = 4294967292;
  v20 = v17 <= 50.0 && v17 >= 10.0 && v18 <= 10.0;
  if (v20 && v18 > 0.0)
  {
    v21 = fmaxf(a4 + -2.0, 0.0);
    v22 = fminf(a4 + 2.0, 50.0);
    v23 = (float)(v22 - v17) / v18;
    v24 = *(raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF **)(a1 + 16);
    CDFValue = raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF::GetCDFValue(v24, (float)(v21 - v17) / v18);
    v26 = raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF::GetCDFValue(v24, v23) - CDFValue;
    *a6 = v26;
    if (v26 >= 0.0 && v26 <= 1.0)
    {
      v28 = *(_QWORD *)(a1 + 40);
      v29 = *(float *)(v28 + 56 * v15 + 4 * v16);
      v30 = *(float *)(v28 + 24);
      result = 4294967292;
      v32 = v29 <= 50.0 && v29 >= 10.0 && v30 <= 10.0;
      if (v32 && v30 > 0.0)
      {
        v33 = (float)(v22 - v29) / v30;
        v34 = raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF::GetCDFValue(v24, (float)(v21 - v29) / v30);
        v35 = raven::RavenLosEstimatorLookupTables::CN0StandardNormalCDF::GetCDFValue(v24, v33) - v34;
        *a7 = v35;
        if (v35 > 1.0 || v35 < 0.0)
          return 4294967293;
        else
          return 0;
      }
    }
    else
    {
      return 4294967293;
    }
  }
  return result;
}

uint64_t raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::GetGnssBandElevBandIndices(uint64_t a1, char *a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unsigned __int8 v13;
  __int16 v14;

  v8 = 0;
  v9 = *a2;
  switch(*a2)
  {
    case 0:
    case 9:
      v14 = 12;
      v13 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "Invalid GNSS Band type: LOS Estimator C/N0 (or MPF set) likelihoods not found for GNSS band,%d", (uint64_t)a4, a5, a6, a7, a8, v9);
      return 0xFFFFFFFFLL;
    case 2:
      v8 = 4;
      break;
    case 3:
      v8 = 3;
      break;
    case 4:
    case 5:
      v8 = 2;
      break;
    case 6:
      v8 = 6;
      break;
    case 7:
      v8 = 1;
      break;
    case 8:
      v8 = 5;
      break;
    default:
      break;
  }
  v10 = 0;
  v11 = 0;
  while (dword_18D3391E0[v10] < a3)
  {
    ++v11;
    if (++v10 == 6)
      return 0xFFFFFFFFLL;
  }
  result = 0;
  *a4 = v8;
  a4[1] = v11;
  return result;
}

uint64_t raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::GetMPFSetLikelihoods(uint64_t a1, char *a2, int a3, uint64_t a4, double *a5, double *a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v16;
  uint64_t v18;
  uint64_t v19;

  *a5 = INFINITY;
  *a6 = INFINITY;
  if (!*(_BYTE *)(a1 + 1))
    return 4294967294;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 52))
    return 4294967290;
  v18 = 0;
  v19 = 0;
  if (raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::GetGnssBandElevBandIndices(a1, a2, a3, &v18, (uint64_t)a5, (uint64_t)a6, a7, a8))return 0xFFFFFFFFLL;
  v12 = v18;
  v13 = v19;
  v14 = *(float *)(*(_QWORD *)(a1 + 32) + 56 * v18 + 4 * v19 + 28);
  *a5 = v14;
  result = 4294967293;
  if (v14 >= 0.0 && v14 <= 1.0)
  {
    v16 = *(float *)(*(_QWORD *)(a1 + 40) + 56 * v12 + 4 * v13 + 28);
    *a6 = v16;
    if (v16 > 1.0 || v16 < 0.0)
      return 4294967293;
    else
      return 0;
  }
  return result;
}

void sub_18D2B1254(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CD048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18D2B1264(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25CD048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t raven::StepCountChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  if (*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::StepCountChecker::HandleEvent(raven::StepCountChecker *this, const raven::StepCountEvent *a2, raven::StepCountEvent *a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  double v50;
  unsigned __int8 v51;
  __int16 v52;

  if (!*((_BYTE *)this + 8))
  {
    v52 = 12;
    v51 = 4;
    v15 = (*(uint64_t (**)(const raven::StepCountEvent *, const raven::StepCountEvent *, raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v50 = v16 + (double)v15;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "t,%.3lf,StepCountChecker, not configured", v17, v18, v19, v20, v21, SLOBYTE(v50));
    return 0xFFFFFFFFLL;
  }
  if (!*((_BYTE *)this + 24))
  {
    result = 0;
    *((_QWORD *)this + 4) = &unk_1E25C23D8;
    v23 = *(_OWORD *)((char *)a2 + 8);
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)this + 40) = v23;
    v24 = *(_OWORD *)((char *)a2 + 40);
    v25 = *(_OWORD *)((char *)a2 + 56);
    v26 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)this + 104) = v26;
    *(_OWORD *)((char *)this + 88) = v25;
    *(_OWORD *)((char *)this + 72) = v24;
    v27 = *(_OWORD *)((char *)a2 + 104);
    v28 = *(_OWORD *)((char *)a2 + 120);
    v29 = *(_OWORD *)((char *)a2 + 136);
    v30 = *((_QWORD *)a2 + 19);
    goto LABEL_19;
  }
  v6 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(_QWORD *)a2 + 16))(a2);
  if (!*((_BYTE *)this + 24))
    goto LABEL_32;
  v8 = v6;
  v9 = v7;
  v10 = v7;
  v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 16))((char *)this + 32);
  v13 = v8 || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (v13
    && (!v11 ? (v14 = (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (v14 = 1), v14 && v8 != v11))
  {
    if (v8 < v11)
      goto LABEL_24;
  }
  else if (v10 <= v12)
  {
LABEL_24:
    if (*((_BYTE *)this + 24))
      *((_BYTE *)this + 24) = 0;
    return 0xFFFFFFFFLL;
  }
  if (!*((_BYTE *)this + 24))
LABEL_32:
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  if (*((_DWORD *)a2 + 38) <= *((_DWORD *)this + 46) || *((_DWORD *)a2 + 39) < *((_DWORD *)this + 47))
    goto LABEL_24;
  v31 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)a3 + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a3 + 8) = v31;
  v32 = *(_OWORD *)((char *)a2 + 40);
  v33 = *(_OWORD *)((char *)a2 + 56);
  v34 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)a3 + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)a3 + 72) = v34;
  *(_OWORD *)((char *)a3 + 56) = v33;
  *(_OWORD *)((char *)a3 + 40) = v32;
  v35 = *(_OWORD *)((char *)a2 + 104);
  v36 = *(_OWORD *)((char *)a2 + 120);
  v37 = *(_OWORD *)((char *)a2 + 136);
  *((_QWORD *)a3 + 19) = *((_QWORD *)a2 + 19);
  *(_OWORD *)((char *)a3 + 136) = v37;
  *(_OWORD *)((char *)a3 + 120) = v36;
  *(_OWORD *)((char *)a3 + 104) = v35;
  if (*((_BYTE *)this + 9))
  {
    v38 = (__int128 *)((char *)a2 + 8);
    if (*((_BYTE *)this + 24))
    {
      result = 0;
      v39 = *v38;
      *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)this + 40) = v39;
      v40 = *(_OWORD *)((char *)a2 + 40);
      v41 = *(_OWORD *)((char *)a2 + 56);
      v42 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 88);
      *(_OWORD *)((char *)this + 104) = v42;
      *(_OWORD *)((char *)this + 88) = v41;
      *(_OWORD *)((char *)this + 72) = v40;
      v43 = *(_OWORD *)((char *)a2 + 104);
      v44 = *(_OWORD *)((char *)a2 + 120);
      v45 = *(_OWORD *)((char *)a2 + 136);
      *((_QWORD *)this + 23) = *((_QWORD *)a2 + 19);
      *(_OWORD *)((char *)this + 168) = v45;
      *(_OWORD *)((char *)this + 152) = v44;
      *(_OWORD *)((char *)this + 136) = v43;
      return result;
    }
    result = 0;
    *((_QWORD *)this + 4) = &unk_1E25C23D8;
    v46 = *v38;
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)this + 40) = v46;
    v47 = *(_OWORD *)((char *)a2 + 40);
    v48 = *(_OWORD *)((char *)a2 + 56);
    v49 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)this + 104) = v49;
    *(_OWORD *)((char *)this + 88) = v48;
    *(_OWORD *)((char *)this + 72) = v47;
    v27 = *(_OWORD *)((char *)a2 + 104);
    v28 = *(_OWORD *)((char *)a2 + 120);
    v29 = *(_OWORD *)((char *)a2 + 136);
    v30 = *((_QWORD *)a2 + 19);
LABEL_19:
    *((_QWORD *)this + 23) = v30;
    *(_OWORD *)((char *)this + 168) = v29;
    *(_OWORD *)((char *)this + 152) = v28;
    *(_OWORD *)((char *)this + 136) = v27;
    *((_BYTE *)this + 24) = 1;
    return result;
  }
  return 0;
}

uint64_t raven::StepCountChecker::Reset(uint64_t this)
{
  if (*(_BYTE *)(this + 24))
    *(_BYTE *)(this + 24) = 0;
  return this;
}

uint64_t sub_18D2B1598(uint64_t result)
{
  *(_QWORD *)result = &off_1E25C2748;
  if (*(_BYTE *)(result + 24))
    *(_BYTE *)(result + 24) = 0;
  return result;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedKarooGnss(raven::RavenPlatformInfo *this)
{
  return CNPlatformInfo::GetGnssChipset(this) - 1 < 2;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedEurekaGnss(raven::RavenPlatformInfo *this)
{
  return CNPlatformInfo::GetGnssChipset(this) - 3 < 6;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedMav21orNewerEurekaGnss(raven::RavenPlatformInfo *this)
{
  return CNPlatformInfo::GetGnssChipset(this) - 4 < 5;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedMav22orNewerEurekaGnss(raven::RavenPlatformInfo *this)
{
  return CNPlatformInfo::GetGnssChipset(this) - 6 < 3;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedFireGnss(raven::RavenPlatformInfo *this)
{
  return CNPlatformInfo::GetGnssChipset(this) - 9 < 3;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedFire7orNewerGnss(raven::RavenPlatformInfo *this)
{
  int GnssChipset;

  GnssChipset = CNPlatformInfo::GetGnssChipset(this);
  return GnssChipset != 10 && (GnssChipset & 0xFFFFFFFE) == 10;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedFire7orNewerPhone(raven::RavenPlatformInfo *this)
{
  int GnssChipset;
  _BOOL8 result;

  GnssChipset = CNPlatformInfo::GetGnssChipset(this);
  result = 0;
  if (GnssChipset != 10 && (GnssChipset & 0xFFFFFFFE) == 0xA)
    return *((_DWORD *)this + 14) == 1;
  return result;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedFire7orNewerWatch(raven::RavenPlatformInfo *this)
{
  int GnssChipset;
  _BOOL8 result;

  GnssChipset = CNPlatformInfo::GetGnssChipset(this);
  result = 0;
  if (GnssChipset != 10 && (GnssChipset & 0xFFFFFFFE) == 0xA)
    return *((_DWORD *)this + 14) == 3;
  return result;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedIndusGnss(raven::RavenPlatformInfo *this)
{
  return CNPlatformInfo::GetGnssChipset(this) == 12;
}

BOOL raven::RavenPlatformInfo::IsRavenSupportedIndus25orNewerIndusGnss(raven::RavenPlatformInfo *this)
{
  return CNPlatformInfo::GetGnssChipset(this) == 12;
}

uint64_t raven::RavenIonosphereEstimatorActiveObject::RavenIonosphereEstimatorActiveObject(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  std::string __str;

  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(_QWORD *)v3 = off_1E25C43F8;
  *(_WORD *)(v3 + 480) = 256;
  *(_BYTE *)(v3 + 488) = 0;
  *(_BYTE *)(v3 + 1320) = 0;
  *(_BYTE *)(v3 + 1328) = 0;
  *(_BYTE *)(v3 + 2160) = 0;
  *(_OWORD *)(v3 + 2168) = 0u;
  *(_OWORD *)(v3 + 2184) = 0u;
  *(_OWORD *)(v3 + 2200) = 0u;
  *(_QWORD *)(v3 + 2216) = 0;
  *(_QWORD *)(v3 + 2224) = 850045863;
  *(_OWORD *)(v3 + 2232) = 0u;
  *(_OWORD *)(v3 + 2248) = 0u;
  *(_OWORD *)(v3 + 2264) = 0u;
  *(_QWORD *)(v3 + 2280) = 0;
  raven::RavenIonosphereEstimator::RavenIonosphereEstimator((raven::RavenIonosphereEstimator *)(v3 + 2288));
  sub_18D0778AC(&__str, "<Ionosphere> ");
  std::string::operator=((std::string *)(a1 + 2192), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_18D0778AC(&__str, "<Ionosphere> ");
  std::string::operator=((std::string *)(a1 + 6128), &__str);
  std::string::operator=((std::string *)(a1 + 8520), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_18D2B184C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  cnframework::ActiveObjectBase *v15;
  uint64_t v16;
  std::mutex *v17;
  uint64_t v18;

  sub_18D2B1FCC(v18);
  std::mutex::~mutex(v17);
  sub_18D178B20(v16);
  cnframework::ActiveObjectBase::~ActiveObjectBase(v15);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenIonosphereEstimatorActiveObject::Configure(cnframework::ActiveObjectBase *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  double v23;
  BOOL v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  cnprint::CNPrinter *v33;
  unsigned int LogLevel;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  unsigned __int8 v41;
  __int16 v42;
  uint64_t v43;
  void *__p[2];
  char v45;

  if (*((_BYTE *)this + 480) && cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    LOWORD(v43) = 12;
    LOBYTE(v42) = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v45 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, (unsigned __int8 *)&v42, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v45 < 0)
      operator delete(__p[0]);
  }
  *((_BYTE *)this + 480) = 0;
  v10 = *a2;
  if (!*a2 || !*(_BYTE *)(v10 + 33))
  {
    LOWORD(v43) = 12;
    LOBYTE(v42) = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v45 >= 0)
      v22 = __p;
    else
      LOBYTE(v22) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, (unsigned __int8 *)&v42, "Error: %s could not be configured. p_raven_parameters is not initialized.", v17, v18, v19, v20, v21, (char)v22);
    if (v45 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  *((_QWORD *)this + 277) = v10;
  cnframework::ActiveObjectBase::SetEventQueueDelay(this, 1.0);
  v43 = *a2;
  if (raven::RavenIonosphereEstimator::Configure((uint64_t)this + 2288, (uint64_t)&v43))
  {
    v42 = 12;
    v41 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v45 >= 0)
      v16 = __p;
    else
      LOBYTE(v16) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "Error: %s could not be configured. Configuration of ionosphere estimator failed", v11, v12, v13, v14, v15, (char)v16);
    if (v45 < 0)
      operator delete(__p[0]);
    *((_BYTE *)this + 480) = 0;
    return 0xFFFFFFFFLL;
  }
  v23 = *(double *)(*a2 + 3104);
  if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v23 <= 90.0 ? (v24 = v23 < -10.0) : (v24 = 1), v24))
  {
    LOWORD(__p[0]) = 12;
    LOBYTE(v42) = 4;
    v25 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 271, "Configure() failed, invalid satellite elevation mask specified,mask,%.2lf", v23);
    if (*((char *)this + 2191) >= 0)
      LOBYTE(v31) = v25;
    else
      v31 = *((_QWORD *)this + 271);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v42, "%s", v26, v27, v28, v29, v30, v31);
    return 0xFFFFFFFFLL;
  }
  *((_BYTE *)this + 480) = 1;
  v33 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)this + 48))(this);
  LogLevel = cnprint::CNPrinter::GetLogLevel(v33);
  if (LogLevel <= 1)
  {
    v42 = 12;
    v41 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v45 >= 0)
      v40 = __p;
    else
      LOBYTE(v40) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "%s configured successfully.", v35, v36, v37, v38, v39, (char)v40);
    if (v45 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D2B1B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenIonosphereEstimatorActiveObject::IsConfigured(raven::RavenIonosphereEstimatorActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void raven::RavenIonosphereEstimatorActiveObject::HandleEvent(raven::RavenIonosphereEstimatorActiveObject *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  double v4;
  int8x16_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int16 v14;

  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)this + 481))
    {
      std::mutex::lock((std::mutex *)((char *)this + 2224));
      raven::RavenIonosphereEstimator::HandleEvent((raven::RavenIonosphereEstimatorActiveObject *)((char *)this + 2288), a2, v4, v5);
      std::mutex::unlock((std::mutex *)((char *)this + 2224));
    }
  }
  else
  {
    v14 = 12;
    v13 = 2;
    v6 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 271, "RavenIonosphereEstimatorActiveObject: not configured");
    if (*((char *)this + 2191) >= 0)
      LOBYTE(v12) = v6;
    else
      v12 = *((_QWORD *)this + 271);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v7, v8, v9, v10, v11, v12);
  }
}

void sub_18D2B1C44(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void raven::RavenIonosphereEstimatorActiveObject::HandleEvent(raven::RavenIonosphereEstimatorActiveObject *this, const raven::KlobucharParametersEvent *a2)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unsigned __int8 v19;
  __int16 v20;

  v20 = 12;
  v19 = 2;
  v4 = (const void **)((char *)this + 2168);
  cnprint::CNLogFormatter::FormatGeneral((const void **)this + 271, "RavenIonosphereEstimatorActiveObject: received KlobucharParametersEvent");
  if (*((char *)this + 2191) >= 0)
    LOBYTE(v10) = (_BYTE)v4;
  else
    v10 = *((_QWORD *)this + 271);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v5, v6, v7, v8, v9, v10);
  if (*((_BYTE *)this + 480))
  {
    if (*((_BYTE *)this + 481))
    {
      std::mutex::lock((std::mutex *)((char *)this + 2224));
      raven::RavenIonosphereEstimator::HandleEvent((const void **)this + 286, a2);
      std::mutex::unlock((std::mutex *)((char *)this + 2224));
    }
  }
  else
  {
    v18 = 12;
    v17 = 2;
    cnprint::CNLogFormatter::FormatGeneral(v4, "RavenIonosphereEstimatorActiveObject: not configured");
    if (*((char *)this + 2191) >= 0)
      LOBYTE(v16) = (_BYTE)v4;
    else
      v16 = *((_QWORD *)this + 271);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "%s", v11, v12, v13, v14, v15, v16);
  }
}

void sub_18D2B1D60(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::string *raven::RavenIonosphereEstimatorActiveObject::SetLogPrefix(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 2192), a2);
  std::string::operator=((std::string *)(a1 + 6128), a2);
  return std::string::operator=((std::string *)(a1 + 8520), a2);
}

uint64_t raven::RavenIonosphereEstimatorActiveObject::GetIonosphereParameters(uint64_t a1, _OWORD *a2)
{
  std::mutex *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v19[3];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned __int8 v51;

  if (!*(_BYTE *)(a1 + 480))
  {
    LOWORD(v19[0]) = 12;
    v51 = 2;
    v6 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2168), "RavenIonosphereEstimatorActiveObject: not configured");
    if (*(char *)(a1 + 2191) >= 0)
      LOBYTE(v12) = v6;
    else
      v12 = *(_QWORD *)(a1 + 2168);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v19, &v51, "%s", v7, v8, v9, v10, v11, v12);
    return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(a1 + 481))
    return 0xFFFFFFFFLL;
  v4 = (std::mutex *)(a1 + 2224);
  std::mutex::lock((std::mutex *)(a1 + 2224));
  v19[1] = 0;
  v19[2] = 0;
  v19[0] = &unk_1E25C4150;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0x7FF8000000000000;
  LOWORD(v30) = 0;
  *((_QWORD *)&v30 + 1) = 0;
  *(_QWORD *)v31 = 0;
  *(int64x2_t *)&v31[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)&v31[24] = 0x7FF8000000000000;
  v32 = 0uLL;
  v33 = *(_OWORD *)&v31[8];
  v34 = *(_OWORD *)&v31[8];
  v35 = *(_OWORD *)&v31[8];
  v36 = *(_OWORD *)&v31[8];
  v37 = *(_OWORD *)&v31[8];
  v38 = *(_OWORD *)&v31[8];
  *(_QWORD *)&v39 = 0x7FF8000000000000;
  *((_QWORD *)&v39 + 1) = 0x7FF8000000000000;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0;
  v46 = 0x7FF8000000000000;
  v47 = 0;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  if (raven::RavenIonosphereEstimator::PopulateEvent((raven::RavenIonosphereEstimator *)(a1 + 2288), (raven::ThinShellIonosphereParametersEvent *)v19))
  {
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    v5 = 0;
    v13 = v38;
    a2[8] = v37;
    a2[9] = v13;
    a2[10] = v39;
    v14 = v34;
    a2[4] = v33;
    a2[5] = v14;
    v15 = v36;
    a2[6] = v35;
    a2[7] = v15;
    v16 = *(_OWORD *)v31;
    *a2 = v30;
    a2[1] = v16;
    v17 = v32;
    a2[2] = *(_OWORD *)&v31[16];
    a2[3] = v17;
  }
  std::mutex::unlock(v4);
  return v5;
}

void sub_18D2B1F5C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18D2B1F70(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25C43F8;
  sub_18D2B1FCC(a1 + 2288);
  std::mutex::~mutex((std::mutex *)(a1 + 2224));
  if (*(char *)(a1 + 2215) < 0)
    operator delete(*(void **)(a1 + 2192));
  if (*(char *)(a1 + 2191) < 0)
    operator delete(*(void **)(a1 + 2168));
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

uint64_t sub_18D2B1FCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 0;
  *(_QWORD *)(a1 + 21336) = &unk_1E25C5DE0;
  *(_QWORD *)(a1 + 20944) = &unk_1E25C5C00;
  do
  {
    *(_QWORD *)(a1 + v2 + 20888) = &unk_1E25C5E70;
    v2 -= 48;
  }
  while (v2 != -2112);
  v3 = 0;
  *(_QWORD *)(a1 + 18784) = &unk_1E25C5960;
  do
  {
    *(_QWORD *)(a1 + v3 + 18736) = &unk_1E25C5E70;
    v3 -= 48;
  }
  while (v3 != -2112);
  v4 = 0;
  *(_QWORD *)(a1 + 16632) = &unk_1E25C5960;
  *(_QWORD *)(a1 + 16416) = &unk_1E25C5EA0;
  do
  {
    *(_QWORD *)(a1 + v4 + 16368) = &unk_1E25C5E70;
    v4 -= 48;
  }
  while (v4 != -2112);
  *(_QWORD *)(a1 + 14264) = &unk_1E25C5960;
  *(_QWORD *)(a1 + 13872) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 13656) = &unk_1E25C5EA0;
  *(_QWORD *)(a1 + 12912) = &unk_1E25C58D0;
  *(_QWORD *)(a1 + 12168) = &unk_1E25C5DE0;
  *(_QWORD *)(a1 + 11424) = &unk_1E25C5C00;
  *(_QWORD *)(a1 + 11368) = &unk_1E25C8540;
  sub_18D27ED94((uint64_t *)(a1 + 11408));
  *(_QWORD *)(a1 + 11368) = &unk_1E25C5960;
  *(_QWORD *)(a1 + 11320) = &unk_1E25C8540;
  sub_18D27ED94((uint64_t *)(a1 + 11360));
  *(_QWORD *)(a1 + 11320) = &unk_1E25C5960;
  *(_QWORD *)(a1 + 10928) = &unk_1E25C5EA0;
  *(_QWORD *)(a1 + 10880) = &unk_1E25C8540;
  sub_18D27ED94((uint64_t *)(a1 + 10920));
  *(_QWORD *)(a1 + 10880) = &unk_1E25C5960;
  *(_QWORD *)(a1 + 10136) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 9744) = &unk_1E25C5EA0;
  *(_QWORD *)(a1 + 8296) = &unk_1E25C58D0;
  sub_18D05DB90((_QWORD *)(a1 + 8272));
  *(_QWORD *)(a1 + 8160) = &unk_1E25B90A0;
  *(_QWORD *)(a1 + 3864) = &unk_1E25B9150;
  *(_QWORD *)(a1 + 7216) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 7096) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 6256) = &unk_1E25C5E70;
  sub_18D057070(a1 + 3864);
  if (*(char *)(a1 + 3863) < 0)
    operator delete(*(void **)(a1 + 3840));
  if (*(char *)(a1 + 3839) < 0)
    operator delete(*(void **)(a1 + 3816));
  if (*(_BYTE *)(a1 + 448))
    *(_QWORD *)(a1 + 248) = &off_1E25C30B0;
  return a1;
}

void sub_18D2B21B8()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2B21CC()
{
}

_QWORD *sub_18D2B21D8(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E25C1DB0;
  v2[1] = &unk_1E25C4150;
  memcpy(v2 + 2, (const void *)(a1 + 16), 0x334uLL);
  return v2;
}

void sub_18D2B223C()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2B2250()
{
}

_QWORD *sub_18D2B225C(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E25C1E10;
  v2[1] = &unk_1E25C4350;
  memcpy(v2 + 2, (const void *)(a1 + 16), 0x334uLL);
  return v2;
}

uint64_t raven::RavenActivityStateEstimator::GetCurrentTime(raven::RavenActivityStateEstimator *this)
{
  return *((_QWORD *)this + 35);
}

double raven::RavenActivityStateEstimator::GetHMMProbabilitySumThreshold(raven::RavenActivityStateEstimator *this)
{
  return *((double *)this + 34);
}

uint64_t raven::RavenActivityStateEstimator::Initialize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double v11;
  double v12;
  double v13;
  cnprint::CNPrinter *v16;
  uint64_t *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  cnprint::CNPrinter *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned __int8 v49[8];
  float64x2_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  double *v54;
  double v55[10];

  if (*(_BYTE *)a1)
  {
    LOWORD(v51) = 12;
    v49[0] = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, v49, "WARNING: ActivityStateEstimator being re-initialized", a4, a5, a6, a7, a8, v42);
    *(_BYTE *)a1 = 0;
  }
  v11 = *(double *)a2;
  if (!*a2)
  {
    LOWORD(v51) = 12;
    v49[0] = 4;
    v27 = "ActivityStateEstimator,invalid pointer to RavenParameters";
LABEL_22:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, v49, v27, a4, a5, a6, a7, a8, v42);
    return 0;
  }
  v12 = *((double *)a2 + 2) + (double)a2[1];
  v13 = fabs(v12);
  if ((unint64_t)(*(_QWORD *)&v13 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(_QWORD *)&v13 - 1) >= 0xFFFFFFFFFFFFFLL
    && *(_QWORD *)&v12 != 0)
  {
    LOWORD(v51) = 12;
    v49[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, v49, "ActivityStateEstimator,invalid input time,%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v12));
    return 0;
  }
  if ((*(_QWORD *)(*(_QWORD *)&v11 + 872) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *(double *)(*(_QWORD *)&v11 + 872) < 0.0)
  {
    LOWORD(v51) = 12;
    v49[0] = 4;
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 872);
    v27 = "ActivityStateEstimator,invalid estimator prediction interval,%.3lf";
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 272) = 0x3DDB7CDFD9D7BDBBLL;
  v46 = 0x10000000ALL;
  v44 = &unk_1E25C6020;
  v47 = &v48;
  v45 = xmmword_18D31CEF0;
  v16 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v44, 0.0);
  v17 = v47;
  *v47 = 0x3FF0000000000000;
  v18 = *(double *)(a1 + 272);
  v19 = DWORD1(v45);
  if (DWORD1(v45))
  {
    v20 = 0;
    v21 = v45;
    v22 = v45 - 1;
    v23 = 1;
    do
    {
      v24 = *(double *)&v17[v21 * v20];
      v25 = v23;
      v26 = v22;
      if (v21 >= 2)
      {
        do
        {
          v24 = v24 + *(double *)&v17[v25++];
          --v26;
        }
        while (v26);
      }
      v55[v20++] = v24;
      v23 += v21;
    }
    while (v20 != v19);
    v8 = v55[0];
  }
  v29 = DWORD2(v45);
  if (fabs(v8 + -1.0) > v18 && cnprint::CNPrinter::GetLogLevel(v16) <= 1)
  {
    LOWORD(v51) = 2;
    v49[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, v49, "WARNING: HMM initialized with non-normalized probability vector.", v30, v31, v32, v33, v34, v42);
  }
  sub_18D064F78((uint64_t)v49, (uint64_t)&v44);
  v35 = (float64x2_t)vdupq_lane_s32((int32x2_t)(v29 | 0x100000000), 0);
  HIDWORD(v35.f64[0]) = 1;
  v50 = v35;
  v53 = 0x10000000ALL;
  v51 = &unk_1E25C6020;
  *(_QWORD *)&v35.f64[1] = 0xA0000000ALL;
  v52 = xmmword_18D31CEF0;
  v54 = v55;
  v35.f64[0] = 1.0 / v8;
  sub_18D064EF4((uint64_t)v49, (uint64_t)&v51, v35);
  sub_18D053AA8(a1 + 24, (uint64_t)&v51);
  sub_18D053AA8(a1 + 144, a1 + 24);
  *(_DWORD *)(a1 + 264) = 1;
  *(_QWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 1);
  *(_BYTE *)a1 = 1;
  if (cnprint::CNPrinter::GetLogLevel(v36) <= 1)
  {
    LOWORD(v51) = 12;
    v49[0] = 1;
    v43 = *((double *)a2 + 2) + (double)a2[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, v49, "ActivityStateEstimator initialized,time,%.3lf", v37, v38, v39, v40, v41, SLOBYTE(v43));
  }
  return 1;
}

uint64_t raven::RavenActivityStateEstimator::IsInitialized(raven::RavenActivityStateEstimator *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t *sub_18D2B2618(uint64_t *result, char a2)
{
  uint64_t **v2;

  v2 = (uint64_t **)result;
  switch(a2)
  {
    case 4:
      return sub_18D2B2868((uint64_t *)*result, 4, 4);
    case 2:
      return sub_18D2B2868((uint64_t *)*result, 5, 5);
    case 1:
      sub_18D2B2868((uint64_t *)*result, 2, 2);
      return sub_18D2B2868(*v2, 3, 3);
  }
  return result;
}

uint64_t raven::RavenActivityStateEstimator::Reset(uint64_t this)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 280) = 0;
  *(_QWORD *)(this + 288) = 0x7FF8000000000000;
  return this;
}

uint64_t raven::RavenActivityStateEstimator::Update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v28;
  double v29;
  double v30;
  double v31;
  unsigned __int8 v32;
  __int16 v33;
  _OWORD v34[3];
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;

  if (*(_BYTE *)a1)
  {
    if ((*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)a3 > 6.4)
    {
      v11 = 1;
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
      {
        LOWORD(v34[0]) = 12;
        LOBYTE(v33) = 1;
        v30 = *(double *)(a1 + 288) + (double)*(uint64_t *)(a1 + 280);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v34, (unsigned __int8 *)&v33, "ActivityStateEstimator,time,%.3lf,step count age invalid or too old,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v30));
      }
    }
    else if (*(_DWORD *)(a3 + 8))
    {
      v34[0] = *(_OWORD *)a2;
      v34[1] = xmmword_18D33A0D0;
      v34[2] = vdupq_n_s64(0x3FEE666666666666uLL);
      v35 = vdupq_n_s64(0x3FA999999999999AuLL);
      v36 = v35;
      v37 = v35;
      v5 = sub_18D064988(a1 + 16, (uint64_t)v34);
      v11 = v5 == 0;
      if (v5)
      {
        v33 = 12;
        v32 = 4;
        v28 = *(double *)(a1 + 288) + (double)*(uint64_t *)(a1 + 280);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "ActivityStateEstimator,time,%.3lf,failed StepCountArgs update,code,%d", v6, v7, v8, v9, v10, SLOBYTE(v28));
      }
    }
    else
    {
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1))
      {
        LOWORD(v34[0]) = 12;
        LOBYTE(v33) = 0;
        v31 = *(double *)(a1 + 288) + (double)*(uint64_t *)(a1 + 280);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v34, (unsigned __int8 *)&v33, "ActivityStateEstimator,time,%.3lf,no update due to absence of steps", v22, v23, v24, v25, v26, SLOBYTE(v31));
      }
      return 1;
    }
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v34[0]) = 12;
      LOBYTE(v33) = 1;
      v29 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v34, (unsigned __int8 *)&v33, "WARNING: ActivityStateEstimator,time,%.3lf,trying to update uninitialized estimator", v12, v13, v14, v15, v16, SLOBYTE(v29));
    }
    return 0;
  }
  return v11;
}

uint64_t *sub_18D2B2868(uint64_t *result, int a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    v9 = operator new(0x20uLL);
    v9[7] = a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = sub_18D083D78((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

_QWORD *sub_18D2B291C(_QWORD *result)
{
  *result = &unk_1E25C5DB0;
  return result;
}

_QWORD *sub_18D2B2930(_QWORD *result)
{
  *result = off_1E25C5B40;
  return result;
}

void sub_18D2B2940(_QWORD *a1)
{
  *a1 = off_1E25C5B40;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2B2960(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2B296C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v9, v4);
      if (v4 >= 3)
      {
        v6 = v9;
        v7 = 8;
        v8 = v3 + v1 - v5;
        do
        {
          if (!v6)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v8 % (v4 - 1))) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v7);
            v6 = 1;
          }
          v8 += v3 + v1 - v5;
          v7 += 8;
        }
        while (8 * (v4 - 1) != v7);
      }
    }
  }
}

void sub_18D2B2A20(_QWORD *a1)
{
  *a1 = &unk_1E25C5DB0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2B2A44(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2B2A50(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[10];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

uint64_t raven::MovingStateChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 8) = 1;
  return 0;
}

_QWORD *raven::GNSSUncertaintyScaling::Fire7orNewerPhoneGNSSUncertaintyWrapper::Instance(raven::GNSSUncertaintyScaling::Fire7orNewerPhoneGNSSUncertaintyWrapper *this)
{
  _QWORD *result;

  result = (_QWORD *)qword_1EE061D68;
  if (!qword_1EE061D68)
  {
    result = (_QWORD *)operator new();
    *result = off_1E25C2EF8;
    qword_1EE061D68 = (uint64_t)result;
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::Fire7orNewerPhoneGNSSUncertaintyWrapper::GetUncertaintyScaleFactorCore(uint64_t a1, _DWORD *a2, _BYTE *a3, unsigned __int8 *a4, char *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned int v16;
  int v17;
  unsigned int v18;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  unsigned int v35;
  float *v36;
  BOOL v37;
  unsigned int v38;
  unsigned __int8 v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  if (!(_DWORD)a8)
  {
    v42 = v8;
    v43 = v9;
    v16 = *a4;
    if (v16 > 6)
    {
      v25 = 0;
      v22 = 0;
      v21 = 0;
      v20 = 0;
      goto LABEL_26;
    }
    v17 = 1 << v16;
    if ((v17 & 0x27) != 0)
    {
      v18 = *a5;
      if (v18 <= 6 && ((1 << v18) & 0x4C) != 0)
      {
LABEL_9:
        v20 = sub_18D2B3644();
        v21 = sub_18D2B3740();
        v22 = sub_18D2B383C();
        v23 = sub_18D2B3938();
LABEL_25:
        v25 = v23;
LABEL_26:
        v27 = 0;
        switch(*a3)
        {
          case 0:
          case 4:
          case 9:
            v41 = 12;
            v40 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid GNSS Band type: GNSS uncertainty parameters not found for obs_type,%d,band,%d,se,%d,activity,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a2);
LABEL_62:
            v11 = 1.0;
LABEL_69:
            v10 = 0x100000000;
            return v10 | LODWORD(v11);
          case 1:
          case 0xA:
            v27 = 5;
            break;
          case 2:
            v27 = 6;
            break;
          case 3:
            v27 = 4;
            break;
          case 6:
            v27 = 1;
            break;
          case 7:
            v27 = 2;
            break;
          case 8:
            v27 = 3;
            break;
          default:
            break;
        }
        switch(*a2)
        {
          case 1:
            if (!v20)
            {
              v41 = 12;
              v40 = 5;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid range unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
              goto LABEL_62;
            }
            v28 = a6[1];
            if (!*((_WORD *)&v20[89 * v27 + 8 * *a6] + v28))
              goto LABEL_62;
            v29 = *(float *)&v20[89 * v27 + 88];
            v30 = (float)*((unsigned __int16 *)&v20[89 * v27 + 8 * *a6] + v28);
            goto LABEL_68;
          case 2:
            if (v21)
            {
              v31 = (float *)&v21[89 * v27];
              v29 = v31[88];
              v32 = *a6;
              v33 = a6[1];
              goto LABEL_66;
            }
            v41 = 12;
            v40 = 5;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
            v11 = 4.0;
            goto LABEL_69;
          case 3:
            if (!v22)
              goto LABEL_52;
            v34 = (float *)&v22[89 * v27];
            v29 = v34[88];
            v32 = *a6;
            v33 = a6[1];
            v35 = *((unsigned __int16 *)&v34[8 * *a6] + v33);
            if (!v35)
              goto LABEL_64;
            goto LABEL_51;
          case 4:
            if (!v25)
            {
LABEL_52:
              v41 = 12;
              v40 = 5;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
              v11 = 2.0;
              goto LABEL_69;
            }
            v36 = (float *)&v25[89 * v27];
            v29 = v36[88];
            v32 = *a6;
            v33 = a6[1];
            v35 = *((unsigned __int16 *)&v36[8 * *a6] + v33);
            if (v35)
              v37 = 1;
            else
              v37 = v22 == 0;
            if (v37)
              goto LABEL_51;
            v35 = *((unsigned __int16 *)&v22[89 * v27 + 8 * v32] + v33);
            if (*((_WORD *)&v22[89 * v27 + 8 * v32] + v33))
            {
              v29 = *(float *)&v22[89 * v27 + 88];
LABEL_51:
              v30 = (float)v35;
            }
            else
            {
LABEL_64:
              if (!v21)
                goto LABEL_71;
              v31 = (float *)&v21[89 * v27];
LABEL_66:
              v38 = *((unsigned __int16 *)&v31[8 * v32] + v33);
              if (!v38)
              {
LABEL_71:
                v10 = 0x100000000;
                v11 = v29 / 0.01;
                return v10 | LODWORD(v11);
              }
              v30 = (float)v38;
            }
LABEL_68:
            v11 = v29 * v30;
            goto LABEL_69;
          default:
            v41 = 12;
            v40 = 5;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "Invalid obs type - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
            goto LABEL_62;
        }
      }
    }
    else
    {
      if ((v17 & 0x18) != 0)
      {
        v24 = *a5;
        if (v24 <= 6 && ((1 << v24) & 0x4C) != 0)
        {
          v20 = (_DWORD *)qword_1ECF24510;
          if (!qword_1ECF24510)
          {
            v20 = (_DWORD *)operator new();
            memcpy(v20, &unk_18D33F3C0, 0x160uLL);
            v20[88] = 1008981770;
            memcpy(v20 + 89, aSmifeyjuiM, 0x160uLL);
            v20[177] = 1008981770;
            memcpy(v20 + 178, &unk_18D33F680, 0x160uLL);
            v20[266] = 1008981770;
            memcpy(v20 + 267, aKvmu, 0x160uLL);
            v20[355] = 1008981770;
            memcpy(v20 + 356, &unk_18D33F940, 0x160uLL);
            v20[444] = 1008981770;
            memcpy(v20 + 445, &unk_18D33FAA0, 0x160uLL);
            v20[533] = 1008981770;
            memcpy(v20 + 534, aQzqaNsq, 0x160uLL);
            v20[622] = 1008981770;
            qword_1ECF24510 = (uint64_t)v20;
          }
          v21 = (_DWORD *)qword_1ECF24518;
          if (!qword_1ECF24518)
          {
            v21 = (_DWORD *)operator new();
            memcpy(v21, aGg94dfI9, 0x160uLL);
            v21[88] = 1025758986;
            memcpy(v21 + 89, a9938868a955993, 0x160uLL);
            v21[177] = 1025758986;
            memcpy(v21 + 178, a52Xr8Cn0711r6M, 0x160uLL);
            v21[266] = 1025758986;
            memcpy(v21 + 267, a2725B537582725, 0x160uLL);
            v21[355] = 1025758986;
            memcpy(v21 + 356, aBvWxnH8hUlkk, 0x160uLL);
            v21[444] = 1025758986;
            memcpy(v21 + 445, aWTysPnqkejrjct, 0x160uLL);
            v21[533] = 1025758986;
            memcpy(v21 + 534, aA4BfC3bfA4BfC3, 0x160uLL);
            v21[622] = 1025758986;
            qword_1ECF24518 = (uint64_t)v21;
          }
          v22 = (_DWORD *)qword_1ECF24520;
          if (!qword_1ECF24520)
          {
            v22 = (_DWORD *)operator new();
            memcpy(v22, a83f87gh57, 0x160uLL);
            v22[88] = 1017370378;
            memcpy(v22 + 89, &unk_18D340860, 0x160uLL);
            v22[177] = 1017370378;
            memcpy(v22 + 178, a04irEJk3488o6L, 0x160uLL);
            v22[266] = 1017370378;
            memcpy(v22 + 267, a40084008181486, 0x160uLL);
            v22[355] = 1017370378;
            memcpy(v22 + 356, aScuzmwm7fKrqqs, 0x160uLL);
            v22[444] = 1017370378;
            memcpy(v22 + 445, &aScuzmwm7fKrqqs[176], 0x160uLL);
            v22[533] = 1017370378;
            memcpy(v22 + 534, &aScuzmwm7fKrqqs[352], 0x160uLL);
            v22[622] = 1017370378;
            qword_1ECF24520 = (uint64_t)v22;
          }
          v25 = (_DWORD *)qword_1ECF24528;
          if (!qword_1ECF24528)
          {
            v25 = (_DWORD *)operator new();
            memcpy(v25, &unk_18D3410A0, 0x160uLL);
            v25[88] = 1008981770;
            memcpy(v25 + 89, &unk_18D341200, 0x160uLL);
            v25[177] = 1008981770;
            memcpy(v25 + 178, &unk_18D341360, 0x160uLL);
            v25[266] = 1008981770;
            memcpy(v25 + 267, &unk_18D3414C0, 0x160uLL);
            v25[355] = 1008981770;
            memcpy(v25 + 356, &unk_18D341620, 0x160uLL);
            v25[444] = 1008981770;
            memcpy(v25 + 445, &unk_18D341780, 0x160uLL);
            v25[533] = 1008981770;
            memcpy(v25 + 534, &unk_18D3418E0, 0x160uLL);
            v25[622] = 1008981770;
            qword_1ECF24528 = (uint64_t)v25;
          }
        }
        else
        {
          v20 = (_DWORD *)qword_1ECF24530;
          if (!qword_1ECF24530)
          {
            v20 = (_DWORD *)operator new();
            memcpy(v20, aXGMroL5d, 0x160uLL);
            v20[88] = 1008981770;
            memcpy(v20 + 89, &unk_18D341BA0, 0x160uLL);
            v20[177] = 1008981770;
            memcpy(v20 + 178, a1kFljlssc8, 0x160uLL);
            v20[266] = 1008981770;
            memcpy(v20 + 267, &unk_18D341E60, 0x160uLL);
            v20[355] = 1008981770;
            memcpy(v20 + 356, &unk_18D341FC0, 0x160uLL);
            v20[444] = 1008981770;
            memcpy(v20 + 445, &unk_18D342120, 0x160uLL);
            v20[533] = 1008981770;
            memcpy(v20 + 534, &unk_18D342280, 0x160uLL);
            v20[622] = 1008981770;
            qword_1ECF24530 = (uint64_t)v20;
          }
          v21 = (_DWORD *)qword_1ECF24538;
          if (!qword_1ECF24538)
          {
            v21 = (_DWORD *)operator new();
            memcpy(v21, aUhvrqtdigdi4vb, 0x160uLL);
            v21[88] = 1025758986;
            memcpy(v21 + 89, aC67cC796C67cC7, 0x160uLL);
            v21[177] = 1025758986;
            memcpy(v21 + 178, aZjfmvdcxydMp4d, 0x160uLL);
            v21[266] = 1025758986;
            memcpy(v21 + 267, &unk_18D342800, 0x160uLL);
            v21[355] = 1025758986;
            memcpy(v21 + 356, &unk_18D342960, 0x160uLL);
            v21[444] = 1025758986;
            memcpy(v21 + 445, &unk_18D342AC0, 0x160uLL);
            v21[533] = 1025758986;
            memcpy(v21 + 534, &unk_18D342C20, 0x160uLL);
            v21[622] = 1025758986;
            qword_1ECF24538 = (uint64_t)v21;
          }
          v22 = (_DWORD *)qword_1ECF24540;
          if (!qword_1ECF24540)
          {
            v22 = (_DWORD *)operator new();
            memcpy(v22, aOCdajeopM1, 0x160uLL);
            v22[88] = 1017370378;
            memcpy(v22 + 89, a3EAiF853EAiF85, 0x160uLL);
            v22[177] = 1017370378;
            memcpy(v22 + 178, aDnAdAhSgwfloAH, 0x160uLL);
            v22[266] = 1017370378;
            memcpy(v22 + 267, aD5b87C475Ad5b8, 0x160uLL);
            v22[355] = 1017370378;
            memcpy(v22 + 356, &unk_18D343300, 0x160uLL);
            v22[444] = 1017370378;
            memcpy(v22 + 445, &unk_18D343460, 0x160uLL);
            v22[533] = 1017370378;
            memcpy(v22 + 534, &unk_18D3435C0, 0x160uLL);
            v22[622] = 1017370378;
            qword_1ECF24540 = (uint64_t)v22;
          }
          v25 = (_DWORD *)qword_1ECF24548;
          if (!qword_1ECF24548)
          {
            v25 = (_DWORD *)operator new();
            memcpy(v25, &unk_18D343720, 0x160uLL);
            v25[88] = 1008981770;
            memcpy(v25 + 89, &unk_18D343880, 0x160uLL);
            v25[177] = 1008981770;
            memcpy(v25 + 178, &unk_18D3439E0, 0x160uLL);
            v25[266] = 1008981770;
            memcpy(v25 + 267, &unk_18D343B40, 0x160uLL);
            v25[355] = 1008981770;
            memcpy(v25 + 356, &unk_18D343CA0, 0x160uLL);
            v25[444] = 1008981770;
            memcpy(v25 + 445, &unk_18D343E00, 0x160uLL);
            v25[533] = 1008981770;
            memcpy(v25 + 534, &unk_18D343F60, 0x160uLL);
            v25[622] = 1008981770;
            qword_1ECF24548 = (uint64_t)v25;
          }
        }
        goto LABEL_26;
      }
      v26 = *a5;
      if (v26 <= 6 && ((1 << v26) & 0x4C) != 0)
        goto LABEL_9;
    }
    v20 = sub_18D2B3A34();
    v21 = sub_18D2B3B30();
    v22 = sub_18D2B3C2C();
    v23 = sub_18D2B3D28();
    goto LABEL_25;
  }
  v10 = 0;
  v11 = 0.0;
  return v10 | LODWORD(v11);
}

_DWORD *sub_18D2B3644()
{
  _DWORD *v0;

  v0 = (_DWORD *)qword_1EE061870;
  if (!qword_1EE061870)
  {
    v0 = (_DWORD *)operator new();
    memcpy(v0, aUmI349, 0x160uLL);
    v0[88] = 1008981770;
    memcpy(v0 + 89, aQYf, 0x160uLL);
    v0[177] = 1008981770;
    memcpy(v0 + 178, a0Fhk762, 0x160uLL);
    v0[266] = 1008981770;
    memcpy(v0 + 267, a11c39v7q8, 0x160uLL);
    v0[355] = 1008981770;
    memcpy(v0 + 356, &unk_18D33AC40, 0x160uLL);
    v0[444] = 1008981770;
    memcpy(v0 + 445, &unk_18D33ADA0, 0x160uLL);
    v0[533] = 1008981770;
    memcpy(v0 + 534, aR_2, 0x160uLL);
    v0[622] = 1008981770;
    qword_1EE061870 = (uint64_t)v0;
  }
  return v0;
}

_DWORD *sub_18D2B3740()
{
  _DWORD *v0;

  v0 = (_DWORD *)qword_1EE061878;
  if (!qword_1EE061878)
  {
    v0 = (_DWORD *)operator new();
    memcpy(v0, a3pePfoLC130699, 0x160uLL);
    v0[88] = 1025758986;
    memcpy(v0 + 89, a17139161713916, 0x160uLL);
    v0[177] = 1025758986;
    memcpy(v0 + 178, a7115by3F00429B, 0x160uLL);
    v0[266] = 1025758986;
    memcpy(v0 + 267, &unk_18D33B480, 0x160uLL);
    v0[355] = 1025758986;
    memcpy(v0 + 356, aSdnKryjT, 0x160uLL);
    v0[444] = 1025758986;
    memcpy(v0 + 445, aAvoKKeBo9hxnAy, 0x160uLL);
    v0[533] = 1025758986;
    memcpy(v0 + 534, a5842998c458429, 0x160uLL);
    v0[622] = 1025758986;
    qword_1EE061878 = (uint64_t)v0;
  }
  return v0;
}

_DWORD *sub_18D2B383C()
{
  _DWORD *v0;

  v0 = (_DWORD *)qword_1EE061880;
  if (!qword_1EE061880)
  {
    v0 = (_DWORD *)operator new();
    memcpy(v0, L"-<2OK@C<G=6*;R=r0/.6690):.-0GB-V0/*++,,#-(*(70\"C01-/(-''2((&/-!:532.-2+./(+',0%69672-213601/49-0HAA;;566968;4?,?Q"
       "MICGH?=K=HKGCC?QMICGH?=K=HKGCC?QMICGH?=K=HKGCC?QMICGH?=K=HKGCC?",
      0x160uLL);
    v0[88] = 1017370378;
    memcpy(v0 + 89, L"", 0x160uLL);
    v0[177] = 1017370378;
    memcpy(v0 + 178, a1358Q8J4z3127D, 0x160uLL);
    v0[266] = 1017370378;
    memcpy(v0 + 267, &a1358Q8J4z3127D[176], 0x160uLL);
    v0[355] = 1017370378;
    memcpy(v0 + 356, &unk_18D33BF80, 0x160uLL);
    v0[444] = 1017370378;
    memcpy(v0 + 445, aEyuhuacfsqH9fa, 0x160uLL);
    v0[533] = 1017370378;
    memcpy(v0 + 534, &aEyuhuacfsqH9fa[176], 0x160uLL);
    v0[622] = 1017370378;
    qword_1EE061880 = (uint64_t)v0;
  }
  return v0;
}

_DWORD *sub_18D2B3938()
{
  _DWORD *v0;

  v0 = (_DWORD *)qword_1EE061888;
  if (!qword_1EE061888)
  {
    v0 = (_DWORD *)operator new();
    memcpy(v0, &unk_18D33C3A0, 0x160uLL);
    v0[88] = 1008981770;
    memcpy(v0 + 89, &unk_18D33C500, 0x160uLL);
    v0[177] = 1008981770;
    memcpy(v0 + 178, &unk_18D33C660, 0x160uLL);
    v0[266] = 1008981770;
    memcpy(v0 + 267, &unk_18D33C7C0, 0x160uLL);
    v0[355] = 1008981770;
    memcpy(v0 + 356, &unk_18D33C920, 0x160uLL);
    v0[444] = 1008981770;
    memcpy(v0 + 445, &unk_18D33CA80, 0x160uLL);
    v0[533] = 1008981770;
    memcpy(v0 + 534, &unk_18D33CBE0, 0x160uLL);
    v0[622] = 1008981770;
    qword_1EE061888 = (uint64_t)v0;
  }
  return v0;
}

_DWORD *sub_18D2B3A34()
{
  _DWORD *v0;

  v0 = (_DWORD *)qword_1EE061438;
  if (!qword_1EE061438)
  {
    v0 = (_DWORD *)operator new();
    memcpy(v0, &unk_18D33CD40, 0x160uLL);
    v0[88] = 1008981770;
    memcpy(v0 + 89, &unk_18D33CEA0, 0x160uLL);
    v0[177] = 1008981770;
    memcpy(v0 + 178, &unk_18D33D000, 0x160uLL);
    v0[266] = 1008981770;
    memcpy(v0 + 267, &unk_18D33D160, 0x160uLL);
    v0[355] = 1008981770;
    memcpy(v0 + 356, a71452226ed8656, 0x160uLL);
    v0[444] = 1008981770;
    memcpy(v0 + 445, a919, 0x160uLL);
    v0[533] = 1008981770;
    memcpy(v0 + 534, &unk_18D33D580, 0x160uLL);
    v0[622] = 1008981770;
    qword_1EE061438 = (uint64_t)v0;
  }
  return v0;
}

_DWORD *sub_18D2B3B30()
{
  _DWORD *v0;

  v0 = (_DWORD *)qword_1EE061448;
  if (!qword_1EE061448)
  {
    v0 = (_DWORD *)operator new();
    memcpy(v0, a31201312520330, 0x160uLL);
    v0[88] = 1025758986;
    memcpy(v0 + 89, a925321201150, 0x160uLL);
    v0[177] = 1025758986;
    memcpy(v0 + 178, a031111, 0x160uLL);
    v0[266] = 1025758986;
    memcpy(v0 + 267, a444310, 0x160uLL);
    v0[355] = 1025758986;
    memcpy(v0 + 356, a77342571Regvuc, 0x160uLL);
    v0[444] = 1025758986;
    memcpy(v0 + 445, a1827375996kSUR, 0x160uLL);
    v0[533] = 1025758986;
    memcpy(v0 + 534, a37445210111022, 0x160uLL);
    v0[622] = 1025758986;
    qword_1EE061448 = (uint64_t)v0;
  }
  return v0;
}

_DWORD *sub_18D2B3C2C()
{
  _DWORD *v0;

  v0 = (_DWORD *)qword_1EE061440;
  if (!qword_1EE061440)
  {
    v0 = (_DWORD *)operator new();
    memcpy(v0, a170222347354, 0x160uLL);
    v0[88] = 1017370378;
    memcpy(v0 + 89, a69856888524713, 0x160uLL);
    v0[177] = 1017370378;
    memcpy(v0 + 178, a310222181, 0x160uLL);
    v0[266] = 1017370378;
    memcpy(v0 + 267, a89595895730701, 0x160uLL);
    v0[355] = 1017370378;
    memcpy(v0 + 356, a746486935Epact, 0x160uLL);
    v0[444] = 1017370378;
    memcpy(v0 + 445, a074G6hCSRzVUqp, 0x160uLL);
    v0[533] = 1017370378;
    memcpy(v0 + 534, a79798331665734, 0x160uLL);
    v0[622] = 1017370378;
    qword_1EE061440 = (uint64_t)v0;
  }
  return v0;
}

_DWORD *sub_18D2B3D28()
{
  _DWORD *v0;

  v0 = (_DWORD *)qword_1EE061450;
  if (!qword_1EE061450)
  {
    v0 = (_DWORD *)operator new();
    memcpy(v0, &unk_18D33EA20, 0x160uLL);
    v0[88] = 1008981770;
    memcpy(v0 + 89, &unk_18D33EB80, 0x160uLL);
    v0[177] = 1008981770;
    memcpy(v0 + 178, &unk_18D33ECE0, 0x160uLL);
    v0[266] = 1008981770;
    memcpy(v0 + 267, &unk_18D33EE40, 0x160uLL);
    v0[355] = 1008981770;
    memcpy(v0 + 356, &unk_18D33EFA0, 0x160uLL);
    v0[444] = 1008981770;
    memcpy(v0 + 445, &unk_18D33F100, 0x160uLL);
    v0[533] = 1008981770;
    memcpy(v0 + 534, &unk_18D33F260, 0x160uLL);
    v0[622] = 1008981770;
    qword_1EE061450 = (uint64_t)v0;
  }
  return v0;
}

uint64_t raven::GNSSUncertaintyScaling::Fire7orNewerPhoneGNSSUncertaintyWrapper::GetScaleFactorTableIndices(float a1, double a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t i;
  unint64_t j;
  BOOL v12;
  uint64_t v13;
  double v14;
  unsigned __int8 v16;
  __int16 v17;

  for (i = 0; i != 10; ++i)
  {
    if (flt_18D33A570[i] >= a1)
      break;
  }
  for (j = 0; j != 15; ++j)
  {
    if (dbl_18D33A5B0[j] >= a2)
      break;
  }
  v12 = i >= 0xB || j >= 0x10;
  v13 = !v12;
  if (v12)
  {
    v17 = 12;
    v16 = 5;
    v14 = a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "invalid index found,cn0,%.3f,cn0_bin,%zu,elev,%.3lf,elev_bin,%zu,", a6, a7, a8, a9, a10, SLOBYTE(v14));
  }
  else
  {
    *a4 = i;
    a4[1] = j;
  }
  return v13;
}

_QWORD *raven::GNSSUncertaintyScaling::Fire7orNewerWatchGNSSUncertaintyWrapper::Instance(raven::GNSSUncertaintyScaling::Fire7orNewerWatchGNSSUncertaintyWrapper *this)
{
  _QWORD *result;

  result = (_QWORD *)qword_1EE061D98;
  if (!qword_1EE061D98)
  {
    result = (_QWORD *)operator new();
    *result = off_1E25C2F28;
    qword_1EE061D98 = (uint64_t)result;
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::Fire7orNewerWatchGNSSUncertaintyWrapper::GetUncertaintyScaleFactorCore(uint64_t a1, _DWORD *a2, _BYTE *a3, unsigned __int8 *a4, char *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  BOOL v38;
  unsigned int v39;
  unsigned __int8 v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  if (!(_DWORD)a8)
  {
    v43 = v8;
    v44 = v9;
    v16 = *a4;
    if (v16 > 6)
    {
      v24 = 0;
      v23 = 0;
      v21 = 0;
      v19 = 0;
    }
    else
    {
      v17 = 1 << v16;
      if ((v17 & 0x27) != 0 || (v17 & 0x18) == 0)
      {
        sub_18D2B42E0();
        v19 = v18;
        sub_18D2B4528();
        v21 = v20;
        sub_18D2B4770();
        v23 = v22;
        sub_18D2B49B8();
      }
      else
      {
        sub_18D2B4C00();
        v19 = v25;
        sub_18D2B4E48();
        v21 = v26;
        sub_18D2B5090();
        v23 = v27;
        sub_18D2B52D8();
      }
    }
    v28 = 0;
    switch(*a3)
    {
      case 0:
      case 4:
      case 9:
        v42 = 12;
        v41 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "Invalid GNSS Band type: GNSS uncertainty parameters not found for obs_type,%d,band,%d,se,%d,activity,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a2);
LABEL_38:
        v11 = 1.0;
LABEL_45:
        v10 = 0x100000000;
        return v10 | LODWORD(v11);
      case 1:
      case 0xA:
        v28 = 5;
        break;
      case 2:
        v28 = 6;
        break;
      case 3:
        v28 = 4;
        break;
      case 6:
        v28 = 1;
        break;
      case 7:
        v28 = 2;
        break;
      case 8:
        v28 = 3;
        break;
      default:
        break;
    }
    switch(*a2)
    {
      case 1:
        if (!v19)
        {
          v42 = 12;
          v41 = 5;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "Invalid range unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
          goto LABEL_38;
        }
        v29 = a6[1];
        if (!*(_WORD *)(v19 + 228 * v28 + 32 * *a6 + 2 * v29))
          goto LABEL_38;
        v30 = *(float *)(v19 + 228 * v28 + 224);
        v31 = (float)*(unsigned __int16 *)(v19 + 228 * v28 + 32 * *a6 + 2 * v29);
        goto LABEL_44;
      case 2:
        if (v21)
        {
          v32 = v21 + 228 * v28;
          v30 = *(float *)(v32 + 224);
          v33 = *a6;
          v34 = a6[1];
          goto LABEL_42;
        }
        v42 = 12;
        v41 = 5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
        v11 = 4.0;
        goto LABEL_45;
      case 3:
        if (!v23)
          goto LABEL_36;
        v35 = v23 + 228 * v28;
        v30 = *(float *)(v35 + 224);
        v33 = *a6;
        v34 = a6[1];
        v36 = *(unsigned __int16 *)(v35 + 32 * *a6 + 2 * v34);
        if (!v36)
          goto LABEL_40;
        goto LABEL_35;
      case 4:
        if (!v24)
        {
LABEL_36:
          v42 = 12;
          v41 = 5;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
          v11 = 2.0;
          goto LABEL_45;
        }
        v37 = v24 + 228 * v28;
        v30 = *(float *)(v37 + 224);
        v33 = *a6;
        v34 = a6[1];
        v36 = *(unsigned __int16 *)(v37 + 32 * *a6 + 2 * v34);
        if (v36)
          v38 = 1;
        else
          v38 = v23 == 0;
        if (v38)
          goto LABEL_35;
        v36 = *(unsigned __int16 *)(v23 + 228 * v28 + 32 * v33 + 2 * v34);
        if (*(_WORD *)(v23 + 228 * v28 + 32 * v33 + 2 * v34))
        {
          v30 = *(float *)(v23 + 228 * v28 + 224);
LABEL_35:
          v31 = (float)v36;
        }
        else
        {
LABEL_40:
          if (!v21)
            goto LABEL_47;
          v32 = v21 + 228 * v28;
LABEL_42:
          v39 = *(unsigned __int16 *)(v32 + 32 * v33 + 2 * v34);
          if (!v39)
          {
LABEL_47:
            v10 = 0x100000000;
            v11 = v30 / 0.01;
            return v10 | LODWORD(v11);
          }
          v31 = (float)v39;
        }
LABEL_44:
        v11 = v30 * v31;
        goto LABEL_45;
      default:
        v42 = 12;
        v41 = 5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "Invalid obs type - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
        goto LABEL_38;
    }
  }
  v10 = 0;
  v11 = 0.0;
  return v10 | LODWORD(v11);
}

double sub_18D2B42E0()
{
  uint64_t v0;
  double result;

  if (!qword_1EE061890)
  {
    v0 = operator new();
    *(_OWORD *)(v0 + 160) = xmmword_18D344160;
    *(_OWORD *)(v0 + 176) = unk_18D344170;
    *(_OWORD *)(v0 + 192) = xmmword_18D344180;
    *(_OWORD *)(v0 + 208) = *(_OWORD *)asc_18D344190;
    *(_OWORD *)(v0 + 96) = xmmword_18D344120;
    *(_OWORD *)(v0 + 112) = unk_18D344130;
    *(_OWORD *)(v0 + 128) = xmmword_18D344140;
    *(_OWORD *)(v0 + 144) = unk_18D344150;
    *(_OWORD *)(v0 + 32) = xmmword_18D3440E0;
    *(_OWORD *)(v0 + 48) = unk_18D3440F0;
    *(_OWORD *)(v0 + 64) = xmmword_18D344100;
    *(_OWORD *)(v0 + 80) = unk_18D344110;
    *(_OWORD *)v0 = xmmword_18D3440C0;
    *(_OWORD *)(v0 + 16) = unk_18D3440D0;
    *(_DWORD *)(v0 + 224) = 1008981770;
    *(_OWORD *)(v0 + 388) = xmmword_18D344240;
    *(_OWORD *)(v0 + 404) = *(_OWORD *)aQwarknl;
    *(_OWORD *)(v0 + 420) = xmmword_18D344260;
    *(_OWORD *)(v0 + 436) = *(_OWORD *)aKnSlcuu;
    *(_OWORD *)(v0 + 324) = xmmword_18D344200;
    *(_OWORD *)(v0 + 340) = *(_OWORD *)aOvul;
    *(_OWORD *)(v0 + 356) = xmmword_18D344220;
    *(_OWORD *)(v0 + 372) = *(_OWORD *)aOIpgc;
    *(_OWORD *)(v0 + 260) = xmmword_18D3441C0;
    *(_OWORD *)(v0 + 276) = unk_18D3441D0;
    *(_OWORD *)(v0 + 292) = xmmword_18D3441E0;
    *(_OWORD *)(v0 + 308) = unk_18D3441F0;
    *(_OWORD *)(v0 + 228) = xmmword_18D3441A0;
    *(_OWORD *)(v0 + 244) = unk_18D3441B0;
    *(_DWORD *)(v0 + 452) = 1008981770;
    *(_OWORD *)(v0 + 616) = xmmword_18D344320;
    *(_OWORD *)(v0 + 632) = unk_18D344330;
    *(_OWORD *)(v0 + 648) = xmmword_18D344340;
    *(_OWORD *)(v0 + 664) = unk_18D344350;
    *(_OWORD *)(v0 + 552) = xmmword_18D3442E0;
    *(_OWORD *)(v0 + 568) = unk_18D3442F0;
    *(_OWORD *)(v0 + 584) = xmmword_18D344300;
    *(_OWORD *)(v0 + 600) = unk_18D344310;
    *(_OWORD *)(v0 + 488) = xmmword_18D3442A0;
    *(_OWORD *)(v0 + 504) = unk_18D3442B0;
    *(_OWORD *)(v0 + 520) = xmmword_18D3442C0;
    *(_OWORD *)(v0 + 536) = unk_18D3442D0;
    *(_OWORD *)(v0 + 456) = xmmword_18D344280;
    *(_OWORD *)(v0 + 472) = unk_18D344290;
    *(_DWORD *)(v0 + 680) = 1008981770;
    *(_OWORD *)(v0 + 844) = xmmword_18D344400;
    *(_OWORD *)(v0 + 860) = *(_OWORD *)aVyxM;
    *(_OWORD *)(v0 + 876) = xmmword_18D344420;
    *(_OWORD *)(v0 + 892) = *(_OWORD *)aVmqtue;
    *(_OWORD *)(v0 + 780) = xmmword_18D3443C0;
    *(_OWORD *)(v0 + 796) = unk_18D3443D0;
    *(_OWORD *)(v0 + 812) = xmmword_18D3443E0;
    *(_OWORD *)(v0 + 828) = *(_OWORD *)aBhcaow;
    *(_OWORD *)(v0 + 716) = xmmword_18D344380;
    *(_OWORD *)(v0 + 732) = unk_18D344390;
    *(_OWORD *)(v0 + 748) = xmmword_18D3443A0;
    *(_OWORD *)(v0 + 764) = unk_18D3443B0;
    *(_OWORD *)(v0 + 684) = *(_OWORD *)aRT;
    *(_OWORD *)(v0 + 700) = unk_18D344370;
    *(_DWORD *)(v0 + 908) = 1008981770;
    *(_OWORD *)(v0 + 1072) = *(_OWORD *)&a417958a87e8Le1[80];
    *(_OWORD *)(v0 + 1088) = *(_OWORD *)&a417958a87e8Le1[88];
    *(_OWORD *)(v0 + 1104) = *(_OWORD *)&a417958a87e8Le1[96];
    *(_OWORD *)(v0 + 1120) = *(_OWORD *)aRF5;
    *(_OWORD *)(v0 + 1008) = *(_OWORD *)&a417958a87e8Le1[48];
    *(_OWORD *)(v0 + 1024) = *(_OWORD *)&a417958a87e8Le1[56];
    *(_OWORD *)(v0 + 1040) = *(_OWORD *)&a417958a87e8Le1[64];
    *(_OWORD *)(v0 + 1056) = *(_OWORD *)&a417958a87e8Le1[72];
    *(_OWORD *)(v0 + 944) = *(_OWORD *)&a417958a87e8Le1[16];
    *(_OWORD *)(v0 + 960) = *(_OWORD *)&a417958a87e8Le1[24];
    *(_OWORD *)(v0 + 976) = *(_OWORD *)&a417958a87e8Le1[32];
    *(_OWORD *)(v0 + 992) = *(_OWORD *)&a417958a87e8Le1[40];
    *(_OWORD *)(v0 + 912) = *(_OWORD *)a417958a87e8Le1;
    *(_OWORD *)(v0 + 928) = *(_OWORD *)&a417958a87e8Le1[8];
    *(_DWORD *)(v0 + 1136) = 1008981770;
    *(_OWORD *)(v0 + 1300) = xmmword_18D3445C0;
    *(_OWORD *)(v0 + 1316) = unk_18D3445D0;
    *(_OWORD *)(v0 + 1332) = xmmword_18D3445E0;
    *(_OWORD *)(v0 + 1348) = *(_OWORD *)asc_18D3445F0;
    *(_OWORD *)(v0 + 1236) = xmmword_18D344580;
    *(_OWORD *)(v0 + 1252) = *(_OWORD *)asc_18D344590;
    *(_OWORD *)(v0 + 1268) = xmmword_18D3445A0;
    *(_OWORD *)(v0 + 1284) = unk_18D3445B0;
    *(_OWORD *)(v0 + 1172) = xmmword_18D344540;
    *(_OWORD *)(v0 + 1188) = *(_OWORD *)asc_18D344550;
    *(_OWORD *)(v0 + 1204) = xmmword_18D344560;
    *(_OWORD *)(v0 + 1220) = *(_OWORD *)asc_18D344570;
    *(_OWORD *)(v0 + 1140) = *(_OWORD *)asc_18D344520;
    *(_OWORD *)(v0 + 1156) = unk_18D344530;
    *(_DWORD *)(v0 + 1364) = 1008981770;
    *(_OWORD *)(v0 + 1528) = xmmword_18D3446A0;
    *(_OWORD *)(v0 + 1544) = unk_18D3446B0;
    *(_OWORD *)(v0 + 1560) = xmmword_18D3446C0;
    *(_OWORD *)(v0 + 1576) = *(_OWORD *)aRumpqnT;
    *(_OWORD *)(v0 + 1464) = xmmword_18D344660;
    *(_OWORD *)(v0 + 1480) = unk_18D344670;
    *(_OWORD *)(v0 + 1496) = xmmword_18D344680;
    *(_OWORD *)(v0 + 1512) = unk_18D344690;
    *(_OWORD *)(v0 + 1400) = xmmword_18D344620;
    *(_OWORD *)(v0 + 1416) = unk_18D344630;
    *(_OWORD *)(v0 + 1432) = xmmword_18D344640;
    *(_OWORD *)(v0 + 1448) = unk_18D344650;
    result = *(double *)aKkkddy;
    *(_OWORD *)(v0 + 1368) = *(_OWORD *)aKkkddy;
    *(_OWORD *)(v0 + 1384) = unk_18D344610;
    *(_DWORD *)(v0 + 1592) = 1008981770;
    qword_1EE061890 = v0;
  }
  return result;
}

double sub_18D2B4528()
{
  uint64_t v0;
  double result;

  if (!qword_1EE061898)
  {
    v0 = operator new();
    *(_OWORD *)(v0 + 160) = xmmword_18D344780;
    *(_OWORD *)(v0 + 176) = *(_OWORD *)aLiniy;
    *(_OWORD *)(v0 + 192) = xmmword_18D3447A0;
    *(_OWORD *)(v0 + 208) = *(_OWORD *)aDyzqw;
    *(_OWORD *)(v0 + 96) = xmmword_18D344740;
    *(_OWORD *)(v0 + 112) = *(_OWORD *)aDaAm8;
    *(_OWORD *)(v0 + 128) = xmmword_18D344760;
    *(_OWORD *)(v0 + 144) = *(_OWORD *)aIeeciFf;
    *(_OWORD *)(v0 + 32) = xmmword_18D344700;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)a6_0;
    *(_OWORD *)(v0 + 64) = xmmword_18D344720;
    *(_OWORD *)(v0 + 80) = *(_OWORD *)aB7dYy;
    *(_OWORD *)v0 = *(_OWORD *)a306;
    *(_OWORD *)(v0 + 16) = *(_OWORD *)&a306[16];
    *(_DWORD *)(v0 + 224) = 1025758986;
    *(_OWORD *)(v0 + 388) = xmmword_18D344860;
    *(_OWORD *)(v0 + 404) = *(_OWORD *)aUjhlf88;
    *(_OWORD *)(v0 + 420) = xmmword_18D344880;
    *(_OWORD *)(v0 + 436) = *(_OWORD *)aPcnK;
    *(_OWORD *)(v0 + 324) = xmmword_18D344820;
    *(_OWORD *)(v0 + 340) = *(_OWORD *)aBZJj;
    *(_OWORD *)(v0 + 356) = xmmword_18D344840;
    *(_OWORD *)(v0 + 372) = *(_OWORD *)aGdcbwcee;
    *(_OWORD *)(v0 + 260) = xmmword_18D3447E0;
    *(_OWORD *)(v0 + 276) = *(_OWORD *)a4799m;
    *(_OWORD *)(v0 + 292) = xmmword_18D344800;
    *(_OWORD *)(v0 + 308) = *(_OWORD *)a98W1;
    *(_OWORD *)(v0 + 228) = *(_OWORD *)a063;
    *(_OWORD *)(v0 + 244) = *(_OWORD *)&a063[16];
    *(_DWORD *)(v0 + 452) = 1025758986;
    *(_OWORD *)(v0 + 616) = *(_OWORD *)&a470111O3230244[80];
    *(_OWORD *)(v0 + 632) = *(_OWORD *)&a470111O3230244[88];
    *(_OWORD *)(v0 + 648) = *(_OWORD *)&a470111O3230244[96];
    *(_OWORD *)(v0 + 664) = *(_OWORD *)&a470111O3230244[104];
    *(_OWORD *)(v0 + 552) = *(_OWORD *)&a470111O3230244[48];
    *(_OWORD *)(v0 + 568) = *(_OWORD *)&a470111O3230244[56];
    *(_OWORD *)(v0 + 584) = *(_OWORD *)&a470111O3230244[64];
    *(_OWORD *)(v0 + 600) = *(_OWORD *)&a470111O3230244[72];
    *(_OWORD *)(v0 + 488) = *(_OWORD *)&a470111O3230244[16];
    *(_OWORD *)(v0 + 504) = *(_OWORD *)&a470111O3230244[24];
    *(_OWORD *)(v0 + 520) = *(_OWORD *)&a470111O3230244[32];
    *(_OWORD *)(v0 + 536) = *(_OWORD *)&a470111O3230244[40];
    *(_OWORD *)(v0 + 456) = *(_OWORD *)a470111O3230244;
    *(_OWORD *)(v0 + 472) = *(_OWORD *)&a470111O3230244[8];
    *(_DWORD *)(v0 + 680) = 1025758986;
    *(_OWORD *)(v0 + 844) = *(_OWORD *)&a470111O3230244[192];
    *(_OWORD *)(v0 + 860) = *(_OWORD *)&a470111O3230244[200];
    *(_OWORD *)(v0 + 876) = *(_OWORD *)&a470111O3230244[208];
    *(_OWORD *)(v0 + 892) = *(_OWORD *)&a470111O3230244[216];
    *(_OWORD *)(v0 + 780) = *(_OWORD *)&a470111O3230244[160];
    *(_OWORD *)(v0 + 796) = *(_OWORD *)&a470111O3230244[168];
    *(_OWORD *)(v0 + 812) = *(_OWORD *)&a470111O3230244[176];
    *(_OWORD *)(v0 + 828) = *(_OWORD *)&a470111O3230244[184];
    *(_OWORD *)(v0 + 716) = *(_OWORD *)&a470111O3230244[128];
    *(_OWORD *)(v0 + 732) = *(_OWORD *)&a470111O3230244[136];
    *(_OWORD *)(v0 + 748) = *(_OWORD *)&a470111O3230244[144];
    *(_OWORD *)(v0 + 764) = *(_OWORD *)&a470111O3230244[152];
    *(_OWORD *)(v0 + 684) = *(_OWORD *)&a470111O3230244[112];
    *(_OWORD *)(v0 + 700) = *(_OWORD *)&a470111O3230244[120];
    *(_DWORD *)(v0 + 908) = 1025758986;
    *(_OWORD *)(v0 + 1072) = xmmword_18D344B00;
    *(_OWORD *)(v0 + 1088) = *(_OWORD *)aEoca;
    *(_OWORD *)(v0 + 1104) = xmmword_18D344B20;
    *(_OWORD *)(v0 + 1120) = *(_OWORD *)aSCccc;
    *(_OWORD *)(v0 + 1008) = *(_OWORD *)&a470111O3230244[272];
    *(_OWORD *)(v0 + 1024) = *(_OWORD *)&a470111O3230244[280];
    *(_OWORD *)(v0 + 1040) = xmmword_18D344AE0;
    *(_OWORD *)(v0 + 1056) = *(_OWORD *)aGiB;
    *(_OWORD *)(v0 + 944) = *(_OWORD *)&a470111O3230244[240];
    *(_OWORD *)(v0 + 960) = *(_OWORD *)&a470111O3230244[248];
    *(_OWORD *)(v0 + 976) = *(_OWORD *)&a470111O3230244[256];
    *(_OWORD *)(v0 + 992) = *(_OWORD *)&a470111O3230244[264];
    *(_OWORD *)(v0 + 912) = *(_OWORD *)&a470111O3230244[224];
    *(_OWORD *)(v0 + 928) = *(_OWORD *)&a470111O3230244[232];
    *(_DWORD *)(v0 + 1136) = 1025758986;
    *(_OWORD *)(v0 + 1300) = *(_OWORD *)&aAjijnb8lywvwnn[80];
    *(_OWORD *)(v0 + 1316) = *(_OWORD *)&aAjijnb8lywvwnn[88];
    *(_OWORD *)(v0 + 1332) = *(_OWORD *)&aAjijnb8lywvwnn[96];
    *(_OWORD *)(v0 + 1348) = *(_OWORD *)&aAjijnb8lywvwnn[104];
    *(_OWORD *)(v0 + 1236) = *(_OWORD *)&aAjijnb8lywvwnn[48];
    *(_OWORD *)(v0 + 1252) = *(_OWORD *)&aAjijnb8lywvwnn[56];
    *(_OWORD *)(v0 + 1268) = *(_OWORD *)&aAjijnb8lywvwnn[64];
    *(_OWORD *)(v0 + 1284) = *(_OWORD *)&aAjijnb8lywvwnn[72];
    *(_OWORD *)(v0 + 1172) = *(_OWORD *)&aAjijnb8lywvwnn[16];
    *(_OWORD *)(v0 + 1188) = *(_OWORD *)&aAjijnb8lywvwnn[24];
    *(_OWORD *)(v0 + 1204) = *(_OWORD *)&aAjijnb8lywvwnn[32];
    *(_OWORD *)(v0 + 1220) = *(_OWORD *)&aAjijnb8lywvwnn[40];
    *(_OWORD *)(v0 + 1140) = *(_OWORD *)aAjijnb8lywvwnn;
    *(_OWORD *)(v0 + 1156) = *(_OWORD *)&aAjijnb8lywvwnn[8];
    *(_DWORD *)(v0 + 1364) = 1025758986;
    *(_OWORD *)(v0 + 1528) = xmmword_18D344CC0;
    *(_OWORD *)(v0 + 1544) = *(_OWORD *)aSsmyxiii;
    *(_OWORD *)(v0 + 1560) = xmmword_18D344CE0;
    *(_OWORD *)(v0 + 1576) = *(_OWORD *)aWzhfpddd;
    *(_OWORD *)(v0 + 1464) = xmmword_18D344C80;
    *(_OWORD *)(v0 + 1480) = *(_OWORD *)aBddxFff;
    *(_OWORD *)(v0 + 1496) = xmmword_18D344CA0;
    *(_OWORD *)(v0 + 1512) = *(_OWORD *)aKhmwbeee;
    *(_OWORD *)(v0 + 1400) = xmmword_18D344C40;
    *(_OWORD *)(v0 + 1416) = *(_OWORD *)aBg0ar444;
    *(_OWORD *)(v0 + 1432) = xmmword_18D344C60;
    *(_OWORD *)(v0 + 1448) = *(_OWORD *)aRGsbbb;
    result = *(double *)&aAjijnb8lywvwnn[112];
    *(_OWORD *)(v0 + 1368) = *(_OWORD *)&aAjijnb8lywvwnn[112];
    *(_OWORD *)(v0 + 1384) = unk_18D344C30;
    *(_DWORD *)(v0 + 1592) = 1025758986;
    qword_1EE061898 = v0;
  }
  return result;
}

double sub_18D2B4770()
{
  uint64_t v0;
  double result;

  if (!qword_1EE0618A0)
  {
    v0 = operator new();
    *(_OWORD *)(v0 + 160) = xmmword_18D344DA0;
    *(_OWORD *)(v0 + 176) = *(_OWORD *)asc_18D344DB0;
    *(_OWORD *)(v0 + 192) = xmmword_18D344DC0;
    *(_OWORD *)(v0 + 208) = *(_OWORD *)asc_18D344DD0;
    *(_OWORD *)(v0 + 96) = xmmword_18D344D60;
    *(_OWORD *)(v0 + 112) = *(_OWORD *)asc_18D344D70;
    *(_OWORD *)(v0 + 128) = xmmword_18D344D80;
    *(_OWORD *)(v0 + 144) = *(_OWORD *)a0_0;
    *(_OWORD *)(v0 + 32) = xmmword_18D344D20;
    *(_OWORD *)(v0 + 48) = unk_18D344D30;
    *(_OWORD *)(v0 + 64) = xmmword_18D344D40;
    *(_OWORD *)(v0 + 80) = *(_OWORD *)asc_18D344D50;
    *(_OWORD *)v0 = *(_OWORD *)asc_18D344D00;
    *(_OWORD *)(v0 + 16) = unk_18D344D10;
    *(_DWORD *)(v0 + 224) = 1017370378;
    *(_OWORD *)(v0 + 388) = xmmword_18D344E80;
    *(_OWORD *)(v0 + 404) = *(_OWORD *)asc_18D344E90;
    *(_OWORD *)(v0 + 420) = xmmword_18D344EA0;
    *(_OWORD *)(v0 + 436) = *(_OWORD *)a37;
    *(_OWORD *)(v0 + 324) = xmmword_18D344E40;
    *(_OWORD *)(v0 + 340) = unk_18D344E50;
    *(_OWORD *)(v0 + 356) = xmmword_18D344E60;
    *(_OWORD *)(v0 + 372) = unk_18D344E70;
    *(_OWORD *)(v0 + 260) = *(_OWORD *)&asc_18D344DE0[16];
    *(_OWORD *)(v0 + 276) = unk_18D344E10;
    *(_OWORD *)(v0 + 292) = xmmword_18D344E20;
    *(_OWORD *)(v0 + 308) = unk_18D344E30;
    *(_OWORD *)(v0 + 228) = *(_OWORD *)asc_18D344DE0;
    *(_OWORD *)(v0 + 244) = *(_OWORD *)&asc_18D344DE0[8];
    *(_DWORD *)(v0 + 452) = 1017370378;
    *(_OWORD *)(v0 + 616) = xmmword_18D344F60;
    *(_OWORD *)(v0 + 632) = unk_18D344F70;
    *(_OWORD *)(v0 + 648) = xmmword_18D344F80;
    *(_OWORD *)(v0 + 664) = unk_18D344F90;
    *(_OWORD *)(v0 + 552) = xmmword_18D344F20;
    *(_OWORD *)(v0 + 568) = unk_18D344F30;
    *(_OWORD *)(v0 + 584) = xmmword_18D344F40;
    *(_OWORD *)(v0 + 600) = *(_OWORD *)a32;
    *(_OWORD *)(v0 + 488) = xmmword_18D344EE0;
    *(_OWORD *)(v0 + 504) = *(_OWORD *)a9O;
    *(_OWORD *)(v0 + 520) = xmmword_18D344F00;
    *(_OWORD *)(v0 + 536) = *(_OWORD *)a8_0;
    *(_OWORD *)(v0 + 456) = *(_OWORD *)asc_18D344EC0;
    *(_OWORD *)(v0 + 472) = unk_18D344ED0;
    *(_DWORD *)(v0 + 680) = 1017370378;
    *(_OWORD *)(v0 + 844) = xmmword_18D345040;
    *(_OWORD *)(v0 + 860) = unk_18D345050;
    *(_OWORD *)(v0 + 876) = xmmword_18D345060;
    *(_OWORD *)(v0 + 892) = unk_18D345070;
    *(_OWORD *)(v0 + 780) = xmmword_18D345000;
    *(_OWORD *)(v0 + 796) = unk_18D345010;
    *(_OWORD *)(v0 + 812) = xmmword_18D345020;
    *(_OWORD *)(v0 + 828) = unk_18D345030;
    *(_OWORD *)(v0 + 716) = xmmword_18D344FC0;
    *(_OWORD *)(v0 + 732) = *(_OWORD *)a6U;
    *(_OWORD *)(v0 + 748) = xmmword_18D344FE0;
    *(_OWORD *)(v0 + 764) = unk_18D344FF0;
    *(_OWORD *)(v0 + 684) = *(_OWORD *)asc_18D344FA0;
    *(_OWORD *)(v0 + 700) = *(_OWORD *)&asc_18D344FA0[16];
    *(_DWORD *)(v0 + 908) = 1017370378;
    *(_OWORD *)(v0 + 1072) = xmmword_18D345120;
    *(_OWORD *)(v0 + 1088) = *(_OWORD *)a30;
    *(_OWORD *)(v0 + 1104) = xmmword_18D345140;
    *(_OWORD *)(v0 + 1120) = *(_OWORD *)a9870000;
    *(_OWORD *)(v0 + 1008) = *(_OWORD *)&aDH70GBFjhlf67C[48];
    *(_OWORD *)(v0 + 1024) = *(_OWORD *)&aDH70GBFjhlf67C[56];
    *(_OWORD *)(v0 + 1040) = xmmword_18D345100;
    *(_OWORD *)(v0 + 1056) = *(_OWORD *)a411111;
    *(_OWORD *)(v0 + 944) = *(_OWORD *)&aDH70GBFjhlf67C[16];
    *(_OWORD *)(v0 + 960) = *(_OWORD *)&aDH70GBFjhlf67C[24];
    *(_OWORD *)(v0 + 976) = *(_OWORD *)&aDH70GBFjhlf67C[32];
    *(_OWORD *)(v0 + 992) = *(_OWORD *)&aDH70GBFjhlf67C[40];
    *(_OWORD *)(v0 + 912) = *(_OWORD *)aDH70GBFjhlf67C;
    *(_OWORD *)(v0 + 928) = *(_OWORD *)&aDH70GBFjhlf67C[8];
    *(_DWORD *)(v0 + 1136) = 1017370378;
    *(_OWORD *)(v0 + 1300) = *(_OWORD *)&aGeag2EHgppMkig[80];
    *(_OWORD *)(v0 + 1316) = *(_OWORD *)&aGeag2EHgppMkig[88];
    *(_OWORD *)(v0 + 1332) = *(_OWORD *)&aGeag2EHgppMkig[96];
    *(_OWORD *)(v0 + 1348) = *(_OWORD *)&aGeag2EHgppMkig[104];
    *(_OWORD *)(v0 + 1236) = *(_OWORD *)&aGeag2EHgppMkig[48];
    *(_OWORD *)(v0 + 1252) = *(_OWORD *)&aGeag2EHgppMkig[56];
    *(_OWORD *)(v0 + 1268) = *(_OWORD *)&aGeag2EHgppMkig[64];
    *(_OWORD *)(v0 + 1284) = *(_OWORD *)&aGeag2EHgppMkig[72];
    *(_OWORD *)(v0 + 1172) = *(_OWORD *)&aGeag2EHgppMkig[16];
    *(_OWORD *)(v0 + 1188) = *(_OWORD *)&aGeag2EHgppMkig[24];
    *(_OWORD *)(v0 + 1204) = *(_OWORD *)&aGeag2EHgppMkig[32];
    *(_OWORD *)(v0 + 1220) = *(_OWORD *)&aGeag2EHgppMkig[40];
    *(_OWORD *)(v0 + 1140) = *(_OWORD *)aGeag2EHgppMkig;
    *(_OWORD *)(v0 + 1156) = *(_OWORD *)&aGeag2EHgppMkig[8];
    *(_DWORD *)(v0 + 1364) = 1017370378;
    *(_OWORD *)(v0 + 1528) = xmmword_18D3452E0;
    *(_OWORD *)(v0 + 1544) = *(_OWORD *)asc_18D3452F0;
    *(_OWORD *)(v0 + 1560) = xmmword_18D345300;
    *(_OWORD *)(v0 + 1576) = *(_OWORD *)a1351000;
    *(_OWORD *)(v0 + 1464) = xmmword_18D3452A0;
    *(_OWORD *)(v0 + 1480) = *(_OWORD *)asc_18D3452B0;
    *(_OWORD *)(v0 + 1496) = xmmword_18D3452C0;
    *(_OWORD *)(v0 + 1512) = *(_OWORD *)asc_18D3452D0;
    *(_OWORD *)(v0 + 1400) = xmmword_18D345260;
    *(_OWORD *)(v0 + 1416) = *(_OWORD *)a1_1;
    *(_OWORD *)(v0 + 1432) = xmmword_18D345280;
    *(_OWORD *)(v0 + 1448) = *(_OWORD *)asc_18D345290;
    result = *(double *)&aGeag2EHgppMkig[112];
    *(_OWORD *)(v0 + 1368) = *(_OWORD *)&aGeag2EHgppMkig[112];
    *(_OWORD *)(v0 + 1384) = unk_18D345250;
    *(_DWORD *)(v0 + 1592) = 1017370378;
    qword_1EE0618A0 = v0;
  }
  return result;
}

double sub_18D2B49B8()
{
  uint64_t v0;
  double result;

  if (!qword_1EE0618A8)
  {
    v0 = operator new();
    *(_OWORD *)(v0 + 160) = xmmword_18D3453C0;
    *(_OWORD *)(v0 + 176) = unk_18D3453D0;
    *(_OWORD *)(v0 + 192) = xmmword_18D3453E0;
    *(_OWORD *)(v0 + 208) = unk_18D3453F0;
    *(_OWORD *)(v0 + 96) = xmmword_18D345380;
    *(_OWORD *)(v0 + 112) = unk_18D345390;
    *(_OWORD *)(v0 + 128) = xmmword_18D3453A0;
    *(_OWORD *)(v0 + 144) = unk_18D3453B0;
    *(_OWORD *)(v0 + 32) = xmmword_18D345340;
    *(_OWORD *)(v0 + 48) = unk_18D345350;
    *(_OWORD *)(v0 + 64) = xmmword_18D345360;
    *(_OWORD *)(v0 + 80) = unk_18D345370;
    *(_OWORD *)v0 = xmmword_18D345320;
    *(_OWORD *)(v0 + 16) = *(_OWORD *)algn_18D345330;
    *(_DWORD *)(v0 + 224) = 1008981770;
    *(_OWORD *)(v0 + 388) = xmmword_18D3454A0;
    *(_OWORD *)(v0 + 404) = unk_18D3454B0;
    *(_OWORD *)(v0 + 420) = xmmword_18D3454C0;
    *(_OWORD *)(v0 + 436) = unk_18D3454D0;
    *(_OWORD *)(v0 + 324) = xmmword_18D345460;
    *(_OWORD *)(v0 + 340) = unk_18D345470;
    *(_OWORD *)(v0 + 356) = xmmword_18D345480;
    *(_OWORD *)(v0 + 372) = unk_18D345490;
    *(_OWORD *)(v0 + 260) = xmmword_18D345420;
    *(_OWORD *)(v0 + 276) = unk_18D345430;
    *(_OWORD *)(v0 + 292) = xmmword_18D345440;
    *(_OWORD *)(v0 + 308) = unk_18D345450;
    *(_OWORD *)(v0 + 228) = xmmword_18D345400;
    *(_OWORD *)(v0 + 244) = *(_OWORD *)algn_18D345410;
    *(_DWORD *)(v0 + 452) = 1008981770;
    *(_OWORD *)(v0 + 616) = xmmword_18D345580;
    *(_OWORD *)(v0 + 632) = unk_18D345590;
    *(_OWORD *)(v0 + 648) = xmmword_18D3455A0;
    *(_OWORD *)(v0 + 664) = unk_18D3455B0;
    *(_OWORD *)(v0 + 552) = xmmword_18D345540;
    *(_OWORD *)(v0 + 568) = unk_18D345550;
    *(_OWORD *)(v0 + 584) = xmmword_18D345560;
    *(_OWORD *)(v0 + 600) = unk_18D345570;
    *(_OWORD *)(v0 + 488) = xmmword_18D345500;
    *(_OWORD *)(v0 + 504) = unk_18D345510;
    *(_OWORD *)(v0 + 520) = xmmword_18D345520;
    *(_OWORD *)(v0 + 536) = unk_18D345530;
    *(_OWORD *)(v0 + 456) = xmmword_18D3454E0;
    *(_OWORD *)(v0 + 472) = *(_OWORD *)algn_18D3454F0;
    *(_DWORD *)(v0 + 680) = 1008981770;
    *(_OWORD *)(v0 + 844) = xmmword_18D345660;
    *(_OWORD *)(v0 + 860) = unk_18D345670;
    *(_OWORD *)(v0 + 876) = xmmword_18D345680;
    *(_OWORD *)(v0 + 892) = unk_18D345690;
    *(_OWORD *)(v0 + 780) = xmmword_18D345620;
    *(_OWORD *)(v0 + 796) = unk_18D345630;
    *(_OWORD *)(v0 + 812) = xmmword_18D345640;
    *(_OWORD *)(v0 + 828) = unk_18D345650;
    *(_OWORD *)(v0 + 716) = xmmword_18D3455E0;
    *(_OWORD *)(v0 + 732) = *(_OWORD *)asc_18D3455F0;
    *(_OWORD *)(v0 + 748) = xmmword_18D345600;
    *(_OWORD *)(v0 + 764) = *(_OWORD *)asc_18D345610;
    *(_OWORD *)(v0 + 684) = xmmword_18D3455C0;
    *(_OWORD *)(v0 + 700) = *(_OWORD *)algn_18D3455D0;
    *(_DWORD *)(v0 + 908) = 1008981770;
    *(_OWORD *)(v0 + 1072) = xmmword_18D345740;
    *(_OWORD *)(v0 + 1088) = unk_18D345750;
    *(_OWORD *)(v0 + 1104) = xmmword_18D345760;
    *(_OWORD *)(v0 + 1120) = unk_18D345770;
    *(_OWORD *)(v0 + 1008) = xmmword_18D345700;
    *(_OWORD *)(v0 + 1024) = unk_18D345710;
    *(_OWORD *)(v0 + 1040) = xmmword_18D345720;
    *(_OWORD *)(v0 + 1056) = unk_18D345730;
    *(_OWORD *)(v0 + 944) = xmmword_18D3456C0;
    *(_OWORD *)(v0 + 960) = unk_18D3456D0;
    *(_OWORD *)(v0 + 976) = xmmword_18D3456E0;
    *(_OWORD *)(v0 + 992) = unk_18D3456F0;
    *(_OWORD *)(v0 + 912) = xmmword_18D3456A0;
    *(_OWORD *)(v0 + 928) = *(_OWORD *)algn_18D3456B0;
    *(_DWORD *)(v0 + 1136) = 1008981770;
    *(_OWORD *)(v0 + 1300) = xmmword_18D345820;
    *(_OWORD *)(v0 + 1316) = unk_18D345830;
    *(_OWORD *)(v0 + 1332) = xmmword_18D345840;
    *(_OWORD *)(v0 + 1348) = unk_18D345850;
    *(_OWORD *)(v0 + 1236) = xmmword_18D3457E0;
    *(_OWORD *)(v0 + 1252) = unk_18D3457F0;
    *(_OWORD *)(v0 + 1268) = xmmword_18D345800;
    *(_OWORD *)(v0 + 1284) = unk_18D345810;
    *(_OWORD *)(v0 + 1172) = xmmword_18D3457A0;
    *(_OWORD *)(v0 + 1188) = unk_18D3457B0;
    *(_OWORD *)(v0 + 1204) = xmmword_18D3457C0;
    *(_OWORD *)(v0 + 1220) = unk_18D3457D0;
    *(_OWORD *)(v0 + 1140) = xmmword_18D345780;
    *(_OWORD *)(v0 + 1156) = *(_OWORD *)algn_18D345790;
    *(_DWORD *)(v0 + 1364) = 1008981770;
    *(_OWORD *)(v0 + 1528) = xmmword_18D345900;
    *(_OWORD *)(v0 + 1544) = unk_18D345910;
    *(_OWORD *)(v0 + 1560) = xmmword_18D345920;
    *(_OWORD *)(v0 + 1576) = unk_18D345930;
    *(_OWORD *)(v0 + 1464) = xmmword_18D3458C0;
    *(_OWORD *)(v0 + 1480) = unk_18D3458D0;
    *(_OWORD *)(v0 + 1496) = xmmword_18D3458E0;
    *(_OWORD *)(v0 + 1512) = unk_18D3458F0;
    *(_OWORD *)(v0 + 1400) = xmmword_18D345880;
    *(_OWORD *)(v0 + 1416) = unk_18D345890;
    *(_OWORD *)(v0 + 1432) = xmmword_18D3458A0;
    *(_OWORD *)(v0 + 1448) = unk_18D3458B0;
    result = 0.0;
    *(_OWORD *)(v0 + 1368) = xmmword_18D345860;
    *(_OWORD *)(v0 + 1384) = *(_OWORD *)algn_18D345870;
    *(_DWORD *)(v0 + 1592) = 1008981770;
    qword_1EE0618A8 = v0;
  }
  return result;
}

double sub_18D2B4C00()
{
  uint64_t v0;
  double result;

  if (!qword_1EE0618B0)
  {
    v0 = operator new();
    *(_OWORD *)(v0 + 160) = xmmword_18D3459E0;
    *(_OWORD *)(v0 + 176) = *(_OWORD *)aUscbheab;
    *(_OWORD *)(v0 + 192) = xmmword_18D345A00;
    *(_OWORD *)(v0 + 208) = *(_OWORD *)aZlqwtqx;
    *(_OWORD *)(v0 + 96) = xmmword_18D3459A0;
    *(_OWORD *)(v0 + 112) = unk_18D3459B0;
    *(_OWORD *)(v0 + 128) = xmmword_18D3459C0;
    *(_OWORD *)(v0 + 144) = *(_OWORD *)aTcqpd5;
    *(_OWORD *)(v0 + 32) = *(_OWORD *)&a35zYcvxmpe02ae[16];
    *(_OWORD *)(v0 + 48) = *(_OWORD *)&a35zYcvxmpe02ae[24];
    *(_OWORD *)(v0 + 64) = *(_OWORD *)&a35zYcvxmpe02ae[32];
    *(_OWORD *)(v0 + 80) = unk_18D345990;
    *(_OWORD *)v0 = *(_OWORD *)a35zYcvxmpe02ae;
    *(_OWORD *)(v0 + 16) = *(_OWORD *)&a35zYcvxmpe02ae[8];
    *(_DWORD *)(v0 + 224) = 1008981770;
    *(_OWORD *)(v0 + 388) = xmmword_18D345AC0;
    *(_OWORD *)(v0 + 404) = unk_18D345AD0;
    *(_OWORD *)(v0 + 420) = xmmword_18D345AE0;
    *(_OWORD *)(v0 + 436) = *(_OWORD *)aUlgiI;
    *(_OWORD *)(v0 + 324) = xmmword_18D345A80;
    *(_OWORD *)(v0 + 340) = unk_18D345A90;
    *(_OWORD *)(v0 + 356) = xmmword_18D345AA0;
    *(_OWORD *)(v0 + 372) = unk_18D345AB0;
    *(_OWORD *)(v0 + 260) = xmmword_18D345A40;
    *(_OWORD *)(v0 + 276) = unk_18D345A50;
    *(_OWORD *)(v0 + 292) = xmmword_18D345A60;
    *(_OWORD *)(v0 + 308) = unk_18D345A70;
    *(_OWORD *)(v0 + 228) = xmmword_18D345A20;
    *(_OWORD *)(v0 + 244) = unk_18D345A30;
    *(_DWORD *)(v0 + 452) = 1008981770;
    *(_OWORD *)(v0 + 616) = xmmword_18D345BA0;
    *(_OWORD *)(v0 + 632) = *(_OWORD *)a43236;
    *(_OWORD *)(v0 + 648) = xmmword_18D345BC0;
    *(_OWORD *)(v0 + 664) = *(_OWORD *)a482g9Y;
    *(_OWORD *)(v0 + 552) = xmmword_18D345B60;
    *(_OWORD *)(v0 + 568) = unk_18D345B70;
    *(_OWORD *)(v0 + 584) = xmmword_18D345B80;
    *(_OWORD *)(v0 + 600) = *(_OWORD *)aD5;
    *(_OWORD *)(v0 + 488) = xmmword_18D345B20;
    *(_OWORD *)(v0 + 504) = *(_OWORD *)aQcgk;
    *(_OWORD *)(v0 + 520) = xmmword_18D345B40;
    *(_OWORD *)(v0 + 536) = unk_18D345B50;
    *(_OWORD *)(v0 + 456) = *(_OWORD *)aKWsylnf0;
    *(_OWORD *)(v0 + 472) = *(_OWORD *)&aKWsylnf0[16];
    *(_DWORD *)(v0 + 680) = 1008981770;
    *(_OWORD *)(v0 + 844) = xmmword_18D345C80;
    *(_OWORD *)(v0 + 860) = *(_OWORD *)aMihceB;
    *(_OWORD *)(v0 + 876) = xmmword_18D345CA0;
    *(_OWORD *)(v0 + 892) = *(_OWORD *)aCZqzs;
    *(_OWORD *)(v0 + 780) = xmmword_18D345C40;
    *(_OWORD *)(v0 + 796) = unk_18D345C50;
    *(_OWORD *)(v0 + 812) = xmmword_18D345C60;
    *(_OWORD *)(v0 + 828) = *(_OWORD *)aWurvLqj;
    *(_OWORD *)(v0 + 716) = xmmword_18D345C00;
    *(_OWORD *)(v0 + 732) = unk_18D345C10;
    *(_OWORD *)(v0 + 748) = xmmword_18D345C20;
    *(_OWORD *)(v0 + 764) = unk_18D345C30;
    *(_OWORD *)(v0 + 684) = xmmword_18D345BE0;
    *(_OWORD *)(v0 + 700) = unk_18D345BF0;
    *(_DWORD *)(v0 + 908) = 1008981770;
    *(_OWORD *)(v0 + 1072) = xmmword_18D345D60;
    *(_OWORD *)(v0 + 1088) = unk_18D345D70;
    *(_OWORD *)(v0 + 1104) = xmmword_18D345D80;
    *(_OWORD *)(v0 + 1120) = unk_18D345D90;
    *(_OWORD *)(v0 + 1008) = xmmword_18D345D20;
    *(_OWORD *)(v0 + 1024) = unk_18D345D30;
    *(_OWORD *)(v0 + 1040) = xmmword_18D345D40;
    *(_OWORD *)(v0 + 1056) = unk_18D345D50;
    *(_OWORD *)(v0 + 944) = xmmword_18D345CE0;
    *(_OWORD *)(v0 + 960) = unk_18D345CF0;
    *(_OWORD *)(v0 + 976) = xmmword_18D345D00;
    *(_OWORD *)(v0 + 992) = unk_18D345D10;
    *(_OWORD *)(v0 + 912) = xmmword_18D345CC0;
    *(_OWORD *)(v0 + 928) = *(_OWORD *)aMsl7d5;
    *(_DWORD *)(v0 + 1136) = 1008981770;
    *(_OWORD *)(v0 + 1300) = xmmword_18D345E40;
    *(_OWORD *)(v0 + 1316) = *(_OWORD *)aF;
    *(_OWORD *)(v0 + 1332) = xmmword_18D345E60;
    *(_OWORD *)(v0 + 1348) = *(_OWORD *)a12;
    *(_OWORD *)(v0 + 1236) = xmmword_18D345E00;
    *(_OWORD *)(v0 + 1252) = unk_18D345E10;
    *(_OWORD *)(v0 + 1268) = xmmword_18D345E20;
    *(_OWORD *)(v0 + 1284) = unk_18D345E30;
    *(_OWORD *)(v0 + 1172) = xmmword_18D345DC0;
    *(_OWORD *)(v0 + 1188) = unk_18D345DD0;
    *(_OWORD *)(v0 + 1204) = xmmword_18D345DE0;
    *(_OWORD *)(v0 + 1220) = unk_18D345DF0;
    *(_OWORD *)(v0 + 1140) = xmmword_18D345DA0;
    *(_OWORD *)(v0 + 1156) = *(_OWORD *)aSrQd04;
    *(_DWORD *)(v0 + 1364) = 1008981770;
    *(_OWORD *)(v0 + 1528) = xmmword_18D345F20;
    *(_OWORD *)(v0 + 1544) = unk_18D345F30;
    *(_OWORD *)(v0 + 1560) = xmmword_18D345F40;
    *(_OWORD *)(v0 + 1576) = *(_OWORD *)aXwTqrri;
    *(_OWORD *)(v0 + 1464) = xmmword_18D345EE0;
    *(_OWORD *)(v0 + 1480) = unk_18D345EF0;
    *(_OWORD *)(v0 + 1496) = xmmword_18D345F00;
    *(_OWORD *)(v0 + 1512) = unk_18D345F10;
    *(_OWORD *)(v0 + 1400) = xmmword_18D345EA0;
    *(_OWORD *)(v0 + 1416) = unk_18D345EB0;
    *(_OWORD *)(v0 + 1432) = xmmword_18D345EC0;
    *(_OWORD *)(v0 + 1448) = unk_18D345ED0;
    result = *(double *)aWfJq;
    *(_OWORD *)(v0 + 1368) = *(_OWORD *)aWfJq;
    *(_OWORD *)(v0 + 1384) = unk_18D345E90;
    *(_DWORD *)(v0 + 1592) = 1008981770;
    qword_1EE0618B0 = v0;
  }
  return result;
}

double sub_18D2B4E48()
{
  uint64_t v0;
  double result;

  if (!qword_1EE0618B8)
  {
    v0 = operator new();
    *(_OWORD *)(v0 + 160) = *(_OWORD *)&a40943461056401[80];
    *(_OWORD *)(v0 + 176) = *(_OWORD *)&a40943461056401[88];
    *(_OWORD *)(v0 + 192) = *(_OWORD *)&a40943461056401[96];
    *(_OWORD *)(v0 + 208) = *(_OWORD *)&a40943461056401[104];
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&a40943461056401[48];
    *(_OWORD *)(v0 + 112) = *(_OWORD *)&a40943461056401[56];
    *(_OWORD *)(v0 + 128) = *(_OWORD *)&a40943461056401[64];
    *(_OWORD *)(v0 + 144) = *(_OWORD *)&a40943461056401[72];
    *(_OWORD *)(v0 + 32) = *(_OWORD *)&a40943461056401[16];
    *(_OWORD *)(v0 + 48) = *(_OWORD *)&a40943461056401[24];
    *(_OWORD *)(v0 + 64) = *(_OWORD *)&a40943461056401[32];
    *(_OWORD *)(v0 + 80) = *(_OWORD *)&a40943461056401[40];
    *(_OWORD *)v0 = *(_OWORD *)a40943461056401;
    *(_OWORD *)(v0 + 16) = *(_OWORD *)&a40943461056401[8];
    *(_DWORD *)(v0 + 224) = 1025758986;
    *(_OWORD *)(v0 + 388) = xmmword_18D3460E0;
    *(_OWORD *)(v0 + 404) = *(_OWORD *)aB34;
    *(_OWORD *)(v0 + 420) = xmmword_18D346100;
    *(_OWORD *)(v0 + 436) = *(_OWORD *)aLkjkbfc7;
    *(_OWORD *)(v0 + 324) = xmmword_18D3460A0;
    *(_OWORD *)(v0 + 340) = *(_OWORD *)a1610;
    *(_OWORD *)(v0 + 356) = xmmword_18D3460C0;
    *(_OWORD *)(v0 + 372) = *(_OWORD *)a981;
    *(_OWORD *)(v0 + 260) = xmmword_18D346060;
    *(_OWORD *)(v0 + 276) = *(_OWORD *)asc_18D346070;
    *(_OWORD *)(v0 + 292) = xmmword_18D346080;
    *(_OWORD *)(v0 + 308) = *(_OWORD *)asc_18D346090;
    *(_OWORD *)(v0 + 228) = *(_OWORD *)&a40943461056401[112];
    *(_OWORD *)(v0 + 244) = *(_OWORD *)&a40943461056401[120];
    *(_DWORD *)(v0 + 452) = 1025758986;
    *(_OWORD *)(v0 + 616) = xmmword_18D3461C0;
    *(_OWORD *)(v0 + 632) = *(_OWORD *)aC4;
    *(_OWORD *)(v0 + 648) = xmmword_18D3461E0;
    *(_OWORD *)(v0 + 664) = *(_OWORD *)aDgbcea3;
    *(_OWORD *)(v0 + 552) = xmmword_18D346180;
    *(_OWORD *)(v0 + 568) = *(_OWORD *)a794;
    *(_OWORD *)(v0 + 584) = xmmword_18D3461A0;
    *(_OWORD *)(v0 + 600) = *(_OWORD *)a67;
    *(_OWORD *)(v0 + 488) = xmmword_18D346140;
    *(_OWORD *)(v0 + 504) = *(_OWORD *)a5_0;
    *(_OWORD *)(v0 + 520) = xmmword_18D346160;
    *(_OWORD *)(v0 + 536) = *(_OWORD *)a601;
    *(_OWORD *)(v0 + 456) = *(_OWORD *)a7b016161;
    *(_OWORD *)(v0 + 472) = *(_OWORD *)&a7b016161[16];
    *(_DWORD *)(v0 + 680) = 1025758986;
    *(_OWORD *)(v0 + 844) = xmmword_18D3462A0;
    *(_OWORD *)(v0 + 860) = *(_OWORD *)a9h914;
    *(_OWORD *)(v0 + 876) = xmmword_18D3462C0;
    *(_OWORD *)(v0 + 892) = *(_OWORD *)aHvtkqcg9;
    *(_OWORD *)(v0 + 780) = xmmword_18D346260;
    *(_OWORD *)(v0 + 796) = *(_OWORD *)a1095;
    *(_OWORD *)(v0 + 812) = xmmword_18D346280;
    *(_OWORD *)(v0 + 828) = *(_OWORD *)a72;
    *(_OWORD *)(v0 + 716) = *(_OWORD *)&a100[16];
    *(_OWORD *)(v0 + 732) = *(_OWORD *)&a100[24];
    *(_OWORD *)(v0 + 748) = xmmword_18D346240;
    *(_OWORD *)(v0 + 764) = *(_OWORD *)a2_0;
    *(_OWORD *)(v0 + 684) = *(_OWORD *)a100;
    *(_OWORD *)(v0 + 700) = *(_OWORD *)&a100[8];
    *(_DWORD *)(v0 + 908) = 1025758986;
    *(_OWORD *)(v0 + 1072) = *(_OWORD *)&aEmlAlk949944do[80];
    *(_OWORD *)(v0 + 1088) = *(_OWORD *)&aEmlAlk949944do[88];
    *(_OWORD *)(v0 + 1104) = *(_OWORD *)&aEmlAlk949944do[96];
    *(_OWORD *)(v0 + 1120) = *(_OWORD *)&aEmlAlk949944do[104];
    *(_OWORD *)(v0 + 1008) = *(_OWORD *)&aEmlAlk949944do[48];
    *(_OWORD *)(v0 + 1024) = *(_OWORD *)&aEmlAlk949944do[56];
    *(_OWORD *)(v0 + 1040) = *(_OWORD *)&aEmlAlk949944do[64];
    *(_OWORD *)(v0 + 1056) = *(_OWORD *)&aEmlAlk949944do[72];
    *(_OWORD *)(v0 + 944) = *(_OWORD *)&aEmlAlk949944do[16];
    *(_OWORD *)(v0 + 960) = *(_OWORD *)&aEmlAlk949944do[24];
    *(_OWORD *)(v0 + 976) = *(_OWORD *)&aEmlAlk949944do[32];
    *(_OWORD *)(v0 + 992) = *(_OWORD *)&aEmlAlk949944do[40];
    *(_OWORD *)(v0 + 912) = *(_OWORD *)aEmlAlk949944do;
    *(_OWORD *)(v0 + 928) = *(_OWORD *)&aEmlAlk949944do[8];
    *(_DWORD *)(v0 + 1136) = 1025758986;
    *(_OWORD *)(v0 + 1300) = *(_OWORD *)&aEmlAlk949944do[192];
    *(_OWORD *)(v0 + 1316) = *(_OWORD *)&aEmlAlk949944do[200];
    *(_OWORD *)(v0 + 1332) = *(_OWORD *)&aEmlAlk949944do[208];
    *(_OWORD *)(v0 + 1348) = *(_OWORD *)&aEmlAlk949944do[216];
    *(_OWORD *)(v0 + 1236) = *(_OWORD *)&aEmlAlk949944do[160];
    *(_OWORD *)(v0 + 1252) = *(_OWORD *)&aEmlAlk949944do[168];
    *(_OWORD *)(v0 + 1268) = *(_OWORD *)&aEmlAlk949944do[176];
    *(_OWORD *)(v0 + 1284) = *(_OWORD *)&aEmlAlk949944do[184];
    *(_OWORD *)(v0 + 1172) = *(_OWORD *)&aEmlAlk949944do[128];
    *(_OWORD *)(v0 + 1188) = *(_OWORD *)&aEmlAlk949944do[136];
    *(_OWORD *)(v0 + 1204) = *(_OWORD *)&aEmlAlk949944do[144];
    *(_OWORD *)(v0 + 1220) = *(_OWORD *)&aEmlAlk949944do[152];
    *(_OWORD *)(v0 + 1140) = *(_OWORD *)&aEmlAlk949944do[112];
    *(_OWORD *)(v0 + 1156) = *(_OWORD *)&aEmlAlk949944do[120];
    *(_DWORD *)(v0 + 1364) = 1025758986;
    *(_OWORD *)(v0 + 1528) = xmmword_18D346540;
    *(_OWORD *)(v0 + 1544) = *(_OWORD *)aBc8Ls;
    *(_OWORD *)(v0 + 1560) = xmmword_18D346560;
    *(_OWORD *)(v0 + 1576) = *(_OWORD *)aVnmomv9;
    *(_OWORD *)(v0 + 1464) = *(_OWORD *)&aEmlAlk949944do[272];
    *(_OWORD *)(v0 + 1480) = *(_OWORD *)&aEmlAlk949944do[280];
    *(_OWORD *)(v0 + 1496) = xmmword_18D346520;
    *(_OWORD *)(v0 + 1512) = *(_OWORD *)a34C;
    *(_OWORD *)(v0 + 1400) = *(_OWORD *)&aEmlAlk949944do[240];
    *(_OWORD *)(v0 + 1416) = *(_OWORD *)&aEmlAlk949944do[248];
    *(_OWORD *)(v0 + 1432) = *(_OWORD *)&aEmlAlk949944do[256];
    *(_OWORD *)(v0 + 1448) = *(_OWORD *)&aEmlAlk949944do[264];
    result = *(double *)&aEmlAlk949944do[224];
    *(_OWORD *)(v0 + 1368) = *(_OWORD *)&aEmlAlk949944do[224];
    *(_OWORD *)(v0 + 1384) = *(_OWORD *)&aEmlAlk949944do[232];
    *(_DWORD *)(v0 + 1592) = 1025758986;
    qword_1EE0618B8 = v0;
  }
  return result;
}

double sub_18D2B5090()
{
  uint64_t v0;
  double result;

  if (!qword_1EE0618C0)
  {
    v0 = operator new();
    *(_OWORD *)(v0 + 160) = xmmword_18D346620;
    *(_OWORD *)(v0 + 176) = *(_OWORD *)a241;
    *(_OWORD *)(v0 + 192) = xmmword_18D346640;
    *(_OWORD *)(v0 + 208) = *(_OWORD *)a8800;
    *(_OWORD *)(v0 + 96) = xmmword_18D3465E0;
    *(_OWORD *)(v0 + 112) = *(_OWORD *)a55;
    *(_OWORD *)(v0 + 128) = xmmword_18D346600;
    *(_OWORD *)(v0 + 144) = *(_OWORD *)a04;
    *(_OWORD *)(v0 + 32) = xmmword_18D3465A0;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)a41;
    *(_OWORD *)(v0 + 64) = xmmword_18D3465C0;
    *(_OWORD *)(v0 + 80) = *(_OWORD *)a22;
    *(_OWORD *)v0 = *(_OWORD *)a0370;
    *(_OWORD *)(v0 + 16) = *(_OWORD *)&a0370[16];
    *(_DWORD *)(v0 + 224) = 1017370378;
    *(_OWORD *)(v0 + 388) = xmmword_18D346700;
    *(_OWORD *)(v0 + 404) = *(_OWORD *)a0_1;
    *(_OWORD *)(v0 + 420) = xmmword_18D346720;
    *(_OWORD *)(v0 + 436) = *(_OWORD *)a56350;
    *(_OWORD *)(v0 + 324) = xmmword_18D3466C0;
    *(_OWORD *)(v0 + 340) = *(_OWORD *)asc_18D3466D0;
    *(_OWORD *)(v0 + 356) = xmmword_18D3466E0;
    *(_OWORD *)(v0 + 372) = *(_OWORD *)asc_18D3466F0;
    *(_OWORD *)(v0 + 260) = xmmword_18D346680;
    *(_OWORD *)(v0 + 276) = *(_OWORD *)asc_18D346690;
    *(_OWORD *)(v0 + 292) = xmmword_18D3466A0;
    *(_OWORD *)(v0 + 308) = *(_OWORD *)asc_18D3466B0;
    *(_OWORD *)(v0 + 228) = *(_OWORD *)asc_18D346660;
    *(_OWORD *)(v0 + 244) = *(_OWORD *)&asc_18D346660[16];
    *(_DWORD *)(v0 + 452) = 1017370378;
    *(_OWORD *)(v0 + 616) = xmmword_18D3467E0;
    *(_OWORD *)(v0 + 632) = *(_OWORD *)a0_2;
    *(_OWORD *)(v0 + 648) = xmmword_18D346800;
    *(_OWORD *)(v0 + 664) = *(_OWORD *)a00101;
    *(_OWORD *)(v0 + 552) = xmmword_18D3467A0;
    *(_OWORD *)(v0 + 568) = *(_OWORD *)a4;
    *(_OWORD *)(v0 + 584) = xmmword_18D3467C0;
    *(_OWORD *)(v0 + 600) = *(_OWORD *)asc_18D3467D0;
    *(_OWORD *)(v0 + 488) = xmmword_18D346760;
    *(_OWORD *)(v0 + 504) = *(_OWORD *)a58;
    *(_OWORD *)(v0 + 520) = xmmword_18D346780;
    *(_OWORD *)(v0 + 536) = *(_OWORD *)a15;
    *(_OWORD *)(v0 + 456) = *(_OWORD *)a009040;
    *(_OWORD *)(v0 + 472) = *(_OWORD *)&a009040[16];
    *(_DWORD *)(v0 + 680) = 1017370378;
    *(_OWORD *)(v0 + 844) = xmmword_18D3468C0;
    *(_OWORD *)(v0 + 860) = *(_OWORD *)asc_18D3468D0;
    *(_OWORD *)(v0 + 876) = xmmword_18D3468E0;
    *(_OWORD *)(v0 + 892) = *(_OWORD *)a65281;
    *(_OWORD *)(v0 + 780) = xmmword_18D346880;
    *(_OWORD *)(v0 + 796) = *(_OWORD *)asc_18D346890;
    *(_OWORD *)(v0 + 812) = xmmword_18D3468A0;
    *(_OWORD *)(v0 + 828) = *(_OWORD *)asc_18D3468B0;
    *(_OWORD *)(v0 + 716) = xmmword_18D346840;
    *(_OWORD *)(v0 + 732) = *(_OWORD *)asc_18D346850;
    *(_OWORD *)(v0 + 748) = xmmword_18D346860;
    *(_OWORD *)(v0 + 764) = *(_OWORD *)asc_18D346870;
    *(_OWORD *)(v0 + 684) = *(_OWORD *)asc_18D346820;
    *(_OWORD *)(v0 + 700) = *(_OWORD *)&asc_18D346820[16];
    *(_DWORD *)(v0 + 908) = 1017370378;
    *(_OWORD *)(v0 + 1072) = *(_OWORD *)&aGppHi97b755Mdd[80];
    *(_OWORD *)(v0 + 1088) = *(_OWORD *)&aGppHi97b755Mdd[88];
    *(_OWORD *)(v0 + 1104) = *(_OWORD *)&aGppHi97b755Mdd[96];
    *(_OWORD *)(v0 + 1120) = *(_OWORD *)&aGppHi97b755Mdd[104];
    *(_OWORD *)(v0 + 1008) = *(_OWORD *)&aGppHi97b755Mdd[48];
    *(_OWORD *)(v0 + 1024) = *(_OWORD *)&aGppHi97b755Mdd[56];
    *(_OWORD *)(v0 + 1040) = *(_OWORD *)&aGppHi97b755Mdd[64];
    *(_OWORD *)(v0 + 1056) = *(_OWORD *)&aGppHi97b755Mdd[72];
    *(_OWORD *)(v0 + 944) = *(_OWORD *)&aGppHi97b755Mdd[16];
    *(_OWORD *)(v0 + 960) = *(_OWORD *)&aGppHi97b755Mdd[24];
    *(_OWORD *)(v0 + 976) = *(_OWORD *)&aGppHi97b755Mdd[32];
    *(_OWORD *)(v0 + 992) = *(_OWORD *)&aGppHi97b755Mdd[40];
    *(_OWORD *)(v0 + 912) = *(_OWORD *)aGppHi97b755Mdd;
    *(_OWORD *)(v0 + 928) = *(_OWORD *)&aGppHi97b755Mdd[8];
    *(_DWORD *)(v0 + 1136) = 1017370378;
    *(_OWORD *)(v0 + 1300) = *(_OWORD *)&aGppHi97b755Mdd[192];
    *(_OWORD *)(v0 + 1316) = *(_OWORD *)&aGppHi97b755Mdd[200];
    *(_OWORD *)(v0 + 1332) = xmmword_18D346AA0;
    *(_OWORD *)(v0 + 1348) = *(_OWORD *)a668;
    *(_OWORD *)(v0 + 1236) = *(_OWORD *)&aGppHi97b755Mdd[160];
    *(_OWORD *)(v0 + 1252) = *(_OWORD *)&aGppHi97b755Mdd[168];
    *(_OWORD *)(v0 + 1268) = *(_OWORD *)&aGppHi97b755Mdd[176];
    *(_OWORD *)(v0 + 1284) = *(_OWORD *)&aGppHi97b755Mdd[184];
    *(_OWORD *)(v0 + 1172) = *(_OWORD *)&aGppHi97b755Mdd[128];
    *(_OWORD *)(v0 + 1188) = *(_OWORD *)&aGppHi97b755Mdd[136];
    *(_OWORD *)(v0 + 1204) = *(_OWORD *)&aGppHi97b755Mdd[144];
    *(_OWORD *)(v0 + 1220) = *(_OWORD *)&aGppHi97b755Mdd[152];
    *(_OWORD *)(v0 + 1140) = *(_OWORD *)&aGppHi97b755Mdd[112];
    *(_OWORD *)(v0 + 1156) = *(_OWORD *)&aGppHi97b755Mdd[120];
    *(_DWORD *)(v0 + 1364) = 1017370378;
    *(_OWORD *)(v0 + 1528) = xmmword_18D346B60;
    *(_OWORD *)(v0 + 1544) = *(_OWORD *)a12_0;
    *(_OWORD *)(v0 + 1560) = xmmword_18D346B80;
    *(_OWORD *)(v0 + 1576) = *(_OWORD *)aC77724n;
    *(_OWORD *)(v0 + 1464) = xmmword_18D346B20;
    *(_OWORD *)(v0 + 1480) = *(_OWORD *)a00;
    *(_OWORD *)(v0 + 1496) = xmmword_18D346B40;
    *(_OWORD *)(v0 + 1512) = *(_OWORD *)a25;
    *(_OWORD *)(v0 + 1400) = *(_OWORD *)&a33204852[16];
    *(_OWORD *)(v0 + 1416) = *(_OWORD *)&a33204852[24];
    *(_OWORD *)(v0 + 1432) = *(_OWORD *)&a33204852[32];
    *(_OWORD *)(v0 + 1448) = *(_OWORD *)&a33204852[40];
    result = *(double *)a33204852;
    *(_OWORD *)(v0 + 1368) = *(_OWORD *)a33204852;
    *(_OWORD *)(v0 + 1384) = *(_OWORD *)&a33204852[8];
    *(_DWORD *)(v0 + 1592) = 1017370378;
    qword_1EE0618C0 = v0;
  }
  return result;
}

double sub_18D2B52D8()
{
  uint64_t v0;
  double result;

  if (!qword_1EE0618C8)
  {
    v0 = operator new();
    *(_OWORD *)(v0 + 160) = xmmword_18D346C40;
    *(_OWORD *)(v0 + 176) = unk_18D346C50;
    *(_OWORD *)(v0 + 192) = xmmword_18D346C60;
    *(_OWORD *)(v0 + 208) = unk_18D346C70;
    *(_OWORD *)(v0 + 96) = xmmword_18D346C00;
    *(_OWORD *)(v0 + 112) = unk_18D346C10;
    *(_OWORD *)(v0 + 128) = xmmword_18D346C20;
    *(_OWORD *)(v0 + 144) = unk_18D346C30;
    *(_OWORD *)(v0 + 32) = xmmword_18D346BC0;
    *(_OWORD *)(v0 + 48) = unk_18D346BD0;
    *(_OWORD *)(v0 + 64) = xmmword_18D346BE0;
    *(_OWORD *)(v0 + 80) = unk_18D346BF0;
    *(_OWORD *)v0 = xmmword_18D346BA0;
    *(_OWORD *)(v0 + 16) = *(_OWORD *)algn_18D346BB0;
    *(_DWORD *)(v0 + 224) = 1008981770;
    *(_OWORD *)(v0 + 388) = xmmword_18D346D20;
    *(_OWORD *)(v0 + 404) = unk_18D346D30;
    *(_OWORD *)(v0 + 420) = xmmword_18D346D40;
    *(_OWORD *)(v0 + 436) = unk_18D346D50;
    *(_OWORD *)(v0 + 324) = xmmword_18D346CE0;
    *(_OWORD *)(v0 + 340) = unk_18D346CF0;
    *(_OWORD *)(v0 + 356) = xmmword_18D346D00;
    *(_OWORD *)(v0 + 372) = *(_OWORD *)asc_18D346D10;
    *(_OWORD *)(v0 + 260) = xmmword_18D346CA0;
    *(_OWORD *)(v0 + 276) = unk_18D346CB0;
    *(_OWORD *)(v0 + 292) = xmmword_18D346CC0;
    *(_OWORD *)(v0 + 308) = unk_18D346CD0;
    *(_OWORD *)(v0 + 228) = xmmword_18D346C80;
    *(_OWORD *)(v0 + 244) = *(_OWORD *)algn_18D346C90;
    *(_DWORD *)(v0 + 452) = 1008981770;
    *(_OWORD *)(v0 + 616) = xmmword_18D346E00;
    *(_OWORD *)(v0 + 632) = unk_18D346E10;
    *(_OWORD *)(v0 + 648) = xmmword_18D346E20;
    *(_OWORD *)(v0 + 664) = unk_18D346E30;
    *(_OWORD *)(v0 + 552) = xmmword_18D346DC0;
    *(_OWORD *)(v0 + 568) = unk_18D346DD0;
    *(_OWORD *)(v0 + 584) = xmmword_18D346DE0;
    *(_OWORD *)(v0 + 600) = unk_18D346DF0;
    *(_OWORD *)(v0 + 488) = xmmword_18D346D80;
    *(_OWORD *)(v0 + 504) = unk_18D346D90;
    *(_OWORD *)(v0 + 520) = xmmword_18D346DA0;
    *(_OWORD *)(v0 + 536) = unk_18D346DB0;
    *(_OWORD *)(v0 + 456) = xmmword_18D346D60;
    *(_OWORD *)(v0 + 472) = *(_OWORD *)algn_18D346D70;
    *(_DWORD *)(v0 + 680) = 1008981770;
    *(_OWORD *)(v0 + 844) = xmmword_18D346EE0;
    *(_OWORD *)(v0 + 860) = unk_18D346EF0;
    *(_OWORD *)(v0 + 876) = xmmword_18D346F00;
    *(_OWORD *)(v0 + 892) = unk_18D346F10;
    *(_OWORD *)(v0 + 780) = xmmword_18D346EA0;
    *(_OWORD *)(v0 + 796) = unk_18D346EB0;
    *(_OWORD *)(v0 + 812) = xmmword_18D346EC0;
    *(_OWORD *)(v0 + 828) = unk_18D346ED0;
    *(_OWORD *)(v0 + 716) = xmmword_18D346E60;
    *(_OWORD *)(v0 + 732) = unk_18D346E70;
    *(_OWORD *)(v0 + 748) = xmmword_18D346E80;
    *(_OWORD *)(v0 + 764) = unk_18D346E90;
    *(_OWORD *)(v0 + 684) = xmmword_18D346E40;
    *(_OWORD *)(v0 + 700) = *(_OWORD *)algn_18D346E50;
    *(_DWORD *)(v0 + 908) = 1008981770;
    *(_OWORD *)(v0 + 1072) = xmmword_18D346FC0;
    *(_OWORD *)(v0 + 1088) = unk_18D346FD0;
    *(_OWORD *)(v0 + 1104) = xmmword_18D346FE0;
    *(_OWORD *)(v0 + 1120) = unk_18D346FF0;
    *(_OWORD *)(v0 + 1008) = xmmword_18D346F80;
    *(_OWORD *)(v0 + 1024) = unk_18D346F90;
    *(_OWORD *)(v0 + 1040) = xmmword_18D346FA0;
    *(_OWORD *)(v0 + 1056) = unk_18D346FB0;
    *(_OWORD *)(v0 + 944) = xmmword_18D346F40;
    *(_OWORD *)(v0 + 960) = unk_18D346F50;
    *(_OWORD *)(v0 + 976) = xmmword_18D346F60;
    *(_OWORD *)(v0 + 992) = unk_18D346F70;
    *(_OWORD *)(v0 + 912) = xmmword_18D346F20;
    *(_OWORD *)(v0 + 928) = *(_OWORD *)algn_18D346F30;
    *(_DWORD *)(v0 + 1136) = 1008981770;
    *(_OWORD *)(v0 + 1300) = xmmword_18D3470A0;
    *(_OWORD *)(v0 + 1316) = unk_18D3470B0;
    *(_OWORD *)(v0 + 1332) = xmmword_18D3470C0;
    *(_OWORD *)(v0 + 1348) = unk_18D3470D0;
    *(_OWORD *)(v0 + 1236) = xmmword_18D347060;
    *(_OWORD *)(v0 + 1252) = unk_18D347070;
    *(_OWORD *)(v0 + 1268) = xmmword_18D347080;
    *(_OWORD *)(v0 + 1284) = unk_18D347090;
    *(_OWORD *)(v0 + 1172) = xmmword_18D347020;
    *(_OWORD *)(v0 + 1188) = unk_18D347030;
    *(_OWORD *)(v0 + 1204) = xmmword_18D347040;
    *(_OWORD *)(v0 + 1220) = unk_18D347050;
    *(_OWORD *)(v0 + 1140) = xmmword_18D347000;
    *(_OWORD *)(v0 + 1156) = *(_OWORD *)algn_18D347010;
    *(_DWORD *)(v0 + 1364) = 1008981770;
    *(_OWORD *)(v0 + 1528) = xmmword_18D347180;
    *(_OWORD *)(v0 + 1544) = unk_18D347190;
    *(_OWORD *)(v0 + 1560) = xmmword_18D3471A0;
    *(_OWORD *)(v0 + 1576) = *(_OWORD *)asc_18D3471B0;
    *(_OWORD *)(v0 + 1464) = xmmword_18D347140;
    *(_OWORD *)(v0 + 1480) = unk_18D347150;
    *(_OWORD *)(v0 + 1496) = xmmword_18D347160;
    *(_OWORD *)(v0 + 1512) = unk_18D347170;
    *(_OWORD *)(v0 + 1400) = xmmword_18D347100;
    *(_OWORD *)(v0 + 1416) = unk_18D347110;
    *(_OWORD *)(v0 + 1432) = xmmword_18D347120;
    *(_OWORD *)(v0 + 1448) = unk_18D347130;
    result = 0.0;
    *(_OWORD *)(v0 + 1368) = xmmword_18D3470E0;
    *(_OWORD *)(v0 + 1384) = *(_OWORD *)algn_18D3470F0;
    *(_DWORD *)(v0 + 1592) = 1008981770;
    qword_1EE0618C8 = v0;
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::Fire7orNewerWatchGNSSUncertaintyWrapper::GetScaleFactorTableIndices(float a1, double a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t i;
  unint64_t j;
  BOOL v12;
  uint64_t v13;
  double v14;
  unsigned __int8 v16;
  __int16 v17;

  for (i = 0; i != 6; ++i)
  {
    if (flt_18D33A598[i] >= a1)
      break;
  }
  for (j = 0; j != 15; ++j)
  {
    if (dbl_18D33A5B0[j] >= a2)
      break;
  }
  v12 = i >= 7 || j >= 0x10;
  v13 = !v12;
  if (v12)
  {
    v17 = 12;
    v16 = 5;
    v14 = a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "invalid index found,cn0,%.3f,cn0_bin,%zu,elev,%.3lf,elev_bin,%zu,", a6, a7, a8, a9, a10, SLOBYTE(v14));
  }
  else
  {
    *a4 = i;
    a4[1] = j;
  }
  return v13;
}

void sub_18D2B55E0()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2B55F8()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t raven::RavenPositionContextEstimatorActiveObject::RavenPositionContextEstimatorActiveObject(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  std::string __str;

  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(_QWORD *)v3 = &off_1E25C4888;
  *(_BYTE *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_QWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 584) = 0;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 544) = 0u;
  *(_OWORD *)(v3 + 560) = 0u;
  *(_WORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 592) = &off_1E25B8E90;
  *(_QWORD *)(v3 + 624) = 0x100000002;
  *(_QWORD *)(v3 + 600) = &unk_1E25C7520;
  *(_QWORD *)(v3 + 632) = v3 + 640;
  *(_QWORD *)(v3 + 680) = 0x100000002;
  *(_QWORD *)(v3 + 656) = &unk_1E25C7520;
  *(_QWORD *)(v3 + 688) = v3 + 696;
  *(_QWORD *)(v3 + 720) = 0x3DDB7CDFD9D7BDBBLL;
  *(_QWORD *)(v3 + 616) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 664) = 0;
  *(_QWORD *)(v3 + 672) = 0;
  *(_DWORD *)(v3 + 712) = 1;
  *(_QWORD *)(v3 + 728) = 0;
  *(_OWORD *)(v3 + 736) = xmmword_18D319350;
  *(_BYTE *)(v3 + 752) = 0;
  *(_QWORD *)(v3 + 760) = &unk_1E25C2FC8;
  *(_QWORD *)(v3 + 768) = 0;
  *(_QWORD *)(v3 + 776) = 0;
  *(_BYTE *)(v3 + 784) = 0;
  *(_QWORD *)(v3 + 792) = 0;
  *(_QWORD *)(v3 + 800) = 0;
  *(_BYTE *)(v3 + 808) = 0;
  *(_QWORD *)(v3 + 816) = 0;
  *(_QWORD *)(v3 + 824) = 0;
  *(_BYTE *)(v3 + 832) = 0;
  *(_QWORD *)(v3 + 848) = 0;
  *(_QWORD *)(v3 + 840) = 0;
  *(_QWORD *)(v3 + 856) = 0x7FF8000000000000;
  *(_BYTE *)(v3 + 864) = 0;
  *(_QWORD *)(v3 + 872) = &unk_1E25C3130;
  *(_BYTE *)(v3 + 896) = 0;
  *(_QWORD *)(v3 + 880) = 0;
  *(_QWORD *)(v3 + 888) = 0;
  *(_BYTE *)(v3 + 920) = 0;
  *(_QWORD *)(v3 + 912) = 0;
  *(_QWORD *)(v3 + 904) = 0;
  *(_BYTE *)(v3 + 944) = 0;
  *(_QWORD *)(v3 + 936) = 0;
  *(_QWORD *)(v3 + 928) = 0;
  *(_QWORD *)(v3 + 960) = 0;
  *(_QWORD *)(v3 + 952) = 0;
  *(_QWORD *)(v3 + 968) = 0x7FF8000000000000;
  *(_BYTE *)(v3 + 976) = 0;
  *(_QWORD *)(v3 + 984) = 0x3FE0000000000000;
  *(_QWORD *)(v3 + 992) = 0x3FE0000000000000;
  *(_OWORD *)(v3 + 1016) = 0u;
  *(_OWORD *)(v3 + 1032) = 0u;
  *(_OWORD *)(v3 + 1000) = 0u;
  sub_18D0778AC(&__str, "<PositionContext> ");
  std::string::operator=((std::string *)(a1 + 544), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_18D0778AC(&__str, "<PositionContext> ");
  std::string::operator=((std::string *)(a1 + 1024), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_18D2B57E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  cnframework::ActiveObjectBase *v15;

  if (a15 < 0)
    operator delete(__p);
  sub_18D2B5830((uint64_t)v15 + 576);
  sub_18D178B20((uint64_t)v15 + 520);
  cnframework::ActiveObjectBase::~ActiveObjectBase(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2B5830(uint64_t a1)
{
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  *(_QWORD *)(a1 + 80) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 16) = &off_1E25B8E90;
  *(_QWORD *)(a1 + 24) = &unk_1E25C5E70;
  return a1;
}

uint64_t raven::RavenPositionContextEstimatorActiveObject::Configure(uint64_t a1, uint64_t *a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  cnprint::CNPrinter *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  __int16 v36;
  uint64_t v37;
  void *__p[2];
  char v39;

  if (*(_BYTE *)(a1 + 480) && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    LOWORD(v37) = 12;
    LOBYTE(v36) = 1;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v4 = v39 >= 0 ? (const char *)__p : (const char *)__p[0];
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 520), "Warning: %s configured more than once.", v4);
    if (*(char *)(a1 + 543) >= 0)
      LOBYTE(v10) = a1 + 8;
    else
      v10 = *(_QWORD *)(a1 + 520);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, (unsigned __int8 *)&v36, "%s", v5, v6, v7, v8, v9, v10);
    if (v39 < 0)
      operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 480) = 0;
  v11 = *a2;
  if (!*a2 || !*(_BYTE *)(v11 + 33))
  {
    LOWORD(v37) = 12;
    LOBYTE(v36) = 4;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v39 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 520), "Error: %s could not be configured. p_raven_parameters is not initialized.", (const char *)v19);
    if (*(char *)(a1 + 543) >= 0)
      LOBYTE(v25) = a1 + 8;
    else
      v25 = *(_QWORD *)(a1 + 520);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, (unsigned __int8 *)&v36, "%s", v20, v21, v22, v23, v24, v25);
    goto LABEL_28;
  }
  *(_QWORD *)(a1 + 568) = v11;
  v37 = v11;
  if (raven::RavenPositionContextEstimator::Configure(a1 + 576, &v37))
  {
    v36 = 12;
    v35 = 4;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v39 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 520), "Error: %s could not be configured. Configuration of position context estimator failed.", (const char *)v12);
    if (*(char *)(a1 + 543) >= 0)
      LOBYTE(v18) = a1 + 8;
    else
      v18 = *(_QWORD *)(a1 + 520);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v13, v14, v15, v16, v17, v18);
LABEL_28:
    if (v39 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, 0.0);
  *(_BYTE *)(a1 + 480) = 1;
  v27 = (cnprint::CNPrinter *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (cnprint::CNPrinter::GetLogLevel(v27) <= 1)
  {
    v36 = 12;
    v35 = 1;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v28 = v39 >= 0 ? (const char *)__p : (const char *)__p[0];
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 520), "%s configured successfully.", v28);
    if (*(char *)(a1 + 543) >= 0)
      LOBYTE(v34) = a1 + 8;
    else
      v34 = *(_QWORD *)(a1 + 520);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v29, v30, v31, v32, v33, v34);
    if (v39 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D2B5B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void raven::RavenPositionContextEstimatorActiveObject::HandleEvent(raven::RavenPositionContextEstimatorActiveObject *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  unsigned __int8 v11;
  __int16 v12;

  if (*((_BYTE *)this + 480))
  {
    raven::RavenPositionContextEstimator::HandleEvent((raven::RavenPositionContextEstimatorActiveObject *)((char *)this + 576), a2);
  }
  else
  {
    v12 = 12;
    v11 = 2;
    v10[0] = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(_QWORD *)a2 + 16))(a2);
    v10[1] = v3;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 520, (uint64_t)v10, "RavenPositionContextEstimatorActiveObject is not configured.");
    if (*((char *)this + 543) >= 0)
      LOBYTE(v9) = (_BYTE)this + 8;
    else
      v9 = *((_QWORD *)this + 65);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "%s", v4, v5, v6, v7, v8, v9);
  }
}

void raven::RavenPositionContextEstimatorActiveObject::HandleEvent(raven::RavenPositionContextEstimatorActiveObject *this, const raven::SignalEnvironmentEvent *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  unsigned __int8 v16;
  __int16 v17;

  if (*((_BYTE *)this + 480))
  {
    v3 = *(_OWORD *)((char *)a2 + 8);
    v4 = *(_OWORD *)((char *)a2 + 40);
    *((_OWORD *)this + 49) = *(_OWORD *)((char *)a2 + 24);
    *((_OWORD *)this + 50) = v4;
    *((_OWORD *)this + 48) = v3;
    v5 = *(_OWORD *)((char *)a2 + 56);
    v6 = *(_OWORD *)((char *)a2 + 72);
    v7 = *(_OWORD *)((char *)a2 + 88);
    *((_BYTE *)this + 864) = *((_BYTE *)a2 + 104);
    *((_OWORD *)this + 52) = v6;
    *((_OWORD *)this + 53) = v7;
    *((_OWORD *)this + 51) = v5;
  }
  else
  {
    v17 = 12;
    v16 = 2;
    v15[0] = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(_QWORD *)a2 + 16))(a2);
    v15[1] = v8;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 520, (uint64_t)v15, "RavenPositionContextEstimatorActiveObject is not configured.");
    if (*((char *)this + 543) >= 0)
      LOBYTE(v14) = (_BYTE)this + 8;
    else
      v14 = *((_QWORD *)this + 65);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "%s", v9, v10, v11, v12, v13, v14);
  }
}

void sub_18D2B5D04(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18D2B5E78(a2, &v14);
  v3 = *(_QWORD *)(a1 + 344);
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v12, a1);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18D2B5DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

std::string *raven::RavenPositionContextEstimatorActiveObject::SetLogPrefix(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 544), a2);
  return std::string::operator=((std::string *)(a1 + 1024), a2);
}

_QWORD *sub_18D2B5E28(_QWORD *result)
{
  result[8] = &unk_1E25C5E70;
  *result = &off_1E25B8E90;
  result[1] = &unk_1E25C5E70;
  return result;
}

void sub_18D2B5E48(_QWORD *a1)
{
  a1[8] = &unk_1E25C5E70;
  *a1 = &off_1E25B8E90;
  a1[1] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2B5E78@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_18D2B5ED0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18D2B5EBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2B5ED0(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E25CCE50;
  a1[1] = 0;
  sub_18D2B5F1C((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_18D2B5F08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2B5F1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_1E25B8C58;
  v4 = MEMORY[0x1E0DE4F20];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a1 + 48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_18D0778AC((_QWORD *)(a1 + 48), "");
  *(_BYTE *)(a1 + 8) = 1;
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E25C1BA0;
  *(_QWORD *)(v6 + 8) = &unk_1E25C3130;
  v7 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v6 + 96) = v7;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a2 + 13);
  *(_QWORD *)(v6 + 128) = a2[15];
  v8 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v6 + 32) = v8;
  v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v6 + 64) = v9;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *a2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*a2 - 8);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t *))(v11 + 16))(a2);
  *(_QWORD *)(a1 + 40) = v12;
  (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a2 + 24))(&v14, a2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)v5);
  *(_OWORD *)v5 = v14;
  *(_QWORD *)(v5 + 16) = v15;
  return a1;
}

void sub_18D2B6060(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

void *sub_18D2B60A4()
{
}

__n128 sub_18D2B60B0(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1BA0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C3130;
  v3 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v3;
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v2 + 128) = *(_QWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v4;
  result = *(__n128 *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(v2 + 48) = result;
  *(_OWORD *)(v2 + 64) = v6;
  return result;
}

uint64_t raven::PositionChecker::Configure(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v13;
  double v16;
  double v19;
  uint64_t v22;
  double v25;
  double v26;
  uint64_t result;
  unsigned __int8 v28;
  __int16 v29;

  *(_QWORD *)(a1 + 16) = a3;
  v4 = *a2;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*a2 + 920);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v4 + 2512);
  *(_BYTE *)(a1 + 48) = raven::GNSSMeasurementSelectionParameters::AllMeasurementsExcluded((raven::GNSSMeasurementSelectionParameters *)(v4 + 592)) ^ 1;
  v10 = *(double *)(v4 + 2136);
  if ((*(uint64_t *)&v10 <= -1 || ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&v10 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    v29 = 12;
    v28 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "PositionChecker: Invalid innovation reweighting threshold %.1lg", v5, v6, v7, v8, v9, SLOBYTE(v10));
  }
  else
  {
    v13 = *(double *)(v4 + 2144);
    if ((*(uint64_t *)&v13 <= -1 || ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(*(_QWORD *)&v13 - 1) >= 0xFFFFFFFFFFFFFLL)
    {
      v29 = 12;
      v28 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "PositionChecker:Invalid innovation rejection threshold %.1lg", v5, v6, v7, v8, v9, SLOBYTE(v13));
    }
    else
    {
      v16 = *(double *)(v4 + 2160);
      if ((*(uint64_t *)&v16 <= -1 || ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
        && (unint64_t)(*(_QWORD *)&v16 - 1) >= 0xFFFFFFFFFFFFFLL)
      {
        v29 = 12;
        v28 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "PositionChecker: Invalid target horizontal sigma value %.1lg", v5, v6, v7, v8, v9, SLOBYTE(v16));
      }
      else
      {
        v19 = *(double *)(v4 + 2168);
        if ((*(uint64_t *)&v19 <= -1 || ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
          && (unint64_t)(*(_QWORD *)&v19 - 1) >= 0xFFFFFFFFFFFFFLL)
        {
          v29 = 12;
          v28 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "PositionChecker: Invalid vertical target sigma value %.1lg", v5, v6, v7, v8, v9, SLOBYTE(v19));
        }
        else
        {
          v22 = *(_QWORD *)(v4 + 3200);
          if ((v22 <= -1 || ((v22 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
            && (unint64_t)(v22 - 1) >= 0xFFFFFFFFFFFFFLL)
          {
            v29 = 12;
            v28 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "PositionChecker: Invalid VL position uncertainty default scale factor %.1lg", v5, v6, v7, v8, v9, v22);
          }
          else if (v16 <= v10)
          {
            if (v19 <= v10)
            {
              v25 = *(double *)(v4 + 3480);
              v26 = *(double *)(v4 + 3488);
              if (v25 > 0.0 && v26 >= 0.0)
              {
                result = 0;
                *(double *)(a1 + 56) = v10 * v10;
                *(double *)(a1 + 64) = v13 * v13;
                *(_QWORD *)(a1 + 72) = *(_QWORD *)(v4 + 2152);
                *(double *)(a1 + 80) = v16 * v16;
                *(double *)(a1 + 88) = v19 * v19;
                *(_QWORD *)(a1 + 96) = v22;
                *(double *)(a1 + 104) = v25;
                *(double *)(a1 + 112) = v26;
                *(_BYTE *)(a1 + 24) = *(_BYTE *)(v4 + 3813);
                *(_BYTE *)(a1 + 25) = *(_BYTE *)(v4 + 3815);
                *(_BYTE *)(a1 + 26) = *(_BYTE *)(v4 + 3814);
                *(_BYTE *)(a1 + 8) = 1;
                return result;
              }
              v29 = 12;
              v28 = 4;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "PositionChecker: Invalid hybrid 2D WiFi + DEM altitude threshold values, unc %.1lg age %.1lg", v5, v6, v7, v8, v9, SLOBYTE(v25));
            }
            else
            {
              v29 = 12;
              v28 = 4;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "PositionChecker: Invalid vertical target sigma count: value of %.1lg is greater than reweight-sigma threshold %.1lg", v5, v6, v7, v8, v9, SLOBYTE(v19));
            }
          }
          else
          {
            v29 = 12;
            v28 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "PositionChecker: Invalid horizontal target sigma count: value of %.1lg is greater than reweight-sigma threshold %.1lg", v5, v6, v7, v8, v9, SLOBYTE(v16));
          }
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::PositionChecker::TestInnovationAndReweight(raven::PositionChecker *this, raven::PositionEvent *a2)
{
  uint64_t **v4;
  uint64_t **v5;
  _BOOL8 v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t *v21;
  int v22;
  int v23;
  int i;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  unsigned __int8 v89;
  __int16 v90;
  _BYTE v91[64];
  void *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD v99[36];
  void *v100;
  __int128 v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE v104[288];
  void *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  void *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  void *v115;
  __int128 v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  double v120;
  void *v121;
  __int128 v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  void *v126;
  __int128 v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  void *v131;
  __int128 v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  int v136;
  void *v137;
  __int128 v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  void *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  void *v148;
  __int128 v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  void *v153;
  __int128 v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  void *v158;
  __int128 v159;
  uint64_t v160;
  __int128 *v161;
  __int128 v162;
  uint64_t *v163;
  __int128 v164;
  uint64_t *v165;
  void *v166;
  __int128 v167;
  uint64_t v168;
  __int128 *v169;
  __int128 v170;
  uint64_t v171;

  if (!sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8))
  {
    if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
    {
      LOWORD(v143) = 12;
      LOBYTE(v115) = 1;
      v40 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v83 = v41 + (double)v40;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, (unsigned __int8 *)&v115, "t,%.3lf skipped position measurement innovation test: invalid raven solution", v42, v43, v44, v45, v46, SLOBYTE(v83));
    }
    return 5;
  }
  v4 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
  if (!v4)
    sub_18D077838("unordered_map::at: key not found");
  v5 = v4;
  if (!*((_BYTE *)v4 + 1488))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v4) <= 1)
    {
      LOWORD(v143) = 12;
      LOBYTE(v115) = 1;
      v47 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v84 = v48 + (double)v47;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, (unsigned __int8 *)&v115, "t,%.3lf skipped position measurement innovation test: invalid device position", v49, v50, v51, v52, v53, SLOBYTE(v84));
    }
    return 5;
  }
  if (!*((_BYTE *)v4 + 1568))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v4) <= 1)
    {
      LOWORD(v143) = 12;
      LOBYTE(v115) = 1;
      v54 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v85 = v55 + (double)v54;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, (unsigned __int8 *)&v115, "t,%.3lf skipped position measurement innovation test: invalid device velocity", v56, v57, v58, v59, v60, SLOBYTE(v85));
    }
    return 5;
  }
  v168 = 0x100000003;
  v166 = &unk_1E25C7790;
  v167 = xmmword_18D313070;
  v169 = &v170;
  v170 = *((_OWORD *)a2 + 18);
  v171 = *((_QWORD *)a2 + 38);
  v160 = 0x100000006;
  v158 = &unk_1E25C8120;
  v159 = xmmword_18D319950;
  v161 = &v162;
  v162 = *(_OWORD *)(v4 + 187);
  v163 = v4[189];
  v164 = *(_OWORD *)(v4 + 197);
  v165 = v4[199];
  v155 = 0x300000003;
  v153 = &unk_1E25C78E0;
  v154 = xmmword_18D30BB60;
  v156 = &v157;
  v150 = 0x300000003;
  v148 = &unk_1E25C78E0;
  v149 = xmmword_18D30BB60;
  v151 = &v152;
  v6 = sub_18D2485E0((uint64_t)(v4 + 149), (uint64_t)&v153);
  if (!v6)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
    {
      LOWORD(v143) = 12;
      LOBYTE(v115) = 1;
      v61 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v86 = v62 + (double)v61;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, (unsigned __int8 *)&v115, "t,%.3lf skipped position measurement innovation test: failed to get raven position solution covariance", v63, v64, v65, v66, v67, SLOBYTE(v86));
    }
    return 5;
  }
  v7 = sub_18D165E74((uint64_t)(v5 + 149), (uint64_t)&v148);
  if (!v7)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v7) <= 1)
    {
      LOWORD(v143) = 12;
      LOBYTE(v115) = 1;
      v68 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v87 = v69 + (double)v68;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, (unsigned __int8 *)&v115, "t,%.3lf skipped position measurement innovation test: failed to get raven velocity solution covariance", v70, v71, v72, v73, v74, SLOBYTE(v87));
    }
    return 5;
  }
  v145 = 0x600000006;
  v143 = &unk_1E25C81B0;
  v146 = &v147;
  v144 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v143, 0.0);
  v139 = 0x100000003;
  v137 = &unk_1E25C77C0;
  v138 = xmmword_18D313070;
  v142 = 2;
  v140 = &v141;
  v141 = 0x100000000;
  v119 = 0x400000003;
  v133 = 0x100000003;
  v131 = &unk_1E25C77C0;
  v132 = xmmword_18D313070;
  v136 = 5;
  v134 = &v135;
  v135 = 0x400000003;
  sub_18D04F764((uint64_t)&v115, (uint64_t)&v143, (uint64_t)&v137, (uint64_t)&v137);
  sub_18D16171C((uint64_t)&v115, (uint64_t)&v153);
  sub_18D04F764((uint64_t)&v115, (uint64_t)&v143, (uint64_t)&v131, (uint64_t)&v131);
  sub_18D16171C((uint64_t)&v115, (uint64_t)&v148);
  v128 = 0x100000006;
  v126 = &unk_1E25C8120;
  v129 = &v130;
  v127 = xmmword_18D319950;
  sub_18D04BE88((uint64_t)&v126, 0.0);
  v123 = 0x100000006;
  v121 = &unk_1E25C8120;
  v124 = &v125;
  v122 = xmmword_18D319950;
  sub_18D04BE88((uint64_t)&v121, 0.0);
  v115 = (void *)(*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v116 = v8;
  v110 = (void *)((uint64_t (*)(uint64_t **))v5[3][2])(v5 + 3);
  *(_QWORD *)&v111 = v9;
  v12 = CNTimeSpan::operator-((uint64_t)&v115, &v110, v10, v11);
  v120 = v13 + (double)v12;
  v117 = 0x600000006;
  v115 = &unk_1E25C81B0;
  v116 = xmmword_18D314680;
  v118 = &v119;
  v112 = 0x600000006;
  v110 = &unk_1E25C81B0;
  v111 = xmmword_18D314680;
  v113 = &v114;
  sub_18D1C8214((uint64_t)&v158, (uint64_t)&v121, (uint64_t *)&v120, (uint64_t)&v126, (uint64_t)&v115, (uint64_t)&v110, v14, v15);
  v102 = 0x600000006;
  v100 = &unk_1E25C81B0;
  v101 = xmmword_18D314680;
  v103 = v104;
  sub_18D053B2C((uint64_t)&v115, (uint64_t)&v143, (uint64_t)&v100);
  v17 = v116;
  v16 = DWORD1(v116);
  v97 = 0x600000006;
  v92 = &unk_1E25C81B0;
  v98 = v99;
  v93 = DWORD1(v116);
  v94 = v116;
  v95 = v116 * DWORD1(v116);
  v96 = DWORD1(v116);
  if (DWORD1(v116))
  {
    v18 = 0;
    v19 = 0;
    v20 = HIDWORD(v116);
    v21 = v118;
    do
    {
      v22 = v18;
      v23 = v19;
      for (i = v17; i; --i)
      {
        v99[v23] = v21[v22];
        v23 += v16;
        ++v22;
      }
      ++v19;
      v18 += v20;
    }
    while (v19 != v16);
  }
  v107 = 0x600000006;
  v105 = &unk_1E25C81B0;
  v106 = xmmword_18D314680;
  v108 = &v109;
  sub_18D053B2C((uint64_t)&v100, (uint64_t)&v92, (uint64_t)&v105);
  sub_18D161D4C((uint64_t)&v105, (uint64_t)&v137, (uint64_t)&v137, (uint64_t)&v92);
  sub_18D1C9120((uint64_t)&v100, (uint64_t)&v126, (uint64_t)&v137);
  sub_18D04DA0C((uint64_t)v91, (uint64_t)&v100);
  v102 = 0x300000003;
  v100 = &unk_1E25C78E0;
  v101 = xmmword_18D30BB60;
  v103 = v104;
  if ((sub_18D24809C((uint64_t)a2, (uint64_t)&v100) & 1) == 0)
  {
    v90 = 12;
    v89 = 4;
    v75 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v88 = v76 + (double)v75;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v90, &v89, "t,%.3lf positionevent failure: unable to obtain measurement variance", v77, v78, v79, v80, v81, SLOBYTE(v88));
    return 1;
  }
  result = raven::PositionChecker::InnovationTestingAndReweighting((double *)this, (uint64_t)&v166, (uint64_t)&v100, (uint64_t)v91, (uint64_t)&v92);
  if ((_DWORD)result == 4)
  {
    v32 = sub_18D2B71E4(a2, (uint64_t)&v100, v26, v27, v28, v29, v30, v31);
    result = 4;
    if ((v32 & 1) == 0)
    {
      v90 = 12;
      v89 = 4;
      v33 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v82 = v34 + (double)v33;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v90, &v89, "t,%.3lf positionevent failure: unable to set reweighted measurement variance", v35, v36, v37, v38, v39, SLOBYTE(v82));
      return 1;
    }
  }
  return result;
}

uint64_t raven::PositionChecker::InnovationTestingAndReweighting(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  double v19;
  cnstatistics *v20;
  cnprint::CNPrinter *LogLevel;
  double v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  double v27;
  double v28;
  double v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _BYTE v69[72];
  void *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  void *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  uint64_t v90;
  double *v91;
  uint64_t v92;
  void *v93;
  __int128 v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  void *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  void *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  void *v108;
  __int128 v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  void *v113;
  __int128 v114;
  uint64_t v115;
  double *v116;
  uint64_t v117;
  _BYTE v118[128];
  void *v119;
  __int128 v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  void *v124;
  __int128 v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;

  v5.i64[0] = *(_QWORD *)(a2 + 8);
  v6.i64[0] = *(_QWORD *)(a3 + 8);
  v5.i64[1] = *(_QWORD *)(a4 + 8);
  v6.i64[1] = *(_QWORD *)(a5 + 8);
  v7.i64[0] = 0x300000003;
  v7.i64[1] = 0x300000003;
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v5, (int32x4_t)xmmword_18D3472C0), (int16x8_t)vceqq_s32(v6, v7))))) & 1) != 0)return 1;
  v121 = 0x100000003;
  v119 = &unk_1E25C7790;
  v120 = xmmword_18D313070;
  v122 = &v123;
  sub_18D0540FC(a2, a4, (uint64_t)&v119);
  sub_18D16AF50((uint64_t)v118, **(float64_t **)(a4 + 32), *(float64_t *)(*(_QWORD *)(a4 + 32) + 8), *(double *)(*(_QWORD *)(a4 + 32) + 16));
  v115 = 0x100000003;
  v113 = &unk_1E25C7790;
  v114 = xmmword_18D313070;
  v116 = (double *)&v117;
  v110 = 0x300000003;
  v108 = &unk_1E25C78E0;
  v109 = xmmword_18D30BB60;
  v111 = &v112;
  v105 = 0x300000003;
  v103 = &unk_1E25C78E0;
  v104 = xmmword_18D30BB60;
  v106 = &v107;
  sub_18D294698((uint64_t)v118, (uint64_t)&v119, (uint64_t)&v113);
  if (!v17 || !sub_18D04BB5C((uint64_t)v118, a3, (uint64_t)&v108) || !sub_18D04BB5C((uint64_t)v118, a5, (uint64_t)&v103))
  {
    LOWORD(v59) = 12;
    LOBYTE(v98) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v98, "Failed to transform information from ECEF to ENU", v12, v13, v14, v15, v16, v58);
    return 1;
  }
  v100 = 0x300000003;
  v98 = &unk_1E25C78E0;
  v99 = xmmword_18D30BB60;
  v101 = &v102;
  sub_18D053FA4((uint64_t)&v103, (uint64_t)&v108, (uint64_t)&v98);
  v61 = 0x200000001;
  v59 = &unk_1E25C6BF0;
  v62 = &v63;
  v60 = xmmword_18D319920;
  v63 = 0x100000000;
  v95 = 0x100000002;
  v93 = &unk_1E25C7550;
  v94 = xmmword_18D319330;
  v96 = &v97;
  sub_18D163160((uint64_t)&v59, (uint64_t)&v93);
  sub_18D1CB1FC((uint64_t)&v59, (uint64_t)&v113, (uint64_t)&v93);
  v80 = 0x200000001;
  v75 = &unk_1E25C6BC0;
  v76 = DWORD1(v60);
  v77 = v60;
  v78 = v60 * DWORD1(v60);
  v79 = DWORD1(v60);
  v81 = &v82;
  sub_18D073454((uint64_t)&v59, (uint64_t)&v75);
  sub_18D2B72A8((uint64_t)&v98, (uint64_t)&v93, (uint64_t)&v93, (uint64_t)v69);
  v72 = 0x200000002;
  v70 = &unk_1E25C75B0;
  v71 = xmmword_18D319340;
  v73 = &v74;
  v126 = 0x100000002;
  v124 = &unk_1E25C7550;
  v125 = xmmword_18D319330;
  v127 = &v128;
  v66 = 0x100000008;
  v64 = &unk_1E25C86C0;
  v65 = xmmword_18D319940;
  v67 = &v68;
  sub_18D04F504((uint64_t)v69, (uint64_t)&v124, (uint64_t)&v64, (uint64_t)&v70);
  v85 = 0x200000001;
  v83 = &unk_1E25C6BC0;
  v84 = xmmword_18D319920;
  v86 = &v87;
  sub_18D053B2C((uint64_t)&v75, (uint64_t)&v70, (uint64_t)&v83);
  sub_18D1CB1FC((uint64_t)&v64, (uint64_t)&v113, (uint64_t)&v93);
  v90 = 0x100000001;
  v88 = &unk_1E25C6A40;
  *(_QWORD *)&v18 = 0x100000001;
  *((_QWORD *)&v18 + 1) = 0x100000001;
  v89 = v18;
  v91 = (double *)&v92;
  sub_18D053B2C((uint64_t)&v83, (uint64_t)&v64, (uint64_t)&v88);
  v19 = *v91;
  cnstatistics::InverseChi2(v20, a1[9], 2.0);
  if (v19 <= v22)
  {
    v36 = 0;
LABEL_18:
    v38 = v116[2] * v116[2];
    v39 = v38 / *(double *)&v101[2 * SHIDWORD(v99) + 2];
    if (v39 <= a1[7]
      || (v40 = v38 / a1[11] - *(double *)&v106[2 * SHIDWORD(v104) + 2],
          (*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      || (v41 = 2 * SHIDWORD(v109) + 2, v40 <= *(double *)&v111[v41]))
    {
      if (!v36)
        return 5;
    }
    else
    {
      *(double *)&v111[v41] = v40;
      if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
      {
        LOWORD(v59) = 12;
        LOBYTE(v64) = 1;
        v47 = sqrt(v39);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v64, "PositionChecker: measurement reweighted for axis# 2 normalized innovation = %.1lg", v42, v43, v44, v45, v46, SLOBYTE(v47));
      }
    }
    sub_18D04DDF4((uint64_t)&v59, **(float64_t **)(a4 + 32), *(float64_t *)(*(_QWORD *)(a4 + 32) + 8), *(double *)(*(_QWORD *)(a4 + 32) + 16));
    if (sub_18D04BB5C((uint64_t)&v59, (uint64_t)&v108, a3))
      return 4;
    LOWORD(v64) = 12;
    LOBYTE(v70) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, (unsigned __int8 *)&v70, "PositionChecker: Failed to transform information from ENU to ECEF frame", v48, v49, v50, v51, v52, v58);
    return 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = 1;
  while (1)
  {
    v26 = v25;
    v27 = v116[v23] * v116[v23];
    v28 = v27 / *(double *)&v101[(int)v23 + (int)v23 * HIDWORD(v99)];
    if (v28 > a1[8])
      break;
    if (v28 > a1[7])
    {
      v29 = v27 / a1[10] - *(double *)&v106[(int)v23 + (int)v23 * HIDWORD(v104)];
      if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v30 = v23 + v23 * HIDWORD(v109);
        if (v29 > *(double *)&v111[v30])
        {
          *(double *)&v111[v30] = v29;
          LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
          v24 = 1;
          if (LogLevel <= 1)
          {
            LOWORD(v59) = 12;
            LOBYTE(v64) = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v64, "PositionChecker: measurement reweighted for axis# %d normalized innovation = %.1lg", v31, v32, v33, v34, v35, v23);
          }
        }
      }
    }
    v25 = 0;
    v23 = 1;
    if ((v26 & 1) == 0)
    {
      v36 = v24 & 1;
      goto LABEL_18;
    }
  }
  if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v59) = 12;
    LOBYTE(v64) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v64, "PositionChecker: measurement rejected, normalized innovation for axis# %d = %.1lg", v53, v54, v55, v56, v57, v23);
  }
  return 3;
}

uint64_t sub_18D2B71E4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char v14;
  unsigned __int8 v15;
  __int16 v16;

  v8 = *(_DWORD *)(a2 + 8) == 3 && *(_DWORD *)(a2 + 12) == 3;
  v9 = v8;
  if (v8)
  {
    v10 = *(_QWORD **)(a2 + 32);
    a1[39] = *v10;
    v11 = *(int *)(a2 + 20);
    a1[40] = v10[v11];
    a1[41] = v10[2 * v11];
    a1[40] = v10[1];
    a1[42] = v10[(int)v11 + 1];
    v12 = &v10[2 * (int)v11];
    a1[43] = v12[1];
    a1[41] = v10[2];
    a1[43] = v10[(int)v11 + 2];
    a1[44] = v12[2];
  }
  else
  {
    v16 = 12;
    v15 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "Failed to set ECEF covariance matrix: Invalid input matrix size", a4, a5, a6, a7, a8, v14);
  }
  return v9;
}

uint64_t sub_18D2B72A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a4 + 24) = 0x200000002;
  *(_QWORD *)a4 = &unk_1E25C75B0;
  *(_DWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 12) = v5;
  *(_DWORD *)(a4 + 16) = v5 * v4;
  *(_DWORD *)(a4 + 20) = v4;
  v6 = a4 + 40;
  *(_QWORD *)(a4 + 32) = a4 + 40;
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a3 + 32);
    do
    {
      if (v4)
      {
        v11 = 0;
        v12 = *(_DWORD *)(result + 20) * *(_DWORD *)(v10 + 4 * v8);
        v13 = *(_QWORD *)(result + 32);
        do
        {
          *(_QWORD *)(v6 + 8 * (v7 + v11)) = *(_QWORD *)(v13
                                                                       + 8
                                                                       * (*(_DWORD *)(v9 + 4 * v11) + v12));
          ++v11;
        }
        while (v4 != v11);
      }
      ++v8;
      v7 += v4;
    }
    while (v8 != v5);
  }
  return result;
}

uint64_t raven::PositionChecker::HandleEvent(raven::PositionChecker *this, const raven::PositionEvent *a2, raven::PositionEvent *a3)
{
  char *v6;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  uint64_t result;
  uint64_t v13;
  uint64_t LogLevel;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  double v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  double v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  char *v41;
  cnprint::CNPrinter *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  cnprint::CNPrinter *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  cnprint::CNPrinter *v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint64_t v55;
  double v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t **v65;
  double *v66;
  double v67;
  uint64_t **v68;
  uint64_t v69;
  double *v70;
  double v71;
  uint64_t **v72;
  double *v73;
  double v74;
  uint64_t **v75;
  double *v76;
  double v77;
  uint64_t **v78;
  int v79;
  double *v80;
  double v81;
  uint64_t **v82;
  double *v83;
  double v84;
  uint64_t **v85;
  double *v86;
  double v87;
  uint64_t **v88;
  int v89;
  double *v90;
  double v91;
  uint64_t **v92;
  cnprint::CNPrinter *v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  double v110;
  cnprint::CNPrinter *v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  unsigned __int8 v123[64];
  _QWORD v124[8];
  _BYTE v125[32];
  double *v126;
  uint64_t v127;
  double v128;
  double v129;
  void *v130;
  __int128 v131;
  uint64_t v132;
  double *v133;
  double v134[3];
  void *v135;
  __int128 v136;
  uint64_t v137;
  double *v138;
  uint64_t v139;

  if (!*((_BYTE *)this + 8))
  {
    LOWORD(v135) = 12;
    LOBYTE(v127) = 4;
    v34 = (*(uint64_t (**)(const raven::PositionEvent *, const raven::PositionEvent *, raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2, a2, a3);
    v120 = v40 + (double)v34;
    v41 = "t,%.3lf,PositionChecker, not configured";
    v42 = (cnprint::CNPrinter *)&v135;
    v43 = (unsigned __int8 *)&v127;
LABEL_41:
    cnprint::CNPrinter::Print(v42, v43, v41, v35, v36, v37, v38, v39, SLOBYTE(v120));
    return 0xFFFFFFFFLL;
  }
  v6 = (char *)a3 + 8;
  memcpy((char *)a3 + 8, (char *)a2 + 8, 0x160uLL);
  v8 = *((_BYTE *)a3 + 200) == 4 && *((_BYTE *)a3 + 201) != 0 && *((_BYTE *)a3 + 202) == 0;
  if (v8
    && *((_BYTE *)this + 26)
    && raven::PositionChecker::Supplement2DWiFiWithAltitudeAssistance(this, a3))
  {
    return 0xFFFFFFFFLL;
  }
  if (sub_18D20C258((uint64_t)a3))
    sub_18D20C508((uint64_t)a3);
  if (!*((_BYTE *)a3 + 280))
    return 0xFFFFFFFFLL;
  v9 = *((double *)a3 + 36);
  if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v10 = *((double *)a3 + 37);
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  v11 = *((double *)a3 + 38);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || sqrt(v10 * v10 + v9 * v9 + v11 * v11) <= 3185504.5)
  {
    return 0xFFFFFFFFLL;
  }
  result = 0xFFFFFFFFLL;
  if ((*((_QWORD *)a3 + 39) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a3 + 39) <= 0.0
    || (*((_QWORD *)a3 + 42) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a3 + 42) <= 0.0
    || (*((_QWORD *)a3 + 44) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a3 + 44) <= 0.0
    || (*((_QWORD *)a3 + 40) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a3 + 41) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((_QWORD *)a3 + 43) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return result;
  }
  v137 = 0x300000003;
  v135 = &unk_1E25C78E0;
  v136 = xmmword_18D30BB60;
  v138 = (double *)&v139;
  if (!sub_18D24809C((uint64_t)a3, (uint64_t)&v135)
    || sub_18D1868AC((uint64_t)&v135, v13) > *((double *)this + 5))
  {
    return 0xFFFFFFFFLL;
  }
  v15 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v15 + 656) || *(_BYTE *)(v15 + 658))
  {
    v130 = (void *)(*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&v131 = v16;
    v124[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 432) + 16))(v15 + 432);
    v124[1] = v17;
    LogLevel = CNTimeSpan::operator-((uint64_t)&v130, v124, v18, v19);
    v127 = LogLevel;
    v128 = v20;
    if (LogLevel < 0 || (*(double *)v21.i64 = v20, v20 < 0.0))
    {
      LogLevel = CNTimeSpan::operator-((double *)&v127, v21, v22);
      v21.i64[0] = v23;
    }
    v24 = *(double *)v21.i64 + (double)LogLevel;
    v25 = v24 < 30.0;
    if (v24 < 30.0)
    {
      v26 = *((unsigned __int8 *)a3 + 200);
      if (v26 == 16 || v26 == 4)
      {
        LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel);
        if (LogLevel <= 1)
        {
          LOWORD(v130) = 12;
          LOBYTE(v124[0]) = 1;
          v27 = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v119 = v28 + (double)v27;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v130, (unsigned __int8 *)v124, "t,%.3lf, CPI is rejected at tunnel,is_tunnel,%d,is_close_to_tunnel,%d", v29, v30, v31, v32, v33, SLOBYTE(v119));
        }
      }
    }
  }
  else
  {
    v25 = 0;
  }
  v44 = *((unsigned __int8 *)a3 + 200);
  if (v44 > 8)
  {
    if (v44 != 9)
    {
      if (v44 != 16)
        goto LABEL_55;
      goto LABEL_51;
    }
  }
  else if (v44 != 1)
  {
    if (v44 != 4)
    {
LABEL_55:
      if ((v44 & 0xFE) != 0xE)
        return 0xFFFFFFFFLL;
      goto LABEL_56;
    }
LABEL_51:
    if (!v25)
      goto LABEL_56;
    goto LABEL_55;
  }
  if (*((_BYTE *)this + 48))
    return 0xFFFFFFFFLL;
LABEL_56:
  if (!*((_BYTE *)this + 9))
    return 0;
  if (v44 != 16)
  {
    if (v44 == 14)
    {
      v48 = *((_QWORD *)this + 2);
      if (*(_BYTE *)(v48 + 272) && *(_BYTE *)(v48 + 384) != 2)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) > 1)
          return 0xFFFFFFFFLL;
        LOWORD(v127) = 12;
        LOBYTE(v130) = 1;
        v101 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a3 + 16))(a3);
        v120 = v102 + (double)v101;
        v41 = "t,%.3lf,PositionChecker: ARSession is not in running state, VL localization position dropped";
        goto LABEL_96;
      }
      v49 = (cnprint::CNPrinter *)raven::PositionChecker::VLPositionTestingAndReweighting(this, a3);
      if ((v49 & 1) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel(v49) > 1)
          return 0xFFFFFFFFLL;
        LOWORD(v127) = 12;
        LOBYTE(v130) = 1;
        v50 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a3 + 16))(a3);
        v120 = v51 + (double)v50;
        v41 = "t,%.3lf,PositionChecker: VL localization position dropped, consistency check returned failure";
        goto LABEL_96;
      }
      goto LABEL_80;
    }
    if (v44 != 4)
      goto LABEL_80;
  }
  if (*((_BYTE *)this + 25))
  {
    v45 = (cnprint::CNPrinter *)raven::PositionChecker::TestInnovationAndReweight(this, a3);
    switch((int)v45)
    {
      case 0:
      case 2:
        LOWORD(v127) = 12;
        LOBYTE(v130) = 4;
        v46 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a3 + 16))(a3);
        v120 = v47 + (double)v46;
        v41 = "t,%.3lf unexpected innovation test result";
        break;
      case 1:
        LOWORD(v127) = 12;
        LOBYTE(v130) = 4;
        v103 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a3 + 16))(a3);
        v120 = v104 + (double)v103;
        v41 = "t,%.3lf error in position measurement innovation testing";
        break;
      case 3:
        if (cnprint::CNPrinter::GetLogLevel(v45))
          return 0xFFFFFFFFLL;
        LOWORD(v127) = 12;
        LOBYTE(v130) = 0;
        v105 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a3 + 16))(a3);
        v120 = v106 + (double)v105;
        v41 = "t,%.3lf Innovation test failed: Position-Measurement rejected";
        break;
      default:
        goto LABEL_68;
    }
LABEL_96:
    v42 = (cnprint::CNPrinter *)&v127;
    v43 = (unsigned __int8 *)&v130;
    goto LABEL_41;
  }
LABEL_68:
  if (*((_BYTE *)this + 120))
  {
    v130 = (void *)(*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)&v131 = v52;
    if (!*((_BYTE *)this + 120))
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    v55 = CNTimeSpan::operator-((uint64_t)&v130, (_QWORD *)this + 17, v53, v54);
    v127 = v55;
    v128 = v56;
    if (v55 < 0 || (*(double *)v57.i64 = v56, v56 < 0.0))
    {
      v55 = CNTimeSpan::operator-((double *)&v127, v57, v58);
      v57.i64[0] = v59;
    }
    if (*(double *)v57.i64 + (double)v55 < 30.0
      && fabs(sqrt((v10 - *((double *)this + 53)) * (v10 - *((double *)this + 53))+ (v9 - *((double *)this + 52)) * (v9 - *((double *)this + 52))+ (v11 - *((double *)this + 54)) * (v11 - *((double *)this + 54)))) <= 0.01)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v55) > 1)
        return 0xFFFFFFFFLL;
      LOWORD(v127) = 12;
      LOBYTE(v130) = 1;
      v109 = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v120 = v110 + (double)v109;
      v41 = "t,%.3lf,PositionChecker: duplicate PositionEvent,returning check failed";
      goto LABEL_96;
    }
    memcpy((char *)this + 136, v6, 0x160uLL);
  }
  else
  {
    *((_QWORD *)this + 16) = &unk_1E25C21B8;
    memcpy((char *)this + 136, v6, 0x160uLL);
    *((_BYTE *)this + 120) = 1;
  }
  if (sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8))
  {
    if (*((_BYTE *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8) + 1344))
    {
      v60 = (double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      if (v60[169] > 13.4112)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60) > 1)
          return 0xFFFFFFFFLL;
        LOWORD(v127) = 12;
        LOBYTE(v130) = 1;
        v107 = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
        v120 = v108 + (double)v107;
        v41 = "t,%.3lf,PositionChecker: Speed too large,returning check failed,%.3lf";
        goto LABEL_96;
      }
    }
  }
LABEL_80:
  result = (uint64_t)sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
  if (result)
  {
    if (*((_BYTE *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8) + 1464))
    {
      v61 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8) + 184);
      v62 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8) + 185);
      v63 = *((double *)sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8) + 186);
      if (!sub_18D24809C((uint64_t)a3, (uint64_t)&v135))
        return 0xFFFFFFFFLL;
      v64 = *v138;
      v65 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      v66 = v138;
      *v138 = v64 + *((double *)v65 + 187);
      v67 = v66[SHIDWORD(v136)];
      v68 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      v69 = SHIDWORD(v136);
      v70 = v138;
      v138[SHIDWORD(v136)] = v67 + *((double *)v68 + 188);
      v71 = v70[2 * v69];
      v72 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      v73 = v138;
      v138[2 * SHIDWORD(v136)] = v71 + *((double *)v72 + 189);
      v74 = v73[1];
      v75 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      v76 = v138;
      v138[1] = v74 + *((double *)v75 + 188);
      v77 = v76[SHIDWORD(v136) + 1];
      v78 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      v79 = HIDWORD(v136);
      v80 = v138;
      v138[HIDWORD(v136) + 1] = v77 + *((double *)v78 + 190);
      v81 = v80[(2 * v79) | 1];
      v82 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      v83 = v138;
      v138[2 * SHIDWORD(v136) + 1] = v81 + *((double *)v82 + 191);
      v84 = v83[2];
      v85 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      v86 = v138;
      v138[2] = v84 + *((double *)v85 + 189);
      v87 = v86[SHIDWORD(v136) + 2];
      v88 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      v89 = HIDWORD(v136);
      v90 = v138;
      v138[HIDWORD(v136) + 2] = v87 + *((double *)v88 + 191);
      v91 = v90[2 * v89 + 2];
      v92 = sub_18D045814((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
      v138[2 * SHIDWORD(v136) + 2] = v91 + *((double *)v92 + 192);
      v132 = 0x100000003;
      v131 = xmmword_18D313070;
      v133 = v134;
      v134[0] = v9 - v61;
      v134[1] = v10 - v62;
      v134[2] = v11 - v63;
      v129 = INFINITY;
      v130 = &unk_1E25C7790;
      sub_18D1869D8((uint64_t)&v135, &v129, (uint64_t)&v127);
      if ((*(_QWORD *)&v129 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v129 > *((double *)this + 5))
      {
        if (cnprint::CNPrinter::GetLogLevel(v93) <= 1)
        {
          LOWORD(v124[0]) = 12;
          v123[0] = 1;
          v94 = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v121 = v95 + (double)v94;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v124, v123, "t,%.3lf,PositionChecker: Poorly conditioned joint covariance matrix,returning check failed", v96, v97, v98, v99, v100, SLOBYTE(v121));
        }
        return 0xFFFFFFFFLL;
      }
      sub_18D186BA8((uint64_t)&v130, (uint64_t)v123);
      sub_18D186B40((uint64_t)v123, (uint64_t)&v127, (uint64_t)v124);
      sub_18D186AE0((uint64_t)v124, (uint64_t)&v130, (uint64_t)v125);
      if (fabs(sqrt(*v126)) > *((double *)this + 4) || !*((_BYTE *)this + 8))
      {
        if (cnprint::CNPrinter::GetLogLevel(v111) <= 1)
        {
          LOWORD(v124[0]) = 12;
          v123[0] = 1;
          v112 = (*(uint64_t (**)(const raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v122 = v113 + (double)v112;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v124, v123, "t,%.3lf,PositionChecker: failed sigma sanity test, %.2lf > %.2lf, returning check failed, src,%d", v114, v115, v116, v117, v118, SLOBYTE(v122));
        }
        return 0xFFFFFFFFLL;
      }
    }
    return 0;
  }
  return result;
}

uint64_t raven::PositionChecker::Supplement2DWiFiWithAltitudeAssistance(raven::PositionChecker *this, raven::PositionEvent *a2)
{
  uint64_t v5;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  double v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  double v14;
  _BOOL4 v16;
  double v17;
  uint64_t v18;
  double v19;
  cnprint::CNPrinter *v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  double v50[2];
  int8x16_t v51;
  _QWORD v52[2];

  if (*((_BYTE *)a2 + 200) != 4 || *((_BYTE *)a2 + 201) == 0 || *((_BYTE *)a2 + 202) != 0)
    return 0xFFFFFFFFLL;
  v5 = *((_QWORD *)this + 2);
  if (!*(_BYTE *)(v5 + 144))
    return 0xFFFFFFFFLL;
  v52[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 152) + 16))(v5 + 152);
  v52[1] = v7;
  v51 = *(int8x16_t *)((char *)a2 + 104);
  v9 = CNTimeSpan::operator-((uint64_t)&v51, v52, v51, v8);
  v13 = v9;
  *(_QWORD *)&v50[0] = v9;
  v50[1] = v10;
  v14 = v10;
  v16 = v10 < 0.0 || v9 < 0;
  v17 = v10;
  v18 = v9;
  if (v16)
  {
    v18 = CNTimeSpan::operator-(v50, v11, v12);
    v17 = v19;
  }
  v11.i64[0] = *((_QWORD *)this + 14);
  v48 = 0;
  v49 = 0;
  v20 = (cnprint::CNPrinter *)CNTimeSpan::SetTimeSpan(&v48, 0, v11, v12);
  if (!v18 && (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_23:
    v21.i64[0] = v49;
    goto LABEL_24;
  }
  if (v48 || (v21.i64[0] = v49, (v49 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
  {
    if (v18 != v48)
    {
      if (v18 > v48)
      {
LABEL_25:
        if (!cnprint::CNPrinter::GetLogLevel(v20))
        {
          LOWORD(v48) = 12;
          v47 = 0;
          v23 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
          v45 = v24 + (double)v23;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "t,%.3lf PositionChecker: Altitude Event age outside the use threshold for hybrid 2D WiFi Position, time_diff,%.3lf", v25, v26, v27, v28, v29, SLOBYTE(v45));
        }
        return 0xFFFFFFFFLL;
      }
      goto LABEL_29;
    }
    goto LABEL_23;
  }
LABEL_24:
  if (*(double *)v21.i64 < v17)
    goto LABEL_25;
LABEL_29:
  if (v16)
  {
    v20 = (cnprint::CNPrinter *)CNTimeSpan::operator-(v50, v21, v22);
    v13 = (uint64_t)v20;
    v14 = v31;
  }
  v32 = *((_QWORD *)this + 2);
  if (!*(_BYTE *)(v32 + 144))
    goto LABEL_45;
  v33 = fmax(v14 + (double)v13, 1.0) * 1.5 + *(double *)(v32 + 264);
  if (v33 <= *((double *)this + 13))
    v33 = *((double *)this + 13);
  v34 = v33 * v33;
  v35 = *((double *)a2 + 29);
  if (v35 <= *((double *)a2 + 32))
    v35 = *((double *)a2 + 32);
  if (v34 <= v35)
    v34 = v35;
  v36 = v34;
  if (cnprint::CNPrinter::GetLogLevel(v20) <= 1)
  {
    LOWORD(v48) = 12;
    v47 = 1;
    v37 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    if (!*(_BYTE *)(*((_QWORD *)this + 2) + 144))
      goto LABEL_45;
    v46 = v38 + (double)v37;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "t,%.3lf PositionChecker: Altitude Event is added to the 2D WiFi Pos, age,%.3lf,alt,%.3lf,unc,%.3lf", v39, v40, v41, v42, v43, SLOBYTE(v46));
  }
  v44 = *((_QWORD *)this + 2);
  if (!*(_BYTE *)(v44 + 144))
LABEL_45:
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  *((_QWORD *)a2 + 28) = *(_QWORD *)(v44 + 256);
  *((_BYTE *)a2 + 202) = 1;
  *((double *)a2 + 34) = v36;
  *((_QWORD *)a2 + 31) = 0;
  *((_QWORD *)a2 + 33) = 0;
  if (sub_18D20C258((uint64_t)a2))
    sub_18D20C508((uint64_t)a2);
  result = 0;
  *((_BYTE *)a2 + 200) = 16;
  return result;
}

uint64_t raven::PositionChecker::VLPositionTestingAndReweighting(raven::PositionChecker *this, raven::PositionEvent *a2)
{
  uint64_t v4;
  __n128 v5;
  double v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t **v38;
  int8x16_t v39;
  uint64_t v40;
  int v41;
  double v42;
  _BOOL4 v43;
  int v44;
  int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  cnprint::CNPrinter *LogLevel;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  double v93;
  double v94;
  double *v95;
  int v96;
  cnprint::CNPrinter *v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  void *v113;
  __int128 v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE v117[72];
  _BYTE v118[64];
  _BYTE v119[32];
  double *v120;
  void *v121;
  __int128 v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _BYTE v126[24];
  uint64_t v127;
  double *v128;
  _QWORD v129[7];
  __int128 v130;
  void *v131;
  __int128 v132;
  uint64_t v133;
  __int128 *v134;
  __int128 v135;
  uint64_t v136;
  void *v137;
  __int128 v138;
  uint64_t v139;
  __int128 *v140;
  __int128 v141;
  uint64_t v142;
  void *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  void *v148;
  __int128 v149;
  uint64_t v150;
  __int128 *v151;
  __int128 v152;
  uint64_t *v153;
  _BYTE v154[24];
  uint64_t v155;
  __int128 *v156;
  __int128 v157;
  uint64_t v158;

  v145 = 0x300000003;
  v143 = &unk_1E25C78E0;
  v144 = xmmword_18D30BB60;
  v146 = &v147;
  v4 = sub_18D24809C((uint64_t)a2, (uint64_t)&v143);
  if ((v4 & 1) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v4) <= 1)
    {
      *(_WORD *)v154 = 12;
      v126[0] = 1;
      v10 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v106 = v11 + (double)v10;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v154, v126, "t,%.3lf PositionChecker: VL localization crosscheck failure: unable to get position ECEF var-cov", v12, v13, v14, v15, v16, SLOBYTE(v106));
    }
    return 0;
  }
  v6 = *((double *)this + 12) * *((double *)this + 12);
  v7 = v144;
  if ((int)v144 < 1)
  {
    v5.n128_u64[0] = 0;
    v9 = xmmword_18D30BB60;
LABEL_10:
    v155 = 0x300000003;
    *(_QWORD *)v154 = &unk_1E25C78E0;
    *(_OWORD *)&v154[8] = v9;
    v156 = &v157;
    v5.n128_f64[0] = 1.0 / v5.n128_f64[0];
    sub_18D1C94E0((uint64_t)&v143, (uint64_t)v154, (float64x2_t)v5);
    v5 = sub_18D053AA8((uint64_t)&v143, (uint64_t)v154);
    v9 = xmmword_18D30BB60;
    goto LABEL_11;
  }
  v8 = 0;
  v5.n128_u64[0] = 0;
  v9 = xmmword_18D30BB60;
  do
  {
    v5.n128_f64[0] = v5.n128_f64[0] + *(double *)&v146[v8];
    v8 += HIDWORD(v144) + 1;
    --v7;
  }
  while (v7);
  if (v5.n128_f64[0] < 1.0)
    goto LABEL_10;
LABEL_11:
  v155 = 0x300000003;
  *(_QWORD *)v154 = &unk_1E25C78E0;
  *(_OWORD *)&v154[8] = v9;
  v156 = &v157;
  v5.n128_f64[0] = v6;
  sub_18D1C94E0((uint64_t)&v143, (uint64_t)v154, (float64x2_t)v5);
  sub_18D053AA8((uint64_t)&v143, (uint64_t)v154);
  v23 = sub_18D2B71E4(a2, (uint64_t)&v143, v17, v18, v19, v20, v21, v22);
  if ((v23 & 1) == 0)
  {
LABEL_57:
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v23) <= 1)
    {
      *(_WORD *)v154 = 12;
      v126[0] = 1;
      v82 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v111 = v83 + (double)v82;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v154, v126, "t,%.3lf PositionChecker: VL localization crosscheck failure: unable to set reweighted position variance", v84, v85, v86, v87, v88, SLOBYTE(v111));
    }
    return 0;
  }
  if (!*((_BYTE *)this + 24))
    return 1;
  if (*((_BYTE *)a2 + 280))
  {
    v139 = 0x100000003;
    v137 = &unk_1E25C7790;
    v138 = xmmword_18D313070;
    v140 = &v141;
    v141 = *((_OWORD *)a2 + 18);
    v142 = *((_QWORD *)a2 + 38);
    v24 = *((_QWORD *)this + 2);
    if (!*(_BYTE *)(v24 + 784) || !*(_BYTE *)(v24 + 1072))
    {
LABEL_22:
      v36 = 0;
      v37 = 0;
      goto LABEL_23;
    }
    *(_OWORD *)v154 = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)v126 = *(_OWORD *)(v24 + 896);
    v25 = CNTimeSpan::operator-((uint64_t)v154, v126, *(int8x16_t *)v126, (int8x16_t)xmmword_18D313070);
    v27 = v25;
    v28 = v26;
    if (v25 != 30)
    {
      if (v25)
      {
        if (v25 >= 31)
        {
LABEL_20:
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
          {
            *(_WORD *)v154 = 12;
            v126[0] = 1;
            v29 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
            v107 = v30 + (double)v29;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v154, v126, "t,%.3lf,PositionChecker: VL localization cross-check, previous VL is too old: %.2lf > %.2lf", v31, v32, v33, v34, v35, SLOBYTE(v107));
          }
          goto LABEL_22;
        }
LABEL_61:
        v133 = 0x100000003;
        v131 = &unk_1E25C7790;
        v132 = xmmword_18D313070;
        v134 = &v135;
        v127 = 0x300000003;
        *(_QWORD *)v126 = &unk_1E25C78E0;
        *(_OWORD *)&v126[8] = xmmword_18D30BB60;
        v128 = (double *)v129;
        v135 = *(_OWORD *)(v24 + 1080);
        v136 = *(_QWORD *)(v24 + 1096);
        v89 = *(_QWORD *)(v24 + 1112);
        v90 = *(_QWORD *)(v24 + 1120);
        v129[0] = *(_QWORD *)(v24 + 1104);
        v129[1] = v89;
        v91 = *(_QWORD *)(v24 + 1128);
        v129[2] = v90;
        v129[3] = v89;
        v92 = *(_OWORD *)(v24 + 1136);
        v129[4] = v91;
        v129[5] = v92;
        v129[6] = v90;
        v130 = v92;
        v123 = 0x100000003;
        v121 = &unk_1E25C7790;
        v122 = xmmword_18D313070;
        v124 = &v125;
        sub_18D0540FC((uint64_t)&v137, (uint64_t)&v131, (uint64_t)&v121);
        v115 = 0x100000003;
        v113 = &unk_1E25C7790;
        v114 = xmmword_18D313070;
        v116 = v117;
        v155 = 0x100000134;
        *(_QWORD *)v154 = &unk_1E25C7640;
        *(_OWORD *)&v154[8] = xmmword_18D3130C0;
        v156 = &v157;
        v150 = 0x100000003;
        v148 = &unk_1E25C7790;
        v149 = xmmword_18D313070;
        v151 = &v152;
        sub_18D159EE0((uint64_t)&v121, (uint64_t)&v113, (uint64_t)v154, (uint64_t)&v148, "2");
        if (v93 <= 1.0)
        {
          v37 = 1;
        }
        else
        {
          v94 = (v28 + (double)v27) * 2.5 * ((v28 + (double)v27) * 2.5);
          v95 = v128;
          *v128 = v94 + *v128;
          v96 = *(_DWORD *)&v126[20];
          v95[*(_DWORD *)&v126[20] + 1] = v94 + v95[*(_DWORD *)&v126[20] + 1];
          v95[2 * v96 + 2] = v94 + v95[2 * v96 + 2];
          sub_18D1BE894((uint64_t)v126, (uint64_t)&v143, (uint64_t)v154);
          sub_18D186BA8((uint64_t)&v121, (uint64_t)v118);
          sub_18D1873A0((uint64_t)v154, (uint64_t)&v113);
          sub_18D186B40((uint64_t)v118, (uint64_t)&v113, (uint64_t)&v148);
          sub_18D186AE0((uint64_t)&v148, (uint64_t)&v121, (uint64_t)v119);
          v37 = *v120 <= 6.25139;
          if (*v120 > 6.25139 && cnprint::CNPrinter::GetLogLevel(v97) <= 1)
          {
            LOWORD(v113) = 12;
            LOBYTE(v148) = 1;
            v98 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
            v112 = v99 + (double)v98;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v148, "t,%.3lf,PositionChecker: VL localization crosscheck, failed, normalized delta position %.3lf > %.3lf (test threshold)", v100, v101, v102, v103, v104, SLOBYTE(v112));
          }
        }
        v36 = 1;
LABEL_23:
        v38 = sub_18D041348((_QWORD *)(*((_QWORD *)this + 2) + 16), (unsigned __int8 *)&unk_18D3472D8);
        v40 = *((_QWORD *)this + 2);
        if (v38 && *((_BYTE *)v38 + 1288))
        {
          v150 = 0x100000003;
          v148 = &unk_1E25C7790;
          v149 = xmmword_18D313070;
          v151 = &v152;
          v152 = *((_OWORD *)v38 + 81);
          v153 = v38[164];
          v133 = 0x100000003;
          v131 = &unk_1E25C7790;
          v132 = xmmword_18D313070;
          v134 = &v135;
          sub_18D0540FC((uint64_t)&v137, (uint64_t)&v148, (uint64_t)&v131);
          v127 = 0x100000003;
          *(_QWORD *)v126 = &unk_1E25C7790;
          *(_OWORD *)&v126[8] = xmmword_18D313070;
          v128 = (double *)v129;
          v155 = 0x100000134;
          *(_QWORD *)v154 = &unk_1E25C7640;
          *(_OWORD *)&v154[8] = xmmword_18D3130C0;
          v156 = &v157;
          v115 = 0x100000003;
          v113 = &unk_1E25C7790;
          v114 = xmmword_18D313070;
          v116 = v117;
          sub_18D159EE0((uint64_t)&v131, (uint64_t)v126, (uint64_t)v154, (uint64_t)&v113, "2");
          v41 = 0;
          v43 = v42 <= 100.0;
          v44 = 1;
LABEL_37:
          LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v38);
          if (!(_DWORD)LogLevel)
          {
            *(_WORD *)v154 = 12;
            v126[0] = 0;
            v56 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
            v109 = v57 + (double)v56;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v154, v126, "t,%.3lf PositionChecker: VL localization MSR, cross-check valid,%d,%d,%d passed,%d,%d, vl_distance,%.3lf", v58, v59, v60, v61, v62, SLOBYTE(v109));
          }
          if (((v37 | v36 ^ 1) & 1) == 0 && ((v44 | v41) ^ 1 | v43) != 1)
            return 0;
          v63 = v144;
          if ((int)v144 < 1)
          {
            v65 = 0.0;
          }
          else
          {
            v64 = 0;
            v65 = 0.0;
            do
            {
              v65 = v65 + *(double *)&v146[v64];
              v64 += HIDWORD(v144) + 1;
              --v63;
            }
            while (v63);
          }
          if (v36 | v44 | v41)
            v66 = 1.0;
          else
            v66 = 100.0;
          if (((v36 & v37 ^ 1 | v43) & 1) == 0)
          {
            if (v65 >= 400.0)
              v66 = 1.0;
            else
              v66 = 400.0 / v65;
          }
          if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
          {
            *(_WORD *)v154 = 12;
            v126[0] = 0;
            v67 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
            v110 = v68 + (double)v67;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v154, v126, "t,%.3lf PositionChecker: VL localization MSR Re-weight unc_sf,%.3lf", v69, v70, v71, v72, v73, SLOBYTE(v110));
          }
          v155 = 0x300000003;
          *(_QWORD *)v154 = &unk_1E25C78E0;
          *(_QWORD *)&v74.f64[1] = 0x300000009;
          *(_OWORD *)&v154[8] = xmmword_18D30BB60;
          v156 = &v157;
          v74.f64[0] = v66;
          sub_18D1C94E0((uint64_t)&v143, (uint64_t)v154, v74);
          sub_18D053AA8((uint64_t)&v143, (uint64_t)v154);
          v23 = sub_18D2B71E4(a2, (uint64_t)&v143, v75, v76, v77, v78, v79, v80);
          if ((v23 & 1) != 0)
            return 1;
          goto LABEL_57;
        }
        if (!*(_BYTE *)(v40 + 1152)
          || !*(_BYTE *)(v40 + 1440)
          || (v45 = *(unsigned __int8 *)(v40 + 1360), v45 != 11) && v45 != 4)
        {
LABEL_36:
          v44 = 0;
          v41 = 0;
          v43 = 0;
          goto LABEL_37;
        }
        *(_OWORD *)v154 = *(_OWORD *)((char *)a2 + 104);
        *(_OWORD *)v126 = *(_OWORD *)(v40 + 1264);
        v46 = CNTimeSpan::operator-((uint64_t)v154, v126, *(int8x16_t *)v126, v39);
        if (v46 != 6)
        {
          if (v46)
          {
            if (v46 >= 7)
            {
LABEL_34:
              v38 = (uint64_t **)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v46);
              if (!(_DWORD)v38)
              {
                *(_WORD *)v154 = 12;
                v126[0] = 0;
                v48 = (*(uint64_t (**)(raven::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
                v108 = v49 + (double)v48;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v154, v126, "t,%.3lf,PositionChecker: VL localization crosscheck, previous WiFi pos is too old: %.2lf > %.2lf", v50, v51, v52, v53, v54, SLOBYTE(v108));
              }
              goto LABEL_36;
            }
LABEL_68:
            v155 = 0x100000003;
            *(_QWORD *)v154 = &unk_1E25C7790;
            *(_OWORD *)&v154[8] = xmmword_18D313070;
            v156 = &v157;
            v157 = *(_OWORD *)(v40 + 1448);
            v158 = *(_QWORD *)(v40 + 1464);
            sub_18D187338((uint64_t)&v137, (uint64_t)v154, (uint64_t)v126);
            sub_18D192CE4((uint64_t)v126);
            v44 = 0;
            v43 = v105 <= 100.0;
            v41 = 1;
            goto LABEL_37;
          }
          if ((*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            goto LABEL_68;
        }
        if (v47 > 0.0)
          goto LABEL_34;
        goto LABEL_68;
      }
      if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        goto LABEL_61;
    }
    if (v26 > 0.0)
      goto LABEL_20;
    goto LABEL_61;
  }
  return 0;
}

uint64_t sub_18D2B8BBC(uint64_t result)
{
  *(_QWORD *)result = &off_1E25C2508;
  if (*(_BYTE *)(result + 120))
    *(_BYTE *)(result + 120) = 0;
  return result;
}

raven::RavenPredictor *raven::RavenPredictor::RavenPredictor(raven::RavenPredictor *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &unk_1E25B9B60;
  *((_QWORD *)this + 323) = &off_1E25B98F0;
  *((_OWORD *)this + 162) = 0u;
  *((_OWORD *)this + 163) = 0u;
  *((_OWORD *)this + 164) = 0u;
  *((_OWORD *)this + 165) = 0u;
  *((_OWORD *)this + 166) = 0u;
  *((_OWORD *)this + 167) = 0u;
  *((_OWORD *)this + 168) = 0u;
  *((_OWORD *)this + 169) = 0u;
  *(_OWORD *)((char *)this + 2713) = 0u;
  *((_BYTE *)this + 24) = 0;
  *((_OWORD *)this + 2) = xmmword_18D3197D0;
  *((_QWORD *)this + 6) = 0x40C3880000000000;
  *((_DWORD *)this + 644) = 0;
  *((_DWORD *)this + 684) = 10;
  *((_QWORD *)this + 343) = &unk_1E25B9AB8;
  *((_QWORD *)this + 344) = &unk_1E25B9B60;
  *((_QWORD *)this + 665) = &off_1E25B98F0;
  *(_OWORD *)((char *)this + 5449) = 0u;
  *((_OWORD *)this + 340) = 0u;
  *((_OWORD *)this + 339) = 0u;
  *((_OWORD *)this + 338) = 0u;
  *((_OWORD *)this + 337) = 0u;
  *((_OWORD *)this + 336) = 0u;
  *((_OWORD *)this + 335) = 0u;
  *((_OWORD *)this + 334) = 0u;
  *((_OWORD *)this + 333) = 0u;
  *((_BYTE *)this + 2760) = 0;
  *((_OWORD *)this + 173) = xmmword_18D3197D0;
  *((_QWORD *)this + 348) = 0x40C3880000000000;
  *((_DWORD *)this + 1328) = 0;
  *((_DWORD *)this + 1368) = 10;
  sub_18D0409EC((uint64_t)this + 5480);
  *((_QWORD *)this + 989) = &unk_1E25C2218;
  *((_QWORD *)this + 991) = 0;
  *((_QWORD *)this + 990) = 0;
  *((_BYTE *)this + 7936) = 0;
  *((_QWORD *)this + 994) = 0;
  *((_QWORD *)this + 993) = 0;
  *((_BYTE *)this + 7960) = 0;
  *((_QWORD *)this + 997) = 0;
  *((_QWORD *)this + 996) = 0;
  *((_BYTE *)this + 7984) = 0;
  *((_QWORD *)this + 1000) = 0;
  *((_QWORD *)this + 999) = 0;
  *((_QWORD *)this + 1001) = 0x7FF8000000000000;
  *(_WORD *)this = 0;
  return this;
}

void sub_18D2B8D20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[344] = v2;
  v1[665] = &unk_1E25B9250;
  v1[343] = &unk_1E25B9250;
  v1[2] = v2;
  v1[323] = &unk_1E25B9250;
  _Unwind_Resume(a1);
}

uint64_t raven::RavenPredictor::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  unsigned __int8 v18;
  __int16 v19;

  v8 = *a2;
  if (!*a2 || !*(_BYTE *)(v8 + 33))
  {
    v19 = 12;
    v18 = 4;
    v12 = "RavenPredictor::Configure called with uninitialized parameters.";
    goto LABEL_9;
  }
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v8;
  if (!*(_BYTE *)(v8 + 3656))
  {
    v14 = *(_DWORD *)(v8 + 3652);
    if (v14)
    {
      v19 = 12;
      v18 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "Error: RavenPredictor::Configure() failed to load gravity parameters becasue of invalid model type: %d.", a4, a5, a6, a7, a8, v14);
      return 0xFFFFFFFFLL;
    }
    if (sub_18D18FDF4(a1 + 16, (uint64_t)&unk_18D347350, (uint64_t)&unk_18D34744C, (uint64_t)&unk_18D347548, (uint64_t)&unk_18D347740, (uint64_t)&unk_18D347938, (uint64_t)&unk_18D347B30))
    {
      v19 = 12;
      v18 = 4;
      v12 = "Error: RavenPredictor::Configure() failed to load EGM96 gravity parameters.";
      goto LABEL_9;
    }
LABEL_16:
    *(_DWORD *)(a1 + 2576) = 1;
    v15 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v15 + 3652))
    {
      v19 = 12;
      v18 = 4;
      v12 = "Error: RavenPredictor::Configure() failed to set EGM96 model constants.";
    }
    else
    {
      *(_OWORD *)(a1 + 32) = xmmword_18D3197D0;
      *(_QWORD *)(a1 + 48) = 0x40E86A0000000000;
      v16 = *(_DWORD *)(v15 + 3688);
      if ((v16 - 11) <= 0xFFFFFFF6)
        __assert_rtn("SetTruncationDegree", "sphericalharmonicsgravitymodel.h", 471, "trunc >= 2 && trunc <= max_degree");
      *(_DWORD *)(a1 + 2736) = v16;
      if (*(_BYTE *)(a1 + 24))
      {
        sub_18D1C978C(a1 + 2752, a1 + 16);
        result = 0;
        *(_BYTE *)a1 = 1;
        return result;
      }
      v19 = 12;
      v18 = 4;
      v12 = "Error: RavenPredictor::Configure() gravity parameters are invalid.";
    }
    goto LABEL_9;
  }
  v10 = a1 + 16;
  v11 = (char *)(v8 + 3664);
  if (*(char *)(v8 + 3687) < 0)
    v11 = *(char **)v11;
  if (!sub_18D18FD1C(v10, v11))
    goto LABEL_16;
  v19 = 12;
  v18 = 4;
  v12 = "Error: RavenPredictor::Configure() failed to load gravity parameters from file.";
LABEL_9:
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, v12, a4, a5, a6, a7, a8, v17);
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenPredictor::Reset(uint64_t this)
{
  *(_BYTE *)(this + 1) = 0;
  return this;
}

uint64_t raven::RavenPredictor::IsConfigured(raven::RavenPredictor *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t raven::RavenPredictor::IsInitialized(raven::RavenPredictor *this)
{
  return *((unsigned __int8 *)this + 1);
}

uint64_t raven::RavenPredictor::Predict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  __int128 *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  double v24;
  _BOOL4 v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  double v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  _QWORD *v39;
  int8x16_t v40;
  int8x16_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int8x16_t v57;
  __int128 v58;
  int8x16_t v59;
  __int128 v60;
  char v61;
  double v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  _BYTE v67[56];
  int8x16_t v68;
  int8x16_t v69;
  uint64_t v70;
  __int128 v71;
  void *v72;
  __int128 v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE v76[168];
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  int8x16_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  double v87[4];

  if (!*(_BYTE *)a1)
  {
    LOWORD(v72) = 12;
    v81.i8[0] = 4;
    v28 = "RavenPredictor::Predict() failed. Predictor is not configured.";
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, (unsigned __int8 *)&v81, v28, a4, a5, a6, a7, a8, v61);
    return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(a1 + 1))
  {
    LOWORD(v72) = 12;
    v81.i8[0] = 2;
    v28 = "RavenPredictor::Predict() failed. Predictor is not initialized.";
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a1 + 5688))
  {
    LOWORD(v72) = 12;
    v81.i8[0] = 4;
    v28 = "RavenPredictor::Predict() failed. Current raven estimator type is not initialized.";
    goto LABEL_23;
  }
  if (*(_BYTE *)(a1 + 5689) != 2)
  {
    LOWORD(v72) = 12;
    v81.i8[0] = 2;
    v28 = "RavenPredictor::Predict() failed. Current raven solution is not healthy.";
    goto LABEL_23;
  }
  if (*(_BYTE *)(a1 + 5688) != 4)
  {
    LOWORD(v72) = 12;
    v81.i8[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, (unsigned __int8 *)&v81, "RavenPredictor::Predict() failed. Expected raven estimator type %u, but received %u.", a4, a5, a6, a7, a8, 4);
    return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(a1 + 6744))
  {
    LOWORD(v72) = 12;
    v81.i8[0] = 4;
    v28 = "RavenPredictor::Predict() failed. Current user position is not valid.";
    goto LABEL_23;
  }
  v13 = (__int128 *)(a1 + 6648);
  v14 = CNTimeSpan::operator-(a2, (_QWORD *)(a1 + 6648), a9, a10);
  v23 = v14;
  *(_QWORD *)&v87[0] = v14;
  v87[1] = v15;
  v24 = v15;
  v26 = v15 < 0.0 || v14 < 0;
  *(double *)v21.i64 = v15;
  if (v26)
  {
    v14 = CNTimeSpan::operator-(v87, v21, v22);
    v21.i64[0] = v27;
  }
  *(double *)v21.i64 = *(double *)v21.i64 + (double)v14;
  *(double *)v22.i64 = fabs(*(double *)(*(_QWORD *)(a1 + 8) + 3472));
  if (*(double *)v21.i64 > *(double *)v22.i64)
  {
    LOWORD(v72) = 12;
    v81.i8[0] = 4;
    v62 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, (unsigned __int8 *)&v81, "RavenPredictor::Predict() failed. Exceeded maximum prediction duration. Given input time: %.3lf (s). Current raven solution time: %.3lf (s)", v16, v17, v18, v19, v20, SLOBYTE(v62));
    return 0xFFFFFFFFLL;
  }
  if (v26)
  {
    v23 = CNTimeSpan::operator-(v87, v21, v22);
    v24 = v30;
  }
  if (fabs(v24 + (double)v23) < 2.22044605e-16)
  {
    memcpy((void *)(a3 + 8), (const void *)(a1 + 5488), 0x971uLL);
    return 0;
  }
  sub_18D040C34(a3);
  memcpy((void *)(a3 + 104), (const void *)(a1 + 5584), 0x428uLL);
  memcpy((void *)(a3 + 2032), (const void *)(a1 + 7512), 0x189uLL);
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  *(_QWORD *)&v86 = 0;
  *((_QWORD *)&v86 + 1) = 0x7FF8000000000000;
  v31 = *(int8x16_t *)a2;
  v81 = *(int8x16_t *)a2;
  v82 = 0u;
  if (!*(_BYTE *)(a1 + 7464))
    goto LABEL_32;
  v74 = 0x10000001CLL;
  v72 = &unk_1E25C72B0;
  v73 = xmmword_18D319780;
  v75 = v76;
  v65 = 0x100000002;
  v63 = &unk_1E25C7520;
  v64 = xmmword_18D319330;
  v66 = v67;
  v71 = *v13;
  *(_OWORD *)&v76[152] = *(_OWORD *)(a1 + 7472);
  if (sub_18D1D12F4(a2, &v71, (uint64_t)&v72, (uint64_t)&v63))
  {
    v69.i16[0] = 12;
    v68.i8[0] = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v69, (unsigned __int8 *)&v68, "RavenPNTEstimatorHelper::IntegrateDeviceOscillatorStateEstimate failed to predict clock states in RavenPredictor::Predict().", v32, v33, v34, v35, v36, v61);
LABEL_32:
    *(_OWORD *)(a3 + 1992) = *(_OWORD *)(a1 + 7472);
    v38 = *(int8x16_t *)(a1 + 7488);
    *(int8x16_t *)(a3 + 2008) = v38;
    v38.i64[0] = *(_QWORD *)(a1 + 7504);
    *(_QWORD *)(a3 + 2024) = v38.i64[0];
    raven::PopulateAllTimeFields((uint64_t)&v81, a1 + 7920, v38, v31);
    goto LABEL_34;
  }
  v39 = v66;
  v37.i64[0] = *v66;
  *(_QWORD *)(a3 + 1992) = *v66;
  *(_QWORD *)(a3 + 2000) = v39[1];
  v40 = *(int8x16_t *)(a1 + 7488);
  *(int8x16_t *)(a3 + 2008) = v40;
  *(_QWORD *)(a3 + 2024) = *(_QWORD *)(a1 + 7504);
  *(double *)v40.i64 = sqrt(*(double *)(a1 + 7488));
  v70 = v40.i64[0];
  v68 = 0uLL;
  CNTimeSpan::SetTimeSpan(v68.i64, 0, v37, v40);
  v69 = v68;
  raven::PopulateAllTimeFields((uint64_t)&v81, a1 + 7920, &v69, &v70, v68, v41);
LABEL_34:
  v42 = *(unsigned __int8 *)(a1 + 6824);
  if (*(_BYTE *)(a1 + 6824) && *(_BYTE *)(a1 + 6825))
  {
    v74 = 0x10000001CLL;
    v72 = &unk_1E25C72B0;
    v73 = xmmword_18D319780;
    v75 = v76;
    v65 = 0x100000007;
    v63 = &unk_1E25C81E0;
    v64 = xmmword_18D319810;
    v66 = v67;
    v71 = *v13;
    v77 = *(_OWORD *)(a1 + 6752);
    v78 = *(_QWORD *)(a1 + 6768);
    v79 = *(_OWORD *)(a1 + 6832);
    v80 = *(_OWORD *)(a1 + 6848);
    if (sub_18D1C7D64(a2, &v71, (uint64_t)&v72, 0, (uint64_t)&v63))
    {
      v69.i16[0] = 12;
      v68.i8[0] = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v69, (unsigned __int8 *)&v68, "RavenPNTEstimatorHelper::IntegrateUserStateEstimate failed to predict user states in RavenPredictor::Predict().", v43, v44, v45, v46, v47, v61);
      return 0xFFFFFFFFLL;
    }
    *(_BYTE *)(a3 + 1264) = 1;
    *(_WORD *)(a3 + 1344) = 257;
    v48 = v66;
    *(_QWORD *)(a3 + 1272) = *v66;
    *(_QWORD *)(a3 + 1280) = v48[1];
    *(_QWORD *)(a3 + 1288) = v48[2];
    *(_OWORD *)(a3 + 1296) = *(_OWORD *)(a1 + 6776);
    *(_OWORD *)(a3 + 1312) = *(_OWORD *)(a1 + 6792);
    *(_OWORD *)(a3 + 1328) = *(_OWORD *)(a1 + 6808);
    *(_QWORD *)(a3 + 1352) = v48[3];
    *(_QWORD *)(a3 + 1360) = v48[4];
    *(_QWORD *)(a3 + 1368) = v48[5];
    *(_QWORD *)(a3 + 1376) = v48[6];
    *(_OWORD *)(a3 + 1384) = *(_OWORD *)(a1 + 6864);
    *(_OWORD *)(a3 + 1400) = *(_OWORD *)(a1 + 6880);
    *(_OWORD *)(a3 + 1416) = *(_OWORD *)(a1 + 6896);
    *(_OWORD *)(a3 + 1432) = *(_OWORD *)(a1 + 6912);
    *(_OWORD *)(a3 + 1448) = *(_OWORD *)(a1 + 6928);
  }
  else
  {
    *(_BYTE *)(a3 + 1264) = 1;
    *(_OWORD *)(a3 + 1272) = *(_OWORD *)(a1 + 6752);
    *(_OWORD *)(a3 + 1288) = *(_OWORD *)(a1 + 6768);
    *(_OWORD *)(a3 + 1304) = *(_OWORD *)(a1 + 6784);
    *(_OWORD *)(a3 + 1320) = *(_OWORD *)(a1 + 6800);
    *(_QWORD *)(a3 + 1336) = *(_QWORD *)(a1 + 6816);
    if (v42)
    {
      *(_BYTE *)(a3 + 1344) = 1;
      *(_QWORD *)(a3 + 1352) = *(_QWORD *)(a1 + 6832);
      *(_QWORD *)(a3 + 1384) = *(_QWORD *)(a1 + 6864);
    }
  }
  result = 0;
  v49 = v83;
  v50 = v84;
  v51 = v83;
  v52 = v84;
  *(_OWORD *)(a3 + 40) = v83;
  *(_OWORD *)(a3 + 56) = v50;
  v53 = v85;
  v54 = v86;
  *(_OWORD *)(a3 + 72) = v85;
  *(_OWORD *)(a3 + 1232) = v53;
  v56 = v85;
  v55 = v86;
  *(_OWORD *)(a3 + 88) = v86;
  *(_OWORD *)(a3 + 1200) = v49;
  *(_OWORD *)(a3 + 1216) = v50;
  v57 = v81;
  *(int8x16_t *)(a3 + 8) = v81;
  *(_OWORD *)(a3 + 1248) = v55;
  *(int8x16_t *)(a3 + 1168) = v57;
  v59 = v81;
  v58 = v82;
  v60 = v82;
  *(_OWORD *)(a3 + 24) = v82;
  *(_OWORD *)(a3 + 1184) = v58;
  *(_BYTE *)(a3 + 208) = 5;
  *(_OWORD *)(a3 + 144) = v51;
  *(_OWORD *)(a3 + 160) = v52;
  *(_OWORD *)(a3 + 176) = v56;
  *(_OWORD *)(a3 + 192) = v54;
  *(int8x16_t *)(a3 + 112) = v59;
  *(_OWORD *)(a3 + 128) = v60;
  return result;
}

BOOL raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  int v7;
  double v8;
  __n128 v9;
  uint64_t v10;
  int v11;
  double v12;
  __int128 v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _BYTE v24[8];
  int v25;
  int v26;
  uint64_t v27;

  if (*(_BYTE *)(a2 + 1082))
    return 1;
  v4 = a2 + 200;
  v5 = sub_18D159B20((uint64_t)v24, a2 + 408);
  v6 = v25;
  if (v25 < 1)
  {
    v8 = 0.0;
  }
  else
  {
    v7 = 0;
    v8 = 0.0;
    do
    {
      v8 = v8 + *(double *)(v27 + 8 * v7);
      v7 += v26 + 1;
      --v6;
    }
    while (v6);
    v5.n128_u64[0] = 4.0;
    if (v8 >= 1.0)
      goto LABEL_11;
  }
  v5.n128_u64[0] = 4.0;
  if (fabs(v8) >= 2.22044605e-16)
    v5.n128_f64[0] = 1.0 / v8 * 4.0;
LABEL_11:
  v21 = 0x300000003;
  v19 = &unk_1E25C78E0;
  v20 = xmmword_18D30BB60;
  v22 = &v23;
  sub_18D1C94E0((uint64_t)v24, (uint64_t)&v19, (float64x2_t)v5);
  sub_18D053AA8((uint64_t)v24, (uint64_t)&v19);
  result = cntransformation::CNRigidTransformation::SetPpp(v4, (uint64_t)v24);
  if (!result)
    return result;
  v9 = sub_18D159B20((uint64_t)&v19, a2 + 296);
  v10 = v20;
  if ((int)v20 < 1)
  {
    v12 = 0.0;
    v13 = xmmword_18D30BB60;
    goto LABEL_18;
  }
  v11 = 0;
  v12 = 0.0;
  do
  {
    v12 = v12 + *(double *)&v22[v11];
    v11 += HIDWORD(v20) + 1;
    --v10;
  }
  while (v10);
  v9.n128_u64[0] = 16.0;
  v13 = xmmword_18D30BB60;
  if (v12 < 0.00121846968)
  {
LABEL_18:
    v9.n128_u64[0] = 16.0;
    if (fabs(v12) >= 2.22044605e-16)
      v9.n128_f64[0] = 0.00121846968 / v12 * 16.0;
  }
  v16 = 0x300000003;
  v14 = &unk_1E25C78E0;
  v15 = v13;
  v17 = &v18;
  sub_18D1C94E0((uint64_t)&v19, (uint64_t)&v14, (float64x2_t)v9);
  sub_18D053AA8((uint64_t)&v19, (uint64_t)&v14);
  result = cntransformation::CNRigidTransformation::SetPrr(v4, (uint64_t)&v19);
  if (result)
    *(_BYTE *)(a2 + 1082) = 1;
  return result;
}

double *raven::RavenDeltaVIOEstimateActiveObject::ApplyVIOYawCorrection(double *this, double a2)
{
  double *v3;
  __double2 v4;
  double *v5;
  int v6;
  __int128 v7;
  _OWORD v8[2];
  _BYTE v9[32];
  void *v10;
  __int128 v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;

  if (fabs(a2) > 0.01 && *((_BYTE *)this + 736) != 0)
  {
    v3 = this + 1089;
    v4 = __sincos_stret(a2);
    v12 = 0x300000003;
    v10 = &unk_1E25C78E0;
    v13 = (double *)&v14;
    v11 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v10, 0.0);
    v5 = v13;
    *v13 = v4.__cosval;
    v5[1] = v4.__sinval;
    v6 = HIDWORD(v11);
    v5[SHIDWORD(v11)] = -v4.__sinval;
    v5[v6 + 1] = v4.__cosval;
    v5[2 * v6 + 2] = 1.0;
    sub_18D159244((uint64_t)v9, (uint64_t)&v10);
    this = cnrotation::Cat(v3, (const cnrotation::CNRotation *)v9, (double *)v8);
    if (v3 != (double *)v8)
    {
      v7 = v8[1];
      *(_OWORD *)v3 = v8[0];
      *((_OWORD *)v3 + 1) = v7;
    }
  }
  return this;
}

uint64_t raven::RavenDeltaVIOEstimateActiveObject::ComputeCovarianceFromSigmaCorrelationMatrix(cnprint::CNPrinter *a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  double *v5;
  double *v6;
  int v7;
  int v8;
  double v9;
  double v10;
  double v11;
  unsigned int LogLevel;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *__p[2];
  char v22;
  unsigned __int8 v23;
  __int16 v24;

  v3 = *(_DWORD *)(a2 + 8) == 3 && *(_DWORD *)(a2 + 12) == 3;
  v4 = v3;
  if (v3)
  {
    *(_OWORD *)(a3 + 8) = xmmword_18D30BB60;
    v5 = *(double **)(a2 + 32);
    v6 = *(double **)(a3 + 32);
    *v6 = *v5 * *v5;
    v7 = *(_DWORD *)(a2 + 20);
    v6[4] = v5[v7 + 1] * v5[v7 + 1];
    v8 = 2 * v7 + 2;
    v6[8] = v5[v8] * v5[v8];
    v9 = v5[1] * v5[v7 + 1] * *v5;
    v6[1] = v9;
    v10 = v5[2] * v5[v8] * *v5;
    v6[2] = v10;
    v11 = v5[v7 + 2] * v5[v8] * v5[v7 + 1];
    v6[3] = v9;
    v6[5] = v11;
    v6[6] = v10;
    v6[7] = v11;
  }
  else
  {
    LogLevel = cnprint::CNPrinter::GetLogLevel(a1);
    if (LogLevel <= 1)
    {
      v24 = 12;
      v23 = 1;
      (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
      if (v22 >= 0)
        v19 = __p;
      else
        LOBYTE(v19) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s, Input sigma-correlation matrix has wrong dimensions, expected 3x3", v14, v15, v16, v17, v18, (char)v19);
      if (v22 < 0)
        operator delete(__p[0]);
    }
  }
  return v4;
}

void sub_18D2B9970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenDeltaVIOEstimateActiveObject::ComputeSigmaCorrelationMatrixFromCovariance(cnprint::CNPrinter *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  double *v11;
  double v12;
  double *v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22;
  double v23;
  void *__p[2];
  char v25;
  unsigned __int8 v26;
  __int16 v27;

  if (*(_DWORD *)(a2 + 8) == 3 && *(_DWORD *)(a2 + 12) == 3)
  {
    *(_OWORD *)(a3 + 8) = xmmword_18D30BB60;
    v11 = *(double **)(a2 + 32);
    v12 = sqrt(*v11);
    v13 = *(double **)(a3 + 32);
    *v13 = v12;
    v14 = *(_DWORD *)(a2 + 20);
    v15 = sqrt(v11[v14 + 1]);
    v13[4] = v15;
    v16 = sqrt(v11[2 * v14 + 2]);
    v13[8] = v16;
    if (fabs(v12 * v15) >= 2.22044605e-16)
    {
      v17 = v11[1] / (v12 * v15);
      v13[1] = v17;
      v18 = v12 * v16;
      if (fabs(v18) >= 2.22044605e-16)
      {
        v19 = v11[2] / v18;
        v13[2] = v19;
        v20 = v15 * v16;
        if (fabs(v20) >= 2.22044605e-16)
        {
          v22 = v11[v14 + 2];
          v13[3] = v17;
          v23 = v22 / v20;
          v13[5] = v23;
          v13[6] = v19;
          v13[7] = v23;
          return 1;
        }
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    v27 = 12;
    v26 = 1;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v25 >= 0)
      v10 = __p;
    else
      LOBYTE(v10) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s, Input variance-covariance matrix has wrong dimensions, expected 3x3", v5, v6, v7, v8, v9, (char)v10);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D2B9AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenDeltaVIOEstimateActiveObject::Configure(cnframework::ActiveObjectBase *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v12;
  cnprint::CNPrinter *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  char v33;
  unsigned __int8 v34;
  __int16 v35;

  if (*((_BYTE *)this + 480))
  {
    v35 = 12;
    v34 = 2;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v33 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Warning: %s configured more than once", v4, v5, v6, v7, v8, (char)v9);
    if (v33 < 0)
      operator delete(__p[0]);
  }
  *((_BYTE *)this + 480) = 0;
  v10 = *a2;
  if (!*a2 || !*(_BYTE *)(v10 + 33))
  {
    v35 = 12;
    v34 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v33 >= 0)
      v26 = __p;
    else
      LOBYTE(v26) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s could not be configured - invalid RavenParameters", v21, v22, v23, v24, v25, (char)v26);
    if (v33 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  *((_QWORD *)this + 61) = v10;
  if ((*(_QWORD *)(v10 + 3184) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)(v10 + 3176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && *(double *)(v10 + 3184) < *(double *)(v10 + 3176))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v35) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v35, "#WARNING, Incompatible Raven VIO Parameters, delta_VIO sampling period smaller than VIO estimate period [%.3lf < %.3lf]", v27, v28, v29, v30, v31, *(_QWORD *)(*((_QWORD *)this + 61) + 3184));
    }
    return 0xFFFFFFFFLL;
  }
  cnframework::ActiveObjectBase::SetEventQueueDelay(this, 0.0);
  v12 = *a2;
  *((_QWORD *)this + 1242) = *(_QWORD *)(*a2 + 920);
  *((_QWORD *)this + 1235) = *(_QWORD *)(v12 + 792);
  *((_BYTE *)this + 480) = 1;
  v13 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)this + 48))(this);
  if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
  {
    v35 = 12;
    v34 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(_QWORD *)this + 16))(__p, this);
    if (v33 >= 0)
      v19 = __p;
    else
      LOBYTE(v19) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s configured successfully", v14, v15, v16, v17, v18, (char)v19);
    if (v33 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D2B9D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenDeltaVIOEstimateActiveObject::IsConfigured(raven::RavenDeltaVIOEstimateActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void raven::RavenDeltaVIOEstimateActiveObject::CreateAndRaiseDeltaVIOEstimates(int8x16_t *this, double a2, int8x16_t a3)
{
  unint64_t v3;
  int64x2_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int8x16_t *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  int8x16_t *v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int i;
  void *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD v50[12];
  void *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE v60[128];
  void (**v61)(raven::AttitudeChangeEvent *__hidden);
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  _BYTE v74[32];
  __int128 *v75;
  __int128 v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  char v83[8];
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  _OWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int8x16_t v92[28];
  _OWORD v93[2];

  v3 = this[620].u64[1];
  if (v3 >= 2)
  {
    v5 = (int64x2_t *)&this[618];
    v6 = this[620].u64[0];
    v7 = v3 + v6 - 1;
    v8 = this[618].i64[1];
    v9 = v7 >> 4;
    v10 = v7 & 0xF;
    v93[0] = *(_OWORD *)(*(_QWORD *)(v8 + 8 * (v7 >> 4)) + 1088 * (v7 & 0xF));
    v11 = this + 421;
    if (this[489].i8[0])
    {
      v92[0] = this[421];
      v12 = CNTimeSpan::operator-((uint64_t)v93, v92, v92[0], a3);
      if (v13 + (double)v12 + (v13 + (double)v12) * 0.05 < *(double *)(this[30].i64[1] + 3184))
        return;
      v14 = *(_QWORD *)(v8 + 8 * v9);
    }
    else
    {
      v15 = (int8x16_t *)(*(_QWORD *)(v8 + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 1088 * (v6 & 0xF));
      v92[0] = *v15;
      v16 = CNTimeSpan::operator-((uint64_t)v93, v92, v92[0], a3);
      if (v17 + (double)v16 + (v17 + (double)v16) * 0.05 < *(double *)(this[30].i64[1] + 3184))
        return;
      if (!raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(v16, (uint64_t)v15))
      {
        sub_18D2BA218(v5);
        return;
      }
      v12 = sub_18D2BA2C0((uint64_t)v11, (uint64_t)v15);
      if (!v11[68].i8[0])
        sub_18D164CA0();
      v18 = this[620].i64[1] + this[620].i64[0] - 1;
      v10 = v18 & 0xF;
      v14 = *(_QWORD *)(this[618].i64[1] + ((v18 >> 1) & 0x7FFFFFFFFFFFFFF8));
    }
    v19 = (__int128 *)(v14 + 1088 * v10);
    if (raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(v12, (uint64_t)v19))
    {
      cntransformation::Inv((float64x2_t *)(v14 + 1088 * v10 + 200), (uint64_t)v92);
      cntransformation::Cat((cntransformation *)v92, (const cntransformation::CNRigidTransformation *)&this[433].u64[1], (uint64_t)v88);
      *(_QWORD *)&v74[24] = 0x100000003;
      v61 = &off_1E25C2C08;
      *(_QWORD *)v74 = &unk_1E25C7790;
      *(_OWORD *)&v74[8] = xmmword_18D313070;
      v80 = 0x300000003;
      v75 = &v76;
      v78 = (__int128 *)&unk_1E25C78E0;
      v79 = xmmword_18D30BB60;
      v81 = &v82;
      v20 = *v19;
      v63 = v19[1];
      v62 = v20;
      v21 = v19[2];
      v22 = v19[3];
      v23 = v19[4];
      v67 = v19[5];
      v66 = v23;
      v65 = v22;
      v64 = v21;
      v24 = v11[3];
      v70 = v11[2];
      v71 = v24;
      v25 = v11[5];
      v72 = v11[4];
      v73 = v25;
      v26 = v11[1];
      v68 = *v11;
      v69 = v26;
      v58 = 0x100000003;
      v56 = &unk_1E25C7790;
      v57 = xmmword_18D313070;
      v59 = v60;
      sub_18D054E78((uint64_t)&v89, (uint64_t)&v56);
      sub_18D053AA8((uint64_t)v74, (uint64_t)&v56);
      sub_18D053AA8((uint64_t)&v78, (uint64_t)&v91);
      sub_18D21E58C((uint64_t)this, (uint64_t)&v61);
      cnrotation::CNRotation::dqdr((cnrotation::CNRotation *)v88, (uint64_t)v83);
      v77 = 0x400000004;
      v61 = &off_1E25C2BA8;
      v75 = (__int128 *)&unk_1E25C7FA0;
      v76 = xmmword_18D313080;
      v78 = &v79;
      v27 = *v19;
      v63 = v19[1];
      v62 = v27;
      v28 = v19[2];
      v29 = v19[3];
      v30 = v19[4];
      v67 = v19[5];
      v66 = v30;
      v65 = v29;
      v64 = v28;
      v31 = v11[3];
      v70 = v11[2];
      v71 = v31;
      v32 = v11[5];
      v72 = v11[4];
      v73 = v32;
      v33 = v11[1];
      v68 = *v11;
      v69 = v33;
      *(_OWORD *)v74 = v88[0];
      *(_OWORD *)&v74[16] = v88[1];
      v53 = 0x300000004;
      v51 = &unk_1E25C7F70;
      v52 = xmmword_18D3130A0;
      v54 = &v55;
      sub_18D053B2C((uint64_t)v83, (uint64_t)&v90, (uint64_t)&v51);
      v34 = v85;
      v35 = v84;
      v48 = 0x400000003;
      v43 = &unk_1E25C7940;
      v49 = v50;
      v44 = v85;
      v45 = v84;
      v46 = v84 * v85;
      v47 = v85;
      if (v85)
      {
        v36 = 0;
        v37 = 0;
        v38 = v86;
        v39 = v87;
        do
        {
          v40 = v36;
          v41 = v37;
          for (i = v35; i; --i)
          {
            v50[v41] = *(_QWORD *)(v39 + 8 * v40);
            v41 += v34;
            ++v40;
          }
          ++v37;
          v36 += v38;
        }
        while (v37 != v34);
      }
      v58 = 0x400000004;
      v56 = &unk_1E25C7FA0;
      v57 = xmmword_18D313080;
      v59 = v60;
      sub_18D053B2C((uint64_t)&v51, (uint64_t)&v43, (uint64_t)&v56);
      sub_18D053AA8((uint64_t)&v75, (uint64_t)&v56);
      sub_18D21B938((uint64_t)this, (uint64_t)&v61);
      sub_18D2BA2C0((uint64_t)v11, (uint64_t)v19);
    }
    else
    {
      sub_18D2BA3F4(v5);
    }
  }
}

void sub_18D2BA218(int64x2_t *a1)
{
  void **v1;
  int64x2_t v2;
  _QWORD *v3;

  v1 = (void **)a1->i64[1];
  v2 = vaddq_s64(a1[2], (int64x2_t)xmmword_18D30B1A0);
  v3 = *(char **)((char *)v1 + (((unint64_t)a1[2].i64[0] >> 1) & 0x7FFFFFFFFFFFFFF8))
     + 1088 * (a1[2].i64[0] & 0xF);
  v3[120] = &unk_1E25C5E70;
  v3[106] = &unk_1E25C5E70;
  v3[92] = &unk_1E25C5E70;
  v3[84] = &unk_1E25C5E70;
  v3[65] = &unk_1E25C5E70;
  v3[51] = &unk_1E25C5E70;
  v3[37] = &unk_1E25C5E70;
  v3[29] = &unk_1E25C5E70;
  a1[2] = v2;
  if (v2.i64[0] >= 0x20uLL)
  {
    operator delete(*v1);
    a1->i64[1] += 8;
    a1[2].i64[0] -= 16;
  }
}

uint64_t sub_18D2BA2C0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;

  if (*(_BYTE *)(a1 + 1088))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v5;
    v7 = *(_OWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 96);
    v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v9;
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 96) = v8;
    v10 = *(_OWORD *)(a2 + 144);
    v11 = *(_OWORD *)(a2 + 160);
    v12 = *(_OWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v11;
    *(_OWORD *)(a1 + 176) = v12;
    *(_OWORD *)(a1 + 144) = v10;
    if (a1 != a2)
    {
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    }
    sub_18D053AA8(a1 + 232, a2 + 232);
    sub_18D053AA8(a1 + 296, a2 + 296);
    sub_18D053AA8(a1 + 408, a2 + 408);
    sub_18D053AA8(a1 + 520, a2 + 520);
    *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
    if (a1 != a2)
    {
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
      *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    }
    sub_18D053AA8(a1 + 672, a2 + 672);
    sub_18D053AA8(a1 + 736, a2 + 736);
    sub_18D053AA8(a1 + 848, a2 + 848);
    sub_18D053AA8(a1 + 960, a2 + 960);
    *(_BYTE *)(a1 + 1072) = *(_BYTE *)(a2 + 1072);
    v13 = *(_WORD *)(a2 + 1080);
    *(_BYTE *)(a1 + 1082) = *(_BYTE *)(a2 + 1082);
    *(_WORD *)(a1 + 1080) = v13;
  }
  else
  {
    sub_18D215D54(a1, a2);
    *(_BYTE *)(a1 + 1088) = 1;
  }
  return a1;
}

BOOL sub_18D2BA3F4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[5] - 1;
  v2 = (_QWORD *)(*(_QWORD *)(a1[1] + (((unint64_t)(v1 + a1[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 1088 * (((_DWORD)v1 + *((_DWORD *)a1 + 8)) & 0xF));
  v2[120] = &unk_1E25C5E70;
  v2[106] = &unk_1E25C5E70;
  v2[92] = &unk_1E25C5E70;
  v2[84] = &unk_1E25C5E70;
  v2[65] = &unk_1E25C5E70;
  v2[51] = &unk_1E25C5E70;
  v2[37] = &unk_1E25C5E70;
  v2[29] = &unk_1E25C5E70;
  a1[5] = v1;
  return sub_18D2BE7B4(a1);
}

void raven::RavenDeltaVIOEstimateActiveObject::CreateAndRaisePositionEvent(int8x16_t *this, double a2, int8x16_t a3)
{
  uint64_t v4;
  __int8 *v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[856];
  int8x16_t v66;

  if (this[46].i8[0])
  {
    v4 = this[620].i64[1];
    if (v4)
    {
      v5 = &this[615].i8[8];
      v6 = (int8x16_t *)(*(_QWORD *)(this[618].i64[1]
                                   + (((unint64_t)(v4 + this[620].i64[0] - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                       + 1088 * (((_DWORD)v4 + this[620].i32[0] - 1) & 0xF));
      v7 = *v6;
      v66 = *v6;
      v8 = (int8x16_t *)((char *)this + 9832);
      if (!this[615].i8[8]
        || (v9 = CNTimeSpan::operator-((uint64_t)&v66, &this[614].i64[1], v7, a3),
            v10 + (double)v9 + (v10 + (double)v9) * 0.05 > *(double *)&this[617].i64[1]))
      {
        v11 = sub_18D215D54((uint64_t)&v58, (uint64_t)v6);
        if (raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(v11, (uint64_t)&v58))
        {
          if (this[32].i8[8])
          {
            if (!this[617].i8[0]
              || (v14 = CNTimeSpan::operator-((uint64_t)&v66, (int8x16_t *)this[616].i64, v12, v13),
                  v15 + (double)v14 >= 20.0))
            {
              v50 = 0.0;
              if (raven::RavenDeltaVIOEstimateActiveObject::ShouldApplyVIOYawCorrection((raven::RavenDeltaVIOEstimateActiveObject *)this, &v50))
              {
                v16 = v50;
                raven::RavenDeltaVIOEstimateActiveObject::ApplyVIOYawCorrection((double *)this->i64, v50);
                *(double *)&this[31].i64[1] = v16 + *(double *)&this[31].i64[1];
                v17 = this[617].u8[0];
                this[616] = v66;
                if (!v17)
                  this[617].i8[0] = 1;
              }
            }
          }
          v52 = 0x100000003;
          *(_QWORD *)&v50 = &unk_1E25C7790;
          v51 = xmmword_18D313070;
          v53 = &v54;
          sub_18D0540FC((uint64_t)v65, (uint64_t)&this[603].i64[1], (uint64_t)&v50);
          sub_18D053AA8((uint64_t)v65, (uint64_t)&v50);
          cntransformation::Cat((cntransformation *)&this[544].u64[1], (const cntransformation::CNRigidTransformation *)&v64, (uint64_t)&v50);
          v34 = 15;
          v35 = vdupq_n_s64(0x7FF8000000000000uLL);
          v36 = v35;
          v37 = v35;
          v38 = v35;
          v24 = v60;
          v25 = v61;
          v26 = v62;
          v27 = v63;
          v22 = v58;
          v23 = v59;
          v29 = v59;
          v28 = v58;
          v40 = 0;
          v32 = v62;
          v31 = v61;
          v30 = v60;
          v21 = &unk_1E25C21B8;
          v39 = 0x7FF8000000000000;
          v33 = v63;
          v41 = *v55;
          v42 = v55[1];
          v43 = v55[2];
          v44 = *v57;
          v18 = &v57[v56];
          v45 = *v18;
          v46 = v57[2 * v56];
          v47 = v18[1];
          v19 = &v57[2 * v56];
          v48 = v19[1];
          v49 = v19[2];
          LOBYTE(v40) = 1;
          if (sub_18D20C258((uint64_t)&v21))
            sub_18D20C508((uint64_t)&v21);
          sub_18D21E020((uint64_t)this, (uint64_t)&v21);
          v20 = *v5;
          *v8 = v66;
          if (!v20)
            *v5 = 1;
        }
        else
        {
          sub_18D2BA3F4((int8x16_t *)this[618].i64);
        }
      }
    }
  }
}

uint64_t raven::RavenDeltaVIOEstimateActiveObject::ShouldApplyVIOYawCorrection(raven::RavenDeltaVIOEstimateActiveObject *this, double *a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  double v6;
  double v7;
  long double v8;
  long double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  int v18;
  double v19;
  unsigned int LogLevel;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  float64x2_t *v43;
  float64x2_t v44;
  double v45;

  *a2 = 0.0;
  v4 = *((_BYTE *)this + 584)
    && *((_BYTE *)this + 704)
    && vabdd_f64(*((double *)this + 72), *((double *)this + 87)) < *((double *)this + 87) * 0.1;
  v5 = *((_BYTE *)this + 552)
    && *((_BYTE *)this + 704)
    && vabdd_f64(*((double *)this + 68), *((double *)this + 87)) < *((double *)this + 87) * 0.25;
  v6 = 0.0;
  if (!*((_BYTE *)this + 536))
    goto LABEL_31;
  if (!*((_BYTE *)this + 5616))
    goto LABEL_31;
  if (!*((_BYTE *)this + 4528))
    goto LABEL_31;
  if (!*((_BYTE *)this + 4529))
    goto LABEL_31;
  if (!*((_BYTE *)this + 733))
    goto LABEL_31;
  v7 = *((double *)this + 567);
  v42 = 0x100000003;
  v40 = &unk_1E25C7790;
  v41 = xmmword_18D313070;
  v43 = &v44;
  v44 = vmulq_n_f64(*((float64x2_t *)this + 284), v7);
  v45 = v7 * *((double *)this + 570);
  v37 = 0x100000003;
  v35 = &unk_1E25C7790;
  v36 = xmmword_18D313070;
  v38 = &v39;
  sub_18D053B2C((uint64_t)this + 9720, (uint64_t)&v40, (uint64_t)&v35);
  v8 = *(double *)v38;
  v9 = *((double *)v38 + 1);
  if (hypot(*(long double *)v38, v9) < 1.0 || fabs(v8) <= 0.005 && fabs(v9) <= 0.005)
    goto LABEL_31;
  if (!*((_BYTE *)this + 536))
    sub_18D164CA0();
  v10 = atan2(v8, v9);
  v11 = v10 + 6.28318531;
  if (v10 >= 0.0)
    v11 = v10;
  v12 = *((double *)this + 66);
  v13 = vabdd_f64(v11, v12);
  if (6.28318531 - v13 < v13)
    v13 = 6.28318531 - v13;
  if (v13 < 0.104719755)
  {
    v14 = *((unsigned __int8 *)this + 568);
    if (*((_BYTE *)this + 568))
    {
      v15 = *((double *)this + 70);
      v16 = vabdd_f64(v15, v12);
      v17 = 6.28318531 - v16;
      if (6.28318531 - v16 >= v16)
        v17 = v16;
      v6 = v17;
      if (v12 > v15 || (v14 = 0, v15 > 3.14159265) && v12 < 3.14159265)
      {
        v14 = 0;
        v6 = -v17;
      }
    }
  }
  else
  {
LABEL_31:
    v14 = 1;
  }
  if (!*((_BYTE *)this + 520) || !*((_BYTE *)this + 720) || !*((_BYTE *)this + 584))
    goto LABEL_49;
  v18 = !v4;
  if (*((double *)this + 72) <= 20.0)
    v18 = 1;
  if (((v14 | !v5 | v18) & 1) == 0
    && *((double *)this + 64) > 5.0
    && (v19 = fabs(v6), v19 > 0.034906585)
    && v19 < 0.174532925)
  {
    *a2 = v6;
    LogLevel = cnprint::CNPrinter::GetLogLevel(this);
    result = 1;
    if (LogLevel <= 1)
    {
      LOWORD(v35) = 12;
      v34 = 1;
      (*(void (**)(void **__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 16))(&v40, this);
      if (!*((_BYTE *)this + 584))
        sub_18D164CA0();
      if (v41 >= 0)
        v27 = &v40;
      else
        LOBYTE(v27) = (_BYTE)v40;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s: VIO t,%.3lf VIO yaw correction,%.3lf [deg] detected, distance moved,%.3lf, cross-track distance to passthrough,%.3lf, accum_yaw_corr,%.3lf [deg]", v22, v23, v24, v25, v26, (char)v27);
      if (SHIBYTE(v41) < 0)
        operator delete(v40);
      return 1;
    }
  }
  else
  {
LABEL_49:
    LOWORD(v35) = 12;
    v34 = 2;
    (*(void (**)(void **__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 16))(&v40, this);
    if (v41 >= 0)
      v33 = &v40;
    else
      LOBYTE(v33) = (_BYTE)v40;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s: curr_VIO t,%.3lf VIO yaw correction criteria, distance moved,%.3lf, cross-track distance to passthrough,%.3lf, course difference ,%.3lf, accum_yaw_corr,%.3lf, [deg] flags [%d %d %d %d %d]", v28, v29, v30, v31, v32, (char)v33);
    if (SHIBYTE(v41) < 0)
      operator delete(v40);
    return 0;
  }
  return result;
}

void sub_18D2BAC94(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_BYTE *raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(_BYTE *this, const raven::ARSessionStatusEvent *a2)
{
  _BYTE *v3;
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *__p;
  char v14;
  void *v15[2];
  char v16;
  unsigned __int8 v17;
  __int16 v18;

  if (this[480])
  {
    v3 = this;
    v4 = *((unsigned __int8 *)a2 + 104);
    this[496] = v4;
    if (v4 != 2)
    {
      v18 = 12;
      v17 = 2;
      (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)this + 16))(v15, this);
      v5 = v16;
      v6 = (char)v15[0];
      sub_18D272950((uint64_t)a2, &__p);
      if (v5 >= 0)
        v12 = v15;
      else
        LOBYTE(v12) = v6;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "%s: AR Session is not Running, ARStatus, %s", v7, v8, v9, v10, v11, (char)v12);
      if (v14 < 0)
        operator delete(__p);
      if (v16 < 0)
        operator delete(v15[0]);
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 48))(v3);
    }
  }
  return this;
}

void sub_18D2BADB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2BADE4(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, double *a5)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t *v11;
  __int128 *v12;
  __int128 v13;

  v5 = a2;
  if (a4 != a2)
  {
    v6 = a1;
    v7 = 0xF0F0F0F0F0F0F0F1 * ((a4 - *(_QWORD *)a3) >> 6)
       + 2 * (a3 - (char *)a1)
       + 0xF0F0F0F0F0F0F0FLL * ((a2 - *a1) >> 6);
    if (v7)
    {
      do
      {
        v9 = v7 >> 1;
        v11 = v6;
        v12 = (__int128 *)v5;
        sub_18D2BE740(&v11, v7 >> 1);
        v13 = *v12;
        if (sub_18D03FE4C((double *)&v13, a5))
        {
          v6 = v11;
          v5 = (uint64_t)(v12 + 68);
          v12 = (__int128 *)v5;
          if (v5 - *v11 == 17408)
          {
            v6 = v11 + 1;
            v5 = v11[1];
          }
          v9 = v7 + ~v9;
        }
        v7 = v9;
      }
      while (v9);
    }
  }
  return v5;
}

void raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(raven::RavenDeltaVIOEstimateActiveObject *this, const raven::VIOEstimateEvent *a2, double a3, int8x16_t a4)
{
  __int128 *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  char *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int64_t v54;
  char *v55;
  cnprint::CNPrinter *v56;
  double v57;
  int8x16_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  cnprint::CNPrinter *v66;
  double v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  cnprint::CNPrinter *v71;
  double v72;
  int8x16_t v73;
  double v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  void *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  void *v90;
  void *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void *v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  void *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  int64_t v133;
  void *v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t i;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  unint64_t v156;
  uint64_t v157;
  _BOOL8 v158;
  __int128 v159;
  int8x16_t v160;
  unint64_t v161;
  _BOOL8 v162;
  int8x16_t v163;
  int v164;
  void *v165;
  void *v166;
  int8x16_t v167;
  int8x16_t v168;
  uint64_t v169;
  double v170;
  uint64_t v171;
  double v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  void *v182;
  char *v183;
  void *v184[2];
  char v185;
  unsigned __int8 v186;
  __int16 v187;
  void *__p[2];
  char v189;

  if (!*((_BYTE *)this + 480))
    return;
  if (*((_BYTE *)a2 + 1184))
  {
    if (*((_BYTE *)a2 + 296) == 1)
    {
      v6 = (__int128 *)((char *)a2 + 104);
      v7 = (_QWORD *)((char *)this + 9888);
      v8 = *((_QWORD *)this + 1241);
      if (v8)
      {
        v9 = *((_QWORD *)a2 + 13);
        v10 = v8 + *((_QWORD *)this + 1240) - 1;
        v11 = *(_QWORD *)(*((_QWORD *)this + 1237) + ((v10 >> 1) & 0x7FFFFFFFFFFFFFF8));
        v12 = *((double *)a2 + 14);
        v13 = v10 & 0xF;
        v14 = (uint64_t *)(v11 + 1088 * v13);
        v15 = *v14;
        a4.i64[0] = v14[1];
        if ((v9 || (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && (!v15 ? (v16 = (a4.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (v16 = 1), v16 && v9 != v15))
        {
          if (v9 < v15)
          {
LABEL_14:
            if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
            {
              LOWORD(v184[0]) = 12;
              LOBYTE(v187) = 1;
              (*(void (**)(void **__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 16))(__p, this);
              if (v189 >= 0)
                v22 = __p;
              else
                LOBYTE(v22) = __p[0];
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v184, (unsigned __int8 *)&v187, "%s, Current VIO estimate's Time %.3lf is before the previous VIO estimate %.3lf", v17, v18, v19, v20, v21, (char)v22);
              if (v189 < 0)
                operator delete(__p[0]);
            }
            goto LABEL_76;
          }
        }
        else if (v12 < *(double *)a4.i64)
        {
          goto LABEL_14;
        }
        *(_OWORD *)__p = *(_OWORD *)((char *)a2 + 200);
        *(_OWORD *)v184 = *(_OWORD *)(v11 + 1088 * v13 + 96);
        v56 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)__p, v184, *(int8x16_t *)v184, a4);
        v58.i64[0] = 0x3CB0000000000000;
        if (fabs(v57 + (double)(uint64_t)v56) < 2.22044605e-16)
        {
          v37 = (char *)this + 488;
          goto LABEL_57;
        }
        if (cnprint::CNPrinter::GetLogLevel(v56) <= 1)
        {
          LOWORD(v184[0]) = 12;
          LOBYTE(v187) = 1;
          (*(void (**)(void **__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this
                                                                                                  + 16))(__p, this);
          if (v189 >= 0)
            v64 = __p;
          else
            LOBYTE(v64) = __p[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v184, (unsigned __int8 *)&v187, "%s, VIO estimate session start time changed, possible change in VIO reference frame, time, current VIO %.3lf previous VIO %.3lf", v59, v60, v61, v62, v63, (char)v64);
          if (v189 < 0)
            operator delete(__p[0]);
        }
        (*(void (**)(raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 48))(this);
        v8 = *((_QWORD *)this + 1241);
        v37 = (char *)this + 488;
        if (v8)
        {
LABEL_57:
          v65 = *(_QWORD *)(*((_QWORD *)this + 61) + 3184);
          v66 = (cnprint::CNPrinter *)*((_QWORD *)a2 + 13);
          v67 = *((double *)a2 + 14);
          *(_OWORD *)__p = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 1237)
                                                 + (((unint64_t)(v8 + *((_QWORD *)this + 1240) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                                     + 1088 * (((_DWORD)v8 + *((_DWORD *)this + 2480) - 1) & 0xF));
          v68.i64[1] = (uint64_t)__p[1];
          v184[0] = 0;
          v184[1] = 0;
          v68.i64[0] = v65;
          CNTimeSpan::SetTimeSpan((uint64_t *)v184, 0, v68, v58);
          v71 = (cnprint::CNPrinter *)CNTimeSpan::operator+((uint64_t)__p, v184, v69, v70);
          v74 = v72;
          if (!v66 && (*(_QWORD *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
            || !v71 && (*(_QWORD *)&v72 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
            || (v75 = (uint64_t)v66 <= (uint64_t)v71, v66 == v71))
          {
            v75 = v67 <= v72;
          }
          if (v75)
            goto LABEL_71;
          if (cnprint::CNPrinter::GetLogLevel(v71) <= 1)
          {
            LOWORD(v184[0]) = 12;
            LOBYTE(v187) = 1;
            (*(void (**)(void **__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 16))(__p, this);
            if (v189 >= 0)
              v81 = __p;
            else
              LOBYTE(v81) = __p[0];
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v184, (unsigned __int8 *)&v187, "%s, Large gap in incoming VIO estimate, time, current VIO %.3lf previous VIO %.3lf, gap tolerance, %.3lf", v76, v77, v78, v79, v80, (char)v81);
            if (v189 < 0)
              operator delete(__p[0]);
          }
          (*(void (**)(raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 48))(this);
          v38 = *((_QWORD *)this + 1241);
          if (v38)
          {
LABEL_71:
            if ((raven::RavenDeltaVIOEstimateActiveObject::IsVIOPositionConsistent(this, (uint64_t)a2 + 104, v74, v73) & 1) == 0)
            {
LABEL_76:
              (*(void (**)(raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 48))(this);
              return;
            }
            v38 = *((_QWORD *)this + 1241);
            if (v38 >= 0x19)
            {
              v82 = (v38 - 24);
              if ((int)v82 >= 1)
              {
                v83 = *((_QWORD *)this + 1237);
                v84 = *((_QWORD *)this + 1240);
                v85 = (char *)(v83 + 8 * (v84 >> 4));
                if (*((_QWORD *)this + 1238) == v83)
                  v86 = 0;
                else
                  v86 = (void *)(*(_QWORD *)v85 + 1088 * (*((_QWORD *)this + 1240) & 0xFLL));
                __p[0] = (void *)(v83 + 8 * (v84 >> 4));
                __p[1] = v86;
                sub_18D2BE740((uint64_t **)__p, v82);
                sub_18D2BC0D0((_QWORD *)this + 1236, v85, (char *)v86, (char *)__p[0], (char *)__p[1]);
                v38 = *((_QWORD *)this + 1241);
              }
            }
          }
LABEL_34:
          v39 = (char *)*((_QWORD *)this + 1238);
          v40 = (char *)*((_QWORD *)this + 1237);
          v41 = v39 - v40;
          if (v39 == v40)
            v42 = 0;
          else
            v42 = 2 * (v39 - v40) - 1;
          v43 = *((_QWORD *)this + 1240);
          if (v42 != v38 + v43)
            goto LABEL_145;
          if (v43 < 0x10)
          {
            v183 = v37;
            v87 = v41 >> 3;
            v88 = (char *)*((_QWORD *)this + 1239);
            v89 = (char *)*((_QWORD *)this + 1236);
            if (v41 >> 3 >= (unint64_t)((v88 - v89) >> 3))
            {
              if (v88 == v89)
                v92 = 1;
              else
                v92 = (v88 - v89) >> 2;
              v93 = (char *)sub_18D07BF3C(v92);
              v95 = v94;
              v96 = operator new(0x4400uLL);
              v97 = &v93[8 * v87];
              v98 = &v93[8 * v95];
              if (v87 == v95)
              {
                v99 = 8 * v87;
                if (v41 < 1)
                {
                  v134 = v96;
                  v135 = v99 >> 2;
                  if (v39 == v40)
                    v136 = 1;
                  else
                    v136 = v135;
                  v137 = (char *)sub_18D07BF3C(v136);
                  v97 = &v137[8 * (v136 >> 2)];
                  v98 = &v137[8 * v138];
                  if (v93)
                    operator delete(v93);
                  v93 = v137;
                  v96 = v134;
                }
                else
                {
                  v100 = v99 >> 3;
                  if (v100 >= -1)
                    v101 = v100 + 1;
                  else
                    v101 = v100 + 2;
                  v97 -= 8 * (v101 >> 1);
                }
              }
              *(_QWORD *)v97 = v96;
              v39 = v97 + 8;
              for (i = *((_QWORD *)this + 1238); i != *((_QWORD *)this + 1237); i -= 8)
              {
                if (v97 == v93)
                {
                  if (v39 >= v98)
                  {
                    if (v98 == v93)
                      v144 = 1;
                    else
                      v144 = (v98 - v93) >> 2;
                    v145 = (char *)sub_18D07BF3C(v144);
                    v147 = v145;
                    v97 = &v145[(2 * v144 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v149 = v39 - v93;
                    v148 = v39 == v93;
                    v39 = v97;
                    if (!v148)
                    {
                      v39 = &v97[v149 & 0xFFFFFFFFFFFFFFF8];
                      v150 = 8 * (v149 >> 3);
                      v151 = v97;
                      v152 = v93;
                      do
                      {
                        v153 = *(_QWORD *)v152;
                        v152 += 8;
                        *(_QWORD *)v151 = v153;
                        v151 += 8;
                        v150 -= 8;
                      }
                      while (v150);
                    }
                    v98 = &v145[8 * v146];
                    if (v93)
                      operator delete(v93);
                    v93 = v147;
                  }
                  else
                  {
                    v140 = (v98 - v39) >> 3;
                    if (v140 >= -1)
                      v141 = v140 + 1;
                    else
                      v141 = v140 + 2;
                    v142 = v141 >> 1;
                    v97 = &v93[8 * (v141 >> 1)];
                    v143 = v93;
                    if (v39 != v93)
                    {
                      memmove(v97, v93, v39 - v93);
                      v143 = v39;
                    }
                    v39 = &v143[8 * v142];
                  }
                }
                v154 = *(_QWORD *)(i - 8);
                *((_QWORD *)v97 - 1) = v154;
                v97 -= 8;
              }
              v155 = (void *)*((_QWORD *)this + 1236);
              *((_QWORD *)this + 1236) = v93;
              *((_QWORD *)this + 1237) = v97;
              *((_QWORD *)this + 1238) = v39;
              *((_QWORD *)this + 1239) = v98;
              v37 = v183;
              v6 = (__int128 *)((char *)a2 + 104);
              if (v155)
              {
                operator delete(v155);
                v39 = (char *)*((_QWORD *)this + 1238);
              }
              goto LABEL_144;
            }
            v90 = operator new(0x4400uLL);
            v91 = v90;
            if (v88 != v39)
            {
              *(_QWORD *)v39 = v90;
              v39 = (char *)(*((_QWORD *)this + 1238) + 8);
              *((_QWORD *)this + 1238) = v39;
              v37 = v183;
              v6 = (__int128 *)((char *)a2 + 104);
LABEL_144:
              v40 = (char *)*((_QWORD *)this + 1237);
LABEL_145:
              if (v39 == v40)
              {
                v157 = 0;
              }
              else
              {
                v156 = *((_QWORD *)this + 1241) + *((_QWORD *)this + 1240);
                v157 = *(_QWORD *)&v40[(v156 >> 1) & 0x7FFFFFFFFFFFFFF8] + 1088 * (v156 & 0xF);
              }
              sub_18D215D54(v157, (uint64_t)v6);
              ++*((_QWORD *)this + 1241);
              if (*((_BYTE *)this + 608))
              {
                *(_OWORD *)__p = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 1237)
                                                       + ((*((_QWORD *)this + 1240) >> 1) & 0x7FFFFFFFFFFFFFF8))
                                           + 1088 * (*((_QWORD *)this + 1240) & 0xFLL));
                v158 = sub_18D03F608((double *)__p, (double *)this + 74);
                if (v158)
                {
                  v161 = *((_QWORD *)this + 1241) + *((_QWORD *)this + 1240) - 1;
                  v162 = raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(v158, *(_QWORD *)(*((_QWORD *)this + 1237) + ((v161 >> 1) & 0x7FFFFFFFFFFFFFF8))+ 1088 * (v161 & 0xF));
                  if (v162
                    && raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(v162, *(_QWORD *)(*((_QWORD *)this + 1237) + ((*((_QWORD *)this + 1240) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 1088 * (*((_QWORD *)this + 1240) & 0xFLL)))
                  {
                    raven::RavenDeltaVIOEstimateActiveObject::VIOUserCourseTurnDetection((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 1237)+ (((unint64_t)(*((_QWORD *)this + 1241) + *((_QWORD *)this + 1240) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 1088 * ((*((_DWORD *)this + 2482) + *((_QWORD *)this + 1240) - 1) & 0xF), *(_QWORD *)(*((_QWORD *)this + 1237) + ((*((_QWORD *)this + 1240) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 1088 * (*((_QWORD *)this + 1240) & 0xFLL), v163, v160);
                  }
                  v164 = *((unsigned __int8 *)this + 608);
                  v159 = *v6;
                  *((_OWORD *)this + 37) = *v6;
                  if (!v164)
                    *((_BYTE *)this + 608) = 1;
                }
              }
              else
              {
                *((_OWORD *)this + 37) = *(_OWORD *)((char *)a2 + 104);
                *((_BYTE *)this + 608) = 1;
                *(_QWORD *)&v159 = sub_18D053AA8((uint64_t)this + 632, (uint64_t)a2 + 336).n128_u64[0];
              }
              if (*((_BYTE *)this + 736)
                || *((_BYTE *)this + 6728)
                && (*(_OWORD *)__p = *((_OWORD *)this + 358),
                    *(_OWORD *)v184 = *v6,
                    v171 = CNTimeSpan::operator-((uint64_t)__p, v184, *(int8x16_t *)v184, v160),
                    v160.i64[0] = *(_QWORD *)(*((_QWORD *)this + 61) + 3184),
                    *(double *)&v159 = fabs(v172 + (double)v171),
                    *(double *)&v159 <= *(double *)v160.i64)
                && (raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(this, (raven::RavenDeltaVIOEstimateActiveObject *)((char *)this + 5624)), *((_BYTE *)this + 736)))
              {
                if (!*((_BYTE *)this + 6728))
                  goto LABEL_160;
                __p[0] = (void *)(*(uint64_t (**)(const raven::VIOEstimateEvent *))(*(_QWORD *)a2 + 16))(a2);
                __p[1] = v165;
                if (!*((_BYTE *)this + 6728))
                  sub_18D164CA0();
                v184[0] = (void *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 703) + 16))((char *)this + 5624);
                v184[1] = v166;
                v169 = CNTimeSpan::operator-((uint64_t)__p, v184, v167, v168);
                *(double *)&v159 = v170 + (double)v169;
                v160.i64[0] = *((_QWORD *)this + 1235);
                if (*(double *)&v159 >= *(double *)v160.i64)
LABEL_160:
                  raven::RavenDeltaVIOEstimateActiveObject::CreateAndRaisePositionEvent((int8x16_t *)this, *(double *)&v159, v160);
              }
              if (*(_BYTE *)(*(_QWORD *)v37 + 3804) || *(_BYTE *)(*(_QWORD *)v37 + 3789))
                raven::RavenDeltaVIOEstimateActiveObject::CreateAndRaiseDeltaVIOEstimates((int8x16_t *)this, *(double *)&v159, v160);
              return;
            }
            if (v40 == v89)
            {
              if (v39 == v40)
                v112 = 1;
              else
                v112 = (v88 - v40) >> 2;
              v113 = 2 * v112;
              v114 = (char *)sub_18D07BF3C(v112);
              v40 = &v114[(v113 + 6) & 0xFFFFFFFFFFFFFFF8];
              v116 = (uint64_t *)*((_QWORD *)this + 1237);
              v117 = v40;
              v118 = *((_QWORD *)this + 1238) - (_QWORD)v116;
              if (v118)
              {
                v117 = &v40[v118 & 0xFFFFFFFFFFFFFFF8];
                v119 = 8 * (v118 >> 3);
                v120 = &v114[(v113 + 6) & 0xFFFFFFFFFFFFFFF8];
                do
                {
                  v121 = *v116++;
                  *(_QWORD *)v120 = v121;
                  v120 += 8;
                  v119 -= 8;
                }
                while (v119);
              }
              v122 = (void *)*((_QWORD *)this + 1236);
              *((_QWORD *)this + 1236) = v114;
              *((_QWORD *)this + 1237) = v40;
              *((_QWORD *)this + 1238) = v117;
              *((_QWORD *)this + 1239) = &v114[8 * v115];
              if (v122)
              {
                operator delete(v122);
                v40 = (char *)*((_QWORD *)this + 1237);
              }
            }
            *((_QWORD *)v40 - 1) = v91;
            v123 = (char *)*((_QWORD *)this + 1237);
            *((_QWORD *)this + 1237) = v123 - 8;
            v124 = *((_QWORD *)v123 - 1);
            *((_QWORD *)this + 1237) = v123;
            v125 = (char *)*((_QWORD *)this + 1238);
            v37 = v183;
            v6 = (__int128 *)((char *)a2 + 104);
            if (v125 == *((char **)this + 1239))
            {
              v126 = (uint64_t)&v123[-*v7];
              if ((unint64_t)v123 <= *v7)
              {
                if (v125 == (char *)*v7)
                  v173 = 1;
                else
                  v173 = (uint64_t)&v125[-*v7] >> 2;
                v174 = (char *)sub_18D07BF3C(v173);
                v176 = &v174[8 * (v173 >> 2)];
                v177 = (uint64_t *)*((_QWORD *)this + 1237);
                v125 = v176;
                v178 = *((_QWORD *)this + 1238) - (_QWORD)v177;
                if (v178)
                {
                  v125 = &v176[v178 & 0xFFFFFFFFFFFFFFF8];
                  v179 = 8 * (v178 >> 3);
                  v180 = &v174[8 * (v173 >> 2)];
                  do
                  {
                    v181 = *v177++;
                    *(_QWORD *)v180 = v181;
                    v180 += 8;
                    v179 -= 8;
                  }
                  while (v179);
                }
                v182 = (void *)*((_QWORD *)this + 1236);
                *((_QWORD *)this + 1236) = v174;
                *((_QWORD *)this + 1237) = v176;
                *((_QWORD *)this + 1238) = v125;
                *((_QWORD *)this + 1239) = &v174[8 * v175];
                if (v182)
                {
                  operator delete(v182);
                  v125 = (char *)*((_QWORD *)this + 1238);
                }
              }
              else
              {
                v127 = v126 >> 3;
                v16 = v126 >> 3 < -1;
                v128 = (v126 >> 3) + 2;
                if (v16)
                  v129 = v128;
                else
                  v129 = v127 + 1;
                v130 = -(v129 >> 1);
                v131 = v129 >> 1;
                v132 = &v123[-8 * v131];
                v133 = v125 - v123;
                if (v125 != v123)
                {
                  memmove(&v123[-8 * v131], v123, v125 - v123);
                  v123 = (char *)*((_QWORD *)this + 1237);
                }
                v125 = &v132[v133];
                *((_QWORD *)this + 1238) = &v132[v133];
                *((_QWORD *)this + 1237) = &v123[8 * v130];
              }
            }
            *(_QWORD *)v125 = v124;
          }
          else
          {
            *((_QWORD *)this + 1240) = v43 - 16;
            v46 = *(_QWORD *)v40;
            v44 = v40 + 8;
            v45 = v46;
            *((_QWORD *)this + 1237) = v44;
            if (v39 == *((char **)this + 1239))
            {
              v47 = (uint64_t)&v44[-*v7];
              if ((unint64_t)v44 <= *v7)
              {
                if (v39 == (char *)*v7)
                  v102 = 1;
                else
                  v102 = (uint64_t)&v39[-*v7] >> 2;
                v103 = (char *)sub_18D07BF3C(v102);
                v105 = &v103[8 * (v102 >> 2)];
                v106 = (uint64_t *)*((_QWORD *)this + 1237);
                v39 = v105;
                v107 = *((_QWORD *)this + 1238) - (_QWORD)v106;
                if (v107)
                {
                  v39 = &v105[v107 & 0xFFFFFFFFFFFFFFF8];
                  v108 = 8 * (v107 >> 3);
                  v109 = &v103[8 * (v102 >> 2)];
                  do
                  {
                    v110 = *v106++;
                    *(_QWORD *)v109 = v110;
                    v109 += 8;
                    v108 -= 8;
                  }
                  while (v108);
                }
                v111 = (void *)*((_QWORD *)this + 1236);
                *((_QWORD *)this + 1236) = v103;
                *((_QWORD *)this + 1237) = v105;
                *((_QWORD *)this + 1238) = v39;
                *((_QWORD *)this + 1239) = &v103[8 * v104];
                if (v111)
                {
                  operator delete(v111);
                  v39 = (char *)*((_QWORD *)this + 1238);
                }
              }
              else
              {
                v48 = v47 >> 3;
                v16 = v47 >> 3 < -1;
                v49 = (v47 >> 3) + 2;
                if (v16)
                  v50 = v49;
                else
                  v50 = v48 + 1;
                v51 = -(v50 >> 1);
                v52 = v50 >> 1;
                v53 = &v44[-8 * v52];
                v54 = v39 - v44;
                if (v39 != v44)
                {
                  memmove(&v44[-8 * v52], v44, v39 - v44);
                  v39 = (char *)*((_QWORD *)this + 1237);
                }
                v55 = &v39[8 * v51];
                v39 = &v53[v54];
                *((_QWORD *)this + 1238) = &v53[v54];
                *((_QWORD *)this + 1237) = v55;
              }
            }
            *(_QWORD *)v39 = v45;
          }
          v39 = (char *)(*((_QWORD *)this + 1238) + 8);
          *((_QWORD *)this + 1238) = v39;
          goto LABEL_144;
        }
      }
      else
      {
        v37 = (char *)this + 488;
      }
      v38 = 0;
      goto LABEL_34;
    }
    if (cnprint::CNPrinter::GetLogLevel(this) > 1)
      return;
    v187 = 12;
    v186 = 1;
    (*(void (**)(void **__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 16))(__p, this);
    v29 = v189;
    v30 = (char)__p[0];
    sub_18D0778AC(v184, off_1E25CD7A8[*((char *)a2 + 296)]);
    if (v29 >= 0)
      v36 = __p;
    else
      LOBYTE(v36) = v30;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v187, &v186, "%s, Current VIO estimate is not in Nominal Tracking State [Status: %s]", v31, v32, v33, v34, v35, (char)v36);
    if (v185 < 0)
      operator delete(v184[0]);
  }
  else
  {
    LOWORD(v184[0]) = 12;
    LOBYTE(v187) = 2;
    (*(void (**)(void **__return_ptr, raven::RavenDeltaVIOEstimateActiveObject *))(*(_QWORD *)this + 16))(__p, this);
    if (v189 >= 0)
      v28 = __p;
    else
      LOBYTE(v28) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v184, (unsigned __int8 *)&v187, "%s, Current VIO estimate of IMU pose is not Valid.", v23, v24, v25, v26, v27, (char)v28);
  }
  if (v189 < 0)
    operator delete(__p[0]);
}

void sub_18D2BBBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;

  operator delete(v27);
  if (v28)
    operator delete(v28);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenDeltaVIOEstimateActiveObject::IsVIOPositionConsistent(_QWORD *a1, uint64_t a2, double a3, int8x16_t a4)
{
  uint64_t v4;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  double v10;
  double v11;
  cnprint::CNPrinter *v12;
  double v13;
  double v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *v23;
  unint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  cnprint::CNPrinter *v29;
  double v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  void *__p[2];
  char v39;
  unsigned __int8 v40;
  __int16 v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE v52[24];
  uint64_t v53;
  _BYTE *v54;
  _BYTE v55[2472];
  _BYTE v56[24];
  uint64_t v57;
  _BYTE *v58;
  _BYTE v59[40];

  v4 = a1[1241];
  if (!v4)
    return 1;
  v7 = a2 + 232;
  *(_OWORD *)v52 = *(_OWORD *)a2;
  v8 = (_OWORD *)(*(_QWORD *)(a1[1237] + (((unint64_t)(v4 + a1[1240] - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 1088 * (((_DWORD)v4 + *((_DWORD *)a1 + 2480) - 1) & 0xF));
  *(_OWORD *)v56 = *v8;
  v9 = CNTimeSpan::operator-((uint64_t)v52, v56, *(int8x16_t *)v56, a4);
  v11 = v10;
  v44 = 0x100000003;
  v42 = &unk_1E25C7790;
  v43 = xmmword_18D313070;
  v45 = &v46;
  sub_18D0540FC(v7, (uint64_t)v8 + 232, (uint64_t)&v42);
  v57 = 0x100000003;
  *(_QWORD *)v56 = &unk_1E25C7790;
  *(_OWORD *)&v56[8] = xmmword_18D313070;
  v58 = v59;
  v53 = 0x100000134;
  *(_QWORD *)v52 = &unk_1E25C7640;
  *(_OWORD *)&v52[8] = xmmword_18D3130C0;
  v54 = v55;
  v49 = 0x100000003;
  v47 = &unk_1E25C7790;
  v48 = xmmword_18D313070;
  v50 = v51;
  sub_18D159EE0((uint64_t)&v42, (uint64_t)v56, (uint64_t)v52, (uint64_t)&v47, "2");
  v13 = fabs((v11 + (double)v9) * 2.5) * 3.0;
  if (v14 <= v13)
  {
    if (*(_BYTE *)(a2 + 1081))
    {
      v24 = a1[1241] + a1[1240] - 1;
      if (*(_BYTE *)(*(_QWORD *)(a1[1237] + ((v24 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 1088 * (v24 & 0xF) + 1081))
      {
        v57 = 0x100000003;
        *(_QWORD *)v56 = &unk_1E25C7790;
        *(_OWORD *)&v56[8] = xmmword_18D313070;
        v58 = v59;
        v53 = 0x100000134;
        *(_QWORD *)v52 = &unk_1E25C7640;
        *(_OWORD *)&v52[8] = xmmword_18D3130C0;
        v54 = v55;
        v49 = 0x100000003;
        v47 = &unk_1E25C7790;
        v48 = xmmword_18D313070;
        v50 = v51;
        sub_18D159EE0(a2 + 672, (uint64_t)v56, (uint64_t)v52, (uint64_t)&v47, "2");
        v26 = v25;
        v27 = a1[1241] + a1[1240] - 1;
        v28 = *(_QWORD *)(a1[1237] + ((v27 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 1088 * (v27 & 0xF);
        v57 = 0x100000003;
        *(_QWORD *)v56 = &unk_1E25C7790;
        *(_OWORD *)&v56[8] = xmmword_18D313070;
        v58 = v59;
        v53 = 0x100000134;
        *(_QWORD *)v52 = &unk_1E25C7640;
        *(_OWORD *)&v52[8] = xmmword_18D3130C0;
        v54 = v55;
        v49 = 0x100000003;
        v47 = &unk_1E25C7790;
        v48 = xmmword_18D313070;
        v50 = v51;
        sub_18D159EE0(v28 + 672, (uint64_t)v56, (uint64_t)v52, (uint64_t)&v47, "2");
        if (vabdd_f64(v26, v30) > v13)
        {
          if (cnprint::CNPrinter::GetLogLevel(v29) > 1)
            return 0;
          *(_WORD *)v56 = 12;
          LOBYTE(v47) = 1;
          (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 16))(v52, a1);
          if (v52[23] >= 0)
            v37 = v52;
          else
            LOBYTE(v37) = v52[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v56, (unsigned __int8 *)&v47, "%s, Device position jump in ARKit camera frame for the incoming VIO estimate, t current VIO %.3lf delta-time,%.3lf, distance moved,%.3lf > %.3lf", v32, v33, v34, v35, v36, (char)v37);
          if ((v52[23] & 0x80000000) == 0)
            return 0;
          v23 = *(void **)v52;
          goto LABEL_8;
        }
      }
    }
    return 1;
  }
  if (cnprint::CNPrinter::GetLogLevel(v12) > 1)
    return 0;
  v41 = 12;
  v40 = 1;
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 16))(__p, a1);
  v15 = v39;
  v16 = (char)__p[0];
  v57 = 0x100000003;
  *(_QWORD *)v56 = &unk_1E25C7790;
  *(_OWORD *)&v56[8] = xmmword_18D313070;
  v58 = v59;
  v53 = 0x100000134;
  *(_QWORD *)v52 = &unk_1E25C7640;
  *(_OWORD *)&v52[8] = xmmword_18D3130C0;
  v54 = v55;
  v49 = 0x100000003;
  v47 = &unk_1E25C7790;
  v48 = xmmword_18D313070;
  v50 = v51;
  sub_18D159EE0((uint64_t)&v42, (uint64_t)v56, (uint64_t)v52, (uint64_t)&v47, "2");
  v22 = __p;
  if (v15 < 0)
    LOBYTE(v22) = v16;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, &v40, "%s, IMU position jump in incoming VIO estimate, t current VIO %.3lf delta-time,%.3lf, distance moved,%.3lf > %.3lf", v17, v18, v19, v20, v21, (char)v22);
  if ((v39 & 0x80000000) == 0)
    return 0;
  v23 = __p[0];
LABEL_8:
  operator delete(v23);
  return 0;
}

void sub_18D2BC094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_18D2BC0D0(_QWORD *a1, char *a2, char *a3, char *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  void **v8;
  void **v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *i;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t j;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&a5[-*(_QWORD *)a4] >> 6)
       + 2 * (a4 - a2)
       + 0xF0F0F0F0F0F0F0FLL * ((uint64_t)&a3[-*(_QWORD *)a2] >> 6);
  v7 = a1[4];
  v9 = (void **)a1[1];
  v8 = (void **)a1[2];
  v10 = (uint64_t *)&v9[v7 >> 4];
  if (v8 == v9)
    v11 = 0;
  else
    v11 = (char *)(*v10 + 1088 * (a1[4] & 0xFLL));
  if (a3 == v11)
    v12 = 0;
  else
    v12 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&a3[-*(_QWORD *)a2] >> 6)
        + 2 * (a2 - (char *)v10)
        + 0xF0F0F0F0F0F0F0FLL * ((uint64_t)&v11[-*v10] >> 6);
  v48 = (uint64_t *)&v9[v7 >> 4];
  v49 = v11;
  sub_18D2BE740(&v48, v12);
  if (v6 >= 1)
  {
    v13 = v12;
    v14 = v48;
    v15 = v49;
    v16 = a1[5];
    if (v13 <= (unint64_t)(v16 - v6) >> 1)
    {
      v21 = v13;
      sub_18D2BE740(&v48, v6);
      v22 = v48;
      i = v49;
      if (v10 == v14)
      {
        v28 = (uint64_t)v11;
        v27 = (uint64_t)v15;
      }
      else
      {
        v25 = *v14;
        v24 = v14 - 1;
        sub_18D2BE818(&v48, v25, (uint64_t)v15, v48, (uint64_t)v49);
        v22 = (uint64_t *)v49;
        for (i = v50; v24 != v10; i = v50)
        {
          v26 = *v24--;
          sub_18D2BE818(&v48, v26, v26 + 17408, v22, (uint64_t)i);
          v22 = (uint64_t *)v49;
        }
        v27 = *v10 + 17408;
        v28 = (uint64_t)v11;
      }
      sub_18D2BE818(&v48, v28, v27, v22, (uint64_t)i);
      v34 = v50;
      v12 = v21;
      if (v11 != v50)
      {
        v35 = (char *)*v10;
        do
        {
          *((_QWORD *)v11 + 120) = &unk_1E25C5E70;
          *((_QWORD *)v11 + 106) = &unk_1E25C5E70;
          *((_QWORD *)v11 + 92) = &unk_1E25C5E70;
          *((_QWORD *)v11 + 84) = &unk_1E25C5E70;
          *((_QWORD *)v11 + 65) = &unk_1E25C5E70;
          *((_QWORD *)v11 + 51) = &unk_1E25C5E70;
          *((_QWORD *)v11 + 37) = &unk_1E25C5E70;
          *((_QWORD *)v11 + 29) = &unk_1E25C5E70;
          v11 += 1088;
          if (v11 - v35 == 17408)
          {
            v36 = (char *)v10[1];
            ++v10;
            v35 = v36;
            v11 = v36;
          }
        }
        while (v11 != v34);
      }
      v37 = a1[5] - v6;
      v7 = a1[4] + v6;
      a1[4] = v7;
      a1[5] = v37;
      v9 = (void **)a1[1];
      if (v7 >= 0x20)
      {
        do
        {
          operator delete(*v9);
          v9 = (void **)(a1[1] + 8);
          a1[1] = v9;
          v7 = a1[4] - 16;
          a1[4] = v7;
        }
        while (v7 > 0x1F);
      }
    }
    else
    {
      v47 = v13;
      v17 = v6;
      sub_18D2BE740(&v48, v6);
      v18 = v49;
      v19 = (uint64_t *)&v9[(v16 + v7) >> 4];
      if (v8 == v9)
        v20 = 0;
      else
        v20 = *v19 + 1088 * (((_BYTE)v16 + (_BYTE)v7) & 0xF);
      if (v19 == v48)
      {
        v33 = v20;
        v30 = v14;
        j = (uint64_t)v15;
      }
      else
      {
        v29 = v48 + 1;
        sub_18D2BEA40(&v48, (uint64_t)v49, *v48 + 17408, v14, (uint64_t)v15);
        v30 = (uint64_t *)v49;
        for (j = (uint64_t)v50; v29 != v19; j = (uint64_t)v50)
        {
          v32 = *v29++;
          sub_18D2BEA40(&v48, v32, v32 + 17408, v30, j);
          v30 = (uint64_t *)v49;
        }
        v18 = (_QWORD *)*v19;
        v33 = v20;
      }
      sub_18D2BEA40(&v48, (uint64_t)v18, v33, v30, j);
      v38 = v49;
      v39 = v50;
      v12 = v47;
      v40 = a1[5];
      v41 = a1[1];
      if (a1[2] == v41)
        v42 = 0;
      else
        v42 = *(_QWORD *)(v41 + (((unint64_t)(a1[4] + v40) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 1088 * ((*((_DWORD *)a1 + 8) + (_DWORD)v40) & 0xF);
      if ((char *)v42 != v50)
      {
        v43 = *(char **)v49;
        do
        {
          *((_QWORD *)v39 + 120) = &unk_1E25C5E70;
          *((_QWORD *)v39 + 106) = &unk_1E25C5E70;
          *((_QWORD *)v39 + 92) = &unk_1E25C5E70;
          *((_QWORD *)v39 + 84) = &unk_1E25C5E70;
          *((_QWORD *)v39 + 65) = &unk_1E25C5E70;
          *((_QWORD *)v39 + 51) = &unk_1E25C5E70;
          *((_QWORD *)v39 + 37) = &unk_1E25C5E70;
          *((_QWORD *)v39 + 29) = &unk_1E25C5E70;
          v39 += 1088;
          if (v39 - v43 == 17408)
          {
            v44 = (char *)*((_QWORD *)v38 + 1);
            v38 += 8;
            v43 = v44;
            v39 = v44;
          }
        }
        while (v39 != (char *)v42);
      }
      a1[5] = v40 - v17;
      while (sub_18D2BE7B4(a1))
        ;
      v9 = (void **)a1[1];
      v7 = a1[4];
    }
  }
  if ((void **)a1[2] == v9)
    v45 = 0;
  else
    v45 = (char *)v9[v7 >> 4] + 1088 * (v7 & 0xF);
  v48 = (uint64_t *)&v9[v7 >> 4];
  v49 = v45;
  return sub_18D2BE740(&v48, v12);
}

uint64_t raven::RavenDeltaVIOEstimateActiveObject::VIOUserCourseTurnDetection(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  void *v8;
  double v9;
  void *v10;
  double v11;
  BOOL v12;
  BOOL v13;
  uint64_t v15;
  double v16;
  double v17;
  double *v18;
  long double v19;
  long double v20;
  double v21;
  double v22;
  double v23;
  unsigned __int8 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  double *v30;
  int v31;
  int v32;
  int i;
  __int128 v34;
  cnprint::CNPrinter *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  unsigned int v41;
  int v42;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **p_p;
  void *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD v58[2];
  void *__p;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  double *v82;
  double v83[2];
  void *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;

  v8 = *(void **)a2;
  v9 = *(double *)(a2 + 8);
  *(double *)a4.i64 = v9;
  v10 = *(void **)a3;
  v11 = *(double *)(a3 + 8);
  *(double *)a5.i64 = v11;
  if (*(_QWORD *)a2)
    v12 = 1;
  else
    v12 = (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (v12
    && (!v10 ? (v13 = (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (v13 = 1), v13 && v8 != v10))
  {
    if ((uint64_t)v8 < (uint64_t)v10)
      return 0;
  }
  else if (v9 <= v11)
  {
    return 0;
  }
  v74 = *(void **)a2;
  *(double *)&v75 = v9;
  v69 = v10;
  *(double *)&v70 = v11;
  v15 = CNTimeSpan::operator-((uint64_t)&v74, &v69, a4, a5);
  v17 = v16 + (double)v15;
  if (v17 >= *(double *)(a1 + 9880))
  {
    v86 = 0x100000003;
    v84 = &unk_1E25C7790;
    v85 = xmmword_18D313070;
    v87 = &v88;
    sub_18D0540FC(a2 + 232, a3 + 232, (uint64_t)&v84);
    v18 = (double *)v87;
    v20 = *(double *)v87;
    v19 = *((double *)v87 + 1);
    v21 = hypot(*(long double *)v87, v19);
    if (v21 < 1.0 || v21 > fabs(v17 * 2.5) * 3.0 || fabs(v20) <= 0.005 && fabs(v19) <= 0.005)
    {
      *(_BYTE *)(a1 + 520) = 0;
      return 1;
    }
    *(_BYTE *)(a1 + 520) = 1;
    v22 = atan2(v20, v19);
    if (v22 >= 0.0)
      v23 = v22;
    else
      v23 = v22 + 6.28318531;
    v81 = 0x200000001;
    v79 = &unk_1E25C6BC0;
    v80 = xmmword_18D319920;
    v82 = v83;
    v83[0] = v19 / (v21 * v21);
    v83[1] = -*v18 / (v21 * v21);
    v76 = 0x300000003;
    v74 = &unk_1E25C78E0;
    v75 = xmmword_18D30BB60;
    v77 = &v78;
    sub_18D053FA4(a2 + 408, a3 + 408, (uint64_t)&v74);
    v24 = atomic_load((unsigned __int8 *)&qword_1ECF24550);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24550))
    {
      v71 = 0x200000001;
      v69 = &unk_1E25C6BF0;
      v72 = &v73;
      v70 = xmmword_18D319920;
      v73 = 0x100000000;
      sub_18D1B82C8((uint64_t)&v69, (uint64_t)&unk_1ECF24558);
      __cxa_atexit((void (*)(void *))sub_18D1B8348, &unk_1ECF24558, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF24550);
    }
    sub_18D2B72A8((uint64_t)&v74, (uint64_t)&unk_1ECF24558, (uint64_t)&unk_1ECF24558, (uint64_t)&v69);
    v61 = 0x200000001;
    __p = &unk_1E25C6BC0;
    v60 = xmmword_18D319920;
    v62 = &v63;
    sub_18D053B2C((uint64_t)&v79, (uint64_t)&v69, (uint64_t)&__p);
    v26 = v80;
    v25 = DWORD1(v80);
    v56 = 0x100000002;
    v51 = &unk_1E25C7520;
    v57 = v58;
    v52 = DWORD1(v80);
    v53 = v80;
    v54 = v80 * DWORD1(v80);
    v55 = DWORD1(v80);
    if (DWORD1(v80))
    {
      v27 = 0;
      v28 = 0;
      v29 = HIDWORD(v80);
      v30 = v82;
      do
      {
        v31 = v27;
        v32 = v28;
        for (i = v26; i; --i)
        {
          v58[v32] = *(_QWORD *)&v30[v31];
          v32 += v25;
          ++v31;
        }
        ++v28;
        v27 += v29;
      }
      while (v28 != v25);
    }
    v66 = 0x100000001;
    v64 = &unk_1E25C6A40;
    *(_QWORD *)&v34 = 0x100000001;
    *((_QWORD *)&v34 + 1) = 0x100000001;
    v65 = v34;
    v67 = (double *)&v68;
    sub_18D053B2C((uint64_t)&__p, (uint64_t)&v51, (uint64_t)&v64);
    v36 = *v67;
    if ((*(_QWORD *)v67 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v36 >= 0.0)
    {
      v37 = sqrt(v36);
      if (v37 <= 1.57079633)
      {
        if (*(_BYTE *)(a1 + 720))
        {
          v38 = *(double *)(a1 + 712);
        }
        else
        {
          if (v37 >= 0.785398163)
            return 1;
          *(double *)(a1 + 712) = v23;
          *(_BYTE *)(a1 + 720) = 1;
          v38 = v23;
        }
        v39 = vabdd_f64(v23, v38);
        if (6.28318531 - v39 < v39)
          v39 = 6.28318531 - v39;
        v40 = *(double *)(a1 + 504);
        if (v40 > 0.0)
          v40 = -v40;
        v41 = *(_DWORD *)(a1 + 728);
        if (v39 + v40 <= 0.261799388)
        {
          if (v41 < 2)
            goto LABEL_48;
          v42 = -1;
        }
        else
        {
          v42 = 1;
        }
        v41 += v42;
        *(_DWORD *)(a1 + 728) = v41;
LABEL_48:
        v44 = v39 + v40 > 0.785398163 && v41 > 2;
        if (v41 > 4 || v44)
        {
          if (cnprint::CNPrinter::GetLogLevel(v35) <= 1)
          {
            LOWORD(v51) = 12;
            LOBYTE(v64) = 1;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1);
            if (!*(_BYTE *)(a1 + 720))
              sub_18D164CA0();
            p_p = &__p;
            if (v60 < 0)
              LOBYTE(p_p) = (_BYTE)__p;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, (unsigned __int8 *)&v64, "%s: VIO t,%.3lf dt_time,%.3lf VIO user turn detected, init course,%.3lf, change in course,%.3lf, accum_yaw_corr,%.3lf, [deg] VIO delta position,%.3lf, score%u", v45, v46, v47, v48, v49, (char)p_p);
            if (SHIBYTE(v60) < 0)
              operator delete(__p);
          }
          *(_BYTE *)(a1 + 732) = 0;
          *(_DWORD *)(a1 + 728) = 0;
          if (*(_BYTE *)(a1 + 720))
            *(_BYTE *)(a1 + 720) = 0;
          sub_18D053AA8(a1 + 632, a2 + 232);
          *(_QWORD *)(a1 + 504) = 0;
        }
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

void sub_18D2BCA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  __cxa_guard_abort(&qword_1ECF24550);
  _Unwind_Resume(a1);
}

void raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(raven::RavenDeltaVIOEstimateActiveObject *this, const raven::VLLocalizationEvent *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[128];
  void *v56;
  __int128 v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE v60[24];
  _BYTE v61[32];
  uint64_t *v62;
  uint64_t v63;
  _BYTE v64[105];
  _BYTE v65[112];
  _BYTE v66[112];
  char v67;
  _BYTE v68[32];
  uint64_t *v69;
  uint64_t v70;
  _BYTE v71[112];
  _BYTE v72[112];
  _BYTE v73[112];
  char v74;
  unsigned __int8 v75[440];
  _OWORD v76[2];
  void *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _OWORD v82[28];
  void *__p[2];
  char v84;
  _QWORD v85[2];
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  float64x2_t v109[2];
  _BYTE v110[408];
  _OWORD v111[2];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[120];
  __int16 v116;
  char v117;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  if (*(_BYTE *)(v2 + 480))
    v4 = *(_BYTE *)(v3 + 1080) == 0;
  else
    v4 = 1;
  if (v4)
    return;
  v5 = v3;
  v6 = v2;
  v7 = v2 + 6256;
  v8 = v2 + 5624;
  if (*(_BYTE *)(v2 + 6728))
  {
    v9 = *(_OWORD *)(v3 + 8);
    v10 = *(_OWORD *)(v3 + 24);
    v11 = *(_OWORD *)(v3 + 40);
    *(_OWORD *)(v2 + 5680) = *(_OWORD *)(v3 + 56);
    *(_OWORD *)(v2 + 5664) = v11;
    *(_OWORD *)(v2 + 5648) = v10;
    *(_OWORD *)(v2 + 5632) = v9;
    v12 = *(_OWORD *)(v3 + 72);
    v13 = *(_OWORD *)(v3 + 88);
    v14 = *(_OWORD *)(v3 + 104);
    *(_OWORD *)(v2 + 5744) = *(_OWORD *)(v3 + 120);
    *(_OWORD *)(v2 + 5728) = v14;
    *(_OWORD *)(v2 + 5712) = v13;
    *(_OWORD *)(v2 + 5696) = v12;
    v15 = *(_OWORD *)(v3 + 136);
    v16 = *(_OWORD *)(v3 + 152);
    v17 = *(_OWORD *)(v3 + 168);
    *(_OWORD *)(v2 + 5808) = *(_OWORD *)(v3 + 184);
    *(_OWORD *)(v2 + 5792) = v17;
    *(_OWORD *)(v2 + 5776) = v16;
    *(_OWORD *)(v2 + 5760) = v15;
    if (v8 != v3)
    {
      *(_OWORD *)(v2 + 5824) = *(_OWORD *)(v3 + 200);
      *(_OWORD *)(v2 + 5840) = *(_OWORD *)(v3 + 216);
    }
    v18 = (__int128 *)(v3 + 1080);
    sub_18D053AA8(v2 + 5856, v3 + 232);
    sub_18D053AA8(v6 + 5920, v5 + 296);
    sub_18D053AA8(v6 + 6032, v5 + 408);
    sub_18D053AA8(v6 + 6144, v5 + 520);
    *(_BYTE *)v7 = *(_BYTE *)(v5 + 632);
    if (v8 != v5)
    {
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v5 + 640);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v5 + 656);
    }
    sub_18D053AA8(v6 + 6296, v5 + 672);
    sub_18D053AA8(v6 + 6360, v5 + 736);
    sub_18D053AA8(v6 + 6472, v5 + 848);
    sub_18D053AA8(v6 + 6584, v5 + 960);
    *(_BYTE *)(v7 + 440) = *(_BYTE *)(v5 + 1072);
    v19 = *v18;
    *(_QWORD *)(v6 + 6720) = *(_QWORD *)(v5 + 1096);
    *(_OWORD *)(v6 + 6704) = v19;
  }
  else
  {
    sub_18D216190(v2 + 5624, v3);
    *(_BYTE *)(v7 + 472) = 1;
  }
  if (!*(_QWORD *)(v6 + 9928))
  {
LABEL_29:
    *(_BYTE *)(v6 + 736) = 0;
    return;
  }
  v85[1] = 0;
  v85[0] = 0;
  v86 = 0;
  v88 = 0;
  v87 = 0;
  v89 = 0;
  v91 = 0;
  v90 = 0;
  v92 = 0;
  v94 = 0;
  v93 = 0;
  v97 = 0;
  v95 = 0x7FF8000000000000;
  v96 = 0;
  v98 = 0;
  v100 = 0;
  v99 = 0;
  v101 = 0;
  v103 = 0;
  v102 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0x7FF8000000000000;
  v108 = 0;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v109);
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v111);
  v116 = 0;
  v117 = 0;
  *(_OWORD *)__p = *(_OWORD *)(v5 + 104);
  v21 = raven::RavenDeltaVIOEstimateActiveObject::SynchronizeVIOdataTo((cnprint::CNPrinter *)v6, (double *)__p, (uint64_t)v85, *(int8x16_t *)__p, v20);
  if ((v21 & 1) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v21) <= 1)
    {
      LOWORD(v82[0]) = 12;
      v75[0] = 1;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(__p, v6);
      v28 = v84;
      v29 = (char)__p[0];
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v35 = __p;
      if (v28 < 0)
        LOBYTE(v35) = v29;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v82, v75, "%s, vl_evt_t,%.3lf vl_app_t,%.3lf for VL sample there is no corresponding VIO to use or interpolate.", v30, v31, v32, v33, v34, (char)v35);
      if (v84 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_29;
  }
  cntransformation::Cat((cntransformation *)v111, (const cntransformation::CNRigidTransformation *)v109, (uint64_t)__p);
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v82);
  v79 = 0x300000003;
  v77 = &unk_1E25C78E0;
  v80 = &v81;
  v78 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v77, 0.0);
  v22 = SHIDWORD(v78);
  v23 = v80;
  v80[2 * SHIDWORD(v78)] = 0x3FF0000000000000;
  v23[1] = 0x3FF0000000000000;
  v23[v22 + 2] = 0x3FF0000000000000;
  sub_18D159244((uint64_t)v76, (uint64_t)&v77);
  v82[0] = v76[0];
  v82[1] = v76[1];
  cntransformation::Cat((cntransformation *)(v5 + 200), (const cntransformation::CNRigidTransformation *)v82, (uint64_t)v75);
  cntransformation::Cat((cntransformation *)v75, (const cntransformation::CNRigidTransformation *)__p, (uint64_t)v68);
  if ((_BYTE *)(v6 + 7832) != v68)
  {
    v24 = *(_OWORD *)&v68[16];
    *(_OWORD *)(v6 + 7832) = *(_OWORD *)v68;
    *(_OWORD *)(v6 + 7848) = v24;
  }
  sub_18D053AA8(v6 + 7864, (uint64_t)&v69);
  sub_18D053AA8(v6 + 7928, (uint64_t)v71);
  sub_18D053AA8(v6 + 8040, (uint64_t)v72);
  sub_18D053AA8(v6 + 8152, (uint64_t)v73);
  *(_BYTE *)(v6 + 8264) = v74;
  *(_BYTE *)(v6 + 734) = 1;
  *(_OWORD *)v68 = v111[0];
  *(_OWORD *)&v68[16] = v111[1];
  sub_18D04DA0C((uint64_t)&v69, (uint64_t)&v112);
  sub_18D159B20((uint64_t)v71, (uint64_t)&v113);
  sub_18D159B20((uint64_t)v72, (uint64_t)&v114);
  sub_18D159B20((uint64_t)v73, (uint64_t)v115);
  v74 = v115[112];
  cntransformation::Inv((float64x2_t *)v68, (uint64_t)v61);
  sub_18D053AA8(v6 + 9656, (uint64_t)&v62);
  v58 = 0x100000003;
  v56 = &unk_1E25C7790;
  v59 = v60;
  v57 = xmmword_18D313070;
  sub_18D04BE88((uint64_t)&v56, 0.0);
  sub_18D053AA8((uint64_t)&v69, (uint64_t)&v56);
  cntransformation::Cat((cntransformation *)v75, (const cntransformation::CNRigidTransformation *)v68, (uint64_t)&v50);
  if ((__int128 *)(v6 + 8712) != &v50)
  {
    v25 = v51;
    *(_OWORD *)(v6 + 8712) = v50;
    *(_OWORD *)(v6 + 8728) = v25;
  }
  sub_18D053AA8(v6 + 8744, (uint64_t)&v52);
  sub_18D053AA8(v6 + 8808, (uint64_t)&v53);
  sub_18D053AA8(v6 + 8920, (uint64_t)&v54);
  sub_18D053AA8(v6 + 9032, (uint64_t)v55);
  *(_BYTE *)(v6 + 9144) = v55[112];
  *(_BYTE *)(v6 + 736) = 1;
  sub_18D053AA8(v6 + 9592, v6 + 7864);
  *(_BYTE *)(v6 + 732) = 1;
  sub_18D16AF50((uint64_t)&v50, **(float64_t **)(v6 + 7896), *(float64_t *)(*(_QWORD *)(v6 + 7896) + 8), *(double *)(*(_QWORD *)(v6 + 7896) + 16));
  if (BYTE8(v50))
  {
    sub_18D053AA8(v6 + 9720, (uint64_t)&v51);
    *(_BYTE *)(v6 + 733) = 1;
    v58 = 0x100000003;
    v56 = &unk_1E25C7790;
    v57 = xmmword_18D313070;
    v59 = v60;
    sub_18D053B2C(v6 + 9720, v6 + 7864, (uint64_t)&v56);
    sub_18D159244((uint64_t)v49, v6 + 9720);
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v68);
    *(_OWORD *)v68 = v49[0];
    *(_OWORD *)&v68[16] = v49[1];
    v46 = 0x100000003;
    v44 = &unk_1E25C7790;
    v45 = xmmword_18D313070;
    v47 = &v48;
    sub_18D053B2C(v6 + 9720, v6 + 7864, (uint64_t)&v44);
    *(_QWORD *)&v61[24] = 0x100000003;
    *(_QWORD *)v61 = &unk_1E25C7790;
    *(_OWORD *)&v61[8] = xmmword_18D313070;
    v62 = &v63;
    sub_18D0540FC((uint64_t)&v56, (uint64_t)&v44, (uint64_t)v61);
    sub_18D053AA8((uint64_t)&v69, (uint64_t)v61);
    cntransformation::Cat((cntransformation *)v68, (const cntransformation::CNRigidTransformation *)(v6 + 7832), (uint64_t)v61);
    if ((_BYTE *)(v6 + 8272) != v61)
    {
      v26 = *(_OWORD *)&v61[16];
      *(_OWORD *)(v6 + 8272) = *(_OWORD *)v61;
      *(_OWORD *)(v6 + 8288) = v26;
    }
    sub_18D053AA8(v6 + 8304, (uint64_t)&v62);
    sub_18D053AA8(v6 + 8368, (uint64_t)v64);
    sub_18D053AA8(v6 + 8480, (uint64_t)v65);
    sub_18D053AA8(v6 + 8592, (uint64_t)v66);
    *(_BYTE *)(v6 + 8704) = v67;
    *(_BYTE *)(v6 + 735) = 1;
    *(_QWORD *)&v68[24] = 0x100000003;
    *(_QWORD *)v68 = &unk_1E25C7790;
    *(_OWORD *)&v68[8] = xmmword_18D313070;
    v69 = &v70;
    sub_18D0540FC((uint64_t)v110, v6 + 9656, (uint64_t)v68);
    sub_18D053AA8((uint64_t)v110, (uint64_t)v68);
    cntransformation::Inv(v109, (uint64_t)v68);
    cntransformation::Cat((cntransformation *)(v6 + 8272), (const cntransformation::CNRigidTransformation *)v68, (uint64_t)v61);
    if ((_BYTE *)(v6 + 9152) != v61)
    {
      v27 = *(_OWORD *)&v61[16];
      *(_OWORD *)(v6 + 9152) = *(_OWORD *)v61;
      *(_OWORD *)(v6 + 9168) = v27;
    }
    sub_18D053AA8(v6 + 9184, (uint64_t)&v62);
    sub_18D053AA8(v6 + 9248, (uint64_t)v64);
    sub_18D053AA8(v6 + 9360, (uint64_t)v65);
    sub_18D053AA8(v6 + 9472, (uint64_t)v66);
    *(_BYTE *)(v6 + 9584) = v67;
  }
  else
  {
    *(_WORD *)v61 = 12;
    LOBYTE(v56) = 2;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(v68, v6);
    v36 = v68[23];
    v37 = v68[0];
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v43 = v68;
    if (v36 < 0)
      LOBYTE(v43) = v37;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, (unsigned __int8 *)&v56, "%s, vl_evt_t,%.3lf vl_app_t,%.3lf, VLF position Jecef2enu computation failed.", v38, v39, v40, v41, v42, (char)v43);
    if ((v68[23] & 0x80000000) != 0)
      operator delete(*(void **)v68);
  }
}

void sub_18D2BD37C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenDeltaVIOEstimateActiveObject::SynchronizeVIOdataTo(cnprint::CNPrinter *a1, double *a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t v5;
  int64x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  cnprint::CNPrinter *v15;
  double v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  double v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  double v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t result;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  int8x16_t v82;
  int8x16_t v83;
  int v84;
  uint64_t v85;
  double v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  void *v93;
  uint64_t v94;
  double v95;
  int8x16_t v96;
  cnprint::CNPrinter *v97;
  double v98;
  unsigned int LogLevel;
  int v100;
  char v101;
  int8x16_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void **v108;
  _BOOL8 v109;
  int v110;
  int8x16_t v111;
  void *v112[2];
  char v113;
  unsigned __int8 v114;
  __int16 v115;
  int8x16_t v116;
  int8x16_t v117[68];
  void *__p[2];
  char v119;
  __int128 v120;
  __int128 v121;

  v5 = *((_QWORD *)a1 + 1241);
  if (!v5)
    return 0;
  v9 = (int64x2_t *)((char *)a1 + 9888);
  if (v5 == 1)
  {
    v10 = *((_QWORD *)a1 + 1240);
    v11 = *(_QWORD *)(*((_QWORD *)a1 + 1237) + ((v10 >> 1) & 0x7FFFFFFFFFFFFFF8));
    v12 = v10 & 0xF;
    v13 = v11 + 1088 * (v10 & 0xF);
    v14 = *(_QWORD *)(v13 + 8);
    v117[0].i64[0] = *(_QWORD *)v13;
    v117[0].i64[1] = v14;
    v15 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)a2, v117, a4, a5);
    if (fabs(v16 + (double)(uint64_t)v15) <= 0.001)
    {
      *(_OWORD *)a3 = *(_OWORD *)v13;
      v50 = *(_OWORD *)(v13 + 16);
      v51 = *(_OWORD *)(v13 + 32);
      v52 = *(_OWORD *)(v13 + 64);
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(v13 + 48);
      *(_OWORD *)(a3 + 64) = v52;
      *(_OWORD *)(a3 + 16) = v50;
      *(_OWORD *)(a3 + 32) = v51;
      v53 = *(_OWORD *)(v13 + 80);
      v54 = *(_OWORD *)(v13 + 96);
      v55 = *(_OWORD *)(v13 + 128);
      *(_OWORD *)(a3 + 112) = *(_OWORD *)(v13 + 112);
      *(_OWORD *)(a3 + 128) = v55;
      *(_OWORD *)(a3 + 80) = v53;
      *(_OWORD *)(a3 + 96) = v54;
      v56 = *(_OWORD *)(v13 + 144);
      v57 = *(_OWORD *)(v13 + 160);
      v58 = *(_OWORD *)(v13 + 176);
      *(_BYTE *)(a3 + 192) = *(_BYTE *)(v13 + 192);
      *(_OWORD *)(a3 + 160) = v57;
      *(_OWORD *)(a3 + 176) = v58;
      *(_OWORD *)(a3 + 144) = v56;
      v59 = v11 + 1088 * v12;
      if (a3 != v59)
      {
        *(_OWORD *)(a3 + 200) = *(_OWORD *)(v59 + 200);
        *(_OWORD *)(a3 + 216) = *(_OWORD *)(v59 + 216);
      }
      v60 = v11 + 1088 * v12;
      sub_18D053AA8(a3 + 232, v60 + 232);
      sub_18D053AA8(a3 + 296, v60 + 296);
      sub_18D053AA8(a3 + 408, v60 + 408);
      sub_18D053AA8(a3 + 520, v60 + 520);
      *(_BYTE *)(a3 + 632) = *(_BYTE *)(v60 + 632);
      if (a3 != v60)
      {
        *(_OWORD *)(a3 + 640) = *(_OWORD *)(v60 + 640);
        *(_OWORD *)(a3 + 656) = *(_OWORD *)(v60 + 656);
      }
      v61 = v11 + 1088 * v12;
      sub_18D053AA8(a3 + 672, v61 + 672);
      sub_18D053AA8(a3 + 736, v61 + 736);
      sub_18D053AA8(a3 + 848, v61 + 848);
      sub_18D053AA8(a3 + 960, v61 + 960);
      *(_BYTE *)(a3 + 1072) = *(_BYTE *)(v61 + 1072);
      v62 = *(_WORD *)(v61 + 1080);
      *(_BYTE *)(a3 + 1082) = *(_BYTE *)(v61 + 1082);
      *(_WORD *)(a3 + 1080) = v62;
      if (raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(v63, a3))
        return 1;
      sub_18D2BA218(v9);
      return 0;
    }
    if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
    {
      LOWORD(v112[0]) = 12;
      LOBYTE(v121) = 1;
      (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
      CNTimeSpan::operator-((uint64_t)a2, v117, v17, v18);
      LOBYTE(v24) = __p[0];
      if (v119 >= 0)
        v24 = __p;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v112, (unsigned __int8 *)&v121, "%s, The only VIO sample is not time aligned to sync time, tsync,%.3lf vio_at,%.3lf dt,%.3lf, tol,%.3lf", v19, v20, v21, v22, v23, (char)v24);
      goto LABEL_19;
    }
    return 0;
  }
  v25 = *((_QWORD *)a1 + 1240);
  v26 = *((_QWORD *)a1 + 1237);
  v121 = *(_OWORD *)(*(_QWORD *)(v26 + (((v5 + v25 - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 1088 * (((_DWORD)v5 + (_DWORD)v25 - 1) & 0xF));
  v120 = *(_OWORD *)(*(_QWORD *)(v26 + ((v25 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 1088 * (v25 & 0xF));
  v27 = sub_18D069E98(a2, (double *)&v120);
  if (!v27 || !(v27 = sub_18D05B574(a2, (double *)&v121)))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      v117[0].i16[0] = 12;
      LOBYTE(v112[0]) = 1;
      (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(__p, a1);
      if (v119 >= 0)
        v49 = __p;
      else
        LOBYTE(v49) = __p[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v117, (unsigned __int8 *)v112, "%s, For the given sync time there is no corresponding VIO to use or interpolate, tsync,%.3lf oldest_VIO,%.3lf latest_VIO,%.3lf", v44, v45, v46, v47, v48, (char)v49);
LABEL_19:
      if (v119 < 0)
        operator delete(__p[0]);
    }
    return 0;
  }
  v30 = CNTimeSpan::operator-((uint64_t)a2, &v120, v28, v29);
  *(double *)v32.i64 = v31;
  *(double *)v33.i64 = fabs(v31 + (double)v30);
  if (*(double *)v33.i64 <= 0.001)
  {
    v65 = *((_QWORD *)a1 + 1240);
    v66 = *(_QWORD *)(*((_QWORD *)a1 + 1237) + ((v65 >> 1) & 0x7FFFFFFFFFFFFFF8));
    v67 = v65 & 0xF;
    v68 = v66 + 1088 * (v65 & 0xF);
    v69 = *(_OWORD *)(v68 + 64);
    v71 = *(_OWORD *)(v68 + 16);
    v70 = *(_OWORD *)(v68 + 32);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(v68 + 48);
    *(_OWORD *)(a3 + 64) = v69;
    *(_OWORD *)(a3 + 16) = v71;
    *(_OWORD *)(a3 + 32) = v70;
    v72 = *(_OWORD *)(v68 + 128);
    v74 = *(_OWORD *)(v68 + 80);
    v73 = *(_OWORD *)(v68 + 96);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(v68 + 112);
    *(_OWORD *)(a3 + 128) = v72;
    *(_OWORD *)(a3 + 80) = v74;
    *(_OWORD *)(a3 + 96) = v73;
    v76 = *(_OWORD *)(v68 + 160);
    v75 = *(_OWORD *)(v68 + 176);
    v77 = *(_OWORD *)(v68 + 144);
    *(_BYTE *)(a3 + 192) = *(_BYTE *)(v68 + 192);
    *(_OWORD *)(a3 + 160) = v76;
    *(_OWORD *)(a3 + 176) = v75;
    *(_OWORD *)(a3 + 144) = v77;
    *(_OWORD *)a3 = *(_OWORD *)v68;
    if (a3 != v68)
    {
      *(_OWORD *)(a3 + 200) = *(_OWORD *)(v68 + 200);
      *(_OWORD *)(a3 + 216) = *(_OWORD *)(v68 + 216);
    }
    v78 = v66 + 1088 * (v65 & 0xF);
    sub_18D053AA8(a3 + 232, v78 + 232);
    sub_18D053AA8(a3 + 296, v78 + 296);
    sub_18D053AA8(a3 + 408, v78 + 408);
    sub_18D053AA8(a3 + 520, v78 + 520);
    *(_BYTE *)(a3 + 632) = *(_BYTE *)(v78 + 632);
    if (a3 != v78)
    {
      *(_OWORD *)(a3 + 640) = *(_OWORD *)(v78 + 640);
      *(_OWORD *)(a3 + 656) = *(_OWORD *)(v78 + 656);
    }
    v79 = v66 + 1088 * v67;
    sub_18D053AA8(a3 + 672, v79 + 672);
    sub_18D053AA8(a3 + 736, v79 + 736);
    sub_18D053AA8(a3 + 848, v79 + 848);
    sub_18D053AA8(a3 + 960, v79 + 960);
    *(_BYTE *)(a3 + 1072) = *(_BYTE *)(v79 + 1072);
    v81 = *(_WORD *)(v79 + 1080);
    *(_BYTE *)(a3 + 1082) = *(_BYTE *)(v79 + 1082);
    *(_WORD *)(a3 + 1080) = v81;
    goto LABEL_35;
  }
  *(double *)v34.i64 = (double)CNTimeSpan::operator-((uint64_t)&v121, a2, v33, v32);
  v36 = *((_QWORD *)a1 + 1240);
  if (fabs(v35 + *(double *)v34.i64) <= 0.001)
  {
    v80 = sub_18D2BE604(a3, *(_QWORD *)(*((_QWORD *)a1 + 1237) + (((v36 + *((_QWORD *)a1 + 1241) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 1088 * (((_DWORD)v36 + *((_DWORD *)a1 + 2482) - 1) & 0xF));
LABEL_35:
    if (raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(v80, a3))
    {
      v84 = 1;
      LODWORD(result) = 1;
      goto LABEL_68;
    }
    v85 = CNTimeSpan::operator-((uint64_t)&v121, a2, v82, v83);
    if (fabs(v86 + (double)v85) <= 0.001)
      sub_18D2BA218(v9);
    else
      sub_18D2BA3F4(v9);
    goto LABEL_66;
  }
  v37 = *((_QWORD *)a1 + 1237);
  v38 = (char *)(v37 + 8 * (v36 >> 4));
  v39 = *((_QWORD *)a1 + 1238);
  if (v39 == v37)
  {
    v40 = 0;
    v43 = 0;
    v42 = (char *)(v37 + 8 * ((*((_QWORD *)a1 + 1241) + v36) >> 4));
  }
  else
  {
    v40 = (_OWORD *)(*(_QWORD *)v38 + 1088 * (*((_QWORD *)a1 + 1240) & 0xFLL));
    v41 = *((_QWORD *)a1 + 1241) + v36;
    v42 = (char *)(v37 + 8 * (v41 >> 4));
    v43 = *(_QWORD *)v42 + 1088 * (v41 & 0xF);
  }
  if ((_OWORD *)v43 != v40)
  {
    v87 = 0xF0F0F0F0F0F0F0F1 * ((v43 - *(_QWORD *)v42) >> 6)
        + 2 * (v42 - v38)
        + 0xF0F0F0F0F0F0F0FLL * (((uint64_t)v40 - *(_QWORD *)v38) >> 6);
    if (v87)
    {
      do
      {
        v88 = v87 >> 1;
        v117[0].i64[0] = (uint64_t)v38;
        v117[0].i64[1] = (uint64_t)v40;
        sub_18D2BE740((uint64_t **)v117, v87 >> 1);
        *(_OWORD *)__p = *(_OWORD *)v117[0].i64[1];
        if (sub_18D03FE4C((double *)__p, a2))
        {
          v38 = (char *)v117[0].i64[0];
          v40 = (_OWORD *)(v117[0].i64[1] + 1088);
          v117[0].i64[1] = (uint64_t)v40;
          if ((_OWORD *)((char *)v40 - *(_QWORD *)v117[0].i64[0]) == (_OWORD *)17408)
          {
            v38 = (char *)(v117[0].i64[0] + 8);
            v40 = *(_OWORD **)(v117[0].i64[0] + 8);
          }
          v88 = v87 + ~v88;
        }
        v87 = v88;
      }
      while (v88);
      v37 = *((_QWORD *)a1 + 1237);
      v39 = *((_QWORD *)a1 + 1238);
    }
  }
  if (v39 == v37)
  {
    v90 = 0;
  }
  else
  {
    v89 = *((_QWORD *)a1 + 1241) + *((_QWORD *)a1 + 1240);
    v90 = *(_QWORD *)(v37 + ((v89 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 1088 * (v89 & 0xF);
  }
  if ((_OWORD *)v90 == v40)
    goto LABEL_66;
  *(_OWORD *)__p = *v40;
  v91 = CNTimeSpan::operator-((uint64_t)a2, __p, *(int8x16_t *)__p, v34);
  if (fabs(v92 + (double)v91) <= 0.001)
  {
    v94 = sub_18D2BE604(a3, (uint64_t)v40);
    LODWORD(result) = raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(v94, a3);
LABEL_67:
    v84 = 1;
    goto LABEL_68;
  }
  __p[0] = v38;
  __p[1] = v40;
  sub_18D2BE740((uint64_t **)__p, -1);
  v93 = v39 == v37
      ? 0
      : (void *)(*(_QWORD *)(v37 + ((*((_QWORD *)a1 + 1240) >> 1) & 0x7FFFFFFFFFFFFFF8))
               + 1088 * (*((_QWORD *)a1 + 1240) & 0xFLL));
  if (v93 == __p[1])
  {
LABEL_66:
    LODWORD(result) = 0;
    goto LABEL_67;
  }
  sub_18D215D54((uint64_t)__p, (uint64_t)v40);
  v112[0] = v38;
  v112[1] = v40;
  sub_18D2BE740((uint64_t **)v112, -1);
  sub_18D215D54((uint64_t)v117, (uint64_t)v112[1]);
  v95 = *(double *)(*((_QWORD *)a1 + 61) + 3184);
  *(_OWORD *)v112 = *(_OWORD *)__p;
  v116 = v117[0];
  v97 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v112, &v116, v117[0], v96);
  if (v98 + (double)(uint64_t)v97 <= v95)
  {
    v109 = raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation((uint64_t)v97, (uint64_t)v117);
    if (v109 && raven::RavenDeltaVIOEstimateActiveObject::ApplyDefaultUncertaintyInflation(v109, (uint64_t)__p))
    {
      sub_18D2BE604(a3, (uint64_t)__p);
      v110 = raven::RavenDeltaVIOEstimateActiveObject::InterpolateVIOdata(a1, a2, v117[0].i64, (uint64_t *)__p, a3);
      v84 = 1;
      if (v110)
      {
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_QWORD *)(a3 + 80) = 0;
        *(_QWORD *)(a3 + 88) = 0x7FF8000000000000;
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_BYTE *)(a3 + 1082) = 1;
        v84 = 0;
      }
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  LogLevel = cnprint::CNPrinter::GetLogLevel(v97);
  v84 = 1;
  if (LogLevel <= 1)
  {
    v115 = 12;
    v114 = 1;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(_QWORD *)a1 + 16))(v112, a1);
    v100 = v113;
    v101 = (char)v112[0];
    v116 = *(int8x16_t *)__p;
    v111 = v117[0];
    CNTimeSpan::operator-((uint64_t)&v116, &v111, v117[0], v102);
    if (v100 >= 0)
      v108 = v112;
    else
      LOBYTE(v108) = v101;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v115, &v114, "%s, tsync,%.3lf For the given sync time there is large gaps in VIO data to interpolate, dt,%.3lf > %.3lf", v103, v104, v105, v106, v107, (char)v108);
    if (v113 < 0)
      operator delete(v112[0]);
LABEL_75:
    v84 = 1;
  }
LABEL_76:
  LODWORD(result) = 0;
LABEL_68:
  if (v84)
    return result;
  else
    return 1;
}

void sub_18D2BDD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenDeltaVIOEstimateActiveObject::InterpolateVIOdata(cnprint::CNPrinter *a1, double *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  double v22;
  int8x16_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  __int128 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t result;
  float64x2_t v39;
  float64x2_t v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _BYTE v47[32];
  uint64_t *v48;
  uint64_t v49;
  double v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE v54[72];
  void *v55;
  __int128 v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE v59[72];
  void *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _BYTE v65[24];
  uint64_t v66;
  _BYTE *v67;
  _BYTE v68[72];
  _BYTE v69[24];
  uint64_t v70;
  _BYTE *v71;
  _BYTE v72[72];
  double v73;
  double v74;
  double v75;
  double v76;
  __int128 v77;
  __int128 v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;

  *(_OWORD *)v69 = *(_OWORD *)a3;
  if (sub_18D03FE4C(a2, (double *)v69))
    return 0;
  *(_OWORD *)v65 = *(_OWORD *)a4;
  if (sub_18D03F608(a2, (double *)v65))
    return 0;
  v13 = *a4;
  v12 = a4[1];
  *(_QWORD *)v69 = *a4;
  *(_QWORD *)&v69[8] = v12;
  v14 = *a3;
  v15 = a3[1];
  *(_QWORD *)v65 = *a3;
  *(_QWORD *)&v65[8] = v15;
  v16 = CNTimeSpan::operator-((uint64_t)v69, v65, v10, v11);
  v18 = v17 + (double)v16;
  *(double *)v19.i64 = fabs(v18);
  v20.i64[0] = 0x3CB0000000000000;
  if (*(double *)v19.i64 < 2.22044605e-16)
    return 0;
  *(_QWORD *)v69 = v13;
  *(_QWORD *)&v69[8] = v12;
  *(double *)v21.i64 = (double)CNTimeSpan::operator-((uint64_t)v69, a2, v19, v20);
  *(double *)v23.i64 = v22 + *(double *)v21.i64;
  v24 = (v22 + *(double *)v21.i64) / v18;
  *(_QWORD *)v69 = v14;
  *(_QWORD *)&v69[8] = v15;
  v25 = CNTimeSpan::operator-((uint64_t)a2, v69, v23, v21);
  v27 = (v26 + (double)v25) / v18;
  v70 = 0x100000003;
  *(_QWORD *)v69 = &unk_1E25C7790;
  *(_QWORD *)&v28.f64[1] = 0x300000003;
  *(_OWORD *)&v69[8] = xmmword_18D313070;
  v71 = v72;
  v28.f64[0] = v24;
  sub_18D064EF4((uint64_t)(a3 + 29), (uint64_t)v69, v28);
  v66 = 0x100000003;
  *(_QWORD *)v65 = &unk_1E25C7790;
  *(_QWORD *)&v29.f64[1] = 0x300000003;
  *(_OWORD *)&v65[8] = xmmword_18D313070;
  v67 = v68;
  v29.f64[0] = v27;
  sub_18D064EF4((uint64_t)(a4 + 29), (uint64_t)v65, v29);
  v81 = 0x100000003;
  v79 = &unk_1E25C7790;
  v80 = xmmword_18D313070;
  v82 = &v83;
  sub_18D053FA4((uint64_t)v69, (uint64_t)v65, (uint64_t)&v79);
  sub_18D053AA8(a5 + 232, (uint64_t)&v79);
  v77 = 0uLL;
  *(_QWORD *)&v78 = 0;
  *((_QWORD *)&v78 + 1) = 0x3FF0000000000000;
  if (cnrotation::Slerp((cnrotation *)(a3 + 25), (const cnrotation::CNRotation *)(a4 + 25), (const cnrotation::CNRotation *)&v77, v27, (cnrotation::CNRotation *)8))return 0;
  if ((__int128 *)(a5 + 200) != &v77)
  {
    v30 = v78;
    *(_OWORD *)(a5 + 200) = v77;
    *(_OWORD *)(a5 + 216) = v30;
  }
  cnrotation::Inv((float64x2_t *)(a3 + 25), (float64x2_t *)v69);
  cnrotation::Cat((double *)(a5 + 200), (const cnrotation::CNRotation *)v69, &v73);
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v73, (uint64_t)&v60);
  v66 = 0x300000003;
  *(_QWORD *)v65 = &unk_1E25C78E0;
  *(_OWORD *)&v65[8] = xmmword_18D30BB60;
  v67 = v68;
  sub_18D053B2C((uint64_t)&v60, (uint64_t)(a3 + 37), (uint64_t)v65);
  v31 = sqrt(v74 * v74 + v73 * v73 + v75 * v75 + v76 * v76);
  if (fabs(v31) >= 2.22044605e-16)
  {
    v33 = -v73 / v31;
    v34 = -v74 / v31;
    v35 = -v75 / v31;
    v32 = v76 / v31;
  }
  else
  {
    v32 = 1.0;
    v33 = 0.0;
    v34 = 0.0;
    v35 = 0.0;
  }
  v50 = v33;
  *(double *)&v51 = v34;
  *((double *)&v51 + 1) = v35;
  v52 = *(_QWORD *)&v32;
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v50, (uint64_t)&v55);
  v70 = 0x300000003;
  *(_QWORD *)v69 = &unk_1E25C78E0;
  *(_OWORD *)&v69[8] = xmmword_18D30BB60;
  v71 = v72;
  sub_18D053B2C((uint64_t)v65, (uint64_t)&v55, (uint64_t)v69);
  if (!cntransformation::CNRigidTransformation::SetPrr(a5 + 200, (uint64_t)v69))
    return 0;
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v73, (uint64_t)v65);
  v70 = 0x300000003;
  *(_QWORD *)v69 = &unk_1E25C78E0;
  *(_OWORD *)&v69[8] = xmmword_18D30BB60;
  v71 = v72;
  sub_18D053B2C((uint64_t)v65, (uint64_t)(a3 + 65), (uint64_t)v69);
  if (*(_QWORD *)&v69[8] == 0x300000003)
  {
    sub_18D053AA8(a5 + 520, (uint64_t)v69);
    *(_BYTE *)(a5 + 632) = 1;
  }
  v70 = 0x300000003;
  *(_QWORD *)v69 = &unk_1E25C78E0;
  v71 = v72;
  *(_OWORD *)&v69[8] = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)v69, 0.0);
  if ((raven::RavenDeltaVIOEstimateActiveObject::ComputeSigmaCorrelationMatrixFromCovariance(a1, (uint64_t)(a3 + 51), (uint64_t)v69) & 1) == 0)return 0;
  v66 = 0x300000003;
  *(_QWORD *)v65 = &unk_1E25C78E0;
  v67 = v68;
  *(_OWORD *)&v65[8] = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)v65, 0.0);
  if ((raven::RavenDeltaVIOEstimateActiveObject::ComputeSigmaCorrelationMatrixFromCovariance(a1, (uint64_t)(a4 + 51), (uint64_t)v65) & 1) == 0)return 0;
  v57 = 0x300000003;
  v55 = &unk_1E25C78E0;
  *(_QWORD *)&v36.f64[1] = 0x300000009;
  v56 = xmmword_18D30BB60;
  v58 = v59;
  v36.f64[0] = v24;
  sub_18D064EF4((uint64_t)v69, (uint64_t)&v55, v36);
  v52 = 0x300000003;
  v50 = COERCE_DOUBLE(&unk_1E25C78E0);
  *(_QWORD *)&v37.f64[1] = 0x300000009;
  v51 = xmmword_18D30BB60;
  v53 = v54;
  v37.f64[0] = v27;
  sub_18D064EF4((uint64_t)v65, (uint64_t)&v50, v37);
  v62 = 0x300000003;
  v60 = &unk_1E25C78E0;
  v61 = xmmword_18D30BB60;
  v63 = &v64;
  sub_18D053FA4((uint64_t)&v55, (uint64_t)&v50, (uint64_t)&v60);
  v57 = 0x300000003;
  v55 = &unk_1E25C78E0;
  v58 = v59;
  v56 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v55, 0.0);
  result = raven::RavenDeltaVIOEstimateActiveObject::ComputeCovarianceFromSigmaCorrelationMatrix(a1, (uint64_t)&v60, (uint64_t)&v55);
  if (!(_DWORD)result)
    return result;
  if (!cntransformation::CNRigidTransformation::SetPpp(a5 + 200, (uint64_t)&v55))
    return 0;
  result = 1;
  if (*((_BYTE *)a3 + 1081) && *((_BYTE *)a4 + 1081))
  {
    *(_QWORD *)&v47[24] = 0x100000003;
    *(_QWORD *)v47 = &unk_1E25C7790;
    *(_QWORD *)&v39.f64[1] = 0x300000003;
    *(_OWORD *)&v47[8] = xmmword_18D313070;
    v48 = &v49;
    v39.f64[0] = v24;
    sub_18D064EF4((uint64_t)(a3 + 84), (uint64_t)v47, v39);
    v44 = 0x100000003;
    v42 = &unk_1E25C7790;
    *(_QWORD *)&v40.f64[1] = 0x300000003;
    v43 = xmmword_18D313070;
    v45 = &v46;
    v40.f64[0] = v27;
    sub_18D064EF4((uint64_t)(a4 + 84), (uint64_t)&v42, v40);
    v52 = 0x100000003;
    v50 = COERCE_DOUBLE(&unk_1E25C7790);
    v51 = xmmword_18D313070;
    v53 = v54;
    sub_18D053FA4((uint64_t)v47, (uint64_t)&v42, (uint64_t)&v50);
    sub_18D053AA8(a5 + 672, (uint64_t)&v50);
    memset(v47, 0, 24);
    *(_QWORD *)&v47[24] = 0x3FF0000000000000;
    if (cnrotation::Slerp((cnrotation *)(a3 + 80), (const cnrotation::CNRotation *)(a4 + 80), (const cnrotation::CNRotation *)v47, v27, (cnrotation::CNRotation *)8))return 0;
    if ((_BYTE *)(a5 + 640) != v47)
    {
      v41 = *(_OWORD *)&v47[16];
      *(_OWORD *)(a5 + 640) = *(_OWORD *)v47;
      *(_OWORD *)(a5 + 656) = v41;
    }
    return 1;
  }
  return result;
}

BOOL raven::RavenDeltaVIOEstimateActiveObject::IsVIOEstimateSensible(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  BOOL v11;
  uint64_t *v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  BOOL v22;
  _BYTE v25[112];
  _BYTE v26[112];
  double v27;

  v2 = *(uint64_t **)(a2 + 440);
  if ((*v2 < 0 || ((*v2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*v2 - 1) > 0xFFFFFFFFFFFFELL)
  {
    return 0;
  }
  v6 = *(int *)(a2 + 428);
  v7 = v2[v6 + 1];
  v8 = v7 < 0 || ((v7 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
  if (v8 && (unint64_t)(v7 - 1) > 0xFFFFFFFFFFFFELL)
    return 0;
  v10 = v2[2 * (int)v6 + 2];
  v11 = v10 < 0 || ((v10 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
  if (v11 && (unint64_t)(v10 - 1) > 0xFFFFFFFFFFFFELL)
    return 0;
  if ((v2[v6] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if ((*(uint64_t *)((char *)v2 + ((16 * (_DWORD)v6) | 8)) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if ((v2[2 * v6] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v27 = INFINITY;
  sub_18D1869D8(a2 + 408, &v27, (uint64_t)v26);
  if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v27 > *(double *)(a1 + 9936))
    return 0;
  v14 = *(uint64_t **)(a2 + 328);
  v15 = *v14 < 0 || ((*v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
  if (v15 && (unint64_t)(*v14 - 1) > 0xFFFFFFFFFFFFELL)
    return 0;
  v17 = *(int *)(a2 + 316);
  v18 = v14[v17 + 1];
  v19 = v18 < 0 || ((v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
  if (v19 && (unint64_t)(v18 - 1) > 0xFFFFFFFFFFFFELL)
    return 0;
  v21 = v14[2 * (int)v17 + 2];
  v22 = v21 < 0 || ((v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
  if (v22 && (unint64_t)(v21 - 1) > 0xFFFFFFFFFFFFELL)
    return 0;
  if ((v14[v17] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if ((*(uint64_t *)((char *)v14 + ((16 * (_DWORD)v17) | 8)) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if ((v14[2 * v17] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  sub_18D1869D8(a2 + 296, &v27, (uint64_t)v25);
  sub_18D053AA8((uint64_t)v26, (uint64_t)v25);
  return (*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v27 <= *(double *)(a1 + 9936);
}

uint64_t sub_18D2BE604(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  }
  sub_18D053AA8(a1 + 232, a2 + 232);
  sub_18D053AA8(a1 + 296, a2 + 296);
  sub_18D053AA8(a1 + 408, a2 + 408);
  sub_18D053AA8(a1 + 520, a2 + 520);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  }
  sub_18D053AA8(a1 + 672, a2 + 672);
  sub_18D053AA8(a1 + 736, a2 + 736);
  sub_18D053AA8(a1 + 848, a2 + 848);
  sub_18D053AA8(a1 + 960, a2 + 960);
  *(_BYTE *)(a1 + 1072) = *(_BYTE *)(a2 + 1072);
  v13 = *(_WORD *)(a2 + 1080);
  *(_BYTE *)(a1 + 1082) = *(_BYTE *)(a2 + 1082);
  *(_WORD *)(a1 + 1080) = v13;
  return a1;
}

void sub_18D2BE71C(_QWORD *a1)
{
  sub_18D073AFC(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t **sub_18D2BE740(uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;

  if (a2)
  {
    v2 = *result;
    v3 = a2 - 0xF0F0F0F0F0F0F0FLL * (((uint64_t)result[1] - **result) >> 6);
    if (v3 < 1)
    {
      v7 = 15 - v3;
      v8 = &v2[-(v7 >> 4)];
      *result = v8;
      v5 = *v8;
      v6 = ~(_DWORD)v7 & 0xF;
    }
    else
    {
      v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
      *result = v4;
      v5 = *v4;
      v6 = v3 & 0xF;
    }
    result[1] = (uint64_t *)(v5 + 1088 * v6);
  }
  return result;
}

BOOL sub_18D2BE7B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = 2 * (v1 - v2) - 1;
  v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x20)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x1F;
}

_QWORD *sub_18D2BE818(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;

  v6 = a4;
  v7 = a2;
  if (a2 != a3)
  {
    v30 = result;
    v8 = *a4;
    v9 = a3;
    while (1)
    {
      v10 = 0xF0F0F0F0F0F0F0F1 * ((a5 - v8) >> 6);
      if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((v9 - v7) >> 6)) >= v10)
        v11 = v10;
      else
        v11 = 0xF0F0F0F0F0F0F0F1 * ((v9 - v7) >> 6);
      if (v11)
      {
        v12 = 0;
        do
        {
          v13 = a5 + v12;
          v14 = v9 + v12;
          v15 = a5 + v12 - 1088;
          *(_OWORD *)v15 = *(_OWORD *)(v9 + v12 - 1088);
          v16 = *(_OWORD *)(v9 + v12 - 1072);
          v17 = *(_OWORD *)(v9 + v12 - 1056);
          v18 = *(_OWORD *)(v9 + v12 - 1024);
          *(_OWORD *)(v15 + 48) = *(_OWORD *)(v9 + v12 - 1040);
          *(_OWORD *)(v15 + 64) = v18;
          *(_OWORD *)(v15 + 16) = v16;
          *(_OWORD *)(v15 + 32) = v17;
          v19 = *(_OWORD *)(v9 + v12 - 1008);
          v20 = *(_OWORD *)(v9 + v12 - 992);
          v21 = *(_OWORD *)(v9 + v12 - 960);
          *(_OWORD *)(v15 + 112) = *(_OWORD *)(v9 + v12 - 976);
          *(_OWORD *)(v15 + 128) = v21;
          *(_OWORD *)(v15 + 80) = v19;
          *(_OWORD *)(v15 + 96) = v20;
          v22 = *(_OWORD *)(v9 + v12 - 944);
          v23 = *(_OWORD *)(v9 + v12 - 928);
          v24 = *(_OWORD *)(v9 + v12 - 912);
          *(_BYTE *)(v15 + 192) = *(_BYTE *)(v9 + v12 - 896);
          *(_OWORD *)(v15 + 160) = v23;
          *(_OWORD *)(v15 + 176) = v24;
          *(_OWORD *)(v15 + 144) = v22;
          if (v9 != a5)
          {
            *(_OWORD *)(v13 - 888) = *(_OWORD *)(v14 - 888);
            *(_OWORD *)(v13 - 872) = *(_OWORD *)(v14 - 872);
          }
          sub_18D053AA8(v13 - 856, v14 - 856);
          sub_18D053AA8(v13 - 792, v14 - 792);
          sub_18D053AA8(v13 - 680, v14 - 680);
          sub_18D053AA8(v13 - 568, v14 - 568);
          *(_BYTE *)(v13 - 456) = *(_BYTE *)(v14 - 456);
          if (v14 != v13)
          {
            *(_OWORD *)(a5 + v12 - 448) = *(_OWORD *)(v9 + v12 - 448);
            *(_OWORD *)(a5 + v12 - 432) = *(_OWORD *)(v9 + v12 - 432);
          }
          v25 = a5 + v12;
          sub_18D053AA8(a5 + v12 - 416, v9 + v12 - 416);
          sub_18D053AA8(a5 + v12 - 352, v9 + v12 - 352);
          sub_18D053AA8(a5 + v12 - 240, v9 + v12 - 240);
          sub_18D053AA8(a5 + v12 - 128, v9 + v12 - 128);
          *(_BYTE *)(v25 - 16) = *(_BYTE *)(v9 + v12 - 16);
          v26 = *(_WORD *)(v9 + v12 - 8);
          *(_BYTE *)(v25 - 6) = *(_BYTE *)(v9 + v12 - 6);
          *(_WORD *)(v25 - 8) = v26;
          v12 -= 1088;
        }
        while (-1088 * v11 != v12);
        a5 += v12;
      }
      v9 -= 1088 * v11;
      if (v9 == v7)
        break;
      v27 = *--v6;
      v8 = v27;
      a5 = v27 + 17408;
    }
    if (*v6 + 17408 == a5)
    {
      v28 = v6[1];
      ++v6;
      a5 = v28;
    }
    v7 = a3;
    result = v30;
  }
  *result = v7;
  result[1] = v6;
  result[2] = a5;
  return result;
}

_QWORD *sub_18D2BEA40(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v6 = a4;
  v7 = a2;
  if (a2 == a3)
  {
    v8 = a2;
  }
  else
  {
    v8 = a3;
    v28 = result;
    v9 = *a4;
    while (1)
    {
      v10 = 0xF0F0F0F0F0F0F0F1 * ((v9 - a5 + 17408) >> 6);
      if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((v8 - v7) >> 6)) < v10)
        v10 = 0xF0F0F0F0F0F0F0F1 * ((v8 - v7) >> 6);
      if (v10)
      {
        v11 = 0;
        v12 = v7 + 1088 * v10;
        do
        {
          v13 = v7 + v11;
          v14 = a5 + v11;
          *(_OWORD *)v14 = *(_OWORD *)(v7 + v11);
          v15 = *(_OWORD *)(v7 + v11 + 16);
          v16 = *(_OWORD *)(v7 + v11 + 32);
          v17 = *(_OWORD *)(v7 + v11 + 64);
          *(_OWORD *)(v14 + 48) = *(_OWORD *)(v7 + v11 + 48);
          *(_OWORD *)(v14 + 64) = v17;
          *(_OWORD *)(v14 + 16) = v15;
          *(_OWORD *)(v14 + 32) = v16;
          v18 = *(_OWORD *)(v7 + v11 + 80);
          v19 = *(_OWORD *)(v7 + v11 + 96);
          v20 = *(_OWORD *)(v7 + v11 + 128);
          *(_OWORD *)(v14 + 112) = *(_OWORD *)(v7 + v11 + 112);
          *(_OWORD *)(v14 + 128) = v20;
          *(_OWORD *)(v14 + 80) = v18;
          *(_OWORD *)(v14 + 96) = v19;
          v21 = *(_OWORD *)(v7 + v11 + 144);
          v22 = *(_OWORD *)(v7 + v11 + 160);
          v23 = *(_OWORD *)(v7 + v11 + 176);
          *(_BYTE *)(v14 + 192) = *(_BYTE *)(v7 + v11 + 192);
          *(_OWORD *)(v14 + 160) = v22;
          *(_OWORD *)(v14 + 176) = v23;
          *(_OWORD *)(v14 + 144) = v21;
          if (a5 != v7)
          {
            *(_OWORD *)(v14 + 200) = *(_OWORD *)(v13 + 200);
            *(_OWORD *)(v14 + 216) = *(_OWORD *)(v13 + 216);
          }
          sub_18D053AA8(v14 + 232, v13 + 232);
          sub_18D053AA8(v14 + 296, v13 + 296);
          sub_18D053AA8(v14 + 408, v13 + 408);
          sub_18D053AA8(v14 + 520, v13 + 520);
          *(_BYTE *)(v14 + 632) = *(_BYTE *)(v13 + 632);
          if (v14 != v13)
          {
            v24 = a5 + v11;
            *(_OWORD *)(v24 + 640) = *(_OWORD *)(v7 + v11 + 640);
            *(_OWORD *)(v24 + 656) = *(_OWORD *)(v7 + v11 + 656);
          }
          sub_18D053AA8(v14 + 672, v13 + 672);
          sub_18D053AA8(v14 + 736, v13 + 736);
          sub_18D053AA8(v14 + 848, v13 + 848);
          sub_18D053AA8(v14 + 960, v13 + 960);
          *(_BYTE *)(v14 + 1072) = *(_BYTE *)(v13 + 1072);
          v25 = *(_WORD *)(v13 + 1080);
          *(_BYTE *)(v14 + 1082) = *(_BYTE *)(v13 + 1082);
          *(_WORD *)(v14 + 1080) = v25;
          v11 += 1088;
        }
        while (v13 + 1088 != v12);
        a5 += v11;
        v7 = v12;
      }
      if (v7 == v8)
        break;
      v26 = v6[1];
      ++v6;
      v9 = v26;
      a5 = v26;
    }
    if (*v6 + 17408 == a5)
    {
      v27 = v6[1];
      ++v6;
      a5 = v27;
    }
    result = v28;
  }
  *result = v8;
  result[1] = v6;
  result[2] = a5;
  return result;
}

swan::BatchedGNSSDataSmoother *swan::BatchedGNSSDataSmoother::BatchedGNSSDataSmoother(swan::BatchedGNSSDataSmoother *this)
{
  *(_QWORD *)this = off_1E25C4BA8;
  sub_18D0778AC((_QWORD *)this + 1, "");
  *(_QWORD *)this = off_1E25C0FA0;
  *(_WORD *)((char *)this + 33) = 0;
  *((_BYTE *)this + 35) = 0;
  *(_WORD *)((char *)this + 291) = 0;
  *((_WORD *)this + 274) = 0;
  *(_WORD *)((char *)this + 805) = 0;
  *((_BYTE *)this + 1062) = 0;
  *((_WORD *)this + 659) = 0;
  *((_BYTE *)this + 1575) = 0;
  *((_QWORD *)this + 197) = 0x4014000000000000;
  *((_OWORD *)this + 99) = xmmword_18D347DD0;
  *((_OWORD *)this + 100) = xmmword_18D347DE0;
  *((_OWORD *)this + 101) = xmmword_18D347DF0;
  *((_QWORD *)this + 204) = 0x4006A09E667F3BCCLL;
  return this;
}

uint64_t sub_18D2BECEC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25C4BA8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t swan::BatchedGNSSDataSmoother::Configure(swan::BatchedGNSSDataSmoother *this, const char *a2)
{
  return sub_18D2BED48((uint64_t)this, (uint64_t)a2, 0) - 1;
}

uint64_t sub_18D2BED48(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  _BYTE *v11;
  std::locale::id *v12;
  const std::locale::facet *v13;
  unsigned __int8 v14;
  _QWORD *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type size;
  int64_t v19;
  std::string *p_str;
  _BYTE *v21;
  std::string *v22;
  _BYTE *v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  std::string v32;
  std::string __str;
  char v34;
  _QWORD v35[2];
  _BYTE v36[408];
  _QWORD v37[21];

  v3 = a1;
  v37[19] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 32) = a3;
  sub_18D07768C(v35);
  v9 = v35[0];
  if ((v36[*(_QWORD *)(v35[0] - 24) + 16] & 5) != 0)
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 0;
    v32.__r_.__value_.__s.__data_[0] = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__str, (unsigned __int8 *)&v32, "ConfigLoader: could not open config file, using default values", v4, v5, v6, v7, v8, v30);
  }
  else
  {
    v10 = (std::string *)(v3 + 8);
    v31 = v3;
    if (*(char *)(v3 + 31) < 0)
    {
      *(_QWORD *)(v3 + 16) = 0;
      v11 = *(_BYTE **)(v3 + 8);
    }
    else
    {
      *(_BYTE *)(v3 + 31) = 0;
      v11 = (_BYTE *)(v3 + 8);
    }
    *v11 = 0;
    memset(&__str, 0, sizeof(__str));
    v12 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(v9 - 24)));
      v13 = std::locale::use_facet((const std::locale *)&v32, v12);
      v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale((std::locale *)&v32);
      v15 = sub_18D17ADE8(v35, (uint64_t)&__str, v14);
      v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      LOBYTE(v17) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
      if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
        break;
      size = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v19 = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v19 >= 1)
      {
        v21 = (char *)p_str + v19;
        v22 = p_str;
        do
        {
          v23 = memchr(v22, 35, v19);
          if (!v23)
            break;
          if (*v23 == 35)
          {
            if (v23 != v21 && v23 - (_BYTE *)p_str != -1)
            {
              std::string::basic_string(&v32, &__str, 0, v23 - (_BYTE *)p_str, (std::allocator<char> *)&v34);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = v32;
              v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
              size = v32.__r_.__value_.__l.__size_;
              v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
            }
            break;
          }
          v22 = (std::string *)(v23 + 1);
          v19 = v21 - (_BYTE *)v22;
        }
        while (v21 - (_BYTE *)v22 >= 1);
      }
      if ((v17 & 0x80u) != 0)
        v16 = size;
      sub_18D099E3C((uint64_t)&v32, v16 + 1);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v32;
      else
        v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if (v16)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &__str;
        else
          v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v24, v25, v16);
      }
      *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v16) = 10;
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v32;
      else
        v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      else
        v27 = v32.__r_.__value_.__l.__size_;
      std::string::append(v10, (const std::string::value_type *)v26, v27);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      v9 = v35[0];
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v3 = v31;
  }
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v35[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x18D78B25C](v36);
  std::istream::~istream();
  MEMORY[0x18D78B550](v37);
  return v28;
}

void sub_18D2BF04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  sub_18D177D44(&a23);
  _Unwind_Resume(a1);
}

uint64_t swan::BatchedGNSSDataSmoother::Configure(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  memcpy((void *)(a1 + 33), (const void *)(a2 + 33), 0x647uLL);
  return 0;
}

uint64_t swan::BatchedGNSSDataSmoother::Run(char *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v8;
  char *v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  unsigned __int8 v21;
  std::string v22;
  void *v23[2];
  std::string::size_type v24;
  void *v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  char *v39;

  v8 = a1[34];
  if (!a1[34] && !a1[291])
    return 0xFFFFFFFFLL;
  v9 = (char *)operator new(0x79180uLL);
  v38 = v9 + 496000;
  v39 = v9 + 496000;
  v36 = 0;
  v37 = v9;
  if (v8)
  {
    sub_18D0778AC(&v33, a1 + 35);
    sub_18D0778AC(&v30, a1 + 1062);
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)v25 = 0u;
    v26 = 0u;
    if (a1[33])
    {
      if (!swan::BatchLogParser::parseGPSBatchIntoASCII((uint64_t)v25, (uint64_t)&v33))
      {
        sub_18D0778AC(&v22, a1 + 1062);
        sub_18D0778AC(__p, ".4.csv");
        if ((v21 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        if ((v21 & 0x80u) == 0)
          v11 = v21;
        else
          v11 = (std::string::size_type)__p[1];
        v12 = std::string::append(&v22, (const std::string::value_type *)v10, v11);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v24 = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)v23 = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        if ((char)v21 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        v14 = swan::BatchLogParser::convertASCIIToStruct((uint64_t)v25, (uint64_t)v23);
        goto LABEL_25;
      }
    }
    else if (!swan::BatchLogParser::parseGPSSaIntoASCII((uint64_t)v25, (uint64_t)&v33))
    {
      sub_18D0778AC(v23, a1 + 1062);
      v14 = swan::BatchLogParser::convertASCIIToStruct((uint64_t)v25, (uint64_t)v23);
      --v36;
LABEL_25:
      if (SHIBYTE(v24) < 0)
      {
        operator delete(v23[0]);
        if (v14)
          goto LABEL_27;
      }
      else if (v14)
      {
        goto LABEL_27;
      }
      sub_18D2C2EA8((_QWORD *)&v26 + 1);
      if (SBYTE7(v26) < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v32) < 0)
        operator delete(v30);
      if (SHIBYTE(v35) < 0)
        operator delete(v33);
      goto LABEL_42;
    }
LABEL_27:
    sub_18D2C2EA8((_QWORD *)&v26 + 1);
    if (SBYTE7(v26) < 0)
      operator delete(v25[0]);
    if (SHIBYTE(v32) < 0)
      operator delete(v30);
    if (SHIBYTE(v35) < 0)
      operator delete(v33);
    goto LABEL_34;
  }
  if (a1[291])
  {
    sub_18D0778AC(&v33, a1 + 292);
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)v25 = 0u;
    v26 = 0u;
    v15 = swan::BatchLogParser::convertASCIIToStruct((uint64_t)v25, (uint64_t)&v33);
    sub_18D2C2EA8((_QWORD *)&v26 + 1);
    if (SBYTE7(v26) < 0)
      operator delete(v25[0]);
    if (SHIBYTE(v35) < 0)
    {
      operator delete(v33);
      if (!v15)
        goto LABEL_42;
    }
    else if (!v15)
    {
      goto LABEL_42;
    }
LABEL_34:
    v16 = 0;
    v17 = 0xFFFFFFFFLL;
    goto LABEL_54;
  }
LABEL_42:
  LODWORD(v22.__r_.__value_.__l.__data_) = 0;
  v25[0] = 0;
  v25[1] = 0;
  *(_QWORD *)&v26 = 0;
  sub_18D22D9C0(v25, v36);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_18D22D9C0(&v33, v36);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  sub_18D22D9C0(&v33, v36);
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  sub_18D2BF604((uint64_t)v23, v36);
  v18 = swan::BatchedGNSSDataSmoother::Run((uint64_t)a1, (uint64_t *)&v37, v36, &v22, v25, &v33, &v30, a2, a3, a4, (uint64_t *)v23);
  if (v18 | LODWORD(v22.__r_.__value_.__l.__data_))
    v17 = 0xFFFFFFFFLL;
  else
    v17 = 0;
  if (v23[0])
    operator delete(v23[0]);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  v16 = 1;
LABEL_54:
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if ((v16 & 1) == 0)
    return 0xFFFFFFFFLL;
  return v17;
}

void sub_18D2BF4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  if (a30 < 0)
    operator delete(__p);
  sub_18D2BF5CC((uint64_t)&a32);
  if (*(char *)(v33 - 121) < 0)
    operator delete(*(void **)(v33 - 144));
  if (*(char *)(v33 - 97) < 0)
    operator delete(*(void **)(v33 - 120));
  v35 = *(void **)(v33 - 88);
  if (v35)
  {
    *(_QWORD *)(v33 - 80) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18D2BF5CC(uint64_t a1)
{
  sub_18D2C2EA8((_QWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18D2BF604(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_18D07AFE4();
    v17 = 0uLL;
    v3 = (uint64_t *)sub_18D0788C8((uint64_t)&v17 + 8, ((a2 - 1) >> 6) + 1);
    v4 = *(_QWORD **)a1;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = v5 & 0x3F;
    *(_QWORD *)&v17 = v5;
    *((_QWORD *)&v17 + 1) = v7;
    v8 = (v5 - 1) >> 6;
    if (v5 < 0x41)
      v8 = 0;
    v3[v8] = 0;
    if (v5 > 0x3F || (v5 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v4[v5 >> 6];
      v12 = v4;
      v13 = v3;
      do
      {
        v14 = 1 << v9;
        if (((*v12 >> v10) & 1) != 0)
          v15 = *v13 | v14;
        else
          v15 = *v13 & ~v14;
        *v13 = v15;
        v12 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v13 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v6 || v12 != v11);
    }
    *(_QWORD *)a1 = v3;
    v16 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v17;
    *((_QWORD *)&v17 + 1) = *((_QWORD *)&v16 + 1);
    if (v4)
      operator delete(v4);
  }
}

void sub_18D2BF720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t swan::BatchedGNSSDataSmoother::Run(uint64_t a1, uint64_t *a2, unint64_t a3, _DWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t a8, uint64_t a9, unint64_t *a10, uint64_t *a11)
{
  uint64_t v15;
  unint64_t v19;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  double v51;
  uint64_t updated;
  uint64_t v53;
  void *__p[3];
  unint64_t v55;
  uint64_t v56;
  void *v57[3];
  void *v58[3];
  void *v59[3];
  void *v60[3];
  void *v61[3];
  void *v62[3];
  void *v63[3];
  void *v64[3];
  void *v65[3];
  void *v66[3];
  double v67[6];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[64];

  if (a5[1] != *a5 || a6[1] != *a6 || a7[1] != *a7 || *(_QWORD *)(a8 + 8) != *(_QWORD *)a8)
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)(a9 + 8) != *(_QWORD *)a9 || a11[1] != 0)
    return 0xFFFFFFFFLL;
  v19 = a3;
  sub_18D23A458(v66, a3);
  sub_18D2C2FEC(v65, v19);
  sub_18D2C30B4(v64, v19);
  sub_18D2C30B4(v63, v19);
  sub_18D23A458(v62, v19);
  sub_18D23A458(v61, v19);
  sub_18D2C2FEC(v60, v19);
  sub_18D2C3148(v59, v19);
  sub_18D2C2FEC(v58, v19);
  v22 = sub_18D2C3148(v57, v19);
  if (*(_BYTE *)(a1 + 805))
  {
    v19 = 224;
    swan::BatchedGNSSDataSmoother::LoadMATLAB((uint64_t)v22, (const char *)(a1 + 806), 0xE0uLL, v66, v65, v64, v63, (uint64_t)v83, (uint64_t)v67, v62, v61);
  }
  else
  {
    sub_18D213F2C((uint64_t)a6, v19);
    sub_18D2C03E8(a7, v19);
    if (swan::BatchedGNSSDataSmoother::formatData((double *)a1, a2, v19, (uint64_t)v83, (uint64_t)v67, v66, (uint64_t *)v65, (double **)v64, (double **)v63, a6, a7))goto LABEL_53;
    if (v19)
    {
      v29 = 0;
      v30 = v62[0];
      v31 = v61[0];
      do
      {
        v30[v29] = *(_QWORD *)(a1 + 1584);
        v31[v29++] = *(_QWORD *)(a1 + 1592);
      }
      while (v19 > v29);
    }
  }
  v56 = 0x4202A05F20000000;
  if (!swan::ForwardBackwardFixedIntervalSmoother::Update(a1 + 1640, (uint64_t)v83, (uint64_t)v67, v19, (uint64_t)v66, (uint64_t)v65, (uint64_t)v64, (uint64_t)v63, v62, v61, 1, v58, v57, (uint64_t)&v56, v60, v59))
  {
    if (v19)
    {
      v23 = v19;
      do
      {
        v24 = a11[1];
        v25 = a11[2];
        if (v24 == v25 << 6)
        {
          if ((uint64_t)(v24 + 1) < 0)
            sub_18D07AFE4();
          v26 = v25 << 7;
          if (v26 <= (v24 & 0xFFFFFFFFFFFFFFC0) + 64)
            v26 = (v24 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v24 <= 0x3FFFFFFFFFFFFFFELL)
            v27 = v26;
          else
            v27 = 0x7FFFFFFFFFFFFFFFLL;
          sub_18D2BF604((uint64_t)a11, v27);
          v24 = a11[1];
        }
        a11[1] = v24 + 1;
        *(_QWORD *)(*a11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
        --v23;
      }
      while (v23);
    }
    if (!*(_BYTE *)(a1 + 1575))
      goto LABEL_50;
    v55 = 0;
    sub_18D26FD4C(__p, v19);
    sub_18D2C0C20(__p, v19);
    if (swan::PositionVelocityDataEditor::TestNormalizedInnovations(*(double *)(a1 + 1576), a1 + 1641, v19, (uint64_t *)v60, (double **)v59, &v55, (uint64_t *)__p))goto LABEL_27;
    v32 = v55;
    v33 = v55 - 1;
    if (v55 - 1 >= vcvtad_u64_f64((double)v19 * 0.1))
      goto LABEL_46;
    if (v19)
    {
      v34 = 0;
      v35 = 0;
      v36 = *a11;
      do
      {
        *(_QWORD *)(v36 + 8 * (v34 >> 6)) &= ~(1 << v34);
        if (*(_QWORD *)__p[0] != v34)
        {
          v37 = 0;
          while (v33 != v37)
          {
            v38 = *((_QWORD *)__p[0] + ++v37);
            if (v38 == v34)
            {
              if (v37 < v32)
                goto LABEL_42;
              break;
            }
          }
          *((_QWORD *)v66[0] + v35) = *((_QWORD *)v66[0] + v34);
          v39 = (__int128 *)((char *)v65[0] + 48 * v34);
          v40 = (char *)v65[0] + 48 * v35;
          v41 = v39[2];
          v42 = *v39;
          v40[1] = v39[1];
          v40[2] = v41;
          *v40 = v42;
          v43 = (char *)v64[0] + 24 * v34;
          v44 = (char *)v64[0] + 24 * v35;
          v45 = *(_OWORD *)v43;
          *((_QWORD *)v44 + 2) = *((_QWORD *)v43 + 2);
          *(_OWORD *)v44 = v45;
          v46 = (char *)v63[0] + 24 * v34;
          v47 = (char *)v63[0] + 24 * v35;
          v48 = *(_OWORD *)v46;
          *((_QWORD *)v47 + 2) = *((_QWORD *)v46 + 2);
          *(_OWORD *)v47 = v48;
          *(_QWORD *)(*a6 + 8 * v35) = *(_QWORD *)(*a6 + 8 * v34);
          *(_DWORD *)(*a7 + 4 * v35) = *(_DWORD *)(*a7 + 4 * v34);
          v36 = *a11;
          *(_QWORD *)(*a11 + 8 * (v34 >> 6)) |= 1 << v34;
          ++v35;
        }
LABEL_42:
        ++v34;
      }
      while (v34 != v19);
    }
    v49 = 0;
    v50 = (char *)v65[0];
    do
    {
      *(_QWORD *)&v83[v49] = *(_QWORD *)&v50[v49];
      v49 += 8;
    }
    while (v49 != 48);
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    memset(v67, 0, sizeof(v67));
    v51 = *((double *)v64[0] + 1) * *((double *)v64[0] + 1);
    v67[0] = *(double *)v64[0] * *(double *)v64[0];
    *((double *)&v68 + 1) = v51;
    *(double *)&v72 = *((double *)v64[0] + 2) * *((double *)v64[0] + 2);
    *((double *)&v75 + 1) = *(double *)v63[0] * *(double *)v63[0];
    *(double *)&v79 = *((double *)v63[0] + 1) * *((double *)v63[0] + 1);
    *((double *)&v82 + 1) = *((double *)v63[0] + 2) * *((double *)v63[0] + 2);
    v19 -= v32;
    if (swan::ForwardBackwardFixedIntervalSmoother::Update(a1 + 1640, (uint64_t)v83, (uint64_t)v67, v19, (uint64_t)v66, (uint64_t)v65, (uint64_t)v64, (uint64_t)v63, v62, v61, 1, v58, v57, (uint64_t)&v56, v60, v59))LABEL_27:v28 = 0;
    else
LABEL_46:
      v28 = 1;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v28 & 1) != 0)
    {
LABEL_50:
      __p[0] = 0;
      updated = swan::ConsistencyChecker::UpdateNormalizedInnovationsSquared(a1 + 1642, v19, 6u, v60, v59, (double *)__p);
      *a4 = 0;
      v53 = swan::BatchedGNSSDataSmoother::CopySmootherOutputs(updated, v19, (uint64_t *)v66, v58, v57, (uint64_t)a5, (void **)a8, (void **)a9);
      if (*(_BYTE *)(a1 + 548))
        swan::BatchedGNSSDataSmoother::SaveToDisk(v53, (const char *)(a1 + 549), v19, v66, v58, v57, v60, v59);
      v15 = 0;
      *a10 = v19;
      goto LABEL_54;
    }
  }
LABEL_53:
  v15 = 0xFFFFFFFFLL;
LABEL_54:
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  return v15;
}

void sub_18D2BFDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  if (a34)
    operator delete(a34);
  if (a37)
    operator delete(a37);
  if (a40)
    operator delete(a40);
  if (a43)
    operator delete(a43);
  if (a46)
    operator delete(a46);
  if (a49)
    operator delete(a49);
  if (a52)
    operator delete(a52);
  _Unwind_Resume(exception_object);
}

uint64_t swan::BatchedGNSSDataSmoother::LoadMATLAB(uint64_t a1, const char *a2, unint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  FILE *v18;
  FILE *v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  FILE *v23;
  FILE *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  FILE *v29;
  FILE *v30;
  unint64_t v31;
  unsigned int v32;
  FILE *v33;
  FILE *v34;
  unint64_t v35;
  unsigned int v36;
  FILE *v37;
  FILE *v38;
  uint64_t i;
  FILE *v40;
  FILE *v41;
  uint64_t j;
  FILE *v43;
  FILE *v44;
  unint64_t v45;
  unsigned int v46;
  FILE *v47;
  FILE *v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v52;
  char __str[256];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x100uLL, "%s%s", a2, "t_noisy.txt");
  v18 = fopen(__str, "r");
  if (!v18)
    goto LABEL_32;
  v19 = v18;
  v52 = a8;
  v20 = a2;
  if (a3)
  {
    v21 = 0;
    v22 = a3;
    do
    {
      fscanf(v19, "%lf\n", *a4 + v21);
      v21 += 8;
      --v22;
    }
    while (v22);
  }
  fclose(v19);
  snprintf(__str, 0x100uLL, "%s%s", a2, "x_noisy.txt");
  v23 = fopen(__str, "r");
  if (!v23)
    goto LABEL_32;
  v24 = v23;
  if (a3)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      v27 = *a5 + 48 * v25;
      fscanf(v24, "%lf %lf %lf %lf %lf %lf\n", v27, v27 + 8, v27 + 16, v27 + 24, v27 + 32, v27 + 40);
      v25 = v26++;
    }
    while (v25 < a3);
  }
  fclose(v24);
  v28 = v20;
  snprintf(__str, 0x100uLL, "%s%s", v20, "sigma_x.txt");
  v29 = fopen(__str, "r");
  if (!v29)
    goto LABEL_32;
  v30 = v29;
  if (a3)
  {
    v31 = 0;
    v32 = 1;
    do
    {
      fscanf(v30, "%lf %lf %lf\n", *a6 + 24 * v31, *a6 + 24 * v31 + 8, *a6 + 24 * v31 + 16);
      v31 = v32++;
    }
    while (v31 < a3);
  }
  fclose(v30);
  snprintf(__str, 0x100uLL, "%s%s", v20, "sigma_vx.txt");
  v33 = fopen(__str, "r");
  if (!v33)
    goto LABEL_32;
  v34 = v33;
  if (a3)
  {
    v35 = 0;
    v36 = 1;
    do
    {
      fscanf(v34, "%lf %lf %lf\n", *a7 + 24 * v35, *a7 + 24 * v35 + 8, *a7 + 24 * v35 + 16);
      v35 = v36++;
    }
    while (v35 < a3);
  }
  fclose(v34);
  snprintf(__str, 0x100uLL, "%s%s", v20, "x0.txt");
  v37 = fopen(__str, "r");
  if (!v37)
    goto LABEL_32;
  v38 = v37;
  for (i = 0; i != 48; i += 8)
    fscanf(v38, "%lf\n", v52 + i);
  fclose(v38);
  snprintf(__str, 0x100uLL, "%s%s", v20, "P0.txt");
  v40 = fopen(__str, "r");
  if (!v40)
    goto LABEL_32;
  v41 = v40;
  for (j = 0; j != 288; j += 48)
    fscanf(v41, "%lf %lf %lf %lf %lf %lf\n", a9 + j, a9 + j + 8, a9 + j + 16, a9 + j + 24, a9 + j + 32, a9 + j + 40);
  fclose(v41);
  snprintf(__str, 0x100uLL, "%s%s", v28, "sigma_wx_horizontal.txt");
  v43 = fopen(__str, "r");
  if (!v43)
    goto LABEL_32;
  if (a3)
  {
    v44 = v43;
    v45 = 0;
    v46 = 1;
    do
    {
      fscanf(v44, "%lf\n", *a10 + 8 * v45);
      v45 = v46++;
    }
    while (v45 < a3);
  }
  snprintf(__str, 0x100uLL, "%s%s", v28, "sigma_wx_vertical.txt");
  v47 = fopen(__str, "r");
  if (v47)
  {
    v48 = v47;
    if (a3)
    {
      v49 = 0;
      v50 = 1;
      do
      {
        fscanf(v48, "%lf\n", *a11 + 8 * v49);
        v49 = v50++;
      }
      while (v49 < a3);
    }
    fclose(v48);
    return 0;
  }
  else
  {
LABEL_32:
    printf("Error opening %s. Exiting.\n", __str);
    return 0xFFFFFFFFLL;
  }
}

void sub_18D2C03E8(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 2)
  {
    bzero(v4, 4 * v6);
    v20 = &v4[4 * v6];
LABEL_15:
    a1[1] = v20;
    return;
  }
  if (a2 >> 62)
    sub_18D07AFE4();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 1;
  if (v9 >> 1 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
    v11 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)sub_18D164CD4(v7, v11);
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  v15 = &v12[4 * v5];
  v17 = &v12[4 * v16];
  bzero(v15, 4 * v6);
  v18 = &v15[4 * v6];
  while (v14 != v13)
  {
    v19 = *((_DWORD *)v14 - 1);
    v14 -= 4;
    *((_DWORD *)v15 - 1) = v19;
    v15 -= 4;
  }
  *a1 = v15;
  a1[1] = v18;
  a1[2] = v17;
  if (v13)
    operator delete(v13);
}

uint64_t swan::BatchedGNSSDataSmoother::formatData(double *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t *a7, double **a8, double **a9, _QWORD *a10, _QWORD *a11)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  __double2 v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  double *v32;
  double *v33;
  double *v34;
  int v35;
  double v36;
  double *v37;
  double *v38;
  int v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v48;
  double *v49;
  int v50;
  double *v51;
  double v52;
  double *v53;
  double *v54;
  int v55;
  double v56;
  double v57;
  double v58;
  double *v59;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  int v65;
  void *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  void *v73;
  __int128 v74;
  uint64_t v75;
  double *v76;
  uint64_t v77;
  void *v78;
  __int128 v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  double *v86;
  uint64_t v87;
  void (**v88)(cnnavigation::ENUToECEFJacobian *__hidden);
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE v93[72];
  float64x2_t v94;
  uint64_t v95;
  float64x2_t v96;
  double v97;
  __int128 v98;
  uint64_t v99;
  float64x2_t v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v16 = 0;
    v65 = *(_DWORD *)(*a2 + 92);
    v64 = *(double *)(*a2 + 96) / 1000.0;
    v17 = 1;
    v62 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
    v63 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    while (1)
    {
      v18 = *a2;
      v19 = *a2 + 248 * v16;
      v20 = *(_DWORD *)(v19 + 92);
      *(double *)(*a6 + 8 * v16) = *(double *)(v19 + 96) / 1000.0 - v64 + (double)(v20 - v65) * 604800.0;
      *(double *)(*a10 + 8 * v16) = *(double *)(v19 + 96) / 1000.0;
      *(_DWORD *)(*a11 + 4 * v16) = v20;
      v100 = vdivq_f64(vmulq_f64(*(float64x2_t *)(v19 + 8), v63), v62);
      v101 = *(_QWORD *)(v19 + 64);
      if (cnnavigation::LLAToECEF(v100.f64, 1, (double *)&v98, 0, (uint64_t)&v88))
        break;
      v21 = *a7 + 48 * v16;
      *(_OWORD *)v21 = v98;
      *(_QWORD *)(v21 + 16) = v99;
      v22 = *(double *)(v18 + 248 * v16 + 56);
      v23 = 0.0;
      v24 = 0.0;
      if (v22 > 0.0)
      {
        v25 = *(double *)(v18 + 248 * v16 + 48);
        v26 = __sincos_stret(v22 * 3.14159265 / 180.0);
        v23 = v26.__cosval * v25;
        v24 = v26.__sinval * v25;
      }
      v96.f64[0] = v23;
      v96.f64[1] = v24;
      v27 = *(double *)(v18 + 248 * v16 + 232);
      if (v27 > a1[201])
        v27 = 0.0;
      v97 = v27;
      LOBYTE(v89) = 0;
      v91 = 0x300000003;
      *((_QWORD *)&v89 + 1) = &unk_1E25C78E0;
      v90 = xmmword_18D30BB60;
      v92 = v93;
      v88 = &off_1E25B9588;
      v28 = cnnavigation::ENUToECEF((__int128 *)&v96, 1, 0, (uint64_t)&v98, 1, &v94, (uint64_t)&v88);
      if ((_DWORD)v28)
        break;
      v29 = *a7;
      v30 = *a7 + 48 * v16;
      *(float64x2_t *)(v30 + 24) = v94;
      *(_QWORD *)(v30 + 40) = v95;
      if (!v16)
      {
        for (i = 0; i != 48; i += 8)
          *(_QWORD *)(a4 + i) = *(_QWORD *)(v29 + i);
      }
      v85 = 0x200000002;
      v83 = &unk_1E25C75B0;
      v84 = xmmword_18D319340;
      v86 = (double *)&v87;
      swan::BatchedGNSSDataSmoother::convertErrorEllipseToCovariance(*(double *)(*a2 + 248 * v16 + 128), *(double *)(*a2 + 248 * v16 + 136), *(double *)(*a2 + 248 * v16 + 144) * 3.14159265 / 180.0, v28, (uint64_t)&v83);
      v80 = 0x300000003;
      v78 = &unk_1E25C78E0;
      v79 = xmmword_18D30BB60;
      v81 = (double *)&v82;
      *(_QWORD *)&v90 = 0x300000003;
      v88 = (void (**)(cnnavigation::ENUToECEFJacobian *__hidden))&unk_1E25C78E0;
      *((_QWORD *)&v90 + 1) = &v91;
      v89 = xmmword_18D30BB60;
      sub_18D04BE88((uint64_t)&v88, 0.0);
      sub_18D053AA8((uint64_t)&v78, (uint64_t)&v88);
      v32 = v86;
      v33 = v81;
      *v81 = *v86;
      v34 = &v32[SHIDWORD(v84)];
      v35 = HIDWORD(v79);
      v33[SHIDWORD(v79)] = *v34;
      v33[1] = v32[1];
      v33[v35 + 1] = v34[1];
      v36 = *(double *)(*a2 + 248 * v16 + 72);
      v33[2 * v35 + 2] = v36 * v36;
      LOBYTE(v89) = 0;
      v91 = 0x300000003;
      *((_QWORD *)&v89 + 1) = &unk_1E25C78E0;
      v90 = xmmword_18D30BB60;
      v92 = v93;
      v88 = &off_1E25B9588;
      if (cnnavigation::ENUToECEF(&v98, 1, 0, (uint64_t)&v98, 1, &v96, (uint64_t)&v88))
        break;
      v75 = 0x300000003;
      v73 = &unk_1E25C78E0;
      v74 = xmmword_18D30BB60;
      v76 = (double *)&v77;
      sub_18D04BB5C((uint64_t)&v88, (uint64_t)&v78, (uint64_t)&v73);
      v37 = v76;
      v38 = &(*a8)[3 * v16];
      *v38 = sqrt(*v76);
      v39 = HIDWORD(v74);
      v38[1] = sqrt(v37[HIDWORD(v74) + 1]);
      v38[2] = sqrt(v37[2 * v39 + 2]);
      v40 = (double *)(*a2 + 248 * v16);
      v41 = v40[14] / 1.41421356;
      v42 = v40[6];
      if (fabs(v42) < 2.22044605e-16 && v41 < a1[202])
        v41 = a1[202];
      v43 = v40[30];
      v44 = *a2 + 248 * v16;
      v45 = *(double *)(v44 + 120);
      v46 = fabs(v45);
      if (v45 < 0.0 || v46 < 2.22044605e-16)
        v48 = 21.2132;
      else
        v48 = v41;
      if (sqrt(*(double *)(v44 + 232) * *(double *)(v44 + 232) + v42 * v42) > a1[203])
        v48 = a1[204];
      v70 = 0x300000003;
      v68 = &unk_1E25C78E0;
      v71 = &v72;
      v69 = xmmword_18D30BB60;
      sub_18D04BE88((uint64_t)&v68, 0.0);
      sub_18D053AA8((uint64_t)&v78, (uint64_t)&v68);
      v49 = v81;
      *v81 = v48 * v48;
      v50 = HIDWORD(v79);
      v49[HIDWORD(v79) + 1] = v48 * v48;
      v49[2 * v50 + 2] = v43 * v43;
      sub_18D04BB5C((uint64_t)&v88, (uint64_t)&v78, (uint64_t)&v73);
      v51 = v76;
      v52 = sqrt(*v76);
      v53 = *a9;
      v54 = &(*a9)[3 * v16];
      *v54 = v52;
      v55 = HIDWORD(v74);
      v56 = sqrt(v51[HIDWORD(v74) + 1]);
      v54[1] = v56;
      v57 = sqrt(v51[2 * v55 + 2]);
      v54[2] = v57;
      v58 = a1[200];
      *v54 = v52 * v58;
      v54[1] = v56 * v58;
      v54[2] = v57 * v58;
      if (!v16)
      {
        *(_OWORD *)(a5 + 256) = 0u;
        *(_OWORD *)(a5 + 272) = 0u;
        *(_OWORD *)(a5 + 224) = 0u;
        *(_OWORD *)(a5 + 240) = 0u;
        *(_OWORD *)(a5 + 192) = 0u;
        *(_OWORD *)(a5 + 208) = 0u;
        *(_OWORD *)(a5 + 160) = 0u;
        *(_OWORD *)(a5 + 176) = 0u;
        *(_OWORD *)(a5 + 128) = 0u;
        *(_OWORD *)(a5 + 144) = 0u;
        *(_OWORD *)(a5 + 96) = 0u;
        *(_OWORD *)(a5 + 112) = 0u;
        *(_OWORD *)(a5 + 64) = 0u;
        *(_OWORD *)(a5 + 80) = 0u;
        *(_OWORD *)(a5 + 32) = 0u;
        *(_OWORD *)(a5 + 48) = 0u;
        *(_OWORD *)a5 = 0u;
        *(_OWORD *)(a5 + 16) = 0u;
        v59 = *a8;
        *(double *)a5 = **a8 * **a8;
        *(double *)(a5 + 56) = v59[1] * v59[1];
        *(double *)(a5 + 112) = v59[2] * v59[2];
        *(double *)(a5 + 168) = *v53 * *v53;
        *(double *)(a5 + 224) = v53[1] * v53[1];
        *(double *)(a5 + 280) = v53[2] * v53[2];
      }
      v17 = ++v16 < a3;
      if (v16 == a3)
        goto LABEL_27;
    }
  }
  else
  {
LABEL_27:
    v17 = 0;
  }
  return (v17 << 31 >> 31);
}

void sub_18D2C0C20(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_18D0788C8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t swan::BatchedGNSSDataSmoother::CopySmootherOutputs(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, void **a7, void **a8)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  _OWORD *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  char *v40;
  char *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v62;
  _OWORD __dst[18];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v14 = 0;
    v62 = a6 + 16;
    do
    {
      v15 = *a3;
      v17 = *(_QWORD **)(a6 + 8);
      v16 = *(_QWORD *)(a6 + 16);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *(_QWORD **)a6;
        v20 = ((uint64_t)v17 - *(_QWORD *)a6) >> 3;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          sub_18D07AFE4();
        v22 = v16 - (_QWORD)v19;
        if (v22 >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)sub_18D0788C8(v62, v23);
          v19 = *(_QWORD **)a6;
          v17 = *(_QWORD **)(a6 + 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = *(_QWORD *)(v15 + 8 * v14);
        v18 = v25 + 8;
        while (v17 != v19)
        {
          v26 = *--v17;
          *((_QWORD *)v25 - 1) = v26;
          v25 -= 8;
        }
        *(_QWORD *)a6 = v25;
        *(_QWORD *)(a6 + 8) = v18;
        *(_QWORD *)(a6 + 16) = &v24[8 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v17 = *(_QWORD *)(v15 + 8 * v14);
        v18 = v17 + 1;
      }
      *(_QWORD *)(a6 + 8) = v18;
      v27 = (_OWORD *)(*a4 + 48 * v14);
      v28 = v27[1];
      __dst[0] = *v27;
      __dst[1] = v28;
      __dst[2] = v27[2];
      v29 = a7[1];
      v30 = (unint64_t)a7[2];
      if ((unint64_t)v29 >= v30)
      {
        v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (_BYTE *)*a7) >> 4);
        v35 = v34 + 1;
        if (v34 + 1 > 0x555555555555555)
          sub_18D07AFE4();
        if (0x5555555555555556 * ((uint64_t)(v30 - (_QWORD)*a7) >> 4) > v35)
          v35 = 0x5555555555555556 * ((uint64_t)(v30 - (_QWORD)*a7) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)*a7) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v36 = 0x555555555555555;
        else
          v36 = v35;
        if (v36)
          v36 = (unint64_t)sub_18D2C3070(v36);
        else
          v37 = 0;
        v38 = (_OWORD *)(v36 + 48 * v34);
        v39 = __dst[1];
        *v38 = __dst[0];
        v38[1] = v39;
        v38[2] = __dst[2];
        v41 = (char *)*a7;
        v40 = (char *)a7[1];
        v42 = v38;
        if (v40 != *a7)
        {
          do
          {
            v43 = *((_OWORD *)v40 - 3);
            v44 = *((_OWORD *)v40 - 1);
            *(v42 - 2) = *((_OWORD *)v40 - 2);
            *(v42 - 1) = v44;
            *(v42 - 3) = v43;
            v42 -= 3;
            v40 -= 48;
          }
          while (v40 != v41);
          v40 = (char *)*a7;
        }
        v33 = v38 + 3;
        *a7 = v42;
        a7[1] = v38 + 3;
        a7[2] = (void *)(v36 + 48 * v37);
        if (v40)
          operator delete(v40);
      }
      else
      {
        v31 = *v27;
        v32 = v27[2];
        v29[1] = v27[1];
        v29[2] = v32;
        *v29 = v31;
        v33 = v29 + 3;
      }
      a7[1] = v33;
      ++v14;
    }
    while (v14 != a2);
    v45 = 0;
    v46 = (char *)a8[1];
    do
    {
      v47 = (const void *)(*a5 + 288 * v45);
      memcpy(__dst, v47, sizeof(__dst));
      v48 = (unint64_t)a8[2];
      if ((unint64_t)v46 >= v48)
      {
        v49 = 0x8E38E38E38E38E39 * ((v46 - (_BYTE *)*a8) >> 5);
        v50 = v49 + 1;
        if (v49 + 1 > 0xE38E38E38E38E3)
          sub_18D07AFE4();
        v51 = 0x8E38E38E38E38E39 * ((uint64_t)(v48 - (_QWORD)*a8) >> 5);
        if (2 * v51 > v50)
          v50 = 2 * v51;
        if (v51 >= 0x71C71C71C71C71)
          v52 = 0xE38E38E38E38E3;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)sub_18D2C31D0(v52);
          v55 = v54;
        }
        else
        {
          v53 = 0;
          v55 = 0;
        }
        v56 = &v53[288 * v49];
        memcpy(v56, __dst, 0x120uLL);
        v58 = (char *)*a8;
        v57 = (char *)a8[1];
        v59 = v56;
        if (v57 != *a8)
        {
          do
          {
            v59 -= 288;
            v57 -= 288;
            memcpy(v59, v57, 0x120uLL);
          }
          while (v57 != v58);
          v57 = (char *)*a8;
        }
        v60 = &v53[288 * v55];
        v46 = v56 + 288;
        *a8 = v59;
        a8[1] = v56 + 288;
        a8[2] = v60;
        if (v57)
          operator delete(v57);
      }
      else
      {
        memmove(v46, v47, 0x120uLL);
        v46 += 288;
      }
      a8[1] = v46;
      ++v45;
    }
    while (v45 != a2);
  }
  return 0;
}

uint64_t swan::BatchedGNSSDataSmoother::SaveToDisk(uint64_t a1, const char *a2, unint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  FILE *v15;
  FILE *v16;
  uint64_t v17;
  FILE *v18;
  FILE *v19;
  uint64_t v20;
  unint64_t v21;
  double *v22;
  FILE *v23;
  FILE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  double *v28;
  FILE *v29;
  FILE *v30;
  unint64_t v31;
  unsigned int v32;
  double *v33;
  FILE *v34;
  FILE *v35;
  unint64_t v36;
  uint64_t j;
  double *v38;
  char __str[256];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x100uLL, "%s%s", a2, "t_out.txt");
  v15 = fopen(__str, "w");
  if (!v15)
    goto LABEL_26;
  v16 = v15;
  if (a3)
  {
    v17 = 0;
    do
      fprintf(v16, "%.15le\n", *(double *)(*a4 + 8 * v17++));
    while (a3 != v17);
  }
  fclose(v16);
  snprintf(__str, 0x100uLL, "%s%s", a2, "x_out.txt");
  v18 = fopen(__str, "w");
  if (!v18)
    goto LABEL_26;
  v19 = v18;
  if (a3)
  {
    v20 = 0;
    v21 = a3;
    do
    {
      v22 = (double *)(*a5 + v20);
      fprintf(v19, "%.15le %.15le %.15le %.15le %.15le %.15le\n", *v22, v22[1], v22[2], v22[3], v22[4], v22[5]);
      v20 += 48;
      --v21;
    }
    while (v21);
  }
  fclose(v19);
  snprintf(__str, 0x100uLL, "%s%s", a2, "P_out.txt");
  v23 = fopen(__str, "w");
  if (!v23)
    goto LABEL_26;
  v24 = v23;
  if (a3)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      for (i = 0; i != 288; i += 48)
      {
        v28 = (double *)(*a6 + v25 + i);
        fprintf(v24, "%.15le %.15le %.15le %.15le %.15le %.15le\n", *v28, v28[1], v28[2], v28[3], v28[4], v28[5]);
      }
      ++v26;
      v25 += 288;
    }
    while (v26 != a3);
  }
  fclose(v24);
  snprintf(__str, 0x100uLL, "%s%s", a2, "nu.txt");
  v29 = fopen(__str, "w");
  if (!v29)
    goto LABEL_26;
  v30 = v29;
  if (a3)
  {
    v31 = 0;
    v32 = 1;
    do
    {
      v33 = (double *)(*a7 + 48 * v31);
      fprintf(v30, "%.15le %.15le %.15le %.15le %.15le %.15le\n", *v33, v33[1], v33[2], v33[3], v33[4], v33[5]);
      v31 = v32++;
    }
    while (v31 < a3);
  }
  fclose(v30);
  snprintf(__str, 0x100uLL, "%s%s", a2, "P_nu.txt");
  v34 = fopen(__str, "w");
  if (v34)
  {
    v35 = v34;
    if (a3)
    {
      LODWORD(v36) = 0;
      do
      {
        for (j = 0; j != 288; j += 48)
        {
          v38 = (double *)(*a8 + 288 * v36 + j);
          fprintf(v35, "%.15le %.15le %.15le %.15le %.15le %.15le\n", *v38, v38[1], v38[2], v38[3], v38[4], v38[5]);
        }
        v36 = (v36 + 1);
      }
      while (v36 < a3);
    }
    fclose(v35);
    return 0;
  }
  else
  {
LABEL_26:
    printf("Error opening %s. Exiting.\n", __str);
    return 0xFFFFFFFFLL;
  }
}

uint64_t swan::BatchedGNSSDataSmoother::SaveToDisk(uint64_t a1, const char *a2, unint64_t a3, double *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9)
{
  FILE *v16;
  FILE *v17;
  unint64_t v18;
  unsigned int v19;
  FILE *v20;
  FILE *v21;
  unint64_t v22;
  unsigned int v23;
  double *v24;
  FILE *v25;
  FILE *v26;
  uint64_t i;
  uint64_t v28;
  FILE *v29;
  FILE *v30;
  FILE *v31;
  FILE *v32;
  unint64_t v33;
  unsigned int v34;
  FILE *v35;
  FILE *v36;
  unint64_t v37;
  unsigned int v38;
  char __str[256];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x100uLL, "%s%s", a2, "t_in.txt");
  v16 = fopen(__str, "w");
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (a3)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      fprintf(v17, "%.15le\n", *(double *)(*a6 + 8 * v18));
      v18 = v19++;
    }
    while (v18 < a3);
  }
  fclose(v17);
  snprintf(__str, 0x100uLL, "%s%s", a2, "x_in.txt");
  v20 = fopen(__str, "w");
  if (!v20)
    goto LABEL_22;
  v21 = v20;
  if (a3)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      v24 = (double *)(*a7 + 48 * v22);
      fprintf(v21, "%.15le %.15le %.15le %.15le %.15le %.15le\n", *v24, v24[1], v24[2], v24[3], v24[4], v24[5]);
      v22 = v23++;
    }
    while (v22 < a3);
  }
  fclose(v21);
  snprintf(__str, 0x100uLL, "%s%s", a2, "P0.txt");
  v25 = fopen(__str, "w");
  if (!v25)
    goto LABEL_22;
  v26 = v25;
  for (i = 0; i != 288; i += 48)
  {
    v28 = a5 + 24;
    fprintf(v26, "%.15le %.15le %.15le %.15le %.15le %.15le\n", *(double *)(v28 + i - 24), *(double *)(v28 + i - 16), *(double *)(v28 + i - 8), *(double *)(v28 + i), *(double *)(v28 + i + 8), *(double *)(v28 + i + 16));
  }
  fclose(v26);
  snprintf(__str, 0x100uLL, "%s%s", a2, "x0.txt");
  v29 = fopen(__str, "w");
  if (!v29)
    goto LABEL_22;
  v30 = v29;
  fprintf(v29, "%.15le %.15le %.15le %.15le %.15le %.15le\n", *a4, a4[1], a4[2], a4[3], a4[4], a4[5]);
  fclose(v30);
  snprintf(__str, 0x100uLL, "%s%s", a2, "sigma_x.txt");
  v31 = fopen(__str, "w");
  if (!v31)
    goto LABEL_22;
  v32 = v31;
  if (a3)
  {
    v33 = 0;
    v34 = 1;
    do
    {
      fprintf(v32, "%.15le %.15le %.15le\n", *(double *)(*a8 + 24 * v33), *(double *)(*a8 + 24 * v33 + 8), *(double *)(*a8 + 24 * v33 + 16));
      v33 = v34++;
    }
    while (v33 < a3);
  }
  fclose(v32);
  snprintf(__str, 0x100uLL, "%s%s", a2, "sigma_vx.txt");
  v35 = fopen(__str, "w");
  if (v35)
  {
    v36 = v35;
    if (a3)
    {
      v37 = 0;
      v38 = 1;
      do
      {
        fprintf(v36, "%.15le %.15le %.15le\n", *(double *)(*a9 + 24 * v37), *(double *)(*a9 + 24 * v37 + 8), *(double *)(*a9 + 24 * v37 + 16));
        v37 = v38++;
      }
      while (v37 < a3);
    }
    fclose(v36);
    return 0;
  }
  else
  {
LABEL_22:
    printf("Error opening %s. Exiting.\n", __str);
    return 0xFFFFFFFFLL;
  }
}

void swan::BatchedGNSSDataSmoother::convertErrorEllipseToCovariance(double a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  double *v9;
  __double2 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;
  int v17;
  int v18;
  int i;
  void **v20;
  void *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v28[4];
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD v43[4];
  void *v44;
  __int128 v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;

  v46 = 0x200000002;
  v44 = &unk_1E25C75B0;
  v45 = xmmword_18D319340;
  v47 = (double *)&v48;
  v41 = 0x200000002;
  v39 = &unk_1E25C75B0;
  v42 = v43;
  v40 = xmmword_18D319340;
  sub_18D04BE88((uint64_t)&v39, 0.0);
  sub_18D053AA8((uint64_t)&v44, (uint64_t)&v39);
  v9 = v47;
  *v47 = a1 * a1 * 0.1669041;
  v9[SHIDWORD(v45) + 1] = a2 * a2 * 0.1669041;
  if (a3 == 0.0)
  {
    v20 = &v44;
  }
  else
  {
    v41 = 0x200000002;
    v39 = &unk_1E25C75B0;
    v40 = xmmword_18D319340;
    v42 = v43;
    v10 = __sincos_stret(a3);
    v43[0] = *(_QWORD *)&v10.__cosval;
    v43[1] = *(_QWORD *)&v10.__sinval;
    *(double *)&v43[2] = -v10.__sinval;
    v43[3] = *(_QWORD *)&v10.__cosval;
    v31 = 0x200000002;
    v29 = &unk_1E25C75B0;
    v30 = xmmword_18D319340;
    v32 = &v33;
    sub_18D053B2C((uint64_t)&v39, (uint64_t)&v44, (uint64_t)&v29);
    v12 = v40;
    v11 = DWORD1(v40);
    v26 = 0x200000002;
    v21 = &unk_1E25C75B0;
    v27 = v28;
    v22 = DWORD1(v40);
    v23 = v40;
    v24 = v40 * DWORD1(v40);
    v25 = DWORD1(v40);
    if (DWORD1(v40))
    {
      v13 = 0;
      v14 = 0;
      v15 = HIDWORD(v40);
      v16 = v42;
      do
      {
        v17 = v13;
        v18 = v14;
        for (i = v12; i; --i)
        {
          v28[v18] = v16[v17];
          v18 += v11;
          ++v17;
        }
        ++v14;
        v13 += v15;
      }
      while (v14 != v11);
    }
    v36 = 0x200000002;
    v34 = &unk_1E25C75B0;
    v35 = xmmword_18D319340;
    v37 = &v38;
    sub_18D053B2C((uint64_t)&v29, (uint64_t)&v21, (uint64_t)&v34);
    v20 = &v34;
  }
  sub_18D053AA8(a5, (uint64_t)v20);
}

uint64_t swan::BatchedGNSSDataSmoother::formatData(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8, double *a9)
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  double *v21;
  double *v22;
  double *v23;
  int v24;
  double v25;
  double *v26;
  double *v27;
  int v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  int v34;
  double *v35;
  double v36;
  double *v37;
  int v38;
  double v39;
  double v40;
  double v41;
  float64x2_t v44;
  float64x2_t v45;
  int v46;
  void *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  __int128 v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  void *v65;
  __int128 v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;
  void (**v70)(cnnavigation::ENUToECEFJacobian *__hidden);
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[72];
  float64x2_t v76;
  uint64_t v77;
  float64x2_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  float64x2_t v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v13 = 0;
    v46 = *(_DWORD *)(*a2 + 24);
    v14 = *(double *)(*a2 + 16);
    v44 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
    v45 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    do
    {
      v15 = *a2;
      v16 = *a2 + 264 * v13;
      *(double *)(a6 + 8 * v13) = *(double *)(v16 + 16) - v14 + (double)(*(_DWORD *)(v16 + 24) - v46) * 604800.0;
      v82 = vdivq_f64(vmulq_f64(*(float64x2_t *)(v16 + 48), v45), v44);
      v83 = *(_QWORD *)(v16 + 64);
      if (cnnavigation::LLAToECEF(v82.f64, 1, (double *)&v80, 0, (uint64_t)&v70))
        break;
      v17 = a7 + 48 * v13;
      *(_OWORD *)v17 = v80;
      *(_QWORD *)(v17 + 16) = v81;
      v18 = v15 + 264 * v13;
      v78.f64[0] = *(float64_t *)(v18 + 152);
      v78.f64[1] = *(float64_t *)(v18 + 152);
      v79 = *(_QWORD *)(v18 + 160);
      LOBYTE(v71) = 0;
      v73 = 0x300000003;
      *((_QWORD *)&v71 + 1) = &unk_1E25C78E0;
      v72 = xmmword_18D30BB60;
      v74 = v75;
      v70 = &off_1E25B9588;
      v19 = cnnavigation::ENUToECEF((__int128 *)&v78, 1, 0, (uint64_t)&v80, 1, &v76, (uint64_t)&v70);
      if ((_DWORD)v19)
        break;
      *(float64x2_t *)(v17 + 24) = v76;
      *(_QWORD *)(v17 + 40) = v77;
      if (!v13)
      {
        for (i = 0; i != 48; i += 8)
          *(_QWORD *)(a4 + i) = *(_QWORD *)(a7 + i);
      }
      v67 = 0x200000002;
      v65 = &unk_1E25C75B0;
      v66 = xmmword_18D319340;
      v68 = (double *)&v69;
      swan::BatchedGNSSDataSmoother::convertErrorEllipseToCovariance(*(double *)(*a2 + 264 * v13 + 120), *(double *)(*a2 + 264 * v13 + 128), *(double *)(*a2 + 264 * v13 + 136) * 3.14159265 / 180.0, v19, (uint64_t)&v65);
      v62 = 0x300000003;
      v60 = &unk_1E25C78E0;
      v61 = xmmword_18D30BB60;
      v63 = (double *)&v64;
      *(_QWORD *)&v72 = 0x300000003;
      v70 = (void (**)(cnnavigation::ENUToECEFJacobian *__hidden))&unk_1E25C78E0;
      *((_QWORD *)&v72 + 1) = &v73;
      v71 = xmmword_18D30BB60;
      sub_18D04BE88((uint64_t)&v70, 0.0);
      sub_18D053AA8((uint64_t)&v60, (uint64_t)&v70);
      v21 = v68;
      v22 = v63;
      *v63 = *v68;
      v23 = &v21[SHIDWORD(v66)];
      v24 = HIDWORD(v61);
      v22[SHIDWORD(v61)] = *v23;
      v22[1] = v21[1];
      v22[v24 + 1] = v23[1];
      v25 = *(double *)(*a2 + 264 * v13 + 144);
      v22[2 * v24 + 2] = v25 * v25;
      LOBYTE(v71) = 0;
      v73 = 0x300000003;
      *((_QWORD *)&v71 + 1) = &unk_1E25C78E0;
      v72 = xmmword_18D30BB60;
      v74 = v75;
      v70 = &off_1E25B9588;
      if (cnnavigation::ENUToECEF(&v80, 1, 0, (uint64_t)&v80, 1, &v78, (uint64_t)&v70))
        break;
      v57 = 0x300000003;
      v55 = &unk_1E25C78E0;
      v56 = xmmword_18D30BB60;
      v58 = (double *)&v59;
      sub_18D04BB5C((uint64_t)&v70, (uint64_t)&v60, (uint64_t)&v55);
      v26 = v58;
      v27 = &a8[3 * v13];
      *v27 = sqrt(*v58);
      v28 = HIDWORD(v56);
      v27[1] = sqrt(v26[HIDWORD(v56) + 1]);
      v27[2] = sqrt(v26[2 * v28 + 2]);
      v29 = (double *)(*a2 + 264 * v13);
      v30 = v29[22] / 1.41421356;
      v31 = v29[19];
      if (fabs(v31) < 2.22044605e-16 && v30 < a1[202])
        v30 = a1[202];
      v32 = v29[23];
      if (sqrt(*(double *)(*a2 + 264 * v13 + 160) * *(double *)(*a2 + 264 * v13 + 160) + v31 * v31) > a1[203])
        v30 = a1[204];
      v52 = 0x300000003;
      v50 = &unk_1E25C78E0;
      v53 = &v54;
      v51 = xmmword_18D30BB60;
      sub_18D04BE88((uint64_t)&v50, 0.0);
      sub_18D053AA8((uint64_t)&v60, (uint64_t)&v50);
      v33 = v63;
      *v63 = v30 * v30;
      v34 = HIDWORD(v61);
      v33[HIDWORD(v61) + 1] = v30 * v30;
      v33[2 * v34 + 2] = v32 * v32;
      sub_18D04BB5C((uint64_t)&v70, (uint64_t)&v60, (uint64_t)&v55);
      v35 = v58;
      v36 = sqrt(*v58);
      v37 = &a9[3 * v13];
      *v37 = v36;
      v38 = HIDWORD(v56);
      v39 = sqrt(v35[HIDWORD(v56) + 1]);
      v37[1] = v39;
      v40 = sqrt(v35[2 * v38 + 2]);
      v37[2] = v40;
      v41 = a1[200];
      *v37 = v36 * v41;
      v37[1] = v39 * v41;
      v37[2] = v40 * v41;
      if (!v13)
      {
        *(_OWORD *)(a5 + 256) = 0u;
        *(_OWORD *)(a5 + 272) = 0u;
        *(_OWORD *)(a5 + 224) = 0u;
        *(_OWORD *)(a5 + 240) = 0u;
        *(_OWORD *)(a5 + 192) = 0u;
        *(_OWORD *)(a5 + 208) = 0u;
        *(_OWORD *)(a5 + 160) = 0u;
        *(_OWORD *)(a5 + 176) = 0u;
        *(_OWORD *)(a5 + 128) = 0u;
        *(_OWORD *)(a5 + 144) = 0u;
        *(_OWORD *)(a5 + 96) = 0u;
        *(_OWORD *)(a5 + 112) = 0u;
        *(_OWORD *)(a5 + 64) = 0u;
        *(_OWORD *)(a5 + 80) = 0u;
        *(_OWORD *)(a5 + 32) = 0u;
        *(_OWORD *)(a5 + 48) = 0u;
        *(_OWORD *)a5 = 0u;
        *(_OWORD *)(a5 + 16) = 0u;
        *(double *)a5 = *a8 * *a8;
        *(double *)(a5 + 56) = a8[1] * a8[1];
        *(double *)(a5 + 112) = a8[2] * a8[2];
        *(double *)(a5 + 168) = *a9 * *a9;
        *(double *)(a5 + 224) = a9[1] * a9[1];
        *(double *)(a5 + 280) = a9[2] * a9[2];
      }
      ++v13;
    }
    while (v13 != a3);
  }
  return 0xFFFFFFFFLL;
}

void sub_18D2C2074(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E25C4BA8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2C20C0(uint64_t a1, char *a2, char a3)
{
  *(_BYTE *)(a1 + 32) = a3;
  sub_18D099E08((std::string *)(a1 + 8), a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_18D2C20F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::locale v100;

  v9 = (_BYTE *)(a1 + 34);
  if ((sub_18D2C2B28(a1, (char *)(a1 + 34), "use_input_locationd_data_file", a4, a5, a6, a7, a8) & 1) != 0)
  {
    if (*v9 && (sub_18D2C269C(a1, (_OWORD *)(a1 + 35), "input_locationd_data_file", v10, v11, v12, v13, v14) & 1) == 0)
    {
      v15 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Invalid input_locationd_batched_data_file", 41);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
      v16 = std::locale::use_facet(&v100, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
LABEL_29:
      std::locale::~locale(&v100);
      std::ostream::put();
      std::ostream::flush();
      return 0;
    }
  }
  else
  {
    *v9 = 0;
  }
  if ((sub_18D2C2B28(a1, (char *)(a1 + 33), "load_batched_data_from_locationd", v10, v11, v12, v13, v14) & 1) == 0)
    *(_BYTE *)(a1 + 33) = 0;
  v22 = (_BYTE *)(a1 + 291);
  if ((sub_18D2C2B28(a1, (char *)(a1 + 291), "use_input_ascii_batched_data_file", v17, v18, v19, v20, v21) & 1) != 0)
  {
    if (*v22
      && (sub_18D2C269C(a1, (_OWORD *)(a1 + 292), "input_ascii_batched_data_file", v23, v24, v25, v26, v27) & 1) == 0)
    {
      v28 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Invalid input_ascii_batched_data_file", 37);
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
      v29 = std::locale::use_facet(&v100, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v22 = 0;
  }
  v30 = (_BYTE *)(a1 + 548);
  if ((sub_18D2C2B28(a1, (char *)(a1 + 548), "save_results_to_disk", v23, v24, v25, v26, v27) & 1) != 0)
  {
    if (*v30 && (sub_18D2C269C(a1, (_OWORD *)(a1 + 549), "save_results_path", v31, v32, v33, v34, v35) & 1) == 0)
    {
      v36 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Invalid save_results_path", 25);
      std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
      v37 = std::locale::use_facet(&v100, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v30 = 0;
  }
  v38 = (_BYTE *)(a1 + 805);
  if ((sub_18D2C2B28(a1, (char *)(a1 + 805), "load_matlab_inputs", v31, v32, v33, v34, v35) & 1) != 0)
  {
    if (*v38 && (sub_18D2C269C(a1, (_OWORD *)(a1 + 806), "load_matlab_inputs_path", v39, v40, v41, v42, v43) & 1) == 0)
    {
      v44 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Invalid load_matlab_inputs_path", 31);
      std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
      v45 = std::locale::use_facet(&v100, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v38 = 0;
  }
  if ((sub_18D2C269C(a1, (_OWORD *)(a1 + 1062), "temp_writable_path", v39, v40, v41, v42, v43) & 1) == 0)
  {
    v59 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Invalid temp_writable_path", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
    v60 = std::locale::use_facet(&v100, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
    goto LABEL_29;
  }
  v51 = (_BYTE *)(a1 + 1318);
  if ((sub_18D2C2B28(a1, (char *)(a1 + 1318), "use_truth_reference", v46, v47, v48, v49, v50) & 1) != 0)
  {
    if (*v51
      && (sub_18D2C269C(a1, (_OWORD *)(a1 + 1319), "truth_reference_filename", v52, v53, v54, v55, v56) & 1) == 0)
    {
      v57 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Invalid truth_reference_filename", 32);
      std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
      v58 = std::locale::use_facet(&v100, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v51 = 0;
  }
  v62 = (_BYTE *)(a1 + 1575);
  if ((sub_18D2C2B28(a1, (char *)(a1 + 1575), "enable_data_editing", v52, v53, v54, v55, v56) & 1) != 0)
  {
    if (*v62
      && (sub_18D2C2D68(a1, (_QWORD *)(a1 + 1576), "data_editing_sigma_threshold", v63, v64, v65, v66, v67) & 1) == 0)
    {
      *(_QWORD *)(a1 + 1576) = 0x4008000000000000;
      v68 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Invalid data_editing_sigma_threshold", 36);
      std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(_QWORD *)(*v68 - 24)));
      v69 = std::locale::use_facet(&v100, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *v62 = 0;
  }
  if ((sub_18D2C2D68(a1, (_QWORD *)(a1 + 1584), "horizontal_position_process_noise", v63, v64, v65, v66, v67) & 1) == 0)
    *(_QWORD *)(a1 + 1584) = 0x3FF0000000000000;
  if ((sub_18D2C2D68(a1, (_QWORD *)(a1 + 1592), "vertical_position_process_noise", v70, v71, v72, v73, v74) & 1) == 0)
    *(_QWORD *)(a1 + 1592) = 0x3FB999999999999ALL;
  if ((sub_18D2C2D68(a1, (_QWORD *)(a1 + 1600), "velocity_sigma_fudge_factor", v75, v76, v77, v78, v79) & 1) == 0)
    *(_QWORD *)(a1 + 1600) = 0x3FF0000000000000;
  if ((sub_18D2C2D68(a1, (_QWORD *)(a1 + 1608), "vertical_speed_limit", v80, v81, v82, v83, v84) & 1) == 0)
    *(_QWORD *)(a1 + 1608) = 0x4049000000000000;
  if ((sub_18D2C2D68(a1, (_QWORD *)(a1 + 1616), "minimum_single_component_speed_standard_deviation", v85, v86, v87, v88, v89) & 1) == 0)*(_QWORD *)(a1 + 1616) = 0x3FD6A09E667F3BD1;
  if ((sub_18D2C2D68(a1, (_QWORD *)(a1 + 1624), "mimimum_driving_speed_that_requires_speed_uncertainty_inflation", v90, v91, v92, v93, v94) & 1) == 0)*(_QWORD *)(a1 + 1624) = 0x4024000000000000;
  if ((sub_18D2C2D68(a1, (_QWORD *)(a1 + 1632), "minimum_driving_speed_standard_deviation", v95, v96, v97, v98, v99) & 1) == 0)
    *(_QWORD *)(a1 + 1632) = 0x4006A09E667F3BCCLL;
  return 1;
}

void sub_18D2C2668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2C269C(uint64_t a1, _OWORD *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string::size_type v11;
  std::string *v12;
  std::string *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  char *v17;
  int v18;
  std::string *v19;
  int64_t size;
  std::string *v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  char *v25;
  int v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  std::string *v32;
  int64_t v33;
  char v34;
  char *v35;
  int v36;
  void *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  std::string::size_type v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *__s;
  unsigned __int8 v59;
  __int16 v60;
  std::string v61;

  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 31))
      goto LABEL_99;
LABEL_5:
    sub_18D0778AC(&v61, "\n");
    v11 = strlen(a3);
    v12 = std::string::append(&v61, a3, v11);
    v13 = std::string::append(v12, ":", 1uLL);
    v14 = (uint64_t *)(a1 + 8);
    v15 = *(char *)(a1 + 31);
    __s = (char *)a3;
    if (v15 < 0)
    {
      v17 = *(char **)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v16 = *(unsigned __int8 *)(a1 + 31);
      v17 = (char *)(a1 + 8);
    }
    v18 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
    if (v18 >= 0)
      v19 = v13;
    else
      v19 = (std::string *)v13->__r_.__value_.__r.__words[0];
    if (v18 >= 0)
      size = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    else
      size = v13->__r_.__value_.__l.__size_;
    if (size)
    {
      if (v16 >= size)
      {
        v25 = &v17[v16];
        v26 = v19->__r_.__value_.__s.__data_[0];
        v27 = v17;
        do
        {
          v28 = v16 - size;
          if (v28 == -1)
            break;
          v29 = (char *)memchr(v27, v26, v28 + 1);
          if (!v29)
            break;
          v30 = v29;
          if (!memcmp(v29, v19, size))
          {
            if (v30 != v25)
            {
              v24 = v30 - v17;
              if (v30 - v17 != -1)
                goto LABEL_48;
            }
            break;
          }
          v27 = v30 + 1;
          v16 = v25 - (v30 + 1);
        }
        while (v16 >= size);
      }
      sub_18D099E08(&v61, __s);
      v21 = std::string::append(&v61, ":", 1uLL);
      v15 = *(char *)(a1 + 31);
      if (v15 < 0)
      {
        v23 = *(char **)(a1 + 8);
        v22 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v22 = *(unsigned __int8 *)(a1 + 31);
        v23 = (char *)(a1 + 8);
      }
      v31 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
      if (v31 >= 0)
        v32 = v21;
      else
        v32 = (std::string *)v21->__r_.__value_.__r.__words[0];
      if (v31 >= 0)
        v33 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      else
        v33 = v21->__r_.__value_.__l.__size_;
      if (v33)
      {
        if (v22 >= v33)
        {
          v35 = &v23[v22];
          v36 = v32->__r_.__value_.__s.__data_[0];
          v37 = v23;
          do
          {
            v38 = v22 - v33;
            if (v38 == -1)
              break;
            v39 = (char *)memchr(v37, v36, v38 + 1);
            if (!v39)
              break;
            v40 = v39;
            if (!memcmp(v39, v32, v33))
            {
              v34 = 1;
              if (v40 == v35)
                goto LABEL_35;
              LOBYTE(a3) = (_BYTE)__s;
              if (v40 != v23)
                goto LABEL_97;
              goto LABEL_47;
            }
            v37 = v40 + 1;
            v22 = v35 - (v40 + 1);
          }
          while (v22 >= v33);
        }
        v34 = 1;
LABEL_35:
        LOBYTE(a3) = (_BYTE)__s;
LABEL_97:
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v61.__r_.__value_.__l.__data_);
          if ((v34 & 1) != 0)
            goto LABEL_99;
        }
        else if ((v34 & 1) != 0)
        {
          goto LABEL_99;
        }
        return 1;
      }
LABEL_47:
      v24 = 0;
    }
    else
    {
      v24 = 0;
    }
LABEL_48:
    v41 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v41 = v61.__r_.__value_.__l.__size_;
    v42 = v41 + v24;
    if ((v15 & 0x80) != 0)
      goto LABEL_53;
LABEL_51:
    v43 = v15;
    if (v42 < v15)
    {
      while (v43 > v42)
      {
        v44 = a1 + 8;
        if ((v15 & 0x80) != 0)
          v44 = *v14;
        if (*(_BYTE *)(v44 + v42) != 58)
        {
          v45 = v15;
          if ((v15 & 0x80) != 0)
            v45 = *(_QWORD *)(a1 + 16);
          if (v45 <= v42)
            break;
          v46 = a1 + 8;
          if ((v15 & 0x80) != 0)
            v46 = *v14;
          if (*(_BYTE *)(v46 + v42) != 32)
          {
            v47 = v15;
            if ((v15 & 0x80) != 0)
              v47 = *(_QWORD *)(a1 + 16);
            if (v47 <= v42)
              break;
            v48 = a1 + 8;
            if ((v15 & 0x80) != 0)
              v48 = *v14;
            if (*(_BYTE *)(v48 + v42) != 9)
              goto LABEL_72;
          }
        }
        ++v42;
        if ((v15 & 0x80) == 0)
          goto LABEL_51;
LABEL_53:
        v43 = *(_QWORD *)(a1 + 16);
        if (v42 >= v43)
          goto LABEL_72;
      }
      sub_18D077824();
    }
LABEL_72:
    v49 = 0;
    LOBYTE(a3) = (_BYTE)__s;
    do
    {
      v50 = v42 + v49;
      v51 = *(unsigned __int8 *)(a1 + 31);
      if (*(char *)(a1 + 31) < 0)
      {
        if (v50 >= *(_QWORD *)(a1 + 16))
          break;
      }
      else if (v50 >= v51)
      {
        break;
      }
      v52 = a1 + 8;
      if ((v51 & 0x80) != 0)
        v52 = *v14;
      if (*(_BYTE *)(v52 + v49 + v42) == 10)
        break;
      if ((v51 & 0x80) != 0)
        v53 = *(_QWORD *)(a1 + 16);
      else
        v53 = *(unsigned __int8 *)(a1 + 31);
      if (v53 <= v50)
LABEL_105:
        sub_18D077824();
      v54 = a1 + 8;
      if ((v51 & 0x80) != 0)
        v54 = *v14;
      if (*(_BYTE *)(v54 + v49 + v42) == 13)
        break;
      if ((v51 & 0x80) != 0)
        v55 = *(_QWORD *)(a1 + 16);
      else
        v55 = *(unsigned __int8 *)(a1 + 31);
      if (v55 <= v50)
        goto LABEL_105;
      v56 = a1 + 8;
      if ((v51 & 0x80) != 0)
        v56 = *v14;
      *((_BYTE *)a2 + v49) = *(_BYTE *)(v56 + v49 + v42);
      ++v49;
    }
    while (v49 != 255);
    *((_BYTE *)a2 + v49) = 0;
    if (*(_BYTE *)(a1 + 32))
    {
      v60 = 0;
      v59 = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v59, "ConfigLoader: \"%s\" loaded value \"%s\"", a4, a5, a6, a7, a8, (char)__s);
    }
    v34 = 0;
    goto LABEL_97;
  }
  if (*(_QWORD *)(a1 + 16))
    goto LABEL_5;
LABEL_99:
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if (*(_BYTE *)(a1 + 32))
  {
    LOWORD(v61.__r_.__value_.__l.__data_) = 0;
    LOBYTE(v60) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v61, (unsigned __int8 *)&v60, "ConfigLoader: \"%s\" using default value \"%s\"", a4, a5, a6, a7, a8, (char)a3);
  }
  return 0;
}

void sub_18D2C2B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2C2B28(uint64_t a1, char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned __int8 v10;
  void **v11;
  char *v12;
  void **v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v21;
  void **v22;
  uint64_t v23;
  unsigned __int8 v24;
  char __s[256];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!sub_18D2C269C(a1, __s, a3, a4, a5, a6, a7, a8))
    return 0;
  if (!__s[0])
  {
    v16 = 0;
    *a2 = 0;
    return v16;
  }
  v9 = (char *)&v22;
  sub_18D0778AC(&v22, __s);
  v10 = v24;
  v11 = v22;
  if ((v24 & 0x80u) == 0)
    v12 = (char *)&v22 + v24;
  else
    v12 = (char *)v22 + v23;
  if ((v24 & 0x80u) != 0)
    v9 = (char *)v22;
  if (v9 != v12)
  {
    do
    {
      *v9 = __tolower(*v9);
      ++v9;
    }
    while (v9 != v12);
    v10 = v24;
    v11 = v22;
  }
  if ((v10 & 0x80u) == 0)
    v13 = (void **)&v22;
  else
    v13 = v11;
  v14 = *(unsigned __int8 *)v13;
  if (v14 == 49)
    goto LABEL_15;
  if ((v10 & 0x80u) == 0)
    v17 = v10;
  else
    v17 = v23;
  if (v17 == 1)
  {
    if (v14 == 48)
      goto LABEL_34;
    if (v14 == 121)
    {
LABEL_15:
      v15 = 1;
LABEL_35:
      v16 = 1;
      goto LABEL_36;
    }
    v21 = memcmp(v13, "n", 1uLL);
    v15 = 0;
    v16 = 0;
    if (!v21)
      goto LABEL_35;
  }
  else
  {
    if (v17 == 3)
    {
      if (*(_WORD *)v13 == 25977 && *((_BYTE *)v13 + 2) == 115)
        goto LABEL_15;
    }
    else if (v17 == 4 && *(_DWORD *)v13 == 1702195828)
    {
      goto LABEL_15;
    }
    if (v14 == 48)
    {
LABEL_34:
      v15 = 0;
      goto LABEL_35;
    }
    if (v17 == 2)
    {
      v15 = 0;
      v16 = 0;
      if (*(_WORD *)v13 == 28526)
        goto LABEL_35;
    }
    else
    {
      if (v17 == 5)
      {
        v15 = 0;
        v16 = 0;
        if (*(_DWORD *)v13 != 1936482662 || *((_BYTE *)v13 + 4) != 101)
          goto LABEL_36;
        goto LABEL_35;
      }
      v15 = 0;
      v16 = 0;
    }
  }
LABEL_36:
  *a2 = v15;
  if ((v10 & 0x80) != 0)
    operator delete(v11);
  return v16;
}

void sub_18D2C2D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2C2D68(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11[2];
  std::bad_cast v12;
  uint64_t v13;
  uint64_t v14;
  char __s[256];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = sub_18D2C269C(a1, __s, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v10 = 0;
    v11[0] = (unsigned __int8 *)__s;
    v11[1] = (unsigned __int8 *)&__s[strlen(__s)];
    if ((sub_18D179018(v11, (double *)&v10) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v12);
      v12.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1460;
      v13 = MEMORY[0x1E0DE4E50];
      v14 = MEMORY[0x1E0DE4ED0];
      sub_18D1794C8((uint64_t)&v12);
    }
    *a2 = v10;
    return 1;
  }
  return result;
}

void sub_18D2C2E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, __int128 a14)
{
  char *exception_ptr;

  std::exception::~exception(&a13);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    a13.__vftable = (std::exception_vtbl *)&unk_1E25C1460;
    a14 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(a1);
    std::exception::~exception(&a13);
    __cxa_end_catch();
    JUMPOUT(0x18D2C2DD0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18D2C2EA8(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return sub_18D03CA50((uint64_t)a1);
}

_QWORD *sub_18D2C2FEC(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556)
      sub_18D07AFE4();
    v4 = (char *)sub_18D2C3070(a2);
    *a1 = v4;
    a1[1] = &v4[48 * a2];
    a1[2] = &v4[48 * v5];
  }
  return a1;
}

void sub_18D2C3054(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_18D2C3070(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    sub_18D0788A0();
  return operator new(48 * a1);
}

_QWORD *sub_18D2C30B4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_18D07AFE4();
    v4 = 24 * a2;
    v5 = (char *)operator new(24 * a2);
    *a1 = v5;
    a1[1] = &v5[v4];
    a1[2] = &v5[24 * a2];
  }
  return a1;
}

void sub_18D2C312C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D2C3148(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xE38E38E38E38E4)
      sub_18D07AFE4();
    v4 = (char *)sub_18D2C31D0(a2);
    *a1 = v4;
    a1[1] = &v4[288 * a2];
    a1[2] = &v4[288 * v5];
  }
  return a1;
}

void sub_18D2C31B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_18D2C31D0(unint64_t a1)
{
  if (a1 >= 0xE38E38E38E38E4)
    sub_18D0788A0();
  return operator new(288 * a1);
}

uint64_t swan::LoadMATLABData::Load(uint64_t a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  FILE *v18;
  FILE *v19;
  unint64_t v20;
  unsigned int v21;
  FILE *v22;
  FILE *v23;
  unint64_t v24;
  unsigned int v25;
  FILE *v26;
  FILE *v27;
  unint64_t v28;
  unsigned int v29;
  FILE *v30;
  FILE *v31;
  unint64_t v32;
  unsigned int v33;
  FILE *v34;
  FILE *v35;
  uint64_t i;
  FILE *v37;
  FILE *v38;
  uint64_t j;
  FILE *v40;
  FILE *v41;
  FILE *v42;
  char __str[256];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x100uLL, "%s%s", a2, "t_noisy.txt");
  v18 = fopen(__str, "r");
  if (!v18)
    goto LABEL_26;
  v19 = v18;
  if (a3)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      fscanf(v19, "%lf\n", a4 + 8 * v20);
      v20 = v21++;
    }
    while (v20 < a3);
  }
  fclose(v19);
  snprintf(__str, 0x100uLL, "%s%s", a2, "x_noisy.txt");
  v22 = fopen(__str, "r");
  if (!v22)
    goto LABEL_26;
  v23 = v22;
  if (a3)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      fscanf(v23, "%lf %lf %lf %lf %lf %lf\n", a5 + 48 * v24, a5 + 48 * v24 + 8, a5 + 48 * v24 + 16, a5 + 48 * v24 + 24, a5 + 48 * v24 + 32, a5 + 48 * v24 + 40);
      v24 = v25++;
    }
    while (v24 < a3);
  }
  fclose(v23);
  snprintf(__str, 0x100uLL, "%s%s", a2, "sigma_x.txt");
  v26 = fopen(__str, "r");
  if (!v26)
    goto LABEL_26;
  v27 = v26;
  if (a3)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      fscanf(v27, "%lf %lf %lf\n", a6 + 24 * v28, a6 + 24 * v28 + 8, a6 + 24 * v28 + 16);
      v28 = v29++;
    }
    while (v28 < a3);
  }
  fclose(v27);
  snprintf(__str, 0x100uLL, "%s%s", a2, "sigma_vx.txt");
  v30 = fopen(__str, "r");
  if (!v30)
    goto LABEL_26;
  v31 = v30;
  if (a3)
  {
    v32 = 0;
    v33 = 1;
    do
    {
      fscanf(v31, "%lf %lf %lf\n", a7 + 24 * v32, a7 + 24 * v32 + 8, a7 + 24 * v32 + 16);
      v32 = v33++;
    }
    while (v32 < a3);
  }
  fclose(v31);
  snprintf(__str, 0x100uLL, "%s%s", a2, "x0.txt");
  v34 = fopen(__str, "r");
  if (!v34)
    goto LABEL_26;
  v35 = v34;
  for (i = 0; i != 48; i += 8)
    fscanf(v35, "%lf\n", a8 + i);
  fclose(v35);
  snprintf(__str, 0x100uLL, "%s%s", a2, "P0.txt");
  v37 = fopen(__str, "r");
  if (!v37)
    goto LABEL_26;
  v38 = v37;
  for (j = 0; j != 48; j += 8)
    fscanf(v38, "%lf %lf %lf %lf %lf %lf\n", *(_QWORD *)(a9 + j), *(_QWORD *)(a9 + j) + 8, *(_QWORD *)(a9 + j) + 16, *(_QWORD *)(a9 + j) + 24, *(_QWORD *)(a9 + j) + 32, *(_QWORD *)(a9 + j) + 40);
  fclose(v38);
  snprintf(__str, 0x100uLL, "%s%s", a2, "sigma_wx_horizontal.txt");
  v40 = fopen(__str, "r");
  if (v40
    && (fscanf(v40, "%lf\n", a10),
        snprintf(__str, 0x100uLL, "%s%s", a2, "sigma_wx_vertical.txt"),
        (v41 = fopen(__str, "r")) != 0))
  {
    v42 = v41;
    fscanf(v41, "%lf\n", a11);
    fclose(v42);
  }
  else
  {
LABEL_26:
    printf("Error opening %s. Exiting.\n", __str);
  }
  return 0xFFFFFFFFLL;
}

double swan::BatchLogParser::BatchLogParser(swan::BatchLogParser *this)
{
  double result;

  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

BOOL swan::BatchLogParser::contains(swan::BatchLogParser *this, char *__s1, const char *__s2)
{
  _BOOL8 result;

  result = 0;
  if (__s1)
  {
    if (__s2)
      return strstr(__s1, __s2) != 0;
  }
  return result;
}

void swan::BatchLogParser::trimField(uint64_t a1, std::string *a2)
{
  unint64_t size;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  std::string *v7;
  unsigned int v8;
  unint64_t v9;
  std::string *v10;
  unsigned int v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;

  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = (char *)operator new[]();
    v5 = size - 1;
    v6 = MEMORY[0x1E0C80978];
    while (1)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = a2;
      else
        v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v8 = v7->__r_.__value_.__s.__data_[v5];
      if ((v8 & 0x80000000) != 0)
      {
        if (!__maskrune(v8, 0x4000uLL))
          goto LABEL_15;
      }
      else if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x4000) == 0)
      {
        goto LABEL_15;
      }
      if (--v5 == -1)
      {
        v5 = 0;
LABEL_15:
        v9 = 0;
        if (size <= 1)
          size = 1;
        while (1)
        {
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v10 = a2;
          else
            v10 = (std::string *)a2->__r_.__value_.__r.__words[0];
          v11 = v10->__r_.__value_.__s.__data_[v9];
          if ((v11 & 0x80000000) != 0)
          {
            if (!__maskrune(v11, 0x4000uLL))
              goto LABEL_26;
          }
          else if ((*(_DWORD *)(v6 + 4 * v11 + 60) & 0x4000) == 0)
          {
            goto LABEL_26;
          }
          if (size == ++v9)
          {
            v9 = size;
LABEL_26:
            if (v9 <= v5)
            {
              v12 = 0;
              if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v13 = a2;
              else
                v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
              v14 = (uint64_t)v13 + v9;
              do
              {
                v4[v12] = *(_BYTE *)(v14 + v12);
                ++v12;
              }
              while (v9 + v12 <= v5);
            }
            else
            {
              v12 = 0;
            }
            v4[v12] = 0;
            sub_18D099E08(a2, v4);
            JUMPOUT(0x18D78B5BCLL);
          }
        }
      }
    }
  }
}

BOOL swan::BatchLogParser::getField(_QWORD *a1, std::string *this, unint64_t a3)
{
  unint64_t v4;

  v4 = a1[8];
  if (v4 > a3)
    std::string::operator=(this, (const std::string *)(*(_QWORD *)(a1[4] + 8 * ((a1[7] + a3) / 0xAA)) + 24 * ((a1[7] + a3) % 0xAA)));
  return v4 > a3;
}

BOOL swan::BatchLogParser::getField(_QWORD *a1, std::string *this, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  std::string::size_type size;

  v4 = a1[8];
  if (!v4)
    return 0;
  for (i = 0; i < v4; ++i)
  {
    v9 = a1[7];
    v10 = a1[4];
    v11 = (unsigned __int8 *)(*(_QWORD *)(v10 + 8 * ((v9 + i) / 0xAA)) + 24 * ((v9 + i) % 0xAA));
    v12 = v11[23];
    if ((v12 & 0x80u) == 0)
      v13 = v11[23];
    else
      v13 = *((_QWORD *)v11 + 1);
    v14 = a3[23];
    v15 = (char)v14;
    if ((v14 & 0x80u) != 0)
      v14 = *((_QWORD *)a3 + 1);
    if (v13 != v14)
      continue;
    if (v15 >= 0)
      v16 = a3;
    else
      v16 = *(unsigned __int8 **)a3;
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v16, *((_QWORD *)v11 + 1)))
        continue;
    }
    else if (v11[23])
    {
      while (*v11 == *v16)
      {
        ++v11;
        ++v16;
        if (!--v12)
          goto LABEL_18;
      }
      continue;
    }
LABEL_18:
    if (i + a4 >= v4)
      return 0;
    std::string::operator=(this, (const std::string *)(*(_QWORD *)(v10 + 8 * ((v9 + i + a4) / 0xAA)) + 24 * ((v9 + i + a4) % 0xAA)));
    v4 = a1[8];
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  return size != 0;
}

BOOL swan::BatchLogParser::getField(swan::BatchLogParser *this, double *a2, unint64_t a3)
{
  unint64_t v4;
  int v6;
  void *v7;
  std::string *v8;
  std::string v10;

  memset(&v10, 0, sizeof(v10));
  v4 = *((_QWORD *)this + 8);
  if (v4 > a3)
  {
    std::string::operator=(&v10, (const std::string *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * ((*((_QWORD *)this + 7) + a3) / 0xAA))+ 24 * ((*((_QWORD *)this + 7) + a3) % 0xAA)));
    v6 = SHIBYTE(v10.__r_.__value_.__r.__words[2]);
    v7 = (void *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    *a2 = atof((const char *)v8);
    if (v6 < 0)
      operator delete(v7);
  }
  return v4 > a3;
}

void sub_18D2C3B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL swan::BatchLogParser::getField(_QWORD *a1, double *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 Field;
  int v8;
  std::string *v9;
  void *__p[2];
  uint64_t v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  if (*(char *)(a3 + 23) < 0)
  {
    sub_18D077798(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v12 = *(_QWORD *)(a3 + 16);
  }
  Field = swan::BatchLogParser::getField(a1, &v13, (unsigned __int8 *)__p, a4);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v8 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (Field)
  {
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    *a2 = atof((const char *)v9);
  }
  if (v8 < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return Field;
}

void sub_18D2C3BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL swan::BatchLogParser::getField(swan::BatchLogParser *this, int *a2, unint64_t a3)
{
  unint64_t v4;
  int v6;
  void *v7;
  std::string *v8;
  std::string v10;

  memset(&v10, 0, sizeof(v10));
  v4 = *((_QWORD *)this + 8);
  if (v4 > a3)
  {
    std::string::operator=(&v10, (const std::string *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * ((*((_QWORD *)this + 7) + a3) / 0xAA))+ 24 * ((*((_QWORD *)this + 7) + a3) % 0xAA)));
    v6 = SHIBYTE(v10.__r_.__value_.__r.__words[2]);
    v7 = (void *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    *a2 = atoi((const char *)v8);
    if (v6 < 0)
      operator delete(v7);
  }
  return v4 > a3;
}

void sub_18D2C3CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL swan::BatchLogParser::getField(swan::BatchLogParser *this, uint64_t *a2, unint64_t a3)
{
  unint64_t v4;
  int v6;
  void *v7;
  std::string *v8;
  std::string v10;

  memset(&v10, 0, sizeof(v10));
  v4 = *((_QWORD *)this + 8);
  if (v4 > a3)
  {
    std::string::operator=(&v10, (const std::string *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * ((*((_QWORD *)this + 7) + a3) / 0xAA))+ 24 * ((*((_QWORD *)this + 7) + a3) % 0xAA)));
    v6 = SHIBYTE(v10.__r_.__value_.__r.__words[2]);
    v7 = (void *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    *a2 = atoll((const char *)v8);
    if (v6 < 0)
      operator delete(v7);
  }
  return v4 > a3;
}

void sub_18D2C3DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL swan::BatchLogParser::getField(swan::BatchLogParser *this, unsigned int *a2, unint64_t a3)
{
  unint64_t v4;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  v4 = *((_QWORD *)this + 8);
  if (v4 > a3)
  {
    std::string::operator=(&__str, (const std::string *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * ((*((_QWORD *)this + 7) + a3) / 0xAA))+ 24 * ((*((_QWORD *)this + 7) + a3) % 0xAA)));
    *a2 = std::stoul(&__str, 0, 10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v4 > a3;
}

void sub_18D2C3E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL swan::BatchLogParser::getField(_QWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 Field;
  _BOOL8 v8;
  void *__p[2];
  uint64_t v11;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a3 + 23) < 0)
  {
    sub_18D077798(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a3 + 16);
  }
  Field = swan::BatchLogParser::getField(a1, &__str, (unsigned __int8 *)__p, a4);
  v8 = Field;
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (Field)
LABEL_8:
    *a2 = std::stoul(&__str, 0, 10);
LABEL_9:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v8;
}

void sub_18D2C3F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL swan::BatchLogParser::getField(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 Field;
  int v8;
  std::string *v9;
  void *__p[2];
  uint64_t v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  if (*(char *)(a3 + 23) < 0)
  {
    sub_18D077798(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v12 = *(_QWORD *)(a3 + 16);
  }
  Field = swan::BatchLogParser::getField(a1, &v13, (unsigned __int8 *)__p, a4);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v8 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (Field)
  {
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    *a2 = atoll((const char *)v9);
  }
  if (v8 < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return Field;
}

void sub_18D2C403C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL swan::BatchLogParser::getField(_QWORD *a1, int *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 Field;
  int v8;
  std::string *v9;
  void *__p[2];
  uint64_t v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  if (*(char *)(a3 + 23) < 0)
  {
    sub_18D077798(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v12 = *(_QWORD *)(a3 + 16);
  }
  Field = swan::BatchLogParser::getField(a1, &v13, (unsigned __int8 *)__p, a4);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v8 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (Field)
  {
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    *a2 = atoi((const char *)v9);
  }
  if (v8 < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return Field;
}

void sub_18D2C412C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void swan::BatchLogParser::wipef(uint64_t a1, uint64_t i)
{
  int v3;
  std::string::value_type *v4;
  uint64_t v5;
  std::string::value_type *v6;
  std::string::value_type *v7;
  std::string::value_type *v8;
  std::string::value_type *v9;
  std::string::value_type *v10;
  std::string::value_type **v11;
  std::string::value_type **v12;
  const char *v13;
  int v14;
  char *v15;
  int v16;
  std::string::value_type *v17;
  std::string::value_type *v18;
  std::string::value_type *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  std::string::value_type **v24;
  BOOL v25;
  std::string::value_type **v26;
  std::string::value_type *v27;
  std::string::value_type **v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  int v31;
  int v32;
  std::string::value_type **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  std::string v45;
  std::locale v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void *__p[2];
  _BYTE v51[32];
  _BYTE v52[32];
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  std::string::value_type *v61;
  std::string::value_type *v62;
  std::locale *v63;
  int v64;
  __int128 v65;
  _BYTE v66[32];
  std::string::value_type *v67;
  std::string::value_type *v68;
  char v69;
  std::string::value_type *v70;
  std::string::value_type *v71;
  char v72;
  char v73;
  uint64_t v74;
  __int128 v75;
  _BYTE v76[25];
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;

  sub_18D2C8884(&v46);
  v49 = 0;
  v48 = 0u;
  v47 = 0u;
  if (sub_18D2C88E0((uint64_t)&v46, ",Function,\".*\",", "") != "")
    sub_18D2C8CC0();
  memset(&v45, 0, sizeof(v45));
  v3 = *(char *)(i + 23);
  if (v3 >= 0)
    v4 = (std::string::value_type *)i;
  else
    v4 = *(std::string::value_type **)i;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(i + 23);
  else
    v5 = *(_QWORD *)(i + 8);
  v61 = v4;
  v62 = &v4[v5];
  v63 = &v46;
  v64 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v65 = 0u;
  memset(v66, 0, 25);
  memset(v52, 0, 17);
  *(_QWORD *)&v52[24] = 0;
  v53 = 0;
  LOBYTE(v54) = 0;
  v55 = 0;
  v56 = 0;
  *(_OWORD *)__p = 0u;
  memset(v51, 0, 25);
  sub_18D2CFE70((uint64_t)&v46, (uint64_t)v4, (uint64_t)&v4[v5], (uint64_t)__p, 0);
  sub_18D2D004C((uint64_t)&v65, (uint64_t)v4, (uint64_t)&v4[v5], (uint64_t *)__p, 0);
  if (__p[0])
    operator delete(__p[0]);
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  *(_OWORD *)&v51[16] = 0u;
  memset(v52, 0, 25);
  __p[1] = 0;
  *(_QWORD *)v51 = 0;
  __p[0] = 0;
  *(_DWORD *)&v51[8] = 0;
  if (sub_18D2CFDDC((uint64_t)&v61, (uint64_t)__p))
  {
    for (; v5; --v5)
      std::string::push_back(&v45, *v4++);
    goto LABEL_72;
  }
  v6 = 0;
  v7 = 0;
  v42 = i;
LABEL_15:
  if (!sub_18D2CFDDC((uint64_t)&v61, (uint64_t)__p))
  {
    v8 = v67;
    v9 = v68;
    if (v67 != v68)
    {
      v10 = v67;
      do
        std::string::push_back(&v45, *v10++);
      while (v10 != v9);
    }
    v7 = v70;
    v6 = v71;
    v11 = (std::string::value_type **)*((_QWORD *)&v65 + 1);
    v12 = (std::string::value_type **)v65;
    v43 = (uint64_t *)(v65 + 8);
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v65 + 1) - v65) >> 3);
    v13 = ",";
    while (1)
    {
      v14 = *(unsigned __int8 *)v13;
      if (v14 == 36)
      {
        if (v13 != ",")
        {
          v15 = (char *)(v13 + 1);
          v16 = v13[1];
          v14 = *((unsigned __int8 *)v13 + 1);
          if (v16 > 38)
          {
            if (v16 == 39)
            {
              if (v7 != v6)
              {
                v30 = v7;
                do
                  std::string::push_back(&v45, *v30++);
                while (v30 != v6);
              }
              goto LABEL_49;
            }
            if (v16 == 96)
            {
              if (v8 != v9)
              {
                v19 = v8;
                do
                  std::string::push_back(&v45, *v19++);
                while (v19 != v9);
              }
              goto LABEL_49;
            }
          }
          else
          {
            if (v16 == 36)
            {
              ++v13;
              goto LABEL_48;
            }
            if (v16 == 38)
            {
              v18 = *v12;
              v17 = v12[1];
              while (v18 != v17)
                std::string::push_back(&v45, *v18++);
              goto LABEL_49;
            }
          }
          if ((v14 - 48) <= 9)
          {
            v20 = *((unsigned __int8 *)v13 + 1) - 48;
            if (v13 + 2 != "")
            {
              v21 = *((unsigned __int8 *)v13 + 2);
              v22 = v21 - 48;
              v23 = v21 + 10 * (int)v20 - 48;
              if (v22 > 9)
              {
                v15 = (char *)(v13 + 1);
              }
              else
              {
                v20 = v23;
                v15 = (char *)(v13 + 2);
              }
            }
            v24 = &v12[3 * (int)v20];
            v25 = v44 > v20;
            v26 = (std::string::value_type **)&v66[8];
            if (v25)
              v26 = v24;
            v27 = *v26;
            v28 = v24 + 1;
            if (!v25)
              v28 = (std::string::value_type **)&v66[16];
            v29 = *v28;
            while (v27 != v29)
              std::string::push_back(&v45, *v27++);
            goto LABEL_49;
          }
        }
        LOBYTE(v14) = 36;
      }
LABEL_48:
      std::string::push_back(&v45, v14);
      v15 = (char *)v13;
LABEL_49:
      v13 = v15 + 1;
      if (v15 == ",")
      {
        v31 = v64;
        v32 = v64 | 0x800;
        v64 |= 0x800u;
        v34 = (uint64_t *)&v66[16];
        v33 = (std::string::value_type **)&v66[8];
        if (v11 != v12)
        {
          v33 = v12;
          v34 = v43;
        }
        v35 = *v34;
        v36 = (uint64_t)v62;
        if (*v33 == (std::string::value_type *)*v34)
        {
          if (v62 == (std::string::value_type *)v35)
          {
LABEL_67:
            if (v12)
              operator delete(v12);
            v73 = 0;
            v65 = 0u;
            memset(v66, 0, 25);
            v67 = 0;
            v68 = 0;
            v69 = 0;
            v70 = 0;
            v71 = 0;
            v72 = 0;
            v74 = 0;
          }
          else
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v75 = 0u;
            memset(v76, 0, sizeof(v76));
            v38 = sub_18D2CFE70((uint64_t)v63, v35, (uint64_t)v62, (uint64_t)&v75, v31 | 0x860u);
            sub_18D2D004C((uint64_t)&v65, v35, v36, (uint64_t *)&v75, 1);
            if ((_QWORD)v75)
              operator delete((void *)v75);
            if ((v38 & 1) == 0)
            {
              ++v35;
              v32 = v64;
              v36 = (uint64_t)v62;
              goto LABEL_58;
            }
          }
        }
        else
        {
LABEL_58:
          v64 = v32 | 0x80;
          v77 = 0;
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v75 = 0u;
          memset(v76, 0, sizeof(v76));
          v37 = sub_18D2CFE70((uint64_t)v63, v35, v36, (uint64_t)&v75, v32 | 0x80u);
          sub_18D2D004C((uint64_t)&v65, v35, v36, (uint64_t *)&v75, (v32 & 0x800) != 0);
          if ((_QWORD)v75)
            operator delete((void *)v75);
          if ((v37 & 1) == 0)
          {
            v12 = (std::string::value_type **)v65;
            goto LABEL_67;
          }
        }
        goto LABEL_15;
      }
    }
  }
  for (i = v42; v7 != v6; ++v7)
    std::string::push_back(&v45, *v7);
LABEL_72:
  if ((_QWORD)v65)
    operator delete((void *)v65);
  if (*(char *)(i + 23) < 0)
    operator delete(*(void **)i);
  *(std::string *)i = v45;
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  std::locale::~locale(&v46);
}

void sub_18D2C4740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p)
{
  if (__p)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  sub_18D07C868((uint64_t)&a31);
  std::locale::~locale(&a26);
  _Unwind_Resume(a1);
}

char *swan::BatchLogParser::update(uint64_t a1, const std::string *a2)
{
  std::string *v3;
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *result;
  char *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int64_t v38;
  char *v39;
  char *v40;
  char *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  __int128 v69;
  char *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t i;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  void *v122;
  char *v123;
  std::string __p;

  v3 = std::string::operator=((std::string *)a1, a2);
  swan::BatchLogParser::wipef((uint64_t)v3, a1);
  v4 = *(void ***)(a1 + 32);
  v5 = *(void ***)(a1 + 40);
  if (v5 == v4)
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(void ***)(a1 + 32);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = &v4[v7 / 0xAA];
    v9 = (unint64_t)*v8;
    v10 = (unint64_t)*v8 + 24 * (v7 % 0xAA);
    v11 = (unint64_t)v4[(*(_QWORD *)(a1 + 64) + v7) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 64) + v7) % 0xAA);
    if (v10 != v11)
    {
      do
      {
        if (*(char *)(v10 + 23) < 0)
        {
          operator delete(*(void **)v10);
          v9 = (unint64_t)*v8;
        }
        v10 += 24;
        if (v10 - v9 == 4080)
        {
          v12 = (unint64_t)v8[1];
          ++v8;
          v9 = v12;
          v10 = v12;
        }
      }
      while (v10 != v11);
      v4 = *(void ***)(a1 + 32);
      v5 = *(void ***)(a1 + 40);
    }
  }
  *v6 = 0;
  v13 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v14 = *(_QWORD *)(a1 + 40);
      v4 = (void **)(*(_QWORD *)(a1 + 32) + 8);
      *(_QWORD *)(a1 + 32) = v4;
      v13 = v14 - (_QWORD)v4;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    v15 = 85;
  }
  else
  {
    if (v13 >> 3 != 2)
      goto LABEL_17;
    v15 = 170;
  }
  *(_QWORD *)(a1 + 56) = v15;
LABEL_17:
  v16 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v16 = *(const char **)a1;
  result = strdup(v16);
  if (result)
  {
    v123 = result;
    v18 = strtok(result, ",");
    if (v18)
    {
      v19 = v18;
      while (1)
      {
        v20 = sub_18D0778AC(&__p, v19);
        swan::BatchLogParser::trimField((uint64_t)v20, &__p);
        v22 = *(char **)(a1 + 32);
        v21 = *(char **)(a1 + 40);
        v23 = (v21 - v22) >> 3;
        if (v21 == v22)
          v24 = 0;
        else
          v24 = 170 * v23 - 1;
        v25 = *(_QWORD *)(a1 + 56);
        if (v24 != *(_QWORD *)(a1 + 64) + v25)
          goto LABEL_59;
        v26 = v25 >= 0xAA;
        v27 = v25 - 170;
        if (v26)
        {
          *(_QWORD *)(a1 + 56) = v27;
          v30 = *(_QWORD *)v22;
          v29 = v22 + 8;
          v28 = v30;
          *(_QWORD *)(a1 + 32) = v29;
          if (v21 == *(char **)(a1 + 48))
          {
            v31 = *(_QWORD *)(a1 + 24);
            v32 = (uint64_t)&v29[-v31];
            if ((unint64_t)v29 <= v31)
            {
              v55 = (uint64_t)&v21[-v31];
              v54 = v55 == 0;
              v56 = v55 >> 2;
              if (v54)
                v57 = 1;
              else
                v57 = v56;
              v58 = (char *)sub_18D07BF3C(v57);
              v60 = &v58[8 * (v57 >> 2)];
              v61 = *(uint64_t **)(a1 + 32);
              v21 = v60;
              v62 = *(_QWORD *)(a1 + 40) - (_QWORD)v61;
              if (v62)
              {
                v21 = &v60[v62 & 0xFFFFFFFFFFFFFFF8];
                v63 = 8 * (v62 >> 3);
                v64 = &v58[8 * (v57 >> 2)];
                do
                {
                  v65 = *v61++;
                  *(_QWORD *)v64 = v65;
                  v64 += 8;
                  v63 -= 8;
                }
                while (v63);
              }
              v66 = *(void **)(a1 + 24);
              *(_QWORD *)(a1 + 24) = v58;
              *(_QWORD *)(a1 + 32) = v60;
              *(_QWORD *)(a1 + 40) = v21;
              *(_QWORD *)(a1 + 48) = &v58[8 * v59];
              if (v66)
              {
                operator delete(v66);
                v21 = *(char **)(a1 + 40);
              }
            }
            else
            {
              v33 = v32 >> 3;
              v34 = v32 >> 3 < -1;
              v35 = (v32 >> 3) + 2;
              if (v34)
                v36 = v35;
              else
                v36 = v33 + 1;
              v37 = &v29[-8 * (v36 >> 1)];
              v38 = v21 - v29;
              if (v21 != v29)
              {
                memmove(&v29[-8 * (v36 >> 1)], v29, v21 - v29);
                v21 = *(char **)(a1 + 32);
              }
              v39 = &v21[-8 * (v36 >> 1)];
              v21 = &v37[v38];
              *(_QWORD *)(a1 + 32) = v39;
              *(_QWORD *)(a1 + 40) = &v37[v38];
            }
          }
          *(_QWORD *)v21 = v28;
        }
        else
        {
          v40 = *(char **)(a1 + 48);
          v41 = *(char **)(a1 + 24);
          if (v23 >= (v40 - v41) >> 3)
          {
            if (v40 == v41)
              v44 = 1;
            else
              v44 = (v40 - v41) >> 2;
            v45 = (char *)sub_18D07BF3C(v44);
            v47 = v46;
            v48 = operator new(0xFF0uLL);
            v49 = &v45[8 * v23];
            v50 = &v45[8 * v47];
            if (v23 == v47)
            {
              v51 = 8 * v23;
              if (v21 - v22 < 1)
              {
                v91 = v51 >> 2;
                if (v21 == v22)
                  v92 = 1;
                else
                  v92 = v91;
                v93 = (char *)sub_18D07BF3C(v92);
                v49 = &v93[8 * (v92 >> 2)];
                v50 = &v93[8 * v94];
                if (v45)
                  operator delete(v45);
                v45 = v93;
              }
              else
              {
                v52 = v51 >> 3;
                if (v52 >= -1)
                  v53 = v52 + 1;
                else
                  v53 = v52 + 2;
                v49 -= 8 * (v53 >> 1);
              }
            }
            *(_QWORD *)v49 = v48;
            v21 = v49 + 8;
            for (i = *(_QWORD *)(a1 + 40); i != *(_QWORD *)(a1 + 32); i -= 8)
            {
              if (v49 == v45)
              {
                if (v21 >= v50)
                {
                  if (v50 == v45)
                    v100 = 1;
                  else
                    v100 = (v50 - v45) >> 2;
                  v101 = (char *)sub_18D07BF3C(v100);
                  v103 = v101;
                  v49 = &v101[(2 * v100 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v104 = v21 - v45;
                  v54 = v21 == v45;
                  v21 = v49;
                  if (!v54)
                  {
                    v21 = &v49[v104 & 0xFFFFFFFFFFFFFFF8];
                    v105 = 8 * (v104 >> 3);
                    v106 = v49;
                    v107 = v45;
                    do
                    {
                      v108 = *(_QWORD *)v107;
                      v107 += 8;
                      *(_QWORD *)v106 = v108;
                      v106 += 8;
                      v105 -= 8;
                    }
                    while (v105);
                  }
                  v50 = &v101[8 * v102];
                  if (v45)
                    operator delete(v45);
                  v45 = v103;
                }
                else
                {
                  v96 = (v50 - v21) >> 3;
                  if (v96 >= -1)
                    v97 = v96 + 1;
                  else
                    v97 = v96 + 2;
                  v98 = v97 >> 1;
                  v49 = &v45[8 * (v97 >> 1)];
                  v99 = v45;
                  if (v21 != v45)
                  {
                    memmove(v49, v45, v21 - v45);
                    v99 = v21;
                  }
                  v21 = &v99[8 * v98];
                }
              }
              v109 = *(_QWORD *)(i - 8);
              *((_QWORD *)v49 - 1) = v109;
              v49 -= 8;
            }
            v110 = *(void **)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v45;
            *(_QWORD *)(a1 + 32) = v49;
            *(_QWORD *)(a1 + 40) = v21;
            *(_QWORD *)(a1 + 48) = v50;
            if (v110)
            {
              operator delete(v110);
              v21 = *(char **)(a1 + 40);
            }
            goto LABEL_58;
          }
          v42 = operator new(0xFF0uLL);
          v43 = v42;
          if (v40 == v21)
          {
            if (v22 == v41)
            {
              if (v21 == v22)
                v71 = 1;
              else
                v71 = (v40 - v22) >> 2;
              v72 = (char *)sub_18D07BF3C(v71);
              v22 = &v72[(2 * v71 + 6) & 0xFFFFFFFFFFFFFFF8];
              v74 = *(uint64_t **)(a1 + 32);
              v75 = v22;
              v76 = *(_QWORD *)(a1 + 40) - (_QWORD)v74;
              if (v76)
              {
                v75 = &v22[v76 & 0xFFFFFFFFFFFFFFF8];
                v77 = 8 * (v76 >> 3);
                v78 = &v72[(2 * v71 + 6) & 0xFFFFFFFFFFFFFFF8];
                do
                {
                  v79 = *v74++;
                  *(_QWORD *)v78 = v79;
                  v78 += 8;
                  v77 -= 8;
                }
                while (v77);
              }
              v80 = *(void **)(a1 + 24);
              *(_QWORD *)(a1 + 24) = v72;
              *(_QWORD *)(a1 + 32) = v22;
              *(_QWORD *)(a1 + 40) = v75;
              *(_QWORD *)(a1 + 48) = &v72[8 * v73];
              if (v80)
              {
                operator delete(v80);
                v22 = *(char **)(a1 + 32);
              }
            }
            *((_QWORD *)v22 - 1) = v43;
            v81 = *(char **)(a1 + 32);
            v82 = *(char **)(a1 + 40);
            *(_QWORD *)(a1 + 32) = v81 - 8;
            v83 = *((_QWORD *)v81 - 1);
            *(_QWORD *)(a1 + 32) = v81;
            if (v82 == *(char **)(a1 + 48))
            {
              v84 = *(_QWORD *)(a1 + 24);
              v85 = (uint64_t)&v81[-v84];
              if ((unint64_t)v81 <= v84)
              {
                v111 = (uint64_t)&v82[-v84];
                v54 = v111 == 0;
                v112 = v111 >> 2;
                if (v54)
                  v113 = 1;
                else
                  v113 = v112;
                v114 = (char *)sub_18D07BF3C(v113);
                v116 = &v114[8 * (v113 >> 2)];
                v117 = *(uint64_t **)(a1 + 32);
                v82 = v116;
                v118 = *(_QWORD *)(a1 + 40) - (_QWORD)v117;
                if (v118)
                {
                  v82 = &v116[v118 & 0xFFFFFFFFFFFFFFF8];
                  v119 = 8 * (v118 >> 3);
                  v120 = &v114[8 * (v113 >> 2)];
                  do
                  {
                    v121 = *v117++;
                    *(_QWORD *)v120 = v121;
                    v120 += 8;
                    v119 -= 8;
                  }
                  while (v119);
                }
                v122 = *(void **)(a1 + 24);
                *(_QWORD *)(a1 + 24) = v114;
                *(_QWORD *)(a1 + 32) = v116;
                *(_QWORD *)(a1 + 40) = v82;
                *(_QWORD *)(a1 + 48) = &v114[8 * v115];
                if (v122)
                {
                  operator delete(v122);
                  v82 = *(char **)(a1 + 40);
                }
              }
              else
              {
                v86 = v85 >> 3;
                v34 = v85 >> 3 < -1;
                v87 = (v85 >> 3) + 2;
                if (v34)
                  v88 = v87;
                else
                  v88 = v86 + 1;
                v89 = &v81[-8 * (v88 >> 1)];
                v90 = v82 - v81;
                if (v82 != v81)
                {
                  memmove(&v81[-8 * (v88 >> 1)], v81, v82 - v81);
                  v81 = *(char **)(a1 + 32);
                }
                v82 = &v89[v90];
                *(_QWORD *)(a1 + 32) = &v81[-8 * (v88 >> 1)];
                *(_QWORD *)(a1 + 40) = &v89[v90];
              }
            }
            *(_QWORD *)v82 = v83;
          }
          else
          {
            *(_QWORD *)v21 = v42;
          }
        }
        v21 = (char *)(*(_QWORD *)(a1 + 40) + 8);
        *(_QWORD *)(a1 + 40) = v21;
LABEL_58:
        v22 = *(char **)(a1 + 32);
LABEL_59:
        if (v21 == v22)
        {
          v68 = 0;
        }
        else
        {
          v67 = *(_QWORD *)(a1 + 64) + *(_QWORD *)(a1 + 56);
          v68 = *(_QWORD *)&v22[8 * (v67 / 0xAA)] + 24 * (v67 % 0xAA);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_18D077798((_BYTE *)v68, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v69 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v68 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v68 = v69;
        }
        ++*(_QWORD *)(a1 + 64);
        v70 = strtok(0, ",");
        v19 = v70;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v19)
            break;
        }
        else if (!v70)
        {
          break;
        }
      }
    }
    free(v123);
    return (char *)(*(_QWORD *)(a1 + 64) != 0);
  }
  return result;
}

void sub_18D2C4E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  operator delete(v18);
  if (v17)
    operator delete(v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *swan::BatchLogParser::updateEnforceCsv(uint64_t a1, uint64_t a2)
{
  std::string::size_type size;
  uint64_t i;
  char v5;
  std::string::size_type v6;
  std::string *p_p;
  std::string *v8;
  std::string *v9;
  char *v10;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_18D077798(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    for (i = 0; i != size; ++i)
    {
      v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v6 = __p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (p_p->__r_.__value_.__s.__data_[i] == 58)
      {
        p_p->__r_.__value_.__s.__data_[i] = 44;
        v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v6 = __p.__r_.__value_.__r.__words[0];
      }
      if (v5 >= 0)
        v8 = &__p;
      else
        v8 = (std::string *)v6;
      if (v8->__r_.__value_.__s.__data_[i] == 93)
      {
        v8->__r_.__value_.__s.__data_[i] = 44;
        v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v6 = __p.__r_.__value_.__r.__words[0];
      }
      if (v5 >= 0)
        v9 = &__p;
      else
        v9 = (std::string *)v6;
      if (v9->__r_.__value_.__s.__data_[i] == 61)
        v9->__r_.__value_.__s.__data_[i] = 44;
    }
  }
  v10 = swan::BatchLogParser::update(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_18D2C4FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t swan::BatchLogParser::convertASCIIToStruct(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  FILE *v13;
  FILE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  const char *v31;
  void *__p;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51[8192];
  uint64_t v52;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v52 = *MEMORY[0x1E0C80C00];
  bzero(&v35, 0xF8uLL);
  if (*(char *)(v11 + 23) >= 0)
    v12 = (const char *)v11;
  else
    v12 = *(const char **)v11;
  v13 = fopen(v12, "r");
  if (v13)
  {
    v14 = v13;
    sub_18D0778AC(&__p, "%%1:deviceTime(s),2:Latitude(deg),3:Longitude(deg),4:Accuracy(m),5:TTFF(s),6:TTF(s),7:Speed(m/s),8:Course(deg),9:Altitude(m),10:VerticalAccuracy(m),11:AssistanceTime,12:AssistanceLocation,13:AssistanceEph,14:GpsTimeOfWeeks(ms),15:GpsWeek,16:Undulation(m),17:SpeedAccuracy(m/s),18:CourseAccuracy(deg),19:A(m),20:B(m),21:AZ(deg),22:HDOP,23:VDOP,24:ODOM,25:LP,26:SA,27:R,28:VTOW,29:CTOW,30:TUNC,31:NS,32:MS,33:AgeOfPowerMode,34:SQI,35:verticalSpeed(m/s),36:vertcalSpeedAccuracy(m/s)\n");
    v15 = 0;
    v16 = 0;
    *v3 = 0;
    while (1)
    {
      do
      {
        if (feof(v14) || !fgets(v51, 0x2000, v14))
          goto LABEL_14;
      }
      while (v51[0] == 37);
      if (sscanf(v51, "%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%d,%d,%d,%d,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%d,%d,%d,%d,%d,%lf,%d,%d,%lf,%d,%lf,%lf\n", &v35, (char *)&v35 + 8, &v36, (char *)&v36 + 8, &v37, (char *)&v37 + 8, &v38, (char *)&v38 + 8, &v39, (char *)&v39 + 8, &v40, (char *)&v40 + 4, (char *)&v40 + 8, (char *)&v40 + 12, &v41, (char *)&v41 + 8,
             &v42,
             (char *)&v42 + 8,
             &v43,
             (char *)&v43 + 8,
             &v44,
             (char *)&v44 + 8,
             &v45,
             (char *)&v45 + 8,
             &v46,
             (char *)&v46 + 4,
             (char *)&v46 + 8,
             (char *)&v46 + 12,
             &v47,
             (char *)&v47 + 8,
             &v48,
             (char *)&v48 + 4,
             (char *)&v48 + 8,
             &v49,
             (char *)&v49 + 8,
             &v50) != 36)
        break;
      v17 = *v5 + 248 * v16;
      v18 = v35;
      v19 = v36;
      v20 = v38;
      *(_OWORD *)(v17 + 32) = v37;
      *(_OWORD *)(v17 + 48) = v20;
      *(_OWORD *)v17 = v18;
      *(_OWORD *)(v17 + 16) = v19;
      v21 = v39;
      v22 = v40;
      v23 = v42;
      *(_OWORD *)(v17 + 96) = v41;
      *(_OWORD *)(v17 + 112) = v23;
      *(_OWORD *)(v17 + 64) = v21;
      *(_OWORD *)(v17 + 80) = v22;
      v24 = v43;
      v25 = v44;
      v26 = v46;
      *(_OWORD *)(v17 + 160) = v45;
      *(_OWORD *)(v17 + 176) = v26;
      *(_OWORD *)(v17 + 128) = v24;
      *(_OWORD *)(v17 + 144) = v25;
      v27 = v47;
      v28 = v48;
      v29 = v49;
      *(_QWORD *)(v17 + 240) = v50;
      *(_OWORD *)(v17 + 208) = v28;
      *(_OWORD *)(v17 + 224) = v29;
      *(_OWORD *)(v17 + 192) = v27;
      if (++v15 > v7)
        ++v16;
      if (v16 == v9)
      {
        v16 = v9;
LABEL_14:
        v30 = 0;
        *v3 = v16;
        goto LABEL_15;
      }
    }
    v30 = 0xFFFFFFFFLL;
LABEL_15:
    if (v34 < 0)
      operator delete(__p);
  }
  else
  {
    if (*(char *)(v11 + 23) >= 0)
      v31 = (const char *)v11;
    else
      v31 = *(const char **)v11;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", v31);
    return 0xFFFFFFFFLL;
  }
  return v30;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  FILE *v8;
  FILE *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v13;
  void *__p;
  char v15;
  char __src[264];
  char v17[8192];
  uint64_t v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v13 = v4;
  v6 = v5;
  v18 = *MEMORY[0x1E0C80C00];
  bzero(__src, 0x108uLL);
  if (*(char *)(v6 + 23) >= 0)
    v7 = (const char *)v6;
  else
    v7 = *(const char **)v6;
  v8 = fopen(v7, "r");
  if (v8)
  {
    v9 = v8;
    sub_18D0778AC(&__p, "%%1:deviceTime(s),2:Latitude(deg),3:Longitude(deg),4:Accuracy(m),5:TTFF(s),6:TTF(s),7:Speed(m/s),8:Course(deg),9:Altitude(m),10:VerticalAccuracy(m),11:AssistanceTime,12:AssistanceLocation,13:AssistanceEph,14:GpsTimeOfWeeks(ms),15:GpsWeek,16:Undulation(m),17:SpeedAccuracy(m/s),18:CourseAccuracy(deg),19:A(m),20:B(m),21:AZ(deg),22:HDOP,23:VDOP,24:ODOM,25:LP,26:SA,27:R,28:VTOW,29:CTOW,30:TUNC,31:NS,32:MS,33:AgeOfPowerMode,34:SQI,35:verticalSpeed(m/s),36:vertcalSpeedAccuracy(m/s)\n");
    *v3 = 0;
    if (!feof(v9))
    {
      while (fgets(v17, 0x2000, v9))
      {
        if (v17[0] != 37)
        {
          if (sscanf(v17, "%lf,%x,%lf,%d,%d,%lld,%d,%lf,%lf,%lf,%lf,%lf,%d,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%d,%lf,%lf,%lf,%d,%lf,%lf,%lf,%lf\n", __src, &__src[8], &__src[16], &__src[24], &__src[28], &__src[32], &__src[40], &__src[48], &__src[56], &__src[64], &__src[72], &__src[80], &__src[88], &__src[96], &__src[104], &__src[112],
                 &__src[120],
                 &__src[128],
                 &__src[136],
                 &__src[144],
                 &__src[152],
                 &__src[160],
                 &__src[168],
                 &__src[176],
                 &__src[184],
                 &__src[192],
                 &__src[200],
                 &__src[208],
                 &__src[216],
                 &__src[224],
                 &__src[232],
                 &__src[240],
                 &__src[248],
                 &__src[256]) != 34)
          {
            v10 = 0xFFFFFFFFLL;
            goto LABEL_7;
          }
          memcpy((void *)(v13 + 264 * *v3), __src, 0x108uLL);
          ++*v3;
        }
        if (feof(v9))
          break;
      }
    }
    v10 = 0;
LABEL_7:
    if (v15 < 0)
      operator delete(__p);
  }
  else
  {
    if (*(char *)(v6 + 23) >= 0)
      v11 = (const char *)v6;
    else
      v11 = *(const char **)v6;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", v11);
    return 0;
  }
  return v10;
}

uint64_t swan::BatchLogParser::parseGPSBatchIntoASCII(uint64_t a1, uint64_t a2)
{
  const void **v2;
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  FILE *v7;
  FILE *v8;
  size_t v9;
  void *p_p;
  const void *v11;
  const char *v12;
  FILE *v13;
  void **v14;
  int v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  void *v24;
  char v25;
  const char *v26;
  std::string *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  std::string *v32;
  char v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  unsigned int v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  void *v82[2];
  char v83;
  void *v84[2];
  char v85;
  void *v86[2];
  char v87;
  void *v88[2];
  char v89;
  void *v90[2];
  char v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  std::string v98;
  std::string v99;
  _OWORD v100[4];
  uint64_t v101;
  void *v102[2];
  char v103;
  void *__p;
  _BYTE v105[15];
  char v106;
  double v107[2];
  double v108;
  int v109[4];
  int v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  int v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  int v129;
  double v130;
  double v131;
  double v132;
  int v133;
  double v134;
  double v135;
  double v136;
  _QWORD v137[2];
  char __s1[8192];
  std::string v139[43];
  uint64_t v140;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v140 = *MEMORY[0x1E0C80C00];
  bzero(v107, 0x108uLL);
  if (*(char *)(v5 + 23) >= 0)
    v6 = (const char *)v5;
  else
    v6 = *(const char **)v5;
  v7 = fopen(v6, "r");
  if (!v7)
  {
    if (*(char *)(v5 + 23) >= 0)
      v36 = (const char *)v5;
    else
      v36 = *(const char **)v5;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", v36);
    return 0xFFFFFFFFLL;
  }
  v8 = v7;
  if (*((char *)v3 + 23) >= 0)
    v9 = *((unsigned __int8 *)v3 + 23);
  else
    v9 = (size_t)v3[1];
  p_p = &__p;
  sub_18D099E3C((uint64_t)&__p, v9 + 6);
  if (v106 < 0)
    p_p = __p;
  if (v9)
  {
    if (*((char *)v3 + 23) >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(p_p, v11, v9);
  }
  strcpy((char *)p_p + v9, ".1.csv");
  if (v106 >= 0)
    v12 = (const char *)&__p;
  else
    v12 = (const char *)__p;
  v13 = fopen(v12, "w");
  if (!v13)
  {
    v37 = (const char *)&__p;
    if (v106 < 0)
      v37 = (const char *)__p;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", v37);
    v35 = 0xFFFFFFFFLL;
    goto LABEL_148;
  }
  sub_18D0778AC(v102, "%%1:deviceTime(s),2:Latitude(deg),3:Longitude(deg),4:Accuracy(m),5:TTFF(s),6:TTF(s),7:Speed(m/s),8:Course(deg),9:Altitude(m),10:VerticalAccuracy(m),11:AssistanceTime,12:AssistanceLocation,13:AssistanceEph,14:GpsTimeOfWeeks(ms),15:GpsWeek,16:Undulation(m),17:SpeedAccuracy(m/s),18:CourseAccuracy(deg),19:A(m),20:B(m),21:AZ(deg),22:HDOP,23:VDOP,24:ODOM,25:LP,26:SA,27:R,28:VTOW,29:CTOW,30:TUNC,31:NS,32:MS,33:AgeOfPowerMode,34:SQI,35:verticalSpeed(m/s),36:vertcalSpeedAccuracy(m/s)\n");
  if (v103 >= 0)
    v14 = v102;
  else
    v14 = (void **)v102[0];
  fputs((const char *)v14, v13);
  v15 = 1;
  v39 = -1;
  while (!feof(v8) && fgets(__s1, 0x2000, v8))
  {
    v101 = 0;
    memset(v100, 0, sizeof(v100));
    if (strstr(__s1, "Batched results processed"))
    {
      fclose(v13);
      if (*((char *)v3 + 23) >= 0)
        v16 = *((unsigned __int8 *)v3 + 23);
      else
        v16 = (size_t)v3[1];
      sub_18D099E3C((uint64_t)&v99, v16 + 1);
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v99;
      else
        v17 = (std::string *)v99.__r_.__value_.__r.__words[0];
      if (v16)
      {
        if (*((char *)v3 + 23) >= 0)
          v18 = v3;
        else
          v18 = *v3;
        memmove(v17, v18, v16);
      }
      ++v15;
      *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 46;
      std::to_string(&v98, v15);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v98;
      else
        v19 = (std::string *)v98.__r_.__value_.__r.__words[0];
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      else
        size = v98.__r_.__value_.__l.__size_;
      v21 = std::string::append(&v99, (const std::string::value_type *)v19, size);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v139[0].__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v139[0].__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(v139, ".csv", 4uLL);
      v24 = (void *)v23->__r_.__value_.__r.__words[0];
      v137[0] = v23->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v137 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
      v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (v106 < 0)
        operator delete(__p);
      __p = v24;
      *(_QWORD *)v105 = v137[0];
      *(_QWORD *)&v105[7] = *(_QWORD *)((char *)v137 + 7);
      v106 = v25;
      if (SHIBYTE(v139[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (v106 >= 0)
        v26 = (const char *)&__p;
      else
        v26 = (const char *)__p;
      v13 = fopen(v26, "w");
      if (!v13)
      {
        v34 = (const char *)&__p;
        if (v106 < 0)
          v34 = (const char *)__p;
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", v34);
        v33 = 0;
        goto LABEL_131;
      }
      sub_18D0778AC(v139, "%%1:deviceTime(s),2:Latitude(deg),3:Longitude(deg),4:Accuracy(m),5:TTFF(s),6:TTF(s),7:Speed(m/s),8:Course(deg),9:Altitude(m),10:VerticalAccuracy(m),11:AssistanceTime,12:AssistanceLocation,13:AssistanceEph,14:GpsTimeOfWeeks(ms),15:GpsWeek,16:Undulation(m),17:SpeedAccuracy(m/s),18:CourseAccuracy(deg),19:A(m),20:B(m),21:AZ(deg),22:HDOP,23:VDOP,24:ODOM,25:LP,26:SA,27:R,28:VTOW,29:CTOW,30:TUNC,31:NS,32:MS,33:AgeOfPowerMode,34:SQI,35:verticalSpeed(m/s),36:vertcalSpeedAccuracy(m/s)\n");
      if ((v139[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = v139;
      else
        v27 = (std::string *)v139[0].__r_.__value_.__r.__words[0];
      fputs((const char *)v27, v13);
      if (SHIBYTE(v139[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139[0].__r_.__value_.__l.__data_);
      v39 = 0;
    }
    if (strstr(__s1, ",CL-GPS,BATCHED,"))
    {
      sub_18D0778AC(v139, __s1);
      swan::BatchLogParser::updateEnforceCsv((uint64_t)v100, (uint64_t)v139);
      if (SHIBYTE(v139[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139[0].__r_.__value_.__l.__data_);
      swan::BatchLogParser::getField((swan::BatchLogParser *)v100, v107, 3uLL);
      sub_18D0778AC(v96, "TUNC");
      swan::BatchLogParser::getField(v100, &v110, (uint64_t)v96, 1);
      if (v97 < 0)
        operator delete(v96[0]);
      LODWORD(v137[0]) = 0;
      sub_18D0778AC(v94, "TowMs");
      swan::BatchLogParser::getField(v100, v137, (uint64_t)v94, 1);
      if (v95 < 0)
        operator delete(v94[0]);
      LODWORD(v28) = v137[0];
      v108 = (double)v28 / 1000.0;
      sub_18D0778AC(v92, "Week");
      swan::BatchLogParser::getField(v100, v109, (uint64_t)v92, 1);
      if (v93 < 0)
        operator delete(v92[0]);
      sub_18D0778AC(v90, "Pos");
      swan::BatchLogParser::getField(v100, &v111, (uint64_t)v90, 2);
      if (v91 < 0)
        operator delete(v90[0]);
      sub_18D0778AC(v88, "Pos");
      swan::BatchLogParser::getField(v100, &v112, (uint64_t)v88, 3);
      if (v89 < 0)
        operator delete(v88[0]);
      sub_18D0778AC(v86, "Altitude");
      swan::BatchLogParser::getField(v100, &v114, (uint64_t)v86, 1);
      if (v87 < 0)
        operator delete(v86[0]);
      v98.__r_.__value_.__r.__words[0] = 0;
      sub_18D0778AC(v84, "Undulation");
      swan::BatchLogParser::getField(v100, (double *)&v98, (uint64_t)v84, 1);
      if (v85 < 0)
        operator delete(v84[0]);
      v113 = v114 - *(double *)&v98.__r_.__value_.__l.__data_;
      sub_18D0778AC(v82, "Accuracy");
      swan::BatchLogParser::getField(v100, &v115, (uint64_t)v82, 1);
      if (v83 < 0)
        operator delete(v82[0]);
      sub_18D0778AC(v80, "hconf");
      swan::BatchLogParser::getField(v100, &v116, (uint64_t)v80, 1);
      if (v81 < 0)
        operator delete(v80[0]);
      sub_18D0778AC(v78, "pdop");
      swan::BatchLogParser::getField(v100, &v117, (uint64_t)v78, 1);
      if (v79 < 0)
        operator delete(v78[0]);
      sub_18D0778AC(v76, "HDOP");
      swan::BatchLogParser::getField(v100, &v118, (uint64_t)v76, 1);
      if (v77 < 0)
        operator delete(v76[0]);
      sub_18D0778AC(v74, "VDOP");
      swan::BatchLogParser::getField(v100, &v119, (uint64_t)v74, 1);
      if (v75 < 0)
        operator delete(v74[0]);
      sub_18D0778AC(v72, "A");
      swan::BatchLogParser::getField(v100, &v120, (uint64_t)v72, 1);
      if (v73 < 0)
        operator delete(v72[0]);
      sub_18D0778AC(v70, "B");
      swan::BatchLogParser::getField(v100, &v121, (uint64_t)v70, 1);
      if (v71 < 0)
        operator delete(v70[0]);
      sub_18D0778AC(v68, "AZ");
      swan::BatchLogParser::getField(v100, &v122, (uint64_t)v68, 1);
      if (v69 < 0)
        operator delete(v68[0]);
      sub_18D0778AC(v66, "VerticalAccuracy");
      swan::BatchLogParser::getField(v100, &v123, (uint64_t)v66, 1);
      if (v67 < 0)
        operator delete(v66[0]);
      sub_18D0778AC(v64, "Speed");
      swan::BatchLogParser::getField(v100, &v124, (uint64_t)v64, 1);
      if (v65 < 0)
        operator delete(v64[0]);
      sub_18D0778AC(v62, "VerticalSpeed");
      swan::BatchLogParser::getField(v100, &v125, (uint64_t)v62, 1);
      if (v63 < 0)
        operator delete(v62[0]);
      sub_18D0778AC(v60, "Course");
      swan::BatchLogParser::getField(v100, &v126, (uint64_t)v60, 1);
      if (v61 < 0)
        operator delete(v60[0]);
      sub_18D0778AC(v58, "SpeedAccuracy");
      swan::BatchLogParser::getField(v100, &v127, (uint64_t)v58, 1);
      if (v59 < 0)
        operator delete(v58[0]);
      sub_18D0778AC(v56, "VerticalSpeedAccuracy");
      swan::BatchLogParser::getField(v100, &v128, (uint64_t)v56, 1);
      if (v57 < 0)
        operator delete(v56[0]);
      sub_18D0778AC(v54, "mode");
      swan::BatchLogParser::getField(v100, &v129, (uint64_t)v54, 1);
      if (v55 < 0)
        operator delete(v54[0]);
      sub_18D0778AC(v52, "Course");
      swan::BatchLogParser::getField(v100, &v130, (uint64_t)v52, 1);
      if (v53 < 0)
        operator delete(v52[0]);
      sub_18D0778AC(v50, "CourseAccuracy");
      swan::BatchLogParser::getField(v100, &v131, (uint64_t)v50, 1);
      if (v51 < 0)
        operator delete(v50[0]);
      sub_18D0778AC(v48, "ODOM");
      swan::BatchLogParser::getField(v100, &v132, (uint64_t)v48, 1);
      if (v49 < 0)
        operator delete(v48[0]);
      sub_18D0778AC(v46, "lintegrity");
      swan::BatchLogParser::getField(v100, &v133, (uint64_t)v46, 1);
      if (v47 < 0)
        operator delete(v46[0]);
      sub_18D0778AC(v44, "lspeed");
      swan::BatchLogParser::getField(v100, &v134, (uint64_t)v44, 1);
      if (v45 < 0)
        operator delete(v44[0]);
      sub_18D0778AC(v42, "lspeedunc");
      swan::BatchLogParser::getField(v100, &v135, (uint64_t)v42, 1);
      if (v43 < 0)
        operator delete(v42[0]);
      sub_18D0778AC(v40, "blah");
      swan::BatchLogParser::getField(v100, &v136, (uint64_t)v40, 1);
      if (v41 < 0)
        operator delete(v40[0]);
      v29 = snprintf((char *)v139, 0x400uLL, "%.3lf,%.10lf,%.10lf,%.3lf", v107[0], v111, v112, v115);
      v30 = snprintf((char *)v139 + v29, 1024 - v29, ",%.2lf,%.2lf,%.3lf,%.5lf,%.3lf,%.3lf", -1.0, -1.0, v124, v130, v113, v123)+ (uint64_t)v29;
      LODWORD(v30) = snprintf((char *)v139 + v30, 1024 - v30, ",%d,%d,%d,%d,%.0lf", -1, -1, -1, v109[0], v108) + v30;
      LODWORD(v30) = snprintf((char *)v139 + (int)v30, 1024 - (int)v30, ",%.3lf,%.3lf,%.5lf,%.3lf,%.3lf,%.3lf,%.1lf,%.1lf,%.3lf", 0.0, v127, v131, v120, v121, v122, v118, v119, v132)+ v30;
      v31 = snprintf((char *)v139 + (int)v30, 1024 - (int)v30, ",%d,%d,%d,%d,%d,%.3lf,%d,%d,%.1lf,%d,%.3lf,%.3lf", -1, -1, -1, -1, -1, (double)v110, -1, -1, -1.0, -1, v125, v128);
      snprintf((char *)v139 + v31 + (int)v30, 1024 - (v31 + (int)v30), "\n");
      sub_18D0778AC(&v99, (char *)v139);
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v99;
      else
        v32 = (std::string *)v99.__r_.__value_.__r.__words[0];
      fputs((const char *)v32, v13);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
    }
    v33 = 1;
LABEL_131:
    sub_18D2C2EA8((_QWORD *)&v100[1] + 1);
    if (SBYTE7(v100[1]) < 0)
    {
      operator delete(*(void **)&v100[0]);
      if ((v33 & 1) == 0)
      {
LABEL_135:
        v35 = 0;
        goto LABEL_143;
      }
    }
    else if ((v33 & 1) == 0)
    {
      goto LABEL_135;
    }
  }
  if (v13)
    fclose(v13);
  fclose(v8);
  v35 = v39;
LABEL_143:
  if (v103 < 0)
    operator delete(v102[0]);
LABEL_148:
  if (v106 < 0)
    operator delete(__p);
  return v35;
}

void sub_18D2C63E4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  _Unwind_Resume(a1);
}

uint64_t swan::BatchLogParser::parseGPSSaIntoASCII(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  FILE *v9;
  FILE *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  const char *v16;
  FILE *v17;
  void **v18;
  uint64_t v19;
  FILE *v20;
  const char *v21;
  int v22;
  uint64_t v23;
  int v24;
  void **v25;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  _OWORD v101[4];
  uint64_t v102;
  void *v103[2];
  char v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  int v115;
  int v116;
  int v117;
  int v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  double v134;
  int v135;
  int v136;
  double v137;
  int v138;
  __int128 v139;
  char __s1[8192];
  void *__p[2];
  char v142;
  uint64_t v143;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v143 = *MEMORY[0x1E0C80C00];
  bzero(&v105, 0xF8uLL);
  if (*(char *)(v7 + 23) >= 0)
    v8 = (const char *)v7;
  else
    v8 = *(const char **)v7;
  v9 = fopen(v8, "r");
  if (!v9)
  {
    v20 = (FILE *)*MEMORY[0x1E0C80C10];
    if (*(char *)(v7 + 23) >= 0)
      v21 = (const char *)v7;
    else
      v21 = *(const char **)v7;
    goto LABEL_26;
  }
  v10 = v9;
  v11 = *(char *)(v7 + 23);
  if (v11 >= 0)
    v12 = v7;
  else
    v12 = *(_QWORD *)v7;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(v7 + 23);
  else
    v13 = *(_QWORD *)(v7 + 8);
  v14 = sub_18D076A18(MEMORY[0x1E0DE4A60], v12, v13);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  if (*(char *)(v3 + 23) >= 0)
    v16 = (const char *)v3;
  else
    v16 = *(const char **)v3;
  v17 = fopen(v16, "w");
  if (!v17)
  {
    v20 = (FILE *)*MEMORY[0x1E0C80C10];
    if (*(char *)(v3 + 23) >= 0)
      v21 = (const char *)v3;
    else
      v21 = *(const char **)v3;
LABEL_26:
    fprintf(v20, "Unable to open %s\n", v21);
    return 0;
  }
  sub_18D0778AC(v103, "%%1:deviceTime(s),2:Latitude(deg),3:Longitude(deg),4:Accuracy(m),5:TTFF(s),6:TTF(s),7:Speed(m/s),8:Course(deg),9:Altitude(m),10:VerticalAccuracy(m),11:AssistanceTime,12:AssistanceLocation,13:AssistanceEph,14:GpsTimeOfWeeks(ms),15:GpsWeek,16:Undulation(m),17:SpeedAccuracy(m/s),18:CourseAccuracy(deg),19:A(m),20:B(m),21:AZ(deg),22:HDOP,23:VDOP,24:ODOM,25:LP,26:SA,27:R,28:VTOW,29:CTOW,30:TUNC,31:NS,32:MS,33:AgeOfPowerMode,34:SQI,35:verticalSpeed(m/s),36:vertcalSpeedAccuracy(m/s)\n");
  if (v104 >= 0)
    v18 = v103;
  else
    v18 = (void **)v103[0];
  fputs((const char *)v18, v17);
  if (feof(v10))
  {
    v19 = 0xFFFFFFFFLL;
  }
  else
  {
    v19 = 0xFFFFFFFFLL;
    do
    {
      if (!fgets(__s1, 0x2000, v10))
        break;
      v102 = 0;
      memset(v101, 0, sizeof(v101));
      if (strstr(__s1, "Type,CL-GPSsa,Pos,") && !strstr(__s1, "TTFF") && (v5 & 1) == 0
        || strstr(__s1, ",Type,CL-BATCHED,Pos,") && v5)
      {
        sub_18D0778AC(__p, __s1);
        swan::BatchLogParser::updateEnforceCsv((uint64_t)v101, (uint64_t)__p);
        if (v142 < 0)
          operator delete(__p[0]);
        sub_18D0778AC(v99, "TowMs");
        swan::BatchLogParser::getField(v101, &v105, (uint64_t)v99, 1);
        if (v100 < 0)
          operator delete(v99[0]);
        v105 = v105 * 0.001;
        sub_18D0778AC(v97, "Pos");
        swan::BatchLogParser::getField(v101, &v106, (uint64_t)v97, 2);
        if (v98 < 0)
          operator delete(v97[0]);
        sub_18D0778AC(v95, "Pos");
        swan::BatchLogParser::getField(v101, &v107, (uint64_t)v95, 3);
        if (v96 < 0)
          operator delete(v95[0]);
        sub_18D0778AC(v93, "Accuracy");
        swan::BatchLogParser::getField(v101, &v108, (uint64_t)v93, 1);
        if (v94 < 0)
          operator delete(v93[0]);
        sub_18D0778AC(v91, "TTFF");
        swan::BatchLogParser::getField(v101, &v109, (uint64_t)v91, 1);
        if (v92 < 0)
          operator delete(v91[0]);
        sub_18D0778AC(v89, "TTF");
        swan::BatchLogParser::getField(v101, &v110, (uint64_t)v89, 1);
        if (v90 < 0)
          operator delete(v89[0]);
        sub_18D0778AC(v87, "Speed");
        swan::BatchLogParser::getField(v101, &v111, (uint64_t)v87, 1);
        if (v88 < 0)
          operator delete(v87[0]);
        sub_18D0778AC(v85, "Course");
        swan::BatchLogParser::getField(v101, &v112, (uint64_t)v85, 1);
        if (v86 < 0)
          operator delete(v85[0]);
        sub_18D0778AC(v83, "Altitude");
        swan::BatchLogParser::getField(v101, &v113, (uint64_t)v83, 1);
        if (v84 < 0)
          operator delete(v83[0]);
        sub_18D0778AC(v81, "VerticalAccuracy");
        swan::BatchLogParser::getField(v101, &v114, (uint64_t)v81, 1);
        if (v82 < 0)
          operator delete(v81[0]);
        sub_18D0778AC(v79, "Assistance");
        swan::BatchLogParser::getField(v101, &v115, (uint64_t)v79, 1);
        if (v80 < 0)
          operator delete(v79[0]);
        sub_18D0778AC(v77, "Assistance");
        swan::BatchLogParser::getField(v101, &v116, (uint64_t)v77, 2);
        if (v78 < 0)
          operator delete(v77[0]);
        sub_18D0778AC(v75, "Assistance");
        swan::BatchLogParser::getField(v101, &v117, (uint64_t)v75, 3);
        if (v76 < 0)
          operator delete(v75[0]);
        sub_18D0778AC(v73, "Week");
        swan::BatchLogParser::getField(v101, &v118, (uint64_t)v73, 1);
        if (v74 < 0)
          operator delete(v73[0]);
        sub_18D0778AC(v71, "TowMs");
        swan::BatchLogParser::getField(v101, &v119, (uint64_t)v71, 1);
        if (v72 < 0)
          operator delete(v71[0]);
        sub_18D0778AC(v69, "Undulation");
        swan::BatchLogParser::getField(v101, &v120, (uint64_t)v69, 1);
        if (v70 < 0)
          operator delete(v69[0]);
        sub_18D0778AC(v67, "SpeedAccuracy");
        swan::BatchLogParser::getField(v101, &v121, (uint64_t)v67, 1);
        if (v68 < 0)
          operator delete(v67[0]);
        sub_18D0778AC(v65, "CourseAccuracy");
        swan::BatchLogParser::getField(v101, &v122, (uint64_t)v65, 1);
        if (v66 < 0)
          operator delete(v65[0]);
        sub_18D0778AC(v63, "A");
        swan::BatchLogParser::getField(v101, &v123, (uint64_t)v63, 1);
        if (v64 < 0)
          operator delete(v63[0]);
        sub_18D0778AC(v61, "B");
        swan::BatchLogParser::getField(v101, &v124, (uint64_t)v61, 1);
        if (v62 < 0)
          operator delete(v61[0]);
        sub_18D0778AC(v59, "AZ");
        swan::BatchLogParser::getField(v101, &v125, (uint64_t)v59, 1);
        if (v60 < 0)
          operator delete(v59[0]);
        sub_18D0778AC(v57, "HDOP");
        swan::BatchLogParser::getField(v101, &v126, (uint64_t)v57, 1);
        if (v58 < 0)
          operator delete(v57[0]);
        sub_18D0778AC(v55, "VDOP");
        swan::BatchLogParser::getField(v101, &v127, (uint64_t)v55, 1);
        if (v56 < 0)
          operator delete(v55[0]);
        sub_18D0778AC(v53, "ODOM");
        swan::BatchLogParser::getField(v101, &v128, (uint64_t)v53, 1);
        if (v54 < 0)
          operator delete(v53[0]);
        sub_18D0778AC(v51, "LP");
        swan::BatchLogParser::getField(v101, &v129, (uint64_t)v51, 1);
        if (v52 < 0)
          operator delete(v51[0]);
        sub_18D0778AC(v49, "SA");
        swan::BatchLogParser::getField(v101, &v130, (uint64_t)v49, 1);
        if (v50 < 0)
          operator delete(v49[0]);
        sub_18D0778AC(v47, "R");
        swan::BatchLogParser::getField(v101, &v131, (uint64_t)v47, 1);
        if (v48 < 0)
          operator delete(v47[0]);
        sub_18D0778AC(v45, "VTOW");
        swan::BatchLogParser::getField(v101, &v132, (uint64_t)v45, 1);
        if (v46 < 0)
          operator delete(v45[0]);
        sub_18D0778AC(v43, "CTOW");
        swan::BatchLogParser::getField(v101, &v133, (uint64_t)v43, 1);
        if (v44 < 0)
          operator delete(v43[0]);
        sub_18D0778AC(v41, "TUNC");
        swan::BatchLogParser::getField(v101, &v134, (uint64_t)v41, 1);
        if (v42 < 0)
          operator delete(v41[0]);
        sub_18D0778AC(v39, "NS");
        swan::BatchLogParser::getField(v101, &v135, (uint64_t)v39, 1);
        if (v40 < 0)
          operator delete(v39[0]);
        sub_18D0778AC(v37, "MS");
        swan::BatchLogParser::getField(v101, &v136, (uint64_t)v37, 1);
        if (v38 < 0)
          operator delete(v37[0]);
        sub_18D0778AC(v35, "AgeOfPowerMode");
        swan::BatchLogParser::getField(v101, &v137, (uint64_t)v35, 1);
        if (v36 < 0)
          operator delete(v35[0]);
        sub_18D0778AC(v33, "SQI");
        swan::BatchLogParser::getField(v101, &v138, (uint64_t)v33, 1);
        if (v34 < 0)
          operator delete(v33[0]);
        sub_18D0778AC(v31, "VerticalSpeed");
        swan::BatchLogParser::getField(v101, (double *)&v139, (uint64_t)v31, 1);
        if (v32 < 0)
          operator delete(v31[0]);
        sub_18D0778AC(v29, "VerticalSpeedUncertainty");
        swan::BatchLogParser::getField(v101, (double *)&v139 + 1, (uint64_t)v29, 1);
        if (v30 < 0)
          operator delete(v29[0]);
        v139 = xmmword_18D347E60;
        v22 = snprintf((char *)__p, 0x400uLL, "%.3lf,%.10lf,%.10lf,%.3lf", v105, v106, v107, v108);
        v23 = snprintf((char *)__p + v22, 1024 - v22, ",%.2lf,%.2lf,%.3lf,%.5lf,%.3lf,%.3lf", v109, v110, v111, v112, v113, v114)+ (uint64_t)v22;
        LODWORD(v23) = snprintf((char *)__p + v23, 1024 - v23, ",%d,%d,%d,%d,%.0lf", v115, v116, v117, v118, v119) + v23;
        LODWORD(v23) = snprintf((char *)__p + (int)v23, 1024 - (int)v23, ",%.3lf,%.3lf,%.5lf,%.3lf,%.3lf,%.3lf,%.1lf,%.1lf,%.3lf", v120, v121, v122, v123, v124, v125, v126, v127, v128)+ v23;
        v24 = snprintf((char *)__p + (int)v23, 1024 - (int)v23, ",%d,%d,%d,%d,%d,%.3lf,%d,%d,%.1lf,%d,%.3lf,%.3lf", v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, *(double *)&v139, *((double *)&v139 + 1));
        snprintf((char *)__p + v24 + (int)v23, 1024 - (v24 + (int)v23), "\n");
        sub_18D0778AC(v27, (char *)__p);
        if (v28 >= 0)
          v25 = v27;
        else
          v25 = (void **)v27[0];
        fputs((const char *)v25, v17);
        if (v28 < 0)
          operator delete(v27[0]);
        v19 = 0;
      }
      sub_18D2C2EA8((_QWORD *)&v101[1] + 1);
      if (SBYTE7(v101[1]) < 0)
        operator delete(*(void **)&v101[0]);
    }
    while (!feof(v10));
  }
  fclose(v17);
  fclose(v10);
  if (v104 < 0)
    operator delete(v103[0]);
  return v19;
}

void sub_18D2C73DC(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x2658]);
  _Unwind_Resume(a1);
}

uint64_t swan::BatchLogParser::parseRavenFixIntoRouteSmootherEpoch(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  const char *v11;
  FILE *v12;
  FILE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  uint64_t v19;
  const char *v20;
  double v22;
  int v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  double v74;
  _BYTE v75[16];
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  uint64_t v80;
  void *__p[2];
  char v82;
  std::locale v83[2];
  _OWORD v84[3];
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  std::locale v93;
  char __s1[8192];
  uint64_t v95;

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v5 = v2;
  v95 = *MEMORY[0x1E0C80C00];
  v86 = xmmword_18D347E70;
  v87 = xmmword_18D31CEE0;
  __asm { FMOV            V0.2D, #-1.0 }
  v88 = xmmword_18D31CEE0;
  v89 = _Q0;
  v90 = _Q0;
  v91 = _Q0;
  *(_QWORD *)&v92 = 0xBFF0000000000000;
  BYTE8(v92) = 0;
  if (*(char *)(v2 + 23) >= 0)
    v11 = (const char *)v2;
  else
    v11 = *(const char **)v2;
  v12 = fopen(v11, "r");
  if (v12)
  {
    v13 = v12;
    v14 = *(char *)(v5 + 23);
    if (v14 >= 0)
      v15 = v5;
    else
      v15 = *(_QWORD *)v5;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v5 + 23);
    else
      v16 = *(_QWORD *)(v5 + 8);
    v17 = sub_18D076A18(MEMORY[0x1E0DE4A60], v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(v83);
    std::ostream::put();
    std::ostream::flush();
    if (!feof(v13))
    {
      v19 = 0xFFFFFFFFLL;
      while (1)
      {
        if (!fgets(__s1, 0x2000, v13))
          goto LABEL_13;
        v85 = 0;
        *(_OWORD *)&v83[0].__locale_ = 0u;
        memset(v84, 0, sizeof(v84));
        if (strstr(__s1, "Raven,Fix,1,solution_type,5"))
        {
          sub_18D0778AC(__p, __s1);
          swan::BatchLogParser::updateEnforceCsv((uint64_t)v83, (uint64_t)__p);
          if (v82 < 0)
            operator delete(__p[0]);
          v80 = 0;
          sub_18D0778AC(v78, "gps_week");
          swan::BatchLogParser::getField(v83, (int *)&v80 + 1, (uint64_t)v78, 1);
          if (v79 < 0)
            operator delete(v78[0]);
          sub_18D0778AC(v76, "gps_tow_ms");
          swan::BatchLogParser::getField(v83, (int *)&v80, (uint64_t)v76, 1);
          if (v77 < 0)
            operator delete(v76[0]);
          LODWORD(__p[0]) = HIDWORD(v80);
          *(double *)&__p[1] = (double)(int)v80 * 0.001;
          v73 = 0;
          v74 = 0.0;
          if (cnnavigation::GPSTimeToJulianTime((double *)__p, 18, (uint64_t)v75))
          {
            v49 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Could not convert GPS time to Julian time", 41);
            std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
            v50 = std::locale::use_facet(&v93, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
            std::locale::~locale(&v93);
            std::ostream::put();
LABEL_79:
            std::ostream::flush();
            sub_18D2C2EA8((_QWORD *)v84 + 1);
            if (SBYTE7(v84[0]) < 0)
              operator delete(v83[0].__locale_);
            return 0xFFFFFFFFLL;
          }
          cnnavigation::JulianTimeToiOSTime((uint64_t)v75, (uint64_t)&v73, v22);
          if (v23)
          {
            v51 = sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Could not convert Julian time to iOS time", 41);
            std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
            v52 = std::locale::use_facet(&v93, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
            std::locale::~locale(&v93);
            std::ostream::put();
            goto LABEL_79;
          }
          *(double *)&v86 = v74 + (double)v73;
          sub_18D0778AC(v71, "lat");
          swan::BatchLogParser::getField(v83, (double *)&v86 + 1, (uint64_t)v71, 1);
          if (v72 < 0)
            operator delete(v71[0]);
          sub_18D0778AC(v69, "lon");
          swan::BatchLogParser::getField(v83, (double *)&v87, (uint64_t)v69, 1);
          if (v70 < 0)
            operator delete(v69[0]);
          sub_18D0778AC(v67, "hunc");
          swan::BatchLogParser::getField(v83, (double *)&v87 + 1, (uint64_t)v67, 1);
          if (v68 < 0)
            operator delete(v67[0]);
          sub_18D0778AC(v65, "speed");
          swan::BatchLogParser::getField(v83, (double *)&v90, (uint64_t)v65, 1);
          if (v66 < 0)
            operator delete(v65[0]);
          sub_18D0778AC(v63, "course");
          swan::BatchLogParser::getField(v83, (double *)&v89, (uint64_t)v63, 1);
          if (v64 < 0)
            operator delete(v63[0]);
          sub_18D0778AC(v61, "alt");
          swan::BatchLogParser::getField(v83, (double *)&v88, (uint64_t)v61, 1);
          if (v62 < 0)
            operator delete(v61[0]);
          sub_18D0778AC(v59, "alt_unc");
          swan::BatchLogParser::getField(v83, (double *)&v88 + 1, (uint64_t)v59, 1);
          if (v60 < 0)
            operator delete(v59[0]);
          sub_18D0778AC(v57, "speed_unc");
          swan::BatchLogParser::getField(v83, (double *)&v90 + 1, (uint64_t)v57, 1);
          if (v58 < 0)
            operator delete(v57[0]);
          sub_18D0778AC(v55, "course_unc");
          swan::BatchLogParser::getField(v83, (double *)&v89 + 1, (uint64_t)v55, 1);
          if (v56 < 0)
            operator delete(v55[0]);
          v91 = xmmword_18D347E60;
          v24 = (__int128 *)v4[1];
          v25 = (unint64_t)v4[2];
          if ((unint64_t)v24 >= v25)
          {
            v31 = 0x6DB6DB6DB6DB6DB7 * (((char *)v24 - (_BYTE *)*v4) >> 4);
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) > 0x249249249249249)
              sub_18D07AFE4();
            v33 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - (_QWORD)*v4) >> 4);
            if (2 * v33 > v32)
              v32 = 2 * v33;
            if (v33 >= 0x124924924924924)
              v34 = 0x249249249249249;
            else
              v34 = v32;
            if (v34)
              v35 = (char *)sub_18D2C883C((uint64_t)(v4 + 2), v34);
            else
              v35 = 0;
            v36 = (__int128 *)&v35[112 * v31];
            v37 = v87;
            *v36 = v86;
            v36[1] = v37;
            v38 = v92;
            v39 = v90;
            v36[5] = v91;
            v36[6] = v38;
            v40 = v89;
            v36[2] = v88;
            v36[3] = v40;
            v36[4] = v39;
            v42 = (char *)*v4;
            v41 = (char *)v4[1];
            v43 = v36;
            if (v41 != *v4)
            {
              do
              {
                v44 = *((_OWORD *)v41 - 7);
                v45 = *((_OWORD *)v41 - 5);
                *(v43 - 6) = *((_OWORD *)v41 - 6);
                *(v43 - 5) = v45;
                *(v43 - 7) = v44;
                v46 = *((_OWORD *)v41 - 4);
                v47 = *((_OWORD *)v41 - 3);
                v48 = *((_OWORD *)v41 - 2);
                *(__int128 *)((char *)v43 - 23) = *(_OWORD *)(v41 - 23);
                *(v43 - 3) = v47;
                *(v43 - 2) = v48;
                *(v43 - 4) = v46;
                v43 -= 7;
                v41 -= 112;
              }
              while (v41 != v42);
              v41 = (char *)*v4;
            }
            v29 = v36 + 7;
            *v4 = v43;
            v4[1] = v36 + 7;
            v4[2] = &v35[112 * v34];
            if (v41)
              operator delete(v41);
          }
          else
          {
            v26 = v91;
            v24[4] = v90;
            v24[5] = v26;
            v24[6] = v92;
            v27 = v87;
            *v24 = v86;
            v24[1] = v27;
            v28 = v89;
            v24[2] = v88;
            v24[3] = v28;
            v29 = v24 + 7;
          }
          v19 = 0;
          v4[1] = v29;
        }
        else if (strstr(__s1, "CL,Pos,1"))
        {
          sub_18D0778AC(__p, __s1);
          swan::BatchLogParser::updateEnforceCsv((uint64_t)v83, (uint64_t)__p);
          if (v82 < 0)
            operator delete(__p[0]);
          LODWORD(__p[0]) = 0;
          sub_18D0778AC(v53, "signalEnv");
          swan::BatchLogParser::getField(v83, (int *)__p, (uint64_t)v53, 1);
          if (v54 < 0)
            operator delete(v53[0]);
          v19 = 0;
          v30 = (char)__p[0];
          if (LODWORD(__p[0]) >= 7)
            v30 = 0;
          BYTE8(v92) = v30;
        }
        sub_18D2C2EA8((_QWORD *)v84 + 1);
        if (SBYTE7(v84[0]) < 0)
          operator delete(v83[0].__locale_);
        if (feof(v13))
          goto LABEL_13;
      }
    }
    v19 = 0xFFFFFFFFLL;
LABEL_13:
    fclose(v13);
  }
  else
  {
    if (*(char *)(v5 + 23) >= 0)
      v20 = (const char *)v5;
    else
      v20 = *(const char **)v5;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", v20);
    return 0;
  }
  return v19;
}

void sub_18D2C7F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::locale a61)
{
  std::locale::~locale((std::locale *)&STACK[0x268]);
  sub_18D2BF5CC((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t swan::BatchLogParser::parseCLRSFixIntoRouteSmootherEpoch(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  const char *v11;
  FILE *v12;
  FILE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  uint64_t v19;
  const char *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *__p[2];
  char v69;
  std::locale v70[2];
  _OWORD v71[3];
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char __s1[8192];
  uint64_t v81;

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v5 = v2;
  v81 = *MEMORY[0x1E0C80C00];
  v73 = xmmword_18D347E70;
  v74 = xmmword_18D31CEE0;
  __asm { FMOV            V0.2D, #-1.0 }
  v75 = xmmword_18D31CEE0;
  v76 = _Q0;
  v77 = _Q0;
  v78 = _Q0;
  *(_QWORD *)&v79 = 0xBFF0000000000000;
  BYTE8(v79) = 0;
  if (*(char *)(v2 + 23) >= 0)
    v11 = (const char *)v2;
  else
    v11 = *(const char **)v2;
  v12 = fopen(v11, "r");
  if (v12)
  {
    v13 = v12;
    v14 = *(char *)(v5 + 23);
    if (v14 >= 0)
      v15 = v5;
    else
      v15 = *(_QWORD *)v5;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v5 + 23);
    else
      v16 = *(_QWORD *)(v5 + 8);
    v17 = sub_18D076A18(MEMORY[0x1E0DE4A60], v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(v70, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(v70);
    std::ostream::put();
    std::ostream::flush();
    if (feof(v13))
    {
      v19 = 0xFFFFFFFFLL;
    }
    else
    {
      v19 = 0xFFFFFFFFLL;
      do
      {
        if (!fgets(__s1, 0x2000, v13))
          break;
        v72 = 0;
        *(_OWORD *)&v70[0].__locale_ = 0u;
        memset(v71, 0, sizeof(v71));
        if (strstr(__s1, "CLRS,") && strstr(__s1, "PreMMRaw,latitude,"))
        {
          sub_18D0778AC(__p, __s1);
          swan::BatchLogParser::updateEnforceCsv((uint64_t)v70, (uint64_t)__p);
          if (v69 < 0)
            operator delete(__p[0]);
          sub_18D0778AC(v66, "CLRS");
          swan::BatchLogParser::getField(v70, (double *)&v73, (uint64_t)v66, 1);
          if (v67 < 0)
            operator delete(v66[0]);
          sub_18D0778AC(v64, "latitude");
          swan::BatchLogParser::getField(v70, (double *)&v73 + 1, (uint64_t)v64, 1);
          if (v65 < 0)
            operator delete(v64[0]);
          sub_18D0778AC(v62, "longitude");
          swan::BatchLogParser::getField(v70, (double *)&v74, (uint64_t)v62, 1);
          if (v63 < 0)
            operator delete(v62[0]);
          sub_18D0778AC(v60, "hunc");
          swan::BatchLogParser::getField(v70, (double *)&v74 + 1, (uint64_t)v60, 1);
          if (v61 < 0)
            operator delete(v60[0]);
          sub_18D0778AC(v58, "speed");
          swan::BatchLogParser::getField(v70, (double *)&v77, (uint64_t)v58, 1);
          if (v59 < 0)
            operator delete(v58[0]);
          sub_18D0778AC(v56, "course");
          swan::BatchLogParser::getField(v70, (double *)&v76, (uint64_t)v56, 1);
          if (v57 < 0)
            operator delete(v56[0]);
          sub_18D0778AC(v54, "altitude");
          swan::BatchLogParser::getField(v70, (double *)&v75, (uint64_t)v54, 1);
          if (v55 < 0)
            operator delete(v54[0]);
          sub_18D0778AC(v52, "vunc");
          swan::BatchLogParser::getField(v70, (double *)&v75 + 1, (uint64_t)v52, 1);
          if (v53 < 0)
            operator delete(v52[0]);
          sub_18D0778AC(v50, "speedUnc");
          swan::BatchLogParser::getField(v70, (double *)&v77 + 1, (uint64_t)v50, 1);
          if (v51 < 0)
            operator delete(v50[0]);
          sub_18D0778AC(v48, "courseUnc");
          swan::BatchLogParser::getField(v70, (double *)&v76 + 1, (uint64_t)v48, 1);
          if (v49 < 0)
            operator delete(v48[0]);
          LODWORD(__p[0]) = 0;
          sub_18D0778AC(v46, "signalEnvironment");
          swan::BatchLogParser::getField(v70, (int *)__p, (uint64_t)v46, 1);
          if (v47 < 0)
            operator delete(v46[0]);
          BYTE8(v79) = __p[0];
          v78 = xmmword_18D347E60;
          v21 = (__int128 *)v4[1];
          v22 = (unint64_t)v4[2];
          if ((unint64_t)v21 >= v22)
          {
            v27 = 0x6DB6DB6DB6DB6DB7 * (((char *)v21 - (_BYTE *)*v4) >> 4);
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) > 0x249249249249249)
              sub_18D07AFE4();
            v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v22 - (_QWORD)*v4) >> 4);
            if (2 * v29 > v28)
              v28 = 2 * v29;
            if (v29 >= 0x124924924924924)
              v30 = 0x249249249249249;
            else
              v30 = v28;
            if (v30)
              v31 = (char *)sub_18D2C883C((uint64_t)(v4 + 2), v30);
            else
              v31 = 0;
            v32 = (__int128 *)&v31[112 * v27];
            v33 = v74;
            *v32 = v73;
            v32[1] = v33;
            v34 = v79;
            v35 = v77;
            v32[5] = v78;
            v32[6] = v34;
            v36 = v76;
            v32[2] = v75;
            v32[3] = v36;
            v32[4] = v35;
            v38 = (char *)*v4;
            v37 = (char *)v4[1];
            v39 = v32;
            if (v37 != *v4)
            {
              do
              {
                v40 = *((_OWORD *)v37 - 7);
                v41 = *((_OWORD *)v37 - 5);
                *(v39 - 6) = *((_OWORD *)v37 - 6);
                *(v39 - 5) = v41;
                *(v39 - 7) = v40;
                v42 = *((_OWORD *)v37 - 4);
                v43 = *((_OWORD *)v37 - 3);
                v44 = *((_OWORD *)v37 - 2);
                *(__int128 *)((char *)v39 - 23) = *(_OWORD *)(v37 - 23);
                *(v39 - 3) = v43;
                *(v39 - 2) = v44;
                *(v39 - 4) = v42;
                v39 -= 7;
                v37 -= 112;
              }
              while (v37 != v38);
              v37 = (char *)*v4;
            }
            v26 = v32 + 7;
            *v4 = v39;
            v4[1] = v32 + 7;
            v4[2] = &v31[112 * v30];
            if (v37)
              operator delete(v37);
          }
          else
          {
            v23 = v78;
            v21[4] = v77;
            v21[5] = v23;
            v21[6] = v79;
            v24 = v74;
            *v21 = v73;
            v21[1] = v24;
            v25 = v76;
            v21[2] = v75;
            v21[3] = v25;
            v26 = v21 + 7;
          }
          v19 = 0;
          v4[1] = v26;
        }
        else if (strstr(__s1, "CLRS,Smoothing,PreMM,dataCount,"))
        {
          v4[1] = *v4;
        }
        sub_18D2C2EA8((_QWORD *)v71 + 1);
        if (SBYTE7(v71[0]) < 0)
          operator delete(v70[0].__locale_);
      }
      while (!feof(v13));
    }
    fclose(v13);
  }
  else
  {
    if (*(char *)(v5 + 23) >= 0)
      v20 = (const char *)v5;
    else
      v20 = *(const char **)v5;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to open %s\n", v20);
    return 0;
  }
  return v19;
}

void sub_18D2C8710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::locale a55)
{
  sub_18D2BF5CC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void *sub_18D2C883C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    sub_18D0788A0();
  return operator new(112 * a2);
}

const std::locale *sub_18D2C8884(const std::locale *a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x18D78B4E4]();
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, MEMORY[0x1E0DE4C08]);
  return a1;
}

void sub_18D2C88CC(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *sub_18D2C88E0(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E25CCB28;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E25CCBE8;
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E25CD0B8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
  {
    switch(v13)
    {
      case 0x40u:
        return sub_18D2C8F8C(a1, a2, a3);
      case 0x80u:
        v17 = (char *)memchr(a2, 10, a3 - a2);
        if (v17)
          v18 = v17;
        else
          v18 = a3;
        if (v18 == a2)
        {
          v28 = (_QWORD *)operator new();
          v29 = *(_QWORD *)(a1 + 56);
          v30 = *(_QWORD *)(v29 + 8);
          *v28 = &off_1E25CCBE8;
          v28[1] = v30;
          *(_QWORD *)(v29 + 8) = v28;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_18D2C8E48(a1, a2, v18);
        }
        if (v18 != a3)
          ++v18;
        while (v18 != a3)
        {
          v31 = (char *)memchr(v18, 10, a3 - v18);
          if (v31)
            v32 = v31;
          else
            v32 = a3;
          v33 = *(_QWORD *)(a1 + 56);
          if (v32 == v18)
          {
            v34 = (_QWORD *)operator new();
            v35 = *(_QWORD *)(a1 + 56);
            v36 = *(_QWORD *)(v35 + 8);
            *v34 = &off_1E25CCBE8;
            v34[1] = v36;
            *(_QWORD *)(v35 + 8) = v34;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            sub_18D2C8E48(a1, v18, v32);
          }
          sub_18D2C9258(a1, v12, v33);
          if (v32 == a3)
            v18 = v32;
          else
            v18 = v32 + 1;
        }
        break;
      case 0x100u:
        v14 = (char *)memchr(a2, 10, a3 - a2);
        if (v14)
          v15 = v14;
        else
          v15 = a3;
        if (v15 == a2)
        {
          v19 = (_QWORD *)operator new();
          v20 = *(_QWORD *)(a1 + 56);
          v21 = *(_QWORD *)(v20 + 8);
          *v19 = &off_1E25CCBE8;
          v19[1] = v21;
          *(_QWORD *)(v20 + 8) = v19;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          sub_18D2C8F8C(a1, a2, v15);
        }
        if (v15 != a3)
          ++v15;
        while (v15 != a3)
        {
          v22 = (char *)memchr(v15, 10, a3 - v15);
          if (v22)
            v23 = v22;
          else
            v23 = a3;
          v24 = *(_QWORD *)(a1 + 56);
          if (v23 == v15)
          {
            v25 = (_QWORD *)operator new();
            v26 = *(_QWORD *)(a1 + 56);
            v27 = *(_QWORD *)(v26 + 8);
            *v25 = &off_1E25CCBE8;
            v25[1] = v27;
            *(_QWORD *)(v26 + 8) = v25;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            sub_18D2C8F8C(a1, v15, v23);
          }
          sub_18D2C9258(a1, v12, v24);
          if (v23 == a3)
            v15 = v23;
          else
            v15 = v23 + 1;
        }
        break;
      default:
        goto LABEL_54;
    }
    return a3;
  }
  else if (v13)
  {
    if (v13 != 16)
    {
      if (v13 != 32)
LABEL_54:
        sub_18D2C902C();
      return sub_18D2C8F8C(a1, a2, a3);
    }
    return sub_18D2C8E48(a1, a2, a3);
  }
  else
  {
    return sub_18D2C8D0C(a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_18D2C8C8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_18D2C8CC0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2C8CF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_18D2C8D0C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = sub_18D2C932C(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (_QWORD *)operator new();
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(v10 + 8);
    *v9 = &off_1E25CCBE8;
    v9[1] = v11;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = sub_18D2C932C(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (_QWORD *)operator new();
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v15 = &off_1E25CCBE8;
      v15[1] = v17;
      *(_QWORD *)(v16 + 8) = v15;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    sub_18D2C9258(a1, v6, v12);
  }
  return a3;
}

char *sub_18D2C8E48(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E25CCDC0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = sub_18D2CF5B4(a1, v3, v4);
    }
    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        sub_18D2CF568();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1E25CCE20;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *sub_18D2C8F8C(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_18D2CFA5C(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    sub_18D2CF568();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = *(_QWORD *)(a1 + 56);
    v10 = sub_18D2CFA5C(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    sub_18D2C9258(a1, v6, v9);
  }
  return v3;
}

void sub_18D2C902C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2C9064(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D2C907C()
{
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2C9090(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_18D2C90A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2C90CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_18D2C90E4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B7C50))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_18D2C9124(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2C9164(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2C91B4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_18D2C91C8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2C9208(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2C9258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a3 + 8);
  v6[1] = *(_QWORD *)(a2 + 8);
  v6[2] = v7;
  *v6 = &off_1E25CCAF8;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = (_QWORD *)operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *v8 = &off_1E25CCBE8;
  v8[1] = v9;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
  result = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a3 + 8);
  *result = &off_1E25CD0F0;
  result[1] = v11;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 8);
  return result;
}

unsigned __int8 *sub_18D2C932C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  int v6;
  int v7;
  char *v8;
  BOOL v9;
  char *v10;
  int v12;
  char *v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)();
  unsigned __int8 *result;
  int v21;
  char v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  char v50;
  std::locale v51[3];
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  if (a2 == (unsigned __int8 *)a3)
    return a2;
  v6 = (char)*a2;
  v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3)
        goto LABEL_32;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_32;
        v22 = 0;
      }
      sub_18D2C9C74(a1, v22);
      return a2 + 2;
    }
    if (v6 != 94)
      goto LABEL_32;
    v15 = operator new();
    v16 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(_QWORD *)(v17 + 8);
    v19 = &off_1E25CCDC0;
LABEL_21:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = v18;
    *(_BYTE *)(v15 + 16) = v16;
    *(_QWORD *)(v17 + 8) = v15;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(_QWORD *)(v17 + 8);
    v19 = &off_1E25CCE20;
    goto LABEL_21;
  }
  v9 = v6 == 40;
  v8 = (char *)(a2 + 1);
  v9 = !v9 || v8 == a3;
  if (!v9)
  {
    v9 = *v8 == 63;
    v10 = (char *)(a2 + 2);
    if (v9 && v10 != a3)
    {
      v12 = *v10;
      if (v12 == 33)
      {
        sub_18D2C8884(v51);
        v52 = 0u;
        v54 = 0;
        v53 = 0u;
        LODWORD(v52) = *(_DWORD *)(a1 + 24);
        v13 = (char *)sub_18D2C88E0(v51, a2 + 3, a3);
        v23 = DWORD1(v52);
        sub_18D2C9CF4(a1, (uint64_t)v51, 1, *(_DWORD *)(a1 + 28));
        *(_DWORD *)(a1 + 28) += v23;
        if (v13 == a3 || *v13 != 41)
          sub_18D2C9DB8();
      }
      else
      {
        if (v12 != 61)
          goto LABEL_32;
        sub_18D2C8884(v51);
        v52 = 0u;
        v54 = 0;
        v53 = 0u;
        LODWORD(v52) = *(_DWORD *)(a1 + 24);
        v13 = (char *)sub_18D2C88E0(v51, a2 + 3, a3);
        v14 = DWORD1(v52);
        sub_18D2C9CF4(a1, (uint64_t)v51, 0, *(_DWORD *)(a1 + 28));
        *(_DWORD *)(a1 + 28) += v14;
        if (v13 == a3 || *v13 != 41)
          sub_18D2C9DB8();
      }
      sub_18D07C868((uint64_t)&v53);
      std::locale::~locale(v51);
      result = (unsigned __int8 *)(v13 + 1);
      if (v13 + 1 != (char *)a2)
        return result;
      v7 = *a2;
    }
  }
LABEL_32:
  v24 = *(_QWORD *)(a1 + 56);
  v25 = *(_DWORD *)(a1 + 28);
  v26 = (char)v7;
  if ((int)v26 <= 91)
  {
    result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_98;
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          v27 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v28 = (char *)sub_18D2C8D0C(a1, a2 + 3, a3);
          if (v28 == a3)
            goto LABEL_98;
          v29 = v28;
          if (*v28 != 41)
            goto LABEL_98;
        }
        else
        {
          sub_18D2CBD1C(a1);
          v38 = *(_DWORD *)(a1 + 28);
          v27 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v39 = (char *)sub_18D2C8D0C(a1, a2 + 1, a3);
          if (v39 == a3 || (v29 = v39, *v39 != 41))
LABEL_98:
            sub_18D2C9DB8();
          sub_18D2CBD8C(a1, v38);
        }
        --*v27;
        v31 = (unsigned __int8 *)(v29 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_64;
      case '.':
        v35 = (_QWORD *)operator new();
        v36 = *(_QWORD *)(a1 + 56);
        v37 = *(_QWORD *)(v36 + 8);
        *v35 = &off_1E25CD120;
        v35[1] = v37;
        *(_QWORD *)(v36 + 8) = v35;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        goto LABEL_61;
      default:
        if ((_DWORD)v26 == 91)
        {
          v31 = (unsigned __int8 *)sub_18D2CB0D4(a1, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((_DWORD)v26 != 63)
          goto LABEL_60;
        goto LABEL_64;
    }
  }
  v30 = (v26 - 92);
  if (v30 > 0x21)
  {
LABEL_60:
    sub_18D2CC2D0(a1, v26);
LABEL_61:
    v31 = a2 + 1;
    return sub_18D2C997C(a1, v31, (unsigned __int8 *)a3, v24, v25 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  if (((1 << (v7 - 92)) & 0x300000006) != 0)
    return a2;
  if ((_DWORD)v26 != 92)
  {
    if (v30 == 31)
LABEL_64:
      sub_18D2CBDF4();
    goto LABEL_60;
  }
  if (v7 != 92)
    return a2;
  v32 = a2 + 1;
  if (a2 + 1 == (unsigned __int8 *)a3)
    sub_18D2CBED0();
  v33 = *v32;
  v34 = (v33 - 48);
  if (v33 == 48)
  {
    sub_18D2CC2D0(a1, v34);
LABEL_97:
    v31 = a2 + 2;
    return sub_18D2C997C(a1, v31, (unsigned __int8 *)a3, v24, v25 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  if ((v33 - 49) > 8)
  {
LABEL_77:
    if ((char)v33 > 99)
    {
      if ((char)v33 == 119)
      {
        v41 = a1;
        v42 = 0;
        goto LABEL_89;
      }
      if ((char)v33 == 115)
      {
        v49 = a1;
        v50 = 0;
LABEL_95:
        v45 = sub_18D2CCC9C(v49, v50);
        v46 = *(_DWORD *)(v45 + 160) | 0x4000;
        goto LABEL_96;
      }
      if ((char)v33 != 100)
      {
LABEL_90:
        v48 = sub_18D2CBF1C(a1, a2 + 1, (unsigned __int8 *)a3, 0);
        if (v48 == v32)
          v31 = a2;
        else
          v31 = v48;
        goto LABEL_57;
      }
      v43 = a1;
      v44 = 0;
    }
    else
    {
      if ((char)v33 != 68)
      {
        if ((char)v33 != 83)
        {
          if ((char)v33 == 87)
          {
            v41 = a1;
            v42 = 1;
LABEL_89:
            v47 = sub_18D2CCC9C(v41, v42);
            *(_DWORD *)(v47 + 160) |= 0x500u;
            sub_18D2CCE8C(v47, 95);
            goto LABEL_97;
          }
          goto LABEL_90;
        }
        v49 = a1;
        v50 = 1;
        goto LABEL_95;
      }
      v43 = a1;
      v44 = 1;
    }
    v45 = sub_18D2CCC9C(v43, v44);
    v46 = *(_DWORD *)(v45 + 160) | 0x400;
LABEL_96:
    *(_DWORD *)(v45 + 160) = v46;
    goto LABEL_97;
  }
  v31 = a2 + 2;
  if (a2 + 2 == (unsigned __int8 *)a3)
  {
    v31 = (unsigned __int8 *)a3;
  }
  else
  {
    while (1)
    {
      v40 = *v31;
      if ((v40 - 48) > 9)
        break;
      if (v34 >= 0x19999999)
        goto LABEL_99;
      ++v31;
      LODWORD(v34) = v40 + 10 * v34 - 48;
      if (v31 == (unsigned __int8 *)a3)
      {
        v31 = (unsigned __int8 *)a3;
        break;
      }
    }
    if (!(_DWORD)v34)
LABEL_99:
      sub_18D2CC444();
  }
  if (v34 > v25)
    goto LABEL_99;
  sub_18D2CC490(a1, v34);
  if (v31 == v32)
  {
    LOBYTE(v33) = *v32;
    goto LABEL_77;
  }
LABEL_57:
  result = a2;
  if (v31 != a2)
    return sub_18D2C997C(a1, v31, (unsigned __int8 *)a3, v24, v25 + 1, *(_DWORD *)(a1 + 28) + 1);
  return result;
}

void sub_18D2C9950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_18D07C868((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_18D2C997C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = sub_18D2CF00C(a2 + 1, a3, &v28);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = v28;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = v28;
LABEL_33:
              v21 = a4;
              v22 = 0;
LABEL_46:
              sub_18D2CEED0(a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = v28;
LABEL_45:
            v21 = a4;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = v28;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = sub_18D2CF00C(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = v28;
          if (v27 >= v28)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = a4;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      sub_18D2CF0F0();
    }
LABEL_58:
    sub_18D2CF0A4();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      v14 = 0;
      goto LABEL_26;
    }
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

__n128 sub_18D2C9C74(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v4 = &off_1E25CCC18;
  *(_QWORD *)(v4 + 8) = v5;
  std::locale::locale((std::locale *)(v4 + 16), (const std::locale *)a1);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 24) = result;
  *(_BYTE *)(v4 + 40) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

std::locale *sub_18D2C9CF4(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  std::locale *result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v8 = &off_1E25CCB58;
  *(_QWORD *)(v8 + 8) = v9;
  result = std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v8 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_18D2C9DB8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2C9DF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2C9E04(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2C9E44(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2C9E94(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

_QWORD *sub_18D2C9EF4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2C9F34(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2C9F84(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_18D2C9FD4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC18;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_18D2CA024(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC18;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CA084(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

std::locale *sub_18D2CA198(std::locale *a1)
{
  std::locale *v2;
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCB58;
  v2 = a1 + 2;
  sub_18D07C868((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_18D2CA1F8(std::locale *a1)
{
  std::locale *v2;
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCB58;
  v2 = a1 + 2;
  sub_18D07C868((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2CA268(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v19 = 0;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v20 = 0;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v5;
  v22 = 0;
  sub_18D2CA7D8((char **)&__p, v4, &v21);
  v23 = v6;
  v24 = v6;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v29 = v6;
  v28 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_18D2CA3F8(a1 + 16, v7, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v10 = (char *)__p;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &v10[24 * v15];
    v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_BYTE *)(v17 + 16) = v16[16];
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  operator delete(v10);
}

void sub_18D2CA3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2CA3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  signed int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  uint64_t v37;
  _BYTE v39[56];
  void *__p[2];
  _QWORD v41[4];
  __int128 v42;
  char v43;
  int64x2_t v44;
  unint64_t v45;

  v44 = 0uLL;
  v45 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = a3;
    v43 = 0;
    *(_DWORD *)v39 = 0;
    memset(&v39[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v41, 0, 21);
    v44.i64[1] = (uint64_t)sub_18D2CACE8(&v44, (uint64_t)v39);
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v39[32])
      operator delete(*(void **)&v39[32]);
    v36 = a4;
    v12 = v44.i64[1];
    *(_DWORD *)(v44.i64[1] - 96) = 0;
    *(_QWORD *)(v12 - 88) = a2;
    *(_QWORD *)(v12 - 80) = a2;
    *(_QWORD *)(v12 - 72) = a3;
    sub_18D2CA9D4((void **)(v12 - 64), *(unsigned int *)(a1 + 28), &v42);
    sub_18D2CAB4C((char **)(v44.i64[1] - 40), *(unsigned int *)(a1 + 32));
    v37 = a3;
    v13 = a3 - a2;
    v14 = v44.i64[1];
    *(_QWORD *)(v44.i64[1] - 16) = v6;
    *(_DWORD *)(v14 - 8) = a5;
    *(_BYTE *)(v14 - 4) = a6;
    v15 = 1;
    while (2)
    {
      if ((v15 & 0xFFF) == 0 && (int)(v15 >> 12) >= v13)
        sub_18D2CAC50();
      v17 = (_QWORD *)(v14 - 16);
      v16 = *(_QWORD *)(v14 - 16);
      v18 = (_OWORD *)(v14 - 96);
      if (v16)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14 - 96);
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          v19 = *(_QWORD *)(v14 - 80);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v37)
            goto LABEL_16;
          v27 = *v36;
          *(_QWORD *)v27 = a2;
          *(_QWORD *)(v27 + 8) = v19;
          *(_BYTE *)(v27 + 16) = 1;
          v28 = *(_QWORD *)(v14 - 64);
          v29 = *(_QWORD *)(v14 - 56) - v28;
          if (v29)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
            v31 = (_BYTE *)(v28 + 16);
            v32 = 1;
            do
            {
              v33 = v27 + 24 * v32;
              *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
              v34 = *v31;
              v31 += 24;
              *(_BYTE *)(v33 + 16) = v34;
            }
            while (v30 > v32++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v20 = v44.i64[1] - 96;
          sub_18D2CAEAC((_QWORD *)(v44.i64[1] - 96));
          v44.i64[1] = v20;
          goto LABEL_23;
        case 0xFFFFFC20:
          v21 = *(_OWORD *)(v14 - 80);
          *(_OWORD *)v39 = *v18;
          *(_OWORD *)&v39[16] = v21;
          memset(&v39[32], 0, 24);
          sub_18D2CAF3C(&v39[32], *(__int128 **)(v14 - 64), *(__int128 **)(v14 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14 - 56) - *(_QWORD *)(v14 - 64)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v41[0] = 0;
          sub_18D2CAFB8((char *)__p, *(__int128 **)(v14 - 40), *(__int128 **)(v14 - 32), (uint64_t)(*(_QWORD *)(v14 - 32) - *(_QWORD *)(v14 - 40)) >> 4);
          v22 = *v17;
          *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)(v14 - 11);
          v41[1] = v22;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v41[1] + 24))(v41[1], 0, v39);
          v23 = v44.i64[1];
          if (v44.i64[1] >= v45)
          {
            v44.i64[1] = (uint64_t)sub_18D2CACE8(&v44, (uint64_t)v39);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v24 = *(_OWORD *)&v39[16];
            *(_OWORD *)v44.i64[1] = *(_OWORD *)v39;
            *(_OWORD *)(v23 + 16) = v24;
            *(_QWORD *)(v23 + 32) = 0;
            *(_QWORD *)(v23 + 40) = 0;
            *(_QWORD *)(v23 + 48) = 0;
            *(_QWORD *)(v23 + 56) = 0;
            *(_OWORD *)(v23 + 32) = *(_OWORD *)&v39[32];
            *(_QWORD *)(v23 + 48) = *(_QWORD *)&v39[48];
            memset(&v39[32], 0, 24);
            *(_QWORD *)(v23 + 64) = 0;
            *(_QWORD *)(v23 + 72) = 0;
            *(_OWORD *)(v23 + 56) = *(_OWORD *)__p;
            *(_QWORD *)(v23 + 72) = v41[0];
            __p[0] = 0;
            __p[1] = 0;
            v41[0] = 0;
            v25 = v41[1];
            *(_QWORD *)(v23 + 85) = *(_QWORD *)((char *)&v41[1] + 5);
            *(_QWORD *)(v23 + 80) = v25;
            v44.i64[1] = v23 + 96;
          }
          if (*(_QWORD *)&v39[32])
          {
            *(_QWORD *)&v39[40] = *(_QWORD *)&v39[32];
            operator delete(*(void **)&v39[32]);
          }
LABEL_23:
          v14 = v44.i64[1];
          ++v15;
          if (v44.i64[0] != v44.i64[1])
            continue;
          v6 = 0;
          break;
        default:
          sub_18D2CAC9C();
      }
      break;
    }
  }
  *(_QWORD *)v39 = &v44;
  sub_18D2CB064((void ***)v39);
  return v6;
}

void sub_18D2CA780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  sub_18D2CA994(&a13);
  a13 = v18 - 112;
  sub_18D2CB064((void ***)&a13);
  _Unwind_Resume(a1);
}

char *sub_18D2CA7D8(char **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    v15 = a1[1];
    v16 = (v15 - result) / 24;
    if (v16 >= a2)
      v17 = a2;
    else
      v17 = (v15 - result) / 24;
    if (v17)
    {
      v18 = result;
      do
      {
        *(_OWORD *)v18 = *a3;
        v18[16] = *((_BYTE *)a3 + 16);
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }
    else
    {
      v19 = &v15[24 * (a2 - v16)];
      v20 = 24 * a2 - 24 * v16;
      do
      {
        v21 = *a3;
        *((_QWORD *)v15 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v15 = v21;
        v15 += 24;
        v20 -= 24;
      }
      while (v20);
      a1[1] = v19;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      sub_18D07AFE4();
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    result = sub_18D2CA948(a1, v10);
    v11 = a1[1];
    v12 = &v11[24 * a2];
    v13 = 24 * a2;
    do
    {
      v14 = *a3;
      *((_QWORD *)v11 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v11 = v14;
      v11 += 24;
      v13 -= 24;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

char *sub_18D2CA948(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_18D07AFE4();
  result = (char *)sub_18D263FF4(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *sub_18D2CA994(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_18D2CA9D4(void **a1, unint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  __int128 v27;

  v6 = (char *)*a1;
  v5 = (char *)a1[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
  v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[24 * a2];
  }
  else
  {
    v10 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - v5) >> 3) >= v8)
    {
      v25 = &v5[24 * v8];
      v26 = 24 * a2 - 8 * ((v5 - (_BYTE *)*a1) >> 3);
      do
      {
        v27 = *a3;
        *((_QWORD *)v5 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v5 = v27;
        v5 += 24;
        v26 -= 24;
      }
      while (v26);
      a1[1] = v25;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        sub_18D07AFE4();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= a2)
        v12 = a2;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)sub_18D263FF4(v13);
      v16 = &v14[24 * v7];
      v17 = &v14[24 * a2];
      v18 = v16;
      v19 = 24 * a2 - 24 * v7;
      do
      {
        v20 = *a3;
        *((_QWORD *)v18 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v18 = v20;
        v18 += 24;
        v19 -= 24;
      }
      while (v19);
      v21 = &v14[24 * v15];
      v23 = (char *)*a1;
      v22 = (char *)a1[1];
      if (v22 != *a1)
      {
        do
        {
          v24 = *(_OWORD *)(v22 - 24);
          *((_QWORD *)v16 - 1) = *((_QWORD *)v22 - 1);
          *(_OWORD *)(v16 - 24) = v24;
          v16 -= 24;
          v22 -= 24;
        }
        while (v22 != v23);
        v22 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void sub_18D2CAB4C(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v18 = &v3[16 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    v18 = &v4[16 * v6];
LABEL_17:
    a1[1] = v18;
    return;
  }
  if (a2 >> 60)
    sub_18D07AFE4();
  v8 = v7 - v3;
  v9 = v8 >> 3;
  if (v8 >> 3 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_18D264038(v10);
  v12 = &v11[16 * v5];
  v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[16 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void sub_18D2CAC50()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CAC88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D2CAC9C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CACD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_18D2CACE8(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_18D07AFE4();
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3)
    v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v27 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_18D0788A0();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v25.i64[1] = (uint64_t)(v9 + 96);
  v26 = v10;
  v15 = a1->i64[0];
  v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    v21 = vdupq_n_s64(v14);
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = v14 + v16;
      v19 = *(_OWORD *)(v14 + v16 - 80);
      *((_OWORD *)v17 - 6) = *(_OWORD *)(v14 + v16 - 96);
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_QWORD *)v17 - 8) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)(v14 + v16 - 64);
      *((_QWORD *)v17 - 6) = *(_QWORD *)(v14 + v16 - 48);
      *(_QWORD *)(v18 - 64) = 0;
      *(_QWORD *)(v18 - 56) = 0;
      *(_QWORD *)(v18 - 48) = 0;
      *((_QWORD *)v17 - 5) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)(v14 + v16 - 40);
      *((_QWORD *)v17 - 3) = *(_QWORD *)(v14 + v16 - 24);
      *(_QWORD *)(v18 - 40) = 0;
      *(_QWORD *)(v18 - 32) = 0;
      *(_QWORD *)(v18 - 24) = 0;
      v20 = *(_QWORD *)(v14 + v16 - 16);
      *(_QWORD *)(v17 - 11) = *(_QWORD *)(v14 + v16 - 11);
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (v14 + v16 != v15);
    v21 = *a1;
    v9 += v16;
    v13 = (char *)v25.i64[1];
    v10 = v26;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v13;
  v25 = v21;
  v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  v26 = v22;
  v24 = v21.i64[0];
  sub_18D2CAEF0((uint64_t)&v24);
  return v13;
}

void sub_18D2CAEAC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

uint64_t sub_18D2CAEF0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    sub_18D2CAEAC((_QWORD *)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_18D2CAF3C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_18D2CA948(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18D2CAF9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_18D2CAFB8(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_18D2CB028(result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18D2CB00C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_18D2CB028(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_18D07AFE4();
  result = (char *)sub_18D264038(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_18D2CB064(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_18D2CAEAC(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_18D2CB0D4(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  char *j;
  unint64_t i;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  __int128 *v22;
  const char *v23;
  std::regex_traits<char>::char_class_type classname;
  char v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  void **v30;
  uint64_t v31;
  __int128 *v32;
  void *v33;
  void **v34;
  int v35;
  void **v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  __int128 *v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  BOOL v56;
  void *v57;
  unint64_t v58;
  void **v59;
  char v60;
  void **v61;
  void *v62;
  BOOL v63;
  void *v64;
  unint64_t v65;
  void **v66;
  char v67;
  void **v68;
  void *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  void *v74;
  void *v75;
  void *v76;
  void **v77;
  char v78;
  void **v79;
  void **v80;
  char v81;
  void **v82;
  void **v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  void *v88[2];
  uint64_t v89;
  void *v90[2];
  char *v91;
  void *v92[2];
  uint64_t v93;
  void *__p[2];
  char *v95;
  void *__src[2];
  uint64_t v97;
  __int128 v98;
  char *v99;
  __int128 v100;
  char *v101;
  __int128 v102;
  uint64_t v103;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_243;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    v6 = sub_18D2CCC9C(a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_243;
    v7 = v6;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      sub_18D2CCE8C(v6, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_243;
    v85 = v7 + 16;
    v86 = (uint64_t *)(v7 + 136);
    v84 = (void **)(v7 + 88);
    v87 = a3 - 4;
    while (1)
    {
      v8 = (char *)v5;
      v9 = a3;
      if ((char *)v5 == a3)
        goto LABEL_152;
      v10 = *(unsigned __int8 *)v5;
      v9 = (char *)v5;
      if (v10 == 93)
        goto LABEL_152;
      v11 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v95 = 0;
      v12 = 0;
      v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            v9 = (char *)sub_18D2CDEA0(a1, (char *)(v5 + 2), a3, (uint64_t)__p);
            v12 = (void *)HIBYTE(v95);
            v11 = __p[1];
            break;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_242;
            for (i = 0; *(_BYTE *)(v5 + i + 2) != 58 || *(_BYTE *)(v5 + i + 3) != 93; ++i)
            {
              if (&v87[-v5] == (char *)i)
                goto LABEL_242;
            }
            v19 = (char *)(v5 + i + 2);
            if (v19 == a3)
LABEL_242:
              sub_18D2CDE54();
            v20 = *(_DWORD *)(a1 + 24);
            sub_18D2CDCB0(&v100, (char *)(v5 + 2), v19, i);
            v21 = HIBYTE(v101);
            if (SHIBYTE(v101) >= 0)
              v22 = &v100;
            else
              v22 = (__int128 *)v100;
            if (SHIBYTE(v101) < 0)
              v21 = *((_QWORD *)&v100 + 1);
            (*(void (**)(_QWORD, __int128 *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v22, (char *)v22 + v21);
            if (SHIBYTE(v101) >= 0)
              v23 = (const char *)&v100;
            else
              v23 = (const char *)v100;
            classname = std::__get_classname(v23, v20 & 1);
            if (SHIBYTE(v101) < 0)
              operator delete((void *)v100);
            if (!classname)
              sub_18D2CEA0C();
            v25 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            v26 = v5 + i;
            goto LABEL_148;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_242;
            for (j = 0; j[v5 + 2] != 61 || j[v5 + 3] != 93; ++j)
            {
              if (&v87[-v5] == j)
                goto LABEL_242;
            }
            v27 = &j[v5 + 2];
            if (v27 == a3)
              goto LABEL_242;
            sub_18D2CE86C((uint64_t)&v98, a1, (char *)(v5 + 2), v27);
            if (SHIBYTE(v99) < 0)
            {
              v28 = *((_QWORD *)&v98 + 1);
              if (!*((_QWORD *)&v98 + 1))
LABEL_244:
                sub_18D2CE820();
              v29 = (char *)v98;
            }
            else
            {
              v28 = HIBYTE(v99);
              if (!HIBYTE(v99))
                goto LABEL_244;
              v29 = (char *)&v98;
            }
            sub_18D2CDCB0(&v100, v29, &v29[v28], v28);
            v31 = HIBYTE(v101);
            if (SHIBYTE(v101) >= 0)
              v32 = &v100;
            else
              v32 = (__int128 *)v100;
            if (SHIBYTE(v101) < 0)
              v31 = *((_QWORD *)&v100 + 1);
            (*(void (**)(void **__return_ptr, _QWORD, __int128 *, char *))(**(_QWORD **)(a1 + 16) + 32))(__src, *(_QWORD *)(a1 + 16), v32, (char *)v32 + v31);
            v33 = (void *)HIBYTE(v97);
            if (v97 < 0)
              v33 = __src[1];
            if (v33 != (void *)1)
            {
              if (v33 == (void *)12)
              {
                v34 = __src;
                if (v97 < 0)
                  v34 = (void **)__src[0];
                *((_BYTE *)v34 + 11) = *((_BYTE *)v34 + 3);
              }
              else if (SHIBYTE(v97) < 0)
              {
                *(_BYTE *)__src[0] = 0;
                __src[1] = 0;
              }
              else
              {
                LOBYTE(__src[0]) = 0;
                HIBYTE(v97) = 0;
              }
            }
            if (SHIBYTE(v101) < 0)
              operator delete((void *)v100);
            v40 = (void *)HIBYTE(v97);
            v41 = HIBYTE(v97);
            if (v97 < 0)
              v40 = __src[1];
            if (v40)
            {
              v43 = *(_QWORD *)(v7 + 144);
              v42 = *(_QWORD *)(v7 + 152);
              if (v43 >= v42)
              {
                v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *v86) >> 3);
                v48 = v47 + 1;
                if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_18D07AFE4();
                v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v86) >> 3);
                if (2 * v49 > v48)
                  v48 = 2 * v49;
                if (v49 >= 0x555555555555555)
                  v50 = 0xAAAAAAAAAAAAAAALL;
                else
                  v50 = v48;
                *((_QWORD *)&v102 + 1) = v7 + 152;
                if (v50)
                {
                  v51 = (char *)sub_18D1782B8(v7 + 152, v50);
                  v41 = HIBYTE(v97);
                }
                else
                {
                  v51 = 0;
                }
                v54 = &v51[24 * v47];
                *(_QWORD *)&v100 = v51;
                *((_QWORD *)&v100 + 1) = v54;
                v101 = v54;
                *(_QWORD *)&v102 = &v51[24 * v50];
                if (v41 < 0)
                {
                  sub_18D077798(v54, __src[0], (unint64_t)__src[1]);
                  v54 = v101;
                }
                else
                {
                  v55 = *(_OWORD *)__src;
                  *((_QWORD *)v54 + 2) = v97;
                  *(_OWORD *)v54 = v55;
                }
                v101 = v54 + 24;
                sub_18D178244(v86, &v100);
                v53 = *(_QWORD *)(v7 + 144);
                sub_18D178410((uint64_t)&v100);
              }
              else
              {
                if (SHIBYTE(v97) < 0)
                {
                  sub_18D077798(*(_BYTE **)(v7 + 144), __src[0], (unint64_t)__src[1]);
                }
                else
                {
                  v44 = *(_OWORD *)__src;
                  *(_QWORD *)(v43 + 16) = v97;
                  *(_OWORD *)v43 = v44;
                }
                v53 = v43 + 24;
                *(_QWORD *)(v7 + 144) = v43 + 24;
              }
              *(_QWORD *)(v7 + 144) = v53;
            }
            else
            {
              v45 = HIBYTE(v99);
              if (SHIBYTE(v99) < 0)
                v45 = *((_QWORD *)&v98 + 1);
              if (v45 == 2)
              {
                v52 = &v98;
                if (SHIBYTE(v99) < 0)
                  v52 = (__int128 *)v98;
                sub_18D2CE618(v7, *(char *)v52, *((char *)v52 + 1));
              }
              else
              {
                if (v45 != 1)
                  sub_18D2CE820();
                v46 = &v98;
                if (SHIBYTE(v99) < 0)
                  v46 = (__int128 *)v98;
                sub_18D2CCE8C(v7, *(char *)v46);
              }
            }
            if (SHIBYTE(v97) < 0)
              operator delete(__src[0]);
            if (SHIBYTE(v99) < 0)
              operator delete((void *)v98);
            v25 = 0;
            v26 = (unint64_t)&j[v5];
LABEL_148:
            v5 = v26 + 4;
            v38 = v8;
            goto LABEL_149;
          default:
            v11 = 0;
            v12 = 0;
            v9 = (char *)v5;
            break;
        }
      }
      v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((char)v12 >= 0)
        v11 = v12;
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          v16 = *v9;
          if (v16 == 92)
          {
            v17 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
              v18 = sub_18D2CE32C(a1, v17, a3, (uint64_t *)__p);
            else
              v18 = (char *)sub_18D2CDF88(a1, (unsigned __int8 *)v17, (unsigned __int8 *)a3, (uint64_t)__p, v7);
            v9 = v18;
            goto LABEL_81;
          }
        }
        else
        {
          LOBYTE(v16) = *v9;
        }
        if ((char)v12 < 0)
        {
          v30 = (void **)__p[0];
          __p[1] = (void *)1;
        }
        else
        {
          HIBYTE(v95) = 1;
          v30 = __p;
        }
        *(_BYTE *)v30 = v16;
        *((_BYTE *)v30 + 1) = 0;
        ++v9;
      }
LABEL_81:
      if (v9 != a3)
      {
        v35 = *v9;
        if (v35 != 93)
        {
          v37 = v9 + 1;
          if (v9 + 1 != a3 && v35 == 45 && *v37 != 93)
          {
            v92[0] = 0;
            v92[1] = 0;
            v93 = 0;
            v38 = v9 + 2;
            if (v9 + 2 != a3 && *v37 == 91 && *v38 == 46)
            {
              v39 = sub_18D2CDEA0(a1, v9 + 3, a3, (uint64_t)v92);
              goto LABEL_156;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v37) = *v37;
              if ((_DWORD)v37 == 92)
              {
                if ((_DWORD)v5)
                  v39 = (uint64_t)sub_18D2CE32C(a1, v9 + 2, a3, (uint64_t *)v92);
                else
                  v39 = (uint64_t)sub_18D2CDF88(a1, (unsigned __int8 *)v9 + 2, (unsigned __int8 *)a3, (uint64_t)v92, v7);
LABEL_156:
                v38 = (char *)v39;
LABEL_157:
                *(_OWORD *)v90 = *(_OWORD *)__p;
                v91 = v95;
                __p[1] = 0;
                v95 = 0;
                *(_OWORD *)v88 = *(_OWORD *)v92;
                v89 = v93;
                v92[0] = 0;
                v92[1] = 0;
                v93 = 0;
                __p[0] = 0;
                if (*(_BYTE *)(v7 + 170))
                {
                  if (*(_BYTE *)(v7 + 169))
                  {
                    v56 = SHIBYTE(v91) < 0;
                    v57 = (void *)HIBYTE(v91);
                    if (SHIBYTE(v91) < 0)
                      v57 = v90[1];
                    if (v57)
                    {
                      v58 = 0;
                      do
                      {
                        if (v56)
                          v59 = (void **)v90[0];
                        else
                          v59 = v90;
                        v60 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *((char *)v59 + v58));
                        if (SHIBYTE(v91) >= 0)
                          v61 = v90;
                        else
                          v61 = (void **)v90[0];
                        *((_BYTE *)v61 + v58++) = v60;
                        v56 = SHIBYTE(v91) < 0;
                        v62 = (void *)HIBYTE(v91);
                        if (SHIBYTE(v91) < 0)
                          v62 = v90[1];
                      }
                      while (v58 < (unint64_t)v62);
                    }
                    v63 = v89 < 0;
                    v64 = (void *)HIBYTE(v89);
                    if (v89 < 0)
                      v64 = v88[1];
                    if (v64)
                    {
                      v65 = 0;
                      do
                      {
                        if (v63)
                          v66 = (void **)v88[0];
                        else
                          v66 = v88;
                        v67 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *((char *)v66 + v65));
                        if (v89 >= 0)
                          v68 = v88;
                        else
                          v68 = (void **)v88[0];
                        *((_BYTE *)v68 + v65++) = v67;
                        v63 = v89 < 0;
                        v69 = (void *)HIBYTE(v89);
                        if (v89 < 0)
                          v69 = v88[1];
                      }
                      while (v65 < (unint64_t)v69);
                    }
                  }
                  v70 = (char *)HIBYTE(v91);
                  if (SHIBYTE(v91) >= 0)
                    v71 = (char *)v90;
                  else
                    v71 = (char *)v90[0];
                  if (SHIBYTE(v91) < 0)
                    v70 = (char *)v90[1];
                  sub_18D2CEC24((uint64_t)&v98, v85, v71, &v70[(_QWORD)v71]);
                  v72 = (char *)HIBYTE(v89);
                  if (v89 >= 0)
                    v73 = (char *)v88;
                  else
                    v73 = (char *)v88[0];
                  if (v89 < 0)
                    v72 = (char *)v88[1];
                  sub_18D2CEC24((uint64_t)__src, v85, v73, &v72[(_QWORD)v73]);
                  v100 = v98;
                  v101 = v99;
                  v99 = 0;
                  v98 = 0uLL;
                  v102 = *(_OWORD *)__src;
                  v103 = v97;
                  __src[0] = 0;
                  __src[1] = 0;
                  v97 = 0;
                  sub_18D2CEA58(v84, &v100);
                  if (SHIBYTE(v103) < 0)
                    operator delete((void *)v102);
                  if (SHIBYTE(v101) < 0)
                    operator delete((void *)v100);
                  if (SHIBYTE(v97) < 0)
                    operator delete(__src[0]);
                  if (SHIBYTE(v99) < 0)
                  {
                    v74 = (void *)v98;
                    goto LABEL_227;
                  }
                }
                else
                {
                  v75 = (void *)HIBYTE(v91);
                  if (SHIBYTE(v91) < 0)
                    v75 = v90[1];
                  if (v75 != (void *)1)
                    goto LABEL_246;
                  v76 = (void *)HIBYTE(v89);
                  if (v89 < 0)
                    v76 = v88[1];
                  if (v76 != (void *)1)
LABEL_246:
                    sub_18D2CECCC();
                  if (*(_BYTE *)(v7 + 169))
                  {
                    if (SHIBYTE(v91) >= 0)
                      v77 = v90;
                    else
                      v77 = (void **)v90[0];
                    v78 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v77);
                    if (SHIBYTE(v91) >= 0)
                      v79 = v90;
                    else
                      v79 = (void **)v90[0];
                    *(_BYTE *)v79 = v78;
                    if (v89 >= 0)
                      v80 = v88;
                    else
                      v80 = (void **)v88[0];
                    v81 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v80);
                    if (v89 >= 0)
                      v82 = v88;
                    else
                      v82 = (void **)v88[0];
                    *(_BYTE *)v82 = v81;
                  }
                  v100 = *(_OWORD *)v90;
                  v101 = v91;
                  v90[0] = 0;
                  v90[1] = 0;
                  v91 = 0;
                  v102 = *(_OWORD *)v88;
                  v103 = v89;
                  v88[0] = 0;
                  v88[1] = 0;
                  v89 = 0;
                  sub_18D2CEA58(v84, &v100);
                  if (SHIBYTE(v103) < 0)
                    operator delete((void *)v102);
                  if (SHIBYTE(v101) < 0)
                  {
                    v74 = (void *)v100;
LABEL_227:
                    operator delete(v74);
                  }
                }
                if (SHIBYTE(v89) < 0)
                  operator delete(v88[0]);
                if (SHIBYTE(v91) < 0)
                  operator delete(v90[0]);
                if (SHIBYTE(v93) < 0)
                  operator delete(v92[0]);
                v25 = 1;
LABEL_149:
                if (SHIBYTE(v95) < 0)
                  operator delete(__p[0]);
                v9 = v38;
                if ((v25 & 1) == 0)
                  goto LABEL_153;
                goto LABEL_152;
              }
            }
            else
            {
              LOBYTE(v37) = *v37;
            }
            HIBYTE(v93) = 1;
            LOWORD(v92[0]) = v37;
            goto LABEL_157;
          }
        }
      }
      if (SHIBYTE(v95) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            v36 = (void **)__p[0];
LABEL_90:
            sub_18D2CCE8C(v7, *(char *)v36);
LABEL_101:
            v25 = 1;
            v38 = v9;
            goto LABEL_149;
          }
          v36 = (void **)__p[0];
LABEL_100:
          sub_18D2CE618(v7, *(char *)v36, *((char *)v36 + 1));
          goto LABEL_101;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v95))
      {
        v36 = __p;
        if (HIBYTE(v95) == 1)
          goto LABEL_90;
        goto LABEL_100;
      }
LABEL_152:
      v5 = (uint64_t)v9;
LABEL_153:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            sub_18D2CCE8C(v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93)
            return v8 + 1;
        }
LABEL_243:
        sub_18D2CDE54();
      }
    }
  }
  return a2;
}

void sub_18D2CBBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(v46 + 144) = v47;
  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v48 - 145) < 0)
    operator delete(*(void **)(v48 - 168));
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2CBD1C(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    v1 = result;
    result = operator new();
    v2 = *(_DWORD *)(v1 + 28) + 1;
    *(_DWORD *)(v1 + 28) = v2;
    v3 = *(_QWORD *)(v1 + 56);
    v4 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)result = &off_1E25CD180;
    *(_QWORD *)(result + 8) = v4;
    *(_DWORD *)(result + 16) = v2;
    *(_QWORD *)(v3 + 8) = result;
    *(_QWORD *)(v1 + 56) = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8);
  }
  return result;
}

uint64_t sub_18D2CBD8C(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    v3 = result;
    result = operator new();
    v4 = *(_QWORD *)(v3 + 56);
    v5 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)result = &off_1E25CD150;
    *(_QWORD *)(result + 8) = v5;
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(v4 + 8) = result;
    *(_QWORD *)(v3 + 56) = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8);
  }
  return result;
}

void sub_18D2CBDF4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CBE2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2CBE40(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2CBE80(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2CBED0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CBF08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_18D2CBF1C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;
  char v12;
  char v13;
  uint64_t v14;
  __int16 v15;

  v4 = a2;
  if (a2 != a3)
  {
    v5 = *a2;
    v6 = (char)v5;
    if ((int)v6 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v15 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v15 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v15 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
                  goto LABEL_27;
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v15 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3)
            goto LABEL_89;
          v9 = v4[1];
          v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
            goto LABEL_32;
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u)
            goto LABEL_89;
          v10 = -87;
LABEL_32:
          if (v4 + 2 == a3)
            goto LABEL_89;
          v11 = v4[2];
          v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
            goto LABEL_37;
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u)
            goto LABEL_89;
          v12 = -87;
LABEL_37:
          v13 = v11 + 16 * (v9 + v10) + v12;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            *(_BYTE *)a4 = v13;
            *((_BYTE *)a4 + 1) = 0;
          }
          else
          {
            sub_18D2CC2D0(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((_DWORD)v6 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      v6 = 0;
      goto LABEL_67;
    }
    if ((_DWORD)v6 != 99)
    {
      if ((_DWORD)v6 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v15 = 12;
LABEL_79:
          *(_WORD *)a4 = v15;
          return ++v4;
        }
        v6 = 12;
LABEL_67:
        sub_18D2CC2D0(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((_DWORD)v6 != 95
        && ((v6 & 0x80000000) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v5) & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_WORD *)a4 = v5;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      sub_18D2CBED0();
    }
    if (v4 + 1 == a3 || ((v4[1] & 0xDF) - 65) > 0x19u)
      goto LABEL_89;
    v14 = v4[1] & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v14;
      *((_BYTE *)a4 + 1) = 0;
    }
    else
    {
      sub_18D2CC2D0(a1, v14);
    }
    v4 += 2;
  }
  return v4;
}

uint64_t sub_18D2CC2D0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = operator new();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_1E25CCD60;
    *(_QWORD *)(v8 + 8) = v9;
    std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    *(_BYTE *)(v8 + 40) = result;
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = operator new();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_1E25CCDF0;
    *(_QWORD *)(v8 + 8) = v10;
    result = (uint64_t)std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    *(_BYTE *)(v8 + 40) = a2;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_1E25CCBB8;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_18D2CC3F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::locale *v2;
  uint64_t v4;

  std::locale::~locale(v2);
  *v1 = &off_1E25CCC78;
  v4 = v1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x18D78B5D4](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void sub_18D2CC444()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CC47C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2CC490(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  uint64_t (**v11)();

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_1E25CCC48;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = v10;
    result = (uint64_t)std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_1E25CCD30;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_1E25C8B88;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

std::locale *sub_18D2CC584(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCD60;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_18D2CC5D4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCD60;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CC634(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_18D2CC6AC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCDF0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_18D2CC6FC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCDF0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CC75C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

_QWORD *sub_18D2CC7A4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2CC7E4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CC834(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *sub_18D2CC87C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC48;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_18D2CC8CC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC48;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CC92C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *sub_18D2CCA10(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCD30;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_18D2CCA60(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E25CCD30;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CCAC0(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

_QWORD *sub_18D2CCB50(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2CCB90(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

unsigned int *sub_18D2CCBE0(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    sub_18D2CC444();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

uint64_t sub_18D2CCC9C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  int v8;
  std::string::size_type size;
  std::string *v10;
  BOOL v11;
  std::locale v13;
  std::string v14;

  v4 = operator new();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v6 = *(unsigned __int8 *)(a1 + 24);
  v7 = v6 & 1;
  v8 = (v6 >> 3) & 1;
  *(_QWORD *)v4 = off_1E25CCD90;
  *(_QWORD *)(v4 + 8) = v5;
  std::locale::locale((std::locale *)(v4 + 16), (const std::locale *)a1);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = a2;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v13, (const std::locale *)(v4 + 16));
  std::locale::name(&v14, &v13);
  size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v14.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    v11 = v10->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v11 = 1;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v13);
  *(_BYTE *)(v4 + 171) = v11;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v4;
  *(_QWORD *)(a1 + 56) = v4;
  return v4;
}

void sub_18D2CCDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  _QWORD *v10;
  std::locale *v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  sub_18D178498((void ***)&a10);
  v14 = (void *)v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  sub_18D2CDAD8((void ***)&a10);
  v15 = (void *)v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = *v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  *v10 = &off_1E25CCC78;
  v17 = v10[1];
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  MEMORY[0x18D78B5D4](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void sub_18D2CCE8C(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = &v5[-v6];
      v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        v9 = v4 - v6;
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
          v11 = operator new(v10);
        else
          v11 = 0;
        v19 = &v7[(_QWORD)v11];
        v20 = (char *)v11 + v10;
        v7[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v7[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v6)
        {
          v21 = &v5[~v6];
          do
          {
            v22 = *--v5;
            (v21--)[(_QWORD)v11] = v22;
          }
          while (v5 != (_BYTE *)v6);
LABEL_45:
          v5 = *(_BYTE **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_18D07AFE4();
    }
    goto LABEL_22;
  }
  v5 = *(_BYTE **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = &v5[-v23];
      v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        v26 = v12 - v23;
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v11 = operator new(v27);
        else
          v11 = 0;
        v19 = &v24[(_QWORD)v11];
        v20 = (char *)v11 + v27;
        v24[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v24[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v23)
        {
          v30 = &v5[~v23];
          do
          {
            v31 = *--v5;
            (v30--)[(_QWORD)v11] = v31;
          }
          while (v5 != (_BYTE *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = &v5[-v13];
  v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0)
    goto LABEL_50;
  v16 = v12 - v13;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
    v11 = operator new(v17);
  else
    v11 = 0;
  v19 = &v14[(_QWORD)v11];
  v20 = (char *)v11 + v17;
  v14[(_QWORD)v11] = v2;
  v18 = (uint64_t)&v14[(_QWORD)v11 + 1];
  if (v5 != (_BYTE *)v13)
  {
    v28 = &v5[~v13];
    do
    {
      v29 = *--v5;
      (v28--)[(_QWORD)v11] = v29;
    }
    while (v5 != (_BYTE *)v13);
    goto LABEL_45;
  }
LABEL_46:
  v11 = v19;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v20;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v18;
}

std::locale *sub_18D2CD0A4(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  a1->__locale_ = (std::locale::__imp *)off_1E25CCD90;
  v7 = a1 + 17;
  sub_18D178498((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  sub_18D2CDAD8((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t sub_18D2CD150(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  a1->__locale_ = (std::locale::__imp *)off_1E25CCD90;
  v7 = a1 + 17;
  sub_18D178498((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  sub_18D2CDAD8((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E25CCC78;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x18D78B5D4](a1, 0x10F1C4061CF1F02);
}

void sub_18D2CD210(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char v6;
  char v7;
  std::string::size_type size;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  std::string *p_s;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  std::string::size_type v24;
  unsigned __int8 v25;
  unsigned __int8 *v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  char v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  const void *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  uint64_t v49;
  BOOL j;
  unsigned __int8 **v51;
  unsigned __int8 *v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  const void *v58;
  std::string::size_type v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  const void *v67;
  std::string::size_type v68;
  std::string::size_type v69;
  uint64_t v70;
  BOOL i;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  const void *v78;
  std::string::size_type v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  std::string::size_type v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  std::string __p;
  __int16 v94;
  std::string v95;
  std::string __s;

  v4 = *(char **)(a2 + 16);
  v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    v10 = 0;
    LODWORD(v11) = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_182;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_37;
  v6 = *v4;
  LOBYTE(v94) = *v4;
  v7 = v4[1];
  HIBYTE(v94) = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    LOBYTE(v94) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    HIBYTE(v94) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v94;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v95, (const char *)&__s);
  __p = v95;
  size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v95.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_15;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 32) + 32))(&v95, *(_QWORD *)(a1 + 32), p_s, (char *)p_s + v12);
  if (v9 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v95;
  if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v95.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v95.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_119;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_119:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_15:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_17;
LABEL_37:
    v11 = 0;
    v10 = 1;
    goto LABEL_38;
  }
  v24 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v24)
    goto LABEL_37;
LABEL_17:
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 120) - v14;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    v17 = (unsigned __int8 *)(v14 + 1);
    while (v94 != *(v17 - 1) || HIBYTE(v94) != *v17)
    {
      v17 += 2;
      if (!--v16)
        goto LABEL_26;
    }
    goto LABEL_179;
  }
LABEL_26:
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    LODWORD(v11) = 0;
    goto LABEL_126;
  }
  sub_18D2CDB8C((uint64_t)&__s, a1 + 16, (char *)&v94, (char *)&v95);
  v19 = *(_QWORD **)(a1 + 88);
  v20 = *(_QWORD *)(a1 + 96) - (_QWORD)v19;
  if (v20)
  {
    v21 = v20 / 48;
    if (v21 <= 1)
      v22 = 1;
    else
      v22 = v21;
    while ((int)(sub_18D2CDC34(v19, &__s) << 24) > 0xFFFFFF
         || (int)(sub_18D2CDC34(&__s, v19 + 3) << 24) >= 0x1000000)
    {
      v19 += 6;
      if (!--v22)
        goto LABEL_35;
    }
    v23 = 0;
    v11 = 1;
  }
  else
  {
LABEL_35:
    v11 = 0;
    v23 = 1;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if ((v11 & 1) == 0)
  {
LABEL_126:
    if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
      goto LABEL_161;
    sub_18D2CDD54((uint64_t)&__s, a1 + 16, (char *)&v94, (char *)&v95);
    v62 = *(_QWORD *)(a1 + 136);
    v63 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    v64 = *(_QWORD *)(a1 + 144) - v62;
    if (v64)
    {
      v65 = 0;
      v66 = v64 / 24;
      v68 = __s.__r_.__value_.__l.__size_;
      v67 = (const void *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        v69 = __s.__r_.__value_.__l.__size_;
      if (v66 <= 1)
        v70 = 1;
      else
        v70 = v64 / 24;
      for (i = 1; ; i = v65 < v66)
      {
        v72 = v62 + 24 * v65;
        v73 = *(unsigned __int8 *)(v72 + 23);
        v74 = (char)v73;
        if ((v73 & 0x80u) != 0)
          v73 = *(_QWORD *)(v72 + 8);
        if (v69 != v73)
          goto LABEL_147;
        v75 = v74 >= 0 ? (unsigned __int8 *)(v62 + 24 * v65) : *(unsigned __int8 **)v72;
        if ((v63 & 0x80) == 0)
          break;
        v90 = i;
        v77 = v70;
        v92 = v62;
        v78 = v67;
        v79 = v68;
        if (!memcmp(v67, v75, v68))
        {
          operator delete(__s.__r_.__value_.__l.__data_);
          if (!v90)
          {
LABEL_160:
            LODWORD(v11) = 1;
            goto LABEL_161;
          }
LABEL_153:
          LODWORD(v11) = 1;
LABEL_181:
          v10 = 2;
          goto LABEL_182;
        }
        ++v65;
        v70 = v77;
        v68 = v79;
        v67 = v78;
        v62 = v92;
        if (v65 == v77)
          goto LABEL_155;
LABEL_151:
        ;
      }
      if (!(_DWORD)v63)
      {
LABEL_152:
        if (!i)
          goto LABEL_160;
        goto LABEL_153;
      }
      v76 = 0;
      while (__s.__r_.__value_.__s.__data_[v76] == v75[v76])
      {
        if (v63 == ++v76)
          goto LABEL_152;
      }
LABEL_147:
      if (++v65 == v70)
        goto LABEL_154;
      goto LABEL_151;
    }
LABEL_154:
    if ((v63 & 0x80) != 0)
LABEL_155:
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_161:
    if ((char)v94 < 0)
    {
      v83 = *(_DWORD *)(a1 + 164);
    }
    else
    {
      v80 = *(_DWORD *)(a1 + 160);
      v81 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
      v82 = *(_DWORD *)(v81 + 4 * v94);
      if (((v82 & v80) != 0 || v94 == 95 && (v80 & 0x80) != 0)
        && (SHIBYTE(v94) & 0x80000000) == 0
        && ((*(_DWORD *)(v81 + 4 * HIBYTE(v94)) & v80) != 0 || (v80 & 0x80) != 0 && HIBYTE(v94) == 95))
      {
        goto LABEL_179;
      }
      v83 = *(_DWORD *)(a1 + 164);
      if ((v83 & v82) != 0 || v94 == 95 && (v83 & 0x80) != 0)
      {
LABEL_178:
        v84 = v11;
LABEL_180:
        LODWORD(v11) = v84;
        goto LABEL_181;
      }
    }
    if ((SHIBYTE(v94) & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * HIBYTE(v94)) & v83) == 0)
      {
        v84 = 1;
        if (HIBYTE(v94) != 95 || (v83 & 0x80) == 0)
          goto LABEL_180;
      }
      goto LABEL_178;
    }
LABEL_179:
    v84 = 1;
    goto LABEL_180;
  }
  if ((v23 & 1) == 0)
    goto LABEL_181;
  v10 = 2;
LABEL_38:
  v25 = **(_BYTE **)(a2 + 16);
  v95.__r_.__value_.__s.__data_[0] = v25;
  if (*(_BYTE *)(a1 + 169))
  {
    v25 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v25);
    v95.__r_.__value_.__s.__data_[0] = v25;
  }
  v26 = *(unsigned __int8 **)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 48) - (_QWORD)v26;
  if (v27)
  {
    if (v27 <= 1)
      v27 = 1;
    while (1)
    {
      v28 = *v26++;
      if (v28 == v25)
        break;
      if (!--v27)
        goto LABEL_45;
    }
LABEL_116:
    LODWORD(v11) = 1;
    goto LABEL_182;
  }
LABEL_45:
  v29 = *(_DWORD *)(a1 + 164);
  if (v29 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v25 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v25) & v29) == 0)
    {
      v31 = (v29 >> 7) & 1;
      v30 = v25 == 95 ? v31 : 0;
    }
    else
    {
      v30 = 1;
    }
    v32 = *(void **)(a1 + 72);
    v33 = memchr(*(void **)(a1 + 64), (char)v25, (size_t)v32 - *(_QWORD *)(a1 + 64));
    v34 = v33 ? v33 : v32;
    if ((v30 & 1) == 0 && v34 == v32)
      goto LABEL_116;
  }
  v36 = *(char **)(a1 + 88);
  v35 = *(char **)(a1 + 96);
  if (v36 != v35)
  {
    if (*(_BYTE *)(a1 + 170))
    {
      sub_18D2CDB8C((uint64_t)&__s, a1 + 16, (char *)&v95, &v95.__r_.__value_.__s.__data_[1]);
      v36 = *(char **)(a1 + 88);
      v35 = *(char **)(a1 + 96);
    }
    else
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v25;
    }
    v37 = v35 - v36;
    if (v37)
    {
      v38 = 0;
      v39 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 4);
      while ((int)(sub_18D2CDC34(v36, &__s) << 24) > 0xFFFFFF
           || (int)(sub_18D2CDC34(&__s, (_QWORD *)v36 + 3) << 24) >= 0x1000000)
      {
        ++v38;
        v36 += 48;
        if (v38 >= v39)
          goto LABEL_68;
      }
      v40 = 1;
      v11 = 1;
    }
    else
    {
LABEL_68:
      v40 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if ((v40 & 1) != 0)
      goto LABEL_182;
  }
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
  {
LABEL_111:
    if (v95.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_182;
    v60 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v95.__r_.__value_.__s.__data_[0]) & v60) == 0)
    {
      v61 = (v60 >> 7) & 1;
      if (v95.__r_.__value_.__s.__data_[0] != 95)
        v61 = 0;
      if (v61 != 1)
        goto LABEL_182;
    }
    goto LABEL_116;
  }
  sub_18D2CDD54((uint64_t)&__s, a1 + 16, (char *)&v95, &v95.__r_.__value_.__s.__data_[1]);
  v41 = *(_QWORD *)(a1 + 136);
  v42 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v43 = *(_QWORD *)(a1 + 144) - v41;
  if (!v43)
  {
LABEL_109:
    if ((v42 & 0x80) != 0)
LABEL_110:
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_111;
  }
  v44 = 0;
  v45 = v43 / 24;
  v47 = __s.__r_.__value_.__l.__size_;
  v46 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v48 = __s.__r_.__value_.__l.__size_;
  if (v45 <= 1)
    v49 = 1;
  else
    v49 = v43 / 24;
  for (j = 1; ; j = v44 < v45)
  {
    v51 = (unsigned __int8 **)(v41 + 24 * v44);
    v52 = (unsigned __int8 *)*((unsigned __int8 *)v51 + 23);
    v53 = (char)v52;
    if ((char)v52 < 0)
      v52 = v51[1];
    if ((unsigned __int8 *)v48 != v52)
      goto LABEL_102;
    if (v53 >= 0)
      v54 = (unsigned __int8 *)(v41 + 24 * v44);
    else
      v54 = *v51;
    if ((v42 & 0x80) == 0)
    {
      if (!(_DWORD)v42)
      {
LABEL_107:
        LODWORD(v11) = 1;
        if (!j)
          goto LABEL_111;
        goto LABEL_182;
      }
      v55 = 0;
      while (__s.__r_.__value_.__s.__data_[v55] == v54[v55])
      {
        if (v42 == ++v55)
          goto LABEL_107;
      }
LABEL_102:
      if (++v44 == v49)
        goto LABEL_109;
      continue;
    }
    v87 = j;
    v88 = v41;
    v89 = v48;
    v56 = v11;
    v57 = v45;
    v91 = v10;
    v58 = v46;
    v59 = v47;
    if (!memcmp(v46, v54, v47))
      break;
    ++v44;
    v47 = v59;
    v46 = v58;
    v48 = v89;
    v10 = v91;
    v45 = v57;
    v11 = v56;
    v41 = v88;
    if (v44 == v49)
      goto LABEL_110;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  LODWORD(v11) = 1;
  v10 = v91;
  if (!v87)
    goto LABEL_111;
LABEL_182:
  if ((_DWORD)v11 == *(unsigned __int8 *)(a1 + 168))
  {
    v85 = 0;
    v86 = -993;
  }
  else
  {
    *(_QWORD *)(a2 + 16) += v10;
    v85 = *(_QWORD *)(a1 + 8);
    v86 = -995;
  }
  *(_DWORD *)a2 = v86;
  *(_QWORD *)(a2 + 80) = v85;
}

void sub_18D2CDA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void sub_18D2CDAD8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_18D2CDB48(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18D2CDB48(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_18D2CDB8C(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  sub_18D2CDCB0(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_18D2CDC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2CDC34(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (_QWORD *)*a1;
    v3 = v2;
  }
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (v3 == v5)
      return 0;
    if (v3 >= v5)
      return 1;
  }
  return 255;
}

_QWORD *sub_18D2CDCB0(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_18D076D60();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sub_18D2CDD54(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  sub_18D2CDCB0(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_18D2CDE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D2CDE54()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CDE8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2CDEA0(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    sub_18D2CDE54();
  sub_18D2CE86C((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    sub_18D2CE820();
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *sub_18D2CDF88(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  char v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  char v42;
  _BYTE *v43;
  char v44;

  if (a2 == a3)
    sub_18D2CBED0();
  v7 = (char)*a2;
  if (v7 <= 97)
  {
    if (v7 <= 82)
    {
      if (!*a2)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        return a2 + 1;
      }
      if (v7 == 68)
      {
        v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_24:
        *(_DWORD *)(a5 + 164) = v8;
        return a2 + 1;
      }
      return sub_18D2CBF1C(a1, a2, a3, (uint64_t *)a4);
    }
    if (v7 == 83)
    {
      v8 = *(_DWORD *)(a5 + 164) | 0x4000;
      goto LABEL_24;
    }
    if (v7 != 87)
      return sub_18D2CBF1C(a1, a2, a3, (uint64_t *)a4);
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(_BYTE *)(a5 + 169))
    {
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v11 = v10;
      v13 = *(_BYTE **)(a5 + 72);
      v12 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *v13 = v10;
        v14 = (uint64_t)(v13 + 1);
LABEL_60:
        *(_QWORD *)(a5 + 72) = v14;
        return a2 + 1;
      }
      v24 = *(_QWORD *)(a5 + 64);
      v25 = &v13[-v24];
      v26 = (uint64_t)&v13[-v24 + 1];
      if (v26 >= 0)
      {
        v27 = v12 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = operator new(v28);
        else
          v29 = 0;
        v31 = &v29[v28];
        v25[(_QWORD)v29] = v11;
        v14 = (uint64_t)&v25[(_QWORD)v29 + 1];
        if (v13 == (_BYTE *)v24)
        {
          v29 = &v25[(_QWORD)v29];
        }
        else
        {
          v32 = &v13[~v24];
          do
          {
            v33 = *--v13;
            (v32--)[(_QWORD)v29] = v33;
          }
          while (v13 != (_BYTE *)v24);
          v13 = *(_BYTE **)(a5 + 64);
        }
        *(_QWORD *)(a5 + 64) = v29;
        *(_QWORD *)(a5 + 72) = v14;
        *(_QWORD *)(a5 + 80) = v31;
        if (v13)
          operator delete(v13);
        goto LABEL_60;
      }
LABEL_85:
      sub_18D07AFE4();
    }
    v17 = *(_BYTE **)(a5 + 72);
    v16 = *(_QWORD *)(a5 + 80);
    if (*(_BYTE *)(a5 + 170))
    {
      if ((unint64_t)v17 >= v16)
      {
        v18 = *(_QWORD *)(a5 + 64);
        v19 = &v17[-v18];
        v20 = (uint64_t)&v17[-v18 + 1];
        if (v20 < 0)
          goto LABEL_85;
        v21 = v16 - v18;
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
          v23 = operator new(v22);
        else
          v23 = 0;
        v39 = &v19[(_QWORD)v23];
        v40 = (char *)v23 + v22;
        v19[(_QWORD)v23] = 95;
        v30 = (uint64_t)&v19[(_QWORD)v23 + 1];
        if (v17 != (_BYTE *)v18)
        {
          v41 = &v17[~v18];
          do
          {
            v42 = *--v17;
            (v41--)[(_QWORD)v23] = v42;
          }
          while (v17 != (_BYTE *)v18);
LABEL_78:
          v17 = *(_BYTE **)(a5 + 64);
          goto LABEL_80;
        }
        goto LABEL_79;
      }
    }
    else if ((unint64_t)v17 >= v16)
    {
      v34 = *(_QWORD *)(a5 + 64);
      v35 = &v17[-v34];
      v36 = (uint64_t)&v17[-v34 + 1];
      if (v36 < 0)
        goto LABEL_85;
      v37 = v16 - v34;
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v23 = operator new(v38);
      else
        v23 = 0;
      v39 = &v35[(_QWORD)v23];
      v40 = (char *)v23 + v38;
      v35[(_QWORD)v23] = 95;
      v30 = (uint64_t)&v35[(_QWORD)v23 + 1];
      if (v17 != (_BYTE *)v34)
      {
        v43 = &v17[~v34];
        do
        {
          v44 = *--v17;
          (v43--)[(_QWORD)v23] = v44;
        }
        while (v17 != (_BYTE *)v34);
        goto LABEL_78;
      }
LABEL_79:
      v23 = v39;
LABEL_80:
      *(_QWORD *)(a5 + 64) = v23;
      *(_QWORD *)(a5 + 72) = v30;
      *(_QWORD *)(a5 + 80) = v40;
      if (v17)
        operator delete(v17);
      goto LABEL_82;
    }
    *v17 = 95;
    v30 = (uint64_t)(v17 + 1);
LABEL_82:
    *(_QWORD *)(a5 + 72) = v30;
    return a2 + 1;
  }
  if (v7 <= 114)
  {
    if (v7 == 98)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      return a2 + 1;
    }
    if (v7 != 100)
      return sub_18D2CBF1C(a1, a2, a3, (uint64_t *)a4);
    v9 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_26:
    *(_DWORD *)(a5 + 160) = v9;
    return a2 + 1;
  }
  if (v7 == 115)
  {
    v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    goto LABEL_26;
  }
  if (v7 != 119)
    return sub_18D2CBF1C(a1, a2, a3, (uint64_t *)a4);
  *(_DWORD *)(a5 + 160) |= 0x500u;
  sub_18D2CCE8C(a5, 95);
  return a2 + 1;
}

char *sub_18D2CE32C(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  char *v9;
  char v10;
  int v11;
  char v12;
  __int16 v13;

  if (a2 == a3)
LABEL_80:
    sub_18D2CBED0();
  v5 = *a2;
  v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 8;
            goto LABEL_77;
          }
          v7 = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_25;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 12;
            goto LABEL_77;
          }
          v7 = 12;
        }
        break;
    }
LABEL_62:
    sub_18D2CC2D0(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v6;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      v7 = v6;
      goto LABEL_62;
    }
    if (v5 != 97)
      goto LABEL_25;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_16;
LABEL_25:
  if ((v6 & 0xF8) != 0x30)
    goto LABEL_80;
  v8 = v5 - 48;
  v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30)
      goto LABEL_49;
    v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      v10 = a2[2];
      v11 = v10 & 0xF8;
      v12 = v10 + 8 * v8 - 48;
      if (v11 == 48)
        v9 = a2 + 3;
      else
        v9 = a2 + 2;
      if (v11 == 48)
        v8 = v12;
      goto LABEL_49;
    }
  }
  v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((_BYTE *)a4 + 23) = 1;
    }
    *(_BYTE *)a4 = v8;
    *((_BYTE *)a4 + 1) = 0;
  }
  else
  {
    sub_18D2CC2D0(a1, v8);
  }
  return v9;
}

void sub_18D2CE618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)sub_18D2CED18(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)sub_18D2CED18(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    sub_18D07AFE4();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)sub_18D2CED18(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void sub_18D2CE820()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CE858(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D2CE86C(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  sub_18D2CDCB0(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_18D2CE9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D2CEA0C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CEA44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D2CEA58(void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      sub_18D07AFE4();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x555555555555555)
        sub_18D0788A0();
      v13 = (char *)operator new(48 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[48 * v9];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v16 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      v8 = v14 + 48;
      *a1 = v14;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
    }
    else
    {
      v18 = &v13[48 * v9];
      do
      {
        v19 = *((_OWORD *)v17 - 3);
        *((_QWORD *)v18 - 4) = *((_QWORD *)v17 - 4);
        *((_OWORD *)v18 - 3) = v19;
        *((_QWORD *)v17 - 5) = 0;
        *((_QWORD *)v17 - 4) = 0;
        *((_QWORD *)v17 - 6) = 0;
        v20 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *((_QWORD *)v17 - 2) = 0;
        *((_QWORD *)v17 - 1) = 0;
        *((_QWORD *)v17 - 3) = 0;
        v17 -= 48;
      }
      while (v17 != v16);
      v17 = (char *)*a1;
      v21 = (uint64_t)a1[1];
      v8 = v14 + 48;
      *a1 = v18;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
      while ((char *)v21 != v17)
      {
        v21 -= 48;
        sub_18D2CDB48(v21);
      }
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = v4 + 48;
  }
  a1[1] = v8;
}

void sub_18D2CEC24(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  sub_18D2CDCB0(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_18D2CECB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D2CECCC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CED04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_18D2CED18(uint64_t a1)
{
  if (a1 < 0)
    sub_18D0788A0();
  return operator new(2 * a1);
}

_QWORD *sub_18D2CED48(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2CED88(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CEDD8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_18D2CEE08(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2CEE48(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CEE98(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_18D2CEED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *result;

  v14 = (_QWORD *)operator new();
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 8);
  *v14 = &off_1E25CCBE8;
  v14[1] = v16;
  *(_QWORD *)(v15 + 8) = 0;
  v17 = operator new();
  v18 = *(_DWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)v17 = &off_1E25CD1B0;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_DWORD *)(v17 + 40) = v18;
  *(_DWORD *)(v17 + 44) = a5;
  *(_DWORD *)(v17 + 48) = a6;
  *(_BYTE *)(v17 + 52) = a7;
  *(_QWORD *)(a4 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &off_1E25CCCD8;
  result[1] = v17;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(a4 + 8) = v17;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_18D2CEFE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_18D2CF00C(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            sub_18D2CF0A4();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void sub_18D2CF0A4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CF0DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D2CF0F0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CF128(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2CF13C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E25CCCA8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E25CCC78;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_18D2CF19C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E25CCCA8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E25CCC78;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x18D78B5D4);
}

unsigned int *sub_18D2CF20C(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return sub_18D2CF3C0(result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *sub_18D2CF2C0(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return sub_18D2CF3C0(result, a3);
  }
  return result;
}

_QWORD *sub_18D2CF2F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E25CCCA8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E25CCC78;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_18D2CF350(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E25CCCA8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E25CCC78;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x18D78B5D4);
}

unsigned int *sub_18D2CF3C0(unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_18D2CF414()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CF428(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_18D2CF43C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E25CCCA8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E25CCC78;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_18D2CF49C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E25CCCA8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E25CCC78;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2CF50C(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_18D2CF518(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void sub_18D2CF540()
{
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CF554(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_18D2CF568()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D78B19C](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18D2CF5A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_18D2CF5B4(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  char *v15;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  char *v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  int v34;

  v3 = a2;
  if (a2 != a3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_DWORD *)(a1 + 28);
    v9 = (unsigned __int8 *)(a2 + 1);
    v8 = *a2;
    if (a2 + 1 != a3 || v8 != 36)
    {
      if ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0)
      {
        sub_18D2CC2D0(a1, (char)v8);
        goto LABEL_32;
      }
      if (v9 == (unsigned __int8 *)a3 || v8 != 92)
      {
        if (v8 == 46)
        {
          v18 = (_QWORD *)operator new();
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(v19 + 8);
          *v18 = &off_1E25CCB88;
          v18[1] = v20;
          *(_QWORD *)(v19 + 8) = v18;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          goto LABEL_32;
        }
      }
      else
      {
        v17 = (char)*v9;
        if ((v17 - 36) <= 0x3A && ((1 << (v17 - 36)) & 0x580000000000441) != 0)
        {
          sub_18D2CC2D0(a1, (char)v17);
          v9 = (unsigned __int8 *)(v3 + 2);
          goto LABEL_32;
        }
      }
    }
    v10 = sub_18D2CB0D4(a1, a2, a3);
    v11 = v10;
    if (v10 == v3 && v10 != a3)
    {
      if (v9 == (unsigned __int8 *)a3 || *v3 != 92)
        return v3;
      v12 = *v9;
      if (v12 == 40)
      {
        v13 = (uint64_t)(v3 + 2);
        sub_18D2CBD1C(a1);
        v14 = *(_DWORD *)(a1 + 28);
        do
        {
          v15 = (char *)v13;
          v13 = sub_18D2CF5B4(a1, v13, a3);
        }
        while ((char *)v13 != v15);
        if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41)
          sub_18D2C9DB8();
        v11 = v15 + 2;
        sub_18D2CBD8C(a1, v14);
      }
      else
      {
        v21 = sub_18D2CFA00(a1, v12);
        v22 = 2;
        if (!v21)
          v22 = 0;
        v11 = &v3[v22];
      }
    }
    v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_32:
      if (v9 == (unsigned __int8 *)a3)
        return a3;
      v23 = *(_DWORD *)(a1 + 28) + 1;
      v24 = *v9;
      if (v24 == 42)
      {
        sub_18D2CEED0(a1, 0, -1, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == (unsigned __int8 *)a3 || v24 != 92 || v9[1] != 123)
        return (char *)v9;
      v34 = 0;
      v25 = sub_18D2CF00C(v9 + 2, (unsigned __int8 *)a3, &v34);
      if (v25 == v9 + 2)
LABEL_48:
        sub_18D2CF0A4();
      if (v25 != (unsigned __int8 *)a3)
      {
        v26 = (char *)(v25 + 1);
        v27 = *v25;
        if (v27 == 44)
        {
          v33 = -1;
          v28 = sub_18D2CF00C(v25 + 1, (unsigned __int8 *)a3, &v33);
          if (v28 != (unsigned __int8 *)a3 && v28 + 1 != (unsigned __int8 *)a3 && *v28 == 92 && v28[1] == 125)
          {
            v30 = v33;
            v29 = v34;
            if (v33 == -1)
            {
              v30 = -1;
            }
            else if (v33 < v34)
            {
              goto LABEL_48;
            }
            v3 = (char *)&v28[2 * (v28[1] == 125)];
            v31 = a1;
LABEL_56:
            sub_18D2CEED0(v31, v29, v30, v6, v7 + 1, v23, 1);
            return v3;
          }
        }
        else if (v26 != a3 && v27 == 92 && *v26 == 125)
        {
          v3 = (char *)(v25 + 2);
          v29 = v34;
          v31 = a1;
          v30 = v34;
          goto LABEL_56;
        }
      }
      sub_18D2CF0F0();
    }
  }
  return v3;
}

_QWORD *sub_18D2CF930(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25CCC78;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18D2CF970(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E25CCC78;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2CF9C0(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_18D2CFA00(uint64_t a1, unsigned __int8 a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
    sub_18D2CC444();
  sub_18D2CC490(a1, a2 - 48);
  return 1;
}

unsigned __int8 *sub_18D2CFA5C(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = sub_18D2CFAB8(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    sub_18D2CF568();
  do
  {
    v7 = v6;
    v6 = sub_18D2CFAB8(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *sub_18D2CFAB8(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  signed __int8 v13;
  char *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  int v26;
  char *v27;
  char *v28;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = sub_18D2CB0D4(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = *a2;
  v10 = (v8 - 36);
  if (v10 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      sub_18D2CC2D0(a1, (char)v9);
LABEL_33:
      v11 = (unsigned __int8 *)(a2 + 1);
      return sub_18D2C997C(a1, v11, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v11 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1E25CCB88;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return sub_18D2C997C(a1, v11, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    goto LABEL_24;
  }
  v12 = (char)*v11;
  v13 = *v11;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    sub_18D2CC2D0(a1, v13);
    v11 = (unsigned __int8 *)(a2 + 2);
    return sub_18D2C997C(a1, v11, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = sub_18D2CE32C(a1, a2 + 1, a3, 0);
  }
  else
  {
    v15 = sub_18D2CFA00(a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
    v9 = *a2;
    goto LABEL_22;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
    goto LABEL_37;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E25CCE20;
      goto LABEL_32;
    case '(':
      sub_18D2CBD1C(a1);
      v26 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)sub_18D2C8F8C(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        sub_18D2C9DB8();
      sub_18D2CBD8C(a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = v28 + 1;
LABEL_37:
      v11 = (unsigned __int8 *)v14;
      if (v14 != a2)
        return sub_18D2C997C(a1, v11, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E25CCDC0;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

BOOL sub_18D2CFDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v6 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v6 + 8);
  v9 = a2 + 32;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(v9 + 8);
  v10 = v8 == v7 && v5 == v4;
  if (v5 != v4 && v8 != v7)
    return *(_QWORD *)a1 == *(_QWORD *)a2
        && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
        && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && sub_18D2D1B10(v4, v7) == 0;
  return v10;
}

uint64_t sub_18D2CFE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  __int128 *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  int v20;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  *(_QWORD *)(a4 + 24) = a3;
  v11 = (__int128 *)(a4 + 24);
  *(_QWORD *)(a4 + 32) = a3;
  *(_BYTE *)(a4 + 40) = 0;
  sub_18D2CA7D8((char **)a4, (v10 + 1), (__int128 *)(a4 + 24));
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = a2;
  *(_BYTE *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 72) = *v11;
  *(_BYTE *)(a4 + 88) = *(_BYTE *)(a4 + 40);
  if ((v9 & 0x800) == 0)
    *(_QWORD *)(a4 + 104) = a2;
  *(_BYTE *)(a4 + 96) = 1;
  if (!sub_18D2D0348(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0)
      goto LABEL_18;
    v18 = v9 | 0x80;
    v19 = a2 + 1;
    if (v19 != a3)
    {
      do
      {
        sub_18D2CA7D8((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
        v20 = sub_18D2D0348(a1, v19, a3, (uint64_t *)a4, v18, 0);
        v13 = *(char **)a4;
        v12 = *(char **)(a4 + 8);
        if (v20)
          goto LABEL_8;
        sub_18D2CA7D8((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3), v11);
      }
      while (++v19 != a3);
    }
    sub_18D2CA7D8((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
    if (!sub_18D2D0348(a1, a3, a3, (uint64_t *)a4, v18, 0))
    {
LABEL_18:
      result = 0;
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      return result;
    }
  }
  v13 = *(char **)a4;
  v12 = *(char **)(a4 + 8);
LABEL_8:
  if (v12 == v13)
    v14 = (uint64_t *)v11;
  else
    v14 = (uint64_t *)v13;
  v15 = *v14;
  *(_QWORD *)(a4 + 56) = *v14;
  *(_BYTE *)(a4 + 64) = *(_QWORD *)(a4 + 48) != v15;
  v16 = v14[1];
  *(_QWORD *)(a4 + 72) = v16;
  *(_BYTE *)(a4 + 88) = v16 != *(_QWORD *)(a4 + 80);
  return 1;
}

void sub_18D2D004C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  char v5;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v5 = a5;
  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v13 = *(char **)a1;
  v12 = *(char **)(a1 + 8);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*(_QWORD *)a1] >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    v22 = *(char **)(a1 + 8);
    if (v11 >= v14)
      goto LABEL_24;
    v22 = &v13[8 * ((a4[1] - *a4) >> 3)];
    goto LABEL_20;
  }
  v16 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3) >= v15)
  {
    v22 = &v12[24 * v15];
    v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v12[-*(_QWORD *)a1] >> 3);
    do
    {
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      v12[16] = 0;
      v12 += 24;
      v27 -= 24;
    }
    while (v27);
LABEL_20:
    *(_QWORD *)(a1 + 8) = v22;
    goto LABEL_24;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL)
    sub_18D07AFE4();
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3);
  v18 = 0x5555555555555556 * ((v16 - (uint64_t)v13) >> 3);
  if (v18 <= v11)
    v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  if (v17 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v18;
  if (v19 > 0xAAAAAAAAAAAAAAALL)
    sub_18D0788A0();
  v20 = (char *)operator new(24 * v19);
  v21 = &v20[24 * v14];
  v22 = &v20[24 * v11];
  v23 = v21;
  v24 = 24 * v11 - 24 * v14;
  do
  {
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24;
  }
  while (v24);
  v25 = &v20[24 * v19];
  if (v12 == v13)
  {
    v5 = a5;
  }
  else
  {
    v5 = a5;
    do
    {
      v26 = *(_OWORD *)(v12 - 24);
      *((_QWORD *)v21 - 1) = *((_QWORD *)v12 - 1);
      *(_OWORD *)(v21 - 24) = v26;
      v21 -= 24;
      v12 -= 24;
    }
    while (v12 != v13);
    v12 = v13;
  }
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 16) = v25;
  if (v12)
  {
    operator delete(v12);
    v22 = *(char **)(a1 + 8);
  }
LABEL_24:
  v28 = *(char **)a1;
  if (v22 != *(char **)a1)
  {
    v29 = 0;
    v30 = 0;
    v32 = *a4;
    v31 = a4[1];
    do
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3);
      v34 = (_QWORD *)(v32 + v29);
      if (v33 <= v30)
        v35 = a4 + 3;
      else
        v35 = v34;
      *(_QWORD *)&v28[v29] = a2 + *v35 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v30)
        v36 = a4 + 3;
      else
        v36 = (uint64_t *)(*a4 + v29);
      *(_QWORD *)(*(_QWORD *)a1 + v29 + 8) = a2 + v36[1] - v10;
      v32 = *a4;
      v31 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v31 - *a4) >> 3) <= v30)
        v37 = a4 + 3;
      else
        v37 = (uint64_t *)(*a4 + v29);
      v38 = *((_BYTE *)v37 + 16);
      v28 = *(char **)a1;
      v39 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v29 + 16) = v38;
      ++v30;
      v29 += 24;
    }
    while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v28) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v40 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v40;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((v5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v40;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t sub_18D2D0348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void **v13;
  char *v14;
  unsigned int v15;
  _DWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  int64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  int64_t v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v71;
  void *v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  BOOL v98;
  char v99;
  BOOL v100;
  uint64_t v101;
  char *v102;
  void **v103;
  _BYTE *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  char *i;
  char *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  void *v127;
  char *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  char *v152;
  char *v153;
  int64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char v159;
  char *v160;
  char v161;
  uint64_t v163;
  __int16 v164;
  char *v165;
  void *v166[2];
  __int128 v167;
  int64x2_t v168;
  _BYTE v169[56];
  void *__p[2];
  _QWORD v171[4];
  __int128 v172;
  char v173;

  v7 = a5;
  v9 = a3;
  v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return sub_18D2CA3F8(a1, a2, a3, a4, a5, a6);
  v165 = (char *)(a3 - a2);
  v164 = a5;
  if (*(_DWORD *)(a1 + 28))
  {
    v166[0] = 0;
    v166[1] = 0;
    *(_QWORD *)&v167 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      *(_QWORD *)&v172 = a3;
      *((_QWORD *)&v172 + 1) = a3;
      v173 = 0;
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0u;
      memset(v171, 0, 21);
      v166[1] = sub_18D2CACE8((int64x2_t *)v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v150 = a4;
      v13 = (void **)v166[1];
      *((_DWORD *)v166[1] - 24) = 0;
      *(v13 - 11) = (void *)v10;
      *(v13 - 10) = (void *)v10;
      *(v13 - 9) = (void *)v9;
      sub_18D2CA9D4(v13 - 8, *(unsigned int *)(a1 + 28), &v172);
      sub_18D2CAB4C((char **)v166[1] - 5, *(unsigned int *)(a1 + 32));
      v152 = 0;
      v153 = 0;
      v155 = 0;
      v156 = 0;
      v149 = 0;
      v157 = 0;
      v14 = 0;
      v159 = 0;
      v15 = 0;
      v16 = v166[1];
      *((_QWORD *)v166[1] - 2) = v12;
      *(v16 - 2) = v7;
      *((_BYTE *)v16 - 4) = a6;
      do
      {
        v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v165;
        if (!v17)
          sub_18D2CAC50();
        v19 = v16 - 4;
        v18 = *((_QWORD *)v16 - 2);
        v20 = v16 - 24;
        if (v18)
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v18 + 16))(v18, v16 - 24);
        switch(*(_DWORD *)v20)
        {
          case 0xFFFFFC18:
            v21 = *((_QWORD *)v16 - 10);
            if ((v164 & 0x20) != 0 && v21 == v10 || (v164 & 0x1000) != 0 && v21 != a3)
              goto LABEL_21;
            if ((v159 & ((uint64_t)v14 >= v21 - *((_QWORD *)v16 - 11))) == 0)
            {
              v160 = (char *)(v21 - *((_QWORD *)v16 - 11));
              v29 = (__int128 *)*((_QWORD *)v16 - 8);
              v28 = (__int128 *)*((_QWORD *)v16 - 7);
              v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v29) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v155 - (uint64_t)v157) >> 3) >= v30)
              {
                v35 = v153;
                v37 = (uint64_t)v149;
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - v157) >> 3) >= v30)
                {
                  v38 = v152;
                  if (v29 == v28)
                  {
                    v47 = v157;
                  }
                  else
                  {
                    v46 = v157;
                    v47 = v157;
                    do
                    {
                      *(_OWORD *)v46 = *v29;
                      v46[16] = *((_BYTE *)v29 + 16);
                      v47 += 24;
                      v29 = (__int128 *)((char *)v29 + 24);
                      v46 += 24;
                    }
                    while (v29 != v28);
                  }
                  v45 = v47 - v157;
                  v35 = v157;
                }
                else
                {
                  v40 = (__int128 *)((char *)v29 + 8 * ((v153 - v157) >> 3));
                  v38 = v152;
                  if (v153 != v157)
                  {
                    v41 = v157;
                    do
                    {
                      *(_OWORD *)v41 = *v29;
                      v41[16] = *((_BYTE *)v29 + 16);
                      v29 = (__int128 *)((char *)v29 + 24);
                      v41 += 24;
                    }
                    while (v29 != v40);
                  }
                  v42 = v153;
                  if (v40 != v28)
                  {
                    v43 = v153;
                    do
                    {
                      v44 = *v40;
                      *((_QWORD *)v43 + 2) = *((_QWORD *)v40 + 2);
                      *(_OWORD *)v43 = v44;
                      v43 += 24;
                      v40 = (__int128 *)((char *)v40 + 24);
                      v42 += 24;
                    }
                    while (v40 != v28);
                  }
                  v45 = v42 - v153;
                }
              }
              else
              {
                if (v157)
                {
                  operator delete(v157);
                  v155 = 0;
                }
                if (v30 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_214;
                v31 = 0x5555555555555556 * (v155 >> 3);
                if (v31 <= v30)
                  v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v29) >> 3);
                v32 = 0xAAAAAAAAAAAAAAABLL * (v155 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v31;
                if (v32 > 0xAAAAAAAAAAAAAAALL)
LABEL_214:
                  sub_18D07AFE4();
                v33 = (char *)sub_18D263FF4(v32);
                v35 = v33;
                v36 = v33;
                if (v29 == v28)
                {
                  v37 = (uint64_t)v149;
                  v38 = v152;
                }
                else
                {
                  v37 = (uint64_t)v149;
                  v38 = v152;
                  do
                  {
                    v39 = *v29;
                    *((_QWORD *)v36 + 2) = *((_QWORD *)v29 + 2);
                    *(_OWORD *)v36 = v39;
                    v36 += 24;
                    v29 = (__int128 *)((char *)v29 + 24);
                  }
                  while (v29 != v28);
                }
                v155 = (uint64_t)&v33[24 * v34];
                v45 = v36 - v33;
                v157 = v33;
              }
              v49 = (char *)*((_QWORD *)v16 - 5);
              v48 = (char *)*((_QWORD *)v16 - 4);
              v50 = (v48 - v49) >> 4;
              if (v50 <= (v37 - (uint64_t)v156) >> 4)
              {
                v58 = (v38 - v156) >> 4;
                if (v58 >= v50)
                {
                  if (v49 == v48)
                  {
                    v66 = v156;
                    v14 = v160;
                  }
                  else
                  {
                    v65 = v156;
                    v66 = v156;
                    v14 = v160;
                    do
                    {
                      *(_QWORD *)v65 = *(_QWORD *)v49;
                      *((_QWORD *)v65 + 1) = *((_QWORD *)v49 + 1);
                      v66 += 16;
                      v49 += 16;
                      v65 += 16;
                    }
                    while (v49 != v48);
                  }
                  v64 = v66 - v156;
                  v38 = v156;
                }
                else
                {
                  v59 = &v49[16 * v58];
                  if (v38 != v156)
                  {
                    v60 = v156;
                    do
                    {
                      *(_QWORD *)v60 = *(_QWORD *)v49;
                      *((_QWORD *)v60 + 1) = *((_QWORD *)v49 + 1);
                      v49 += 16;
                      v60 += 16;
                    }
                    while (v49 != v59);
                  }
                  v14 = v160;
                  v61 = v38;
                  if (v59 != v48)
                  {
                    v62 = v38;
                    do
                    {
                      v63 = *(_OWORD *)v59;
                      v59 += 16;
                      *(_OWORD *)v62 = v63;
                      v62 += 16;
                      v61 += 16;
                    }
                    while (v59 != v48);
                  }
                  v64 = v61 - v38;
                }
              }
              else
              {
                v154 = v45;
                v51 = v35;
                if (v156)
                {
                  operator delete(v156);
                  v37 = 0;
                }
                if (v48 - v49 < 0)
                  goto LABEL_213;
                v52 = v37 >> 3;
                if (v37 >> 3 <= v50)
                  v52 = (v48 - v49) >> 4;
                v53 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v52;
                if (v53 >> 60)
LABEL_213:
                  sub_18D07AFE4();
                v54 = (char *)sub_18D264038(v53);
                v56 = v54;
                while (v49 != v48)
                {
                  v57 = *(_OWORD *)v49;
                  v49 += 16;
                  *(_OWORD *)v56 = v57;
                  v56 += 16;
                }
                v38 = v54;
                v149 = &v54[16 * v55];
                v64 = v56 - v54;
                v156 = v54;
                v35 = v51;
                v14 = v160;
                v45 = v154;
              }
              v152 = &v38[v64];
              v153 = &v35[v45];
            }
            v67 = v166[1];
            if (v14 == v165)
            {
              v68 = v166[0];
              while (v67 != v68)
              {
                v67 -= 12;
                sub_18D2CAEAC(v67);
              }
              v166[1] = v68;
              v159 = 1;
              v14 = v165;
            }
            else
            {
              v69 = (char *)v166[1] - 96;
              sub_18D2CAEAC((_QWORD *)v166[1] - 12);
              v166[1] = v69;
              v159 = 1;
            }
            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_21:
            v22 = (char *)v166[1] - 96;
            sub_18D2CAEAC((_QWORD *)v166[1] - 12);
            v166[1] = v22;
            break;
          case 0xFFFFFC20:
            v23 = *((_OWORD *)v16 - 5);
            *(_OWORD *)v169 = *v20;
            *(_OWORD *)&v169[16] = v23;
            memset(&v169[32], 0, 24);
            sub_18D2CAF3C(&v169[32], *((__int128 **)v16 - 8), *((__int128 **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v16 - 7) - *((_QWORD *)v16 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            sub_18D2CAFB8((char *)__p, *((__int128 **)v16 - 5), *((__int128 **)v16 - 4), (uint64_t)(*((_QWORD *)v16 - 4) - *((_QWORD *)v16 - 5)) >> 4);
            v24 = *v19;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)((char *)v16 - 11);
            v171[1] = v24;
            (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v19 + 24))(*v19, 1, v16 - 24);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            v25 = (char *)v166[1];
            if (v166[1] >= (void *)v167)
            {
              v166[1] = sub_18D2CACE8((int64x2_t *)v166, (uint64_t)v169);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              v26 = *(_OWORD *)&v169[16];
              *(_OWORD *)v166[1] = *(_OWORD *)v169;
              *((_OWORD *)v25 + 1) = v26;
              *((_QWORD *)v25 + 4) = 0;
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = 0;
              *((_OWORD *)v25 + 2) = *(_OWORD *)&v169[32];
              *((_QWORD *)v25 + 6) = *(_QWORD *)&v169[48];
              memset(&v169[32], 0, 24);
              *((_QWORD *)v25 + 8) = 0;
              *((_QWORD *)v25 + 9) = 0;
              *(_OWORD *)(v25 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v25 + 9) = v171[0];
              __p[0] = 0;
              __p[1] = 0;
              v171[0] = 0;
              v27 = v171[1];
              *(_QWORD *)(v25 + 85) = *(_QWORD *)((char *)&v171[1] + 5);
              *((_QWORD *)v25 + 10) = v27;
              v166[1] = v25 + 96;
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            break;
          default:
            sub_18D2CAC9C();
        }
        v16 = v166[1];
      }
      while (v166[0] != v166[1]);
      LOBYTE(v12) = v159;
      if ((v159 & 1) != 0)
      {
        v71 = *v150;
        *(_QWORD *)v71 = v10;
        *(_QWORD *)(v71 + 8) = &v14[v10];
        *(_BYTE *)(v71 + 16) = 1;
        v72 = v157;
        if (v153 != v157)
        {
          v73 = v157 + 16;
          v74 = 1;
          do
          {
            v75 = v71 + 24 * v74;
            *(_OWORD *)v75 = *((_OWORD *)v73 - 1);
            v76 = *v73;
            v73 += 24;
            *(_BYTE *)(v75 + 16) = v76;
            v17 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v157) >> 3) > v74++;
          }
          while (v17);
        }
      }
      else
      {
        v72 = v157;
      }
      if (v156)
        operator delete(v156);
      if (v72)
        operator delete(v72);
    }
    *(_QWORD *)v169 = v166;
    sub_18D2CB064((void ***)v169);
  }
  else
  {
    v167 = 0u;
    v168 = 0u;
    *(_OWORD *)v166 = 0u;
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0uLL;
      memset(v171, 0, 21);
      sub_18D2D144C(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v151 = a4;
      v77 = v166[1];
      v78 = v168.i64[1] + v168.i64[0] - 1;
      v79 = v78 / 0x2A;
      v80 = *((_QWORD *)v166[1] + v78 / 0x2A);
      v81 = 3 * (v78 % 0x2A);
      v82 = v80 + 32 * v81;
      *(_DWORD *)v82 = 0;
      *(_QWORD *)(v82 + 8) = v10;
      *(_QWORD *)(v77[v79] + 32 * v81 + 16) = v10;
      *(_QWORD *)(v77[v79] + 32 * v81 + 24) = v9;
      sub_18D2CAB4C((char **)(v77[v79] + 32 * v81 + 56), *(unsigned int *)(a1 + 32));
      v161 = 0;
      v83 = 0;
      v158 = 0;
      v84 = v168.i64[1];
      v85 = v166[1];
      v86 = v168.i64[1] + v168.i64[0] - 1;
      v87 = v86 / 0x2A;
      v88 = 3 * (v86 % 0x2A);
      *(_QWORD *)(*((_QWORD *)v166[1] + v87) + 32 * v88 + 80) = v12;
      v89 = v85[v87] + 32 * v88;
      *(_DWORD *)(v89 + 88) = v7;
      *(_BYTE *)(v89 + 92) = a6;
      while (2)
      {
        if ((++v83 & 0xFFF) == 0 && (int)(v83 >> 12) >= (int)v165)
          sub_18D2CAC50();
        v91 = v84 + v168.i64[0] - 1;
        v92 = *((_QWORD *)v166[1] + v91 / 0x2A);
        v93 = v91 % 0x2A;
        v94 = v92 + 96 * (v91 % 0x2A);
        v96 = (_QWORD *)(v94 + 80);
        v95 = *(_QWORD *)(v94 + 80);
        if (v95)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v95 + 16))(v95, v92 + 96 * v93);
        switch(*(_DWORD *)v94)
        {
          case 0xFFFFFC18:
            v97 = *(_QWORD *)(v92 + 96 * v93 + 16);
            v98 = (v7 & 0x1000) == 0 || v97 == v9;
            v99 = v98;
            v100 = v97 != v10 || (v7 & 0x20) == 0;
            if (!v100 || (v99 & 1) == 0)
              goto LABEL_198;
            v101 = v97 - *(_QWORD *)(v92 + 96 * v93 + 8);
            v102 = v158;
            if ((v161 & ((uint64_t)v158 >= v101)) == 0)
              v102 = (char *)v101;
            if (v102 != v165)
            {
              v158 = v102;
              sub_18D2D18EC(v166);
              v161 = 1;
              goto LABEL_199;
            }
            v103 = (void **)v166[1];
            v104 = (_BYTE *)v167;
            if ((void *)v167 == v166[1])
            {
              v104 = v166[1];
            }
            else
            {
              v105 = v10;
              v106 = (char *)v166[1] + 8 * (v168.i64[0] / 0x2AuLL);
              v107 = (_QWORD *)(*v106 + 96 * (v168.i64[0] % 0x2AuLL));
              v108 = *((_QWORD *)v166[1] + (v168.i64[1] + v168.i64[0]) / 0x2AuLL)
                   + 96 * ((v168.i64[1] + v168.i64[0]) % 0x2AuLL);
              if (v107 != (_QWORD *)v108)
              {
                do
                {
                  sub_18D2CAEAC(v107);
                  v107 += 12;
                  if ((_QWORD *)((char *)v107 - *v106) == (_QWORD *)4032)
                  {
                    v109 = (_QWORD *)v106[1];
                    ++v106;
                    v107 = v109;
                  }
                }
                while (v107 != (_QWORD *)v108);
                v103 = (void **)v166[1];
                v104 = (_BYTE *)v167;
              }
              v10 = v105;
            }
            v168.i64[1] = 0;
            v139 = v104 - (_BYTE *)v103;
            if (v139 >= 0x11)
            {
              do
              {
                operator delete(*v103);
                v103 = (void **)((char *)v166[1] + 8);
                v166[1] = v103;
                v139 = v167 - (_QWORD)v103;
              }
              while ((_QWORD)v167 - (_QWORD)v103 > 0x10uLL);
            }
            if (v139 >> 3 == 1)
            {
              v140 = 21;
            }
            else
            {
              if (v139 >> 3 != 2)
                goto LABEL_186;
              v140 = 42;
            }
            v168.i64[0] = v140;
LABEL_186:
            v161 = 1;
            v158 = v165;
LABEL_199:
            v84 = v168.i64[1];
            if (v168.i64[1])
              continue;
            if ((v161 & 1) != 0)
            {
              v148 = *v151;
              *(_QWORD *)v148 = v10;
              *(_QWORD *)(v148 + 8) = &v158[v10];
              LOBYTE(v12) = 1;
              *(_BYTE *)(v148 + 16) = 1;
            }
            else
            {
              LOBYTE(v12) = 0;
            }
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_199;
          case 0xFFFFFC1D:
            v110 = v168.i64[0];
            v111 = (char *)v166[1];
            v112 = (char *)v167;
            if (!v168.i64[0])
            {
              v115 = (uint64_t)(v167 - (unint64_t)v166[1]) >> 3;
              v116 = 42 * v115 - 1;
              if ((void *)v167 == v166[1])
                v116 = 0;
              if ((unint64_t)(v116 - v168.i64[1]) < 0x2A)
              {
                if (v115 >= (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 3)
                {
                  if (*((void **)&v167 + 1) == v166[0])
                    v117 = 1;
                  else
                    v117 = (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 2;
                  *(_QWORD *)&v169[32] = (char *)&v167 + 8;
                  *(_QWORD *)v169 = sub_18D07BF3C(v117);
                  *(_QWORD *)&v169[8] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[16] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[24] = *(_QWORD *)v169 + 8 * v118;
                  v163 = v10;
                  *(_QWORD *)&v172 = operator new(0xFC0uLL);
                  sub_18D189050(v169, &v172);
                  v119 = (uint64_t *)v166[1];
                  for (i = *(char **)&v169[16]; v119 != (uint64_t *)v167; *(_QWORD *)&v169[16] += 8)
                  {
                    if (i == *(char **)&v169[24])
                    {
                      v121 = *(char **)&v169[8];
                      v122 = *(void **)v169;
                      if (*(_QWORD *)&v169[8] <= *(_QWORD *)v169)
                      {
                        if (i == *(char **)v169)
                          v129 = 1;
                        else
                          v129 = (uint64_t)&i[-*(_QWORD *)v169] >> 2;
                        v130 = (char *)sub_18D07BF3C(v129);
                        v132 = i - v121;
                        v98 = i == v121;
                        i = &v130[8 * (v129 >> 2)];
                        if (!v98)
                        {
                          i = &v130[8 * (v129 >> 2) + (v132 & 0xFFFFFFFFFFFFFFF8)];
                          v133 = 8 * (v132 >> 3);
                          v134 = &v130[8 * (v129 >> 2)];
                          do
                          {
                            v135 = *(_QWORD *)v121;
                            v121 += 8;
                            *(_QWORD *)v134 = v135;
                            v134 += 8;
                            v133 -= 8;
                          }
                          while (v133);
                        }
                        *(_QWORD *)v169 = v130;
                        *(_QWORD *)&v169[8] = &v130[8 * (v129 >> 2)];
                        *(_QWORD *)&v169[16] = i;
                        *(_QWORD *)&v169[24] = &v130[8 * v131];
                        if (v122)
                          operator delete(v122);
                      }
                      else
                      {
                        v123 = (uint64_t)(*(_QWORD *)&v169[8] - *(_QWORD *)v169) >> 3;
                        if (v123 >= -1)
                          v124 = v123 + 1;
                        else
                          v124 = v123 + 2;
                        v125 = *(_QWORD *)&v169[8] - 8 * (v124 >> 1);
                        v126 = (size_t)&i[-*(_QWORD *)&v169[8]];
                        if (i != *(char **)&v169[8])
                        {
                          v127 = (void *)(*(_QWORD *)&v169[8] - 8 * (v124 >> 1));
                          memmove(v127, *(const void **)&v169[8], v126);
                          v125 = (uint64_t)v127;
                          i = v121;
                        }
                        v128 = &i[-8 * (v124 >> 1)];
                        i = (char *)(v125 + v126);
                        *(_QWORD *)&v169[8] = v128;
                        *(_QWORD *)&v169[16] = v125 + v126;
                      }
                    }
                    v136 = *v119++;
                    *(_QWORD *)i = v136;
                    i = (char *)(*(_QWORD *)&v169[16] + 8);
                  }
                  v137 = v166[0];
                  *(_OWORD *)v166 = *(_OWORD *)v169;
                  *(_QWORD *)&v167 = i;
                  *((_QWORD *)&v167 + 1) = *(_QWORD *)&v169[24];
                  v138 = 21;
                  if (&i[-*(_QWORD *)&v169[8]] != (char *)8)
                    v138 = v168.i64[0] + 42;
                  v168.i64[0] = v138;
                  v10 = v163;
                  if (v137)
                    operator delete(v137);
                  LOWORD(v7) = v164;
                  v9 = a3;
                }
                else
                {
                  if (v166[1] == v166[0])
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                    sub_18D189050(v166, v169);
                    *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                    *(_QWORD *)&v167 = v167 - 8;
                  }
                  else
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                  }
                  sub_18D188F3C((uint64_t)v166, v169);
                  v141 = 21;
                  if ((_QWORD)v167 - (unint64_t)v166[1] != 8)
                    v141 = v168.i64[0] + 42;
                  v168.i64[0] = v141;
                }
              }
              else
              {
                v168.i64[0] = 42;
                *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                *(_QWORD *)&v167 = v167 - 8;
                sub_18D188F3C((uint64_t)v166, v169);
              }
              v110 = v168.i64[0];
              v111 = (char *)v166[1];
              v112 = (char *)v167;
            }
            v142 = &v111[8 * (v110 / 0x2A)];
            v143 = *(_QWORD *)v142 + 96 * (v110 % 0x2A);
            if (v112 == v111)
              v144 = 0;
            else
              v144 = v143;
            if (v144 == *(_QWORD *)v142)
              v144 = *((_QWORD *)v142 - 1) + 4032;
            v145 = *(_OWORD *)(v94 + 16);
            *(_OWORD *)(v144 - 96) = *(_OWORD *)v94;
            *(_OWORD *)(v144 - 80) = v145;
            v146 = v92 + 96 * v93;
            *(_QWORD *)(v144 - 56) = 0;
            *(_QWORD *)(v144 - 48) = 0;
            *(_QWORD *)(v144 - 64) = 0;
            *(_OWORD *)(v144 - 64) = *(_OWORD *)(v146 + 32);
            *(_QWORD *)(v144 - 48) = *(_QWORD *)(v146 + 48);
            *(_QWORD *)(v146 + 32) = 0;
            *(_QWORD *)(v146 + 40) = 0;
            *(_QWORD *)(v146 + 48) = 0;
            *(_QWORD *)(v144 - 40) = 0;
            *(_QWORD *)(v144 - 32) = 0;
            *(_QWORD *)(v144 - 24) = 0;
            *(_OWORD *)(v144 - 40) = *(_OWORD *)(v146 + 56);
            *(_QWORD *)(v144 - 24) = *(_QWORD *)(v146 + 72);
            *(_QWORD *)(v146 + 56) = 0;
            *(_QWORD *)(v146 + 64) = 0;
            *(_QWORD *)(v146 + 72) = 0;
            v147 = *v96;
            *(_QWORD *)(v144 - 11) = *(_QWORD *)(v94 + 85);
            *(_QWORD *)(v144 - 16) = v147;
            v168 = vaddq_s64(v168, (int64x2_t)xmmword_18D318280);
            goto LABEL_198;
          case 0xFFFFFC1F:
LABEL_198:
            sub_18D2D18EC(v166);
            goto LABEL_199;
          case 0xFFFFFC20:
            v113 = *(_OWORD *)(v94 + 16);
            *(_OWORD *)v169 = *(_OWORD *)v94;
            *(_OWORD *)&v169[16] = v113;
            memset(&v169[32], 0, 24);
            sub_18D2CAF3C(&v169[32], *(__int128 **)(v92 + 96 * v93 + 32), *(__int128 **)(v92 + 96 * v93 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v92 + 96 * v93 + 40) - *(_QWORD *)(v92 + 96 * v93 + 32)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            sub_18D2CAFB8((char *)__p, *(__int128 **)(v92 + 96 * v93 + 56), *(__int128 **)(v92 + 96 * v93 + 64), (uint64_t)(*(_QWORD *)(v92 + 96 * v93 + 64) - *(_QWORD *)(v92 + 96 * v93 + 56)) >> 4);
            v114 = *v96;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)(v94 + 85);
            v171[1] = v114;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v96 + 24))(*v96, 1, v94);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            sub_18D2D144C(v166, (uint64_t)v169);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            goto LABEL_199;
          default:
            sub_18D2CAC9C();
        }
        break;
      }
    }
    sub_18D2D1998((uint64_t)v166);
  }
  return v12 & 1;
}

void sub_18D2D1318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  operator delete(v37);
  if (__p)
    operator delete(__p);
  sub_18D2D1998((uint64_t)&a23);
  _Unwind_Resume(a1);
}

__n128 sub_18D2D144C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  __int128 v64;
  __n128 result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  _QWORD *v87;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 42 * v6 - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v6 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        v83 = (char *)sub_18D07BF3C(v25);
        v84 = &v83[8 * v6];
        v85 = v84;
        v86 = &v83[8 * v26];
        v82 = operator new(0xFC0uLL);
        sub_18D189050(&v83, &v82);
        v28 = v83;
        v27 = v84;
        v29 = v85;
        v30 = v86;
        v31 = a1[2];
        if (v31 == a1[1])
        {
          v47 = v84;
        }
        else
        {
          do
          {
            if (v27 == v28)
            {
              if (v29 >= v30)
              {
                if (v30 == v27)
                  v37 = 1;
                else
                  v37 = (v30 - v27) >> 2;
                v38 = (char *)sub_18D07BF3C(v37);
                v28 = v38;
                v32 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
                v41 = v29 - v27;
                v40 = v29 == v27;
                v29 = v32;
                if (!v40)
                {
                  v29 = &v32[v41 & 0xFFFFFFFFFFFFFFF8];
                  v42 = 8 * (v41 >> 3);
                  v43 = v32;
                  v44 = v27;
                  do
                  {
                    v45 = *(_QWORD *)v44;
                    v44 += 8;
                    *(_QWORD *)v43 = v45;
                    v43 += 8;
                    v42 -= 8;
                  }
                  while (v42);
                }
                v30 = &v38[8 * v39];
                if (v27)
                  operator delete(v27);
              }
              else
              {
                v33 = (v30 - v29) >> 3;
                if (v33 >= -1)
                  v34 = v33 + 1;
                else
                  v34 = v33 + 2;
                v35 = v34 >> 1;
                v32 = &v27[8 * (v34 >> 1)];
                v36 = v27;
                if (v29 != v27)
                {
                  memmove(v32, v27, v29 - v27);
                  v36 = v29;
                }
                v29 = &v36[8 * v35];
                v28 = v27;
              }
            }
            else
            {
              v32 = v27;
            }
            v46 = *(_QWORD *)(v31 - 8);
            v31 -= 8;
            *((_QWORD *)v32 - 1) = v46;
            v47 = v32 - 8;
            v27 = v47;
          }
          while (v31 != a1[1]);
        }
        v62 = (char *)*a1;
        *a1 = v28;
        a1[1] = v47;
        a1[2] = v29;
        a1[3] = v30;
        if (v62)
          operator delete(v62);
        goto LABEL_54;
      }
      if (v23 != v5)
      {
        v83 = (char *)operator new(0xFC0uLL);
        sub_18D189050(a1, &v83);
LABEL_54:
        v4 = (char *)a1[1];
        v9 = a1[5] + a1[4];
        goto LABEL_55;
      }
      v83 = (char *)operator new(0xFC0uLL);
      sub_18D188F3C((uint64_t)a1, &v83);
      v59 = (_QWORD *)a1[1];
      v5 = (char *)a1[2];
      v61 = *v59;
      v60 = (char *)(v59 + 1);
      v11 = v61;
      a1[1] = v60;
      if (v5 == (char *)a1[3])
      {
        v67 = (uint64_t)&v60[-*a1];
        if ((unint64_t)v60 > *a1)
        {
          v68 = v67 >> 3;
          v15 = v67 >> 3 < -1;
          v69 = (v67 >> 3) + 2;
          if (v15)
            v70 = v69;
          else
            v70 = v68 + 1;
          v71 = -(v70 >> 1);
          v72 = v70 >> 1;
          v73 = &v60[-8 * v72];
          v74 = v5 - v60;
          if (v5 != v60)
          {
            memmove(&v60[-8 * v72], v60, v5 - v60);
            v60 = (char *)a1[1];
          }
          v5 = &v73[v74];
          v22 = &v60[8 * v71];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1)
          v75 = 1;
        else
          v75 = (uint64_t)&v5[-*a1] >> 2;
        v49 = (char *)sub_18D07BF3C(v75);
        v50 = &v49[8 * (v75 >> 2)];
        v52 = &v49[8 * v76];
        v77 = (uint64_t *)a1[1];
        v5 = v50;
        v78 = a1[2] - (_QWORD)v77;
        if (v78)
        {
          v5 = &v50[v78 & 0xFFFFFFFFFFFFFFF8];
          v79 = 8 * (v78 >> 3);
          v80 = &v49[8 * (v75 >> 2)];
          do
          {
            v81 = *v77++;
            *(_QWORD *)v80 = v81;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
LABEL_47:
        v58 = (char *)*a1;
        *a1 = v49;
        a1[1] = v50;
        a1[2] = v5;
        a1[3] = v52;
        if (v58)
        {
          operator delete(v58);
          v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 42;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_50;
        }
        if (v5 == (char *)*a1)
          v48 = 1;
        else
          v48 = (uint64_t)&v5[-*a1] >> 2;
        v49 = (char *)sub_18D07BF3C(v48);
        v50 = &v49[8 * (v48 >> 2)];
        v52 = &v49[8 * v51];
        v53 = (uint64_t *)a1[1];
        v5 = v50;
        v54 = a1[2] - (_QWORD)v53;
        if (v54)
        {
          v5 = &v50[v54 & 0xFFFFFFFFFFFFFFF8];
          v55 = 8 * (v54 >> 3);
          v56 = &v49[8 * (v48 >> 2)];
          do
          {
            v57 = *v53++;
            *(_QWORD *)v56 = v57;
            v56 += 8;
            v55 -= 8;
          }
          while (v55);
        }
        goto LABEL_47;
      }
    }
LABEL_50:
    *(_QWORD *)v5 = v11;
    a1[2] += 8;
    goto LABEL_54;
  }
LABEL_55:
  v63 = *(_QWORD *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  v64 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v63 = *(_OWORD *)a2;
  *(_OWORD *)(v63 + 16) = v64;
  *(_QWORD *)(v63 + 40) = 0;
  *(_QWORD *)(v63 + 48) = 0;
  *(_QWORD *)(v63 + 32) = 0;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v63 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v63 + 56) = 0;
  *(_QWORD *)(v63 + 64) = 0;
  *(_QWORD *)(v63 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v63 + 56) = result;
  *(_QWORD *)(v63 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v66 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v63 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v63 + 80) = v66;
  ++a1[5];
  return result;
}

void sub_18D2D18BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  operator delete(v10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_18D2D18EC(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  sub_18D2CAEAC((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A)) + 96 * (v2 % 0x2A)));
  v3 = a1[2];
  v4 = v3 == a1[1];
  v5 = 42 * ((v3 - a1[1]) >> 3) - 1;
  v7 = a1[4];
  v6 = a1[5];
  a1[5] = v6 - 1;
  if (v4)
    v5 = 0;
  if ((unint64_t)(v5 - (v6 + v7) - 83) <= 0xFFFFFFFFFFFFFFABLL)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t sub_18D2D1998(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_18D2CAEAC(v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18D2D1B10(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    sub_18D2CDCB0(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    sub_18D2CDCB0(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_18D2D1C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t swan::FixedLagSmoother::Initialize(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unsigned int a5, double a6, double a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = 102;
  do
  {
    v14 = a1 + v12;
    *(_OWORD *)(v14 + 8) = xmmword_18D314680;
    *(_OWORD *)(v14 + 336) = xmmword_18D319950;
    *(_OWORD *)(a1 + v12 + 424) = xmmword_18D314680;
    *(_OWORD *)(v14 + 752) = xmmword_18D314680;
    sub_18D04BE88(a1 + v12, 0.0);
    sub_18D04BE88(a1 + v12 + 328, 0.0);
    sub_18D04BE88(a1 + v12 + 416, 0.0);
    sub_18D04BE88(a1 + v12 + 744, 0.0);
    *(_QWORD *)(v14 + 1072) = 0;
    *(_BYTE *)(v14 + 1080) = 0;
    *(_QWORD *)(v14 + 1088) = 0x7FF0000000000000;
    *(_BYTE *)(v14 + 1096) = 0;
    v12 += 1104;
    *(_DWORD *)(v14 + 1100) = 0;
    --v13;
  }
  while (v13);
  sub_18D053AA8(a1 + 328, a3);
  sub_18D053AA8(a1 + 416, a4);
  sub_18D053AA8(a1 + 744, a1 + 416);
  *(double *)(a1 + 1072) = a6;
  *(_BYTE *)(a1 + 1080) = a2;
  if (a5 >= 0x64)
    v15 = 100;
  else
    v15 = a5;
  *(_DWORD *)(a1 + 1100) = v15;
  *(double *)(a1 + 1088) = a7;
  sub_18D04BE88(a1, 0.0);
  sub_18D04BE88(a1 + 113272, 0.0);
  sub_18D04BE88(a1 + 112616, 0.0);
  *(_BYTE *)(a1 + 1096) = 1;
  sub_18D053AA8(a1 + 1104, a1);
  sub_18D053AA8(a1 + 1432, a1 + 328);
  sub_18D053AA8(a1 + 1520, a1 + 416);
  sub_18D053AA8(a1 + 1848, a1 + 744);
  *(_OWORD *)(a1 + 2176) = *(_OWORD *)(a1 + 1072);
  *(_OWORD *)(a1 + 2192) = *(_OWORD *)(a1 + 1088);
  *(_BYTE *)(a1 + 112608) = 1;
  return 0;
}

uint64_t swan::FixedLagSmoother::Update(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, double a6, double a7, double a8)
{
  unsigned __int8 v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  double v23;
  int v24;
  int v25;
  int v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  float64x2_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t *v49;
  int v50;
  int v51;
  int i;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _BYTE *v58;
  int v59;
  int v60;
  int j;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  double v66;
  uint64_t result;
  uint64_t v68;
  unint64_t k;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE v88[288];
  void *v89;
  __int128 v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE v93[288];
  void *v94;
  __int128 v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE v98[288];
  void *v99;
  __int128 v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE v103[288];
  void *v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD v108[36];
  void *v109;
  __int128 v110;
  uint64_t v111;
  _BYTE *v112;
  _BYTE v113[288];
  void *v114;
  __int128 v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD v118[5];
  void *v119;
  __int128 v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  void *v124;
  __int128 v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  void (**v129)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v130;
  void *v131;
  __int128 v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  void *v136;
  __int128 v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  void *v141;
  __int128 v142;
  uint64_t v143;
  double *v144;
  uint64_t v145;
  char v146[24];
  float64x2_t v147;
  double v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v14 = atomic_load((unsigned __int8 *)&qword_1ECF24588);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24588))
  {
    sub_18D2D2E10();
    __cxa_atexit((void (*)(void *))sub_18D161D38, &qword_1ECF24598, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24588);
  }
  v15 = atomic_load((unsigned __int8 *)&qword_1ECF24590);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24590))
  {
    sub_18D1CD9AC((uint64_t)&qword_1ECF24598, (uint64_t)&unk_1ECF246E0);
    __cxa_atexit((void (*)(void *))sub_18D161D38, &unk_1ECF246E0, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24590);
  }
  v143 = 0x600000006;
  v141 = &unk_1E25C81B0;
  v144 = (double *)&v145;
  v142 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v141, 0.0);
  v138 = 0x600000006;
  v136 = &unk_1E25C81B0;
  v139 = &v140;
  v137 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v136, 0.0);
  v16 = 0;
  v17 = HIDWORD(v137);
  v18 = HIDWORD(v137) + 1;
  v19 = 6;
  v20 = v139;
  do
  {
    v20[v16] = 0x3FF0000000000000;
    v16 += v18;
    --v19;
  }
  while (v19);
  *(double *)&v21 = a6 - *(double *)(a1 + 2176);
  v20[3 * v17] = v21;
  v20[(4 * v17) | 1] = v21;
  v20[5 * v17 + 2] = v21;
  v22 = *(double *)&v21 * *(double *)&v21;
  v23 = fabs(*(double *)&v21 * 0.5);
  v24 = HIDWORD(v142);
  v25 = 3 * HIDWORD(v142);
  v26 = 3 * HIDWORD(v142) + 3;
  v27 = v144;
  v28 = a7 * a7 * v22;
  v144[v26] = v28;
  v29 = v28 * v23;
  v27[v25] = v29;
  v27[3] = v29;
  v30 = v23 * v27[v25];
  *v27 = v30;
  v27[v24 + 1] = v30;
  v27[4 * v24 + 4] = v27[v26];
  v27[(4 * v24) | 1] = v27[v25];
  v27[v24 + 4] = v27[3];
  v31 = a8 * a8 * v22;
  v27[5 * v24 + 5] = v31;
  v32 = 5 * v24 + 2;
  v33 = v23 * v31;
  v27[v32] = v33;
  v24 *= 2;
  v27[v24 + 5] = v33;
  v27[v24 + 2] = v23 * v27[v32];
  v130 = 0;
  v133 = 0x300000003;
  v131 = &unk_1E25C78E0;
  v132 = xmmword_18D30BB60;
  v134 = &v135;
  v129 = &off_1E25B9560;
  v34 = *(float64x2_t **)(a1 + 1464);
  v147 = *v34;
  v148 = v34[1].f64[0];
  cnnavigation::ECEFToENU(&v147, 1, 0, &v147, 1, (uint64_t)v146, (uint64_t)&v129, v148);
  v126 = 0x300000003;
  v124 = &unk_1E25C78E0;
  v125 = xmmword_18D30BB60;
  v127 = &v128;
  if (v130)
    sub_18D053AA8((uint64_t)&v124, (uint64_t)&v131);
  v121 = 0x600000006;
  v119 = &unk_1E25C81B0;
  v122 = &v123;
  v120 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v119, 0.0);
  v35 = v127;
  v36 = v122;
  *v122 = *v127;
  v37 = SHIDWORD(v125);
  v38 = SHIDWORD(v120);
  v36[SHIDWORD(v120)] = v35[SHIDWORD(v125)];
  v36[2 * v38] = v35[2 * v37];
  v36[1] = v35[1];
  v39 = v37 + 1;
  v36[(int)v38 + 1] = v35[(int)v37 + 1];
  v40 = &v35[2 * (int)v37];
  v41 = &v36[2 * (int)v38];
  v41[1] = v40[1];
  v36[2] = v35[2];
  v42 = v37 + 2;
  v36[(int)v38 + 2] = v35[(int)v37 + 2];
  v41[2] = v40[2];
  LODWORD(v41) = 3 * v38;
  v36[(int)v41 + 3] = *v35;
  v36[(int)((4 * v38) | 3)] = v35[v37];
  v43 = v35[2 * v37];
  LODWORD(v37) = 5 * v38;
  v36[5 * (int)v38 + 3] = v43;
  v36[(int)v41 + 4] = v35[1];
  LODWORD(v38) = 4 * v38;
  v36[(int)v38 + 4] = v35[v39];
  v36[(int)v37 + 4] = v40[1];
  v36[(int)v41 + 5] = v35[2];
  v36[(int)v38 + 5] = v35[v42];
  v36[(int)v37 + 5] = v40[2];
  v44 = DWORD1(v120);
  v45 = v120;
  v106 = 0x600000006;
  v104 = &unk_1E25C81B0;
  v107 = v108;
  *(_QWORD *)&v105 = __PAIR64__(v120, DWORD1(v120));
  DWORD2(v105) = v120 * DWORD1(v120);
  HIDWORD(v105) = DWORD1(v120);
  if (DWORD1(v120))
  {
    v46 = 0;
    v47 = 0;
    v48 = HIDWORD(v120);
    v49 = v122;
    do
    {
      v50 = v46;
      v51 = v47;
      for (i = v45; i; --i)
      {
        v108[v51] = v49[v50];
        v51 += v44;
        ++v50;
      }
      ++v47;
      v46 += v48;
    }
    while (v47 != v44);
  }
  v111 = 0x600000006;
  v109 = &unk_1E25C81B0;
  v110 = xmmword_18D314680;
  v112 = v113;
  sub_18D053B2C((uint64_t)&v104, (uint64_t)&v141, (uint64_t)&v109);
  v116 = 0x600000006;
  v114 = &unk_1E25C81B0;
  v115 = xmmword_18D314680;
  v117 = v118;
  sub_18D053B2C((uint64_t)&v109, (uint64_t)&v119, (uint64_t)&v114);
  sub_18D053AA8(a1 + 112944, (uint64_t)&v114);
  v116 = 0x600000006;
  v114 = &unk_1E25C81B0;
  v115 = xmmword_18D314680;
  v117 = v118;
  sub_18D053B2C((uint64_t)&v136, a1 + 112616, (uint64_t)&v114);
  sub_18D053AA8(a1, (uint64_t)&v114);
  v106 = 0x600000006;
  v104 = &unk_1E25C81B0;
  v105 = xmmword_18D314680;
  v107 = v108;
  sub_18D053B2C(a1, (uint64_t)&qword_1ECF24598, (uint64_t)&v104);
  v111 = 0x600000006;
  v109 = &unk_1E25C81B0;
  v110 = xmmword_18D314680;
  v112 = v113;
  sub_18D0540FC((uint64_t)&v136, (uint64_t)&v104, (uint64_t)&v109);
  v53 = DWORD1(v110);
  v54 = v110;
  v116 = 0x600000006;
  v114 = &unk_1E25C81B0;
  v117 = v118;
  *(_QWORD *)&v115 = __PAIR64__(v110, DWORD1(v110));
  DWORD2(v115) = v110 * DWORD1(v110);
  HIDWORD(v115) = DWORD1(v110);
  if (DWORD1(v110))
  {
    v55 = 0;
    v56 = 0;
    v57 = HIDWORD(v110);
    v58 = v112;
    do
    {
      v59 = v55;
      v60 = v56;
      for (j = v54; j; --j)
      {
        v118[v60] = *(_QWORD *)&v58[8 * v59];
        v60 += v53;
        ++v59;
      }
      ++v56;
      v55 += v57;
    }
    while (v56 != v53);
  }
  v74 = a1 + 1104;
  v62 = a1 + 110816;
  v63 = -101;
  v64 = xmmword_18D314680;
  do
  {
    if (*(_BYTE *)(v62 + 680))
    {
      v111 = 0x600000006;
      v109 = &unk_1E25C81B0;
      v110 = v64;
      v112 = v113;
      sub_18D053B2C(v62, (uint64_t)&v114, (uint64_t)&v109);
      sub_18D053AA8(v62 + 1104, (uint64_t)&v109);
      v64 = xmmword_18D314680;
    }
    v62 -= 1104;
  }
  while (!__CFADD__(v63++, 1));
  v106 = 0x100000006;
  v104 = &unk_1E25C8120;
  v105 = xmmword_18D319950;
  v107 = v108;
  sub_18D053B2C((uint64_t)&v136, a1 + 328, (uint64_t)&v104);
  v101 = 0x100000006;
  v99 = &unk_1E25C8120;
  v100 = xmmword_18D319950;
  v102 = v103;
  v78 = a1 + 113272;
  sub_18D053B2C(a1, a1 + 113272, (uint64_t)&v99);
  v111 = 0x100000006;
  v109 = &unk_1E25C8120;
  v110 = xmmword_18D319950;
  v112 = v113;
  sub_18D053FA4((uint64_t)&v104, (uint64_t)&v99, (uint64_t)&v109);
  sub_18D053AA8(a1 + 328, (uint64_t)&v109);
  v101 = 0x600000006;
  v99 = &unk_1E25C81B0;
  v100 = xmmword_18D314680;
  v102 = v103;
  v75 = a1 + 416;
  sub_18D053B2C((uint64_t)&v136, a1 + 416, (uint64_t)&v99);
  v106 = 0x600000006;
  v104 = &unk_1E25C81B0;
  v105 = xmmword_18D314680;
  v107 = v108;
  sub_18D053B2C((uint64_t)&v99, (uint64_t)&v114, (uint64_t)&v104);
  v111 = 0x600000006;
  v109 = &unk_1E25C81B0;
  v110 = xmmword_18D314680;
  v112 = v113;
  sub_18D053FA4((uint64_t)&v104, a1 + 112944, (uint64_t)&v109);
  sub_18D053AA8(a1 + 416, (uint64_t)&v109);
  sub_18D053AA8(a1 + 744, a1 + 416);
  *(_BYTE *)(a1 + 1096) = 1;
  *(_DWORD *)(a1 + 1100) = a5;
  *(double *)(a1 + 1072) = a6;
  v101 = 0x600000006;
  v99 = &unk_1E25C81B0;
  v100 = xmmword_18D314680;
  v102 = v103;
  sub_18D053B2C((uint64_t)&qword_1ECF24598, a1 + 416, (uint64_t)&v99);
  v106 = 0x600000006;
  v104 = &unk_1E25C81B0;
  v105 = xmmword_18D314680;
  v107 = v108;
  sub_18D053B2C((uint64_t)&v99, (uint64_t)&unk_1ECF246E0, (uint64_t)&v104);
  v111 = 0x600000006;
  v109 = &unk_1E25C81B0;
  v110 = xmmword_18D314680;
  v112 = v113;
  sub_18D053FA4(a4, (uint64_t)&v104, (uint64_t)&v109);
  v101 = 0x600000006;
  v99 = &unk_1E25C81B0;
  v100 = xmmword_18D314680;
  v102 = v103;
  v91 = 0x100000006;
  v89 = &unk_1E25C8150;
  v90 = xmmword_18D319950;
  v92 = v93;
  v86 = 0x100000006;
  v84 = &unk_1E25C8150;
  v85 = xmmword_18D319950;
  v87 = v88;
  v96 = 0x100000018;
  v94 = &unk_1E25C7010;
  v95 = xmmword_18D319B80;
  v97 = v98;
  v66 = sub_18D054568((uint64_t)&v109, (uint64_t)&v89, (uint64_t)&v84, (uint64_t)&v94, (uint64_t)&v99);
  v106 = 0x600000006;
  v104 = &unk_1E25C81B0;
  v105 = xmmword_18D314680;
  v107 = v108;
  sub_18D053B2C((uint64_t)&unk_1ECF246E0, (uint64_t)&v99, (uint64_t)&v104);
  if (v66 > 100000000.0)
    return 0xFFFFFFFFLL;
  v101 = 0x600000006;
  v99 = &unk_1E25C81B0;
  v100 = xmmword_18D314680;
  v102 = v103;
  sub_18D053B2C(a1 + 416, (uint64_t)&v104, (uint64_t)&v99);
  sub_18D053AA8(a1 + 112616, (uint64_t)&v99);
  v96 = 0x100000006;
  v94 = &unk_1E25C8120;
  v95 = xmmword_18D319950;
  v97 = v98;
  sub_18D053B2C((uint64_t)&qword_1ECF24598, a1 + 328, (uint64_t)&v94);
  v101 = 0x100000006;
  v99 = &unk_1E25C8120;
  v100 = xmmword_18D319950;
  v102 = v103;
  sub_18D0540FC(a3, (uint64_t)&v94, (uint64_t)&v99);
  sub_18D053AA8(v78, (uint64_t)&v99);
  v68 = a1 + 110728;
  for (k = 101; k >= 2; --k)
  {
    if (*(_BYTE *)(v68 + 768))
    {
      *(_QWORD *)(v68 + 1848) = *(_QWORD *)(v68 + 744);
      *(_BYTE *)(v68 + 1856) = *(_BYTE *)(v68 + 752);
      *(_QWORD *)(v68 + 1864) = *(_QWORD *)(v68 + 760);
      *(_DWORD *)(v68 + 1876) = *(_DWORD *)(v68 + 772);
      v101 = 0x600000006;
      v99 = &unk_1E25C81B0;
      v100 = xmmword_18D314680;
      v102 = v103;
      sub_18D053B2C(v68 + 88, (uint64_t)&v104, (uint64_t)&v99);
      sub_18D053AA8(v68 + 776, (uint64_t)&v99);
      v91 = 0x600000006;
      v89 = &unk_1E25C81B0;
      v90 = xmmword_18D314680;
      v92 = v93;
      sub_18D053B2C(v68 + 88, (uint64_t)&unk_1ECF246E0, (uint64_t)&v89);
      v70 = *(_DWORD *)(v68 + 788);
      v71 = *(_DWORD *)(v68 + 784);
      v86 = 0x600000006;
      v84 = &unk_1E25C81B0;
      *(_QWORD *)&v85 = __PAIR64__(v71, v70);
      DWORD2(v85) = v71 * v70;
      HIDWORD(v85) = v70;
      v87 = v88;
      sub_18D073454(v68 + 776, (uint64_t)&v84);
      v96 = 0x600000006;
      v94 = &unk_1E25C81B0;
      v95 = xmmword_18D314680;
      v97 = v98;
      sub_18D053B2C((uint64_t)&v89, (uint64_t)&v84, (uint64_t)&v94);
      v101 = 0x600000006;
      v99 = &unk_1E25C81B0;
      v100 = xmmword_18D314680;
      v102 = v103;
      sub_18D0540FC(v68 + 416, (uint64_t)&v94, (uint64_t)&v99);
      sub_18D053AA8(v68 + 1520, (uint64_t)&v99);
      LOBYTE(v89) = 0;
      v81 = 0x600000006;
      v79 = &unk_1E25C81B0;
      v80 = xmmword_18D314680;
      v82 = &v83;
      sub_18D05C654(v68 + 1520, (uint64_t)&v79, (BOOL *)&v89);
      v79 = &unk_1E25C5E70;
      if (!(_BYTE)v89)
        return 0xFFFFFFFFLL;
      v96 = 0x100000006;
      v94 = &unk_1E25C8120;
      v95 = xmmword_18D319950;
      v97 = v98;
      sub_18D053B2C(v68 + 776, v78, (uint64_t)&v94);
      v101 = 0x100000006;
      v99 = &unk_1E25C8120;
      v100 = xmmword_18D319950;
      v102 = v103;
      sub_18D053FA4(v68, (uint64_t)&v94, (uint64_t)&v99);
      sub_18D053AA8(v68 + 1104, (uint64_t)&v99);
      *(_BYTE *)(v68 + 1872) = 1;
    }
    v68 -= 1104;
  }
  *(double *)(a1 + 2176) = a6;
  *(_BYTE *)(a1 + 2184) = a2;
  *(double *)(a1 + 2192) = a7;
  *(_DWORD *)(a1 + 2204) = a5;
  v101 = 0x600000006;
  v99 = &unk_1E25C81B0;
  v100 = xmmword_18D314680;
  v102 = v103;
  sub_18D053B2C(v75, (uint64_t)&v104, (uint64_t)&v99);
  sub_18D053AA8(v74, (uint64_t)&v99);
  v91 = 0x600000006;
  v89 = &unk_1E25C81B0;
  v90 = xmmword_18D314680;
  v92 = v93;
  sub_18D053B2C(v75, (uint64_t)&unk_1ECF246E0, (uint64_t)&v89);
  v72 = *(_DWORD *)(a1 + 1116);
  v73 = *(_DWORD *)(a1 + 1112);
  v86 = 0x600000006;
  v84 = &unk_1E25C81B0;
  *(_QWORD *)&v85 = __PAIR64__(v73, v72);
  DWORD2(v85) = v73 * v72;
  HIDWORD(v85) = v72;
  v87 = v88;
  sub_18D073454(v74, (uint64_t)&v84);
  v96 = 0x600000006;
  v94 = &unk_1E25C81B0;
  v95 = xmmword_18D314680;
  v97 = v98;
  sub_18D053B2C((uint64_t)&v89, (uint64_t)&v84, (uint64_t)&v94);
  v101 = 0x600000006;
  v99 = &unk_1E25C81B0;
  v100 = xmmword_18D314680;
  v102 = v103;
  sub_18D0540FC(a1 + 744, (uint64_t)&v94, (uint64_t)&v99);
  sub_18D053AA8(a1 + 1848, (uint64_t)&v99);
  v96 = 0x100000006;
  v94 = &unk_1E25C8120;
  v95 = xmmword_18D319950;
  v97 = v98;
  sub_18D053B2C(v74, v78, (uint64_t)&v94);
  v101 = 0x100000006;
  v99 = &unk_1E25C8120;
  v100 = xmmword_18D319950;
  v102 = v103;
  sub_18D053FA4(a1 + 328, (uint64_t)&v94, (uint64_t)&v99);
  sub_18D053AA8(a1 + 1432, (uint64_t)&v99);
  result = 0;
  *(_BYTE *)(a1 + 2200) = 1;
  return result;
}

void sub_18D2D2D88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF24590);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2D2E10()
{
  uint64_t result;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  qword_1ECF245B0 = 0x600000006;
  qword_1ECF24598 = (uint64_t)&unk_1E25C81B0;
  qword_1ECF245B8 = (uint64_t)&unk_1ECF245C0;
  unk_1ECF245A0 = xmmword_18D314680;
  result = sub_18D04BE88((uint64_t)&qword_1ECF24598, 0.0);
  v1 = 0;
  v2 = dword_1ECF245AC + 1;
  v3 = qword_1ECF245B8;
  v4 = 6;
  do
  {
    *(_QWORD *)(v3 + 8 * v1) = 0x3FF0000000000000;
    v1 += v2;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t swan::FixedLagSmoother::ExtractOutput(uint64_t a1, char **a2, unint64_t *a3, char **a4, _QWORD *a5, _QWORD *a6, int a7)
{
  uint64_t v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void (**v16)(_QWORD);
  uint64_t v17;
  void (***v18)(_QWORD);
  void (***v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  char v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t i;
  void (***v72)(_QWORD);
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t j;
  void (***v87)(_QWORD);
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char **v96;
  uint64_t v98;
  char *v99;
  _BYTE v100[24];
  _QWORD *v101;

  v13 = (void (***)(_QWORD))*a5;
  v12 = a5[1];
  if (v12 != *a5)
  {
    v14 = (void (***)(_QWORD))(v12 - 88);
    v15 = (void (***)(_QWORD))(v12 - 88);
    do
    {
      v16 = *v15;
      v15 -= 11;
      (*v16)(v14);
      v23 = v14 == v13;
      v14 = v15;
    }
    while (!v23);
  }
  a5[1] = v13;
  v18 = (void (***)(_QWORD))*a6;
  v17 = a6[1];
  if (v17 != *a6)
  {
    v19 = (void (***)(_QWORD))(v17 - 328);
    do
    {
      (**v19)(v19);
      v23 = v19 == v18;
      v19 -= 41;
    }
    while (!v23);
  }
  a6[1] = v18;
  a4[1] = *a4;
  a2[1] = *a2;
  v92 = (uint64_t)(a4 + 2);
  v20 = 102;
  v21 = 101;
  v22 = a3;
  a3[1] = *a3;
  v96 = a4;
  while (1)
  {
    v98 = a1 + 1104 * v21;
    if (*(_BYTE *)(v98 + 1096))
      break;
LABEL_97:
    v20 = v21--;
    if (!v21)
      return 0;
  }
  v23 = v20 - 2 < (unint64_t)*(unsigned int *)(a1 + 1104 * v21 + 1100) && a7 == 0;
  if (!v23)
  {
    v24 = (_QWORD *)(a1 + 1104 * v21 + 1072);
    v26 = a2[1];
    v25 = (unint64_t)a2[2];
    if ((unint64_t)v26 >= v25)
    {
      v28 = *a2;
      v29 = (v26 - *a2) >> 3;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61)
        sub_18D07AFE4();
      v31 = v25 - (_QWORD)v28;
      if (v31 >> 2 > v30)
        v30 = v31 >> 2;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v33 = (char *)sub_18D0788C8((uint64_t)(a2 + 2), v32);
        v28 = *a2;
        v26 = a2[1];
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[8 * v29];
      *(_QWORD *)v34 = *v24;
      v27 = v34 + 8;
      while (v26 != v28)
      {
        v35 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *((_QWORD *)v34 - 1) = v35;
        v34 -= 8;
      }
      *a2 = v34;
      a2[1] = v27;
      a2[2] = &v33[8 * v32];
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_QWORD *)v26 = *v24;
      v27 = v26 + 8;
    }
    a2[1] = v27;
    v36 = (_BYTE *)(a1 + 1104 * v21 + 1080);
    v38 = (_BYTE *)v22[1];
    v37 = v22[2];
    if ((unint64_t)v38 >= v37)
    {
      v40 = *v22;
      v41 = &v38[-*v22];
      v42 = (unint64_t)(v41 + 1);
      if ((uint64_t)(v41 + 1) < 0)
        sub_18D07AFE4();
      v43 = v37 - v40;
      if (2 * v43 > v42)
        v42 = 2 * v43;
      if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
        v44 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
        v45 = (char *)operator new(v44);
      else
        v45 = 0;
      v46 = &v41[(_QWORD)v45];
      v41[(_QWORD)v45] = *v36;
      v39 = (uint64_t)&v41[(_QWORD)v45 + 1];
      if (v38 == (_BYTE *)v40)
      {
        v22 = a3;
      }
      else
      {
        v47 = &v38[~v40];
        v22 = a3;
        do
        {
          v48 = *--v38;
          (v47--)[(_QWORD)v45] = v48;
        }
        while (v38 != (_BYTE *)v40);
        v46 = v45;
      }
      *v22 = (unint64_t)v46;
      v22[1] = v39;
      v22[2] = (unint64_t)&v45[v44];
      if (v40)
        operator delete((void *)v40);
      a4 = v96;
    }
    else
    {
      *v38 = *v36;
      v39 = (uint64_t)(v38 + 1);
    }
    v22[1] = v39;
    v49 = (_QWORD *)(a1 + 1104 * v21 + 1088);
    v51 = a4[1];
    v50 = (unint64_t)a4[2];
    if ((unint64_t)v51 >= v50)
    {
      v53 = *a4;
      v54 = (v51 - *a4) >> 3;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 61)
        sub_18D07AFE4();
      v56 = v50 - (_QWORD)v53;
      if (v56 >> 2 > v55)
        v55 = v56 >> 2;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        v58 = (char *)sub_18D0788C8(v92, v57);
        v53 = *a4;
        v51 = a4[1];
      }
      else
      {
        v58 = 0;
      }
      v59 = &v58[8 * v54];
      *(_QWORD *)v59 = *v49;
      v52 = v59 + 8;
      while (v51 != v53)
      {
        v60 = *((_QWORD *)v51 - 1);
        v51 -= 8;
        *((_QWORD *)v59 - 1) = v60;
        v59 -= 8;
      }
      *a4 = v59;
      a4[1] = v52;
      a4[2] = &v58[8 * v57];
      if (v53)
        operator delete(v53);
    }
    else
    {
      *(_QWORD *)v51 = *v49;
      v52 = v51 + 8;
    }
    a4[1] = v52;
    v62 = a5[1];
    v61 = a5[2];
    if (v62 >= v61)
    {
      v64 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v62 - *a5) >> 3);
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) > 0x2E8BA2E8BA2E8BALL)
        sub_18D07AFE4();
      v66 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v61 - *a5) >> 3);
      if (2 * v66 > v65)
        v65 = 2 * v66;
      if (v66 >= 0x1745D1745D1745DLL)
        v67 = 0x2E8BA2E8BA2E8BALL;
      else
        v67 = v65;
      v101 = a5 + 2;
      if (v67)
        v68 = (char *)sub_18D2D36B0((uint64_t)(a5 + 2), v67);
      else
        v68 = 0;
      v99 = v68;
      *(_QWORD *)v100 = &v68[88 * v64];
      *(_QWORD *)&v100[8] = *(_QWORD *)v100;
      *(_QWORD *)&v100[16] = &v68[88 * v67];
      sub_18D2D357C(*(uint64_t *)v100, a1 + 1104 * v21 + 328);
      v69 = 0;
      v70 = *(_QWORD *)v100;
      *(_QWORD *)&v100[8] += 88;
      v72 = (void (***)(_QWORD))*a5;
      for (i = a5[1]; (void (***)(_QWORD))(i + v69) != v72; sub_18D2D357C(v69 + v70, v69 + i))
        v69 -= 88;
      v73 = a5[2];
      v74 = *(_OWORD *)&v100[8];
      v93 = *(_QWORD *)&v100[8];
      v75 = *(_OWORD *)a5;
      *a5 = v70 + v69;
      *(_OWORD *)v100 = v75;
      *(_OWORD *)(a5 + 1) = v74;
      *(_QWORD *)&v100[16] = v73;
      v99 = (char *)v75;
      sub_18D2D36F8((uint64_t)&v99);
      v63 = v93;
      v22 = a3;
    }
    else
    {
      sub_18D2D357C(a5[1], a1 + 1104 * v21 + 328);
      v63 = v62 + 88;
      a5[1] = v62 + 88;
    }
    a5[1] = v63;
    v77 = a6[1];
    v76 = a6[2];
    if (v77 >= v76)
    {
      v79 = 0x8F9C18F9C18F9C19 * ((uint64_t)(v77 - *a6) >> 3);
      v80 = v79 + 1;
      if (v79 + 1 > 0xC7CE0C7CE0C7CELL)
        sub_18D07AFE4();
      v81 = 0x8F9C18F9C18F9C19 * ((uint64_t)(v76 - *a6) >> 3);
      if (2 * v81 > v80)
        v80 = 2 * v81;
      if (v81 >= 0x63E7063E7063E7)
        v82 = 0xC7CE0C7CE0C7CELL;
      else
        v82 = v80;
      v101 = a6 + 2;
      a4 = v96;
      if (v82)
        v83 = (char *)sub_18D2D3748((uint64_t)(a6 + 2), v82);
      else
        v83 = 0;
      v99 = v83;
      *(_QWORD *)v100 = &v83[328 * v79];
      *(_QWORD *)&v100[8] = *(_QWORD *)v100;
      *(_QWORD *)&v100[16] = &v83[328 * v82];
      sub_18D05C524(*(uint64_t *)v100, a1 + 1104 * v21 + 744);
      v84 = 0;
      v85 = *(_QWORD *)v100;
      *(_QWORD *)&v100[8] += 328;
      v87 = (void (***)(_QWORD))*a6;
      for (j = a6[1]; (void (***)(_QWORD))(j + v84) != v87; sub_18D05C524(v84 + v85, v84 + j))
        v84 -= 328;
      v88 = a6[2];
      v89 = *(_OWORD *)&v100[8];
      v94 = *(_QWORD *)&v100[8];
      v90 = *(_OWORD *)a6;
      *a6 = v85 + v84;
      *(_OWORD *)v100 = v90;
      *(_OWORD *)(a6 + 1) = v89;
      *(_QWORD *)&v100[16] = v88;
      v99 = (char *)v90;
      sub_18D2D3790((uint64_t)&v99);
      v78 = v94;
      v22 = a3;
    }
    else
    {
      sub_18D05C524(a6[1], a1 + 1104 * v21 + 744);
      v78 = v77 + 328;
      a6[1] = v77 + 328;
      a4 = v96;
    }
    a6[1] = v78;
    *(_BYTE *)(v98 + 1096) = 0;
    goto LABEL_97;
  }
  return 0;
}

void sub_18D2D34E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_18D2D3790((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_18D2D357C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x100000006;
  *(_QWORD *)(a1 + 24) = 0x100000006;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C8120;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D2D369C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void *sub_18D2D36B0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_18D0788A0();
  return operator new(88 * a2);
}

uint64_t sub_18D2D36F8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 88);
    *(_QWORD *)(a1 + 16) = i - 88;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *sub_18D2D3748(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC7CE0C7CE0C7CFLL)
    sub_18D0788A0();
  return operator new(328 * a2);
}

uint64_t sub_18D2D3790(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 328;
    (**(void (***)(uint64_t))(i - 328))(i - 328);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t swan::RouteSmoother::ConfigureFromFile(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  if (sub_18D2BED48(a1, a2, 0))
    return (*(char *)(a1 + 296) - 1);
  else
    return 0xFFFFFFFFLL;
}

uint64_t swan::RouteSmoother::Configure(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t **v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  _QWORD *v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *i;
  uint64_t **v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t **v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  _QWORD *v42;
  _QWORD *v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t **v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t **v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t **v64;
  _QWORD *v65;
  _QWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t **v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;

  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v6 = *(_OWORD *)(a2 + 112);
  v5 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 96) = v7;
  v71 = a1;
  v72 = a2;
  if (a1 == a2)
    goto LABEL_119;
  v8 = (uint64_t **)(a1 + 152);
  v9 = *(_QWORD **)(a2 + 152);
  v10 = (_QWORD *)(v72 + 160);
  if (*(_QWORD *)(a1 + 168))
  {
    v12 = (uint64_t **)(a1 + 160);
    v11 = *(_QWORD *)(v71 + 160);
    v13 = *(_QWORD *)(v71 + 152);
    *(_QWORD *)(v71 + 152) = v71 + 160;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v71 + 160) = 0;
    *(_QWORD *)(v71 + 168) = 0;
    if (*(_QWORD *)(v13 + 8))
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = v13;
    if (!v14)
    {
      v24 = 0;
LABEL_32:
      sub_18D05B5E4(v24);
      goto LABEL_33;
    }
    v15 = sub_18D2D5AF8(v14);
    if (v9 == v10)
    {
      v17 = (_QWORD *)v14;
    }
    else
    {
      v16 = v9;
      do
      {
        v17 = v15;
        v18 = *((unsigned __int8 *)v16 + 28);
        *(_BYTE *)(v14 + 28) = v18;
        *(_DWORD *)(v14 + 32) = *((_DWORD *)v16 + 8);
        v19 = *v12;
        v20 = (uint64_t **)(v71 + 160);
        v21 = (uint64_t **)(v71 + 160);
        if (*v12)
        {
          do
          {
            while (1)
            {
              v20 = (uint64_t **)v19;
              if (v18 >= *((unsigned __int8 *)v19 + 28))
                break;
              v19 = (uint64_t *)*v19;
              v21 = v20;
              if (!*v20)
                goto LABEL_15;
            }
            v19 = (uint64_t *)v19[1];
          }
          while (v19);
          v21 = v20 + 1;
        }
LABEL_15:
        sub_18D185958(v8, (uint64_t)v20, v21, (uint64_t *)v14);
        if (v15)
          v15 = sub_18D2D5AF8((uint64_t)v15);
        else
          v15 = 0;
        v22 = (_QWORD *)v16[1];
        if (v22)
        {
          do
          {
            v9 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v16[2];
            v23 = *v9 == (_QWORD)v16;
            v16 = v9;
          }
          while (!v23);
        }
        if (!v17)
          break;
        v14 = (uint64_t)v17;
        v16 = v9;
      }
      while (v9 != v10);
    }
    sub_18D05B5E4(v17);
    if (v15)
    {
      for (i = (_QWORD *)v15[2]; i; i = (_QWORD *)i[2])
        v15 = i;
      v24 = v15;
      goto LABEL_32;
    }
  }
LABEL_33:
  if (v9 != v10)
  {
    v26 = (uint64_t **)(v71 + 160);
    do
    {
      v27 = *(_QWORD *)((char *)v9 + 28);
      v28 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v28 + 28) = v27;
      v29 = *v26;
      v30 = (uint64_t **)(v71 + 160);
      v31 = (uint64_t **)(v71 + 160);
      if (*v26)
      {
        do
        {
          while (1)
          {
            v30 = (uint64_t **)v29;
            if (*((unsigned __int8 *)v29 + 28) <= v27)
              break;
            v29 = (uint64_t *)*v29;
            v31 = v30;
            if (!*v30)
              goto LABEL_41;
          }
          v29 = (uint64_t *)v29[1];
        }
        while (v29);
        v31 = v30 + 1;
      }
LABEL_41:
      sub_18D185958(v8, (uint64_t)v30, v31, v28);
      v32 = (_QWORD *)v9[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v9[2];
          v23 = *v33 == (_QWORD)v9;
          v9 = v33;
        }
        while (!v23);
      }
      v9 = v33;
    }
    while (v33 != v10);
  }
  sub_18D2D5B4C((uint64_t **)(v71 + 176), *(_QWORD **)(v72 + 176), (_QWORD *)(v72 + 184));
  v34 = *(_QWORD **)(v72 + 200);
  v74 = (_QWORD *)(v72 + 208);
  if (*(_QWORD *)(v71 + 216))
  {
    v36 = (uint64_t **)(v71 + 208);
    v35 = *(_QWORD *)(v71 + 208);
    v37 = *(_QWORD **)(v71 + 200);
    *(_QWORD *)(v71 + 200) = v71 + 208;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v71 + 208) = 0;
    *(_QWORD *)(v71 + 216) = 0;
    if (v37[1])
      v38 = (_QWORD *)v37[1];
    else
      v38 = v37;
    v75 = v71 + 200;
    v76 = v38;
    v77 = v38;
    if (!v38 || (v76 = sub_18D2D5AF8((uint64_t)v38), v34 == v74))
    {
      v43 = v34;
    }
    else
    {
      do
      {
        *((_BYTE *)v38 + 32) = *((_BYTE *)v34 + 32);
        if (v38 != v34)
        {
          sub_18D2D5B4C((uint64_t **)v38 + 5, (_QWORD *)v34[5], v34 + 6);
          v38 = v77;
        }
        v39 = *v36;
        v40 = (uint64_t **)(v71 + 208);
        v41 = (uint64_t **)(v71 + 208);
        if (*v36)
        {
          do
          {
            while (1)
            {
              v40 = (uint64_t **)v39;
              if (*((unsigned __int8 *)v38 + 32) >= *((unsigned __int8 *)v39 + 32))
                break;
              v39 = (uint64_t *)*v39;
              v41 = v40;
              if (!*v40)
                goto LABEL_61;
            }
            v39 = (uint64_t *)v39[1];
          }
          while (v39);
          v41 = v40 + 1;
        }
LABEL_61:
        sub_18D185958((uint64_t **)(v71 + 200), (uint64_t)v40, v41, v38);
        v38 = v76;
        v77 = v76;
        if (v76)
          v76 = sub_18D2D5AF8((uint64_t)v76);
        v42 = (_QWORD *)v34[1];
        if (v42)
        {
          do
          {
            v43 = v42;
            v42 = (_QWORD *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (_QWORD *)v34[2];
            v23 = *v43 == (_QWORD)v34;
            v34 = v43;
          }
          while (!v23);
        }
        if (!v38)
          break;
        v34 = v43;
      }
      while (v43 != v74);
    }
    sub_18D2D5D90((uint64_t)&v75);
    v34 = v43;
  }
  if (v34 != v74)
  {
    v73 = (uint64_t **)(v71 + 208);
    while (1)
    {
      v44 = (char *)operator new(0x40uLL);
      v45 = (uint64_t *)v44;
      v44[32] = *((_BYTE *)v34 + 32);
      *((_QWORD *)v44 + 6) = 0;
      v46 = (uint64_t *)(v44 + 48);
      *((_QWORD *)v44 + 5) = v44 + 48;
      v47 = (uint64_t **)(v44 + 40);
      *((_QWORD *)v44 + 7) = 0;
      v48 = (_QWORD *)v34[5];
      if (v48 != v34 + 6)
        break;
LABEL_107:
      v62 = (uint64_t **)(v71 + 208);
      v63 = *v73;
      v64 = (uint64_t **)(v71 + 208);
      if (*v73)
      {
        do
        {
          while (1)
          {
            v64 = (uint64_t **)v63;
            if (*((unsigned __int8 *)v45 + 32) >= *((unsigned __int8 *)v63 + 32))
              break;
            v63 = (uint64_t *)*v63;
            v62 = v64;
            if (!*v64)
              goto LABEL_113;
          }
          v63 = (uint64_t *)v63[1];
        }
        while (v63);
        v62 = v64 + 1;
      }
LABEL_113:
      sub_18D185958((uint64_t **)(v71 + 200), (uint64_t)v64, v62, v45);
      v65 = (_QWORD *)v34[1];
      if (v65)
      {
        do
        {
          v66 = v65;
          v65 = (_QWORD *)*v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          v66 = (_QWORD *)v34[2];
          v23 = *v66 == (_QWORD)v34;
          v34 = v66;
        }
        while (!v23);
      }
      v34 = v66;
      if (v66 == v74)
        goto LABEL_119;
    }
    v49 = 0;
    v50 = (uint64_t *)(v44 + 48);
    while (1)
    {
      v51 = *((unsigned __int8 *)v48 + 32);
      v52 = v46;
      if (v50 == v46)
        goto LABEL_83;
      v53 = v49;
      v54 = v46;
      if (v49)
      {
        do
        {
          v52 = v53;
          v53 = (uint64_t *)v53[1];
        }
        while (v53);
      }
      else
      {
        do
        {
          v52 = (uint64_t *)v54[2];
          v23 = *v52 == (_QWORD)v54;
          v54 = v52;
        }
        while (v23);
      }
      if (*((unsigned __int8 *)v52 + 32) < v51)
      {
LABEL_83:
        if (v49)
          v55 = (uint64_t **)v52;
        else
          v55 = (uint64_t **)v46;
        if (v49)
          v56 = (uint64_t **)(v52 + 1);
        else
          v56 = (uint64_t **)v46;
        if (!*v56)
        {
LABEL_99:
          v59 = (uint64_t *)operator new(0x30uLL);
          *((_OWORD *)v59 + 2) = *((_OWORD *)v48 + 2);
          sub_18D185958(v47, (uint64_t)v55, v56, v59);
        }
      }
      else
      {
        v56 = (uint64_t **)v46;
        v55 = (uint64_t **)v46;
        if (!v49)
          goto LABEL_99;
        v57 = v49;
        while (1)
        {
          while (1)
          {
            v55 = (uint64_t **)v57;
            v58 = *((unsigned __int8 *)v57 + 32);
            if (v58 <= v51)
              break;
            v57 = *v55;
            v56 = v55;
            if (!*v55)
              goto LABEL_99;
          }
          if (v58 >= v51)
            break;
          v57 = v55[1];
          if (!v57)
          {
            v56 = v55 + 1;
            goto LABEL_99;
          }
        }
      }
      v60 = (_QWORD *)v48[1];
      if (v60)
      {
        do
        {
          v61 = v60;
          v60 = (_QWORD *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v61 = (_QWORD *)v48[2];
          v23 = *v61 == (_QWORD)v48;
          v48 = v61;
        }
        while (!v23);
      }
      if (v61 == v34 + 6)
        goto LABEL_107;
      v49 = (uint64_t *)*v46;
      v50 = *v47;
      v48 = v61;
    }
  }
LABEL_119:
  *(_OWORD *)(v71 + 224) = *(_OWORD *)(v72 + 224);
  v67 = *(_OWORD *)(v72 + 240);
  v68 = *(_OWORD *)(v72 + 256);
  v69 = *(_OWORD *)(v72 + 272);
  *(_OWORD *)(v71 + 281) = *(_OWORD *)(v72 + 281);
  *(_OWORD *)(v71 + 256) = v68;
  *(_OWORD *)(v71 + 272) = v69;
  *(_OWORD *)(v71 + 240) = v67;
  return 0;
}

void sub_18D2D3E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18D2D5D90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t swan::RouteSmoother::RunPlayback(uint64_t a1, void **a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t **v21;
  _BYTE *v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  void *__p[2];
  _OWORD v31[3];
  uint64_t v32;
  void *__dst[2];
  uint64_t v34;
  void *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  std::locale v38;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (*(char *)(a1 + 63) < 0)
  {
    sub_18D077798(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
    v34 = *(_QWORD *)(a1 + 56);
  }
  v32 = 0;
  *(_OWORD *)__p = 0u;
  memset(v31, 0, sizeof(v31));
  if (swan::BatchLogParser::parseRavenFixIntoRouteSmootherEpoch((uint64_t)__p, (uint64_t)__dst)
    && swan::BatchLogParser::parseCLRSFixIntoRouteSmootherEpoch((uint64_t)__p, (uint64_t)__dst))
  {
LABEL_6:
    v3 = 0xFFFFFFFFLL;
    goto LABEL_29;
  }
  sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Found ", 6);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = sub_18D076A18(v4, (uint64_t)" epochs to smooth", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v38, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v38);
  std::ostream::put();
  std::ostream::flush();
  std::chrono::steady_clock::now();
  v8 = (unsigned __int8 *)v35;
  v7 = v36;
  if (v35 != v36)
  {
    do
    {
      v9 = *(unsigned __int8 *)(a1 + 224);
      v10 = *(uint64_t **)(a1 + 208);
      v11 = (uint64_t **)(a1 + 208);
      v12 = (uint64_t **)(a1 + 208);
      if (v10)
      {
        while (1)
        {
          while (1)
          {
            v12 = (uint64_t **)v10;
            v13 = *((unsigned __int8 *)v10 + 32);
            if (v13 <= v9)
              break;
            v10 = *v12;
            v11 = v12;
            if (!*v12)
              goto LABEL_15;
          }
          if (v13 >= v9)
            break;
          v10 = v12[1];
          if (!v10)
          {
            v11 = v12 + 1;
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        v14 = operator new(0x40uLL);
        v14[32] = v9;
        *((_QWORD *)v14 + 7) = 0;
        *((_QWORD *)v14 + 6) = 0;
        *((_QWORD *)v14 + 5) = v14 + 48;
        sub_18D185958((uint64_t **)(a1 + 200), (uint64_t)v12, v11, (uint64_t *)v14);
        v12 = (uint64_t **)v14;
      }
      v17 = v12[6];
      v16 = v12 + 6;
      v15 = (uint64_t)v17;
      if (v17)
      {
        v18 = v8[104];
        while (1)
        {
          while (1)
          {
            v19 = v15;
            v20 = *(unsigned __int8 *)(v15 + 32);
            if (v20 <= v18)
              break;
            v15 = *(_QWORD *)v19;
            v21 = (uint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_25;
          }
          if (v20 >= v18)
            break;
          v15 = *(_QWORD *)(v19 + 8);
          if (!v15)
          {
            v21 = (uint64_t **)(v19 + 8);
            goto LABEL_25;
          }
        }
      }
      else
      {
        v21 = v16;
        v19 = (uint64_t)v16;
LABEL_25:
        v22 = operator new(0x30uLL);
        v22[32] = v8[104];
        *((_QWORD *)v22 + 5) = 0;
        sub_18D185958(v16 - 1, v19, v21, (uint64_t *)v22);
        v19 = (uint64_t)v22;
      }
      if (swan::RouteSmoother::Update(a1, (uint64_t)v8, (double *)(v19 + 40), (double *)(a1 + 232), a2))
        goto LABEL_6;
      v8 += 112;
    }
    while (v8 != v7);
  }
  v3 = swan::RouteSmoother::Finish(a1, a2);
  std::chrono::steady_clock::now();
  sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"Elapsed time in milliseconds for entire smoother Run(): ", 56);
  v23 = (_QWORD *)std::ostream::operator<<();
  v24 = sub_18D076A18(v23, (uint64_t)" ms", 3);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
  v25 = std::locale::use_facet(&v38, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v38);
  std::ostream::put();
  std::ostream::flush();
  sub_18D076A18(MEMORY[0x1E0DE4A60], (uint64_t)"retVal: ", 8);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
  v27 = std::locale::use_facet(&v38, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale(&v38);
  std::ostream::put();
  std::ostream::flush();
LABEL_29:
  sub_18D2C2EA8((_QWORD *)v31 + 1);
  if (SBYTE7(v31[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v34) < 0)
    operator delete(__dst[0]);
  if (v35)
  {
    v36 = (unsigned __int8 *)v35;
    operator delete(v35);
  }
  return v3;
}

void sub_18D2D4254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  sub_18D2BF5CC((uint64_t)&a11);
  if (a26 < 0)
    operator delete(__p);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t swan::RouteSmoother::Update(uint64_t a1, uint64_t a2, double *a3, double *a4, void **a5)
{
  double v10;
  _BYTE *v11;
  char v12;
  char v13;
  double v14;
  double v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 *v30;
  unint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 *v37;
  char *v38;
  char *v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  _BYTE *v61;
  uint64_t v62;
  void *v63;
  _BYTE *v64;
  uint64_t v65;
  void *v66;
  _BYTE *v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  double v79[2];

  v79[0] = 0.0;
  v76 = 0x100000006;
  v74 = &unk_1E25C8120;
  v77 = &v78;
  v75 = xmmword_18D319950;
  sub_18D04BE88((uint64_t)&v74, 0.0);
  v71 = 0x600000006;
  v69 = &unk_1E25C81B0;
  v72 = &v73;
  v70 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v69, 0.0);
  if (swan::RouteSmoother::ConvertRouteSmootherEpochToSmootherInput((double *)a1, a2, v79, (uint64_t)&v74, (uint64_t)&v69))return 0xFFFFFFFFLL;
  v10 = v79[0];
  v13 = *(_BYTE *)(a2 + 104);
  v11 = (_BYTE *)(a2 + 104);
  v12 = v13;
  v14 = *a3;
  if (*(_BYTE *)(a1 + 112912))
  {
    v15 = *a4;
    v16 = sub_18D2D5F28((uint64_t **)(a1 + 152), v12, v11);
    if (swan::FixedLagSmoother::Update(a1 + 304, v12, (uint64_t)&v74, (uint64_t)&v69, *((_DWORD *)v16 + 8), v10, v14, v15))return 0xFFFFFFFFLL;
  }
  else
  {
    v19 = sub_18D2D5F28((uint64_t **)(a1 + 152), v12, v11);
    if (swan::FixedLagSmoother::Initialize(a1 + 304, v12, (uint64_t)&v74, (uint64_t)&v69, *((_DWORD *)v19 + 8), v10, v14))return 0xFFFFFFFFLL;
  }
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  __p = 0;
  v61 = 0;
  v62 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v20 = swan::FixedLagSmoother::ExtractOutput(a1 + 304, (char **)&v66, (unint64_t *)&v63, (char **)&__p, &v57, &v54, 0);
  if (v64 - (_BYTE *)v63 == (v67 - (_BYTE *)v66) >> 3
    && (v21 = (v67 - (_BYTE *)v66) >> 3, v21 == (v61 - (_BYTE *)__p) >> 3)
    && 0x2E8BA2E8BA2E8BA3 * ((v58 - v57) >> 3) == v21
    && 0x8F9C18F9C18F9C19 * ((v55 - v54) >> 3) == v21)
  {
    if (v67 == v66)
    {
LABEL_34:
      v24 = 0;
    }
    else
    {
      v22 = 0;
      if (v21 <= 1)
        v23 = 1;
      else
        v23 = (v67 - (_BYTE *)v66) >> 3;
      v24 = 1;
      __asm { FMOV            V0.2D, #-1.0 }
      v46 = _Q0;
      while (1)
      {
        v47 = xmmword_18D347E70;
        v48 = xmmword_18D31CEE0;
        v49 = xmmword_18D31CEE0;
        v50 = v46;
        v51 = v46;
        v52 = v46;
        *(_QWORD *)&v53 = 0xBFF0000000000000;
        BYTE8(v53) = 0;
        v20 = swan::RouteSmoother::ConvertSmootherOutputToRouteSmootherEpoch(*((double *)v66 + v22), *((double *)__p + v22), v20, *((_BYTE *)v63 + v22), v57 + 88 * v22, v54 + 328 * v22, (uint64_t)&v47);
        if ((_DWORD)v20)
          break;
        v30 = (__int128 *)a5[1];
        v31 = (unint64_t)a5[2];
        if ((unint64_t)v30 >= v31)
        {
          v33 = 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (_BYTE *)*a5) >> 4);
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) > 0x249249249249249)
            sub_18D07AFE4();
          v35 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v31 - (_QWORD)*a5) >> 4);
          if (2 * v35 > v34)
            v34 = 2 * v35;
          if (v35 >= 0x124924924924924)
            v36 = 0x249249249249249;
          else
            v36 = v34;
          if (v36)
            v20 = (uint64_t)sub_18D2C883C((uint64_t)(a5 + 2), v36);
          else
            v20 = 0;
          v37 = (__int128 *)(v20 + 112 * v33);
          *v37 = v47;
          v37[1] = v48;
          v37[2] = v49;
          v37[6] = v53;
          v37[5] = v52;
          v37[4] = v51;
          v37[3] = v50;
          v39 = (char *)*a5;
          v38 = (char *)a5[1];
          v40 = v37;
          if (v38 != *a5)
          {
            do
            {
              v41 = *((_OWORD *)v38 - 7);
              v42 = *((_OWORD *)v38 - 5);
              *(v40 - 6) = *((_OWORD *)v38 - 6);
              *(v40 - 5) = v42;
              *(v40 - 7) = v41;
              v43 = *((_OWORD *)v38 - 4);
              v44 = *((_OWORD *)v38 - 3);
              v45 = *((_OWORD *)v38 - 2);
              *(__int128 *)((char *)v40 - 23) = *(_OWORD *)(v38 - 23);
              *(v40 - 3) = v44;
              *(v40 - 2) = v45;
              *(v40 - 4) = v43;
              v40 -= 7;
              v38 -= 112;
            }
            while (v38 != v39);
            v38 = (char *)*a5;
          }
          v32 = v37 + 7;
          *a5 = v40;
          a5[1] = v37 + 7;
          a5[2] = (void *)(v20 + 112 * v36);
          if (v38)
            operator delete(v38);
        }
        else
        {
          v30[3] = v50;
          v30[4] = v51;
          v30[5] = v52;
          v30[6] = v53;
          *v30 = v47;
          v30[1] = v48;
          v30[2] = v49;
          v32 = v30 + 7;
        }
        a5[1] = v32;
        v24 = ++v22 < v21;
        if (v22 == v23)
          goto LABEL_34;
      }
    }
    v17 = (v24 << 31 >> 31);
  }
  else
  {
    v17 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)&v47 = &v54;
  sub_18D2D5E1C((void ***)&v47);
  *(_QWORD *)&v47 = &v57;
  sub_18D2D5E9C((void ***)&v47);
  if (__p)
  {
    v61 = __p;
    operator delete(__p);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  return v17;
}

void sub_18D2D47C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  a17 = &a32;
  sub_18D2D5E1C((void ***)&a17);
  a17 = &a35;
  sub_18D2D5E9C((void ***)&a17);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  _Unwind_Resume(a1);
}

uint64_t swan::RouteSmoother::Finish(uint64_t a1, void **a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 *v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *v20;
  char *v21;
  char *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v53 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v3 = swan::FixedLagSmoother::ExtractOutput(a1 + 304, &v51, (unint64_t *)&v48, &v45, &v42, &v39, 1);
  if (v49 - v48 == (v52 - v51) >> 3
    && (v4 = (v52 - v51) >> 3, v4 == (v46 - v45) >> 3)
    && 0x2E8BA2E8BA2E8BA3 * ((v43 - v42) >> 3) == v4
    && 0x8F9C18F9C18F9C19 * ((v40 - v39) >> 3) == v4)
  {
    if (v52 == v51)
    {
LABEL_28:
      v7 = 0;
    }
    else
    {
      v5 = 0;
      if (v4 <= 1)
        v6 = 1;
      else
        v6 = (v52 - v51) >> 3;
      v7 = 1;
      __asm { FMOV            V0.2D, #-1.0 }
      v31 = _Q0;
      while (1)
      {
        v32 = xmmword_18D347E70;
        v33 = xmmword_18D31CEE0;
        v34 = xmmword_18D31CEE0;
        v35 = v31;
        v36 = v31;
        v37 = v31;
        *(_QWORD *)&v38 = 0xBFF0000000000000;
        BYTE8(v38) = 0;
        v3 = swan::RouteSmoother::ConvertSmootherOutputToRouteSmootherEpoch(*(double *)&v51[8 * v5], *(double *)&v45[8 * v5], v3, v48[v5], v42 + 88 * v5, v39 + 328 * v5, (uint64_t)&v32);
        if ((_DWORD)v3)
          break;
        v13 = (__int128 *)a2[1];
        v14 = (unint64_t)a2[2];
        if ((unint64_t)v13 >= v14)
        {
          v16 = 0x6DB6DB6DB6DB6DB7 * (((char *)v13 - (_BYTE *)*a2) >> 4);
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) > 0x249249249249249)
            sub_18D07AFE4();
          v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - (_QWORD)*a2) >> 4);
          if (2 * v18 > v17)
            v17 = 2 * v18;
          if (v18 >= 0x124924924924924)
            v19 = 0x249249249249249;
          else
            v19 = v17;
          if (v19)
            v3 = (uint64_t)sub_18D2C883C((uint64_t)(a2 + 2), v19);
          else
            v3 = 0;
          v20 = (__int128 *)(v3 + 112 * v16);
          *v20 = v32;
          v20[1] = v33;
          v20[2] = v34;
          v20[6] = v38;
          v20[5] = v37;
          v20[4] = v36;
          v20[3] = v35;
          v22 = (char *)*a2;
          v21 = (char *)a2[1];
          v23 = v20;
          if (v21 != *a2)
          {
            do
            {
              v24 = *((_OWORD *)v21 - 7);
              v25 = *((_OWORD *)v21 - 5);
              *(v23 - 6) = *((_OWORD *)v21 - 6);
              *(v23 - 5) = v25;
              *(v23 - 7) = v24;
              v26 = *((_OWORD *)v21 - 4);
              v27 = *((_OWORD *)v21 - 3);
              v28 = *((_OWORD *)v21 - 2);
              *(__int128 *)((char *)v23 - 23) = *(_OWORD *)(v21 - 23);
              *(v23 - 3) = v27;
              *(v23 - 2) = v28;
              *(v23 - 4) = v26;
              v23 -= 7;
              v21 -= 112;
            }
            while (v21 != v22);
            v21 = (char *)*a2;
          }
          v15 = v20 + 7;
          *a2 = v23;
          a2[1] = v20 + 7;
          a2[2] = (void *)(v3 + 112 * v19);
          if (v21)
            operator delete(v21);
        }
        else
        {
          v13[3] = v35;
          v13[4] = v36;
          v13[5] = v37;
          v13[6] = v38;
          *v13 = v32;
          v13[1] = v33;
          v13[2] = v34;
          v15 = v13 + 7;
        }
        a2[1] = v15;
        v7 = ++v5 < v4;
        if (v5 == v6)
          goto LABEL_28;
      }
    }
    v29 = (v7 << 31 >> 31);
  }
  else
  {
    v29 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)&v32 = &v39;
  sub_18D2D5E1C((void ***)&v32);
  *(_QWORD *)&v32 = &v42;
  sub_18D2D5E9C((void ***)&v32);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  return v29;
}

void sub_18D2D4BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;
  void *v34;
  void *v35;

  a17 = (void **)&a31;
  sub_18D2D5E1C(&a17);
  a17 = (void **)(v31 - 184);
  sub_18D2D5E9C(&a17);
  v33 = *(void **)(v31 - 160);
  if (v33)
  {
    *(_QWORD *)(v31 - 152) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v31 - 136);
  if (v34)
  {
    *(_QWORD *)(v31 - 128) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v31 - 112);
  if (v35)
  {
    *(_QWORD *)(v31 - 104) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t swan::RouteSmoother::ConvertRouteSmootherEpochToSmootherInput(double *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  double *v9;
  long double v10;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v21;
  double v22;
  double *v23;
  int v24;
  unsigned __int8 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  int v31;
  double v32;
  double v33;
  unsigned __int8 v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  unsigned __int8 v41;
  double *v42;
  int v43;
  double v44;
  _BYTE v45[112];
  _BYTE v46[112];
  _BYTE v47[112];
  void *v48;
  __int128 v49;
  uint64_t v50;
  double *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  double v60;
  __int128 v61;
  uint64_t v62;
  double v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  double *v72;
  uint64_t v73;
  void (**v74)(cnnavigation::ENUToECEFJacobian *__hidden);
  char v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81;
  double v82;
  float64x2_t v83;
  uint64_t v84;
  float64x2_t v85;
  uint64_t v86;
  double v87[3];

  *a3 = *(_QWORD *)a2;
  v85 = vmulq_f64(*(float64x2_t *)(a2 + 8), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  v86 = *(_QWORD *)(a2 + 32);
  if (cnnavigation::LLAToECEF(v85.f64, 1, v87, 0, (uint64_t)&v53))
    return 0xFFFFFFFFLL;
  *(_OWORD *)(a4 + 8) = xmmword_18D319950;
  v9 = *(double **)(a4 + 32);
  *v9 = v87[0];
  v9[1] = v87[1];
  v9[2] = v87[2];
  v10 = *(double *)(a2 + 64);
  v11 = *(double *)(a2 + 48);
  v12 = __sincos_stret(v11 * 0.0174532925);
  v13 = *(double *)(a2 + 56);
  v14 = v10 * v12.__sinval;
  if (v11 >= 0.0)
    v15 = v10 * v12.__cosval;
  else
    v15 = 0.0;
  if (v11 < 0.0)
    v14 = 0.0;
  *(double *)&v81 = v14;
  *((double *)&v81 + 1) = v15;
  v17 = *(double *)(a2 + 72);
  v16 = *(double *)(a2 + 80);
  v82 = v16;
  v18 = a1[31];
  if (fabs(v16) > v18 || (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v19 = 1.0;
    if (v16 <= 0.0)
    {
      v19 = -1.0;
      if (v16 >= 0.0)
        v19 = 0.0;
    }
    v82 = v18 * v19;
  }
  v75 = 0;
  v78 = 0x300000003;
  v76 = &unk_1E25C78E0;
  v77 = xmmword_18D30BB60;
  v79 = &v80;
  v74 = &off_1E25B9588;
  if (cnnavigation::ENUToECEF(&v81, 1, 0, (uint64_t)v87, 1, &v83, (uint64_t)&v74))
    return 0xFFFFFFFFLL;
  v21 = *(_QWORD *)(a4 + 32);
  *(float64x2_t *)(v21 + 24) = v83;
  *(_QWORD *)(v21 + 40) = v84;
  v71 = 0x300000003;
  v69 = &unk_1E25C78E0;
  v72 = (double *)&v73;
  v70 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v69, 0.0);
  v22 = *(double *)(a2 + 24) * *(double *)(a2 + 24) * 0.5;
  v23 = v72;
  *v72 = v22;
  v24 = HIDWORD(v70);
  v23[HIDWORD(v70) + 1] = v22;
  v23[2 * v24 + 2] = *(double *)(a2 + 40) * *(double *)(a2 + 40);
  v66 = 0x300000003;
  v64 = &unk_1E25C78E0;
  v65 = xmmword_18D30BB60;
  v67 = &v68;
  sub_18D04BB5C((uint64_t)&v74, (uint64_t)&v69, (uint64_t)&v64);
  v25 = atomic_load((unsigned __int8 *)&qword_1ECF24828);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24828))
  {
    v55 = 0x300000001;
    v53 = &unk_1E25C6C50;
    v56 = &v57;
    v54 = xmmword_18D314670;
    v57 = 0x100000000;
    LODWORD(v58) = 2;
    sub_18D16169C((uint64_t)&v53, (uint64_t)&unk_1ECF24858);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF24858, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24828);
  }
  v55 = 0x600000006;
  v53 = &unk_1E25C81B0;
  v56 = &v57;
  v54 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v53, 0.0);
  sub_18D053AA8(a5, (uint64_t)&v53);
  sub_18D04F764((uint64_t)&v53, a5, (uint64_t)&unk_1ECF24858, (uint64_t)&unk_1ECF24858);
  sub_18D16171C((uint64_t)&v53, (uint64_t)&v64);
  v26 = v17 * v17;
  v44 = *(double *)(a2 + 88) * *(double *)(a2 + 88);
  v27 = sqrt(v17 * v17);
  v55 = 0x300000003;
  v53 = &unk_1E25C78E0;
  v56 = &v57;
  v54 = xmmword_18D30BB60;
  v28 = sqrt(v13 * 0.0174532925 * (v13 * 0.0174532925));
  sub_18D04BE88((uint64_t)&v53, 0.0);
  sub_18D053AA8((uint64_t)&v69, (uint64_t)&v53);
  v29 = a1[36];
  if (v10 < v27 * a1[35]
    || v28 >= v29
    || v13 < 0.0
    || v17 < 0.0
    || (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    if (v28 >= v29
      || v13 < 0.0
      || v17 < 0.0
      || (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      if (v17 < 0.0 || (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        v32 = a1[34];
      else
        v32 = (v10 + v27 * 3.0) / 3.0;
      v33 = v32 * v32;
      v30 = v72;
      *v72 = v33;
      v31 = HIDWORD(v70);
      v30[HIDWORD(v70) + 1] = v33;
    }
    else
    {
      v30 = v72;
      *v72 = v26;
      v31 = HIDWORD(v70);
      v30[HIDWORD(v70) + 1] = v26;
    }
    v30[2 * v31 + 2] = v44;
  }
  else
  {
    v55 = 0x300000003;
    v53 = &unk_1E25C78E0;
    v54 = xmmword_18D30BB60;
    v56 = &v57;
    *(double *)&v57 = v17 * v17;
    v59 = 0;
    v60 = v13 * 0.0174532925 * (v13 * 0.0174532925);
    v62 = 0;
    v58 = 0u;
    v61 = 0u;
    v63 = v44;
    v50 = 0x300000003;
    v48 = &unk_1E25C78E0;
    v51 = (double *)&v52;
    v49 = xmmword_18D30BB60;
    sub_18D04BE88((uint64_t)&v48, 0.0);
    v42 = v51;
    *v51 = v12.__sinval;
    v43 = HIDWORD(v49);
    v42[SHIDWORD(v49)] = v10 * v12.__cosval;
    v42[1] = v12.__cosval;
    v42[v43 + 1] = -(v10 * v12.__sinval);
    v42[2 * v43 + 2] = 1.0;
    sub_18D166008((uint64_t)&v48, (uint64_t)&v53, (uint64_t)v46);
    sub_18D16606C((uint64_t)&v48, (uint64_t)v45);
    sub_18D166008((uint64_t)v46, (uint64_t)v45, (uint64_t)v47);
    sub_18D053AA8((uint64_t)&v69, (uint64_t)v47);
  }
  v34 = atomic_load((unsigned __int8 *)&qword_1ECF24838);
  if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24838))
  {
    *(double *)&qword_1ECF24830 = a1[30] * a1[30];
    __cxa_guard_release(&qword_1ECF24838);
  }
  v35 = v72;
  *v72 = *(double *)&qword_1ECF24830 * *v72;
  v36 = SHIDWORD(v70);
  v37 = SHIDWORD(v70) + 1;
  v35[v37] = *(double *)&qword_1ECF24830 * v35[v37];
  v35[2 * v36 + 2] = *(double *)&qword_1ECF24830 * v35[2 * v36 + 2];
  v38 = a1[32];
  if (v10 > v38 || hypot(v10, *(long double *)(a2 + 80)) > v38)
  {
    v39 = a1[33] * a1[33];
    v40 = *v35;
    if (*v35 <= v39)
      v40 = a1[33] * a1[33];
    *v35 = v40;
    if (v35[v37] > v39)
      v39 = v35[v37];
    v35[v37] = v39;
  }
  sub_18D04BB5C((uint64_t)&v74, (uint64_t)&v69, (uint64_t)&v64);
  v41 = atomic_load((unsigned __int8 *)&qword_1ECF24840);
  if ((v41 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1ECF24840))
    {
      v55 = 0x300000001;
      v53 = &unk_1E25C6C50;
      v56 = &v57;
      v54 = xmmword_18D314670;
      v57 = 0x400000003;
      LODWORD(v58) = 5;
      sub_18D16169C((uint64_t)&v53, (uint64_t)&unk_1ECF24890);
      __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF24890, &dword_18D038000);
      __cxa_guard_release(&qword_1ECF24840);
    }
  }
  sub_18D04F764((uint64_t)&v53, a5, (uint64_t)&unk_1ECF24890, (uint64_t)&unk_1ECF24890);
  sub_18D16171C((uint64_t)&v53, (uint64_t)&v64);
  return 0;
}

void sub_18D2D5404(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF24840);
  _Unwind_Resume(a1);
}

uint64_t swan::RouteSmoother::ConvertSmootherOutputToRouteSmootherEpoch(double a1, double a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t *v19;
  int v20;
  int v21;
  int i;
  double *v23;
  double v24;
  int v25;
  double v26;
  double v27;
  unsigned __int8 v28;
  double v29;
  long double v30;
  long double v31;
  double v32;
  __double2 v33;
  double *v34;
  int v35;
  uint64_t result;
  double *v37;
  int v38;
  double v39;
  _BYTE v40[112];
  void *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[9];
  _BYTE v49[20];
  int v50;
  double *v51;
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  uint64_t v59;
  double *v60;
  uint64_t v61;
  int v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  double *v66;
  uint64_t v67;
  void *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  float64x2_t v73;
  double v74;
  long double __x;
  long double __y;
  uint64_t v77;
  void (**v78)(cnnavigation::ECEFToENUJacobian *__hidden);
  char v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  float64x2_t v85;
  uint64_t v86;
  float64x2_t v87;
  uint64_t v88;

  *(double *)a7 = a1;
  v11 = *(_QWORD *)(a5 + 32);
  v87 = *(float64x2_t *)v11;
  v88 = *(_QWORD *)(v11 + 16);
  if (cnnavigation::ECEFToLLA(&v87, 1, v85.f64, 0, (uint64_t)&v78))
    return 0xFFFFFFFFLL;
  *(float64x2_t *)(a7 + 8) = vmulq_f64(v85, (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  *(_QWORD *)(a7 + 32) = v86;
  v79 = 0;
  v82 = 0x300000003;
  v80 = &unk_1E25C78E0;
  v81 = xmmword_18D30BB60;
  v83 = &v84;
  v78 = &off_1E25B9560;
  v73 = *(float64x2_t *)(v11 + 24);
  v74 = *(double *)(v11 + 40);
  cnnavigation::ECEFToENU(&v73, 1, 0, &v87, 1, (uint64_t)&__x, (uint64_t)&v78, v74);
  if (v12)
    return 0xFFFFFFFFLL;
  *(long double *)(a7 + 64) = hypot(__x, __y);
  *(_QWORD *)(a7 + 80) = v77;
  v70 = 0x300000003;
  v68 = &unk_1E25C78E0;
  v69 = xmmword_18D30BB60;
  v71 = &v72;
  v65 = 0x300000003;
  v63 = &unk_1E25C78E0;
  v64 = xmmword_18D30BB60;
  v66 = (double *)&v67;
  if (v79)
    sub_18D053AA8((uint64_t)&v68, (uint64_t)&v80);
  v13 = atomic_load((unsigned __int8 *)&qword_1ECF24848);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24848))
  {
    v59 = 0x300000001;
    v57 = &unk_1E25C6C50;
    v60 = (double *)&v61;
    v58 = xmmword_18D314670;
    v61 = 0x100000000;
    v62 = 2;
    sub_18D16169C((uint64_t)&v57, (uint64_t)&unk_1ECF248C8);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF248C8, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24848);
  }
  sub_18D161D4C(a6, (uint64_t)&unk_1ECF248C8, (uint64_t)&unk_1ECF248C8, (uint64_t)v49);
  v54 = 0x300000003;
  v52 = &unk_1E25C78E0;
  v53 = xmmword_18D30BB60;
  v55 = &v56;
  sub_18D053B2C((uint64_t)&v68, (uint64_t)v49, (uint64_t)&v52);
  v14 = DWORD1(v69);
  v15 = v69;
  v46 = 0x300000003;
  v41 = &unk_1E25C78E0;
  v47 = v48;
  v42 = DWORD1(v69);
  v43 = v69;
  v44 = v69 * DWORD1(v69);
  v45 = DWORD1(v69);
  if (DWORD1(v69))
  {
    v16 = 0;
    v17 = 0;
    v18 = HIDWORD(v69);
    v19 = v71;
    do
    {
      v20 = v16;
      v21 = v17;
      for (i = v15; i; --i)
      {
        v48[v21] = v19[v20];
        v21 += v14;
        ++v20;
      }
      ++v17;
      v16 += v18;
    }
    while (v17 != v14);
  }
  v59 = 0x300000003;
  v57 = &unk_1E25C78E0;
  v58 = xmmword_18D30BB60;
  v60 = (double *)&v61;
  sub_18D053B2C((uint64_t)&v52, (uint64_t)&v41, (uint64_t)&v57);
  sub_18D053AA8((uint64_t)&v63, (uint64_t)&v57);
  v23 = v66;
  v24 = *v66;
  if (*v66 < 0.0)
    return 0xFFFFFFFFLL;
  v25 = HIDWORD(v64);
  v26 = v66[HIDWORD(v64) + 1];
  if (v26 < 0.0)
    return 0xFFFFFFFFLL;
  if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return 0xFFFFFFFFLL;
  *(double *)(a7 + 24) = sqrt(v24 + v26);
  v27 = v23[2 * v25 + 2];
  if (v27 < 0.0 || (*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  *(double *)(a7 + 40) = sqrt(v27);
  v28 = atomic_load((unsigned __int8 *)&qword_1ECF24850);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ECF24850))
  {
    v59 = 0x300000001;
    v57 = &unk_1E25C6C50;
    v60 = (double *)&v61;
    v58 = xmmword_18D314670;
    v61 = 0x400000003;
    v62 = 5;
    sub_18D16169C((uint64_t)&v57, (uint64_t)&unk_1ECF24900);
    __cxa_atexit((void (*)(void *))sub_18D159AB4, &unk_1ECF24900, &dword_18D038000);
    __cxa_guard_release(&qword_1ECF24850);
  }
  sub_18D161D4C(a6, (uint64_t)&unk_1ECF24900, (uint64_t)&unk_1ECF24900, (uint64_t)v49);
  sub_18D166008((uint64_t)&v68, (uint64_t)v49, (uint64_t)&v52);
  sub_18D16606C((uint64_t)&v68, (uint64_t)&v41);
  sub_18D166008((uint64_t)&v52, (uint64_t)&v41, (uint64_t)&v57);
  sub_18D053AA8((uint64_t)&v63, (uint64_t)&v57);
  if (*v66 < 0.0)
    return 0xFFFFFFFFLL;
  v29 = v66[SHIDWORD(v64) + 1];
  if (v29 < 0.0
    || (*(_QWORD *)v66 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    return 0xFFFFFFFFLL;
  }
  v30 = atan2(__x, __y);
  v31 = fmod(v30 * 57.2957795 + 360.0, 360.0);
  *(long double *)(a7 + 48) = v31;
  v32 = *(double *)(a7 + 64);
  v33 = __sincos_stret(v31 * 0.0174532925);
  v59 = 0x300000003;
  v57 = &unk_1E25C78E0;
  v60 = (double *)&v61;
  v58 = xmmword_18D30BB60;
  sub_18D04BE88((uint64_t)&v57, 0.0);
  v34 = v60;
  *v60 = v33.__sinval;
  v35 = HIDWORD(v58);
  v34[SHIDWORD(v58)] = v32 * v33.__cosval;
  v34[1] = v33.__cosval;
  v34[v35 + 1] = -(v32 * v33.__sinval);
  v34[2 * v35 + 2] = 1.0;
  sub_18D1873A0((uint64_t)&v57, (uint64_t)&v52);
  sub_18D166008((uint64_t)&v52, (uint64_t)&v63, (uint64_t)&v41);
  sub_18D16606C((uint64_t)&v52, (uint64_t)v40);
  sub_18D166008((uint64_t)&v41, (uint64_t)v40, (uint64_t)v49);
  result = 0;
  v37 = v51;
  *(double *)(a7 + 72) = sqrt(*v51);
  v38 = v50;
  *(double *)(a7 + 56) = sqrt(v37[v50 + 1]) * 57.2957795;
  v39 = v37[2 * v38 + 2];
  *(_BYTE *)(a7 + 104) = a4;
  *(double *)(a7 + 88) = sqrt(v39);
  *(double *)(a7 + 96) = a2;
  return result;
}

void sub_18D2D5A84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECF24850);
  _Unwind_Resume(a1);
}

uint64_t swan::RouteSmoother::Reset(swan::RouteSmoother *this)
{
  *((_BYTE *)this + 112912) = 0;
  return 0;
}

_QWORD *sub_18D2D5AF8(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t **sub_18D2D5B4C(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t **v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t **v26;
  _QWORD *v27;
  uint64_t v28;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v8 = result + 1;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v9 = v6[1];
    else
      v9 = (uint64_t)v6;
    v26 = result;
    v27 = (_QWORD *)v9;
    v28 = v9;
    if (v9)
    {
      v10 = sub_18D2D5AF8(v9);
      v27 = v10;
      if (a2 != a3)
      {
        v11 = a2;
        do
        {
          v12 = (uint64_t)v10;
          v13 = *((unsigned __int8 *)v11 + 32);
          *(_BYTE *)(v9 + 32) = v13;
          *(_QWORD *)(v9 + 40) = v11[5];
          v14 = *v8;
          v15 = v5 + 1;
          v16 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v15 = (uint64_t **)v14;
                if (v13 >= *((unsigned __int8 *)v14 + 32))
                  break;
                v14 = (uint64_t *)*v14;
                v16 = v15;
                if (!*v15)
                  goto LABEL_14;
              }
              v14 = (uint64_t *)v14[1];
            }
            while (v14);
            v16 = v15 + 1;
          }
LABEL_14:
          sub_18D185958(v5, (uint64_t)v15, v16, (uint64_t *)v9);
          if (v12)
            v10 = sub_18D2D5AF8(v12);
          else
            v10 = 0;
          v17 = (_QWORD *)v11[1];
          if (v17)
          {
            do
            {
              a2 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v11[2];
              v18 = *a2 == (_QWORD)v11;
              v11 = a2;
            }
            while (!v18);
          }
          if (!v12)
            break;
          v9 = v12;
          v11 = a2;
        }
        while (a2 != a3);
        v27 = v10;
        v28 = v12;
      }
    }
    result = (uint64_t **)sub_18D2D5D44((uint64_t)&v26);
  }
  if (a2 != a3)
  {
    v19 = v5 + 1;
    do
    {
      v20 = (unsigned __int8 *)operator new(0x30uLL);
      *((_OWORD *)v20 + 2) = *((_OWORD *)a2 + 2);
      v21 = *v19;
      v22 = v5 + 1;
      v23 = v5 + 1;
      if (*v19)
      {
        do
        {
          while (1)
          {
            v22 = (uint64_t **)v21;
            if (v20[32] >= *((unsigned __int8 *)v21 + 32))
              break;
            v21 = (uint64_t *)*v21;
            v23 = v22;
            if (!*v22)
              goto LABEL_34;
          }
          v21 = (uint64_t *)v21[1];
        }
        while (v21);
        v23 = v22 + 1;
      }
LABEL_34:
      result = (uint64_t **)sub_18D185958(v5, (uint64_t)v22, v23, (uint64_t *)v20);
      v24 = (_QWORD *)a2[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)a2[2];
          v18 = *v25 == (_QWORD)a2;
          a2 = v25;
        }
        while (!v18);
      }
      a2 = v25;
    }
    while (v25 != a3);
  }
  return result;
}

uint64_t sub_18D2D5D44(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_18D05B5E4(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_18D05B5E4(v2);
  }
  return a1;
}

uint64_t sub_18D2D5D90(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_18D2D5DDC(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_18D2D5DDC(v2);
  }
  return a1;
}

void sub_18D2D5DDC(_QWORD *a1)
{
  if (a1)
  {
    sub_18D2D5DDC(*a1);
    sub_18D2D5DDC(a1[1]);
    sub_18D05B5E4((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void sub_18D2D5E1C(void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 41;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 41;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18D2D5E9C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 88;
      v7 = v4 - 88;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 88;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **sub_18D2D5F28(uint64_t **a1, unsigned __int8 a2, _BYTE *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  _BYTE *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((unsigned __int8 *)v5 + 28);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x28uLL);
    v9[28] = *a3;
    *((_DWORD *)v9 + 8) = 0;
    sub_18D185958(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t swan::ForwardBackwardFixedIntervalSmoother::Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, char a11, _QWORD *a12, _QWORD *a13, uint64_t a14, _QWORD *a15, _QWORD *a16)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  double *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  double *v53;
  double *v54;
  int v55;
  double *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  double v66;
  double v67;
  int v68;
  int v69;
  double *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  int v76;
  double v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  _QWORD *v93;
  int v94;
  int v95;
  int i;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t *v102;
  int v103;
  int v104;
  int j;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t *v112;
  int v113;
  int v114;
  int k;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t *v121;
  int v122;
  int v123;
  int m;
  uint64_t v125;
  int v126;
  int v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t *v138;
  int v139;
  int v140;
  int n;
  int v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  _QWORD *v160;
  int v161;
  int v162;
  int ii;
  uint64_t v164;
  uint64_t v165;
  uint64_t jj;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  double *v183;
  double *v184;
  int v185;
  double *v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t *v192;
  int v193;
  int v194;
  int kk;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  void *v210;
  __int128 v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD v214[36];
  void (**v215)(cnnavigation::ECEFToENUJacobian *__hidden);
  __int128 v216;
  __int128 v217;
  _QWORD v218[2];
  uint64_t v219;
  void *v220;
  __int128 v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD v224[36];
  void *v225;
  __int128 v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD v229[36];
  void *v230;
  __int128 v231;
  uint64_t v232;
  _BYTE *v233;
  _BYTE v234[288];
  void **v235;
  __int128 v236;
  uint64_t v237;
  _QWORD *v238;
  _BYTE v239[288];
  _QWORD v240[3];
  _QWORD v241[3];
  _QWORD v242[3];
  _QWORD v243[3];
  _QWORD v244[3];
  void *v245;
  __int128 v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  void *v250;
  __int128 v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  void *v255;
  __int128 v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  void *v260;
  __int128 v261;
  uint64_t v262;
  double *v263;
  uint64_t v264;
  void *v265;
  __int128 v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  void *v270;
  __int128 v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  void *v275;
  __int128 v276;
  uint64_t v277;
  double *v278;
  uint64_t v279;
  void *v280;
  __int128 v281;
  uint64_t v282;
  _BYTE *v283;
  _BYTE v284[192];
  void *v285;
  __int128 v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  void *v290;
  __int128 v291;
  uint64_t v292;
  _QWORD *v293;
  _QWORD v294[36];
  _BYTE v295[24];
  uint64_t v296;
  _QWORD *v297;
  _QWORD v298[39];

  MEMORY[0x1E0C80A78](a1, a2);
  v205 = v19;
  v206 = v20;
  v207 = v21;
  v203 = v22;
  v298[36] = *MEMORY[0x1E0C80C00];
  v204 = v18 - 2;
  if (v18 < 2)
    return 0xFFFFFFFFLL;
  v24 = v18;
  v25 = v17;
  v26 = v16;
  v277 = 0x600000006;
  v275 = &unk_1E25C81B0;
  v278 = (double *)&v279;
  v276 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v275, 0.0);
  v27 = 0;
  v28 = HIDWORD(v276) + 1;
  v29 = 6;
  v30 = v278;
  do
  {
    v30[v27] = 1.0;
    v27 += v28;
    --v29;
  }
  while (v29);
  v272 = 0x600000006;
  v270 = &unk_1E25C81B0;
  v273 = &v274;
  v271 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v270, 0.0);
  v31 = 0;
  v32 = HIDWORD(v271) + 1;
  v33 = 6;
  v34 = v273;
  do
  {
    v34[v31] = 0x3FF0000000000000;
    v31 += v32;
    --v33;
  }
  while (v33);
  v267 = 0x600000006;
  v265 = &unk_1E25C81B0;
  v268 = &v269;
  v266 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v265, 0.0);
  v35 = 0;
  v36 = HIDWORD(v266) + 1;
  v37 = 6;
  v38 = v268;
  do
  {
    v38[v35] = 0x3FF0000000000000;
    v35 += v36;
    --v37;
  }
  while (v37);
  v262 = 0x600000006;
  v260 = &unk_1E25C81B0;
  v263 = (double *)&v264;
  v261 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v260, 0.0);
  v257 = 0x600000006;
  v255 = &unk_1E25C81B0;
  v256 = xmmword_18D314680;
  v258 = &v259;
  v252 = 0x600000006;
  v250 = &unk_1E25C81B0;
  v253 = &v254;
  v251 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v250, 0.0);
  v39 = 0;
  v40 = HIDWORD(v251) + 1;
  v41 = 6;
  v42 = v253;
  do
  {
    v42[v39] = 0x3FF0000000000000;
    v39 += v40;
    --v41;
  }
  while (v41);
  v247 = 0x100000006;
  v245 = &unk_1E25C8120;
  v246 = xmmword_18D319950;
  v248 = &v249;
  sub_18D2D7D00(v244, v24);
  sub_18D2D7DD4(v243, v24);
  sub_18D2D7D00(v242, v24);
  sub_18D2D7DD4(v241, v24);
  sub_18D2D7DD4(v240, v24);
  v43 = 0;
  v44 = *(_QWORD *)(v244[0] + 32);
  v45 = *(_QWORD **)(v243[0] + 32);
  v46 = 8 * *(int *)(v243[0] + 20);
  do
  {
    v47 = 0;
    *(_QWORD *)(v44 + 8 * v43) = *(_QWORD *)(v26 + 8 * v43);
    v48 = v45;
    do
    {
      *v48 = *(_QWORD *)(v25 + v47);
      v47 += 8;
      v48 = (_QWORD *)((char *)v48 + v46);
    }
    while (v47 != 48);
    ++v43;
    ++v45;
    v25 += 48;
  }
  while (v43 != 6);
  v49 = 0;
  LODWORD(v208) = 0;
  v209 = v24 - 1;
  do
  {
    v50 = 0;
    v51 = *v207 + 48 * v49;
    v52 = v248;
    do
    {
      v52[v50] = *(_QWORD *)(v51 + v50 * 8);
      ++v50;
    }
    while (v50 != 6);
    v53 = (double *)(*v205 + 24 * v49);
    v54 = v278;
    *v278 = *v53 * *v53;
    v55 = HIDWORD(v276);
    v54[HIDWORD(v276) + 1] = v53[1] * v53[1];
    v54[2 * v55 + 2] = v53[2] * v53[2];
    v56 = (double *)(*v206 + 24 * v49);
    v54[3 * v55 + 3] = *v56 * *v56;
    v54[4 * v55 + 4] = v56[1] * v56[1];
    v54[5 * v55 + 5] = v56[2] * v56[2];
    v57 = v240[0] + 328 * v49;
    *(_OWORD *)(v57 + 8) = xmmword_18D314680;
    sub_18D04BE88(v57, 0.0);
    v58 = 0;
    v59 = *(_DWORD *)(v57 + 20) + 1;
    v60 = *(_QWORD *)(v57 + 32);
    v61 = 6;
    do
    {
      *(_QWORD *)(v60 + 8 * v58) = 0x3FF0000000000000;
      v58 += v59;
      --v61;
    }
    while (v61);
    v62 = 1.0;
    if (v209 > v49)
      v62 = *(double *)(*v203 + 8 * (v208 + 1)) - *(double *)(*v203 + 8 * v49);
    v63 = v240[0] + 328 * v49;
    v64 = *(_DWORD *)(v63 + 20);
    v65 = *(_QWORD *)(v63 + 32);
    *(double *)(v65 + 24 * v64) = v62;
    *(double *)(v65 + 8 * ((4 * v64) | 1)) = v62;
    *(double *)(v65 + 8 * (5 * v64 + 2)) = v62;
    v66 = v62 * v62;
    v67 = v62 * 0.5;
    LODWORD(v65) = HIDWORD(v261);
    v68 = 3 * HIDWORD(v261);
    v69 = 3 * HIDWORD(v261) + 3;
    v70 = v263;
    v71 = v66 * (*(double *)(*a9 + 8 * v49) * *(double *)(*a9 + 8 * v49));
    v263[v69] = v71;
    v72 = v67 * v71;
    v70[v68] = v72;
    v70[3] = v72;
    v73 = v67 * v70[v68];
    *v70 = v73;
    v70[(int)v65 + 1] = v73;
    v70[4 * (int)v65 + 4] = v70[v69];
    v74 = v70[3];
    v70[(int)((4 * v65) | 1)] = v74;
    v70[(int)v65 + 4] = v74;
    v75 = v66 * (*(double *)(*a10 + 8 * v49) * *(double *)(*a10 + 8 * v49));
    v70[5 * (int)v65 + 5] = v75;
    v76 = 5 * v65 + 2;
    v77 = v67 * v75;
    v70[v76] = v77;
    LODWORD(v65) = 2 * v65;
    v70[(int)v65 + 5] = v77;
    v70[(int)v65 + 2] = v67 * v70[v76];
    if (a11)
    {
      LOBYTE(v216) = 0;
      v218[0] = 0x300000003;
      *((_QWORD *)&v216 + 1) = &unk_1E25C78E0;
      v217 = xmmword_18D30BB60;
      v218[1] = &v219;
      v215 = &off_1E25B9560;
      v78 = *(_QWORD *)(v244[0] + 88 * v49 + 32);
      *(_OWORD *)v295 = *(_OWORD *)v78;
      *(_QWORD *)&v295[16] = *(_QWORD *)(v78 + 16);
      cnnavigation::ECEFToENU((float64x2_t *)v295, 1, 0, (float64x2_t *)v295, 1, (uint64_t)&v290, (uint64_t)&v215, *(double *)&v295[16]);
      v212 = 0x300000003;
      v210 = &unk_1E25C78E0;
      v211 = xmmword_18D30BB60;
      v213 = v214;
      if ((_BYTE)v216)
        sub_18D053AA8((uint64_t)&v210, (uint64_t)&v216 + 8);
      v237 = 0x600000006;
      v235 = (void **)&unk_1E25C81B0;
      v238 = v239;
      v236 = xmmword_18D314680;
      sub_18D04BE88((uint64_t)&v235, 0.0);
      v79 = v213;
      v80 = v238;
      *v238 = *v213;
      v81 = SHIDWORD(v211);
      v82 = SHIDWORD(v236);
      v80[SHIDWORD(v236)] = v79[SHIDWORD(v211)];
      v80[2 * v82] = v79[2 * v81];
      v80[1] = v79[1];
      v83 = v81 + 1;
      v80[(int)v82 + 1] = v79[(int)v81 + 1];
      v84 = &v79[2 * (int)v81];
      v85 = &v80[2 * (int)v82];
      v85[1] = v84[1];
      v80[2] = v79[2];
      v86 = v81 + 2;
      v80[(int)v82 + 2] = v79[(int)v81 + 2];
      v85[2] = v84[2];
      LODWORD(v85) = 3 * v82;
      v80[(int)v85 + 3] = *v79;
      v80[(int)((4 * v82) | 3)] = v79[v81];
      v87 = v79[2 * v81];
      LODWORD(v81) = 4 * v82;
      LODWORD(v82) = 5 * v82;
      v80[(int)v82 + 3] = v87;
      v80[(int)v85 + 4] = v79[1];
      v80[(int)v81 + 4] = v79[v83];
      v80[(int)v82 + 4] = v84[1];
      v80[(int)v85 + 5] = v79[2];
      v80[(int)v81 + 5] = v79[v86];
      v80[(int)v82 + 5] = v84[2];
      v88 = DWORD1(v236);
      v89 = v236;
      v222 = 0x600000006;
      v220 = &unk_1E25C81B0;
      v223 = v224;
      *(_QWORD *)&v221 = __PAIR64__(v236, DWORD1(v236));
      DWORD2(v221) = v236 * DWORD1(v236);
      HIDWORD(v221) = DWORD1(v236);
      if (DWORD1(v236))
      {
        v90 = 0;
        v91 = 0;
        v92 = HIDWORD(v236);
        v93 = v238;
        do
        {
          v94 = v90;
          v95 = v91;
          for (i = v89; i; --i)
          {
            v224[v95] = v93[v94];
            v95 += v88;
            ++v94;
          }
          ++v91;
          v90 += v92;
        }
        while (v91 != v88);
      }
      v227 = 0x600000006;
      v225 = &unk_1E25C81B0;
      v226 = xmmword_18D314680;
      v228 = v229;
      sub_18D053B2C((uint64_t)&v220, (uint64_t)&v260, (uint64_t)&v225);
      v232 = 0x600000006;
      v230 = &unk_1E25C81B0;
      v231 = xmmword_18D314680;
      v233 = v234;
      sub_18D053B2C((uint64_t)&v225, (uint64_t)&v235, (uint64_t)&v230);
      sub_18D053AA8((uint64_t)&v255, (uint64_t)&v230);
    }
    else
    {
      sub_18D053AA8((uint64_t)&v255, (uint64_t)&v260);
    }
    if (sub_18D2D7B58(&v275) > 1.0e15)
      goto LABEL_89;
    v227 = 0x600000006;
    v225 = &unk_1E25C81B0;
    v226 = xmmword_18D314680;
    v228 = v229;
    sub_18D053B2C((uint64_t)&v270, v243[0] + 328 * v49, (uint64_t)&v225);
    v97 = DWORD1(v271);
    v98 = v271;
    v222 = 0x600000006;
    v220 = &unk_1E25C81B0;
    v223 = v224;
    *(_QWORD *)&v221 = __PAIR64__(v271, DWORD1(v271));
    DWORD2(v221) = v271 * DWORD1(v271);
    HIDWORD(v221) = DWORD1(v271);
    if (DWORD1(v271))
    {
      v99 = 0;
      v100 = 0;
      v101 = HIDWORD(v271);
      v102 = v273;
      do
      {
        v103 = v99;
        v104 = v100;
        for (j = v98; j; --j)
        {
          v224[v104] = v102[v103];
          v104 += v97;
          ++v103;
        }
        ++v100;
        v99 += v101;
      }
      while (v100 != v97);
    }
    v232 = 0x600000006;
    v230 = &unk_1E25C81B0;
    v231 = xmmword_18D314680;
    v233 = v234;
    sub_18D053B2C((uint64_t)&v225, (uint64_t)&v220, (uint64_t)&v230);
    v237 = 0x600000006;
    v235 = (void **)&unk_1E25C81B0;
    v236 = xmmword_18D314680;
    v238 = v239;
    sub_18D053FA4((uint64_t)&v275, (uint64_t)&v230, (uint64_t)&v235);
    if (sub_18D2D7B58(&v235) > 1.0e15)
    {
LABEL_89:
      v23 = 0xFFFFFFFFLL;
      goto LABEL_90;
    }
    v106 = v243[0];
    v107 = DWORD1(v271);
    v108 = v271;
    v227 = 0x600000006;
    v225 = &unk_1E25C81B0;
    v228 = v229;
    *(_QWORD *)&v226 = __PAIR64__(v271, DWORD1(v271));
    DWORD2(v226) = v271 * DWORD1(v271);
    HIDWORD(v226) = DWORD1(v271);
    if (DWORD1(v271))
    {
      v109 = 0;
      v110 = 0;
      v111 = HIDWORD(v271);
      v112 = v273;
      do
      {
        v113 = v109;
        v114 = v110;
        for (k = v108; k; --k)
        {
          v229[v114] = v112[v113];
          v114 += v107;
          ++v113;
        }
        ++v110;
        v109 += v111;
      }
      while (v110 != v107);
    }
    v232 = 0x600000006;
    v230 = &unk_1E25C81B0;
    v231 = xmmword_18D314680;
    v233 = v234;
    sub_18D053B2C(v106 + 328 * v49, (uint64_t)&v225, (uint64_t)&v230);
    v296 = 0x600000006;
    *(_QWORD *)v295 = &unk_1E25C81B0;
    *(_OWORD *)&v295[8] = xmmword_18D314680;
    v297 = v298;
    sub_18D053B2C((uint64_t)&v270, v243[0] + 328 * v49, (uint64_t)v295);
    v116 = DWORD1(v271);
    v117 = v271;
    v292 = 0x600000006;
    v290 = &unk_1E25C81B0;
    v293 = v294;
    *(_QWORD *)&v291 = __PAIR64__(v271, DWORD1(v271));
    DWORD2(v291) = v271 * DWORD1(v271);
    HIDWORD(v291) = DWORD1(v271);
    if (DWORD1(v271))
    {
      v118 = 0;
      v119 = 0;
      v120 = HIDWORD(v271);
      v121 = v273;
      do
      {
        v122 = v118;
        v123 = v119;
        for (m = v117; m; --m)
        {
          v294[v123] = v121[v122];
          v123 += v116;
          ++v122;
        }
        ++v119;
        v118 += v120;
      }
      while (v119 != v116);
    }
    v212 = 0x600000006;
    v210 = &unk_1E25C81B0;
    v211 = xmmword_18D314680;
    v213 = v214;
    sub_18D053B2C((uint64_t)v295, (uint64_t)&v290, (uint64_t)&v210);
    *(_QWORD *)&v217 = 0x600000006;
    v215 = (void (**)(cnnavigation::ECEFToENUJacobian *__hidden))&unk_1E25C81B0;
    v216 = xmmword_18D314680;
    *((_QWORD *)&v217 + 1) = v218;
    sub_18D053FA4((uint64_t)&v275, (uint64_t)&v210, (uint64_t)&v215);
    v222 = 0x600000006;
    v220 = &unk_1E25C81B0;
    v221 = xmmword_18D314680;
    v223 = v224;
    v287 = 0x100000006;
    v285 = &unk_1E25C8150;
    v286 = xmmword_18D319950;
    v288 = &v289;
    v282 = 0x100000018;
    v280 = &unk_1E25C7010;
    v281 = xmmword_18D319B80;
    v283 = v284;
    sub_18D04F504((uint64_t)&v215, (uint64_t)&v285, (uint64_t)&v280, (uint64_t)&v220);
    v237 = 0x600000006;
    v235 = (void **)&unk_1E25C81B0;
    v236 = xmmword_18D314680;
    v238 = v239;
    sub_18D053B2C((uint64_t)&v230, (uint64_t)&v220, (uint64_t)&v235);
    sub_18D053AA8((uint64_t)&v250, (uint64_t)&v235);
    v222 = 0x100000006;
    v125 = v244[0] + 88 * v49;
    v220 = &unk_1E25C8120;
    v221 = xmmword_18D319950;
    v223 = v224;
    sub_18D053B2C((uint64_t)&v270, v125, (uint64_t)&v220);
    v227 = 0x100000006;
    v225 = &unk_1E25C8120;
    v226 = xmmword_18D319950;
    v228 = v229;
    sub_18D0540FC((uint64_t)&v245, (uint64_t)&v220, (uint64_t)&v225);
    v232 = 0x100000006;
    v230 = &unk_1E25C8120;
    v231 = xmmword_18D319950;
    v233 = v234;
    sub_18D053B2C((uint64_t)&v250, (uint64_t)&v225, (uint64_t)&v230);
    v237 = 0x100000006;
    v235 = (void **)&unk_1E25C8120;
    v236 = xmmword_18D319950;
    v238 = v239;
    sub_18D053FA4(v125, (uint64_t)&v230, (uint64_t)&v235);
    sub_18D053AA8(v242[0] + 88 * v49, (uint64_t)&v235);
    v227 = 0x600000006;
    v225 = &unk_1E25C81B0;
    v228 = v229;
    v226 = xmmword_18D314680;
    sub_18D04BE88((uint64_t)&v225, 0.0);
    v126 = 0;
    v127 = HIDWORD(v226) + 1;
    v128 = v228;
    v129 = 6;
    do
    {
      v128[v126] = 0x3FF0000000000000;
      v126 += v127;
      --v129;
    }
    while (v129);
    v222 = 0x600000006;
    v220 = &unk_1E25C81B0;
    v221 = xmmword_18D314680;
    v223 = v224;
    sub_18D053B2C((uint64_t)&v250, (uint64_t)&v270, (uint64_t)&v220);
    v232 = 0x600000006;
    v230 = &unk_1E25C81B0;
    v231 = xmmword_18D314680;
    v233 = v234;
    sub_18D0540FC((uint64_t)&v225, (uint64_t)&v220, (uint64_t)&v230);
    v237 = 0x600000006;
    v235 = (void **)&unk_1E25C81B0;
    v236 = xmmword_18D314680;
    v238 = v239;
    sub_18D053B2C((uint64_t)&v230, v243[0] + 328 * v49, (uint64_t)&v235);
    sub_18D053AA8(v241[0] + 328 * v49, (uint64_t)&v235);
    if (v209 <= v49)
    {
      v49 = (v208 + 1);
      LODWORD(v208) = v208 + 1;
    }
    else
    {
      v237 = 0x100000006;
      v235 = (void **)&unk_1E25C8120;
      v236 = xmmword_18D319950;
      v238 = v239;
      sub_18D053B2C(v240[0] + 328 * v49, v242[0] + 88 * v49, (uint64_t)&v235);
      v208 = (v208 + 1);
      sub_18D053AA8(v244[0] + 88 * v208, (uint64_t)&v235);
      v227 = 0x600000006;
      v225 = &unk_1E25C81B0;
      v226 = xmmword_18D314680;
      v228 = v229;
      sub_18D053B2C(v240[0] + 328 * v49, v241[0] + 328 * v49, (uint64_t)&v225);
      v130 = v240[0] + 328 * v49;
      v132 = *(_DWORD *)(v130 + 8);
      v131 = *(_DWORD *)(v130 + 12);
      v222 = 0x600000006;
      v220 = &unk_1E25C81B0;
      *(_QWORD *)&v221 = __PAIR64__(v132, v131);
      DWORD2(v221) = v132 * v131;
      HIDWORD(v221) = v131;
      v223 = v224;
      sub_18D073454(v130, (uint64_t)&v220);
      v232 = 0x600000006;
      v230 = &unk_1E25C81B0;
      v231 = xmmword_18D314680;
      v233 = v234;
      sub_18D053B2C((uint64_t)&v225, (uint64_t)&v220, (uint64_t)&v230);
      v212 = 0x600000006;
      v210 = &unk_1E25C81B0;
      v211 = xmmword_18D314680;
      v213 = v214;
      sub_18D053B2C((uint64_t)&v265, (uint64_t)&v255, (uint64_t)&v210);
      v133 = DWORD1(v266);
      v134 = v266;
      v296 = 0x600000006;
      *(_QWORD *)v295 = &unk_1E25C81B0;
      v297 = v298;
      *(_DWORD *)&v295[8] = DWORD1(v266);
      *(_DWORD *)&v295[12] = v266;
      *(_DWORD *)&v295[16] = v266 * DWORD1(v266);
      *(_DWORD *)&v295[20] = DWORD1(v266);
      if (DWORD1(v266))
      {
        v135 = 0;
        v136 = 0;
        v137 = HIDWORD(v266);
        v138 = v268;
        do
        {
          v139 = v135;
          v140 = v136;
          for (n = v134; n; --n)
          {
            v298[v140] = v138[v139];
            v140 += v133;
            ++v139;
          }
          ++v136;
          v135 += v137;
        }
        while (v136 != v133);
      }
      *(_QWORD *)&v217 = 0x600000006;
      v215 = (void (**)(cnnavigation::ECEFToENUJacobian *__hidden))&unk_1E25C81B0;
      v216 = xmmword_18D314680;
      *((_QWORD *)&v217 + 1) = v218;
      sub_18D053B2C((uint64_t)&v210, (uint64_t)v295, (uint64_t)&v215);
      v237 = 0x600000006;
      v235 = (void **)&unk_1E25C81B0;
      v236 = xmmword_18D314680;
      v238 = v239;
      sub_18D053FA4((uint64_t)&v230, (uint64_t)&v215, (uint64_t)&v235);
      sub_18D053AA8(v243[0] + 328 * v208, (uint64_t)&v235);
      v49 = v208;
    }
  }
  while (v49 < v24);
  v237 = 0x600000006;
  v235 = (void **)&unk_1E25C81B0;
  v238 = v239;
  v236 = xmmword_18D314680;
  sub_18D04BE88((uint64_t)&v235, 0.0);
  v142 = 0;
  v143 = HIDWORD(v236) + 1;
  v144 = 6;
  v145 = v238;
  do
  {
    v145[v142] = 0x3FF0000000000000;
    v142 += v143;
    --v144;
  }
  while (v144);
  v146 = 0;
  v292 = 0x100000006;
  v290 = &unk_1E25C8120;
  v291 = xmmword_18D319950;
  v293 = v294;
  v232 = 0x600000006;
  v230 = &unk_1E25C81B0;
  v231 = xmmword_18D314680;
  v233 = v234;
  do
  {
    v147 = v204 - v146;
    v148 = v241[0];
    v149 = v240[0] + 328 * (v204 - v146);
    v151 = *(_DWORD *)(v149 + 8);
    v150 = *(_DWORD *)(v149 + 12);
    *(_QWORD *)&v217 = 0x600000006;
    v215 = (void (**)(cnnavigation::ECEFToENUJacobian *__hidden))&unk_1E25C81B0;
    *(_QWORD *)&v216 = __PAIR64__(v151, v150);
    DWORD2(v216) = v151 * v150;
    HIDWORD(v216) = v150;
    *((_QWORD *)&v217 + 1) = v218;
    sub_18D073454(v149, (uint64_t)&v215);
    v222 = 0x600000006;
    v220 = &unk_1E25C81B0;
    v221 = xmmword_18D314680;
    v223 = v224;
    sub_18D053B2C(v148 + 328 * (v204 - v146), (uint64_t)&v215, (uint64_t)&v220);
    v152 = v204 - v146 + 1;
    v212 = 0x600000006;
    v210 = &unk_1E25C81B0;
    v211 = xmmword_18D314680;
    v213 = v214;
    v282 = 0x100000006;
    v280 = &unk_1E25C8150;
    v281 = xmmword_18D319950;
    v283 = v284;
    v296 = 0x100000018;
    *(_QWORD *)v295 = &unk_1E25C7010;
    *(_OWORD *)&v295[8] = xmmword_18D319B80;
    v297 = v298;
    sub_18D04F504(v243[0] + 328 * v152, (uint64_t)&v280, (uint64_t)v295, (uint64_t)&v210);
    v227 = 0x600000006;
    v225 = &unk_1E25C81B0;
    v226 = xmmword_18D314680;
    v228 = v229;
    sub_18D053B2C((uint64_t)&v220, (uint64_t)&v210, (uint64_t)&v225);
    sub_18D053AA8((uint64_t)&v235, (uint64_t)&v225);
    v153 = v242[0];
    *(_QWORD *)&v217 = 0x100000006;
    v215 = (void (**)(cnnavigation::ECEFToENUJacobian *__hidden))&unk_1E25C8120;
    v216 = xmmword_18D319950;
    *((_QWORD *)&v217 + 1) = v218;
    sub_18D0540FC(v242[0] + 88 * v152, v244[0] + 88 * v152, (uint64_t)&v215);
    v222 = 0x100000006;
    v220 = &unk_1E25C8120;
    v221 = xmmword_18D319950;
    v223 = v224;
    sub_18D053B2C((uint64_t)&v235, (uint64_t)&v215, (uint64_t)&v220);
    v227 = 0x100000006;
    v225 = &unk_1E25C8120;
    v226 = xmmword_18D319950;
    v228 = v229;
    sub_18D053FA4(v153 + 88 * (v204 - v146), (uint64_t)&v220, (uint64_t)&v225);
    sub_18D053AA8(v242[0] + 88 * (v204 - v146), (uint64_t)&v225);
    v154 = v241[0];
    v212 = 0x600000006;
    v210 = &unk_1E25C81B0;
    v211 = xmmword_18D314680;
    v213 = v214;
    sub_18D0540FC(v241[0] + 328 * v152, v243[0] + 328 * v152, (uint64_t)&v210);
    *(_QWORD *)&v217 = 0x600000006;
    v215 = (void (**)(cnnavigation::ECEFToENUJacobian *__hidden))&unk_1E25C81B0;
    v216 = xmmword_18D314680;
    *((_QWORD *)&v217 + 1) = v218;
    sub_18D053B2C((uint64_t)&v235, (uint64_t)&v210, (uint64_t)&v215);
    v155 = DWORD1(v236);
    v156 = v236;
    v296 = 0x600000006;
    *(_QWORD *)v295 = &unk_1E25C81B0;
    v297 = v298;
    *(_DWORD *)&v295[8] = DWORD1(v236);
    *(_DWORD *)&v295[12] = v236;
    *(_DWORD *)&v295[16] = v236 * DWORD1(v236);
    *(_DWORD *)&v295[20] = DWORD1(v236);
    if (DWORD1(v236))
    {
      v157 = 0;
      v158 = 0;
      v159 = HIDWORD(v236);
      v160 = v238;
      do
      {
        v161 = v157;
        v162 = v158;
        for (ii = v156; ii; --ii)
        {
          v298[v162] = v160[v161];
          v162 += v155;
          ++v161;
        }
        ++v158;
        v157 += v159;
      }
      while (v158 != v155);
    }
    v222 = 0x600000006;
    v220 = &unk_1E25C81B0;
    v221 = xmmword_18D314680;
    v223 = v224;
    sub_18D053B2C((uint64_t)&v215, (uint64_t)v295, (uint64_t)&v220);
    v227 = 0x600000006;
    v225 = &unk_1E25C81B0;
    v226 = xmmword_18D314680;
    v228 = v229;
    sub_18D053FA4(v154 + 328 * v147, (uint64_t)&v220, (uint64_t)&v225);
    sub_18D053AA8(v241[0] + 328 * v147, (uint64_t)&v225);
    ++v146;
  }
  while (v146 != v209);
  v164 = 0;
  v165 = 0;
  for (jj = 0; jj != v24; ++jj)
  {
    v167 = 0;
    v168 = *(_QWORD *)(v242[0] + 88 * jj + 32);
    v169 = *a12 + 48 * jj;
    v170 = v241[0] + 328 * jj;
    v171 = *(int *)(v170 + 20);
    v172 = *(_QWORD **)(v170 + 32);
    v173 = *a13 + v165;
    v174 = 8 * v171;
    do
    {
      v175 = 0;
      *(_QWORD *)(v169 + 8 * v167) = *(_QWORD *)(v168 + 8 * v167);
      v176 = v172;
      do
      {
        *(_QWORD *)(v173 + v175) = *v176;
        v175 += 8;
        v176 = (_QWORD *)((char *)v176 + v174);
      }
      while (v175 != 48);
      ++v167;
      v173 += 48;
      ++v172;
    }
    while (v167 != 6);
    v177 = 0;
    v178 = v248;
    v179 = *v207 + v164;
    do
    {
      v178[v177] = *(_QWORD *)(v179 + v177 * 8);
      ++v177;
    }
    while (v177 != 6);
    v222 = 0x100000006;
    v220 = &unk_1E25C8120;
    v221 = xmmword_18D319950;
    v223 = v224;
    sub_18D053B2C((uint64_t)&v270, v244[0] + 88 * jj, (uint64_t)&v220);
    v227 = 0x100000006;
    v225 = &unk_1E25C8120;
    v226 = xmmword_18D319950;
    v228 = v229;
    sub_18D0540FC((uint64_t)&v245, (uint64_t)&v220, (uint64_t)&v225);
    sub_18D053AA8((uint64_t)&v290, (uint64_t)&v225);
    v180 = 0;
    v181 = v293;
    v182 = *a15 + v164;
    do
    {
      *(_QWORD *)(v182 + v180 * 8) = v181[v180];
      ++v180;
    }
    while (v180 != 6);
    v183 = (double *)(*v205 + 24 * jj);
    v184 = v278;
    *v278 = *v183 * *v183;
    v185 = HIDWORD(v276);
    v184[HIDWORD(v276) + 1] = v183[1] * v183[1];
    v184[2 * v185 + 2] = v183[2] * v183[2];
    v186 = (double *)(*v206 + 24 * jj);
    v184[3 * v185 + 3] = *v186 * *v186;
    v184[4 * v185 + 4] = v186[1] * v186[1];
    v184[5 * v185 + 5] = v186[2] * v186[2];
    *(_QWORD *)&v217 = 0x600000006;
    v215 = (void (**)(cnnavigation::ECEFToENUJacobian *__hidden))&unk_1E25C81B0;
    v216 = xmmword_18D314680;
    *((_QWORD *)&v217 + 1) = v218;
    sub_18D053B2C((uint64_t)&v270, v243[0] + 328 * jj, (uint64_t)&v215);
    v187 = DWORD1(v271);
    v188 = v271;
    v212 = 0x600000006;
    v210 = &unk_1E25C81B0;
    v213 = v214;
    *(_QWORD *)&v211 = __PAIR64__(v271, DWORD1(v271));
    DWORD2(v211) = v271 * DWORD1(v271);
    HIDWORD(v211) = DWORD1(v271);
    if (DWORD1(v271))
    {
      v189 = 0;
      v190 = 0;
      v191 = HIDWORD(v271);
      v192 = v273;
      do
      {
        v193 = v189;
        v194 = v190;
        for (kk = v188; kk; --kk)
        {
          v214[v194] = v192[v193];
          v194 += v187;
          ++v193;
        }
        ++v190;
        v189 += v191;
      }
      while (v190 != v187);
    }
    v222 = 0x600000006;
    v220 = &unk_1E25C81B0;
    v221 = xmmword_18D314680;
    v223 = v224;
    sub_18D053B2C((uint64_t)&v215, (uint64_t)&v210, (uint64_t)&v220);
    v227 = 0x600000006;
    v225 = &unk_1E25C81B0;
    v226 = xmmword_18D314680;
    v228 = v229;
    sub_18D053FA4((uint64_t)&v275, (uint64_t)&v220, (uint64_t)&v225);
    sub_18D053AA8((uint64_t)&v230, (uint64_t)&v225);
    v196 = 0;
    v197 = v233;
    v198 = *a16 + v165;
    v199 = 8 * SHIDWORD(v231);
    do
    {
      v200 = 0;
      v201 = v197;
      do
      {
        *(_QWORD *)(v198 + v200) = *v201;
        v200 += 8;
        v201 = (_QWORD *)((char *)v201 + v199);
      }
      while (v200 != 48);
      ++v196;
      v198 += 48;
      ++v197;
    }
    while (v196 != 6);
    v165 += 288;
    v164 += 48;
  }
  v23 = 0;
LABEL_90:
  v235 = (void **)v240;
  sub_18D2D5E1C(&v235);
  v235 = (void **)v241;
  sub_18D2D5E1C(&v235);
  v235 = (void **)v242;
  sub_18D2D5E9C(&v235);
  v235 = (void **)v243;
  sub_18D2D5E1C(&v235);
  v235 = (void **)v244;
  sub_18D2D5E9C(&v235);
  return v23;
}

void sub_18D2D7A58(_Unwind_Exception *a1)
{
  STACK[0x798] = (unint64_t)&STACK[0x8F8];
  sub_18D2D5E1C((void ***)&STACK[0x798]);
  STACK[0x798] = (unint64_t)&STACK[0x910];
  sub_18D2D5E9C((void ***)&STACK[0x798]);
  STACK[0x798] = (unint64_t)&STACK[0x928];
  sub_18D2D5E1C((void ***)&STACK[0x798]);
  STACK[0x798] = (unint64_t)&STACK[0x940];
  sub_18D2D5E9C((void ***)&STACK[0x798]);
  _Unwind_Resume(a1);
}

double sub_18D2D7B58(_DWORD *a1)
{
  double v2;
  uint64_t v3;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v27 = 0x600000006;
  v25 = &unk_1E25C81B0;
  v26 = xmmword_18D314680;
  v28 = &v29;
  v22 = 0x600000006;
  v20 = &unk_1E25C81B0;
  v21 = xmmword_18D314680;
  v23 = &v24;
  v17 = 0x100000006;
  v14 = 0;
  v15 = &unk_1E25C8150;
  v16 = xmmword_18D319950;
  v18 = &v19;
  v12 = 0x10000045CLL;
  v10 = &off_1E25C60E0;
  v13 = 0;
  v11 = xmmword_18D348360;
  sub_18D2D8088((uint64_t)&v10);
  v13 = v14;
  v7 = 0x100000006;
  v5 = &unk_1E25C8120;
  v6 = xmmword_18D319950;
  v8 = &v9;
  v2 = sub_18D186C18(a1, (uint64_t)&v25, (uint64_t)&v20, (uint64_t)&v15, (uint64_t)&v10, (uint64_t)&v5, "2");
  v3 = v14;
  v10 = &off_1E25C60E0;
  v14 = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  return v2;
}

void sub_18D2D7CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a28)
    MEMORY[0x18D78B5BC](a28, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D2D7D00(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_18D07AFE4();
  v4 = (char *)sub_18D2D36B0((uint64_t)(a1 + 2), a2);
  *a1 = v4;
  a1[1] = v4;
  a1[2] = &v4[88 * v5];
  v6 = 88 * a2;
  v7 = v4 + 40;
  do
  {
    *((_QWORD *)v7 - 2) = 0x100000006;
    *((_QWORD *)v7 - 5) = &unk_1E25C8120;
    *((_OWORD *)v7 - 2) = xmmword_18D319950;
    *((_QWORD *)v7 - 1) = v7;
    v7 += 88;
    v6 -= 88;
  }
  while (v6);
  a1[1] = &v4[88 * a2];
  return a1;
}

void sub_18D2D7DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_18D2D5E9C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2D7DD4(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 >= 0xC7CE0C7CE0C7CFLL)
    sub_18D07AFE4();
  v4 = (char *)sub_18D2D3748((uint64_t)(a1 + 2), a2);
  *a1 = v4;
  a1[1] = v4;
  a1[2] = &v4[328 * v5];
  v6 = 328 * a2;
  v7 = v4 + 40;
  do
  {
    *((_QWORD *)v7 - 2) = 0x600000006;
    *((_QWORD *)v7 - 5) = &unk_1E25C81B0;
    *((_OWORD *)v7 - 2) = xmmword_18D314680;
    *((_QWORD *)v7 - 1) = v7;
    v7 += 328;
    v6 -= 328;
  }
  while (v6);
  a1[1] = &v4[328 * a2];
  return a1;
}

void sub_18D2D7E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_18D2D5E1C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2D7EA4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C60E0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

void sub_18D2D7F00(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C60E0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2D7F6C(uint64_t a1)
{
  uint64_t result;

  result = sub_18D2D8088(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D2D7F94(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x45CuLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D2D8088(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x22E0uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

uint64_t swan::PositionVelocityDataEditor::TestNormalizedInnovations(double a1, uint64_t a2, uint64_t a3, uint64_t *a4, double **a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  float64_t *v14;
  float64_t v15;
  float64x2_t v16;
  uint64_t v17;
  _BYTE v19[48];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = *a4;
    v10 = *a5;
    v11 = *a7;
    do
    {
      v12 = 0;
      v13 = v10;
      do
      {
        v14 = v13 + 7;
        v15 = *v13;
        v13 += 14;
        v16.f64[0] = v15;
        v16.f64[1] = *v14;
        *(float64x2_t *)&v19[v12] = vdivq_f64(vabsq_f64(*(float64x2_t *)(v9 + v12)), vsqrtq_f64(v16));
        v12 += 16;
      }
      while (v12 != 48);
      v17 = 0;
      while (*(double *)&v19[v17] <= a1)
      {
        v17 += 8;
        if (v17 == 48)
          goto LABEL_10;
      }
      *(_QWORD *)(v11 + 8 * v8++) = v7;
LABEL_10:
      ++v7;
      v10 += 36;
      v9 += 48;
    }
    while (v7 != a3);
  }
  else
  {
    v8 = 0;
  }
  *a6 = v8;
  return 0;
}

BOOL swan::PositionVelocityDataEditor::isIndexInArray(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD **a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!a3)
    return 0;
  if (**a4 == a2)
    return 1;
  v5 = 1;
  do
  {
    v6 = v5;
    if (a3 == v5)
      break;
    v7 = (*a4)[v5++];
  }
  while (v7 != a2);
  return v6 < a3;
}

uint64_t swan::ConsistencyChecker::UpdateNormalizedInnovationsSquared(uint64_t a1, unint64_t a2, unsigned int a3, _QWORD *a4, _QWORD *a5, double *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  int v27;
  int v28;
  unsigned int i;
  __int128 v30;
  double v31;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[6];
  void *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  double *v57;
  uint64_t v58;
  void *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  void *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;

  *a6 = 0.0;
  v72 = 0x100000006;
  v67 = &unk_1E25C8120;
  v68 = a3;
  v69 = 1;
  v70 = a3;
  v71 = a3;
  v73 = &v74;
  v64 = 0x600000006;
  v59 = &unk_1E25C81B0;
  v60 = a3;
  v61 = a3;
  v62 = a3 * a3;
  v63 = a3;
  v65 = &v66;
  if (a2)
  {
    v8 = 0;
    v9 = 0;
    v10 = a3;
    do
    {
      if (a3)
      {
        v11 = 0;
        v12 = *a4 + 48 * v9;
        v13 = v73;
        v14 = v63;
        v15 = v65;
        v16 = (uint64_t *)(*a5 + v8);
        do
        {
          v13[(int)v11] = *(_QWORD *)(v12 + 8 * v11);
          v17 = v16;
          v18 = v11;
          v19 = v10;
          do
          {
            v20 = *v17++;
            v15[v18] = v20;
            v18 += v14;
            --v19;
          }
          while (v19);
          ++v11;
          v16 += 6;
        }
        while (v11 != v10);
      }
      v21 = v69;
      v22 = v68;
      v46 = 0x600000001;
      v41 = &unk_1E25C6D40;
      v47 = v48;
      v42 = v69;
      v43 = v68;
      v44 = v68 * v69;
      v45 = v69;
      if (v69)
      {
        v23 = 0;
        v24 = 0;
        v25 = v71;
        v26 = v73;
        do
        {
          v27 = v23;
          v28 = v24;
          for (i = v22; i; --i)
          {
            v48[v28] = v26[v27];
            v28 += v21;
            ++v27;
          }
          ++v24;
          v23 += v25;
        }
        while (v24 != v21);
      }
      v38 = 0x600000006;
      v36 = &unk_1E25C81B0;
      v37 = xmmword_18D314680;
      v39 = &v40;
      v82 = 0x100000006;
      v80 = &unk_1E25C8150;
      v81 = xmmword_18D319950;
      v83 = &v84;
      v77 = 0x100000018;
      v75 = &unk_1E25C7010;
      v76 = xmmword_18D319B80;
      v78 = &v79;
      sub_18D04F504((uint64_t)&v59, (uint64_t)&v80, (uint64_t)&v75, (uint64_t)&v36);
      v51 = 0x600000001;
      v49 = &unk_1E25C6D40;
      v50 = xmmword_18D319A00;
      v52 = &v53;
      sub_18D053B2C((uint64_t)&v41, (uint64_t)&v36, (uint64_t)&v49);
      v56 = 0x100000001;
      v54 = &unk_1E25C6A40;
      *(_QWORD *)&v30 = 0x100000001;
      *((_QWORD *)&v30 + 1) = 0x100000001;
      v55 = v30;
      v57 = (double *)&v58;
      sub_18D053B2C((uint64_t)&v49, (uint64_t)&v67, (uint64_t)&v54);
      v31 = *v57 + *a6;
      *a6 = v31;
      ++v9;
      v8 += 288;
    }
    while (v9 != a2);
  }
  else
  {
    v31 = 0.0;
  }
  *a6 = v31 / (double)a2;
  return 0;
}

uint64_t swan::ConsistencyChecker::UpdateNormalizedStateEstimationErrorSquared(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6, double *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  int v29;
  int v30;
  int i;
  double v32;
  void *v37;
  __int128 v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE v41[48];
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  uint64_t v59;
  double *v60;
  uint64_t v61;
  void *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void *v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD v90[25];

  *a7 = 0.0;
  v83 = 0x100000006;
  v78 = &unk_1E25C8120;
  v79 = a3;
  v80 = 1;
  v81 = a3;
  v82 = a3;
  v84 = &v85;
  v75 = 0x600000006;
  v70 = &unk_1E25C81B0;
  v71 = a3;
  v72 = a3;
  v73 = a3 * a3;
  v74 = a3;
  v76 = &v77;
  v67 = 0x100000006;
  v62 = &unk_1E25C8120;
  v63 = a3;
  v64 = 1;
  v65 = a3;
  v66 = a3;
  v68 = &v69;
  if (a2)
  {
    v10 = 0;
    v11 = a3;
    do
    {
      if (a3)
      {
        v12 = 0;
        v13 = v84;
        v14 = v68;
        v15 = v74;
        v16 = v76;
        v17 = a5;
        do
        {
          v18 = (int)v12;
          v13[v18] = *(_QWORD *)(a4 + 48 * v10 + 8 * v12);
          v14[v18] = *(_QWORD *)(a6 + 48 * v10 + 8 * v12);
          v19 = v17;
          v20 = v12;
          v21 = a3;
          do
          {
            v22 = *v19++;
            v16[v20] = v22;
            v20 += v15;
            --v21;
          }
          while (v21);
          ++v12;
          v17 += 6;
        }
        while (v12 != v11);
      }
      v49 = 0x100000006;
      v47 = &unk_1E25C8120;
      v48 = xmmword_18D319950;
      v50 = &v51;
      sub_18D0540FC((uint64_t)&v78, (uint64_t)&v62, (uint64_t)&v47);
      v44 = 0x600000006;
      v42 = &unk_1E25C81B0;
      v43 = xmmword_18D314680;
      v45 = &v46;
      v39 = 0x100000006;
      v37 = &unk_1E25C8150;
      v38 = xmmword_18D319950;
      v40 = v41;
      v88 = 0x100000018;
      v86 = &unk_1E25C7010;
      v87 = xmmword_18D319B80;
      v89 = v90;
      sub_18D04F504((uint64_t)&v70, (uint64_t)&v37, (uint64_t)&v86, (uint64_t)&v42);
      v54 = 0x600000006;
      v52 = &unk_1E25C81B0;
      v53 = xmmword_18D314680;
      v55 = &v56;
      sub_18D053B2C((uint64_t)&v47, (uint64_t)&v42, (uint64_t)&v52);
      v39 = 0x100000006;
      v37 = &unk_1E25C8120;
      v38 = xmmword_18D319950;
      v40 = v41;
      sub_18D0540FC((uint64_t)&v78, (uint64_t)&v62, (uint64_t)&v37);
      v24 = v38;
      v23 = DWORD1(v38);
      v88 = 0x600000001;
      v86 = &unk_1E25C6D40;
      v89 = v90;
      *(_QWORD *)&v87 = __PAIR64__(v38, DWORD1(v38));
      DWORD2(v87) = v38 * DWORD1(v38);
      HIDWORD(v87) = DWORD1(v38);
      if (DWORD1(v38))
      {
        v25 = 0;
        v26 = 0;
        v27 = HIDWORD(v38);
        v28 = v40;
        do
        {
          v29 = v25;
          v30 = v26;
          for (i = v24; i; --i)
          {
            v90[v30] = *(_QWORD *)&v28[8 * v29];
            v30 += v23;
            ++v29;
          }
          ++v26;
          v25 += v27;
        }
        while (v26 != v23);
      }
      v59 = 0x600000006;
      v57 = &unk_1E25C81B0;
      v58 = xmmword_18D314680;
      v60 = (double *)&v61;
      sub_18D053B2C((uint64_t)&v52, (uint64_t)&v86, (uint64_t)&v57);
      v32 = *v60 + *a7;
      *a7 = v32;
      ++v10;
      a5 += 36;
    }
    while (v10 != a2);
  }
  else
  {
    v32 = 0.0;
  }
  *a7 = v32 / (double)a2;
  return 0;
}

uint64_t trackrun::ConvertProtobufToGEOMapRunningTrackDataEvent(trackrun *this, const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *a2, trackrun::GEOMapRunningTrackDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v10;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  double v36;
  double v37;
  double *v38;
  void *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  double *v45;
  char *v46;
  char *v47;
  double *v48;
  double v49;
  double v50;
  __int128 v51;
  double v52;
  double v54;
  double v55;
  double v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  double v84;
  double v85;
  double v86;
  double v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  double v96;
  double v97;
  double *v98;
  void *v99;
  int64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  double *v104;
  char *v105;
  char *v106;
  double *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  int64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  void *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  uint64_t v165;
  double v166;
  double v167;
  char *v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  __int128 v185;
  __int128 v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  __int128 v194;
  __int128 v195;
  char v197;
  char *v198;
  uint64_t *v199;
  _QWORD *v200;
  const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *v201;
  _QWORD *v202;
  uint64_t v203;
  void *__p[2];
  unint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  void *v209[2];
  char *v210;
  __int128 v211;
  __int128 v212;
  _BYTE v213[24];
  __int128 v214;
  unint64_t v215;
  unsigned __int8 v216;
  _QWORD v217[6];

  if ((*((_BYTE *)this + 48) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData::default_instance_ + 8);
  }
  v14 = trackrun::ConvertProtobufToTrackRunTime(v13, (uint64_t)a2 + 32, 0, a4, a5, a6, a7, a8, a9, a10);
  v10 = 0;
  if (v14)
  {
    v15 = *((_QWORD *)a2 + 1);
    v199 = (uint64_t *)((char *)a2 + 8);
    for (i = *((_QWORD *)a2 + 2); i != v15; sub_18D2DB938(i))
      i -= 104;
    *((_QWORD *)a2 + 2) = v15;
    v17 = (char *)sub_18D2D9DD8(v199, *((int *)this + 6));
    if ((*((_BYTE *)this + 48) & 4) != 0)
      *((_BYTE *)a2 + 80) = *((_BYTE *)this + 40);
    v23 = *((int *)this + 6);
    v10 = 1;
    if ((_DWORD)v23)
    {
      v24 = (_QWORD *)*((_QWORD *)this + 2);
      v200 = &v24[v23];
      v198 = (char *)a2 + 24;
      v201 = a2;
      while (1)
      {
        v202 = v24;
        v25 = *v24;
        v209[0] = 0;
        v209[1] = 0;
        v210 = 0;
        LOBYTE(v214) = 0;
        BYTE8(v214) = 0;
        v215 = 0;
        v212 = 0u;
        memset(v213, 0, 20);
        v203 = v25;
        v26 = *(int *)(v25 + 24);
        if ((_DWORD)v26)
        {
          if ((v26 & 0x80000000) != 0)
            sub_18D07AFE4();
          *((_QWORD *)&v206 + 1) = v213;
          __p[0] = sub_18D2DBB78((uint64_t)v213, v26);
          __p[1] = __p[0];
          v205 = (unint64_t)__p[0];
          *(_QWORD *)&v206 = (char *)__p[0] + 72 * v27;
          sub_18D2DBB04((uint64_t *)&v212, __p);
          v17 = (char *)sub_18D2DBCEC((uint64_t)__p);
          v28 = *(int *)(v203 + 24);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)(v203 + 16);
            v30 = &v29[v28];
            do
            {
              v31 = *v29;
              if (*(_DWORD *)(*v29 + 16))
              {
                BYTE8(v206) = 0;
                LOBYTE(v207) = 0;
                BYTE8(v207) = 0;
                LOBYTE(v208) = 0;
                __p[1] = 0;
                v205 = 0;
                LODWORD(v206) = 0;
                __p[0] = 0;
                *((_QWORD *)&v208 + 1) = 0xBFF0000000000000;
                sub_18D265580(__p, *(int *)(v31 + 16));
                v32 = *(int *)(v31 + 16);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)(v31 + 8);
                  v34 = &v33[v32];
                  do
                  {
                    v35 = *v33;
                    if ((~*(_DWORD *)(*v33 + 28) & 3) != 0)
                    {
                      LOWORD(v217[0]) = 13;
                      v216 = 2;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v217, &v216, "Warning,coordinate has no data", v18, v19, v20, v21, v22, v197);
                    }
                    else
                    {
                      v36 = *(double *)(v35 + 8);
                      if (v36 < -90.0 || v36 > 90.0)
                      {
                        LOWORD(v217[0]) = 13;
                        v216 = 4;
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v217, &v216, "Coordinate has invalid latitude,%.7lf", v18, v19, v20, v21, v22, SLOBYTE(v36));
                      }
                      else
                      {
                        v37 = *(double *)(v35 + 16);
                        if (v37 < -180.0 || v37 > 360.0)
                        {
                          LOWORD(v217[0]) = 13;
                          v216 = 4;
                          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v217, &v216, "Coordinate has invalid longitude,%.7lf", v18, v19, v20, v21, v22, SLOBYTE(v37));
                        }
                        else
                        {
                          v38 = (double *)__p[1];
                          if (__p[1] >= (void *)v205)
                          {
                            v40 = ((char *)__p[1] - (char *)__p[0]) >> 4;
                            v41 = v40 + 1;
                            if ((unint64_t)(v40 + 1) >> 60)
                              sub_18D07AFE4();
                            v42 = v205 - (unint64_t)__p[0];
                            if ((uint64_t)(v205 - (unint64_t)__p[0]) >> 3 > v41)
                              v41 = v42 >> 3;
                            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
                              v43 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v43 = v41;
                            if (v43)
                              v44 = (char *)sub_18D16735C((uint64_t)&v205, v43);
                            else
                              v44 = 0;
                            v45 = (double *)&v44[16 * v40];
                            *v45 = v36;
                            v45[1] = v37;
                            v47 = (char *)__p[0];
                            v46 = (char *)__p[1];
                            v48 = v45;
                            if (__p[1] != __p[0])
                            {
                              do
                              {
                                *((_OWORD *)v48 - 1) = *((_OWORD *)v46 - 1);
                                v48 -= 2;
                                v46 -= 16;
                              }
                              while (v46 != v47);
                              v46 = (char *)__p[0];
                            }
                            v39 = v45 + 2;
                            __p[0] = v48;
                            __p[1] = v45 + 2;
                            v205 = (unint64_t)&v44[16 * v43];
                            if (v46)
                              operator delete(v46);
                          }
                          else
                          {
                            *(double *)__p[1] = v36;
                            v38[1] = v37;
                            v39 = v38 + 2;
                          }
                          __p[1] = v39;
                        }
                      }
                    }
                    ++v33;
                  }
                  while (v33 != v34);
                }
                v17 = (char *)__p[0];
                if (__p[0] != __p[1])
                {
                  v49 = *(double *)__p[0];
                  v50 = *((double *)__p[1] - 2);
                  if (*(double *)__p[0] != v50)
                  {
                    if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                      || (*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                    {
                      goto LABEL_66;
                    }
                    v84 = vabdd_f64(v49, v50);
                    v85 = fabs(v49);
                    v86 = fabs(v50);
                    if (v85 < v86)
                      v85 = v86;
                    v87 = v85 >= 1.0 ? v85 * 2.22044605e-16 : 2.22044605e-16;
                    if (v84 > v87)
                      goto LABEL_66;
                  }
                  *(_QWORD *)&v51 = *((_QWORD *)__p[0] + 1);
                  v52 = *((double *)__p[1] - 1);
                  if (*(double *)&v51 != v52)
                  {
                    if (((unint64_t)v51 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
                      || (*(_QWORD *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                    {
                      goto LABEL_66;
                    }
                    v54 = vabdd_f64(*(double *)&v51, v52);
                    v55 = fabs(*(double *)&v51);
                    v56 = fabs(v52);
                    if (v55 < v56)
                      v55 = v56;
                    *(double *)&v51 = v55 >= 1.0 ? v55 * 2.22044605e-16 : 2.22044605e-16;
                    if (v54 > *(double *)&v51)
                    {
LABEL_66:
                      LOWORD(v217[0]) = 13;
                      v216 = 2;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v217, &v216, "Warning,Lane is not closed, as expected. Closing it", v18, v19, v20, v21, v22, v197);
                      v58 = __p[1];
                      v60 = *((_QWORD *)__p[1] - 2);
                      v59 = *((_QWORD *)__p[1] - 1);
                      if (__p[1] >= (void *)v205)
                      {
                        v62 = ((char *)__p[1] - (char *)__p[0]) >> 4;
                        v63 = v62 + 1;
                        if ((unint64_t)(v62 + 1) >> 60)
                          sub_18D07AFE4();
                        v64 = v205 - (unint64_t)__p[0];
                        if ((uint64_t)(v205 - (unint64_t)__p[0]) >> 3 > v63)
                          v63 = v64 >> 3;
                        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
                          v65 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v65 = v63;
                        if (v65)
                          v66 = (char *)sub_18D16735C((uint64_t)&v205, v65);
                        else
                          v66 = 0;
                        v67 = &v66[16 * v62];
                        *(_QWORD *)v67 = v60;
                        *((_QWORD *)v67 + 1) = v59;
                        v69 = (char *)__p[0];
                        v68 = (char *)__p[1];
                        v70 = v67;
                        if (__p[1] != __p[0])
                        {
                          do
                          {
                            v51 = *((_OWORD *)v68 - 1);
                            *((_OWORD *)v70 - 1) = v51;
                            v70 -= 16;
                            v68 -= 16;
                          }
                          while (v68 != v69);
                          v68 = (char *)__p[0];
                        }
                        v61 = v67 + 16;
                        __p[0] = v70;
                        __p[1] = v67 + 16;
                        v205 = (unint64_t)&v66[16 * v65];
                        if (v68)
                          operator delete(v68);
                      }
                      else
                      {
                        *(_QWORD *)__p[1] = v60;
                        v58[1] = v59;
                        v61 = v58 + 2;
                      }
                      __p[1] = v61;
                    }
                  }
                  v71 = *(_DWORD *)(v31 + 32);
                  if (v71 == 3)
                    v72 = 2;
                  else
                    v72 = v71 == 2;
                  LODWORD(v206) = v72;
                  LODWORD(v51) = *(_DWORD *)(v31 + 40);
                  *((double *)&v208 + 1) = (double)(unint64_t)v51 * 0.001;
                  v73 = *((_QWORD *)&v212 + 1);
                  if (*((_QWORD *)&v212 + 1) >= *(_QWORD *)v213)
                  {
                    v77 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v212 + 1) - v212) >> 3);
                    v78 = v77 + 1;
                    if (v77 + 1 > 0x38E38E38E38E38ELL)
                      sub_18D07AFE4();
                    if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)v213 - v212) >> 3) > v78)
                      v78 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)v213 - v212) >> 3);
                    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v213 - v212) >> 3) >= 0x1C71C71C71C71C7)
                      v79 = 0x38E38E38E38E38ELL;
                    else
                      v79 = v78;
                    v217[4] = v213;
                    if (v79)
                      v80 = (char *)sub_18D2DBB78((uint64_t)v213, v79);
                    else
                      v80 = 0;
                    v81 = &v80[72 * v77];
                    v217[0] = v80;
                    v217[1] = v81;
                    v217[3] = &v80[72 * v79];
                    *(_QWORD *)v81 = 0;
                    *((_QWORD *)v81 + 1) = 0;
                    *((_QWORD *)v81 + 2) = 0;
                    *(_OWORD *)v81 = *(_OWORD *)__p;
                    *((_QWORD *)v81 + 2) = v205;
                    __p[0] = 0;
                    __p[1] = 0;
                    v205 = 0;
                    v82 = v208;
                    v83 = v206;
                    *(_OWORD *)(v81 + 40) = v207;
                    *(_OWORD *)(v81 + 24) = v83;
                    *(_OWORD *)(v81 + 56) = v82;
                    v217[2] = v81 + 72;
                    sub_18D2DBB04((uint64_t *)&v212, v217);
                    v76 = *((_QWORD *)&v212 + 1);
                    sub_18D2DBCEC((uint64_t)v217);
                    v17 = (char *)__p[0];
                  }
                  else
                  {
                    v17 = 0;
                    **((_QWORD **)&v212 + 1) = 0;
                    *(_QWORD *)(v73 + 8) = 0;
                    *(_QWORD *)(v73 + 16) = 0;
                    *(_OWORD *)v73 = *(_OWORD *)__p;
                    *(_QWORD *)(v73 + 16) = v205;
                    __p[0] = 0;
                    __p[1] = 0;
                    v205 = 0;
                    v75 = v207;
                    v74 = v208;
                    *(_OWORD *)(v73 + 24) = v206;
                    *(_OWORD *)(v73 + 40) = v75;
                    *(_OWORD *)(v73 + 56) = v74;
                    v76 = v73 + 72;
                  }
                  *((_QWORD *)&v212 + 1) = v76;
                }
                if (v17)
                {
                  __p[1] = v17;
                  operator delete(v17);
                }
              }
              else
              {
                LOWORD(__p[0]) = 13;
                LOBYTE(v217[0]) = 2;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v217, "Warning,lane has no coordinates", v18, v19, v20, v21, v22, v197);
              }
              ++v29;
            }
            while (v29 != v30);
          }
        }
        v88 = *(_DWORD *)(v203 + 76);
        if ((v88 & 0x40) != 0)
          break;
        if (*((_QWORD *)&v212 + 1) != (_QWORD)v212)
        {
          v89 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v212 + 1) - v212) >> 3);
LABEL_114:
          v215 = v89;
          goto LABEL_115;
        }
        v89 = v215;
LABEL_115:
        if (v89)
        {
          if ((v88 & 1) != 0)
          {
            v90 = *(_QWORD *)(v203 + 8);
            if (!v90)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
              v90 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                              + 8);
            }
            if (*(int *)(v90 + 48) >= 4)
            {
              v91 = *(_QWORD *)(v203 + 8);
              if (!v91)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
                v91 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                                + 8);
              }
              v92 = *(int *)(v91 + 48);
              if ((_DWORD)v92)
              {
                v93 = *(uint64_t **)(v91 + 40);
                v94 = &v93[v92];
                do
                {
                  v95 = *v93;
                  if ((~*(_DWORD *)(*v93 + 28) & 3) != 0)
                  {
                    LOWORD(__p[0]) = 13;
                    LOBYTE(v217[0]) = 2;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v217, "Warning,coordinate has no data", v18, v19, v20, v21, v22, v197);
                  }
                  else
                  {
                    v96 = *(double *)(v95 + 8);
                    if (v96 < -90.0 || v96 > 90.0)
                    {
                      LOWORD(__p[0]) = 13;
                      LOBYTE(v217[0]) = 4;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v217, "Coordinate has invalid latitude,%.7lf", v18, v19, v20, v21, v22, SLOBYTE(v96));
                    }
                    else
                    {
                      v97 = *(double *)(v95 + 16);
                      if (v97 < -180.0 || v97 > 360.0)
                      {
                        LOWORD(__p[0]) = 13;
                        LOBYTE(v217[0]) = 4;
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v217, "Coordinate has invalid longitude,%.7lf", v18, v19, v20, v21, v22, SLOBYTE(v97));
                      }
                      else
                      {
                        v98 = (double *)v209[1];
                        if (v209[1] >= v210)
                        {
                          v100 = ((char *)v209[1] - (char *)v209[0]) >> 4;
                          v101 = v100 + 1;
                          if ((unint64_t)(v100 + 1) >> 60)
                            sub_18D07AFE4();
                          v102 = v210 - (char *)v209[0];
                          if ((v210 - (char *)v209[0]) >> 3 > v101)
                            v101 = v102 >> 3;
                          if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
                            v103 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v103 = v101;
                          if (v103)
                            v17 = (char *)sub_18D16735C((uint64_t)&v210, v103);
                          else
                            v17 = 0;
                          v104 = (double *)&v17[16 * v100];
                          *v104 = v96;
                          v104[1] = v97;
                          v106 = (char *)v209[0];
                          v105 = (char *)v209[1];
                          v107 = v104;
                          if (v209[1] != v209[0])
                          {
                            do
                            {
                              *((_OWORD *)v107 - 1) = *((_OWORD *)v105 - 1);
                              v107 -= 2;
                              v105 -= 16;
                            }
                            while (v105 != v106);
                            v105 = (char *)v209[0];
                          }
                          v99 = v104 + 2;
                          v209[0] = v107;
                          v209[1] = v104 + 2;
                          v210 = &v17[16 * v103];
                          if (v105)
                            operator delete(v105);
                        }
                        else
                        {
                          *(double *)v209[1] = v96;
                          v98[1] = v97;
                          v99 = v98 + 2;
                        }
                        v209[1] = v99;
                      }
                    }
                  }
                  ++v93;
                }
                while (v93 != v94);
              }
              goto LABEL_243;
            }
          }
          v108 = *(_QWORD **)(v203 + 8);
          if (v108)
          {
            v109 = v108[1];
            goto LABEL_156;
          }
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
          v108 = *(_QWORD **)(v203 + 8);
          v109 = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                                       + 8)
                           + 8);
          if (v108)
          {
LABEL_156:
            v110 = v108[4];
            goto LABEL_157;
          }
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
          v108 = *(_QWORD **)(v203 + 8);
          v110 = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                                       + 8)
                           + 32);
          if (v108)
          {
LABEL_157:
            v111 = v108[1];
          }
          else
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
            v108 = *(_QWORD **)(v203 + 8);
            v111 = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                                         + 8)
                             + 8);
            if (!v108)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
              v108 = *(_QWORD **)(v203 + 8);
              v112 = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                                           + 8)
                               + 16);
              if (!v108)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
                v108 = *(_QWORD **)(v203 + 8);
                v113 = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                                             + 8)
                                 + 24);
                if (!v108)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
                  v108 = *(_QWORD **)(v203 + 8);
                  v114 = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                                               + 8)
                                   + 16);
                  if (!v108)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
                    v108 = *(_QWORD **)(v203 + 8);
                    v115 = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                                                 + 8)
                                     + 24);
                    if (!v108)
                    {
                      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v17);
                      v108 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna::default_instance_
                                        + 8);
                    }
                    goto LABEL_162;
                  }
LABEL_161:
                  v115 = v108[3];
LABEL_162:
                  v116 = v108[4];
                  v117 = v209[1];
                  if (v209[1] >= v210)
                  {
                    v119 = ((char *)v209[1] - (char *)v209[0]) >> 4;
                    v120 = v119 + 1;
                    if ((unint64_t)(v119 + 1) >> 60)
                      goto LABEL_297;
                    v121 = v210 - (char *)v209[0];
                    if ((v210 - (char *)v209[0]) >> 3 > v120)
                      v120 = v121 >> 3;
                    if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0)
                      v122 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v122 = v120;
                    if (v122)
                      v17 = (char *)sub_18D16735C((uint64_t)&v210, v122);
                    else
                      v17 = 0;
                    v123 = &v17[16 * v119];
                    *(_QWORD *)v123 = v109;
                    *((_QWORD *)v123 + 1) = v110;
                    v125 = (char *)v209[0];
                    v124 = (char *)v209[1];
                    v126 = v123;
                    if (v209[1] != v209[0])
                    {
                      do
                      {
                        *((_OWORD *)v126 - 1) = *((_OWORD *)v124 - 1);
                        v126 -= 16;
                        v124 -= 16;
                      }
                      while (v124 != v125);
                      v124 = (char *)v209[0];
                    }
                    v118 = v123 + 16;
                    v209[0] = v126;
                    v209[1] = v123 + 16;
                    v210 = &v17[16 * v122];
                    if (v124)
                      operator delete(v124);
                  }
                  else
                  {
                    *(_QWORD *)v209[1] = v109;
                    v117[1] = v110;
                    v118 = (char *)(v117 + 2);
                  }
                  v209[1] = v118;
                  if (v118 >= v210)
                  {
                    v128 = (v118 - (char *)v209[0]) >> 4;
                    if ((unint64_t)(v128 + 1) >> 60)
                      goto LABEL_297;
                    v129 = (v210 - (char *)v209[0]) >> 3;
                    if (v129 <= v128 + 1)
                      v129 = v128 + 1;
                    if ((unint64_t)(v210 - (char *)v209[0]) >= 0x7FFFFFFFFFFFFFF0)
                      v130 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v130 = v129;
                    if (v130)
                      v17 = (char *)sub_18D16735C((uint64_t)&v210, v130);
                    else
                      v17 = 0;
                    v131 = &v17[16 * v128];
                    *(_QWORD *)v131 = v111;
                    *((_QWORD *)v131 + 1) = v112;
                    v133 = (char *)v209[0];
                    v132 = (char *)v209[1];
                    v134 = v131;
                    if (v209[1] != v209[0])
                    {
                      do
                      {
                        *((_OWORD *)v134 - 1) = *((_OWORD *)v132 - 1);
                        v134 -= 16;
                        v132 -= 16;
                      }
                      while (v132 != v133);
                      v132 = (char *)v209[0];
                    }
                    v127 = v131 + 16;
                    v209[0] = v134;
                    v209[1] = v131 + 16;
                    v210 = &v17[16 * v130];
                    if (v132)
                      operator delete(v132);
                  }
                  else
                  {
                    *(_QWORD *)v118 = v111;
                    *((_QWORD *)v118 + 1) = v112;
                    v127 = v118 + 16;
                  }
                  v209[1] = v127;
                  if (v127 >= v210)
                  {
                    v136 = (v127 - (char *)v209[0]) >> 4;
                    if ((unint64_t)(v136 + 1) >> 60)
                      goto LABEL_297;
                    v137 = (v210 - (char *)v209[0]) >> 3;
                    if (v137 <= v136 + 1)
                      v137 = v136 + 1;
                    if ((unint64_t)(v210 - (char *)v209[0]) >= 0x7FFFFFFFFFFFFFF0)
                      v138 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v138 = v137;
                    if (v138)
                      v17 = (char *)sub_18D16735C((uint64_t)&v210, v138);
                    else
                      v17 = 0;
                    v139 = &v17[16 * v136];
                    *(_QWORD *)v139 = v113;
                    *((_QWORD *)v139 + 1) = v114;
                    v141 = (char *)v209[0];
                    v140 = (char *)v209[1];
                    v142 = v139;
                    if (v209[1] != v209[0])
                    {
                      do
                      {
                        *((_OWORD *)v142 - 1) = *((_OWORD *)v140 - 1);
                        v142 -= 16;
                        v140 -= 16;
                      }
                      while (v140 != v141);
                      v140 = (char *)v209[0];
                    }
                    v135 = v139 + 16;
                    v209[0] = v142;
                    v209[1] = v139 + 16;
                    v210 = &v17[16 * v138];
                    if (v140)
                      operator delete(v140);
                  }
                  else
                  {
                    *(_QWORD *)v127 = v113;
                    *((_QWORD *)v127 + 1) = v114;
                    v135 = v127 + 16;
                  }
                  v209[1] = v135;
                  if (v135 >= v210)
                  {
                    v144 = (v135 - (char *)v209[0]) >> 4;
                    if ((unint64_t)(v144 + 1) >> 60)
                      goto LABEL_297;
                    v145 = (v210 - (char *)v209[0]) >> 3;
                    if (v145 <= v144 + 1)
                      v145 = v144 + 1;
                    if ((unint64_t)(v210 - (char *)v209[0]) >= 0x7FFFFFFFFFFFFFF0)
                      v146 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v146 = v145;
                    if (v146)
                      v17 = (char *)sub_18D16735C((uint64_t)&v210, v146);
                    else
                      v17 = 0;
                    v147 = &v17[16 * v144];
                    *(_QWORD *)v147 = v115;
                    *((_QWORD *)v147 + 1) = v116;
                    v149 = (char *)v209[0];
                    v148 = (char *)v209[1];
                    v150 = v147;
                    if (v209[1] != v209[0])
                    {
                      do
                      {
                        *((_OWORD *)v150 - 1) = *((_OWORD *)v148 - 1);
                        v150 -= 16;
                        v148 -= 16;
                      }
                      while (v148 != v149);
                      v148 = (char *)v209[0];
                    }
                    v143 = v147 + 16;
                    v209[0] = v150;
                    v209[1] = v147 + 16;
                    v210 = &v17[16 * v146];
                    if (v148)
                      operator delete(v148);
                  }
                  else
                  {
                    *(_QWORD *)v135 = v115;
                    *((_QWORD *)v135 + 1) = v116;
                    v143 = v135 + 16;
                  }
                  v209[1] = v143;
                  if (v143 >= v210)
                  {
                    v152 = (v143 - (char *)v209[0]) >> 4;
                    if ((unint64_t)(v152 + 1) >> 60)
LABEL_297:
                      sub_18D07AFE4();
                    v153 = (v210 - (char *)v209[0]) >> 3;
                    if (v153 <= v152 + 1)
                      v153 = v152 + 1;
                    if ((unint64_t)(v210 - (char *)v209[0]) >= 0x7FFFFFFFFFFFFFF0)
                      v154 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v154 = v153;
                    if (v154)
                      v17 = (char *)sub_18D16735C((uint64_t)&v210, v154);
                    else
                      v17 = 0;
                    v155 = &v17[16 * v152];
                    *(_QWORD *)v155 = v109;
                    *((_QWORD *)v155 + 1) = v110;
                    v157 = (char *)v209[0];
                    v156 = (char *)v209[1];
                    v158 = v155;
                    if (v209[1] != v209[0])
                    {
                      do
                      {
                        *((_OWORD *)v158 - 1) = *((_OWORD *)v156 - 1);
                        v158 -= 16;
                        v156 -= 16;
                      }
                      while (v156 != v157);
                      v156 = (char *)v209[0];
                    }
                    v151 = v155 + 16;
                    v209[0] = v158;
                    v209[1] = v155 + 16;
                    v210 = &v17[16 * v154];
                    if (v156)
                      operator delete(v156);
                  }
                  else
                  {
                    *(_QWORD *)v143 = v109;
                    *((_QWORD *)v143 + 1) = v110;
                    v151 = v143 + 16;
                  }
                  v209[1] = v151;
LABEL_243:
                  if ((void *)((char *)v209[1] - (char *)v209[0]) <= (void *)0x10)
                  {
                    if (v209[1] == v209[0])
                    {
                      v217[0] = &off_1E25C20B0;
                      __p[0] = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode"
                               ".app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal."
                               "sdk/usr/local/include/boost/geometry/algorithms/centroid.hpp";
                      __p[1] = "BOOL boost::geometry::detail::centroid::range_ok(const Range &, Point &) [Point = boost::"
                               "geometry::model::d2::point_xy<double>, Range = boost::geometry::model::ring<boost::geomet"
                               "ry::model::d2::point_xy<double>, false>]";
                      v205 = 159;
                      sub_18D2DBE0C((int8x16_t *)__p);
                    }
                    v211 = *(_OWORD *)v209[0];
                    v159 = v203;
                  }
                  else
                  {
                    v159 = v203;
                    if (v209[0] != v209[1])
                    {
                      v160 = *(double *)v209[0];
                      if ((char *)v209[0] + 16 != v209[1])
                      {
                        v161 = *((double *)v209[0] + 1);
                        v162 = v161 - v161;
                        v163 = v160 - v160;
                        v164 = 0.0;
                        v165 = 16;
                        v166 = 0.0;
                        v167 = 0.0;
                        do
                        {
                          v168 = (char *)v209[0] + v165 + 16;
                          v169 = *(double *)((char *)v209[0] + v165) - v160;
                          v170 = *(double *)((char *)v209[0] + v165 + 8) - v161;
                          v171 = v163 * v170 - v162 * v169;
                          v164 = v164 + v171;
                          v166 = v166 + v171 * (v163 + v169);
                          v167 = v167 + v171 * (v162 + v170);
                          v165 += 16;
                          v162 = v170;
                          v163 = v169;
                        }
                        while (v168 != v209[1]);
                        if (v164 != 0.0)
                        {
                          if ((*(_QWORD *)&v164 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                            goto LABEL_253;
                          v172 = fabs(v164);
                          v173 = 2.22044605e-16;
                          if (v172 >= 1.0)
                            v173 = v172 * 2.22044605e-16;
                          if (v172 > v173)
                          {
LABEL_253:
                            v174 = v164 * 3.0;
                            if ((*(_QWORD *)&v174 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                            {
                              *(double *)&v211 = v166 / v174;
                              *((double *)&v211 + 1) = v167 / v174;
                              *(double *)&v211 = v166 / v174 + *(double *)v209[0];
                              v175 = v167 / v174 + *((double *)v209[0] + 1);
                              goto LABEL_259;
                            }
                          }
                        }
                      }
                    }
                  }
                  if (v209[0] != v209[1])
                  {
                    *(_QWORD *)&v211 = *(_QWORD *)v209[0];
                    v175 = *((double *)v209[0] + 1);
LABEL_259:
                    *((double *)&v211 + 1) = v175;
                  }
                  if ((void *)((char *)v209[1] - (char *)v209[0]) < (void *)0x31)
                  {
                    LOWORD(__p[0]) = 13;
                    LOBYTE(v217[0]) = 4;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v217, "Bounding box doesn't have at least four coordinates", v18, v19, v20, v21, v22, v197);
                  }
                  else
                  {
                    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v17) <= 1)
                    {
                      LOWORD(__p[0]) = 13;
                      LOBYTE(v217[0]) = 1;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v217, "bbox,1,%.8lf,%.8lf,2,%.8lf,%.8lf,3,%.8lf,%.8lf,4,%.8lf,%.8lf,center,%.8lf,%.8lf", v176, v177, v178, v179, v180, *(_OWORD *)v209[0]);
                    }
                    if ((void *)((char *)v209[1] - (char *)v209[0]) >= (void *)0x51)
                    {
                      LOWORD(__p[0]) = 13;
                      LOBYTE(v217[0]) = 3;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v217, "Warning: Received a non-rectangular bounding box, which is handleable, but unexpected,number of coordinates,%lu", v176, v177, v178, v179, v180, ((char *)v209[1] - (char *)v209[0]) >> 4);
                    }
                  }
                  v181 = *(_DWORD *)(v159 + 48);
                  if (v181 == 3)
                    v182 = 2;
                  else
                    v182 = v181 == 2;
                  *(_DWORD *)&v213[16] = v182;
                  *(_QWORD *)&v213[8] = *(_QWORD *)(v159 + 40);
                  v183 = *((_QWORD *)v201 + 2);
                  v184 = *((_QWORD *)v201 + 3);
                  if (v183 >= v184)
                  {
                    v188 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v183 - *v199) >> 3);
                    v189 = v188 + 1;
                    if ((unint64_t)(v188 + 1) > 0x276276276276276)
                      sub_18D07AFE4();
                    v190 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v184 - *v199) >> 3);
                    if (2 * v190 > v189)
                      v189 = 2 * v190;
                    if (v190 >= 0x13B13B13B13B13BLL)
                      v191 = 0x276276276276276;
                    else
                      v191 = v189;
                    *((_QWORD *)&v206 + 1) = v198;
                    if (v191)
                      v192 = (char *)sub_18D2DB9F0((uint64_t)v198, v191);
                    else
                      v192 = 0;
                    v193 = &v192[104 * v188];
                    __p[0] = v192;
                    __p[1] = v193;
                    *(_QWORD *)&v206 = &v192[104 * v191];
                    *(_QWORD *)v193 = 0;
                    *((_QWORD *)v193 + 1) = 0;
                    *((_QWORD *)v193 + 2) = 0;
                    *(_OWORD *)v193 = *(_OWORD *)v209;
                    *((_QWORD *)v193 + 2) = v210;
                    v209[1] = 0;
                    v210 = 0;
                    v209[0] = 0;
                    *(_OWORD *)(v193 + 24) = v211;
                    *((_QWORD *)v193 + 6) = 0;
                    *((_QWORD *)v193 + 7) = 0;
                    *((_QWORD *)v193 + 5) = 0;
                    *(_OWORD *)(v193 + 40) = v212;
                    *((_QWORD *)v193 + 7) = *(_QWORD *)v213;
                    v212 = 0uLL;
                    *(_QWORD *)v213 = 0;
                    v194 = *(_OWORD *)&v213[8];
                    v195 = v214;
                    *((_QWORD *)v193 + 12) = v215;
                    *((_OWORD *)v193 + 4) = v194;
                    *((_OWORD *)v193 + 5) = v195;
                    v205 = (unint64_t)(v193 + 104);
                    sub_18D2DB97C(v199, __p);
                    v187 = *((_QWORD *)v201 + 2);
                    sub_18D2DBAB8((uint64_t)__p);
                  }
                  else
                  {
                    *(_QWORD *)(v183 + 8) = 0;
                    *(_QWORD *)(v183 + 16) = 0;
                    *(_QWORD *)v183 = 0;
                    *(_OWORD *)v183 = *(_OWORD *)v209;
                    *(_QWORD *)(v183 + 16) = v210;
                    v209[0] = 0;
                    v209[1] = 0;
                    v210 = 0;
                    *(_OWORD *)(v183 + 24) = v211;
                    *(_QWORD *)(v183 + 48) = 0;
                    *(_QWORD *)(v183 + 56) = 0;
                    *(_QWORD *)(v183 + 40) = 0;
                    *(_OWORD *)(v183 + 40) = v212;
                    *(_QWORD *)(v183 + 56) = *(_QWORD *)v213;
                    v212 = 0uLL;
                    *(_QWORD *)v213 = 0;
                    v185 = *(_OWORD *)&v213[8];
                    v186 = v214;
                    *(_QWORD *)(v183 + 96) = v215;
                    *(_OWORD *)(v183 + 64) = v185;
                    *(_OWORD *)(v183 + 80) = v186;
                    v187 = v183 + 104;
                  }
                  *((_QWORD *)v201 + 2) = v187;
                  goto LABEL_282;
                }
LABEL_160:
                v114 = v108[2];
                goto LABEL_161;
              }
LABEL_159:
              v113 = v108[3];
              goto LABEL_160;
            }
          }
          v112 = v108[2];
          goto LABEL_159;
        }
        LOWORD(__p[0]) = 13;
        LOBYTE(v217[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v217, "Warning,track has no lanes", v18, v19, v20, v21, v22, v197);
LABEL_282:
        __p[0] = &v212;
        sub_18D2DBD78((void ***)__p);
        v17 = (char *)v209[0];
        if (v209[0])
        {
          v209[1] = v209[0];
          operator delete(v209[0]);
        }
        v24 = v202 + 1;
        if (v202 + 1 == v200)
          return 1;
      }
      v89 = *(_QWORD *)(v203 + 64);
      goto LABEL_114;
    }
  }
  return v10;
}

void sub_18D2D9C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_18D2D9ECC((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t trackrun::ConvertProtobufToTrackRunTime(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  unsigned int v10;
  int8x16_t v14;
  int8x16_t v15;
  char v17;
  unsigned __int8 v18;
  __int128 v19;

  v10 = *(_DWORD *)(a1 + 36);
  if ((v10 & 4) != 0)
  {
    a9.i64[0] = *(_QWORD *)(a1 + 24);
    v19 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v19, 0, a9, a10);
    v15.i64[1] = *((_QWORD *)&v19 + 1);
    *(_OWORD *)(a2 + 8) = v19;
    *(_BYTE *)a2 = 1;
    if ((a3 & 1) != 0 && (*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      v15.i64[0] = *(_QWORD *)(a1 + 8);
      v19 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v19, 0, v15, v14);
      *(_OWORD *)(a2 + 32) = v19;
      *(_BYTE *)(a2 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
  else
  {
    LOWORD(v19) = 13;
    v18 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "ConvertProtobufToTrackRunTime,mach continuous time not present", a4, a5, a6, a7, a8, v17);
  }
  return (v10 >> 2) & 1;
}

{
  unsigned int v10;
  int8x16_t v14;
  int8x16_t v15;
  char v17;
  unsigned __int8 v18;
  __int128 v19;

  v10 = *(_DWORD *)(a1 + 36);
  if ((v10 & 4) != 0)
  {
    a9.i64[0] = *(_QWORD *)(a1 + 24);
    v19 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v19, 0, a9, a10);
    v15.i64[1] = *((_QWORD *)&v19 + 1);
    *(_OWORD *)(a2 + 8) = v19;
    *(_BYTE *)a2 = 1;
    if ((a3 & 1) != 0 && (*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      v15.i64[0] = *(_QWORD *)(a1 + 8);
      v19 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v19, 0, v15, v14);
      *(_OWORD *)(a2 + 32) = v19;
      *(_BYTE *)(a2 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
  else
  {
    LOWORD(v19) = 13;
    v18 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "ConvertProtobufToTrackRunTime,mach continuous time not present", a4, a5, a6, a7, a8, v17);
  }
  return (v10 >> 2) & 1;
}

uint64_t sub_18D2D9DD8(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x276276276276277)
      sub_18D07AFE4();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_18D2DB9F0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 104 * v6;
    sub_18D2DB97C(a1, v7);
    return sub_18D2DBAB8((uint64_t)v7);
  }
  return result;
}

void sub_18D2D9E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D2DBAB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t trackrun::ConvertProtobufToRunningTrackLaneType(_DWORD *a1)
{
  if (*a1 == 3)
    return 2;
  else
    return *a1 == 2;
}

uint64_t trackrun::ConvertProtobufToRunningTrackType(_DWORD *a1)
{
  if (*a1 == 3)
    return 2;
  else
    return *a1 == 2;
}

uint64_t sub_18D2D9ECC(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 40);
  sub_18D2DBD78(&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t trackrun::ConvertProtobufToMovingStateEvent(trackrun *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, trackrun::MovingStateEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 8);
  }
  result = trackrun::ConvertProtobufToTrackRunTime(v12, (uint64_t)a2 + 8, 1, a4, a5, a6, a7, a8, a9, a10);
  if ((_DWORD)result)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v14 = *((_QWORD *)this + 2);
    if (!v14)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v14 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v14 + 92) & 1) == 0)
      return 0;
    v15 = *((_QWORD *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v15 + 92) & 2) == 0)
      return 0;
    v16 = *((_QWORD *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v16 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    v17 = *(_DWORD *)(v16 + 8);
    result = 1;
    if (v17 <= 11804)
    {
      if (v17 <= 2009)
      {
        v18 = 0;
        switch(v17)
        {
          case 0:
            goto LABEL_76;
          case 1:
          case 2:
          case 10:
          case 11:
            v18 = 1;
            goto LABEL_76;
          case 3:
          case 4:
          case 5:
          case 6:
          case 8:
          case 9:
            goto LABEL_75;
          case 7:
            goto LABEL_71;
          default:
            v21 = v17 - 41;
            if (v21 <= 0x3B && ((1 << v21) & 0x800000003F08801) != 0)
              goto LABEL_75;
            break;
        }
        return result;
      }
      if (v17 > 2100)
      {
        if (v17 <= 2149)
        {
          if (v17 == 2101)
            goto LABEL_75;
          if (v17 != 2105)
            return result;
        }
        else if (v17 != 2150 && v17 != 3015)
        {
          if (v17 != 3016)
            return result;
          goto LABEL_75;
        }
LABEL_71:
        v18 = 2;
LABEL_76:
        *((_BYTE *)a2 + 56) = v18;
        return result;
      }
      v20 = v17 - 2010;
      if (v20 > 0x3D)
        return result;
      if (((1 << v20) & 0x2480000000005400) == 0)
      {
        if (((1 << v20) & 0x8004000000001) == 0)
          return result;
        goto LABEL_71;
      }
LABEL_75:
      v18 = 3;
      goto LABEL_76;
    }
    if (v17 > 15651)
    {
      if (v17 <= 18199)
      {
        if (v17 <= 15732)
        {
          v22 = (v17 - 15652);
          if (v22 > 0x3A)
            return result;
          if (((1 << v22) & 0x400000000800101) == 0)
          {
            if (v22 != 18)
              return result;
            goto LABEL_71;
          }
          goto LABEL_75;
        }
        if (v17 == 15733 || v17 == 17150)
          goto LABEL_75;
        v19 = 18070;
      }
      else if (v17 > 19149)
      {
        if (v17 <= 90602)
        {
          if (v17 == 19150)
            goto LABEL_75;
          v19 = 19160;
        }
        else
        {
          if (v17 == 90603 || v17 == 515621)
            goto LABEL_75;
          v19 = 515652;
        }
      }
      else
      {
        if ((v17 - 18200) <= 0x28 && ((1 << (v17 - 24)) & 0x10002000001) != 0
          || v17 == 19030)
        {
          goto LABEL_75;
        }
        v19 = 19090;
      }
    }
    else if (v17 > 15329)
    {
      if ((v17 - 15562) <= 0x3A && ((1 << (v17 + 54)) & 0x401000040000001) != 0
        || (v17 - 15330) <= 0x1E && ((1 << (v17 + 30)) & 0x40100001) != 0)
      {
        goto LABEL_75;
      }
      v19 = 15460;
    }
    else if (v17 <= 15054)
    {
      if (v17 == 11805 || v17 == 12150)
        goto LABEL_75;
      v19 = 15030;
    }
    else
    {
      if ((v17 - 15100) <= 0x32 && ((1 << (v17 + 4)) & 0x4000000000401) != 0
        || (v17 - 15230) <= 0x19 && ((1 << (v17 - 126)) & 0x2000401) != 0)
      {
        goto LABEL_75;
      }
      v19 = 15055;
    }
    if (v17 != v19)
      return result;
    goto LABEL_75;
  }
  return result;
}

uint64_t trackrun::ConvertProtobufToLocationType(unsigned int a1)
{
  if (a1 >= 0xE)
    return 1;
  else
    return a1;
}

cnprint::CNPrinter *trackrun::ConvertProtobufToPositionEvent(trackrun *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, trackrun::PositionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  cnprint::CNPrinter *result;
  uint64_t v13;
  int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  CoreNavigation::CLP::LogEntry::PrivateData *v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  CoreNavigation::CLP::LogEntry::PrivateData *v66;
  CoreNavigation::CLP::LogEntry::PrivateData *v67;
  CoreNavigation::CLP::LogEntry::PrivateData *v68;
  uint64_t v69;
  double v70;
  _QWORD *v71;
  char v72;
  int8x16_t v73;
  unsigned __int8 v74;
  _BYTE v75[8];
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;

  result = 0;
  v75[0] = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  if ((*((_BYTE *)this + 100) & 1) != 0)
  {
    v13 = *((_QWORD *)this + 1);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 8);
    }
    v14 = trackrun::ConvertProtobufToTrackRunTime(v13, (uint64_t)v75, 0, a4, a5, a6, a7, a8, a9, a10);
    result = 0;
    if (v14)
    {
      v17 = *((_QWORD *)this + 3);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      if ((*(_BYTE *)(v17 + 362) & 0x10) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel(result) <= 1)
        {
          v73.i16[0] = 13;
          v74 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, &v74, "location private does not have mach continuous time for position event", v18, v19, v20, v21, v22, v72);
        }
        return 0;
      }
      v23 = *((_QWORD *)this + 3);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      v15.i64[0] = *(_QWORD *)(v23 + 128);
      v73 = 0uLL;
      CNTimeSpan::SetTimeSpan(v73.i64, 0, v15, v16);
      v24 = v73;
      *((int8x16_t *)a2 + 1) = v73;
      *((_BYTE *)a2 + 8) = 1;
      v26 = (CoreNavigation::CLP::LogEntry::PrivateData *)trackrun::PopulateAllTimeFields((uint64_t)a2 + 8, (uint64_t)v75, v24, v25);
      v29 = *((_QWORD *)this + 2);
      if (!v29)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v29 + 153) & 0x10) != 0)
      {
        v32 = *((_QWORD *)this + 2);
        if (!v32)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
          v32 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        v26 = (CoreNavigation::CLP::LogEntry::PrivateData *)trackrun::ConvertProtobufToLocationType(*(_DWORD *)(v32 + 104));
        *((_BYTE *)a2 + 104) = (_BYTE)v26;
        if (((_DWORD)v26 - 12) < 2)
          return 0;
        if ((_DWORD)v26 == 9 || (_DWORD)v26 == 1)
        {
          v33 = *((_QWORD *)this + 3);
          if (!v33)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v33 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if ((*(_BYTE *)(v33 + 360) & 8) != 0)
          {
            v34 = *((_QWORD *)this + 3);
            if (!v34)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
              v34 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
            }
            v27.i64[0] = *(_QWORD *)(v34 + 32);
            goto LABEL_35;
          }
        }
      }
      else
      {
        *((_BYTE *)a2 + 104) = 0;
      }
      v30 = *((_QWORD *)this + 2);
      if (!v30)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v30 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      if ((*(_BYTE *)(v30 + 153) & 2) == 0)
      {
        v31 = 0;
        goto LABEL_36;
      }
      v35 = *((_QWORD *)this + 2);
      if (!v35)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v35 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      v27.i64[0] = *(_QWORD *)(v35 + 80);
LABEL_35:
      v73 = 0uLL;
      v26 = (CoreNavigation::CLP::LogEntry::PrivateData *)CNTimeSpan::SetTimeSpan(v73.i64, 0, v27, v28);
      *(int8x16_t *)((char *)a2 + 40) = v73;
      v31 = 1;
LABEL_36:
      *((_BYTE *)a2 + 32) = v31;
      v36 = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)a2 + 56) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)((char *)a2 + 72) = v36;
      *(_OWORD *)((char *)a2 + 88) = *(_OWORD *)((char *)a2 + 40);
      v37 = *((_QWORD *)this + 2);
      if (!v37)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v37 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      if (*(double *)(v37 + 16) <= 0.0)
        goto LABEL_53;
      v38 = *((_QWORD *)this + 2);
      if (!v38)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v38 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      if ((*(_QWORD *)(v38 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
LABEL_53:
        *((_BYTE *)a2 + 105) = 0;
        *((_QWORD *)a2 + 14) = 0;
        *((_QWORD *)a2 + 15) = 0;
        goto LABEL_66;
      }
      v39 = *((_QWORD *)this + 2);
      if (!v39)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      v40 = *(_QWORD *)(v39 + 8);
      if (!v40)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v40 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
      }
      if (fabs(*(double *)(v40 + 8)) >= 2.22044605e-16)
      {
        *((_QWORD *)a2 + 14) = 0;
        v44 = (_QWORD *)((char *)a2 + 112);
        *((_BYTE *)a2 + 105) = 1;
        *((_QWORD *)a2 + 15) = 0;
      }
      else
      {
        v41 = *((_QWORD *)this + 2);
        if (!v41)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
          v41 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        v42 = *(_QWORD *)(v41 + 8);
        if (!v42)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
          v42 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
        }
        v43 = fabs(*(double *)(v42 + 16));
        *((_QWORD *)a2 + 14) = 0;
        v44 = (_QWORD *)((char *)a2 + 112);
        *((_BYTE *)a2 + 105) = v43 >= 2.22044605e-16;
        *((_QWORD *)a2 + 15) = 0;
        if (v43 < 2.22044605e-16)
        {
LABEL_66:
          v50 = *((_QWORD *)this + 2);
          if (!v50)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v50 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          if (*(double *)(v50 + 32) <= 0.0)
          {
            *((_BYTE *)a2 + 106) = 0;
            *((_QWORD *)a2 + 16) = 0;
          }
          else
          {
            v51 = *((_QWORD *)this + 2);
            if (!v51)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
              v51 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            }
            v52 = *(_QWORD *)(v51 + 32) & 0x7FFFFFFFFFFFFFFFLL;
            *((_BYTE *)a2 + 106) = v52 < 0x7FF0000000000000;
            *((_QWORD *)a2 + 16) = 0;
            if (v52 <= 0x7FEFFFFFFFFFFFFFLL)
            {
              v53 = *((_QWORD *)this + 2);
              if (!v53)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
                v53 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
              }
              v54 = *(double *)(v53 + 24);
              v55 = *((_QWORD *)this + 3);
              if (!v55)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
                v55 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
              }
              *((double *)a2 + 16) = v54 + *(float *)(v55 + 100);
              v56 = *((_QWORD *)this + 2);
              if (!v56)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
                v56 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
              }
              *((_QWORD *)a2 + 18) = *(_QWORD *)(v56 + 32);
            }
          }
          v57 = *((_QWORD *)this + 3);
          if (!v57)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v57 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if ((*(_BYTE *)(v57 + 360) & 1) == 0)
            goto LABEL_104;
          v58 = *((_QWORD *)this + 3);
          if (!v58)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v58 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if ((*(_BYTE *)(v58 + 360) & 2) == 0)
            goto LABEL_104;
          v59 = *((_QWORD *)this + 3);
          if (!v59)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v59 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if ((*(_BYTE *)(v59 + 360) & 4) == 0)
            goto LABEL_104;
          v60 = *((_QWORD *)this + 3);
          if (!v60)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v60 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if ((*(_QWORD *)(v60 + 8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_104;
          v61 = *((_QWORD *)this + 3);
          if (!v61)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v61 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if ((*(_QWORD *)(v61 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_104;
          v62 = *((_QWORD *)this + 3);
          if (!v62)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v62 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if ((*(_QWORD *)(v62 + 24) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_104;
          v63 = *((_QWORD *)this + 3);
          if (!v63)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v63 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if (*(double *)(v63 + 8) < 0.0)
            goto LABEL_104;
          v64 = *((_QWORD *)this + 3);
          if (!v64)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v64 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if (*(double *)(v64 + 16) < 0.0)
          {
LABEL_104:
            *((_BYTE *)a2 + 184) = 0;
            goto LABEL_105;
          }
          v69 = *((_QWORD *)this + 3);
          if (!v69)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v69 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          v70 = *(double *)(v69 + 24);
          *((_BYTE *)a2 + 184) = v70 > 0.0;
          if (v70 <= 0.0)
          {
LABEL_105:
            v65 = (_QWORD *)*((_QWORD *)this + 2);
            if (v65)
            {
              *((_QWORD *)a2 + 19) = v65[8];
            }
            else
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
              v65 = (_QWORD *)*((_QWORD *)this + 2);
              *((_QWORD *)a2 + 19) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_
                                                           + 16)
                                               + 64);
              if (!v65)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v66);
                v65 = (_QWORD *)*((_QWORD *)this + 2);
                *((_QWORD *)a2 + 21) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_
                                                             + 16)
                                                 + 40);
                if (!v65)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v67);
                  v65 = (_QWORD *)*((_QWORD *)this + 2);
                  *((_QWORD *)a2 + 22) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_
                                                               + 16)
                                                   + 56);
                  if (!v65)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v68);
                    v65 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
                  }
                  goto LABEL_110;
                }
LABEL_109:
                *((_QWORD *)a2 + 22) = v65[7];
LABEL_110:
                *((_QWORD *)a2 + 20) = v65[9];
                return (cnprint::CNPrinter *)(*((_BYTE *)a2 + 105) != 0);
              }
            }
            *((_QWORD *)a2 + 21) = v65[5];
            goto LABEL_109;
          }
          v71 = (_QWORD *)*((_QWORD *)this + 3);
          if (v71)
          {
            *((_QWORD *)a2 + 24) = v71[1];
          }
          else
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
            v71 = (_QWORD *)*((_QWORD *)this + 3);
            *((_QWORD *)a2 + 24) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_
                                                         + 24)
                                             + 8);
            if (!v71)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
              v71 = (_QWORD *)*((_QWORD *)this + 3);
              *((_QWORD *)a2 + 25) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_
                                                           + 24)
                                               + 16);
              if (!v71)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
                v71 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
              }
              goto LABEL_122;
            }
          }
          *((_QWORD *)a2 + 25) = v71[2];
LABEL_122:
          *((_QWORD *)a2 + 26) = v71[3];
          goto LABEL_105;
        }
      }
      v45 = *((_QWORD *)this + 2);
      if (!v45)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v45 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      v46 = *(_QWORD *)(v45 + 8);
      if (!v46)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v46 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
      }
      *v44 = *(_QWORD *)(v46 + 8);
      v47 = *((_QWORD *)this + 2);
      if (!v47)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v47 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      v48 = *(_QWORD *)(v47 + 8);
      if (!v48)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v48 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
      }
      *((_QWORD *)a2 + 15) = *(_QWORD *)(v48 + 16);
      v49 = *((_QWORD *)this + 2);
      if (!v49)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v26);
        v49 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      *((_QWORD *)a2 + 17) = *(_QWORD *)(v49 + 16);
      goto LABEL_66;
    }
  }
  return result;
}

uint64_t trackrun::ConvertProtobufToTrackRunHintEvent(trackrun *this, const CoreNavigation::CLP::LogEntry::TropicalSavanna::TropicalSavannaHint *a2, trackrun::TrackRunHintEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  int v20;
  unsigned __int8 v21;
  __int16 v22;

  if ((*((_BYTE *)this + 36) & 2) == 0)
    return 0;
  v12 = *((_QWORD *)this + 2);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::TropicalSavanna::protobuf_AddDesc_CoreNavigationCLPTropicalSavannaLogEntry_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::TropicalSavanna::TropicalSavannaHint::default_instance_ + 16);
  }
  v18 = trackrun::ConvertProtobufToTrackRunTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v18)
  {
    if ((*((_BYTE *)this + 36) & 4) != 0)
    {
      v20 = *((_DWORD *)this + 6);
      if ((v20 - 256) > 0xFFFFFF00)
      {
        *((_BYTE *)a2 + 56) = v20;
        return 1;
      }
      v22 = 13;
      v21 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "Invalid lane number,%d", v13, v14, v15, v16, v17, v20);
    }
    return 0;
  }
  return result;
}

uint64_t trackrun::ConvertProtobufToVisitEvent(trackrun *this, const CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit *a2, trackrun::VisitEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned __int8 v37;
  __int16 v38;

  if ((*((_BYTE *)this + 68) & 1) == 0)
    goto LABEL_5;
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 8);
  }
  if ((trackrun::ConvertProtobufToTrackRunTime(v12, (uint64_t)a2 + 8, 1, a4, a5, a6, a7, a8, a9, a10) & 1) == 0)
  {
LABEL_5:
    v38 = 13;
    v37 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Warning: ConvertProtobufToTrackRunTime,receipt time not present. Proceeding but this is unexpected.", a4, a5, a6, a7, a8, v36);
  }
  if ((*((_BYTE *)this + 68) & 2) == 0)
    goto LABEL_10;
  v15 = *((_QWORD *)this + 2);
  if (!v15)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 16);
  }
  if ((trackrun::ConvertProtobufToTrackRunTime(v15, (uint64_t)a2 + 56, 1, a4, a5, a6, a7, a8, v13, v14) & 1) == 0)
  {
LABEL_10:
    v38 = 13;
    v37 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "ConvertProtobufToTrackRunTime,Arrival time not present. User probably isn't in a known visit location.", a4, a5, a6, a7, a8, v36);
  }
  if ((*((_BYTE *)this + 68) & 4) == 0)
    goto LABEL_15;
  v18 = *((_QWORD *)this + 3);
  if (!v18)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 24);
  }
  if ((trackrun::ConvertProtobufToTrackRunTime(v18, (uint64_t)a2 + 104, 1, a4, a5, a6, a7, a8, v16, v17) & 1) == 0)
  {
LABEL_15:
    v38 = 13;
    v37 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "ConvertProtobufToTrackRunTime,Departure time is not present. User has arrived at a known visit location", a4, a5, a6, a7, a8, v36);
  }
  if ((*((_BYTE *)this + 68) & 8) == 0)
    goto LABEL_20;
  v21 = *((_QWORD *)this + 4);
  if (!v21)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v21 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 32);
  }
  v22 = trackrun::ConvertProtobufToTrackRunTime(v21, (uint64_t)a2 + 152, 1, a4, a5, a6, a7, a8, v19, v20);
  if ((v22 & 1) == 0)
  {
LABEL_20:
    v38 = 13;
    v37 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Warning: ConvertProtobufToTrackRunTime,detection time not present. Proceeding, but this is unexpected.", a4, a5, a6, a7, a8, v36);
  }
  if ((*((_BYTE *)this + 68) & 0x20) == 0)
  {
    v38 = 13;
    v37 = 4;
    v23 = "ConvertProtobufToTrackRunTime,coordinate not present. Cannot create visit event.";
LABEL_39:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, v23, a4, a5, a6, a7, a8, v36);
    return 0;
  }
  v24 = *((_QWORD *)this + 6);
  if (v24)
  {
    *((_QWORD *)a2 + 25) = *(_QWORD *)(v24 + 8);
  }
  else
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
    v24 = *((_QWORD *)this + 6);
    *((_QWORD *)a2 + 25) = *(_QWORD *)(*(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_
                                                 + 48)
                                     + 8);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
      v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 48);
    }
  }
  *((_QWORD *)a2 + 26) = *(_QWORD *)(v24 + 16);
  v25 = *((_DWORD *)this + 17);
  if ((v25 & 0x40) == 0)
  {
    v38 = 13;
    v37 = 4;
    v23 = "Visit does not have an estimated radius. Cannot create visit event.";
    goto LABEL_39;
  }
  *((_QWORD *)a2 + 27) = *((_QWORD *)this + 7);
  if ((v25 & 0x10) == 0)
  {
    v38 = 13;
    v37 = 4;
    v23 = "Visit does not have a place inference. Cannot create visit event";
    goto LABEL_39;
  }
  v26 = *((_QWORD *)this + 5);
  if (!v26)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
    v26 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v26 + 36) & 1) == 0)
  {
    v38 = 13;
    v37 = 4;
    v23 = "Visit does not have a user specific place type. Cannot create visit event";
    goto LABEL_39;
  }
  v27 = *((_QWORD *)this + 5);
  if (!v27)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
    v27 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v27 + 36) & 2) == 0)
  {
    v38 = 13;
    v37 = 4;
    v23 = "Visit does not have a place inference place type. Cannot create visit event";
    goto LABEL_39;
  }
  v29 = *((_QWORD *)this + 5);
  if (!v29)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
    v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 40);
  }
  v30 = *(_DWORD *)(v29 + 8);
  if (v30 <= 4)
    *((_BYTE *)a2 + 224) = v30;
  v31 = *((_QWORD *)this + 5);
  if (!v31)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
    v31 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 40);
  }
  v32 = *(_DWORD *)(v31 + 12);
  if (v32 <= 2)
    *((_BYTE *)a2 + 225) = v32 + 1;
  v33 = *((_QWORD *)this + 5);
  v34 = v33;
  if (!v33)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
    v34 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 40);
    v33 = *((_QWORD *)this + 5);
  }
  if ((*(_BYTE *)(v34 + 36) & 4) != 0)
  {
    if (!v33)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
      v33 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 40);
    }
    v22 = (uint64_t)std::string::operator=((std::string *)((char *)a2 + 232), *(const std::string **)(v33 + 16));
    v33 = *((_QWORD *)this + 5);
  }
  if (!v33)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
    v33 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v33 + 36) & 8) != 0)
  {
    v35 = *((_QWORD *)this + 5);
    if (!v35)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v22);
      v35 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::default_instance_ + 40);
    }
    std::string::operator=((std::string *)((char *)a2 + 256), *(const std::string **)(v35 + 24));
  }
  return 1;
}

uint64_t trackrun::ConvertProtobufToWatchStateEvent(trackrun *this, const CoreNavigation::CLP::LogEntry::PrivateData::WatchState *a2, trackrun::WatchStateEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;

  if ((*((_BYTE *)this + 40) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WatchState::default_instance_ + 8);
  }
  v14 = trackrun::ConvertProtobufToTrackRunTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v14)
  {
    if ((*((_BYTE *)this + 40) & 4) == 0)
      return 0;
    v15 = *((_QWORD *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v15 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WatchState::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v15 + 20) & 1) != 0)
    {
      v17 = *((_QWORD *)this + 2);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v17 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WatchState::default_instance_ + 16);
      }
      v18 = *(_DWORD *)(v17 + 8);
      if (v18 > 3)
      {
LABEL_16:
        v19 = *((_QWORD *)this + 2);
        if (!v19)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
          v19 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WatchState::default_instance_ + 16);
        }
        if ((*(_BYTE *)(v19 + 20) & 2) != 0)
        {
          v21 = *((_QWORD *)this + 2);
          if (!v21)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
            v21 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WatchState::default_instance_ + 16);
          }
          v22 = *(_DWORD *)(v21 + 12);
          if (v22 > 3)
            return 1;
          v20 = 0x2010000u >> (8 * v22);
        }
        else
        {
          LOBYTE(v20) = 0;
        }
        *((_BYTE *)a2 + 56) = v20;
        return 1;
      }
      v16 = 0x2010000u >> (8 * v18);
    }
    else
    {
      LOBYTE(v16) = 0;
    }
    *((_BYTE *)a2 + 57) = v16;
    goto LABEL_16;
  }
  return result;
}

uint64_t trackrun::ConvertProtobufToWorkoutSessionEvent(trackrun *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator *a2, trackrun::WorkoutSessionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  CoreNavigation::CLP::LogEntry::PrivateData *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v13 = *((_QWORD *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 8);
  }
  v19 = trackrun::ConvertProtobufToTrackRunTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (v19)
  {
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return 0;
    v22 = *((_QWORD *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v22 + 48) & 4) == 0)
      return 0;
    v23 = *((_QWORD *)this + 2);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v23 + 48) & 1) == 0)
      return 0;
    v24 = *((_QWORD *)this + 2);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
    }
    if ((*(_BYTE *)(v24 + 48) & 0x10) == 0)
      return 0;
    v25 = *((_QWORD *)this + 2);
    if (!v25)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v25 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
    }
    v26 = *(_QWORD *)(v25 + 32);
    if (!v26)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v26 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WorkoutEvent::default_instance_ + 32);
    }
    if ((*(_BYTE *)(v26 + 40) & 4) == 0)
      return 0;
    v27 = (_QWORD *)*((_QWORD *)this + 2);
    v28 = v27;
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v28 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
      v27 = (_QWORD *)*((_QWORD *)this + 2);
    }
    if ((v28[6] & 8) != 0)
    {
      if (!v27)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v27 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
      }
      v29 = v27[3];
      if (!v29)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WorkoutEvent::default_instance_ + 24);
      }
      v30 = (CoreNavigation::CLP::LogEntry::PrivateData *)trackrun::ConvertProtobufToTrackRunTime(v29, (uint64_t)a2 + 8, 1, v14, v15, v16, v17, v18, v20, v21);
      v38 = *((_QWORD *)this + 2);
      if (!v38)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v30);
        v38 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
      }
      v39 = *(_QWORD *)(v38 + 24);
      if (!v39)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        v39 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WorkoutEvent::default_instance_ + 24);
      }
      result = trackrun::ConvertProtobufToTrackRunTime(v39, (uint64_t)a2 + 184, 1, v31, v32, v33, v34, v35, v36, v37);
      v27 = (_QWORD *)*((_QWORD *)this + 2);
    }
    v40 = v27;
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v40 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
      v27 = (_QWORD *)*((_QWORD *)this + 2);
    }
    if ((v40[6] & 1) != 0)
    {
      if (!v27)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v27 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
      }
      v41 = v27[1];
      if (!v41)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        v41 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WorkoutEvent::default_instance_ + 8);
      }
      result = trackrun::ConvertProtobufToTrackRunTime(v41, (uint64_t)a2 + 88, 1, v14, v15, v16, v17, v18, v20, v21);
      v27 = (_QWORD *)*((_QWORD *)this + 2);
    }
    v42 = v27;
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v42 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
      v27 = (_QWORD *)*((_QWORD *)this + 2);
    }
    if ((v42[6] & 2) != 0)
    {
      if (!v27)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v27 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
      }
      v43 = v27[2];
      if (!v43)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        v43 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WorkoutEvent::default_instance_ + 16);
      }
      result = trackrun::ConvertProtobufToTrackRunTime(v43, (uint64_t)a2 + 136, 1, v14, v15, v16, v17, v18, v20, v21);
      v27 = (_QWORD *)*((_QWORD *)this + 2);
    }
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v27 = *(_QWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
    }
    v44 = v27[4];
    if (!v44)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v44 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WorkoutEvent::default_instance_ + 32);
    }
    v45 = *((_QWORD *)this + 2);
    if ((*(_BYTE *)(v44 + 40) & 1) != 0)
    {
      if (!v45)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v45 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
      }
      v46 = *(_QWORD *)(v45 + 32);
      if (!v46)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        v46 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WorkoutEvent::default_instance_ + 32);
      }
      result = (uint64_t)std::string::operator=((std::string *)((char *)a2 + 64), *(const std::string **)(v46 + 8));
      v45 = *((_QWORD *)this + 2);
    }
    if (!v45)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v45 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
    }
    v47 = *(_QWORD *)(v45 + 32);
    if (!v47)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v47 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WorkoutEvent::default_instance_ + 32);
    }
    v48 = *(int *)(v47 + 24);
    if (v48 <= 0x42)
      *((_BYTE *)a2 + 56) = byte_18D348442[v48];
    v49 = *((_QWORD *)this + 2);
    if (!v49)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v49 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::default_instance_ + 16);
    }
    v50 = *(int *)(v49 + 40);
    if (v50 <= 0x12)
      *((_BYTE *)a2 + 57) = byte_18D348485[v50];
    return 1;
  }
  return result;
}

uint64_t trackrun::ConvertProtobufToWorkoutSessionEvent(trackrun *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *a2, trackrun::WorkoutSessionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  unsigned int v31;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  v12 = *((_QWORD *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 8);
  }
  v18 = trackrun::ConvertProtobufToTrackRunTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  result = 0;
  if (!v18)
    return result;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    return 0;
  v22 = *((_QWORD *)this + 2);
  if (!v22)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
  }
  if ((*(_BYTE *)(v22 + 36) & 1) == 0)
    return 0;
  v23 = *((_QWORD *)this + 2);
  if (!v23)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
    v23 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
  }
  if ((*(_BYTE *)(v23 + 36) & 4) == 0)
    return 0;
  v24 = *((_QWORD *)this + 2);
  v25 = v24;
  if (!v24)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
    v25 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
    v24 = *((_QWORD *)this + 2);
  }
  if ((*(_BYTE *)(v25 + 36) & 4) != 0)
  {
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
    }
    v26 = *(_QWORD *)(v24 + 24);
    if (!v26)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      v26 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::WorkoutUpdate::default_instance_ + 24);
    }
    result = trackrun::ConvertProtobufToTrackRunTime(v26, (uint64_t)a2 + 88, 1, v13, v14, v15, v16, v17, v19, v20);
    v24 = *((_QWORD *)this + 2);
  }
  if (!v24)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
    v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
  }
  v27 = *(_DWORD *)(v24 + 16);
  result = 1;
  if (v27 > 11804)
  {
    if (v27 <= 15651)
    {
      if (v27 > 15329)
      {
        if ((v27 - 15562) <= 0x3A && ((1 << (v27 + 54)) & 0x401000040000001) != 0
          || (v27 - 15330) <= 0x1E && ((1 << (v27 + 30)) & 0x40100001) != 0)
        {
          goto LABEL_77;
        }
        v29 = 15460;
        goto LABEL_76;
      }
      if (v27 > 15054)
      {
        if (((v27 - 15100) > 0x32 || ((1 << (v27 + 4)) & 0x4000000000401) == 0)
          && ((v27 - 15230) > 0x19 || ((1 << (v27 - 126)) & 0x2000401) == 0))
        {
          v29 = 15055;
          goto LABEL_76;
        }
LABEL_77:
        v28 = 1;
        goto LABEL_78;
      }
      if (v27 != 11805)
      {
        if (v27 == 12150)
          goto LABEL_77;
        v29 = 15030;
        goto LABEL_76;
      }
LABEL_73:
      v28 = 7;
LABEL_78:
      *((_BYTE *)a2 + 56) = v28;
      return result;
    }
    if (v27 <= 18199)
    {
      if (v27 <= 15732)
      {
        v31 = v27 - 15652;
        if (v31 > 0x3A || ((1 << v31) & 0x400000000840101) == 0)
          return result;
        goto LABEL_77;
      }
      if (v27 == 15733 || v27 == 17150)
        goto LABEL_77;
      v29 = 18070;
    }
    else
    {
      if (v27 <= 19149)
      {
        if ((v27 - 18200) <= 0x28 && ((1 << (v27 - 24)) & 0x10002000001) != 0
          || v27 == 19030)
        {
          goto LABEL_77;
        }
        v29 = 19090;
        goto LABEL_76;
      }
      if (v27 <= 90602)
      {
        if (v27 == 19150)
          goto LABEL_77;
        v29 = 19160;
        goto LABEL_76;
      }
      if (v27 == 90603)
        goto LABEL_73;
      if (v27 == 515621)
        goto LABEL_77;
      v29 = 515652;
    }
LABEL_76:
    if (v27 != v29)
      return result;
    goto LABEL_77;
  }
  if (v27 <= 2009)
  {
    v28 = 0;
    switch(v27)
    {
      case 0:
        goto LABEL_78;
      case 1:
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
      case 11:
        goto LABEL_77;
      case 4:
        goto LABEL_50;
      case 8:
        v28 = 4;
        goto LABEL_78;
      default:
        v30 = (v27 - 41);
        if (v30 > 0x3B)
          return result;
        if (((1 << v30) & 0x800000003F08800) != 0)
          goto LABEL_77;
        if (v30)
          return result;
LABEL_50:
        v28 = 3;
        break;
    }
    goto LABEL_78;
  }
  if ((v27 - 2010) <= 0x3D && ((1 << (v27 + 38)) & 0x2488004000005401) != 0
    || (v27 - 2101) <= 0x31 && ((1 << (v27 - 53)) & 0x2000000000011) != 0
    || (v27 - 3015) < 2)
  {
    goto LABEL_77;
  }
  return result;
}

void sub_18D2DB938(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 40);
  sub_18D2DBD78(&v3);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void sub_18D2DB97C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_18D2DBA38((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *sub_18D2DB9F0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    sub_18D0788A0();
  return operator new(104 * a2);
}

__n128 sub_18D2DBA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = a7 - 104;
    do
    {
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      v9 = *(_OWORD *)(a3 - 104);
      a3 -= 104;
      *(_OWORD *)v8 = v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(a3 + 56);
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      result = *(__n128 *)(a3 + 64);
      v11 = *(_OWORD *)(a3 + 80);
      *(_QWORD *)(v8 + 96) = *(_QWORD *)(a3 + 96);
      *(__n128 *)(v8 + 64) = result;
      *(_OWORD *)(v8 + 80) = v11;
      v8 -= 104;
      v7 -= 104;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t sub_18D2DBAB8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    sub_18D2DB938(i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18D2DBB04(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_18D2DBBC0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_18D2DBB78(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_18D0788A0();
  return operator new(72 * a2);
}

uint64_t sub_18D2DBBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      v8 = *(_OWORD *)(a3 - 72);
      a3 -= 72;
      *(_OWORD *)(v7 - 72) = v8;
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v9 = *(_OWORD *)(a3 + 56);
      v10 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(v7 - 16) = v9;
      *(_OWORD *)(v7 - 48) = v10;
      v7 = *((_QWORD *)&v16 + 1) - 72;
      *((_QWORD *)&v16 + 1) -= 72;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_18D2DBC74((uint64_t)v13);
  return v11;
}

uint64_t sub_18D2DBC74(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18D2DBCA8(a1);
  return a1;
}

void sub_18D2DBCA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 72;
  }
}

uint64_t sub_18D2DBCEC(uint64_t a1)
{
  sub_18D2DBD20(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18D2DBD20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 72);
    *(_QWORD *)(a1 + 16) = v2 - 72;
    if (v5)
    {
      *(_QWORD *)(v2 - 64) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
}

void sub_18D2DBD78(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_18D2DBDB8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_18D2DBDB8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 72);
      v4 -= 72;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 64) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_18D2DBE0C(int8x16_t *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_18D2DBE44((uint64_t)exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_1E25B31F8, (void (*)(void *))sub_18D2DBE78);
}

int8x16_t sub_18D2DBE44(uint64_t a1, int8x16_t *a2)
{
  int8x16_t result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_1E25C12A8;
  *(_QWORD *)(a1 + 8) = &unk_1E25C12D8;
  *(_QWORD *)(a1 + 16) = &unk_1E25C1300;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = a2[1].i32[0];
  result = vextq_s8(*a2, *a2, 8uLL);
  *(int8x16_t *)(a1 + 32) = result;
  return result;
}

uint64_t sub_18D2DBE78(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t sub_18D2DBEB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1488;
  *(_QWORD *)(v2 + 8) = &off_1E25C20B0;
  *(_QWORD *)(v2 + 16) = &unk_1E25C20D8;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &off_1E25C12A8;
  *(_QWORD *)(v2 + 8) = &unk_1E25C12D8;
  *(_QWORD *)(v2 + 16) = &unk_1E25C1300;
  sub_18D15B224(v2 + 16, a1 + 16);
  return v2;
}

void sub_18D2DBF7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x18D78B5D4](v1, 0x10F1C40C404A9A7);
  _Unwind_Resume(a1);
}

void sub_18D2DBFC0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_18D2DC1A8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B31F8, (void (*)(void *))sub_18D2DBE78);
}

void sub_18D2DBFFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D2DC010(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2DC060(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

void sub_18D2DC098(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x18D78B5D4);
}

const char *sub_18D2DC0EC()
{
  return "Boost.Geometry Centroid calculation exception";
}

void sub_18D2DC0F8(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
}

void sub_18D2DC130(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2DC184(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2DC1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E25C1488;
  *(_QWORD *)(a1 + 8) = &off_1E25C20B0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_1E25C12A8;
  *(_QWORD *)(a1 + 8) = &unk_1E25C12D8;
  *(_QWORD *)(a1 + 16) = &unk_1E25C1300;
  return a1;
}

void sub_18D2DC240(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void trackrun::GEOMapRunningTrackDataEvent::~GEOMapRunningTrackDataEvent(trackrun::GEOMapRunningTrackDataEvent *this)
{
  void **v1;

  *(_QWORD *)this = off_1E25C8B58;
  v1 = (void **)((char *)this + 8);
  sub_18D2DC5D8(&v1);
}

{
  void **v1;

  *(_QWORD *)this = off_1E25C8B58;
  v1 = (void **)((char *)this + 8);
  sub_18D2DC5D8(&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1E25C8B58;
  v2 = (void **)((char *)this + 8);
  sub_18D2DC5D8(&v2);
  MEMORY[0x18D78B5D4](this, 0x10A1C40BB09DC8BLL);
}

void trackrun::MovingStateEvent::~MovingStateEvent(trackrun::MovingStateEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void trackrun::PositionEvent::~PositionEvent(trackrun::PositionEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void trackrun::TrackRunHintEvent::~TrackRunHintEvent(trackrun::TrackRunHintEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void trackrun::TrackRunSolutionEvent::~TrackRunSolutionEvent(trackrun::TrackRunSolutionEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void trackrun::VisitEvent::~VisitEvent(void **this)
{
  *this = &off_1E25C8900;
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
}

{
  trackrun::VisitEvent::~VisitEvent(this);
  JUMPOUT(0x18D78B5D4);
}

void trackrun::WatchStateEvent::~WatchStateEvent(trackrun::WatchStateEvent *this)
{
  JUMPOUT(0x18D78B5D4);
}

void trackrun::WorkoutSessionEvent::~WorkoutSessionEvent(void **this)
{
  *this = off_1E25C8A88;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
}

{
  *this = off_1E25C8A88;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
}

{
  *this = off_1E25C8A88;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2DC4F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_18D2DC504@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "TrackRunSolutionEvent");
}

uint64_t sub_18D2DC514(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

_QWORD *sub_18D2DC520@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "GEOMapRunningTrackDataEvent");
}

uint64_t sub_18D2DC530(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_18D2DC53C@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "MovingStateEvent");
}

uint64_t sub_18D2DC54C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_18D2DC558@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "PositionEvent");
}

uint64_t sub_18D2DC568(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_18D2DC574@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "TrackRunHintEvent");
}

uint64_t sub_18D2DC584(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_18D2DC590@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "VisitEvent");
}

uint64_t sub_18D2DC5A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_18D2DC5AC@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "WatchStateEvent");
}

uint64_t sub_18D2DC5BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_18D2DC5C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "WorkoutSessionEvent");
}

void sub_18D2DC5D8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        sub_18D2DB938(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

trackrun::TrackRunParameters *trackrun::TrackRunParameters::TrackRunParameters(trackrun::TrackRunParameters *this, const trackrun::TrackRunPlatformInfo *a2)
{
  cnprint::CNPrinter *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_WORD *)this = 0;
  *((_BYTE *)this + 2) = 0;
  sub_18D0778AC((_QWORD *)this + 1, "trackrun_output.bin");
  *((_WORD *)this + 16) = 1;
  sub_18D0778AC((_QWORD *)this + 5, "trackrun_debug.txt");
  *((_DWORD *)this + 16) = 256;
  *((_WORD *)this + 34) = 256;
  v13 = 2;
  v14 = 0x40A3880000000000;
  v15 = 3;
  v16 = 0x40A3880000000000;
  v17 = 4;
  v18 = 0x4059000000000000;
  v4 = (cnprint::CNPrinter *)sub_18D2DC89C((uint64_t)this + 72, &v13, 3);
  *((_QWORD *)this + 14) = 0x410E848000000000;
  *((_BYTE *)this + 120) = 1;
  *((_OWORD *)this + 8) = xmmword_18D3485A0;
  *((_OWORD *)this + 9) = xmmword_18D3485B0;
  *((_OWORD *)this + 10) = xmmword_18D3485C0;
  *((_QWORD *)this + 22) = 0x3F50624DD2F1A9FCLL;
  *((_QWORD *)this + 23) = 5;
  *((_QWORD *)this + 24) = 0x4052C00000000000;
  *((_WORD *)this + 100) = 0;
  *((_BYTE *)this + 202) = 0;
  *((_QWORD *)this + 26) = 1;
  *((_WORD *)this + 108) = 256;
  *((_OWORD *)this + 14) = xmmword_18D3189B0;
  *((_OWORD *)this + 15) = xmmword_18D3485D0;
  *((_BYTE *)this + 256) = 0;
  if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
  {
    LOWORD(v13) = 13;
    v12 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "Hardware platform %hu received", v5, v6, v7, v8, v9, *(_WORD *)a2);
  }
  if (*(_WORD *)a2)
  {
    *(_BYTE *)this = *((_DWORD *)a2 + 15) == 2;
    v10 = 1;
  }
  else
  {
    LOWORD(v13) = 13;
    v12 = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "Error: Unsupported hardware type %hu detected", v5, v6, v7, v8, v9, 0);
    v10 = 0;
  }
  *((_BYTE *)this + 256) = v10;
  return this;
}

void sub_18D2DC844(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;

  sub_18D04344C(v4);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t trackrun::TrackRunParameters::IsInitialized(trackrun::TrackRunParameters *this)
{
  return *((unsigned __int8 *)this + 256);
}

uint64_t sub_18D2DC89C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      sub_18D2DC910(a1, a2, a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_18D2DC8FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D04344C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2DC910(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_18D1652B0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_18D2DCB14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t trackrun::PopulateAllTimeFields(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t result;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = CNTimeSpan::operator-(a1 + 8, (_QWORD *)(a2 + 8), a3, a4);
  v11[0] = result;
  v11[1] = v9;
  if (*(_BYTE *)(a2 + 24))
  {
    result = CNTimeSpan::operator+(a2 + 32, v11, v7, v8);
    *(_QWORD *)(a1 + 32) = result;
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t trackrun::TrackRunLaneEstimator::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v10;
  double v11;
  double v14;
  BOOL v15;
  double v17;
  BOOL v18;
  BOOL v19;
  double v20;
  BOOL v21;
  BOOL v22;
  double v23;
  BOOL v24;
  BOOL v25;
  char v26;
  unsigned __int8 v27;
  __int16 v28;

  if (*(_BYTE *)(a1 + 1497))
  {
    v28 = 13;
    v27 = 2;
    v8 = "TrackRunLaneEstimator::Configure() called more than once";
  }
  else
  {
    v10 = *a2;
    if (*a2)
    {
      if (*(_BYTE *)(v10 + 256))
      {
        *(_QWORD *)(a1 + 1504) = v10;
        v11 = *(double *)(v10 + 128);
        if (v11 < 0.0 || (*(_QWORD *)(v10 + 128) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v11 > 1.0)
          goto LABEL_43;
        v14 = *(double *)(v10 + 144);
        v15 = v14 < 0.0 || (*(_QWORD *)(v10 + 144) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
        if (v15 || v14 > 1.0)
          goto LABEL_43;
        v17 = *(double *)(v10 + 152);
        v18 = v17 < 0.0 || (*(_QWORD *)(v10 + 152) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
        v19 = v18 || v17 > 1.0;
        if (v19
          || ((v20 = *(double *)(v10 + 160), v20 >= 0.0)
            ? (v21 = (*(_QWORD *)(v10 + 160) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            : (v21 = 1),
              !v21 ? (v22 = v20 > 1.0) : (v22 = 1),
              v22
           || ((v23 = *(double *)(v10 + 176), v23 >= 0.0)
             ? (v24 = (*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
             : (v24 = 1),
               !v24 ? (v25 = v23 > 1.0) : (v25 = 1),
               v25)))
        {
LABEL_43:
          v28 = 13;
          v27 = 4;
          v8 = "TrackRunPositionContextEstimator::Configure() called with invalid trackrun parameter probabilities";
        }
        else
        {
          if (fabs(v14 + v17 + v20 + -1.0) <= 0.000000015)
          {
            *(_BYTE *)(a1 + 1497) = 1;
            v28 = 13;
            v27 = 2;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "TrackRunLaneEstimator configured successfully", a4, a5, a6, a7, a8, v26);
            return 0;
          }
          v28 = 13;
          v27 = 4;
          v8 = "TrackRunPositionContextEstimator::Configure() lane transition probabilities don't add up to 1.0";
        }
      }
      else
      {
        v28 = 13;
        v27 = 4;
        v8 = "TrackRunPositionContextEstimator::Configure() called with uninitialized trackrun parameters";
      }
    }
    else
    {
      v28 = 13;
      v27 = 4;
      v8 = "TrackRunPositionContextEstimator::Configure() called with null trackrun parameters";
    }
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, v8, a4, a5, a6, a7, a8, v26);
  return 0xFFFFFFFFLL;
}

uint64_t trackrun::TrackRunLaneEstimator::Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  cnprint::CNPrinter *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char *v16;
  int v17;
  char v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  double *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  int v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  float64x2_t v56;
  int v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  uint64_t (**v76)();
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t (**v84)();
  __int128 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _BYTE v89[1121];
  _QWORD v90[5];
  uint64_t v91;
  uint64_t (**v92)();
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t (**v100)();
  __int128 v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  _BYTE v105[1192];
  _QWORD v106[5];
  uint64_t v107;
  void *v108;
  int v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  void *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  void *v124;
  __int128 v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  void *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  void *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  void *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  void *v147;
  __int128 v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  void *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  void *v157;
  __int128 v158;
  uint64_t v159;
  _BYTE *v160;
  _BYTE v161[1152];
  void *v162;
  int v163;
  __int128 v164;
  int v165;
  double *v166;
  uint64_t v167;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v2 + 1488) = 0x3DDB7CDFD9D7BDBBLL;
  v9 = v3[16];
  *(_BYTE *)(v2 + 1496) = v9;
  if (!v9)
  {
    LOWORD(v157) = 13;
    LOBYTE(v152) = 4;
    v16 = "TrackRunLaneEstimator::Initialize(), there is not at least one lane on the \t\t\t\t\t\tcurrent track, cannot i"
          "nitialize the lane estimator.";
LABEL_55:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v157, (unsigned __int8 *)&v152, v16, v4, v5, v6, v7, v8, v75);
    return 0xFFFFFFFFLL;
  }
  v10 = v3;
  v11 = v2;
  v165 = 1;
  v162 = &unk_1E25C6200;
  v166 = (double *)&v167;
  v163 = 12;
  v164 = xmmword_18D3485F0;
  v12 = (cnprint::CNPrinter *)sub_18D04BE88((uint64_t)&v162, 0.0);
  v13 = v10[16];
  v163 = v13;
  LODWORD(v164) = 1;
  DWORD1(v164) = v13;
  DWORD2(v164) = v13;
  v14 = *(_QWORD *)(v11 + 1504);
  if (*(_BYTE *)(v14 + 120))
    v15 = 1.0 / (double)v13;
  else
    v15 = *(double *)(v14 + 128);
  if (!v10[88])
  {
    LOBYTE(v17) = 0;
    goto LABEL_14;
  }
  if (!v10[80])
  {
    LOWORD(v157) = 13;
    LOBYTE(v152) = 4;
    v16 = "TrackRunLaneEstimator::Initialize(), provided lane number is invalid. Cannot initialize.";
    goto LABEL_55;
  }
  v17 = v10[80] - 1;
  v18 = v13 - 1;
  if (v17 < (int)v13 - 1)
    v18 = v10[80] - 1;
  if ((_DWORD)v13)
    LOBYTE(v17) = v18;
  v15 = *(double *)(v14 + 136);
LABEL_14:
  if (v13 < 2)
  {
    *v166 = 1.0;
  }
  else
  {
    v19 = v17;
    v20 = v166;
    v21 = v19;
    v22 = v13;
    v23 = v166;
    do
    {
      if (v21)
        *v23 = 1.0 / (double)((int)v13 - 1) * (1.0 - v15);
      else
        v20[v19] = v15;
      ++v23;
      --v21;
      --v22;
    }
    while (v22);
  }
  v24 = *v166;
  if (v13 >= 2)
  {
    v25 = v166 + 1;
    v26 = v13 - 1;
    do
    {
      v27 = *v25++;
      v24 = v24 + v27;
      --v26;
    }
    while (v26);
  }
  if (fabs(v24 + -1.0) > *(double *)(v11 + 1488) && cnprint::CNPrinter::GetLogLevel(v12) <= 1)
  {
    LOWORD(v157) = 2;
    LOBYTE(v152) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v157, (unsigned __int8 *)&v152, "WARNING: HMM initialized with non-normalized probability vector.", v28, v29, v30, v31, v32, v75);
  }
  v33 = 1.0;
  sub_18D2DED10((uint64_t)&v152, (uint64_t)&v162);
  v34 = (float64x2_t)vdupq_lane_s32((int32x2_t)(v13 | 0x100000000), 0);
  HIDWORD(v34.f64[0]) = 1;
  v153 = (__int128)v34;
  v159 = 0x10000000CLL;
  v157 = &unk_1E25C6200;
  *(_QWORD *)&v34.f64[1] = 0xC0000000CLL;
  v158 = xmmword_18D3191A0;
  v160 = v161;
  v34.f64[0] = 1.0 / v24;
  sub_18D064EF4((uint64_t)&v152, (uint64_t)&v157, v34);
  sub_18D053AA8(v11 + 1208, (uint64_t)&v157);
  sub_18D053AA8(v11 + 1344, v11 + 1208);
  *(_DWORD *)(v11 + 1480) = 1;
  v40 = *(unsigned __int8 *)(v11 + 1496);
  if (!*(_BYTE *)(v11 + 1496))
  {
    LOWORD(v157) = 13;
    LOBYTE(v152) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v157, (unsigned __int8 *)&v152, "TrackRunLaneEstimator::Initialize(),invalid lane count,%d,could not initialize HMM", v35, v36, v37, v38, v39, 0);
    return 0xFFFFFFFFLL;
  }
  v41 = 0.0;
  v42 = 0.0;
  v43 = v40 - 1;
  if ((_DWORD)v40 != 1)
  {
    v44 = *(double **)(v11 + 1504);
    v33 = v44[18];
    v45 = v44[19];
    v46 = v44[20];
    v47 = (double)v40 + -3.0;
    if (v47 < 1.0)
      v47 = 1.0;
    v48 = v46 / v47;
    v49 = v45 + v46;
    if ((_DWORD)v40 == 2)
      v46 = 0.0;
    if (v40 > 3)
    {
      v42 = v48;
    }
    else
    {
      v45 = v49;
      v42 = v46;
    }
    v41 = v45 * 0.5;
    if (v40 >= 3 && v42 > v41 + 0.000000015)
    {
      LOWORD(v157) = 13;
      LOBYTE(v152) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v157, (unsigned __int8 *)&v152, "TrackRunLaneEstimator::Initialize(), probability of moving by one lane is less than the probability of moving by more than one lane, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trenormalizing to maintain proper transition matrix", v35, v36, v37, v38, v39, v75);
      v50 = 1.0;
      v51 = 1.0 - v33;
      if ((double)v43 >= 1.0)
        v50 = (double)v43;
      v41 = v51 / v50;
      v42 = v51 / v50;
    }
  }
  v139 = 0xC0000000CLL;
  v134 = &unk_1E25C61A0;
  v140 = &v141;
  v135 = v40;
  v136 = v40;
  v137 = v40 * v40;
  v138 = v40;
  sub_18D04BE88((uint64_t)&v134, 0.0);
  v52 = 0;
  v53 = v138 + 1;
  v54 = v140;
  v55 = v40;
  do
  {
    v54[v52] = 0x3FF0000000000000;
    v52 += v53;
    --v55;
  }
  while (v55);
  v144 = 0xC0000000CLL;
  v142 = &unk_1E25C61A0;
  *(_QWORD *)&v56.f64[1] = 0xC00000090;
  v143 = xmmword_18D348600;
  v145 = &v146;
  v56.f64[0] = v33;
  sub_18D064EF4((uint64_t)&v134, (uint64_t)&v142, v56);
  v121 = 0xC0000000CLL;
  v116 = &unk_1E25C61A0;
  v122 = &v123;
  v117 = v40;
  v118 = v40;
  v119 = v40 * v40;
  v120 = v40;
  sub_18D04BE88((uint64_t)&v116, 1.0);
  v113 = 0xC0000000CLL;
  v108 = &unk_1E25C61A0;
  v114 = &v115;
  v109 = v40;
  v110 = v40;
  v111 = v40 * v40;
  v112 = v40;
  sub_18D04BE88((uint64_t)&v108, 0.0);
  v57 = 0;
  v58 = v112 + 1;
  v59 = v114;
  v60 = v40;
  do
  {
    v59[v57] = 0x3FF0000000000000;
    v57 += v58;
    --v60;
  }
  while (v60);
  v126 = 0xC0000000CLL;
  v124 = &unk_1E25C61A0;
  v125 = xmmword_18D348600;
  v127 = &v128;
  sub_18D0540FC((uint64_t)&v116, (uint64_t)&v108, (uint64_t)&v124);
  v131 = 0xC0000000CLL;
  v129 = &unk_1E25C61A0;
  *(_QWORD *)&v61.f64[1] = 0xC00000090;
  v130 = xmmword_18D348600;
  v132 = &v133;
  v61.f64[0] = v42;
  sub_18D064EF4((uint64_t)&v124, (uint64_t)&v129, v61);
  v149 = 0xC0000000CLL;
  v147 = &unk_1E25C61A0;
  v148 = xmmword_18D348600;
  v150 = &v151;
  sub_18D053FA4((uint64_t)&v142, (uint64_t)&v129, (uint64_t)&v147);
  v97 = 0x10000000BLL;
  v92 = &off_1E25C6170;
  v98 = &v99;
  v93 = v40 - 1;
  v94 = 1;
  v95 = v40 - 1;
  v96 = v40 - 1;
  sub_18D04BE88((uint64_t)&v92, 1.0);
  v102 = 0x10000000BLL;
  v100 = &off_1E25C6170;
  *(_QWORD *)&v62.f64[1] = 0xB0000000BLL;
  v101 = xmmword_18D348610;
  v103 = &v104;
  v62.f64[0] = v41 - v42;
  sub_18D064EF4((uint64_t)&v92, (uint64_t)&v100, v62);
  sub_18D2DF1E4((uint64_t)v105, (uint64_t)&v100);
  sub_18D2DEF68((uint64_t)v106);
  sub_18D1D4A98((uint64_t)v105, 1, (uint64_t)v106);
  v154 = 0xC0000000CLL;
  v152 = &unk_1E25C61A0;
  v153 = xmmword_18D348600;
  v155 = &v156;
  sub_18D053FA4((uint64_t)&v147, (uint64_t)v106, (uint64_t)&v152);
  v81 = 0x10000000BLL;
  v76 = &off_1E25C6170;
  v82 = &v83;
  v77 = v40 - 1;
  v78 = 1;
  v79 = v40 - 1;
  v80 = v40 - 1;
  sub_18D04BE88((uint64_t)&v76, 1.0);
  v86 = 0x10000000BLL;
  v84 = &off_1E25C6170;
  *(_QWORD *)&v63.f64[1] = 0xB0000000BLL;
  v85 = xmmword_18D348610;
  v87 = &v88;
  v63.f64[0] = v41 - v42;
  sub_18D064EF4((uint64_t)&v76, (uint64_t)&v84, v63);
  sub_18D2DF1E4((uint64_t)v89, (uint64_t)&v84);
  sub_18D2DEF68((uint64_t)v90);
  sub_18D1D4A98((uint64_t)v89, -1, (uint64_t)v90);
  v159 = 0xC0000000CLL;
  v157 = &unk_1E25C61A0;
  v158 = xmmword_18D348600;
  v160 = v161;
  sub_18D053FA4((uint64_t)&v152, (uint64_t)v90, (uint64_t)&v157);
  v64 = sub_18D053AA8(v11 + 8, (uint64_t)&v157);
  v157 = &unk_1E25C5E70;
  v65 = v91;
  v90[0] = &off_1E25C7C40;
  v91 = 0;
  if (v65)
    MEMORY[0x18D78B5BC](v65, 0x1000C8000313F17, v64);
  v152 = &unk_1E25C5E70;
  v66 = v107;
  v106[0] = &off_1E25C7C40;
  v107 = 0;
  if (v66)
    MEMORY[0x18D78B5BC](v66, 0x1000C8000313F17, v64);
  if ((_DWORD)v40 != 1)
  {
    v67 = -(v42 - v41 * 2.0);
    v68 = *(_QWORD *)(v11 + 40);
    *(double *)(v68 + 8 * ((int)v40 + *(_DWORD *)(v11 + 28) * v43 - 2)) = v67;
    *(double *)(v68 + 8) = v67;
  }
  *(_BYTE *)(v11 + 1498) = 1;
  trackrun::TrackRunLaneEstimator::UpdateLaneEstimate((trackrun::TrackRunLaneEstimator *)v11);
  LOWORD(v157) = 13;
  LOBYTE(v152) = 2;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v157, (unsigned __int8 *)&v152, "TrackRunLaneEstimator initialized successfully", v69, v70, v71, v72, v73, v75);
  return 0;
}

void sub_18D2DD61C(_Unwind_Exception *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = STACK[0x600];
  STACK[0x5D8] = (unint64_t)&off_1E25C7C40;
  STACK[0x600] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  STACK[0x2C78] = (unint64_t)&unk_1E25C5E70;
  v3 = STACK[0xBD8];
  STACK[0xBB0] = (unint64_t)&off_1E25C7C40;
  STACK[0xBD8] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2DD6B0(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

_QWORD *sub_18D2DD6C4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7C40;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  return a1;
}

_QWORD *sub_18D2DD720(_QWORD *result)
{
  *result = &unk_1E25C5E70;
  return result;
}

uint64_t trackrun::TrackRunLaneEstimator::UpdateLaneEstimate(trackrun::TrackRunLaneEstimator *this)
{
  double v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  float64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  double v34;
  unsigned int v35;
  uint64_t v36;
  double v37;
  __int128 v39;
  int v40;
  char v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  double *v50;
  double v51[12];
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;

  if (!*((_BYTE *)this + 1498))
    return 0;
  v54 = 0x10000000CLL;
  v52 = &unk_1E25C6200;
  v53 = xmmword_18D3191A0;
  v55 = &v56;
  if (*((_DWORD *)this + 370))
    v3 = (char *)this + 1344;
  else
    v3 = (char *)this + 1208;
  sub_18D053AA8((uint64_t)&v52, (uint64_t)v3);
  v9 = v53;
  v10 = DWORD1(v53);
  if (v53 <= DWORD1(v53))
    v11 = DWORD1(v53);
  else
    v11 = v53;
  if ((_DWORD)v53 && DWORD1(v53) && (_DWORD)v11)
  {
    v12 = 0;
    v13 = v55;
    do
    {
      v14 = *(double *)((char *)v13 + (v12 >> 29));
      if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        return 0;
      if (v14 >= 0.0)
        v15 = *(double *)((char *)v13 + (v12 >> 29));
      else
        v15 = 0.0;
      if (v14 <= 1.0)
        v16 = v15;
      else
        v16 = 1.0;
      *(double *)&v13[v12 >> 32] = v16;
      v12 += 0x100000000;
    }
    while (--v11);
  }
  if ((_DWORD)v10)
  {
    v17 = 0;
    v18 = v55;
    v19 = 1;
    do
    {
      v20 = *(double *)&v18[(v9 * v17)];
      v21 = v19;
      v22 = v9 - 1;
      if (v9 >= 2)
      {
        do
        {
          v20 = v20 + *(double *)&v18[v21++];
          --v22;
        }
        while (v22);
      }
      v51[v17++] = v20;
      v19 += v9;
    }
    while (v17 != v10);
    v1 = v51[0];
  }
  if (fabs(v1 + -1.0) > 0.000000015)
  {
    LOWORD(v47) = 13;
    LOBYTE(v42) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v47, (unsigned __int8 *)&v42, "TrackRunPositionContextEstimator::UpdateLaneEstimate() has lane probabilities that don't add up to 1.0,%.3lf,sum_lane_probability. Renormalizing...", v4, v5, v6, v7, v8, SLOBYTE(v1));
    v49 = 0x10000000CLL;
    v47 = &unk_1E25C6200;
    v48 = xmmword_18D3191A0;
    v50 = v51;
    v23.f64[0] = 1.0 / v1;
    sub_18D1C94E0((uint64_t)&v52, (uint64_t)&v47, v23);
    sub_18D053AA8((uint64_t)&v52, (uint64_t)&v47);
    v29 = DWORD1(v53);
    if (DWORD1(v53))
    {
      v30 = 0;
      v31 = v53;
      v32 = v55;
      v33 = 1;
      do
      {
        v34 = *(double *)&v32[(v31 * v30)];
        v35 = v33;
        v36 = v31 - 1;
        if (v31 >= 2)
        {
          do
          {
            v34 = v34 + *(double *)&v32[v35++];
            --v36;
          }
          while (v36);
        }
        v51[v30++] = v34;
        v33 += v31;
      }
      while (v30 != v29);
      v37 = v51[0] + -1.0;
    }
    else
    {
      v37 = NAN;
    }
    if (fabs(v37) > 0.000000015)
    {
      LOWORD(v47) = 13;
      LOBYTE(v42) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v47, (unsigned __int8 *)&v42, "TrackRunPositionContextEstimator::UpdateLaneEstimate() has lane probabilities that don't add up to 1.0. Cannot update lane estimate.", v24, v25, v26, v27, v28, v41);
      return 0;
    }
  }
  v49 = 0x100000001;
  v47 = &unk_1E25C6A40;
  *(_QWORD *)&v39 = 0x100000001;
  *((_QWORD *)&v39 + 1) = 0x100000001;
  v48 = v39;
  v50 = v51;
  v44 = 0x100000001;
  v42 = &unk_1E25C6AA0;
  v43 = v39;
  v45 = (int *)&v46;
  sub_18D04C6B8((uint64_t)&v52, (uint64_t)&v47, (uint64_t)&v42);
  v40 = *v45;
  if (!*((_BYTE *)this + 1))
    *((_BYTE *)this + 1) = 1;
  *(_BYTE *)this = v40 + 1;
  return 1;
}

void trackrun::TrackRunLaneEstimator::HandleEvidence(trackrun::TrackRunLaneEstimator *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double v9;
  BOOL v10;
  BOOL v11;
  char v13;
  unsigned __int8 v14;
  __int16 v15;

  v8 = a2[1];
  if (a2[2] > 0.000000015
    && ((v9 = fabs(*a2), v8 > 0.000000015) ? (v10 = v8 < 20.0) : (v10 = 0), v10 ? (v11 = v9 < 20.0) : (v11 = 0), v11))
  {
    if (!trackrun::TrackRunLaneEstimator::HmmPredictAndUpdate((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))trackrun::TrackRunLaneEstimator::UpdateLaneEstimate(a1);
  }
  else
  {
    v15 = 13;
    v14 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "Across track distance evidence invalid. Cannot inject into the HMM.", a4, a5, a6, a7, a8, v13);
  }
}

uint64_t trackrun::TrackRunLaneEstimator::HmmPredictAndUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  cnstatistics *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  cnstatistics *v22;
  double v23;
  double v24;
  unint64_t v25;
  double v26;
  double v27;
  __int128 v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  double v34;
  cnprint::CNPrinter *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int32x4_t v42;
  __n128 v43;
  int32x4_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  cnprint::CNPrinter *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  double v59;
  double *v60;
  double *v61;
  uint64_t v62;
  double v63;
  double *v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  double *v70;
  uint64_t v71;
  int v72;
  double v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  double *v85;
  uint64_t v86;
  int v87;
  double v88;
  unsigned int v89;
  uint64_t v90;
  char v91;
  char v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[23];
  void *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100;
  char v101;
  _BYTE v102[32];
  _QWORD *v103;
  uint64_t (**v104)();
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD v108[13];
  __int128 v109;
  uint64_t v110;
  uint64_t (**v111)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v113;
  __int128 v114;
  uint64_t v115;
  double *v116;
  double v117[12];
  unsigned __int8 v118;
  void *v119;
  __int128 v120;
  uint64_t v121;
  double *v122;
  _BYTE v123[96];
  _BYTE v124[24];
  void *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  char v130;
  __int128 v131;
  _BYTE v132[24];
  int v133;
  __int128 v134;
  int v135;
  uint64_t *v136;
  uint64_t v137;
  char v138;
  _BYTE v139[24];
  uint64_t v140;
  double *v141;
  _QWORD v142[15];

  v142[12] = *MEMORY[0x1E0C80C00];
  LOBYTE(v96) = 0;
  v101 = 0;
  memset(v124, 0, sizeof(v124));
  memset(v139, 0, 23);
  *(_OWORD *)v132 = *(_OWORD *)v124;
  *(_QWORD *)&v132[16] = *(_QWORD *)&v124[16];
  *(_QWORD *)&v95[15] = 0;
  *(_OWORD *)v95 = *(_OWORD *)v139;
  *(_OWORD *)&v132[7] = *(_OWORD *)(a2 + 24);
  v92 = 0;
  v94 = *(_QWORD *)&v132[16];
  v93 = *(_OWORD *)v132;
  if (*(_BYTE *)(a1 + 1576))
  {
    v96 = &unk_1E25C89C0;
    v97 = *(_OWORD *)(a1 + 1520);
    v98 = *(_OWORD *)(a1 + 1536);
    v99 = *(_OWORD *)(a1 + 1552);
    v100 = *(_BYTE *)(a1 + 1568);
    v101 = 1;
  }
  trackrun::TrackRunLaneEstimator::HmmPredict(a1, (uint64_t)&v92, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)v132 = 0;
  *(_QWORD *)&v132[8] = 0x7FF8000000000000;
  *(_QWORD *)&v132[16] = &unk_1E25C6200;
  v136 = &v137;
  v135 = 1;
  v133 = 12;
  v134 = xmmword_18D3485F0;
  v10 = (cnstatistics *)sub_18D04BE88((uint64_t)&v132[16], 0.0);
  v138 = 0;
  v16 = *(unsigned __int8 *)(a1 + 1496);
  v133 = v16;
  LODWORD(v134) = 1;
  DWORD1(v134) = v16;
  DWORD2(v134) = v16;
  v17 = *(double *)(a2 + 16);
  if (fabs(v17) == INFINITY || v17 <= 0.000000015)
  {
    strcpy(v124, "\r");
    v139[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v124, v139, "TrackRunPositionContextEstimator::HmmPredictAndUpdate() failed. Provided evidence has standard deviation with a value of zero or inf,%.1lf", v11, v12, v13, v14, v15, SLOBYTE(v17));
    return 0xFFFFFFFFLL;
  }
  if ((_DWORD)v16)
  {
    v18 = 0;
    v19 = *(double *)(a2 + 8);
    v20 = INFINITY;
    do
    {
      if (v20 >= *(double *)a2 + (double)v18 * v19)
        v20 = *(double *)a2 + (double)v18 * v19;
      ++v18;
    }
    while (v16 != v18);
  }
  else
  {
    v20 = INFINITY;
  }
  if (v20 > v17)
    v17 = v20;
  v21 = v17;
  v23 = cnstatistics::NormalCDF(v10, *(double *)a2 + *(double *)(a2 + 8) * -0.5, 0.0, v17);
  if (*(_BYTE *)(a1 + 1496))
  {
    v24 = v23;
    v25 = 0;
    do
    {
      v26 = cnstatistics::NormalCDF(v22, *(double *)a2 + ((double)v25 + 0.5) * *(double *)(a2 + 8), 0.0, v21);
      v27 = *(double *)(*(_QWORD *)(a1 + 1504) + 176);
      if (v27 <= v26 - v24)
        v27 = v26 - v24;
      *(double *)&v136[v25++] = v27;
      v24 = v26;
    }
    while (v25 < *(unsigned __int8 *)(a1 + 1496));
  }
  *(_QWORD *)&v124[8] = 0;
  *(_QWORD *)&v124[16] = 0x7FF8000000000000;
  v127 = 0x10000000CLL;
  v125 = &unk_1E25C6200;
  v128 = &v129;
  v126 = xmmword_18D3191A0;
  sub_18D04BE88((uint64_t)&v125, 0.0);
  v130 = 0;
  v131 = *(_OWORD *)(a2 + 24);
  v138 = *(_BYTE *)(a1 + 1496);
  *(_OWORD *)&v124[8] = *(_OWORD *)v132;
  sub_18D053AA8((uint64_t)&v125, (uint64_t)&v132[16]);
  v130 = v138;
  *(_QWORD *)v124 = sub_18D2DEB00;
  if (*(_DWORD *)(a1 + 1480) == 1)
    sub_18D053AA8(a1 + 1208, a1 + 1344);
  v110 = 0x100000001;
  v108[12] = &off_1E25C68F0;
  *(_QWORD *)&v28 = 0x100000001;
  *((_QWORD *)&v28 + 1) = 0x100000001;
  v109 = v28;
  v111 = &v112;
  v112 = sub_18D2DEB00;
  v106 = 0x10000000CLL;
  v104 = &off_1E25C61D0;
  v105 = v28;
  v107 = v108;
  v108[0] = &v124[8];
  v29 = *(_DWORD *)(a1 + 1216);
  v30 = *(_DWORD *)(a1 + 1220);
  sub_18D04DB40((uint64_t)v102, (uint64_t)&v104);
  if (v29 <= v30)
    v31 = v30;
  else
    v31 = v29;
  if (v30)
    v32 = v29 == 0;
  else
    v32 = 1;
  if (v32)
    v33 = 0;
  else
    v33 = v31;
  v34 = *(double *)(a1 + 1488);
  if (!*(_DWORD *)(a1 + 1216) || !*(_DWORD *)(a1 + 1220))
  {
    if ((v33 & 0x80000000) != 0)
      __assert_rtn("Ones", "cnmatrix.h", 2317, "nr >= 0");
    v121 = 0x10000000CLL;
    v119 = &unk_1E25C6200;
    v122 = (double *)v123;
    *(_QWORD *)&v120 = v33 | 0x100000000;
    DWORD2(v120) = v33;
    HIDWORD(v120) = v33;
    sub_18D04BE88((uint64_t)&v119, 1.0);
    v140 = 0x10000000CLL;
    *(_QWORD *)v139 = &unk_1E25C6200;
    v43.n128_u64[1] = 0xC0000000CLL;
    *(_OWORD *)&v139[8] = xmmword_18D3191A0;
    v141 = (double *)v142;
    v43.n128_f64[0] = 1.0 / (double)(int)v33;
    goto LABEL_40;
  }
  v140 = 0x10000000CLL;
  *(_QWORD *)v139 = &unk_1E25C6200;
  *(_OWORD *)&v139[8] = xmmword_18D3191A0;
  v141 = (double *)v142;
  v35 = (cnprint::CNPrinter *)sub_18D06403C(a1 + 1208, 1, (uint64_t)v139);
  v36 = *v141;
  if (fabs(*v141 + -1.0) > v34)
  {
    if (cnprint::CNPrinter::GetLogLevel(v35) <= 1)
    {
      *(_WORD *)v139 = 2;
      LOBYTE(v119) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v139, (unsigned __int8 *)&v119, "WARNING: HMM update passed a non-normalized probability vector.", v37, v38, v39, v40, v41, v91);
    }
    if ((v33 & 0x80000000) != 0)
      __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
    v43 = sub_18D2DED10((uint64_t)&v119, a1 + 1208);
    v42 = vdupq_lane_s32((int32x2_t)(v33 | 0x100000000), 0);
    v43.n128_f64[0] = 1.0 / v36;
    v42.i32[1] = 1;
    v120 = (__int128)v42;
    v140 = 0x10000000CLL;
    *(_QWORD *)v139 = &unk_1E25C6200;
    *(_OWORD *)&v139[8] = xmmword_18D3191A0;
    v141 = (double *)v142;
LABEL_40:
    sub_18D064EF4((uint64_t)&v119, (uint64_t)v139, (float64x2_t)v43);
    goto LABEL_43;
  }
  if ((v33 & 0x80000000) != 0)
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  sub_18D2DED10((uint64_t)v139, a1 + 1208);
  v44 = vdupq_lane_s32((int32x2_t)(v33 | 0x100000000), 0);
  v44.i32[1] = 1;
  *(int32x4_t *)&v139[8] = v44;
LABEL_43:
  sub_18D053AA8(a1 + 1208, (uint64_t)v139);
  sub_18D2DED10((uint64_t)v139, a1 + 1208);
  v45 = *v111;
  v121 = 0x10000000CLL;
  v119 = &unk_1E25C6200;
  v120 = xmmword_18D3191A0;
  v122 = (double *)v123;
  v46 = (cnprint::CNPrinter *)((uint64_t (*)(_QWORD, void **))v45)(*v103, &v119);
  if ((_DWORD)v46)
  {
    LOWORD(v113) = 2;
    v118 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v118, "ERROR: HMM emission function failed.", v47, v48, v49, v50, v51, v91);
    v58 = 29;
LABEL_66:
    strcpy(v139, "\r");
    LOBYTE(v119) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v139, (unsigned __int8 *)&v119, "failed to update,code,%d", v53, v54, v55, v56, v57, v58);
    return 0xFFFFFFFFLL;
  }
  if ((_DWORD)v33)
  {
    v59 = 0.0;
    v60 = v122;
    v61 = v122;
    v62 = v33;
    do
    {
      v63 = *v61;
      if (*v61 < 0.0 || v63 > 1.0)
      {
        LOWORD(v113) = 2;
        v118 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v118, "ERROR: HMM emission probability matrix is invalid.", v47, v48, v49, v50, v51, v91);
        goto LABEL_65;
      }
      v59 = v59 + v63;
      ++v61;
      --v62;
    }
    while (v62);
    if (fabs(v59) > v34)
    {
      v65 = v141;
      do
      {
        v66 = *v60++;
        v52.n128_f64[0] = v66 * *v65;
        *v65++ = v52.n128_f64[0];
        --v33;
      }
      while (v33);
      goto LABEL_58;
    }
LABEL_64:
    LOWORD(v113) = 2;
    v118 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v118, "ERROR: HMM emission probability matrix is null matrix", v47, v48, v49, v50, v51, v91);
LABEL_65:
    v58 = 30;
    goto LABEL_66;
  }
  if (v34 >= 0.0)
    goto LABEL_64;
LABEL_58:
  v67 = *(unsigned int *)&v139[12];
  if (*(_DWORD *)&v139[12])
  {
    v68 = 0;
    v69 = *(_DWORD *)&v139[8];
    v70 = v141;
    v71 = *(unsigned int *)&v139[8] - 1;
    v72 = 1;
    do
    {
      v73 = v70[v69 * v68];
      v74 = v72;
      v75 = v71;
      if (v69 >= 2)
      {
        do
        {
          v73 = v73 + v70[v74++];
          --v75;
        }
        while (v75);
      }
      v117[v68++] = v73;
      v72 += v69;
    }
    while (v68 != v67);
    v52.n128_f64[0] = v117[0];
  }
  if (fabs(v52.n128_f64[0]) < 2.22044605e-16)
  {
    if (cnprint::CNPrinter::GetLogLevel(v46) <= 1)
    {
      LOWORD(v113) = 2;
      v118 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v118, "HMM state is null vector after update; revert to input state",
        v77,
        v78,
        v79,
        v80,
        v81,
        v91);
    }
    v52 = sub_18D053AA8((uint64_t)v139, a1 + 1208);
    v82 = *(unsigned int *)&v139[12];
    if (*(_DWORD *)&v139[12])
    {
      v83 = 0;
      v84 = *(_DWORD *)&v139[8];
      v85 = v141;
      v86 = *(unsigned int *)&v139[8] - 1;
      v87 = 1;
      do
      {
        v88 = v85[v84 * v83];
        v89 = v87;
        v90 = v86;
        if (v84 >= 2)
        {
          do
          {
            v88 = v88 + v85[v89++];
            --v90;
          }
          while (v90);
        }
        v117[v83++] = v88;
        v87 += v84;
      }
      while (v83 != v82);
      v52.n128_f64[0] = v117[0];
    }
  }
  v115 = 0x10000000CLL;
  v113 = &unk_1E25C6200;
  v114 = xmmword_18D3191A0;
  v116 = v117;
  v52.n128_f64[0] = 1.0 / v52.n128_f64[0];
  sub_18D064EF4((uint64_t)v139, (uint64_t)&v113, (float64x2_t)v52);
  sub_18D053AA8((uint64_t)v139, (uint64_t)&v113);
  sub_18D053AA8(a1 + 1344, (uint64_t)v139);
  result = 0;
  *(_DWORD *)(a1 + 1480) = 1;
  return result;
}

__n128 trackrun::TrackRunLaneEstimator::SetTrackRunHintEvent(__n128 *this, const trackrun::TrackRunHintEvent *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;

  if (this[98].n128_u8[8])
  {
    result = *(__n128 *)((char *)a2 + 8);
    v3 = *(__n128 *)((char *)a2 + 24);
    v4 = *(__n128 *)((char *)a2 + 40);
    this[98].n128_u8[0] = *((_BYTE *)a2 + 56);
    this[97] = v4;
    this[96] = v3;
    this[95] = result;
  }
  else
  {
    this[94].n128_u64[1] = (unint64_t)&unk_1E25C89C0;
    result = *(__n128 *)((char *)a2 + 8);
    v5 = *(__n128 *)((char *)a2 + 24);
    v6 = *(__n128 *)((char *)a2 + 40);
    this[98].n128_u8[0] = *((_BYTE *)a2 + 56);
    this[97] = v6;
    this[96] = v5;
    this[95] = result;
    this[98].n128_u8[8] = 1;
  }
  return result;
}

uint64_t trackrun::TrackRunLaneEstimator::HmmPredict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  cnprint::CNPrinter *v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  double v26;
  int v27;
  uint64_t *v28;
  int v29;
  int v30;
  double v31;
  int v32;
  int v33;
  int v34;
  double v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  float64x2_t v42;
  void **v43;
  char *v44;
  cnprint::CNPrinter *v45;
  void **v46;
  double v47;
  cnprint::CNPrinter *v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int32x4_t v55;
  int32x4_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  cnprint::CNPrinter *v68;
  unint64_t v69;
  BOOL v70;
  double *v71;
  double v72;
  double *v73;
  unint64_t v74;
  double v75;
  double v77;
  float64x2_t v78;
  uint64_t result;
  char v80;
  double v81;
  char v82;
  __int128 v83;
  void *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned __int8 v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  double *v93;
  uint64_t v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  double *v98;
  _BYTE v99[1152];
  void *v100;
  __int128 v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE v104[96];

  if (!*(_BYTE *)(a1 + 1498))
  {
    LOWORD(v83) = 13;
    LOBYTE(v95) = 4;
    v44 = "Failed to predict and update HMM, Uninitialized";
    v45 = (cnprint::CNPrinter *)&v83;
    v46 = &v95;
    goto LABEL_69;
  }
  *(_QWORD *)&v83 = 0;
  *((_QWORD *)&v83 + 1) = 0x7FF8000000000000;
  v86 = 0xC0000000CLL;
  v84 = &unk_1E25C61A0;
  v87 = &v88;
  v85 = xmmword_18D348600;
  sub_18D04BE88((uint64_t)&v84, 0.0);
  v10 = 0;
  v11 = HIDWORD(v85) + 1;
  v12 = 12;
  v13 = v87;
  do
  {
    v13[v10] = 0x3FF0000000000000;
    v10 += v11;
    --v12;
  }
  while (v12);
  v83 = *(_OWORD *)(a2 + 8);
  LODWORD(v85) = *(unsigned __int8 *)(a1 + 1496);
  DWORD1(v85) = v85;
  DWORD2(v85) = v85 * v85;
  HIDWORD(v85) = v85;
  v89 = v85;
  sub_18D053AA8((uint64_t)&v84, a1 + 8);
  if (*(_BYTE *)(a2 + 112))
  {
    v15 = *(unsigned __int8 *)(a2 + 104);
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = *(unsigned __int8 *)(a2 + 104);
    if (v15 > *(unsigned __int8 *)(a1 + 1496))
      v16 = *(unsigned __int8 *)(a1 + 1496);
    if (*(_BYTE *)(a1 + 1496))
      v17 = v16;
    else
      v17 = *(unsigned __int8 *)(a2 + 104);
    if (cnprint::CNPrinter::GetLogLevel(v14) <= 1)
    {
      LOWORD(v95) = 13;
      LOBYTE(v100) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v95, (unsigned __int8 *)&v100, "HMM Prioritizing lane %d", v18, v19, v20, v21, v22, v17);
    }
    v23 = DWORD1(v85);
    if (DWORD1(v85))
    {
      v24 = 0;
      v25 = 0;
      v26 = *(double *)(*(_QWORD *)(a1 + 1504) + 168);
      v27 = v17 - 1;
      if (!v17)
        v27 = 0;
      v28 = v87;
      v29 = HIDWORD(v85);
      v30 = v85;
      do
      {
        if (v30)
        {
          v31 = (1.0 - v26) / (1.0 - *(double *)&v28[v27 + v25 * v29]);
          v32 = v24;
          v33 = v27;
          v34 = v30;
          do
          {
            v35 = v31 * *(double *)&v28[v32];
            if (!v33)
              v35 = v26;
            *(double *)&v28[v32] = v35;
            --v33;
            ++v32;
            --v34;
          }
          while (v34);
        }
        ++v25;
        v24 += v29;
      }
      while (v25 != v23);
    }
  }
  if (!*(_DWORD *)(a1 + 1480))
    sub_18D053AA8(a1 + 1344, a1 + 1208);
  v36 = *(_DWORD *)(a1 + 1352);
  v37 = *(_DWORD *)(a1 + 1356);
  if (v36)
    v38 = v37 == 0;
  else
    v38 = 1;
  v39 = v38;
  if (v36 <= v37)
    v40 = *(_DWORD *)(a1 + 1356);
  else
    v40 = *(_DWORD *)(a1 + 1352);
  if (v39)
    v41 = 0;
  else
    v41 = v40;
  if (v39 != 1)
  {
    v47 = *(double *)(a1 + 1488);
    v97 = 0x10000000CLL;
    v95 = &unk_1E25C6200;
    v96 = xmmword_18D3191A0;
    v98 = (double *)v99;
    v48 = (cnprint::CNPrinter *)sub_18D06403C(a1 + 1344, 1, (uint64_t)&v95);
    v49 = *v98;
    if (fabs(*v98 + -1.0) <= v47)
    {
      if ((v40 & 0x80000000) == 0)
      {
        sub_18D2DED10((uint64_t)&v95, a1 + 1344);
        v56 = vdupq_lane_s32((int32x2_t)(v40 | 0x100000000), 0);
        v56.i32[1] = 1;
        v96 = (__int128)v56;
        goto LABEL_50;
      }
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v48) <= 1)
      {
        LOWORD(v95) = 2;
        LOBYTE(v100) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v95, (unsigned __int8 *)&v100, "WARNING: HMM prediction passed a non-normalized probability vector.", v50, v51, v52, v53, v54, v80);
      }
      if ((v40 & 0x80000000) == 0)
      {
        sub_18D2DED10((uint64_t)&v100, a1 + 1344);
        v55 = vdupq_lane_s32((int32x2_t)(v40 | 0x100000000), 0);
        v55.i32[1] = 1;
        v101 = (__int128)v55;
        v97 = 0x10000000CLL;
        v95 = &unk_1E25C6200;
        *(_QWORD *)&v42.f64[1] = 0xC0000000CLL;
        v96 = xmmword_18D3191A0;
        v98 = (double *)v99;
        v42.f64[0] = 1.0 / v49;
        goto LABEL_47;
      }
    }
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  v102 = 0x10000000CLL;
  v100 = &unk_1E25C6200;
  v103 = v104;
  v101 = xmmword_18D314820;
  sub_18D04BE88((uint64_t)&v100, 1.0);
  v97 = 0x10000000CLL;
  v95 = &unk_1E25C6200;
  *(_QWORD *)&v42.f64[1] = 0xC0000000CLL;
  v96 = xmmword_18D3191A0;
  v98 = (double *)v99;
  v42.f64[0] = INFINITY;
  v43 = &v100;
LABEL_47:
  sub_18D064EF4((uint64_t)v43, (uint64_t)&v95, v42);
LABEL_50:
  sub_18D053AA8(a1 + 1344, (uint64_t)&v95);
  *(_DWORD *)(a1 + 1480) = 1;
  v97 = 0xC0000000CLL;
  v95 = &unk_1E25C61A0;
  v96 = xmmword_18D348600;
  v98 = (double *)v99;
  if (v89 < 0xDu)
  {
    LODWORD(v96) = v89;
    DWORD1(v96) = v89;
    DWORD2(v96) = v89 * v89;
    HIDWORD(v96) = v89;
    sub_18D053AA8((uint64_t)&v95, (uint64_t)&v84);
    if (!(_DWORD)v41)
      goto LABEL_64;
    v69 = 0;
    v70 = 0;
    v71 = v98;
LABEL_54:
    v72 = 0.0;
    v73 = v71;
    v74 = v41;
    while (1)
    {
      v75 = *v73;
      if (*v73 < 0.0 || v75 > 1.0)
        break;
      v72 = v72 + v75;
      ++v73;
      if (!--v74)
      {
        if (fabs(v72 + -1.0) <= *(double *)(a1 + 1488))
        {
          ++v69;
          v71 += SHIDWORD(v96);
          v70 = v69 >= v41;
          if (v69 != v41)
            goto LABEL_54;
        }
        break;
      }
    }
    if (v70)
    {
LABEL_64:
      v102 = 0x10000000CLL;
      v100 = &unk_1E25C6200;
      v101 = xmmword_18D3191A0;
      v103 = v104;
      sub_18D053B2C((uint64_t)&v95, a1 + 1344, (uint64_t)&v100);
      sub_18D053AA8(a1 + 1208, (uint64_t)&v100);
      v92 = 0x10000000CLL;
      v90 = &unk_1E25C6200;
      v91 = xmmword_18D3191A0;
      v93 = (double *)&v94;
      sub_18D06403C(a1 + 1208, 1, (uint64_t)&v90);
      v77 = *v93;
      v102 = 0x10000000CLL;
      v100 = &unk_1E25C6200;
      v78.f64[0] = 1.0 / v77;
      v101 = xmmword_18D3191A0;
      v103 = v104;
      sub_18D064EF4(a1 + 1208, (uint64_t)&v100, v78);
      sub_18D053AA8(a1 + 1208, (uint64_t)&v100);
      result = 0;
      *(_DWORD *)(a1 + 1480) = 0;
      return result;
    }
    if (cnprint::CNPrinter::GetLogLevel(v68) <= 1)
    {
      LOWORD(v100) = 2;
      LOBYTE(v90) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v90, "ERROR: HMM transition probability matrix is invalid.", a4, a5, a6, a7, a8, v80);
    }
    v67 = 28;
  }
  else
  {
    LOWORD(v100) = 13;
    LOBYTE(v90) = 4;
    v81 = *((double *)&v83 + 1) + (double)(uint64_t)v83;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v90, "time,%.3lf,t-function failure on line %d: %s() %s", v57, v58, v59, v60, v61, SLOBYTE(v81));
    LOWORD(v100) = 2;
    LOBYTE(v90) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v90, "ERROR: HMM transition probability function failed.", v62, v63, v64, v65, v66, v82);
    v67 = 27;
  }
  LOWORD(v95) = 13;
  LOBYTE(v100) = 4;
  v80 = v67;
  v44 = "failed to predict,code,%d";
  v45 = (cnprint::CNPrinter *)&v95;
  v46 = &v100;
LABEL_69:
  cnprint::CNPrinter::Print(v45, (unsigned __int8 *)v46, v44, a4, a5, a6, a7, a8, v80);
  return 0xFFFFFFFFLL;
}

uint64_t sub_18D2DEB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int32x4_t v14;
  double v16;
  double v17;
  unsigned __int8 v18;
  __int16 v19;
  unsigned __int8 v20;
  __int16 v21;

  if (*(unsigned __int8 *)(a1 + 152) <= 0xCu)
  {
    if (!*(_BYTE *)(a1 + 152))
    {
LABEL_18:
      v14 = vdupq_lane_s32((int32x2_t)(*(unsigned __int8 *)(a1 + 152) | 0x100000000), 0);
      v14.i32[1] = 1;
      *(int32x4_t *)(a2 + 8) = v14;
      sub_18D053AA8(a2, a1 + 16);
      return 0;
    }
    v8 = *(uint64_t **)(a1 + 48);
    v9 = *(unsigned __int8 *)(a1 + 152);
    while (1)
    {
      v10 = *v8 & 0x7FFFFFFFFFFFFFFFLL;
      v11 = (unint64_t)(v10 - 1) < 0xFFFFFFFFFFFFFLL;
      v12 = *v8 < 0 && (unint64_t)(v10 - 0x10000000000000) >> 53 < 0x3FF;
      if (*v8 >= 0)
        v11 = 0;
      v13 = v10 == 0x7FF0000000000000 || v11;
      if ((*v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
        v13 = 1;
      if (((v13 | v12) & 1) != 0 || *(double *)v8 > 1.0)
        break;
      ++v8;
      if (!--v9)
        goto LABEL_18;
    }
    v21 = 13;
    v20 = 4;
    v17 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v21, &v20, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v17));
  }
  else
  {
    v19 = 13;
    v18 = 4;
    v16 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v16));
  }
  return 0xFFFFFFFFLL;
}

_BYTE *trackrun::TrackRunLaneEstimator::Reset(_BYTE *this)
{
  this[1498] = 0;
  this[1496] = 0;
  if (this[1])
    this[1] = 0;
  if (this[1576])
    this[1576] = 0;
  return this;
}

void sub_18D2DEC94(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2DECB8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2DECC4(uint64_t a1)
{
  char v1[144];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_18D0894A0(a1, v1);
}

__n128 sub_18D2DED10(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  int v18;

  result.n128_u64[0] = 0x10000000CLL;
  *(_QWORD *)(a1 + 24) = 0x10000000CLL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C6200;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v17 = "this != &(A)";
    v18 = 603;
    goto LABEL_16;
  }
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0xCu)
  {
    v17 = "this->max_num_rows_ >= A.num_rows_";
    v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    v17 = "this->max_num_cols_ >= A.num_cols_";
    v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (v7 - 1) >> 1;
    v13 = v11;
    v14 = (_OWORD *)(a1 + 40);
    do
    {
      v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    v16 = v10;
    result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D2DEE30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

void sub_18D2DEE44(_QWORD *a1)
{
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2DEE68(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2DEE74(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE v13[11];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v13[v8];
          if (!v13[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = *(_QWORD *)(v7 + 8 * v11);
              *(_QWORD *)(v7 + 8 * v11) = v10;
              *v9 = 1;
              v9 = &v13[v11];
              v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18D2DEF68(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = 0x3000000030;
  *(_QWORD *)a1 = &off_1E25C7C40;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18D348620;
  sub_18D2DF17C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_18D2DEFB8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[5];
  v1[5] = 0;
  if (v3)
    MEMORY[0x18D78B5BC](v3, 0x1000C8000313F17);
  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(exception_object);
}

void sub_18D2DEFF4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E25C7C40;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    MEMORY[0x18D78B5BC](v2, 0x1000C8000313F17);
  *a1 = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2DF060(uint64_t a1)
{
  uint64_t result;

  result = sub_18D2DF17C(a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_18D2DF088(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = (char *)operator new[]();
  bzero(v2, 0x900uLL);
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      v5 = *(_DWORD *)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 20);
      bzero(v2, v5);
      if (v5 >= 3)
      {
        v7 = (v5 - 1);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 1;
        do
        {
          v10 = &v2[v9];
          if (!v2[v9])
          {
            v11 = *(_QWORD *)(v8 + 8 * v9);
            v12 = v9;
            do
            {
              v12 = (int)(v12 * (v4 + v3 - v6)) % (int)v7;
              v13 = *(_QWORD *)(v8 + 8 * v12);
              *(_QWORD *)(v8 + 8 * v12) = v11;
              *v10 = 1;
              v10 = &v2[v12];
              v11 = v13;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v7);
      }
    }
  }
  JUMPOUT(0x18D78B5BCLL);
}

uint64_t sub_18D2DF17C(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)operator new[]();
  bzero(v2, 0x4800uLL);
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v2;
  if (result)
    JUMPOUT(0x18D78B5BCLL);
  return result;
}

double sub_18D2DF1E4(uint64_t a1, uint64_t a2)
{
  double result;
  int v3;
  int v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  const char *v9;
  int v10;

  *(_QWORD *)&result = 0xC0000000CLL;
  *(_QWORD *)(a1 + 24) = 0xC0000000CLL;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E25C61A0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  v6 = (double *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0xCu)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 0xCu)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    v7 = *(double **)(a2 + 32);
    do
    {
      v8 = *v7++;
      result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18D2DF2A0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &unk_1E25C5E70;
  _Unwind_Resume(a1);
}

_QWORD *sub_18D2DF2B4(_QWORD *result)
{
  *result = &unk_1E25C5DB0;
  return result;
}

_QWORD *sub_18D2DF2C8(_QWORD *result)
{
  *result = off_1E25C5B70;
  return result;
}

void sub_18D2DF2D8(_QWORD *a1)
{
  *a1 = off_1E25C5B70;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2DF2F8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2DF304(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v9, v4);
      if (v4 >= 3)
      {
        v6 = v9;
        v7 = 8;
        v8 = v3 + v1 - v5;
        do
        {
          if (!v6)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v8 % (v4 - 1))) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v7);
            v6 = 1;
          }
          v8 += v3 + v1 - v5;
          v7 += 8;
        }
        while (8 * (v4 - 1) != v7);
      }
    }
  }
}

void sub_18D2DF3B8(_QWORD *a1)
{
  *a1 = &unk_1E25C5DB0;
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2DF3DC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_18D2DF3E8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[12];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = 1;
        do
        {
          v8 = &v13[v7];
          if (!v13[v7])
          {
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7);
            v10 = v7;
            do
            {
              v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              v11 = *(_QWORD *)(a1 + 32);
              v12 = *(_QWORD *)(v11 + 8 * v10);
              *(_QWORD *)(v11 + 8 * v10) = v9;
              *v8 = 1;
              v8 = &v13[v10];
              v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

uint64_t trackrun::TrackRunPlatformInfo::TrackRunPlatformInfo(uint64_t this)
{
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)(this + 16) = 0u;
  return sub_18D2DF4F0(this);
}

{
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)(this + 16) = 0u;
  return sub_18D2DF4F0(this);
}

uint64_t sub_18D2DF4F0(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  sub_18D0778AC((_QWORD *)(a1 + 8), "");
  sub_18D0778AC((_QWORD *)(a1 + 32), "");
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_18D2DF548(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void trackrun::TrackRunEngineActiveObject::PopulateAllStartingLineFields(trackrun::TrackRunEngineActiveObject *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char v24;
  unsigned __int8 v25;
  __int16 v26;
  unsigned __int8 v27;
  __int16 v28;

  if (*((_BYTE *)this + 2824))
  {
    if (!*((_BYTE *)this + 624))
      sub_18D164CA0();
    v8 = *((double *)this + 77);
    v9 = *((double *)this + 80);
    v10 = (*((double *)this + 332) - v8) * v9;
    v11 = *((double *)this + 76);
    v12 = *((double *)this + 79);
    v13 = (*((double *)this + 331) - v11) * v12;
    *((double *)this + 335) = v10;
    *((double *)this + 336) = v13;
    v14 = v9 * (*((double *)this + 334) - v8);
    v15 = v12 * (*((double *)this + 333) - v11);
    *((double *)this + 337) = v14;
    *((double *)this + 338) = v15;
    v16 = sqrt((v10 - v14) * (v10 - v14) + 0.0 + (v13 - v15) * (v13 - v15));
    v17 = (v14 - v10) / v16;
    *((double *)this + 345) = v17;
    *((_BYTE *)this + 2768) = 1;
    v18 = (v15 - v13) / v16;
    *((double *)this + 347) = v18;
    *((_BYTE *)this + 2784) = 1;
    if (!*((_BYTE *)this + 2752))
      *((_BYTE *)this + 2752) = 1;
    *((_OWORD *)this + 170) = *(_OWORD *)((char *)this + 2680);
    v19 = *((double *)this + 340);
    v20 = *((double *)this + 341);
    v21 = v17 + v19;
    v22 = v18 + v20;
    *((double *)this + 342) = v21;
    *((double *)this + 343) = v22;
    v23 = sqrt((v19 - v21) * (v19 - v21) + 0.0 + (v20 - v22) * (v20 - v22));
    if (fabs(v23 + -1.0) > 0.000000015)
    {
      v26 = 13;
      v25 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "#tre_ao,starting line segment unit direction vector length is not unity,length,%.1lf", a4, a5, a6, a7, a8, SLOBYTE(v23));
    }
  }
  else
  {
    v28 = 13;
    v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#tre_ao,cannot populate starting line fields. No starting line geodetic coordinates available", a4, a5, a6, a7, a8, v24);
  }
}

uint64_t trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::ConvertLatLonToEastNorth@<X0>(uint64_t result@<X0>, float64x2_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  char v3;
  int8x16_t v4;

  v3 = *(_BYTE *)(result + 16);
  if (v3)
  {
    v4 = (int8x16_t)vmulq_f64(vsubq_f64(*a2, *(float64x2_t *)result), *(float64x2_t *)(result + 24));
    *a3 = vextq_s8(v4, v4, 8uLL);
    v3 = 1;
  }
  else
  {
    a3->i8[0] = 0;
  }
  a3[1].i8[0] = v3;
  return result;
}

void trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::ConvertEastNorthToLatLon(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  float64x2_t v9;
  char v10;
  int8x16_t v11;
  char v12;
  unsigned __int8 v13;
  __int16 v14;

  if (*(_BYTE *)(a1 + 16)
    && fabs(*(double *)(a1 + 24)) >= 2.22044605e-16
    && (v9.f64[0] = *(float64_t *)(a1 + 32), fabs(v9.f64[0]) >= 2.22044605e-16))
  {
    v9.f64[1] = *(float64_t *)(a1 + 24);
    v11 = (int8x16_t)vdivq_f64(*a2, v9);
    *(float64x2_t *)a8 = vaddq_f64((float64x2_t)vextq_s8(v11, v11, 8uLL), *(float64x2_t *)a1);
    v10 = 1;
  }
  else
  {
    v14 = 13;
    v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "#tre_ao,empty origin or zero values scale factors, cannot perform coordinate transform.", a3, a4, a5, a6, a7, v12);
    v10 = 0;
    *(_BYTE *)a8 = 0;
  }
  *(_BYTE *)(a8 + 16) = v10;
}

int64x2_t trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::Reset(trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform *this)
{
  int64x2_t result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)((char *)this + 24) = result;
  return result;
}

BOOL trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::SetTransformationOriginUsingLatLon(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  _BOOL8 v10;
  int v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unsigned __int8 v22;
  __int16 v23;
  double v24;
  double v25;

  v8 = *a2;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || ((_QWORD)a2[1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v25) = 13;
    LOBYTE(v24) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, (unsigned __int8 *)&v24, "#tre_ao,invalid origin for track coordinate transform,%.3lf,%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v8));
    return 0;
  }
  if (fabs(v8) > 80.0)
  {
    LOWORD(v25) = 13;
    LOBYTE(v24) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, (unsigned __int8 *)&v24, "#tre_ao,origin too close to poles,lat,%.9lf", a4, a5, a6, a7, a8, SLOBYTE(v8));
    return 0;
  }
  v13 = *(unsigned __int8 *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (!v13)
    *(_BYTE *)(a1 + 16) = 1;
  v14 = *(double *)a1;
  v24 = 0.0;
  v25 = 0.0;
  v15 = cnnavigation::GeodeticLatLonIncrementsToNorthEastMetersPerRadian((cnnavigation *)&v25, v14 * 0.0174532925, 0.0, &v24, a3);
  v10 = v15 == 0;
  if (v15)
  {
    v23 = 13;
    v22 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v23, &v22, "#tre_ao,error converting delta lat/lon to delta N/E,lat,%.9lf", v16, v17, v18, v19, v20, SLOBYTE(v14));
  }
  else
  {
    v21 = v24 * 0.0174532925;
    *(double *)(a1 + 24) = v25 * 0.0174532925;
    *(double *)(a1 + 32) = v21;
  }
  return v10;
}

uint64_t trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::TransformationHasOrigin(trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform *this)
{
  return *((unsigned __int8 *)this + 16);
}

double trackrun::TrackRunEngineActiveObject::TrackRunEngineActiveObject(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  uint64_t v3;
  double result;

  v2 = (_BYTE *)(a1 + 4600);
  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(_QWORD *)v3 = &off_1E25C8AE8;
  *(_BYTE *)(v3 + 480) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 488) = 0u;
  *(_OWORD *)(v3 + 504) = 0u;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_QWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 544) = 850045863;
  *(_BYTE *)(v3 + 624) = 0;
  *(_OWORD *)(v3 + 552) = 0u;
  *(_OWORD *)(v3 + 568) = 0u;
  *(_OWORD *)(v3 + 584) = 0u;
  *(_OWORD *)(v3 + 593) = 0u;
  *(_QWORD *)(v3 + 632) = 0x7FF8000000000000;
  *(_QWORD *)(v3 + 640) = 0x7FF8000000000000;
  *(_BYTE *)(v3 + 648) = 0;
  *(_BYTE *)(v3 + 672) = 0;
  *(_BYTE *)(v3 + 680) = 0;
  *(_BYTE *)(v3 + 704) = 0;
  *(_BYTE *)(v3 + 712) = 0;
  *(_BYTE *)(v3 + 776) = 0;
  *(_BYTE *)(v3 + 784) = 0;
  *(_BYTE *)(v3 + 1000) = 0;
  *(_BYTE *)(v3 + 1008) = 0;
  *(_BYTE *)(v3 + 1072) = 0;
  *(_BYTE *)(v3 + 1080) = 0;
  *(_BYTE *)(v3 + 1360) = 0;
  *(_BYTE *)(v3 + 1368) = 0;
  *(_BYTE *)(v3 + 1432) = 0;
  *(_BYTE *)(v3 + 1440) = 0;
  *(_BYTE *)(v3 + 1672) = 0;
  *(_BYTE *)(v3 + 1680) = 0;
  *(_BYTE *)(v3 + 2056) = 0;
  *(_BYTE *)(v3 + 2064) = 0;
  *(_BYTE *)(v3 + 2440) = 0;
  *(_BYTE *)(v3 + 2448) = 0;
  *(_BYTE *)(v3 + 2536) = 0;
  *(_BYTE *)(v3 + 2544) = 0;
  *(_BYTE *)(v3 + 2632) = 0;
  *(_BYTE *)(v3 + 2640) = 0;
  *(_BYTE *)(v3 + 2648) = 0;
  *(_BYTE *)(v3 + 2824) = 0;
  *(_BYTE *)(v3 + 2832) = 0;
  *(_BYTE *)(v3 + 2992) = 0;
  *(_BYTE *)(v3 + 3000) = 0;
  *(_BYTE *)(v3 + 3048) = 0;
  *(_WORD *)(v3 + 3104) = 0;
  *(_OWORD *)(v3 + 3088) = 0u;
  *(_OWORD *)(v3 + 3072) = 0u;
  *(_OWORD *)(v3 + 3056) = 0u;
  *(_QWORD *)(v3 + 3136) = 0xC0000000CLL;
  *(_QWORD *)(v3 + 3112) = &unk_1E25C61A0;
  *(_QWORD *)(v3 + 3120) = 0;
  *(_QWORD *)(v3 + 3128) = 0;
  *(_QWORD *)(v3 + 3144) = v3 + 3152;
  *(_QWORD *)(v3 + 4304) = &unk_1E25B8E40;
  *(_QWORD *)(v3 + 4336) = 0x10000000CLL;
  *(_QWORD *)(v3 + 4312) = &unk_1E25C6200;
  *(_QWORD *)(v3 + 4344) = v3 + 4352;
  *(_QWORD *)(v3 + 4472) = 0x10000000CLL;
  *(_QWORD *)(v3 + 4448) = &unk_1E25C6200;
  *(_QWORD *)(v3 + 4480) = v3 + 4488;
  *(_QWORD *)(v3 + 4592) = 0x3DDB7CDFD9D7BDBBLL;
  *(_QWORD *)(v3 + 4328) = 0;
  *(_QWORD *)(v3 + 4320) = 0;
  *(_QWORD *)(v3 + 4464) = 0;
  *(_QWORD *)(v3 + 4456) = 0;
  *(_DWORD *)(v3 + 4584) = 1;
  *(_WORD *)(v3 + 4600) = 0;
  v2[2] = 0;
  *(_QWORD *)(v3 + 4608) = 0;
  v2[16] = 0;
  v2[80] = 0;
  *(_WORD *)(v3 + 4688) = 0;
  v2[96] = 0;
  v2[104] = 0;
  *(_OWORD *)(v3 + 4728) = 0u;
  *(_OWORD *)(v3 + 4744) = 0u;
  *(_OWORD *)(v3 + 4712) = 0u;
  return result;
}

uint64_t trackrun::TrackRunEngineActiveObject::Configure(cnframework::ActiveObjectBase *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  double v48;
  cnprint::CNPrinter *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  void *__p[2];
  char v73;

  if (*((_BYTE *)this + 480))
  {
    LOWORD(v71) = 13;
    LOBYTE(v70) = 3;
    sub_18D0778AC(__p, "TrackRunEngineActiveObject");
    if (v73 >= 0)
      v9 = __p;
    else
      LOBYTE(v9) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)&v70, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v73 < 0)
      operator delete(__p[0]);
  }
  *((_BYTE *)this + 480) = 0;
  v10 = *a2;
  if (!*a2 || !*(_BYTE *)(v10 + 256))
  {
    LOWORD(v71) = 13;
    LOBYTE(v70) = 4;
    sub_18D0778AC(__p, "TrackRunEngineActiveObject");
    if (v73 >= 0)
      v28 = __p;
    else
      LOBYTE(v28) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)&v70, "Error: %s could not be configured.", v23, v24, v25, v26, v27, (char)v28);
    goto LABEL_18;
  }
  *((_QWORD *)this + 67) = v10;
  cnframework::ActiveObjectBase::SetEventQueueDelay(this, 0.0);
  v71 = *a2;
  if (trackrun::TrackRunLaneEstimator::Configure((uint64_t)this + 3104, &v71, v11, v12, v13, v14, v15, v16))
  {
    LOWORD(v70) = 13;
    LOBYTE(v69) = 4;
    sub_18D0778AC(__p, "TrackRunEngineActiveObject");
    if (v73 >= 0)
      v22 = __p;
    else
      LOBYTE(v22) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, (unsigned __int8 *)&v69, "Error: %s could not be configured. Configuration of TrackRun lane estimator failed.", v17, v18, v19, v20, v21, (char)v22);
LABEL_18:
    if (v73 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  v30 = (_QWORD *)(*((_QWORD *)this + 67) + 72);
  if (!sub_18D2AAF1C(v30, 4))
    goto LABEL_32;
  LODWORD(__p[0]) = 4;
  if ((sub_18D2E8950((uint64_t)v30, 4, __p)[3] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_32;
  v31 = *((_QWORD *)this + 67) + 72;
  v70 = 4;
  if (*((double *)sub_18D2E8950(v31, 4, &v70) + 3) < 0.0)
    goto LABEL_32;
  v32 = (_QWORD *)(*((_QWORD *)this + 67) + 72);
  if (!sub_18D2AAF1C(v32, 3))
    goto LABEL_32;
  v69 = 3;
  if ((sub_18D2E8950((uint64_t)v32, 3, &v69)[3] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_32;
  v33 = *((_QWORD *)this + 67) + 72;
  v68 = 3;
  if (*((double *)sub_18D2E8950(v33, 3, &v68) + 3) < 0.0)
    goto LABEL_32;
  v34 = (_QWORD *)(*((_QWORD *)this + 67) + 72);
  if (!sub_18D2AAF1C(v34, 2))
    goto LABEL_32;
  v67 = 2;
  if ((sub_18D2E8950((uint64_t)v34, 2, &v67)[3] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_32;
  v35 = *((_QWORD *)this + 67) + 72;
  v66 = 2;
  if (*((double *)sub_18D2E8950(v35, 2, &v66) + 3) < 0.0)
    goto LABEL_32;
  v36 = *((_QWORD *)this + 67) + 72;
  v65 = 2;
  v37 = *((double *)sub_18D2E8950(v36, 2, &v65) + 3);
  v38 = *((_QWORD *)this + 67) + 72;
  v64 = 3;
  if (v37 < *((double *)sub_18D2E8950(v38, 3, &v64) + 3)
    || (v39 = *((_QWORD *)this + 67) + 72,
        v63 = 3,
        v40 = *((double *)sub_18D2E8950(v39, 3, &v63) + 3),
        v41 = *((_QWORD *)this + 67) + 72,
        v62 = 4,
        v40 < *((double *)sub_18D2E8950(v41, 4, &v62) + 3)))
  {
LABEL_32:
    LOWORD(v70) = 13;
    LOBYTE(v69) = 4;
    sub_18D0778AC(__p, "TrackRunEngineActiveObject");
    if (v73 >= 0)
      v47 = __p;
    else
      LOBYTE(v47) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, (unsigned __int8 *)&v69, "Error: %s could not be configured. Proximity distance threshold parameters do not exist or are invalid.", v42, v43, v44, v45, v46, (char)v47);
    goto LABEL_18;
  }
  v48 = *(double *)(*((_QWORD *)this + 67) + 248);
  if (v48 <= 0.0 || (*(_QWORD *)&v48 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v70) = 13;
    LOBYTE(v69) = 4;
    sub_18D0778AC(__p, "TrackRunEngineActiveObject");
    if (v73 >= 0)
      v61 = __p;
    else
      LOBYTE(v61) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, (unsigned __int8 *)&v69, "Error: %s could not be configured. Home visit consistency threshold is invalid.", v56, v57, v58, v59, v60, (char)v61);
    goto LABEL_18;
  }
  *((_BYTE *)this + 480) = 1;
  v49 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(_QWORD *)this + 48))(this);
  if (cnprint::CNPrinter::GetLogLevel(v49) <= 1)
  {
    LOWORD(v70) = 13;
    LOBYTE(v69) = 1;
    sub_18D0778AC(__p, "TrackRunEngineActiveObject");
    if (v73 >= 0)
      v55 = __p;
    else
      LOBYTE(v55) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, (unsigned __int8 *)&v69, "%s configured successfully.", v50, v51, v52, v53, v54, (char)v55);
    if (v73 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_18D2DFF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t trackrun::TrackRunEngineActiveObject::IsConfigured(trackrun::TrackRunEngineActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

_QWORD *trackrun::TrackRunEngineActiveObject::GetActiveObjectName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "TrackRunEngineActiveObject");
}

uint64_t trackrun::TrackRunEngineActiveObject::GetTrackRunSolution(trackrun::TrackRunEngineActiveObject *this, trackrun::TrackRunSolutionEvent *a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)((char *)this + 544);
  std::mutex::lock((std::mutex *)((char *)this + 544));
  if (*((_BYTE *)this + 2056) && *((_BYTE *)this + 2050))
  {
    memcpy((char *)a2 + 8, (char *)this + 1688, 0x16BuLL);
    v5 = 0;
  }
  else
  {
    v5 = 0xFFFFFFFFLL;
  }
  std::mutex::unlock(v4);
  return v5;
}

void trackrun::TrackRunEngineActiveObject::HandleEvent(trackrun::TrackRunEngineActiveObject *this, const trackrun::MovingStateEvent *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  unsigned __int8 v28;
  __int16 v29;
  void *__p[2];
  char v31;

  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    LOWORD(v26[0]) = 13;
    LOBYTE(v24[0]) = 1;
    v4 = (*(uint64_t (**)(const trackrun::MovingStateEvent *))(*(_QWORD *)a2 + 16))(a2);
    v6 = v5 + (double)v4;
    sub_18D0778AC(__p, off_1E25CD7D8[*((char *)a2 + 56)]);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v26, (unsigned __int8 *)v24, "#tre_ao,received MovingStateEvent,time,%.1lf,ios_time,%.1lf,moving_state,%s", v7, v8, v9, v10, v11, SLOBYTE(v6));
    if (v31 < 0)
      operator delete(__p[0]);
  }
  if (*((_BYTE *)this + 1000))
  {
    v29 = 13;
    v28 = 3;
    v12 = *((_BYTE *)this + 2640);
    sub_18D0778AC(__p, off_1E25CD7D8[*((char *)a2 + 56)]);
    trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString((uint64_t)this, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), v26);
    if (!*((_BYTE *)this + 1000))
      sub_18D164CA0();
    sub_18D0778AC(v24, off_1E25CD7D8[*((char *)a2 + 56)]);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "TrackRun-Moving-%u-%s,viewType,SingleArrowCoordinate,iOSTime,%.1lf,mcTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,course,%.2lf,speed,%.1lf,moving_state,%s", v13, v14, v15, v16, v17, v12);
    if (v25 < 0)
      operator delete(v24[0]);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v31 < 0)
      operator delete(__p[0]);
  }
  if (*((_BYTE *)this + 776))
  {
    v18 = *(_OWORD *)((char *)a2 + 8);
    v19 = *(_OWORD *)((char *)a2 + 24);
    v20 = *(_OWORD *)((char *)a2 + 40);
    *((_BYTE *)this + 768) = *((_BYTE *)a2 + 56);
    *((_OWORD *)this + 46) = v19;
    *((_OWORD *)this + 47) = v20;
    *((_OWORD *)this + 45) = v18;
  }
  else
  {
    *((_QWORD *)this + 89) = &unk_1E25C8990;
    v21 = *(_OWORD *)((char *)a2 + 8);
    v22 = *(_OWORD *)((char *)a2 + 24);
    v23 = *(_OWORD *)((char *)a2 + 40);
    *((_BYTE *)this + 768) = *((_BYTE *)a2 + 56);
    *((_OWORD *)this + 46) = v22;
    *((_OWORD *)this + 47) = v23;
    *((_OWORD *)this + 45) = v21;
    *((_BYTE *)this + 776) = 1;
  }
}

void sub_18D2E02CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD v5[2];

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 536) + 66))
    return sub_18D0778AC(a4, "");
  v5[0] = a2;
  v5[1] = a3;
  return cnnavigation::iOSTimeToLocalTime((uint64_t)v5, a4);
}

uint64_t trackrun::TrackRunEngineActiveObject::HandleEvent(trackrun::TrackRunEngineActiveObject *this, const trackrun::VisitEvent *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v13;
  void *__p;
  char v15;
  void *v16;
  char v17;
  unsigned __int8 v18;
  __int16 v19;

  v19 = 13;
  v18 = 3;
  v4 = (*(uint64_t (**)(const trackrun::VisitEvent *))(*(_QWORD *)a2 + 16))(a2);
  v6 = v5;
  sub_18D2E04CC((uint64_t)a2, &v16);
  sub_18D2E04E4((uint64_t)a2, &__p);
  v13 = v6 + (double)v4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "#tre_ao,received visit event,time,%.1lf,ios_time,%.1lf,arrival time,%.1lf,user specific place type,%s,place inference place type,%s", v7, v8, v9, v10, v11, SLOBYTE(v13));
  if (v15 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  return sub_18D2E04FC((uint64_t)this + 1080, (uint64_t)a2);
}

void sub_18D2E0498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D2E04CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_18D0778AC(a2, off_1E25CD7F8[*(char *)(a1 + 224)]);
}

_QWORD *sub_18D2E04E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_18D0778AC(a2, off_1E25CD820[*(char *)(a1 + 225)]);
}

uint64_t sub_18D2E04FC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (*(_BYTE *)(a1 + 280))
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    v5 = *(_OWORD *)(a2 + 40);
    v6 = *(_OWORD *)(a2 + 56);
    v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v7;
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 40) = v5;
    v8 = *(_OWORD *)(a2 + 104);
    v9 = *(_OWORD *)(a2 + 120);
    v10 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v10;
    *(_OWORD *)(a1 + 120) = v9;
    *(_OWORD *)(a1 + 104) = v8;
    v11 = *(_OWORD *)(a2 + 168);
    v12 = *(_OWORD *)(a2 + 184);
    v13 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 210) = *(_OWORD *)(a2 + 210);
    *(_OWORD *)(a1 + 200) = v13;
    *(_OWORD *)(a1 + 184) = v12;
    *(_OWORD *)(a1 + 168) = v11;
    std::string::operator=((std::string *)(a1 + 232), (const std::string *)(a2 + 232));
    std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  }
  else
  {
    sub_18D2E7A60(a1, a2);
    *(_BYTE *)(a1 + 280) = 1;
  }
  return a1;
}

void trackrun::TrackRunEngineActiveObject::HandleEvent(trackrun::TrackRunEngineActiveObject *this, const trackrun::WatchStateEvent *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  void *__p;
  char v20;
  void *v21;
  char v22;
  unsigned __int8 v23;
  __int16 v24;

  v24 = 13;
  v23 = 3;
  v4 = (*(uint64_t (**)(const trackrun::WatchStateEvent *))(*(_QWORD *)a2 + 16))(a2);
  v6 = v5;
  sub_18D0778AC(&v21, off_1E25CD840[*((char *)a2 + 57)]);
  sub_18D0778AC(&__p, off_1E25CD840[*((char *)a2 + 56)]);
  v18 = v6 + (double)v4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "#tre_ao,received watch state event,time,%.1lf,ios_time,%.1lf,wrist_orientation,%s,crown_orientation,%s", v7, v8, v9, v10, v11, SLOBYTE(v18));
  if (v20 < 0)
    operator delete(__p);
  if (v22 < 0)
    operator delete(v21);
  if (*((_BYTE *)this + 1432))
  {
    v12 = *(_OWORD *)((char *)a2 + 8);
    v13 = *(_OWORD *)((char *)a2 + 24);
    v14 = *(_OWORD *)((char *)a2 + 40);
    *((_WORD *)this + 712) = *((_WORD *)a2 + 28);
    *((_OWORD *)this + 88) = v14;
    *((_OWORD *)this + 87) = v13;
    *((_OWORD *)this + 86) = v12;
  }
  else
  {
    *((_QWORD *)this + 171) = &unk_1E25C8960;
    v15 = *(_OWORD *)((char *)a2 + 8);
    v16 = *(_OWORD *)((char *)a2 + 24);
    v17 = *(_OWORD *)((char *)a2 + 40);
    *((_WORD *)this + 712) = *((_WORD *)a2 + 28);
    *((_OWORD *)this + 88) = v17;
    *((_OWORD *)this + 87) = v16;
    *((_OWORD *)this + 86) = v15;
    *((_BYTE *)this + 1432) = 1;
  }
}

void sub_18D2E074C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void trackrun::TrackRunEngineActiveObject::HandleEvent(trackrun::TrackRunEngineActiveObject *this, const trackrun::WorkoutSessionEvent *a2)
{
  __int128 *v4;
  __int128 v5;
  __int16 v6;
  char *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  trackrun::TrackRunEngineActiveObject *v22;
  void (**v23)(trackrun::WorkoutSessionEvent *__hidden);
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int16 v27;
  __int128 __p;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  trackrun::TrackRunEngineActiveObject *v39;
  void (**v40)(trackrun::WorkoutSessionEvent *__hidden);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v39 = this;
  v40 = off_1E25C8A88;
  v4 = (__int128 *)((char *)a2 + 8);
  v5 = *(_OWORD *)((char *)a2 + 24);
  v41 = *(_OWORD *)((char *)a2 + 8);
  v42 = v5;
  v43 = *(_OWORD *)((char *)a2 + 40);
  v6 = *((_WORD *)a2 + 28);
  v44 = v6;
  v7 = (char *)a2 + 64;
  if (*((char *)a2 + 87) < 0)
  {
    sub_18D077798(&v45, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
    v6 = *((_WORD *)a2 + 28);
    v8 = *((char *)a2 + 87) < 0;
  }
  else
  {
    v8 = 0;
    v45 = *(_OWORD *)v7;
    v46 = *((_QWORD *)a2 + 10);
  }
  v9 = *(_OWORD *)((char *)a2 + 168);
  v10 = *(_OWORD *)((char *)a2 + 200);
  v53 = *(_OWORD *)((char *)a2 + 184);
  v54 = v10;
  v55 = *(_OWORD *)((char *)a2 + 216);
  v11 = *(_OWORD *)((char *)a2 + 104);
  v12 = *(_OWORD *)((char *)a2 + 136);
  v49 = *(_OWORD *)((char *)a2 + 120);
  v50 = v12;
  v51 = *(_OWORD *)((char *)a2 + 152);
  v52 = v9;
  v47 = *(_OWORD *)((char *)a2 + 88);
  v48 = v11;
  v22 = this;
  v23 = off_1E25C8A88;
  v13 = v4[1];
  v24 = *v4;
  v25 = v13;
  v26 = v4[2];
  v27 = v6;
  if (v8)
  {
    sub_18D077798(&__p, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
    LOBYTE(v6) = *((_BYTE *)a2 + 56);
  }
  else
  {
    __p = *(_OWORD *)v7;
    v29 = *((_QWORD *)v7 + 2);
  }
  v14 = *(_OWORD *)((char *)a2 + 200);
  v36 = *(_OWORD *)((char *)a2 + 184);
  v37 = v14;
  v38 = *(_OWORD *)((char *)a2 + 216);
  v15 = *(_OWORD *)((char *)a2 + 136);
  v32 = *(_OWORD *)((char *)a2 + 120);
  v33 = v15;
  v16 = *(_OWORD *)((char *)a2 + 168);
  v34 = *(_OWORD *)((char *)a2 + 152);
  v35 = v16;
  v17 = *(_OWORD *)((char *)a2 + 104);
  v30 = *(_OWORD *)((char *)a2 + 88);
  v31 = v17;
  if (v6 > 7u || ((1 << v6) & 0xD8) == 0)
  {
LABEL_16:
    sub_18D2E0A50((uint64_t)&v39);
    goto LABEL_20;
  }
  v18 = *((unsigned __int8 *)a2 + 57);
  if ((v18 - 4) < 2)
  {
LABEL_15:
    sub_18D2E0A50((uint64_t)&v39);
    sub_18D2E0C94((uint64_t)this + 1440, (uint64_t)a2);
    sub_18D2E0DE4((uint64_t)&v22);
    goto LABEL_20;
  }
  if (v18 != 3)
  {
    if (v18 == 2)
    {
      trackrun::TrackRunEngineActiveObject::ResetTrackStateWhenSessionStarts(this);
      v19 = *((unsigned __int8 *)this + 3048);
      v21 = v4[1];
      v20 = v4[2];
      *(_OWORD *)((char *)this + 3000) = *v4;
      *(_OWORD *)((char *)this + 3016) = v21;
      *(_OWORD *)((char *)this + 3032) = v20;
      if (!v19)
        *((_BYTE *)this + 3048) = 1;
      *((_BYTE *)this + 2640) = *((_BYTE *)this + 2640)
                              + 1
                              - 30 * ((2185 * (*((unsigned __int8 *)this + 2640) + 1)) >> 16);
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  if (*((_BYTE *)this + 3048))
    *((_BYTE *)this + 3048) = 0;
  sub_18D2E0A50((uint64_t)&v39);
  sub_18D2E0C94((uint64_t)this + 1440, (uint64_t)a2);
  sub_18D2E0DE4((uint64_t)&v22);
  trackrun::TrackRunEngineActiveObject::ResetTrackStateWhenLeaveTrackOrSessionEnds(this);
  *((_BYTE *)this + 2640) = *((_BYTE *)this + 2640)
                          + 1
                          - 30 * ((2185 * (*((unsigned __int8 *)this + 2640) + 1)) >> 16);
LABEL_20:
  v23 = off_1E25C8A88;
  if (SHIBYTE(v29) < 0)
    operator delete((void *)__p);
  v40 = off_1E25C8A88;
  if (SHIBYTE(v46) < 0)
    operator delete((void *)v45);
}

void sub_18D2E0A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D2E0A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  void *__p;
  char v12;
  void *v13;
  char v14;
  unsigned __int8 v15;
  __int16 v16;

  v16 = 13;
  v15 = 3;
  v1 = a1 + 8;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v4 = v3;
  sub_18D2E7B84(&v13, *(_BYTE *)(v1 + 56));
  sub_18D2E7B98(&__p, *(_BYTE *)(v1 + 57));
  v10 = v4 + (double)v2;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "#tre_ao,received workout session event,time,%.1lf,ios_time,%.1lf,workout_number,%d,workout_type,%s,workout_event,%s,session_id,%s", v5, v6, v7, v8, v9, SLOBYTE(v10));
  if (v12 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
}

void sub_18D2E0B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double trackrun::TrackRunEngineActiveObject::ResetTrackStateWhenSessionStarts(trackrun::TrackRunEngineActiveObject *this)
{
  char *v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;

  v2 = (char *)this + 4600;
  *((_BYTE *)this + 4602) = 0;
  *((_BYTE *)this + 4600) = 0;
  if (*((_BYTE *)this + 3105))
    *((_BYTE *)this + 3105) = 0;
  if (*((_BYTE *)this + 4680))
    *((_BYTE *)this + 4680) = 0;
  if (*((_BYTE *)this + 2824))
    *((_BYTE *)this + 2824) = 0;
  if (*((_BYTE *)this + 2992))
    *((_BYTE *)this + 2992) = 0;
  v3 = (void **)*((_QWORD *)this + 383);
  v4 = *((_QWORD *)this + 384);
  *((_QWORD *)this + 387) = 0;
  v5 = v4 - (_QWORD)v3;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v3 = (void **)(*((_QWORD *)this + 383) + 8);
      *((_QWORD *)this + 383) = v3;
      v5 = *((_QWORD *)this + 384) - (_QWORD)v3;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    v6 = 25;
  }
  else
  {
    if (v5 >> 3 != 2)
      goto LABEL_16;
    v6 = 51;
  }
  *((_QWORD *)this + 386) = v6;
LABEL_16:
  if (v2[104])
    v2[104] = 0;
  *((_WORD *)this + 2344) = 0;
  if (*((_BYTE *)this + 776))
    *((_BYTE *)this + 776) = 0;
  if (*((_BYTE *)this + 2440))
    *((_BYTE *)this + 2440) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 4728) = 0u;
  *(_OWORD *)((char *)this + 4744) = 0u;
  *(_OWORD *)((char *)this + 4712) = 0u;
  return result;
}

uint64_t sub_18D2E0C94(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (*(_BYTE *)(a1 + 232))
  {
    v4 = *(_OWORD *)(a2 + 8);
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 8) = v4;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    v6 = *(_OWORD *)(a2 + 120);
    v7 = *(_OWORD *)(a2 + 136);
    v8 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 152) = v8;
    *(_OWORD *)(a1 + 136) = v7;
    *(_OWORD *)(a1 + 120) = v6;
    v9 = *(_OWORD *)(a2 + 184);
    v10 = *(_OWORD *)(a2 + 200);
    v11 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 216) = v11;
    *(_OWORD *)(a1 + 200) = v10;
    *(_OWORD *)(a1 + 184) = v9;
  }
  else
  {
    *(_QWORD *)a1 = off_1E25C8A88;
    v12 = *(_OWORD *)(a2 + 8);
    v13 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 8) = v12;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    v14 = (_BYTE *)(a1 + 64);
    if (*(char *)(a2 + 87) < 0)
    {
      sub_18D077798(v14, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)v14 = v15;
    }
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    v16 = *(_OWORD *)(a2 + 104);
    v17 = *(_OWORD *)(a2 + 120);
    v18 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v18;
    *(_OWORD *)(a1 + 120) = v17;
    *(_OWORD *)(a1 + 104) = v16;
    v19 = *(_OWORD *)(a2 + 168);
    v20 = *(_OWORD *)(a2 + 184);
    v21 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v21;
    *(_OWORD *)(a1 + 184) = v20;
    *(_OWORD *)(a1 + 168) = v19;
    *(_BYTE *)(a1 + 232) = 1;
  }
  return a1;
}

void sub_18D2E0DE4(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  char v10;
  void *v11;
  char v12;
  void *v13[2];
  char v14;
  unsigned __int8 v15;
  __int16 v16;

  v2 = *(_QWORD *)a1;
  v16 = 13;
  v15 = 3;
  sub_18D2E7B84(v13, *(_BYTE *)(a1 + 64));
  if (v14 >= 0)
    v3 = v13;
  else
    LOBYTE(v3) = v13[0];
  sub_18D2E7B98(&v11, *(_BYTE *)(a1 + 65));
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString(v2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), &__p);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "Workout-%s-%s-%u,viewType,SingleArrowCoordinate,time,%.1lf,iOSTime,%.1lf,start_time,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,lane_hint,%d", v4, v5, v6, v7, v8, (char)v3);
  if (v10 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_18D2E0F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

double trackrun::TrackRunEngineActiveObject::ResetTrackStateWhenLeaveTrackOrSessionEnds(trackrun::TrackRunEngineActiveObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  unsigned __int8 v9;
  __int16 v10;

  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    v10 = 13;
    v9 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v10, &v9, "#tre_ao,user has left the track or ended the workout,resetting the track state.", v2, v3, v4, v5, v6, v8);
  }
  if (*((_BYTE *)this + 1072))
    *((_BYTE *)this + 1072) = 0;
  return trackrun::TrackRunEngineActiveObject::ResetTrackStateWhenSessionStarts(this);
}

void trackrun::TrackRunEngineActiveObject::HandleEvent(uint64_t this, const trackrun::GEOMapRunningTrackDataEvent *a2, double *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  trackrun::TrackRunEngineActiveObject *v10;
  int v11;
  int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _BYTE *v29;
  char *v30;
  int v31;
  BOOL v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  const trackrun::RunningTrackData::RunningTrackLane *v51;
  const trackrun::RunningTrackData::RunningTrackLane *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  float64_t v91;
  float64x2_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float64x2_t *v98;
  double v99;
  double v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  unint64_t *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  const trackrun::RunningTrackData::RunningTrackLane *v137;
  uint64_t v138;
  void *v139[2];
  char v140;
  unsigned __int8 v141;
  __int16 v142;
  void *v143[2];
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  void *__p[2];
  _BYTE v149[56];
  int v150;
  double v151;
  char v152;
  unint64_t v153;
  float64x2_t v154;
  char *v155;
  char *v156;
  _BYTE *v157;

  if (!*(_BYTE *)(this + 480))
    return;
  if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2))
  {
    LOWORD(__p[0]) = 13;
    LOBYTE(v143[0]) = 4;
    v13 = (*(uint64_t (**)(const trackrun::GEOMapRunningTrackDataEvent *))(*(_QWORD *)a2 + 16))(a2);
    v125 = v14 + (double)v13;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v143, "#tre_ao,time,%.3lf,running track event has no tracks", v15, v16, v17, v18, v19, SLOBYTE(v125));
    return;
  }
  v10 = (trackrun::TrackRunEngineActiveObject *)this;
  v11 = *((unsigned __int8 *)a2 + 80);
  if (!*(_BYTE *)(this + 1000))
  {
    LOWORD(__p[0]) = 13;
    LOBYTE(v143[0]) = 3;
    v20 = (*(uint64_t (**)(const trackrun::GEOMapRunningTrackDataEvent *))(*(_QWORD *)a2 + 16))(a2);
    v126 = v21 + (double)v20;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v143, "#tre_ao,time,%.3lf,no previous position available; caching running track data to process at a future time",
      v22,
      v23,
      v24,
      v25,
      v26,
      SLOBYTE(v126));
    if (v11)
      v27 = (uint64_t)v10 + 2448;
    else
      v27 = (uint64_t)v10 + 2544;
    sub_18D2E1C44(v27, (uint64_t)a2);
    return;
  }
  if (*((_BYTE *)a2 + 80))
  {
    if (*(_BYTE *)(*(_QWORD *)(this + 536) + 67) && *(_BYTE *)(this + 672))
    {
      v12 = 0;
      goto LABEL_30;
    }
    *(_QWORD *)(this + 624) = 0;
    a9 = 0uLL;
    *(_OWORD *)(this + 608) = 0u;
    *(_QWORD *)(this + 632) = 0x7FF8000000000000;
    *(_QWORD *)(this + 640) = 0x7FF8000000000000;
    if (*(_BYTE *)(this + 2824))
    {
      v28 = *(_OWORD *)(this + 2664);
      *(_OWORD *)__p = *(_OWORD *)(this + 2648);
      *(_OWORD *)v149 = v28;
      memset(&v149[16], 0, 32);
      *(_QWORD *)(this + 2688) = 0;
      *(_QWORD *)(this + 2680) = 0;
      a9.n128_u64[1] = *(_QWORD *)&v149[40];
      *(_OWORD *)(this + 2696) = *(_OWORD *)&v149[32];
      *(_WORD *)(this + 2712) = 0;
      if (*(_BYTE *)(this + 2752))
        *(_BYTE *)(this + 2752) = 0;
      *(_BYTE *)(this + 2760) = 0;
      *(_BYTE *)(this + 2768) = 0;
      *(_BYTE *)(this + 2776) = 0;
      *(_BYTE *)(this + 2784) = 0;
      *(_BYTE *)(this + 2792) = 0;
      *(_BYTE *)(this + 2816) = 0;
    }
    if (!*(_BYTE *)(this + 672))
      goto LABEL_29;
    v29 = (_BYTE *)(this + 672);
    v30 = (char *)(this + 648);
LABEL_28:
    __p[0] = v30;
    sub_18D2DC5D8((void ***)__p);
    *v29 = 0;
LABEL_29:
    v12 = 1;
    goto LABEL_30;
  }
  this = sub_18D2E1C44(this + 2544, (uint64_t)a2);
  v31 = *((unsigned __int8 *)v10 + 704);
  if (*(_BYTE *)(*((_QWORD *)v10 + 67) + 67))
    v32 = v31 == 0;
  else
    v32 = 1;
  v12 = v32;
  if (*(_BYTE *)(*((_QWORD *)v10 + 67) + 67))
    v33 = 1;
  else
    v33 = v31 == 0;
  if (!v33)
  {
    v29 = (char *)v10 + 704;
    v30 = (char *)v10 + 680;
    goto LABEL_28;
  }
LABEL_30:
  if (*((_BYTE *)v10 + 624))
  {
    a9.n128_u64[0] = *((_QWORD *)v10 + 80);
  }
  else
  {
    *(_OWORD *)v143 = *((_OWORD *)v10 + 56);
    this = trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::SetTransformationOriginUsingLatLon((uint64_t)v10 + 608, (double *)v143, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (!(_DWORD)this || !*((_BYTE *)v10 + 624))
    {
      LOWORD(v154.f64[0]) = 13;
      LOBYTE(v139[0]) = 4;
      v37 = (*(uint64_t (**)(const trackrun::GEOMapRunningTrackDataEvent *))(*(_QWORD *)a2 + 16))(a2);
      v39 = v38 + (double)v37;
      sub_18D0778AC(__p, "TrackRunEngineActiveObject");
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v154, (unsigned __int8 *)v139, "#tre_ao,time,%.3lf,%s could not configure running track coordinate transform", v40, v41, v42, v43, v44, SLOBYTE(v39));
      if ((v149[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      return;
    }
    a9.n128_u64[0] = *((_QWORD *)v10 + 80);
    if (*((_BYTE *)v10 + 2824))
      trackrun::TrackRunEngineActiveObject::PopulateAllStartingLineFields(v10, v35, v36, (uint64_t)a4, a5, a6, a7, a8);
  }
  if (v12)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v149 = 0;
    v149[8] = 1;
    if (v11)
      v34 = (uint64_t *)((char *)v10 + 648);
    else
      v34 = (uint64_t *)((char *)v10 + 680);
    sub_18D2E83B4((uint64_t)v34, (__n128 *)__p);
    if (v149[8])
    {
      v143[0] = __p;
      sub_18D2DC5D8((void ***)v143);
    }
    this = sub_18D2D9DD8(v34, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  }
  v45 = *((_QWORD *)a2 + 1);
  if (*((_QWORD *)a2 + 2) != v45)
  {
    v133 = 0;
    v46 = 0;
    v47 = 0;
    v136 = v11;
    while (1)
    {
      v48 = v45 + 104 * v47;
      v50 = *(_QWORD *)(v48 + 96);
      v49 = (unint64_t *)(v48 + 96);
      if (v50)
        break;
      LOWORD(__p[0]) = 13;
      LOBYTE(v143[0]) = 4;
      v101 = (*(uint64_t (**)(const trackrun::GEOMapRunningTrackDataEvent *, __n128))(*(_QWORD *)a2 + 16))(a2, a9);
      v129 = v102 + (double)v101;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v143, "#tre_ao,time,%.3lf,track has no lanes", v103, v104, v105, v106, v107, SLOBYTE(v129));
LABEL_110:
      ++v47;
      v45 = *((_QWORD *)a2 + 1);
      if (v47 >= 0x4EC4EC4EC4EC4EC5 * ((*((_QWORD *)a2 + 2) - v45) >> 3))
        goto LABEL_118;
    }
    v131 = v49;
    v132 = v45 + 104 * v47;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)v149 = 0;
    LOBYTE(v151) = 0;
    v152 = 0;
    v153 = 0;
    memset(&v149[24], 0, 32);
    v150 = 0;
    v134 = v45;
    v135 = v47;
    v52 = *(const trackrun::RunningTrackData::RunningTrackLane **)(v132 + 40);
    v51 = *(const trackrun::RunningTrackData::RunningTrackLane **)(v132 + 48);
    if (v52 != v51)
    {
      v137 = *(const trackrun::RunningTrackData::RunningTrackLane **)(v132 + 48);
      v138 = 0;
      do
      {
        BYTE8(v145) = 0;
        LOBYTE(v146) = 0;
        BYTE8(v146) = 0;
        LOBYTE(v147) = 0;
        v143[1] = 0;
        v144 = 0;
        v143[0] = 0;
        LODWORD(v145) = 0;
        *((_QWORD *)&v147 + 1) = 0xBFF0000000000000;
        if (trackrun::TrackRunEngineActiveObject::CopyTrackLaneData(v10, v52, (trackrun::RunningTrackData::RunningTrackLane *)v143, a4, a5, a6, a7, a8))
        {
          v53 = v46;
          v54 = *(_QWORD *)v52;
          if (*(_QWORD *)v52 != *((_QWORD *)v52 + 1))
          {
            v55 = 0;
            do
            {
              LOWORD(v139[0]) = 13;
              LOBYTE(v142) = 3;
              v56 = *((_QWORD *)a2 + 8);
              v57 = *((double *)a2 + 9);
              (*(void (**)(const trackrun::GEOMapRunningTrackDataEvent *))(*(_QWORD *)a2 + 16))(a2);
              trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString((uint64_t)v10, *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 9), &v154);
              v127 = v57 + (double)v56;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v139, (unsigned __int8 *)&v142, "TrackRun-Track,viewType,ConnectedCoordinates,iOSTime,%.1lf,mcTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,lane,%zu,index,%zu", v58, v59, v60, v61, v62, SLOBYTE(v127));
              if (SHIBYTE(v155) < 0)
                operator delete(*(void **)&v154.f64[0]);
              ++v55;
              v54 += 16;
            }
            while (v54 != *((_QWORD *)v52 + 1));
          }
          v63 = *(_QWORD *)&v149[32];
          if (*(_QWORD *)&v149[32] >= *(_QWORD *)&v149[40])
          {
            v75 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v149[32] - *(_QWORD *)&v149[24]) >> 3);
            v76 = v75 + 1;
            if (v75 + 1 > 0x38E38E38E38E38ELL)
              sub_18D07AFE4();
            v64 = v53;
            if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v149[40] - *(_QWORD *)&v149[24]) >> 3) > v76)
              v76 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v149[40] - *(_QWORD *)&v149[24]) >> 3);
            if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v149[40] - *(_QWORD *)&v149[24]) >> 3) >= 0x1C71C71C71C71C7)
              v77 = 0x38E38E38E38E38ELL;
            else
              v77 = v76;
            v157 = &v149[40];
            v11 = v136;
            if (v77)
              v78 = (char *)sub_18D2DBB78((uint64_t)&v149[40], v77);
            else
              v78 = 0;
            v79 = &v78[72 * v75];
            *(_QWORD *)&v154.f64[0] = v78;
            *(_QWORD *)&v154.f64[1] = v79;
            v155 = v79;
            v156 = &v78[72 * v77];
            *(_QWORD *)v79 = 0;
            *((_QWORD *)v79 + 1) = 0;
            *((_QWORD *)v79 + 2) = 0;
            sub_18D2E8454(v79, v143[0], (uint64_t)v143[1], ((char *)v143[1] - (char *)v143[0]) >> 4);
            v80 = &v78[72 * v75];
            v81 = v147;
            v82 = v145;
            *(_OWORD *)(v80 + 40) = v146;
            *(_OWORD *)(v80 + 24) = v82;
            *(_OWORD *)(v80 + 56) = v81;
            v155 += 72;
            sub_18D2DBB04((uint64_t *)&v149[24], &v154);
            v67 = *(_QWORD *)&v149[32];
            sub_18D2DBCEC((uint64_t)&v154);
          }
          else
          {
            **(_OWORD **)&v149[32] = 0uLL;
            *(_QWORD *)(v63 + 16) = 0;
            sub_18D2E8454((_QWORD *)v63, v143[0], (uint64_t)v143[1], ((char *)v143[1] - (char *)v143[0]) >> 4);
            v64 = v53;
            v65 = v145;
            v66 = v146;
            *(_OWORD *)(v63 + 56) = v147;
            *(_OWORD *)(v63 + 40) = v66;
            *(_OWORD *)(v63 + 24) = v65;
            v67 = v63 + 72;
            v11 = v136;
          }
          v51 = v137;
          *(_QWORD *)&v149[32] = v67;
          ++v138;
          v46 = v64 + 1;
        }
        else
        {
          LOWORD(v154.f64[0]) = 13;
          LOBYTE(v139[0]) = 4;
          v68 = (*(uint64_t (**)(const trackrun::GEOMapRunningTrackDataEvent *))(*(_QWORD *)a2 + 16))(a2);
          v128 = v69 + (double)v68;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v154, (unsigned __int8 *)v139, "#tre_ao,time,%.3lf,cannot add lane data to track", v70, v71, v72, v73, v74, SLOBYTE(v128));
        }
        if (v143[0])
        {
          v143[1] = v143[0];
          operator delete(v143[0]);
        }
        v52 = (const trackrun::RunningTrackData::RunningTrackLane *)((char *)v52 + 72);
      }
      while (v52 != v51);
    }
    v83 = v134 + 104 * v135;
    *(_QWORD *)&v149[48] = *(_QWORD *)(v83 + 64);
    v150 = *(_DWORD *)(v83 + 72);
    v143[0] = 0;
    v143[1] = 0;
    v144 = 0;
    sub_18D2E8454(v143, *(const void **)v132, *(_QWORD *)(v132 + 8), (uint64_t)(*(_QWORD *)(v132 + 8) - *(_QWORD *)v132) >> 4);
    v90 = (char *)v143[0];
    if (v143[0] != v143[1])
    {
      do
      {
        sub_18D0778AC(&v154, "");
        if (!v11)
        {
          if (SHIBYTE(v155) < 0)
          {
            *(_QWORD *)&v154.f64[1] = 7;
            v91 = v154.f64[0];
          }
          else
          {
            HIBYTE(v155) = 7;
            v91 = COERCE_DOUBLE(&v154);
          }
          strcpy(*(char **)&v91, "-sparse");
        }
        v142 = 13;
        v141 = 3;
        if (SHIBYTE(v155) >= 0)
          v92 = &v154;
        else
          LOBYTE(v92) = LOBYTE(v154.f64[0]);
        (*(void (**)(const trackrun::GEOMapRunningTrackDataEvent *))(*(_QWORD *)a2 + 16))(a2);
        trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString((uint64_t)v10, *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 9), v139);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v142, &v141, "TrackRun-Track-Bbox%s,viewType,ConnectedCoordinates,iOSTime,%.1lf,mcTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf", v93, v94, v95, v96, v97, (char)v92);
        if (v140 < 0)
          operator delete(v139[0]);
        if (SHIBYTE(v155) < 0)
          operator delete(*(void **)&v154.f64[0]);
        v90 += 16;
      }
      while (v90 != v143[1]);
      v98 = (float64x2_t *)v143[0];
      if (v90 != v143[0])
      {
        do
        {
          trackrun::TrackRunEngineActiveObject::ConvertPointLatLonToEastNorth((uint64_t)v10, v98, v84, v85, v86, v87, v88, v89);
          v32 = v98++ == (float64x2_t *)(v90 - 16);
        }
        while (!v32);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v143;
    *(_QWORD *)v149 = v144;
    v143[1] = 0;
    v144 = 0;
    v143[0] = 0;
    v47 = v135;
    v154 = *(float64x2_t *)(v134 + 104 * v135 + 24);
    trackrun::TrackRunEngineActiveObject::ConvertPointLatLonToEastNorth((uint64_t)v10, &v154, v84, v85, v86, v87, v88, v89);
    *(float64x2_t *)&v149[8] = v154;
    if (v11 && v153 >= 2)
    {
      trackrun::TrackRunEngineActiveObject::FindClosestPointOnRing(**(double ***)&v149[24], (double **)(*(_QWORD *)&v149[24] + 72 * v153 - 72), 1, 0);
      v100 = fabs(v99) / (double)(v153 - 1);
    }
    else
    {
      v100 = 1.22;
      if (!v11)
      {
        v113 = *((_QWORD *)v10 + 67);
        v114 = *(unsigned __int8 *)(v113 + 202);
        v115 = (unint64_t *)(v113 + 208);
        if (!v114)
          v115 = v131;
        v153 = *v115;
        v116 = *((_QWORD *)v10 + 86);
        if (v116 >= *((_QWORD *)v10 + 87))
        {
          v117 = sub_18D2E84CC((uint64_t *)v10 + 85, (uint64_t)__p);
        }
        else
        {
          sub_18D2E85E8(*((_QWORD *)v10 + 86), (uint64_t)__p);
          v117 = v116 + 104;
          *((_QWORD *)v10 + 86) = v116 + 104;
        }
        *((_QWORD *)v10 + 86) = v117;
        goto LABEL_105;
      }
    }
    v151 = v100;
    v152 = 1;
    v108 = *((_QWORD *)v10 + 67);
    v109 = *(unsigned __int8 *)(v108 + 202);
    v110 = (unint64_t *)(v108 + 208);
    if (!v109)
      v110 = v131;
    v153 = *v110;
    v111 = *((_QWORD *)v10 + 82);
    if (v111 >= *((_QWORD *)v10 + 83))
    {
      v112 = sub_18D2E84CC((uint64_t *)v10 + 81, (uint64_t)__p);
    }
    else
    {
      sub_18D2E85E8(*((_QWORD *)v10 + 82), (uint64_t)__p);
      v112 = v111 + 104;
      *((_QWORD *)v10 + 82) = v111 + 104;
    }
    *((_QWORD *)v10 + 82) = v112;
LABEL_105:
    if (v143[0])
    {
      v143[1] = v143[0];
      operator delete(v143[0]);
    }
    v143[0] = &v149[24];
    sub_18D2DBD78((void ***)v143);
    this = (uint64_t)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    ++v133;
    goto LABEL_110;
  }
LABEL_118:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this) < 2)
  {
    LOWORD(__p[0]) = 13;
    LOBYTE(v143[0]) = 1;
    v118 = (*(uint64_t (**)(const trackrun::GEOMapRunningTrackDataEvent *))(*(_QWORD *)a2 + 16))(a2);
    v130 = v119 + (double)v118;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v143, "#tre_ao,time,%.3lf,new track data,num_tracks,%d,num_lanes,%d,num_lane_coordinates,%d,is_sparse_event,%d", v120, v121, v122, v123, v124, SLOBYTE(v130));
  }
  if (v11)
  {
    if (*((_BYTE *)v10 + 2632))
      trackrun::TrackRunEngineActiveObject::HandleEvent(v10, (trackrun::TrackRunEngineActiveObject *)((char *)v10 + 2544));
  }
}

void sub_18D2E1B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a53 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2E1C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (*(_BYTE *)(a1 + 88))
  {
    if (a1 != a2)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v6 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = 0x4EC4EC4EC4EC4EC5 * ((v5 - v6) >> 3);
      if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 24) - v4) >> 3) >= v7)
      {
        if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 16) - v4) >> 3) >= v7)
        {
          v15 = sub_18D2E7FA8(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), v4);
          for (i = *(_QWORD *)(a1 + 16); i != v15; sub_18D2DB938(i))
            i -= 104;
          *(_QWORD *)(a1 + 16) = v15;
          goto LABEL_18;
        }
        v14 = v6 + 8 * ((*(_QWORD *)(a1 + 16) - v4) >> 3);
        sub_18D2E7FA8(*(_QWORD *)(a2 + 8), v14, v4);
        v10 = sub_18D2E7C64(a1 + 24, v14, v5, *(_QWORD *)(a1 + 16));
      }
      else
      {
        sub_18D2E7BAC((void **)(a1 + 8));
        if (v7 > 0x276276276276276)
          sub_18D07AFE4();
        v8 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 8)) >> 3);
        if (v8 <= v7)
          v8 = 0x4EC4EC4EC4EC4EC5 * ((v5 - v6) >> 3);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 8)) >> 3)) >= 0x13B13B13B13B13BLL)
          v9 = 0x276276276276276;
        else
          v9 = v8;
        sub_18D2E7C10((_QWORD *)(a1 + 8), v9);
        v10 = sub_18D2E7C64(a1 + 24, v6, v5, *(_QWORD *)(a1 + 16));
      }
      *(_QWORD *)(a1 + 16) = v10;
    }
LABEL_18:
    v17 = *(_OWORD *)(a2 + 32);
    v18 = *(_OWORD *)(a2 + 48);
    v19 = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v18;
    *(_OWORD *)(a1 + 64) = v19;
    *(_OWORD *)(a1 + 32) = v17;
    return a1;
  }
  *(_QWORD *)a1 = off_1E25C8B58;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_18D2E8330((_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 88) = 1;
  return a1;
}

void sub_18D2E1E64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_18D2E1E6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

BOOL trackrun::TrackRunEngineActiveObject::CopyTrackLaneData(trackrun::TrackRunEngineActiveObject *this, const trackrun::RunningTrackData::RunningTrackLane *a2, trackrun::RunningTrackData::RunningTrackLane *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  float64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  float64x2_t *v43;
  double v45;
  double *f64;
  double *v47;
  double v48;
  BOOL v49;
  unint64_t v51;
  BOOL v52;
  double v54;
  double v55;
  double v56;
  double v57;
  unsigned __int8 v58;
  float64x2_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v10 = *(char **)a2;
  v11 = *((_QWORD *)a2 + 1);
  v13 = v11 - (_QWORD)v10;
  v14 = (v11 - (uint64_t)v10) >> 4;
  if ((unint64_t)(v11 - (_QWORD)v10) <= 0x20)
  {
    LOWORD(v59.f64[0]) = 13;
    v58 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, &v58, "#tre_ao,lane has fewer than three coordinates,%lu", v14, a5, a6, a7, a8, (v11 - (uint64_t)v10) >> 4);
  }
  else
  {
    if (a3 != a2)
      sub_18D2E81AC((char *)a3, v10, v11, v14);
    v16 = *(_OWORD *)((char *)a2 + 24);
    v17 = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a3 + 56) = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)a3 + 40) = v17;
    *(_OWORD *)((char *)a3 + 24) = v16;
    v18 = *(float64x2_t **)a3;
    v19 = (float64x2_t *)*((_QWORD *)a3 + 1);
    if (*(float64x2_t **)a3 == v19)
    {
      v20 = (float64x2_t *)*((_QWORD *)a3 + 1);
    }
    else
    {
      do
        trackrun::TrackRunEngineActiveObject::ConvertPointLatLonToEastNorth((uint64_t)this, v18++, v11, v14, a5, a6, a7, a8);
      while (v18 != v19);
      v20 = *(float64x2_t **)a3;
      v19 = (float64x2_t *)*((_QWORD *)a3 + 1);
    }
    v21 = (char *)v19 - (char *)v20;
    if ((unint64_t)((char *)v19 - (char *)v20) >= 0x30)
    {
      v22 = v20->f64[0];
      v23 = v19[-1].f64[0];
      if (v20->f64[0] != v23)
      {
        if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_28;
        }
        v54 = vabdd_f64(v22, v23);
        v55 = fabs(v22);
        v56 = fabs(v23);
        if (v55 >= v56)
          v56 = v55;
        v57 = v56 >= 1.0 ? v56 * 2.22044605e-16 : 2.22044605e-16;
        if (v54 > v57)
          goto LABEL_28;
      }
      v24 = v20->f64[1];
      v25 = v19[-1].f64[1];
      if (v24 != v25)
      {
        if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_28;
        }
        v27 = vabdd_f64(v24, v25);
        v28 = fabs(v24);
        v29 = fabs(v25);
        if (v28 < v29)
          v28 = v29;
        v30 = v28 >= 1.0 ? v28 * 2.22044605e-16 : 2.22044605e-16;
        if (v27 > v30)
        {
LABEL_28:
          v32 = v20->f64[1];
          v33 = *((_QWORD *)a3 + 2);
          if ((unint64_t)v19 >= v33)
          {
            v34 = v21 >> 4;
            v35 = (v21 >> 4) + 1;
            if (v35 >> 60)
              sub_18D07AFE4();
            v36 = v33 - (_QWORD)v20;
            if (v36 >> 3 > v35)
              v35 = v36 >> 3;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
              v37 = 0xFFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
              v38 = (char *)sub_18D16735C((uint64_t)a3 + 16, v37);
            else
              v38 = 0;
            v39 = &v38[16 * v34];
            v40 = &v38[16 * v37];
            *(double *)v39 = v22;
            *((float64_t *)v39 + 1) = v32;
            v19 = (float64x2_t *)(v39 + 16);
            v42 = *(char **)a3;
            v41 = (char *)*((_QWORD *)a3 + 1);
            if (v41 != *(char **)a3)
            {
              do
              {
                *((_OWORD *)v39 - 1) = *((_OWORD *)v41 - 1);
                v39 -= 16;
                v41 -= 16;
              }
              while (v41 != v42);
              v41 = *(char **)a3;
            }
            *(_QWORD *)a3 = v39;
            *((_QWORD *)a3 + 1) = v19;
            *((_QWORD *)a3 + 2) = v40;
            if (v41)
              operator delete(v41);
          }
          else
          {
            v19->f64[0] = v22;
            v19->f64[1] = v32;
            ++v19;
          }
          *((_QWORD *)a3 + 1) = v19;
          v20 = *(float64x2_t **)a3;
          v21 = (uint64_t)v19 - *(_QWORD *)a3;
        }
      }
      v43 = v19 - 1;
      if ((unint64_t)v21 >= 0x40 && v43 != v20)
      {
        v45 = 0.0;
        f64 = v19[-1].f64;
        v47 = v19[-1].f64;
        do
        {
          v48 = *(v47 - 2);
          v47 -= 2;
          v45 = v45 + (*f64 + v48) * (f64[1] - *(f64 - 1));
          f64 = v47;
        }
        while (v47 != (double *)v20);
        v49 = v45 * 0.5 >= 0.0 || v20 == v19;
        if (!v49 && v43 > v20)
        {
          v51 = (unint64_t)&v20[1];
          do
          {
            v59 = *(float64x2_t *)(v51 - 16);
            *(float64x2_t *)(v51 - 16) = *v43;
            *v43-- = v59;
            v52 = v51 >= (unint64_t)v43;
            v51 += 16;
          }
          while (!v52);
        }
      }
    }
  }
  return v13 > 0x20;
}

float64x2_t trackrun::TrackRunEngineActiveObject::ConvertPointLatLonToEastNorth(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t v9;
  float64x2_t result;
  char v11;
  unsigned __int8 v12;
  __int16 v13;

  if (*(_BYTE *)(a1 + 624))
  {
    v9 = (int8x16_t)vmulq_f64(vsubq_f64(*a2, *(float64x2_t *)(a1 + 608)), *(float64x2_t *)(a1 + 632));
  }
  else
  {
    v13 = 13;
    v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "#tre_ao,point coordinate conversion from lat lon to east north could not be completed", a4, a5, a6, a7, a8, v11);
    v9 = 0uLL;
  }
  result = (float64x2_t)vextq_s8(v9, v9, 8uLL);
  *a2 = result;
  return result;
}

double trackrun::TrackRunEngineActiveObject::FindClosestPointOnRing(double *a1, double **a2, int a3, int a4)
{
  double *v4;
  double *v5;
  __int128 v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __int128 v34;
  __int128 v35;

  v5 = *a2;
  v4 = a2[1];
  v6 = *((_OWORD *)*a2 + 1);
  v34 = *(_OWORD *)*a2;
  v35 = v6;
  if (v5 != v4)
  {
    v7 = v5 + 2;
    if (v5 + 2 == v4)
    {
      v23 = *v5;
      v24 = v5[1];
      v25 = a1[1];
      v26 = v23 - v23;
      v27 = v24 - v24;
      v28 = *a1 - *v5;
      v29 = (v24 - v24) * (v25 - v24) + v28 * (v23 - v23);
      if (v29 <= 0.0 || (v30 = v27 * v27 + v26 * v26, v30 <= v29))
      {
        v32 = v28 * v28 + 0.0 + (v25 - v24) * (v25 - v24);
      }
      else
      {
        v31 = *a1 - (v23 + v26 * (v29 / v30));
        v32 = v31 * v31 + 0.0 + (v25 - (v24 + v27 * (v29 / v30))) * (v25 - (v24 + v27 * (v29 / v30)));
      }
      if (v32 < 1.79769313e308)
      {
        v34 = *(_OWORD *)v5;
        v35 = v34;
      }
    }
    else
    {
      v8 = *a1;
      v9 = a1[1];
      v11 = *v5;
      v10 = v5[1];
      v12 = 1.79769313e308;
      do
      {
        v13 = *v7;
        v14 = v7[1];
        v15 = *v7 - v11;
        v16 = v14 - v10;
        v17 = (v9 - v10) * (v14 - v10) + (v8 - v11) * v15;
        if (v17 <= 0.0)
        {
          v22 = (v8 - v11) * (v8 - v11) + 0.0 + (v9 - v10) * (v9 - v10);
        }
        else
        {
          v18 = v16 * v16 + v15 * v15;
          if (v18 <= v17)
          {
            v20 = v9 - v14;
            v21 = v8 - v13;
          }
          else
          {
            v19 = v17 / v18;
            v20 = v9 - (v10 + v16 * v19);
            v21 = v8 - (v11 + v15 * v19);
          }
          v22 = v21 * v21 + 0.0 + v20 * v20;
        }
        if (v22 < v12)
        {
          v34 = *((_OWORD *)v7 - 1);
          v35 = *(_OWORD *)v7;
          v12 = v22;
        }
        v7 += 2;
        v10 = v14;
        v11 = v13;
      }
      while (v7 != v4);
    }
  }
  return trackrun::TrackRunEngineActiveObject::FindClosestPointOnLineSegment(a1, (double *)&v34, a3, a4, 0);
}

void trackrun::TrackRunEngineActiveObject::HandleEvent(trackrun::TrackRunEngineActiveObject *this, const trackrun::PositionEvent *a2, double *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  double v13;
  unsigned int v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  int8x16_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  double *v97;
  double v98;
  double v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  double *v107;
  double v108;
  double v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  double *v113;
  double *v114;
  double **v115;
  double *v116;
  BOOL v117;
  char v118;
  char v119;
  unint64_t v120;
  double *v121;
  unint64_t v122;
  double *v123;
  double v124;
  BOOL v125;
  double v126;
  double v127;
  char v128;
  double v129;
  double v130;
  double v131;
  double v133;
  double v134;
  double v135;
  double v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double *v173;
  double v174;
  double v175;
  double v177;
  double v178;
  double v179;
  double v180;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  int8x16_t v198;
  int8x16_t v199;
  uint64_t v200;
  double *v201;
  double *v202;
  double *v203;
  BOOL v204;
  double v205;
  BOOL v206;
  uint64_t v207;
  double *v208;
  BOOL v209;
  BOOL v210;
  double v211;
  uint64_t v212;
  double v213;
  uint64_t v214;
  double v215;
  uint64_t v216;
  double *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  int v224;
  uint64_t v225;
  double v226;
  int v227;
  char v228;
  int v229;
  uint64_t v230;
  int v231;
  double **v232;
  int v233;
  double v235;
  double v236;
  double v237;
  double v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  __int128 *v243;
  double v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  unint64_t v257;
  char *v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  cnprint::CNPrinter *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _OWORD *v272;
  __int128 v273;
  __int128 v274;
  char *v275;
  __int128 v276;
  float64_t v277;
  __int128 v278;
  __int128 v279;
  unsigned int v280;
  unsigned int v281;
  uint64_t v282;
  unsigned int v283;
  BOOL v284;
  int v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int8x16_t *v292;
  double v293;
  double v294;
  double v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  double v306;
  double v307;
  double v308;
  double v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  double v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  double *v319;
  double v320;
  double v321;
  double v323;
  double v324;
  double v325;
  double v327;
  double v328;
  double v329;
  double v330;
  float64_t v331;
  __int128 v332;
  double v333;
  double v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  __int16 v340;
  double ClosestPointOnRing;
  double v342;
  double v343;
  double v344;
  double v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  double v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int8x16_t v360;
  int8x16_t v361;
  __int128 v362;
  int v363;
  double v364;
  double v365;
  double v366;
  uint64_t v367;
  char v368;
  uint64_t v369;
  double v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  double *v382;
  double *v383;
  double *v384;
  double *v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  __int128 v413;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  float64_t v423;
  double *v424;
  double *v425;
  int8x16_t *v426;
  int8x16_t v427;
  int8x16_t v428;
  float64x2_t v429;
  double v430;
  double v431;
  double v432;
  BOOL v433;
  double v434;
  uint64_t v435;
  uint64_t v436;
  double v437;
  double v438;
  double v439;
  double *v440;
  uint64_t v441;
  double v442;
  double v443;
  double v444;
  uint64_t v445;
  double *v446;
  double *v447;
  double *v448;
  unint64_t *v449;
  uint64_t v450;
  uint64_t v451;
  std::mutex *v452;
  int v453;
  double v454;
  double v455;
  uint64_t v456;
  double v457;
  double v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int64_t v464;
  unint64_t v465;
  double *v466;
  double v467;
  double v468;
  double v469;
  uint64_t v470;
  double v471;
  double v472;
  double v473;
  double v474;
  double v475;
  double v476;
  uint64_t v477;
  double v478;
  double v479;
  int v480;
  unsigned int v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  BOOL v487;
  int v490;
  int v491;
  unint64_t v492;
  unint64_t v493;
  uint64_t v494;
  std::mutex *v495;
  uint64_t v496;
  int v497;
  unint64_t v498;
  unint64_t v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  unint64_t *v506;
  unint64_t v507;
  unint64_t v508;
  unint64_t *v509;
  char *v510;
  char *v511;
  uint64_t *v512;
  void *v513;
  char *v514;
  uint64_t v515;
  unint64_t v516;
  int64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t **v520;
  uint64_t *v521;
  char *v522;
  char *v523;
  BOOL v524;
  BOOL v525;
  BOOL v526;
  int v527;
  uint64_t v528;
  double v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  unsigned int v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t *v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  double v546;
  double v547;
  char v548;
  float64x2_t v549;
  int8x16_t v550;
  double v551;
  int8x16_t v552;
  double v553;
  uint64_t v554;
  double v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  _BYTE *v561;
  float64_t v562;
  float64_t v563;
  float64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  float64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  cnprint::CNPrinter *v585;
  uint64_t v586;
  double v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  __int128 v596;
  __int128 v597;
  int v598;
  uint64_t v599;
  double v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  char v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  double v612;
  double v613;
  double v614;
  double v615;
  float64_t v616;
  uint64_t v617;
  uint64_t v618;
  cnprint::CNPrinter *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  double v625;
  uint64_t v626;
  double v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  double v635;
  double v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int8x16_t v642;
  double v643;
  int8x16_t v644;
  int8x16_t v645;
  uint64_t v646;
  uint64_t v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  int v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  char v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  double v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  float64x2_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  char v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  double v683;
  uint64_t v684;
  double v685;
  const char *v686;
  int v687;
  const char *v688;
  const char *v689;
  double v690;
  double v691;
  double v692;
  double v693;
  double v694;
  double v695;
  char v696;
  double v697;
  double v698;
  double v699;
  double v700;
  double v701;
  double v702;
  double v703;
  unint64_t v704;
  double *v705;
  unsigned int v706;
  double *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t *v716;
  unint64_t *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  int v723;
  int v724;
  __int128 v725;
  uint64_t v726;
  uint64_t *v727;
  int v728;
  char v729;
  uint64_t v730;
  uint64_t v731;
  char *v732;
  uint64_t v733;
  std::mutex *v734;
  std::mutex *v735;
  uint64_t v736;
  unint64_t v737;
  double v738;
  char *v739;
  int v740;
  double v741;
  int v742;
  __int128 v743;
  char v744;
  float64x2_t v745;
  char v746;
  __int128 v747;
  char v748;
  int8x16_t v749;
  char v750;
  _BYTE v751[7];
  _BYTE v752[7];
  _BYTE v753[7];
  void *v754;
  void *v755;
  uint64_t v756;
  int64x2_t v757;
  int64x2_t v758;
  void *v759[4];
  __int128 v760;
  _BYTE v761[24];
  float64x2_t __p[2];
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 v771;
  char v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  _BYTE v781[31];
  _BYTE v782[31];
  _OWORD v783[2];
  float64x2_t v784;
  float64_t v785;
  _BYTE v786[32];
  double v787;
  uint64_t v788;

  v788 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 480))
  {
    strcpy((char *)__p, "\r");
    LOBYTE(v773) = 4;
    v26 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v690 = v27 + (double)v26;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v773, "#tre_ao,Not Configured,HandleEvent,PositionEvent,time,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v690));
    return;
  }
  if (!*((_BYTE *)a2 + 105))
  {
    strcpy((char *)__p, "\r");
    LOBYTE(v773) = 4;
    v33 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v691 = v34 + (double)v33;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v773, "#tre_ao,Invalid PositionEvent,latlon coordinates invalid,time,%.3lf", v35, v36, v37, v38, v39, SLOBYTE(v691));
    return;
  }
  v15 = *((unsigned __int8 *)a2 + 104);
  if (v15 > 0xD)
    goto LABEL_17;
  if (((1 << v15) & 0x2E10) != 0)
  {
    v742 = 0;
    if (*((_BYTE *)this + 1000))
    {
      *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)a2 + 8);
      v17 = *(_OWORD *)((char *)a2 + 24);
      v18 = *(_OWORD *)((char *)a2 + 40);
      v19 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 856) = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 840) = v19;
      *(_OWORD *)((char *)this + 824) = v18;
      *(_OWORD *)((char *)this + 808) = v17;
      v20 = *(_OWORD *)((char *)a2 + 88);
      v21 = *(_OWORD *)((char *)a2 + 104);
      v22 = *(_OWORD *)((char *)a2 + 120);
      *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 136);
      *(_OWORD *)((char *)this + 904) = v22;
      *(_OWORD *)((char *)this + 888) = v21;
      *(_OWORD *)((char *)this + 872) = v20;
      v23 = *(__n128 *)((char *)a2 + 152);
      v24 = *(_OWORD *)((char *)a2 + 168);
      v25 = *(_OWORD *)((char *)a2 + 184);
      *(_OWORD *)((char *)this + 984) = *(_OWORD *)((char *)a2 + 200);
      *(_OWORD *)((char *)this + 968) = v25;
      *(_OWORD *)((char *)this + 952) = v24;
      *(__n128 *)((char *)this + 936) = v23;
    }
    else
    {
      *((_QWORD *)this + 98) = &unk_1E25C8930;
      *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)a2 + 8);
      v49 = *(_OWORD *)((char *)a2 + 24);
      v50 = *(_OWORD *)((char *)a2 + 40);
      v51 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 856) = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 840) = v51;
      *(_OWORD *)((char *)this + 824) = v50;
      *(_OWORD *)((char *)this + 808) = v49;
      v52 = *(_OWORD *)((char *)a2 + 88);
      v53 = *(_OWORD *)((char *)a2 + 104);
      v54 = *(_OWORD *)((char *)a2 + 120);
      *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 136);
      *(_OWORD *)((char *)this + 904) = v54;
      *(_OWORD *)((char *)this + 888) = v53;
      *(_OWORD *)((char *)this + 872) = v52;
      v23 = *(__n128 *)((char *)a2 + 152);
      v55 = *(_OWORD *)((char *)a2 + 168);
      v56 = *(_OWORD *)((char *)a2 + 184);
      *(_OWORD *)((char *)this + 984) = *(_OWORD *)((char *)a2 + 200);
      *(_OWORD *)((char *)this + 968) = v56;
      *(_OWORD *)((char *)this + 952) = v55;
      *(__n128 *)((char *)this + 936) = v23;
      *((_BYTE *)this + 1000) = 1;
    }
    goto LABEL_19;
  }
  if (((1 << v15) & 0x10C0) != 0)
  {
    if (*((_BYTE *)this + 1000))
    {
      *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)a2 + 8);
      v40 = *(_OWORD *)((char *)a2 + 24);
      v41 = *(_OWORD *)((char *)a2 + 40);
      v42 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 856) = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 840) = v42;
      *(_OWORD *)((char *)this + 824) = v41;
      *(_OWORD *)((char *)this + 808) = v40;
      v43 = *(_OWORD *)((char *)a2 + 88);
      v44 = *(_OWORD *)((char *)a2 + 104);
      v45 = *(_OWORD *)((char *)a2 + 120);
      *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 136);
      *(_OWORD *)((char *)this + 904) = v45;
      *(_OWORD *)((char *)this + 888) = v44;
      *(_OWORD *)((char *)this + 872) = v43;
      v46 = *(_OWORD *)((char *)a2 + 152);
      v47 = *(_OWORD *)((char *)a2 + 168);
      v48 = *(_OWORD *)((char *)a2 + 184);
      *(_OWORD *)((char *)this + 984) = *(_OWORD *)((char *)a2 + 200);
      *(_OWORD *)((char *)this + 968) = v48;
      *(_OWORD *)((char *)this + 952) = v47;
      *(_OWORD *)((char *)this + 936) = v46;
    }
    else
    {
      *((_QWORD *)this + 98) = &unk_1E25C8930;
      *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)a2 + 8);
      v65 = *(_OWORD *)((char *)a2 + 24);
      v66 = *(_OWORD *)((char *)a2 + 40);
      v67 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 856) = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 840) = v67;
      *(_OWORD *)((char *)this + 824) = v66;
      *(_OWORD *)((char *)this + 808) = v65;
      v68 = *(_OWORD *)((char *)a2 + 88);
      v69 = *(_OWORD *)((char *)a2 + 104);
      v70 = *(_OWORD *)((char *)a2 + 120);
      *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 136);
      *(_OWORD *)((char *)this + 904) = v70;
      *(_OWORD *)((char *)this + 888) = v69;
      *(_OWORD *)((char *)this + 872) = v68;
      v71 = *(_OWORD *)((char *)a2 + 152);
      v72 = *(_OWORD *)((char *)a2 + 168);
      v73 = *(_OWORD *)((char *)a2 + 184);
      *(_OWORD *)((char *)this + 984) = *(_OWORD *)((char *)a2 + 200);
      *(_OWORD *)((char *)this + 968) = v73;
      *(_OWORD *)((char *)this + 952) = v72;
      *(_OWORD *)((char *)this + 936) = v71;
      *((_BYTE *)this + 1000) = 1;
    }
    return;
  }
  if (v15 != 1)
  {
LABEL_17:
    strcpy((char *)__p, "\r");
    LOBYTE(v773) = 4;
    v74 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v692 = v75 + (double)v74;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v773, "#tre_ao,HandleEvent,PositionEvent,time,%.3lf,type unusable,%hhu", v76, v77, v78, v79, v80, SLOBYTE(v692));
    return;
  }
  if (*((_BYTE *)this + 1000))
  {
    *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)a2 + 8);
    v57 = *(_OWORD *)((char *)a2 + 24);
    v58 = *(_OWORD *)((char *)a2 + 40);
    v59 = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)this + 856) = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 840) = v59;
    *(_OWORD *)((char *)this + 824) = v58;
    *(_OWORD *)((char *)this + 808) = v57;
    v60 = *(_OWORD *)((char *)a2 + 88);
    v61 = *(_OWORD *)((char *)a2 + 104);
    v62 = *(_OWORD *)((char *)a2 + 120);
    *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 136);
    *(_OWORD *)((char *)this + 904) = v62;
    *(_OWORD *)((char *)this + 888) = v61;
    *(_OWORD *)((char *)this + 872) = v60;
    v23 = *(__n128 *)((char *)a2 + 152);
    v63 = *(_OWORD *)((char *)a2 + 168);
    v64 = *(_OWORD *)((char *)a2 + 184);
    *(_OWORD *)((char *)this + 984) = *(_OWORD *)((char *)a2 + 200);
    *(_OWORD *)((char *)this + 968) = v64;
    *(_OWORD *)((char *)this + 952) = v63;
    *(__n128 *)((char *)this + 936) = v23;
    v742 = 1;
  }
  else
  {
    *((_QWORD *)this + 98) = &unk_1E25C8930;
    *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)a2 + 8);
    v81 = *(_OWORD *)((char *)a2 + 24);
    v82 = *(_OWORD *)((char *)a2 + 40);
    v83 = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)this + 856) = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 840) = v83;
    *(_OWORD *)((char *)this + 824) = v82;
    *(_OWORD *)((char *)this + 808) = v81;
    v84 = *(_OWORD *)((char *)a2 + 88);
    v85 = *(_OWORD *)((char *)a2 + 104);
    v86 = *(_OWORD *)((char *)a2 + 120);
    *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 136);
    *(_OWORD *)((char *)this + 904) = v86;
    *(_OWORD *)((char *)this + 888) = v85;
    *(_OWORD *)((char *)this + 872) = v84;
    v23 = *(__n128 *)((char *)a2 + 152);
    v87 = *(_OWORD *)((char *)a2 + 168);
    v88 = *(_OWORD *)((char *)a2 + 184);
    *(_OWORD *)((char *)this + 984) = *(_OWORD *)((char *)a2 + 200);
    *(_OWORD *)((char *)this + 968) = v88;
    *(_OWORD *)((char *)this + 952) = v87;
    *(__n128 *)((char *)this + 936) = v23;
    v742 = 1;
    *((_BYTE *)this + 1000) = 1;
  }
LABEL_19:
  if (*((_BYTE *)this + 672) || !*((_BYTE *)this + 2536))
  {
    if (!*((_BYTE *)this + 704) && *((_BYTE *)this + 2632))
      trackrun::TrackRunEngineActiveObject::HandleEvent((uint64_t)this, (trackrun::TrackRunEngineActiveObject *)((char *)this + 2544), a3, a4, a5, a6, a7, a8, v23);
  }
  else
  {
    trackrun::TrackRunEngineActiveObject::HandleEvent((uint64_t)this, (trackrun::TrackRunEngineActiveObject *)((char *)this + 2448), a3, a4, a5, a6, a7, a8, v23);
    if (*((_BYTE *)this + 2536))
    {
      *((_QWORD *)this + 306) = off_1E25C8B58;
      *(_QWORD *)&__p[0].f64[0] = (char *)this + 2456;
      sub_18D2DC5D8((void ***)__p);
      *((_BYTE *)this + 2536) = 0;
    }
  }
  memset(__p, 0, 24);
  memset(v786, 0, 23);
  v785 = __p[1].f64[0];
  v784 = __p[0];
  *(_QWORD *)((char *)v783 + 15) = 0;
  v783[0] = *(_OWORD *)v786;
  v89 = *((unsigned __int8 *)this + 672);
  if (!*((_BYTE *)this + 672) && !*((_BYTE *)this + 704))
  {
    strcpy((char *)__p, "\r");
    v786[0] = 2;
    v155 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v694 = v156 + (double)v155;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, v786, "#tre_ao,HandleEvent,PositionEvent,time,%.3lf,no track data available; cannot perform proximity detection",
      v157,
      v158,
      v159,
      v160,
      v161,
      SLOBYTE(v694));
    if (*((_BYTE *)this + 2056))
    {
      *((_BYTE *)this + 1688) = 0;
      *(float64x2_t *)((char *)this + 1689) = v784;
      *(float64_t *)((char *)this + 1705) = v785;
      *((_QWORD *)this + 216) = *(_QWORD *)((char *)v783 + 15);
      *(_OWORD *)((char *)this + 1713) = v783[0];
      *((_DWORD *)this + 434) = 0;
      *((_QWORD *)this + 218) = 0;
      *((_BYTE *)this + 1832) = 0;
      *((_BYTE *)this + 1840) = 0;
      *((_BYTE *)this + 1872) = 0;
      *((_BYTE *)this + 1880) = 0;
      *((_BYTE *)this + 2040) = 0;
      *((_BYTE *)this + 2048) = v742;
      *(_WORD *)((char *)this + 2049) = 256;
    }
    else
    {
      *((_QWORD *)this + 210) = &unk_1E25C8AB8;
      *((_BYTE *)this + 1688) = 0;
      *(float64x2_t *)((char *)this + 1689) = v784;
      *(float64_t *)((char *)this + 1705) = v785;
      *((_QWORD *)this + 216) = *(_QWORD *)((char *)v783 + 15);
      *(_OWORD *)((char *)this + 1713) = v783[0];
      *((_DWORD *)this + 434) = 0;
      *((_QWORD *)this + 218) = 0;
      *((_BYTE *)this + 1832) = 0;
      *((_BYTE *)this + 1840) = 0;
      *((_BYTE *)this + 1872) = 0;
      *((_BYTE *)this + 1880) = 0;
      *((_BYTE *)this + 2040) = 0;
      *((_BYTE *)this + 2048) = v742;
      *(_WORD *)((char *)this + 2049) = 256;
      *((_BYTE *)this + 2056) = 1;
    }
    return;
  }
  if (!*((_BYTE *)this + 624))
  {
    v749.i8[0] = 0;
    v750 = 0;
    strcpy((char *)__p, "\r");
    v786[0] = 4;
    v137 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v693 = v138 + (double)v137;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, v786, "#tre_ao,HandleEvent,PositionEvent,time,%.3lf,failed ConvertLatLonToEastNorth", v139, v140, v141, v142, v143, SLOBYTE(v693));
    return;
  }
  v90 = (int8x16_t)vmulq_f64(vsubq_f64(*((float64x2_t *)a2 + 7), *((float64x2_t *)this + 38)), *(float64x2_t *)((char *)this + 632));
  v749 = vextq_s8(v90, v90, 8uLL);
  v750 = 1;
  if (!*((_BYTE *)this + 704)
    || (v91 = *((_QWORD *)this + 86), v92 = *((_QWORD *)this + 85), v93 = v91 - v92, v91 == v92))
  {
    v94 = 0;
    v98 = INFINITY;
  }
  else
  {
    v94 = 0;
    v95 = 0;
    v96 = v93 / 104;
    if (v96 <= 1)
      v96 = 1;
    v97 = (double *)(v92 + 32);
    v98 = INFINITY;
    do
    {
      v99 = (*(double *)&v90.i64[1] - *(v97 - 1)) * (*(double *)&v90.i64[1] - *(v97 - 1)) + 0.0;
      *(double *)a13.i64 = v99 + (*(double *)v90.i64 - *v97) * (*(double *)v90.i64 - *v97);
      if (*(double *)a13.i64 < v98)
      {
        v94 = v95;
        v98 = v99 + (*(double *)v90.i64 - *v97) * (*(double *)v90.i64 - *v97);
      }
      ++v95;
      v97 += 13;
    }
    while (v96 != v95);
  }
  v100 = (uint64_t *)((char *)this + 648);
  if (!v89 || (v101 = *((_QWORD *)this + 82), v102 = *((_QWORD *)this + 81), v103 = v101 - v102, v101 == v102))
  {
    v104 = 0;
    v108 = INFINITY;
  }
  else
  {
    v104 = 0;
    v105 = 0;
    v106 = v103 / 104;
    if (v106 <= 1)
      v106 = 1;
    v107 = (double *)(v102 + 32);
    v108 = INFINITY;
    a13.i64[0] = 0;
    do
    {
      v109 = (*(double *)&v90.i64[1] - *(v107 - 1)) * (*(double *)&v90.i64[1] - *(v107 - 1)) + 0.0;
      if (v109 + (*(double *)v90.i64 - *v107) * (*(double *)v90.i64 - *v107) < v108)
      {
        v104 = v105;
        v108 = v109 + (*(double *)v90.i64 - *v107) * (*(double *)v90.i64 - *v107);
      }
      ++v105;
      v107 += 13;
    }
    while (v106 != v105);
  }
  v110 = v98 >= v108 || *((_BYTE *)this + 704) == 0;
  v111 = !v110;
  v740 = v111;
  if (v110)
  {
    v144 = *v100;
    v145 = *v100 + 104 * v104;
    if (*(_QWORD *)(v145 + 96))
    {
      v146 = v144 + 104 * v104;
      v149 = *(_QWORD *)(v146 + 40);
      v148 = (uint64_t *)(v146 + 40);
      v147 = v149;
      v739 = (char *)this + 648;
      if (!*(_BYTE *)(v149 + 40))
      {
        trackrun::RunningTrackData::RunningTrackLane::PopulateLaneLength(v147, *(double *)v90.i64, v98, v108);
        if (*(_BYTE *)(*((_QWORD *)this + 67) + 216))
        {
          v188 = *v148;
          v189 = *(_QWORD *)(v144 + 104 * v104 + 48);
          if (v188 != v189)
          {
            v190 = 1;
            do
            {
              trackrun::RunningTrackData::RunningTrackLane::PopulateLaneLength(v188, v185, v186, v187);
              strcpy((char *)__p, "\r");
              v786[0] = 3;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, v786, "#tre_ao,lane,%zu,length,%.2lf,width,%.2lf", v191, v192, v193, v194, v195, v190++);
              v188 += 72;
            }
            while (v188 != v189);
          }
        }
      }
      goto LABEL_104;
    }
    strcpy((char *)__p, "\r");
    v786[0] = 4;
    v162 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
    v695 = v163 + (double)v162;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, v786, "#tre_ao,HandleEvent,PositionEvent,time,%.3lf,nearest_track has no lanes cached. Cannot proceed.", v164, v165, v166, v167, v168, SLOBYTE(v695));
    return;
  }
  v739 = (char *)this + 648;
  v112 = *((_QWORD *)this + 85) + 104 * v94;
  v113 = *(double **)v112;
  v114 = *(double **)(v112 + 8);
  if (*(double **)v112 == v114)
    goto LABEL_692;
  v115 = (double **)(*((_QWORD *)this + 85) + 104 * v94);
  v116 = *(double **)v112;
  do
  {
    v117 = (*(_QWORD *)v116 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((_QWORD)v116[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    v118 = !v117;
    if (!v117)
      break;
    v116 += 2;
  }
  while (v116 != v114);
  v119 = (unint64_t)((char *)v114 - (char *)v113) < 0x40 ? 1 : v118;
  if ((v119 & 1) != 0)
    goto LABEL_692;
  v120 = 0;
  v121 = v113;
  while (1)
  {
    v122 = v120;
    if (v121 == v114)
      break;
    v123 = v121;
    ++v120;
    v124 = *v121;
    v125 = (*(_QWORD *)v121 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
    v126 = fabs(*v121);
    while (1)
    {
      v127 = *v121;
      if (*v121 != v124)
      {
        v128 = (*(_QWORD *)&v127 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v125;
        if ((v128 & 1) != 0)
          break;
        *(double *)a13.i64 = vabdd_f64(v127, v124);
        v129 = fabs(v127);
        if (v129 < v126)
          v129 = v126;
        v130 = v129 >= 1.0 ? v129 * 2.22044605e-16 : 2.22044605e-16;
        if (*(double *)a13.i64 > v130)
          break;
      }
      v131 = v121[1];
      a13.i64[0] = (uint64_t)v123[1];
      if (v131 != *(double *)a13.i64)
      {
        if ((*(_QWORD *)&v131 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (a13.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        v133 = vabdd_f64(v131, *(double *)a13.i64);
        v134 = fabs(v131);
        v135 = fabs(*(double *)a13.i64);
        if (v134 < v135)
          v134 = v135;
        a13.i64[0] = 0x3CB0000000000000;
        v136 = v134 >= 1.0 ? v134 * 2.22044605e-16 : 2.22044605e-16;
        if (v133 > v136)
          break;
      }
      v121 += 2;
      if (v121 == v114)
        goto LABEL_113;
    }
    if (v122 == 4)
      goto LABEL_114;
  }
LABEL_113:
  if (v122 < 3)
    goto LABEL_692;
LABEL_114:
  v169 = *v113;
  v170 = *(v114 - 2);
  if (*v113 != v170)
  {
    if ((*(_QWORD *)&v169 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v170 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_692;
    }
    v235 = vabdd_f64(v169, v170);
    v236 = fabs(v169);
    v237 = fabs(v170);
    if (v236 >= v237)
      v237 = v236;
    *(double *)a13.i64 = v237 * 2.22044605e-16;
    v238 = v237 >= 1.0 ? v237 * 2.22044605e-16 : 2.22044605e-16;
    if (v235 > v238)
      goto LABEL_692;
  }
  v171 = v113[1];
  v172 = *(v114 - 1);
  if (v171 != v172)
  {
    if ((*(_QWORD *)&v171 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v172 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_692;
    }
    v306 = vabdd_f64(v171, v172);
    v307 = fabs(v171);
    v308 = fabs(v172);
    if (v307 >= v308)
      v308 = v307;
    a13.i64[0] = 0x3CB0000000000000;
    v309 = v308 >= 1.0 ? v308 * 2.22044605e-16 : 2.22044605e-16;
    if (v306 > v309)
      goto LABEL_692;
  }
  v173 = v113 + 2;
  if (v113 + 2 != v114)
  {
    v174 = fabs(v169);
    *(double *)a13.i64 = fabs(v171);
    while (1)
    {
      v175 = *v173;
      if (*v173 != v169)
      {
        if ((*(_QWORD *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v169 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        v177 = vabdd_f64(v175, v169);
        v178 = fabs(v175);
        if (v178 < v174)
          v178 = v174;
        v179 = v178 >= 1.0 ? v178 * 2.22044605e-16 : 2.22044605e-16;
        if (v177 > v179)
          break;
      }
      v180 = v173[1];
      if (v180 != v171)
      {
        if ((*(_QWORD *)&v180 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v171 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        v182 = vabdd_f64(v180, v171);
        v183 = fabs(v180);
        if (v183 < *(double *)a13.i64)
          v183 = *(double *)a13.i64;
        v184 = v183 >= 1.0 ? v183 * 2.22044605e-16 : 2.22044605e-16;
        if (v182 > v184)
          break;
      }
      v173 += 2;
      if (v173 == v114)
        goto LABEL_516;
    }
    if (v173 != v114)
    {
      v319 = v173 + 2;
      if (v173 + 2 != v114)
      {
        v320 = fabs(v175);
        while (1)
        {
          v321 = *v319;
          if (*v319 != v175)
          {
            if ((*(_QWORD *)&v321 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
              || (*(_QWORD *)&v175 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            {
              break;
            }
            *(double *)a13.i64 = vabdd_f64(v321, v175);
            v323 = fabs(v321);
            if (v323 < v320)
              v323 = v320;
            v324 = v323 >= 1.0 ? v323 * 2.22044605e-16 : 2.22044605e-16;
            if (*(double *)a13.i64 > v324)
              break;
          }
          v325 = v319[1];
          a13.i64[0] = (uint64_t)v173[1];
          if (v325 != *(double *)a13.i64)
          {
            if ((*(_QWORD *)&v325 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
              || (a13.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            {
              break;
            }
            v327 = vabdd_f64(v325, *(double *)a13.i64);
            v328 = fabs(v325);
            v329 = fabs(*(double *)a13.i64);
            if (v328 < v329)
              v328 = v329;
            a13.i64[0] = 0x3CB0000000000000;
            v330 = v328 >= 1.0 ? v328 * 2.22044605e-16 : 2.22044605e-16;
            if (v327 > v330)
              break;
          }
          v319 += 2;
          if (v319 == v114)
            goto LABEL_516;
        }
        if (v319 != v114)
        {
          v13 = 1.0;
          v382 = v113;
          do
          {
            v383 = v173;
            v173 = v319;
            __p[0].f64[0] = 1.0;
            v384 = v383;
            v385 = v382;
            v386 = sub_18D2658DC(v319, v383, v382, __p[0].f64);
            if (v386 == 0.0
              || (*(_QWORD *)&v386 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && fabs(v386) <= __p[0].f64[0] * 2.22044605e-16)
            {
              v387 = v384[1];
              v388 = v173[1] - v387;
              v389 = *v384 - *v173;
              v390 = -v388;
              if (v389 == 0.0)
                goto LABEL_449;
              if (COERCE_UNSIGNED_INT64(fabs(*v384 - *v173)) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                v393 = fabs(v389);
                v394 = 2.22044605e-16;
                if (v393 >= 1.0)
                  v394 = v393 * 2.22044605e-16;
                if (v393 <= v394)
                {
LABEL_449:
                  if (v388 == 0.0)
                    goto LABEL_692;
                  if (COERCE_UNSIGNED_INT64(fabs(v173[1] - v387)) <= 0x7FEFFFFFFFFFFFFFLL)
                  {
                    v391 = fabs(v390);
                    v392 = 2.22044605e-16;
                    if (v391 >= 1.0)
                      v392 = v391 * 2.22044605e-16;
                    if (v391 <= v392)
                      goto LABEL_692;
                  }
                }
              }
              v395 = v387 * v388 - v389 * *v384;
              a13.i64[0] = (uint64_t)v385[1];
              if (v395 + *(double *)a13.i64 * v390 + v389 * *v385 <= 0.0)
                goto LABEL_692;
            }
            if (v173 == v114)
              break;
            v319 = v173 + 2;
            if (v173 + 2 == v114)
              break;
            v396 = *v173;
            v397 = fabs(*v173);
            while (1)
            {
              v398 = *v319;
              if (*v319 != v396)
              {
                if ((*(_QWORD *)&v398 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                  || (*(_QWORD *)v173 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                {
                  break;
                }
                v400 = vabdd_f64(v398, v396);
                v401 = fabs(v398);
                if (v401 < v397)
                  v401 = v397;
                a13.i64[0] = 0x3CB0000000000000;
                v402 = v401 >= 1.0 ? v401 * 2.22044605e-16 : 2.22044605e-16;
                if (v400 > v402)
                  break;
              }
              v403 = v319[1];
              v404 = v173[1];
              if (v403 != v404)
              {
                if ((*(_QWORD *)&v403 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                  || (*(_QWORD *)&v404 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                {
                  break;
                }
                *(double *)a13.i64 = vabdd_f64(v403, v404);
                v406 = fabs(v403);
                v407 = fabs(v404);
                if (v406 < v407)
                  v406 = v407;
                v408 = v406 >= 1.0 ? v406 * 2.22044605e-16 : 2.22044605e-16;
                if (*(double *)a13.i64 > v408)
                  break;
              }
              v319 += 2;
              if (v319 == v114)
                goto LABEL_488;
            }
            v382 = v384;
          }
          while (v319 != v114);
LABEL_488:
          v409 = *v113;
          v410 = *(v114 - 2);
          if (*v113 == v410)
            goto LABEL_490;
          if ((*(_QWORD *)&v409 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)&v410 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v415 = vabdd_f64(v409, v410);
            v416 = fabs(v409);
            v417 = fabs(v410);
            if (v416 < v417)
              v416 = v417;
            a13.i64[0] = 1.0;
            v418 = v416 >= 1.0 ? v416 * 2.22044605e-16 : 2.22044605e-16;
            if (v415 <= v418)
            {
LABEL_490:
              v411 = v113[1];
              v412 = *(v114 - 1);
              if (v411 == v412)
                goto LABEL_854;
              if ((*(_QWORD *)&v411 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (*(_QWORD *)&v412 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                v419 = vabdd_f64(v411, v412);
                v420 = fabs(v411);
                v421 = fabs(v412);
                if (v420 < v421)
                  v420 = v421;
                a13.i64[0] = 1.0;
                v422 = v420 >= 1.0 ? v420 * 2.22044605e-16 : 2.22044605e-16;
                if (v419 <= v422)
                {
LABEL_854:
                  if (sub_18D2E8BC0(v113, v114))
                  {
LABEL_692:
                    strcpy((char *)__p, "\r");
                    v786[0] = 4;
                    v528 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
                    v699 = v529 + (double)v528;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, v786, "#tre_ao,HandleEvent,PositionEvent,time,%.3lf,nearest_track does not have a valid bounding box. Cannot proceed.", v530, v531, v532, v533, v534, SLOBYTE(v699));
                    return;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_516:
  v755 = 0;
  v754 = 0;
  v756 = 0;
  v423 = *(double *)&v115;
  v425 = *v115;
  v424 = v115[1];
  if (*v115 == v424)
  {
    v431 = 0.0;
    v424 = *v115;
  }
  else
  {
    v426 = (int8x16_t *)(v425 + 2);
    v427 = *(int8x16_t *)v425;
    a13 = *(int8x16_t *)v425;
    while (v426 != (int8x16_t *)v424)
    {
      v428 = *v426++;
      a13 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)a13, (float64x2_t)v428), v428, a13);
      v427 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v428, (float64x2_t)v427), v428, v427);
    }
    v429 = vabdq_f64((float64x2_t)v427, (float64x2_t)a13);
    v430 = v429.f64[1];
    if (v429.f64[1] < v429.f64[0])
      v430 = v429.f64[0];
    v13 = *(double *)&a13.i64[1];
    v431 = 1.0;
    if (v430 != 0.0)
    {
      v432 = 2.22044605e-16;
      if (v430 >= 1.0)
        v432 = v430 * 2.22044605e-16;
      v433 = v430 <= v432 && *(_QWORD *)&v430 >> 52 < 0x7FFuLL;
      if (v430 < 10000000.0 && !v433 && *(_QWORD *)&v430 >> 52 < 0x7FFuLL)
      {
        v737 = a13.i64[0];
        v434 = 10000000.0 / v430 + 0.5;
        sub_18D2E8EE8(2 * (v434 >= 9.22337204e18));
        v435 = vcvtmd_s64_f64(v434);
        if (v435 < 1)
        {
          v686 = "factor >= 1";
          v687 = 86;
          v688 = "get_rescale_policy.hpp";
          v689 = "scale_box_to_integer_range";
LABEL_843:
          __assert_rtn(v689, v688, v687, v686);
        }
        v431 = (double)v435;
        v425 = *v115;
        v424 = v115[1];
        a13.i64[0] = v737;
      }
    }
  }
  *(_QWORD *)v786 = a13.i64[0];
  *(double *)&v786[8] = v13;
  *(int64x2_t *)&v786[16] = vdupq_n_s64(0xFFFFFFFFFFB3B4C0);
  v787 = v431;
  LOBYTE(v747) = 0;
  v436 = (char *)v424 - (char *)v425;
  if ((unint64_t)((char *)v424 - (char *)v425) < 0x20 || (v757.i64[1] = -1, v757.i64[0] = -1, v424 == v425))
  {
    v509 = 0;
    v510 = 0;
    goto LABEL_643;
  }
  v705 = v424;
  __p[0].f64[1] = NAN;
  __p[0].f64[0] = NAN;
  v437 = (v425[1] - v13) * v431 + -5000000.0;
  if (v437 >= 0.0)
    v438 = 0.5;
  else
    v438 = -0.5;
  v439 = v437 + v438;
  v440 = v425;
  if (v437 + v438 <= -9.22337204e18)
    v441 = 1;
  else
    v441 = 2 * (v437 + v438 >= 9.22337204e18);
  sub_18D2E8EE8(v441);
  v442 = (double)*(uint64_t *)&v786[16] + (*v440 - *(double *)v786) * v787;
  if (v442 >= 0.0)
    v443 = 0.5;
  else
    v443 = -0.5;
  v444 = v442 + v443;
  if (v442 + v443 <= -9.22337204e18)
    v445 = 1;
  else
    v445 = 2 * (v442 + v443 >= 9.22337204e18);
  sub_18D2E8EE8(v445);
  v446 = v440 + 2;
  v447 = v705;
  if (v440 + 2 == v705)
  {
    v509 = 0;
    v510 = 0;
    v508 = 0;
    goto LABEL_709;
  }
  v448 = v440;
  v738 = v423;
  v715 = 0;
  v716 = 0;
  v449 = 0;
  v704 = 0;
  v450 = 0;
  v451 = 0;
  *((_QWORD *)&v725 + 1) = 0;
  DWORD1(v725) = 0;
  v452 = 0;
  v453 = 0;
  v724 = 0;
  v710 = v436 >> 4;
  v711 = 0;
  v454 = ceil(v444);
  v455 = floor(v444);
  if (v444 >= 0.0)
    v454 = v455;
  v456 = (uint64_t)v454;
  v457 = ceil(v439);
  v458 = floor(v439);
  if (v439 >= 0.0)
    v457 = v458;
  v459 = 0x7FFFFFFFFFFFFFFFLL;
  v460 = 0x8000000000000000;
  v723 = 1;
  v713 = -1;
  v714 = -1;
  v461 = (uint64_t)v457;
  v712 = -1;
  v462 = -1;
  v463 = 0x7FFFFFFFFFFFFFFFLL;
  v464 = 0x8000000000000000;
  do
  {
    v718 = v462;
    v719 = v463;
    v721 = v459;
    v733 = v461;
    v734 = (std::mutex *)v456;
    v728 = v453;
    v465 = (unint64_t)v452;
    v726 = v450;
    v730 = v451;
    v466 = v446;
    v467 = (double)*(uint64_t *)&v786[24] + (v448[3] - *(double *)&v786[8]) * v787;
    if (v467 >= 0.0)
      v468 = 0.5;
    else
      v468 = -0.5;
    v469 = v467 + v468;
    if (v467 + v468 <= -9.22337204e18)
      v470 = 1;
    else
      v470 = 2 * (v467 + v468 >= 9.22337204e18);
    sub_18D2E8EE8(v470);
    v471 = ceil(v469);
    v472 = floor(v469);
    if (v469 >= 0.0)
      v473 = v472;
    else
      v473 = v471;
    v474 = (double)*(uint64_t *)&v786[16] + (*v466 - *(double *)v786) * v787;
    if (v474 >= 0.0)
      v475 = 0.5;
    else
      v475 = -0.5;
    v476 = v474 + v475;
    if (v474 + v475 <= -9.22337204e18)
      v477 = 1;
    else
      v477 = 2 * (v474 + v475 >= 9.22337204e18);
    sub_18D2E8EE8(v477);
    v461 = (uint64_t)v473;
    v478 = ceil(v476);
    v479 = floor(v476);
    if (v476 >= 0.0)
      v478 = v479;
    v456 = (uint64_t)v478;
    if ((uint64_t)v734 <= (uint64_t)v478)
      v480 = 0;
    else
      v480 = -1;
    if ((uint64_t)v734 < (uint64_t)v478)
      v481 = 1;
    else
      v481 = v480;
    if (v733 <= v461)
      v482 = 0;
    else
      v482 = -1;
    if (v733 < v461)
      v483 = 1;
    else
      v483 = v482;
    v448 = v466;
    v484 = v730;
    v453 = v728;
    v485 = v465;
    if (v481)
    {
      LODWORD(v725) = 0;
      v486 = v726;
    }
    else
    {
      v487 = v734 == (std::mutex *)v456 && v733 == v461;
      v486 = v726;
      if (v487)
      {
        LODWORD(v725) = 1;
        v483 = 4294967197;
        v481 = -99;
      }
      else
      {
        v481 = 0;
        LODWORD(v725) = 0;
      }
    }
    if (v465)
    {
      if (v481 == DWORD1(v725) && (_DWORD)v483 == DWORD2(v725) && v465 < 0xB)
      {
        v496 = v719;
        v495 = (std::mutex *)v721;
        v481 = DWORD1(v725);
        v483 = *((_QWORD *)&v725 + 1);
        v497 = v725;
        goto LABEL_626;
      }
      if (!(_BYTE)v728)
        v704 = 0xEEEEEEEEEEEEEEEFLL * (v449 - v716);
      if ((unint64_t)v449 >= v711)
      {
        v706 = v481;
        v707 = v448;
        v708 = v483;
        v492 = 0xEEEEEEEEEEEEEEEFLL * (v449 - v716) + 1;
        if (v492 > 0x222222222222222)
          sub_18D07AFE4();
        if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v711 - (_QWORD)v716) >> 3) > v492)
          v492 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v711 - (_QWORD)v716) >> 3);
        if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v711 - (_QWORD)v716) >> 3) >= 0x111111111111111)
          v493 = 0x222222222222222;
        else
          v493 = v492;
        if (v493)
          v493 = (unint64_t)sub_18D2E8FF8(v493);
        else
          v494 = 0;
        v447 = v705;
        v498 = v493 + 8 * (v449 - v716);
        *(_QWORD *)v498 = v725 >> 32;
        *(_QWORD *)(v498 + 8) = v714;
        *(float64x2_t *)(v498 + 16) = __p[0];
        *(_QWORD *)(v498 + 32) = v721;
        *(_QWORD *)(v498 + 40) = v719;
        *(_QWORD *)(v498 + 48) = v464;
        *(_QWORD *)(v498 + 56) = v460;
        v490 = (int)v716;
        *(_QWORD *)(v498 + 64) = v712;
        *(_QWORD *)(v498 + 72) = v718;
        *(_QWORD *)(v498 + 80) = v465;
        *(_QWORD *)(v498 + 88) = v715;
        *(_BYTE *)(v498 + 96) = v728;
        *(_QWORD *)(v498 + 104) = v713;
        *(_BYTE *)(v498 + 112) = v724;
        *(_BYTE *)(v498 + 113) = 0;
        if (v449 == v716)
        {
          v506 = (unint64_t *)(v493 + 8 * (v449 - v716));
          v486 = v726;
          v491 = v723;
        }
        else
        {
          v499 = v493 + 8 * (v449 - v716);
          v486 = v726;
          v491 = v723;
          do
          {
            v500 = *(_OWORD *)(v449 - 15);
            v501 = *(_OWORD *)(v449 - 13);
            v502 = *(_OWORD *)(v449 - 11);
            *(_OWORD *)(v499 - 72) = *(_OWORD *)(v449 - 9);
            *(_OWORD *)(v499 - 88) = v502;
            *(_OWORD *)(v499 - 104) = v501;
            *(_OWORD *)(v499 - 120) = v500;
            v503 = *(_OWORD *)(v449 - 7);
            v504 = *(_OWORD *)(v449 - 5);
            v505 = *(_OWORD *)(v449 - 3);
            v506 = (unint64_t *)(v499 - 120);
            *(_WORD *)(v499 - 8) = *((_WORD *)v449 - 4);
            *(_OWORD *)(v499 - 24) = v505;
            *(_OWORD *)(v499 - 40) = v504;
            *(_OWORD *)(v499 - 56) = v503;
            v449 -= 15;
            v499 -= 120;
          }
          while (v449 != v716);
        }
        v711 = v493 + 120 * v494;
        v449 = (unint64_t *)(v498 + 120);
        if (v716)
        {
          operator delete(v716);
          v490 = 0;
        }
        v716 = v506;
        v448 = v707;
        v483 = v708;
        v484 = v730;
        v481 = v706;
        goto LABEL_623;
      }
      *v449 = v725 >> 32;
      v449[1] = v714;
      *((float64x2_t *)v449 + 1) = __p[0];
      v449[4] = v721;
      v449[5] = v719;
      v449[6] = v464;
      v449[7] = v460;
      v449[8] = v712;
      v449[9] = v718;
      v449[10] = v465;
      v449[11] = v715;
      *((_BYTE *)v449 + 96) = v728;
      v449[13] = v713;
      *((_BYTE *)v449 + 112) = v724;
      *((_BYTE *)v449 + 113) = 0;
      v449 += 15;
      v490 = 0;
    }
    else
    {
      v490 = v724;
    }
    v491 = v723;
LABEL_623:
    v713 = v486;
    v714 = 0;
    v485 = 0;
    v497 = v725;
    __p[0] = (float64x2_t)v757;
    if (!(v725 & 1 | ((v491 & 1) == 0)))
      v490 = 1;
    v724 = v490;
    v723 = v491 & v725;
    v496 = v733;
    v495 = v734;
    v464 = (int64_t)v734;
    v460 = v733;
    v453 = v725;
    v715 = v710;
    v712 = v484;
    *((_QWORD *)&v725 + 1) = v483;
    DWORD1(v725) = v481;
LABEL_626:
    if ((uint64_t)v495 >= v456)
      v459 = v456;
    else
      v459 = (uint64_t)v495;
    if (v464 <= v456)
      v464 = v456;
    if (v496 >= v461)
      v463 = (uint64_t)v473;
    else
      v463 = v496;
    if (v460 <= v461)
      v460 = (uint64_t)v473;
    v451 = v484 + 1;
    v452 = (std::mutex *)(v485 + 1);
    v450 = v486 + (v497 ^ 1u);
    v446 = v448 + 2;
    v462 = v451;
  }
  while (v448 + 2 != v447);
  v507 = 0xEEEEEEEEEEEEEEEFLL * (v449 - v716);
  if ((_BYTE)v453)
    v508 = v704;
  else
    v508 = 0xEEEEEEEEEEEEEEEFLL * (v449 - v716);
  v423 = v738;
  if ((unint64_t)v449 >= v711)
  {
    v720 = v463;
    v722 = v459;
    v709 = v483;
    v735 = v452;
    v729 = v453;
    v731 = v451;
    v535 = v507 + 1;
    if (v507 + 1 > 0x222222222222222)
      sub_18D07AFE4();
    v536 = v481;
    if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v711 - (_QWORD)v716) >> 3) > v535)
      v535 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v711 - (_QWORD)v716) >> 3);
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v711 - (_QWORD)v716) >> 3) >= 0x111111111111111)
      v537 = 0x222222222222222;
    else
      v537 = v535;
    if (v537)
      v537 = (unint64_t)sub_18D2E8FF8(v537);
    v538 = v537 + 8 * (v449 - v716);
    *(_QWORD *)v538 = v536 | (unint64_t)(v709 << 32);
    *(_QWORD *)(v538 + 8) = v714;
    *(float64x2_t *)(v538 + 16) = __p[0];
    *(_QWORD *)(v538 + 32) = v722;
    *(_QWORD *)(v538 + 40) = v720;
    *(_QWORD *)(v538 + 48) = v464;
    *(_QWORD *)(v538 + 56) = v460;
    *(_QWORD *)(v538 + 64) = v712;
    *(_QWORD *)(v538 + 72) = v731;
    *(_QWORD *)(v538 + 80) = v735;
    *(_QWORD *)(v538 + 88) = v715;
    *(_BYTE *)(v538 + 96) = v729;
    *(_QWORD *)(v538 + 104) = v713;
    *(_BYTE *)(v538 + 112) = v724;
    *(_BYTE *)(v538 + 113) = 0;
    v510 = (char *)(v538 + 120);
    if (v449 == v716)
    {
      v509 = (unint64_t *)(v537 + 8 * (v449 - v716));
      v539 = v716;
    }
    else
    {
      v539 = v716;
      do
      {
        v540 = *(_OWORD *)(v449 - 15);
        v541 = *(_OWORD *)(v449 - 13);
        v542 = *(_OWORD *)(v449 - 11);
        *(_OWORD *)(v538 - 72) = *(_OWORD *)(v449 - 9);
        *(_OWORD *)(v538 - 88) = v542;
        *(_OWORD *)(v538 - 104) = v541;
        *(_OWORD *)(v538 - 120) = v540;
        v543 = *(_OWORD *)(v449 - 7);
        v544 = *(_OWORD *)(v449 - 5);
        v545 = *(_OWORD *)(v449 - 3);
        v509 = (unint64_t *)(v538 - 120);
        *(_WORD *)(v538 - 8) = *((_WORD *)v449 - 4);
        *(_OWORD *)(v538 - 24) = v545;
        *(_OWORD *)(v538 - 40) = v544;
        *(_OWORD *)(v538 - 56) = v543;
        v449 -= 15;
        v538 -= 120;
      }
      while (v449 != v716);
    }
    if (v539)
      operator delete(v539);
  }
  else
  {
    *v449 = v481 | (unint64_t)(v483 << 32);
    v449[1] = v714;
    *((float64x2_t *)v449 + 1) = __p[0];
    v449[4] = v459;
    v449[5] = v463;
    v449[6] = v464;
    v449[7] = v460;
    v449[8] = v712;
    v449[9] = v451;
    v509 = v716;
    v449[10] = (unint64_t)v452;
    v449[11] = v715;
    *((_BYTE *)v449 + 96) = v453;
    v449[13] = v713;
    *((_BYTE *)v449 + 112) = v724;
    *((_BYTE *)v449 + 113) = 0;
    v510 = (char *)(v449 + 15);
  }
LABEL_709:
  if (v508 < 0xEEEEEEEEEEEEEEEFLL * ((v510 - (char *)v509) >> 3) && !LOBYTE(v509[15 * v508 + 12]))
    BYTE1(v509[15 * v508 + 14]) = 1;
LABEL_643:
  __p[0].f64[0] = v423;
  *(_QWORD *)&__p[0].f64[1] = &v745;
  *(_QWORD *)&__p[1].f64[0] = v786;
  *(_QWORD *)&__p[1].f64[1] = &v754;
  *(_QWORD *)&v763 = &v747;
  DWORD2(v763) = 0;
  BYTE12(v763) = 1;
  v145 = *(_QWORD *)&v423;
  v717 = v509;
  if (0xEEEEEEEEEEEEEEEFLL * ((v510 - (char *)v509) >> 3) <= 0x10)
  {
    if (v509 != (unint64_t *)v510)
    {
      while (1)
      {
        v522 = (char *)v509;
        v509 += 15;
        if (v509 != (unint64_t *)v510)
          break;
LABEL_683:
        if (v509 == (unint64_t *)v510)
          goto LABEL_684;
      }
      v523 = (char *)v509;
      while (1)
      {
        if (*((_QWORD *)v522 + 6) >= *((_QWORD *)v523 + 4) && *((_QWORD *)v522 + 4) <= *((_QWORD *)v523 + 6))
        {
          v524 = *((_QWORD *)v522 + 7) >= *((_QWORD *)v523 + 5) && *((_QWORD *)v522 + 5) <= *((_QWORD *)v523 + 7);
          v525 = v524 && v522[96] == 0;
          v526 = v525 && v523[96] == 0;
          if (v526
            && !sub_18D2EB278(SDWORD2(v763), **(double ***)&__p[0].f64[0], *(double **)(*(_QWORD *)&__p[0].f64[0] + 8), (int *)v522, SDWORD2(v763), **(double ***)&__p[0].f64[0], *(double **)(*(_QWORD *)&__p[0].f64[0] + 8), (int *)v523, SBYTE12(v763), *(uint64_t *)&__p[0].f64[1], *(uint64_t **)&__p[1].f64[0], *(uint64_t **)&__p[1].f64[1], (BOOL *)v763))
          {
            break;
          }
        }
        v523 += 120;
        if (v523 == v510)
          goto LABEL_683;
      }
    }
  }
  else
  {
    memset(v759, 0, 24);
    v757 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v758 = vdupq_n_s64(0x8000000000000000);
    if (v509 != (unint64_t *)v510)
    {
      v511 = 0;
      v512 = (uint64_t *)v509;
      do
      {
        sub_18D2E94C4(v757.i64, v512 + 4);
        if (v511 >= v759[2])
        {
          v514 = (char *)v759[0];
          v515 = (v511 - (char *)v759[0]) >> 3;
          v516 = v515 + 1;
          if ((unint64_t)(v515 + 1) >> 61)
            sub_18D07AFE4();
          v517 = (char *)v759[2] - (char *)v759[0];
          if (((char *)v759[2] - (char *)v759[0]) >> 2 > v516)
            v516 = v517 >> 2;
          if ((unint64_t)v517 >= 0x7FFFFFFFFFFFFFF8)
            v518 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v518 = v516;
          if (v518)
            v518 = (unint64_t)sub_18D07BF3C(v518);
          else
            v519 = 0;
          v520 = (uint64_t **)(v518 + 8 * v515);
          *v520 = v512;
          v513 = v520 + 1;
          if (v511 != v514)
          {
            do
            {
              v521 = (uint64_t *)*((_QWORD *)v511 - 1);
              v511 -= 8;
              *--v520 = v521;
            }
            while (v511 != v514);
            v511 = (char *)v759[0];
          }
          v759[0] = v520;
          v759[2] = (void *)(v518 + 8 * v519);
          if (v511)
            operator delete(v511);
        }
        else
        {
          *(_QWORD *)v511 = v512;
          v513 = v511 + 8;
        }
        v759[1] = v513;
        v512 += 15;
        v511 = (char *)v513;
      }
      while (v512 != (uint64_t *)v510);
    }
    sub_18D2E903C(&v757, (uint64_t *)v759, 0, (uint64_t)__p);
    if (v759[0])
      operator delete(v759[0]);
  }
LABEL_684:
  if (v717)
    operator delete(v717);
  v527 = v747;
  if ((_BYTE)v747 && v754 == v755)
  {
    v686 = "! boost::empty(turns)";
    v687 = 94;
    v688 = "has_valid_self_turns.hpp";
    v689 = "apply";
    goto LABEL_843;
  }
  if (v754)
  {
    v755 = v754;
    operator delete(v754);
  }
  if (v527 || !sub_18D2E8B60(*(double **)v145, *(_QWORD *)(v145 + 8)))
    goto LABEL_692;
LABEL_104:
  std::mutex::lock((std::mutex *)((char *)this + 544));
  v152 = *((unsigned __int8 *)this + 2056);
  if (*((_BYTE *)this + 2056))
  {
    v153 = *((unsigned __int8 *)this + 2440);
    if (*((_BYTE *)this + 2440) && !*((_BYTE *)this + 2048))
    {
      v196 = CNTimeSpan::operator-((uint64_t)this + 1696, (_QWORD *)this + 260, v150, v151);
      *(_QWORD *)&__p[0].f64[0] = v196;
      __p[0].f64[1] = v197;
      v154 = v145;
      if (v196 < 0 || (*(double *)v198.i64 = v197, v197 < 0.0))
      {
        v196 = CNTimeSpan::operator-(__p[0].f64, v198, v199);
        v198.i64[0] = v200;
      }
      if (v196 != 2)
      {
        if (v196)
        {
          if (v196 > 2)
            goto LABEL_108;
          goto LABEL_160;
        }
        if ((v198.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_160;
      }
      if (*(double *)v198.i64 > 0.0)
        goto LABEL_108;
    }
    else
    {
      v154 = v145;
LABEL_108:
      if (v153 == v152)
      {
        memcpy((char *)this + 2072, (char *)this + 1688, 0x16BuLL);
      }
      else if (v153)
      {
        *((_BYTE *)this + 2440) = 0;
      }
      else
      {
        *((_QWORD *)this + 258) = &unk_1E25C8AB8;
        memcpy((char *)this + 2072, (char *)this + 1688, 0x16BuLL);
        *((_BYTE *)this + 2440) = 1;
      }
    }
LABEL_160:
    *((_BYTE *)this + 2056) = 0;
  }
  else
  {
    v154 = v145;
  }
  if (v740)
  {
    v202 = *(double **)v154;
    v201 = *(double **)(v154 + 8);
    if ((unint64_t)v201 - *(_QWORD *)v154 >= 0x40)
    {
      LODWORD(__p[0].f64[0]) = 0;
      BYTE4(__p[0].f64[0]) = 0;
      v203 = v201 - 4;
      do
      {
        if (v203 + 2 == v202)
          break;
        v204 = sub_18D265620((double *)v749.i64, v203 + 2, v203, (uint64_t)__p);
        v203 -= 2;
      }
      while (v204);
      v205 = 0.0;
      if (BYTE4(__p[0].f64[0]))
        v206 = 1;
      else
        v206 = LODWORD(__p[0].f64[0]) == 0;
      if (!v206)
        goto LABEL_187;
      v202 = *(double **)v154;
      v201 = *(double **)(v154 + 8);
    }
    if (v201 != v202)
    {
LABEL_185:
      v757.i64[0] = 0;
      *(_QWORD *)v786 = 0;
      sub_18D2F04F4((double *)v749.i64, v202, v201, (double **)__p, (double **)v786, (double *)v757.i64);
      v205 = *(double *)v757.i64;
      goto LABEL_187;
    }
LABEL_186:
    v205 = 0.0;
    goto LABEL_187;
  }
  v207 = *(_QWORD *)(v154 + 48);
  v202 = *(double **)(v207 - 72);
  v201 = *(double **)(v207 - 64);
  if ((unint64_t)((char *)v201 - (char *)v202) < 0x40)
  {
LABEL_184:
    if (v201 != v202)
      goto LABEL_185;
    goto LABEL_186;
  }
  LODWORD(__p[0].f64[0]) = 0;
  BYTE4(__p[0].f64[0]) = 0;
  v208 = v201 - 4;
  do
  {
    if (v208 + 2 == v202)
      break;
    v209 = sub_18D265620((double *)v749.i64, v208 + 2, v208, (uint64_t)__p);
    v208 -= 2;
  }
  while (v209);
  v205 = 0.0;
  if (BYTE4(__p[0].f64[0]))
    v210 = 1;
  else
    v210 = LODWORD(__p[0].f64[0]) == 0;
  if (v210)
  {
    v202 = *(double **)(v207 - 72);
    v201 = *(double **)(v207 - 64);
    goto LABEL_184;
  }
LABEL_187:
  v727 = (uint64_t *)((char *)a2 + 136);
  if (*((_BYTE *)a2 + 105))
    v211 = *((double *)a2 + 17) * *((double *)a2 + 17);
  else
    v211 = 0.0;
  v212 = *((_QWORD *)this + 67) + 72;
  LODWORD(__p[0].f64[0]) = 4;
  v213 = *((double *)sub_18D2E8950(v212, 4, __p) + 3);
  v214 = *((_QWORD *)this + 67) + 72;
  LODWORD(__p[0].f64[0]) = 2;
  v215 = *((double *)sub_18D2E8950(v214, 2, __p) + 3);
  v216 = *((_QWORD *)this + 67) + 72;
  LODWORD(__p[0].f64[0]) = 3;
  v217 = (double *)sub_18D2E8950(v216, 3, __p);
  v223 = v211 + v213;
  if (v205 < v223)
    v224 = v742;
  else
    v224 = 0;
  if (v224 != 1)
  {
    if (v205 >= v211 + v217[3])
      v228 = 1;
    else
      v228 = v742;
    if ((v228 & 1) != 0)
    {
      if (v205 >= v211 + v215)
        v229 = v742;
      else
        v229 = 0;
      if (v205 >= v211 + v215)
        v227 = 1;
      else
        v227 = 2;
      if (v229 == 1)
      {
        LOBYTE(v225) = *((_BYTE *)this + 2440);
        if ((_BYTE)v225)
        {
          if (*((_DWORD *)this + 530) != 1)
            trackrun::TrackRunEngineActiveObject::ResetTrackStateWhenLeaveTrackOrSessionEnds(this);
          LOBYTE(v225) = 0;
        }
        v227 = 1;
        goto LABEL_250;
      }
    }
    else
    {
      if (!*((_BYTE *)this + 1360)
        || *((_BYTE *)this + 1304) != 1
        || !*((_BYTE *)this + 1136)
        || !sub_18D05B574((double *)this + 143, (double *)a2 + 2)
        || *((_BYTE *)this + 1184) && !sub_18D069E98((double *)this + 149, (double *)a2 + 2))
      {
        goto LABEL_226;
      }
      __p[0] = *((float64x2_t *)this + 80);
      trackrun::TrackRunEngineActiveObject::ConvertPointLatLonToEastNorth((uint64_t)this, __p, v230, v218, v219, v220, v221, v222);
      if (!v231)
        goto LABEL_226;
      v232 = (double **)v154;
      if ((v740 & 1) == 0)
        v232 = (double **)(*(_QWORD *)(v154 + 48) - 72);
      if (sub_18D2E6510(__p[0].f64, v232) <= *(double *)(*((_QWORD *)this + 67) + 248)
                                            * *((double *)this + 162)
                                            * (*(double *)(*((_QWORD *)this + 67) + 248)
                                             * *((double *)this + 162)))
        v227 = 2;
      else
LABEL_226:
        v227 = 3;
    }
    v233 = v740;
    if ((v227 - 3) >= 2)
      v233 = 0;
    if (v233 != 1)
    {
      LOBYTE(v225) = 0;
      goto LABEL_250;
    }
LABEL_230:
    v227 = 3;
    LOBYTE(v225) = 1;
    goto LABEL_250;
  }
  if ((v740 & 1) != 0)
    goto LABEL_230;
  v225 = *(_QWORD *)(v154 + 96);
  if (!v225)
    goto LABEL_199;
  trackrun::TrackRunEngineActiveObject::FindClosestPointOnRing((double *)v749.i64, *(double ***)(v154 + 40), 1, 0);
  if (v226 < 0.0 || v226 * v226 < v223)
  {
    LOBYTE(v225) = *((_BYTE *)this + 1672);
    if ((_BYTE)v225)
    {
      LOBYTE(v225) = 0;
      v239 = *((unsigned __int8 *)this + 1497);
      v227 = 4;
      if (v239 > 5 || ((1 << v239) & 0x34) == 0)
        goto LABEL_250;
      if (!*((_BYTE *)this + 1072))
      {
        LOBYTE(v225) = *((_BYTE *)this + 2440);
        if (!(_BYTE)v225)
          goto LABEL_249;
        if (*((_DWORD *)this + 530) != 4
          && v205 > *(double *)(*(_QWORD *)(v154 + 48) - 8) * *(double *)(*(_QWORD *)(v154 + 48) - 8))
        {
          goto LABEL_198;
        }
      }
      LOBYTE(v225) = 0;
    }
LABEL_249:
    v227 = 4;
    goto LABEL_250;
  }
LABEL_198:
  LOBYTE(v225) = 0;
LABEL_199:
  v227 = 3;
LABEL_250:
  v240 = *(_QWORD *)(v154 + 64);
  v241 = *(_QWORD *)(v154 + 96);
  v243 = (__int128 *)((char *)a2 + 8);
  v242 = *((_BYTE *)a2 + 8);
  v784 = *(float64x2_t *)((char *)a2 + 9);
  v785 = *(double *)((char *)a2 + 25);
  v783[0] = *(_OWORD *)((char *)a2 + 33);
  *(_QWORD *)((char *)v783 + 15) = *((_QWORD *)a2 + 6);
  v244 = sqrt(v205);
  if (*((_BYTE *)this + 2056))
  {
    *((_BYTE *)this + 1688) = v242;
    *(float64x2_t *)((char *)this + 1689) = v784;
    *(float64_t *)((char *)this + 1705) = v785;
    *((_QWORD *)this + 216) = *(_QWORD *)((char *)v783 + 15);
    *(_OWORD *)((char *)this + 1713) = v783[0];
    *((_DWORD *)this + 434) = v227;
    *((double *)this + 218) = v244;
    *((_BYTE *)this + 1752) = v241;
    *((_QWORD *)this + 227) = 0;
    *(_OWORD *)((char *)this + 1753) = 0u;
    *(_OWORD *)((char *)this + 1769) = 0u;
    *(_OWORD *)((char *)this + 1785) = 0u;
    *(_OWORD *)((char *)this + 1801) = 0u;
    *((_QWORD *)this + 228) = v240;
    *((_BYTE *)this + 1832) = 1;
    *(_DWORD *)((char *)this + 1833) = *(_DWORD *)v753;
    *((_DWORD *)this + 459) = *(_DWORD *)&v753[3];
    *((_BYTE *)this + 1840) = 0;
    *(_OWORD *)((char *)this + 1841) = *(_OWORD *)v782;
    *((_OWORD *)this + 116) = *(_OWORD *)&v782[15];
    *((_BYTE *)this + 1872) = 0;
    *(_DWORD *)((char *)this + 1873) = *(_DWORD *)v752;
    *((_DWORD *)this + 469) = *(_DWORD *)&v752[3];
    *((_BYTE *)this + 1880) = 0;
    v245 = v774;
    *(_OWORD *)((char *)this + 1881) = v773;
    *(_OWORD *)((char *)this + 1897) = v245;
    v246 = v775;
    v247 = v776;
    v248 = v778;
    *(_OWORD *)((char *)this + 1945) = v777;
    *(_OWORD *)((char *)this + 1961) = v248;
    *(_OWORD *)((char *)this + 1913) = v246;
    *(_OWORD *)((char *)this + 1929) = v247;
    v249 = v779;
    v250 = v780;
    v251 = *(_OWORD *)v781;
    *(_OWORD *)((char *)this + 2024) = *(_OWORD *)&v781[15];
    *(_OWORD *)((char *)this + 1993) = v250;
    *(_OWORD *)((char *)this + 2009) = v251;
    *(_OWORD *)((char *)this + 1977) = v249;
    *((_BYTE *)this + 2040) = 0;
    *(_DWORD *)((char *)this + 2041) = *(_DWORD *)v751;
    *((_DWORD *)this + 511) = *(_DWORD *)&v751[3];
    *((_BYTE *)this + 2048) = v742;
  }
  else
  {
    *((_QWORD *)this + 210) = &unk_1E25C8AB8;
    *((_BYTE *)this + 1688) = v242;
    *(float64x2_t *)((char *)this + 1689) = v784;
    *(float64_t *)((char *)this + 1705) = v785;
    *((_QWORD *)this + 216) = *(_QWORD *)((char *)v783 + 15);
    *(_OWORD *)((char *)this + 1713) = v783[0];
    *((_DWORD *)this + 434) = v227;
    *((double *)this + 218) = v244;
    *((_BYTE *)this + 1752) = v241;
    *((_QWORD *)this + 227) = 0;
    *(_OWORD *)((char *)this + 1753) = 0u;
    *(_OWORD *)((char *)this + 1769) = 0u;
    *(_OWORD *)((char *)this + 1785) = 0u;
    *(_OWORD *)((char *)this + 1801) = 0u;
    *((_QWORD *)this + 228) = v240;
    *((_BYTE *)this + 1832) = 1;
    *(_DWORD *)((char *)this + 1833) = *(_DWORD *)v753;
    *((_DWORD *)this + 459) = *(_DWORD *)&v753[3];
    *((_BYTE *)this + 1840) = 0;
    *(_OWORD *)((char *)this + 1841) = *(_OWORD *)v782;
    *((_OWORD *)this + 116) = *(_OWORD *)&v782[15];
    *((_BYTE *)this + 1872) = 0;
    *(_DWORD *)((char *)this + 1873) = *(_DWORD *)v752;
    *((_DWORD *)this + 469) = *(_DWORD *)&v752[3];
    *((_BYTE *)this + 1880) = 0;
    v252 = v774;
    *(_OWORD *)((char *)this + 1881) = v773;
    *(_OWORD *)((char *)this + 1897) = v252;
    v253 = v778;
    *(_OWORD *)((char *)this + 1945) = v777;
    *(_OWORD *)((char *)this + 1961) = v253;
    v254 = v776;
    *(_OWORD *)((char *)this + 1913) = v775;
    *(_OWORD *)((char *)this + 1929) = v254;
    *(_OWORD *)((char *)this + 2024) = *(_OWORD *)&v781[15];
    v255 = *(_OWORD *)v781;
    v256 = v779;
    *(_OWORD *)((char *)this + 1993) = v780;
    *(_OWORD *)((char *)this + 2009) = v255;
    *(_OWORD *)((char *)this + 1977) = v256;
    *((_BYTE *)this + 2040) = 0;
    *(_DWORD *)((char *)this + 2041) = *(_DWORD *)v751;
    *((_DWORD *)this + 511) = *(_DWORD *)&v751[3];
    *((_BYTE *)this + 2048) = v742;
    *((_BYTE *)this + 2056) = 1;
  }
  *((_BYTE *)this + 2049) = v225;
  *((_BYTE *)this + 2050) = 1;
  v732 = (char *)this + 608;
  trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::ConvertEastNorthToLatLon((uint64_t)this + 608, (float64x2_t *)(v154 + 24), v218, v219, v220, v221, v222, (uint64_t)&v754);
  v757.i16[0] = 13;
  LOBYTE(v759[0]) = 3;
  v257 = *((char *)a2 + 104);
  if (v257 > 9)
    v258 = "Other";
  else
    v258 = off_1E25CD858[v257];
  v736 = v154;
  v259 = *((_BYTE *)this + 2640);
  sub_18D0778AC(__p, v258);
  (*(void (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
  trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString((uint64_t)this, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), v786);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v757, (unsigned __int8 *)v759, "TrackRun-Raw-%u-%s,viewType,SingleArrowCoordinate,iOSTime,%.1lf,mcTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,course,%.2lf,courseUnc,%.2lf,speed,%.2lf,speedUnc,%.2lf,hunc,%.1lf,type,%d,track_prox,%d,dist_to_outer,%.1lf,track_lat,%.7lf,track_lon,%.7lf,num_lanes,%d,odo_valid,%d,odo,%.1lf,odo_dd,%.1lf,odo_dd_unc,%.1lf", v260, v261, v262, v263, v264, v259);
  v266 = v154;
  if ((v786[23] & 0x80000000) != 0)
    operator delete(*(void **)v786);
  if (SHIBYTE(__p[1].f64[0]) < 0)
    operator delete(*(void **)&__p[0].f64[0]);
  if (*((_BYTE *)this + 1072) && *((_BYTE *)this + 4602) || !*(_BYTE *)(*((_QWORD *)this + 67) + 68))
  {
LABEL_286:
    if (!*((_BYTE *)this + 1672))
      goto LABEL_336;
    v283 = *((unsigned __int8 *)this + 1497);
    if (v283 > 5 || ((1 << v283) & 0x34) == 0)
      goto LABEL_336;
    v284 = v227 != 4 || *((_BYTE *)this + 672) == 0;
    v285 = v740;
    if (v284)
      v285 = 1;
    if (v285 == 1)
    {
LABEL_336:
      if (!v742)
        goto LABEL_821;
      if (v244 < 50.0)
      {
        strcpy(v786, "\r");
        v757.i8[0] = 3;
        v286 = *((_BYTE *)this + 2640);
        (*(void (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
        trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString((uint64_t)this, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), __p);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v786, (unsigned __int8 *)&v757, "TrackRun-Mat-%u,viewType,SingleArrowCoordinate,iOSTime,%.1lf,mcTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,course,%.2lf,courseUnc,%.2lf,speed,%.2lf,speedUnc,%.2lf,hunc,%.1lf,altitude,%.1lf,vunc,%.1lf,type,%d,track_prox,%d,dist_to_outer_lane_,%.1lf,lane_est,%d,lane_count,%hhu,current_lap_distance,%.1lf,in_a_workout,%d,use_sparse_data,%d", v287, v288, v289, v290, v291, v286);
        if (SHIBYTE(__p[1].f64[0]) < 0)
          operator delete(*(void **)&__p[0].f64[0]);
      }
      if (v205 <= *(double *)(*((_QWORD *)this + 67) + 112))
        goto LABEL_821;
      if (*((_BYTE *)this + 672))
      {
        *(_QWORD *)&__p[0].f64[0] = v739;
        sub_18D2DC5D8((void ***)__p);
        *((_BYTE *)this + 672) = 0;
        if (!*((_BYTE *)this + 2536))
          goto LABEL_342;
      }
      else if (!*((_BYTE *)this + 2536))
      {
        goto LABEL_821;
      }
      *((_QWORD *)this + 306) = off_1E25C8B58;
      *(_QWORD *)&__p[0].f64[0] = (char *)this + 2456;
      sub_18D2DC5D8((void ***)__p);
      *((_BYTE *)this + 2536) = 0;
LABEL_342:
      strcpy((char *)__p, "\r");
      v786[0] = 3;
      v312 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      v697 = v313 + (double)v312;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, v786, "#tre_ao,time,%.3lf,user is no longer near any track, clearing non-sparse track data.", v314, v315, v316, v317, v318, SLOBYTE(v697));
      goto LABEL_821;
    }
    *((_QWORD *)this + 230) = 0;
    v292 = (int8x16_t *)((char *)this + 632);
    *(int64x2_t *)((char *)this + 1848) = vdupq_n_s64(0x7FF8000000000000uLL);
    *((_QWORD *)this + 233) = 0x7FF8000000000000;
    *((_BYTE *)this + 1872) = 1;
    v293 = *((double *)a2 + 24);
    if (!*((_BYTE *)a2 + 184))
      v293 = 0.0;
    *((double *)this + 231) = v293;
    *((_BYTE *)this + 1840) = 0;
    v294 = *((double *)a2 + 25);
    v295 = *((double *)a2 + 21);
    if (v294 > 0.0 && v295 > 0.0 && ((v742 ^ 1) & 1) == 0)
    {
      trackrun::TrackRunEngineActiveObject::ComputeAcrossTrackDistanceInformation((uint64_t)this, (uint64_t)a2, v736, (double *)v749.i64, (__int128 *)__p);
      sub_18D2E68B0((_QWORD *)this + 382, (uint64_t)__p);
      trackrun::TrackRunEngineActiveObject::PruneAcrossTrackDistanceDeque(this);
      v294 = *((double *)a2 + 25);
      v295 = *((double *)a2 + 21);
    }
    if (*((_QWORD *)this + 387) && v294 > 0.0 && v295 > 0.0)
    {
      trackrun::TrackRunEngineActiveObject::ComputeAcrossTrackDistanceEvidence(this, a2, (const trackrun::RunningTrackData::RunningTrack *)v736, (uint64_t)v786);
      if (!*((_BYTE *)this + 4602))
      {
        __p[0].f64[0] = 0.0;
        __p[0].f64[1] = NAN;
        LOBYTE(__p[1].f64[0]) = 0;
        LOBYTE(__p[1].f64[1]) = 0;
        BYTE8(v766) = 0;
        *(_QWORD *)&__p[0].f64[0] = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
        __p[0].f64[1] = v331;
        LOBYTE(__p[1].f64[0]) = *(_QWORD *)(v736 + 96);
        if (*((_BYTE *)this + 1072))
        {
          if (BYTE8(v766) == *((unsigned __int8 *)this + 1072))
          {
            LOBYTE(v766) = *((_BYTE *)this + 1064);
            v332 = *(_OWORD *)((char *)this + 1032);
            v763 = *(_OWORD *)((char *)this + 1016);
            v764 = v332;
            v765 = *(_OWORD *)((char *)this + 1048);
          }
          else if (BYTE8(v766))
          {
            BYTE8(v766) = 0;
          }
          else
          {
            *(_QWORD *)&__p[1].f64[1] = &unk_1E25C89C0;
            LOBYTE(v766) = *((_BYTE *)this + 1064);
            v413 = *(_OWORD *)((char *)this + 1032);
            v763 = *(_OWORD *)((char *)this + 1016);
            v764 = v413;
            v765 = *(_OWORD *)((char *)this + 1048);
            BYTE8(v766) = 1;
          }
        }
        if (trackrun::TrackRunLaneEstimator::Initialize((uint64_t)this + 3104, (uint64_t)__p))
        {
          v757.i16[0] = 13;
          LOBYTE(v759[0]) = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v757, (unsigned __int8 *)v759, "#tre_ao,TrackRunLaneEstimator is not initialized. Cannot continue.", v297, v298, v299, v300, v301, v696);
          goto LABEL_821;
        }
      }
      trackrun::TrackRunLaneEstimator::HandleEvidence((trackrun::TrackRunEngineActiveObject *)((char *)this + 3104), (double *)v786, v296, v297, v298, v299, v300, v301);
    }
    if (*((_BYTE *)this + 4602) && *((unsigned __int16 *)this + 1552) >= 0x100u)
    {
      v302 = *((_WORD *)this + 1552);
    }
    else if (!*((_BYTE *)this + 1072) || (v302 = *((unsigned __int8 *)this + 1064), !*((_BYTE *)this + 1064)))
    {
      v303 = *((_QWORD *)this + 387);
      if (v303)
      {
        v304 = *(_QWORD *)(*((_QWORD *)this + 383) + 8 * ((v303 + *((_QWORD *)this + 386) - 1) / 0x33uLL))
             + 80 * ((v303 + *((_QWORD *)this + 386) - 1) % 0x33uLL);
        __p[1] = *(float64x2_t *)(v304 + 16);
        v763 = *(_OWORD *)(v304 + 32);
        v764 = *(_OWORD *)(v304 + 48);
        v765 = *(_OWORD *)(v304 + 64);
        __p[0] = *(float64x2_t *)v304;
      }
      else
      {
        trackrun::TrackRunEngineActiveObject::ComputeAcrossTrackDistanceInformation((uint64_t)this, (uint64_t)a2, v736, (double *)v749.i64, (__int128 *)__p);
      }
      v333 = 1.0;
      if (*(_BYTE *)(v736 + 88)
        && (v334 = *(double *)(v736 + 80), v334 > 0.0)
        && (v333 = round(-round(__p[1].f64[1] / v334)), v333 < 1.0))
      {
        v311 = 0;
      }
      else
      {
        v335 = *(_QWORD *)(v736 + 96);
        if (v333 <= (double)v335)
          v311 = (unint64_t)(v333 + -1.0);
        else
          v311 = v335 - 1;
      }
LABEL_384:
      if (*((_BYTE *)this + 4704))
      {
        v336 = *((_QWORD *)this + 67);
        if (*(_BYTE *)(v336 + 217))
        {
          v337 = *((_QWORD *)this + 587);
          if (*((_BYTE *)this + 1072))
            goto LABEL_392;
        }
        else
        {
          v337 = *((_QWORD *)this + 587);
        }
        v338 = v311 + 1;
        if (v337 == v311 + 1 || *(_QWORD *)(v336 + 184) > (unint64_t)*((unsigned __int16 *)this + 2344))
        {
LABEL_392:
          v339 = v337 - 1;
          if (v339 >= *(_QWORD *)(v736 + 96) - 1)
            v311 = *(_QWORD *)(v736 + 96) - 1;
          else
            v311 = v339;
          v340 = *((_WORD *)this + 2344);
LABEL_397:
          *((_WORD *)this + 2344) = v340 + 1;
          ClosestPointOnRing = trackrun::TrackRunEngineActiveObject::FindClosestPointOnRing((double *)v749.i64, (double **)(*(_QWORD *)(v736 + 40) + 72 * v311), 0, 1);
          v343 = v342;
          v345 = v344;
          *(double *)v786 = ClosestPointOnRing;
          *(double *)&v786[8] = v342;
          *(double *)&v786[16] = v344;
          *(_QWORD *)&v786[24] = v346;
          trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::ConvertEastNorthToLatLon((uint64_t)v732, (float64x2_t *)v786, v347, v348, v349, v350, v351, (uint64_t)&v747);
          if (!v748)
          {
            strcpy((char *)__p, "\r");
            v757.i8[0] = 4;
            v369 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
            v698 = v370 + (double)v369;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v757, "#tre_ao,Warning,MatchedPosition,time,%.3lf,current_position,latlng,%.7lf,%.7lf,lane_matched_point has no value", v371, v372, v373, v374, v375, SLOBYTE(v698));
LABEL_809:
            if (*((unsigned __int16 *)this + 1552) >= 0x100u)
            {
              *((_WORD *)this + 908) = *((_WORD *)this + 1552) | 0x100;
            }
            else if (*((_BYTE *)this + 1072))
            {
              *((_WORD *)this + 908) = *((unsigned __int8 *)this + 1064) | 0x100;
            }
            else
            {
              if (!*((_BYTE *)this + 1817))
                *((_BYTE *)this + 1817) = 1;
              *((_BYTE *)this + 1816) = 1;
            }
            if (*((_BYTE *)this + 1776))
            {
              v757.i16[0] = 13;
              LOBYTE(v759[0]) = 3;
              v657 = *((_BYTE *)this + 2640);
              (*(void (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
              trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString((uint64_t)this, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), __p);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v757, (unsigned __int8 *)v759, "TrackRun-Mat-%u,viewType,SingleArrowCoordinate,iOSTime,%.1lf,mcTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,course,%.2lf,courseUnc,%.2lf,speed,%.2lf,speedUnc,%.2lf,hunc,%.1lf,altitude,%.1lf,vunc,%.1lf,type,%d,track_prox,%d,dist_to_lane_,%.1lf,matched_lane_num,%d,lane_est,%d,lane_count,%hhu,lane_width,%.2lf,odo_valid,%d,odo,%.1lf,odo_dd,%.1lf,odo_dd_unc,%.1lf,odo_diff,%.1lf,odo_dd_diff,%.1lf,current_lap_distance,%.1lf", v658, v659, v660, v661, v662, v657);
              if (SHIBYTE(__p[1].f64[0]) < 0)
                operator delete(*(void **)&__p[0].f64[0]);
            }
            else
            {
              strcpy((char *)__p, "\r");
              v757.i8[0] = 4;
              v663 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
              v703 = v664 + (double)v663;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v757, "#tre_ao,Warning,MatchedPosition,time,%.3lf,current_position_east_north_m,latlng,%.8lf,%.8lf,track_position_ has no value.", v665, v666, v667, v668, v669, SLOBYTE(v703));
            }
            goto LABEL_821;
          }
          v362 = v747;
          v363 = *((unsigned __int8 *)this + 1776);
          *((_OWORD *)this + 110) = v747;
          if (!v363)
            *((_BYTE *)this + 1776) = 1;
          v360.i64[0] = *((_QWORD *)a2 + 19);
          if (*(double *)v360.i64 >= 0.0)
          {
            v364 = *((double *)a2 + 20);
            if (v364 >= 0.0)
            {
              v365 = *((double *)a2 + 21);
              if (v365 > 0.0)
              {
                v361.i64[0] = *((_QWORD *)a2 + 22);
                if (*(double *)v361.i64 >= 0.0
                  && (v360.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && (*(_QWORD *)&v364 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && (*(_QWORD *)&v365 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && (v361.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                {
                  v741 = *((double *)a2 + 19);
                  *(double *)v360.i64 = fmod(*(double *)v360.i64 - v345, 180.0);
                  *(double *)v361.i64 = fabs(*(double *)v360.i64);
                  if (*(double *)v361.i64 > 90.0)
                  {
                    v366 = 1.0;
                    if (*(double *)v360.i64 <= 0.0)
                    {
                      v366 = 0.0;
                      if (*(double *)v360.i64 < 0.0)
                        v366 = -1.0;
                    }
                    *(double *)v360.i64 = *(double *)v360.i64 + v366 * -180.0;
                    *(double *)v361.i64 = fabs(*(double *)v360.i64);
                    v266 = v736;
                    v292 = (int8x16_t *)((char *)this + 632);
                  }
                  v367 = *((_QWORD *)this + 67);
                  v117 = *(double *)v361.i64 > *(double *)(v367 + 192);
                  *(double *)v361.i64 = v741;
                  if (!v117 && !*(_BYTE *)(v367 + 200))
                  {
                    *(double *)v360.i64 = v741 - *(double *)v360.i64;
                    if (*(double *)v360.i64 < 0.0 || (v361.i64[0] = 0x4076800000000000, *(double *)v360.i64 >= 360.0))
                    {
                      v361.i64[0] = 1.0;
                      if (*(double *)v360.i64 <= 0.0)
                      {
                        v361.i64[0] = 0;
                        if (*(double *)v360.i64 < 0.0)
                          *(double *)v361.i64 = -1.0;
                      }
                      *(double *)v360.i64 = *(double *)v360.i64 + *(double *)v361.i64 * -360.0;
                    }
                    *((_QWORD *)this + 223) = v360.i64[0];
                    *((_BYTE *)this + 1792) = 1;
                    if (*((_BYTE *)this + 1808))
                    {
                      v360.i64[0] = *((_QWORD *)this + 225);
                      v361.i64[0] = *(_QWORD *)(v367 + 240);
                      if (*(double *)v360.i64 == *(double *)v361.i64)
                        v368 = 0;
                      else
                        v368 = -127;
                      if (*(double *)v360.i64 > *(double *)v361.i64)
                        v368 = 1;
                      if (*(double *)v360.i64 < *(double *)v361.i64)
                        v368 = -1;
                    }
                    else
                    {
                      v368 = -1;
                    }
                    v266 = v736;
                    v292 = (int8x16_t *)((char *)this + 632);
                    if (v368 != 129 && v368 <= 0)
                    {
                      v360.i64[0] = *(_QWORD *)(v367 + 232);
                      v361.i64[0] = *v727;
                      if (*(double *)v360.i64 >= *(double *)v727)
                        v360.i64[0] = *v727;
                      *((_QWORD *)this + 225) = v360.i64[0];
                      *((_BYTE *)this + 1808) = 1;
                      v266 = v736;
                      v292 = (int8x16_t *)((char *)this + 632);
                    }
                  }
                }
              }
            }
          }
          if (!*((_BYTE *)this + 1819))
            *((_BYTE *)this + 1819) = 1;
          *((_BYTE *)this + 1818) = v311 + 1;
          if (!*((_BYTE *)this + 2440))
            goto LABEL_743;
          v352 = CNTimeSpan::operator-((uint64_t)a2 + 16, (_QWORD *)this + 260, v360, v361);
          *(_QWORD *)&__p[0].f64[0] = v352;
          __p[0].f64[1] = v353;
          if (v352 < 0 || (*(double *)v360.i64 = v353, v353 < 0.0))
          {
            v352 = CNTimeSpan::operator-(__p[0].f64, v360, v361);
            *(double *)v360.i64 = v353;
          }
          if (v352 != 2)
          {
            if (v352)
            {
              if (v352 > 1)
                goto LABEL_743;
            }
            else if ((v360.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              goto LABEL_727;
            }
LABEL_730:
            if (*((_DWORD *)this + 530) == 4
              && *((_BYTE *)this + 2256)
              && *((_BYTE *)this + 2224)
              && *((_BYTE *)this + 2216)
              && *((_BYTE *)this + 2160)
              && *((_BYTE *)this + 2201))
            {
              if (!*((_BYTE *)this + 624))
                sub_18D164CA0();
              v546 = (*((double *)this + 268) - *((double *)this + 76)) * *((double *)this + 79) - v343;
              v547 = (*((double *)this + 269) - *((double *)this + 77)) * *((double *)this + 80) - ClosestPointOnRing;
              *(double *)v360.i64 = sqrt(v547 * v547 + 0.0 + v546 * v546);
              v361.i64[0] = 11.0;
              if (*(double *)v360.i64 < 11.0)
              {
                *((_QWORD *)this + 232) = v360.i64[0];
                if (!(_BYTE)v311)
                {
                  v684 = *(_QWORD *)(v736 + 40);
                  if (*(_BYTE *)(v684 + 40))
                  {
                    v685 = *(double *)(v684 + 32);
                    if (v685 >= 392.0 && v685 <= 408.0)
                    {
                      if (!*(_BYTE *)(v684 + 56))
                      {
                        *(double *)(v684 + 48) = 400.0 / v685;
                        *(_BYTE *)(v684 + 56) = 1;
                        v684 = *(_QWORD *)(v736 + 40);
                        if (!*(_BYTE *)(v684 + 56))
                          sub_18D164CA0();
                        v360.i64[0] = *((_QWORD *)this + 232);
                      }
                      *(double *)v360.i64 = *(double *)(v684 + 48) * *(double *)v360.i64;
                      *((_QWORD *)this + 232) = v360.i64[0];
                    }
                  }
                }
                *(double *)v361.i64 = *(double *)v360.i64 + *((double *)this + 279);
                *((_QWORD *)this + 231) = v361.i64[0];
                *((_QWORD *)this + 233) = 0x3FD0000000000000;
                *((_WORD *)this + 920) = 257;
                if (*((_BYTE *)this + 2992))
                {
                  if (*((_BYTE *)this + 1672) && *((_BYTE *)this + 1497) == 4)
                  {
                    v352 = CNTimeSpan::operator-((uint64_t)a2 + 16, (_QWORD *)this + 204, v360, v361);
                    v548 = 0;
                    *(double *)v361.i64 = (double)v352;
                    *(double *)v360.i64 = v353 + (double)v352;
                    *((_QWORD *)this + 361) = v360.i64[0];
                  }
                  else
                  {
                    *((double *)this + 362) = *((double *)this + 361) + *((double *)this + 362);
                    *((_QWORD *)this + 361) = 0;
                    *((double *)this + 363) = *(double *)v360.i64 + *((double *)this + 363);
                    v361.i64[0] = *((_QWORD *)this + 372);
                    *(double *)v360.i64 = *(double *)v360.i64 + *(double *)v361.i64;
                    *((_QWORD *)this + 372) = v360.i64[0];
                    v548 = *((_BYTE *)a2 + 184);
                    if (v548)
                    {
                      v548 = 0;
                      v683 = *((double *)a2 + 25);
                      *((double *)this + 364) = v683 + *((double *)this + 364);
                      v361.i64[0] = *((_QWORD *)this + 373);
                      *(double *)v360.i64 = v683 + *(double *)v361.i64;
                      *((_QWORD *)this + 373) = v360.i64[0];
                    }
                  }
                }
                else
                {
                  v548 = 1;
                }
                v266 = v736;
                goto LABEL_751;
              }
            }
LABEL_743:
            if (*((_BYTE *)a2 + 184))
            {
              v360 = *((int8x16_t *)a2 + 12);
              v292[76] = v360;
              v360.i64[0] = *((_QWORD *)a2 + 26);
              *((_QWORD *)this + 233) = v360.i64[0];
              *((_WORD *)this + 920) = 1;
            }
            if (*((_BYTE *)this + 2992))
            {
              if (*((_BYTE *)this + 1672) && *((_BYTE *)this + 1497) == 4)
              {
                v352 = CNTimeSpan::operator-((uint64_t)a2 + 16, (_QWORD *)this + 204, v360, v361);
                v548 = 0;
                *(double *)v361.i64 = (double)v352;
                *(double *)v360.i64 = v353 + (double)v352;
                *((_QWORD *)this + 361) = v360.i64[0];
              }
              else
              {
                v548 = 0;
                *((double *)this + 362) = *((double *)this + 361) + *((double *)this + 362);
                *((_QWORD *)this + 361) = 0;
                v549 = (float64x2_t)vdupq_lane_s64(*((_QWORD *)a2 + 25), 0);
                v292[142] = (int8x16_t)vaddq_f64(v549, (float64x2_t)v292[142]);
                v361 = *((int8x16_t *)this + 186);
                v360 = (int8x16_t)vaddq_f64(v549, (float64x2_t)v361);
                *((int8x16_t *)this + 186) = v360;
              }
            }
            else
            {
              v548 = 1;
            }
LABEL_751:
            if (*((_BYTE *)this + 3048))
            {
              if ((v548 & 1) == 0)
              {
                *(double *)v550.i64 = (double)CNTimeSpan::operator-((uint64_t)a2 + 16, (_QWORD *)this + 376, v360, v361);
                *(double *)v552.i64 = v551 + *(double *)v550.i64;
                *((double *)this + 371) = v551 + *(double *)v550.i64;
                v352 = CNTimeSpan::operator-((uint64_t)a2 + 16, (_QWORD *)this + 355, v552, v550);
                v553 = v353 + (double)v352 - *((double *)this + 361) - *((double *)this + 362);
                *((double *)this + 360) = v553;
                if (v553 < 0.0)
                {
                  strcpy((char *)__p, "\r");
                  v757.i8[0] = 3;
                  v554 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
                  v700 = v555 + (double)v554;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v757, "#tre_ao,%.1lf,Warning:current lap duration is less than 0,limiting to 0,current_lap_duration,%.1lf,current_pause_duration,%.1lf,previous_pauses_duration,%.1lf", v556, v557, v558, v559, v560, SLOBYTE(v700));
                  *((double *)this + 360) = fmax(*((double *)this + 360), 0.0);
                }
              }
            }
            if (v742)
            {
              if (!*((_BYTE *)this + 2824))
              {
LABEL_762:
                v770 = 0u;
                v771 = 0u;
                v768 = 0u;
                v769 = 0u;
                v766 = 0u;
                v767 = 0u;
                v764 = 0u;
                v765 = 0u;
                v763 = 0u;
                memset(__p, 0, sizeof(__p));
                v772 = 1;
                sub_18D2E868C((uint64_t)this + 2648, (uint64_t)__p);
                __p[0].f64[0] = trackrun::TrackRunEngineActiveObject::FindClosestPointOnRing((double *)v749.i64, *(double ***)(v266 + 40), 0, 0);
                __p[0].f64[1] = v562;
                __p[1].f64[0] = v563;
                __p[1].f64[1] = v564;
                trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::ConvertEastNorthToLatLon((uint64_t)v732, __p, v565, v566, v567, v568, v569, (uint64_t)&v745);
                v757.i64[0] = trackrun::TrackRunEngineActiveObject::FindClosestPointOnRing((double *)v749.i64, (double **)(*(_QWORD *)(v266 + 40) + 72 * *(_QWORD *)(v266 + 96) - 72), 0, 0);
                *(float64_t *)&v757.i64[1] = v570;
                v758.i64[0] = v571;
                v758.i64[1] = v572;
                trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::ConvertEastNorthToLatLon((uint64_t)v732, (float64x2_t *)&v757, v573, v574, v575, v576, v577, (uint64_t)&v743);
                if (!v746 || !v744)
                {
                  LOWORD(v759[0]) = 13;
                  v761[0] = 4;
                  v599 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
                  v702 = v600 + (double)v599;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v759, v761, "#tre_ao,coordinate conversion issue, could not start line,%.1lf", v601, v602, v603, v604, v605, SLOBYTE(v702));
                  goto LABEL_821;
                }
                *(float64x2_t *)((char *)this + 2648) = v745;
                *(_OWORD *)((char *)this + 2664) = v743;
                *((_BYTE *)this + 2713) = *(double *)v727 <= *(double *)(*((_QWORD *)this + 67) + 240);
                trackrun::TrackRunEngineActiveObject::PopulateAllStartingLineFields(this, v578, v579, v580, v581, v582, v583, v584);
                if (cnprint::CNPrinter::GetLogLevel(v585) <= 1)
                {
                  LOWORD(v759[0]) = 13;
                  v761[0] = 1;
                  v586 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
                  v701 = v587 + (double)v586;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v759, v761, "#tre_ao,successfully set the start line,%.1lf", v588, v589, v590, v591, v592, SLOBYTE(v701));
                }
                if (*((_BYTE *)this + 2992))
                {
                  v593 = *((_QWORD *)this + 371);
                  v594 = *((_QWORD *)this + 363);
                  v595 = *((_QWORD *)this + 373);
                  memset(v761, 0, sizeof(v761));
                  memset(&v760, 0, 23);
                  memset(v759, 0, 30);
                  *((_BYTE *)this + 2832) = 0;
                  v596 = *(_OWORD *)v761;
                  *(_QWORD *)((char *)this + 2849) = *(_QWORD *)&v761[16];
                  *(_OWORD *)((char *)this + 2833) = v596;
                  v597 = v760;
                  *((_QWORD *)this + 359) = 0;
                  *(_OWORD *)((char *)this + 2857) = v597;
                  *((_OWORD *)this + 183) = 0u;
                  *((_OWORD *)this + 182) = 0u;
                  *((_OWORD *)this + 181) = 0u;
                  *((_OWORD *)this + 180) = 0u;
                  *((int64x2_t *)this + 184) = vdupq_n_s64(0x7FF8000000000000uLL);
                  *((_WORD *)this + 1480) = 0;
                  v598 = (int)v759[0];
                  *((_WORD *)this + 1483) = WORD2(v759[0]);
                  *(_DWORD *)((char *)this + 2962) = v598;
                  *((_BYTE *)this + 2992) = 1;
                  *((_QWORD *)this + 371) = v593;
                  *((_QWORD *)this + 372) = v594;
                  *((_QWORD *)this + 373) = v595;
                  *((_BYTE *)this + 4602) = 0;
                  *((_BYTE *)this + 4600) = 0;
                  if (*((_BYTE *)this + 3105))
                    *((_BYTE *)this + 3105) = 0;
                  if (*((_BYTE *)this + 4680))
                    *((_BYTE *)this + 4680) = 0;
                  sub_18D2E7290((_QWORD *)this + 382);
                }
                else
                {
                  memset(v761, 0, sizeof(v761));
                  memset(&v760, 0, 23);
                  memset(v759, 0, 30);
                  *((_BYTE *)this + 2832) = 0;
                  v648 = *(_OWORD *)v761;
                  *(_QWORD *)((char *)this + 2849) = *(_QWORD *)&v761[16];
                  *(_OWORD *)((char *)this + 2833) = v648;
                  v649 = v760;
                  *((_QWORD *)this + 359) = 0;
                  *(_OWORD *)((char *)this + 2857) = v649;
                  *((_OWORD *)this + 183) = 0u;
                  *((_OWORD *)this + 182) = 0u;
                  *((_OWORD *)this + 181) = 0u;
                  *((_OWORD *)this + 180) = 0u;
                  *((int64x2_t *)this + 184) = vdupq_n_s64(0x7FF8000000000000uLL);
                  *((_WORD *)this + 1480) = 0;
                  v650 = *(_OWORD *)v759;
                  *((_OWORD *)this + 186) = *(_OWORD *)((char *)&v759[1] + 6);
                  *(_OWORD *)((char *)this + 2962) = v650;
                  *((_BYTE *)this + 2992) = 1;
                }
                v651 = *v243;
                v652 = *(_OWORD *)((char *)a2 + 40);
                *((_OWORD *)this + 178) = *(_OWORD *)((char *)a2 + 24);
                *((_OWORD *)this + 179) = v652;
                *((_OWORD *)this + 177) = v651;
                *((_OWORD *)this + 184) = v362;
                *(_OWORD *)((char *)this + 2792) = v747;
                *((_BYTE *)this + 2808) = 0;
                *((_BYTE *)this + 2816) = 1;
                goto LABEL_806;
              }
              v561 = (char *)this + 2824;
              if (*((_BYTE *)this + 2712))
              {
LABEL_779:
                if ((!*((_BYTE *)this + 2768) || !*((_BYTE *)this + 2784) || !*((_BYTE *)this + 2752))
                  && ((trackrun::TrackRunEngineActiveObject::PopulateAllStartingLineFields(this, *(uint64_t *)&v353, v354, v355, v356, v357, v358, v359), !*((_BYTE *)this + 2752))|| !*((_BYTE *)this + 2784))|| !*((_BYTE *)this + 2768))
                {
                  sub_18D164CA0();
                }
                v612 = *((double *)this + 340);
                v613 = *((double *)this + 341);
                v614 = *((double *)this + 347);
                v615 = *((double *)this + 345);
                v757.i64[0] = trackrun::TrackRunEngineActiveObject::FindClosestPointOnLineSegment((double *)v786, (double *)this + 335, 0, 0, 0);
                *(float64_t *)&v757.i64[1] = v616;
                v758.i64[0] = v617;
                v758.i64[1] = v618;
                v625 = (ClosestPointOnRing - v612) * v614 - (v343 - v613) * v615;
                if (cnprint::CNPrinter::GetLogLevel(v619) <= 1)
                {
                  strcpy((char *)__p, "\r");
                  LOBYTE(v759[0]) = 1;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v759, "#tre_ao,signed dist to inifinite start line,%.1lf", v620, v621, v622, v623, v624, SLOBYTE(v625));
                }
                v626 = *(_QWORD *)(v266 + 40);
                if (*(_BYTE *)(v626 + 40))
                  v627 = *(double *)(v626 + 32);
                else
                  v627 = 100.0;
                if (!*v561)
                  goto LABEL_806;
                if (!*((_BYTE *)this + 2816))
                  goto LABEL_806;
                v633 = v625 > 0.0;
                if (*((unsigned __int8 *)this + 2808) == v633
                  || !*((_BYTE *)this + 2992)
                  || *((double *)this + 363) <= v627 * 0.4)
                {
                  goto LABEL_806;
                }
                strcpy((char *)__p, "\r");
                LOBYTE(v759[0]) = 3;
                v634 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
                v636 = v635 + (double)v634;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v759, "#tre_ao,infinite starting line has been crossed,time,%.1lf,workout_number,%d,distance_to_start,%.1lf,current_lap_distance,%.1lf,lap_distance_thresh,%.1lf,lat,lon,%.7lf,%.7lf", v637, v638, v639, v640, v641, SLOBYTE(v636));
                *(_OWORD *)((char *)this + 2792) = v747;
                *((_BYTE *)this + 2808) = v633;
                *((_BYTE *)this + 2816) = 1;
                if (!*((_BYTE *)this + 2752))
                  sub_18D164CA0();
                trackrun::TrackRunEngineActiveObject::FindClosestPointOnLineSegment((double *)v786, (double *)this + 340, 1, 0, 0);
                if (fabs(v643) >= 10.0)
                  goto LABEL_806;
                ++*((_WORD *)this + 1480);
                *(double *)v642.i64 = fabs(v625);
                v644 = *(int8x16_t *)((char *)this + 2904);
                v645 = (int8x16_t)vsubq_f64((float64x2_t)v644, (float64x2_t)vdupq_lane_s64(v642.i64[0], 0));
                *((int8x16_t *)this + 183) = v645;
                *((_QWORD *)this + 363) = v642.i64[0];
                *((_QWORD *)this + 364) = v642.i64[0];
                v745 = 0uLL;
                v645.i64[0] = *((_QWORD *)a2 + 21);
                if (fabs(*(double *)v645.i64) < 2.22044605e-16
                  || (v645.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                {
                  v644.i64[0] = 0;
                  *(double *)v645.i64 = fmax(*((double *)this + 360), 0.0);
                  *((_QWORD *)this + 365) = v645.i64[0];
                }
                else
                {
                  __p[0] = 0uLL;
                  *(double *)v645.i64 = *(double *)v642.i64 / *(double *)v645.i64;
                  CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v645, v642);
                  v645.i64[1] = *(_QWORD *)&__p[0].f64[1];
                  v745 = __p[0];
                  v646 = *(_QWORD *)&__p[0].f64[0];
                  v644.i64[0] = 0;
                  *(double *)v645.i64 = fmax(*((double *)this + 360), 0.0);
                  *((_QWORD *)this + 365) = v645.i64[0];
                  if (v646)
                  {
                    if (v646 < 1)
                    {
                      v670 = 0;
                      goto LABEL_825;
                    }
                    v647 = *(_QWORD *)&v745.f64[1];
                    goto LABEL_824;
                  }
                }
                v646 = 0;
                v670 = 0;
                v647 = *(_QWORD *)&v745.f64[1];
                if (v745.f64[1] <= 0.0)
                {
LABEL_825:
                  *(_QWORD *)&v745.f64[0] = v670;
                  *(_QWORD *)&v745.f64[1] = v644.i64[0];
                  *(double *)v644.i64 = *(double *)v644.i64 + (double)v670;
                  *(double *)v645.i64 = *(double *)v645.i64 - *(double *)v644.i64;
                  *((_QWORD *)this + 365) = v645.i64[0];
                  sub_18D2E74A8((uint64_t)__p, (uint64_t)a2 + 8, &v745, v645, v644);
                  v671 = __p[1];
                  *((float64x2_t *)this + 177) = __p[0];
                  *((float64x2_t *)this + 178) = v671;
                  *((_OWORD *)this + 179) = v763;
                  *((_QWORD *)this + 362) = 0;
                  *((_QWORD *)this + 361) = 0;
                  trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::ConvertEastNorthToLatLon((uint64_t)v732, (float64x2_t *)&v757, v672, v673, v674, v675, v676, (uint64_t)__p);
                  if (LOBYTE(__p[1].f64[0]))
                    *((float64x2_t *)this + 184) = __p[0];
                  LOWORD(v743) = 13;
                  v761[0] = 3;
                  v677 = *((_BYTE *)this + 2640);
                  trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString((uint64_t)this, *((_QWORD *)this + 358), *((_QWORD *)this + 359), v759);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v743, v761, "TrackRun-Lap-%u,viewType,SingleArrowCoordinate,iOSTime,%.1lf,mcTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,course,%.2lf,cur_dist_past_lap_m,%.1lf,lap_count,%d,last_lap_dist,%.2lf,raw_last_lap_dist,%.2lf,last_lap_split_s,%.1lf,workout_duration,%.1lf,workout_dist,%.1lf,raw_workout_dist,%.1lf,current_lane,%lu,last_lap_start_time,%.1lf", v678, v679, v680, v681, v682, v677);
                  if (SHIBYTE(v759[2]) < 0)
                    operator delete(v759[0]);
LABEL_806:
                  if (*((_BYTE *)this + 2992))
                  {
                    v653 = *((unsigned __int8 *)this + 2040);
                    *(_OWORD *)((char *)this + 1912) = *((_OWORD *)this + 179);
                    *(_OWORD *)((char *)this + 1928) = *((_OWORD *)this + 180);
                    *(_OWORD *)((char *)this + 1880) = *((_OWORD *)this + 177);
                    *(_OWORD *)((char *)this + 1896) = *((_OWORD *)this + 178);
                    v654 = *((_OWORD *)this + 184);
                    *(_OWORD *)((char *)this + 1976) = *((_OWORD *)this + 183);
                    *(_OWORD *)((char *)this + 1992) = v654;
                    v655 = *((_OWORD *)this + 186);
                    *(_OWORD *)((char *)this + 2008) = *((_OWORD *)this + 185);
                    *(_OWORD *)((char *)this + 2024) = v655;
                    v656 = *((_OWORD *)this + 182);
                    *(_OWORD *)((char *)this + 1944) = *((_OWORD *)this + 181);
                    *(_OWORD *)((char *)this + 1960) = v656;
                    if (!v653)
                      *((_BYTE *)this + 2040) = 1;
                  }
                  goto LABEL_809;
                }
LABEL_824:
                v670 = v646;
                v644.i64[0] = v647;
                goto LABEL_825;
              }
              if (!*((_BYTE *)this + 2713)
                || *((double *)a2 + 21) < 0.05
                && (!*((_BYTE *)this + 776) || *((unsigned __int8 *)this + 768) - 1 <= 1))
              {
                goto LABEL_762;
              }
            }
            else
            {
              if (!*((_BYTE *)this + 2824))
                goto LABEL_789;
              v561 = (char *)this + 2824;
              if (*((_BYTE *)this + 2712))
                goto LABEL_779;
            }
            *((_BYTE *)this + 2712) = 1;
            v757.i16[0] = 13;
            LOBYTE(v759[0]) = 3;
            v606 = *((_BYTE *)this + 2640);
            trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString((uint64_t)this, *((_QWORD *)this + 358), *((_QWORD *)this + 359), __p);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v757, (unsigned __int8 *)v759, "TrackRun-Start-%u hint:%d,viewType,MultiCoordinatePolyline,iOSTime,%.1lf,mcTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,latitude1,%.7lf,longitude1,%.7lf,lane_hint,%d", v607, v608, v609, v610, v611, v606);
            if (SHIBYTE(__p[1].f64[0]) < 0)
              operator delete(*(void **)&__p[0].f64[0]);
            if (*v561)
              goto LABEL_779;
LABEL_789:
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v352) <= 1)
            {
              strcpy((char *)__p, "\r");
              v757.i8[0] = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v757, "#tre_ao,starting line not populated. Cannot proceed", v628, v629, v630, v631, v632, v696);
            }
            goto LABEL_821;
          }
LABEL_727:
          if (*(double *)v360.i64 > 0.0)
            goto LABEL_743;
          goto LABEL_730;
        }
      }
      else
      {
        v338 = v311 + 1;
      }
      v340 = 0;
      *((_QWORD *)this + 587) = v338;
      *((_BYTE *)this + 4704) = 1;
      *((_WORD *)this + 2344) = 0;
      goto LABEL_397;
    }
    v310 = v302 - 1;
    if (v310 >= *(_QWORD *)(v736 + 96) - 1)
      v311 = *(_QWORD *)(v736 + 96) - 1;
    else
      v311 = v310;
    goto LABEL_384;
  }
  if (cnprint::CNPrinter::GetLogLevel(v265) <= 1)
  {
    strcpy((char *)__p, "\r");
    v786[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, v786, "#tre_ao,DEBUG FORCING TO LANE %d", v267, v268, v269, v270, v271, *(_BYTE *)(*((_QWORD *)this + 67) + 69));
  }
  if (*((_BYTE *)this + 1072))
  {
    *((_BYTE *)this + 1064) = 0;
    *(_OWORD *)((char *)this + 1048) = 0u;
    *(_OWORD *)((char *)this + 1032) = 0u;
    *(_OWORD *)((char *)this + 1016) = 0u;
  }
  else
  {
    *((_QWORD *)this + 126) = &unk_1E25C89C0;
    *((_BYTE *)this + 1064) = 0;
    *(_OWORD *)((char *)this + 1016) = 0u;
    *(_OWORD *)((char *)this + 1032) = 0u;
    *(_OWORD *)((char *)this + 1048) = 0u;
    *((_BYTE *)this + 1072) = 1;
  }
  *((_BYTE *)this + 1064) = *(_BYTE *)(*((_QWORD *)this + 67) + 69);
  v272 = (_OWORD *)((char *)this + 1016);
  v274 = *v243;
  v273 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 1048) = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 1016) = v274;
  *(_OWORD *)((char *)this + 1032) = v273;
  v275 = (char *)this + 632;
  if (*((_BYTE *)this + 4602))
  {
LABEL_269:
    if (v275[4048])
    {
      *((_BYTE *)this + 4672) = *((_BYTE *)this + 1064);
      v276 = *(_OWORD *)((char *)this + 1032);
      *((_OWORD *)this + 289) = *v272;
      *((_OWORD *)this + 290) = v276;
      *((_OWORD *)this + 291) = *(_OWORD *)((char *)this + 1048);
    }
    else
    {
      *((_QWORD *)this + 577) = &unk_1E25C89C0;
      *((_BYTE *)this + 4672) = *((_BYTE *)this + 1064);
      v279 = *(_OWORD *)((char *)this + 1032);
      *((_OWORD *)this + 289) = *v272;
      *((_OWORD *)this + 290) = v279;
      *((_OWORD *)this + 291) = *(_OWORD *)((char *)this + 1048);
      v275[4048] = 1;
    }
    v280 = *((unsigned __int8 *)this + 1064);
    if (v280 <= 1)
      v281 = 1;
    else
      v281 = *((unsigned __int8 *)this + 1064);
    if (v280 > *(unsigned __int8 *)(v736 + 96))
      v281 = *(unsigned __int8 *)(v736 + 96);
    if (*(_BYTE *)(v736 + 96))
      v282 = v281;
    else
      v282 = *((unsigned __int8 *)this + 1064);
    if (!v275[4072])
      v275[4072] = 1;
    *((_QWORD *)this + 587) = v282;
    *((_WORD *)this + 2344) = 0;
    goto LABEL_286;
  }
  __p[0].f64[0] = 0.0;
  __p[0].f64[1] = NAN;
  LOBYTE(__p[1].f64[0]) = 0;
  LOBYTE(__p[1].f64[1]) = 0;
  BYTE8(v766) = 0;
  *(_QWORD *)&__p[0].f64[0] = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
  __p[0].f64[1] = v277;
  LOBYTE(__p[1].f64[0]) = v241;
  if (BYTE8(v766) == *((unsigned __int8 *)this + 1072))
  {
    if (BYTE8(v766))
    {
      v278 = *(_OWORD *)((char *)this + 1032);
      v763 = *v272;
      v764 = v278;
      v765 = *(_OWORD *)((char *)this + 1048);
      LOBYTE(v766) = *((_BYTE *)this + 1064);
    }
  }
  else if (BYTE8(v766))
  {
    BYTE8(v766) = 0;
  }
  else
  {
    *(_QWORD *)&__p[1].f64[1] = &unk_1E25C89C0;
    v376 = *(_OWORD *)((char *)this + 1032);
    v763 = *v272;
    v764 = v376;
    v765 = *(_OWORD *)((char *)this + 1048);
    LOBYTE(v766) = *((_BYTE *)this + 1064);
    BYTE8(v766) = 1;
  }
  if (!trackrun::TrackRunLaneEstimator::Initialize((uint64_t)this + 3104, (uint64_t)__p))
  {
    v275 = (char *)this + 632;
    if (!*((_BYTE *)this + 1072))
      sub_18D164CA0();
    goto LABEL_269;
  }
  strcpy(v786, "\r");
  v757.i8[0] = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v786, (unsigned __int8 *)&v757, "#tre_ao,lane estimator could not be initialized.", v377, v378, v379, v380, v381, v696);
LABEL_821:
  std::mutex::unlock((std::mutex *)((char *)this + 544));
}

void sub_18D2E6380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::mutex *a58)
{
  std::mutex::unlock(a58);
  _Unwind_Resume(a1);
}

double sub_18D2E6510(double *a1, double **a2)
{
  double *v3;
  double *v4;
  double *v6;
  BOOL v7;
  double result;
  BOOL v9;
  double v10;
  double *v11;
  double *v12;

  v4 = *a2;
  v3 = a2[1];
  if ((unint64_t)((char *)v3 - (char *)*a2) < 0x40)
    goto LABEL_11;
  LODWORD(v12) = 0;
  BYTE4(v12) = 0;
  v6 = v3 - 4;
  do
  {
    if (v6 + 2 == v4)
      break;
    v7 = sub_18D265620(a1, v6 + 2, v6, (uint64_t)&v12);
    v6 -= 2;
  }
  while (v7);
  result = 0.0;
  if (BYTE4(v12))
    v9 = 1;
  else
    v9 = (_DWORD)v12 == 0;
  if (v9)
  {
    v4 = *a2;
    v3 = a2[1];
LABEL_11:
    if (v3 == v4)
    {
      return 0.0;
    }
    else
    {
      v10 = 0.0;
      v11 = 0;
      sub_18D2F04F4(a1, v4, v3, &v12, &v11, &v10);
      return v10;
    }
  }
  return result;
}

void trackrun::TrackRunEngineActiveObject::ComputeAcrossTrackDistanceInformation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, __int128 *a5@<X8>)
{
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  double **v21;
  double **v22;
  double ClosestPointOnRing;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  __int16 v45;
  __int128 v46;
  void *v47[2];
  char v48;

  *((_WORD *)a5 + 32) = 0;
  a5[2] = 0u;
  a5[3] = 0u;
  *a5 = 0u;
  a5[1] = 0u;
  *((_QWORD *)a5 + 9) = 0x3FF0000000000000;
  if (*(_QWORD *)(a3 + 96))
  {
    trackrun::TrackRunEngineActiveObject::FindClosestPointOnRing(a4, *(double ***)(a3 + 40), 1, 0);
    v11 = v10;
    *((double *)a5 + 3) = v10;
  }
  else
  {
    v11 = 0.0;
  }
  if (*(_BYTE *)(a1 + 1432))
  {
    v12 = *(unsigned __int8 *)(a1 + 1425);
    if (v12 == 2)
    {
      v13 = 0.1863;
    }
    else
    {
      if (v12 != 1)
        goto LABEL_10;
      v13 = -0.1863;
    }
    v11 = v11 + v13;
    *((double *)a5 + 3) = v11;
  }
LABEL_10:
  *a5 = *(_OWORD *)a4;
  v14 = *(double *)(a2 + 200);
  if (v14 > 20.0)
  {
    LOWORD(v46) = 13;
    LOBYTE(v45) = 3;
    sub_18D0778AC(v47, "TrackRunEngineActiveObject");
    if (v48 >= 0)
      v20 = v47;
    else
      LOBYTE(v20) = v47[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, (unsigned __int8 *)&v45, "Warning %s, delta_distance for current epoch is very large,%.1lf", v15, v16, v17, v18, v19, (char)v20);
    if (v48 < 0)
      operator delete(v47[0]);
    v14 = 20.0;
  }
  *((double *)a5 + 2) = v14;
  v21 = *(double ***)(a3 + 40);
  v22 = &v21[9 * *(_QWORD *)(a3 + 96) - 9];
  ClosestPointOnRing = trackrun::TrackRunEngineActiveObject::FindClosestPointOnRing(a4, v21, 0, 0);
  v25 = v24;
  v26 = trackrun::TrackRunEngineActiveObject::FindClosestPointOnRing(a4, v22, 0, 0);
  *((double *)a5 + 4) = ClosestPointOnRing;
  *((_QWORD *)a5 + 5) = v25;
  *((double *)a5 + 6) = v26;
  *((_QWORD *)a5 + 7) = v27;
  if (*(_BYTE *)(a1 + 2992))
    *((_WORD *)a5 + 32) = *(_WORD *)(a1 + 2960);
  if (!*(_BYTE *)(a3 + 88))
    sub_18D164CA0();
  v28 = *(double *)(a3 + 80);
  v29 = v11 + (double)*(unint64_t *)(a3 + 96) * v28;
  v30 = v11 - v28;
  if (v29 < 0.0 || v30 > 0.0)
  {
    if (v29 >= 0.0)
      v31 = v30;
    else
      v31 = -v29;
    *((long double *)a5 + 9) = exp(-(*(double *)(*(_QWORD *)(a1 + 536) + 224) * v31));
    v46 = *a5;
    trackrun::TrackRunEngineActiveObject::ConvertPointEastNorthToLatLon(a1, (uint64_t)&v46, v32, v33, v34, v35, v36, v37);
    v45 = 13;
    v44 = 3;
    v38 = *(_BYTE *)(a1 + 2640);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString(a1, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), v47);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, &v44, "TrackRun-OUT-%u,viewType,SingleArrowCoordinate,iOSTime,%.1lf,mcTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,course,%.2lf,speed,%.2lf,type,%d,distance,%.1lf,weight_factor,%.1lf", v39, v40, v41, v42, v43, v38);
    if (v48 < 0)
      operator delete(v47[0]);
  }
}

void sub_18D2E6890(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  _Unwind_Resume(exception_object);
}

__n128 sub_18D2E68B0(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  __n128 result;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t i;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 51 * v6 - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x33)
    {
      v23 = (char *)a1[3];
      v24 = (char *)*a1;
      v25 = (uint64_t)&v23[-*a1];
      if (v6 >= v25 >> 3)
      {
        v28 = v25 >> 2;
        if (v23 == v24)
          v29 = 1;
        else
          v29 = v28;
        v30 = (char *)sub_18D07BF3C(v29);
        v32 = v31;
        v33 = operator new(0xFF0uLL);
        v34 = &v30[8 * v6];
        v35 = &v30[8 * v32];
        if (v6 == v32)
        {
          v36 = 8 * v6;
          if (v5 - v4 < 1)
          {
            v75 = v33;
            v76 = v36 >> 2;
            if (v5 == v4)
              v77 = 1;
            else
              v77 = v76;
            v78 = (char *)sub_18D07BF3C(v77);
            v34 = &v78[8 * (v77 >> 2)];
            v35 = &v78[8 * v79];
            if (v30)
              operator delete(v30);
            v30 = v78;
            v33 = v75;
          }
          else
          {
            v37 = v36 >> 3;
            if (v37 >= -1)
              v38 = v37 + 1;
            else
              v38 = v37 + 2;
            v34 -= 8 * (v38 >> 1);
          }
        }
        *(_QWORD *)v34 = v33;
        v80 = v34 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v34 == v30)
          {
            if (v80 >= v35)
            {
              if (v35 == v30)
                v86 = 1;
              else
                v86 = (v35 - v30) >> 2;
              v87 = (char *)sub_18D07BF3C(v86);
              v89 = v87;
              v34 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
              v91 = v80 - v30;
              v90 = v80 == v30;
              v80 = v34;
              if (!v90)
              {
                v80 = &v34[v91 & 0xFFFFFFFFFFFFFFF8];
                v92 = 8 * (v91 >> 3);
                v93 = v34;
                v94 = (uint64_t *)v30;
                do
                {
                  v95 = *v94++;
                  *(_QWORD *)v93 = v95;
                  v93 += 8;
                  v92 -= 8;
                }
                while (v92);
              }
              v35 = &v87[8 * v88];
              if (v30)
                operator delete(v30);
              v30 = v89;
            }
            else
            {
              v82 = (v35 - v80) >> 3;
              if (v82 >= -1)
                v83 = v82 + 1;
              else
                v83 = v82 + 2;
              v84 = v83 >> 1;
              v34 = &v30[8 * (v83 >> 1)];
              v85 = v30;
              if (v80 != v30)
              {
                memmove(v34, v30, v80 - v30);
                v85 = v80;
              }
              v80 = &v85[8 * v84];
            }
          }
          v96 = *(_QWORD *)(i - 8);
          *((_QWORD *)v34 - 1) = v96;
          v34 -= 8;
        }
        v97 = (char *)*a1;
        *a1 = v30;
        a1[1] = v34;
        a1[2] = v80;
        a1[3] = v35;
        if (v97)
          operator delete(v97);
        goto LABEL_36;
      }
      v26 = operator new(0xFF0uLL);
      v27 = v26;
      if (v23 == v5)
      {
        if (v4 == v24)
        {
          if (v5 == v4)
            v53 = 1;
          else
            v53 = (v23 - v4) >> 2;
          v54 = 2 * v53;
          v55 = (char *)sub_18D07BF3C(v53);
          v4 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
          v57 = (uint64_t *)a1[1];
          v58 = v4;
          v59 = a1[2] - (_QWORD)v57;
          if (v59)
          {
            v58 = &v4[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = 8 * (v59 >> 3);
            v61 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v62 = *v57++;
              *(_QWORD *)v61 = v62;
              v61 += 8;
              v60 -= 8;
            }
            while (v60);
          }
          v63 = (char *)*a1;
          *a1 = v55;
          a1[1] = v4;
          a1[2] = v58;
          a1[3] = &v55[8 * v56];
          if (v63)
          {
            operator delete(v63);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v27;
        v64 = (char *)a1[1];
        v65 = (char *)a1[2];
        a1[1] = v64 - 8;
        v66 = *((_QWORD *)v64 - 1);
        a1[1] = v64;
        if (v65 == (char *)a1[3])
        {
          v67 = (uint64_t)&v64[-*a1];
          if ((unint64_t)v64 <= *a1)
          {
            if (v65 == (char *)*a1)
              v98 = 1;
            else
              v98 = (uint64_t)&v65[-*a1] >> 2;
            v99 = (char *)sub_18D07BF3C(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            v65 = v101;
            v103 = a1[2] - (_QWORD)v102;
            if (v103)
            {
              v65 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                v106 = *v102++;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v65;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              v65 = (char *)a1[2];
            }
          }
          else
          {
            v68 = v67 >> 3;
            v15 = v67 >> 3 < -1;
            v69 = (v67 >> 3) + 2;
            if (v15)
              v70 = v69;
            else
              v70 = v68 + 1;
            v71 = -(v70 >> 1);
            v72 = v70 >> 1;
            v73 = &v64[-8 * v72];
            v74 = v65 - v64;
            if (v65 != v64)
            {
              memmove(&v64[-8 * v72], v64, v65 - v64);
              v64 = (char *)a1[1];
            }
            v65 = &v73[v74];
            a1[1] = &v64[8 * v71];
            a1[2] = &v73[v74];
          }
        }
        *(_QWORD *)v65 = v66;
      }
      else
      {
        *(_QWORD *)v5 = v26;
      }
    }
    else
    {
      a1[4] = v8 - 51;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1)
            v39 = 1;
          else
            v39 = (uint64_t)&v5[-*a1] >> 2;
          v40 = (char *)sub_18D07BF3C(v39);
          v42 = &v40[8 * (v39 >> 2)];
          v43 = (uint64_t *)a1[1];
          v5 = v42;
          v44 = a1[2] - (_QWORD)v43;
          if (v44)
          {
            v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
            v45 = 8 * (v44 >> 3);
            v46 = &v40[8 * (v39 >> 2)];
            do
            {
              v47 = *v43++;
              *(_QWORD *)v46 = v47;
              v46 += 8;
              v45 -= 8;
            }
            while (v45);
          }
          v48 = (char *)*a1;
          *a1 = v40;
          a1[1] = v42;
          a1[2] = v5;
          a1[3] = &v40[8 * v41];
          if (v48)
          {
            operator delete(v48);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v5 = v11;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v9 = a1[5] + a1[4];
  }
  v49 = *(_QWORD *)&v4[8 * (v9 / 0x33)] + 80 * (v9 % 0x33);
  *(_OWORD *)v49 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v51 = *(_OWORD *)(a2 + 32);
  v52 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v49 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v49 + 64) = v52;
  *(__n128 *)(v49 + 16) = result;
  *(_OWORD *)(v49 + 32) = v51;
  ++a1[5];
  return result;
}

void sub_18D2E6DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void trackrun::TrackRunEngineActiveObject::PruneAcrossTrackDistanceDeque(trackrun::TrackRunEngineActiveObject *this)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  cnprint::CNPrinter *v8;
  double v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  cnprint::CNPrinter *LogLevel;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  __int16 v31;
  unsigned __int8 v32;
  __int16 v33;

  v1 = *((_QWORD *)this + 387);
  if (v1 >= 2)
  {
    v3 = *((_QWORD *)this + 386);
    do
    {
      v4 = v3 + v1;
      v5 = *((_QWORD *)this + 383);
      v6 = (_QWORD *)(v5 + 8 * (v4 / 0x33));
      v7 = *v6 + 80 * (v4 % 0x33);
      if (*((_QWORD *)this + 384) == v5)
        v7 = 0;
      if (*v6 == v7)
        v7 = *(v6 - 1) + 4080;
      trackrun::TrackRunEngineActiveObject::FindClosestPointOnLineSegment((double *)(v7 - 80), (double *)(*(_QWORD *)(v5 + 8 * (v3 / 0x33)) + 80 * (v3 % 0x33) + 32), 1, 0, 0);
      v10 = v9;
      v11 = *((_QWORD *)this + 386);
      v12 = v11 + *((_QWORD *)this + 387);
      v13 = *((_QWORD *)this + 383);
      v14 = (_QWORD *)(v13 + 8 * (v12 / 0x33));
      v15 = *v14 + 80 * (v12 % 0x33);
      if (*((_QWORD *)this + 384) == v13)
        v15 = 0;
      if (*v14 == v15)
        v15 = *(v14 - 1) + 4080;
      v16 = *(unsigned __int16 *)(v15 - 16);
      v17 = *(unsigned __int16 *)(*(_QWORD *)(v13 + 8 * (v11 / 0x33)) + 80 * (v11 % 0x33) + 64);
      LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v8);
      if (!(_DWORD)LogLevel)
      {
        v33 = 13;
        v32 = 0;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "#tre_ao,lap_count,first,%d,last,%d,signed_last,%.1lf", v19, v20, v21, v22, v23, v17);
      }
      if (v10 <= 0.0 || v16 <= v17 && *((double *)this + 363) <= 250.0)
        break;
      if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
      {
        v31 = 13;
        v30 = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "#tre_ao,dist_to_first_point is positive,discarding,%.1lf,size,%lu", v24, v25, v26, v27, v28, SLOBYTE(v10));
      }
      v29 = *((_QWORD *)this + 386);
      v1 = *((_QWORD *)this + 387) - 1;
      *((_QWORD *)this + 387) = v1;
      v3 = v29 + 1;
      *((_QWORD *)this + 386) = v3;
      if (v3 >= 0x66)
      {
        operator delete(**((void ***)this + 383));
        *((_QWORD *)this + 383) += 8;
        v3 = *((_QWORD *)this + 386) - 51;
        *((_QWORD *)this + 386) = v3;
        v1 = *((_QWORD *)this + 387);
      }
    }
    while (v1 > 1);
  }
}

void trackrun::TrackRunEngineActiveObject::ComputeAcrossTrackDistanceEvidence(trackrun::TrackRunEngineActiveObject *this@<X0>, const trackrun::PositionEvent *a2@<X1>, const trackrun::RunningTrackData::RunningTrack *a3@<X2>, uint64_t a4@<X8>)
{
  trackrun::TrackRunEngineActiveObject *v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  double *v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v28;
  unsigned __int8 v29;
  double v30;
  _BYTE v31[4];
  __int128 v32;
  _DWORD v33[7];

  v4 = this;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = 0x7FF8000000000000;
  v5 = *((_QWORD *)a3 + 12);
  if (!*(_BYTE *)(*((_QWORD *)this + 67) + 66))
    v5 = 1;
  v28 = v5;
  if (!v5)
  {
    v8 = 0;
    if (!*(_BYTE *)(*((_QWORD *)this + 67) + 66))
      return;
    goto LABEL_26;
  }
  v8 = 0;
  v9 = 0;
  v10 = INFINITY;
  do
  {
    v31[0] = 0;
    v32 = 0u;
    memset(v33, 0, sizeof(v33));
    if (*((_QWORD *)v4 + 387))
    {
      v11 = 0;
      do
      {
        v30 = 0.0;
        if (!*((_BYTE *)a3 + 88))
          goto LABEL_30;
        v12 = (double *)(*(_QWORD *)(*((_QWORD *)v4 + 383) + 8 * ((v11 + *((_QWORD *)v4 + 386)) / 0x33))
                       + 80 * ((v11 + *((_QWORD *)v4 + 386)) % 0x33));
        v30 = v12[3] + *((double *)a3 + 10) * (double)v9;
        this = (trackrun::TrackRunEngineActiveObject *)sub_18D1648E4((uint64_t)v31, &v30, v12[9] * v12[2]);
        ++v11;
        v13 = *((_QWORD *)v4 + 387);
      }
      while (v11 < v13);
      v14 = *(double *)&v33[1];
      v15 = sqrt(*(double *)&v33[5]);
      if (v13 <= 4)
        v16 = 10.0;
      else
        v16 = v15;
    }
    else
    {
      v14 = 0.0;
      v16 = 10.0;
    }
    v17 = fabs(v14);
    if (v17 < v10)
    {
      v10 = v17;
      v8 = v9;
    }
    if (*(_BYTE *)(*((_QWORD *)v4 + 67) + 66))
    {
      this = (trackrun::TrackRunEngineActiveObject *)cnprint::CNPrinter::GetLogLevel(this);
      if (this <= 1)
      {
        LOWORD(v30) = 13;
        v29 = 1;
        v18 = (*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
        if (!*((_BYTE *)a3 + 88))
          goto LABEL_30;
        v25 = v19 + (double)v18;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "#tre_ao,time,%.3lf,laneidx,%lu,weighted_across_track_distance_sum,%.2lf,delta_distance_sum,%.1lf,lane_width,%.1lf,win_count,%u,standard_deviation,%.1lf,source,%hhu,delta_dist,%.3lf,speed,%.1lf", v20, v21, v22, v23, v24, SLOBYTE(v25));
      }
    }
    if (!v9)
    {
      this = (trackrun::TrackRunEngineActiveObject *)(*(uint64_t (**)(const trackrun::PositionEvent *))(*(_QWORD *)a2 + 16))(a2);
      *(_QWORD *)(a4 + 24) = this;
      *(_QWORD *)(a4 + 32) = v26;
      *(double *)a4 = v14;
      if (!*((_BYTE *)a3 + 88))
LABEL_30:
        sub_18D164CA0();
      *(_QWORD *)(a4 + 8) = *((_QWORD *)a3 + 10);
      *(double *)(a4 + 16) = v16;
    }
    ++v9;
  }
  while (v9 != v28);
  if (*(_BYTE *)(*((_QWORD *)v4 + 67) + 66))
  {
LABEL_26:
    if (*((_BYTE *)v4 + 2992))
    {
      if (*((_WORD *)v4 + 1480))
        ++*((_DWORD *)v4 + v8 + 1178);
    }
  }
}

void sub_18D2E7290(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[1];
  v3 = a1[2];
  a1[5] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 25;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 51;
  }
  a1[4] = v6;
}

double trackrun::TrackRunEngineActiveObject::FindClosestPointOnLineSegment(double *a1, double *a2, int a3, int a4, int a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v29;
  __int16 v30;

  v6 = a1[1];
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = *a1 - *a2;
  v11 = v6 - v7;
  v12 = v8 - *a2;
  v13 = v9 - v7;
  v14 = v13 * v13 + v12 * v12;
  v15 = -1.0;
  if (fabs(v14) >= 2.22044605e-16)
    v15 = (v11 * v13 + v10 * v12) / v14;
  if (v15 < 0.0 && a5 == 0)
  {
    v8 = *a2;
    v9 = a2[1];
    if (a3)
      goto LABEL_13;
LABEL_22:
    if (!a4)
      return v8;
    goto LABEL_23;
  }
  if (v15 <= 1.0 || a5 != 0)
  {
    v8 = *a2 + v15 * v12;
    v9 = v7 + v15 * v13;
  }
  if (!a3)
    goto LABEL_22;
LABEL_13:
  v18 = sqrt((v6 - v9) * (v6 - v9) + (*a1 - v8) * (*a1 - v8));
  v19 = v12 * v11 - v13 * v10;
  v20 = 1.0;
  v21 = 0.0;
  if (v19 < 0.0)
    v21 = -1.0;
  if (v19 <= 0.0)
    v20 = v21;
  v22 = v18 * v20;
  if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1))
  {
    v30 = 13;
    v29 = 0;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "#tre_ao,signed_distance_to_closest_point_m,%.1lf", v23, v24, v25, v26, v27, SLOBYTE(v22));
  }
  if (a4)
  {
LABEL_23:
    if (fabs(v12) > 0.000000015 || fabs(v13) > 0.000000015)
      atan2(v12, v13);
  }
  return v8;
}

uint64_t sub_18D2E74A8(uint64_t a1, uint64_t a2, _QWORD *a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t result;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = CNTimeSpan::operator-(a2 + 8, a3, a4, a5);
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v11;
  if (*(_BYTE *)(a2 + 24))
  {
    result = CNTimeSpan::operator-(a2 + 32, a3, v9, v10);
    *(_QWORD *)(a1 + 32) = result;
    *(_QWORD *)(a1 + 40) = v12;
  }
  return result;
}

void trackrun::TrackRunEngineActiveObject::HandleEvent(trackrun::TrackRunEngineActiveObject *this, const trackrun::TrackRunHintEvent *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  cnprint::CNPrinter *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double v38;
  char v39;
  void *__p[2];
  char v41;
  unsigned __int8 v42;
  __int16 v43;

  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    LOWORD(__p[0]) = 13;
    LOBYTE(v43) = 1;
    v4 = (*(uint64_t (**)(const trackrun::TrackRunHintEvent *))(*(_QWORD *)a2 + 16))(a2);
    v38 = v5 + (double)v4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v43, "#tre_ao,received track run hint event,time,%.1lf,lane_number,%hhu", v6, v7, v8, v9, v10, SLOBYTE(v38));
  }
  v43 = 13;
  v42 = 3;
  v11 = *((_BYTE *)this + 2640);
  if (*((_BYTE *)this + 1000)
    && ((*(void (**)(char *))(*((_QWORD *)this + 98) + 16))((char *)this + 784), *((_BYTE *)this + 1000)))
  {
    v12 = *((_QWORD *)this + 103);
    v13 = *((_QWORD *)this + 104);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  trackrun::TrackRunEngineActiveObject::ConvertIosTimeToGregorianString((uint64_t)this, v12, v13, __p);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, &v42, "TrackRun-Hint-%u hint:%d,viewType,SingleArrowCoordinate,time,%.1lf,iOSTime,%.1lf,gregTime,%s,latitude,%.7lf,longitude,%.7lf,lane_hint,%d", v14, v15, v16, v17, v18, v11);
  if (v41 < 0)
    operator delete(__p[0]);
  if (!*(_BYTE *)(*((_QWORD *)this + 67) + 201))
  {
    if (*((_BYTE *)this + 4680))
    {
      v20 = *(_OWORD *)((char *)a2 + 8);
      v21 = *(_OWORD *)((char *)a2 + 24);
      v22 = *(_OWORD *)((char *)a2 + 40);
      *((_BYTE *)this + 4672) = *((_BYTE *)a2 + 56);
      *((_OWORD *)this + 291) = v22;
      *((_OWORD *)this + 290) = v21;
      *((_OWORD *)this + 289) = v20;
    }
    else
    {
      *((_QWORD *)this + 577) = &unk_1E25C89C0;
      v23 = *(_OWORD *)((char *)a2 + 8);
      v24 = *(_OWORD *)((char *)a2 + 24);
      v25 = *(_OWORD *)((char *)a2 + 40);
      *((_BYTE *)this + 4672) = *((_BYTE *)a2 + 56);
      *((_OWORD *)this + 291) = v25;
      *((_OWORD *)this + 290) = v24;
      *((_OWORD *)this + 289) = v23;
      *((_BYTE *)this + 4680) = 1;
    }
    if (*((_BYTE *)this + 1072))
      goto LABEL_19;
    if (*((_BYTE *)this + 2824))
      *((_BYTE *)this + 2824) = 0;
    if (cnprint::CNPrinter::GetLogLevel(v19) <= 1)
    {
      LOWORD(__p[0]) = 13;
      LOBYTE(v43) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v43, "#tre_ao,received first lane hint of the workout, resetting start line.", v26, v27, v28, v29, v30, v39);
    }
    if (*((_BYTE *)this + 1072))
    {
LABEL_19:
      v31 = *(_OWORD *)((char *)a2 + 8);
      v32 = *(_OWORD *)((char *)a2 + 24);
      v33 = *(_OWORD *)((char *)a2 + 40);
      *((_BYTE *)this + 1064) = *((_BYTE *)a2 + 56);
      *(_OWORD *)((char *)this + 1048) = v33;
      *(_OWORD *)((char *)this + 1032) = v32;
      *(_OWORD *)((char *)this + 1016) = v31;
    }
    else
    {
      *((_QWORD *)this + 126) = &unk_1E25C89C0;
      v35 = *(_OWORD *)((char *)a2 + 8);
      v36 = *(_OWORD *)((char *)a2 + 24);
      v37 = *(_OWORD *)((char *)a2 + 40);
      *((_BYTE *)this + 1064) = *((_BYTE *)a2 + 56);
      *(_OWORD *)((char *)this + 1048) = v37;
      *(_OWORD *)((char *)this + 1032) = v36;
      *(_OWORD *)((char *)this + 1016) = v35;
      *((_BYTE *)this + 1072) = 1;
    }
    v34 = *((unsigned __int8 *)this + 1064);
    if (!*((_BYTE *)this + 4704))
      *((_BYTE *)this + 4704) = 1;
    *((_QWORD *)this + 587) = v34;
  }
}

void sub_18D2E77DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void trackrun::TrackRunEngineActiveObject::Reset(trackrun::TrackRunEngineActiveObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *__p[2];
  char v9;
  unsigned __int8 v10;
  __int16 v11;

  if (*((_BYTE *)this + 480))
  {
    v11 = 13;
    v10 = 2;
    sub_18D0778AC(__p, "TrackRunEngineActiveObject");
    if (v9 >= 0)
      v7 = __p;
    else
      LOBYTE(v7) = __p[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "Resetting %s", v2, v3, v4, v5, v6, (char)v7);
    if (v9 < 0)
      operator delete(__p[0]);
    trackrun::TrackRunEngineActiveObject::ResetTrackStateWhenLeaveTrackOrSessionEnds(this);
    if (*((_BYTE *)this + 1000))
      *((_BYTE *)this + 1000) = 0;
    std::mutex::lock((std::mutex *)((char *)this + 544));
    if (*((_BYTE *)this + 2056))
      *((_BYTE *)this + 2056) = 0;
    if (*((_BYTE *)this + 2440))
      *((_BYTE *)this + 2440) = 0;
    if (*((_BYTE *)this + 672))
    {
      __p[0] = (char *)this + 648;
      sub_18D2DC5D8((void ***)__p);
      *((_BYTE *)this + 672) = 0;
    }
    *((_QWORD *)this + 78) = 0;
    *((_OWORD *)this + 38) = 0u;
    *((_QWORD *)this + 79) = 0x7FF8000000000000;
    *((_QWORD *)this + 80) = 0x7FF8000000000000;
    std::mutex::unlock((std::mutex *)((char *)this + 544));
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18D2E7904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL trackrun::TrackRunEngineActiveObject::ConvertPointEastNorthToLatLon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v16;
  unsigned __int8 v17;
  __int16 v18;
  __int128 v19;
  unsigned __int8 v20;

  trackrun::TrackRunEngineActiveObject::TrackCoordinateTransform::ConvertEastNorthToLatLon(a1 + 608, (float64x2_t *)a2, a4, a5, a6, a7, a8, (uint64_t)&v19);
  v14 = v20;
  if (v20)
  {
    *(_OWORD *)a2 = v19;
  }
  else
  {
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "#tre_ao,point coordinate conversion from east north to lat lon could not be completed", v9, v10, v11, v12, v13, v16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return v14 != 0;
}

void sub_18D2E7998(uint64_t a1)
{
  sub_18D2E877C(a1);
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2E79BC(_QWORD *result)
{
  result[18] = &unk_1E25C5E70;
  *result = &unk_1E25B8E40;
  result[1] = &unk_1E25C5E70;
  return result;
}

void sub_18D2E79E0(_QWORD *a1)
{
  a1[18] = &unk_1E25C5E70;
  *a1 = &unk_1E25B8E40;
  a1[1] = &unk_1E25C5E70;
  JUMPOUT(0x18D78B5D4);
}

double sub_18D2E7A14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x10000000CLL;
  *(_QWORD *)a2 = &unk_1E25C6200;
  *(_OWORD *)(a2 + 8) = xmmword_18D3191A0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 280))
    v2 = a1 + 144;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_18D053AA8(a2, v2).n128_u64[0];
  return result;
}

uint64_t sub_18D2E7A60(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;

  *(_QWORD *)a1 = &off_1E25C8900;
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  v8 = *(_OWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 210) = *(_OWORD *)(a2 + 210);
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  if (*(char *)(a2 + 255) < 0)
  {
    sub_18D077798((_BYTE *)(a1 + 232), *(void **)(a2 + 232), *(_QWORD *)(a2 + 240));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v14;
  }
  v15 = (_BYTE *)(a1 + 256);
  if (*(char *)(a2 + 279) < 0)
  {
    sub_18D077798(v15, *(void **)(a2 + 256), *(_QWORD *)(a2 + 264));
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)v15 = v16;
  }
  return a1;
}

void sub_18D2E7B68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 255) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D2E7B84(_QWORD *a1, char a2)
{
  return sub_18D0778AC(a1, off_1E25CD8A8[a2]);
}

_QWORD *sub_18D2E7B98(_QWORD *a1, char a2)
{
  return sub_18D0778AC(a1, off_1E25CD8E8[a2]);
}

void sub_18D2E7BAC(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 104;
        sub_18D2DB938(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_18D2E7C10(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    sub_18D07AFE4();
  result = (char *)sub_18D2DB9F0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t sub_18D2E7C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_18D2E7CE4(a4 + v7, a2 + v7);
      v7 += 104;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_18D2E7CC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 104;
    do
    {
      sub_18D2DB938(v4 + v2);
      v2 -= 104;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2E7CE4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_18D2E8454((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_18D2E7D88((_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  return a1;
}

void sub_18D2E7D6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18D2E7D88(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_18D2E7E0C(result, a4);
    result = (_QWORD *)sub_18D2E7E60((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_18D2E7DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_18D2DBD78(&a9);
  _Unwind_Resume(a1);
}

char *sub_18D2E7E0C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    sub_18D07AFE4();
  result = (char *)sub_18D2DBB78((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t sub_18D2E7E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a4;
  v12 = a4;
  v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_18D2E8454((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 4);
      v7 = *(_OWORD *)(v6 + 24);
      v8 = *(_OWORD *)(v6 + 40);
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(v6 + 56);
      *(_OWORD *)(v4 + 40) = v8;
      *(_OWORD *)(v4 + 24) = v7;
      v4 = v13 + 72;
      v13 += 72;
      v6 += 72;
    }
    while (v6 != a3);
  }
  v11 = 1;
  sub_18D2E7F28((uint64_t)v10);
  return v4;
}

void sub_18D2E7F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18D2E7F28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2E7F28(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18D2E7F5C(a1);
  return a1;
}

void sub_18D2E7F5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 72);
      v3 -= 72;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 64) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t sub_18D2E7FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 104)
    {
      if (a3 != i)
      {
        sub_18D2E81AC((char *)a3, *(char **)i, *(_QWORD *)(i + 8), (uint64_t)(*(_QWORD *)(i + 8) - *(_QWORD *)i) >> 4);
        v7 = (void **)(a3 + 40);
        v6 = *(_QWORD *)(a3 + 40);
        *(_OWORD *)(a3 + 24) = *(_OWORD *)(i + 24);
        v9 = *(_QWORD *)(i + 40);
        v8 = *(_QWORD *)(i + 48);
        v10 = 0x8E38E38E38E38E39 * ((v8 - v9) >> 3);
        v11 = *(_QWORD *)(a3 + 56);
        if (0x8E38E38E38E38E39 * ((v11 - v6) >> 3) >= v10)
        {
          if (0x8E38E38E38E38E39 * ((*(_QWORD *)(a3 + 48) - v6) >> 3) >= v10)
          {
            v17 = sub_18D2E82B4(*(_QWORD *)(i + 40), *(_QWORD *)(i + 48), v6);
            v18 = *(_QWORD *)(a3 + 48);
            if (v18 != v17)
            {
              v19 = *(_QWORD *)(a3 + 48);
              do
              {
                v21 = *(void **)(v19 - 72);
                v19 -= 72;
                v20 = v21;
                if (v21)
                {
                  *(_QWORD *)(v18 - 64) = v20;
                  operator delete(v20);
                }
                v18 = v19;
              }
              while (v19 != v17);
            }
            *(_QWORD *)(a3 + 48) = v17;
            goto LABEL_23;
          }
          v16 = v9 + 8 * ((*(_QWORD *)(a3 + 48) - v6) >> 3);
          sub_18D2E82B4(*(_QWORD *)(i + 40), v16, v6);
          v15 = sub_18D2E7E60(a3 + 56, v16, v8, *(_QWORD *)(a3 + 48));
        }
        else
        {
          if (v6)
          {
            sub_18D2DBDB8((uint64_t *)(a3 + 40));
            operator delete(*v7);
            v11 = 0;
            *v7 = 0;
            *(_QWORD *)(a3 + 48) = 0;
            *(_QWORD *)(a3 + 56) = 0;
          }
          if (v10 > 0x38E38E38E38E38ELL)
            sub_18D07AFE4();
          v12 = 0x8E38E38E38E38E39 * (v11 >> 3);
          v13 = 2 * v12;
          if (2 * v12 <= v10)
            v13 = 0x8E38E38E38E38E39 * ((v8 - v9) >> 3);
          if (v12 >= 0x1C71C71C71C71C7)
            v14 = 0x38E38E38E38E38ELL;
          else
            v14 = v13;
          sub_18D2E7E0C((_QWORD *)(a3 + 40), v14);
          v15 = sub_18D2E7E60(a3 + 56, v9, v8, *(_QWORD *)(a3 + 48));
        }
        *(_QWORD *)(a3 + 48) = v15;
      }
LABEL_23:
      v22 = *(_OWORD *)(i + 64);
      v23 = *(_OWORD *)(i + 80);
      *(_QWORD *)(a3 + 96) = *(_QWORD *)(i + 96);
      *(_OWORD *)(a3 + 64) = v22;
      *(_OWORD *)(a3 + 80) = v23;
      a3 += 104;
    }
  }
  return a3;
}

void sub_18D2E819C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_18D2E81A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

char *sub_18D2E81AC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      sub_18D07AFE4();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_18D16731C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_18D2E82B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (v5 != a3)
        sub_18D2E81AC((char *)a3, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 4);
      v6 = *(_OWORD *)(v5 + 24);
      v7 = *(_OWORD *)(v5 + 40);
      *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
      *(_OWORD *)(a3 + 40) = v7;
      *(_OWORD *)(a3 + 24) = v6;
      v5 += 72;
      a3 += 72;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *sub_18D2E8330(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_18D2E7C10(result, a4);
    result = (_QWORD *)sub_18D2E7C64((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_18D2E8394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_18D2DC5D8(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_18D2E83B4(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      sub_18D2E7BAC((void **)a1);
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    sub_18D2DC5D8(&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

_QWORD *sub_18D2E8454(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_18D16731C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18D2E84B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2E84CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276)
    sub_18D07AFE4();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x13B13B13B13B13BLL)
    v9 = 0x276276276276276;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_18D2DB9F0(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[104 * v4];
  v16 = &v10[104 * v9];
  sub_18D2E85E8((uint64_t)v14, a2);
  v15 = v14 + 104;
  sub_18D2DB97C(a1, &v13);
  v11 = a1[1];
  sub_18D2DBAB8((uint64_t)&v13);
  return v11;
}

void sub_18D2E85D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18D2DBAB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2E85E8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_18D2E8454((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_18D2E7D88((_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  return a1;
}

void sub_18D2E8670(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_18D2E868C(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176))
  {
    if (*(_BYTE *)(a1 + 176))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      v2 = (_OWORD *)(a1 + 72);
      v3 = (_OWORD *)(a2 + 72);
      if (*(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104))
      {
        if (*(_BYTE *)(a1 + 104))
        {
          *v2 = *v3;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        }
      }
      else if (*(_BYTE *)(a1 + 104))
      {
        *(_BYTE *)(a1 + 104) = 0;
      }
      else
      {
        v6 = *(_OWORD *)(a2 + 88);
        *v2 = *v3;
        *(_OWORD *)(a1 + 88) = v6;
        *(_BYTE *)(a1 + 104) = 1;
      }
      result = *(__n128 *)(a2 + 112);
      v7 = *(_OWORD *)(a2 + 128);
      v8 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
      *(_OWORD *)(a1 + 128) = v7;
      *(_OWORD *)(a1 + 144) = v8;
      *(__n128 *)(a1 + 112) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 176))
  {
    *(_BYTE *)(a1 + 176) = 0;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_WORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 176) = 1;
  }
  return result;
}

void sub_18D2E877C(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &off_1E25C8AE8;
  *(_QWORD *)(a1 + 4304) = &unk_1E25B8E40;
  *(_QWORD *)(a1 + 4448) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 4312) = &unk_1E25C5E70;
  *(_QWORD *)(a1 + 3112) = &unk_1E25C5E70;
  sub_18D2E88BC((_QWORD *)(a1 + 3056));
  if (*(_BYTE *)(a1 + 2632))
  {
    *(_QWORD *)(a1 + 2544) = off_1E25C8B58;
    v2 = (void **)(a1 + 2552);
    sub_18D2DC5D8(&v2);
  }
  if (*(_BYTE *)(a1 + 2536))
  {
    *(_QWORD *)(a1 + 2448) = off_1E25C8B58;
    v2 = (void **)(a1 + 2456);
    sub_18D2DC5D8(&v2);
  }
  if (*(_BYTE *)(a1 + 1672))
  {
    *(_QWORD *)(a1 + 1440) = off_1E25C8A88;
    if (*(char *)(a1 + 1527) < 0)
      operator delete(*(void **)(a1 + 1504));
  }
  if (*(_BYTE *)(a1 + 1360))
    trackrun::VisitEvent::~VisitEvent((void **)(a1 + 1080));
  if (*(_BYTE *)(a1 + 704))
  {
    v2 = (void **)(a1 + 680);
    sub_18D2DC5D8(&v2);
  }
  if (*(_BYTE *)(a1 + 672))
  {
    v2 = (void **)(a1 + 648);
    sub_18D2DC5D8(&v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 544));
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

uint64_t sub_18D2E88BC(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 25;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 51;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_18D03CA50((uint64_t)a1);
}

_QWORD *sub_18D2E8950(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_18D1652B0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_18D2E8B4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_18D2E8B60(double *a1, uint64_t a2)
{
  double *v2;
  double v4;
  double *v5;
  double v6;

  v2 = (double *)(a2 - 16);
  if ((unint64_t)(a2 - (_QWORD)a1) < 0x40 || v2 == a1)
    return 0;
  v4 = 0.0;
  v5 = (double *)(a2 - 16);
  do
  {
    v6 = *(v5 - 2);
    v5 -= 2;
    v4 = v4 + (*v2 + v6) * (v2[1] - *(v2 - 1));
    v2 = v5;
  }
  while (v5 != a1);
  return v4 * 0.5 > 0.0;
}

BOOL sub_18D2E8BC0(double *a1, double *a2)
{
  double *v2;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v46;

  v2 = a2;
  if (a2 == a1)
  {
    v5 = a2;
  }
  else
  {
    v4 = a2 - 2;
    v5 = a1;
    if (a2 - 2 != a1)
    {
      v6 = *(a2 - 2);
      v7 = fabs(v6);
      v5 = a2 - 2;
      while (1)
      {
        v8 = *(v4 - 2);
        v4 -= 2;
        v9 = v8;
        if (v8 != v6)
        {
          if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)(a2 - 2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            break;
          }
          v11 = vabdd_f64(v9, v6);
          v12 = fabs(v9);
          if (v12 < v7)
            v12 = v7;
          v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
          if (v11 > v13)
            break;
        }
        v14 = *(v5 - 1);
        v15 = *(a2 - 1);
        if (v14 != v15)
        {
          if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            break;
          }
          v17 = vabdd_f64(v14, v15);
          v18 = fabs(v14);
          v19 = fabs(v15);
          if (v18 < v19)
            v18 = v19;
          v20 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
          if (v17 > v20)
            break;
        }
        v5 = v4;
        if (v4 == a1)
        {
          v5 = a1;
          break;
        }
      }
    }
    v21 = a1 + 2;
    if (a1 + 2 != a2)
    {
      v22 = *a1;
      v23 = fabs(*a1);
      while (1)
      {
        v24 = *v21;
        if (*v21 != v22)
        {
          if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            break;
          }
          v26 = vabdd_f64(v24, v22);
          v27 = fabs(v24);
          if (v27 < v23)
            v27 = v23;
          v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
          if (v26 > v28)
            break;
        }
        v29 = v21[1];
        v30 = a1[1];
        if (v29 != v30)
        {
          if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            break;
          }
          v32 = vabdd_f64(v29, v30);
          v33 = fabs(v29);
          v34 = fabs(v30);
          if (v33 < v34)
            v33 = v34;
          v35 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
          if (v32 > v35)
            break;
        }
        v21 += 2;
        if (v21 == a2)
          goto LABEL_58;
      }
      v2 = v21;
    }
  }
LABEL_58:
  v46 = 1.0;
  v36 = sub_18D2658DC(v2, a1, v5 - 2, &v46);
  if (v36 != 0.0
    && ((*(_QWORD *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || fabs(v36) > v46 * 2.22044605e-16))
  {
    return 0;
  }
  v37 = a1[1];
  v38 = v2[1] - v37;
  v39 = *a1 - *v2;
  v40 = -v38;
  if (v39 == 0.0)
    goto LABEL_64;
  if (COERCE_UNSIGNED_INT64(fabs(*a1 - *v2)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v43 = fabs(v39);
    v44 = 2.22044605e-16;
    if (v43 >= 1.0)
      v44 = v43 * 2.22044605e-16;
    if (v43 <= v44)
    {
LABEL_64:
      if (v38 == 0.0)
        return 1;
      if (COERCE_UNSIGNED_INT64(fabs(v2[1] - v37)) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v41 = fabs(v40);
        v42 = 2.22044605e-16;
        if (v41 >= 1.0)
          v42 = v41 * 2.22044605e-16;
        if (v41 <= v42)
          return 1;
      }
    }
  }
  return v37 * v38 - v39 * *a1 + *(v5 - 1) * v40 + v39 * *(v5 - 2) <= 0.0;
}

uint64_t sub_18D2E8EE8(uint64_t result)
{
  std::bad_cast *exception;
  std::bad_cast *v2;
  std::bad_cast *v3;
  std::bad_cast *v4;

  if ((_DWORD)result == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v2 = sub_18D2E8F74(exception);
    __cxa_throw(v2, (struct type_info *)&unk_1E25B3938, (void (*)(void *))std::exception::~exception);
  }
  if ((_DWORD)result == 1)
  {
    v3 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v3->__vftable = 0;
    v4 = sub_18D2E8F50(v3);
    __cxa_throw(v4, (struct type_info *)&unk_1E25B3920, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

std::bad_cast *sub_18D2E8F50(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&off_1E25C2060;
  return result;
}

std::bad_cast *sub_18D2E8F74(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&off_1E25C2088;
  return result;
}

void sub_18D2E8F98(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x18D78B5D4);
}

const char *sub_18D2E8FBC()
{
  return "bad numeric conversion: negative overflow";
}

void sub_18D2E8FC8(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x18D78B5D4);
}

const char *sub_18D2E8FEC()
{
  return "bad numeric conversion: positive overflow";
}

void *sub_18D2E8FF8(unint64_t a1)
{
  if (a1 >= 0x222222222222223)
    sub_18D0788A0();
  return operator new(120 * a1);
}

uint64_t sub_18D2E903C(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  __int128 v45[2];
  char *v46;
  char *v47;
  uint64_t v48;
  void *__p;
  char *v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  __int128 v55[2];
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v6 = *a1;
  v7 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v8 = *a1;
  else
    v8 = v6 + 1;
  if (v7 >= 0)
    v9 = a1[2];
  else
    v9 = v7 + 1;
  v10 = v9 >> 1;
  v11 = *((_OWORD *)a1 + 1);
  v12 = v7 - 2 * v10 + v6 - 2 * (v8 >> 1);
  v56 = *(_OWORD *)a1;
  v58 = *((_QWORD *)&v11 + 1);
  *((_QWORD *)&v55[0] + 1) = *((_QWORD *)&v56 + 1);
  v55[1] = v11;
  v57 = v10 + (v8 >> 1) + ((v12 + ((v12 & 0x80) >> 7)) << 24 >> 25);
  *(_QWORD *)&v55[0] = v57;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  __p = 0;
  v50 = 0;
  v51 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  sub_18D2E9558(&v56, v55, a2, &v52, &__p, (void **)&v46);
  v13 = v46;
  v14 = v47;
  if (v46 != v47)
  {
    v45[0] = (__int128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v45[1] = (__int128)vdupq_n_s64(0x8000000000000000);
    v15 = v46;
    do
    {
      v16 = *(_QWORD *)v15;
      v15 += 8;
      sub_18D2E94C4((uint64_t *)v45, (uint64_t *)(v16 + 32));
    }
    while (v15 != v14);
    v17 = v13;
    if (a3 > 0x63 || (v17 = v13, (unint64_t)(v14 - v13) < 0x79))
    {
LABEL_31:
      v24 = v17 + 8;
      if (v17 + 8 != v14)
      {
        v18 = v17 + 8;
        while (1)
        {
          v19 = *(_QWORD *)v17;
          v20 = *v18;
          if (*(_QWORD *)(*(_QWORD *)v17 + 48) >= *(_QWORD *)(*v18 + 32)
            && *(_QWORD *)(v19 + 32) <= *(_QWORD *)(v20 + 48))
          {
            v21 = *(_QWORD *)(v19 + 56) >= *(_QWORD *)(v20 + 40) && *(_QWORD *)(v19 + 40) <= *(_QWORD *)(v20 + 56);
            v22 = v21 && *(_BYTE *)(v19 + 96) == 0;
            v23 = v22 && *(_BYTE *)(v20 + 96) == 0;
            if (v23
              && !sub_18D2EB278(*(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v19, *(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v20, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(uint64_t **)(a4 + 16), *(uint64_t **)(a4 + 24), *(BOOL **)(a4 + 32)))
            {
              goto LABEL_37;
            }
          }
          if (++v18 == (_QWORD *)v14)
          {
            v17 += 8;
            if (v24 == v14)
              break;
            goto LABEL_31;
          }
        }
      }
    }
    else if (!sub_18D2E99A8(v45, (uint64_t *)&v46, a3 + 1, a4))
    {
      goto LABEL_37;
    }
    if (!sub_18D2E984C(v45, (uint64_t *)&v46, (uint64_t *)&v52, a3, a4)
      || (sub_18D2E984C(v45, (uint64_t *)&v46, (uint64_t *)&__p, a3, a4) & 1) == 0)
    {
      goto LABEL_37;
    }
  }
  v26 = (char *)v52;
  v25 = v53;
  if (a3 > 0x63 || (unint64_t)(v53 - (_BYTE *)v52) < 0x79)
  {
    if (v52 != v53)
    {
LABEL_46:
      v29 = v26 + 8;
      if (v26 + 8 != v25)
      {
        v30 = v26 + 8;
        while (1)
        {
          v31 = *(_QWORD *)v26;
          v32 = *(_QWORD *)v30;
          if (*(_QWORD *)(*(_QWORD *)v26 + 48) >= *(_QWORD *)(*(_QWORD *)v30 + 32)
            && *(_QWORD *)(v31 + 32) <= *(_QWORD *)(v32 + 48))
          {
            v33 = *(_QWORD *)(v31 + 56) >= *(_QWORD *)(v32 + 40) && *(_QWORD *)(v31 + 40) <= *(_QWORD *)(v32 + 56);
            v34 = v33 && *(_BYTE *)(v31 + 96) == 0;
            v35 = v34 && *(_BYTE *)(v32 + 96) == 0;
            if (v35
              && !sub_18D2EB278(*(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v31, *(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v32, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(uint64_t **)(a4 + 16), *(uint64_t **)(a4 + 24), *(BOOL **)(a4 + 32)))
            {
              goto LABEL_37;
            }
          }
          v30 += 8;
          if (v30 == v25)
          {
            v26 += 8;
            if (v29 != v25)
              goto LABEL_46;
            break;
          }
        }
      }
    }
  }
  else if (!sub_18D2E99A8(&v56, (uint64_t *)&v52, a3 + 1, a4))
  {
LABEL_37:
    v27 = 0;
    goto LABEL_38;
  }
  v37 = (char *)__p;
  v36 = v50;
  if (a3 > 0x63 || (unint64_t)(v50 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v50)
    {
LABEL_68:
      v38 = v37 + 8;
      if (v37 + 8 != v36)
      {
        v39 = v37 + 8;
        while (1)
        {
          v40 = *(_QWORD *)v37;
          v41 = *(_QWORD *)v39;
          if (*(_QWORD *)(*(_QWORD *)v37 + 48) >= *(_QWORD *)(*(_QWORD *)v39 + 32)
            && *(_QWORD *)(v40 + 32) <= *(_QWORD *)(v41 + 48))
          {
            v42 = *(_QWORD *)(v40 + 56) >= *(_QWORD *)(v41 + 40) && *(_QWORD *)(v40 + 40) <= *(_QWORD *)(v41 + 56);
            v43 = v42 && *(_BYTE *)(v40 + 96) == 0;
            v44 = v43 && *(_BYTE *)(v41 + 96) == 0;
            if (v44
              && !sub_18D2EB278(*(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v40, *(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v41, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(uint64_t **)(a4 + 16), *(uint64_t **)(a4 + 24), *(BOOL **)(a4 + 32)))
            {
              goto LABEL_37;
            }
          }
          v39 += 8;
          if (v39 == v36)
          {
            v27 = 1;
            v37 += 8;
            if (v38 != v36)
              goto LABEL_68;
            goto LABEL_38;
          }
        }
      }
    }
    v27 = 1;
  }
  else
  {
    v27 = sub_18D2E99A8(v55, (uint64_t *)&__p, a3 + 1, a4);
  }
LABEL_38:
  if (v13)
    operator delete(v13);
  if (__p)
    operator delete(__p);
  if (v52)
    operator delete(v52);
  return v27;
}

void sub_18D2E947C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;

  if (v26)
    operator delete(v26);
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18D2E94C4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a2;
  v3 = *result;
  if (*a2 < *result)
  {
    *result = v2;
    v3 = v2;
  }
  v4 = result[2];
  if (v2 > v4)
  {
    result[2] = v2;
    v4 = v2;
  }
  v5 = a2[1];
  v6 = result[1];
  if (v5 < v6)
  {
    result[1] = v5;
    v6 = v5;
  }
  v7 = result[3];
  if (v5 > v7)
  {
    result[3] = v5;
    v7 = v5;
  }
  v8 = a2[2];
  if (v8 < v3)
    *result = v8;
  if (v8 > v4)
    result[2] = v8;
  v9 = a2[3];
  if (v9 < v6)
    result[1] = v9;
  if (v9 > v7)
    result[3] = v9;
  return result;
}

void sub_18D2E9558(_QWORD *a1, _QWORD *a2, uint64_t *a3, void **a4, void **a5, void **a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t v14;
  _BOOL4 v15;
  BOOL v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  uint64_t v54;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    while (1)
    {
      v13 = *(_QWORD **)v6;
      v14 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if (a1[2] >= v14 && *a1 <= v13[6])
      {
        v16 = a1[3] >= v13[5] && a1[1] <= v13[7];
        v15 = v16;
      }
      else
      {
        v15 = 0;
      }
      if (a2[2] >= v14 && *a2 <= v13[6])
        break;
      if (v15)
        goto LABEL_14;
LABEL_75:
      v6 += 8;
      if (v6 == a3[1])
        return;
    }
    v21 = a2[3] < v13[5] || a2[1] > v13[7];
    if (v15 && !v21)
    {
      v23 = a6[1];
      v22 = (unint64_t)a6[2];
      if ((unint64_t)v23 >= v22)
      {
        v37 = ((char *)v23 - (_BYTE *)*a6) >> 3;
        if ((unint64_t)(v37 + 1) >> 61)
          goto LABEL_77;
        v38 = v22 - (_QWORD)*a6;
        v39 = v38 >> 2;
        if (v38 >> 2 <= (unint64_t)(v37 + 1))
          v39 = v37 + 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        if (v40)
        {
          v40 = (unint64_t)sub_18D07BF3C(v40);
          v13 = *(_QWORD **)v6;
        }
        else
        {
          v41 = 0;
        }
        v42 = (_QWORD *)(v40 + 8 * v37);
        *v42 = v13;
        v24 = v42 + 1;
        v44 = (char *)*a6;
        v43 = (char *)a6[1];
        if (v43 != *a6)
        {
          do
          {
            v45 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *--v42 = v45;
          }
          while (v43 != v44);
          v43 = (char *)*a6;
        }
        *a6 = v42;
        a6[1] = v24;
        a6[2] = (void *)(v40 + 8 * v41);
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v23 = v13;
        v24 = v23 + 1;
      }
      a6[1] = v24;
      goto LABEL_75;
    }
    if (!v15)
    {
      if (!v21)
      {
        v31 = a5[1];
        v30 = (unint64_t)a5[2];
        if ((unint64_t)v31 >= v30)
        {
          v46 = ((char *)v31 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v46 + 1) >> 61)
LABEL_77:
            sub_18D07AFE4();
          v47 = v30 - (_QWORD)*a5;
          v48 = v47 >> 2;
          if (v47 >> 2 <= (unint64_t)(v46 + 1))
            v48 = v46 + 1;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v48;
          if (v49)
          {
            v49 = (unint64_t)sub_18D07BF3C(v49);
            v13 = *(_QWORD **)v6;
          }
          else
          {
            v50 = 0;
          }
          v51 = (_QWORD *)(v49 + 8 * v46);
          *v51 = v13;
          v32 = v51 + 1;
          v53 = (char *)*a5;
          v52 = (char *)a5[1];
          if (v52 != *a5)
          {
            do
            {
              v54 = *((_QWORD *)v52 - 1);
              v52 -= 8;
              *--v51 = v54;
            }
            while (v52 != v53);
            v52 = (char *)*a5;
          }
          *a5 = v51;
          a5[1] = v32;
          a5[2] = (void *)(v49 + 8 * v50);
          if (v52)
            operator delete(v52);
        }
        else
        {
          *v31 = v13;
          v32 = v31 + 1;
        }
        a5[1] = v32;
      }
      goto LABEL_75;
    }
LABEL_14:
    v18 = a4[1];
    v17 = (unint64_t)a4[2];
    if ((unint64_t)v18 >= v17)
    {
      v25 = ((char *)v18 - (_BYTE *)*a4) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        goto LABEL_77;
      v26 = v17 - (_QWORD)*a4;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
      {
        v28 = (unint64_t)sub_18D07BF3C(v28);
        v13 = *(_QWORD **)v6;
      }
      else
      {
        v29 = 0;
      }
      v33 = (_QWORD *)(v28 + 8 * v25);
      *v33 = v13;
      v19 = v33 + 1;
      v35 = (char *)*a4;
      v34 = (char *)a4[1];
      if (v34 != *a4)
      {
        do
        {
          v36 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v33 = v36;
        }
        while (v34 != v35);
        v34 = (char *)*a4;
      }
      *a4 = v33;
      a4[1] = v19;
      a4[2] = (void *)(v28 + 8 * v29);
      if (v34)
        operator delete(v34);
    }
    else
    {
      *v18 = v13;
      v19 = v18 + 1;
    }
    a4[1] = v19;
    goto LABEL_75;
  }
}

uint64_t sub_18D2E984C(__int128 *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  v9 = *a2;
  v8 = a2[1];
  if ((unint64_t)(v8 - *a2) >= 0x80 && a4 <= 0x63 && (unint64_t)(a3[1] - *a3) >= 0x79)
    return sub_18D2EA900(a1, a2, a3, a4 + 1, a5);
  if (v9 != v8)
  {
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = *a3;
        if (*a3 != v11)
        {
          do
          {
            v13 = *(_QWORD *)v9;
            v14 = *(_QWORD *)v12;
            if (*(_QWORD *)(*(_QWORD *)v9 + 48) >= *(_QWORD *)(*(_QWORD *)v12 + 32)
              && *(_QWORD *)(v13 + 32) <= *(_QWORD *)(v14 + 48))
            {
              v15 = *(_QWORD *)(v13 + 56) >= *(_QWORD *)(v14 + 40) && *(_QWORD *)(v13 + 40) <= *(_QWORD *)(v14 + 56);
              v16 = v15 && *(_BYTE *)(v13 + 96) == 0;
              if (v16 && *(_BYTE *)(v14 + 96) == 0)
              {
                result = sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v13, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v14, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32));
                if (!(_DWORD)result)
                  return result;
                v11 = a3[1];
              }
            }
            v12 += 8;
          }
          while (v12 != v11);
          v8 = a2[1];
        }
        v9 += 8;
      }
      while (v9 != v8);
    }
  }
  return 1;
}

uint64_t sub_18D2E99A8(__int128 *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  _OWORD v45[2];
  char *v46;
  char *v47;
  uint64_t v48;
  void *__p;
  char *v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  _QWORD v55[2];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v7 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 1);
  if (v8 >= 0)
    v9 = *((_QWORD *)a1 + 1);
  else
    v9 = v8 + 1;
  v10 = v8 - 2 * (v9 >> 1);
  if (v6 >= 0)
    v11 = *((_QWORD *)a1 + 3);
  else
    v11 = v6 + 1;
  v12 = *a1;
  v56 = a1[1];
  v57 = v12;
  v55[0] = v12;
  v58 = v7;
  v59 = (v11 >> 1)
      + (v9 >> 1)
      + ((int)(((_DWORD)v6
              - 2 * (v11 >> 1)
              + v10
              + (((v6 - 2 * (v11 >> 1) + v10) & 0x80) >> 7)) << 24) >> 25);
  v55[1] = v59;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  __p = 0;
  v50 = 0;
  v51 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  sub_18D2E9558(&v57, v55, a2, &v52, &__p, (void **)&v46);
  v13 = v46;
  v14 = v47;
  if (v46 != v47)
  {
    v45[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v45[1] = vdupq_n_s64(0x8000000000000000);
    v15 = v46;
    do
    {
      v16 = *(_QWORD *)v15;
      v15 += 8;
      sub_18D2E94C4((uint64_t *)v45, (uint64_t *)(v16 + 32));
    }
    while (v15 != v14);
    v17 = v13;
    if (a3 > 0x63 || (v17 = v13, (unint64_t)(v14 - v13) < 0x79))
    {
LABEL_31:
      v24 = v17 + 8;
      if (v17 + 8 != v14)
      {
        v18 = v17 + 8;
        while (1)
        {
          v19 = *(_QWORD *)v17;
          v20 = *v18;
          if (*(_QWORD *)(*(_QWORD *)v17 + 48) >= *(_QWORD *)(*v18 + 32)
            && *(_QWORD *)(v19 + 32) <= *(_QWORD *)(v20 + 48))
          {
            v21 = *(_QWORD *)(v19 + 56) >= *(_QWORD *)(v20 + 40) && *(_QWORD *)(v19 + 40) <= *(_QWORD *)(v20 + 56);
            v22 = v21 && *(_BYTE *)(v19 + 96) == 0;
            v23 = v22 && *(_BYTE *)(v20 + 96) == 0;
            if (v23
              && !sub_18D2EB278(*(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v19, *(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v20, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(uint64_t **)(a4 + 16), *(uint64_t **)(a4 + 24), *(BOOL **)(a4 + 32)))
            {
              goto LABEL_37;
            }
          }
          if (++v18 == (_QWORD *)v14)
          {
            v17 += 8;
            if (v24 == v14)
              break;
            goto LABEL_31;
          }
        }
      }
    }
    else if (!sub_18D2E903C(v45, &v46, a3 + 1, a4))
    {
      goto LABEL_37;
    }
    if (!sub_18D2E9E30((uint64_t *)v45, (uint64_t *)&v46, (uint64_t *)&v52, a3, a4)
      || (sub_18D2E9E30((uint64_t *)v45, (uint64_t *)&v46, (uint64_t *)&__p, a3, a4) & 1) == 0)
    {
      goto LABEL_37;
    }
  }
  v26 = (char *)v52;
  v25 = v53;
  if (a3 > 0x63 || (unint64_t)(v53 - (_BYTE *)v52) < 0x79)
  {
    if (v52 != v53)
    {
LABEL_46:
      v29 = v26 + 8;
      if (v26 + 8 != v25)
      {
        v30 = v26 + 8;
        while (1)
        {
          v31 = *(_QWORD *)v26;
          v32 = *(_QWORD *)v30;
          if (*(_QWORD *)(*(_QWORD *)v26 + 48) >= *(_QWORD *)(*(_QWORD *)v30 + 32)
            && *(_QWORD *)(v31 + 32) <= *(_QWORD *)(v32 + 48))
          {
            v33 = *(_QWORD *)(v31 + 56) >= *(_QWORD *)(v32 + 40) && *(_QWORD *)(v31 + 40) <= *(_QWORD *)(v32 + 56);
            v34 = v33 && *(_BYTE *)(v31 + 96) == 0;
            v35 = v34 && *(_BYTE *)(v32 + 96) == 0;
            if (v35
              && !sub_18D2EB278(*(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v31, *(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v32, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(uint64_t **)(a4 + 16), *(uint64_t **)(a4 + 24), *(BOOL **)(a4 + 32)))
            {
              goto LABEL_37;
            }
          }
          v30 += 8;
          if (v30 == v25)
          {
            v26 += 8;
            if (v29 != v25)
              goto LABEL_46;
            break;
          }
        }
      }
    }
  }
  else if (!sub_18D2E903C(&v57, &v52, a3 + 1, a4))
  {
LABEL_37:
    v27 = 0;
    goto LABEL_38;
  }
  v37 = (char *)__p;
  v36 = v50;
  if (a3 > 0x63 || (unint64_t)(v50 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v50)
    {
LABEL_68:
      v38 = v37 + 8;
      if (v37 + 8 != v36)
      {
        v39 = v37 + 8;
        while (1)
        {
          v40 = *(_QWORD *)v37;
          v41 = *(_QWORD *)v39;
          if (*(_QWORD *)(*(_QWORD *)v37 + 48) >= *(_QWORD *)(*(_QWORD *)v39 + 32)
            && *(_QWORD *)(v40 + 32) <= *(_QWORD *)(v41 + 48))
          {
            v42 = *(_QWORD *)(v40 + 56) >= *(_QWORD *)(v41 + 40) && *(_QWORD *)(v40 + 40) <= *(_QWORD *)(v41 + 56);
            v43 = v42 && *(_BYTE *)(v40 + 96) == 0;
            v44 = v43 && *(_BYTE *)(v41 + 96) == 0;
            if (v44
              && !sub_18D2EB278(*(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v40, *(_DWORD *)(a4 + 40), **(double ***)a4, *(double **)(*(_QWORD *)a4 + 8), (int *)v41, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(uint64_t **)(a4 + 16), *(uint64_t **)(a4 + 24), *(BOOL **)(a4 + 32)))
            {
              goto LABEL_37;
            }
          }
          v39 += 8;
          if (v39 == v36)
          {
            v27 = 1;
            v37 += 8;
            if (v38 != v36)
              goto LABEL_68;
            goto LABEL_38;
          }
        }
      }
    }
    v27 = 1;
  }
  else
  {
    v27 = sub_18D2E903C(v55, &__p, a3 + 1, a4);
  }
LABEL_38:
  if (v13)
    operator delete(v13);
  if (__p)
    operator delete(__p);
  if (v52)
    operator delete(v52);
  return v27;
}

void sub_18D2E9DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;

  if (v26)
    operator delete(v26);
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2E9E30(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  v9 = *a2;
  v8 = a2[1];
  if ((unint64_t)(v8 - *a2) >= 0x80 && a4 <= 0x63 && (unint64_t)(a3[1] - *a3) >= 0x79)
    return sub_18D2E9F8C(a1, a2, a3, a4 + 1, a5);
  if (v9 != v8)
  {
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = *a3;
        if (*a3 != v11)
        {
          do
          {
            v13 = *(_QWORD *)v9;
            v14 = *(_QWORD *)v12;
            if (*(_QWORD *)(*(_QWORD *)v9 + 48) >= *(_QWORD *)(*(_QWORD *)v12 + 32)
              && *(_QWORD *)(v13 + 32) <= *(_QWORD *)(v14 + 48))
            {
              v15 = *(_QWORD *)(v13 + 56) >= *(_QWORD *)(v14 + 40) && *(_QWORD *)(v13 + 40) <= *(_QWORD *)(v14 + 56);
              v16 = v15 && *(_BYTE *)(v13 + 96) == 0;
              if (v16 && *(_BYTE *)(v14 + 96) == 0)
              {
                result = sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v13, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v14, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32));
                if (!(_DWORD)result)
                  return result;
                v11 = a3[1];
              }
            }
            v12 += 8;
          }
          while (v12 != v11);
          v8 = a2[1];
        }
        v9 += 8;
      }
      while (v9 != v8);
    }
  }
  return 1;
}

uint64_t sub_18D2E9F8C(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v92;
  int64x2_t v93;
  int64x2_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void *__p;
  char *v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  void *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  _QWORD v113[2];
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;

  v8 = *a1;
  v9 = a1[2];
  if (*a1 >= 0)
    v10 = *a1;
  else
    v10 = v8 + 1;
  v12 = *(_OWORD *)a1;
  v11 = *((_OWORD *)a1 + 1);
  if (v9 >= 0)
    v13 = a1[2];
  else
    v13 = v9 + 1;
  v14 = v13 >> 1;
  v115 = *(_OWORD *)a1;
  v117 = *((_QWORD *)&v11 + 1);
  v113[1] = *((_QWORD *)&v12 + 1);
  v114 = v11;
  v15 = v9 - 2 * v14 + v8 - 2 * (v10 >> 1);
  v116 = v14 + (v10 >> 1) + ((v15 + ((v15 & 0x80) >> 7)) << 24 >> 25);
  v112 = 0;
  v113[0] = v116;
  v110 = 0;
  v111 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  __p = 0;
  v99 = 0;
  v100 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  sub_18D2E9558(&v115, v113, a2, (void **)&v110, &v107, (void **)&v104);
  sub_18D2E9558(&v115, v113, a3, &v101, &__p, (void **)&v95);
  v16 = v104;
  v17 = v105;
  v18 = v95;
  if (v104 == v105)
  {
    v92 = a4;
    v20 = v96;
  }
  else
  {
    v19 = v105 - v104;
    v20 = v96;
    if ((unint64_t)(v105 - v104) < 0x80 || a4 > 0x63 || (unint64_t)(v96 - v95) < 0x79)
    {
      if (v95 != v96)
      {
        v25 = v104;
LABEL_20:
        v26 = v18;
        while (1)
        {
          v27 = *(_QWORD *)v25;
          v28 = *(_QWORD *)v26;
          if (*(_QWORD *)(*(_QWORD *)v25 + 48) >= *(_QWORD *)(*(_QWORD *)v26 + 32)
            && *(_QWORD *)(v27 + 32) <= *(_QWORD *)(v28 + 48))
          {
            v29 = *(_QWORD *)(v27 + 56) >= *(_QWORD *)(v28 + 40) && *(_QWORD *)(v27 + 40) <= *(_QWORD *)(v28 + 56);
            v30 = v29 && *(_BYTE *)(v27 + 96) == 0;
            v31 = v30 && *(_BYTE *)(v28 + 96) == 0;
            if (v31
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v27, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v28, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v26 += 8;
          if (v26 == v20)
          {
            v25 += 8;
            if (v25 != v17)
              goto LABEL_20;
            break;
          }
        }
      }
    }
    else
    {
      v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v94 = vdupq_n_s64(0x8000000000000000);
      v21 = (uint64_t *)v104;
      do
      {
        v22 = *v21++;
        sub_18D2E94C4(v93.i64, (uint64_t *)(v22 + 32));
      }
      while (v21 != (uint64_t *)v17);
      if (v18 != v20)
      {
        v23 = v18;
        do
        {
          v24 = *(_QWORD *)v23;
          v23 += 8;
          sub_18D2E94C4(v93.i64, (uint64_t *)(v24 + 32));
        }
        while (v23 != v20);
      }
      if ((sub_18D2EA900(&v93, &v104, &v95, a4 + 1, a5) & 1) == 0)
        goto LABEL_183;
    }
    v33 = (char *)v101;
    v32 = v102;
    v92 = a4;
    if ((unint64_t)(v102 - (_BYTE *)v101) < 0x80
      || (unint64_t)(v99 - (_BYTE *)__p) < 0x80
      || a4 > 0x63
      || v19 < 0x79)
    {
      if (v101 != v102)
      {
        v49 = v16;
LABEL_79:
        v50 = v33;
        while (1)
        {
          v51 = *v49;
          v52 = *(_QWORD *)v50;
          if (*(_QWORD *)(*v49 + 48) >= *(_QWORD *)(*(_QWORD *)v50 + 32)
            && *(_QWORD *)(v51 + 32) <= *(_QWORD *)(v52 + 48))
          {
            v53 = *(_QWORD *)(v51 + 56) >= *(_QWORD *)(v52 + 40) && *(_QWORD *)(v51 + 40) <= *(_QWORD *)(v52 + 56);
            v54 = v53 && *(_BYTE *)(v51 + 96) == 0;
            v55 = v54 && *(_BYTE *)(v52 + 96) == 0;
            if (v55
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v51, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v52, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v50 += 8;
          if (v50 == v32)
          {
            if (++v49 != (_QWORD *)v17)
              goto LABEL_79;
            break;
          }
        }
      }
      v56 = (char *)__p;
      v57 = v99;
      if (__p != v99)
      {
        v58 = v16;
LABEL_98:
        v59 = v56;
        while (1)
        {
          v60 = *v58;
          v61 = *(_QWORD *)v59;
          if (*(_QWORD *)(*v58 + 48) >= *(_QWORD *)(*(_QWORD *)v59 + 32)
            && *(_QWORD *)(v60 + 32) <= *(_QWORD *)(v61 + 48))
          {
            v62 = *(_QWORD *)(v60 + 56) >= *(_QWORD *)(v61 + 40) && *(_QWORD *)(v60 + 40) <= *(_QWORD *)(v61 + 56);
            v63 = v62 && *(_BYTE *)(v60 + 96) == 0;
            v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
            if (v64
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v60, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v61, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v59 += 8;
          if (v59 == v57)
          {
            if (++v58 != (_QWORD *)v17)
              goto LABEL_98;
            break;
          }
        }
      }
    }
    else
    {
      v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v94 = vdupq_n_s64(0x8000000000000000);
      v34 = v16;
      do
      {
        v35 = *v34++;
        sub_18D2E94C4(v93.i64, (uint64_t *)(v35 + 32));
      }
      while (v34 != (uint64_t *)v17);
      if (!sub_18D2EA900(&v93, &v104, &v101, a4 + 1, a5)
        || (sub_18D2EA900(&v93, &v104, &__p, a4 + 1, a5) & 1) == 0)
      {
        goto LABEL_183;
      }
    }
  }
  v37 = v110;
  v36 = v111;
  v38 = v111 - v110;
  if (v18 != v20)
  {
    if (v38 < 0x80
      || (unint64_t)(v108 - (_BYTE *)v107) < 0x80
      || v92 > 0x63
      || (unint64_t)(v20 - v18) < 0x79)
    {
      if (v110 != v111)
      {
        v65 = v110;
LABEL_118:
        v66 = v18;
        while (1)
        {
          v67 = *(_QWORD *)v65;
          v68 = *(_QWORD *)v66;
          if (*(_QWORD *)(*(_QWORD *)v65 + 48) >= *(_QWORD *)(*(_QWORD *)v66 + 32)
            && *(_QWORD *)(v67 + 32) <= *(_QWORD *)(v68 + 48))
          {
            v69 = *(_QWORD *)(v67 + 56) >= *(_QWORD *)(v68 + 40) && *(_QWORD *)(v67 + 40) <= *(_QWORD *)(v68 + 56);
            v70 = v69 && *(_BYTE *)(v67 + 96) == 0;
            v71 = v70 && *(_BYTE *)(v68 + 96) == 0;
            if (v71
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v67, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v68, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v66 += 8;
          if (v66 == v20)
          {
            v65 += 8;
            if (v65 != v36)
              goto LABEL_118;
            break;
          }
        }
      }
      v72 = (char *)v107;
      v73 = v108;
LABEL_136:
      if (v72 != v73)
      {
        v74 = v18;
        while (1)
        {
          v75 = *(_QWORD *)v72;
          v76 = *(_QWORD *)v74;
          if (*(_QWORD *)(*(_QWORD *)v72 + 48) >= *(_QWORD *)(*(_QWORD *)v74 + 32)
            && *(_QWORD *)(v75 + 32) <= *(_QWORD *)(v76 + 48))
          {
            v77 = *(_QWORD *)(v75 + 56) >= *(_QWORD *)(v76 + 40) && *(_QWORD *)(v75 + 40) <= *(_QWORD *)(v76 + 56);
            v78 = v77 && *(_BYTE *)(v75 + 96) == 0;
            v79 = v78 && *(_BYTE *)(v76 + 96) == 0;
            if (v79
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v75, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v76, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v74 += 8;
          if (v74 == v20)
          {
            v72 += 8;
            goto LABEL_136;
          }
        }
      }
    }
    else
    {
      v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v94 = vdupq_n_s64(0x8000000000000000);
      v39 = v18;
      do
      {
        v40 = *(_QWORD *)v39;
        v39 += 8;
        sub_18D2E94C4(v93.i64, (uint64_t *)(v40 + 32));
      }
      while (v39 != v20);
      if (!sub_18D2EA900(&v93, &v110, &v95, v92 + 1, a5)
        || (sub_18D2EA900(&v93, &v107, &v95, v92 + 1, a5) & 1) == 0)
      {
        goto LABEL_183;
      }
    }
  }
  if (v38 < 0x80 || v92 > 0x63 || (unint64_t)(v102 - (_BYTE *)v101) < 0x79)
  {
    if (v37 != v36)
    {
      v41 = (char *)v101;
      v42 = v102;
      if (v101 != v102)
      {
LABEL_59:
        v43 = v41;
        while (1)
        {
          v44 = *(_QWORD *)v37;
          v45 = *(_QWORD *)v43;
          if (*(_QWORD *)(*(_QWORD *)v37 + 48) >= *(_QWORD *)(*(_QWORD *)v43 + 32)
            && *(_QWORD *)(v44 + 32) <= *(_QWORD *)(v45 + 48))
          {
            v46 = *(_QWORD *)(v44 + 56) >= *(_QWORD *)(v45 + 40) && *(_QWORD *)(v44 + 40) <= *(_QWORD *)(v45 + 56);
            v47 = v46 && *(_BYTE *)(v44 + 96) == 0;
            v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
            if (v48
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v44, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v45, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v43 += 8;
          if (v43 == v42)
          {
            v37 += 8;
            if (v37 != v36)
              goto LABEL_59;
            break;
          }
        }
      }
    }
  }
  else if ((sub_18D2EA900(&v115, &v110, &v101, v92 + 1, a5) & 1) == 0)
  {
    goto LABEL_183;
  }
  v81 = (char *)v107;
  v80 = v108;
  if ((unint64_t)(v108 - (_BYTE *)v107) < 0x80 || v92 > 0x63 || (unint64_t)(v99 - (_BYTE *)__p) < 0x79)
  {
    if (v107 == v108)
      goto LABEL_181;
    v82 = (char *)__p;
    v83 = v99;
    if (__p == v99)
      goto LABEL_181;
LABEL_160:
    v84 = v82;
    while (1)
    {
      v85 = *(_QWORD *)v81;
      v86 = *(_QWORD *)v84;
      if (*(_QWORD *)(*(_QWORD *)v81 + 48) >= *(_QWORD *)(*(_QWORD *)v84 + 32)
        && *(_QWORD *)(v85 + 32) <= *(_QWORD *)(v86 + 48))
      {
        v87 = *(_QWORD *)(v85 + 56) >= *(_QWORD *)(v86 + 40) && *(_QWORD *)(v85 + 40) <= *(_QWORD *)(v86 + 56);
        v88 = v87 && *(_BYTE *)(v85 + 96) == 0;
        v89 = v88 && *(_BYTE *)(v86 + 96) == 0;
        if (v89
          && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v85, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v86, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
        {
          break;
        }
      }
      v84 += 8;
      if (v84 == v83)
      {
        v81 += 8;
        if (v81 != v80)
          goto LABEL_160;
        goto LABEL_181;
      }
    }
LABEL_183:
    v90 = 0;
    if (!v18)
      goto LABEL_185;
    goto LABEL_184;
  }
  if ((sub_18D2EA900(v113, &v107, &__p, v92 + 1, a5) & 1) == 0)
    goto LABEL_183;
LABEL_181:
  v90 = 1;
  if (v18)
LABEL_184:
    operator delete(v18);
LABEL_185:
  if (__p)
    operator delete(__p);
  if (v101)
    operator delete(v101);
  if (v16)
    operator delete(v16);
  if (v107)
    operator delete(v107);
  if (v110)
    operator delete(v110);
  return v90;
}

void sub_18D2EA87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  uint64_t v32;
  void *v34;

  if (v31)
    operator delete(v31);
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  v34 = *(void **)(v32 - 184);
  if (v34)
    operator delete(v34);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2EA900(__int128 *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v92;
  int64x2_t v93;
  int64x2_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void *__p;
  char *v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  void *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113[2];
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;

  v9 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v10 = *((_QWORD *)a1 + 1);
  if (v10 >= 0)
    v11 = *((_QWORD *)a1 + 1);
  else
    v11 = v10 + 1;
  v12 = *a1;
  if (v8 >= 0)
    v13 = *((_QWORD *)a1 + 3);
  else
    v13 = v8 + 1;
  v14 = v13 >> 1;
  v114 = a1[1];
  v115 = v12;
  v113[0] = v12;
  v15 = v8 - 2 * v14 + v10 - 2 * (v11 >> 1);
  v116 = v9;
  v117 = v14 + (v11 >> 1) + ((v15 + ((v15 & 0x80) >> 7)) << 24 >> 25);
  v113[1] = v117;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  __p = 0;
  v99 = 0;
  v100 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  sub_18D2E9558(&v115, v113, a2, (void **)&v110, &v107, (void **)&v104);
  sub_18D2E9558(&v115, v113, a3, &v101, &__p, (void **)&v95);
  v16 = v104;
  v17 = v105;
  v18 = v95;
  if (v104 == v105)
  {
    v92 = a4;
    v20 = v96;
  }
  else
  {
    v19 = v105 - v104;
    v20 = v96;
    if ((unint64_t)(v105 - v104) < 0x80 || a4 > 0x63 || (unint64_t)(v96 - v95) < 0x79)
    {
      if (v95 != v96)
      {
        v25 = v104;
LABEL_20:
        v26 = v18;
        while (1)
        {
          v27 = *(_QWORD *)v25;
          v28 = *(_QWORD *)v26;
          if (*(_QWORD *)(*(_QWORD *)v25 + 48) >= *(_QWORD *)(*(_QWORD *)v26 + 32)
            && *(_QWORD *)(v27 + 32) <= *(_QWORD *)(v28 + 48))
          {
            v29 = *(_QWORD *)(v27 + 56) >= *(_QWORD *)(v28 + 40) && *(_QWORD *)(v27 + 40) <= *(_QWORD *)(v28 + 56);
            v30 = v29 && *(_BYTE *)(v27 + 96) == 0;
            v31 = v30 && *(_BYTE *)(v28 + 96) == 0;
            if (v31
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v27, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v28, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v26 += 8;
          if (v26 == v20)
          {
            v25 += 8;
            if (v25 != v17)
              goto LABEL_20;
            break;
          }
        }
      }
    }
    else
    {
      v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v94 = vdupq_n_s64(0x8000000000000000);
      v21 = (uint64_t *)v104;
      do
      {
        v22 = *v21++;
        sub_18D2E94C4(v93.i64, (uint64_t *)(v22 + 32));
      }
      while (v21 != (uint64_t *)v17);
      if (v18 != v20)
      {
        v23 = v18;
        do
        {
          v24 = *(_QWORD *)v23;
          v23 += 8;
          sub_18D2E94C4(v93.i64, (uint64_t *)(v24 + 32));
        }
        while (v23 != v20);
      }
      if ((sub_18D2E9F8C(v93.i64, (uint64_t *)&v104, (uint64_t *)&v95, a4 + 1, a5) & 1) == 0)
        goto LABEL_183;
    }
    v33 = (char *)v101;
    v32 = v102;
    v92 = a4;
    if ((unint64_t)(v102 - (_BYTE *)v101) < 0x80
      || (unint64_t)(v99 - (_BYTE *)__p) < 0x80
      || a4 > 0x63
      || v19 < 0x79)
    {
      if (v101 != v102)
      {
        v49 = v16;
LABEL_79:
        v50 = v33;
        while (1)
        {
          v51 = *v49;
          v52 = *(_QWORD *)v50;
          if (*(_QWORD *)(*v49 + 48) >= *(_QWORD *)(*(_QWORD *)v50 + 32)
            && *(_QWORD *)(v51 + 32) <= *(_QWORD *)(v52 + 48))
          {
            v53 = *(_QWORD *)(v51 + 56) >= *(_QWORD *)(v52 + 40) && *(_QWORD *)(v51 + 40) <= *(_QWORD *)(v52 + 56);
            v54 = v53 && *(_BYTE *)(v51 + 96) == 0;
            v55 = v54 && *(_BYTE *)(v52 + 96) == 0;
            if (v55
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v51, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v52, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v50 += 8;
          if (v50 == v32)
          {
            if (++v49 != (_QWORD *)v17)
              goto LABEL_79;
            break;
          }
        }
      }
      v56 = (char *)__p;
      v57 = v99;
      if (__p != v99)
      {
        v58 = v16;
LABEL_98:
        v59 = v56;
        while (1)
        {
          v60 = *v58;
          v61 = *(_QWORD *)v59;
          if (*(_QWORD *)(*v58 + 48) >= *(_QWORD *)(*(_QWORD *)v59 + 32)
            && *(_QWORD *)(v60 + 32) <= *(_QWORD *)(v61 + 48))
          {
            v62 = *(_QWORD *)(v60 + 56) >= *(_QWORD *)(v61 + 40) && *(_QWORD *)(v60 + 40) <= *(_QWORD *)(v61 + 56);
            v63 = v62 && *(_BYTE *)(v60 + 96) == 0;
            v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
            if (v64
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v60, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v61, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v59 += 8;
          if (v59 == v57)
          {
            if (++v58 != (_QWORD *)v17)
              goto LABEL_98;
            break;
          }
        }
      }
    }
    else
    {
      v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v94 = vdupq_n_s64(0x8000000000000000);
      v34 = v16;
      do
      {
        v35 = *v34++;
        sub_18D2E94C4(v93.i64, (uint64_t *)(v35 + 32));
      }
      while (v34 != (uint64_t *)v17);
      if (!sub_18D2E9F8C(v93.i64, (uint64_t *)&v104, (uint64_t *)&v101, a4 + 1, a5)
        || (sub_18D2E9F8C(v93.i64, (uint64_t *)&v104, (uint64_t *)&__p, a4 + 1, a5) & 1) == 0)
      {
        goto LABEL_183;
      }
    }
  }
  v37 = v110;
  v36 = v111;
  v38 = v111 - v110;
  if (v18 != v20)
  {
    if (v38 < 0x80
      || (unint64_t)(v108 - (_BYTE *)v107) < 0x80
      || v92 > 0x63
      || (unint64_t)(v20 - v18) < 0x79)
    {
      if (v110 != v111)
      {
        v65 = v110;
LABEL_118:
        v66 = v18;
        while (1)
        {
          v67 = *(_QWORD *)v65;
          v68 = *(_QWORD *)v66;
          if (*(_QWORD *)(*(_QWORD *)v65 + 48) >= *(_QWORD *)(*(_QWORD *)v66 + 32)
            && *(_QWORD *)(v67 + 32) <= *(_QWORD *)(v68 + 48))
          {
            v69 = *(_QWORD *)(v67 + 56) >= *(_QWORD *)(v68 + 40) && *(_QWORD *)(v67 + 40) <= *(_QWORD *)(v68 + 56);
            v70 = v69 && *(_BYTE *)(v67 + 96) == 0;
            v71 = v70 && *(_BYTE *)(v68 + 96) == 0;
            if (v71
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v67, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v68, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v66 += 8;
          if (v66 == v20)
          {
            v65 += 8;
            if (v65 != v36)
              goto LABEL_118;
            break;
          }
        }
      }
      v72 = (char *)v107;
      v73 = v108;
LABEL_136:
      if (v72 != v73)
      {
        v74 = v18;
        while (1)
        {
          v75 = *(_QWORD *)v72;
          v76 = *(_QWORD *)v74;
          if (*(_QWORD *)(*(_QWORD *)v72 + 48) >= *(_QWORD *)(*(_QWORD *)v74 + 32)
            && *(_QWORD *)(v75 + 32) <= *(_QWORD *)(v76 + 48))
          {
            v77 = *(_QWORD *)(v75 + 56) >= *(_QWORD *)(v76 + 40) && *(_QWORD *)(v75 + 40) <= *(_QWORD *)(v76 + 56);
            v78 = v77 && *(_BYTE *)(v75 + 96) == 0;
            v79 = v78 && *(_BYTE *)(v76 + 96) == 0;
            if (v79
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v75, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v76, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v74 += 8;
          if (v74 == v20)
          {
            v72 += 8;
            goto LABEL_136;
          }
        }
      }
    }
    else
    {
      v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v94 = vdupq_n_s64(0x8000000000000000);
      v39 = v18;
      do
      {
        v40 = *(_QWORD *)v39;
        v39 += 8;
        sub_18D2E94C4(v93.i64, (uint64_t *)(v40 + 32));
      }
      while (v39 != v20);
      if (!sub_18D2E9F8C(v93.i64, (uint64_t *)&v110, (uint64_t *)&v95, v92 + 1, a5)
        || (sub_18D2E9F8C(v93.i64, (uint64_t *)&v107, (uint64_t *)&v95, v92 + 1, a5) & 1) == 0)
      {
        goto LABEL_183;
      }
    }
  }
  if (v38 < 0x80 || v92 > 0x63 || (unint64_t)(v102 - (_BYTE *)v101) < 0x79)
  {
    if (v37 != v36)
    {
      v41 = (char *)v101;
      v42 = v102;
      if (v101 != v102)
      {
LABEL_59:
        v43 = v41;
        while (1)
        {
          v44 = *(_QWORD *)v37;
          v45 = *(_QWORD *)v43;
          if (*(_QWORD *)(*(_QWORD *)v37 + 48) >= *(_QWORD *)(*(_QWORD *)v43 + 32)
            && *(_QWORD *)(v44 + 32) <= *(_QWORD *)(v45 + 48))
          {
            v46 = *(_QWORD *)(v44 + 56) >= *(_QWORD *)(v45 + 40) && *(_QWORD *)(v44 + 40) <= *(_QWORD *)(v45 + 56);
            v47 = v46 && *(_BYTE *)(v44 + 96) == 0;
            v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
            if (v48
              && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v44, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v45, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
            {
              goto LABEL_183;
            }
          }
          v43 += 8;
          if (v43 == v42)
          {
            v37 += 8;
            if (v37 != v36)
              goto LABEL_59;
            break;
          }
        }
      }
    }
  }
  else if ((sub_18D2E9F8C((uint64_t *)&v115, (uint64_t *)&v110, (uint64_t *)&v101, v92 + 1, a5) & 1) == 0)
  {
    goto LABEL_183;
  }
  v81 = (char *)v107;
  v80 = v108;
  if ((unint64_t)(v108 - (_BYTE *)v107) < 0x80 || v92 > 0x63 || (unint64_t)(v99 - (_BYTE *)__p) < 0x79)
  {
    if (v107 == v108)
      goto LABEL_181;
    v82 = (char *)__p;
    v83 = v99;
    if (__p == v99)
      goto LABEL_181;
LABEL_160:
    v84 = v82;
    while (1)
    {
      v85 = *(_QWORD *)v81;
      v86 = *(_QWORD *)v84;
      if (*(_QWORD *)(*(_QWORD *)v81 + 48) >= *(_QWORD *)(*(_QWORD *)v84 + 32)
        && *(_QWORD *)(v85 + 32) <= *(_QWORD *)(v86 + 48))
      {
        v87 = *(_QWORD *)(v85 + 56) >= *(_QWORD *)(v86 + 40) && *(_QWORD *)(v85 + 40) <= *(_QWORD *)(v86 + 56);
        v88 = v87 && *(_BYTE *)(v85 + 96) == 0;
        v89 = v88 && *(_BYTE *)(v86 + 96) == 0;
        if (v89
          && !sub_18D2EB278(*(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v85, *(_DWORD *)(a5 + 40), **(double ***)a5, *(double **)(*(_QWORD *)a5 + 8), (int *)v86, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(uint64_t **)(a5 + 16), *(uint64_t **)(a5 + 24), *(BOOL **)(a5 + 32)))
        {
          break;
        }
      }
      v84 += 8;
      if (v84 == v83)
      {
        v81 += 8;
        if (v81 != v80)
          goto LABEL_160;
        goto LABEL_181;
      }
    }
LABEL_183:
    v90 = 0;
    if (!v18)
      goto LABEL_185;
    goto LABEL_184;
  }
  if ((sub_18D2E9F8C(v113, (uint64_t *)&v107, (uint64_t *)&__p, v92 + 1, a5) & 1) == 0)
    goto LABEL_183;
LABEL_181:
  v90 = 1;
  if (v18)
LABEL_184:
    operator delete(v18);
LABEL_185:
  if (__p)
    operator delete(__p);
  if (v101)
    operator delete(v101);
  if (v16)
    operator delete(v16);
  if (v107)
    operator delete(v107);
  if (v110)
    operator delete(v110);
  return v90;
}

void sub_18D2EB1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  uint64_t v32;
  void *v34;

  if (v31)
    operator delete(v31);
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  v34 = *(void **)(v32 - 184);
  if (v34)
    operator delete(v34);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2EB278(int a1, double *a2, double *a3, int *a4, int a5, double *a6, double *a7, int *a8, char a9, uint64_t a10, uint64_t *a11, uint64_t *a12, BOOL *a13)
{
  double *v13;
  _QWORD *v14;
  double *v15;
  double *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  double *v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  _QWORD *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double *v68;
  double *v69;
  double *v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  double *v83;
  double *v84;
  double *v85;
  double *v86;
  double *v87;
  uint64_t v88;
  int v89;
  double v90;
  double v91;
  double v92;
  uint64_t v93;
  double *v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  double v99;
  double v100;
  uint64_t v101;
  __int128 v102;
  double *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  char *v107;
  double *v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  double v119;
  double v120;
  double *v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  uint64_t v131;
  double v132;
  double v133;
  double *v134;
  double v135;
  double v136;
  double v137;
  uint64_t v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  uint64_t v144;
  double v145;
  double v146;
  double *v147;
  double v148;
  double v149;
  double v150;
  uint64_t v151;
  double v152;
  double v153;
  uint64_t v154;
  double v155;
  double v156;
  double v157;
  uint64_t v158;
  double v159;
  double v160;
  uint64_t v161;
  double *v162;
  double *v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  BOOL v170;
  int v171;
  _BOOL4 v173;
  double v174;
  double v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  double *v193;
  double v194;
  int v195;
  int v196;
  double v197;
  int v198;
  double v199;
  uint64_t v200;
  char *v201;
  double v202;
  int v203;
  double v204;
  double v205;
  int v206;
  double v207;
  uint64_t v208;
  char *v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  __int16 v222;
  __int16 v223;
  uint64_t v224;
  uint64_t v225;
  double v226;
  uint64_t v227;
  uint64_t v228;
  double v229;
  uint64_t v230;
  double v231;
  double v232;
  double v233;
  uint64_t v234;
  double v235;
  char *v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double *v246;
  double *v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  __int128 v251;
  int v252;
  int v253;
  int v254;
  int v255;
  unsigned __int8 v256;
  int v257;
  BOOL v258;
  _BOOL4 v259;
  uint64_t v260;
  char v261;
  char v262;
  int v263;
  int64x2_t *v264;
  _BYTE *v265;
  __int128 *v266;
  _BYTE *v267;
  int v268;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t *v271;
  double v272;
  int v273;
  char v274;
  int v275;
  int64x2_t *v276;
  _BYTE *v277;
  __int128 *v278;
  _BYTE *v279;
  int v280;
  uint64_t *v281;
  uint64_t *v282;
  uint64_t *v283;
  double v284;
  int v285;
  int v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t *v289;
  double v290;
  uint64_t v291;
  char v292;
  char v293;
  int v294;
  int64x2_t *v295;
  _BYTE *v296;
  __int128 *v297;
  _BYTE *v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  double v302;
  unsigned int v303;
  double v304;
  int v305;
  double v306;
  double v307;
  int v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  double v312;
  int v313;
  double v314;
  uint64_t *v315;
  uint64_t *v316;
  uint64_t *v317;
  double v318;
  int v319;
  uint64_t *v320;
  uint64_t *v321;
  uint64_t *v322;
  double v323;
  int v324;
  double v325;
  double v326;
  int v327;
  _BYTE *v328;
  int v329;
  uint64_t *v330;
  uint64_t *v331;
  uint64_t *v332;
  double v333;
  int v334;
  uint64_t *v335;
  uint64_t *v336;
  uint64_t *v337;
  double v338;
  int v339;
  double v340;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t *v343;
  double v344;
  int v345;
  double v346;
  BOOL v347;
  int v348;
  char v349;
  BOOL v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v356;
  _BOOL4 v357;
  _BOOL4 v358;
  uint64_t *v359;
  uint64_t *v360;
  uint64_t *v361;
  double v362;
  int v363;
  uint64_t *v364;
  uint64_t *v365;
  uint64_t *v366;
  double v367;
  int v368;
  double v369;
  double v370;
  int v371;
  double v372;
  BOOL v373;
  int v374;
  int v375;
  int v376;
  uint64_t *v377;
  uint64_t *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  double v384;
  int v385;
  uint64_t *v386;
  uint64_t *v387;
  uint64_t *v388;
  double v389;
  int v390;
  double v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t *v394;
  double v395;
  double v396;
  int v397;
  int v398;
  uint64_t *v399;
  uint64_t *v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  double v408;
  int v409;
  int v410;
  double v411;
  int v412;
  uint64_t *v413;
  uint64_t *v414;
  uint64_t *v415;
  double v416;
  int v417;
  uint64_t *v418;
  uint64_t *v419;
  uint64_t *v420;
  double v421;
  int v422;
  double v423;
  int v424;
  int v425;
  int v426;
  BOOL v427;
  int v428;
  int v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  uint64_t *v442;
  uint64_t *v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  double v451;
  int v452;
  int v453;
  double v454;
  double v455;
  uint64_t *v456;
  uint64_t *v457;
  uint64_t *v458;
  double v459;
  int v460;
  double v461;
  uint64_t *v462;
  uint64_t *v463;
  uint64_t *v464;
  double v465;
  int v466;
  double v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  double *v472;
  double *v473;
  uint64_t v475;
  uint64_t v476;
  int v477;
  int v478;
  int v479;
  int v480;
  double *v481;
  int v482;
  int v485;
  int v486;
  double *v487;
  double *v488;
  double *v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  double *v494;
  int v495;
  _QWORD *v498;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  double *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v508;
  double *v509;
  double *v510;
  double *v511;
  uint64_t v512;
  uint64_t v513;
  double *v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  _BYTE v518[32];
  __int128 v519;
  __int128 v520;
  __int128 v521;
  _BYTE v522[32];
  __int128 v523;
  __int128 v524;
  double v525;
  _QWORD v526[2];
  double *v527;
  double *v528;
  _QWORD v529[3];
  char v530;
  __int128 v531;
  char v532;
  __int128 v533;
  __int128 v534;
  uint64_t v535;
  _QWORD v536[2];
  __int128 v537;
  _QWORD v538[3];
  char v539;
  __int128 v540;
  char v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  _QWORD *v545;
  _QWORD *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  __int128 *v555;
  _QWORD *v556;
  _QWORD *v557;
  __int16 v558;
  _QWORD v559[6];
  char v560;
  _QWORD v561[6];
  char v562;
  uint64_t v563;
  _QWORD *v564;
  _QWORD *v565;
  _QWORD *v566;
  _QWORD *v567;
  _BYTE v568[64];
  __int128 v569;
  __int128 v570;
  __int128 v571;
  _BYTE v572[32];
  uint64_t v573;
  __int16 v574;
  _BYTE v575[42];
  uint64_t v576;
  __int128 *v577;
  _QWORD v578[2];
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  _BYTE v585[32];
  __int128 v586;
  __int128 v587;
  __int128 v588;
  _BYTE v589[32];
  double v590;
  _BYTE v591[48];
  __int128 v592;
  __int128 v593;
  _BYTE v594[32];
  __int128 v595;
  __int128 v596;
  __int128 v597;
  _BYTE v598[32];
  double v599;
  uint64_t v600;

  v13 = a6;
  v14 = a4;
  v15 = a3;
  v16 = a2;
  v600 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a4 + 96) && (unint64_t)(*((_QWORD *)a4 + 10) + 1) < *((_QWORD *)a4 + 11)
    || *((_BYTE *)a8 + 96) && (unint64_t)(*((_QWORD *)a8 + 10) + 1) < *((_QWORD *)a8 + 11))
  {
    return 1;
  }
  v17 = *a4;
  v18 = *a8;
  v19 = *((_QWORD *)a4 + 13);
  v21 = *((_QWORD *)a4 + 8);
  v20 = *((_QWORD *)a4 + 9);
  v22 = &a2[2 * v21];
  v495 = *a8;
  if (v21 == v20)
    goto LABEL_32;
  v23 = a8;
  v24 = 0;
  v512 = *((_QWORD *)a4 + 9);
  v509 = &a2[2 * v21];
  v490 = *((_QWORD *)a4 + 13);
  v25 = v490;
  v26 = *((_QWORD *)a4 + 8);
  v27 = v509;
  v500 = v26;
  v28 = 16 * v20 - 16 * v26;
  v29 = v22;
  while (1)
  {
    v22 = v29;
    v30 = (double)a11[3] + (v29[3] - *((double *)a11 + 1)) * *((double *)a11 + 4);
    if (v30 >= 0.0)
      v31 = 0.5;
    else
      v31 = -0.5;
    v32 = v30 + v31;
    if (v32 <= -9.22337204e18)
      v33 = 1;
    else
      v33 = 2 * (v32 >= 9.22337204e18);
    sub_18D2E8EE8(v33);
    v34 = v27[2];
    v27 += 2;
    v35 = (double)a11[2] + (v34 - *(double *)a11) * *((double *)a11 + 4);
    if (v35 >= 0.0)
      v36 = 0.5;
    else
      v36 = -0.5;
    v37 = v35 + v36;
    if (v35 + v36 <= -9.22337204e18)
      v38 = 1;
    else
      v38 = 2 * (v35 + v36 >= 9.22337204e18);
    sub_18D2E8EE8(v38);
    v39 = ceil(v37);
    v40 = floor(v37);
    if (v37 >= 0.0)
      v39 = v40;
    v41 = (uint64_t)v39;
    if (v17 == 1)
      break;
    if (v17 != -1)
    {
      v22 = v509;
      a8 = v23;
      v13 = a6;
      v21 = v500;
      v14 = a4;
      v16 = a2;
      v15 = a3;
      v18 = v495;
      v19 = v490;
      goto LABEL_31;
    }
    if (*((_QWORD *)v23 + 6) >= v41)
    {
      v19 = v25;
      v21 = v26;
      goto LABEL_30;
    }
LABEL_26:
    ++v26;
    ++v25;
    ++v24;
    v29 = v27;
    v28 -= 16;
    if (!v28)
      return 1;
  }
  if (*((_QWORD *)v23 + 4) > v41)
    goto LABEL_26;
  v19 = v490 + v24;
  v21 = v500 + v24;
LABEL_30:
  a8 = v23;
  v13 = a6;
  v14 = a4;
  v16 = a2;
  v15 = a3;
  v18 = v495;
LABEL_31:
  v20 = v512;
LABEL_32:
  v42 = 1;
  v481 = &v16[2 * v20];
  if (v22 != v481)
  {
    v498 = a8;
    v491 = v19;
    v43 = v22;
    v44 = &v16[2 * (v22 != v16)];
    if (v22 + 2 != v15)
      v44 = v22 + 2;
    v45 = v44 + 2;
    v46 = &v16[2 * (v44 != v16)];
    if (v45 != v15)
      v46 = v45;
    v488 = v46;
    v489 = v22 + 2;
    v482 = -v17;
    v492 = -v18;
    v47 = 0.5;
    v48 = -0.5;
    while (1)
    {
      v49 = (double)a11[3] + (v43[1] - *((double *)a11 + 1)) * *((double *)a11 + 4);
      if (v49 >= 0.0)
        v50 = v47;
      else
        v50 = v48;
      v51 = v49 + v50;
      if (v51 <= -9.22337204e18)
        v52 = 1;
      else
        v52 = 2 * (v51 >= 9.22337204e18);
      sub_18D2E8EE8(v52);
      v487 = v43;
      v53 = (double)a11[2] + (*v43 - *(double *)a11) * *((double *)a11 + 4);
      if (v53 >= 0.0)
        v54 = v47;
      else
        v54 = v48;
      v55 = v53 + v54;
      if (v53 + v54 <= -9.22337204e18)
        v56 = 1;
      else
        v56 = 2 * (v53 + v54 >= 9.22337204e18);
      sub_18D2E8EE8(v56);
      v57 = ceil(v55);
      v58 = floor(v55);
      if (v55 >= 0.0)
        v57 = v58;
      v59 = (uint64_t)v57;
      if (v482 == 1)
      {
        v60 = v498;
        if (v498[4] > v59)
          return 1;
      }
      else
      {
        v60 = v498;
        if (v482 == -1 && v498[6] < v59)
          return 1;
      }
      v536[0] = v14;
      v501 = v21;
      v536[1] = v21;
      *(_QWORD *)&v537 = v43;
      *((_QWORD *)&v537 + 1) = v489;
      v538[0] = v488;
      v538[1] = v16;
      v538[2] = v15;
      v539 = 1;
      v541 = 0;
      v61 = *((_OWORD *)a11 + 1);
      v542 = *(_OWORD *)a11;
      v543 = v61;
      v544 = a11[4];
      v63 = v60[8];
      v62 = v60[9];
      v64 = &v13[2 * v63];
      v65 = v60[13];
      v505 = v63;
      v508 = v65;
      if (v63 == v62)
        goto LABEL_84;
      v66 = 0;
      v513 = v60[9];
      v67 = 16 * v62 - 16 * v63;
      v510 = v64;
      v68 = v64;
      v69 = v64;
      while (1)
      {
        v70 = v68;
        v71 = (double)a11[3] + (v68[3] - *((double *)a11 + 1)) * *((double *)a11 + 4);
        if (v71 >= 0.0)
          v72 = v47;
        else
          v72 = v48;
        v73 = v71 + v72;
        if (v73 <= -9.22337204e18)
          v74 = 1;
        else
          v74 = 2 * (v73 >= 9.22337204e18);
        sub_18D2E8EE8(v74);
        v75 = v69[2];
        v69 += 2;
        v76 = (double)a11[2] + (v75 - *(double *)a11) * *((double *)a11 + 4);
        if (v76 >= 0.0)
          v77 = v47;
        else
          v77 = v48;
        v78 = v76 + v77;
        if (v76 + v77 <= -9.22337204e18)
          v79 = 1;
        else
          v79 = 2 * (v76 + v77 >= 9.22337204e18);
        sub_18D2E8EE8(v79);
        v80 = ceil(v78);
        v81 = floor(v78);
        if (v78 >= 0.0)
          v80 = v81;
        v82 = (uint64_t)v80;
        if (v495 == 1)
          break;
        if (v495 != -1)
        {
          v64 = v510;
          v13 = a6;
          goto LABEL_83;
        }
        if (*((_QWORD *)a4 + 6) >= v82)
        {
          v508 = v65;
          v505 = v63;
          goto LABEL_82;
        }
LABEL_78:
        ++v63;
        ++v65;
        ++v66;
        v68 = v69;
        v67 -= 16;
        if (!v67)
          goto LABEL_886;
      }
      if (*((_QWORD *)a4 + 4) > v82)
        goto LABEL_78;
      v508 += v66;
      v505 += v66;
LABEL_82:
      v13 = a6;
      v64 = v70;
LABEL_83:
      v62 = v513;
LABEL_84:
      v494 = &v13[2 * v62];
      if (v64 != v494)
        break;
LABEL_886:
      ++v491;
      v13 = a6;
      v14 = a4;
LABEL_887:
      v43 = v487 + 2;
      v472 = v489;
      v21 = v501 + 1;
      v473 = v488 + 2;
      v16 = a2;
      v15 = a3;
      if (v488 + 2 == a3)
        v473 = &a2[2 * (v488 != a2)];
      v488 = v473;
      v489 += 2;
      if (v472 == v481)
        return 1;
    }
    v83 = v64 + 2;
    v13 = a6;
    v84 = &a6[2 * (v64 != a6)];
    v85 = a7;
    if (v64 + 2 != a7)
      v84 = v64 + 2;
    v86 = v84 + 2;
    v87 = &a6[2 * (v84 != a6)];
    if (v86 != a7)
      v87 = v86;
    v514 = v87;
    ++v491;
    v88 = v505;
    v14 = a4;
    v89 = v492;
    while (1)
    {
      v504 = v83;
      v90 = (double)a11[3] + (v64[1] - *((double *)a11 + 1)) * *((double *)a11 + 4);
      if (v90 >= 0.0)
        v91 = v47;
      else
        v91 = v48;
      v92 = v90 + v91;
      if (v92 <= -9.22337204e18)
        v93 = 1;
      else
        v93 = 2 * (v92 >= 9.22337204e18);
      v94 = v64;
      sub_18D2E8EE8(v93);
      v511 = v94;
      v95 = (double)a11[2] + (*v94 - *(double *)a11) * *((double *)a11 + 4);
      if (v95 >= 0.0)
        v96 = v47;
      else
        v96 = v48;
      v97 = v95 + v96;
      if (v95 + v96 <= -9.22337204e18)
        v98 = 1;
      else
        v98 = 2 * (v95 + v96 >= 9.22337204e18);
      sub_18D2E8EE8(v98);
      v99 = ceil(v97);
      v100 = floor(v97);
      if (v97 >= 0.0)
        v99 = v100;
      v101 = (uint64_t)v99;
      if (v89 == 1)
      {
        v102 = xmmword_18D348770;
        if (v14[4] > v101)
          goto LABEL_887;
      }
      else
      {
        v102 = xmmword_18D348770;
        if (v89 == -1 && v14[6] < v101)
          goto LABEL_887;
      }
      v103 = v504;
      if (a1 == a5 && v14[2] == v498[2] && v14[3] == v498[3] && a9 && (v508 == v491 || !v501 && v14[11] - 2 <= v88))
        goto LABEL_241;
      v104 = 0;
      v535 = a11[4];
      v526[0] = v498;
      v526[1] = v88;
      v527 = v511;
      v528 = v504;
      v529[0] = v514;
      v529[1] = v13;
      v529[2] = v85;
      v530 = 0;
      v532 = 0;
      v105 = *((_OWORD *)a11 + 1);
      v533 = *(_OWORD *)a11;
      v534 = v105;
      LODWORD(v516) = 0;
      BYTE4(v516) = 0;
      *((_QWORD *)&v516 + 1) = -1;
      LOWORD(v517) = 0;
      *(_QWORD *)&v106 = -1;
      *((_QWORD *)&v106 + 1) = -1;
      do
      {
        v107 = (char *)&v515 + v104;
        *((_DWORD *)v107 + 10) = 0;
        *((_OWORD *)v107 + 3) = v106;
        *((_OWORD *)v107 + 4) = v106;
        *((_QWORD *)v107 + 10) = -1;
        *(_OWORD *)(v107 + 88) = v102;
        v104 += 80;
        *((_QWORD *)v107 + 13) = 0;
        *((_QWORD *)v107 + 14) = 0;
      }
      while (v104 != 160);
      *(_QWORD *)v518 = a1;
      *(_OWORD *)&v518[8] = *((_OWORD *)v14 + 1);
      *(_QWORD *)&v518[24] = v501;
      *(_QWORD *)&v519 = -1;
      *(_QWORD *)v522 = a5;
      *(_OWORD *)&v522[8] = *((_OWORD *)v498 + 1);
      v506 = v88;
      *(_QWORD *)&v522[24] = v88;
      *(_QWORD *)&v523 = -1;
      v502 = *a12;
      v503 = a12[1];
      v545 = v536;
      v546 = v526;
      v555 = (__int128 *)a11;
      v556 = v536;
      v557 = v526;
      v558 = 0;
      v108 = (double *)v537;
      v109 = (double)a11[3] + (*(double *)(v537 + 8) - *((double *)a11 + 1)) * *((double *)a11 + 4);
      if (v109 >= 0.0)
        v110 = v47;
      else
        v110 = v48;
      v111 = v109 + v110;
      if (v109 + v110 <= -9.22337204e18)
        v112 = 1;
      else
        v112 = 2 * (v109 + v110 >= 9.22337204e18);
      sub_18D2E8EE8(v112);
      v113 = ceil(v111);
      v114 = floor(v111);
      if (v111 >= 0.0)
        v113 = v114;
      v548 = (uint64_t)v113;
      v115 = (double)a11[2] + (*v108 - *(double *)a11) * *((double *)a11 + 4);
      if (v115 >= 0.0)
        v116 = v47;
      else
        v116 = v48;
      v117 = v115 + v116;
      if (v115 + v116 <= -9.22337204e18)
        v118 = 1;
      else
        v118 = 2 * (v115 + v116 >= 9.22337204e18);
      sub_18D2E8EE8(v118);
      v119 = ceil(v117);
      v120 = floor(v117);
      if (v117 >= 0.0)
        v119 = v120;
      v547 = (uint64_t)v119;
      v121 = (double *)*((_QWORD *)&v537 + 1);
      v122 = (double)a11[3] + (*(double *)(*((_QWORD *)&v537 + 1) + 8) - *((double *)a11 + 1)) * *((double *)a11 + 4);
      if (v122 >= 0.0)
        v123 = v47;
      else
        v123 = v48;
      v124 = v122 + v123;
      if (v122 + v123 <= -9.22337204e18)
        v125 = 1;
      else
        v125 = 2 * (v122 + v123 >= 9.22337204e18);
      sub_18D2E8EE8(v125);
      v126 = ceil(v124);
      v127 = floor(v124);
      if (v124 >= 0.0)
        v126 = v127;
      v550 = (uint64_t)v126;
      v128 = (double)a11[2] + (*v121 - *(double *)a11) * *((double *)a11 + 4);
      if (v128 >= 0.0)
        v129 = v47;
      else
        v129 = v48;
      v130 = v128 + v129;
      if (v128 + v129 <= -9.22337204e18)
        v131 = 1;
      else
        v131 = 2 * (v128 + v129 >= 9.22337204e18);
      sub_18D2E8EE8(v131);
      v132 = ceil(v130);
      v133 = floor(v130);
      if (v130 >= 0.0)
        v132 = v133;
      v549 = (uint64_t)v132;
      v134 = v527;
      v135 = (double)a11[3] + (v527[1] - *((double *)a11 + 1)) * *((double *)a11 + 4);
      if (v135 >= 0.0)
        v136 = v47;
      else
        v136 = v48;
      v137 = v135 + v136;
      if (v135 + v136 <= -9.22337204e18)
        v138 = 1;
      else
        v138 = 2 * (v135 + v136 >= 9.22337204e18);
      sub_18D2E8EE8(v138);
      v139 = ceil(v137);
      v140 = floor(v137);
      if (v137 >= 0.0)
        v139 = v140;
      v552 = (uint64_t)v139;
      v141 = (double)a11[2] + (*v134 - *(double *)a11) * *((double *)a11 + 4);
      if (v141 >= 0.0)
        v142 = v47;
      else
        v142 = v48;
      v143 = v141 + v142;
      if (v141 + v142 <= -9.22337204e18)
        v144 = 1;
      else
        v144 = 2 * (v141 + v142 >= 9.22337204e18);
      sub_18D2E8EE8(v144);
      v145 = ceil(v143);
      v146 = floor(v143);
      if (v143 >= 0.0)
        v145 = v146;
      v551 = (uint64_t)v145;
      v147 = v528;
      v148 = (double)a11[3] + (v528[1] - *((double *)a11 + 1)) * *((double *)a11 + 4);
      if (v148 >= 0.0)
        v149 = v47;
      else
        v149 = v48;
      v150 = v148 + v149;
      if (v148 + v149 <= -9.22337204e18)
        v151 = 1;
      else
        v151 = 2 * (v148 + v149 >= 9.22337204e18);
      sub_18D2E8EE8(v151);
      v152 = ceil(v150);
      v153 = floor(v150);
      if (v150 >= 0.0)
        v152 = v153;
      v154 = (uint64_t)v152;
      v554 = (uint64_t)v152;
      v155 = (double)a11[2] + (*v147 - *(double *)a11) * *((double *)a11 + 4);
      if (v155 >= 0.0)
        v156 = v47;
      else
        v156 = v48;
      v157 = v155 + v156;
      if (v155 + v156 <= -9.22337204e18)
        v158 = 1;
      else
        v158 = 2 * (v155 + v156 >= 9.22337204e18);
      sub_18D2E8EE8(v158);
      v159 = ceil(v157);
      v160 = floor(v157);
      if (v157 >= 0.0)
        v159 = v160;
      v161 = (uint64_t)v159;
      v553 = (uint64_t)v159;
      v559[0] = v536;
      v559[1] = a11;
      v559[2] = &v547;
      v559[3] = &v549;
      v560 = 0;
      v561[0] = v526;
      v561[1] = a11;
      v561[2] = &v551;
      v561[3] = &v553;
      v562 = 0;
      v564 = v559;
      v565 = v561;
      v566 = v561;
      v567 = v559;
      v162 = (double *)v537;
      v163 = v527;
      v579 = v537;
      v578[0] = v527;
      v578[1] = v528;
      v165 = **((double **)&v537 + 1);
      v164 = *(double *)(*((_QWORD *)&v537 + 1) + 8);
      v167 = *(double *)v537;
      v166 = *(double *)(v537 + 8);
      v168 = *v528;
      v169 = v528[1];
      v170 = v547 == v549 && v548 == v550;
      v171 = v170;
      v173 = v551 == v161 && v552 == v154;
      v174 = *v527;
      v175 = v527[1];
      if (v171 == 1 && v173)
      {
        if (v547 != v161 || v548 != v154)
        {
          *(_QWORD *)&v580 = 0;
          v189 = 40;
          v85 = a7;
          v13 = a6;
          v88 = v506;
          v14 = a4;
          v47 = 0.5;
          do
          {
            v190 = (char *)&v580 + v189;
            *(_OWORD *)v190 = xmmword_18D348770;
            *((_QWORD *)v190 + 2) = 0;
            *((_QWORD *)v190 + 3) = 0;
            *((_QWORD *)v190 + 4) = 1;
            *((_QWORD *)v190 + 5) = 0;
            v190[48] = 0;
            v189 += 56;
          }
          while (v190 + 56 != (char *)&v588 + 8);
          memset(&v591[2], 0, 40);
          v571 = *(_OWORD *)&v585[16];
          *(_OWORD *)v572 = v586;
          *(_OWORD *)&v572[16] = v587;
          v573 = v588;
          *(_OWORD *)&v568[32] = v582;
          *(_OWORD *)&v568[48] = v583;
          v569 = v584;
          v570 = *(_OWORD *)v585;
          *(_OWORD *)v568 = v580;
          *(_OWORD *)&v568[16] = v581;
          v574 = 100;
          *(_OWORD *)v575 = *(_OWORD *)v591;
          *(_OWORD *)&v575[16] = *(_OWORD *)&v591[16];
          *(_OWORD *)&v575[26] = *(_OWORD *)&v591[26];
          v89 = v492;
          goto LABEL_237;
        }
        v176 = 40;
        v85 = a7;
        v13 = a6;
        v88 = v506;
        v14 = a4;
        v47 = 0.5;
        do
        {
          v177 = (char *)&v580 + v176;
          *(_OWORD *)v177 = xmmword_18D348770;
          *((_QWORD *)v177 + 2) = 0;
          *((_QWORD *)v177 + 3) = 0;
          *((_QWORD *)v177 + 4) = 1;
          *((_QWORD *)v177 + 5) = 0;
          v177[48] = 0;
          v176 += 56;
        }
        while (v177 + 56 != (char *)&v588 + 8);
        *(_QWORD *)&v580 = 1;
        *((double *)&v580 + 1) = v167;
        *(double *)&v581 = v166;
        memset(&v591[2], 0, 40);
        v571 = *(_OWORD *)&v585[16];
        *(_OWORD *)v572 = v586;
        *(_OWORD *)&v572[16] = v587;
        v573 = v588;
        *(_OWORD *)&v568[32] = v582;
        *(_OWORD *)&v568[48] = v583;
        v569 = v584;
        v570 = *(_OWORD *)v585;
        *(_OWORD *)v568 = v580;
        *(_OWORD *)&v568[16] = v581;
        v574 = 48;
        *(_OWORD *)v575 = *(_OWORD *)v591;
        *(_OWORD *)&v575[16] = *(_OWORD *)&v591[16];
        *(_OWORD *)&v575[26] = *(_OWORD *)&v591[26];
        v576 = a10;
        v89 = v492;
        v48 = -0.5;
        goto LABEL_238;
      }
      if (v547 >= v549)
        v178 = v549;
      else
        v178 = v547;
      if (v547 <= v549)
        v179 = v549;
      else
        v179 = v547;
      if (v551 >= v161)
        v180 = (uint64_t)v159;
      else
        v180 = v551;
      if (v551 <= v161)
        v181 = (uint64_t)v159;
      else
        v181 = v551;
      if (v179 < v180
        || v181 < v178
        || (v548 >= v550 ? (v182 = v550) : (v182 = v548),
            v548 <= v550 ? (v183 = v550) : (v183 = v548),
            v552 >= v154 ? (v184 = v154) : (v184 = v552),
            v552 <= v154 ? (v185 = v154) : (v185 = v552),
            v183 < v184 || v185 < v182))
      {
        *(_QWORD *)&v580 = 0;
        v187 = 40;
        do
        {
          v188 = (char *)&v580 + v187;
          *(_OWORD *)v188 = xmmword_18D348770;
          *((_QWORD *)v188 + 2) = 0;
          *((_QWORD *)v188 + 3) = 0;
          *((_QWORD *)v188 + 4) = 1;
          *((_QWORD *)v188 + 5) = 0;
          v188[48] = 0;
          v187 += 56;
        }
        while (v188 + 56 != (char *)&v588 + 8);
LABEL_233:
        memset(&v591[2], 0, 40);
        v571 = *(_OWORD *)&v585[16];
        *(_OWORD *)v572 = v586;
        *(_OWORD *)&v572[16] = v587;
        v573 = v588;
        *(_OWORD *)&v568[32] = v582;
        *(_OWORD *)&v568[48] = v583;
        v569 = v584;
        v570 = *(_OWORD *)v585;
        *(_OWORD *)v568 = v580;
        *(_OWORD *)&v568[16] = v581;
        v574 = 100;
        *(_OWORD *)v575 = *(_OWORD *)v591;
        *(_OWORD *)&v575[16] = *(_OWORD *)&v591[16];
        *(_OWORD *)&v575[26] = *(_OWORD *)&v591[26];
        v85 = a7;
        v13 = a6;
        v88 = v506;
        v14 = a4;
        v89 = v492;
        v47 = 0.5;
LABEL_237:
        v48 = -0.5;
        v576 = a10;
        goto LABEL_238;
      }
      *(_QWORD *)&v580 = 0x3FF0000000000000;
      v186 = sub_18D2EEA84(v551, v552, v161, v154, v547, v548, (double *)&v580);
      if (v186 == 0.0)
        break;
      if ((*(_QWORD *)&v186 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v186 > 0.0)
          v196 = 1;
        else
          v196 = -1;
        v485 = v196;
      }
      else
      {
        v194 = fabs(v186);
        if (v186 > 0.0)
          v195 = 1;
        else
          v195 = -1;
        v485 = v195;
        if (v194 <= *(double *)&v580 * 2.22044605e-16)
          break;
      }
LABEL_255:
      *(_QWORD *)&v580 = 0x3FF0000000000000;
      v197 = sub_18D2EEA84(v551, v552, v553, v554, v549, v550, (double *)&v580);
      if (v197 == 0.0)
        goto LABEL_256;
      if ((*(_QWORD *)&v197 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v197 > 0.0)
          v198 = 1;
        else
          v198 = -1;
      }
      else
      {
        v199 = fabs(v197);
        if (v197 > 0.0)
          v198 = 1;
        else
          v198 = -1;
        if (v199 <= *(double *)&v580 * 2.22044605e-16)
LABEL_256:
          v198 = 0;
      }
      if (v198 * v485 == 1)
      {
        *(_QWORD *)&v580 = 0;
        v200 = 40;
        do
        {
          v201 = (char *)&v580 + v200;
          *(_OWORD *)v201 = xmmword_18D348770;
          *((_QWORD *)v201 + 2) = 0;
          *((_QWORD *)v201 + 3) = 0;
          *((_QWORD *)v201 + 4) = 1;
          *((_QWORD *)v201 + 5) = 0;
          v201[48] = 0;
          v200 += 56;
        }
        while (v201 + 56 != (char *)&v588 + 8);
        goto LABEL_233;
      }
      v479 = v198;
      *(_QWORD *)&v580 = 0x3FF0000000000000;
      v202 = sub_18D2EEA84(v547, v548, v549, v550, v551, v552, (double *)&v580);
      if (v202 == 0.0)
      {
LABEL_271:
        v203 = 0;
        goto LABEL_281;
      }
      if ((*(_QWORD *)&v202 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v202 > 0.0)
          v203 = 1;
        else
          v203 = -1;
      }
      else
      {
        v204 = fabs(v202);
        if (v202 > 0.0)
          v203 = 1;
        else
          v203 = -1;
        if (v204 <= *(double *)&v580 * 2.22044605e-16)
          goto LABEL_271;
      }
LABEL_281:
      *(_QWORD *)&v580 = 0x3FF0000000000000;
      v205 = sub_18D2EEA84(v547, v548, v549, v550, v553, v554, (double *)&v580);
      if (v205 == 0.0)
        goto LABEL_282;
      if ((*(_QWORD *)&v205 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v205 > 0.0)
          v206 = 1;
        else
          v206 = -1;
      }
      else
      {
        v207 = fabs(v205);
        if (v205 > 0.0)
          v206 = 1;
        else
          v206 = -1;
        if (v207 <= *(double *)&v580 * 2.22044605e-16)
LABEL_282:
          v206 = 0;
      }
      if (v206 * v203 == 1)
      {
        *(_QWORD *)&v580 = 0;
        v208 = 40;
        do
        {
          v209 = (char *)&v580 + v208;
          *(_OWORD *)v209 = xmmword_18D348770;
          *((_QWORD *)v209 + 2) = 0;
          *((_QWORD *)v209 + 3) = 0;
          *((_QWORD *)v209 + 4) = 1;
          *((_QWORD *)v209 + 5) = 0;
          v209[48] = 0;
          v208 += 56;
        }
        while (v209 + 56 != (char *)&v588 + 8);
        goto LABEL_233;
      }
      v210 = v203;
      v211 = v479;
      v212 = v549;
      v213 = v548;
      v214 = v549 - v547;
      v215 = v553;
      v216 = v552;
      v217 = v553 - v551;
      v218 = v550 - v548;
      v219 = v554 - v552;
      if (v479 | v485 | v210 | v206)
      {
        v220 = v219 * v214 - v218 * v217;
        if (v219 * v214 != v218 * v217)
        {
          v230 = v218 * v217 - v219 * v214;
          if (v220 >= 0)
            v224 = (v548 - v552) * v217 + v219 * (v551 - v547);
          else
            v224 = -((v548 - v552) * v217 + v219 * (v551 - v547));
          if (v220 >= 0)
            v227 = v220;
          else
            v227 = -v220;
          v229 = (double)v224 * 1000000.0 / (double)v227;
          if (v230 >= 0)
            v228 = v230;
          else
            v228 = -v230;
          if (v230 >= 0)
            v225 = v218 * (v547 - v551) + (v552 - v548) * v214;
          else
            v225 = -(v218 * (v547 - v551) + (v552 - v548) * v214);
          v226 = (double)v225 * 1000000.0 / (double)v228;
          goto LABEL_329;
        }
        v485 = 0;
        v211 = 0;
        v210 = 0;
        v206 = 0;
      }
      if (v214 < 0)
        v214 = v547 - v549;
      if (v218 < 0)
        v218 = v548 - v550;
      if (v217 < 0)
        v217 = v551 - v553;
      if (v219 < 0)
        v219 = v552 - v554;
      if (v171)
      {
        v221 = v217 >= (unint64_t)v219;
        goto LABEL_311;
      }
      if (v173)
      {
        v221 = v214 >= (unint64_t)v218;
LABEL_311:
        v222 = v221;
        goto LABEL_314;
      }
      if (v217 >= v214)
        v217 = v214;
      if (v219 >= v218)
        v219 = v218;
      if (v217 == v219)
      {
        if (v217)
          v223 = 257;
        else
          v223 = 1;
        if ((v223 & 0x100) != 0)
        {
LABEL_350:
          if ((v223 & 1) != 0)
          {
            v89 = v492;
            v47 = 0.5;
            v48 = -0.5;
            if (v171)
            {
              v247 = v162;
              v248 = v547;
              v213 = v551;
              v212 = v553;
LABEL_355:
              v249 = 1;
            }
            else
            {
              if (!v173)
              {
                v213 = v547;
                v216 = v551;
                goto LABEL_405;
              }
              v247 = v163;
              v248 = v551;
              v213 = v547;
LABEL_395:
              v249 = 0;
            }
            sub_18D2EEBA0((uint64_t)v568, v247, v248, v213, v212, v249);
          }
          else
          {
            v89 = v492;
            v47 = 0.5;
            v48 = -0.5;
            if (v171)
            {
              v247 = v162;
              v248 = v548;
              v213 = v552;
              v212 = v554;
              goto LABEL_355;
            }
            if (v173)
            {
              v247 = v163;
              v248 = v552;
              v212 = v550;
              goto LABEL_395;
            }
            v212 = v550;
            v215 = v554;
LABEL_405:
            sub_18D2EEEDC((uint64_t)v568, (uint64_t)&v579, (uint64_t)v578, v213, v212, v216, v215);
          }
          v85 = a7;
          v13 = a6;
          v88 = v506;
          v14 = a4;
          v251 = xmmword_18D348770;
          goto LABEL_418;
        }
        goto LABEL_315;
      }
      v222 = v217 > (unint64_t)v219;
LABEL_314:
      v223 = v222 | 0x100;
      if ((v223 & 0x100) != 0)
        goto LABEL_350;
LABEL_315:
      v224 = 0;
      v225 = 0;
      v226 = 0.0;
      v227 = 1;
      v228 = 1;
      v229 = 0.0;
LABEL_329:
      v480 = v211;
      v231 = v165 - v167;
      v232 = v168 - v174;
      v233 = v164 - v166;
      v234 = 40;
      v235 = v169 - v175;
      v88 = v506;
      do
      {
        v236 = (char *)&v580 + v234;
        *(_OWORD *)v236 = xmmword_18D348770;
        *((_QWORD *)v236 + 2) = 0;
        *((_QWORD *)v236 + 3) = 0;
        *((_QWORD *)v236 + 4) = 1;
        *((_QWORD *)v236 + 5) = 0;
        v236[48] = 0;
        v234 += 56;
      }
      while (v236 + 56 != (char *)&v588 + 8);
      v477 = v210;
      v478 = v206;
      *(_QWORD *)&v580 = 1;
      v237 = v233 * v233 + v231 * v231;
      v238 = v235 * v235 + v232 * v232;
      if (v237 >= v238)
        v239 = v233 * v233 + v231 * v231;
      else
        v239 = v235 * v235 + v232 * v232;
      v47 = 0.5;
      v48 = -0.5;
      v475 = v228;
      v476 = v225;
      if (v239 <= 0.0)
        goto LABEL_340;
      v240 = vabdd_f64(0.5, v226 / 1000000.0);
      v241 = v240 + v240;
      if (v241 > 1.0)
        v241 = 1.0;
      v242 = vabdd_f64(0.5, v229 / 1000000.0);
      v243 = v242 + v242;
      if (v243 > 1.0)
        v243 = 1.0;
      if (1.0 - v237 / v239 + v243 * 5.0 <= 1.0 - v238 / v239 + v241 * 5.0)
      {
        v244 = v229;
        v245 = v226;
        v246 = v163;
        v231 = v232;
        v233 = v235;
      }
      else
      {
LABEL_340:
        v244 = v229;
        v245 = v226;
        v246 = v162;
        v225 = v224;
        v228 = v227;
      }
      v250 = v224;
      sub_18D2F03EC((double *)&v580 + 1, v246, v225, v228, v231, v233);
      v13 = a6;
      v14 = a4;
      v585[8] = 1;
      *((_QWORD *)&v582 + 1) = v250;
      *(_QWORD *)&v583 = v227;
      *((double *)&v583 + 1) = v244;
      *(_QWORD *)&v584 = v476;
      *((_QWORD *)&v584 + 1) = v475;
      *(double *)v585 = v245;
      v251 = xmmword_18D348770;
      if (!(v485 | v477))
      {
        v253 = -1;
        if (v478 == 1)
          v254 = -1;
        else
          v254 = 1;
        if (v478 == 1)
          v255 = 1;
        else
          v255 = -1;
        v256 = 102;
        v257 = -1;
        v252 = v480;
        v85 = a7;
        goto LABEL_417;
      }
      v252 = v480;
      v85 = a7;
      if (!(v480 | v478))
      {
        if (v477 == 1)
          v254 = -1;
        else
          v254 = 1;
        if (v477 == 1)
          v255 = 1;
        else
          v255 = -1;
        v253 = 1;
        v256 = 116;
        v257 = 1;
        goto LABEL_417;
      }
      if (!(v480 | v477))
      {
        if (v478 == 1)
          v254 = 1;
        else
          v254 = -1;
        v257 = -1;
        v253 = 1;
        goto LABEL_401;
      }
      if (!(v485 | v478))
      {
        if (v477 == 1)
          v254 = 1;
        else
          v254 = -1;
        v257 = 1;
        v253 = -1;
LABEL_401:
        v256 = 97;
        goto LABEL_402;
      }
      if (!v477)
      {
        v253 = 0;
        v258 = v478 == 1;
        v257 = -1;
        if (v478 == 1)
          v254 = -1;
        else
          v254 = 1;
LABEL_413:
        if (v258)
          v255 = v478;
        else
          v255 = -1;
        v256 = 115;
        goto LABEL_417;
      }
      if (!v485)
      {
        v257 = 0;
        v258 = v478 == 1;
        v253 = -1;
        if (v478 == 1)
          v254 = -1;
        else
          v254 = 1;
        goto LABEL_413;
      }
      if (v478)
      {
        if (v480)
        {
          v253 = -1;
          if (v478 == 1)
            v254 = -1;
          else
            v254 = 1;
          if (v478 == 1)
            v255 = 1;
          else
            v255 = -1;
          v256 = 105;
          v257 = -1;
          goto LABEL_417;
        }
        v257 = 0;
        if (v478 == 1)
          v254 = 1;
        else
          v254 = -1;
        v253 = 1;
      }
      else
      {
        v253 = 0;
        if (v480 == 1)
          v254 = 1;
        else
          v254 = -1;
        v257 = 1;
      }
      v256 = 109;
LABEL_402:
      v255 = v254;
LABEL_417:
      v571 = *(_OWORD *)&v585[16];
      *(_OWORD *)v572 = v586;
      *(_OWORD *)&v572[16] = v587;
      v573 = v588;
      *(_OWORD *)&v568[32] = v582;
      *(_OWORD *)&v568[48] = v583;
      v569 = v584;
      v570 = *(_OWORD *)v585;
      *(_OWORD *)v568 = v580;
      *(_OWORD *)&v568[16] = v581;
      v574 = v256;
      *(_DWORD *)&v575[2] = v253;
      *(_DWORD *)&v575[6] = v257;
      *(_DWORD *)&v575[10] = v254;
      *(_DWORD *)&v575[14] = v255;
      *(_DWORD *)&v575[18] = v485;
      *(_DWORD *)&v575[22] = v252;
      *(_DWORD *)&v575[26] = v477;
      *(_DWORD *)&v575[30] = v478;
      *(_DWORD *)&v575[34] = v253;
      *(_DWORD *)&v575[38] = v257;
      v89 = v492;
LABEL_418:
      v576 = a10;
      v577 = (__int128 *)a11;
      if (v574 == 100)
        goto LABEL_238;
      *(_OWORD *)v598 = v523;
      *(_OWORD *)&v598[16] = v524;
      v599 = v525;
      *(_OWORD *)&v594[16] = v520;
      v595 = v521;
      v597 = *(_OWORD *)&v522[16];
      v596 = *(_OWORD *)v522;
      *(_OWORD *)&v591[32] = v517;
      v592 = *(_OWORD *)v518;
      *(_OWORD *)v594 = v519;
      v593 = *(_OWORD *)&v518[16];
      *(_OWORD *)&v591[16] = v516;
      *(_OWORD *)v591 = v515;
      if (v574 > 0x6Cu)
      {
        if (v574 == 116)
        {
          v291 = 0;
          *(_DWORD *)&v591[16] = 3;
          *(_OWORD *)v591 = *(_OWORD *)&v568[8];
          v292 = 1;
          do
          {
            v293 = v292;
            v294 = *(_DWORD *)&v575[4 * v291 + 34];
            if (v294 == -1)
            {
              v296 = &v591[80 * v291 + 40];
              *((_OWORD *)v296 + 3) = v251;
              *((_QWORD *)v296 + 8) = 0;
            }
            else if (v294 == 1)
            {
              v295 = (int64x2_t *)&v591[80 * v291 + 40];
              v295[3] = vdupq_n_s64(1uLL);
              v295[4].i64[0] = 0x412E848000000000;
            }
            else
            {
              if ((v293 & 1) != 0)
                v297 = (__int128 *)&v568[40];
              else
                v297 = &v569;
              v298 = &v591[80 * v291 + 40];
              *((_OWORD *)v298 + 3) = *v297;
              *((_QWORD *)v298 + 8) = *((_QWORD *)v297 + 2);
            }
            v292 = 0;
            v291 = 1;
          }
          while ((v293 & 1) != 0);
          v299 = (uint64_t *)v565[2];
          v300 = (uint64_t *)v565[3];
          v301 = (uint64_t *)sub_18D2EE93C((uint64_t)v564);
          *(_QWORD *)&v580 = 0x3FF0000000000000;
          v302 = sub_18D2EEA84(*v299, v299[1], *v300, v300[1], *v301, v301[1], (double *)&v580);
          if (v302 == 0.0)
          {
LABEL_464:
            v486 = 0;
          }
          else
          {
            if ((*(_QWORD *)&v302 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v302 > 0.0)
                v305 = 1;
              else
                v305 = -1;
            }
            else
            {
              v304 = fabs(v302);
              if (v302 > 0.0)
                v305 = 1;
              else
                v305 = -1;
              if (v304 <= *(double *)&v580 * 2.22044605e-16)
                goto LABEL_464;
            }
            v486 = v305;
          }
          v308 = *(_DWORD *)&v575[26];
          v309 = (uint64_t *)v564[2];
          v310 = (uint64_t *)v564[3];
          v311 = (uint64_t *)sub_18D2EE93C((uint64_t)v565);
          *(_QWORD *)&v580 = 0x3FF0000000000000;
          v312 = sub_18D2EEA84(*v309, v309[1], *v310, v310[1], *v311, v311[1], (double *)&v580);
          if (v312 == 0.0)
          {
LABEL_494:
            v313 = 0;
          }
          else if ((*(_QWORD *)&v312 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v312 > 0.0)
              v313 = 1;
            else
              v313 = -1;
          }
          else
          {
            v314 = fabs(v312);
            if (v312 > 0.0)
              v313 = 1;
            else
              v313 = -1;
            if (v314 <= *(double *)&v580 * 2.22044605e-16)
              goto LABEL_494;
          }
          if (v313 * v308 != -1)
          {
            v315 = (uint64_t *)v565[3];
            v316 = (uint64_t *)sub_18D2EE93C((uint64_t)v565);
            v317 = (uint64_t *)sub_18D2EE93C((uint64_t)v564);
            *(_QWORD *)&v580 = 0x3FF0000000000000;
            v318 = sub_18D2EEA84(*v315, v315[1], *v316, v316[1], *v317, v317[1], (double *)&v580);
            if (v318 == 0.0)
              goto LABEL_506;
            if ((*(_QWORD *)&v318 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v318 > 0.0)
                v319 = 1;
              else
                v319 = -1;
            }
            else
            {
              v325 = fabs(v318);
              if (v318 > 0.0)
                v319 = 1;
              else
                v319 = -1;
              if (v325 <= *(double *)&v580 * 2.22044605e-16)
LABEL_506:
                v319 = 0;
            }
            v335 = (uint64_t *)v564[2];
            v336 = (uint64_t *)v564[3];
            v337 = (uint64_t *)sub_18D2EE93C((uint64_t)v564);
            *(_QWORD *)&v580 = 0x3FF0000000000000;
            v338 = sub_18D2EEA84(*v335, v335[1], *v336, v336[1], *v337, v337[1], (double *)&v580);
            if (v338 == 0.0)
            {
LABEL_539:
              v339 = 0;
            }
            else if ((*(_QWORD *)&v338 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v338 > 0.0)
                v339 = 1;
              else
                v339 = -1;
            }
            else
            {
              v340 = fabs(v338);
              if (v338 > 0.0)
                v339 = 1;
              else
                v339 = -1;
              if (v340 <= *(double *)&v580 * 2.22044605e-16)
                goto LABEL_539;
            }
            v341 = (uint64_t *)v565[2];
            v342 = (uint64_t *)v565[3];
            v343 = (uint64_t *)sub_18D2EE93C((uint64_t)v565);
            *(_QWORD *)&v580 = 0x3FF0000000000000;
            v344 = sub_18D2EEA84(*v341, v341[1], *v342, v342[1], *v343, v343[1], (double *)&v580);
            v14 = a4;
            v103 = v504;
            if (v344 == 0.0)
            {
LABEL_550:
              v345 = 0;
            }
            else if ((*(_QWORD *)&v344 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v344 > 0.0)
                v345 = 1;
              else
                v345 = -1;
            }
            else
            {
              v346 = fabs(v344);
              if (v344 > 0.0)
                v345 = 1;
              else
                v345 = -1;
              if (v346 <= *(double *)&v580 * 2.22044605e-16)
                goto LABEL_550;
            }
            if (v313)
              v347 = 1;
            else
              v347 = v345 * v308 == 1;
            v348 = !v347;
            if (v339 != v308 && v339 != v313 && (v313 | v308 || v339 == -1))
            {
              if (v345 == 1)
                v354 = 2;
              else
                v354 = 1;
              if (v313 == 1 || v308 == 1)
                v356 = 1;
              else
                v356 = 2;
              if (v348)
                v356 = 3;
              *(_DWORD *)&v591[40] = v354;
              DWORD2(v595) = v356;
              v85 = a7;
              v13 = a6;
              v89 = v492;
              v88 = v506;
              if ((v348 & 1) != 0)
                goto LABEL_885;
            }
            else
            {
              if (v319)
                v349 = 1;
              else
                v349 = v348;
              if ((v349 & 1) == 0)
              {
                *(_DWORD *)&v591[40] = 4;
                DWORD2(v595) = 4;
                v85 = a7;
                v13 = a6;
                goto LABEL_720;
              }
              v85 = a7;
              v13 = a6;
              v88 = v506;
              if (!v486)
              {
                if (v345 == 1)
                  v371 = 2;
                else
                  v371 = 1;
                if (v348)
                  v371 = 3;
                *(_DWORD *)&v591[40] = 3;
                DWORD2(v595) = v371;
                goto LABEL_884;
              }
              if (v486 == v319 && v345 * v486 != -1)
              {
                v350 = v345 == 1;
                if (v345 == 1)
                  v351 = 1;
                else
                  v351 = 2;
                if (v350)
                  v352 = 2;
                else
                  v352 = 1;
                if (v348)
                  v353 = 3;
                else
                  v353 = v352;
                *(_DWORD *)&v591[40] = v351;
                DWORD2(v595) = v353;
                goto LABEL_884;
              }
              if (!(v319 + v345))
              {
                v373 = v345 == 1;
                if (v345 == 1)
                  v374 = 2;
                else
                  v374 = 1;
                if (v373)
                  v375 = 1;
                else
                  v375 = 2;
                *(_DWORD *)&v591[40] = v374;
                DWORD2(v595) = v375;
                v591[20] = 1;
                goto LABEL_884;
              }
              v89 = v492;
              if (v486 != -v345)
                goto LABEL_885;
              if (v345 == 1)
                v435 = 2;
              else
                v435 = 1;
              *(_DWORD *)&v591[40] = v435;
              DWORD2(v595) = v435;
              if (v348)
              {
                DWORD2(v595) = 3;
                goto LABEL_885;
              }
            }
            v591[20] = 1;
            goto LABEL_885;
          }
          v320 = (uint64_t *)v564[2];
          v321 = (uint64_t *)v564[3];
          v322 = (uint64_t *)sub_18D2EE93C((uint64_t)v564);
          *(_QWORD *)&v580 = 0x3FF0000000000000;
          v323 = sub_18D2EEA84(*v320, v320[1], *v321, v321[1], *v322, v322[1], (double *)&v580);
          v89 = v492;
          v103 = v504;
          if (v323 == 0.0)
          {
LABEL_508:
            v324 = 0;
          }
          else if ((*(_QWORD *)&v323 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v323 > 0.0)
              v324 = 1;
            else
              v324 = -1;
          }
          else
          {
            v326 = fabs(v323);
            if (v323 > 0.0)
              v324 = 1;
            else
              v324 = -1;
            if (v326 <= *(double *)&v580 * 2.22044605e-16)
              goto LABEL_508;
          }
          v170 = v324 == v308;
          v88 = v506;
          if (v170)
          {
            if (v486)
            {
              if (v486 != v313)
                goto LABEL_664;
              if (v313 == 1)
                v376 = 1;
              else
                v376 = 2;
              *(_DWORD *)&v591[40] = v376;
              DWORD2(v595) = v376;
LABEL_818:
              v591[20] = 1;
              goto LABEL_826;
            }
            if (v313 == 1)
              v385 = 1;
            else
              v385 = 2;
            *(_DWORD *)&v591[40] = 3;
          }
          else
          {
LABEL_664:
            if (v324 != v313)
              goto LABEL_819;
            v377 = (uint64_t *)v565[3];
            v378 = (uint64_t *)sub_18D2EE93C((uint64_t)v565);
            v379 = (uint64_t *)sub_18D2EE93C((uint64_t)v564);
            *(_QWORD *)&v580 = 0x3FF0000000000000;
            v381 = *v377;
            v380 = v377[1];
            v88 = v506;
            v382 = *v378;
            v383 = v378[1];
            v89 = v492;
            v384 = sub_18D2EEA84(v381, v380, v382, v383, *v379, v379[1], (double *)&v580);
            if (v384 == 0.0)
              goto LABEL_666;
            if ((*(_QWORD *)&v384 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v384 > 0.0)
                v412 = 1;
              else
                v412 = -1;
              goto LABEL_810;
            }
            v411 = fabs(v384);
            if (v384 > 0.0)
              v412 = 1;
            else
              v412 = -1;
            if (v411 > *(double *)&v580 * 2.22044605e-16)
            {
LABEL_810:
              if (v412 == v313)
              {
                if (v313 == 1)
                  v438 = 1;
                else
                  v438 = 2;
                if (v313 == 1)
                  v439 = 2;
                else
                  v439 = 1;
                *(_DWORD *)&v591[40] = v438;
                DWORD2(v595) = v439;
                goto LABEL_818;
              }
LABEL_819:
              if (v313 == 1)
                v440 = 2;
              else
                v440 = 1;
              if (v313 == 1)
                v441 = 1;
              else
                v441 = 2;
              *(_DWORD *)&v591[40] = v440;
              DWORD2(v595) = v441;
LABEL_826:
              v13 = a6;
              goto LABEL_885;
            }
LABEL_666:
            v385 = 4;
            *(_DWORD *)&v591[40] = 4;
          }
          DWORD2(v595) = v385;
          goto LABEL_826;
        }
        if (v574 == 109)
        {
          *(_DWORD *)&v591[16] = 4;
          *(_OWORD *)v591 = *(_OWORD *)&v568[8];
          v260 = 0;
          v261 = 1;
          if (*(_DWORD *)&v575[38] == 1)
          {
            do
            {
              v262 = v261;
              v263 = *(_DWORD *)&v575[4 * v260 + 34];
              if (v263 == -1)
              {
                v265 = &v591[80 * v260 + 40];
                *((_OWORD *)v265 + 3) = v251;
                *((_QWORD *)v265 + 8) = 0;
              }
              else if (v263 == 1)
              {
                v264 = (int64x2_t *)&v591[80 * v260 + 40];
                v264[3] = vdupq_n_s64(1uLL);
                v264[4].i64[0] = 0x412E848000000000;
              }
              else
              {
                if ((v262 & 1) != 0)
                  v266 = (__int128 *)&v568[40];
                else
                  v266 = &v569;
                v267 = &v591[80 * v260 + 40];
                *((_OWORD *)v267 + 3) = *v266;
                *((_QWORD *)v267 + 8) = *((_QWORD *)v266 + 2);
              }
              v261 = 0;
              v260 = 1;
            }
            while ((v262 & 1) != 0);
            v268 = *(_DWORD *)&v575[26];
            v269 = (uint64_t *)v564[2];
            v270 = (uint64_t *)v564[3];
            v271 = (uint64_t *)sub_18D2EE93C((uint64_t)v565);
            *(_QWORD *)&v580 = 0x3FF0000000000000;
            v272 = sub_18D2EEA84(*v269, v269[1], *v270, v270[1], *v271, v271[1], (double *)&v580);
            if (v272 == 0.0)
            {
LABEL_437:
              v273 = 0;
            }
            else if ((*(_QWORD *)&v272 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v272 > 0.0)
                v273 = 1;
              else
                v273 = -1;
            }
            else
            {
              v306 = fabs(v272);
              if (v272 > 0.0)
                v273 = 1;
              else
                v273 = -1;
              if (v306 <= *(double *)&v580 * 2.22044605e-16)
                goto LABEL_437;
            }
            if (!(v268 + v273))
            {
              v357 = v273 == -1;
              v358 = v273 != -1;
LABEL_613:
              *(_DWORD *)&v591[80 * v358 + 40] = 1;
              *(_DWORD *)&v591[80 * v357 + 40] = 2;
              v88 = v506;
              v14 = a4;
              v89 = v492;
              v103 = v504;
              goto LABEL_885;
            }
            v359 = (uint64_t *)v565[2];
            v360 = (uint64_t *)v565[3];
            v361 = (uint64_t *)sub_18D2EE93C((uint64_t)v565);
            *(_QWORD *)&v580 = 0x3FF0000000000000;
            v362 = sub_18D2EEA84(*v359, v359[1], *v360, v360[1], *v361, v361[1], (double *)&v580);
            if (v362 == 0.0)
            {
LABEL_607:
              v363 = 0;
            }
            else if ((*(_QWORD *)&v362 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v362 > 0.0)
                v363 = 1;
              else
                v363 = -1;
            }
            else
            {
              v369 = fabs(v362);
              if (v362 > 0.0)
                v363 = 1;
              else
                v363 = -1;
              if (v369 <= *(double *)&v580 * 2.22044605e-16)
                goto LABEL_607;
            }
            v386 = (uint64_t *)v565[3];
            v387 = (uint64_t *)sub_18D2EE93C((uint64_t)v565);
            v388 = (uint64_t *)v564[3];
            *(_QWORD *)&v580 = 0x3FF0000000000000;
            v389 = sub_18D2EEA84(*v386, v386[1], *v387, v387[1], *v388, v388[1], (double *)&v580);
            v103 = v504;
            if (v389 == 0.0)
            {
LABEL_676:
              v390 = 0;
            }
            else if ((*(_QWORD *)&v389 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              if (v389 > 0.0)
                v390 = 1;
              else
                v390 = -1;
            }
            else
            {
              v391 = fabs(v389);
              if (v389 > 0.0)
                v390 = 1;
              else
                v390 = -1;
              if (v391 <= *(double *)&v580 * 2.22044605e-16)
                goto LABEL_676;
            }
            if ((v273 & v268) != 0xFFFFFFFF || v363 != 1)
            {
              if (v268 == 1 && v273 == 1 && v363 == -1)
              {
                if (v390 == -1)
                  v397 = 1;
                else
                  v397 = 3;
                *(_DWORD *)&v591[40] = 1;
LABEL_717:
                DWORD2(v595) = v397;
LABEL_718:
                v591[20] = 1;
LABEL_719:
                v13 = a6;
                v14 = a4;
LABEL_720:
                v89 = v492;
LABEL_721:
                v88 = v506;
                goto LABEL_885;
              }
              if (v268 == v273 && v268 == v363)
              {
                v398 = (v363 == 1) ^ (v390 == 0);
                if (v390 * v268 == -1)
                {
                  v400 = (uint64_t *)v564[2];
                  v399 = (uint64_t *)v564[3];
                  v401 = (uint64_t *)v565[3];
                  v402 = *v400;
                  v403 = v400[1];
                  v404 = *v399;
                  v405 = v399[1];
                  v406 = *v401;
                  v407 = v401[1];
                  *(_QWORD *)&v580 = 0x3FF0000000000000;
                  v408 = sub_18D2EEA84(v402, v403, v404, v405, v406, v407, (double *)&v580);
                  v13 = a6;
                  if (v408 == 0.0)
                    goto LABEL_710;
                  if ((*(_QWORD *)&v408 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v408 > 0.0)
                      v409 = 1;
                    else
                      v409 = -1;
                  }
                  else
                  {
                    v454 = fabs(v408);
                    if (v408 > 0.0)
                      v409 = 1;
                    else
                      v409 = -1;
                    if (v454 <= *(double *)&v580 * 2.22044605e-16)
LABEL_710:
                      v409 = 0;
                  }
                  v456 = (uint64_t *)v564[3];
                  v457 = (uint64_t *)sub_18D2EE93C((uint64_t)v564);
                  v458 = (uint64_t *)v565[3];
                  *(_QWORD *)&v580 = 0x3FF0000000000000;
                  v459 = sub_18D2EEA84(*v456, v456[1], *v457, v457[1], *v458, v458[1], (double *)&v580);
                  if (v459 == 0.0)
                  {
LABEL_853:
                    v460 = 0;
                  }
                  else if ((*(_QWORD *)&v459 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
                  {
                    if (v459 > 0.0)
                      v460 = 1;
                    else
                      v460 = -1;
                  }
                  else
                  {
                    v461 = fabs(v459);
                    if (v459 > 0.0)
                      v460 = 1;
                    else
                      v460 = -1;
                    if (v461 <= *(double *)&v580 * 2.22044605e-16)
                      goto LABEL_853;
                  }
                  v468 = v460 * v409;
                  v103 = v504;
                  v88 = v506;
                  if (v468 == 1)
                  {
                    v469 = (uint64_t)v564;
                    v470 = (uint64_t)v565;
LABEL_881:
                    if (sub_18D2F0450(**(_QWORD **)(v469 + 24), *(_QWORD *)(*(_QWORD *)(v469 + 24) + 8), **(_QWORD **)(v470 + 16), *(_QWORD *)(*(_QWORD *)(v470 + 16) + 8), **(_QWORD **)(v470 + 24), *(_QWORD *)(*(_QWORD *)(v470 + 24) + 8))* v390 == -1)v398 ^= 1u;
                  }
                  goto LABEL_883;
                }
LABEL_732:
                v13 = a6;
                v88 = v506;
                goto LABEL_883;
              }
              if (!v273)
              {
                v89 = v492;
                if (v268 != v363)
                {
                  if (v363 == 1)
                    v436 = 2;
                  else
                    v436 = 1;
                  *(_DWORD *)&v591[40] = v436;
                  v437 = 3;
LABEL_831:
                  DWORD2(v595) = v437;
LABEL_836:
                  v13 = a6;
                  v14 = a4;
                  goto LABEL_721;
                }
                goto LABEL_830;
              }
              goto LABEL_806;
            }
LABEL_716:
            v397 = 2;
            *(_DWORD *)&v591[40] = 2;
            goto LABEL_717;
          }
          do
          {
            v274 = v261;
            v275 = *(_DWORD *)&v575[4 * v260 + 34];
            if (v275 == -1)
            {
              v277 = &v591[80 * v260 + 40];
              *((_OWORD *)v277 + 3) = v251;
              *((_QWORD *)v277 + 8) = 0;
            }
            else if (v275 == 1)
            {
              v276 = (int64x2_t *)&v591[80 * v260 + 40];
              v276[3] = vdupq_n_s64(1uLL);
              v276[4].i64[0] = 0x412E848000000000;
            }
            else
            {
              if ((v274 & 1) != 0)
                v278 = (__int128 *)&v568[40];
              else
                v278 = &v569;
              v279 = &v591[80 * v260 + 40];
              *((_OWORD *)v279 + 3) = *v278;
              *((_QWORD *)v279 + 8) = *((_QWORD *)v278 + 2);
            }
            v261 = 0;
            v260 = 1;
          }
          while ((v274 & 1) != 0);
          v280 = *(_DWORD *)&v575[18];
          v281 = (uint64_t *)v566[2];
          v282 = (uint64_t *)v566[3];
          v283 = (uint64_t *)sub_18D2EE93C((uint64_t)v567);
          *(_QWORD *)&v580 = 0x3FF0000000000000;
          v284 = sub_18D2EEA84(*v281, v281[1], *v282, v282[1], *v283, v283[1], (double *)&v580);
          if (v284 == 0.0)
          {
LABEL_448:
            v285 = 0;
          }
          else if ((*(_QWORD *)&v284 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v284 > 0.0)
              v285 = 1;
            else
              v285 = -1;
          }
          else
          {
            v307 = fabs(v284);
            if (v284 > 0.0)
              v285 = 1;
            else
              v285 = -1;
            if (v307 <= *(double *)&v580 * 2.22044605e-16)
              goto LABEL_448;
          }
          if (!(v280 + v285))
          {
            v357 = v285 != -1;
            v358 = v285 == -1;
            goto LABEL_613;
          }
          v364 = (uint64_t *)v567[2];
          v365 = (uint64_t *)v567[3];
          v366 = (uint64_t *)sub_18D2EE93C((uint64_t)v567);
          *(_QWORD *)&v580 = 0x3FF0000000000000;
          v367 = sub_18D2EEA84(*v364, v364[1], *v365, v365[1], *v366, v366[1], (double *)&v580);
          if (v367 == 0.0)
          {
LABEL_615:
            v368 = 0;
          }
          else if ((*(_QWORD *)&v367 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v367 > 0.0)
              v368 = 1;
            else
              v368 = -1;
          }
          else
          {
            v370 = fabs(v367);
            if (v367 > 0.0)
              v368 = 1;
            else
              v368 = -1;
            if (v370 <= *(double *)&v580 * 2.22044605e-16)
              goto LABEL_615;
          }
          v392 = (uint64_t *)v567[3];
          v393 = (uint64_t *)sub_18D2EE93C((uint64_t)v567);
          v394 = (uint64_t *)v566[3];
          *(_QWORD *)&v580 = 0x3FF0000000000000;
          v395 = sub_18D2EEA84(*v392, v392[1], *v393, v393[1], *v394, v394[1], (double *)&v580);
          v103 = v504;
          if (v395 == 0.0)
          {
LABEL_687:
            v390 = 0;
          }
          else if ((*(_QWORD *)&v395 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v395 > 0.0)
              v390 = 1;
            else
              v390 = -1;
          }
          else
          {
            v396 = fabs(v395);
            if (v395 > 0.0)
              v390 = 1;
            else
              v390 = -1;
            if (v396 <= *(double *)&v580 * 2.22044605e-16)
              goto LABEL_687;
          }
          if ((v285 & v280) == 0xFFFFFFFF && v368 == 1)
            goto LABEL_716;
          if (v280 == 1 && v285 == 1 && v368 == -1)
          {
            if (v390 == -1)
              v410 = 1;
            else
              v410 = 3;
            *(_DWORD *)&v591[40] = v410;
            DWORD2(v595) = 1;
            goto LABEL_718;
          }
          if (v280 != v285 || v280 != v368)
          {
            if (!v285)
            {
              v89 = v492;
              if (v280 != v368)
              {
                if (v368 == 1)
                  v453 = 2;
                else
                  v453 = 1;
                DWORD2(v595) = v453;
                *(_DWORD *)&v591[40] = 3;
                goto LABEL_836;
              }
LABEL_830:
              v437 = 4;
              *(_DWORD *)&v591[40] = 4;
              goto LABEL_831;
            }
LABEL_806:
            *(_DWORD *)&v591[16] = 8;
            goto LABEL_719;
          }
          v398 = (v368 == 1) ^ (v390 != 0);
          if (v390 * v280 != -1)
            goto LABEL_732;
          v443 = (uint64_t *)v566[2];
          v442 = (uint64_t *)v566[3];
          v444 = (uint64_t *)v567[3];
          v445 = *v443;
          v446 = v443[1];
          v447 = *v442;
          v448 = v442[1];
          v449 = *v444;
          v450 = v444[1];
          *(_QWORD *)&v580 = 0x3FF0000000000000;
          v451 = sub_18D2EEA84(v445, v446, v447, v448, v449, v450, (double *)&v580);
          v13 = a6;
          if (v451 == 0.0)
          {
LABEL_828:
            v452 = 0;
          }
          else if ((*(_QWORD *)&v451 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v451 > 0.0)
              v452 = 1;
            else
              v452 = -1;
          }
          else
          {
            v455 = fabs(v451);
            if (v451 > 0.0)
              v452 = 1;
            else
              v452 = -1;
            if (v455 <= *(double *)&v580 * 2.22044605e-16)
              goto LABEL_828;
          }
          v462 = (uint64_t *)v566[3];
          v463 = (uint64_t *)sub_18D2EE93C((uint64_t)v566);
          v464 = (uint64_t *)v567[3];
          *(_QWORD *)&v580 = 0x3FF0000000000000;
          v465 = sub_18D2EEA84(*v462, v462[1], *v463, v463[1], *v464, v464[1], (double *)&v580);
          if (v465 == 0.0)
          {
LABEL_864:
            v466 = 0;
          }
          else if ((*(_QWORD *)&v465 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v465 > 0.0)
              v466 = 1;
            else
              v466 = -1;
          }
          else
          {
            v467 = fabs(v465);
            if (v465 > 0.0)
              v466 = 1;
            else
              v466 = -1;
            if (v467 <= *(double *)&v580 * 2.22044605e-16)
              goto LABEL_864;
          }
          v471 = v466 * v452;
          v103 = v504;
          v88 = v506;
          if (v471 == 1)
          {
            v469 = (uint64_t)v566;
            v470 = (uint64_t)v567;
            goto LABEL_881;
          }
LABEL_883:
          *(_DWORD *)&v591[80 * v398 + 40] = 1;
          *(_DWORD *)&v591[80 * (v398 ^ 1) + 40] = 2;
          v591[20] = 1;
          v14 = a4;
LABEL_884:
          v89 = v492;
          goto LABEL_885;
        }
        goto LABEL_465;
      }
      if (v574 != 99)
      {
        if (v574 == 105)
        {
          *(_DWORD *)&v591[16] = 2;
          if (!*(_QWORD *)v568)
            goto LABEL_893;
          *(_OWORD *)v591 = *(_OWORD *)&v568[8];
          *(_OWORD *)&v594[8] = *(_OWORD *)&v568[40];
          *(_QWORD *)&v594[24] = *(_QWORD *)&v568[56];
          *(_OWORD *)&v598[8] = v569;
          *(_QWORD *)&v598[24] = v570;
          v259 = *(_DWORD *)&v575[26] == 1;
          *(_DWORD *)&v591[80 * (*(_DWORD *)&v575[26] != 1) + 40] = 1;
          *(_DWORD *)&v591[80 * v259 + 40] = 2;
          goto LABEL_885;
        }
LABEL_465:
        if (v574 == 101 && !HIBYTE(v574))
        {
          sub_18D2EE36C((uint64_t)v591, (uint64_t)v568, (uint64_t)&v563);
LABEL_885:
          *(_QWORD *)&v580 = a12;
          sub_18D2EE15C((char ***)&v580, (__int128 *)v591);
          goto LABEL_238;
        }
        goto LABEL_238;
      }
      if (!HIBYTE(v574))
      {
        if (!*(_DWORD *)&v575[34])
        {
          sub_18D2EE36C((uint64_t)v591, (uint64_t)v568, (uint64_t)&v563);
          *(_DWORD *)&v591[16] = 5;
          goto LABEL_885;
        }
        if (vabdd_f64(*(double *)&v570, *(double *)&v572[24]) >= 50.0)
        {
          v303 = *(double *)&v570 < *(double *)&v572[24];
        }
        else
        {
          v580 = v569;
          sub_18D2EFCF0((int64_t *)&v580);
          v579 = *(_OWORD *)&v572[8];
          sub_18D2EFCF0((int64_t *)&v579);
          v303 = sub_18D2EFBE8(v580, *((uint64_t *)&v580 + 1), v579, *((uint64_t *)&v579 + 1));
        }
        *(_DWORD *)&v591[16] = 5;
        if (*(_QWORD *)v568 <= (unint64_t)v303)
LABEL_893:
          __assert_rtn("assign_point", "get_turn_info.hpp", 164, "index < info.count");
        *(_OWORD *)v591 = *(_OWORD *)&v568[16 * v303 + 8];
        v328 = &v568[56 * v303];
        *(_OWORD *)&v594[8] = *(_OWORD *)(v328 + 40);
        *(_QWORD *)&v594[24] = *((_QWORD *)v328 + 7);
        *(_OWORD *)&v598[8] = *((_OWORD *)v328 + 4);
        *(_QWORD *)&v598[24] = *((_QWORD *)v328 + 10);
        v329 = *(_DWORD *)&v575[34];
        if (!*(_DWORD *)&v575[34])
          __assert_rtn("apply", "get_turn_info.hpp", 1033, "arrival_p != 0");
        v330 = (uint64_t *)v564[2];
        v331 = (uint64_t *)v564[3];
        v332 = (uint64_t *)sub_18D2EE93C((uint64_t)v564);
        *(_QWORD *)&v580 = 0x3FF0000000000000;
        v333 = sub_18D2EEA84(*v330, v330[1], *v331, v331[1], *v332, v332[1], (double *)&v580);
        if (v333 == 0.0)
        {
LABEL_534:
          v334 = 0;
        }
        else if ((*(_QWORD *)&v333 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v333 > 0.0)
            v334 = 1;
          else
            v334 = -1;
        }
        else
        {
          v372 = fabs(v333);
          if (v333 > 0.0)
            v334 = 1;
          else
            v334 = -1;
          if (v372 <= *(double *)&v580 * 2.22044605e-16)
            goto LABEL_534;
        }
        v418 = (uint64_t *)v565[2];
        v419 = (uint64_t *)v565[3];
        v420 = (uint64_t *)sub_18D2EE93C((uint64_t)v565);
        *(_QWORD *)&v580 = 0x3FF0000000000000;
        v421 = sub_18D2EEA84(*v418, v418[1], *v419, v419[1], *v420, v420[1], (double *)&v580);
        v14 = a4;
        if (v421 == 0.0)
        {
LABEL_757:
          v422 = 0;
        }
        else if ((*(_QWORD *)&v421 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v421 > 0.0)
            v422 = 1;
          else
            v422 = -1;
        }
        else
        {
          v423 = fabs(v421);
          if (v421 > 0.0)
            v422 = 1;
          else
            v422 = -1;
          if (v423 <= *(double *)&v580 * 2.22044605e-16)
            goto LABEL_757;
        }
        if (v329 == 1)
          v424 = v334;
        else
          v424 = v422;
        if (v424 * v329 == 1)
          v425 = 1;
        else
          v425 = 2;
        if (v424 * v329 == 1)
          v426 = 2;
        else
          v426 = 1;
        v427 = v424 == 0;
        if (v424)
          v428 = v425;
        else
          v428 = 4;
        if (v427)
          v429 = 4;
        else
          v429 = v426;
        *(_DWORD *)&v591[40] = v428;
        DWORD2(v595) = v429;
        if (v334)
        {
          v431 = *(double *)&v591[8];
          v430 = *(double *)v591;
          v432 = (*(double *)&v591[8] - *(double *)(*((_QWORD *)&v537 + 1) + 8))
               * (*(double *)&v591[8] - *(double *)(*((_QWORD *)&v537 + 1) + 8))
               + (*(double *)v591 - **((double **)&v537 + 1)) * (*(double *)v591 - **((double **)&v537 + 1));
          v89 = v492;
          v88 = v506;
        }
        else
        {
          v88 = v506;
          if (!v541)
          {
            sub_18D2EE650((uint64_t)v536, *((double **)&v537 + 1), (uint64_t)v538);
            v540 = *(_OWORD *)v538[0];
            v541 = 1;
          }
          v431 = *(double *)&v591[8];
          v430 = *(double *)v591;
          v432 = (*(double *)&v591[8] - *((double *)&v540 + 1)) * (*(double *)&v591[8] - *((double *)&v540 + 1))
               + (*(double *)v591 - *(double *)&v540) * (*(double *)v591 - *(double *)&v540);
          v89 = v492;
        }
        *(double *)&v595 = v432;
        if (v422)
        {
          v433 = *v528;
          v434 = v528[1];
        }
        else
        {
          if (!v532)
          {
            sub_18D2EE650((uint64_t)v526, v528, (uint64_t)v529);
            v531 = *(_OWORD *)v529[0];
            v532 = 1;
            v431 = *(double *)&v591[8];
            v430 = *(double *)v591;
          }
          v434 = *((double *)&v531 + 1);
          v433 = *(double *)&v531;
        }
        v103 = v504;
        v599 = (v431 - v434) * (v431 - v434) + (v430 - v433) * (v430 - v433);
        goto LABEL_885;
      }
      *(_OWORD *)v589 = v523;
      *(_OWORD *)&v589[16] = v524;
      v590 = v525;
      *(_OWORD *)&v585[16] = v520;
      v586 = v521;
      v588 = *(_OWORD *)&v522[16];
      v587 = *(_OWORD *)v522;
      v582 = v517;
      v583 = *(_OWORD *)v518;
      *(_OWORD *)v585 = v519;
      v584 = *(_OWORD *)&v518[16];
      v581 = v516;
      v580 = v515;
      v286 = *(_DWORD *)&v575[38];
      if (*(_DWORD *)&v575[34] == 1)
      {
        v287 = (uint64_t *)v564[2];
        v288 = (uint64_t *)v564[3];
        v289 = (uint64_t *)sub_18D2EE93C((uint64_t)v564);
        *(_QWORD *)&v579 = 0x3FF0000000000000;
        v290 = sub_18D2EEA84(*v287, v287[1], *v288, v288[1], *v289, v289[1], (double *)&v579);
        if (v290 == 0.0
          || (*(_QWORD *)&v290 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
          && fabs(v290) <= *(double *)&v579 * 2.22044605e-16)
        {
          v89 = v492;
          v103 = v504;
        }
        else
        {
          if (v290 <= 0.0)
            v327 = 1;
          else
            v327 = 2;
          v89 = v492;
          v103 = v504;
          DWORD2(v586) = 3;
          DWORD2(v582) = v327;
          LODWORD(v581) = 5;
          if (*(_QWORD *)v568 <= 1uLL)
            goto LABEL_893;
          v580 = *(_OWORD *)&v568[24];
          *(_OWORD *)&v585[8] = v571;
          *(_QWORD *)&v585[24] = *(_QWORD *)v572;
          *(_OWORD *)&v589[8] = *(_OWORD *)&v572[8];
          *(_QWORD *)&v589[24] = *(_QWORD *)&v572[24];
          *(_QWORD *)&v579 = a12;
          sub_18D2EE15C((char ***)&v579, &v580);
        }
      }
      if (v286 == 1)
      {
        v413 = (uint64_t *)v565[2];
        v414 = (uint64_t *)v565[3];
        v415 = (uint64_t *)sub_18D2EE93C((uint64_t)v565);
        *(_QWORD *)&v579 = 0x3FF0000000000000;
        v416 = sub_18D2EEA84(*v413, v413[1], *v414, v414[1], *v415, v415[1], (double *)&v579);
        if (v416 == 0.0
          || (*(_QWORD *)&v416 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
          && fabs(v416) <= *(double *)&v579 * 2.22044605e-16)
        {
          v89 = v492;
        }
        else
        {
          if (v416 <= 0.0)
            v417 = 1;
          else
            v417 = 2;
          v89 = v492;
          DWORD2(v586) = v417;
          DWORD2(v582) = 3;
          LODWORD(v581) = 5;
          if (!*(_QWORD *)v568)
            goto LABEL_893;
          v580 = *(_OWORD *)&v568[8];
          *(_OWORD *)&v585[8] = *(_OWORD *)&v568[40];
          *(_QWORD *)&v585[24] = *(_QWORD *)&v568[56];
          *(_OWORD *)&v589[8] = v569;
          *(_QWORD *)&v589[24] = v570;
          *(_QWORD *)&v579 = a12;
          sub_18D2EE15C((char ***)&v579, &v580);
        }
      }
      v88 = v506;
LABEL_238:
      v191 = a12[1];
      if (0x8F5C28F5C28F5C29 * ((v191 - *a12) >> 3) < 0x8F5C28F5C28F5C29 * ((v503 - v502) >> 3))
        __assert_rtn("pos", "range.hpp", 96, "i <= boost::size(rng)");
      v192 = *a12 + 8 * ((v503 - v502) >> 3);
      *a13 = v192 != v191;
      if (v192 != v191)
        return 0;
LABEL_241:
      v64 = v511 + 2;
      ++v88;
      v193 = v514 + 2;
      if (v514 + 2 == v85)
        v193 = &v13[2 * (v514 != v13)];
      v514 = v193;
      ++v508;
      v83 = v103 + 2;
      if (v103 == v494)
        goto LABEL_887;
    }
    v485 = 0;
    goto LABEL_255;
  }
  return v42;
}

char ***sub_18D2EE15C(char ***a1, __int128 *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v17 = *v4;
    v18 = 0x8F5C28F5C28F5C29 * ((v6 - *v4) >> 3);
    v19 = v18 + 1;
    if (v18 + 1 > 0x147AE147AE147AELL)
      sub_18D07AFE4();
    v20 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v5 - (_QWORD)v17) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0xA3D70A3D70A3D7)
      v21 = 0x147AE147AE147AELL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 > 0x147AE147AE147AELL)
        sub_18D0788A0();
      v22 = (char *)operator new(200 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = a2[11];
    v24 = &v22[200 * v18];
    *((_OWORD *)v24 + 10) = a2[10];
    *((_OWORD *)v24 + 11) = v23;
    *((_QWORD *)v24 + 24) = *((_QWORD *)a2 + 24);
    v25 = a2[7];
    *((_OWORD *)v24 + 6) = a2[6];
    *((_OWORD *)v24 + 7) = v25;
    v26 = a2[9];
    *((_OWORD *)v24 + 8) = a2[8];
    *((_OWORD *)v24 + 9) = v26;
    v27 = a2[3];
    *((_OWORD *)v24 + 2) = a2[2];
    *((_OWORD *)v24 + 3) = v27;
    v28 = a2[5];
    *((_OWORD *)v24 + 4) = a2[4];
    *((_OWORD *)v24 + 5) = v28;
    v30 = *a2;
    v29 = a2[1];
    v16 = v24 + 200;
    *(_OWORD *)v24 = v30;
    *((_OWORD *)v24 + 1) = v29;
    if (v6 != v17)
    {
      do
      {
        *(_OWORD *)(v24 - 200) = *(_OWORD *)(v6 - 200);
        v31 = *(_OWORD *)(v6 - 184);
        v32 = *(_OWORD *)(v6 - 168);
        v33 = *(_OWORD *)(v6 - 152);
        *(_OWORD *)(v24 - 136) = *(_OWORD *)(v6 - 136);
        *(_OWORD *)(v24 - 152) = v33;
        *(_OWORD *)(v24 - 168) = v32;
        *(_OWORD *)(v24 - 184) = v31;
        v34 = *(_OWORD *)(v6 - 120);
        v35 = *(_OWORD *)(v6 - 104);
        v36 = *(_OWORD *)(v6 - 88);
        *(_OWORD *)(v24 - 72) = *(_OWORD *)(v6 - 72);
        *(_OWORD *)(v24 - 88) = v36;
        *(_OWORD *)(v24 - 104) = v35;
        *(_OWORD *)(v24 - 120) = v34;
        v37 = *(_OWORD *)(v6 - 56);
        v38 = *(_OWORD *)(v6 - 40);
        v39 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v24 - 24) = v39;
        *(_OWORD *)(v24 - 40) = v38;
        *(_OWORD *)(v24 - 56) = v37;
        v24 -= 200;
        v6 -= 200;
      }
      while (v6 != v17);
      v6 = *v4;
    }
    *v4 = v24;
    v4[1] = v16;
    v4[2] = &v22[200 * v21];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v9 = a2[4];
    *((_OWORD *)v6 + 3) = a2[3];
    *((_OWORD *)v6 + 4) = v9;
    *((_OWORD *)v6 + 1) = v7;
    *((_OWORD *)v6 + 2) = v8;
    v10 = a2[5];
    v11 = a2[6];
    v12 = a2[8];
    *((_OWORD *)v6 + 7) = a2[7];
    *((_OWORD *)v6 + 8) = v12;
    *((_OWORD *)v6 + 5) = v10;
    *((_OWORD *)v6 + 6) = v11;
    v13 = a2[9];
    v14 = a2[10];
    v15 = a2[11];
    *((_QWORD *)v6 + 24) = *((_QWORD *)a2 + 24);
    *((_OWORD *)v6 + 10) = v14;
    *((_OWORD *)v6 + 11) = v15;
    *((_OWORD *)v6 + 9) = v13;
    v16 = v6 + 200;
  }
  v4[1] = v16;
  return a1;
}

void sub_18D2EE36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  double v16;
  int v17;
  double v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  double v23;
  int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  double v31;
  int v32;
  double v33;
  int v34;
  BOOL v35;
  int v36;
  __int128 v37;
  __int128 v38;

  v6 = *(double *)(a2 + 80);
  v7 = *(double *)(a2 + 136);
  if (vabdd_f64(v6, v7) >= 50.0)
  {
    v8 = v6 < v7;
  }
  else
  {
    v38 = *(_OWORD *)(a2 + 64);
    sub_18D2EFCF0((int64_t *)&v38);
    v37 = *(_OWORD *)(a2 + 120);
    sub_18D2EFCF0((int64_t *)&v37);
    v8 = sub_18D2EFBE8(v38, *((uint64_t *)&v38 + 1), v37, *((uint64_t *)&v37 + 1));
  }
  *(_DWORD *)(a1 + 16) = 6;
  if (*(_QWORD *)a2 <= (unint64_t)v8)
    __assert_rtn("assign_point", "get_turn_info.hpp", 164, "index < info.count");
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 16 * v8 + 8);
  v9 = a2 + 56 * v8;
  v10 = *(_OWORD *)(v9 + 40);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v9 + 56);
  *(_OWORD *)(a1 + 88) = v10;
  v11 = *(_OWORD *)(v9 + 64);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(v9 + 80);
  *(_OWORD *)(a1 + 168) = v11;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(uint64_t **)(v12 + 24);
  v14 = (uint64_t *)sub_18D2EE93C(v12);
  v15 = (uint64_t *)sub_18D2EE93C(*(_QWORD *)(a3 + 8));
  *(_QWORD *)&v38 = 0x3FF0000000000000;
  v16 = sub_18D2EEA84(*v13, v13[1], *v14, v14[1], *v15, v15[1], (double *)&v38);
  if (v16 == 0.0)
    goto LABEL_6;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v16 > 0.0)
      v17 = 1;
    else
      v17 = -1;
  }
  else
  {
    v18 = fabs(v16);
    if (v16 > 0.0)
      v17 = 1;
    else
      v17 = -1;
    if (v18 <= *(double *)&v38 * 2.22044605e-16)
LABEL_6:
      v17 = 0;
  }
  v19 = *(_QWORD *)(a3 + 8);
  v20 = *(uint64_t **)(v19 + 16);
  v21 = *(uint64_t **)(v19 + 24);
  v22 = (uint64_t *)sub_18D2EE93C(v19);
  *(_QWORD *)&v38 = 0x3FF0000000000000;
  v23 = sub_18D2EEA84(*v20, v20[1], *v21, v21[1], *v22, v22[1], (double *)&v38);
  if (v23 == 0.0)
  {
LABEL_17:
    v24 = 0;
    goto LABEL_27;
  }
  if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v23 > 0.0)
      v24 = 1;
    else
      v24 = -1;
  }
  else
  {
    v25 = fabs(v23);
    if (v23 > 0.0)
      v24 = 1;
    else
      v24 = -1;
    if (v25 <= *(double *)&v38 * 2.22044605e-16)
      goto LABEL_17;
  }
LABEL_27:
  v27 = *(_QWORD *)(a3 + 8);
  v26 = *(_QWORD *)(a3 + 16);
  v28 = *(uint64_t **)(v27 + 16);
  v29 = *(uint64_t **)(v27 + 24);
  v30 = (uint64_t *)sub_18D2EE93C(v26);
  *(_QWORD *)&v38 = 0x3FF0000000000000;
  v31 = sub_18D2EEA84(*v28, v28[1], *v29, v29[1], *v30, v30[1], (double *)&v38);
  if (v31 == 0.0)
  {
LABEL_28:
    v32 = 0;
    goto LABEL_38;
  }
  if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v33 = fabs(v31);
    if (v31 > 0.0)
      v32 = 1;
    else
      v32 = -1;
    if (v33 > *(double *)&v38 * 2.22044605e-16)
      goto LABEL_38;
    goto LABEL_28;
  }
  if (v31 > 0.0)
    v32 = 1;
  else
    v32 = -1;
LABEL_38:
  if (v17 || v24 != v32)
  {
    if (v32 * v24 == -1)
      v35 = v24 == -1;
    else
      v35 = v17 == -1;
    if (v35)
      v36 = 2;
    else
      v36 = 1;
    *(_DWORD *)(a1 + 40) = v36;
    if (v35)
      v34 = 1;
    else
      v34 = 2;
  }
  else
  {
    v34 = 4;
    *(_DWORD *)(a1 + 40) = 4;
  }
  *(_DWORD *)(a1 + 120) = v34;
}

uint64_t sub_18D2EE650(uint64_t a1, double *a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t result;
  double v33;
  double v34;
  uint64_t v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  double *v53;

  v6 = (double)*(uint64_t *)(a1 + 112) + (a2[1] - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
  if (v6 >= 0.0)
    v7 = 0.5;
  else
    v7 = -0.5;
  v8 = v6 + v7;
  if (v6 + v7 <= -9.22337204e18)
    v9 = 1;
  else
    v9 = 2 * (v6 + v7 >= 9.22337204e18);
  sub_18D2E8EE8(v9);
  v10 = ceil(v8);
  v11 = floor(v8);
  if (v8 >= 0.0)
    v10 = v11;
  v12 = (uint64_t)v10;
  v13 = (double)*(uint64_t *)(a1 + 104) + (*a2 - *(double *)(a1 + 88)) * *(double *)(a1 + 120);
  if (v13 >= 0.0)
    v14 = 0.5;
  else
    v14 = -0.5;
  v15 = v13 + v14;
  if (v13 + v14 <= -9.22337204e18)
    v16 = 1;
  else
    v16 = 2 * (v13 + v14 >= 9.22337204e18);
  sub_18D2E8EE8(v16);
  v17 = ceil(v15);
  v18 = floor(v15);
  if (v15 >= 0.0)
    v17 = v18;
  v19 = (uint64_t)v17;
  v20 = *(double **)a3;
  v21 = (double)*(uint64_t *)(a1 + 112)
      + (*(double *)(*(_QWORD *)a3 + 8) - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
  if (v21 >= 0.0)
    v22 = 0.5;
  else
    v22 = -0.5;
  v23 = v21 + v22;
  if (v21 + v22 <= -9.22337204e18)
    v24 = 1;
  else
    v24 = 2 * (v21 + v22 >= 9.22337204e18);
  sub_18D2E8EE8(v24);
  v25 = ceil(v23);
  v26 = floor(v23);
  if (v23 >= 0.0)
    v27 = v26;
  else
    v27 = v25;
  v28 = (double)*(uint64_t *)(a1 + 104) + (*v20 - *(double *)(a1 + 88)) * *(double *)(a1 + 120);
  if (v28 >= 0.0)
    v29 = 0.5;
  else
    v29 = -0.5;
  v30 = v28 + v29;
  if (v28 + v29 <= -9.22337204e18)
    v31 = 1;
  else
    v31 = 2 * (v28 + v29 >= 9.22337204e18);
  result = sub_18D2E8EE8(v31);
  v33 = ceil(v30);
  v34 = floor(v30);
  if (v30 >= 0.0)
    v33 = v34;
  if (v19 == (uint64_t)v33 && v12 == (uint64_t)v27)
  {
    v36 = -1;
    do
    {
      if ((unint64_t)++v36 >= *(_QWORD *)(*(_QWORD *)a1 + 88))
        break;
      v37 = *(double **)a3;
      v38 = (double *)(*(_QWORD *)a3 + 16);
      *(_QWORD *)a3 = v38;
      if (v38 == *(double **)(a3 + 16))
      {
        v53 = *(double **)(a3 + 8);
        *(_QWORD *)a3 = v53;
        if (*(_BYTE *)(a3 + 24))
        {
          v38 = v53 + 2;
          *(_QWORD *)a3 = v53 + 2;
          if (v37 == v53)
          {
            *(_QWORD *)a3 = v53;
            v38 = v37;
          }
        }
        else
        {
          v38 = v53;
        }
      }
      v39 = (double)*(uint64_t *)(a1 + 112) + (v38[1] - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
      if (v39 >= 0.0)
        v40 = 0.5;
      else
        v40 = -0.5;
      v41 = v39 + v40;
      if (v39 + v40 <= -9.22337204e18)
        v42 = 1;
      else
        v42 = 2 * (v39 + v40 >= 9.22337204e18);
      sub_18D2E8EE8(v42);
      v43 = ceil(v41);
      v44 = floor(v41);
      if (v41 >= 0.0)
        v45 = v44;
      else
        v45 = v43;
      v46 = (double)*(uint64_t *)(a1 + 104) + (*v38 - *(double *)(a1 + 88)) * *(double *)(a1 + 120);
      if (v46 >= 0.0)
        v47 = 0.5;
      else
        v47 = -0.5;
      v48 = v46 + v47;
      if (v46 + v47 <= -9.22337204e18)
        v49 = 1;
      else
        v49 = 2 * (v46 + v47 >= 9.22337204e18);
      result = sub_18D2E8EE8(v49);
      v50 = ceil(v48);
      v51 = floor(v48);
      if (v48 >= 0.0)
        v50 = v51;
    }
    while (v19 == (uint64_t)v50 && v12 == (uint64_t)v45);
  }
  return result;
}

uint64_t sub_18D2EE93C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;

  if (!*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 80))
    {
      sub_18D2EE650(*(_QWORD *)a1, *(double **)(v2 + 24), v2 + 32);
      *(_OWORD *)(v2 + 64) = *(_OWORD *)*(_QWORD *)(v2 + 32);
      *(_BYTE *)(v2 + 80) = 1;
    }
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (double)*(uint64_t *)(v3 + 24) + (*(double *)(v2 + 72) - *(double *)(v3 + 8)) * *(double *)(v3 + 32);
    if (v4 >= 0.0)
      v5 = 0.5;
    else
      v5 = -0.5;
    v6 = v4 + v5;
    if (v4 + v5 <= -9.22337204e18)
      v7 = 1;
    else
      v7 = 2 * (v4 + v5 >= 9.22337204e18);
    sub_18D2E8EE8(v7);
    v8 = ceil(v6);
    v9 = floor(v6);
    if (v6 >= 0.0)
      v8 = v9;
    *(_QWORD *)(a1 + 40) = (uint64_t)v8;
    v10 = (double)*(uint64_t *)(v3 + 16) + (*(double *)(v2 + 64) - *(double *)v3) * *(double *)(v3 + 32);
    if (v10 >= 0.0)
      v11 = 0.5;
    else
      v11 = -0.5;
    v12 = v10 + v11;
    if (v10 + v11 <= -9.22337204e18)
      v13 = 1;
    else
      v13 = 2 * (v10 + v11 >= 9.22337204e18);
    sub_18D2E8EE8(v13);
    v14 = ceil(v12);
    v15 = floor(v12);
    if (v12 >= 0.0)
      v14 = v15;
    *(_QWORD *)(a1 + 32) = (uint64_t)v14;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1 + 32;
}

double sub_18D2EEA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  double v18[2];
  double v19[2];
  double v20[2];
  double v21;
  double v22[2];
  double v23[2];
  double v24[2];
  double v25[2];
  double v26[2];
  double v27[2];

  v20[0] = (double)a1;
  v20[1] = (double)a2;
  v19[0] = (double)a3;
  v19[1] = (double)a4;
  v18[0] = (double)a5;
  v18[1] = (double)a6;
  v7 = (double)a1 - (double)a5;
  v27[0] = v7;
  v8 = (double)a4 - (double)a6;
  v26[0] = v8;
  v9 = (double)a2 - (double)a6;
  v25[0] = v9;
  v10 = (double)a3 - (double)a5;
  v24[0] = v10;
  v11 = vabdd_f64((double)a1, (double)a5);
  v12 = vabdd_f64((double)a4, (double)a6);
  v13 = vabdd_f64((double)a2, (double)a6);
  v14 = vabdd_f64((double)a3, (double)a5);
  if (v11 < v12)
    v11 = v12;
  if (v11 < v13)
    v11 = v13;
  if (v11 < v14)
    v11 = v14;
  if (v11 < 1.0)
    v11 = 1.0;
  *a7 = v11;
  v15 = v7 * v8;
  v23[0] = v7 * v8;
  v16 = v10 * v9;
  result = v7 * v8 - v10 * v9;
  v21 = fabs(v7 * v8) + fabs(v10 * v9);
  v22[0] = v10 * v9;
  if (vabdd_f64(v7 * v8, v10 * v9) < v21 * 3.33066907e-16 && (v15 <= 0.0 || v16 > 0.0) && (v15 >= 0.0 || v16 < 0.0))
    return sub_18D2659EC(v20, v19, v18, v27, v26, v25, v24, v23, v22, &v21);
  return result;
}

__n128 sub_18D2EEBA0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  __int128 *v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 v12;
  uint64_t v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int16 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  double v36;
  double v37;
  _BYTE v38[32];
  _BYTE v39[32];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE v46[6];
  _BYTE v47[42];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = a3 - a4;
  v7 = a5 - a4;
  if (a5 - a4 < 0)
  {
    v6 = a4 - a3;
    v7 = a4 - a5;
    goto LABEL_5;
  }
  if (v7)
  {
LABEL_5:
    v8 = (double)v6 * 1000000.0 / (double)v7;
    goto LABEL_6;
  }
  v8 = 0.0;
LABEL_6:
  if (v6 < 0 || v6 > (unint64_t)v7)
  {
    *(_QWORD *)v38 = 0;
    v13 = 40;
    do
    {
      v14 = &v38[v13];
      *(_OWORD *)v14 = xmmword_18D348770;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 3) = 0;
      *((_QWORD *)v14 + 4) = 1;
      *((_QWORD *)v14 + 5) = 0;
      v14[48] = 0;
      v13 += 56;
    }
    while (v14 + 56 != v46);
    memset(&v47[2], 0, 32);
    v15 = v43;
    *(_OWORD *)(a1 + 96) = v42;
    *(_OWORD *)(a1 + 112) = v15;
    *(_OWORD *)(a1 + 128) = v44;
    v16 = *(_OWORD *)&v39[16];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v39;
    *(_OWORD *)(a1 + 48) = v16;
    v17 = v41;
    *(_OWORD *)(a1 + 64) = v40;
    *(_OWORD *)(a1 + 80) = v17;
    v18 = *(_OWORD *)&v38[16];
    *(_OWORD *)a1 = *(_OWORD *)v38;
    *(_OWORD *)(a1 + 16) = v18;
    v19 = *(_OWORD *)&v47[16];
    *(_OWORD *)(a1 + 154) = *(_OWORD *)v47;
    *(_QWORD *)&v47[34] = 0;
    *(_QWORD *)(a1 + 144) = v45;
    v20 = 100;
  }
  else
  {
    v9 = (__int128 *)&v39[8];
    v10 = 40;
    do
    {
      v11 = &v38[v10];
      *(_OWORD *)v11 = xmmword_18D348770;
      *((_QWORD *)v11 + 2) = 0;
      *((_QWORD *)v11 + 3) = 0;
      *((_QWORD *)v11 + 4) = 1;
      *((_QWORD *)v11 + 5) = 0;
      v11[48] = 0;
      v10 += 56;
    }
    while (v11 + 56 != v46);
    *(_QWORD *)v38 = 1;
    *(_OWORD *)&v38[8] = *a2;
    v12 = atomic_load((unsigned __int8 *)&qword_1ECF24940);
    if (a6)
    {
      if ((v12 & 1) == 0)
      {
        v26 = a1;
        v27 = v6;
        v28 = v7;
        v36 = v8;
        v29 = __cxa_guard_acquire(&qword_1ECF24940);
        v8 = v36;
        v7 = v28;
        v6 = v27;
        v30 = v29;
        a1 = v26;
        if (v30)
        {
          xmmword_1ECF24950 = xmmword_18D348770;
          qword_1ECF24960 = 0;
          __cxa_guard_release(&qword_1ECF24940);
          v8 = v36;
          v7 = v28;
          v6 = v27;
          a1 = v26;
        }
      }
      *(_OWORD *)&v39[8] = xmmword_1ECF24950;
      *(_QWORD *)&v39[24] = qword_1ECF24960;
      BYTE8(v41) = 1;
      v9 = &v40;
    }
    else
    {
      if ((v12 & 1) == 0)
      {
        v31 = a1;
        v32 = v6;
        v33 = v7;
        v37 = v8;
        v34 = __cxa_guard_acquire(&qword_1ECF24940);
        v9 = (__int128 *)&v39[8];
        v8 = v37;
        v7 = v33;
        v6 = v32;
        v35 = v34;
        a1 = v31;
        if (v35)
        {
          xmmword_1ECF24950 = xmmword_18D348770;
          qword_1ECF24960 = 0;
          __cxa_guard_release(&qword_1ECF24940);
          v9 = (__int128 *)&v39[8];
          v8 = v37;
          v7 = v33;
          v6 = v32;
          a1 = v31;
        }
      }
      v40 = xmmword_1ECF24950;
      *(_QWORD *)&v41 = qword_1ECF24960;
      BYTE8(v41) = 1;
    }
    *(_QWORD *)v9 = v6;
    *((_QWORD *)v9 + 1) = v7;
    *((double *)v9 + 2) = v8;
    memset(&v47[2], 0, 32);
    v21 = v43;
    *(_OWORD *)(a1 + 96) = v42;
    *(_OWORD *)(a1 + 112) = v21;
    *(_OWORD *)(a1 + 128) = v44;
    v22 = *(_OWORD *)&v39[16];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v39;
    *(_OWORD *)(a1 + 48) = v22;
    v23 = v41;
    *(_OWORD *)(a1 + 64) = v40;
    *(_OWORD *)(a1 + 80) = v23;
    v24 = *(_OWORD *)&v38[16];
    *(_OWORD *)a1 = *(_OWORD *)v38;
    *(_OWORD *)(a1 + 16) = v24;
    v19 = *(_OWORD *)&v47[16];
    *(_OWORD *)(a1 + 154) = *(_OWORD *)v47;
    *(_QWORD *)&v47[34] = 0;
    *(_QWORD *)(a1 + 144) = v45;
    v20 = 48;
  }
  *(_WORD *)(a1 + 152) = v20;
  *(_OWORD *)(a1 + 170) = v19;
  result = *(__n128 *)&v47[26];
  *(_OWORD *)(a1 + 180) = *(_OWORD *)&v47[26];
  return result;
}

void sub_18D2EEEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  double *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  double *v29;
  uint64_t *v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  _BYTE *v37;
  int v38;
  _QWORD *v39;
  unsigned __int8 v40;
  unsigned int v41;
  _BYTE *v42;
  _QWORD *v43;
  _BYTE *v44;
  uint64_t v45;
  double v46;
  uint64_t *v47;
  _BYTE *v48;
  _QWORD *v49;
  _BYTE *v50;
  unsigned __int8 v51;
  _BYTE *v52;
  _BYTE *v53;
  _QWORD *v54;
  _BYTE *v55;
  uint64_t v56;
  double v57;
  uint64_t *v58;
  int v59;
  unsigned int v60;
  int v61;
  char v62;
  uint64_t v63;
  _BYTE *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  BOOL v79;
  unsigned int v80;
  _BOOL4 v81;
  _BOOL4 v82;
  int v83;
  unsigned int v84;
  int v85;
  int v87;
  _BOOL4 v88;
  _BOOL4 v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  double v134;
  double v135;
  double v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  double v152;
  uint64_t v153;
  double v154;
  uint64_t v155;
  _BYTE v156[96];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  int64_t v161[10];
  _BYTE v162[48];
  __int128 v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v8 = a5 - a4;
  v9 = a7 - a6;
  v10 = a4 - a6;
  if (a7 - a6 < 0)
  {
    v10 = a6 - a4;
    v14 = a6 - a7;
    v11 = (double)(a6 - a7);
    v12 = (double)(a6 - a4) * 1000000.0 / v11;
    v13 = a6 - a5;
    goto LABEL_5;
  }
  if (v9)
  {
    v11 = (double)v9;
    v12 = (double)v10 * 1000000.0 / (double)v9;
    v13 = a5 - a6;
    v14 = a7 - a6;
LABEL_5:
    v15 = (double)v13 * 1000000.0 / v11;
    goto LABEL_7;
  }
  v14 = 0;
  v13 = a5 - a6;
  v12 = 0.0;
  v15 = 0.0;
LABEL_7:
  v16 = a6 - a4;
  v155 = a5 - a4;
  if (v8 < 0)
  {
    v16 = a4 - a6;
    v17 = a4 - a5;
    v155 = a4 - a5;
  }
  else
  {
    if (!v8)
    {
      v153 = 0;
      v154 = 0.0;
      v18 = a7 - a4;
      v20 = 0.0;
      goto LABEL_16;
    }
    v17 = a5 - a4;
  }
  v154 = (double)v16 * 1000000.0 / (double)v17;
  v18 = a7 - a4;
  if (v8 >= 0)
  {
    v19 = a5 - a4;
  }
  else
  {
    v18 = a4 - a7;
    v19 = a4 - a5;
  }
  v153 = v19;
  v20 = (double)v18 * 1000000.0 / (double)v19;
LABEL_16:
  v152 = v20;
  if (a4 != a6)
  {
    if (a7 == a4)
    {
      v21 = 3;
      goto LABEL_31;
    }
    if (a7 <= a6)
    {
      if (a4 <= a6)
      {
        if (a7 <= a4)
          v21 = 2;
        else
          v21 = 4;
LABEL_31:
        if (a5 == a6)
        {
          v23 = 3;
          v22 = 1;
          goto LABEL_57;
        }
        goto LABEL_33;
      }
    }
    else if (a4 >= a6)
    {
      if (a7 >= a4)
        v21 = 2;
      else
        v21 = 4;
      goto LABEL_31;
    }
    v21 = 0;
    goto LABEL_31;
  }
  v21 = 1;
  v22 = 1;
  v23 = 1;
  if (a5 == a4)
    goto LABEL_57;
LABEL_33:
  if (a5 == a7)
  {
    v22 = 3;
    goto LABEL_45;
  }
  if (a7 > a6)
  {
    if (a5 >= a6)
    {
      if (a5 <= a7)
        v22 = 2;
      else
        v22 = 4;
      goto LABEL_45;
    }
LABEL_41:
    v22 = 0;
    goto LABEL_45;
  }
  if (a5 > a6)
    goto LABEL_41;
  if (a5 >= a7)
    v22 = 2;
  else
    v22 = 4;
LABEL_45:
  if (a4 == a6)
  {
    v23 = 1;
    goto LABEL_57;
  }
  if (a5 > a4)
  {
    if (a6 >= a4)
    {
      if (a5 >= a6)
        v23 = 2;
      else
        v23 = 4;
      goto LABEL_57;
    }
LABEL_53:
    v23 = 0;
    goto LABEL_57;
  }
  if (a6 > a4)
    goto LABEL_53;
  if (a5 <= a6)
    v23 = 2;
  else
    v23 = 4;
LABEL_57:
  if (a7 == a4)
  {
    v24 = 1;
    goto LABEL_71;
  }
  if (a7 == a5)
  {
    v24 = 3;
    goto LABEL_71;
  }
  if (a5 > a4)
  {
    if (a7 >= a4)
    {
      if (a7 <= a5)
        v24 = 2;
      else
        v24 = 4;
      goto LABEL_71;
    }
LABEL_67:
    v24 = 0;
    goto LABEL_71;
  }
  if (a7 > a4)
    goto LABEL_67;
  if (a7 >= a5)
    v24 = 2;
  else
    v24 = 4;
LABEL_71:
  if (v21 == 1)
  {
    v10 = 0;
    v16 = 0;
    v25 = &v154;
    v26 = &v155;
    v12 = 0.0;
    goto LABEL_75;
  }
  if (v21 == 3)
  {
    v18 = 0;
    v25 = &v152;
    v26 = &v153;
    v10 = 1;
    v12 = 1000000.0;
LABEL_75:
    v27 = 1;
    *v26 = 1;
    *v25 = 0.0;
    goto LABEL_77;
  }
  v27 = v14;
LABEL_77:
  v28 = v22 - 1;
  if (v22 == 1)
  {
    v13 = 0;
    v29 = &v154;
    v30 = &v155;
    v15 = 0.0;
    v16 = 1;
    goto LABEL_81;
  }
  if (v22 == 3)
  {
    v29 = &v152;
    v30 = &v153;
    v13 = 1;
    v15 = 1000000.0;
    v18 = 1;
LABEL_81:
    v14 = 1;
    *v30 = 1;
    *v29 = 1000000.0;
    goto LABEL_82;
  }
  if (!(v22 | v21) || v21 >= 4 && v22 >= 4)
  {
    *(_QWORD *)v156 = 0;
    v63 = 40;
    do
    {
      v64 = &v156[v63];
      *(_OWORD *)v64 = xmmword_18D348770;
      *((_QWORD *)v64 + 2) = 0;
      *((_QWORD *)v64 + 3) = 0;
      *((_QWORD *)v64 + 4) = 1;
      *((_QWORD *)v64 + 5) = 0;
      v64[48] = 0;
      v63 += 56;
    }
    while (v64 + 56 != (_BYTE *)v161);
    memset(&v162[2], 0, 32);
    v65 = v158;
    *(_OWORD *)(a1 + 96) = v157;
    *(_OWORD *)(a1 + 112) = v65;
    *(_OWORD *)(a1 + 128) = v159;
    v66 = *(_OWORD *)&v156[48];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v156[32];
    *(_OWORD *)(a1 + 48) = v66;
    v67 = *(_OWORD *)&v156[80];
    *(_OWORD *)(a1 + 64) = *(_OWORD *)&v156[64];
    *(_OWORD *)(a1 + 80) = v67;
    v68 = *(_OWORD *)&v156[16];
    *(_OWORD *)a1 = *(_OWORD *)v156;
    *(_OWORD *)(a1 + 16) = v68;
    v69 = *(_OWORD *)&v162[16];
    *(_OWORD *)(a1 + 154) = *(_OWORD *)v162;
    *(_QWORD *)&v162[34] = 0;
    *(_QWORD *)(a1 + 144) = v160;
    *(_WORD *)(a1 + 152) = 100;
    *(_OWORD *)(a1 + 170) = v69;
    *(_OWORD *)(a1 + 180) = *(_OWORD *)&v162[26];
    return;
  }
LABEL_82:
  if (v8)
    v31 = -1;
  else
    v31 = 0;
  v32 = v9 <= 0;
  if (v9)
    v33 = -1;
  else
    v33 = 0;
  if (v32)
    v34 = v33;
  else
    v34 = 1;
  *(_QWORD *)v156 = 0;
  v35 = 40;
  v36 = xmmword_18D348770;
  do
  {
    v37 = &v156[v35];
    *(_OWORD *)v37 = xmmword_18D348770;
    *((_QWORD *)v37 + 2) = 0;
    *((_QWORD *)v37 + 3) = 0;
    *((_QWORD *)v37 + 4) = 1;
    *((_QWORD *)v37 + 5) = 0;
    v37[48] = 0;
    v35 += 56;
  }
  while (v37 + 56 != (_BYTE *)v161);
  if (v8 > 0)
    v38 = 1;
  else
    v38 = v31;
  *(_QWORD *)&v162[16] = 0;
  *(_QWORD *)&v162[24] = 0;
  *(_OWORD *)&v162[32] = xmmword_18D348780;
  *(_OWORD *)v162 = xmmword_18D348770;
  if (v21 - 1 > 2)
  {
    v41 = 0;
  }
  else
  {
    v39 = *(_QWORD **)a2;
    *(_QWORD *)&v156[8] = **(_QWORD **)a2;
    *(_QWORD *)&v156[16] = v39[1];
    LOBYTE(v39) = atomic_load((unsigned __int8 *)&qword_1ECF24940);
    if ((v39 & 1) == 0)
    {
      v97 = a3;
      v98 = a2;
      v127 = v18;
      v130 = v14;
      v99 = v13;
      v133 = v15;
      v124 = v16;
      v116 = v10;
      v119 = v12;
      v137 = v23;
      v141 = v38;
      v100 = __cxa_guard_acquire(&qword_1ECF24940);
      v36 = xmmword_18D348770;
      v38 = v141;
      v28 = v22 - 1;
      v23 = v137;
      v12 = v119;
      v10 = v116;
      v16 = v124;
      v18 = v127;
      v15 = v133;
      v14 = v130;
      v13 = v99;
      a2 = v98;
      a3 = v97;
      if (v100)
      {
        xmmword_1ECF24950 = xmmword_18D348770;
        qword_1ECF24960 = 0;
        __cxa_guard_release(&qword_1ECF24940);
        v36 = xmmword_18D348770;
        v38 = v141;
        v28 = v22 - 1;
        v23 = v137;
        v12 = v119;
        v10 = v116;
        v16 = v124;
        v18 = v127;
        v15 = v133;
        v14 = v130;
        v13 = v99;
        a2 = v98;
        a3 = v97;
      }
    }
    *(_OWORD *)&v156[40] = xmmword_1ECF24950;
    *(_QWORD *)&v156[56] = qword_1ECF24960;
    v156[88] = 1;
    *(_QWORD *)&v156[64] = v10;
    *(_QWORD *)&v156[72] = v27;
    *(double *)&v156[80] = v12;
    v40 = atomic_load((unsigned __int8 *)&qword_1ECF24940);
    if ((v40 & 1) == 0)
    {
      v101 = a3;
      v102 = a2;
      v103 = v18;
      v104 = v13;
      v105 = v14;
      v134 = v15;
      v125 = v16;
      v138 = v23;
      v142 = v38;
      v147 = v28;
      v122 = v36;
      v106 = __cxa_guard_acquire(&qword_1ECF24940);
      v36 = v122;
      v38 = v142;
      v28 = v147;
      v23 = v138;
      v16 = v125;
      v15 = v134;
      v14 = v105;
      v13 = v104;
      v18 = v103;
      a2 = v102;
      a3 = v101;
      if (v106)
      {
        xmmword_1ECF24950 = v122;
        qword_1ECF24960 = 0;
        __cxa_guard_release(&qword_1ECF24940);
        v36 = v122;
        v38 = v142;
        v28 = v147;
        v23 = v138;
        v16 = v125;
        v15 = v134;
        v14 = v105;
        v13 = v104;
        v18 = v103;
        a2 = v102;
        a3 = v101;
      }
    }
    *(_OWORD *)v162 = xmmword_1ECF24950;
    *(_QWORD *)&v162[16] = qword_1ECF24960;
    v41 = 1;
  }
  if (v23 == 2)
  {
    v42 = &v156[16 * v41];
    v43 = *(_QWORD **)a3;
    *((_QWORD *)v42 + 1) = **(_QWORD **)a3;
    *((_QWORD *)v42 + 2) = v43[1];
    LOBYTE(v42) = atomic_load((unsigned __int8 *)&qword_1ECF24940);
    if ((v42 & 1) == 0)
    {
      v117 = a3;
      v120 = v13;
      v107 = a2;
      v128 = v18;
      v131 = v14;
      v135 = v15;
      v126 = v16;
      v143 = v38;
      v148 = v28;
      v123 = v36;
      v108 = __cxa_guard_acquire(&qword_1ECF24940);
      v38 = v143;
      v28 = v148;
      v23 = 2;
      v16 = v126;
      v18 = v128;
      v15 = v135;
      v14 = v131;
      a3 = v117;
      v13 = v120;
      a2 = v107;
      if (v108)
      {
        xmmword_1ECF24950 = v123;
        qword_1ECF24960 = 0;
        __cxa_guard_release(&qword_1ECF24940);
        v38 = v143;
        v28 = v148;
        v23 = 2;
        v16 = v126;
        v18 = v128;
        v15 = v135;
        v14 = v131;
        a3 = v117;
        v13 = v120;
        a2 = v107;
      }
    }
    v44 = &v156[56 * v41];
    v44[88] = 1;
    v45 = v155;
    *((_QWORD *)v44 + 5) = v16;
    *((_QWORD *)v44 + 6) = v45;
    v46 = v154;
    *((double *)v44 + 7) = v154;
    *((_OWORD *)v44 + 4) = xmmword_1ECF24950;
    *((_QWORD *)v44 + 10) = qword_1ECF24960;
    v47 = (uint64_t *)&v162[24 * v41];
    *v47 = v16;
    v47[1] = v45;
    *((double *)v47 + 2) = v46;
    ++v41;
  }
  if (v28 <= 2 && v41 <= 1)
  {
    v48 = &v156[16 * v41];
    v49 = *(_QWORD **)(a2 + 8);
    *((_QWORD *)v48 + 1) = *v49;
    *((_QWORD *)v48 + 2) = v49[1];
    LOBYTE(v48) = atomic_load((unsigned __int8 *)&qword_1ECF24948);
    if ((v48 & 1) == 0)
    {
      v118 = a3;
      v121 = v13;
      v129 = v18;
      v132 = v14;
      v136 = v15;
      v139 = v23;
      v144 = v38;
      v149 = v28;
      v109 = __cxa_guard_acquire(&qword_1ECF24948);
      v38 = v144;
      v28 = v149;
      v23 = v139;
      v15 = v136;
      v18 = v129;
      v14 = v132;
      a3 = v118;
      v13 = v121;
      if (v109)
      {
        xmmword_1ECF24970 = (__int128)vdupq_n_s64(1uLL);
        qword_1ECF24980 = 0x412E848000000000;
        __cxa_guard_release(&qword_1ECF24948);
        v38 = v144;
        v28 = v149;
        v23 = v139;
        v15 = v136;
        v18 = v129;
        v14 = v132;
        a3 = v118;
        v13 = v121;
      }
    }
    v50 = &v156[56 * v41];
    v50[88] = 1;
    *(_OWORD *)(v50 + 40) = xmmword_1ECF24970;
    *((_QWORD *)v50 + 7) = qword_1ECF24980;
    *((_QWORD *)v50 + 8) = v13;
    *((_QWORD *)v50 + 9) = v14;
    *((double *)v50 + 10) = v15;
    v51 = atomic_load((unsigned __int8 *)&qword_1ECF24948);
    if ((v51 & 1) == 0)
    {
      v110 = a3;
      v111 = v18;
      v112 = v23;
      v150 = v28;
      v145 = v38;
      v113 = __cxa_guard_acquire(&qword_1ECF24948);
      v38 = v145;
      v28 = v150;
      v23 = v112;
      v18 = v111;
      a3 = v110;
      if (v113)
      {
        xmmword_1ECF24970 = (__int128)vdupq_n_s64(1uLL);
        qword_1ECF24980 = 0x412E848000000000;
        __cxa_guard_release(&qword_1ECF24948);
        v38 = v145;
        v28 = v150;
        v23 = v112;
        v18 = v111;
        a3 = v110;
      }
    }
    v52 = &v162[24 * v41];
    *(_OWORD *)v52 = xmmword_1ECF24970;
    *((_QWORD *)v52 + 2) = qword_1ECF24980;
    ++v41;
  }
  if (v24 == 2 && v41 <= 1)
  {
    v53 = &v156[16 * v41];
    v54 = *(_QWORD **)(a3 + 8);
    *((_QWORD *)v53 + 1) = *v54;
    *((_QWORD *)v53 + 2) = v54[1];
    LOBYTE(v53) = atomic_load((unsigned __int8 *)&qword_1ECF24948);
    if ((v53 & 1) == 0)
    {
      v114 = v18;
      v140 = v23;
      v146 = v38;
      v151 = v28;
      v115 = __cxa_guard_acquire(&qword_1ECF24948);
      v38 = v146;
      v28 = v151;
      v23 = v140;
      v18 = v114;
      if (v115)
      {
        xmmword_1ECF24970 = (__int128)vdupq_n_s64(1uLL);
        qword_1ECF24980 = 0x412E848000000000;
        __cxa_guard_release(&qword_1ECF24948);
        v38 = v146;
        v28 = v151;
        v23 = v140;
        v18 = v114;
      }
    }
    v55 = &v156[56 * v41];
    v55[88] = 1;
    v56 = v153;
    *((_QWORD *)v55 + 5) = v18;
    *((_QWORD *)v55 + 6) = v56;
    v57 = v152;
    *((double *)v55 + 7) = v152;
    *((_OWORD *)v55 + 4) = xmmword_1ECF24970;
    *((_QWORD *)v55 + 10) = qword_1ECF24980;
    v58 = (uint64_t *)&v162[24 * v41];
    *v58 = v18;
    v58[1] = v56;
    *((double *)v58 + 2) = v57;
    ++v41;
  }
  if (v41 != 2)
    goto LABEL_125;
  if (vabdd_f64(*(double *)&v162[40], *(double *)&v162[16]) < 50.0)
  {
    v59 = v38;
    v60 = v28;
    v61 = v23;
    v163 = *(_OWORD *)&v162[24];
    sub_18D2EFCF0((int64_t *)&v163);
    *(_OWORD *)v161 = *(_OWORD *)v162;
    sub_18D2EFCF0(v161);
    v62 = sub_18D2EFBE8(v163, *((uint64_t *)&v163 + 1), v161[0], v161[1]);
    v23 = v61;
    v28 = v60;
    v38 = v59;
    if ((v62 & 1) == 0)
      goto LABEL_125;
    goto LABEL_124;
  }
  if (*(double *)&v162[40] < *(double *)&v162[16])
  {
LABEL_124:
    v70 = v156[88];
    v71 = *(_OWORD *)&v156[40];
    v72 = *(_OWORD *)&v156[56];
    v73 = *(_OWORD *)&v156[72];
    *(_OWORD *)&v156[40] = v157;
    *(_OWORD *)&v156[56] = v158;
    *(_OWORD *)&v156[72] = v159;
    v156[88] = v160;
    v159 = v73;
    v158 = v72;
    v157 = v71;
    LOBYTE(v160) = v70;
    v74 = *(_OWORD *)&v156[8];
    v163 = *(_OWORD *)&v156[8];
    *(_OWORD *)&v156[8] = *(_OWORD *)&v156[24];
    *(_OWORD *)&v156[24] = v74;
  }
LABEL_125:
  if ((v22 & 0xFFFFFFFD) == 1)
    v75 = 0;
  else
    v75 = -1;
  v76 = (v21 & 0xFFFFFFFD) != 1;
  v77 = (v21 & 0xFFFFFFFD) != 1 || v21 - 4 < 0xFFFFFFFD;
  if (v21 - 4 <= 0xFFFFFFFC)
    v76 = 0;
  if (v22 == 2)
    v75 = 1;
  else
    v76 = v21 - 4 < 0xFFFFFFFD;
  v78 = !v77;
  if ((v22 & 0xFFFFFFFD) == 1)
  {
    v76 = !v77;
    v79 = v28 >= 3;
  }
  else
  {
    v79 = 1;
  }
  *(_QWORD *)v156 = v41;
  memset(&v162[2], 0, 32);
  v80 = v24 & 0xFFFFFFFD;
  if (!v79)
    v78 = v76 + 1;
  v81 = (v23 & 0xFFFFFFFD) != 1;
  v82 = (v23 & 0xFFFFFFFD) != 1 || (v23 - 4) < 0xFFFFFFFD;
  if ((v23 - 4) <= 0xFFFFFFFC)
    v81 = 0;
  v83 = !v82;
  if (v24 != 2)
    v81 = (v23 - 4) < 0xFFFFFFFD;
  v84 = v24 - 1;
  if (v80 == 1)
    v85 = v83;
  else
    v85 = v81;
  if (v80 != 1 || v84 >= 3)
    v87 = v83;
  else
    v87 = v85 + 1;
  v88 = v76 == 0;
  if (v28 < 3)
    v88 = v21 - 4 < 0xFFFFFFFD;
  v89 = v85 == 0;
  if (v84 < 3)
    v89 = (v23 - 4) < 0xFFFFFFFD;
  if (v78 == 1 && v87 == 1 && v88 && v89)
  {
    if (v38 == v34)
    {
      v90 = 97;
    }
    else if (v75)
    {
      v90 = 102;
    }
    else
    {
      v90 = 116;
    }
  }
  else
  {
    v90 = 99;
    if (v78 == 2 && v87 == 2)
      v90 = 101;
  }
  v91 = v158;
  *(_OWORD *)(a1 + 96) = v157;
  *(_OWORD *)(a1 + 112) = v91;
  *(_OWORD *)(a1 + 128) = v159;
  v92 = *(_OWORD *)&v156[48];
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v156[32];
  *(_OWORD *)(a1 + 48) = v92;
  v93 = *(_OWORD *)&v156[80];
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v156[64];
  *(_OWORD *)(a1 + 80) = v93;
  v94 = *(_OWORD *)&v156[16];
  *(_OWORD *)a1 = *(_OWORD *)v156;
  *(_OWORD *)(a1 + 16) = v94;
  v95 = *(_OWORD *)&v162[16];
  *(_OWORD *)(a1 + 154) = *(_OWORD *)v162;
  if (v80 == 1)
    v96 = 0;
  else
    v96 = -1;
  if (v24 == 2)
    v96 = 1;
  *(_QWORD *)(a1 + 144) = v160;
  *(_BYTE *)(a1 + 152) = v90;
  *(_BYTE *)(a1 + 153) = v38 != v34;
  *(_OWORD *)(a1 + 170) = v95;
  *(_WORD *)(a1 + 186) = *(_WORD *)&v162[32];
  *(_DWORD *)(a1 + 188) = v75;
  *(_DWORD *)(a1 + 192) = v96;
}

uint64_t sub_18D2EFBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t result;
  unsigned int v14;

  if (a2 <= 0)
    __assert_rtn("operator<", "rational.hpp", 794, "this->den > zero");
  if (a4 <= 0)
    __assert_rtn("operator<", "rational.hpp", 795, "r.den > zero");
  v4 = a1 / a2;
  v5 = a1 % a2;
  v6 = a3 / a4;
  for (i = a3 % a4; (v5 & 0x8000000000000000) != 0; --v4)
    v5 += a2;
  for (; (i & 0x8000000000000000) != 0; --v6)
    i += a4;
  if (v4 != v6)
    return v4 < v6;
  v8 = 0;
  while (1)
  {
    v9 = v5;
    v10 = i;
    v8 ^= 1u;
    if (!v5 || !i)
      break;
    v11 = a2 / v5;
    v5 = a2 % v5;
    v12 = a4 / i;
    i = a4 % i;
    a4 = v10;
    a2 = v9;
    if (v11 != v12)
    {
      result = v11 > v12;
      if (!v8)
        return v11 < v12;
      return result;
    }
  }
  v14 = (v8 != 0) ^ (v5 != 0);
  if (v9 == i)
    return 0;
  else
    return v14;
}

int64_t *sub_18D2EFCF0(int64_t *result)
{
  uint64_t *v1;
  int64_t v2;
  int64_t *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  std::logic_error v9;

  v1 = result + 1;
  v2 = result[1];
  if (!v2)
  {
    std::logic_error::logic_error(&v9, "bad rational: zero denominator");
    v9.__vftable = (std::logic_error_vtbl *)&off_1E25C1438;
    v7.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/rational.hpp";
    v7.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
    v8 = 892;
    sub_18D2EFE5C(&v9, &v7);
  }
  v3 = result;
  v4 = *result;
  if (*result)
  {
    v5 = sub_18D2EFE9C(result, result + 1);
    v6 = v2 / v5;
    *v3 = v4 / v5;
    v3[1] = v2 / v5;
    if (v2 / v5 == 0x8000000000000000)
    {
      std::logic_error::logic_error(&v9, "bad rational: non-zero singular denominator");
      v9.__vftable = (std::logic_error_vtbl *)&off_1E25C1438;
      v7.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app"
                           "/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/"
                           "local/include/boost/rational.hpp";
      v7.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
      v8 = 906;
      sub_18D2EFE5C(&v9, &v7);
    }
    if (v6 < 0)
    {
      *v3 = -(v4 / v5);
      v3[1] = -v6;
    }
    else if (!v6)
    {
LABEL_10:
      __assert_rtn("normalize", "rational.hpp", 915, "this->test_invariant()");
    }
    result = (int64_t *)sub_18D2EFE9C(v3, v1);
    if (result != (int64_t *)1)
      goto LABEL_10;
  }
  else
  {
    *v1 = 1;
  }
  return result;
}

void sub_18D2EFE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::logic_error a13)
{
  std::logic_error::~logic_error(&a13);
  _Unwind_Resume(a1);
}

void sub_18D2EFE5C(const std::logic_error *a1, int8x16_t *a2)
{
  void *exception;
  void *v5;

  exception = __cxa_allocate_exception(0x40uLL);
  v5 = (void *)sub_18D2EFF9C((uint64_t)exception, a1, a2);
  __cxa_throw(v5, (struct type_info *)&unk_1E25B3090, (void (*)(void *))sub_18D2F0004);
}

unint64_t sub_18D2EFE9C(int64_t *a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v3;
  unint64_t result;
  int64_t v5;
  unsigned int v6;
  int64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;

  v2 = *a1;
  if (*a1 == 0x8000000000000000)
  {
    v12 = (uint64_t)0x8000000000000000 % *a2;
    a1 = &v12;
    return sub_18D2EFE9C(a1, a2);
  }
  v3 = *a2;
  if (*a2 == 0x8000000000000000)
  {
    v12 = (uint64_t)0x8000000000000000 % v2;
    a2 = &v12;
    return sub_18D2EFE9C(a1, a2);
  }
  if (v2 < 0)
    v2 = -v2;
  if (v3 >= 0)
    v5 = *a2;
  else
    v5 = -v3;
  if (v2 >= v5)
    result = v5;
  else
    result = v2;
  if (v2 <= v5)
    v2 = v5;
  if (v2)
  {
    if (result)
    {
      v6 = __clz(__rbit64(v2));
      v7 = (unint64_t)v2 >> v6;
      v8 = __clz(__rbit64(result));
      v9 = result >> v8;
      if (v6 < v8)
        LOBYTE(v8) = v6;
      if (v9 < 2)
      {
LABEL_29:
        if (v9 == 1)
          v7 = 1;
      }
      else
      {
        while (1)
        {
          v10 = v7 % v9;
          v7 = v9 - v7 % v9;
          if (!v10)
            break;
          v11 = v10 >> __clz(__rbit64(v10));
          v7 >>= __clz(__rbit64(v7));
          if (v11 >= v7)
            v9 = v7;
          else
            v9 = v11;
          if (v11 > v7)
            v7 = v11;
          if ((uint64_t)v9 <= 1)
            goto LABEL_29;
        }
      }
      return v7 << v8;
    }
    else
    {
      return v2;
    }
  }
  return result;
}

uint64_t sub_18D2EFF9C(uint64_t a1, const std::logic_error *a2, int8x16_t *a3)
{
  *(_QWORD *)a1 = &unk_1E25C1488;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E25C1050;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1080;
  *(_QWORD *)(a1 + 24) = &unk_1E25C10A8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t sub_18D2F0004(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

uint64_t sub_18D2F0044(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E25C1488;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_1E25C1438;
  *(_QWORD *)(v2 + 24) = &unk_1E25C20D8;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E25C1050;
  *(_QWORD *)(v2 + 8) = &unk_1E25C1080;
  *(_QWORD *)(v2 + 24) = &unk_1E25C10A8;
  sub_18D15B224(v2 + 24, a1 + 24);
  return v2;
}

void sub_18D2F0114(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::logic_error *v2;

  std::logic_error::~logic_error(v2);
  MEMORY[0x18D78B5D4](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_18D2F0158(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_18D2F0334((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E25B3090, (void (*)(void *))sub_18D2F0004);
}

void sub_18D2F0194(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18D2F01A8(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2F01F8(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_18D2F0230(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E25C20D8;
  sub_18D15B124((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2F0284(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

void sub_18D2F02BC(_QWORD *a1)
{
  *a1 = &unk_1E25C20D8;
  sub_18D15B124(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
  JUMPOUT(0x18D78B5D4);
}

void sub_18D2F0310(std::logic_error *a1)
{
  std::logic_error::~logic_error(a1);
  JUMPOUT(0x18D78B5D4);
}

uint64_t sub_18D2F0334(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E25C1488;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_1E25C1438;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E25C20D8;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E25C1050;
  *(_QWORD *)(a1 + 8) = &unk_1E25C1080;
  *(_QWORD *)(a1 + 24) = &unk_1E25C10A8;
  return a1;
}

void sub_18D2F03D8(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

double sub_18D2F03EC(double *a1, double *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  double result;

  if (!a4)
    __assert_rtn("assign", "intersection.hpp", 176, "ratio.denominator() != typename SegmentRatio::int_type(0)");
  *a1 = (double)a3 * a5 / (double)a4 + *a2;
  result = (double)a3 * a6 / (double)a4 + a2[1];
  a1[1] = result;
  return result;
}

uint64_t sub_18D2F0450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v9 = 1.0;
  v6 = sub_18D2EEA84(a3, a4, a5, a6, a1, a2, &v9);
  if (v6 == 0.0)
    return 0;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = fabs(v6);
    if (v6 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v8 <= v9 * 2.22044605e-16)
      return 0;
  }
  return result;
}

double *sub_18D2F04F4(double *result, double *a2, double *a3, double **a4, double **a5, double *a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double *v44;

  if (a2 == a3)
    __assert_rtn("apply", "point_to_range.hpp", 55, "first != last");
  if (a2 + 2 == a3)
  {
    *a5 = a2;
    *a4 = a2;
    v18 = *a2;
    v19 = a2[1];
    v20 = result[1];
    v21 = v18 - v18;
    v22 = v19 - v19;
    v23 = *result - *a2;
    v24 = (v19 - v19) * (v20 - v19) + v23 * (v18 - v18);
    if (v24 <= 0.0 || (v25 = v22 * v22 + v21 * v21, v25 <= v24))
    {
      v27 = v23 * v23 + 0.0 + (v20 - v19) * (v20 - v19);
    }
    else
    {
      v26 = *result - (v18 + v21 * (v24 / v25));
      v27 = v26 * v26 + 0.0 + (v20 - (v19 + v22 * (v24 / v25))) * (v20 - (v19 + v22 * (v24 / v25)));
    }
    *a6 = v27;
  }
  else
  {
    v6 = a2[2];
    v7 = a2[3];
    v8 = *result;
    v9 = result[1];
    v10 = a2[1];
    v11 = v6 - *a2;
    v12 = v7 - v10;
    v13 = *result - *a2;
    v14 = (v9 - v10) * (v7 - v10) + v13 * v11;
    if (v14 <= 0.0)
    {
      v28 = v13 * v13 + 0.0 + (v9 - v10) * (v9 - v10);
    }
    else
    {
      v15 = v12 * v12 + v11 * v11;
      if (v15 <= v14)
      {
        v16 = v9 - v7;
        v17 = v8 - v6;
      }
      else
      {
        v16 = v9 - (v10 + v12 * (v14 / v15));
        v17 = v8 - (*a2 + v11 * (v14 / v15));
      }
      v28 = v17 * v17 + 0.0 + v16 * v16;
    }
    *a6 = v28;
    if (a2 + 4 == a3)
    {
LABEL_25:
      *a5 = a2;
      *a4 = a2;
      v29 = *a5;
    }
    else
    {
      v29 = a2 + 2;
      v30 = a2 + 3;
      while (1)
      {
        v31 = *(v30 - 1);
        v33 = v30[1];
        v32 = v30[2];
        v34 = *result;
        v35 = result[1];
        v36 = v33 - v31;
        v37 = v32 - *v30;
        v38 = *result - v31;
        v39 = v35 - *v30;
        v40 = v39 * v37 + v38 * (v33 - v31);
        if (v40 <= 0.0)
        {
          v43 = v38 * v38 + 0.0 + v39 * v39;
        }
        else
        {
          v41 = v37 * v37 + v36 * v36;
          if (v41 <= v40)
          {
            v43 = (v34 - v33) * (v34 - v33) + 0.0 + (v35 - v32) * (v35 - v32);
          }
          else
          {
            v42 = v35 - (*v30 + v37 * (v40 / v41));
            v43 = (v34 - (v31 + v36 * (v40 / v41))) * (v34 - (v31 + v36 * (v40 / v41))) + 0.0 + v42 * v42;
          }
        }
        if (v43 == 0.0)
          break;
        if (v43 < v28)
        {
          *a6 = v43;
          v28 = v43;
          a2 = v30 - 1;
        }
        v29 += 2;
        v44 = v30 + 3;
        v30 += 2;
        if (v44 == a3)
          goto LABEL_25;
      }
      *a6 = 0.0;
      *a4 = v29;
    }
    *a5 = v29 + 2;
  }
  return result;
}

uint64_t trackrun::TrackRunSupervisor::TrackRunSupervisor(trackrun::TrackRunSupervisor *this)
{
  char v2;

  v2 = 1;
  return trackrun::TrackRunSupervisor::TrackRunSupervisor((uint64_t)this, &v2);
}

{
  char v2;

  v2 = 1;
  return trackrun::TrackRunSupervisor::TrackRunSupervisor((uint64_t)this, &v2);
}

uint64_t trackrun::TrackRunSupervisor::TrackRunSupervisor(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;

  v4 = cnframework::Supervisor::Supervisor(a1, a2);
  *(_QWORD *)v4 = &off_1E25C89F0;
  *(_BYTE *)(v4 + 817) = 0;
  sub_18D2F3880(v4 + 824);
  sub_18D2F3880(a1 + 1088);
  trackrun::TrackRunEngineActiveObject::TrackRunEngineActiveObject(a1 + 1352, a2);
  *(_BYTE *)(a1 + 6112) = *a2;
  return a1;
}

void sub_18D2F07C4(_Unwind_Exception *a1)
{
  cnframework::Supervisor *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_18D2F0824(v3);
  sub_18D2F0824(v2);
  cnframework::Supervisor::~Supervisor(v1, v5, v6, v7, v8, v9, v10, v11);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F0824(uint64_t a1)
{
  sub_18D04344C(a1 + 72);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void trackrun::TrackRunSupervisor::~TrackRunSupervisor(void **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *this = &off_1E25C89F0;
  cnframework::Supervisor::TearDown((cnframework::Supervisor *)this);
  sub_18D2E877C((uint64_t)(this + 169));
  sub_18D04344C((uint64_t)(this + 145));
  if (*((char *)this + 1151) < 0)
    operator delete(this[141]);
  if (*((char *)this + 1119) < 0)
    operator delete(this[137]);
  sub_18D04344C((uint64_t)(this + 112));
  if (*((char *)this + 887) < 0)
    operator delete(this[108]);
  if (*((char *)this + 855) < 0)
    operator delete(this[104]);
  cnframework::Supervisor::~Supervisor((cnframework::Supervisor *)this, v2, v3, v4, v5, v6, v7, v8);
}

{
  trackrun::TrackRunSupervisor::~TrackRunSupervisor(this);
  JUMPOUT(0x18D78B5D4);
}

uint64_t trackrun::TrackRunSupervisor::Configure(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 *v10;
  __int16 v11;
  const std::string *v12;
  __int16 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v46;
  unsigned __int8 v47;

  if (*((_BYTE *)a2 + 256))
  {
    v10 = (__int16 *)(a1 + 824);
    v11 = *a2;
    *(_BYTE *)(a1 + 826) = *((_BYTE *)a2 + 2);
    *(_WORD *)(a1 + 824) = v11;
    v12 = (const std::string *)(a2 + 4);
    std::string::operator=((std::string *)(a1 + 832), (const std::string *)(a2 + 4));
    *(_WORD *)(a1 + 856) = a2[16];
    std::string::operator=((std::string *)(a1 + 864), (const std::string *)(a2 + 20));
    v13 = a2[34];
    *(_DWORD *)(a1 + 888) = *((_DWORD *)a2 + 16);
    *(_WORD *)(a1 + 892) = v13;
    if (v10 != a2)
    {
      *(_DWORD *)(a1 + 928) = *((_DWORD *)a2 + 26);
      sub_18D2F3A18((_QWORD *)(a1 + 896), *((uint64_t **)a2 + 11));
    }
    v14 = *((_OWORD *)a2 + 8);
    *((_OWORD *)v10 + 7) = *((_OWORD *)a2 + 7);
    *((_OWORD *)v10 + 8) = v14;
    v15 = *((_OWORD *)a2 + 9);
    v16 = *((_OWORD *)a2 + 10);
    v17 = *((_OWORD *)a2 + 12);
    *((_OWORD *)v10 + 11) = *((_OWORD *)a2 + 11);
    *((_OWORD *)v10 + 12) = v17;
    *((_OWORD *)v10 + 9) = v15;
    *((_OWORD *)v10 + 10) = v16;
    v18 = *((_OWORD *)a2 + 13);
    v19 = *((_OWORD *)a2 + 14);
    v20 = *((_OWORD *)a2 + 15);
    *(_BYTE *)(a1 + 1080) = *((_BYTE *)a2 + 256);
    *((_OWORD *)v10 + 14) = v19;
    *((_OWORD *)v10 + 15) = v20;
    *((_OWORD *)v10 + 13) = v18;
    v21 = *a2;
    *(_BYTE *)(a1 + 1090) = *((_BYTE *)a2 + 2);
    *(_WORD *)(a1 + 1088) = v21;
    std::string::operator=((std::string *)(a1 + 1096), v12);
    *(_WORD *)(a1 + 1120) = a2[16];
    v22 = std::string::operator=((std::string *)(a1 + 1128), (const std::string *)(a2 + 20));
    v28 = a2[34];
    *(_DWORD *)(a1 + 1152) = *((_DWORD *)a2 + 16);
    *(_WORD *)(a1 + 1156) = v28;
    if ((__int16 *)(a1 + 1088) != a2)
    {
      *(_DWORD *)(a1 + 1192) = *((_DWORD *)a2 + 26);
      sub_18D2F3A18((_QWORD *)(a1 + 1160), *((uint64_t **)a2 + 11));
    }
    v29 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 1216) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 1200) = v29;
    v30 = *((_OWORD *)a2 + 9);
    v31 = *((_OWORD *)a2 + 10);
    v32 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 1280) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 1264) = v32;
    *(_OWORD *)(a1 + 1248) = v31;
    *(_OWORD *)(a1 + 1232) = v30;
    v33 = *((_OWORD *)a2 + 13);
    v34 = *((_OWORD *)a2 + 14);
    v35 = *((_OWORD *)a2 + 15);
    *(_BYTE *)(a1 + 1344) = *((_BYTE *)a2 + 256);
    *(_OWORD *)(a1 + 1328) = v35;
    *(_OWORD *)(a1 + 1312) = v34;
    *(_OWORD *)(a1 + 1296) = v33;
    if (*(_BYTE *)(a1 + 1120))
    {
      v46 = 0;
      cnprint::CNPrinter::EnableLogStream((cnprint::CNPrinter *)&v46);
    }
    v36 = (_BYTE *)(a1 + 1152);
    if (*(_BYTE *)(a1 + 1121))
    {
      cnprint::CNPrinter::SetFileLogStreamName((cnprint::CNPrinter *)(a1 + 1128));
      v46 = 1;
      cnprint::CNPrinter::EnableLogStream((cnprint::CNPrinter *)&v46);
    }
    if (*v36)
    {
      v46 = 2;
      cnprint::CNPrinter::EnableLogStream((cnprint::CNPrinter *)&v46);
    }
    if (*(_BYTE *)(a1 + 1120) || *(_BYTE *)(a1 + 1121) || *v36)
    {
      v37 = *(unsigned __int8 *)(a1 + 1153);
      if (v37 < cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v22))
        cnprint::CNPrinter::SetLogLevel((cnprint::CNPrinter *)(a1 + 1153));
    }
    v47 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, &v47, "TrackRunSupervisor configuration parameters set", v23, v24, v25, v26, v27, 13);
    if (*(_BYTE *)(a1 + 817))
    {
      v47 = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, &v47, "TrackRunSupervisor::Configure called after TrackRunSupervisor was already configured.", v39, v40, v41, v42, v43, 13);
    }
    cnframework::Supervisor::SetThreadingModel(a1, (unsigned __int8 *)(a1 + 1089), v38, v39, v40, v41, v42, v43);
    if (!*(_BYTE *)(a1 + 817))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    LOWORD(v46) = 13;
    v47 = 2;
    v44 = "TrackRunSupervisor successfully configured";
  }
  else
  {
    LOWORD(v46) = 13;
    v47 = 4;
    v44 = "TrackRunSupervisor::Configure called with uninitialized parameters.";
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, &v47, v44, a4, a5, a6, a7, a8, v46);
  return 0;
}

uint64_t trackrun::TrackRunSupervisor::IsConfigured(trackrun::TrackRunSupervisor *this)
{
  return *((unsigned __int8 *)this + 817);
}

_QWORD *trackrun::TrackRunSupervisor::GetSupervisorName@<X0>(_QWORD *a1@<X8>)
{
  return sub_18D0778AC(a1, "TrackRunSupervisor");
}

uint64_t trackrun::TrackRunSupervisor::GetMutableTrackRunParameters(trackrun::TrackRunSupervisor *this)
{
  return (uint64_t)this + 1088;
}

uint64_t trackrun::TrackRunSupervisor::GetTrackRunSolution(trackrun::TrackRunSupervisor *this, trackrun::TrackRunSolutionEvent *a2)
{
  return trackrun::TrackRunEngineActiveObject::GetTrackRunSolution((trackrun::TrackRunSupervisor *)((char *)this + 1352), a2);
}

BOOL trackrun::TrackRunSupervisor::Configure(cnframework::ActiveObjectBase ***this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  cnframework::ActiveObjectBase *v10;
  cnframework::ActiveObjectBase ***v11;
  cnframework::ActiveObjectBase **v12;
  cnframework::ActiveObjectBase **v13;
  cnframework::ActiveObjectBase **v14;
  __int128 v15;
  cnframework::ActiveObjectBase **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  cnframework::ActiveObjectBase **v23;
  __int128 v24;
  cnframework::ActiveObjectBase **v25;
  cnframework::ActiveObjectBase **v26;
  __int128 v27;
  int v28;
  std::mutex *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  cnframework::ActiveObjectBase **v33;
  cnframework::ActiveObjectBase **v34;
  cnframework::ActiveObjectBase **v35;
  __int128 v36;
  cnframework::ActiveObjectBase **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  cnframework::ActiveObjectBase **v44;
  __int128 v45;
  cnframework::ActiveObjectBase **v46;
  cnframework::ActiveObjectBase **v47;
  __int128 v48;
  int v49;
  std::mutex *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  cnframework::ActiveObjectBase **v54;
  cnframework::ActiveObjectBase **v55;
  cnframework::ActiveObjectBase **v56;
  __int128 v57;
  cnframework::ActiveObjectBase **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  cnframework::ActiveObjectBase **v65;
  __int128 v66;
  cnframework::ActiveObjectBase **v67;
  cnframework::ActiveObjectBase **v68;
  __int128 v69;
  int v70;
  std::mutex *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  cnframework::ActiveObjectBase **v75;
  cnframework::ActiveObjectBase **v76;
  cnframework::ActiveObjectBase **v77;
  __int128 v78;
  cnframework::ActiveObjectBase **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  cnframework::ActiveObjectBase **v86;
  __int128 v87;
  cnframework::ActiveObjectBase **v88;
  cnframework::ActiveObjectBase **v89;
  __int128 v90;
  int v91;
  std::mutex *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  cnframework::ActiveObjectBase **v96;
  cnframework::ActiveObjectBase **v97;
  cnframework::ActiveObjectBase **v98;
  __int128 v99;
  cnframework::ActiveObjectBase **v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  cnframework::ActiveObjectBase **v107;
  __int128 v108;
  cnframework::ActiveObjectBase **v109;
  cnframework::ActiveObjectBase **v110;
  __int128 v111;
  int v112;
  std::mutex *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  cnframework::ActiveObjectBase **v117;
  cnframework::ActiveObjectBase **v118;
  cnframework::ActiveObjectBase **v119;
  __int128 v120;
  cnframework::ActiveObjectBase **v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  cnframework::ActiveObjectBase **v128;
  __int128 v129;
  cnframework::ActiveObjectBase **v130;
  cnframework::ActiveObjectBase **v131;
  __int128 v132;
  int v133;
  std::mutex *v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  cnframework::ActiveObjectBase **v138;
  cnframework::ActiveObjectBase **v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  cnframework::ActiveObjectBase **v145;
  __int128 v146;
  cnframework::ActiveObjectBase **v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  cnframework::ActiveObjectBase **v154;
  __int128 v155;
  cnframework::ActiveObjectBase **v156;
  cnframework::ActiveObjectBase **v157;
  __int128 v158;
  int v159;
  std::mutex *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  char v165;
  cnframework::ActiveObjectBase ***v166;
  __int128 v167;
  __int128 v168;
  void *v169;
  void **v170;
  _QWORD v171[3];
  _QWORD *v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned __int8 *)this + 1344);
  if (*((_BYTE *)this + 1344))
  {
    v166 = this + 136;
    v10 = (cnframework::ActiveObjectBase *)(this + 169);
    trackrun::TrackRunEngineActiveObject::Configure((cnframework::ActiveObjectBase *)(this + 169), (uint64_t *)&v166);
    cnframework::Supervisor::RegisterActiveObject(this, v10);
    LOBYTE(v167) = 0;
    LOBYTE(v168) = 0;
    *((_QWORD *)&v168 + 1) = this + 2;
    v11 = this + 170;
    v12 = this[170];
    v13 = this[171];
    if (v12 != v13)
    {
      while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v12, (unsigned __int8 *)&v167))
      {
        v12 += 4;
        if (v12 == v13)
        {
          v12 = this[171];
          goto LABEL_6;
        }
      }
LABEL_34:
      LOBYTE(v167) = 0;
      LOBYTE(v168) = 0;
      *((_QWORD *)&v168 + 1) = this + 2;
      v33 = this[170];
      v34 = this[171];
      if (v33 != v34)
      {
        while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v33, (unsigned __int8 *)&v167))
        {
          v33 += 4;
          if (v33 == v34)
          {
            v33 = this[171];
            goto LABEL_38;
          }
        }
LABEL_65:
        LOBYTE(v167) = 0;
        LOBYTE(v168) = 0;
        *((_QWORD *)&v168 + 1) = this + 2;
        v54 = this[170];
        v55 = this[171];
        if (v54 != v55)
        {
          while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v54, (unsigned __int8 *)&v167))
          {
            v54 += 4;
            if (v54 == v55)
            {
              v54 = this[171];
              goto LABEL_69;
            }
          }
LABEL_96:
          LOBYTE(v167) = 0;
          LOBYTE(v168) = 0;
          *((_QWORD *)&v168 + 1) = this + 2;
          v75 = this[170];
          v76 = this[171];
          if (v75 != v76)
          {
            while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v75, (unsigned __int8 *)&v167))
            {
              v75 += 4;
              if (v75 == v76)
              {
                v75 = this[171];
                goto LABEL_100;
              }
            }
LABEL_127:
            LOBYTE(v167) = 0;
            LOBYTE(v168) = 0;
            *((_QWORD *)&v168 + 1) = this + 2;
            v96 = this[170];
            v97 = this[171];
            if (v96 != v97)
            {
              while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v96, (unsigned __int8 *)&v167))
              {
                v96 += 4;
                if (v96 == v97)
                {
                  v96 = this[171];
                  goto LABEL_131;
                }
              }
LABEL_158:
              LOBYTE(v167) = 0;
              LOBYTE(v168) = 0;
              *((_QWORD *)&v168 + 1) = this + 2;
              v117 = this[170];
              v118 = this[171];
              if (v117 != v118)
              {
                while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v117, (unsigned __int8 *)&v167))
                {
                  v117 += 4;
                  if (v117 == v118)
                  {
                    v117 = this[171];
                    goto LABEL_162;
                  }
                }
LABEL_189:
                LOBYTE(v167) = 0;
                LOBYTE(v168) = 0;
                *((_QWORD *)&v168 + 1) = this + 2;
                v138 = this[170];
                v139 = this[171];
                if (v138 != v139)
                {
                  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v138, (unsigned __int8 *)&v167))
                  {
                    v138 += 4;
                    if (v138 == v139)
                    {
                      v138 = this[171];
                      goto LABEL_193;
                    }
                  }
                  goto LABEL_220;
                }
LABEL_193:
                v145 = this[172];
                if (v138 >= v145)
                {
                  v148 = ((char *)v138 - (char *)*v11) >> 5;
                  if ((unint64_t)(v148 + 1) >> 59)
                    sub_18D07AFE4();
                  v149 = (char *)v145 - (char *)*v11;
                  v150 = v149 >> 4;
                  if (v149 >> 4 <= (unint64_t)(v148 + 1))
                    v150 = v148 + 1;
                  if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFE0)
                    v151 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v151 = v150;
                  if (v151)
                    v152 = (char *)sub_18D184AF4((uint64_t)(this + 172), v151);
                  else
                    v152 = 0;
                  v153 = &v152[32 * v148];
                  v154 = (cnframework::ActiveObjectBase **)&v152[32 * v151];
                  v155 = v168;
                  *(_OWORD *)v153 = v167;
                  *((_OWORD *)v153 + 1) = v155;
                  v147 = (cnframework::ActiveObjectBase **)(v153 + 32);
                  v156 = this[171];
                  v157 = this[170];
                  if (v156 != v157)
                  {
                    do
                    {
                      v158 = *((_OWORD *)v156 - 1);
                      *((_OWORD *)v153 - 2) = *((_OWORD *)v156 - 2);
                      *((_OWORD *)v153 - 1) = v158;
                      v153 -= 32;
                      v156 -= 4;
                    }
                    while (v156 != v157);
                    v156 = *v11;
                  }
                  this[170] = (cnframework::ActiveObjectBase **)v153;
                  this[171] = v147;
                  this[172] = v154;
                  if (v156)
                    operator delete(v156);
                }
                else
                {
                  v146 = v168;
                  *(_OWORD *)v138 = v167;
                  *((_OWORD *)v138 + 1) = v146;
                  v147 = v138 + 4;
                }
                this[171] = v147;
                v159 = *((unsigned __int8 *)this + 1520);
                if (*((_BYTE *)this + 1520))
                {
                  v160 = 0;
                }
                else
                {
                  v160 = (std::mutex *)(this + 178);
                  std::mutex::lock((std::mutex *)(this + 178));
                }
                if (!sub_18D03FCF0(this + 173, (uint64_t *)&v169))
                {
                  v172 = v171;
                  v170 = &v169;
                  v171[0] = &off_1E25CCA48;
                  v161 = sub_18D20D94C((uint64_t)(this + 173), (uint64_t *)&v169, (uint64_t)&std::piecewise_construct, &v170);
                  sub_18D20C7C8(v161 + 3, (uint64_t)v171);
                  v162 = v172;
                  if (v172 == v171)
                  {
                    v163 = 4;
                    v162 = v171;
                  }
                  else
                  {
                    if (!v172)
                      goto LABEL_218;
                    v163 = 5;
                  }
                  (*(void (**)(void))(*v162 + 8 * v163))();
                }
LABEL_218:
                if (!v159)
                  std::mutex::unlock(v160);
LABEL_220:
                *((_BYTE *)this + 817) = 1;
                LOWORD(v171[0]) = 13;
                LOBYTE(v167) = 2;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v171, (unsigned __int8 *)&v167, "TrackRunSupervisor configured successfully", v140, v141, v142, v143, v144, v165);
                return v8 != 0;
              }
LABEL_162:
              v119 = this[172];
              if (v117 >= v119)
              {
                v122 = ((char *)v117 - (char *)*v11) >> 5;
                if ((unint64_t)(v122 + 1) >> 59)
                  sub_18D07AFE4();
                v123 = (char *)v119 - (char *)*v11;
                v124 = v123 >> 4;
                if (v123 >> 4 <= (unint64_t)(v122 + 1))
                  v124 = v122 + 1;
                if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFE0)
                  v125 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v125 = v124;
                if (v125)
                  v126 = (char *)sub_18D184AF4((uint64_t)(this + 172), v125);
                else
                  v126 = 0;
                v127 = &v126[32 * v122];
                v128 = (cnframework::ActiveObjectBase **)&v126[32 * v125];
                v129 = v168;
                *(_OWORD *)v127 = v167;
                *((_OWORD *)v127 + 1) = v129;
                v121 = (cnframework::ActiveObjectBase **)(v127 + 32);
                v130 = this[171];
                v131 = this[170];
                if (v130 != v131)
                {
                  do
                  {
                    v132 = *((_OWORD *)v130 - 1);
                    *((_OWORD *)v127 - 2) = *((_OWORD *)v130 - 2);
                    *((_OWORD *)v127 - 1) = v132;
                    v127 -= 32;
                    v130 -= 4;
                  }
                  while (v130 != v131);
                  v130 = *v11;
                }
                this[170] = (cnframework::ActiveObjectBase **)v127;
                this[171] = v121;
                this[172] = v128;
                if (v130)
                  operator delete(v130);
              }
              else
              {
                v120 = v168;
                *(_OWORD *)v117 = v167;
                *((_OWORD *)v117 + 1) = v120;
                v121 = v117 + 4;
              }
              this[171] = v121;
              v133 = *((unsigned __int8 *)this + 1520);
              if (*((_BYTE *)this + 1520))
              {
                v134 = 0;
              }
              else
              {
                v134 = (std::mutex *)(this + 178);
                std::mutex::lock((std::mutex *)(this + 178));
              }
              if (!sub_18D03FCF0(this + 173, (uint64_t *)&v169))
              {
                v172 = v171;
                v170 = &v169;
                v171[0] = &off_1E25CC940;
                v135 = sub_18D20D94C((uint64_t)(this + 173), (uint64_t *)&v169, (uint64_t)&std::piecewise_construct, &v170);
                sub_18D20C7C8(v135 + 3, (uint64_t)v171);
                v136 = v172;
                if (v172 == v171)
                {
                  v137 = 4;
                  v136 = v171;
                }
                else
                {
                  if (!v172)
                    goto LABEL_187;
                  v137 = 5;
                }
                (*(void (**)(void))(*v136 + 8 * v137))();
              }
LABEL_187:
              if (!v133)
                std::mutex::unlock(v134);
              goto LABEL_189;
            }
LABEL_131:
            v98 = this[172];
            if (v96 >= v98)
            {
              v101 = ((char *)v96 - (char *)*v11) >> 5;
              if ((unint64_t)(v101 + 1) >> 59)
                sub_18D07AFE4();
              v102 = (char *)v98 - (char *)*v11;
              v103 = v102 >> 4;
              if (v102 >> 4 <= (unint64_t)(v101 + 1))
                v103 = v101 + 1;
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFE0)
                v104 = 0x7FFFFFFFFFFFFFFLL;
              else
                v104 = v103;
              if (v104)
                v105 = (char *)sub_18D184AF4((uint64_t)(this + 172), v104);
              else
                v105 = 0;
              v106 = &v105[32 * v101];
              v107 = (cnframework::ActiveObjectBase **)&v105[32 * v104];
              v108 = v168;
              *(_OWORD *)v106 = v167;
              *((_OWORD *)v106 + 1) = v108;
              v100 = (cnframework::ActiveObjectBase **)(v106 + 32);
              v109 = this[171];
              v110 = this[170];
              if (v109 != v110)
              {
                do
                {
                  v111 = *((_OWORD *)v109 - 1);
                  *((_OWORD *)v106 - 2) = *((_OWORD *)v109 - 2);
                  *((_OWORD *)v106 - 1) = v111;
                  v106 -= 32;
                  v109 -= 4;
                }
                while (v109 != v110);
                v109 = *v11;
              }
              this[170] = (cnframework::ActiveObjectBase **)v106;
              this[171] = v100;
              this[172] = v107;
              if (v109)
                operator delete(v109);
            }
            else
            {
              v99 = v168;
              *(_OWORD *)v96 = v167;
              *((_OWORD *)v96 + 1) = v99;
              v100 = v96 + 4;
            }
            this[171] = v100;
            v112 = *((unsigned __int8 *)this + 1520);
            if (*((_BYTE *)this + 1520))
            {
              v113 = 0;
            }
            else
            {
              v113 = (std::mutex *)(this + 178);
              std::mutex::lock((std::mutex *)(this + 178));
            }
            if (!sub_18D03FCF0(this + 173, (uint64_t *)&v169))
            {
              v172 = v171;
              v170 = &v169;
              v171[0] = &off_1E25CC890;
              v114 = sub_18D20D94C((uint64_t)(this + 173), (uint64_t *)&v169, (uint64_t)&std::piecewise_construct, &v170);
              sub_18D20C7C8(v114 + 3, (uint64_t)v171);
              v115 = v172;
              if (v172 == v171)
              {
                v116 = 4;
                v115 = v171;
              }
              else
              {
                if (!v172)
                  goto LABEL_156;
                v116 = 5;
              }
              (*(void (**)(void))(*v115 + 8 * v116))();
            }
LABEL_156:
            if (!v112)
              std::mutex::unlock(v113);
            goto LABEL_158;
          }
LABEL_100:
          v77 = this[172];
          if (v75 >= v77)
          {
            v80 = ((char *)v75 - (char *)*v11) >> 5;
            if ((unint64_t)(v80 + 1) >> 59)
              sub_18D07AFE4();
            v81 = (char *)v77 - (char *)*v11;
            v82 = v81 >> 4;
            if (v81 >> 4 <= (unint64_t)(v80 + 1))
              v82 = v80 + 1;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFE0)
              v83 = 0x7FFFFFFFFFFFFFFLL;
            else
              v83 = v82;
            if (v83)
              v84 = (char *)sub_18D184AF4((uint64_t)(this + 172), v83);
            else
              v84 = 0;
            v85 = &v84[32 * v80];
            v86 = (cnframework::ActiveObjectBase **)&v84[32 * v83];
            v87 = v168;
            *(_OWORD *)v85 = v167;
            *((_OWORD *)v85 + 1) = v87;
            v79 = (cnframework::ActiveObjectBase **)(v85 + 32);
            v88 = this[171];
            v89 = this[170];
            if (v88 != v89)
            {
              do
              {
                v90 = *((_OWORD *)v88 - 1);
                *((_OWORD *)v85 - 2) = *((_OWORD *)v88 - 2);
                *((_OWORD *)v85 - 1) = v90;
                v85 -= 32;
                v88 -= 4;
              }
              while (v88 != v89);
              v88 = *v11;
            }
            this[170] = (cnframework::ActiveObjectBase **)v85;
            this[171] = v79;
            this[172] = v86;
            if (v88)
              operator delete(v88);
          }
          else
          {
            v78 = v168;
            *(_OWORD *)v75 = v167;
            *((_OWORD *)v75 + 1) = v78;
            v79 = v75 + 4;
          }
          this[171] = v79;
          v91 = *((unsigned __int8 *)this + 1520);
          if (*((_BYTE *)this + 1520))
          {
            v92 = 0;
          }
          else
          {
            v92 = (std::mutex *)(this + 178);
            std::mutex::lock((std::mutex *)(this + 178));
          }
          if (!sub_18D03FCF0(this + 173, (uint64_t *)&v169))
          {
            v172 = v171;
            v170 = &v169;
            v171[0] = &off_1E25CC9F0;
            v93 = sub_18D20D94C((uint64_t)(this + 173), (uint64_t *)&v169, (uint64_t)&std::piecewise_construct, &v170);
            sub_18D20C7C8(v93 + 3, (uint64_t)v171);
            v94 = v172;
            if (v172 == v171)
            {
              v95 = 4;
              v94 = v171;
            }
            else
            {
              if (!v172)
                goto LABEL_125;
              v95 = 5;
            }
            (*(void (**)(void))(*v94 + 8 * v95))();
          }
LABEL_125:
          if (!v91)
            std::mutex::unlock(v92);
          goto LABEL_127;
        }
LABEL_69:
        v56 = this[172];
        if (v54 >= v56)
        {
          v59 = ((char *)v54 - (char *)*v11) >> 5;
          if ((unint64_t)(v59 + 1) >> 59)
            sub_18D07AFE4();
          v60 = (char *)v56 - (char *)*v11;
          v61 = v60 >> 4;
          if (v60 >> 4 <= (unint64_t)(v59 + 1))
            v61 = v59 + 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFE0)
            v62 = 0x7FFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          if (v62)
            v63 = (char *)sub_18D184AF4((uint64_t)(this + 172), v62);
          else
            v63 = 0;
          v64 = &v63[32 * v59];
          v65 = (cnframework::ActiveObjectBase **)&v63[32 * v62];
          v66 = v168;
          *(_OWORD *)v64 = v167;
          *((_OWORD *)v64 + 1) = v66;
          v58 = (cnframework::ActiveObjectBase **)(v64 + 32);
          v67 = this[171];
          v68 = this[170];
          if (v67 != v68)
          {
            do
            {
              v69 = *((_OWORD *)v67 - 1);
              *((_OWORD *)v64 - 2) = *((_OWORD *)v67 - 2);
              *((_OWORD *)v64 - 1) = v69;
              v64 -= 32;
              v67 -= 4;
            }
            while (v67 != v68);
            v67 = *v11;
          }
          this[170] = (cnframework::ActiveObjectBase **)v64;
          this[171] = v58;
          this[172] = v65;
          if (v67)
            operator delete(v67);
        }
        else
        {
          v57 = v168;
          *(_OWORD *)v54 = v167;
          *((_OWORD *)v54 + 1) = v57;
          v58 = v54 + 4;
        }
        this[171] = v58;
        v70 = *((unsigned __int8 *)this + 1520);
        if (*((_BYTE *)this + 1520))
        {
          v71 = 0;
        }
        else
        {
          v71 = (std::mutex *)(this + 178);
          std::mutex::lock((std::mutex *)(this + 178));
        }
        if (!sub_18D03FCF0(this + 173, (uint64_t *)&v169))
        {
          v172 = v171;
          v170 = &v169;
          v171[0] = &off_1E25CC8E8;
          v72 = sub_18D20D94C((uint64_t)(this + 173), (uint64_t *)&v169, (uint64_t)&std::piecewise_construct, &v170);
          sub_18D20C7C8(v72 + 3, (uint64_t)v171);
          v73 = v172;
          if (v172 == v171)
          {
            v74 = 4;
            v73 = v171;
          }
          else
          {
            if (!v172)
              goto LABEL_94;
            v74 = 5;
          }
          (*(void (**)(void))(*v73 + 8 * v74))();
        }
LABEL_94:
        if (!v70)
          std::mutex::unlock(v71);
        goto LABEL_96;
      }
LABEL_38:
      v35 = this[172];
      if (v33 >= v35)
      {
        v38 = ((char *)v33 - (char *)*v11) >> 5;
        if ((unint64_t)(v38 + 1) >> 59)
          sub_18D07AFE4();
        v39 = (char *)v35 - (char *)*v11;
        v40 = v39 >> 4;
        if (v39 >> 4 <= (unint64_t)(v38 + 1))
          v40 = v38 + 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0)
          v41 = 0x7FFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
          v42 = (char *)sub_18D184AF4((uint64_t)(this + 172), v41);
        else
          v42 = 0;
        v43 = &v42[32 * v38];
        v44 = (cnframework::ActiveObjectBase **)&v42[32 * v41];
        v45 = v168;
        *(_OWORD *)v43 = v167;
        *((_OWORD *)v43 + 1) = v45;
        v37 = (cnframework::ActiveObjectBase **)(v43 + 32);
        v46 = this[171];
        v47 = this[170];
        if (v46 != v47)
        {
          do
          {
            v48 = *((_OWORD *)v46 - 1);
            *((_OWORD *)v43 - 2) = *((_OWORD *)v46 - 2);
            *((_OWORD *)v43 - 1) = v48;
            v43 -= 32;
            v46 -= 4;
          }
          while (v46 != v47);
          v46 = *v11;
        }
        this[170] = (cnframework::ActiveObjectBase **)v43;
        this[171] = v37;
        this[172] = v44;
        if (v46)
          operator delete(v46);
      }
      else
      {
        v36 = v168;
        *(_OWORD *)v33 = v167;
        *((_OWORD *)v33 + 1) = v36;
        v37 = v33 + 4;
      }
      this[171] = v37;
      v49 = *((unsigned __int8 *)this + 1520);
      if (*((_BYTE *)this + 1520))
      {
        v50 = 0;
      }
      else
      {
        v50 = (std::mutex *)(this + 178);
        std::mutex::lock((std::mutex *)(this + 178));
      }
      if (!sub_18D03FCF0(this + 173, (uint64_t *)&v169))
      {
        v172 = v171;
        v170 = &v169;
        v171[0] = &off_1E25CC998;
        v51 = sub_18D20D94C((uint64_t)(this + 173), (uint64_t *)&v169, (uint64_t)&std::piecewise_construct, &v170);
        sub_18D20C7C8(v51 + 3, (uint64_t)v171);
        v52 = v172;
        if (v172 == v171)
        {
          v53 = 4;
          v52 = v171;
        }
        else
        {
          if (!v172)
            goto LABEL_63;
          v53 = 5;
        }
        (*(void (**)(void))(*v52 + 8 * v53))();
      }
LABEL_63:
      if (!v49)
        std::mutex::unlock(v50);
      goto LABEL_65;
    }
LABEL_6:
    v14 = this[172];
    if (v12 >= v14)
    {
      v17 = ((char *)v12 - (char *)*v11) >> 5;
      if ((unint64_t)(v17 + 1) >> 59)
        sub_18D07AFE4();
      v18 = (char *)v14 - (char *)*v11;
      v19 = v18 >> 4;
      if (v18 >> 4 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
        v20 = 0x7FFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)sub_18D184AF4((uint64_t)(this + 172), v20);
      else
        v21 = 0;
      v22 = &v21[32 * v17];
      v23 = (cnframework::ActiveObjectBase **)&v21[32 * v20];
      v24 = v168;
      *(_OWORD *)v22 = v167;
      *((_OWORD *)v22 + 1) = v24;
      v16 = (cnframework::ActiveObjectBase **)(v22 + 32);
      v25 = this[171];
      v26 = this[170];
      if (v25 != v26)
      {
        do
        {
          v27 = *((_OWORD *)v25 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v25 - 2);
          *((_OWORD *)v22 - 1) = v27;
          v22 -= 32;
          v25 -= 4;
        }
        while (v25 != v26);
        v25 = *v11;
      }
      this[170] = (cnframework::ActiveObjectBase **)v22;
      this[171] = v16;
      this[172] = v23;
      if (v25)
        operator delete(v25);
    }
    else
    {
      v15 = v168;
      *(_OWORD *)v12 = v167;
      *((_OWORD *)v12 + 1) = v15;
      v16 = v12 + 4;
    }
    this[171] = v16;
    v28 = *((unsigned __int8 *)this + 1520);
    if (*((_BYTE *)this + 1520))
    {
      v29 = 0;
    }
    else
    {
      v29 = (std::mutex *)(this + 178);
      std::mutex::lock((std::mutex *)(this + 178));
    }
    if (!sub_18D03FCF0(this + 173, (uint64_t *)&v169))
    {
      v172 = v171;
      v170 = &v169;
      v171[0] = &off_1E25CCAA0;
      v30 = sub_18D20D94C((uint64_t)(this + 173), (uint64_t *)&v169, (uint64_t)&std::piecewise_construct, &v170);
      sub_18D20C7C8(v30 + 3, (uint64_t)v171);
      v31 = v172;
      if (v172 == v171)
      {
        v32 = 4;
        v31 = v171;
      }
      else
      {
        if (!v172)
          goto LABEL_32;
        v32 = 5;
      }
      (*(void (**)(void))(*v31 + 8 * v32))();
    }
LABEL_32:
    if (!v28)
      std::mutex::unlock(v29);
    goto LABEL_34;
  }
  LOWORD(v171[0]) = 13;
  LOBYTE(v167) = 5;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v171, (unsigned __int8 *)&v167, "TrackRunSupervisor::Configure() called with invalid configuration parameters.", a4, a5, a6, a7, a8, v165);
  return v8 != 0;
}

void sub_18D2F193C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  std::mutex *v21;
  char *v22;
  int v23;
  char *v25;
  uint64_t v26;

  v25 = a21;
  if (a21 == v22)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  if (!v23)
    std::mutex::unlock(v21);
  _Unwind_Resume(exception_object);
}

void trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::Raven::RavenPlatformInfo *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  __int16 v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  __int16 v27;
  void *v28[2];
  uint64_t v29;
  int v30;
  __int16 v31;
  void *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int16 v47;
  char v48;
  __int128 __p;
  uint64_t v50;
  __int16 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  void *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;

  if (!*((_BYTE *)this + 817))
  {
    sub_18D2F3880((uint64_t)&v47);
    CNPlatformInfo::CNPlatformInfo((CNPlatformInfo *)&v18, a2);
    trackrun::TrackRunParameters::TrackRunParameters((trackrun::TrackRunParameters *)&v23, (const trackrun::TrackRunPlatformInfo *)&v18);
    v47 = v23;
    v48 = v24;
    if (SHIBYTE(v50) < 0)
      operator delete((void *)__p);
    __p = v25;
    v50 = v26;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    v51 = v27;
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    v52 = *(_OWORD *)v28;
    v53 = v29;
    HIBYTE(v29) = 0;
    LOBYTE(v28[0]) = 0;
    v54 = v30;
    v55 = v31;
    if (v59)
    {
      v4 = v58;
      if (v58)
      {
        do
        {
          v5 = (_QWORD *)*v4;
          operator delete(v4);
          v4 = v5;
        }
        while (v5);
      }
      v58 = 0;
      v6 = v57;
      if (v57)
      {
        v7 = 0;
        do
          *((_QWORD *)v56 + v7++) = 0;
        while (v6 != v7);
      }
      v59 = 0;
    }
    v8 = v32;
    v32 = 0;
    v9 = v56;
    v56 = v8;
    if (v9)
      operator delete(v9);
    v10 = v33;
    v33 = 0;
    v58 = v34;
    v59 = v35;
    v60 = v36;
    v57 = v10;
    if (v35)
    {
      v11 = v34[1];
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v11 >= v10)
          v11 %= v10;
      }
      else
      {
        v11 &= v10 - 1;
      }
      *((_QWORD *)v56 + v11) = &v58;
      v34 = 0;
      v35 = 0;
    }
    v67 = v43;
    v68 = v44;
    v69 = v45;
    v70 = v46;
    v63 = v39;
    v64 = v40;
    v65 = v41;
    v66 = v42;
    v61 = v37;
    v62 = v38;
    sub_18D04344C((uint64_t)&v32);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
    if (v22 < 0)
      operator delete(v21);
    if (v20 < 0)
      operator delete(v19);
    trackrun::TrackRunSupervisor::Configure((uint64_t)this, &v47, v12, v13, v14, v15, v16, v17);
    sub_18D04344C((uint64_t)&v56);
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)__p);
  }
}

void sub_18D2F1C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_18D2F0824((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F1C90(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *a2, trackrun::GEOMapRunningTrackDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void (**v23)(trackrun::GEOMapRunningTrackDataEvent *__hidden);
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  char v32;
  void (**v33)(trackrun::GEOMapRunningTrackDataEvent *__hidden);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char *v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;

  *((_QWORD *)&v37 + 1) = 0;
  *(_QWORD *)&v38 = 0;
  BYTE8(v38) = 0;
  v39 = 0uLL;
  v33 = off_1E25C8B58;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  LOBYTE(v37) = 0;
  v40 = 1;
  if (trackrun::ConvertProtobufToGEOMapRunningTrackDataEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *)&v33, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    v16 = (char *)operator new(0x60uLL);
    *((_QWORD *)v16 + 1) = 0;
    v17 = (unint64_t *)(v16 + 8);
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &unk_1E25CCE50;
    *((_QWORD *)v16 + 3) = &unk_1E25B8C58;
    v18 = MEMORY[0x1E0DE4F20];
    v16[32] = 0;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 6) = v18;
    v19 = (void **)(v16 + 72);
    *((_QWORD *)v16 + 7) = 0;
    *((_QWORD *)v16 + 8) = 0;
    sub_18D0778AC((_QWORD *)v16 + 9, "");
    v16[32] = 1;
    v20 = operator new();
    *(_QWORD *)v20 = &off_1E25C1F60;
    *(_QWORD *)(v20 + 8) = off_1E25C8B58;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    sub_18D2E8330((_QWORD *)(v20 + 16), v34, v35, 0x4EC4EC4EC4EC4EC5 * ((v35 - v34) >> 3));
    v21 = v38;
    *(_OWORD *)(v20 + 40) = v37;
    *(_OWORD *)(v20 + 56) = v21;
    *(_OWORD *)(v20 + 72) = v39;
    *(_BYTE *)(v20 + 88) = v40;
    v22 = *((_QWORD *)v16 + 5);
    *((_QWORD *)v16 + 5) = v20;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v33;
    *((_QWORD *)v16 + 6) = *(v33 - 1);
    *((_QWORD *)v16 + 7) = ((uint64_t (*)(_QWORD))v23[2])(&v33);
    *((_QWORD *)v16 + 8) = v24;
    ((void (*)(__int128 *__return_ptr, void (***)(trackrun::GEOMapRunningTrackDataEvent *__hidden)))v33[3])(&v43, &v33);
    if (v16[95] < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = v43;
    *((_QWORD *)v16 + 11) = v44;
    v41 = v16 + 24;
    v42 = (std::__shared_weak_count *)v16;
    *(_QWORD *)&v43 = v16 + 24;
    *((_QWORD *)&v43 + 1) = v16;
    do
      v25 = __ldxr(v17);
    while (__stxr(v25 + 1, v17));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v43, (uint64_t)this + 16);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    LOWORD(v43) = 13;
    LOBYTE(v41) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, (unsigned __int8 *)&v41, "Warning:Unable to create GEOMapTrackRunDataEvent from protobuf", v11, v12, v13, v14, v15, v32);
  }
  v33 = off_1E25C8B58;
  *(_QWORD *)&v43 = &v34;
  sub_18D2DC5D8((void ***)&v43);
}

void sub_18D2F1F7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = v1;
  sub_18D2DC5D8((void ***)(v2 - 88));
  _Unwind_Resume(a1);
}

void trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, trackrun::PositionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[96];
  _BYTE v39[32];
  char *v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  uint64_t v43;

  v32 = &unk_1E25C8930;
  LOBYTE(v33) = 0;
  *((_QWORD *)&v33 + 1) = 0;
  *(_QWORD *)&v34 = 0;
  BYTE8(v34) = 0;
  *((_QWORD *)&v36 + 1) = 0;
  *(_QWORD *)&v37 = 0;
  BYTE8(v37) = 0;
  v35 = 0uLL;
  LOBYTE(v36) = 0;
  *(_QWORD *)v38 = 0;
  *(_QWORD *)&v38[8] = 0;
  *(_DWORD *)&v38[15] = 0;
  *(int64x2_t *)&v38[24] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v38[40] = *(_OWORD *)&v38[24];
  *(_OWORD *)&v38[56] = *(_OWORD *)&v38[24];
  *(_OWORD *)&v38[72] = *(_OWORD *)&v38[24];
  *(_QWORD *)&v38[88] = 0x7FF8000000000000;
  *(_WORD *)v39 = 0;
  *(_OWORD *)&v39[8] = *(_OWORD *)&v38[24];
  *(_QWORD *)&v39[24] = 0x7FF8000000000000;
  if (trackrun::ConvertProtobufToPositionEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::Location *)&v32, a3, a4, a5, a6, a7, a8, *(int8x16_t *)&v38[24], a10))
  {
    v11 = (char *)operator new(0x60uLL);
    *((_QWORD *)v11 + 1) = 0;
    v12 = (unint64_t *)(v11 + 8);
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &unk_1E25CCE50;
    *((_QWORD *)v11 + 3) = &unk_1E25B8C58;
    v13 = MEMORY[0x1E0DE4F20];
    v11[32] = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = v13;
    v14 = (void **)(v11 + 72);
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    sub_18D0778AC((_QWORD *)v11 + 9, "");
    v11[32] = 1;
    v15 = operator new();
    *(_QWORD *)v15 = &off_1E25C1E70;
    *(_QWORD *)(v15 + 8) = &unk_1E25C8930;
    v16 = *(_OWORD *)v39;
    *(_OWORD *)(v15 + 176) = *(_OWORD *)&v38[80];
    *(_OWORD *)(v15 + 192) = v16;
    *(_OWORD *)(v15 + 208) = *(_OWORD *)&v39[16];
    v17 = *(_OWORD *)&v38[32];
    *(_OWORD *)(v15 + 112) = *(_OWORD *)&v38[16];
    *(_OWORD *)(v15 + 128) = v17;
    v18 = *(_OWORD *)&v38[64];
    *(_OWORD *)(v15 + 144) = *(_OWORD *)&v38[48];
    *(_OWORD *)(v15 + 160) = v18;
    v19 = v36;
    *(_OWORD *)(v15 + 48) = v35;
    *(_OWORD *)(v15 + 64) = v19;
    v20 = *(_OWORD *)v38;
    *(_OWORD *)(v15 + 80) = v37;
    *(_OWORD *)(v15 + 96) = v20;
    v21 = v34;
    *(_OWORD *)(v15 + 16) = v33;
    *(_OWORD *)(v15 + 32) = v21;
    v22 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v11 + 5) = v15;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v32;
    *((_QWORD *)v11 + 6) = *(v32 - 1);
    *((_QWORD *)v11 + 7) = ((uint64_t (*)(uint64_t))v23[2])((uint64_t)&v32);
    *((_QWORD *)v11 + 8) = v24;
    ((void (*)(_QWORD *@<X8>))v32[3])(&v42);
    if (v11[95] < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = v42;
    *((_QWORD *)v11 + 11) = v43;
    v40 = v11 + 24;
    v41 = (std::__shared_weak_count *)v11;
    *(_QWORD *)&v42 = v11 + 24;
    *((_QWORD *)&v42 + 1) = v11;
    do
      v25 = __ldxr(v12);
    while (__stxr(v25 + 1, v12));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v42, (uint64_t)this + 16);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
}

void sub_18D2F229C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18D07C868(v1 - 88);
  sub_18D07C868(v1 - 104);
  _Unwind_Resume(a1);
}

void trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, trackrun::MovingStateEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  CoreNavigation::CLP::LogEntry::PrivateData *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  char *v19;
  unint64_t *v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char *v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  uint64_t v43;

  v35 = &unk_1E25C8990;
  LOBYTE(v36) = 0;
  *((_QWORD *)&v36 + 1) = 0;
  *(_QWORD *)&v37 = 0;
  BYTE8(v37) = 0;
  v38 = 0uLL;
  v39 = 0;
  v12 = (CoreNavigation::CLP::LogEntry::PrivateData *)trackrun::ConvertProtobufToMovingStateEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *)&v35, a3, a4, a5, a6, a7, a8, a9, a10);
  if ((_DWORD)v12)
  {
    LOWORD(v42) = 13;
    LOBYTE(v40) = 2;
    v18 = *(double *)&v37 + (double)*((uint64_t *)&v36 + 1);
    if (!*((_QWORD *)a2 + 2))
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v12);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, (unsigned __int8 *)&v40, "ExternalMovingState,t,%.3lf,moving_tate,%d,activityType,%d", v13, v14, v15, v16, v17, SLOBYTE(v18));
    v19 = (char *)operator new(0x60uLL);
    *((_QWORD *)v19 + 1) = 0;
    v20 = (unint64_t *)(v19 + 8);
    *((_QWORD *)v19 + 2) = 0;
    *(_QWORD *)v19 = &unk_1E25CCE50;
    *((_QWORD *)v19 + 3) = &unk_1E25B8C58;
    v21 = MEMORY[0x1E0DE4F20];
    v19[32] = 0;
    *((_QWORD *)v19 + 5) = 0;
    *((_QWORD *)v19 + 6) = v21;
    v22 = (void **)(v19 + 72);
    *((_QWORD *)v19 + 7) = 0;
    *((_QWORD *)v19 + 8) = 0;
    sub_18D0778AC((_QWORD *)v19 + 9, "");
    v19[32] = 1;
    v23 = operator new();
    *(_QWORD *)v23 = &off_1E25C1ED0;
    *(_QWORD *)(v23 + 8) = &unk_1E25C8990;
    v24 = v37;
    *(_OWORD *)(v23 + 16) = v36;
    *(_OWORD *)(v23 + 32) = v24;
    *(_OWORD *)(v23 + 48) = v38;
    *(_BYTE *)(v23 + 64) = v39;
    v25 = *((_QWORD *)v19 + 5);
    *((_QWORD *)v19 + 5) = v23;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = v35;
    *((_QWORD *)v19 + 6) = *(v35 - 1);
    *((_QWORD *)v19 + 7) = ((uint64_t (*)(uint64_t))v26[2])((uint64_t)&v35);
    *((_QWORD *)v19 + 8) = v27;
    ((void (*)(_QWORD *@<X8>))v35[3])(&v42);
    if (v19[95] < 0)
      operator delete(*v22);
    *(_OWORD *)v22 = v42;
    *((_QWORD *)v19 + 11) = v43;
    v40 = v19 + 24;
    v41 = (std::__shared_weak_count *)v19;
    *(_QWORD *)&v42 = v19 + 24;
    *((_QWORD *)&v42 + 1) = v19;
    do
      v28 = __ldxr(v20);
    while (__stxr(v28 + 1, v20));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v42, (uint64_t)this + 16);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
}

void sub_18D2F2590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va1);
  sub_18D07C868((uint64_t)va);
  _Unwind_Resume(a1);
}

void trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator *a2)
{
  trackrun::WorkoutSessionEvent *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  void (**v12)(trackrun::WorkoutSessionEvent *__hidden);
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  void *__p;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v12 = off_1E25C8A88;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  sub_18D0778AC(&__p, "");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v34 = 0;
  v32 = 0;
  v33 = 0;
  if (trackrun::ConvertProtobufToWorkoutSessionEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator *)&v12, v4, v5, v6, v7, v8, v9, v10, v11))sub_18D2F26E8((uint64_t)this, (uint64_t)&v12);
  v12 = off_1E25C8A88;
  if (v21 < 0)
    operator delete(__p);
}

void sub_18D2F26C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18D2F26E8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  char *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E25CCE50;
  *((_QWORD *)v4 + 3) = &unk_1E25B8C58;
  v6 = MEMORY[0x1E0DE4F20];
  v4[32] = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = v6;
  v7 = (void **)(v4 + 72);
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  sub_18D0778AC((_QWORD *)v4 + 9, "");
  v4[32] = 1;
  v8 = operator new();
  sub_18D2F53E0(v8, a2);
  v9 = *((_QWORD *)v4 + 5);
  *((_QWORD *)v4 + 5) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(*(_QWORD *)a2 - 8);
  *((_QWORD *)v4 + 7) = (*(uint64_t (**)(uint64_t))(v10 + 16))(a2);
  *((_QWORD *)v4 + 8) = v11;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v23, a2);
  if (v4[95] < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v23;
  *((_QWORD *)v4 + 11) = v24;
  v21 = v4 + 24;
  v22 = (std::__shared_weak_count *)v4;
  v19 = v4 + 24;
  v20 = (std::__shared_weak_count *)v4;
  do
    v12 = __ldxr(v5);
  while (__stxr(v12 + 1, v5));
  cnframework::Supervisor::RaiseEvent(a1, &v19, a1 + 16);
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_18D2F28B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va);
  sub_18D07C868((uint64_t)va1);
  _Unwind_Resume(a1);
}

void trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *a2)
{
  trackrun::WorkoutSessionEvent *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  void (**v12)(trackrun::WorkoutSessionEvent *__hidden);
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  void *__p;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v12 = off_1E25C8A88;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  sub_18D0778AC(&__p, "");
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v34 = 0;
  v32 = 0;
  v33 = 0;
  if (trackrun::ConvertProtobufToWorkoutSessionEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *)&v12, v4, v5, v6, v7, v8, v9, v10, v11))sub_18D2F26E8((uint64_t)this, (uint64_t)&v12);
  v12 = off_1E25C8A88;
  if (v21 < 0)
    operator delete(__p);
}

void sub_18D2F2A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit *a2)
{
  trackrun::VisitEvent *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v14;
  void **v15;
  uint64_t v16;
  uint64_t shared_weak_owners;
  void (**v18)(trackrun::VisitEvent *__hidden);
  uint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void (**v27)(trackrun::VisitEvent *__hidden);
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int64x2_t v52;
  unint64_t v53;
  __int16 v54;
  uint64_t v55[3];
  _QWORD v56[4];
  std::__shared_weak_count *v57;
  __int128 v58;
  uint64_t v59;

  v27 = &off_1E25C8900;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v34 = 0;
  v32 = 0;
  v33 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v52 = vdupq_n_s64(0x7FF8000000000000uLL);
  v53 = 0xBFF0000000000000;
  v54 = 0;
  sub_18D0778AC(v55, "");
  sub_18D0778AC(v56, "");
  if (trackrun::ConvertProtobufToVisitEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit *)&v27, v4, v5, v6, v7, v8, v9, v10, v11))
  {
    v12 = (std::__shared_weak_count *)operator new(0x60uLL);
    v12->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25CCE50;
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E25B8C58;
    v14 = (std::__shared_weak_count_vtbl *)MEMORY[0x1E0DE4F20];
    LOBYTE(v12[1].__shared_owners_) = 0;
    v12[1].__shared_weak_owners_ = 0;
    v12[2].__vftable = v14;
    v15 = (void **)&v12[3].__vftable;
    v12[2].__shared_owners_ = 0;
    v12[2].__shared_weak_owners_ = 0;
    sub_18D0778AC(&v12[3].__vftable, "");
    LOBYTE(v12[1].__shared_owners_) = 1;
    v16 = operator new();
    sub_18D2F55A0(v16, (uint64_t)&v27);
    shared_weak_owners = v12[1].__shared_weak_owners_;
    v12[1].__shared_weak_owners_ = v16;
    if (shared_weak_owners)
      (*(void (**)(uint64_t))(*(_QWORD *)shared_weak_owners + 8))(shared_weak_owners);
    v18 = v27;
    v12[2].__vftable = (std::__shared_weak_count_vtbl *)*(v27 - 1);
    v12[2].__shared_owners_ = ((uint64_t (*)(uint64_t))v18[2])((uint64_t)&v27);
    v12[2].__shared_weak_owners_ = v19;
    ((void (*)(_QWORD *@<X8>))v27[3])(&v58);
    if (SHIBYTE(v12[3].__shared_weak_owners_) < 0)
      operator delete(*v15);
    *(_OWORD *)v15 = v58;
    v12[3].__shared_weak_owners_ = v59;
    v56[3] = v12 + 1;
    v57 = v12;
    *(_QWORD *)&v58 = v12 + 1;
    *((_QWORD *)&v58 + 1) = v12;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v58, (uint64_t)this + 16);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v57;
    if (v57)
    {
      v25 = (unint64_t *)&v57->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  trackrun::VisitEvent::~VisitEvent((void **)&v27);
}

void sub_18D2F2CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  sub_18D07C868(v43 - 88);
  sub_18D07C868(v43 - 104);
  trackrun::VisitEvent::~VisitEvent((void **)&a9);
  _Unwind_Resume(a1);
}

void trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::TropicalSavanna::TropicalSavannaHint *a2, trackrun::TrackRunHintEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char *v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  uint64_t v41;

  v33 = &unk_1E25C89C0;
  LOBYTE(v34) = 0;
  *((_QWORD *)&v34 + 1) = 0;
  *(_QWORD *)&v35 = 0;
  BYTE8(v35) = 0;
  v36 = 0uLL;
  v37 = 0;
  if (trackrun::ConvertProtobufToTrackRunHintEvent(a2, (const CoreNavigation::CLP::LogEntry::TropicalSavanna::TropicalSavannaHint *)&v33, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    v16 = (char *)operator new(0x60uLL);
    *((_QWORD *)v16 + 1) = 0;
    v17 = (unint64_t *)(v16 + 8);
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &unk_1E25CCE50;
    *((_QWORD *)v16 + 3) = &unk_1E25B8C58;
    v18 = MEMORY[0x1E0DE4F20];
    v16[32] = 0;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 6) = v18;
    v19 = (void **)(v16 + 72);
    *((_QWORD *)v16 + 7) = 0;
    *((_QWORD *)v16 + 8) = 0;
    sub_18D0778AC((_QWORD *)v16 + 9, "");
    v16[32] = 1;
    v20 = operator new();
    *(_QWORD *)v20 = &off_1E25C1F00;
    *(_QWORD *)(v20 + 8) = &unk_1E25C89C0;
    v21 = v35;
    *(_OWORD *)(v20 + 16) = v34;
    *(_OWORD *)(v20 + 32) = v21;
    *(_OWORD *)(v20 + 48) = v36;
    *(_BYTE *)(v20 + 64) = v37;
    v22 = *((_QWORD *)v16 + 5);
    *((_QWORD *)v16 + 5) = v20;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v33;
    *((_QWORD *)v16 + 6) = *(v33 - 1);
    *((_QWORD *)v16 + 7) = ((uint64_t (*)(uint64_t))v23[2])((uint64_t)&v33);
    *((_QWORD *)v16 + 8) = v24;
    ((void (*)(_QWORD *@<X8>))v33[3])(&v40);
    if (v16[95] < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = v40;
    *((_QWORD *)v16 + 11) = v41;
    v38 = v16 + 24;
    v39 = (std::__shared_weak_count *)v16;
    *(_QWORD *)&v40 = v16 + 24;
    *((_QWORD *)&v40 + 1) = v16;
    do
      v25 = __ldxr(v17);
    while (__stxr(v25 + 1, v17));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v40, (uint64_t)this + 16);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    LOWORD(v40) = 13;
    LOBYTE(v38) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, (unsigned __int8 *)&v38, "Warning:Unable to create TrackRunHintEvent from protobuf", v11, v12, v13, v14, v15, v32);
  }
}

void sub_18D2F2FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va1);
  sub_18D07C868((uint64_t)va);
  _Unwind_Resume(a1);
}

void trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::WatchState *a2, trackrun::WatchStateEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int16 v37;
  char *v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  uint64_t v41;

  v33 = &unk_1E25C8960;
  LOBYTE(v34) = 0;
  *((_QWORD *)&v34 + 1) = 0;
  *(_QWORD *)&v35 = 0;
  BYTE8(v35) = 0;
  v36 = 0uLL;
  if (trackrun::ConvertProtobufToWatchStateEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::WatchState *)&v33, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    v16 = (char *)operator new(0x60uLL);
    *((_QWORD *)v16 + 1) = 0;
    v17 = (unint64_t *)(v16 + 8);
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &unk_1E25CCE50;
    *((_QWORD *)v16 + 3) = &unk_1E25B8C58;
    v18 = MEMORY[0x1E0DE4F20];
    v16[32] = 0;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 6) = v18;
    v19 = (void **)(v16 + 72);
    *((_QWORD *)v16 + 7) = 0;
    *((_QWORD *)v16 + 8) = 0;
    sub_18D0778AC((_QWORD *)v16 + 9, "");
    v16[32] = 1;
    v20 = operator new();
    *(_QWORD *)v20 = &off_1E25C1EA0;
    *(_QWORD *)(v20 + 8) = &unk_1E25C8960;
    v21 = v35;
    *(_OWORD *)(v20 + 16) = v34;
    *(_OWORD *)(v20 + 32) = v21;
    *(_OWORD *)(v20 + 48) = v36;
    *(_WORD *)(v20 + 64) = v37;
    v22 = *((_QWORD *)v16 + 5);
    *((_QWORD *)v16 + 5) = v20;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v33;
    *((_QWORD *)v16 + 6) = *(v33 - 1);
    *((_QWORD *)v16 + 7) = ((uint64_t (*)(uint64_t))v23[2])((uint64_t)&v33);
    *((_QWORD *)v16 + 8) = v24;
    ((void (*)(_QWORD *@<X8>))v33[3])(&v40);
    if (v16[95] < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = v40;
    *((_QWORD *)v16 + 11) = v41;
    v38 = v16 + 24;
    v39 = (std::__shared_weak_count *)v16;
    *(_QWORD *)&v40 = v16 + 24;
    *((_QWORD *)&v40 + 1) = v16;
    do
      v25 = __ldxr(v17);
    while (__stxr(v25 + 1, v17));
    cnframework::Supervisor::RaiseEvent((uint64_t)this, &v40, (uint64_t)this + 16);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    LOWORD(v40) = 13;
    LOBYTE(v38) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, (unsigned __int8 *)&v38, "Warning:Unable to create WatchStateEvent from protobuf", v11, v12, v13, v14, v15, v32);
  }
}

void sub_18D2F3260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_18D07C868((uint64_t)va1);
  sub_18D07C868((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *this, const CoreNavigation::CLP::LogEntry::LogEntry *a2, trackrun::GEOMapRunningTrackDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const CoreNavigation::CLP::LogEntry::Raven::RavenPlatformInfo *v17;
  uint64_t v18;
  const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *v19;
  uint64_t v20;
  const CoreNavigation::CLP::LogEntry::PrivateData::Location *v21;
  uint64_t v22;
  const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *v23;
  uint64_t v24;
  const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const CoreNavigation::CLP::LogEntry::TropicalSavanna::TropicalSavannaHint *v33;
  uint64_t v34;
  const CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit *v35;
  uint64_t v36;
  const CoreNavigation::CLP::LogEntry::PrivateData::WatchState *v37;

  v12 = *((_QWORD *)a2 + 5);
  v13 = v12;
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v13 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v12 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v13 + 320) & 2) == 0)
    goto LABEL_9;
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  v14 = *(_QWORD *)(v12 + 272);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
    v14 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 272);
  }
  v12 = *((_QWORD *)a2 + 5);
  if ((*(_BYTE *)(v14 + 28) & 2) != 0)
  {
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v16 = *(_QWORD *)(v12 + 272);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v16 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 272);
    }
    v17 = *(const CoreNavigation::CLP::LogEntry::Raven::RavenPlatformInfo **)(v16 + 16);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenLogEntry_2eproto(this);
      v17 = *(const CoreNavigation::CLP::LogEntry::Raven::RavenPlatformInfo **)(CoreNavigation::CLP::LogEntry::Raven::LogEntry::default_instance_
                                                                              + 16);
    }
    trackrun::TrackRunSupervisor::RaiseEventsFrom(this, v17);
    v12 = *((_QWORD *)a2 + 5);
    v15 = 1;
  }
  else
  {
LABEL_9:
    v15 = 0;
  }
  v18 = v12;
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v18 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v12 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v18 + 319) & 4) != 0)
  {
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v19 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData **)(v12 + 216);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v19 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                            + 216);
    }
    trackrun::TrackRunSupervisor::RaiseEventsFrom(this, v19, a3, a4, a5, a6, a7, a8, a9, a10);
    v12 = *((_QWORD *)a2 + 5);
    v15 = 2;
  }
  v20 = v12;
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v20 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v12 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v20 + 316) & 8) != 0)
  {
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v21 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Location **)(v12 + 32);
    if (!v21)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v21 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Location **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                           + 32);
    }
    trackrun::TrackRunSupervisor::RaiseEventsFrom(this, v21, a3, a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    v12 = *((_QWORD *)a2 + 5);
    v15 = 3;
  }
  v22 = v12;
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v22 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v12 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v22 + 316) & 0x10) != 0)
  {
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionState **)(v12 + 40);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionState **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                              + 40);
    }
    trackrun::TrackRunSupervisor::RaiseEventsFrom(this, v23, a3, a4, a5, a6, a7, a8, a9, a10);
    v12 = *((_QWORD *)a2 + 5);
    v15 = 4;
  }
  v24 = v12;
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v24 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v12 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v24 + 319) & 0x10) != 0)
  {
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v25 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator **)(v12 + 232);
    if (!v25)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v25 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                      + 232);
    }
    trackrun::TrackRunSupervisor::RaiseEventsFrom(this, v25);
    v12 = *((_QWORD *)a2 + 5);
    v15 = 5;
  }
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v12 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v12 + 317) & 8) != 0)
  {
    v26 = *((_QWORD *)a2 + 5);
    if (!v26)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v26 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    if (!*(_QWORD *)(v26 + 96))
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
    v15 = 8;
  }
  v27 = *((_QWORD *)a2 + 5);
  if (!v27)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v27 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v27 + 317) & 0x80) != 0)
  {
    v28 = *((_QWORD *)a2 + 5);
    if (!v28)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v28 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    if (!*(_QWORD *)(v28 + 128))
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
    v15 = 9;
  }
  v29 = *((_QWORD *)a2 + 5);
  v30 = v29;
  if (!v29)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v30 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v29 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v30 + 320) & 8) != 0)
  {
    if (!v29)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v31 = *(_QWORD *)(v29 + 288);
    if (!v31)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v31 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 288);
    }
    v29 = *((_QWORD *)a2 + 5);
    if ((*(_BYTE *)(v31 + 20) & 1) != 0)
    {
      if (!v29)
      {
        CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
        v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
      }
      v32 = *(_QWORD *)(v29 + 288);
      if (!v32)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
        v32 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 288);
      }
      v33 = *(const CoreNavigation::CLP::LogEntry::TropicalSavanna::TropicalSavannaHint **)(v32 + 8);
      if (!v33)
      {
        CoreNavigation::CLP::LogEntry::TropicalSavanna::protobuf_AddDesc_CoreNavigationCLPTropicalSavannaLogEntry_2eproto(this);
        v33 = *(const CoreNavigation::CLP::LogEntry::TropicalSavanna::TropicalSavannaHint **)(CoreNavigation::CLP::LogEntry::TropicalSavanna::LogEntry::default_instance_
                                                                                            + 8);
      }
      trackrun::TrackRunSupervisor::RaiseEventsFrom(this, v33, a3, a4, a5, a6, a7, a8, a9, a10);
      v29 = *((_QWORD *)a2 + 5);
      v15 = 10;
    }
  }
  v34 = v29;
  if (!v29)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v34 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v29 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v34 + 319) & 0x20) != 0)
  {
    if (!v29)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v35 = *(const CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit **)(v29 + 240);
    if (!v35)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v35 = *(const CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                               + 240);
    }
    trackrun::TrackRunSupervisor::RaiseEventsFrom(this, v35);
    v29 = *((_QWORD *)a2 + 5);
    v15 = 11;
  }
  v36 = v29;
  if (!v29)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v36 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    v29 = *((_QWORD *)a2 + 5);
  }
  if ((*(_BYTE *)(v36 + 319) & 8) != 0)
  {
    if (!v29)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    v37 = *(const CoreNavigation::CLP::LogEntry::PrivateData::WatchState **)(v29 + 224);
    if (!v37)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      v37 = *(const CoreNavigation::CLP::LogEntry::PrivateData::WatchState **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                             + 224);
    }
    trackrun::TrackRunSupervisor::RaiseEventsFrom(this, v37, a3, a4, a5, a6, a7, a8, a9, a10);
    v29 = *((_QWORD *)a2 + 5);
    v15 = 12;
  }
  if (!v29)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    v29 = *(_QWORD *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(_BYTE *)(v29 + 317) & 0x40) != 0)
  {
    cnframework::Supervisor::Reset(this);
    return 7;
  }
  return v15;
}

uint64_t trackrun::TrackRunSupervisor::RaiseEventsFrom(trackrun::TrackRunSupervisor *a1)
{
  trackrun::GEOMapRunningTrackDataEvent *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  char v12;
  unsigned __int8 v13;
  __int16 v14;
  _BYTE v15[56];

  CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v15);
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString() & 1) != 0)
  {
    v10 = trackrun::TrackRunSupervisor::RaiseEventsFrom(a1, (const CoreNavigation::CLP::LogEntry::LogEntry *)v15, v2, v3, v4, v5, v6, v7, v8, v9);
  }
  else
  {
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "Failed to parse incoming LogEntry", v3, v4, v5, v6, v7, v12);
    v10 = 0;
  }
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v15);
  return v10;
}

void sub_18D2F3868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F3880(uint64_t a1)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  sub_18D0778AC((_QWORD *)(a1 + 8), "trackrun_output.bin");
  *(_WORD *)(a1 + 32) = 1;
  sub_18D0778AC((_QWORD *)(a1 + 40), "trackrun_debug.txt");
  *(_DWORD *)(a1 + 64) = 256;
  *(_WORD *)(a1 + 68) = 256;
  v3 = 2;
  v4 = 0x40A3880000000000;
  v5 = 3;
  v6 = 0x40A3880000000000;
  v7 = 4;
  v8 = 0x4059000000000000;
  sub_18D2DC89C(a1 + 72, &v3, 3);
  *(_QWORD *)(a1 + 112) = 0x410E848000000000;
  *(_BYTE *)(a1 + 120) = 1;
  *(_OWORD *)(a1 + 128) = xmmword_18D3485A0;
  *(_OWORD *)(a1 + 144) = xmmword_18D3485B0;
  *(_OWORD *)(a1 + 160) = xmmword_18D3485C0;
  *(_QWORD *)(a1 + 176) = 0x3F50624DD2F1A9FCLL;
  *(_QWORD *)(a1 + 184) = 5;
  *(_QWORD *)(a1 + 192) = 0x4052C00000000000;
  *(_WORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 202) = 0;
  *(_QWORD *)(a1 + 208) = 1;
  *(_WORD *)(a1 + 216) = 256;
  *(_OWORD *)(a1 + 224) = xmmword_18D3189B0;
  *(_OWORD *)(a1 + 240) = xmmword_18D3485D0;
  *(_BYTE *)(a1 + 256) = 0;
  return a1;
}

void sub_18D2F39E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_18D2F3A18(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v4 = a1[1];
  if (!v4)
    goto LABEL_9;
  for (i = 0; i != v4; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v7 = *((int *)a2 + 4);
      *((_DWORD *)v6 + 4) = v7;
      v6[3] = a2[3];
      v8 = (uint64_t *)*v6;
      v6[1] = v7;
      v9 = sub_18D2F3B54((uint64_t)a1, v7, (_DWORD *)v6 + 4);
      sub_18D2F3EA0(a1, v6, v9);
      a2 = (uint64_t *)*a2;
      v6 = v8;
      if (!v8)
        goto LABEL_9;
    }
    do
    {
      v13 = (uint64_t *)*v6;
      operator delete(v6);
      v6 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_9:
    while (a2)
    {
      v10 = operator new(0x20uLL);
      *(_QWORD *)v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      v11 = *((int *)v10 + 4);
      *((_QWORD *)v10 + 1) = v11;
      v12 = sub_18D2F3B54((uint64_t)a1, v11, (_DWORD *)v10 + 4);
      sub_18D2F3EA0(a1, v10, v12);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_18D2F3B10(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_18D2F3B30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_18D2F3B54(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t *i;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t *result;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  int v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_74;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(_QWORD *)&prime >> 61)
        sub_18D0788A0();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        v17 = (unint64_t)v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = *v16; *v16; i = *v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = (uint64_t **)i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = (uint64_t **)i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  v28 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = 0;
  do
  {
    result = v28;
    v28 = (uint64_t *)*v28;
    if (!v28)
      break;
    v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      v32 = v28[1];
      if (v31 >= v6)
        v32 = v31 % v6;
    }
    else
    {
      v32 = v31 & (v6 - 1);
    }
    if (v32 != v27)
      break;
    v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

_QWORD *sub_18D2F3EA0(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_18D2F3F8C()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2F3FA0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CCAA0;
  return result;
}

void sub_18D2F3FC4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CCAA0;
}

void sub_18D2F3FDC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  const char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  void (**v37)(trackrun::GEOMapRunningTrackDataEvent *__hidden);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 v45;
  std::bad_cast v46;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v33 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v33 != (const char *)((unint64_t)"N8trackrun27GEOMapRunningTrackDataEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v33, (const char *)((unint64_t)"N8trackrun27GEOMapRunningTrackDataEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v46.__vftable = 0;
      std::bad_cast::bad_cast(&v46);
      v46.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v34 = *((_QWORD *)this + 2);
    v37 = off_1E25C8B58;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    sub_18D2E8330(&v38, *(_QWORD *)(v34 + 16), *(_QWORD *)(v34 + 24), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v34 + 24) - *(_QWORD *)(v34 + 16)) >> 3));
    v32 = *(__n128 *)(v34 + 40);
    v35 = *(_OWORD *)(v34 + 56);
    v36 = *(_OWORD *)(v34 + 72);
    LOBYTE(v44) = *(_BYTE *)(v34 + 88);
    v43 = v36;
    v42 = v35;
    v41 = v32;
  }
  else
  {
    LOWORD(v46.__vftable) = 3;
    v45 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, &v45, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v32 = 0uLL;
    v41 = 0u;
    v42 = 0uLL;
    v43 = 0uLL;
    v37 = off_1E25C8B58;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v44 = 1;
  }
  trackrun::TrackRunEngineActiveObject::HandleEvent(v9, (const trackrun::GEOMapRunningTrackDataEvent *)&v37, v26, v27, v28, v29, v30, v31, v32);
  v37 = off_1E25C8B58;
  v46.__vftable = (std::bad_cast_vtbl *)&v38;
  sub_18D2DC5D8((void ***)&v46);
}

void sub_18D2F4198(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F41CC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8B58))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2F4208()
{
  return &unk_1E25B8B58;
}

void sub_18D2F4218()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2F422C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC998;
  return result;
}

void sub_18D2F4250(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC998;
}

void sub_18D2F4268(int a1, trackrun::TrackRunEngineActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  trackrun::TrackRunEngineActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::bad_cast v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unsigned __int8 v36;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N8trackrun16MovingStateEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N8trackrun16MovingStateEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C8990;
    v28 = *(_OWORD *)(v27 + 16);
    v29 = *(_OWORD *)(v27 + 32);
    v30 = *(_OWORD *)(v27 + 48);
    LOBYTE(v35) = *(_BYTE *)(v27 + 64);
    v33 = v29;
    v34 = v30;
    v32 = v28;
  }
  else
  {
    LOWORD(v31.__vftable) = 3;
    v36 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v36, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v32 = 0u;
    v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C8990;
    v33 = 0uLL;
    v34 = 0uLL;
    v35 = 0;
  }
  trackrun::TrackRunEngineActiveObject::HandleEvent(v9, (const trackrun::MovingStateEvent *)&v31);
}

void sub_18D2F43C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F43D8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8B28))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2F4414()
{
  return &unk_1E25B8B28;
}

void sub_18D2F4424()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2F4438()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC8E8;
  return result;
}

void sub_18D2F445C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC8E8;
}

void sub_18D2F4474(int a1, trackrun::TrackRunEngineActiveObject **a2, int64x2_t **this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  trackrun::TrackRunEngineActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  double *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int64x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  const char *v31;
  int64x2_t *v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  std::bad_cast v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  _BYTE v45[96];
  _BYTE v46[32];
  unsigned __int8 v47;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType((cnframework::GenericEvent *)this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v19 = this[2];
    if (v19)
      v20 = (*(uint64_t (**)(int64x2_t *))(v19->i64[0] + 16))(v19);
    else
      v20 = MEMORY[0x1E0DE4F20];
    v31 = (const char *)(*(_QWORD *)(v20 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v31 != (const char *)((unint64_t)"N8trackrun13PositionEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v31, (const char *)((unint64_t)"N8trackrun13PositionEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v39.__vftable = 0;
      std::bad_cast::bad_cast(&v39);
      v39.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v32 = this[2];
    v39.__vftable = (std::bad_cast_vtbl *)&unk_1E25C8930;
    v40 = v32[1];
    v33 = v32[4];
    v34 = v32[5];
    v35 = v32[3];
    v41 = v32[2];
    v44 = v34;
    v43 = v33;
    v42 = v35;
    v36 = v32[8];
    v37 = v32[9];
    v38 = v32[7];
    *(int64x2_t *)v45 = v32[6];
    *(int64x2_t *)&v45[48] = v37;
    *(int64x2_t *)&v45[32] = v36;
    *(int64x2_t *)&v45[16] = v38;
    v30 = v32[12];
    v27 = v32[13];
    v29 = v32[10];
    v28 = v32[11];
    *(int64x2_t *)&v45[64] = v29;
    *(int64x2_t *)&v46[16] = v27;
    *(int64x2_t *)v46 = v30;
    *(int64x2_t *)&v45[80] = v28;
  }
  else
  {
    LOWORD(v39.__vftable) = 3;
    v47 = 5;
    v21 = cnframework::GenericEvent::GetEventType((cnframework::GenericEvent *)this, v11, (uint64_t)v12, (uint64_t)v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v47, "Attempted to cast a GenericEvent of type %s to type %s.", v22, v23, v24, v25, v26, *(_BYTE *)(v21 + 8));
    v40 = 0uLL;
    v43 = 0uLL;
    v39.__vftable = (std::bad_cast_vtbl *)&unk_1E25C8930;
    v41 = 0uLL;
    v44 = 0uLL;
    v42 = 0uLL;
    memset(v45, 0, 24);
    v30 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)&v45[24] = v30;
    *(int64x2_t *)&v45[40] = v30;
    *(int64x2_t *)&v45[56] = v30;
    *(int64x2_t *)&v45[72] = v30;
    *(_QWORD *)&v45[88] = 0x7FF8000000000000;
    *(_QWORD *)v46 = 0;
    *(int64x2_t *)&v46[8] = v30;
    *(_QWORD *)&v46[24] = 0x7FF8000000000000;
  }
  trackrun::TrackRunEngineActiveObject::HandleEvent(v9, (const trackrun::PositionEvent *)&v39, v12, v13, v14, v15, v16, v17, *(double *)v30.i64, *(double *)v27.i64, *(double *)v28.i64, *(double *)v29.i64, v18);
}

void sub_18D2F4660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  std::exception::~exception(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F4674(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8B08))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2F46B0()
{
  return &unk_1E25B8B08;
}

void sub_18D2F46C0()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2F46D4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC9F0;
  return result;
}

void sub_18D2F46F8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC9F0;
}

void sub_18D2F4710(int a1, trackrun::TrackRunEngineActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  trackrun::TrackRunEngineActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::bad_cast v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unsigned __int8 v36;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N8trackrun17TrackRunHintEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N8trackrun17TrackRunHintEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C89C0;
    v28 = *(_OWORD *)(v27 + 16);
    v29 = *(_OWORD *)(v27 + 32);
    v30 = *(_OWORD *)(v27 + 48);
    LOBYTE(v35) = *(_BYTE *)(v27 + 64);
    v33 = v29;
    v34 = v30;
    v32 = v28;
  }
  else
  {
    LOWORD(v31.__vftable) = 3;
    v36 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v36, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v32 = 0u;
    v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C89C0;
    v33 = 0uLL;
    v34 = 0uLL;
    v35 = 0;
  }
  trackrun::TrackRunEngineActiveObject::HandleEvent(v9, (const trackrun::TrackRunHintEvent *)&v31);
}

void sub_18D2F486C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F4880(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8B38))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2F48BC()
{
  return &unk_1E25B8B38;
}

void sub_18D2F48CC()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2F48E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC890;
  return result;
}

void sub_18D2F4904(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC890;
}

void sub_18D2F491C(int a1, trackrun::TrackRunEngineActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  trackrun::TrackRunEngineActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void (**v40)(trackrun::VisitEvent *__hidden);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[32];
  _OWORD v54[3];
  unsigned __int8 v55;
  std::bad_cast v56;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N8trackrun10VisitEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N8trackrun10VisitEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v56.__vftable = 0;
      std::bad_cast::bad_cast(&v56);
      v56.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v40 = &off_1E25C8900;
    v28 = *(_OWORD *)(v27 + 32);
    v41 = *(_OWORD *)(v27 + 16);
    v42 = v28;
    v29 = *(_OWORD *)(v27 + 80);
    v30 = *(_OWORD *)(v27 + 96);
    v31 = *(_OWORD *)(v27 + 64);
    v43 = *(_OWORD *)(v27 + 48);
    v44 = v31;
    v45 = v29;
    v46 = v30;
    v32 = *(_OWORD *)(v27 + 144);
    v33 = *(_OWORD *)(v27 + 160);
    v34 = *(_OWORD *)(v27 + 128);
    v47 = *(_OWORD *)(v27 + 112);
    v48 = v34;
    v50 = v33;
    v49 = v32;
    v36 = *(_OWORD *)(v27 + 192);
    v35 = *(_OWORD *)(v27 + 208);
    v37 = *(_OWORD *)(v27 + 218);
    v51 = *(_OWORD *)(v27 + 176);
    *(_OWORD *)&v53[10] = v37;
    *(_OWORD *)v53 = v35;
    v52 = v36;
    if (*(char *)(v27 + 263) < 0)
    {
      sub_18D077798(v54, *(void **)(v27 + 240), *(_QWORD *)(v27 + 248));
    }
    else
    {
      v38 = *(_OWORD *)(v27 + 240);
      *(_QWORD *)&v54[1] = *(_QWORD *)(v27 + 256);
      v54[0] = v38;
    }
    if (*(char *)(v27 + 287) < 0)
    {
      sub_18D077798((_BYTE *)&v54[1] + 8, *(void **)(v27 + 264), *(_QWORD *)(v27 + 272));
    }
    else
    {
      v39 = *(_OWORD *)(v27 + 264);
      *((_QWORD *)&v54[2] + 1) = *(_QWORD *)(v27 + 280);
      *(_OWORD *)((char *)&v54[1] + 8) = v39;
    }
  }
  else
  {
    LOWORD(v56.__vftable) = 3;
    v55 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, &v55, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v41 = 0uLL;
    v44 = 0uLL;
    v47 = 0uLL;
    v50 = 0uLL;
    v51 = 0u;
    *(_OWORD *)&v53[16] = 0u;
    memset(v54, 0, sizeof(v54));
    v40 = &off_1E25C8900;
    v42 = 0uLL;
    v45 = 0uLL;
    v48 = 0uLL;
    *(_QWORD *)&v51 = 0;
    BYTE8(v51) = 0;
    v52 = 0uLL;
    v43 = 0uLL;
    v46 = 0uLL;
    v49 = 0uLL;
    *(_QWORD *)&v53[16] = 0xBFF0000000000000;
    *(int64x2_t *)v53 = vdupq_n_s64(0x7FF8000000000000uLL);
    sub_18D0778AC(v54, "");
    sub_18D0778AC((_QWORD *)&v54[1] + 1, "");
  }
  trackrun::TrackRunEngineActiveObject::HandleEvent(v9, (const trackrun::VisitEvent *)&v40);
  trackrun::VisitEvent::~VisitEvent((void **)&v40);
}

void sub_18D2F4BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2F4BE4(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8AF8))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2F4C20()
{
  return &unk_1E25B8AF8;
}

void sub_18D2F4C30()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2F4C44()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CC940;
  return result;
}

void sub_18D2F4C68(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CC940;
}

void sub_18D2F4C80(int a1, trackrun::TrackRunEngineActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  trackrun::TrackRunEngineActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::bad_cast v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unsigned __int8 v36;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N8trackrun15WatchStateEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N8trackrun15WatchStateEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C8960;
    v28 = *(_OWORD *)(v27 + 16);
    v29 = *(_OWORD *)(v27 + 32);
    v30 = *(_OWORD *)(v27 + 48);
    LOWORD(v35) = *(_WORD *)(v27 + 64);
    v33 = v29;
    v34 = v30;
    v32 = v28;
  }
  else
  {
    LOWORD(v31.__vftable) = 3;
    v36 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v36, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v32 = 0u;
    v35 = 0;
    v31.__vftable = (std::bad_cast_vtbl *)&unk_1E25C8960;
    v33 = 0uLL;
    v34 = 0uLL;
  }
  trackrun::TrackRunEngineActiveObject::HandleEvent(v9, (const trackrun::WatchStateEvent *)&v31);
}

void sub_18D2F4DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F4DEC(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8B18))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2F4E28()
{
  return &unk_1E25B8B18;
}

void sub_18D2F4E38()
{
  JUMPOUT(0x18D78B5D4);
}

_QWORD *sub_18D2F4E4C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E25CCA48;
  return result;
}

void sub_18D2F4E70(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E25CCA48;
}

void sub_18D2F4E88(int a1, trackrun::TrackRunEngineActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  trackrun::TrackRunEngineActiveObject *v9;
  uint64_t EventType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void (**v37)(trackrun::WorkoutSessionEvent *__hidden);
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *__p[4];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned __int8 v51;
  std::bad_cast v52;

  v9 = *a2;
  EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    v18 = *((_QWORD *)this + 2);
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v19 = MEMORY[0x1E0DE4F20];
    v26 = (const char *)(*(_QWORD *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)"N8trackrun19WorkoutSessionEventE" & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)"N8trackrun19WorkoutSessionEventE" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v52.__vftable = 0;
      std::bad_cast::bad_cast(&v52);
      v52.__vftable = (std::bad_cast_vtbl *)&unk_1E25C1410;
      sub_18D20CF7C();
    }
    v27 = *((_QWORD *)this + 2);
    v37 = off_1E25C8A88;
    v29 = *(_OWORD *)(v27 + 32);
    v28 = *(_OWORD *)(v27 + 48);
    v38 = *(_OWORD *)(v27 + 16);
    v39 = v29;
    v40 = v28;
    LOWORD(__p[0]) = *(_WORD *)(v27 + 64);
    if (*(char *)(v27 + 95) < 0)
    {
      sub_18D077798(&__p[1], *(void **)(v27 + 72), *(_QWORD *)(v27 + 80));
    }
    else
    {
      v30 = *(_OWORD *)(v27 + 72);
      __p[3] = *(void **)(v27 + 88);
      *(_OWORD *)&__p[1] = v30;
    }
    v42 = *(_OWORD *)(v27 + 96);
    v31 = *(_OWORD *)(v27 + 112);
    v32 = *(_OWORD *)(v27 + 128);
    v33 = *(_OWORD *)(v27 + 144);
    v46 = *(_OWORD *)(v27 + 160);
    v45 = v33;
    v43 = v31;
    v44 = v32;
    v34 = *(_OWORD *)(v27 + 176);
    v35 = *(_OWORD *)(v27 + 192);
    v36 = *(_OWORD *)(v27 + 208);
    v50 = *(_OWORD *)(v27 + 224);
    v49 = v36;
    v48 = v35;
    v47 = v34;
  }
  else
  {
    LOWORD(v52.__vftable) = 3;
    v51 = 5;
    v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(_BYTE *)(v20 + 8));
    v38 = 0uLL;
    memset(__p, 0, sizeof(__p));
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v37 = off_1E25C8A88;
    v39 = 0uLL;
    v40 = 0uLL;
    LOWORD(__p[0]) = 0;
    sub_18D0778AC(&__p[1], "");
    LOBYTE(v42) = 0;
    *((_QWORD *)&v42 + 1) = 0;
    *(_QWORD *)&v43 = 0;
    BYTE8(v43) = 0;
    *((_QWORD *)&v45 + 1) = 0;
    *(_QWORD *)&v46 = 0;
    BYTE8(v46) = 0;
    *((_QWORD *)&v48 + 1) = 0;
    *(_QWORD *)&v49 = 0;
    BYTE8(v49) = 0;
    v50 = 0uLL;
    v44 = 0uLL;
    LOBYTE(v45) = 0;
    LOBYTE(v48) = 0;
    v47 = 0uLL;
  }
  trackrun::TrackRunEngineActiveObject::HandleEvent(v9, (const trackrun::WorkoutSessionEvent *)&v37);
  v37 = off_1E25C8A88;
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
}

void sub_18D2F50C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::exception::~exception((std::exception *)(v25 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F50F8(uint64_t a1, uint64_t a2)
{
  if (sub_18D07C81C(a2, (uint64_t)&unk_1E25B8B48))
    return a1 + 8;
  else
    return 0;
}

void *sub_18D2F5134()
{
  return &unk_1E25B8B48;
}

uint64_t sub_18D2F5140(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 8) = off_1E25C8B58;
  v3 = (void **)(a1 + 16);
  sub_18D2DC5D8(&v3);
  return a1;
}

void sub_18D2F5188(uint64_t a1)
{
  void **v1;

  *(_QWORD *)(a1 + 8) = off_1E25C8B58;
  v1 = (void **)(a1 + 16);
  sub_18D2DC5D8(&v1);
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2F51E0()
{
}

uint64_t sub_18D2F51EC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1F60;
  *(_QWORD *)(v2 + 8) = off_1E25C8B58;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  sub_18D2E8330((_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_BYTE *)(v2 + 88) = *(_BYTE *)(a1 + 88);
  return v2;
}

void sub_18D2F528C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x10A1C40B05C3A1DLL);
  _Unwind_Resume(a1);
}

void sub_18D2F52B4()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2F52C8()
{
}

__n128 sub_18D2F52D4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1E70;
  *(_QWORD *)(v2 + 8) = &unk_1E25C8930;
  v3 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v2 + 192) = v3;
  *(_OWORD *)(v2 + 208) = *(_OWORD *)(a1 + 208);
  v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 128) = v4;
  v5 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v2 + 160) = v5;
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 64) = v6;
  v7 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 96) = v7;
  result = *(__n128 *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(v2 + 32) = result;
  return result;
}

void sub_18D2F535C()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2F5370()
{
}

__n128 sub_18D2F537C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1ED0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C8990;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v3;
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 64) = *(_BYTE *)(a1 + 64);
  return result;
}

uint64_t sub_18D2F53E0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = off_1E25C1F30;
  *(_QWORD *)(a1 + 8) = off_1E25C8A88;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 56);
  v6 = a1 + 72;
  if (*(char *)(a2 + 87) < 0)
  {
    sub_18D077798((_BYTE *)v6, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v6 = v7;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v9;
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 224) = v13;
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v12;
  return a1;
}

uint64_t sub_18D2F549C(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = off_1E25C8A88;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  return a1;
}

void sub_18D2F54DC(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = off_1E25C8A88;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2F552C()
{
}

uint64_t sub_18D2F5538(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_18D2F53E0(v2, a1 + 8);
  return v2;
}

void sub_18D2F557C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1093C40A5554E92);
  _Unwind_Resume(a1);
}

uint64_t sub_18D2F55A0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;

  *(_QWORD *)a1 = &off_1E25C1E40;
  *(_QWORD *)(a1 + 8) = &off_1E25C8900;
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  v8 = *(_OWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v9;
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 218) = *(_OWORD *)(a2 + 210);
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 176) = v11;
  if (*(char *)(a2 + 255) < 0)
  {
    sub_18D077798((_BYTE *)(a1 + 240), *(void **)(a2 + 232), *(_QWORD *)(a2 + 240));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 240) = v14;
  }
  v15 = (_BYTE *)(a1 + 264);
  if (*(char *)(a2 + 279) < 0)
  {
    sub_18D077798(v15, *(void **)(a2 + 256), *(_QWORD *)(a2 + 264));
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)v15 = v16;
  }
  return a1;
}

void sub_18D2F5698(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 263) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18D2F56B4(uint64_t a1)
{
  trackrun::VisitEvent::~VisitEvent((void **)(a1 + 8));
  return a1;
}

void sub_18D2F56DC(uint64_t a1)
{
  trackrun::VisitEvent::~VisitEvent((void **)(a1 + 8));
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2F5714()
{
}

uint64_t sub_18D2F5720(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_18D2F55A0(v2, a1 + 8);
  return v2;
}

void sub_18D2F5764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D78B5D4](v1, 0x1093C4054D318A0);
  _Unwind_Resume(a1);
}

void sub_18D2F578C()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2F57A0()
{
}

__n128 sub_18D2F57AC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1F00;
  *(_QWORD *)(v2 + 8) = &unk_1E25C89C0;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v3;
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 64) = *(_BYTE *)(a1 + 64);
  return result;
}

void sub_18D2F5814()
{
  JUMPOUT(0x18D78B5D4);
}

void *sub_18D2F5828()
{
}

__n128 sub_18D2F5834(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E25C1EA0;
  *(_QWORD *)(v2 + 8) = &unk_1E25C8960;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 32) = v3;
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(v2 + 48) = result;
  *(_WORD *)(v2 + 64) = *(_WORD *)(a1 + 64);
  return result;
}

uint64_t trackrun::RunningTrackData::RunningTrackLane::PopulateLaneLength(uint64_t this, double a2, double a3, double a4)
{
  double *v4;
  double *v5;
  char v6;
  double v7;
  double v8;
  double v9;

  v4 = *(double **)this;
  v5 = *(double **)(this + 8);
  if (*(double **)this != v5)
  {
    v6 = 1;
    v7 = 0.0;
    v8 = 0.0;
    do
    {
      v9 = *v4;
      if ((v6 & 1) == 0)
        v7 = v7 + sqrt((v8 - v9) * (v8 - v9) + 0.0 + (a4 - v4[1]) * (a4 - v4[1]));
      a4 = v4[1];
      v6 = 0;
      v4 += 2;
      v8 = v9;
    }
    while (v4 != v5);
    if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v7 > 0.0)
    {
      *(double *)(this + 32) = v7;
      *(_BYTE *)(this + 40) = 1;
    }
  }
  return this;
}

_QWORD *trackrun::RunningTrackData::RunningTrack::PopulateLaneCountFromLaneGeometry(_QWORD *this)
{
  uint64_t v1;

  v1 = this[6] - this[5];
  if (v1)
    this[12] = 0x8E38E38E38E38E39 * (v1 >> 3);
  return this;
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(wireless_diagnostics::google::protobuf::MessageLite *this, const void *a2)
{
  return MEMORY[0x1E0DE8200](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::ParseFromString()
{
  return MEMORY[0x1E0DE8208]();
}

void wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  MEMORY[0x1E0DE8210](this);
}

uint64_t wireless_diagnostics::google::protobuf::GoogleOnceInitImpl()
{
  return MEMORY[0x1E0DE8218]();
}

uint64_t wireless_diagnostics::google::protobuf::io::ArrayInputStream::ArrayInputStream(wireless_diagnostics::google::protobuf::io::ArrayInputStream *this, const void *a2)
{
  return MEMORY[0x1E0DE8220](this, a2);
}

void wireless_diagnostics::google::protobuf::io::ArrayInputStream::~ArrayInputStream(wireless_diagnostics::google::protobuf::io::ArrayInputStream *this)
{
  MEMORY[0x1E0DE8228](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8230](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x1E0DE8238](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return MEMORY[0x1E0DE8240](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x1E0DE8250](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return MEMORY[0x1E0DE8258](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8260](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8268](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8270](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8278](this);
}

void wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  MEMORY[0x1E0DE8280](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::ArrayOutputStream::ArrayOutputStream(wireless_diagnostics::google::protobuf::io::ArrayOutputStream *this, void *a2)
{
  return MEMORY[0x1E0DE8288](this, a2);
}

void wireless_diagnostics::google::protobuf::io::ArrayOutputStream::~ArrayOutputStream(wireless_diagnostics::google::protobuf::io::ArrayOutputStream *this)
{
  MEMORY[0x1E0DE8290](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE8298](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE82A0](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE82A8](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE82B0](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE82B8](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream()
{
  return MEMORY[0x1E0DE82D0]();
}

void wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  MEMORY[0x1E0DE82D8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage()
{
  return MEMORY[0x1E0DE82E0]();
}

void wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage(wireless_diagnostics::google::protobuf::internal::LogMessage *this)
{
  MEMORY[0x1E0DE82E8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<()
{
  return MEMORY[0x1E0DE82F0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::OnShutdown(wireless_diagnostics::google::protobuf::internal *this, void (*a2)(void))
{
  return MEMORY[0x1E0DE82F8](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=()
{
  return MEMORY[0x1E0DE8300]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::ParseField(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedInputStream *a3, const wireless_diagnostics::google::protobuf::MessageLite *a4)
{
  return MEMORY[0x1E0DE8308](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::Swap(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this, wireless_diagnostics::google::protobuf::internal::ExtensionSet *a2)
{
  return MEMORY[0x1E0DE8310](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::Clear(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this)
{
  return MEMORY[0x1E0DE8318](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::MergeFrom(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this, const wireless_diagnostics::google::protobuf::internal::ExtensionSet *a2)
{
  return MEMORY[0x1E0DE8320](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::ExtensionSet(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this)
{
  return MEMORY[0x1E0DE8328](this);
}

void wireless_diagnostics::google::protobuf::internal::ExtensionSet::~ExtensionSet(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this)
{
  MEMORY[0x1E0DE8330](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::VerifyVersion(wireless_diagnostics::google::protobuf::internal *this, uint64_t a2, uint64_t a3, const char *a4)
{
  return MEMORY[0x1E0DE8340](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString()
{
  return MEMORY[0x1E0DE8348]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes()
{
  return MEMORY[0x1E0DE8350]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, float a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8358](this, a2, a4, a3);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8360](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8368](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, double a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8370](this, a2, a4, a3);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8378](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString()
{
  return MEMORY[0x1E0DE8380]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8388](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8390](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83A0](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, const wireless_diagnostics::google::protobuf::MessageLite *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83A8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes()
{
  return MEMORY[0x1E0DE83B8]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  return MEMORY[0x1E0DE83C0](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83C8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83D0](this, a2, a3, a4);
}

void wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0(wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *this)
{
  MEMORY[0x1E0DE83D8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap()
{
  return MEMORY[0x1E0DE83E0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  return MEMORY[0x1E0DE83E8](this);
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::SerializeToString()
{
  return MEMORY[0x1E0DE8408]();
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::SerializeToCodedStream(wireless_diagnostics::google::protobuf::MessageLite *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2)
{
  return MEMORY[0x1E0DE8410](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8418](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::IsInitialized(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this)
{
  return MEMORY[0x1E0DE8420](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::SerializeWithCachedSizes(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8428](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::ByteSize(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this)
{
  return MEMORY[0x1E0DE8430](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1E0DE41C8](this, __c, __pos);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

BOOL std::locale::operator==(const std::locale *this, const std::locale *a2)
{
  return MEMORY[0x1E0DE4250](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

uint64_t std::time_put<char,std::ostreambuf_iterator<char>>::put()
{
  return MEMORY[0x1E0DE4268]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4290](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4298](this, a2);
}

void std::logic_error::~logic_error(std::logic_error *this)
{
  MEMORY[0x1E0DE42A8](this);
}

void std::domain_error::~domain_error(std::domain_error *this)
{
  MEMORY[0x1E0DE42C0](this);
}

{
  MEMORY[0x1E0DE42C8](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4328](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4340](this);
}

void std::overflow_error::~overflow_error(std::overflow_error *this)
{
  MEMORY[0x1E0DE4350](this);
}

{
  MEMORY[0x1E0DE4358](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

void std::timed_mutex::unlock(std::timed_mutex *this)
{
  MEMORY[0x1E0DE43C8](this);
}

std::timed_mutex *__cdecl std::timed_mutex::timed_mutex(std::timed_mutex *this)
{
  return (std::timed_mutex *)MEMORY[0x1E0DE43D0](this);
}

void std::timed_mutex::~timed_mutex(std::timed_mutex *this)
{
  MEMORY[0x1E0DE43D8](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1E0DE4490](this, __pos, __n1, __s, __n2);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1E0DE4598]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x1E0DE45C0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4620]();
}

{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4638]();
}

{
  return MEMORY[0x1E0DE4640]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE46F0]();
}

{
  return MEMORY[0x1E0DE46F8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4720]();
}

{
  return MEMORY[0x1E0DE4730]();
}

{
  return MEMORY[0x1E0DE4738]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x1E0DE47B0]();
}

{
  return MEMORY[0x1E0DE47B8]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x1E0DE47D0](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x1E0DE47D8](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4820](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4828](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x1E0DE4838](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4840](this);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x1E0DE4890](this);
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
  MEMORY[0x1E0DE48A0](this, __lk, a3.__d_.__rep_);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x1E0DE48A8](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x1E0DE48B0](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x1E0DE4908]();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x1E0DE4920](*(_QWORD *)&__ev, __what_arg);
}

double std::stod(const std::string *__str, size_t *__idx)
{
  double result;

  MEMORY[0x1E0DE4A68](__str, __idx);
  return result;
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A78](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x1E0DE4AB0](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4AC8](__str, __idx, *(_QWORD *)&__base);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1E0DE4B48]();
}

const std::locale *std::locale::classic(void)
{
  return (const std::locale *)MEMORY[0x1E0DE4B78]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1E0DE4BA0](this, a2);
}

void std::thread::join(std::thread *this)
{
  MEMORY[0x1E0DE4BB8](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x1E0DE4BC8](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  return (std::locale)MEMORY[0x1E0DE4C88](this, __loc);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1E0DE4D40](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x1E0DE4D98](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
  MEMORY[0x1E0DE4DA8](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E25B0AD8();
}

void operator delete(void *__p)
{
  off_1E25B0AE0(__p);
}

uint64_t operator delete()
{
  return off_1E25B0AE8();
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E25B0AF0(__sz, a2);
}

uint64_t operator new[]()
{
  return off_1E25B0AF8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E25B0B00(__sz);
}

uint64_t operator new()
{
  return off_1E25B0B08();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x1E0DE50A8](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x1E0C81658](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

uint64_t atoll(const char *a1)
{
  return MEMORY[0x1E0C81688](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void cblas_dgemm(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const CBLAS_TRANSPOSE __TransB, const int __M, const int __N, const int __K, const double __alpha, const double *__A, const int __lda, const double *__B, const int __ldb, const double __beta, double *__C, const int __ldc)
{
  MEMORY[0x1E0C8BB48](*(_QWORD *)&__Order, *(_QWORD *)&__TransA, *(_QWORD *)&__TransB, *(_QWORD *)&__M, *(_QWORD *)&__N, *(_QWORD *)&__K, __A, *(_QWORD *)&__lda, __alpha, __beta);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

long double cosh(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B50](__x);
  return result;
}

int dgecon_(char *__norm, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__anorm, __CLPK_doublereal *__rcond, __CLPK_doublereal *__work, __CLPK_integer *__iwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BCA0](__norm, __n, __a, __lda, __anorm, __rcond, __work, __iwork);
}

int dgeevx_(char *__balanc, char *__jobvl, char *__jobvr, char *__sense, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__wr, __CLPK_doublereal *__wi, __CLPK_doublereal *__vl, __CLPK_integer *__ldvl, __CLPK_doublereal *__vr, __CLPK_integer *__ldvr, __CLPK_integer *__ilo, __CLPK_integer *__ihi, __CLPK_doublereal *__scale, __CLPK_doublereal *__abnrm, __CLPK_doublereal *__rconde, __CLPK_doublereal *__rcondv, __CLPK_doublereal *__work,__CLPK_integer *__lwork,__CLPK_integer *__iwork,__CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BCB8](__balanc, __jobvl, __jobvr, __sense, __n, __a, __lda, __wr);
}

int dgeqrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BCD8](__m, __n, __a, __lda, __tau, __work, __lwork, __info);
}

int dgesvd_(char *__jobu, char *__jobvt, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__s, __CLPK_doublereal *__u, __CLPK_integer *__ldu, __CLPK_doublereal *__vt, __CLPK_integer *__ldvt, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BD10](__jobu, __jobvt, __m, __n, __a, __lda, __s, __u);
}

int dgetrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BD20](__m, __n, __a, __lda, __ipiv, __info);
}

int dgetri_(__CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BD30](__n, __a, __lda, __ipiv, __work, __lwork, __info);
}

int dormqr_(char *__side, char *__trans, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__tau, __CLPK_doublereal *__c__, __CLPK_integer *__ldc, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BD58](__side, __trans, __m, __n, __k, __a, __lda, __tau);
}

int dpotrf_(char *__uplo, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BD68](__uplo, __n, __a, __lda, __info);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1E0C83340](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1E0C833A0](a1, *(_QWORD *)&a2, a3);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

long double frexp(long double __x, int *__e)
{
  long double result;

  MEMORY[0x1E0C834E8](__e, __x);
  return result;
}

int fscanf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83520](a1, a2);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return (passwd *)MEMORY[0x1E0C837A0](*(_QWORD *)&a1);
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1E0C83980](*(_QWORD *)&a1, a2);
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x1E0C83B40](*(_QWORD *)&__e, __x);
  return result;
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1E0C83BA8](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log1pl(long double a1)
{
  long double result;

  MEMORY[0x1E0C83BE0](a1);
  return result;
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

long double nextafter(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C843A8](__x, __y);
  return result;
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C85040](a1, a2);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1E0C850B8](__p, __ec);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

void srand(unsigned int a1)
{
  MEMORY[0x1E0C85478](*(_QWORD *)&a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return (char *)MEMORY[0x1E0C85648](__str, __sep);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

